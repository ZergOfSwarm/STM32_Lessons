
Modbus_slave_103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e4c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  08002f58  08002f58  00012f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003204  08003204  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08003204  08003204  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003204  08003204  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003204  08003204  00013204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003208  08003208  00013208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800320c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  2000008c  08003298  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08003298  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d5fb  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ec1  00000000  00000000  0002d6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  0002f578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba8  00000000  00000000  000301e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017803  00000000  00000000  00030d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dfc6  00000000  00000000  00048593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000896b8  00000000  00000000  00056559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dfc11  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003330  00000000  00000000  000dfc64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000008c 	.word	0x2000008c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f40 	.word	0x08002f40

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000090 	.word	0x20000090
 8000148:	08002f40 	.word	0x08002f40

0800014c <HAL_UARTEx_RxEventCallback>:
/* USER CODE BEGIN 0 */
uint8_t RxData[256];
uint8_t TxData[256];

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	807b      	strh	r3, [r7, #2]
	if (RxData[0] == SLAVE_ID)
 8000158:	4b26      	ldr	r3, [pc, #152]	; (80001f4 <HAL_UARTEx_RxEventCallback+0xa8>)
 800015a:	781b      	ldrb	r3, [r3, #0]
 800015c:	2b07      	cmp	r3, #7
 800015e:	d13d      	bne.n	80001dc <HAL_UARTEx_RxEventCallback+0x90>
	{
		switch (RxData[1]){
 8000160:	4b24      	ldr	r3, [pc, #144]	; (80001f4 <HAL_UARTEx_RxEventCallback+0xa8>)
 8000162:	785b      	ldrb	r3, [r3, #1]
 8000164:	3b01      	subs	r3, #1
 8000166:	2b0f      	cmp	r3, #15
 8000168:	d834      	bhi.n	80001d4 <HAL_UARTEx_RxEventCallback+0x88>
 800016a:	a201      	add	r2, pc, #4	; (adr r2, 8000170 <HAL_UARTEx_RxEventCallback+0x24>)
 800016c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000170:	080001bd 	.word	0x080001bd
 8000174:	080001c3 	.word	0x080001c3
 8000178:	080001b1 	.word	0x080001b1
 800017c:	080001b7 	.word	0x080001b7
 8000180:	080001d5 	.word	0x080001d5
 8000184:	080001c9 	.word	0x080001c9
 8000188:	080001d5 	.word	0x080001d5
 800018c:	080001d5 	.word	0x080001d5
 8000190:	080001d5 	.word	0x080001d5
 8000194:	080001d5 	.word	0x080001d5
 8000198:	080001d5 	.word	0x080001d5
 800019c:	080001d5 	.word	0x080001d5
 80001a0:	080001d5 	.word	0x080001d5
 80001a4:	080001d5 	.word	0x080001d5
 80001a8:	080001d5 	.word	0x080001d5
 80001ac:	080001cf 	.word	0x080001cf
		case 0x03:
			readHoldingRegs();
 80001b0:	f000 f95c 	bl	800046c <readHoldingRegs>
			break;
 80001b4:	e013      	b.n	80001de <HAL_UARTEx_RxEventCallback+0x92>
		case 0x04:
			readInputRegs();
 80001b6:	f000 f9cb 	bl	8000550 <readInputRegs>
			break;
 80001ba:	e010      	b.n	80001de <HAL_UARTEx_RxEventCallback+0x92>
		case 0x01:
			readCoils();
 80001bc:	f000 fa3a 	bl	8000634 <readCoils>
			break;
 80001c0:	e00d      	b.n	80001de <HAL_UARTEx_RxEventCallback+0x92>
		case 0x02:
			readInputs();
 80001c2:	f000 fae5 	bl	8000790 <readInputs>
			break;
 80001c6:	e00a      	b.n	80001de <HAL_UARTEx_RxEventCallback+0x92>
		case 0x06:
			writeSingleReg();
 80001c8:	f000 fc0a 	bl	80009e0 <writeSingleReg>
			break;
 80001cc:	e007      	b.n	80001de <HAL_UARTEx_RxEventCallback+0x92>
		case 0x10:
			writeHoldingRegs();
 80001ce:	f000 fb8d 	bl	80008ec <writeHoldingRegs>
			break;
 80001d2:	e004      	b.n	80001de <HAL_UARTEx_RxEventCallback+0x92>
		default:
			modbusException(ILLEGAL_FUNCTION);
 80001d4:	2001      	movs	r0, #1
 80001d6:	f000 f929 	bl	800042c <modbusException>
			break;
 80001da:	e000      	b.n	80001de <HAL_UARTEx_RxEventCallback+0x92>
		}
	}
 80001dc:	bf00      	nop

	HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, 256);
 80001de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001e2:	4904      	ldr	r1, [pc, #16]	; (80001f4 <HAL_UARTEx_RxEventCallback+0xa8>)
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <HAL_UARTEx_RxEventCallback+0xac>)
 80001e6:	f002 f8a4 	bl	8002332 <HAL_UARTEx_ReceiveToIdle_IT>
}
 80001ea:	bf00      	nop
 80001ec:	3708      	adds	r7, #8
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	200000f0 	.word	0x200000f0
 80001f8:	200000a8 	.word	0x200000a8

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000200:	f000 fdda 	bl	8000db8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000204:	f000 f810 	bl	8000228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000208:	f000 f87e 	bl	8000308 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800020c:	f000 f852 	bl	80002b4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, 256);
 8000210:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000214:	4902      	ldr	r1, [pc, #8]	; (8000220 <main+0x24>)
 8000216:	4803      	ldr	r0, [pc, #12]	; (8000224 <main+0x28>)
 8000218:	f002 f88b 	bl	8002332 <HAL_UARTEx_ReceiveToIdle_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800021c:	e7fe      	b.n	800021c <main+0x20>
 800021e:	bf00      	nop
 8000220:	200000f0 	.word	0x200000f0
 8000224:	200000a8 	.word	0x200000a8

08000228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b090      	sub	sp, #64	; 0x40
 800022c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022e:	f107 0318 	add.w	r3, r7, #24
 8000232:	2228      	movs	r2, #40	; 0x28
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f002 fe7a 	bl	8002f30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	2200      	movs	r2, #0
 8000240:	601a      	str	r2, [r3, #0]
 8000242:	605a      	str	r2, [r3, #4]
 8000244:	609a      	str	r2, [r3, #8]
 8000246:	60da      	str	r2, [r3, #12]
 8000248:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800024a:	2301      	movs	r3, #1
 800024c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800024e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000252:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000254:	2300      	movs	r3, #0
 8000256:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000258:	2301      	movs	r3, #1
 800025a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800025c:	2302      	movs	r3, #2
 800025e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000260:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000264:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000266:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800026a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026c:	f107 0318 	add.w	r3, r7, #24
 8000270:	4618      	mov	r0, r3
 8000272:	f001 f901 	bl	8001478 <HAL_RCC_OscConfig>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800027c:	f000 f896 	bl	80003ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000280:	230f      	movs	r3, #15
 8000282:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000284:	2302      	movs	r3, #2
 8000286:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800028c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000290:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000292:	2300      	movs	r3, #0
 8000294:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	2102      	movs	r1, #2
 800029a:	4618      	mov	r0, r3
 800029c:	f001 fb6e 	bl	800197c <HAL_RCC_ClockConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002a6:	f000 f881 	bl	80003ac <Error_Handler>
  }
}
 80002aa:	bf00      	nop
 80002ac:	3740      	adds	r7, #64	; 0x40
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
	...

080002b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002b8:	4b11      	ldr	r3, [pc, #68]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002ba:	4a12      	ldr	r2, [pc, #72]	; (8000304 <MX_USART1_UART_Init+0x50>)
 80002bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002be:	4b10      	ldr	r3, [pc, #64]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002c6:	4b0e      	ldr	r3, [pc, #56]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002cc:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002d2:	4b0b      	ldr	r3, [pc, #44]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002d8:	4b09      	ldr	r3, [pc, #36]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002da:	220c      	movs	r2, #12
 80002dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002de:	4b08      	ldr	r3, [pc, #32]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002e4:	4b06      	ldr	r3, [pc, #24]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002ea:	4805      	ldr	r0, [pc, #20]	; (8000300 <MX_USART1_UART_Init+0x4c>)
 80002ec:	f001 ff4e 	bl	800218c <HAL_UART_Init>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002f6:	f000 f859 	bl	80003ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002fa:	bf00      	nop
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	200000a8 	.word	0x200000a8
 8000304:	40013800 	.word	0x40013800

08000308 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b086      	sub	sp, #24
 800030c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800030e:	f107 0308 	add.w	r3, r7, #8
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]
 8000318:	609a      	str	r2, [r3, #8]
 800031a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800031c:	4b18      	ldr	r3, [pc, #96]	; (8000380 <MX_GPIO_Init+0x78>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	4a17      	ldr	r2, [pc, #92]	; (8000380 <MX_GPIO_Init+0x78>)
 8000322:	f043 0320 	orr.w	r3, r3, #32
 8000326:	6193      	str	r3, [r2, #24]
 8000328:	4b15      	ldr	r3, [pc, #84]	; (8000380 <MX_GPIO_Init+0x78>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	f003 0320 	and.w	r3, r3, #32
 8000330:	607b      	str	r3, [r7, #4]
 8000332:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000334:	4b12      	ldr	r3, [pc, #72]	; (8000380 <MX_GPIO_Init+0x78>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	4a11      	ldr	r2, [pc, #68]	; (8000380 <MX_GPIO_Init+0x78>)
 800033a:	f043 0304 	orr.w	r3, r3, #4
 800033e:	6193      	str	r3, [r2, #24]
 8000340:	4b0f      	ldr	r3, [pc, #60]	; (8000380 <MX_GPIO_Init+0x78>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	f003 0304 	and.w	r3, r3, #4
 8000348:	603b      	str	r3, [r7, #0]
 800034a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 800034c:	2200      	movs	r2, #0
 800034e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000352:	480c      	ldr	r0, [pc, #48]	; (8000384 <MX_GPIO_Init+0x7c>)
 8000354:	f001 f878 	bl	8001448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TX_EN_Pin */
  GPIO_InitStruct.Pin = TX_EN_Pin;
 8000358:	f44f 7380 	mov.w	r3, #256	; 0x100
 800035c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800035e:	2301      	movs	r3, #1
 8000360:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000362:	2300      	movs	r3, #0
 8000364:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000366:	2302      	movs	r3, #2
 8000368:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TX_EN_GPIO_Port, &GPIO_InitStruct);
 800036a:	f107 0308 	add.w	r3, r7, #8
 800036e:	4619      	mov	r1, r3
 8000370:	4804      	ldr	r0, [pc, #16]	; (8000384 <MX_GPIO_Init+0x7c>)
 8000372:	f000 fee5 	bl	8001140 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000376:	bf00      	nop
 8000378:	3718      	adds	r7, #24
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	40021000 	.word	0x40021000
 8000384:	40010800 	.word	0x40010800

08000388 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a04      	ldr	r2, [pc, #16]	; (80003a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000396:	4293      	cmp	r3, r2
 8000398:	d101      	bne.n	800039e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800039a:	f000 fd23 	bl	8000de4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800039e:	bf00      	nop
 80003a0:	3708      	adds	r7, #8
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	40000800 	.word	0x40000800

080003ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003b0:	b672      	cpsid	i
}
 80003b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003b4:	e7fe      	b.n	80003b4 <Error_Handler+0x8>
	...

080003b8 <sendData>:
extern uint8_t TxData[256];
extern UART_HandleTypeDef huart1;


void sendData (uint8_t *data, int size)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b084      	sub	sp, #16
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
 80003c0:	6039      	str	r1, [r7, #0]
	// we will calculate the CRC in this function itself
	uint16_t crc = crc16(data, size);
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	b29b      	uxth	r3, r3
 80003c6:	4619      	mov	r1, r3
 80003c8:	6878      	ldr	r0, [r7, #4]
 80003ca:	f000 fb53 	bl	8000a74 <crc16>
 80003ce:	4603      	mov	r3, r0
 80003d0:	81fb      	strh	r3, [r7, #14]
	data[size] = crc&0xFF;   // CRC LOW
 80003d2:	683b      	ldr	r3, [r7, #0]
 80003d4:	687a      	ldr	r2, [r7, #4]
 80003d6:	4413      	add	r3, r2
 80003d8:	89fa      	ldrh	r2, [r7, #14]
 80003da:	b2d2      	uxtb	r2, r2
 80003dc:	701a      	strb	r2, [r3, #0]
	data[size+1] = (crc>>8)&0xFF;  // CRC HIGH
 80003de:	89fb      	ldrh	r3, [r7, #14]
 80003e0:	0a1b      	lsrs	r3, r3, #8
 80003e2:	b299      	uxth	r1, r3
 80003e4:	683b      	ldr	r3, [r7, #0]
 80003e6:	3301      	adds	r3, #1
 80003e8:	687a      	ldr	r2, [r7, #4]
 80003ea:	4413      	add	r3, r2
 80003ec:	b2ca      	uxtb	r2, r1
 80003ee:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_SET);
 80003f0:	2201      	movs	r2, #1
 80003f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003f6:	480b      	ldr	r0, [pc, #44]	; (8000424 <sendData+0x6c>)
 80003f8:	f001 f826 	bl	8001448 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1, data, size+2, 1000);
 80003fc:	683b      	ldr	r3, [r7, #0]
 80003fe:	b29b      	uxth	r3, r3
 8000400:	3302      	adds	r3, #2
 8000402:	b29a      	uxth	r2, r3
 8000404:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000408:	6879      	ldr	r1, [r7, #4]
 800040a:	4807      	ldr	r0, [pc, #28]	; (8000428 <sendData+0x70>)
 800040c:	f001 ff0e 	bl	800222c <HAL_UART_Transmit>
	HAL_GPIO_WritePin(TX_EN_GPIO_Port,TX_EN_Pin , GPIO_PIN_RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000416:	4803      	ldr	r0, [pc, #12]	; (8000424 <sendData+0x6c>)
 8000418:	f001 f816 	bl	8001448 <HAL_GPIO_WritePin>
}
 800041c:	bf00      	nop
 800041e:	3710      	adds	r7, #16
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	40010800 	.word	0x40010800
 8000428:	200000a8 	.word	0x200000a8

0800042c <modbusException>:

void modbusException (uint8_t exceptioncode)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	4603      	mov	r3, r0
 8000434:	71fb      	strb	r3, [r7, #7]
	//| SLAVE_ID | FUNCTION_CODE | Exception code | CRC     |
	//| 1 BYTE   |  1 BYTE       |    1 BYTE      | 2 BYTES |

	TxData[0] = RxData[0];       // slave ID
 8000436:	4b0b      	ldr	r3, [pc, #44]	; (8000464 <modbusException+0x38>)
 8000438:	781a      	ldrb	r2, [r3, #0]
 800043a:	4b0b      	ldr	r3, [pc, #44]	; (8000468 <modbusException+0x3c>)
 800043c:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1]|0x80;  // adding 1 to the MSB of the function code
 800043e:	4b09      	ldr	r3, [pc, #36]	; (8000464 <modbusException+0x38>)
 8000440:	785b      	ldrb	r3, [r3, #1]
 8000442:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000446:	b2da      	uxtb	r2, r3
 8000448:	4b07      	ldr	r3, [pc, #28]	; (8000468 <modbusException+0x3c>)
 800044a:	705a      	strb	r2, [r3, #1]
	TxData[2] = exceptioncode;   // Load the Exception code
 800044c:	4a06      	ldr	r2, [pc, #24]	; (8000468 <modbusException+0x3c>)
 800044e:	79fb      	ldrb	r3, [r7, #7]
 8000450:	7093      	strb	r3, [r2, #2]
	sendData(TxData, 3);         // send Data... CRC will be calculated in the function
 8000452:	2103      	movs	r1, #3
 8000454:	4804      	ldr	r0, [pc, #16]	; (8000468 <modbusException+0x3c>)
 8000456:	f7ff ffaf 	bl	80003b8 <sendData>
}
 800045a:	bf00      	nop
 800045c:	3708      	adds	r7, #8
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	200000f0 	.word	0x200000f0
 8000468:	200001f0 	.word	0x200001f0

0800046c <readHoldingRegs>:


uint8_t readHoldingRegs (void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Register Address
 8000472:	4b34      	ldr	r3, [pc, #208]	; (8000544 <readHoldingRegs+0xd8>)
 8000474:	789b      	ldrb	r3, [r3, #2]
 8000476:	021b      	lsls	r3, r3, #8
 8000478:	b21a      	sxth	r2, r3
 800047a:	4b32      	ldr	r3, [pc, #200]	; (8000544 <readHoldingRegs+0xd8>)
 800047c:	78db      	ldrb	r3, [r3, #3]
 800047e:	b21b      	sxth	r3, r3
 8000480:	4313      	orrs	r3, r2
 8000482:	b21b      	sxth	r3, r3
 8000484:	81fb      	strh	r3, [r7, #14]

	uint16_t numRegs = ((RxData[4]<<8)|RxData[5]);   // number to registers master has requested
 8000486:	4b2f      	ldr	r3, [pc, #188]	; (8000544 <readHoldingRegs+0xd8>)
 8000488:	791b      	ldrb	r3, [r3, #4]
 800048a:	021b      	lsls	r3, r3, #8
 800048c:	b21a      	sxth	r2, r3
 800048e:	4b2d      	ldr	r3, [pc, #180]	; (8000544 <readHoldingRegs+0xd8>)
 8000490:	795b      	ldrb	r3, [r3, #5]
 8000492:	b21b      	sxth	r3, r3
 8000494:	4313      	orrs	r3, r2
 8000496:	b21b      	sxth	r3, r3
 8000498:	807b      	strh	r3, [r7, #2]
	if ((numRegs<1)||(numRegs>125))  // maximum no. of Registers as per the PDF
 800049a:	887b      	ldrh	r3, [r7, #2]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d002      	beq.n	80004a6 <readHoldingRegs+0x3a>
 80004a0:	887b      	ldrh	r3, [r7, #2]
 80004a2:	2b7d      	cmp	r3, #125	; 0x7d
 80004a4:	d904      	bls.n	80004b0 <readHoldingRegs+0x44>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 80004a6:	2003      	movs	r0, #3
 80004a8:	f7ff ffc0 	bl	800042c <modbusException>
		return 0;
 80004ac:	2300      	movs	r3, #0
 80004ae:	e044      	b.n	800053a <readHoldingRegs+0xce>
	}

	uint16_t endAddr = startAddr+numRegs-1;  // end Register
 80004b0:	89fa      	ldrh	r2, [r7, #14]
 80004b2:	887b      	ldrh	r3, [r7, #2]
 80004b4:	4413      	add	r3, r2
 80004b6:	b29b      	uxth	r3, r3
 80004b8:	3b01      	subs	r3, #1
 80004ba:	803b      	strh	r3, [r7, #0]
	if (endAddr>49)  // end Register can not be more than 49 as we only have record of 50 Registers in total
 80004bc:	883b      	ldrh	r3, [r7, #0]
 80004be:	2b31      	cmp	r3, #49	; 0x31
 80004c0:	d904      	bls.n	80004cc <readHoldingRegs+0x60>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 80004c2:	2002      	movs	r0, #2
 80004c4:	f7ff ffb2 	bl	800042c <modbusException>
		return 0;
 80004c8:	2300      	movs	r3, #0
 80004ca:	e036      	b.n	800053a <readHoldingRegs+0xce>
	// Prepare TxData buffer

	//| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

	TxData[0] = SLAVE_ID;  // slave ID
 80004cc:	4b1e      	ldr	r3, [pc, #120]	; (8000548 <readHoldingRegs+0xdc>)
 80004ce:	2207      	movs	r2, #7
 80004d0:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];  // function code
 80004d2:	4b1c      	ldr	r3, [pc, #112]	; (8000544 <readHoldingRegs+0xd8>)
 80004d4:	785a      	ldrb	r2, [r3, #1]
 80004d6:	4b1c      	ldr	r3, [pc, #112]	; (8000548 <readHoldingRegs+0xdc>)
 80004d8:	705a      	strb	r2, [r3, #1]
	TxData[2] = numRegs*2;  // Byte count
 80004da:	887b      	ldrh	r3, [r7, #2]
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	005b      	lsls	r3, r3, #1
 80004e0:	b2da      	uxtb	r2, r3
 80004e2:	4b19      	ldr	r3, [pc, #100]	; (8000548 <readHoldingRegs+0xdc>)
 80004e4:	709a      	strb	r2, [r3, #2]
	int indx = 3;  // we need to keep track of how many bytes has been stored in TxData Buffer
 80004e6:	2303      	movs	r3, #3
 80004e8:	60bb      	str	r3, [r7, #8]

	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 80004ea:	2300      	movs	r3, #0
 80004ec:	607b      	str	r3, [r7, #4]
 80004ee:	e01b      	b.n	8000528 <readHoldingRegs+0xbc>
	{
		TxData[indx++] = (Holding_Registers_Database[startAddr]>>8)&0xFF;  // extract the higher byte
 80004f0:	89fb      	ldrh	r3, [r7, #14]
 80004f2:	4a16      	ldr	r2, [pc, #88]	; (800054c <readHoldingRegs+0xe0>)
 80004f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004f8:	0a1b      	lsrs	r3, r3, #8
 80004fa:	b299      	uxth	r1, r3
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	1c5a      	adds	r2, r3, #1
 8000500:	60ba      	str	r2, [r7, #8]
 8000502:	b2c9      	uxtb	r1, r1
 8000504:	4a10      	ldr	r2, [pc, #64]	; (8000548 <readHoldingRegs+0xdc>)
 8000506:	54d1      	strb	r1, [r2, r3]
		TxData[indx++] = (Holding_Registers_Database[startAddr])&0xFF;   // extract the lower byte
 8000508:	89fb      	ldrh	r3, [r7, #14]
 800050a:	4a10      	ldr	r2, [pc, #64]	; (800054c <readHoldingRegs+0xe0>)
 800050c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000510:	68bb      	ldr	r3, [r7, #8]
 8000512:	1c5a      	adds	r2, r3, #1
 8000514:	60ba      	str	r2, [r7, #8]
 8000516:	b2c9      	uxtb	r1, r1
 8000518:	4a0b      	ldr	r2, [pc, #44]	; (8000548 <readHoldingRegs+0xdc>)
 800051a:	54d1      	strb	r1, [r2, r3]
		startAddr++;  // increment the register address
 800051c:	89fb      	ldrh	r3, [r7, #14]
 800051e:	3301      	adds	r3, #1
 8000520:	81fb      	strh	r3, [r7, #14]
	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	3301      	adds	r3, #1
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	887b      	ldrh	r3, [r7, #2]
 800052a:	687a      	ldr	r2, [r7, #4]
 800052c:	429a      	cmp	r2, r3
 800052e:	dbdf      	blt.n	80004f0 <readHoldingRegs+0x84>
	}

	sendData(TxData, indx);  // send data... CRC will be calculated in the function itself
 8000530:	68b9      	ldr	r1, [r7, #8]
 8000532:	4805      	ldr	r0, [pc, #20]	; (8000548 <readHoldingRegs+0xdc>)
 8000534:	f7ff ff40 	bl	80003b8 <sendData>
	return 1;   // success
 8000538:	2301      	movs	r3, #1
}
 800053a:	4618      	mov	r0, r3
 800053c:	3710      	adds	r7, #16
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	200000f0 	.word	0x200000f0
 8000548:	200001f0 	.word	0x200001f0
 800054c:	20000000 	.word	0x20000000

08000550 <readInputRegs>:

uint8_t readInputRegs (void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Register Address
 8000556:	4b34      	ldr	r3, [pc, #208]	; (8000628 <readInputRegs+0xd8>)
 8000558:	789b      	ldrb	r3, [r3, #2]
 800055a:	021b      	lsls	r3, r3, #8
 800055c:	b21a      	sxth	r2, r3
 800055e:	4b32      	ldr	r3, [pc, #200]	; (8000628 <readInputRegs+0xd8>)
 8000560:	78db      	ldrb	r3, [r3, #3]
 8000562:	b21b      	sxth	r3, r3
 8000564:	4313      	orrs	r3, r2
 8000566:	b21b      	sxth	r3, r3
 8000568:	81fb      	strh	r3, [r7, #14]

	uint16_t numRegs = ((RxData[4]<<8)|RxData[5]);   // number to registers master has requested
 800056a:	4b2f      	ldr	r3, [pc, #188]	; (8000628 <readInputRegs+0xd8>)
 800056c:	791b      	ldrb	r3, [r3, #4]
 800056e:	021b      	lsls	r3, r3, #8
 8000570:	b21a      	sxth	r2, r3
 8000572:	4b2d      	ldr	r3, [pc, #180]	; (8000628 <readInputRegs+0xd8>)
 8000574:	795b      	ldrb	r3, [r3, #5]
 8000576:	b21b      	sxth	r3, r3
 8000578:	4313      	orrs	r3, r2
 800057a:	b21b      	sxth	r3, r3
 800057c:	807b      	strh	r3, [r7, #2]
	if ((numRegs<1)||(numRegs>125))  // maximum no. of Registers as per the PDF
 800057e:	887b      	ldrh	r3, [r7, #2]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d002      	beq.n	800058a <readInputRegs+0x3a>
 8000584:	887b      	ldrh	r3, [r7, #2]
 8000586:	2b7d      	cmp	r3, #125	; 0x7d
 8000588:	d904      	bls.n	8000594 <readInputRegs+0x44>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 800058a:	2003      	movs	r0, #3
 800058c:	f7ff ff4e 	bl	800042c <modbusException>
		return 0;
 8000590:	2300      	movs	r3, #0
 8000592:	e044      	b.n	800061e <readInputRegs+0xce>
	}

	uint16_t endAddr = startAddr+numRegs-1;  // end Register
 8000594:	89fa      	ldrh	r2, [r7, #14]
 8000596:	887b      	ldrh	r3, [r7, #2]
 8000598:	4413      	add	r3, r2
 800059a:	b29b      	uxth	r3, r3
 800059c:	3b01      	subs	r3, #1
 800059e:	803b      	strh	r3, [r7, #0]
	if (endAddr>49)  // end Register can not be more than 49 as we only have record of 50 Registers in total
 80005a0:	883b      	ldrh	r3, [r7, #0]
 80005a2:	2b31      	cmp	r3, #49	; 0x31
 80005a4:	d904      	bls.n	80005b0 <readInputRegs+0x60>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 80005a6:	2002      	movs	r0, #2
 80005a8:	f7ff ff40 	bl	800042c <modbusException>
		return 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	e036      	b.n	800061e <readInputRegs+0xce>
	// Prepare TxData buffer

	//| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

	TxData[0] = SLAVE_ID;  // slave ID
 80005b0:	4b1e      	ldr	r3, [pc, #120]	; (800062c <readInputRegs+0xdc>)
 80005b2:	2207      	movs	r2, #7
 80005b4:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];  // function code
 80005b6:	4b1c      	ldr	r3, [pc, #112]	; (8000628 <readInputRegs+0xd8>)
 80005b8:	785a      	ldrb	r2, [r3, #1]
 80005ba:	4b1c      	ldr	r3, [pc, #112]	; (800062c <readInputRegs+0xdc>)
 80005bc:	705a      	strb	r2, [r3, #1]
	TxData[2] = numRegs*2;  // Byte count
 80005be:	887b      	ldrh	r3, [r7, #2]
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	005b      	lsls	r3, r3, #1
 80005c4:	b2da      	uxtb	r2, r3
 80005c6:	4b19      	ldr	r3, [pc, #100]	; (800062c <readInputRegs+0xdc>)
 80005c8:	709a      	strb	r2, [r3, #2]
	int indx = 3;  // we need to keep track of how many bytes has been stored in TxData Buffer
 80005ca:	2303      	movs	r3, #3
 80005cc:	60bb      	str	r3, [r7, #8]

	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 80005ce:	2300      	movs	r3, #0
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	e01b      	b.n	800060c <readInputRegs+0xbc>
	{
		TxData[indx++] = (Input_Registers_Database[startAddr]>>8)&0xFF;  // extract the higher byte
 80005d4:	89fb      	ldrh	r3, [r7, #14]
 80005d6:	4a16      	ldr	r2, [pc, #88]	; (8000630 <readInputRegs+0xe0>)
 80005d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005dc:	0a1b      	lsrs	r3, r3, #8
 80005de:	b299      	uxth	r1, r3
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	1c5a      	adds	r2, r3, #1
 80005e4:	60ba      	str	r2, [r7, #8]
 80005e6:	b2c9      	uxtb	r1, r1
 80005e8:	4a10      	ldr	r2, [pc, #64]	; (800062c <readInputRegs+0xdc>)
 80005ea:	54d1      	strb	r1, [r2, r3]
		TxData[indx++] = (Input_Registers_Database[startAddr])&0xFF;   // extract the lower byte
 80005ec:	89fb      	ldrh	r3, [r7, #14]
 80005ee:	4a10      	ldr	r2, [pc, #64]	; (8000630 <readInputRegs+0xe0>)
 80005f0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	1c5a      	adds	r2, r3, #1
 80005f8:	60ba      	str	r2, [r7, #8]
 80005fa:	b2c9      	uxtb	r1, r1
 80005fc:	4a0b      	ldr	r2, [pc, #44]	; (800062c <readInputRegs+0xdc>)
 80005fe:	54d1      	strb	r1, [r2, r3]
		startAddr++;  // increment the register address
 8000600:	89fb      	ldrh	r3, [r7, #14]
 8000602:	3301      	adds	r3, #1
 8000604:	81fb      	strh	r3, [r7, #14]
	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	3301      	adds	r3, #1
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	887b      	ldrh	r3, [r7, #2]
 800060e:	687a      	ldr	r2, [r7, #4]
 8000610:	429a      	cmp	r2, r3
 8000612:	dbdf      	blt.n	80005d4 <readInputRegs+0x84>
	}

	sendData(TxData, indx);  // send data... CRC will be calculated in the function itself
 8000614:	68b9      	ldr	r1, [r7, #8]
 8000616:	4805      	ldr	r0, [pc, #20]	; (800062c <readInputRegs+0xdc>)
 8000618:	f7ff fece 	bl	80003b8 <sendData>
	return 1;   // success
 800061c:	2301      	movs	r3, #1
}
 800061e:	4618      	mov	r0, r3
 8000620:	3710      	adds	r7, #16
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	200000f0 	.word	0x200000f0
 800062c:	200001f0 	.word	0x200001f0
 8000630:	08002f58 	.word	0x08002f58

08000634 <readCoils>:

uint8_t readCoils (void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b088      	sub	sp, #32
 8000638:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Coil Address
 800063a:	4b52      	ldr	r3, [pc, #328]	; (8000784 <readCoils+0x150>)
 800063c:	789b      	ldrb	r3, [r3, #2]
 800063e:	021b      	lsls	r3, r3, #8
 8000640:	b21a      	sxth	r2, r3
 8000642:	4b50      	ldr	r3, [pc, #320]	; (8000784 <readCoils+0x150>)
 8000644:	78db      	ldrb	r3, [r3, #3]
 8000646:	b21b      	sxth	r3, r3
 8000648:	4313      	orrs	r3, r2
 800064a:	b21b      	sxth	r3, r3
 800064c:	817b      	strh	r3, [r7, #10]

	uint16_t numCoils = ((RxData[4]<<8)|RxData[5]);   // number to coils master has requested
 800064e:	4b4d      	ldr	r3, [pc, #308]	; (8000784 <readCoils+0x150>)
 8000650:	791b      	ldrb	r3, [r3, #4]
 8000652:	021b      	lsls	r3, r3, #8
 8000654:	b21a      	sxth	r2, r3
 8000656:	4b4b      	ldr	r3, [pc, #300]	; (8000784 <readCoils+0x150>)
 8000658:	795b      	ldrb	r3, [r3, #5]
 800065a:	b21b      	sxth	r3, r3
 800065c:	4313      	orrs	r3, r2
 800065e:	b21b      	sxth	r3, r3
 8000660:	813b      	strh	r3, [r7, #8]
	if ((numCoils<1)||(numCoils>2000))  // maximum no. of coils as per the PDF
 8000662:	893b      	ldrh	r3, [r7, #8]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d003      	beq.n	8000670 <readCoils+0x3c>
 8000668:	893b      	ldrh	r3, [r7, #8]
 800066a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800066e:	d904      	bls.n	800067a <readCoils+0x46>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 8000670:	2003      	movs	r0, #3
 8000672:	f7ff fedb 	bl	800042c <modbusException>
		return 0;
 8000676:	2300      	movs	r3, #0
 8000678:	e080      	b.n	800077c <readCoils+0x148>
	}

	uint16_t endAddr = startAddr+numCoils-1;  // Last coils address
 800067a:	897a      	ldrh	r2, [r7, #10]
 800067c:	893b      	ldrh	r3, [r7, #8]
 800067e:	4413      	add	r3, r2
 8000680:	b29b      	uxth	r3, r3
 8000682:	3b01      	subs	r3, #1
 8000684:	80fb      	strh	r3, [r7, #6]
	if (endAddr>199)  // end coil can not be more than 199 as we only have record of 200 (0-199) coils in total
 8000686:	88fb      	ldrh	r3, [r7, #6]
 8000688:	2bc7      	cmp	r3, #199	; 0xc7
 800068a:	d904      	bls.n	8000696 <readCoils+0x62>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 800068c:	2002      	movs	r0, #2
 800068e:	f7ff fecd 	bl	800042c <modbusException>
		return 0;
 8000692:	2300      	movs	r3, #0
 8000694:	e072      	b.n	800077c <readCoils+0x148>
	}


	//reset TxData buffer
	memset (TxData, '\0', 256);
 8000696:	f44f 7280 	mov.w	r2, #256	; 0x100
 800069a:	2100      	movs	r1, #0
 800069c:	483a      	ldr	r0, [pc, #232]	; (8000788 <readCoils+0x154>)
 800069e:	f002 fc47 	bl	8002f30 <memset>
	// Prepare TxData buffer

	//| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

	TxData[0] = SLAVE_ID;  // slave ID
 80006a2:	4b39      	ldr	r3, [pc, #228]	; (8000788 <readCoils+0x154>)
 80006a4:	2207      	movs	r2, #7
 80006a6:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];  // function code
 80006a8:	4b36      	ldr	r3, [pc, #216]	; (8000784 <readCoils+0x150>)
 80006aa:	785a      	ldrb	r2, [r3, #1]
 80006ac:	4b36      	ldr	r3, [pc, #216]	; (8000788 <readCoils+0x154>)
 80006ae:	705a      	strb	r2, [r3, #1]
	TxData[2] = (numCoils/8) + ((numCoils%8)>0 ? 1:0);  // Byte count
 80006b0:	893b      	ldrh	r3, [r7, #8]
 80006b2:	08db      	lsrs	r3, r3, #3
 80006b4:	b29b      	uxth	r3, r3
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	893a      	ldrh	r2, [r7, #8]
 80006ba:	f002 0207 	and.w	r2, r2, #7
 80006be:	b292      	uxth	r2, r2
 80006c0:	2a00      	cmp	r2, #0
 80006c2:	bf14      	ite	ne
 80006c4:	2201      	movne	r2, #1
 80006c6:	2200      	moveq	r2, #0
 80006c8:	b2d2      	uxtb	r2, r2
 80006ca:	4413      	add	r3, r2
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <readCoils+0x154>)
 80006d0:	709a      	strb	r2, [r3, #2]
	int indx = 3;  // we need to keep track of how many bytes has been stored in TxData Buffer
 80006d2:	2303      	movs	r3, #3
 80006d4:	61fb      	str	r3, [r7, #28]
	 * Then we will keep shifting the database[1] to the right and read the bits.
	 * Once the bitposition has crossed the value 7, we will increment the startbyte
	 * When the indxposition exceeds 7, we increment the indx variable, so to copy into the next byte of the TxData
	 * This keeps going until the number of coils required have been copied
	 */
	int startByte = startAddr/8;  // which byte we have to start extracting the data from
 80006d6:	897b      	ldrh	r3, [r7, #10]
 80006d8:	08db      	lsrs	r3, r3, #3
 80006da:	b29b      	uxth	r3, r3
 80006dc:	61bb      	str	r3, [r7, #24]
	uint16_t bitPosition = startAddr%8;  // The shift position in the first byte
 80006de:	897b      	ldrh	r3, [r7, #10]
 80006e0:	f003 0307 	and.w	r3, r3, #7
 80006e4:	82fb      	strh	r3, [r7, #22]
	int indxPosition = 0;  // The shift position in the current indx of the TxData buffer
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]

	// Load the actual data into TxData buffer
	for (int i=0; i<numCoils; i++)
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	e033      	b.n	8000758 <readCoils+0x124>
	{
		TxData[indx] |= ((Coils_Database[startByte] >> bitPosition) &0x01) << indxPosition;
 80006f0:	4a25      	ldr	r2, [pc, #148]	; (8000788 <readCoils+0x154>)
 80006f2:	69fb      	ldr	r3, [r7, #28]
 80006f4:	4413      	add	r3, r2
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	b25a      	sxtb	r2, r3
 80006fa:	4924      	ldr	r1, [pc, #144]	; (800078c <readCoils+0x158>)
 80006fc:	69bb      	ldr	r3, [r7, #24]
 80006fe:	440b      	add	r3, r1
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	4619      	mov	r1, r3
 8000704:	8afb      	ldrh	r3, [r7, #22]
 8000706:	fa41 f303 	asr.w	r3, r1, r3
 800070a:	f003 0101 	and.w	r1, r3, #1
 800070e:	693b      	ldr	r3, [r7, #16]
 8000710:	fa01 f303 	lsl.w	r3, r1, r3
 8000714:	b25b      	sxtb	r3, r3
 8000716:	4313      	orrs	r3, r2
 8000718:	b25b      	sxtb	r3, r3
 800071a:	b2d9      	uxtb	r1, r3
 800071c:	4a1a      	ldr	r2, [pc, #104]	; (8000788 <readCoils+0x154>)
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	4413      	add	r3, r2
 8000722:	460a      	mov	r2, r1
 8000724:	701a      	strb	r2, [r3, #0]
		indxPosition++; bitPosition++;
 8000726:	693b      	ldr	r3, [r7, #16]
 8000728:	3301      	adds	r3, #1
 800072a:	613b      	str	r3, [r7, #16]
 800072c:	8afb      	ldrh	r3, [r7, #22]
 800072e:	3301      	adds	r3, #1
 8000730:	82fb      	strh	r3, [r7, #22]
		if (indxPosition>7)  // if the indxposition exceeds 7, we have to copy the data into the next byte position
 8000732:	693b      	ldr	r3, [r7, #16]
 8000734:	2b07      	cmp	r3, #7
 8000736:	dd04      	ble.n	8000742 <readCoils+0x10e>
		{
			indxPosition = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	613b      	str	r3, [r7, #16]
			indx++;
 800073c:	69fb      	ldr	r3, [r7, #28]
 800073e:	3301      	adds	r3, #1
 8000740:	61fb      	str	r3, [r7, #28]
		}
		if (bitPosition>7)  // if the bitposition exceeds 7, we have to increment the startbyte
 8000742:	8afb      	ldrh	r3, [r7, #22]
 8000744:	2b07      	cmp	r3, #7
 8000746:	d904      	bls.n	8000752 <readCoils+0x11e>
		{
			bitPosition=0;
 8000748:	2300      	movs	r3, #0
 800074a:	82fb      	strh	r3, [r7, #22]
			startByte++;
 800074c:	69bb      	ldr	r3, [r7, #24]
 800074e:	3301      	adds	r3, #1
 8000750:	61bb      	str	r3, [r7, #24]
	for (int i=0; i<numCoils; i++)
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	3301      	adds	r3, #1
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	893b      	ldrh	r3, [r7, #8]
 800075a:	68fa      	ldr	r2, [r7, #12]
 800075c:	429a      	cmp	r2, r3
 800075e:	dbc7      	blt.n	80006f0 <readCoils+0xbc>
		}
	}

	if (numCoils%8 != 0)indx++;  // increment the indx variable, only if the numcoils is not a multiple of 8
 8000760:	893b      	ldrh	r3, [r7, #8]
 8000762:	f003 0307 	and.w	r3, r3, #7
 8000766:	b29b      	uxth	r3, r3
 8000768:	2b00      	cmp	r3, #0
 800076a:	d002      	beq.n	8000772 <readCoils+0x13e>
 800076c:	69fb      	ldr	r3, [r7, #28]
 800076e:	3301      	adds	r3, #1
 8000770:	61fb      	str	r3, [r7, #28]
	sendData(TxData, indx);  // send data... CRC will be calculated in the function itself
 8000772:	69f9      	ldr	r1, [r7, #28]
 8000774:	4804      	ldr	r0, [pc, #16]	; (8000788 <readCoils+0x154>)
 8000776:	f7ff fe1f 	bl	80003b8 <sendData>
	return 1;   // success
 800077a:	2301      	movs	r3, #1
}
 800077c:	4618      	mov	r0, r3
 800077e:	3720      	adds	r7, #32
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	200000f0 	.word	0x200000f0
 8000788:	200001f0 	.word	0x200001f0
 800078c:	20000064 	.word	0x20000064

08000790 <readInputs>:

uint8_t readInputs (void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Register Address
 8000796:	4b52      	ldr	r3, [pc, #328]	; (80008e0 <readInputs+0x150>)
 8000798:	789b      	ldrb	r3, [r3, #2]
 800079a:	021b      	lsls	r3, r3, #8
 800079c:	b21a      	sxth	r2, r3
 800079e:	4b50      	ldr	r3, [pc, #320]	; (80008e0 <readInputs+0x150>)
 80007a0:	78db      	ldrb	r3, [r3, #3]
 80007a2:	b21b      	sxth	r3, r3
 80007a4:	4313      	orrs	r3, r2
 80007a6:	b21b      	sxth	r3, r3
 80007a8:	817b      	strh	r3, [r7, #10]

	uint16_t numCoils = ((RxData[4]<<8)|RxData[5]);   // number to coils master has requested
 80007aa:	4b4d      	ldr	r3, [pc, #308]	; (80008e0 <readInputs+0x150>)
 80007ac:	791b      	ldrb	r3, [r3, #4]
 80007ae:	021b      	lsls	r3, r3, #8
 80007b0:	b21a      	sxth	r2, r3
 80007b2:	4b4b      	ldr	r3, [pc, #300]	; (80008e0 <readInputs+0x150>)
 80007b4:	795b      	ldrb	r3, [r3, #5]
 80007b6:	b21b      	sxth	r3, r3
 80007b8:	4313      	orrs	r3, r2
 80007ba:	b21b      	sxth	r3, r3
 80007bc:	813b      	strh	r3, [r7, #8]
	if ((numCoils<1)||(numCoils>2000))  // maximum no. of coils as per the PDF
 80007be:	893b      	ldrh	r3, [r7, #8]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d003      	beq.n	80007cc <readInputs+0x3c>
 80007c4:	893b      	ldrh	r3, [r7, #8]
 80007c6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80007ca:	d904      	bls.n	80007d6 <readInputs+0x46>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 80007cc:	2003      	movs	r0, #3
 80007ce:	f7ff fe2d 	bl	800042c <modbusException>
		return 0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	e080      	b.n	80008d8 <readInputs+0x148>
	}

	uint16_t endAddr = startAddr+numCoils-1;  // Last coils address
 80007d6:	897a      	ldrh	r2, [r7, #10]
 80007d8:	893b      	ldrh	r3, [r7, #8]
 80007da:	4413      	add	r3, r2
 80007dc:	b29b      	uxth	r3, r3
 80007de:	3b01      	subs	r3, #1
 80007e0:	80fb      	strh	r3, [r7, #6]
	if (endAddr>199)  // end coil can not be more than 199 as we only have record of 200 (0-199) coils in total
 80007e2:	88fb      	ldrh	r3, [r7, #6]
 80007e4:	2bc7      	cmp	r3, #199	; 0xc7
 80007e6:	d904      	bls.n	80007f2 <readInputs+0x62>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 80007e8:	2002      	movs	r0, #2
 80007ea:	f7ff fe1f 	bl	800042c <modbusException>
		return 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	e072      	b.n	80008d8 <readInputs+0x148>
	}


	//reset TxData buffer
	memset (TxData, '\0', 256);
 80007f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007f6:	2100      	movs	r1, #0
 80007f8:	483a      	ldr	r0, [pc, #232]	; (80008e4 <readInputs+0x154>)
 80007fa:	f002 fb99 	bl	8002f30 <memset>
	// Prepare TxData buffer

	//| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

	TxData[0] = SLAVE_ID;  // slave ID
 80007fe:	4b39      	ldr	r3, [pc, #228]	; (80008e4 <readInputs+0x154>)
 8000800:	2207      	movs	r2, #7
 8000802:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];  // function code
 8000804:	4b36      	ldr	r3, [pc, #216]	; (80008e0 <readInputs+0x150>)
 8000806:	785a      	ldrb	r2, [r3, #1]
 8000808:	4b36      	ldr	r3, [pc, #216]	; (80008e4 <readInputs+0x154>)
 800080a:	705a      	strb	r2, [r3, #1]
	TxData[2] = (numCoils/8) + ((numCoils%8)>0 ? 1:0);  // Byte count
 800080c:	893b      	ldrh	r3, [r7, #8]
 800080e:	08db      	lsrs	r3, r3, #3
 8000810:	b29b      	uxth	r3, r3
 8000812:	b2db      	uxtb	r3, r3
 8000814:	893a      	ldrh	r2, [r7, #8]
 8000816:	f002 0207 	and.w	r2, r2, #7
 800081a:	b292      	uxth	r2, r2
 800081c:	2a00      	cmp	r2, #0
 800081e:	bf14      	ite	ne
 8000820:	2201      	movne	r2, #1
 8000822:	2200      	moveq	r2, #0
 8000824:	b2d2      	uxtb	r2, r2
 8000826:	4413      	add	r3, r2
 8000828:	b2da      	uxtb	r2, r3
 800082a:	4b2e      	ldr	r3, [pc, #184]	; (80008e4 <readInputs+0x154>)
 800082c:	709a      	strb	r2, [r3, #2]
	int indx = 3;  // we need to keep track of how many bytes has been stored in TxData Buffer
 800082e:	2303      	movs	r3, #3
 8000830:	61fb      	str	r3, [r7, #28]
	 * Then we will keep shifting the database[1] to the right and read the bits.
	 * Once the bitposition has crossed the value 7, we will increment the startbyte
	 * When the indxposition exceeds 7, we increment the indx variable, so to copy into the next byte of the TxData
	 * This keeps going until the number of coils required have been copied
	 */
	int startByte = startAddr/8;  // which byte we have to start extracting the data from
 8000832:	897b      	ldrh	r3, [r7, #10]
 8000834:	08db      	lsrs	r3, r3, #3
 8000836:	b29b      	uxth	r3, r3
 8000838:	61bb      	str	r3, [r7, #24]
	uint16_t bitPosition = startAddr%8;  // The shift position in the first byte
 800083a:	897b      	ldrh	r3, [r7, #10]
 800083c:	f003 0307 	and.w	r3, r3, #7
 8000840:	82fb      	strh	r3, [r7, #22]
	int indxPosition = 0;  // The shift position in the current indx of the TxData buffer
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]

	// Load the actual data into TxData buffer
	for (int i=0; i<numCoils; i++)
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	e033      	b.n	80008b4 <readInputs+0x124>
	{
		TxData[indx] |= ((Inputs_Database[startByte] >> bitPosition) &0x01) << indxPosition;
 800084c:	4a25      	ldr	r2, [pc, #148]	; (80008e4 <readInputs+0x154>)
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	4413      	add	r3, r2
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	b25a      	sxtb	r2, r3
 8000856:	4924      	ldr	r1, [pc, #144]	; (80008e8 <readInputs+0x158>)
 8000858:	69bb      	ldr	r3, [r7, #24]
 800085a:	440b      	add	r3, r1
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	4619      	mov	r1, r3
 8000860:	8afb      	ldrh	r3, [r7, #22]
 8000862:	fa41 f303 	asr.w	r3, r1, r3
 8000866:	f003 0101 	and.w	r1, r3, #1
 800086a:	693b      	ldr	r3, [r7, #16]
 800086c:	fa01 f303 	lsl.w	r3, r1, r3
 8000870:	b25b      	sxtb	r3, r3
 8000872:	4313      	orrs	r3, r2
 8000874:	b25b      	sxtb	r3, r3
 8000876:	b2d9      	uxtb	r1, r3
 8000878:	4a1a      	ldr	r2, [pc, #104]	; (80008e4 <readInputs+0x154>)
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	4413      	add	r3, r2
 800087e:	460a      	mov	r2, r1
 8000880:	701a      	strb	r2, [r3, #0]
		indxPosition++; bitPosition++;
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	3301      	adds	r3, #1
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	8afb      	ldrh	r3, [r7, #22]
 800088a:	3301      	adds	r3, #1
 800088c:	82fb      	strh	r3, [r7, #22]
		if (indxPosition>7)  // if the indxposition exceeds 7, we have to copy the data into the next byte position
 800088e:	693b      	ldr	r3, [r7, #16]
 8000890:	2b07      	cmp	r3, #7
 8000892:	dd04      	ble.n	800089e <readInputs+0x10e>
		{
			indxPosition = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	613b      	str	r3, [r7, #16]
			indx++;
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	3301      	adds	r3, #1
 800089c:	61fb      	str	r3, [r7, #28]
		}
		if (bitPosition>7)  // if the bitposition exceeds 7, we have to increment the startbyte
 800089e:	8afb      	ldrh	r3, [r7, #22]
 80008a0:	2b07      	cmp	r3, #7
 80008a2:	d904      	bls.n	80008ae <readInputs+0x11e>
		{
			bitPosition=0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	82fb      	strh	r3, [r7, #22]
			startByte++;
 80008a8:	69bb      	ldr	r3, [r7, #24]
 80008aa:	3301      	adds	r3, #1
 80008ac:	61bb      	str	r3, [r7, #24]
	for (int i=0; i<numCoils; i++)
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	3301      	adds	r3, #1
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	893b      	ldrh	r3, [r7, #8]
 80008b6:	68fa      	ldr	r2, [r7, #12]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	dbc7      	blt.n	800084c <readInputs+0xbc>
		}
	}

	if (numCoils%8 != 0)indx++;  // increment the indx variable, only if the numcoils is not a multiple of 8
 80008bc:	893b      	ldrh	r3, [r7, #8]
 80008be:	f003 0307 	and.w	r3, r3, #7
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d002      	beq.n	80008ce <readInputs+0x13e>
 80008c8:	69fb      	ldr	r3, [r7, #28]
 80008ca:	3301      	adds	r3, #1
 80008cc:	61fb      	str	r3, [r7, #28]
	sendData(TxData, indx);  // send data... CRC will be calculated in the function itself
 80008ce:	69f9      	ldr	r1, [r7, #28]
 80008d0:	4804      	ldr	r0, [pc, #16]	; (80008e4 <readInputs+0x154>)
 80008d2:	f7ff fd71 	bl	80003b8 <sendData>
	return 1;   // success
 80008d6:	2301      	movs	r3, #1
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3720      	adds	r7, #32
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	200000f0 	.word	0x200000f0
 80008e4:	200001f0 	.word	0x200001f0
 80008e8:	08002fbc 	.word	0x08002fbc

080008ec <writeHoldingRegs>:

uint8_t writeHoldingRegs (void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Register Address
 80008f2:	4b38      	ldr	r3, [pc, #224]	; (80009d4 <writeHoldingRegs+0xe8>)
 80008f4:	789b      	ldrb	r3, [r3, #2]
 80008f6:	021b      	lsls	r3, r3, #8
 80008f8:	b21a      	sxth	r2, r3
 80008fa:	4b36      	ldr	r3, [pc, #216]	; (80009d4 <writeHoldingRegs+0xe8>)
 80008fc:	78db      	ldrb	r3, [r3, #3]
 80008fe:	b21b      	sxth	r3, r3
 8000900:	4313      	orrs	r3, r2
 8000902:	b21b      	sxth	r3, r3
 8000904:	81fb      	strh	r3, [r7, #14]

	uint16_t numRegs = ((RxData[4]<<8)|RxData[5]);   // number to registers master has requested
 8000906:	4b33      	ldr	r3, [pc, #204]	; (80009d4 <writeHoldingRegs+0xe8>)
 8000908:	791b      	ldrb	r3, [r3, #4]
 800090a:	021b      	lsls	r3, r3, #8
 800090c:	b21a      	sxth	r2, r3
 800090e:	4b31      	ldr	r3, [pc, #196]	; (80009d4 <writeHoldingRegs+0xe8>)
 8000910:	795b      	ldrb	r3, [r3, #5]
 8000912:	b21b      	sxth	r3, r3
 8000914:	4313      	orrs	r3, r2
 8000916:	b21b      	sxth	r3, r3
 8000918:	807b      	strh	r3, [r7, #2]
	if ((numRegs<1)||(numRegs>123))  // maximum no. of Registers as per the PDF
 800091a:	887b      	ldrh	r3, [r7, #2]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d002      	beq.n	8000926 <writeHoldingRegs+0x3a>
 8000920:	887b      	ldrh	r3, [r7, #2]
 8000922:	2b7b      	cmp	r3, #123	; 0x7b
 8000924:	d904      	bls.n	8000930 <writeHoldingRegs+0x44>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 8000926:	2003      	movs	r0, #3
 8000928:	f7ff fd80 	bl	800042c <modbusException>
		return 0;
 800092c:	2300      	movs	r3, #0
 800092e:	e04c      	b.n	80009ca <writeHoldingRegs+0xde>
	}

	uint16_t endAddr = startAddr+numRegs-1;  // end Register
 8000930:	89fa      	ldrh	r2, [r7, #14]
 8000932:	887b      	ldrh	r3, [r7, #2]
 8000934:	4413      	add	r3, r2
 8000936:	b29b      	uxth	r3, r3
 8000938:	3b01      	subs	r3, #1
 800093a:	803b      	strh	r3, [r7, #0]
	if (endAddr>49)  // end Register can not be more than 49 as we only have record of 50 Registers in total
 800093c:	883b      	ldrh	r3, [r7, #0]
 800093e:	2b31      	cmp	r3, #49	; 0x31
 8000940:	d904      	bls.n	800094c <writeHoldingRegs+0x60>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 8000942:	2002      	movs	r0, #2
 8000944:	f7ff fd72 	bl	800042c <modbusException>
		return 0;
 8000948:	2300      	movs	r3, #0
 800094a:	e03e      	b.n	80009ca <writeHoldingRegs+0xde>

	/* start saving 16 bit data
	 * Data starts from RxData[7] and we need to combine 2 bytes together
	 * 16 bit Data = firstByte<<8|secondByte
	 */
	int indx = 7;  // we need to keep track of index in RxData
 800094c:	2307      	movs	r3, #7
 800094e:	60bb      	str	r3, [r7, #8]
	for (int i=0; i<numRegs; i++)
 8000950:	2300      	movs	r3, #0
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	e019      	b.n	800098a <writeHoldingRegs+0x9e>
	{
		Holding_Registers_Database[startAddr++] = (RxData[indx++]<<8)|RxData[indx++];
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	1c5a      	adds	r2, r3, #1
 800095a:	60ba      	str	r2, [r7, #8]
 800095c:	4a1d      	ldr	r2, [pc, #116]	; (80009d4 <writeHoldingRegs+0xe8>)
 800095e:	5cd3      	ldrb	r3, [r2, r3]
 8000960:	021b      	lsls	r3, r3, #8
 8000962:	b21a      	sxth	r2, r3
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	1c59      	adds	r1, r3, #1
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	491a      	ldr	r1, [pc, #104]	; (80009d4 <writeHoldingRegs+0xe8>)
 800096c:	5ccb      	ldrb	r3, [r1, r3]
 800096e:	b21b      	sxth	r3, r3
 8000970:	4313      	orrs	r3, r2
 8000972:	b219      	sxth	r1, r3
 8000974:	89fb      	ldrh	r3, [r7, #14]
 8000976:	1c5a      	adds	r2, r3, #1
 8000978:	81fa      	strh	r2, [r7, #14]
 800097a:	461a      	mov	r2, r3
 800097c:	b289      	uxth	r1, r1
 800097e:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <writeHoldingRegs+0xec>)
 8000980:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i=0; i<numRegs; i++)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3301      	adds	r3, #1
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	887b      	ldrh	r3, [r7, #2]
 800098c:	687a      	ldr	r2, [r7, #4]
 800098e:	429a      	cmp	r2, r3
 8000990:	dbe1      	blt.n	8000956 <writeHoldingRegs+0x6a>
	// Prepare Response

	//| SLAVE_ID | FUNCTION_CODE | Start Addr | num of Regs    | CRC     |
	//| 1 BYTE   |  1 BYTE       |  2 BYTE    | 2 BYTES      | 2 BYTES |

	TxData[0] = SLAVE_ID;    // slave ID
 8000992:	4b12      	ldr	r3, [pc, #72]	; (80009dc <writeHoldingRegs+0xf0>)
 8000994:	2207      	movs	r2, #7
 8000996:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];   // function code
 8000998:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <writeHoldingRegs+0xe8>)
 800099a:	785a      	ldrb	r2, [r3, #1]
 800099c:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <writeHoldingRegs+0xf0>)
 800099e:	705a      	strb	r2, [r3, #1]
	TxData[2] = RxData[2];   // Start Addr HIGH Byte
 80009a0:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <writeHoldingRegs+0xe8>)
 80009a2:	789a      	ldrb	r2, [r3, #2]
 80009a4:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <writeHoldingRegs+0xf0>)
 80009a6:	709a      	strb	r2, [r3, #2]
	TxData[3] = RxData[3];   // Start Addr LOW Byte
 80009a8:	4b0a      	ldr	r3, [pc, #40]	; (80009d4 <writeHoldingRegs+0xe8>)
 80009aa:	78da      	ldrb	r2, [r3, #3]
 80009ac:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <writeHoldingRegs+0xf0>)
 80009ae:	70da      	strb	r2, [r3, #3]
	TxData[4] = RxData[4];   // num of Regs HIGH Byte
 80009b0:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <writeHoldingRegs+0xe8>)
 80009b2:	791a      	ldrb	r2, [r3, #4]
 80009b4:	4b09      	ldr	r3, [pc, #36]	; (80009dc <writeHoldingRegs+0xf0>)
 80009b6:	711a      	strb	r2, [r3, #4]
	TxData[5] = RxData[5];   // num of Regs LOW Byte
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <writeHoldingRegs+0xe8>)
 80009ba:	795a      	ldrb	r2, [r3, #5]
 80009bc:	4b07      	ldr	r3, [pc, #28]	; (80009dc <writeHoldingRegs+0xf0>)
 80009be:	715a      	strb	r2, [r3, #5]

	sendData(TxData, 6);  // send data... CRC will be calculated in the function itself
 80009c0:	2106      	movs	r1, #6
 80009c2:	4806      	ldr	r0, [pc, #24]	; (80009dc <writeHoldingRegs+0xf0>)
 80009c4:	f7ff fcf8 	bl	80003b8 <sendData>
	return 1;   // success
 80009c8:	2301      	movs	r3, #1
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	200000f0 	.word	0x200000f0
 80009d8:	20000000 	.word	0x20000000
 80009dc:	200001f0 	.word	0x200001f0

080009e0 <writeSingleReg>:

uint8_t writeSingleReg (void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Register Address
 80009e6:	4b20      	ldr	r3, [pc, #128]	; (8000a68 <writeSingleReg+0x88>)
 80009e8:	789b      	ldrb	r3, [r3, #2]
 80009ea:	021b      	lsls	r3, r3, #8
 80009ec:	b21a      	sxth	r2, r3
 80009ee:	4b1e      	ldr	r3, [pc, #120]	; (8000a68 <writeSingleReg+0x88>)
 80009f0:	78db      	ldrb	r3, [r3, #3]
 80009f2:	b21b      	sxth	r3, r3
 80009f4:	4313      	orrs	r3, r2
 80009f6:	b21b      	sxth	r3, r3
 80009f8:	80fb      	strh	r3, [r7, #6]

	if (startAddr>49)  // The Register Address can not be more than 49 as we only have record of 50 Registers in total
 80009fa:	88fb      	ldrh	r3, [r7, #6]
 80009fc:	2b31      	cmp	r3, #49	; 0x31
 80009fe:	d904      	bls.n	8000a0a <writeSingleReg+0x2a>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 8000a00:	2002      	movs	r0, #2
 8000a02:	f7ff fd13 	bl	800042c <modbusException>
		return 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	e029      	b.n	8000a5e <writeSingleReg+0x7e>

	/* Save the 16 bit data
	 * Data is the combination of 2 bytes, RxData[4] and RxData[5]
	 */

	Holding_Registers_Database[startAddr] = (RxData[4]<<8)|RxData[5];
 8000a0a:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <writeSingleReg+0x88>)
 8000a0c:	791b      	ldrb	r3, [r3, #4]
 8000a0e:	021b      	lsls	r3, r3, #8
 8000a10:	b21a      	sxth	r2, r3
 8000a12:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <writeSingleReg+0x88>)
 8000a14:	795b      	ldrb	r3, [r3, #5]
 8000a16:	b21b      	sxth	r3, r3
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	b21a      	sxth	r2, r3
 8000a1c:	88fb      	ldrh	r3, [r7, #6]
 8000a1e:	b291      	uxth	r1, r2
 8000a20:	4a12      	ldr	r2, [pc, #72]	; (8000a6c <writeSingleReg+0x8c>)
 8000a22:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	// Prepare Response

	//| SLAVE_ID | FUNCTION_CODE | Start Addr | Data     | CRC     |
	//| 1 BYTE   |  1 BYTE       |  2 BYTE    | 2 BYTES  | 2 BYTES |

	TxData[0] = SLAVE_ID;    // slave ID
 8000a26:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <writeSingleReg+0x90>)
 8000a28:	2207      	movs	r2, #7
 8000a2a:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];   // function code
 8000a2c:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <writeSingleReg+0x88>)
 8000a2e:	785a      	ldrb	r2, [r3, #1]
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <writeSingleReg+0x90>)
 8000a32:	705a      	strb	r2, [r3, #1]
	TxData[2] = RxData[2];   // Start Addr HIGH Byte
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <writeSingleReg+0x88>)
 8000a36:	789a      	ldrb	r2, [r3, #2]
 8000a38:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <writeSingleReg+0x90>)
 8000a3a:	709a      	strb	r2, [r3, #2]
	TxData[3] = RxData[3];   // Start Addr LOW Byte
 8000a3c:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <writeSingleReg+0x88>)
 8000a3e:	78da      	ldrb	r2, [r3, #3]
 8000a40:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <writeSingleReg+0x90>)
 8000a42:	70da      	strb	r2, [r3, #3]
	TxData[4] = RxData[4];   // Reg Data HIGH Byte
 8000a44:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <writeSingleReg+0x88>)
 8000a46:	791a      	ldrb	r2, [r3, #4]
 8000a48:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <writeSingleReg+0x90>)
 8000a4a:	711a      	strb	r2, [r3, #4]
	TxData[5] = RxData[5];   // Reg Data LOW  Byte
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <writeSingleReg+0x88>)
 8000a4e:	795a      	ldrb	r2, [r3, #5]
 8000a50:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <writeSingleReg+0x90>)
 8000a52:	715a      	strb	r2, [r3, #5]

	sendData(TxData, 6);  // send data... CRC will be calculated in the function itself
 8000a54:	2106      	movs	r1, #6
 8000a56:	4806      	ldr	r0, [pc, #24]	; (8000a70 <writeSingleReg+0x90>)
 8000a58:	f7ff fcae 	bl	80003b8 <sendData>
	return 1;   // success
 8000a5c:	2301      	movs	r3, #1
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	200000f0 	.word	0x200000f0
 8000a6c:	20000000 	.word	0x20000000
 8000a70:	200001f0 	.word	0x200001f0

08000a74 <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	460b      	mov	r3, r1
 8000a7e:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8000a80:	23ff      	movs	r3, #255	; 0xff
 8000a82:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8000a84:	23ff      	movs	r3, #255	; 0xff
 8000a86:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8000a88:	e013      	b.n	8000ab2 <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	1c5a      	adds	r2, r3, #1
 8000a8e:	607a      	str	r2, [r7, #4]
 8000a90:	781a      	ldrb	r2, [r3, #0]
 8000a92:	7bbb      	ldrb	r3, [r7, #14]
 8000a94:	4053      	eors	r3, r2
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 8000a9a:	4a0f      	ldr	r2, [pc, #60]	; (8000ad8 <crc16+0x64>)
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	781a      	ldrb	r2, [r3, #0]
 8000aa2:	7bfb      	ldrb	r3, [r7, #15]
 8000aa4:	4053      	eors	r3, r2
 8000aa6:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 8000aa8:	4a0c      	ldr	r2, [pc, #48]	; (8000adc <crc16+0x68>)
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	4413      	add	r3, r2
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 8000ab2:	887b      	ldrh	r3, [r7, #2]
 8000ab4:	1e5a      	subs	r2, r3, #1
 8000ab6:	807a      	strh	r2, [r7, #2]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d1e6      	bne.n	8000a8a <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 8000abc:	7bfb      	ldrb	r3, [r7, #15]
 8000abe:	021b      	lsls	r3, r3, #8
 8000ac0:	b21a      	sxth	r2, r3
 8000ac2:	7bbb      	ldrb	r3, [r7, #14]
 8000ac4:	b21b      	sxth	r3, r3
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	b21b      	sxth	r3, r3
 8000aca:	b29b      	uxth	r3, r3
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3714      	adds	r7, #20
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	08002fd8 	.word	0x08002fd8
 8000adc:	080030d8 	.word	0x080030d8

08000ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <HAL_MspInit+0x5c>)
 8000ae8:	699b      	ldr	r3, [r3, #24]
 8000aea:	4a14      	ldr	r2, [pc, #80]	; (8000b3c <HAL_MspInit+0x5c>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6193      	str	r3, [r2, #24]
 8000af2:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <HAL_MspInit+0x5c>)
 8000af4:	699b      	ldr	r3, [r3, #24]
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afe:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <HAL_MspInit+0x5c>)
 8000b00:	69db      	ldr	r3, [r3, #28]
 8000b02:	4a0e      	ldr	r2, [pc, #56]	; (8000b3c <HAL_MspInit+0x5c>)
 8000b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b08:	61d3      	str	r3, [r2, #28]
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <HAL_MspInit+0x5c>)
 8000b0c:	69db      	ldr	r3, [r3, #28]
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b16:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <HAL_MspInit+0x60>)
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <HAL_MspInit+0x60>)
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b32:	bf00      	nop
 8000b34:	3714      	adds	r7, #20
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	40010000 	.word	0x40010000

08000b44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b088      	sub	sp, #32
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4c:	f107 0310 	add.w	r3, r7, #16
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a20      	ldr	r2, [pc, #128]	; (8000be0 <HAL_UART_MspInit+0x9c>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d139      	bne.n	8000bd8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b64:	4b1f      	ldr	r3, [pc, #124]	; (8000be4 <HAL_UART_MspInit+0xa0>)
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	4a1e      	ldr	r2, [pc, #120]	; (8000be4 <HAL_UART_MspInit+0xa0>)
 8000b6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b6e:	6193      	str	r3, [r2, #24]
 8000b70:	4b1c      	ldr	r3, [pc, #112]	; (8000be4 <HAL_UART_MspInit+0xa0>)
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7c:	4b19      	ldr	r3, [pc, #100]	; (8000be4 <HAL_UART_MspInit+0xa0>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	4a18      	ldr	r2, [pc, #96]	; (8000be4 <HAL_UART_MspInit+0xa0>)
 8000b82:	f043 0304 	orr.w	r3, r3, #4
 8000b86:	6193      	str	r3, [r2, #24]
 8000b88:	4b16      	ldr	r3, [pc, #88]	; (8000be4 <HAL_UART_MspInit+0xa0>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	f003 0304 	and.w	r3, r3, #4
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba2:	f107 0310 	add.w	r3, r7, #16
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	480f      	ldr	r0, [pc, #60]	; (8000be8 <HAL_UART_MspInit+0xa4>)
 8000baa:	f000 fac9 	bl	8001140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbc:	f107 0310 	add.w	r3, r7, #16
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4809      	ldr	r0, [pc, #36]	; (8000be8 <HAL_UART_MspInit+0xa4>)
 8000bc4:	f000 fabc 	bl	8001140 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2100      	movs	r1, #0
 8000bcc:	2025      	movs	r0, #37	; 0x25
 8000bce:	f000 f9da 	bl	8000f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bd2:	2025      	movs	r0, #37	; 0x25
 8000bd4:	f000 f9f3 	bl	8000fbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000bd8:	bf00      	nop
 8000bda:	3720      	adds	r7, #32
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40013800 	.word	0x40013800
 8000be4:	40021000 	.word	0x40021000
 8000be8:	40010800 	.word	0x40010800

08000bec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08e      	sub	sp, #56	; 0x38
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000c02:	4b34      	ldr	r3, [pc, #208]	; (8000cd4 <HAL_InitTick+0xe8>)
 8000c04:	69db      	ldr	r3, [r3, #28]
 8000c06:	4a33      	ldr	r2, [pc, #204]	; (8000cd4 <HAL_InitTick+0xe8>)
 8000c08:	f043 0304 	orr.w	r3, r3, #4
 8000c0c:	61d3      	str	r3, [r2, #28]
 8000c0e:	4b31      	ldr	r3, [pc, #196]	; (8000cd4 <HAL_InitTick+0xe8>)
 8000c10:	69db      	ldr	r3, [r3, #28]
 8000c12:	f003 0304 	and.w	r3, r3, #4
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c1a:	f107 0210 	add.w	r2, r7, #16
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	4611      	mov	r1, r2
 8000c24:	4618      	mov	r0, r3
 8000c26:	f001 f819 	bl	8001c5c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c2a:	6a3b      	ldr	r3, [r7, #32]
 8000c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d103      	bne.n	8000c3c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c34:	f000 ffea 	bl	8001c0c <HAL_RCC_GetPCLK1Freq>
 8000c38:	6378      	str	r0, [r7, #52]	; 0x34
 8000c3a:	e004      	b.n	8000c46 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c3c:	f000 ffe6 	bl	8001c0c <HAL_RCC_GetPCLK1Freq>
 8000c40:	4603      	mov	r3, r0
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c48:	4a23      	ldr	r2, [pc, #140]	; (8000cd8 <HAL_InitTick+0xec>)
 8000c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c4e:	0c9b      	lsrs	r3, r3, #18
 8000c50:	3b01      	subs	r3, #1
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000c54:	4b21      	ldr	r3, [pc, #132]	; (8000cdc <HAL_InitTick+0xf0>)
 8000c56:	4a22      	ldr	r2, [pc, #136]	; (8000ce0 <HAL_InitTick+0xf4>)
 8000c58:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000c5a:	4b20      	ldr	r3, [pc, #128]	; (8000cdc <HAL_InitTick+0xf0>)
 8000c5c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c60:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000c62:	4a1e      	ldr	r2, [pc, #120]	; (8000cdc <HAL_InitTick+0xf0>)
 8000c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c66:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000c68:	4b1c      	ldr	r3, [pc, #112]	; (8000cdc <HAL_InitTick+0xf0>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6e:	4b1b      	ldr	r3, [pc, #108]	; (8000cdc <HAL_InitTick+0xf0>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c74:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <HAL_InitTick+0xf0>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000c7a:	4818      	ldr	r0, [pc, #96]	; (8000cdc <HAL_InitTick+0xf0>)
 8000c7c:	f001 f83c 	bl	8001cf8 <HAL_TIM_Base_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c86:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d11b      	bne.n	8000cc6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000c8e:	4813      	ldr	r0, [pc, #76]	; (8000cdc <HAL_InitTick+0xf0>)
 8000c90:	f001 f88a 	bl	8001da8 <HAL_TIM_Base_Start_IT>
 8000c94:	4603      	mov	r3, r0
 8000c96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c9a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d111      	bne.n	8000cc6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000ca2:	201e      	movs	r0, #30
 8000ca4:	f000 f98b 	bl	8000fbe <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2b0f      	cmp	r3, #15
 8000cac:	d808      	bhi.n	8000cc0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	6879      	ldr	r1, [r7, #4]
 8000cb2:	201e      	movs	r0, #30
 8000cb4:	f000 f967 	bl	8000f86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cb8:	4a0a      	ldr	r2, [pc, #40]	; (8000ce4 <HAL_InitTick+0xf8>)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6013      	str	r3, [r2, #0]
 8000cbe:	e002      	b.n	8000cc6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000cc6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3738      	adds	r7, #56	; 0x38
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	431bde83 	.word	0x431bde83
 8000cdc:	200002f0 	.word	0x200002f0
 8000ce0:	40000800 	.word	0x40000800
 8000ce4:	20000084 	.word	0x20000084

08000ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <NMI_Handler+0x4>

08000cee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <HardFault_Handler+0x4>

08000cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <MemManage_Handler+0x4>

08000cfa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <BusFault_Handler+0x4>

08000d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <UsageFault_Handler+0x4>

08000d06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr

08000d12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr

08000d1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr

08000d2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr
	...

08000d38 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000d3c:	4802      	ldr	r0, [pc, #8]	; (8000d48 <TIM4_IRQHandler+0x10>)
 8000d3e:	f001 f885 	bl	8001e4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	200002f0 	.word	0x200002f0

08000d4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d50:	4802      	ldr	r0, [pc, #8]	; (8000d5c <USART1_IRQHandler+0x10>)
 8000d52:	f001 fb4b 	bl	80023ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	200000a8 	.word	0x200000a8

08000d60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr

08000d6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d6c:	f7ff fff8 	bl	8000d60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d70:	480b      	ldr	r0, [pc, #44]	; (8000da0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d72:	490c      	ldr	r1, [pc, #48]	; (8000da4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d74:	4a0c      	ldr	r2, [pc, #48]	; (8000da8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d78:	e002      	b.n	8000d80 <LoopCopyDataInit>

08000d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7e:	3304      	adds	r3, #4

08000d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d84:	d3f9      	bcc.n	8000d7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d86:	4a09      	ldr	r2, [pc, #36]	; (8000dac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d88:	4c09      	ldr	r4, [pc, #36]	; (8000db0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d8c:	e001      	b.n	8000d92 <LoopFillZerobss>

08000d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d90:	3204      	adds	r2, #4

08000d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d94:	d3fb      	bcc.n	8000d8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d96:	f002 f8a7 	bl	8002ee8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d9a:	f7ff fa2f 	bl	80001fc <main>
  bx lr
 8000d9e:	4770      	bx	lr
  ldr r0, =_sdata
 8000da0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da4:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000da8:	0800320c 	.word	0x0800320c
  ldr r2, =_sbss
 8000dac:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8000db0:	2000033c 	.word	0x2000033c

08000db4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000db4:	e7fe      	b.n	8000db4 <ADC1_2_IRQHandler>
	...

08000db8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dbc:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <HAL_Init+0x28>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a07      	ldr	r2, [pc, #28]	; (8000de0 <HAL_Init+0x28>)
 8000dc2:	f043 0310 	orr.w	r3, r3, #16
 8000dc6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc8:	2003      	movs	r0, #3
 8000dca:	f000 f8d1 	bl	8000f70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dce:	200f      	movs	r0, #15
 8000dd0:	f7ff ff0c 	bl	8000bec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dd4:	f7ff fe84 	bl	8000ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40022000 	.word	0x40022000

08000de4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de8:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <HAL_IncTick+0x1c>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	461a      	mov	r2, r3
 8000dee:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <HAL_IncTick+0x20>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4413      	add	r3, r2
 8000df4:	4a03      	ldr	r2, [pc, #12]	; (8000e04 <HAL_IncTick+0x20>)
 8000df6:	6013      	str	r3, [r2, #0]
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr
 8000e00:	20000088 	.word	0x20000088
 8000e04:	20000338 	.word	0x20000338

08000e08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e0c:	4b02      	ldr	r3, [pc, #8]	; (8000e18 <HAL_GetTick+0x10>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr
 8000e18:	20000338 	.word	0x20000338

08000e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e4e:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	60d3      	str	r3, [r2, #12]
}
 8000e54:	bf00      	nop
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <__NVIC_GetPriorityGrouping+0x18>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	0a1b      	lsrs	r3, r3, #8
 8000e6e:	f003 0307 	and.w	r3, r3, #7
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bc80      	pop	{r7}
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	db0b      	blt.n	8000eaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	f003 021f 	and.w	r2, r3, #31
 8000e98:	4906      	ldr	r1, [pc, #24]	; (8000eb4 <__NVIC_EnableIRQ+0x34>)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	095b      	lsrs	r3, r3, #5
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr
 8000eb4:	e000e100 	.word	0xe000e100

08000eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	6039      	str	r1, [r7, #0]
 8000ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	db0a      	blt.n	8000ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	490c      	ldr	r1, [pc, #48]	; (8000f04 <__NVIC_SetPriority+0x4c>)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	0112      	lsls	r2, r2, #4
 8000ed8:	b2d2      	uxtb	r2, r2
 8000eda:	440b      	add	r3, r1
 8000edc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee0:	e00a      	b.n	8000ef8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	4908      	ldr	r1, [pc, #32]	; (8000f08 <__NVIC_SetPriority+0x50>)
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	f003 030f 	and.w	r3, r3, #15
 8000eee:	3b04      	subs	r3, #4
 8000ef0:	0112      	lsls	r2, r2, #4
 8000ef2:	b2d2      	uxtb	r2, r2
 8000ef4:	440b      	add	r3, r1
 8000ef6:	761a      	strb	r2, [r3, #24]
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000e100 	.word	0xe000e100
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b089      	sub	sp, #36	; 0x24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	f1c3 0307 	rsb	r3, r3, #7
 8000f26:	2b04      	cmp	r3, #4
 8000f28:	bf28      	it	cs
 8000f2a:	2304      	movcs	r3, #4
 8000f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3304      	adds	r3, #4
 8000f32:	2b06      	cmp	r3, #6
 8000f34:	d902      	bls.n	8000f3c <NVIC_EncodePriority+0x30>
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3b03      	subs	r3, #3
 8000f3a:	e000      	b.n	8000f3e <NVIC_EncodePriority+0x32>
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43da      	mvns	r2, r3
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	401a      	ands	r2, r3
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5e:	43d9      	mvns	r1, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f64:	4313      	orrs	r3, r2
         );
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3724      	adds	r7, #36	; 0x24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr

08000f70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f7ff ff4f 	bl	8000e1c <__NVIC_SetPriorityGrouping>
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b086      	sub	sp, #24
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	60b9      	str	r1, [r7, #8]
 8000f90:	607a      	str	r2, [r7, #4]
 8000f92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f98:	f7ff ff64 	bl	8000e64 <__NVIC_GetPriorityGrouping>
 8000f9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	68b9      	ldr	r1, [r7, #8]
 8000fa2:	6978      	ldr	r0, [r7, #20]
 8000fa4:	f7ff ffb2 	bl	8000f0c <NVIC_EncodePriority>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fae:	4611      	mov	r1, r2
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff ff81 	bl	8000eb8 <__NVIC_SetPriority>
}
 8000fb6:	bf00      	nop
 8000fb8:	3718      	adds	r7, #24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b082      	sub	sp, #8
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff ff57 	bl	8000e80 <__NVIC_EnableIRQ>
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b085      	sub	sp, #20
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d008      	beq.n	8001004 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2204      	movs	r2, #4
 8000ff6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	e020      	b.n	8001046 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f022 020e 	bic.w	r2, r2, #14
 8001012:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f022 0201 	bic.w	r2, r2, #1
 8001022:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800102c:	2101      	movs	r1, #1
 800102e:	fa01 f202 	lsl.w	r2, r1, r2
 8001032:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2201      	movs	r2, #1
 8001038:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001044:	7bfb      	ldrb	r3, [r7, #15]
}
 8001046:	4618      	mov	r0, r3
 8001048:	3714      	adds	r7, #20
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr

08001050 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001058:	2300      	movs	r3, #0
 800105a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001062:	b2db      	uxtb	r3, r3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d005      	beq.n	8001074 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2204      	movs	r2, #4
 800106c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	73fb      	strb	r3, [r7, #15]
 8001072:	e051      	b.n	8001118 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f022 020e 	bic.w	r2, r2, #14
 8001082:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f022 0201 	bic.w	r2, r2, #1
 8001092:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a22      	ldr	r2, [pc, #136]	; (8001124 <HAL_DMA_Abort_IT+0xd4>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d029      	beq.n	80010f2 <HAL_DMA_Abort_IT+0xa2>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a21      	ldr	r2, [pc, #132]	; (8001128 <HAL_DMA_Abort_IT+0xd8>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d022      	beq.n	80010ee <HAL_DMA_Abort_IT+0x9e>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a1f      	ldr	r2, [pc, #124]	; (800112c <HAL_DMA_Abort_IT+0xdc>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d01a      	beq.n	80010e8 <HAL_DMA_Abort_IT+0x98>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a1e      	ldr	r2, [pc, #120]	; (8001130 <HAL_DMA_Abort_IT+0xe0>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d012      	beq.n	80010e2 <HAL_DMA_Abort_IT+0x92>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a1c      	ldr	r2, [pc, #112]	; (8001134 <HAL_DMA_Abort_IT+0xe4>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d00a      	beq.n	80010dc <HAL_DMA_Abort_IT+0x8c>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a1b      	ldr	r2, [pc, #108]	; (8001138 <HAL_DMA_Abort_IT+0xe8>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d102      	bne.n	80010d6 <HAL_DMA_Abort_IT+0x86>
 80010d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80010d4:	e00e      	b.n	80010f4 <HAL_DMA_Abort_IT+0xa4>
 80010d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010da:	e00b      	b.n	80010f4 <HAL_DMA_Abort_IT+0xa4>
 80010dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010e0:	e008      	b.n	80010f4 <HAL_DMA_Abort_IT+0xa4>
 80010e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e6:	e005      	b.n	80010f4 <HAL_DMA_Abort_IT+0xa4>
 80010e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ec:	e002      	b.n	80010f4 <HAL_DMA_Abort_IT+0xa4>
 80010ee:	2310      	movs	r3, #16
 80010f0:	e000      	b.n	80010f4 <HAL_DMA_Abort_IT+0xa4>
 80010f2:	2301      	movs	r3, #1
 80010f4:	4a11      	ldr	r2, [pc, #68]	; (800113c <HAL_DMA_Abort_IT+0xec>)
 80010f6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2201      	movs	r2, #1
 80010fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800110c:	2b00      	cmp	r3, #0
 800110e:	d003      	beq.n	8001118 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	4798      	blx	r3
    } 
  }
  return status;
 8001118:	7bfb      	ldrb	r3, [r7, #15]
}
 800111a:	4618      	mov	r0, r3
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40020008 	.word	0x40020008
 8001128:	4002001c 	.word	0x4002001c
 800112c:	40020030 	.word	0x40020030
 8001130:	40020044 	.word	0x40020044
 8001134:	40020058 	.word	0x40020058
 8001138:	4002006c 	.word	0x4002006c
 800113c:	40020000 	.word	0x40020000

08001140 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001140:	b480      	push	{r7}
 8001142:	b08b      	sub	sp, #44	; 0x2c
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800114a:	2300      	movs	r3, #0
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800114e:	2300      	movs	r3, #0
 8001150:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001152:	e169      	b.n	8001428 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001154:	2201      	movs	r2, #1
 8001156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	69fa      	ldr	r2, [r7, #28]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	429a      	cmp	r2, r3
 800116e:	f040 8158 	bne.w	8001422 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	4a9a      	ldr	r2, [pc, #616]	; (80013e0 <HAL_GPIO_Init+0x2a0>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d05e      	beq.n	800123a <HAL_GPIO_Init+0xfa>
 800117c:	4a98      	ldr	r2, [pc, #608]	; (80013e0 <HAL_GPIO_Init+0x2a0>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d875      	bhi.n	800126e <HAL_GPIO_Init+0x12e>
 8001182:	4a98      	ldr	r2, [pc, #608]	; (80013e4 <HAL_GPIO_Init+0x2a4>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d058      	beq.n	800123a <HAL_GPIO_Init+0xfa>
 8001188:	4a96      	ldr	r2, [pc, #600]	; (80013e4 <HAL_GPIO_Init+0x2a4>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d86f      	bhi.n	800126e <HAL_GPIO_Init+0x12e>
 800118e:	4a96      	ldr	r2, [pc, #600]	; (80013e8 <HAL_GPIO_Init+0x2a8>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d052      	beq.n	800123a <HAL_GPIO_Init+0xfa>
 8001194:	4a94      	ldr	r2, [pc, #592]	; (80013e8 <HAL_GPIO_Init+0x2a8>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d869      	bhi.n	800126e <HAL_GPIO_Init+0x12e>
 800119a:	4a94      	ldr	r2, [pc, #592]	; (80013ec <HAL_GPIO_Init+0x2ac>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d04c      	beq.n	800123a <HAL_GPIO_Init+0xfa>
 80011a0:	4a92      	ldr	r2, [pc, #584]	; (80013ec <HAL_GPIO_Init+0x2ac>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d863      	bhi.n	800126e <HAL_GPIO_Init+0x12e>
 80011a6:	4a92      	ldr	r2, [pc, #584]	; (80013f0 <HAL_GPIO_Init+0x2b0>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d046      	beq.n	800123a <HAL_GPIO_Init+0xfa>
 80011ac:	4a90      	ldr	r2, [pc, #576]	; (80013f0 <HAL_GPIO_Init+0x2b0>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d85d      	bhi.n	800126e <HAL_GPIO_Init+0x12e>
 80011b2:	2b12      	cmp	r3, #18
 80011b4:	d82a      	bhi.n	800120c <HAL_GPIO_Init+0xcc>
 80011b6:	2b12      	cmp	r3, #18
 80011b8:	d859      	bhi.n	800126e <HAL_GPIO_Init+0x12e>
 80011ba:	a201      	add	r2, pc, #4	; (adr r2, 80011c0 <HAL_GPIO_Init+0x80>)
 80011bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c0:	0800123b 	.word	0x0800123b
 80011c4:	08001215 	.word	0x08001215
 80011c8:	08001227 	.word	0x08001227
 80011cc:	08001269 	.word	0x08001269
 80011d0:	0800126f 	.word	0x0800126f
 80011d4:	0800126f 	.word	0x0800126f
 80011d8:	0800126f 	.word	0x0800126f
 80011dc:	0800126f 	.word	0x0800126f
 80011e0:	0800126f 	.word	0x0800126f
 80011e4:	0800126f 	.word	0x0800126f
 80011e8:	0800126f 	.word	0x0800126f
 80011ec:	0800126f 	.word	0x0800126f
 80011f0:	0800126f 	.word	0x0800126f
 80011f4:	0800126f 	.word	0x0800126f
 80011f8:	0800126f 	.word	0x0800126f
 80011fc:	0800126f 	.word	0x0800126f
 8001200:	0800126f 	.word	0x0800126f
 8001204:	0800121d 	.word	0x0800121d
 8001208:	08001231 	.word	0x08001231
 800120c:	4a79      	ldr	r2, [pc, #484]	; (80013f4 <HAL_GPIO_Init+0x2b4>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d013      	beq.n	800123a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001212:	e02c      	b.n	800126e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	623b      	str	r3, [r7, #32]
          break;
 800121a:	e029      	b.n	8001270 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	3304      	adds	r3, #4
 8001222:	623b      	str	r3, [r7, #32]
          break;
 8001224:	e024      	b.n	8001270 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	3308      	adds	r3, #8
 800122c:	623b      	str	r3, [r7, #32]
          break;
 800122e:	e01f      	b.n	8001270 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	330c      	adds	r3, #12
 8001236:	623b      	str	r3, [r7, #32]
          break;
 8001238:	e01a      	b.n	8001270 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d102      	bne.n	8001248 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001242:	2304      	movs	r3, #4
 8001244:	623b      	str	r3, [r7, #32]
          break;
 8001246:	e013      	b.n	8001270 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d105      	bne.n	800125c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001250:	2308      	movs	r3, #8
 8001252:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	69fa      	ldr	r2, [r7, #28]
 8001258:	611a      	str	r2, [r3, #16]
          break;
 800125a:	e009      	b.n	8001270 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800125c:	2308      	movs	r3, #8
 800125e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	69fa      	ldr	r2, [r7, #28]
 8001264:	615a      	str	r2, [r3, #20]
          break;
 8001266:	e003      	b.n	8001270 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001268:	2300      	movs	r3, #0
 800126a:	623b      	str	r3, [r7, #32]
          break;
 800126c:	e000      	b.n	8001270 <HAL_GPIO_Init+0x130>
          break;
 800126e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	2bff      	cmp	r3, #255	; 0xff
 8001274:	d801      	bhi.n	800127a <HAL_GPIO_Init+0x13a>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	e001      	b.n	800127e <HAL_GPIO_Init+0x13e>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	3304      	adds	r3, #4
 800127e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	2bff      	cmp	r3, #255	; 0xff
 8001284:	d802      	bhi.n	800128c <HAL_GPIO_Init+0x14c>
 8001286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	e002      	b.n	8001292 <HAL_GPIO_Init+0x152>
 800128c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128e:	3b08      	subs	r3, #8
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	210f      	movs	r1, #15
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	fa01 f303 	lsl.w	r3, r1, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	401a      	ands	r2, r3
 80012a4:	6a39      	ldr	r1, [r7, #32]
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ac:	431a      	orrs	r2, r3
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f000 80b1 	beq.w	8001422 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012c0:	4b4d      	ldr	r3, [pc, #308]	; (80013f8 <HAL_GPIO_Init+0x2b8>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	4a4c      	ldr	r2, [pc, #304]	; (80013f8 <HAL_GPIO_Init+0x2b8>)
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	6193      	str	r3, [r2, #24]
 80012cc:	4b4a      	ldr	r3, [pc, #296]	; (80013f8 <HAL_GPIO_Init+0x2b8>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012d8:	4a48      	ldr	r2, [pc, #288]	; (80013fc <HAL_GPIO_Init+0x2bc>)
 80012da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012dc:	089b      	lsrs	r3, r3, #2
 80012de:	3302      	adds	r3, #2
 80012e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e8:	f003 0303 	and.w	r3, r3, #3
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	220f      	movs	r2, #15
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	4013      	ands	r3, r2
 80012fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a40      	ldr	r2, [pc, #256]	; (8001400 <HAL_GPIO_Init+0x2c0>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d013      	beq.n	800132c <HAL_GPIO_Init+0x1ec>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a3f      	ldr	r2, [pc, #252]	; (8001404 <HAL_GPIO_Init+0x2c4>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d00d      	beq.n	8001328 <HAL_GPIO_Init+0x1e8>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a3e      	ldr	r2, [pc, #248]	; (8001408 <HAL_GPIO_Init+0x2c8>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d007      	beq.n	8001324 <HAL_GPIO_Init+0x1e4>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a3d      	ldr	r2, [pc, #244]	; (800140c <HAL_GPIO_Init+0x2cc>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d101      	bne.n	8001320 <HAL_GPIO_Init+0x1e0>
 800131c:	2303      	movs	r3, #3
 800131e:	e006      	b.n	800132e <HAL_GPIO_Init+0x1ee>
 8001320:	2304      	movs	r3, #4
 8001322:	e004      	b.n	800132e <HAL_GPIO_Init+0x1ee>
 8001324:	2302      	movs	r3, #2
 8001326:	e002      	b.n	800132e <HAL_GPIO_Init+0x1ee>
 8001328:	2301      	movs	r3, #1
 800132a:	e000      	b.n	800132e <HAL_GPIO_Init+0x1ee>
 800132c:	2300      	movs	r3, #0
 800132e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001330:	f002 0203 	and.w	r2, r2, #3
 8001334:	0092      	lsls	r2, r2, #2
 8001336:	4093      	lsls	r3, r2
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	4313      	orrs	r3, r2
 800133c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800133e:	492f      	ldr	r1, [pc, #188]	; (80013fc <HAL_GPIO_Init+0x2bc>)
 8001340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001342:	089b      	lsrs	r3, r3, #2
 8001344:	3302      	adds	r3, #2
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d006      	beq.n	8001366 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001358:	4b2d      	ldr	r3, [pc, #180]	; (8001410 <HAL_GPIO_Init+0x2d0>)
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	492c      	ldr	r1, [pc, #176]	; (8001410 <HAL_GPIO_Init+0x2d0>)
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	4313      	orrs	r3, r2
 8001362:	608b      	str	r3, [r1, #8]
 8001364:	e006      	b.n	8001374 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001366:	4b2a      	ldr	r3, [pc, #168]	; (8001410 <HAL_GPIO_Init+0x2d0>)
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	43db      	mvns	r3, r3
 800136e:	4928      	ldr	r1, [pc, #160]	; (8001410 <HAL_GPIO_Init+0x2d0>)
 8001370:	4013      	ands	r3, r2
 8001372:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d006      	beq.n	800138e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001380:	4b23      	ldr	r3, [pc, #140]	; (8001410 <HAL_GPIO_Init+0x2d0>)
 8001382:	68da      	ldr	r2, [r3, #12]
 8001384:	4922      	ldr	r1, [pc, #136]	; (8001410 <HAL_GPIO_Init+0x2d0>)
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	4313      	orrs	r3, r2
 800138a:	60cb      	str	r3, [r1, #12]
 800138c:	e006      	b.n	800139c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800138e:	4b20      	ldr	r3, [pc, #128]	; (8001410 <HAL_GPIO_Init+0x2d0>)
 8001390:	68da      	ldr	r2, [r3, #12]
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	43db      	mvns	r3, r3
 8001396:	491e      	ldr	r1, [pc, #120]	; (8001410 <HAL_GPIO_Init+0x2d0>)
 8001398:	4013      	ands	r3, r2
 800139a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d006      	beq.n	80013b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013a8:	4b19      	ldr	r3, [pc, #100]	; (8001410 <HAL_GPIO_Init+0x2d0>)
 80013aa:	685a      	ldr	r2, [r3, #4]
 80013ac:	4918      	ldr	r1, [pc, #96]	; (8001410 <HAL_GPIO_Init+0x2d0>)
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	604b      	str	r3, [r1, #4]
 80013b4:	e006      	b.n	80013c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013b6:	4b16      	ldr	r3, [pc, #88]	; (8001410 <HAL_GPIO_Init+0x2d0>)
 80013b8:	685a      	ldr	r2, [r3, #4]
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	43db      	mvns	r3, r3
 80013be:	4914      	ldr	r1, [pc, #80]	; (8001410 <HAL_GPIO_Init+0x2d0>)
 80013c0:	4013      	ands	r3, r2
 80013c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d021      	beq.n	8001414 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013d0:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <HAL_GPIO_Init+0x2d0>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	490e      	ldr	r1, [pc, #56]	; (8001410 <HAL_GPIO_Init+0x2d0>)
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	4313      	orrs	r3, r2
 80013da:	600b      	str	r3, [r1, #0]
 80013dc:	e021      	b.n	8001422 <HAL_GPIO_Init+0x2e2>
 80013de:	bf00      	nop
 80013e0:	10320000 	.word	0x10320000
 80013e4:	10310000 	.word	0x10310000
 80013e8:	10220000 	.word	0x10220000
 80013ec:	10210000 	.word	0x10210000
 80013f0:	10120000 	.word	0x10120000
 80013f4:	10110000 	.word	0x10110000
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40010000 	.word	0x40010000
 8001400:	40010800 	.word	0x40010800
 8001404:	40010c00 	.word	0x40010c00
 8001408:	40011000 	.word	0x40011000
 800140c:	40011400 	.word	0x40011400
 8001410:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001414:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <HAL_GPIO_Init+0x304>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	43db      	mvns	r3, r3
 800141c:	4909      	ldr	r1, [pc, #36]	; (8001444 <HAL_GPIO_Init+0x304>)
 800141e:	4013      	ands	r3, r2
 8001420:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001424:	3301      	adds	r3, #1
 8001426:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142e:	fa22 f303 	lsr.w	r3, r2, r3
 8001432:	2b00      	cmp	r3, #0
 8001434:	f47f ae8e 	bne.w	8001154 <HAL_GPIO_Init+0x14>
  }
}
 8001438:	bf00      	nop
 800143a:	bf00      	nop
 800143c:	372c      	adds	r7, #44	; 0x2c
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr
 8001444:	40010400 	.word	0x40010400

08001448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	460b      	mov	r3, r1
 8001452:	807b      	strh	r3, [r7, #2]
 8001454:	4613      	mov	r3, r2
 8001456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001458:	787b      	ldrb	r3, [r7, #1]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800145e:	887a      	ldrh	r2, [r7, #2]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001464:	e003      	b.n	800146e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001466:	887b      	ldrh	r3, [r7, #2]
 8001468:	041a      	lsls	r2, r3, #16
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	611a      	str	r2, [r3, #16]
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr

08001478 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d101      	bne.n	800148a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e272      	b.n	8001970 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	2b00      	cmp	r3, #0
 8001494:	f000 8087 	beq.w	80015a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001498:	4b92      	ldr	r3, [pc, #584]	; (80016e4 <HAL_RCC_OscConfig+0x26c>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f003 030c 	and.w	r3, r3, #12
 80014a0:	2b04      	cmp	r3, #4
 80014a2:	d00c      	beq.n	80014be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014a4:	4b8f      	ldr	r3, [pc, #572]	; (80016e4 <HAL_RCC_OscConfig+0x26c>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f003 030c 	and.w	r3, r3, #12
 80014ac:	2b08      	cmp	r3, #8
 80014ae:	d112      	bne.n	80014d6 <HAL_RCC_OscConfig+0x5e>
 80014b0:	4b8c      	ldr	r3, [pc, #560]	; (80016e4 <HAL_RCC_OscConfig+0x26c>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014bc:	d10b      	bne.n	80014d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014be:	4b89      	ldr	r3, [pc, #548]	; (80016e4 <HAL_RCC_OscConfig+0x26c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d06c      	beq.n	80015a4 <HAL_RCC_OscConfig+0x12c>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d168      	bne.n	80015a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e24c      	b.n	8001970 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014de:	d106      	bne.n	80014ee <HAL_RCC_OscConfig+0x76>
 80014e0:	4b80      	ldr	r3, [pc, #512]	; (80016e4 <HAL_RCC_OscConfig+0x26c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a7f      	ldr	r2, [pc, #508]	; (80016e4 <HAL_RCC_OscConfig+0x26c>)
 80014e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ea:	6013      	str	r3, [r2, #0]
 80014ec:	e02e      	b.n	800154c <HAL_RCC_OscConfig+0xd4>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d10c      	bne.n	8001510 <HAL_RCC_OscConfig+0x98>
 80014f6:	4b7b      	ldr	r3, [pc, #492]	; (80016e4 <HAL_RCC_OscConfig+0x26c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a7a      	ldr	r2, [pc, #488]	; (80016e4 <HAL_RCC_OscConfig+0x26c>)
 80014fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	4b78      	ldr	r3, [pc, #480]	; (80016e4 <HAL_RCC_OscConfig+0x26c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a77      	ldr	r2, [pc, #476]	; (80016e4 <HAL_RCC_OscConfig+0x26c>)
 8001508:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800150c:	6013      	str	r3, [r2, #0]
 800150e:	e01d      	b.n	800154c <HAL_RCC_OscConfig+0xd4>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001518:	d10c      	bne.n	8001534 <HAL_RCC_OscConfig+0xbc>
 800151a:	4b72      	ldr	r3, [pc, #456]	; (80016e4 <HAL_RCC_OscConfig+0x26c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a71      	ldr	r2, [pc, #452]	; (80016e4 <HAL_RCC_OscConfig+0x26c>)
 8001520:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001524:	6013      	str	r3, [r2, #0]
 8001526:	4b6f      	ldr	r3, [pc, #444]	; (80016e4 <HAL_RCC_OscConfig+0x26c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a6e      	ldr	r2, [pc, #440]	; (80016e4 <HAL_RCC_OscConfig+0x26c>)
 800152c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001530:	6013      	str	r3, [r2, #0]
 8001532:	e00b      	b.n	800154c <HAL_RCC_OscConfig+0xd4>
 8001534:	4b6b      	ldr	r3, [pc, #428]	; (80016e4 <HAL_RCC_OscConfig+0x26c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a6a      	ldr	r2, [pc, #424]	; (80016e4 <HAL_RCC_OscConfig+0x26c>)
 800153a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800153e:	6013      	str	r3, [r2, #0]
 8001540:	4b68      	ldr	r3, [pc, #416]	; (80016e4 <HAL_RCC_OscConfig+0x26c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a67      	ldr	r2, [pc, #412]	; (80016e4 <HAL_RCC_OscConfig+0x26c>)
 8001546:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800154a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d013      	beq.n	800157c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001554:	f7ff fc58 	bl	8000e08 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800155c:	f7ff fc54 	bl	8000e08 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b64      	cmp	r3, #100	; 0x64
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e200      	b.n	8001970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800156e:	4b5d      	ldr	r3, [pc, #372]	; (80016e4 <HAL_RCC_OscConfig+0x26c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0f0      	beq.n	800155c <HAL_RCC_OscConfig+0xe4>
 800157a:	e014      	b.n	80015a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157c:	f7ff fc44 	bl	8000e08 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001584:	f7ff fc40 	bl	8000e08 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b64      	cmp	r3, #100	; 0x64
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e1ec      	b.n	8001970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001596:	4b53      	ldr	r3, [pc, #332]	; (80016e4 <HAL_RCC_OscConfig+0x26c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1f0      	bne.n	8001584 <HAL_RCC_OscConfig+0x10c>
 80015a2:	e000      	b.n	80015a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d063      	beq.n	800167a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015b2:	4b4c      	ldr	r3, [pc, #304]	; (80016e4 <HAL_RCC_OscConfig+0x26c>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f003 030c 	and.w	r3, r3, #12
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d00b      	beq.n	80015d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015be:	4b49      	ldr	r3, [pc, #292]	; (80016e4 <HAL_RCC_OscConfig+0x26c>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f003 030c 	and.w	r3, r3, #12
 80015c6:	2b08      	cmp	r3, #8
 80015c8:	d11c      	bne.n	8001604 <HAL_RCC_OscConfig+0x18c>
 80015ca:	4b46      	ldr	r3, [pc, #280]	; (80016e4 <HAL_RCC_OscConfig+0x26c>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d116      	bne.n	8001604 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015d6:	4b43      	ldr	r3, [pc, #268]	; (80016e4 <HAL_RCC_OscConfig+0x26c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d005      	beq.n	80015ee <HAL_RCC_OscConfig+0x176>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d001      	beq.n	80015ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e1c0      	b.n	8001970 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ee:	4b3d      	ldr	r3, [pc, #244]	; (80016e4 <HAL_RCC_OscConfig+0x26c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	4939      	ldr	r1, [pc, #228]	; (80016e4 <HAL_RCC_OscConfig+0x26c>)
 80015fe:	4313      	orrs	r3, r2
 8001600:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001602:	e03a      	b.n	800167a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d020      	beq.n	800164e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800160c:	4b36      	ldr	r3, [pc, #216]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 800160e:	2201      	movs	r2, #1
 8001610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001612:	f7ff fbf9 	bl	8000e08 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800161a:	f7ff fbf5 	bl	8000e08 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e1a1      	b.n	8001970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800162c:	4b2d      	ldr	r3, [pc, #180]	; (80016e4 <HAL_RCC_OscConfig+0x26c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0f0      	beq.n	800161a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001638:	4b2a      	ldr	r3, [pc, #168]	; (80016e4 <HAL_RCC_OscConfig+0x26c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	695b      	ldr	r3, [r3, #20]
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	4927      	ldr	r1, [pc, #156]	; (80016e4 <HAL_RCC_OscConfig+0x26c>)
 8001648:	4313      	orrs	r3, r2
 800164a:	600b      	str	r3, [r1, #0]
 800164c:	e015      	b.n	800167a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800164e:	4b26      	ldr	r3, [pc, #152]	; (80016e8 <HAL_RCC_OscConfig+0x270>)
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001654:	f7ff fbd8 	bl	8000e08 <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800165c:	f7ff fbd4 	bl	8000e08 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e180      	b.n	8001970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800166e:	4b1d      	ldr	r3, [pc, #116]	; (80016e4 <HAL_RCC_OscConfig+0x26c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1f0      	bne.n	800165c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0308 	and.w	r3, r3, #8
 8001682:	2b00      	cmp	r3, #0
 8001684:	d03a      	beq.n	80016fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d019      	beq.n	80016c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800168e:	4b17      	ldr	r3, [pc, #92]	; (80016ec <HAL_RCC_OscConfig+0x274>)
 8001690:	2201      	movs	r2, #1
 8001692:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001694:	f7ff fbb8 	bl	8000e08 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800169c:	f7ff fbb4 	bl	8000e08 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e160      	b.n	8001970 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ae:	4b0d      	ldr	r3, [pc, #52]	; (80016e4 <HAL_RCC_OscConfig+0x26c>)
 80016b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d0f0      	beq.n	800169c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016ba:	2001      	movs	r0, #1
 80016bc:	f000 fafe 	bl	8001cbc <RCC_Delay>
 80016c0:	e01c      	b.n	80016fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016c2:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <HAL_RCC_OscConfig+0x274>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c8:	f7ff fb9e 	bl	8000e08 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ce:	e00f      	b.n	80016f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016d0:	f7ff fb9a 	bl	8000e08 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d908      	bls.n	80016f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e146      	b.n	8001970 <HAL_RCC_OscConfig+0x4f8>
 80016e2:	bf00      	nop
 80016e4:	40021000 	.word	0x40021000
 80016e8:	42420000 	.word	0x42420000
 80016ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f0:	4b92      	ldr	r3, [pc, #584]	; (800193c <HAL_RCC_OscConfig+0x4c4>)
 80016f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d1e9      	bne.n	80016d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	2b00      	cmp	r3, #0
 8001706:	f000 80a6 	beq.w	8001856 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800170a:	2300      	movs	r3, #0
 800170c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800170e:	4b8b      	ldr	r3, [pc, #556]	; (800193c <HAL_RCC_OscConfig+0x4c4>)
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d10d      	bne.n	8001736 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800171a:	4b88      	ldr	r3, [pc, #544]	; (800193c <HAL_RCC_OscConfig+0x4c4>)
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	4a87      	ldr	r2, [pc, #540]	; (800193c <HAL_RCC_OscConfig+0x4c4>)
 8001720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001724:	61d3      	str	r3, [r2, #28]
 8001726:	4b85      	ldr	r3, [pc, #532]	; (800193c <HAL_RCC_OscConfig+0x4c4>)
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001732:	2301      	movs	r3, #1
 8001734:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001736:	4b82      	ldr	r3, [pc, #520]	; (8001940 <HAL_RCC_OscConfig+0x4c8>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800173e:	2b00      	cmp	r3, #0
 8001740:	d118      	bne.n	8001774 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001742:	4b7f      	ldr	r3, [pc, #508]	; (8001940 <HAL_RCC_OscConfig+0x4c8>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a7e      	ldr	r2, [pc, #504]	; (8001940 <HAL_RCC_OscConfig+0x4c8>)
 8001748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800174c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800174e:	f7ff fb5b 	bl	8000e08 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001756:	f7ff fb57 	bl	8000e08 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b64      	cmp	r3, #100	; 0x64
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e103      	b.n	8001970 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001768:	4b75      	ldr	r3, [pc, #468]	; (8001940 <HAL_RCC_OscConfig+0x4c8>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0f0      	beq.n	8001756 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d106      	bne.n	800178a <HAL_RCC_OscConfig+0x312>
 800177c:	4b6f      	ldr	r3, [pc, #444]	; (800193c <HAL_RCC_OscConfig+0x4c4>)
 800177e:	6a1b      	ldr	r3, [r3, #32]
 8001780:	4a6e      	ldr	r2, [pc, #440]	; (800193c <HAL_RCC_OscConfig+0x4c4>)
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	6213      	str	r3, [r2, #32]
 8001788:	e02d      	b.n	80017e6 <HAL_RCC_OscConfig+0x36e>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10c      	bne.n	80017ac <HAL_RCC_OscConfig+0x334>
 8001792:	4b6a      	ldr	r3, [pc, #424]	; (800193c <HAL_RCC_OscConfig+0x4c4>)
 8001794:	6a1b      	ldr	r3, [r3, #32]
 8001796:	4a69      	ldr	r2, [pc, #420]	; (800193c <HAL_RCC_OscConfig+0x4c4>)
 8001798:	f023 0301 	bic.w	r3, r3, #1
 800179c:	6213      	str	r3, [r2, #32]
 800179e:	4b67      	ldr	r3, [pc, #412]	; (800193c <HAL_RCC_OscConfig+0x4c4>)
 80017a0:	6a1b      	ldr	r3, [r3, #32]
 80017a2:	4a66      	ldr	r2, [pc, #408]	; (800193c <HAL_RCC_OscConfig+0x4c4>)
 80017a4:	f023 0304 	bic.w	r3, r3, #4
 80017a8:	6213      	str	r3, [r2, #32]
 80017aa:	e01c      	b.n	80017e6 <HAL_RCC_OscConfig+0x36e>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	2b05      	cmp	r3, #5
 80017b2:	d10c      	bne.n	80017ce <HAL_RCC_OscConfig+0x356>
 80017b4:	4b61      	ldr	r3, [pc, #388]	; (800193c <HAL_RCC_OscConfig+0x4c4>)
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	4a60      	ldr	r2, [pc, #384]	; (800193c <HAL_RCC_OscConfig+0x4c4>)
 80017ba:	f043 0304 	orr.w	r3, r3, #4
 80017be:	6213      	str	r3, [r2, #32]
 80017c0:	4b5e      	ldr	r3, [pc, #376]	; (800193c <HAL_RCC_OscConfig+0x4c4>)
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	4a5d      	ldr	r2, [pc, #372]	; (800193c <HAL_RCC_OscConfig+0x4c4>)
 80017c6:	f043 0301 	orr.w	r3, r3, #1
 80017ca:	6213      	str	r3, [r2, #32]
 80017cc:	e00b      	b.n	80017e6 <HAL_RCC_OscConfig+0x36e>
 80017ce:	4b5b      	ldr	r3, [pc, #364]	; (800193c <HAL_RCC_OscConfig+0x4c4>)
 80017d0:	6a1b      	ldr	r3, [r3, #32]
 80017d2:	4a5a      	ldr	r2, [pc, #360]	; (800193c <HAL_RCC_OscConfig+0x4c4>)
 80017d4:	f023 0301 	bic.w	r3, r3, #1
 80017d8:	6213      	str	r3, [r2, #32]
 80017da:	4b58      	ldr	r3, [pc, #352]	; (800193c <HAL_RCC_OscConfig+0x4c4>)
 80017dc:	6a1b      	ldr	r3, [r3, #32]
 80017de:	4a57      	ldr	r2, [pc, #348]	; (800193c <HAL_RCC_OscConfig+0x4c4>)
 80017e0:	f023 0304 	bic.w	r3, r3, #4
 80017e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d015      	beq.n	800181a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ee:	f7ff fb0b 	bl	8000e08 <HAL_GetTick>
 80017f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017f4:	e00a      	b.n	800180c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017f6:	f7ff fb07 	bl	8000e08 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	f241 3288 	movw	r2, #5000	; 0x1388
 8001804:	4293      	cmp	r3, r2
 8001806:	d901      	bls.n	800180c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e0b1      	b.n	8001970 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800180c:	4b4b      	ldr	r3, [pc, #300]	; (800193c <HAL_RCC_OscConfig+0x4c4>)
 800180e:	6a1b      	ldr	r3, [r3, #32]
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d0ee      	beq.n	80017f6 <HAL_RCC_OscConfig+0x37e>
 8001818:	e014      	b.n	8001844 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800181a:	f7ff faf5 	bl	8000e08 <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001820:	e00a      	b.n	8001838 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001822:	f7ff faf1 	bl	8000e08 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001830:	4293      	cmp	r3, r2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e09b      	b.n	8001970 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001838:	4b40      	ldr	r3, [pc, #256]	; (800193c <HAL_RCC_OscConfig+0x4c4>)
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1ee      	bne.n	8001822 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001844:	7dfb      	ldrb	r3, [r7, #23]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d105      	bne.n	8001856 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800184a:	4b3c      	ldr	r3, [pc, #240]	; (800193c <HAL_RCC_OscConfig+0x4c4>)
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	4a3b      	ldr	r2, [pc, #236]	; (800193c <HAL_RCC_OscConfig+0x4c4>)
 8001850:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001854:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	2b00      	cmp	r3, #0
 800185c:	f000 8087 	beq.w	800196e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001860:	4b36      	ldr	r3, [pc, #216]	; (800193c <HAL_RCC_OscConfig+0x4c4>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f003 030c 	and.w	r3, r3, #12
 8001868:	2b08      	cmp	r3, #8
 800186a:	d061      	beq.n	8001930 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	69db      	ldr	r3, [r3, #28]
 8001870:	2b02      	cmp	r3, #2
 8001872:	d146      	bne.n	8001902 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001874:	4b33      	ldr	r3, [pc, #204]	; (8001944 <HAL_RCC_OscConfig+0x4cc>)
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187a:	f7ff fac5 	bl	8000e08 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001882:	f7ff fac1 	bl	8000e08 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e06d      	b.n	8001970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001894:	4b29      	ldr	r3, [pc, #164]	; (800193c <HAL_RCC_OscConfig+0x4c4>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d1f0      	bne.n	8001882 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018a8:	d108      	bne.n	80018bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018aa:	4b24      	ldr	r3, [pc, #144]	; (800193c <HAL_RCC_OscConfig+0x4c4>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	4921      	ldr	r1, [pc, #132]	; (800193c <HAL_RCC_OscConfig+0x4c4>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018bc:	4b1f      	ldr	r3, [pc, #124]	; (800193c <HAL_RCC_OscConfig+0x4c4>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a19      	ldr	r1, [r3, #32]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018cc:	430b      	orrs	r3, r1
 80018ce:	491b      	ldr	r1, [pc, #108]	; (800193c <HAL_RCC_OscConfig+0x4c4>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018d4:	4b1b      	ldr	r3, [pc, #108]	; (8001944 <HAL_RCC_OscConfig+0x4cc>)
 80018d6:	2201      	movs	r2, #1
 80018d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018da:	f7ff fa95 	bl	8000e08 <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018e0:	e008      	b.n	80018f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e2:	f7ff fa91 	bl	8000e08 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e03d      	b.n	8001970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018f4:	4b11      	ldr	r3, [pc, #68]	; (800193c <HAL_RCC_OscConfig+0x4c4>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0f0      	beq.n	80018e2 <HAL_RCC_OscConfig+0x46a>
 8001900:	e035      	b.n	800196e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001902:	4b10      	ldr	r3, [pc, #64]	; (8001944 <HAL_RCC_OscConfig+0x4cc>)
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001908:	f7ff fa7e 	bl	8000e08 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001910:	f7ff fa7a 	bl	8000e08 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e026      	b.n	8001970 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <HAL_RCC_OscConfig+0x4c4>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1f0      	bne.n	8001910 <HAL_RCC_OscConfig+0x498>
 800192e:	e01e      	b.n	800196e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	69db      	ldr	r3, [r3, #28]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d107      	bne.n	8001948 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e019      	b.n	8001970 <HAL_RCC_OscConfig+0x4f8>
 800193c:	40021000 	.word	0x40021000
 8001940:	40007000 	.word	0x40007000
 8001944:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001948:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <HAL_RCC_OscConfig+0x500>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	429a      	cmp	r2, r3
 800195a:	d106      	bne.n	800196a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001966:	429a      	cmp	r2, r3
 8001968:	d001      	beq.n	800196e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e000      	b.n	8001970 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	3718      	adds	r7, #24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40021000 	.word	0x40021000

0800197c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d101      	bne.n	8001990 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e0d0      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001990:	4b6a      	ldr	r3, [pc, #424]	; (8001b3c <HAL_RCC_ClockConfig+0x1c0>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	429a      	cmp	r2, r3
 800199c:	d910      	bls.n	80019c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800199e:	4b67      	ldr	r3, [pc, #412]	; (8001b3c <HAL_RCC_ClockConfig+0x1c0>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f023 0207 	bic.w	r2, r3, #7
 80019a6:	4965      	ldr	r1, [pc, #404]	; (8001b3c <HAL_RCC_ClockConfig+0x1c0>)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ae:	4b63      	ldr	r3, [pc, #396]	; (8001b3c <HAL_RCC_ClockConfig+0x1c0>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d001      	beq.n	80019c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e0b8      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d020      	beq.n	8001a0e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0304 	and.w	r3, r3, #4
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d005      	beq.n	80019e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019d8:	4b59      	ldr	r3, [pc, #356]	; (8001b40 <HAL_RCC_ClockConfig+0x1c4>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	4a58      	ldr	r2, [pc, #352]	; (8001b40 <HAL_RCC_ClockConfig+0x1c4>)
 80019de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0308 	and.w	r3, r3, #8
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d005      	beq.n	80019fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019f0:	4b53      	ldr	r3, [pc, #332]	; (8001b40 <HAL_RCC_ClockConfig+0x1c4>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	4a52      	ldr	r2, [pc, #328]	; (8001b40 <HAL_RCC_ClockConfig+0x1c4>)
 80019f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019fc:	4b50      	ldr	r3, [pc, #320]	; (8001b40 <HAL_RCC_ClockConfig+0x1c4>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	494d      	ldr	r1, [pc, #308]	; (8001b40 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d040      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d107      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a22:	4b47      	ldr	r3, [pc, #284]	; (8001b40 <HAL_RCC_ClockConfig+0x1c4>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d115      	bne.n	8001a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e07f      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d107      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a3a:	4b41      	ldr	r3, [pc, #260]	; (8001b40 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d109      	bne.n	8001a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e073      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a4a:	4b3d      	ldr	r3, [pc, #244]	; (8001b40 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e06b      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a5a:	4b39      	ldr	r3, [pc, #228]	; (8001b40 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f023 0203 	bic.w	r2, r3, #3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	4936      	ldr	r1, [pc, #216]	; (8001b40 <HAL_RCC_ClockConfig+0x1c4>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a6c:	f7ff f9cc 	bl	8000e08 <HAL_GetTick>
 8001a70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a72:	e00a      	b.n	8001a8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a74:	f7ff f9c8 	bl	8000e08 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e053      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a8a:	4b2d      	ldr	r3, [pc, #180]	; (8001b40 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f003 020c 	and.w	r2, r3, #12
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d1eb      	bne.n	8001a74 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a9c:	4b27      	ldr	r3, [pc, #156]	; (8001b3c <HAL_RCC_ClockConfig+0x1c0>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0307 	and.w	r3, r3, #7
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d210      	bcs.n	8001acc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aaa:	4b24      	ldr	r3, [pc, #144]	; (8001b3c <HAL_RCC_ClockConfig+0x1c0>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f023 0207 	bic.w	r2, r3, #7
 8001ab2:	4922      	ldr	r1, [pc, #136]	; (8001b3c <HAL_RCC_ClockConfig+0x1c0>)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aba:	4b20      	ldr	r3, [pc, #128]	; (8001b3c <HAL_RCC_ClockConfig+0x1c0>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d001      	beq.n	8001acc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e032      	b.n	8001b32 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0304 	and.w	r3, r3, #4
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d008      	beq.n	8001aea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ad8:	4b19      	ldr	r3, [pc, #100]	; (8001b40 <HAL_RCC_ClockConfig+0x1c4>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	4916      	ldr	r1, [pc, #88]	; (8001b40 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0308 	and.w	r3, r3, #8
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d009      	beq.n	8001b0a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001af6:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <HAL_RCC_ClockConfig+0x1c4>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	490e      	ldr	r1, [pc, #56]	; (8001b40 <HAL_RCC_ClockConfig+0x1c4>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b0a:	f000 f821 	bl	8001b50 <HAL_RCC_GetSysClockFreq>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <HAL_RCC_ClockConfig+0x1c4>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	091b      	lsrs	r3, r3, #4
 8001b16:	f003 030f 	and.w	r3, r3, #15
 8001b1a:	490a      	ldr	r1, [pc, #40]	; (8001b44 <HAL_RCC_ClockConfig+0x1c8>)
 8001b1c:	5ccb      	ldrb	r3, [r1, r3]
 8001b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b22:	4a09      	ldr	r2, [pc, #36]	; (8001b48 <HAL_RCC_ClockConfig+0x1cc>)
 8001b24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b26:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <HAL_RCC_ClockConfig+0x1d0>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff f85e 	bl	8000bec <HAL_InitTick>

  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40022000 	.word	0x40022000
 8001b40:	40021000 	.word	0x40021000
 8001b44:	080031d8 	.word	0x080031d8
 8001b48:	20000080 	.word	0x20000080
 8001b4c:	20000084 	.word	0x20000084

08001b50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b087      	sub	sp, #28
 8001b54:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
 8001b62:	2300      	movs	r3, #0
 8001b64:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b66:	2300      	movs	r3, #0
 8001b68:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b6a:	4b1e      	ldr	r3, [pc, #120]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f003 030c 	and.w	r3, r3, #12
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	d002      	beq.n	8001b80 <HAL_RCC_GetSysClockFreq+0x30>
 8001b7a:	2b08      	cmp	r3, #8
 8001b7c:	d003      	beq.n	8001b86 <HAL_RCC_GetSysClockFreq+0x36>
 8001b7e:	e027      	b.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b80:	4b19      	ldr	r3, [pc, #100]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b82:	613b      	str	r3, [r7, #16]
      break;
 8001b84:	e027      	b.n	8001bd6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	0c9b      	lsrs	r3, r3, #18
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	4a17      	ldr	r2, [pc, #92]	; (8001bec <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b90:	5cd3      	ldrb	r3, [r2, r3]
 8001b92:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d010      	beq.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b9e:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	0c5b      	lsrs	r3, r3, #17
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	4a11      	ldr	r2, [pc, #68]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001baa:	5cd3      	ldrb	r3, [r2, r3]
 8001bac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a0d      	ldr	r2, [pc, #52]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bb2:	fb03 f202 	mul.w	r2, r3, r2
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	e004      	b.n	8001bca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a0c      	ldr	r2, [pc, #48]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001bc4:	fb02 f303 	mul.w	r3, r2, r3
 8001bc8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	613b      	str	r3, [r7, #16]
      break;
 8001bce:	e002      	b.n	8001bd6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bd0:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bd2:	613b      	str	r3, [r7, #16]
      break;
 8001bd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bd6:	693b      	ldr	r3, [r7, #16]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	371c      	adds	r7, #28
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	40021000 	.word	0x40021000
 8001be8:	007a1200 	.word	0x007a1200
 8001bec:	080031f0 	.word	0x080031f0
 8001bf0:	08003200 	.word	0x08003200
 8001bf4:	003d0900 	.word	0x003d0900

08001bf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bfc:	4b02      	ldr	r3, [pc, #8]	; (8001c08 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr
 8001c08:	20000080 	.word	0x20000080

08001c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c10:	f7ff fff2 	bl	8001bf8 <HAL_RCC_GetHCLKFreq>
 8001c14:	4602      	mov	r2, r0
 8001c16:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	0a1b      	lsrs	r3, r3, #8
 8001c1c:	f003 0307 	and.w	r3, r3, #7
 8001c20:	4903      	ldr	r1, [pc, #12]	; (8001c30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c22:	5ccb      	ldrb	r3, [r1, r3]
 8001c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	080031e8 	.word	0x080031e8

08001c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c38:	f7ff ffde 	bl	8001bf8 <HAL_RCC_GetHCLKFreq>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	0adb      	lsrs	r3, r3, #11
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	4903      	ldr	r1, [pc, #12]	; (8001c58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c4a:	5ccb      	ldrb	r3, [r1, r3]
 8001c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40021000 	.word	0x40021000
 8001c58:	080031e8 	.word	0x080031e8

08001c5c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	220f      	movs	r2, #15
 8001c6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c6c:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <HAL_RCC_GetClockConfig+0x58>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 0203 	and.w	r2, r3, #3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c78:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <HAL_RCC_GetClockConfig+0x58>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c84:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <HAL_RCC_GetClockConfig+0x58>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001c90:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <HAL_RCC_GetClockConfig+0x58>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	08db      	lsrs	r3, r3, #3
 8001c96:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c9e:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <HAL_RCC_GetClockConfig+0x5c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0207 	and.w	r2, r3, #7
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	40022000 	.word	0x40022000

08001cbc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001cc4:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <RCC_Delay+0x34>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a0a      	ldr	r2, [pc, #40]	; (8001cf4 <RCC_Delay+0x38>)
 8001cca:	fba2 2303 	umull	r2, r3, r2, r3
 8001cce:	0a5b      	lsrs	r3, r3, #9
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	fb02 f303 	mul.w	r3, r2, r3
 8001cd6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001cd8:	bf00      	nop
  }
  while (Delay --);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	1e5a      	subs	r2, r3, #1
 8001cde:	60fa      	str	r2, [r7, #12]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1f9      	bne.n	8001cd8 <RCC_Delay+0x1c>
}
 8001ce4:	bf00      	nop
 8001ce6:	bf00      	nop
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr
 8001cf0:	20000080 	.word	0x20000080
 8001cf4:	10624dd3 	.word	0x10624dd3

08001cf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e041      	b.n	8001d8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d106      	bne.n	8001d24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f839 	bl	8001d96 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2202      	movs	r2, #2
 8001d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3304      	adds	r3, #4
 8001d34:	4619      	mov	r1, r3
 8001d36:	4610      	mov	r0, r2
 8001d38:	f000 f9b4 	bl	80020a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr

08001da8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d001      	beq.n	8001dc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e03a      	b.n	8001e36 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68da      	ldr	r2, [r3, #12]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f042 0201 	orr.w	r2, r2, #1
 8001dd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a18      	ldr	r2, [pc, #96]	; (8001e40 <HAL_TIM_Base_Start_IT+0x98>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d00e      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x58>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dea:	d009      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x58>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a14      	ldr	r2, [pc, #80]	; (8001e44 <HAL_TIM_Base_Start_IT+0x9c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d004      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x58>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a13      	ldr	r2, [pc, #76]	; (8001e48 <HAL_TIM_Base_Start_IT+0xa0>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d111      	bne.n	8001e24 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2b06      	cmp	r3, #6
 8001e10:	d010      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f042 0201 	orr.w	r2, r2, #1
 8001e20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e22:	e007      	b.n	8001e34 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f042 0201 	orr.w	r2, r2, #1
 8001e32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr
 8001e40:	40012c00 	.word	0x40012c00
 8001e44:	40000400 	.word	0x40000400
 8001e48:	40000800 	.word	0x40000800

08001e4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d122      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d11b      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f06f 0202 	mvn.w	r2, #2
 8001e78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f8ed 	bl	800206e <HAL_TIM_IC_CaptureCallback>
 8001e94:	e005      	b.n	8001ea2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f8e0 	bl	800205c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 f8ef 	bl	8002080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	d122      	bne.n	8001efc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	2b04      	cmp	r3, #4
 8001ec2:	d11b      	bne.n	8001efc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f06f 0204 	mvn.w	r2, #4
 8001ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f8c3 	bl	800206e <HAL_TIM_IC_CaptureCallback>
 8001ee8:	e005      	b.n	8001ef6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f8b6 	bl	800205c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 f8c5 	bl	8002080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	f003 0308 	and.w	r3, r3, #8
 8001f06:	2b08      	cmp	r3, #8
 8001f08:	d122      	bne.n	8001f50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	f003 0308 	and.w	r3, r3, #8
 8001f14:	2b08      	cmp	r3, #8
 8001f16:	d11b      	bne.n	8001f50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f06f 0208 	mvn.w	r2, #8
 8001f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2204      	movs	r2, #4
 8001f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f899 	bl	800206e <HAL_TIM_IC_CaptureCallback>
 8001f3c:	e005      	b.n	8001f4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f88c 	bl	800205c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 f89b 	bl	8002080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	f003 0310 	and.w	r3, r3, #16
 8001f5a:	2b10      	cmp	r3, #16
 8001f5c:	d122      	bne.n	8001fa4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	f003 0310 	and.w	r3, r3, #16
 8001f68:	2b10      	cmp	r3, #16
 8001f6a:	d11b      	bne.n	8001fa4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f06f 0210 	mvn.w	r2, #16
 8001f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2208      	movs	r2, #8
 8001f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f86f 	bl	800206e <HAL_TIM_IC_CaptureCallback>
 8001f90:	e005      	b.n	8001f9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f862 	bl	800205c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 f871 	bl	8002080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d10e      	bne.n	8001fd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d107      	bne.n	8001fd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f06f 0201 	mvn.w	r2, #1
 8001fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7fe f9dc 	bl	8000388 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fda:	2b80      	cmp	r3, #128	; 0x80
 8001fdc:	d10e      	bne.n	8001ffc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fe8:	2b80      	cmp	r3, #128	; 0x80
 8001fea:	d107      	bne.n	8001ffc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f8bf 	bl	800217a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002006:	2b40      	cmp	r3, #64	; 0x40
 8002008:	d10e      	bne.n	8002028 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002014:	2b40      	cmp	r3, #64	; 0x40
 8002016:	d107      	bne.n	8002028 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f835 	bl	8002092 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	f003 0320 	and.w	r3, r3, #32
 8002032:	2b20      	cmp	r3, #32
 8002034:	d10e      	bne.n	8002054 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	f003 0320 	and.w	r3, r3, #32
 8002040:	2b20      	cmp	r3, #32
 8002042:	d107      	bne.n	8002054 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f06f 0220 	mvn.w	r2, #32
 800204c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f88a 	bl	8002168 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002054:	bf00      	nop
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr

0800206e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr

08002080 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	bc80      	pop	{r7}
 8002090:	4770      	bx	lr

08002092 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr

080020a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a29      	ldr	r2, [pc, #164]	; (800215c <TIM_Base_SetConfig+0xb8>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d00b      	beq.n	80020d4 <TIM_Base_SetConfig+0x30>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020c2:	d007      	beq.n	80020d4 <TIM_Base_SetConfig+0x30>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a26      	ldr	r2, [pc, #152]	; (8002160 <TIM_Base_SetConfig+0xbc>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d003      	beq.n	80020d4 <TIM_Base_SetConfig+0x30>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a25      	ldr	r2, [pc, #148]	; (8002164 <TIM_Base_SetConfig+0xc0>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d108      	bne.n	80020e6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a1c      	ldr	r2, [pc, #112]	; (800215c <TIM_Base_SetConfig+0xb8>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d00b      	beq.n	8002106 <TIM_Base_SetConfig+0x62>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f4:	d007      	beq.n	8002106 <TIM_Base_SetConfig+0x62>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a19      	ldr	r2, [pc, #100]	; (8002160 <TIM_Base_SetConfig+0xbc>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d003      	beq.n	8002106 <TIM_Base_SetConfig+0x62>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a18      	ldr	r2, [pc, #96]	; (8002164 <TIM_Base_SetConfig+0xc0>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d108      	bne.n	8002118 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800210c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	4313      	orrs	r3, r2
 8002116:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	4313      	orrs	r3, r2
 8002124:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a07      	ldr	r2, [pc, #28]	; (800215c <TIM_Base_SetConfig+0xb8>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d103      	bne.n	800214c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	691a      	ldr	r2, [r3, #16]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	615a      	str	r2, [r3, #20]
}
 8002152:	bf00      	nop
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr
 800215c:	40012c00 	.word	0x40012c00
 8002160:	40000400 	.word	0x40000400
 8002164:	40000800 	.word	0x40000800

08002168 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr

0800217a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr

0800218c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e042      	b.n	8002224 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d106      	bne.n	80021b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7fe fcc6 	bl	8000b44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2224      	movs	r2, #36	; 0x24
 80021bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68da      	ldr	r2, [r3, #12]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 fdfb 	bl	8002dcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	691a      	ldr	r2, [r3, #16]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	695a      	ldr	r2, [r3, #20]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68da      	ldr	r2, [r3, #12]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002204:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2220      	movs	r2, #32
 8002210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2220      	movs	r2, #32
 8002218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b08a      	sub	sp, #40	; 0x28
 8002230:	af02      	add	r7, sp, #8
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	603b      	str	r3, [r7, #0]
 8002238:	4613      	mov	r3, r2
 800223a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002246:	b2db      	uxtb	r3, r3
 8002248:	2b20      	cmp	r3, #32
 800224a:	d16d      	bne.n	8002328 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d002      	beq.n	8002258 <HAL_UART_Transmit+0x2c>
 8002252:	88fb      	ldrh	r3, [r7, #6]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e066      	b.n	800232a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2221      	movs	r2, #33	; 0x21
 8002266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800226a:	f7fe fdcd 	bl	8000e08 <HAL_GetTick>
 800226e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	88fa      	ldrh	r2, [r7, #6]
 8002274:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	88fa      	ldrh	r2, [r7, #6]
 800227a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002284:	d108      	bne.n	8002298 <HAL_UART_Transmit+0x6c>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d104      	bne.n	8002298 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800228e:	2300      	movs	r3, #0
 8002290:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	61bb      	str	r3, [r7, #24]
 8002296:	e003      	b.n	80022a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800229c:	2300      	movs	r3, #0
 800229e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80022a0:	e02a      	b.n	80022f8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	2200      	movs	r2, #0
 80022aa:	2180      	movs	r1, #128	; 0x80
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f000 fb4a 	bl	8002946 <UART_WaitOnFlagUntilTimeout>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e036      	b.n	800232a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10b      	bne.n	80022da <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	881b      	ldrh	r3, [r3, #0]
 80022c6:	461a      	mov	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	3302      	adds	r3, #2
 80022d6:	61bb      	str	r3, [r7, #24]
 80022d8:	e007      	b.n	80022ea <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	781a      	ldrb	r2, [r3, #0]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	3301      	adds	r3, #1
 80022e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	3b01      	subs	r3, #1
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1cf      	bne.n	80022a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	2200      	movs	r2, #0
 800230a:	2140      	movs	r1, #64	; 0x40
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f000 fb1a 	bl	8002946 <UART_WaitOnFlagUntilTimeout>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e006      	b.n	800232a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2220      	movs	r2, #32
 8002320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002324:	2300      	movs	r3, #0
 8002326:	e000      	b.n	800232a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002328:	2302      	movs	r3, #2
  }
}
 800232a:	4618      	mov	r0, r3
 800232c:	3720      	adds	r7, #32
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b08c      	sub	sp, #48	; 0x30
 8002336:	af00      	add	r7, sp, #0
 8002338:	60f8      	str	r0, [r7, #12]
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	4613      	mov	r3, r2
 800233e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002346:	b2db      	uxtb	r3, r3
 8002348:	2b20      	cmp	r3, #32
 800234a:	d14a      	bne.n	80023e2 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d002      	beq.n	8002358 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8002352:	88fb      	ldrh	r3, [r7, #6]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e043      	b.n	80023e4 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2201      	movs	r2, #1
 8002360:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8002368:	88fb      	ldrh	r3, [r7, #6]
 800236a:	461a      	mov	r2, r3
 800236c:	68b9      	ldr	r1, [r7, #8]
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f000 fb57 	bl	8002a22 <UART_Start_Receive_IT>
 8002374:	4603      	mov	r3, r0
 8002376:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800237a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800237e:	2b00      	cmp	r3, #0
 8002380:	d12c      	bne.n	80023dc <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	2b01      	cmp	r3, #1
 8002388:	d125      	bne.n	80023d6 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800238a:	2300      	movs	r3, #0
 800238c:	613b      	str	r3, [r7, #16]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	613b      	str	r3, [r7, #16]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	613b      	str	r3, [r7, #16]
 800239e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	330c      	adds	r3, #12
 80023a6:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	e853 3f00 	ldrex	r3, [r3]
 80023ae:	617b      	str	r3, [r7, #20]
   return(result);
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	f043 0310 	orr.w	r3, r3, #16
 80023b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	330c      	adds	r3, #12
 80023be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023c0:	627a      	str	r2, [r7, #36]	; 0x24
 80023c2:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023c4:	6a39      	ldr	r1, [r7, #32]
 80023c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023c8:	e841 2300 	strex	r3, r2, [r1]
 80023cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1e5      	bne.n	80023a0 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 80023d4:	e002      	b.n	80023dc <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80023dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023e0:	e000      	b.n	80023e4 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80023e2:	2302      	movs	r3, #2
  }
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3730      	adds	r7, #48	; 0x30
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b0ba      	sub	sp, #232	; 0xe8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002412:	2300      	movs	r3, #0
 8002414:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002418:	2300      	movs	r3, #0
 800241a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800241e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800242a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10f      	bne.n	8002452 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002436:	f003 0320 	and.w	r3, r3, #32
 800243a:	2b00      	cmp	r3, #0
 800243c:	d009      	beq.n	8002452 <HAL_UART_IRQHandler+0x66>
 800243e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002442:	f003 0320 	and.w	r3, r3, #32
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 fbff 	bl	8002c4e <UART_Receive_IT>
      return;
 8002450:	e25b      	b.n	800290a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002452:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 80de 	beq.w	8002618 <HAL_UART_IRQHandler+0x22c>
 800245c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	2b00      	cmp	r3, #0
 8002466:	d106      	bne.n	8002476 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800246c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 80d1 	beq.w	8002618 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00b      	beq.n	800249a <HAL_UART_IRQHandler+0xae>
 8002482:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248a:	2b00      	cmp	r3, #0
 800248c:	d005      	beq.n	800249a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	f043 0201 	orr.w	r2, r3, #1
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800249a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800249e:	f003 0304 	and.w	r3, r3, #4
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00b      	beq.n	80024be <HAL_UART_IRQHandler+0xd2>
 80024a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d005      	beq.n	80024be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b6:	f043 0202 	orr.w	r2, r3, #2
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00b      	beq.n	80024e2 <HAL_UART_IRQHandler+0xf6>
 80024ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d005      	beq.n	80024e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024da:	f043 0204 	orr.w	r2, r3, #4
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80024e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d011      	beq.n	8002512 <HAL_UART_IRQHandler+0x126>
 80024ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024f2:	f003 0320 	and.w	r3, r3, #32
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d105      	bne.n	8002506 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80024fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b00      	cmp	r3, #0
 8002504:	d005      	beq.n	8002512 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250a:	f043 0208 	orr.w	r2, r3, #8
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002516:	2b00      	cmp	r3, #0
 8002518:	f000 81f2 	beq.w	8002900 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800251c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002520:	f003 0320 	and.w	r3, r3, #32
 8002524:	2b00      	cmp	r3, #0
 8002526:	d008      	beq.n	800253a <HAL_UART_IRQHandler+0x14e>
 8002528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800252c:	f003 0320 	and.w	r3, r3, #32
 8002530:	2b00      	cmp	r3, #0
 8002532:	d002      	beq.n	800253a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 fb8a 	bl	8002c4e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002544:	2b00      	cmp	r3, #0
 8002546:	bf14      	ite	ne
 8002548:	2301      	movne	r3, #1
 800254a:	2300      	moveq	r3, #0
 800254c:	b2db      	uxtb	r3, r3
 800254e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002556:	f003 0308 	and.w	r3, r3, #8
 800255a:	2b00      	cmp	r3, #0
 800255c:	d103      	bne.n	8002566 <HAL_UART_IRQHandler+0x17a>
 800255e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002562:	2b00      	cmp	r3, #0
 8002564:	d04f      	beq.n	8002606 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 fa94 	bl	8002a94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002576:	2b00      	cmp	r3, #0
 8002578:	d041      	beq.n	80025fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	3314      	adds	r3, #20
 8002580:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002584:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002588:	e853 3f00 	ldrex	r3, [r3]
 800258c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002590:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002594:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002598:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	3314      	adds	r3, #20
 80025a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80025a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80025aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80025b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80025b6:	e841 2300 	strex	r3, r2, [r1]
 80025ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80025be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1d9      	bne.n	800257a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d013      	beq.n	80025f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d2:	4a7e      	ldr	r2, [pc, #504]	; (80027cc <HAL_UART_IRQHandler+0x3e0>)
 80025d4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fe fd38 	bl	8001050 <HAL_DMA_Abort_IT>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d016      	beq.n	8002614 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80025f0:	4610      	mov	r0, r2
 80025f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025f4:	e00e      	b.n	8002614 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 f99c 	bl	8002934 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025fc:	e00a      	b.n	8002614 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f998 	bl	8002934 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002604:	e006      	b.n	8002614 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f994 	bl	8002934 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002612:	e175      	b.n	8002900 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002614:	bf00      	nop
    return;
 8002616:	e173      	b.n	8002900 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261c:	2b01      	cmp	r3, #1
 800261e:	f040 814f 	bne.w	80028c0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002626:	f003 0310 	and.w	r3, r3, #16
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 8148 	beq.w	80028c0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002634:	f003 0310 	and.w	r3, r3, #16
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 8141 	beq.w	80028c0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800263e:	2300      	movs	r3, #0
 8002640:	60bb      	str	r3, [r7, #8]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	60bb      	str	r3, [r7, #8]
 8002652:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 80b6 	beq.w	80027d0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002670:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 8145 	beq.w	8002904 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800267e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002682:	429a      	cmp	r2, r3
 8002684:	f080 813e 	bcs.w	8002904 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800268e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	2b20      	cmp	r3, #32
 8002698:	f000 8088 	beq.w	80027ac <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	330c      	adds	r3, #12
 80026a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026aa:	e853 3f00 	ldrex	r3, [r3]
 80026ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80026b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	330c      	adds	r3, #12
 80026c4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80026c8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80026cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026d0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80026d4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80026d8:	e841 2300 	strex	r3, r2, [r1]
 80026dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80026e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1d9      	bne.n	800269c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	3314      	adds	r3, #20
 80026ee:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026f2:	e853 3f00 	ldrex	r3, [r3]
 80026f6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80026f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026fa:	f023 0301 	bic.w	r3, r3, #1
 80026fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	3314      	adds	r3, #20
 8002708:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800270c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002710:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002712:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002714:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002718:	e841 2300 	strex	r3, r2, [r1]
 800271c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800271e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1e1      	bne.n	80026e8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	3314      	adds	r3, #20
 800272a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800272c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800272e:	e853 3f00 	ldrex	r3, [r3]
 8002732:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002734:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002736:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800273a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	3314      	adds	r3, #20
 8002744:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002748:	66fa      	str	r2, [r7, #108]	; 0x6c
 800274a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800274c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800274e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002750:	e841 2300 	strex	r3, r2, [r1]
 8002754:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002756:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1e3      	bne.n	8002724 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2220      	movs	r2, #32
 8002760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	330c      	adds	r3, #12
 8002770:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002774:	e853 3f00 	ldrex	r3, [r3]
 8002778:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800277a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800277c:	f023 0310 	bic.w	r3, r3, #16
 8002780:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	330c      	adds	r3, #12
 800278a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800278e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002790:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002792:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002794:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002796:	e841 2300 	strex	r3, r2, [r1]
 800279a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800279c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1e3      	bne.n	800276a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7fe fc17 	bl	8000fda <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2202      	movs	r2, #2
 80027b0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	b29b      	uxth	r3, r3
 80027c0:	4619      	mov	r1, r3
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7fd fcc2 	bl	800014c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80027c8:	e09c      	b.n	8002904 <HAL_UART_IRQHandler+0x518>
 80027ca:	bf00      	nop
 80027cc:	08002b59 	.word	0x08002b59
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027d8:	b29b      	uxth	r3, r3
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f000 808e 	beq.w	8002908 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80027ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 8089 	beq.w	8002908 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	330c      	adds	r3, #12
 80027fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002800:	e853 3f00 	ldrex	r3, [r3]
 8002804:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002808:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800280c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	330c      	adds	r3, #12
 8002816:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800281a:	647a      	str	r2, [r7, #68]	; 0x44
 800281c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800281e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002820:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002822:	e841 2300 	strex	r3, r2, [r1]
 8002826:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1e3      	bne.n	80027f6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	3314      	adds	r3, #20
 8002834:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	e853 3f00 	ldrex	r3, [r3]
 800283c:	623b      	str	r3, [r7, #32]
   return(result);
 800283e:	6a3b      	ldr	r3, [r7, #32]
 8002840:	f023 0301 	bic.w	r3, r3, #1
 8002844:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	3314      	adds	r3, #20
 800284e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002852:	633a      	str	r2, [r7, #48]	; 0x30
 8002854:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002856:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800285a:	e841 2300 	strex	r3, r2, [r1]
 800285e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1e3      	bne.n	800282e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2220      	movs	r2, #32
 800286a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	330c      	adds	r3, #12
 800287a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	e853 3f00 	ldrex	r3, [r3]
 8002882:	60fb      	str	r3, [r7, #12]
   return(result);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f023 0310 	bic.w	r3, r3, #16
 800288a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	330c      	adds	r3, #12
 8002894:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002898:	61fa      	str	r2, [r7, #28]
 800289a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800289c:	69b9      	ldr	r1, [r7, #24]
 800289e:	69fa      	ldr	r2, [r7, #28]
 80028a0:	e841 2300 	strex	r3, r2, [r1]
 80028a4:	617b      	str	r3, [r7, #20]
   return(result);
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1e3      	bne.n	8002874 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2202      	movs	r2, #2
 80028b0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80028b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80028b6:	4619      	mov	r1, r3
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7fd fc47 	bl	800014c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80028be:	e023      	b.n	8002908 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80028c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d009      	beq.n	80028e0 <HAL_UART_IRQHandler+0x4f4>
 80028cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d003      	beq.n	80028e0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 f951 	bl	8002b80 <UART_Transmit_IT>
    return;
 80028de:	e014      	b.n	800290a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80028e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00e      	beq.n	800290a <HAL_UART_IRQHandler+0x51e>
 80028ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d008      	beq.n	800290a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 f990 	bl	8002c1e <UART_EndTransmit_IT>
    return;
 80028fe:	e004      	b.n	800290a <HAL_UART_IRQHandler+0x51e>
    return;
 8002900:	bf00      	nop
 8002902:	e002      	b.n	800290a <HAL_UART_IRQHandler+0x51e>
      return;
 8002904:	bf00      	nop
 8002906:	e000      	b.n	800290a <HAL_UART_IRQHandler+0x51e>
      return;
 8002908:	bf00      	nop
  }
}
 800290a:	37e8      	adds	r7, #232	; 0xe8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	bc80      	pop	{r7}
 8002920:	4770      	bx	lr

08002922 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002922:	b480      	push	{r7}
 8002924:	b083      	sub	sp, #12
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr

08002934 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	bc80      	pop	{r7}
 8002944:	4770      	bx	lr

08002946 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b090      	sub	sp, #64	; 0x40
 800294a:	af00      	add	r7, sp, #0
 800294c:	60f8      	str	r0, [r7, #12]
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	603b      	str	r3, [r7, #0]
 8002952:	4613      	mov	r3, r2
 8002954:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002956:	e050      	b.n	80029fa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002958:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800295a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800295e:	d04c      	beq.n	80029fa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002962:	2b00      	cmp	r3, #0
 8002964:	d007      	beq.n	8002976 <UART_WaitOnFlagUntilTimeout+0x30>
 8002966:	f7fe fa4f 	bl	8000e08 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002972:	429a      	cmp	r2, r3
 8002974:	d241      	bcs.n	80029fa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	330c      	adds	r3, #12
 800297c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800297e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002980:	e853 3f00 	ldrex	r3, [r3]
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800298c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	330c      	adds	r3, #12
 8002994:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002996:	637a      	str	r2, [r7, #52]	; 0x34
 8002998:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800299a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800299c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800299e:	e841 2300 	strex	r3, r2, [r1]
 80029a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80029a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1e5      	bne.n	8002976 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	3314      	adds	r3, #20
 80029b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	e853 3f00 	ldrex	r3, [r3]
 80029b8:	613b      	str	r3, [r7, #16]
   return(result);
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	f023 0301 	bic.w	r3, r3, #1
 80029c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	3314      	adds	r3, #20
 80029c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029ca:	623a      	str	r2, [r7, #32]
 80029cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ce:	69f9      	ldr	r1, [r7, #28]
 80029d0:	6a3a      	ldr	r2, [r7, #32]
 80029d2:	e841 2300 	strex	r3, r2, [r1]
 80029d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1e5      	bne.n	80029aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2220      	movs	r2, #32
 80029e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2220      	movs	r2, #32
 80029ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e00f      	b.n	8002a1a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	4013      	ands	r3, r2
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	bf0c      	ite	eq
 8002a0a:	2301      	moveq	r3, #1
 8002a0c:	2300      	movne	r3, #0
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	461a      	mov	r2, r3
 8002a12:	79fb      	ldrb	r3, [r7, #7]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d09f      	beq.n	8002958 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3740      	adds	r7, #64	; 0x40
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b085      	sub	sp, #20
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	60f8      	str	r0, [r7, #12]
 8002a2a:	60b9      	str	r1, [r7, #8]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	88fa      	ldrh	r2, [r7, #6]
 8002a3a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	88fa      	ldrh	r2, [r7, #6]
 8002a40:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2222      	movs	r2, #34	; 0x22
 8002a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d007      	beq.n	8002a68 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a66:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	695a      	ldr	r2, [r3, #20]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0201 	orr.w	r2, r2, #1
 8002a76:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68da      	ldr	r2, [r3, #12]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f042 0220 	orr.w	r2, r2, #32
 8002a86:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr

08002a94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b095      	sub	sp, #84	; 0x54
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	330c      	adds	r3, #12
 8002aa2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aa6:	e853 3f00 	ldrex	r3, [r3]
 8002aaa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	330c      	adds	r3, #12
 8002aba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002abc:	643a      	str	r2, [r7, #64]	; 0x40
 8002abe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002ac2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ac4:	e841 2300 	strex	r3, r2, [r1]
 8002ac8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1e5      	bne.n	8002a9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	3314      	adds	r3, #20
 8002ad6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad8:	6a3b      	ldr	r3, [r7, #32]
 8002ada:	e853 3f00 	ldrex	r3, [r3]
 8002ade:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	f023 0301 	bic.w	r3, r3, #1
 8002ae6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	3314      	adds	r3, #20
 8002aee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002af0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002af2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002af6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002af8:	e841 2300 	strex	r3, r2, [r1]
 8002afc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1e5      	bne.n	8002ad0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d119      	bne.n	8002b40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	330c      	adds	r3, #12
 8002b12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	e853 3f00 	ldrex	r3, [r3]
 8002b1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	f023 0310 	bic.w	r3, r3, #16
 8002b22:	647b      	str	r3, [r7, #68]	; 0x44
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	330c      	adds	r3, #12
 8002b2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b2c:	61ba      	str	r2, [r7, #24]
 8002b2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b30:	6979      	ldr	r1, [r7, #20]
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	e841 2300 	strex	r3, r2, [r1]
 8002b38:	613b      	str	r3, [r7, #16]
   return(result);
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1e5      	bne.n	8002b0c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2220      	movs	r2, #32
 8002b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002b4e:	bf00      	nop
 8002b50:	3754      	adds	r7, #84	; 0x54
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr

08002b58 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f7ff fede 	bl	8002934 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b78:	bf00      	nop
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b21      	cmp	r3, #33	; 0x21
 8002b92:	d13e      	bne.n	8002c12 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b9c:	d114      	bne.n	8002bc8 <UART_Transmit_IT+0x48>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d110      	bne.n	8002bc8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	881b      	ldrh	r3, [r3, #0]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	1c9a      	adds	r2, r3, #2
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	621a      	str	r2, [r3, #32]
 8002bc6:	e008      	b.n	8002bda <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	1c59      	adds	r1, r3, #1
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	6211      	str	r1, [r2, #32]
 8002bd2:	781a      	ldrb	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	3b01      	subs	r3, #1
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	4619      	mov	r1, r3
 8002be8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10f      	bne.n	8002c0e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68da      	ldr	r2, [r3, #12]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bfc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68da      	ldr	r2, [r3, #12]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c0c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	e000      	b.n	8002c14 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002c12:	2302      	movs	r3, #2
  }
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3714      	adds	r7, #20
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bc80      	pop	{r7}
 8002c1c:	4770      	bx	lr

08002c1e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b082      	sub	sp, #8
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68da      	ldr	r2, [r3, #12]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c34:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2220      	movs	r2, #32
 8002c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7ff fe66 	bl	8002910 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b08c      	sub	sp, #48	; 0x30
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b22      	cmp	r3, #34	; 0x22
 8002c60:	f040 80ae 	bne.w	8002dc0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c6c:	d117      	bne.n	8002c9e <UART_Receive_IT+0x50>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d113      	bne.n	8002c9e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002c76:	2300      	movs	r3, #0
 8002c78:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c90:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c96:	1c9a      	adds	r2, r3, #2
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	629a      	str	r2, [r3, #40]	; 0x28
 8002c9c:	e026      	b.n	8002cec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cb0:	d007      	beq.n	8002cc2 <UART_Receive_IT+0x74>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10a      	bne.n	8002cd0 <UART_Receive_IT+0x82>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d106      	bne.n	8002cd0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ccc:	701a      	strb	r2, [r3, #0]
 8002cce:	e008      	b.n	8002ce2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d15d      	bne.n	8002dbc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68da      	ldr	r2, [r3, #12]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0220 	bic.w	r2, r2, #32
 8002d0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68da      	ldr	r2, [r3, #12]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695a      	ldr	r2, [r3, #20]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 0201 	bic.w	r2, r2, #1
 8002d2e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2220      	movs	r2, #32
 8002d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d135      	bne.n	8002db2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	330c      	adds	r3, #12
 8002d52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	e853 3f00 	ldrex	r3, [r3]
 8002d5a:	613b      	str	r3, [r7, #16]
   return(result);
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	f023 0310 	bic.w	r3, r3, #16
 8002d62:	627b      	str	r3, [r7, #36]	; 0x24
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	330c      	adds	r3, #12
 8002d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d6c:	623a      	str	r2, [r7, #32]
 8002d6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d70:	69f9      	ldr	r1, [r7, #28]
 8002d72:	6a3a      	ldr	r2, [r7, #32]
 8002d74:	e841 2300 	strex	r3, r2, [r1]
 8002d78:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1e5      	bne.n	8002d4c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0310 	and.w	r3, r3, #16
 8002d8a:	2b10      	cmp	r3, #16
 8002d8c:	d10a      	bne.n	8002da4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60fb      	str	r3, [r7, #12]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002da8:	4619      	mov	r1, r3
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7fd f9ce 	bl	800014c <HAL_UARTEx_RxEventCallback>
 8002db0:	e002      	b.n	8002db8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7ff fdb5 	bl	8002922 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002db8:	2300      	movs	r3, #0
 8002dba:	e002      	b.n	8002dc2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	e000      	b.n	8002dc2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002dc0:	2302      	movs	r3, #2
  }
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3730      	adds	r7, #48	; 0x30
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
	...

08002dcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68da      	ldr	r2, [r3, #12]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	689a      	ldr	r2, [r3, #8]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002e06:	f023 030c 	bic.w	r3, r3, #12
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6812      	ldr	r2, [r2, #0]
 8002e0e:	68b9      	ldr	r1, [r7, #8]
 8002e10:	430b      	orrs	r3, r1
 8002e12:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	699a      	ldr	r2, [r3, #24]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a2c      	ldr	r2, [pc, #176]	; (8002ee0 <UART_SetConfig+0x114>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d103      	bne.n	8002e3c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002e34:	f7fe fefe 	bl	8001c34 <HAL_RCC_GetPCLK2Freq>
 8002e38:	60f8      	str	r0, [r7, #12]
 8002e3a:	e002      	b.n	8002e42 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002e3c:	f7fe fee6 	bl	8001c0c <HAL_RCC_GetPCLK1Freq>
 8002e40:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	4613      	mov	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	009a      	lsls	r2, r3, #2
 8002e4c:	441a      	add	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e58:	4a22      	ldr	r2, [pc, #136]	; (8002ee4 <UART_SetConfig+0x118>)
 8002e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5e:	095b      	lsrs	r3, r3, #5
 8002e60:	0119      	lsls	r1, r3, #4
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	4613      	mov	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	009a      	lsls	r2, r3, #2
 8002e6c:	441a      	add	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e78:	4b1a      	ldr	r3, [pc, #104]	; (8002ee4 <UART_SetConfig+0x118>)
 8002e7a:	fba3 0302 	umull	r0, r3, r3, r2
 8002e7e:	095b      	lsrs	r3, r3, #5
 8002e80:	2064      	movs	r0, #100	; 0x64
 8002e82:	fb00 f303 	mul.w	r3, r0, r3
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	011b      	lsls	r3, r3, #4
 8002e8a:	3332      	adds	r3, #50	; 0x32
 8002e8c:	4a15      	ldr	r2, [pc, #84]	; (8002ee4 <UART_SetConfig+0x118>)
 8002e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e92:	095b      	lsrs	r3, r3, #5
 8002e94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e98:	4419      	add	r1, r3
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	009a      	lsls	r2, r3, #2
 8002ea4:	441a      	add	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	fbb2 f2f3 	udiv	r2, r2, r3
 8002eb0:	4b0c      	ldr	r3, [pc, #48]	; (8002ee4 <UART_SetConfig+0x118>)
 8002eb2:	fba3 0302 	umull	r0, r3, r3, r2
 8002eb6:	095b      	lsrs	r3, r3, #5
 8002eb8:	2064      	movs	r0, #100	; 0x64
 8002eba:	fb00 f303 	mul.w	r3, r0, r3
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	3332      	adds	r3, #50	; 0x32
 8002ec4:	4a07      	ldr	r2, [pc, #28]	; (8002ee4 <UART_SetConfig+0x118>)
 8002ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eca:	095b      	lsrs	r3, r3, #5
 8002ecc:	f003 020f 	and.w	r2, r3, #15
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	440a      	add	r2, r1
 8002ed6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002ed8:	bf00      	nop
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40013800 	.word	0x40013800
 8002ee4:	51eb851f 	.word	0x51eb851f

08002ee8 <__libc_init_array>:
 8002ee8:	b570      	push	{r4, r5, r6, lr}
 8002eea:	2600      	movs	r6, #0
 8002eec:	4d0c      	ldr	r5, [pc, #48]	; (8002f20 <__libc_init_array+0x38>)
 8002eee:	4c0d      	ldr	r4, [pc, #52]	; (8002f24 <__libc_init_array+0x3c>)
 8002ef0:	1b64      	subs	r4, r4, r5
 8002ef2:	10a4      	asrs	r4, r4, #2
 8002ef4:	42a6      	cmp	r6, r4
 8002ef6:	d109      	bne.n	8002f0c <__libc_init_array+0x24>
 8002ef8:	f000 f822 	bl	8002f40 <_init>
 8002efc:	2600      	movs	r6, #0
 8002efe:	4d0a      	ldr	r5, [pc, #40]	; (8002f28 <__libc_init_array+0x40>)
 8002f00:	4c0a      	ldr	r4, [pc, #40]	; (8002f2c <__libc_init_array+0x44>)
 8002f02:	1b64      	subs	r4, r4, r5
 8002f04:	10a4      	asrs	r4, r4, #2
 8002f06:	42a6      	cmp	r6, r4
 8002f08:	d105      	bne.n	8002f16 <__libc_init_array+0x2e>
 8002f0a:	bd70      	pop	{r4, r5, r6, pc}
 8002f0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f10:	4798      	blx	r3
 8002f12:	3601      	adds	r6, #1
 8002f14:	e7ee      	b.n	8002ef4 <__libc_init_array+0xc>
 8002f16:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f1a:	4798      	blx	r3
 8002f1c:	3601      	adds	r6, #1
 8002f1e:	e7f2      	b.n	8002f06 <__libc_init_array+0x1e>
 8002f20:	08003204 	.word	0x08003204
 8002f24:	08003204 	.word	0x08003204
 8002f28:	08003204 	.word	0x08003204
 8002f2c:	08003208 	.word	0x08003208

08002f30 <memset>:
 8002f30:	4603      	mov	r3, r0
 8002f32:	4402      	add	r2, r0
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d100      	bne.n	8002f3a <memset+0xa>
 8002f38:	4770      	bx	lr
 8002f3a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f3e:	e7f9      	b.n	8002f34 <memset+0x4>

08002f40 <_init>:
 8002f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f42:	bf00      	nop
 8002f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f46:	bc08      	pop	{r3}
 8002f48:	469e      	mov	lr, r3
 8002f4a:	4770      	bx	lr

08002f4c <_fini>:
 8002f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f4e:	bf00      	nop
 8002f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f52:	bc08      	pop	{r3}
 8002f54:	469e      	mov	lr, r3
 8002f56:	4770      	bx	lr
