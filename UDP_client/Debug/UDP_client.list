
UDP_client.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f48c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c4c  0800f61c  0800f61c  0001f61c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012268  08012268  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  08012268  08012268  00022268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012270  08012270  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012270  08012270  00022270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012274  08012274  00022274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08012278  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030078  2**0
                  CONTENTS
 10 .bss          00008ab4  20000078  20000078  00030078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20008b2c  20008b2c  00030078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002f607  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000058f5  00000000  00000000  0005f6af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001548  00000000  00000000  00064fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001498  00000000  00000000  000664f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d0c3  00000000  00000000  00067988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000240fe  00000000  00000000  00094a4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e174e  00000000  00000000  000b8b49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0019a297  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006138  00000000  00000000  0019a2ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f604 	.word	0x0800f604

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800f604 	.word	0x0800f604

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056c:	f000 fb46 	bl	8000bfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000570:	f000 f816 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f000 f8d0 	bl	8000718 <MX_GPIO_Init>
  MX_LWIP_Init();
 8000578:	f003 f8fe 	bl	8003778 <MX_LWIP_Init>
  MX_TIM1_Init();
 800057c:	f000 f87a 	bl	8000674 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000580:	4805      	ldr	r0, [pc, #20]	; (8000598 <main+0x30>)
 8000582:	f002 fcc7 	bl	8002f14 <HAL_TIM_Base_Start_IT>

  udpClient_connect();
 8000586:	f000 fa85 	bl	8000a94 <udpClient_connect>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ethernetif_input(&gnetif);
 800058a:	4804      	ldr	r0, [pc, #16]	; (800059c <main+0x34>)
 800058c:	f003 fcd4 	bl	8003f38 <ethernetif_input>
	  sys_check_timeouts();
 8000590:	f00a fdf2 	bl	800b178 <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 8000594:	e7f9      	b.n	800058a <main+0x22>
 8000596:	bf00      	nop
 8000598:	20000248 	.word	0x20000248
 800059c:	20000214 	.word	0x20000214

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b094      	sub	sp, #80	; 0x50
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 0320 	add.w	r3, r7, #32
 80005aa:	2230      	movs	r2, #48	; 0x30
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f00d fe48 	bl	800e244 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c4:	2300      	movs	r3, #0
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	4b28      	ldr	r3, [pc, #160]	; (800066c <SystemClock_Config+0xcc>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005cc:	4a27      	ldr	r2, [pc, #156]	; (800066c <SystemClock_Config+0xcc>)
 80005ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d2:	6413      	str	r3, [r2, #64]	; 0x40
 80005d4:	4b25      	ldr	r3, [pc, #148]	; (800066c <SystemClock_Config+0xcc>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e0:	2300      	movs	r3, #0
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	4b22      	ldr	r3, [pc, #136]	; (8000670 <SystemClock_Config+0xd0>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a21      	ldr	r2, [pc, #132]	; (8000670 <SystemClock_Config+0xd0>)
 80005ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ee:	6013      	str	r3, [r2, #0]
 80005f0:	4b1f      	ldr	r3, [pc, #124]	; (8000670 <SystemClock_Config+0xd0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005fc:	2301      	movs	r3, #1
 80005fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000600:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000604:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000606:	2302      	movs	r3, #2
 8000608:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800060a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800060e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000610:	2304      	movs	r3, #4
 8000612:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000614:	23a8      	movs	r3, #168	; 0xa8
 8000616:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000618:	2302      	movs	r3, #2
 800061a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800061c:	2304      	movs	r3, #4
 800061e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000620:	f107 0320 	add.w	r3, r7, #32
 8000624:	4618      	mov	r0, r3
 8000626:	f001 ffd9 	bl	80025dc <HAL_RCC_OscConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000630:	f000 f8b6 	bl	80007a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000634:	230f      	movs	r3, #15
 8000636:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000638:	2302      	movs	r3, #2
 800063a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000640:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000644:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800064a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2105      	movs	r1, #5
 8000652:	4618      	mov	r0, r3
 8000654:	f002 fa3a 	bl	8002acc <HAL_RCC_ClockConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800065e:	f000 f89f 	bl	80007a0 <Error_Handler>
  }
}
 8000662:	bf00      	nop
 8000664:	3750      	adds	r7, #80	; 0x50
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40023800 	.word	0x40023800
 8000670:	40007000 	.word	0x40007000

08000674 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800067a:	f107 0308 	add.w	r3, r7, #8
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000688:	463b      	mov	r3, r7
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000690:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <MX_TIM1_Init+0x9c>)
 8000692:	4a20      	ldr	r2, [pc, #128]	; (8000714 <MX_TIM1_Init+0xa0>)
 8000694:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8400-1;
 8000696:	4b1e      	ldr	r3, [pc, #120]	; (8000710 <MX_TIM1_Init+0x9c>)
 8000698:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800069c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800069e:	4b1c      	ldr	r3, [pc, #112]	; (8000710 <MX_TIM1_Init+0x9c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 80006a4:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <MX_TIM1_Init+0x9c>)
 80006a6:	f242 720f 	movw	r2, #9999	; 0x270f
 80006aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ac:	4b18      	ldr	r3, [pc, #96]	; (8000710 <MX_TIM1_Init+0x9c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006b2:	4b17      	ldr	r3, [pc, #92]	; (8000710 <MX_TIM1_Init+0x9c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006b8:	4b15      	ldr	r3, [pc, #84]	; (8000710 <MX_TIM1_Init+0x9c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006be:	4814      	ldr	r0, [pc, #80]	; (8000710 <MX_TIM1_Init+0x9c>)
 80006c0:	f002 fbd8 	bl	8002e74 <HAL_TIM_Base_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80006ca:	f000 f869 	bl	80007a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006d4:	f107 0308 	add.w	r3, r7, #8
 80006d8:	4619      	mov	r1, r3
 80006da:	480d      	ldr	r0, [pc, #52]	; (8000710 <MX_TIM1_Init+0x9c>)
 80006dc:	f002 fd92 	bl	8003204 <HAL_TIM_ConfigClockSource>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80006e6:	f000 f85b 	bl	80007a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ea:	2300      	movs	r3, #0
 80006ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006f2:	463b      	mov	r3, r7
 80006f4:	4619      	mov	r1, r3
 80006f6:	4806      	ldr	r0, [pc, #24]	; (8000710 <MX_TIM1_Init+0x9c>)
 80006f8:	f002 ffae 	bl	8003658 <HAL_TIMEx_MasterConfigSynchronization>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000702:	f000 f84d 	bl	80007a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000706:	bf00      	nop
 8000708:	3718      	adds	r7, #24
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000248 	.word	0x20000248
 8000714:	40010000 	.word	0x40010000

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b480      	push	{r7}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	4b1e      	ldr	r3, [pc, #120]	; (800079c <MX_GPIO_Init+0x84>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a1d      	ldr	r2, [pc, #116]	; (800079c <MX_GPIO_Init+0x84>)
 8000728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b1b      	ldr	r3, [pc, #108]	; (800079c <MX_GPIO_Init+0x84>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	4b17      	ldr	r3, [pc, #92]	; (800079c <MX_GPIO_Init+0x84>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a16      	ldr	r2, [pc, #88]	; (800079c <MX_GPIO_Init+0x84>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_GPIO_Init+0x84>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	4b10      	ldr	r3, [pc, #64]	; (800079c <MX_GPIO_Init+0x84>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a0f      	ldr	r2, [pc, #60]	; (800079c <MX_GPIO_Init+0x84>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b0d      	ldr	r3, [pc, #52]	; (800079c <MX_GPIO_Init+0x84>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	603b      	str	r3, [r7, #0]
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_GPIO_Init+0x84>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a08      	ldr	r2, [pc, #32]	; (800079c <MX_GPIO_Init+0x84>)
 800077c:	f043 0302 	orr.w	r3, r3, #2
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_GPIO_Init+0x84>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0302 	and.w	r3, r3, #2
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	683b      	ldr	r3, [r7, #0]

}
 800078e:	bf00      	nop
 8000790:	3714      	adds	r7, #20
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800

080007a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a4:	b672      	cpsid	i
}
 80007a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <Error_Handler+0x8>
	...

080007ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <HAL_MspInit+0x4c>)
 80007b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ba:	4a0f      	ldr	r2, [pc, #60]	; (80007f8 <HAL_MspInit+0x4c>)
 80007bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c0:	6453      	str	r3, [r2, #68]	; 0x44
 80007c2:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <HAL_MspInit+0x4c>)
 80007c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	603b      	str	r3, [r7, #0]
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <HAL_MspInit+0x4c>)
 80007d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d6:	4a08      	ldr	r2, [pc, #32]	; (80007f8 <HAL_MspInit+0x4c>)
 80007d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007dc:	6413      	str	r3, [r2, #64]	; 0x40
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <HAL_MspInit+0x4c>)
 80007e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800

080007fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a0e      	ldr	r2, [pc, #56]	; (8000844 <HAL_TIM_Base_MspInit+0x48>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d115      	bne.n	800083a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <HAL_TIM_Base_MspInit+0x4c>)
 8000814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000816:	4a0c      	ldr	r2, [pc, #48]	; (8000848 <HAL_TIM_Base_MspInit+0x4c>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6453      	str	r3, [r2, #68]	; 0x44
 800081e:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <HAL_TIM_Base_MspInit+0x4c>)
 8000820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	2100      	movs	r1, #0
 800082e:	2019      	movs	r0, #25
 8000830:	f000 fb55 	bl	8000ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000834:	2019      	movs	r0, #25
 8000836:	f000 fb6e 	bl	8000f16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800083a:	bf00      	nop
 800083c:	3710      	adds	r7, #16
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40010000 	.word	0x40010000
 8000848:	40023800 	.word	0x40023800

0800084c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000850:	e7fe      	b.n	8000850 <NMI_Handler+0x4>

08000852 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000856:	e7fe      	b.n	8000856 <HardFault_Handler+0x4>

08000858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800085c:	e7fe      	b.n	800085c <MemManage_Handler+0x4>

0800085e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000862:	e7fe      	b.n	8000862 <BusFault_Handler+0x4>

08000864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <UsageFault_Handler+0x4>

0800086a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr

08000886 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000898:	f000 fa02 	bl	8000ca0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}

080008a0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008a4:	4802      	ldr	r0, [pc, #8]	; (80008b0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80008a6:	f002 fba5 	bl	8002ff4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000248 	.word	0x20000248

080008b4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80008b8:	4802      	ldr	r0, [pc, #8]	; (80008c4 <ETH_IRQHandler+0x10>)
 80008ba:	f000 ff27 	bl	800170c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20001be4 	.word	0x20001be4

080008c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
	return 1;
 80008cc:	2301      	movs	r3, #1
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <_kill>:

int _kill(int pid, int sig)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80008e2:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <_kill+0x20>)
 80008e4:	2216      	movs	r2, #22
 80008e6:	601a      	str	r2, [r3, #0]
	return -1;
 80008e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr
 80008f8:	20008b1c 	.word	0x20008b1c

080008fc <_exit>:

void _exit (int status)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000904:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f7ff ffe5 	bl	80008d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800090e:	e7fe      	b.n	800090e <_exit+0x12>

08000910 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
 8000920:	e00a      	b.n	8000938 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000922:	f3af 8000 	nop.w
 8000926:	4601      	mov	r1, r0
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	1c5a      	adds	r2, r3, #1
 800092c:	60ba      	str	r2, [r7, #8]
 800092e:	b2ca      	uxtb	r2, r1
 8000930:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	3301      	adds	r3, #1
 8000936:	617b      	str	r3, [r7, #20]
 8000938:	697a      	ldr	r2, [r7, #20]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	429a      	cmp	r2, r3
 800093e:	dbf0      	blt.n	8000922 <_read+0x12>
	}

return len;
 8000940:	687b      	ldr	r3, [r7, #4]
}
 8000942:	4618      	mov	r0, r3
 8000944:	3718      	adds	r7, #24
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	b086      	sub	sp, #24
 800094e:	af00      	add	r7, sp, #0
 8000950:	60f8      	str	r0, [r7, #12]
 8000952:	60b9      	str	r1, [r7, #8]
 8000954:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
 800095a:	e009      	b.n	8000970 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	1c5a      	adds	r2, r3, #1
 8000960:	60ba      	str	r2, [r7, #8]
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	4618      	mov	r0, r3
 8000966:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	3301      	adds	r3, #1
 800096e:	617b      	str	r3, [r7, #20]
 8000970:	697a      	ldr	r2, [r7, #20]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	429a      	cmp	r2, r3
 8000976:	dbf1      	blt.n	800095c <_write+0x12>
	}
	return len;
 8000978:	687b      	ldr	r3, [r7, #4]
}
 800097a:	4618      	mov	r0, r3
 800097c:	3718      	adds	r7, #24
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <_close>:

int _close(int file)
{
 8000982:	b480      	push	{r7}
 8000984:	b083      	sub	sp, #12
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
	return -1;
 800098a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800098e:	4618      	mov	r0, r3
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800099a:	b480      	push	{r7}
 800099c:	b083      	sub	sp, #12
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
 80009a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009aa:	605a      	str	r2, [r3, #4]
	return 0;
 80009ac:	2300      	movs	r3, #0
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <_isatty>:

int _isatty(int file)
{
 80009ba:	b480      	push	{r7}
 80009bc:	b083      	sub	sp, #12
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
	return 1;
 80009c2:	2301      	movs	r3, #1
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	60b9      	str	r1, [r7, #8]
 80009da:	607a      	str	r2, [r7, #4]
	return 0;
 80009dc:	2300      	movs	r3, #0
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3714      	adds	r7, #20
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
	...

080009ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b087      	sub	sp, #28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009f4:	4a14      	ldr	r2, [pc, #80]	; (8000a48 <_sbrk+0x5c>)
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <_sbrk+0x60>)
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a00:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <_sbrk+0x64>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d102      	bne.n	8000a0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a08:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <_sbrk+0x64>)
 8000a0a:	4a12      	ldr	r2, [pc, #72]	; (8000a54 <_sbrk+0x68>)
 8000a0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <_sbrk+0x64>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4413      	add	r3, r2
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d205      	bcs.n	8000a28 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000a1c:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <_sbrk+0x6c>)
 8000a1e:	220c      	movs	r2, #12
 8000a20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a26:	e009      	b.n	8000a3c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a28:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <_sbrk+0x64>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <_sbrk+0x64>)
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4413      	add	r3, r2
 8000a36:	4a06      	ldr	r2, [pc, #24]	; (8000a50 <_sbrk+0x64>)
 8000a38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	371c      	adds	r7, #28
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	20020000 	.word	0x20020000
 8000a4c:	00000400 	.word	0x00000400
 8000a50:	20000094 	.word	0x20000094
 8000a54:	20008b30 	.word	0x20008b30
 8000a58:	20008b1c 	.word	0x20008b1c

08000a5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <SystemInit+0x20>)
 8000a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a66:	4a05      	ldr	r2, [pc, #20]	; (8000a7c <SystemInit+0x20>)
 8000a68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <HAL_TIM_PeriodElapsedCallback>:

extern TIM_HandleTypeDef htim1;


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
	udpClient_send();
 8000a88:	f000 f83c 	bl	8000b04 <udpClient_send>
}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <udpClient_connect>:
5. Close socket descriptor and exit.
*/


void udpClient_connect(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
	err_t err;

	/* 1. Create a new UDP control block  */
	upcb = udp_new();
 8000a9a:	f00b f871 	bl	800bb80 <udp_new>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	4a14      	ldr	r2, [pc, #80]	; (8000af4 <udpClient_connect+0x60>)
 8000aa2:	6013      	str	r3, [r2, #0]

	/* Bind the block to module's IP and port */
	ip_addr_t myIPaddr;
	IP_ADDR4(&myIPaddr, 192, 168, 18, 115); // IP of stm32
 8000aa4:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <udpClient_connect+0x64>)
 8000aa6:	60bb      	str	r3, [r7, #8]
	udp_bind(upcb, &myIPaddr, 8);           // Port of stm32
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <udpClient_connect+0x60>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f107 0108 	add.w	r1, r7, #8
 8000ab0:	2208      	movs	r2, #8
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f00a ff4e 	bl	800b954 <udp_bind>


	/* configure destination IP address and port */
	ip_addr_t DestIPaddr;
	IP_ADDR4(&DestIPaddr, 192, 168, 18, 107); // IP server UDP
 8000ab8:	4b10      	ldr	r3, [pc, #64]	; (8000afc <udpClient_connect+0x68>)
 8000aba:	607b      	str	r3, [r7, #4]
	err= udp_connect(upcb, &DestIPaddr, 4000);// Port of server UDP
 8000abc:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <udpClient_connect+0x60>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	1d39      	adds	r1, r7, #4
 8000ac2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f00a ffcc 	bl	800ba64 <udp_connect>
 8000acc:	4603      	mov	r3, r0
 8000ace:	73fb      	strb	r3, [r7, #15]

	if (err == ERR_OK)
 8000ad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d108      	bne.n	8000aea <udpClient_connect+0x56>
	{
		/* 2. Send message to server */
		udpClient_send ();
 8000ad8:	f000 f814 	bl	8000b04 <udpClient_send>

		/* 3. Set a receive callback for the upcb */
		udp_recv(upcb, udp_receive_callback, NULL);
 8000adc:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <udpClient_connect+0x60>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	4907      	ldr	r1, [pc, #28]	; (8000b00 <udpClient_connect+0x6c>)
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f00b f82b 	bl	800bb40 <udp_recv>
	}
}
 8000aea:	bf00      	nop
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000290 	.word	0x20000290
 8000af8:	7312a8c0 	.word	0x7312a8c0
 8000afc:	6b12a8c0 	.word	0x6b12a8c0
 8000b00:	08000b69 	.word	0x08000b69

08000b04 <udpClient_send>:

static void udpClient_send(void)  // Функция отправки сообщения!
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b09c      	sub	sp, #112	; 0x70
 8000b08:	af00      	add	r7, sp, #0
  struct pbuf *txBuf;
  char data[100];

  int len = sprintf(data, "Sending UDP client message from STM32 %d", counter);
 8000b0a:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <udpClient_send+0x58>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	4913      	ldr	r1, [pc, #76]	; (8000b60 <udpClient_send+0x5c>)
 8000b12:	4618      	mov	r0, r3
 8000b14:	f00d fbf6 	bl	800e304 <siprintf>
 8000b18:	66f8      	str	r0, [r7, #108]	; 0x6c

  /* allocate pbuf from pool*/
  txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 8000b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000b22:	4619      	mov	r1, r3
 8000b24:	2036      	movs	r0, #54	; 0x36
 8000b26:	f004 fab3 	bl	8005090 <pbuf_alloc>
 8000b2a:	66b8      	str	r0, [r7, #104]	; 0x68

  if (txBuf != NULL)
 8000b2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d00f      	beq.n	8000b52 <udpClient_send+0x4e>
  {
    /* copy data to pbuf */
    pbuf_take(txBuf, data, len);
 8000b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000b34:	b29a      	uxth	r2, r3
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	4619      	mov	r1, r3
 8000b3a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8000b3c:	f004 fff8 	bl	8005b30 <pbuf_take>

    /* send udp data */
    udp_send(upcb, txBuf);
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <udpClient_send+0x60>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000b46:	4618      	mov	r0, r3
 8000b48:	f00a fd1a 	bl	800b580 <udp_send>

    /* free pbuf */
    pbuf_free(txBuf);
 8000b4c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8000b4e:	f004 fd83 	bl	8005658 <pbuf_free>
  }
}
 8000b52:	bf00      	nop
 8000b54:	3770      	adds	r7, #112	; 0x70
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000098 	.word	0x20000098
 8000b60:	0800f61c 	.word	0x0800f61c
 8000b64:	20000290 	.word	0x20000290

08000b68 <udp_receive_callback>:


void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
 8000b74:	603b      	str	r3, [r7, #0]
	/* Copy the data from the pbuf */
	strncpy (buffer, (char *)p->payload, p->len);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6859      	ldr	r1, [r3, #4]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	895b      	ldrh	r3, [r3, #10]
 8000b7e:	461a      	mov	r2, r3
 8000b80:	4807      	ldr	r0, [pc, #28]	; (8000ba0 <udp_receive_callback+0x38>)
 8000b82:	f00d fbdf 	bl	800e344 <strncpy>

	/*increment message count */
	counter++;
 8000b86:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <udp_receive_callback+0x3c>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	4a05      	ldr	r2, [pc, #20]	; (8000ba4 <udp_receive_callback+0x3c>)
 8000b8e:	6013      	str	r3, [r2, #0]

	/* Free receive pbuf */
	pbuf_free(p);
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f004 fd61 	bl	8005658 <pbuf_free>
}
 8000b96:	bf00      	nop
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000294 	.word	0x20000294
 8000ba4:	20000098 	.word	0x20000098

08000ba8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ba8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bac:	480d      	ldr	r0, [pc, #52]	; (8000be4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bae:	490e      	ldr	r1, [pc, #56]	; (8000be8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bb0:	4a0e      	ldr	r2, [pc, #56]	; (8000bec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb4:	e002      	b.n	8000bbc <LoopCopyDataInit>

08000bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bba:	3304      	adds	r3, #4

08000bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc0:	d3f9      	bcc.n	8000bb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc2:	4a0b      	ldr	r2, [pc, #44]	; (8000bf0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bc4:	4c0b      	ldr	r4, [pc, #44]	; (8000bf4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc8:	e001      	b.n	8000bce <LoopFillZerobss>

08000bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bcc:	3204      	adds	r2, #4

08000bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd0:	d3fb      	bcc.n	8000bca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bd2:	f7ff ff43 	bl	8000a5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bd6:	f00d fadb 	bl	800e190 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bda:	f7ff fcc5 	bl	8000568 <main>
  bx  lr    
 8000bde:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000be0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000bec:	08012278 	.word	0x08012278
  ldr r2, =_sbss
 8000bf0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000bf4:	20008b2c 	.word	0x20008b2c

08000bf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bf8:	e7fe      	b.n	8000bf8 <ADC_IRQHandler>
	...

08000bfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c00:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <HAL_Init+0x40>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a0d      	ldr	r2, [pc, #52]	; (8000c3c <HAL_Init+0x40>)
 8000c06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c0c:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <HAL_Init+0x40>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a0a      	ldr	r2, [pc, #40]	; (8000c3c <HAL_Init+0x40>)
 8000c12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c18:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <HAL_Init+0x40>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a07      	ldr	r2, [pc, #28]	; (8000c3c <HAL_Init+0x40>)
 8000c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c24:	2003      	movs	r0, #3
 8000c26:	f000 f94f 	bl	8000ec8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c2a:	200f      	movs	r0, #15
 8000c2c:	f000 f808 	bl	8000c40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c30:	f7ff fdbc 	bl	80007ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40023c00 	.word	0x40023c00

08000c40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c48:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <HAL_InitTick+0x54>)
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <HAL_InitTick+0x58>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	4619      	mov	r1, r3
 8000c52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f000 f967 	bl	8000f32 <HAL_SYSTICK_Config>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e00e      	b.n	8000c8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2b0f      	cmp	r3, #15
 8000c72:	d80a      	bhi.n	8000c8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c74:	2200      	movs	r2, #0
 8000c76:	6879      	ldr	r1, [r7, #4]
 8000c78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c7c:	f000 f92f 	bl	8000ede <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c80:	4a06      	ldr	r2, [pc, #24]	; (8000c9c <HAL_InitTick+0x5c>)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c86:	2300      	movs	r3, #0
 8000c88:	e000      	b.n	8000c8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000000 	.word	0x20000000
 8000c98:	20000008 	.word	0x20000008
 8000c9c:	20000004 	.word	0x20000004

08000ca0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <HAL_IncTick+0x20>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_IncTick+0x24>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4413      	add	r3, r2
 8000cb0:	4a04      	ldr	r2, [pc, #16]	; (8000cc4 <HAL_IncTick+0x24>)
 8000cb2:	6013      	str	r3, [r2, #0]
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	20000008 	.word	0x20000008
 8000cc4:	200002f8 	.word	0x200002f8

08000cc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  return uwTick;
 8000ccc:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <HAL_GetTick+0x14>)
 8000cce:	681b      	ldr	r3, [r3, #0]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	200002f8 	.word	0x200002f8

08000ce0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ce8:	f7ff ffee 	bl	8000cc8 <HAL_GetTick>
 8000cec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000cf8:	d005      	beq.n	8000d06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <HAL_Delay+0x44>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	461a      	mov	r2, r3
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	4413      	add	r3, r2
 8000d04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d06:	bf00      	nop
 8000d08:	f7ff ffde 	bl	8000cc8 <HAL_GetTick>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	68fa      	ldr	r2, [r7, #12]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d8f7      	bhi.n	8000d08 <HAL_Delay+0x28>
  {
  }
}
 8000d18:	bf00      	nop
 8000d1a:	bf00      	nop
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000008 	.word	0x20000008

08000d28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__NVIC_SetPriorityGrouping+0x44>)
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d44:	4013      	ands	r3, r2
 8000d46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d5a:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <__NVIC_SetPriorityGrouping+0x44>)
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	60d3      	str	r3, [r2, #12]
}
 8000d60:	bf00      	nop
 8000d62:	3714      	adds	r7, #20
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d74:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <__NVIC_GetPriorityGrouping+0x18>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	0a1b      	lsrs	r3, r3, #8
 8000d7a:	f003 0307 	and.w	r3, r3, #7
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	db0b      	blt.n	8000db6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	f003 021f 	and.w	r2, r3, #31
 8000da4:	4907      	ldr	r1, [pc, #28]	; (8000dc4 <__NVIC_EnableIRQ+0x38>)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	095b      	lsrs	r3, r3, #5
 8000dac:	2001      	movs	r0, #1
 8000dae:	fa00 f202 	lsl.w	r2, r0, r2
 8000db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000e100 	.word	0xe000e100

08000dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	6039      	str	r1, [r7, #0]
 8000dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	db0a      	blt.n	8000df2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	490c      	ldr	r1, [pc, #48]	; (8000e14 <__NVIC_SetPriority+0x4c>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	0112      	lsls	r2, r2, #4
 8000de8:	b2d2      	uxtb	r2, r2
 8000dea:	440b      	add	r3, r1
 8000dec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df0:	e00a      	b.n	8000e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	4908      	ldr	r1, [pc, #32]	; (8000e18 <__NVIC_SetPriority+0x50>)
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	f003 030f 	and.w	r3, r3, #15
 8000dfe:	3b04      	subs	r3, #4
 8000e00:	0112      	lsls	r2, r2, #4
 8000e02:	b2d2      	uxtb	r2, r2
 8000e04:	440b      	add	r3, r1
 8000e06:	761a      	strb	r2, [r3, #24]
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000e100 	.word	0xe000e100
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b089      	sub	sp, #36	; 0x24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	f1c3 0307 	rsb	r3, r3, #7
 8000e36:	2b04      	cmp	r3, #4
 8000e38:	bf28      	it	cs
 8000e3a:	2304      	movcs	r3, #4
 8000e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3304      	adds	r3, #4
 8000e42:	2b06      	cmp	r3, #6
 8000e44:	d902      	bls.n	8000e4c <NVIC_EncodePriority+0x30>
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	3b03      	subs	r3, #3
 8000e4a:	e000      	b.n	8000e4e <NVIC_EncodePriority+0x32>
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43da      	mvns	r2, r3
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	401a      	ands	r2, r3
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6e:	43d9      	mvns	r1, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	4313      	orrs	r3, r2
         );
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3724      	adds	r7, #36	; 0x24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
	...

08000e84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e94:	d301      	bcc.n	8000e9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e96:	2301      	movs	r3, #1
 8000e98:	e00f      	b.n	8000eba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <SysTick_Config+0x40>)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ea2:	210f      	movs	r1, #15
 8000ea4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ea8:	f7ff ff8e 	bl	8000dc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eac:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <SysTick_Config+0x40>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eb2:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <SysTick_Config+0x40>)
 8000eb4:	2207      	movs	r2, #7
 8000eb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	e000e010 	.word	0xe000e010

08000ec8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f7ff ff29 	bl	8000d28 <__NVIC_SetPriorityGrouping>
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b086      	sub	sp, #24
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	60b9      	str	r1, [r7, #8]
 8000ee8:	607a      	str	r2, [r7, #4]
 8000eea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef0:	f7ff ff3e 	bl	8000d70 <__NVIC_GetPriorityGrouping>
 8000ef4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	68b9      	ldr	r1, [r7, #8]
 8000efa:	6978      	ldr	r0, [r7, #20]
 8000efc:	f7ff ff8e 	bl	8000e1c <NVIC_EncodePriority>
 8000f00:	4602      	mov	r2, r0
 8000f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f06:	4611      	mov	r1, r2
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff ff5d 	bl	8000dc8 <__NVIC_SetPriority>
}
 8000f0e:	bf00      	nop
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ff31 	bl	8000d8c <__NVIC_EnableIRQ>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b082      	sub	sp, #8
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff ffa2 	bl	8000e84 <SysTick_Config>
 8000f40:	4603      	mov	r3, r0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b088      	sub	sp, #32
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000f54:	2300      	movs	r3, #0
 8000f56:	61fb      	str	r3, [r7, #28]
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8000f5c:	4baa      	ldr	r3, [pc, #680]	; (8001208 <HAL_ETH_Init+0x2bc>)
 8000f5e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000f64:	2300      	movs	r3, #0
 8000f66:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d101      	bne.n	8000f72 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e183      	b.n	800127a <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d106      	bne.n	8000f8c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2200      	movs	r2, #0
 8000f82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f002 fd28 	bl	80039dc <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	4b9e      	ldr	r3, [pc, #632]	; (800120c <HAL_ETH_Init+0x2c0>)
 8000f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f94:	4a9d      	ldr	r2, [pc, #628]	; (800120c <HAL_ETH_Init+0x2c0>)
 8000f96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f9a:	6453      	str	r3, [r2, #68]	; 0x44
 8000f9c:	4b9b      	ldr	r3, [pc, #620]	; (800120c <HAL_ETH_Init+0x2c0>)
 8000f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000fa8:	4b99      	ldr	r3, [pc, #612]	; (8001210 <HAL_ETH_Init+0x2c4>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	4a98      	ldr	r2, [pc, #608]	; (8001210 <HAL_ETH_Init+0x2c4>)
 8000fae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000fb2:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000fb4:	4b96      	ldr	r3, [pc, #600]	; (8001210 <HAL_ETH_Init+0x2c4>)
 8000fb6:	685a      	ldr	r2, [r3, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6a1b      	ldr	r3, [r3, #32]
 8000fbc:	4994      	ldr	r1, [pc, #592]	; (8001210 <HAL_ETH_Init+0x2c4>)
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f042 0201 	orr.w	r2, r2, #1
 8000fd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000fd8:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000fda:	f7ff fe75 	bl	8000cc8 <HAL_GetTick>
 8000fde:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000fe0:	e011      	b.n	8001006 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000fe2:	f7ff fe71 	bl	8000cc8 <HAL_GetTick>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ff0:	d909      	bls.n	8001006 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2203      	movs	r2, #3
 8000ff6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001002:	2303      	movs	r3, #3
 8001004:	e139      	b.n	800127a <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	2b00      	cmp	r3, #0
 8001016:	d1e4      	bne.n	8000fe2 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	691b      	ldr	r3, [r3, #16]
 800101e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f023 031c 	bic.w	r3, r3, #28
 8001026:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001028:	f001 ff18 	bl	8002e5c <HAL_RCC_GetHCLKFreq>
 800102c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	4a78      	ldr	r2, [pc, #480]	; (8001214 <HAL_ETH_Init+0x2c8>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d908      	bls.n	8001048 <HAL_ETH_Init+0xfc>
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	4a77      	ldr	r2, [pc, #476]	; (8001218 <HAL_ETH_Init+0x2cc>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d804      	bhi.n	8001048 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	f043 0308 	orr.w	r3, r3, #8
 8001044:	61fb      	str	r3, [r7, #28]
 8001046:	e027      	b.n	8001098 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	4a73      	ldr	r2, [pc, #460]	; (8001218 <HAL_ETH_Init+0x2cc>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d908      	bls.n	8001062 <HAL_ETH_Init+0x116>
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	4a6d      	ldr	r2, [pc, #436]	; (8001208 <HAL_ETH_Init+0x2bc>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d204      	bcs.n	8001062 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f043 030c 	orr.w	r3, r3, #12
 800105e:	61fb      	str	r3, [r7, #28]
 8001060:	e01a      	b.n	8001098 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	4a68      	ldr	r2, [pc, #416]	; (8001208 <HAL_ETH_Init+0x2bc>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d303      	bcc.n	8001072 <HAL_ETH_Init+0x126>
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	4a6b      	ldr	r2, [pc, #428]	; (800121c <HAL_ETH_Init+0x2d0>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d911      	bls.n	8001096 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	4a69      	ldr	r2, [pc, #420]	; (800121c <HAL_ETH_Init+0x2d0>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d908      	bls.n	800108c <HAL_ETH_Init+0x140>
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	4a68      	ldr	r2, [pc, #416]	; (8001220 <HAL_ETH_Init+0x2d4>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d804      	bhi.n	800108c <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	f043 0304 	orr.w	r3, r3, #4
 8001088:	61fb      	str	r3, [r7, #28]
 800108a:	e005      	b.n	8001098 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	f043 0310 	orr.w	r3, r3, #16
 8001092:	61fb      	str	r3, [r7, #28]
 8001094:	e000      	b.n	8001098 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001096:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	69fa      	ldr	r2, [r7, #28]
 800109e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80010a0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010a4:	2100      	movs	r1, #0
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f000 fc1d 	bl	80018e6 <HAL_ETH_WritePHYRegister>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d00b      	beq.n	80010ca <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80010b6:	6939      	ldr	r1, [r7, #16]
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f000 fdd3 	bl	8001c64 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2201      	movs	r2, #1
 80010c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e0d7      	b.n	800127a <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80010ca:	20ff      	movs	r0, #255	; 0xff
 80010cc:	f7ff fe08 	bl	8000ce0 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	f000 80a5 	beq.w	8001224 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80010da:	f7ff fdf5 	bl	8000cc8 <HAL_GetTick>
 80010de:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	461a      	mov	r2, r3
 80010e6:	2101      	movs	r1, #1
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f000 fb94 	bl	8001816 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80010ee:	f7ff fdeb 	bl	8000cc8 <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d90f      	bls.n	8001120 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001104:	6939      	ldr	r1, [r7, #16]
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f000 fdac 	bl	8001c64 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2201      	movs	r2, #1
 8001110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	e0ac      	b.n	800127a <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f003 0304 	and.w	r3, r3, #4
 8001126:	2b00      	cmp	r3, #0
 8001128:	d0da      	beq.n	80010e0 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800112a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800112e:	2100      	movs	r1, #0
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f000 fbd8 	bl	80018e6 <HAL_ETH_WritePHYRegister>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d00b      	beq.n	8001154 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001140:	6939      	ldr	r1, [r7, #16]
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f000 fd8e 	bl	8001c64 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2201      	movs	r2, #1
 800114c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001150:	2301      	movs	r3, #1
 8001152:	e092      	b.n	800127a <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001154:	f7ff fdb8 	bl	8000cc8 <HAL_GetTick>
 8001158:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800115a:	f107 030c 	add.w	r3, r7, #12
 800115e:	461a      	mov	r2, r3
 8001160:	2101      	movs	r1, #1
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f000 fb57 	bl	8001816 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001168:	f7ff fdae 	bl	8000cc8 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	f241 3288 	movw	r2, #5000	; 0x1388
 8001176:	4293      	cmp	r3, r2
 8001178:	d90f      	bls.n	800119a <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800117e:	6939      	ldr	r1, [r7, #16]
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f000 fd6f 	bl	8001c64 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2201      	movs	r2, #1
 800118a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e06f      	b.n	800127a <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f003 0320 	and.w	r3, r3, #32
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d0da      	beq.n	800115a <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80011a4:	f107 030c 	add.w	r3, r7, #12
 80011a8:	461a      	mov	r2, r3
 80011aa:	2110      	movs	r1, #16
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f000 fb32 	bl	8001816 <HAL_ETH_ReadPHYRegister>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d00b      	beq.n	80011d0 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80011bc:	6939      	ldr	r1, [r7, #16]
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f000 fd50 	bl	8001c64 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2201      	movs	r2, #1
 80011c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80011cc:	2301      	movs	r3, #1
 80011ce:	e054      	b.n	800127a <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f003 0304 	and.w	r3, r3, #4
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d004      	beq.n	80011e4 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	e002      	b.n	80011ea <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f003 0302 	and.w	r3, r3, #2
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	e035      	b.n	8001268 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	e030      	b.n	8001268 <HAL_ETH_Init+0x31c>
 8001206:	bf00      	nop
 8001208:	03938700 	.word	0x03938700
 800120c:	40023800 	.word	0x40023800
 8001210:	40013800 	.word	0x40013800
 8001214:	01312cff 	.word	0x01312cff
 8001218:	02160ebf 	.word	0x02160ebf
 800121c:	05f5e0ff 	.word	0x05f5e0ff
 8001220:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	08db      	lsrs	r3, r3, #3
 800122a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	085b      	lsrs	r3, r3, #1
 8001232:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001234:	4313      	orrs	r3, r2
 8001236:	b29b      	uxth	r3, r3
 8001238:	461a      	mov	r2, r3
 800123a:	2100      	movs	r1, #0
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f000 fb52 	bl	80018e6 <HAL_ETH_WritePHYRegister>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d00b      	beq.n	8001260 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800124c:	6939      	ldr	r1, [r7, #16]
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f000 fd08 	bl	8001c64 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2201      	movs	r2, #1
 8001258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e00c      	b.n	800127a <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001260:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001264:	f7ff fd3c 	bl	8000ce0 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001268:	6939      	ldr	r1, [r7, #16]
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f000 fcfa 	bl	8001c64 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2201      	movs	r2, #1
 8001274:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3720      	adds	r7, #32
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop

08001284 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001284:	b480      	push	{r7}
 8001286:	b087      	sub	sp, #28
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
 8001290:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800129c:	2b01      	cmp	r3, #1
 800129e:	d101      	bne.n	80012a4 <HAL_ETH_DMATxDescListInit+0x20>
 80012a0:	2302      	movs	r3, #2
 80012a2:	e052      	b.n	800134a <HAL_ETH_DMATxDescListInit+0xc6>
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2201      	movs	r2, #1
 80012a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2202      	movs	r2, #2
 80012b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80012ba:	2300      	movs	r3, #0
 80012bc:	617b      	str	r3, [r7, #20]
 80012be:	e030      	b.n	8001322 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	015b      	lsls	r3, r3, #5
 80012c4:	68ba      	ldr	r2, [r7, #8]
 80012c6:	4413      	add	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80012d0:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80012d8:	fb02 f303 	mul.w	r3, r2, r3
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	4413      	add	r3, r2
 80012e0:	461a      	mov	r2, r3
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d105      	bne.n	80012fa <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	3b01      	subs	r3, #1
 80012fe:	697a      	ldr	r2, [r7, #20]
 8001300:	429a      	cmp	r2, r3
 8001302:	d208      	bcs.n	8001316 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	3301      	adds	r3, #1
 8001308:	015b      	lsls	r3, r3, #5
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	4413      	add	r3, r2
 800130e:	461a      	mov	r2, r3
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	60da      	str	r2, [r3, #12]
 8001314:	e002      	b.n	800131c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001316:	68ba      	ldr	r2, [r7, #8]
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	3301      	adds	r3, #1
 8001320:	617b      	str	r3, [r7, #20]
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	429a      	cmp	r2, r3
 8001328:	d3ca      	bcc.n	80012c0 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	68ba      	ldr	r2, [r7, #8]
 8001330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001334:	3310      	adds	r3, #16
 8001336:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2201      	movs	r2, #1
 800133c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2200      	movs	r2, #0
 8001344:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	371c      	adds	r7, #28
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001356:	b480      	push	{r7}
 8001358:	b087      	sub	sp, #28
 800135a:	af00      	add	r7, sp, #0
 800135c:	60f8      	str	r0, [r7, #12]
 800135e:	60b9      	str	r1, [r7, #8]
 8001360:	607a      	str	r2, [r7, #4]
 8001362:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800136e:	2b01      	cmp	r3, #1
 8001370:	d101      	bne.n	8001376 <HAL_ETH_DMARxDescListInit+0x20>
 8001372:	2302      	movs	r3, #2
 8001374:	e056      	b.n	8001424 <HAL_ETH_DMARxDescListInit+0xce>
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2201      	movs	r2, #1
 800137a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2202      	movs	r2, #2
 8001382:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	68ba      	ldr	r2, [r7, #8]
 800138a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	e034      	b.n	80013fc <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	015b      	lsls	r3, r3, #5
 8001396:	68ba      	ldr	r2, [r7, #8]
 8001398:	4413      	add	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80013a2:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80013aa:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80013b2:	fb02 f303 	mul.w	r3, r2, r3
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	461a      	mov	r2, r3
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d105      	bne.n	80013d4 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	697a      	ldr	r2, [r7, #20]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d208      	bcs.n	80013f0 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	3301      	adds	r3, #1
 80013e2:	015b      	lsls	r3, r3, #5
 80013e4:	68ba      	ldr	r2, [r7, #8]
 80013e6:	4413      	add	r3, r2
 80013e8:	461a      	mov	r2, r3
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	e002      	b.n	80013f6 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80013f0:	68ba      	ldr	r2, [r7, #8]
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	3301      	adds	r3, #1
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	697a      	ldr	r2, [r7, #20]
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	429a      	cmp	r2, r3
 8001402:	d3c6      	bcc.n	8001392 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	68ba      	ldr	r2, [r7, #8]
 800140a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800140e:	330c      	adds	r3, #12
 8001410:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2201      	movs	r2, #1
 8001416:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2200      	movs	r2, #0
 800141e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001422:	2300      	movs	r3, #0
}
 8001424:	4618      	mov	r0, r3
 8001426:	371c      	adds	r7, #28
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001430:	b480      	push	{r7}
 8001432:	b087      	sub	sp, #28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800144c:	2b01      	cmp	r3, #1
 800144e:	d101      	bne.n	8001454 <HAL_ETH_TransmitFrame+0x24>
 8001450:	2302      	movs	r3, #2
 8001452:	e0cd      	b.n	80015f0 <HAL_ETH_TransmitFrame+0x1c0>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2201      	movs	r2, #1
 8001458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2202      	movs	r2, #2
 8001460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d109      	bne.n	800147e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2201      	movs	r2, #1
 800146e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800147a:	2301      	movs	r3, #1
 800147c:	e0b8      	b.n	80015f0 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	da09      	bge.n	800149c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2212      	movs	r2, #18
 800148c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e0a9      	b.n	80015f0 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d915      	bls.n	80014d2 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	4a54      	ldr	r2, [pc, #336]	; (80015fc <HAL_ETH_TransmitFrame+0x1cc>)
 80014aa:	fba2 2303 	umull	r2, r3, r2, r3
 80014ae:	0a9b      	lsrs	r3, r3, #10
 80014b0:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80014b2:	683a      	ldr	r2, [r7, #0]
 80014b4:	4b51      	ldr	r3, [pc, #324]	; (80015fc <HAL_ETH_TransmitFrame+0x1cc>)
 80014b6:	fba3 1302 	umull	r1, r3, r3, r2
 80014ba:	0a9b      	lsrs	r3, r3, #10
 80014bc:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80014c0:	fb01 f303 	mul.w	r3, r1, r3
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d005      	beq.n	80014d6 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	3301      	adds	r3, #1
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	e001      	b.n	80014d6 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80014d2:	2301      	movs	r3, #1
 80014d4:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d11c      	bne.n	8001516 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e6:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80014ea:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f0:	683a      	ldr	r2, [r7, #0]
 80014f2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80014f6:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001502:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001506:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	461a      	mov	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	62da      	str	r2, [r3, #44]	; 0x2c
 8001514:	e04b      	b.n	80015ae <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8001516:	2300      	movs	r3, #0
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	e044      	b.n	80015a6 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001526:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800152a:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d107      	bne.n	8001542 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001540:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001546:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800154a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	3b01      	subs	r3, #1
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	429a      	cmp	r2, r3
 8001554:	d116      	bne.n	8001584 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001560:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001564:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	4a25      	ldr	r2, [pc, #148]	; (8001600 <HAL_ETH_TransmitFrame+0x1d0>)
 800156a:	fb02 f203 	mul.w	r2, r2, r3
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	4413      	add	r3, r2
 8001572:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001576:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157c:	68fa      	ldr	r2, [r7, #12]
 800157e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001582:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001592:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	461a      	mov	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	3301      	adds	r3, #1
 80015a4:	613b      	str	r3, [r7, #16]
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d3b6      	bcc.n	800151c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015b6:	3314      	adds	r3, #20
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0304 	and.w	r3, r3, #4
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d00d      	beq.n	80015de <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015ca:	3314      	adds	r3, #20
 80015cc:	2204      	movs	r2, #4
 80015ce:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015d8:	3304      	adds	r3, #4
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2201      	movs	r2, #1
 80015e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	371c      	adds	r7, #28
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	ac02b00b 	.word	0xac02b00b
 8001600:	fffffa0c 	.word	0xfffffa0c

08001604 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 800160c:	2300      	movs	r3, #0
 800160e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001616:	2b01      	cmp	r3, #1
 8001618:	d101      	bne.n	800161e <HAL_ETH_GetReceivedFrame+0x1a>
 800161a:	2302      	movs	r3, #2
 800161c:	e070      	b.n	8001700 <HAL_ETH_GetReceivedFrame+0xfc>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2201      	movs	r2, #1
 8001622:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2202      	movs	r2, #2
 800162a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	db5a      	blt.n	80016ee <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001642:	2b00      	cmp	r3, #0
 8001644:	d030      	beq.n	80016a8 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800164a:	1c5a      	adds	r2, r3, #1
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001654:	2b01      	cmp	r3, #1
 8001656:	d103      	bne.n	8001660 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	0c1b      	lsrs	r3, r3, #16
 8001670:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001674:	3b04      	subs	r3, #4
 8001676:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	689a      	ldr	r2, [r3, #8]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	461a      	mov	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2201      	movs	r2, #1
 8001698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 80016a4:	2300      	movs	r3, #0
 80016a6:	e02b      	b.n	8001700 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d010      	beq.n	80016d8 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2201      	movs	r2, #1
 80016c8:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	461a      	mov	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	629a      	str	r2, [r3, #40]	; 0x28
 80016d6:	e00a      	b.n	80016ee <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016dc:	1c5a      	adds	r2, r3, #1
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	461a      	mov	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2201      	movs	r2, #1
 80016f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
}
 8001700:	4618      	mov	r0, r3
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800171c:	3314      	adds	r3, #20
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001724:	2b40      	cmp	r3, #64	; 0x40
 8001726:	d112      	bne.n	800174e <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f000 f860 	bl	80017ee <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001736:	3314      	adds	r3, #20
 8001738:	2240      	movs	r2, #64	; 0x40
 800173a:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2201      	movs	r2, #1
 8001740:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800174c:	e01b      	b.n	8001786 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001756:	3314      	adds	r3, #20
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b01      	cmp	r3, #1
 8001760:	d111      	bne.n	8001786 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f000 f839 	bl	80017da <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001770:	3314      	adds	r3, #20
 8001772:	2201      	movs	r2, #1
 8001774:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2201      	movs	r2, #1
 800177a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800178e:	3314      	adds	r3, #20
 8001790:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001794:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800179e:	3314      	adds	r3, #20
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017aa:	d112      	bne.n	80017d2 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 f828 	bl	8001802 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017ba:	3314      	adds	r3, #20
 80017bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80017c0:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2201      	movs	r2, #1
 80017c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001802:	b480      	push	{r7}
 8001804:	b083      	sub	sp, #12
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b086      	sub	sp, #24
 800181a:	af00      	add	r7, sp, #0
 800181c:	60f8      	str	r0, [r7, #12]
 800181e:	460b      	mov	r3, r1
 8001820:	607a      	str	r2, [r7, #4]
 8001822:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001828:	2300      	movs	r3, #0
 800182a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b82      	cmp	r3, #130	; 0x82
 8001836:	d101      	bne.n	800183c <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001838:	2302      	movs	r3, #2
 800183a:	e050      	b.n	80018de <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2282      	movs	r2, #130	; 0x82
 8001840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	f003 031c 	and.w	r3, r3, #28
 8001852:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	8a1b      	ldrh	r3, [r3, #16]
 8001858:	02db      	lsls	r3, r3, #11
 800185a:	b29b      	uxth	r3, r3
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	4313      	orrs	r3, r2
 8001860:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001862:	897b      	ldrh	r3, [r7, #10]
 8001864:	019b      	lsls	r3, r3, #6
 8001866:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	4313      	orrs	r3, r2
 800186e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	f023 0302 	bic.w	r3, r3, #2
 8001876:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	697a      	ldr	r2, [r7, #20]
 8001886:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001888:	f7ff fa1e 	bl	8000cc8 <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800188e:	e015      	b.n	80018bc <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001890:	f7ff fa1a 	bl	8000cc8 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800189e:	d309      	bcc.n	80018b4 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e014      	b.n	80018de <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1e4      	bne.n	8001890 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	695b      	ldr	r3, [r3, #20]
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	461a      	mov	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b086      	sub	sp, #24
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	60f8      	str	r0, [r7, #12]
 80018ee:	460b      	mov	r3, r1
 80018f0:	607a      	str	r2, [r7, #4]
 80018f2:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001902:	b2db      	uxtb	r3, r3
 8001904:	2b42      	cmp	r3, #66	; 0x42
 8001906:	d101      	bne.n	800190c <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001908:	2302      	movs	r3, #2
 800190a:	e04e      	b.n	80019aa <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2242      	movs	r2, #66	; 0x42
 8001910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	f003 031c 	and.w	r3, r3, #28
 8001922:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8a1b      	ldrh	r3, [r3, #16]
 8001928:	02db      	lsls	r3, r3, #11
 800192a:	b29b      	uxth	r3, r3
 800192c:	697a      	ldr	r2, [r7, #20]
 800192e:	4313      	orrs	r3, r2
 8001930:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001932:	897b      	ldrh	r3, [r7, #10]
 8001934:	019b      	lsls	r3, r3, #6
 8001936:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	4313      	orrs	r3, r2
 800193e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	f043 0302 	orr.w	r3, r3, #2
 8001946:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	b29a      	uxth	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001962:	f7ff f9b1 	bl	8000cc8 <HAL_GetTick>
 8001966:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001968:	e015      	b.n	8001996 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800196a:	f7ff f9ad 	bl	8000cc8 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001978:	d309      	bcc.n	800198e <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2201      	movs	r2, #1
 800197e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e00d      	b.n	80019aa <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1e4      	bne.n	800196a <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d101      	bne.n	80019c8 <HAL_ETH_Start+0x16>
 80019c4:	2302      	movs	r3, #2
 80019c6:	e01f      	b.n	8001a08 <HAL_ETH_Start+0x56>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2202      	movs	r2, #2
 80019d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f000 fb45 	bl	8002068 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 fb7c 	bl	80020dc <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f000 fc13 	bl	8002210 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f000 fbb0 	bl	8002150 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 fbdd 	bl	80021b0 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2201      	movs	r2, #1
 80019fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d101      	bne.n	8001a26 <HAL_ETH_Stop+0x16>
 8001a22:	2302      	movs	r3, #2
 8001a24:	e01f      	b.n	8001a66 <HAL_ETH_Stop+0x56>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2202      	movs	r2, #2
 8001a32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 fba2 	bl	8002180 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 fbcf 	bl	80021e0 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 fb67 	bl	8002116 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 fbe1 	bl	8002210 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 fb27 	bl	80020a2 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d101      	bne.n	8001a8c <HAL_ETH_ConfigMAC+0x1c>
 8001a88:	2302      	movs	r3, #2
 8001a8a:	e0e4      	b.n	8001c56 <HAL_ETH_ConfigMAC+0x1e6>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2202      	movs	r2, #2
 8001a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f000 80b1 	beq.w	8001c06 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	4b6c      	ldr	r3, [pc, #432]	; (8001c60 <HAL_ETH_ConfigMAC+0x1f0>)
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001abc:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001ac2:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001ac8:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001ace:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001ad4:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001ada:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001ae0:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001ae6:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001aec:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001af2:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001af8:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001afe:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b16:	2001      	movs	r0, #1
 8001b18:	f7ff f8e2 	bl	8000ce0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001b2c:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001b32:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001b38:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001b3e:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001b44:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001b4a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001b56:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001b58:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b62:	2001      	movs	r0, #1
 8001b64:	f7ff f8bc 	bl	8000ce0 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001b78:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b82:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001b92:	4013      	ands	r3, r2
 8001b94:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b9a:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001ba0:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001ba6:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001bac:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001bb2:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001bb8:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68fa      	ldr	r2, [r7, #12]
 8001bc6:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	f7ff f885 	bl	8000ce0 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	430a      	orrs	r2, r1
 8001bec:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	69db      	ldr	r3, [r3, #28]
 8001bf4:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bf6:	2001      	movs	r0, #1
 8001bf8:	f7ff f872 	bl	8000ce0 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	61da      	str	r2, [r3, #28]
 8001c04:	e01e      	b.n	8001c44 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001c14:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689a      	ldr	r2, [r3, #8]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c36:	2001      	movs	r0, #1
 8001c38:	f7ff f852 	bl	8000ce0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	ff20810f 	.word	0xff20810f

08001c64 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b0b0      	sub	sp, #192	; 0xc0
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d007      	beq.n	8001c8a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c80:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c88:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001c92:	2300      	movs	r3, #0
 8001c94:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d103      	bne.n	8001cb2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001caa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cae:	663b      	str	r3, [r7, #96]	; 0x60
 8001cb0:	e001      	b.n	8001cb6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001cb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cba:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001cd0:	2340      	movs	r3, #64	; 0x40
 8001cd2:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001cec:	2300      	movs	r3, #0
 8001cee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001d04:	2380      	movs	r3, #128	; 0x80
 8001d06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001d10:	2300      	movs	r3, #0
 8001d12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001d22:	2300      	movs	r3, #0
 8001d24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001d38:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d3c:	4bac      	ldr	r3, [pc, #688]	; (8001ff0 <ETH_MACDMAConfig+0x38c>)
 8001d3e:	4013      	ands	r3, r2
 8001d40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001d44:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001d48:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001d4c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001d4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001d50:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001d56:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001d58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001d5a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001d5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001d5e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001d64:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001d66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001d68:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001d6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001d6c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001d6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001d70:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001d72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001d74:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001d76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001d78:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001d7a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d8c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d98:	2001      	movs	r0, #1
 8001d9a:	f7fe ffa1 	bl	8000ce0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001da6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001da8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001daa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001dac:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001dae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001db0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001db2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001db6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001db8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001dbc:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001dbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001dc2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001dc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001dc8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001dcc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001dd4:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001dd6:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001de2:	2001      	movs	r0, #1
 8001de4:	f7fe ff7c 	bl	8000ce0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001df0:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001dfa:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001e04:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001e10:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e14:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001e18:	4013      	ands	r3, r2
 8001e1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001e1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e22:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001e24:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001e28:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001e2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001e2e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001e30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001e34:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001e36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001e3a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001e3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001e40:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001e42:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e46:	4313      	orrs	r3, r2
 8001e48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e54:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e60:	2001      	movs	r0, #1
 8001e62:	f7fe ff3d 	bl	8000ce0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e6e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001e70:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001e74:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e8a:	2001      	movs	r0, #1
 8001e8c:	f7fe ff28 	bl	8000ce0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e98:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001e9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ea2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001ea8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001eac:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001ebe:	2304      	movs	r3, #4
 8001ec0:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001ec2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001ec8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ecc:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001ece:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ed2:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001ed4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ed8:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001eda:	2380      	movs	r3, #128	; 0x80
 8001edc:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eee:	3318      	adds	r3, #24
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001ef6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001efa:	4b3e      	ldr	r3, [pc, #248]	; (8001ff4 <ETH_MACDMAConfig+0x390>)
 8001efc:	4013      	ands	r3, r2
 8001efe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001f02:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001f04:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001f06:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001f08:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001f0a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001f0c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001f0e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001f10:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001f12:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001f14:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001f16:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001f18:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001f1a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001f1e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001f22:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001f24:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f36:	3318      	adds	r3, #24
 8001f38:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f3c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f46:	3318      	adds	r3, #24
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f4e:	2001      	movs	r0, #1
 8001f50:	f7fe fec6 	bl	8000ce0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f5c:	3318      	adds	r3, #24
 8001f5e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f62:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001f64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001f68:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001f6c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001f70:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001f74:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001f76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f78:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001f7a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001f7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001f7e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001f88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f8c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	f7fe fe9f 	bl	8000ce0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001faa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fae:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d10f      	bne.n	8001fd8 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fc0:	331c      	adds	r3, #28
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001fcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fd4:	331c      	adds	r3, #28
 8001fd6:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	695b      	ldr	r3, [r3, #20]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	2100      	movs	r1, #0
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f809 	bl	8001ff8 <ETH_MACAddressConfig>
}
 8001fe6:	bf00      	nop
 8001fe8:	37c0      	adds	r7, #192	; 0xc0
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	ff20810f 	.word	0xff20810f
 8001ff4:	f8de3f23 	.word	0xf8de3f23

08001ff8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b087      	sub	sp, #28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3305      	adds	r3, #5
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	021b      	lsls	r3, r3, #8
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	3204      	adds	r2, #4
 8002010:	7812      	ldrb	r2, [r2, #0]
 8002012:	4313      	orrs	r3, r2
 8002014:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	4b11      	ldr	r3, [pc, #68]	; (8002060 <ETH_MACAddressConfig+0x68>)
 800201a:	4413      	add	r3, r2
 800201c:	461a      	mov	r2, r3
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3303      	adds	r3, #3
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	061a      	lsls	r2, r3, #24
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	3302      	adds	r3, #2
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	041b      	lsls	r3, r3, #16
 8002032:	431a      	orrs	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3301      	adds	r3, #1
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	021b      	lsls	r3, r3, #8
 800203c:	4313      	orrs	r3, r2
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	7812      	ldrb	r2, [r2, #0]
 8002042:	4313      	orrs	r3, r2
 8002044:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002046:	68ba      	ldr	r2, [r7, #8]
 8002048:	4b06      	ldr	r3, [pc, #24]	; (8002064 <ETH_MACAddressConfig+0x6c>)
 800204a:	4413      	add	r3, r2
 800204c:	461a      	mov	r2, r3
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	6013      	str	r3, [r2, #0]
}
 8002052:	bf00      	nop
 8002054:	371c      	adds	r7, #28
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40028040 	.word	0x40028040
 8002064:	40028044 	.word	0x40028044

08002068 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002070:	2300      	movs	r3, #0
 8002072:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f042 0208 	orr.w	r2, r2, #8
 8002082:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800208c:	2001      	movs	r0, #1
 800208e:	f000 f8e9 	bl	8002264 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	601a      	str	r2, [r3, #0]
}
 800209a:	bf00      	nop
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b084      	sub	sp, #16
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80020aa:	2300      	movs	r3, #0
 80020ac:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 0208 	bic.w	r2, r2, #8
 80020bc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80020c6:	2001      	movs	r0, #1
 80020c8:	f000 f8cc 	bl	8002264 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	601a      	str	r2, [r3, #0]
}
 80020d4:	bf00      	nop
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80020e4:	2300      	movs	r3, #0
 80020e6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f042 0204 	orr.w	r2, r2, #4
 80020f6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002100:	2001      	movs	r0, #1
 8002102:	f000 f8af 	bl	8002264 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	601a      	str	r2, [r3, #0]
}
 800210e:	bf00      	nop
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002116:	b580      	push	{r7, lr}
 8002118:	b084      	sub	sp, #16
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800211e:	2300      	movs	r3, #0
 8002120:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 0204 	bic.w	r2, r2, #4
 8002130:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800213a:	2001      	movs	r0, #1
 800213c:	f000 f892 	bl	8002264 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	601a      	str	r2, [r3, #0]
}
 8002148:	bf00      	nop
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002160:	3318      	adds	r3, #24
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800216c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002170:	3318      	adds	r3, #24
 8002172:	601a      	str	r2, [r3, #0]
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002190:	3318      	adds	r3, #24
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800219c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021a0:	3318      	adds	r3, #24
 80021a2:	601a      	str	r2, [r3, #0]
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021c0:	3318      	adds	r3, #24
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f042 0202 	orr.w	r2, r2, #2
 80021cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021d0:	3318      	adds	r3, #24
 80021d2:	601a      	str	r2, [r3, #0]
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021f0:	3318      	adds	r3, #24
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 0202 	bic.w	r2, r2, #2
 80021fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002200:	3318      	adds	r3, #24
 8002202:	601a      	str	r2, [r3, #0]
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002218:	2300      	movs	r3, #0
 800221a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002224:	3318      	adds	r3, #24
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002234:	3318      	adds	r3, #24
 8002236:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002240:	3318      	adds	r3, #24
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002246:	2001      	movs	r0, #1
 8002248:	f000 f80c 	bl	8002264 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002256:	3318      	adds	r3, #24
 8002258:	601a      	str	r2, [r3, #0]
}
 800225a:	bf00      	nop
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
	...

08002264 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800226c:	4b0b      	ldr	r3, [pc, #44]	; (800229c <ETH_Delay+0x38>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a0b      	ldr	r2, [pc, #44]	; (80022a0 <ETH_Delay+0x3c>)
 8002272:	fba2 2303 	umull	r2, r3, r2, r3
 8002276:	0a5b      	lsrs	r3, r3, #9
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	fb02 f303 	mul.w	r3, r2, r3
 800227e:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002280:	bf00      	nop
  } 
  while (Delay --);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	1e5a      	subs	r2, r3, #1
 8002286:	60fa      	str	r2, [r7, #12]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1f9      	bne.n	8002280 <ETH_Delay+0x1c>
}
 800228c:	bf00      	nop
 800228e:	bf00      	nop
 8002290:	3714      	adds	r7, #20
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	20000000 	.word	0x20000000
 80022a0:	10624dd3 	.word	0x10624dd3

080022a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b089      	sub	sp, #36	; 0x24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ba:	2300      	movs	r3, #0
 80022bc:	61fb      	str	r3, [r7, #28]
 80022be:	e16b      	b.n	8002598 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022c0:	2201      	movs	r2, #1
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	4013      	ands	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	429a      	cmp	r2, r3
 80022da:	f040 815a 	bne.w	8002592 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f003 0303 	and.w	r3, r3, #3
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d005      	beq.n	80022f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d130      	bne.n	8002358 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	2203      	movs	r2, #3
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43db      	mvns	r3, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4013      	ands	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	68da      	ldr	r2, [r3, #12]
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4313      	orrs	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800232c:	2201      	movs	r2, #1
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	43db      	mvns	r3, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4013      	ands	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	091b      	lsrs	r3, r3, #4
 8002342:	f003 0201 	and.w	r2, r3, #1
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4313      	orrs	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 0303 	and.w	r3, r3, #3
 8002360:	2b03      	cmp	r3, #3
 8002362:	d017      	beq.n	8002394 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	2203      	movs	r2, #3
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4313      	orrs	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 0303 	and.w	r3, r3, #3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d123      	bne.n	80023e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	08da      	lsrs	r2, r3, #3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3208      	adds	r2, #8
 80023a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	220f      	movs	r2, #15
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	691a      	ldr	r2, [r3, #16]
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	08da      	lsrs	r2, r3, #3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	3208      	adds	r2, #8
 80023e2:	69b9      	ldr	r1, [r7, #24]
 80023e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	2203      	movs	r2, #3
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	43db      	mvns	r3, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4013      	ands	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f003 0203 	and.w	r2, r3, #3
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4313      	orrs	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002424:	2b00      	cmp	r3, #0
 8002426:	f000 80b4 	beq.w	8002592 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	60fb      	str	r3, [r7, #12]
 800242e:	4b60      	ldr	r3, [pc, #384]	; (80025b0 <HAL_GPIO_Init+0x30c>)
 8002430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002432:	4a5f      	ldr	r2, [pc, #380]	; (80025b0 <HAL_GPIO_Init+0x30c>)
 8002434:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002438:	6453      	str	r3, [r2, #68]	; 0x44
 800243a:	4b5d      	ldr	r3, [pc, #372]	; (80025b0 <HAL_GPIO_Init+0x30c>)
 800243c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002446:	4a5b      	ldr	r2, [pc, #364]	; (80025b4 <HAL_GPIO_Init+0x310>)
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	089b      	lsrs	r3, r3, #2
 800244c:	3302      	adds	r3, #2
 800244e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002452:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	f003 0303 	and.w	r3, r3, #3
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	220f      	movs	r2, #15
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43db      	mvns	r3, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4013      	ands	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a52      	ldr	r2, [pc, #328]	; (80025b8 <HAL_GPIO_Init+0x314>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d02b      	beq.n	80024ca <HAL_GPIO_Init+0x226>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a51      	ldr	r2, [pc, #324]	; (80025bc <HAL_GPIO_Init+0x318>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d025      	beq.n	80024c6 <HAL_GPIO_Init+0x222>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a50      	ldr	r2, [pc, #320]	; (80025c0 <HAL_GPIO_Init+0x31c>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d01f      	beq.n	80024c2 <HAL_GPIO_Init+0x21e>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a4f      	ldr	r2, [pc, #316]	; (80025c4 <HAL_GPIO_Init+0x320>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d019      	beq.n	80024be <HAL_GPIO_Init+0x21a>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a4e      	ldr	r2, [pc, #312]	; (80025c8 <HAL_GPIO_Init+0x324>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d013      	beq.n	80024ba <HAL_GPIO_Init+0x216>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a4d      	ldr	r2, [pc, #308]	; (80025cc <HAL_GPIO_Init+0x328>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d00d      	beq.n	80024b6 <HAL_GPIO_Init+0x212>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a4c      	ldr	r2, [pc, #304]	; (80025d0 <HAL_GPIO_Init+0x32c>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d007      	beq.n	80024b2 <HAL_GPIO_Init+0x20e>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a4b      	ldr	r2, [pc, #300]	; (80025d4 <HAL_GPIO_Init+0x330>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d101      	bne.n	80024ae <HAL_GPIO_Init+0x20a>
 80024aa:	2307      	movs	r3, #7
 80024ac:	e00e      	b.n	80024cc <HAL_GPIO_Init+0x228>
 80024ae:	2308      	movs	r3, #8
 80024b0:	e00c      	b.n	80024cc <HAL_GPIO_Init+0x228>
 80024b2:	2306      	movs	r3, #6
 80024b4:	e00a      	b.n	80024cc <HAL_GPIO_Init+0x228>
 80024b6:	2305      	movs	r3, #5
 80024b8:	e008      	b.n	80024cc <HAL_GPIO_Init+0x228>
 80024ba:	2304      	movs	r3, #4
 80024bc:	e006      	b.n	80024cc <HAL_GPIO_Init+0x228>
 80024be:	2303      	movs	r3, #3
 80024c0:	e004      	b.n	80024cc <HAL_GPIO_Init+0x228>
 80024c2:	2302      	movs	r3, #2
 80024c4:	e002      	b.n	80024cc <HAL_GPIO_Init+0x228>
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <HAL_GPIO_Init+0x228>
 80024ca:	2300      	movs	r3, #0
 80024cc:	69fa      	ldr	r2, [r7, #28]
 80024ce:	f002 0203 	and.w	r2, r2, #3
 80024d2:	0092      	lsls	r2, r2, #2
 80024d4:	4093      	lsls	r3, r2
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4313      	orrs	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024dc:	4935      	ldr	r1, [pc, #212]	; (80025b4 <HAL_GPIO_Init+0x310>)
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	089b      	lsrs	r3, r3, #2
 80024e2:	3302      	adds	r3, #2
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024ea:	4b3b      	ldr	r3, [pc, #236]	; (80025d8 <HAL_GPIO_Init+0x334>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	43db      	mvns	r3, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4013      	ands	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	4313      	orrs	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800250e:	4a32      	ldr	r2, [pc, #200]	; (80025d8 <HAL_GPIO_Init+0x334>)
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002514:	4b30      	ldr	r3, [pc, #192]	; (80025d8 <HAL_GPIO_Init+0x334>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	43db      	mvns	r3, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4013      	ands	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	4313      	orrs	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002538:	4a27      	ldr	r2, [pc, #156]	; (80025d8 <HAL_GPIO_Init+0x334>)
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800253e:	4b26      	ldr	r3, [pc, #152]	; (80025d8 <HAL_GPIO_Init+0x334>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	43db      	mvns	r3, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4013      	ands	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	4313      	orrs	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002562:	4a1d      	ldr	r2, [pc, #116]	; (80025d8 <HAL_GPIO_Init+0x334>)
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002568:	4b1b      	ldr	r3, [pc, #108]	; (80025d8 <HAL_GPIO_Init+0x334>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d003      	beq.n	800258c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	4313      	orrs	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800258c:	4a12      	ldr	r2, [pc, #72]	; (80025d8 <HAL_GPIO_Init+0x334>)
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	3301      	adds	r3, #1
 8002596:	61fb      	str	r3, [r7, #28]
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	2b0f      	cmp	r3, #15
 800259c:	f67f ae90 	bls.w	80022c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025a0:	bf00      	nop
 80025a2:	bf00      	nop
 80025a4:	3724      	adds	r7, #36	; 0x24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	40023800 	.word	0x40023800
 80025b4:	40013800 	.word	0x40013800
 80025b8:	40020000 	.word	0x40020000
 80025bc:	40020400 	.word	0x40020400
 80025c0:	40020800 	.word	0x40020800
 80025c4:	40020c00 	.word	0x40020c00
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40021400 	.word	0x40021400
 80025d0:	40021800 	.word	0x40021800
 80025d4:	40021c00 	.word	0x40021c00
 80025d8:	40013c00 	.word	0x40013c00

080025dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e264      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d075      	beq.n	80026e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025fa:	4ba3      	ldr	r3, [pc, #652]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 030c 	and.w	r3, r3, #12
 8002602:	2b04      	cmp	r3, #4
 8002604:	d00c      	beq.n	8002620 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002606:	4ba0      	ldr	r3, [pc, #640]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800260e:	2b08      	cmp	r3, #8
 8002610:	d112      	bne.n	8002638 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002612:	4b9d      	ldr	r3, [pc, #628]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800261a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800261e:	d10b      	bne.n	8002638 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002620:	4b99      	ldr	r3, [pc, #612]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d05b      	beq.n	80026e4 <HAL_RCC_OscConfig+0x108>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d157      	bne.n	80026e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e23f      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002640:	d106      	bne.n	8002650 <HAL_RCC_OscConfig+0x74>
 8002642:	4b91      	ldr	r3, [pc, #580]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a90      	ldr	r2, [pc, #576]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 8002648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	e01d      	b.n	800268c <HAL_RCC_OscConfig+0xb0>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002658:	d10c      	bne.n	8002674 <HAL_RCC_OscConfig+0x98>
 800265a:	4b8b      	ldr	r3, [pc, #556]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a8a      	ldr	r2, [pc, #552]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 8002660:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	4b88      	ldr	r3, [pc, #544]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a87      	ldr	r2, [pc, #540]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 800266c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	e00b      	b.n	800268c <HAL_RCC_OscConfig+0xb0>
 8002674:	4b84      	ldr	r3, [pc, #528]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a83      	ldr	r2, [pc, #524]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 800267a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800267e:	6013      	str	r3, [r2, #0]
 8002680:	4b81      	ldr	r3, [pc, #516]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a80      	ldr	r2, [pc, #512]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 8002686:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800268a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d013      	beq.n	80026bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002694:	f7fe fb18 	bl	8000cc8 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800269c:	f7fe fb14 	bl	8000cc8 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b64      	cmp	r3, #100	; 0x64
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e204      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ae:	4b76      	ldr	r3, [pc, #472]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0f0      	beq.n	800269c <HAL_RCC_OscConfig+0xc0>
 80026ba:	e014      	b.n	80026e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026bc:	f7fe fb04 	bl	8000cc8 <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026c4:	f7fe fb00 	bl	8000cc8 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b64      	cmp	r3, #100	; 0x64
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e1f0      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026d6:	4b6c      	ldr	r3, [pc, #432]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f0      	bne.n	80026c4 <HAL_RCC_OscConfig+0xe8>
 80026e2:	e000      	b.n	80026e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d063      	beq.n	80027ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026f2:	4b65      	ldr	r3, [pc, #404]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 030c 	and.w	r3, r3, #12
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00b      	beq.n	8002716 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026fe:	4b62      	ldr	r3, [pc, #392]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002706:	2b08      	cmp	r3, #8
 8002708:	d11c      	bne.n	8002744 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800270a:	4b5f      	ldr	r3, [pc, #380]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d116      	bne.n	8002744 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002716:	4b5c      	ldr	r3, [pc, #368]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d005      	beq.n	800272e <HAL_RCC_OscConfig+0x152>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d001      	beq.n	800272e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e1c4      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800272e:	4b56      	ldr	r3, [pc, #344]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	4952      	ldr	r1, [pc, #328]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 800273e:	4313      	orrs	r3, r2
 8002740:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002742:	e03a      	b.n	80027ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d020      	beq.n	800278e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800274c:	4b4f      	ldr	r3, [pc, #316]	; (800288c <HAL_RCC_OscConfig+0x2b0>)
 800274e:	2201      	movs	r2, #1
 8002750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002752:	f7fe fab9 	bl	8000cc8 <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002758:	e008      	b.n	800276c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800275a:	f7fe fab5 	bl	8000cc8 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e1a5      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800276c:	4b46      	ldr	r3, [pc, #280]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0f0      	beq.n	800275a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002778:	4b43      	ldr	r3, [pc, #268]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	4940      	ldr	r1, [pc, #256]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 8002788:	4313      	orrs	r3, r2
 800278a:	600b      	str	r3, [r1, #0]
 800278c:	e015      	b.n	80027ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800278e:	4b3f      	ldr	r3, [pc, #252]	; (800288c <HAL_RCC_OscConfig+0x2b0>)
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002794:	f7fe fa98 	bl	8000cc8 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800279c:	f7fe fa94 	bl	8000cc8 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e184      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ae:	4b36      	ldr	r3, [pc, #216]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f0      	bne.n	800279c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0308 	and.w	r3, r3, #8
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d030      	beq.n	8002828 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d016      	beq.n	80027fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ce:	4b30      	ldr	r3, [pc, #192]	; (8002890 <HAL_RCC_OscConfig+0x2b4>)
 80027d0:	2201      	movs	r2, #1
 80027d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d4:	f7fe fa78 	bl	8000cc8 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027dc:	f7fe fa74 	bl	8000cc8 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e164      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ee:	4b26      	ldr	r3, [pc, #152]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 80027f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0f0      	beq.n	80027dc <HAL_RCC_OscConfig+0x200>
 80027fa:	e015      	b.n	8002828 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027fc:	4b24      	ldr	r3, [pc, #144]	; (8002890 <HAL_RCC_OscConfig+0x2b4>)
 80027fe:	2200      	movs	r2, #0
 8002800:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002802:	f7fe fa61 	bl	8000cc8 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800280a:	f7fe fa5d 	bl	8000cc8 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e14d      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800281c:	4b1a      	ldr	r3, [pc, #104]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 800281e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1f0      	bne.n	800280a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 80a0 	beq.w	8002976 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002836:	2300      	movs	r3, #0
 8002838:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800283a:	4b13      	ldr	r3, [pc, #76]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10f      	bne.n	8002866 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	60bb      	str	r3, [r7, #8]
 800284a:	4b0f      	ldr	r3, [pc, #60]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	4a0e      	ldr	r2, [pc, #56]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 8002850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002854:	6413      	str	r3, [r2, #64]	; 0x40
 8002856:	4b0c      	ldr	r3, [pc, #48]	; (8002888 <HAL_RCC_OscConfig+0x2ac>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285e:	60bb      	str	r3, [r7, #8]
 8002860:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002862:	2301      	movs	r3, #1
 8002864:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002866:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <HAL_RCC_OscConfig+0x2b8>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286e:	2b00      	cmp	r3, #0
 8002870:	d121      	bne.n	80028b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002872:	4b08      	ldr	r3, [pc, #32]	; (8002894 <HAL_RCC_OscConfig+0x2b8>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a07      	ldr	r2, [pc, #28]	; (8002894 <HAL_RCC_OscConfig+0x2b8>)
 8002878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800287c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800287e:	f7fe fa23 	bl	8000cc8 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002884:	e011      	b.n	80028aa <HAL_RCC_OscConfig+0x2ce>
 8002886:	bf00      	nop
 8002888:	40023800 	.word	0x40023800
 800288c:	42470000 	.word	0x42470000
 8002890:	42470e80 	.word	0x42470e80
 8002894:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002898:	f7fe fa16 	bl	8000cc8 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e106      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028aa:	4b85      	ldr	r3, [pc, #532]	; (8002ac0 <HAL_RCC_OscConfig+0x4e4>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0f0      	beq.n	8002898 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d106      	bne.n	80028cc <HAL_RCC_OscConfig+0x2f0>
 80028be:	4b81      	ldr	r3, [pc, #516]	; (8002ac4 <HAL_RCC_OscConfig+0x4e8>)
 80028c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c2:	4a80      	ldr	r2, [pc, #512]	; (8002ac4 <HAL_RCC_OscConfig+0x4e8>)
 80028c4:	f043 0301 	orr.w	r3, r3, #1
 80028c8:	6713      	str	r3, [r2, #112]	; 0x70
 80028ca:	e01c      	b.n	8002906 <HAL_RCC_OscConfig+0x32a>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	2b05      	cmp	r3, #5
 80028d2:	d10c      	bne.n	80028ee <HAL_RCC_OscConfig+0x312>
 80028d4:	4b7b      	ldr	r3, [pc, #492]	; (8002ac4 <HAL_RCC_OscConfig+0x4e8>)
 80028d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d8:	4a7a      	ldr	r2, [pc, #488]	; (8002ac4 <HAL_RCC_OscConfig+0x4e8>)
 80028da:	f043 0304 	orr.w	r3, r3, #4
 80028de:	6713      	str	r3, [r2, #112]	; 0x70
 80028e0:	4b78      	ldr	r3, [pc, #480]	; (8002ac4 <HAL_RCC_OscConfig+0x4e8>)
 80028e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e4:	4a77      	ldr	r2, [pc, #476]	; (8002ac4 <HAL_RCC_OscConfig+0x4e8>)
 80028e6:	f043 0301 	orr.w	r3, r3, #1
 80028ea:	6713      	str	r3, [r2, #112]	; 0x70
 80028ec:	e00b      	b.n	8002906 <HAL_RCC_OscConfig+0x32a>
 80028ee:	4b75      	ldr	r3, [pc, #468]	; (8002ac4 <HAL_RCC_OscConfig+0x4e8>)
 80028f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f2:	4a74      	ldr	r2, [pc, #464]	; (8002ac4 <HAL_RCC_OscConfig+0x4e8>)
 80028f4:	f023 0301 	bic.w	r3, r3, #1
 80028f8:	6713      	str	r3, [r2, #112]	; 0x70
 80028fa:	4b72      	ldr	r3, [pc, #456]	; (8002ac4 <HAL_RCC_OscConfig+0x4e8>)
 80028fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fe:	4a71      	ldr	r2, [pc, #452]	; (8002ac4 <HAL_RCC_OscConfig+0x4e8>)
 8002900:	f023 0304 	bic.w	r3, r3, #4
 8002904:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d015      	beq.n	800293a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290e:	f7fe f9db 	bl	8000cc8 <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002914:	e00a      	b.n	800292c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002916:	f7fe f9d7 	bl	8000cc8 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	f241 3288 	movw	r2, #5000	; 0x1388
 8002924:	4293      	cmp	r3, r2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e0c5      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800292c:	4b65      	ldr	r3, [pc, #404]	; (8002ac4 <HAL_RCC_OscConfig+0x4e8>)
 800292e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0ee      	beq.n	8002916 <HAL_RCC_OscConfig+0x33a>
 8002938:	e014      	b.n	8002964 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800293a:	f7fe f9c5 	bl	8000cc8 <HAL_GetTick>
 800293e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002940:	e00a      	b.n	8002958 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002942:	f7fe f9c1 	bl	8000cc8 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002950:	4293      	cmp	r3, r2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e0af      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002958:	4b5a      	ldr	r3, [pc, #360]	; (8002ac4 <HAL_RCC_OscConfig+0x4e8>)
 800295a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1ee      	bne.n	8002942 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002964:	7dfb      	ldrb	r3, [r7, #23]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d105      	bne.n	8002976 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800296a:	4b56      	ldr	r3, [pc, #344]	; (8002ac4 <HAL_RCC_OscConfig+0x4e8>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	4a55      	ldr	r2, [pc, #340]	; (8002ac4 <HAL_RCC_OscConfig+0x4e8>)
 8002970:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002974:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 809b 	beq.w	8002ab6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002980:	4b50      	ldr	r3, [pc, #320]	; (8002ac4 <HAL_RCC_OscConfig+0x4e8>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 030c 	and.w	r3, r3, #12
 8002988:	2b08      	cmp	r3, #8
 800298a:	d05c      	beq.n	8002a46 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	2b02      	cmp	r3, #2
 8002992:	d141      	bne.n	8002a18 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002994:	4b4c      	ldr	r3, [pc, #304]	; (8002ac8 <HAL_RCC_OscConfig+0x4ec>)
 8002996:	2200      	movs	r2, #0
 8002998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299a:	f7fe f995 	bl	8000cc8 <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a2:	f7fe f991 	bl	8000cc8 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e081      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b4:	4b43      	ldr	r3, [pc, #268]	; (8002ac4 <HAL_RCC_OscConfig+0x4e8>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1f0      	bne.n	80029a2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	69da      	ldr	r2, [r3, #28]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	431a      	orrs	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	019b      	lsls	r3, r3, #6
 80029d0:	431a      	orrs	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d6:	085b      	lsrs	r3, r3, #1
 80029d8:	3b01      	subs	r3, #1
 80029da:	041b      	lsls	r3, r3, #16
 80029dc:	431a      	orrs	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e2:	061b      	lsls	r3, r3, #24
 80029e4:	4937      	ldr	r1, [pc, #220]	; (8002ac4 <HAL_RCC_OscConfig+0x4e8>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029ea:	4b37      	ldr	r3, [pc, #220]	; (8002ac8 <HAL_RCC_OscConfig+0x4ec>)
 80029ec:	2201      	movs	r2, #1
 80029ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f0:	f7fe f96a 	bl	8000cc8 <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029f8:	f7fe f966 	bl	8000cc8 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e056      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a0a:	4b2e      	ldr	r3, [pc, #184]	; (8002ac4 <HAL_RCC_OscConfig+0x4e8>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0f0      	beq.n	80029f8 <HAL_RCC_OscConfig+0x41c>
 8002a16:	e04e      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a18:	4b2b      	ldr	r3, [pc, #172]	; (8002ac8 <HAL_RCC_OscConfig+0x4ec>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1e:	f7fe f953 	bl	8000cc8 <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a26:	f7fe f94f 	bl	8000cc8 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e03f      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a38:	4b22      	ldr	r3, [pc, #136]	; (8002ac4 <HAL_RCC_OscConfig+0x4e8>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1f0      	bne.n	8002a26 <HAL_RCC_OscConfig+0x44a>
 8002a44:	e037      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d101      	bne.n	8002a52 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e032      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a52:	4b1c      	ldr	r3, [pc, #112]	; (8002ac4 <HAL_RCC_OscConfig+0x4e8>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d028      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d121      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d11a      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a82:	4013      	ands	r3, r2
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a88:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d111      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a98:	085b      	lsrs	r3, r3, #1
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d107      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aac:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d001      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e000      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3718      	adds	r7, #24
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40007000 	.word	0x40007000
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	42470060 	.word	0x42470060

08002acc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e0cc      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ae0:	4b68      	ldr	r3, [pc, #416]	; (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d90c      	bls.n	8002b08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aee:	4b65      	ldr	r3, [pc, #404]	; (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af6:	4b63      	ldr	r3, [pc, #396]	; (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d001      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e0b8      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d020      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b20:	4b59      	ldr	r3, [pc, #356]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	4a58      	ldr	r2, [pc, #352]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0308 	and.w	r3, r3, #8
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d005      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b38:	4b53      	ldr	r3, [pc, #332]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	4a52      	ldr	r2, [pc, #328]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b44:	4b50      	ldr	r3, [pc, #320]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	494d      	ldr	r1, [pc, #308]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d044      	beq.n	8002bec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d107      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6a:	4b47      	ldr	r3, [pc, #284]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d119      	bne.n	8002baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e07f      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d003      	beq.n	8002b8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b86:	2b03      	cmp	r3, #3
 8002b88:	d107      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b8a:	4b3f      	ldr	r3, [pc, #252]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d109      	bne.n	8002baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e06f      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b9a:	4b3b      	ldr	r3, [pc, #236]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e067      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002baa:	4b37      	ldr	r3, [pc, #220]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f023 0203 	bic.w	r2, r3, #3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	4934      	ldr	r1, [pc, #208]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bbc:	f7fe f884 	bl	8000cc8 <HAL_GetTick>
 8002bc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc2:	e00a      	b.n	8002bda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc4:	f7fe f880 	bl	8000cc8 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e04f      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bda:	4b2b      	ldr	r3, [pc, #172]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 020c 	and.w	r2, r3, #12
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d1eb      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bec:	4b25      	ldr	r3, [pc, #148]	; (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d20c      	bcs.n	8002c14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfa:	4b22      	ldr	r3, [pc, #136]	; (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c02:	4b20      	ldr	r3, [pc, #128]	; (8002c84 <HAL_RCC_ClockConfig+0x1b8>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d001      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e032      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d008      	beq.n	8002c32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c20:	4b19      	ldr	r3, [pc, #100]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	4916      	ldr	r1, [pc, #88]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d009      	beq.n	8002c52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c3e:	4b12      	ldr	r3, [pc, #72]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	490e      	ldr	r1, [pc, #56]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c52:	f000 f821 	bl	8002c98 <HAL_RCC_GetSysClockFreq>
 8002c56:	4602      	mov	r2, r0
 8002c58:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	091b      	lsrs	r3, r3, #4
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	490a      	ldr	r1, [pc, #40]	; (8002c8c <HAL_RCC_ClockConfig+0x1c0>)
 8002c64:	5ccb      	ldrb	r3, [r1, r3]
 8002c66:	fa22 f303 	lsr.w	r3, r2, r3
 8002c6a:	4a09      	ldr	r2, [pc, #36]	; (8002c90 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c6e:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <HAL_RCC_ClockConfig+0x1c8>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fd ffe4 	bl	8000c40 <HAL_InitTick>

  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40023c00 	.word	0x40023c00
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	08012028 	.word	0x08012028
 8002c90:	20000000 	.word	0x20000000
 8002c94:	20000004 	.word	0x20000004

08002c98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002c9c:	b084      	sub	sp, #16
 8002c9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	607b      	str	r3, [r7, #4]
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	2300      	movs	r3, #0
 8002caa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002cac:	2300      	movs	r3, #0
 8002cae:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cb0:	4b67      	ldr	r3, [pc, #412]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 030c 	and.w	r3, r3, #12
 8002cb8:	2b08      	cmp	r3, #8
 8002cba:	d00d      	beq.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x40>
 8002cbc:	2b08      	cmp	r3, #8
 8002cbe:	f200 80bd 	bhi.w	8002e3c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d002      	beq.n	8002ccc <HAL_RCC_GetSysClockFreq+0x34>
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	d003      	beq.n	8002cd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cca:	e0b7      	b.n	8002e3c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ccc:	4b61      	ldr	r3, [pc, #388]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002cce:	60bb      	str	r3, [r7, #8]
       break;
 8002cd0:	e0b7      	b.n	8002e42 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cd2:	4b61      	ldr	r3, [pc, #388]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002cd4:	60bb      	str	r3, [r7, #8]
      break;
 8002cd6:	e0b4      	b.n	8002e42 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cd8:	4b5d      	ldr	r3, [pc, #372]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ce0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ce2:	4b5b      	ldr	r3, [pc, #364]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d04d      	beq.n	8002d8a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cee:	4b58      	ldr	r3, [pc, #352]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	099b      	lsrs	r3, r3, #6
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	f04f 0300 	mov.w	r3, #0
 8002cfa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002cfe:	f04f 0100 	mov.w	r1, #0
 8002d02:	ea02 0800 	and.w	r8, r2, r0
 8002d06:	ea03 0901 	and.w	r9, r3, r1
 8002d0a:	4640      	mov	r0, r8
 8002d0c:	4649      	mov	r1, r9
 8002d0e:	f04f 0200 	mov.w	r2, #0
 8002d12:	f04f 0300 	mov.w	r3, #0
 8002d16:	014b      	lsls	r3, r1, #5
 8002d18:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d1c:	0142      	lsls	r2, r0, #5
 8002d1e:	4610      	mov	r0, r2
 8002d20:	4619      	mov	r1, r3
 8002d22:	ebb0 0008 	subs.w	r0, r0, r8
 8002d26:	eb61 0109 	sbc.w	r1, r1, r9
 8002d2a:	f04f 0200 	mov.w	r2, #0
 8002d2e:	f04f 0300 	mov.w	r3, #0
 8002d32:	018b      	lsls	r3, r1, #6
 8002d34:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d38:	0182      	lsls	r2, r0, #6
 8002d3a:	1a12      	subs	r2, r2, r0
 8002d3c:	eb63 0301 	sbc.w	r3, r3, r1
 8002d40:	f04f 0000 	mov.w	r0, #0
 8002d44:	f04f 0100 	mov.w	r1, #0
 8002d48:	00d9      	lsls	r1, r3, #3
 8002d4a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d4e:	00d0      	lsls	r0, r2, #3
 8002d50:	4602      	mov	r2, r0
 8002d52:	460b      	mov	r3, r1
 8002d54:	eb12 0208 	adds.w	r2, r2, r8
 8002d58:	eb43 0309 	adc.w	r3, r3, r9
 8002d5c:	f04f 0000 	mov.w	r0, #0
 8002d60:	f04f 0100 	mov.w	r1, #0
 8002d64:	0259      	lsls	r1, r3, #9
 8002d66:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002d6a:	0250      	lsls	r0, r2, #9
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	4610      	mov	r0, r2
 8002d72:	4619      	mov	r1, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	461a      	mov	r2, r3
 8002d78:	f04f 0300 	mov.w	r3, #0
 8002d7c:	f7fd fa78 	bl	8000270 <__aeabi_uldivmod>
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	4613      	mov	r3, r2
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	e04a      	b.n	8002e20 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d8a:	4b31      	ldr	r3, [pc, #196]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	099b      	lsrs	r3, r3, #6
 8002d90:	461a      	mov	r2, r3
 8002d92:	f04f 0300 	mov.w	r3, #0
 8002d96:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d9a:	f04f 0100 	mov.w	r1, #0
 8002d9e:	ea02 0400 	and.w	r4, r2, r0
 8002da2:	ea03 0501 	and.w	r5, r3, r1
 8002da6:	4620      	mov	r0, r4
 8002da8:	4629      	mov	r1, r5
 8002daa:	f04f 0200 	mov.w	r2, #0
 8002dae:	f04f 0300 	mov.w	r3, #0
 8002db2:	014b      	lsls	r3, r1, #5
 8002db4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002db8:	0142      	lsls	r2, r0, #5
 8002dba:	4610      	mov	r0, r2
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	1b00      	subs	r0, r0, r4
 8002dc0:	eb61 0105 	sbc.w	r1, r1, r5
 8002dc4:	f04f 0200 	mov.w	r2, #0
 8002dc8:	f04f 0300 	mov.w	r3, #0
 8002dcc:	018b      	lsls	r3, r1, #6
 8002dce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002dd2:	0182      	lsls	r2, r0, #6
 8002dd4:	1a12      	subs	r2, r2, r0
 8002dd6:	eb63 0301 	sbc.w	r3, r3, r1
 8002dda:	f04f 0000 	mov.w	r0, #0
 8002dde:	f04f 0100 	mov.w	r1, #0
 8002de2:	00d9      	lsls	r1, r3, #3
 8002de4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002de8:	00d0      	lsls	r0, r2, #3
 8002dea:	4602      	mov	r2, r0
 8002dec:	460b      	mov	r3, r1
 8002dee:	1912      	adds	r2, r2, r4
 8002df0:	eb45 0303 	adc.w	r3, r5, r3
 8002df4:	f04f 0000 	mov.w	r0, #0
 8002df8:	f04f 0100 	mov.w	r1, #0
 8002dfc:	0299      	lsls	r1, r3, #10
 8002dfe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002e02:	0290      	lsls	r0, r2, #10
 8002e04:	4602      	mov	r2, r0
 8002e06:	460b      	mov	r3, r1
 8002e08:	4610      	mov	r0, r2
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	f04f 0300 	mov.w	r3, #0
 8002e14:	f7fd fa2c 	bl	8000270 <__aeabi_uldivmod>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e20:	4b0b      	ldr	r3, [pc, #44]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	0c1b      	lsrs	r3, r3, #16
 8002e26:	f003 0303 	and.w	r3, r3, #3
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e38:	60bb      	str	r3, [r7, #8]
      break;
 8002e3a:	e002      	b.n	8002e42 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e3c:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002e3e:	60bb      	str	r3, [r7, #8]
      break;
 8002e40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e42:	68bb      	ldr	r3, [r7, #8]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002e4e:	bf00      	nop
 8002e50:	40023800 	.word	0x40023800
 8002e54:	00f42400 	.word	0x00f42400
 8002e58:	007a1200 	.word	0x007a1200

08002e5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e60:	4b03      	ldr	r3, [pc, #12]	; (8002e70 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e62:	681b      	ldr	r3, [r3, #0]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	20000000 	.word	0x20000000

08002e74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e041      	b.n	8002f0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d106      	bne.n	8002ea0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7fd fcae 	bl	80007fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3304      	adds	r3, #4
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4610      	mov	r0, r2
 8002eb4:	f000 fa96 	bl	80033e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
	...

08002f14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d001      	beq.n	8002f2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e04e      	b.n	8002fca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68da      	ldr	r2, [r3, #12]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0201 	orr.w	r2, r2, #1
 8002f42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a23      	ldr	r2, [pc, #140]	; (8002fd8 <HAL_TIM_Base_Start_IT+0xc4>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d022      	beq.n	8002f94 <HAL_TIM_Base_Start_IT+0x80>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f56:	d01d      	beq.n	8002f94 <HAL_TIM_Base_Start_IT+0x80>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a1f      	ldr	r2, [pc, #124]	; (8002fdc <HAL_TIM_Base_Start_IT+0xc8>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d018      	beq.n	8002f94 <HAL_TIM_Base_Start_IT+0x80>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a1e      	ldr	r2, [pc, #120]	; (8002fe0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d013      	beq.n	8002f94 <HAL_TIM_Base_Start_IT+0x80>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a1c      	ldr	r2, [pc, #112]	; (8002fe4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d00e      	beq.n	8002f94 <HAL_TIM_Base_Start_IT+0x80>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a1b      	ldr	r2, [pc, #108]	; (8002fe8 <HAL_TIM_Base_Start_IT+0xd4>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d009      	beq.n	8002f94 <HAL_TIM_Base_Start_IT+0x80>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a19      	ldr	r2, [pc, #100]	; (8002fec <HAL_TIM_Base_Start_IT+0xd8>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d004      	beq.n	8002f94 <HAL_TIM_Base_Start_IT+0x80>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a18      	ldr	r2, [pc, #96]	; (8002ff0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d111      	bne.n	8002fb8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2b06      	cmp	r3, #6
 8002fa4:	d010      	beq.n	8002fc8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f042 0201 	orr.w	r2, r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fb6:	e007      	b.n	8002fc8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 0201 	orr.w	r2, r2, #1
 8002fc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3714      	adds	r7, #20
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	40010000 	.word	0x40010000
 8002fdc:	40000400 	.word	0x40000400
 8002fe0:	40000800 	.word	0x40000800
 8002fe4:	40000c00 	.word	0x40000c00
 8002fe8:	40010400 	.word	0x40010400
 8002fec:	40014000 	.word	0x40014000
 8002ff0:	40001800 	.word	0x40001800

08002ff4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b02      	cmp	r3, #2
 8003008:	d122      	bne.n	8003050 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b02      	cmp	r3, #2
 8003016:	d11b      	bne.n	8003050 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f06f 0202 	mvn.w	r2, #2
 8003020:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	f003 0303 	and.w	r3, r3, #3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f9b5 	bl	80033a6 <HAL_TIM_IC_CaptureCallback>
 800303c:	e005      	b.n	800304a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f9a7 	bl	8003392 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 f9b8 	bl	80033ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	f003 0304 	and.w	r3, r3, #4
 800305a:	2b04      	cmp	r3, #4
 800305c:	d122      	bne.n	80030a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b04      	cmp	r3, #4
 800306a:	d11b      	bne.n	80030a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f06f 0204 	mvn.w	r2, #4
 8003074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2202      	movs	r2, #2
 800307a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f98b 	bl	80033a6 <HAL_TIM_IC_CaptureCallback>
 8003090:	e005      	b.n	800309e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 f97d 	bl	8003392 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 f98e 	bl	80033ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	2b08      	cmp	r3, #8
 80030b0:	d122      	bne.n	80030f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	f003 0308 	and.w	r3, r3, #8
 80030bc:	2b08      	cmp	r3, #8
 80030be:	d11b      	bne.n	80030f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f06f 0208 	mvn.w	r2, #8
 80030c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2204      	movs	r2, #4
 80030ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	69db      	ldr	r3, [r3, #28]
 80030d6:	f003 0303 	and.w	r3, r3, #3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 f961 	bl	80033a6 <HAL_TIM_IC_CaptureCallback>
 80030e4:	e005      	b.n	80030f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 f953 	bl	8003392 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 f964 	bl	80033ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	f003 0310 	and.w	r3, r3, #16
 8003102:	2b10      	cmp	r3, #16
 8003104:	d122      	bne.n	800314c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f003 0310 	and.w	r3, r3, #16
 8003110:	2b10      	cmp	r3, #16
 8003112:	d11b      	bne.n	800314c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f06f 0210 	mvn.w	r2, #16
 800311c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2208      	movs	r2, #8
 8003122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f937 	bl	80033a6 <HAL_TIM_IC_CaptureCallback>
 8003138:	e005      	b.n	8003146 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f929 	bl	8003392 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 f93a 	bl	80033ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b01      	cmp	r3, #1
 8003158:	d10e      	bne.n	8003178 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	2b01      	cmp	r3, #1
 8003166:	d107      	bne.n	8003178 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f06f 0201 	mvn.w	r2, #1
 8003170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f7fd fc84 	bl	8000a80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003182:	2b80      	cmp	r3, #128	; 0x80
 8003184:	d10e      	bne.n	80031a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003190:	2b80      	cmp	r3, #128	; 0x80
 8003192:	d107      	bne.n	80031a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800319c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 fae0 	bl	8003764 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ae:	2b40      	cmp	r3, #64	; 0x40
 80031b0:	d10e      	bne.n	80031d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031bc:	2b40      	cmp	r3, #64	; 0x40
 80031be:	d107      	bne.n	80031d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f8ff 	bl	80033ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	f003 0320 	and.w	r3, r3, #32
 80031da:	2b20      	cmp	r3, #32
 80031dc:	d10e      	bne.n	80031fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	f003 0320 	and.w	r3, r3, #32
 80031e8:	2b20      	cmp	r3, #32
 80031ea:	d107      	bne.n	80031fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f06f 0220 	mvn.w	r2, #32
 80031f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 faaa 	bl	8003750 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031fc:	bf00      	nop
 80031fe:	3708      	adds	r7, #8
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800320e:	2300      	movs	r3, #0
 8003210:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003218:	2b01      	cmp	r3, #1
 800321a:	d101      	bne.n	8003220 <HAL_TIM_ConfigClockSource+0x1c>
 800321c:	2302      	movs	r3, #2
 800321e:	e0b4      	b.n	800338a <HAL_TIM_ConfigClockSource+0x186>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2202      	movs	r2, #2
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800323e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003246:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68ba      	ldr	r2, [r7, #8]
 800324e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003258:	d03e      	beq.n	80032d8 <HAL_TIM_ConfigClockSource+0xd4>
 800325a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800325e:	f200 8087 	bhi.w	8003370 <HAL_TIM_ConfigClockSource+0x16c>
 8003262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003266:	f000 8086 	beq.w	8003376 <HAL_TIM_ConfigClockSource+0x172>
 800326a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800326e:	d87f      	bhi.n	8003370 <HAL_TIM_ConfigClockSource+0x16c>
 8003270:	2b70      	cmp	r3, #112	; 0x70
 8003272:	d01a      	beq.n	80032aa <HAL_TIM_ConfigClockSource+0xa6>
 8003274:	2b70      	cmp	r3, #112	; 0x70
 8003276:	d87b      	bhi.n	8003370 <HAL_TIM_ConfigClockSource+0x16c>
 8003278:	2b60      	cmp	r3, #96	; 0x60
 800327a:	d050      	beq.n	800331e <HAL_TIM_ConfigClockSource+0x11a>
 800327c:	2b60      	cmp	r3, #96	; 0x60
 800327e:	d877      	bhi.n	8003370 <HAL_TIM_ConfigClockSource+0x16c>
 8003280:	2b50      	cmp	r3, #80	; 0x50
 8003282:	d03c      	beq.n	80032fe <HAL_TIM_ConfigClockSource+0xfa>
 8003284:	2b50      	cmp	r3, #80	; 0x50
 8003286:	d873      	bhi.n	8003370 <HAL_TIM_ConfigClockSource+0x16c>
 8003288:	2b40      	cmp	r3, #64	; 0x40
 800328a:	d058      	beq.n	800333e <HAL_TIM_ConfigClockSource+0x13a>
 800328c:	2b40      	cmp	r3, #64	; 0x40
 800328e:	d86f      	bhi.n	8003370 <HAL_TIM_ConfigClockSource+0x16c>
 8003290:	2b30      	cmp	r3, #48	; 0x30
 8003292:	d064      	beq.n	800335e <HAL_TIM_ConfigClockSource+0x15a>
 8003294:	2b30      	cmp	r3, #48	; 0x30
 8003296:	d86b      	bhi.n	8003370 <HAL_TIM_ConfigClockSource+0x16c>
 8003298:	2b20      	cmp	r3, #32
 800329a:	d060      	beq.n	800335e <HAL_TIM_ConfigClockSource+0x15a>
 800329c:	2b20      	cmp	r3, #32
 800329e:	d867      	bhi.n	8003370 <HAL_TIM_ConfigClockSource+0x16c>
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d05c      	beq.n	800335e <HAL_TIM_ConfigClockSource+0x15a>
 80032a4:	2b10      	cmp	r3, #16
 80032a6:	d05a      	beq.n	800335e <HAL_TIM_ConfigClockSource+0x15a>
 80032a8:	e062      	b.n	8003370 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6818      	ldr	r0, [r3, #0]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	6899      	ldr	r1, [r3, #8]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	f000 f9ad 	bl	8003618 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	609a      	str	r2, [r3, #8]
      break;
 80032d6:	e04f      	b.n	8003378 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6818      	ldr	r0, [r3, #0]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	6899      	ldr	r1, [r3, #8]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f000 f996 	bl	8003618 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032fa:	609a      	str	r2, [r3, #8]
      break;
 80032fc:	e03c      	b.n	8003378 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6818      	ldr	r0, [r3, #0]
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	6859      	ldr	r1, [r3, #4]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	461a      	mov	r2, r3
 800330c:	f000 f90a 	bl	8003524 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2150      	movs	r1, #80	; 0x50
 8003316:	4618      	mov	r0, r3
 8003318:	f000 f963 	bl	80035e2 <TIM_ITRx_SetConfig>
      break;
 800331c:	e02c      	b.n	8003378 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6818      	ldr	r0, [r3, #0]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	6859      	ldr	r1, [r3, #4]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	461a      	mov	r2, r3
 800332c:	f000 f929 	bl	8003582 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2160      	movs	r1, #96	; 0x60
 8003336:	4618      	mov	r0, r3
 8003338:	f000 f953 	bl	80035e2 <TIM_ITRx_SetConfig>
      break;
 800333c:	e01c      	b.n	8003378 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6818      	ldr	r0, [r3, #0]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	6859      	ldr	r1, [r3, #4]
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	461a      	mov	r2, r3
 800334c:	f000 f8ea 	bl	8003524 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2140      	movs	r1, #64	; 0x40
 8003356:	4618      	mov	r0, r3
 8003358:	f000 f943 	bl	80035e2 <TIM_ITRx_SetConfig>
      break;
 800335c:	e00c      	b.n	8003378 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4619      	mov	r1, r3
 8003368:	4610      	mov	r0, r2
 800336a:	f000 f93a 	bl	80035e2 <TIM_ITRx_SetConfig>
      break;
 800336e:	e003      	b.n	8003378 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	73fb      	strb	r3, [r7, #15]
      break;
 8003374:	e000      	b.n	8003378 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003376:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003388:	7bfb      	ldrb	r3, [r7, #15]
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003392:	b480      	push	{r7}
 8003394:	b083      	sub	sp, #12
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr

080033a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b083      	sub	sp, #12
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b083      	sub	sp, #12
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033c2:	bf00      	nop
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b083      	sub	sp, #12
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
	...

080033e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a40      	ldr	r2, [pc, #256]	; (80034f8 <TIM_Base_SetConfig+0x114>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d013      	beq.n	8003424 <TIM_Base_SetConfig+0x40>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003402:	d00f      	beq.n	8003424 <TIM_Base_SetConfig+0x40>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a3d      	ldr	r2, [pc, #244]	; (80034fc <TIM_Base_SetConfig+0x118>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d00b      	beq.n	8003424 <TIM_Base_SetConfig+0x40>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a3c      	ldr	r2, [pc, #240]	; (8003500 <TIM_Base_SetConfig+0x11c>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d007      	beq.n	8003424 <TIM_Base_SetConfig+0x40>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a3b      	ldr	r2, [pc, #236]	; (8003504 <TIM_Base_SetConfig+0x120>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d003      	beq.n	8003424 <TIM_Base_SetConfig+0x40>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a3a      	ldr	r2, [pc, #232]	; (8003508 <TIM_Base_SetConfig+0x124>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d108      	bne.n	8003436 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800342a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	4313      	orrs	r3, r2
 8003434:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a2f      	ldr	r2, [pc, #188]	; (80034f8 <TIM_Base_SetConfig+0x114>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d02b      	beq.n	8003496 <TIM_Base_SetConfig+0xb2>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003444:	d027      	beq.n	8003496 <TIM_Base_SetConfig+0xb2>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a2c      	ldr	r2, [pc, #176]	; (80034fc <TIM_Base_SetConfig+0x118>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d023      	beq.n	8003496 <TIM_Base_SetConfig+0xb2>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a2b      	ldr	r2, [pc, #172]	; (8003500 <TIM_Base_SetConfig+0x11c>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d01f      	beq.n	8003496 <TIM_Base_SetConfig+0xb2>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a2a      	ldr	r2, [pc, #168]	; (8003504 <TIM_Base_SetConfig+0x120>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d01b      	beq.n	8003496 <TIM_Base_SetConfig+0xb2>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a29      	ldr	r2, [pc, #164]	; (8003508 <TIM_Base_SetConfig+0x124>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d017      	beq.n	8003496 <TIM_Base_SetConfig+0xb2>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a28      	ldr	r2, [pc, #160]	; (800350c <TIM_Base_SetConfig+0x128>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d013      	beq.n	8003496 <TIM_Base_SetConfig+0xb2>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a27      	ldr	r2, [pc, #156]	; (8003510 <TIM_Base_SetConfig+0x12c>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d00f      	beq.n	8003496 <TIM_Base_SetConfig+0xb2>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a26      	ldr	r2, [pc, #152]	; (8003514 <TIM_Base_SetConfig+0x130>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d00b      	beq.n	8003496 <TIM_Base_SetConfig+0xb2>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a25      	ldr	r2, [pc, #148]	; (8003518 <TIM_Base_SetConfig+0x134>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d007      	beq.n	8003496 <TIM_Base_SetConfig+0xb2>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a24      	ldr	r2, [pc, #144]	; (800351c <TIM_Base_SetConfig+0x138>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d003      	beq.n	8003496 <TIM_Base_SetConfig+0xb2>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a23      	ldr	r2, [pc, #140]	; (8003520 <TIM_Base_SetConfig+0x13c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d108      	bne.n	80034a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800349c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a0a      	ldr	r2, [pc, #40]	; (80034f8 <TIM_Base_SetConfig+0x114>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d003      	beq.n	80034dc <TIM_Base_SetConfig+0xf8>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a0c      	ldr	r2, [pc, #48]	; (8003508 <TIM_Base_SetConfig+0x124>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d103      	bne.n	80034e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	691a      	ldr	r2, [r3, #16]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	615a      	str	r2, [r3, #20]
}
 80034ea:	bf00      	nop
 80034ec:	3714      	adds	r7, #20
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	40010000 	.word	0x40010000
 80034fc:	40000400 	.word	0x40000400
 8003500:	40000800 	.word	0x40000800
 8003504:	40000c00 	.word	0x40000c00
 8003508:	40010400 	.word	0x40010400
 800350c:	40014000 	.word	0x40014000
 8003510:	40014400 	.word	0x40014400
 8003514:	40014800 	.word	0x40014800
 8003518:	40001800 	.word	0x40001800
 800351c:	40001c00 	.word	0x40001c00
 8003520:	40002000 	.word	0x40002000

08003524 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003524:	b480      	push	{r7}
 8003526:	b087      	sub	sp, #28
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	f023 0201 	bic.w	r2, r3, #1
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800354e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	011b      	lsls	r3, r3, #4
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	4313      	orrs	r3, r2
 8003558:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f023 030a 	bic.w	r3, r3, #10
 8003560:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	4313      	orrs	r3, r2
 8003568:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	621a      	str	r2, [r3, #32]
}
 8003576:	bf00      	nop
 8003578:	371c      	adds	r7, #28
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr

08003582 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003582:	b480      	push	{r7}
 8003584:	b087      	sub	sp, #28
 8003586:	af00      	add	r7, sp, #0
 8003588:	60f8      	str	r0, [r7, #12]
 800358a:	60b9      	str	r1, [r7, #8]
 800358c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	f023 0210 	bic.w	r2, r3, #16
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	031b      	lsls	r3, r3, #12
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	011b      	lsls	r3, r3, #4
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	621a      	str	r2, [r3, #32]
}
 80035d6:	bf00      	nop
 80035d8:	371c      	adds	r7, #28
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b085      	sub	sp, #20
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
 80035ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4313      	orrs	r3, r2
 8003600:	f043 0307 	orr.w	r3, r3, #7
 8003604:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	609a      	str	r2, [r3, #8]
}
 800360c:	bf00      	nop
 800360e:	3714      	adds	r7, #20
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003618:	b480      	push	{r7}
 800361a:	b087      	sub	sp, #28
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
 8003624:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003632:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	021a      	lsls	r2, r3, #8
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	431a      	orrs	r2, r3
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	4313      	orrs	r3, r2
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	4313      	orrs	r3, r2
 8003644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	609a      	str	r2, [r3, #8]
}
 800364c:	bf00      	nop
 800364e:	371c      	adds	r7, #28
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003668:	2b01      	cmp	r3, #1
 800366a:	d101      	bne.n	8003670 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800366c:	2302      	movs	r3, #2
 800366e:	e05a      	b.n	8003726 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2202      	movs	r2, #2
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003696:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	4313      	orrs	r3, r2
 80036a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a21      	ldr	r2, [pc, #132]	; (8003734 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d022      	beq.n	80036fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036bc:	d01d      	beq.n	80036fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a1d      	ldr	r2, [pc, #116]	; (8003738 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d018      	beq.n	80036fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a1b      	ldr	r2, [pc, #108]	; (800373c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d013      	beq.n	80036fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a1a      	ldr	r2, [pc, #104]	; (8003740 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d00e      	beq.n	80036fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a18      	ldr	r2, [pc, #96]	; (8003744 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d009      	beq.n	80036fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a17      	ldr	r2, [pc, #92]	; (8003748 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d004      	beq.n	80036fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a15      	ldr	r2, [pc, #84]	; (800374c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d10c      	bne.n	8003714 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003700:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	4313      	orrs	r3, r2
 800370a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	40010000 	.word	0x40010000
 8003738:	40000400 	.word	0x40000400
 800373c:	40000800 	.word	0x40000800
 8003740:	40000c00 	.word	0x40000c00
 8003744:	40010400 	.word	0x40010400
 8003748:	40014000 	.word	0x40014000
 800374c:	40001800 	.word	0x40001800

08003750 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800377e:	4b8d      	ldr	r3, [pc, #564]	; (80039b4 <MX_LWIP_Init+0x23c>)
 8003780:	22c0      	movs	r2, #192	; 0xc0
 8003782:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8003784:	4b8b      	ldr	r3, [pc, #556]	; (80039b4 <MX_LWIP_Init+0x23c>)
 8003786:	22a8      	movs	r2, #168	; 0xa8
 8003788:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 18;
 800378a:	4b8a      	ldr	r3, [pc, #552]	; (80039b4 <MX_LWIP_Init+0x23c>)
 800378c:	2212      	movs	r2, #18
 800378e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 115;
 8003790:	4b88      	ldr	r3, [pc, #544]	; (80039b4 <MX_LWIP_Init+0x23c>)
 8003792:	2273      	movs	r2, #115	; 0x73
 8003794:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003796:	4b88      	ldr	r3, [pc, #544]	; (80039b8 <MX_LWIP_Init+0x240>)
 8003798:	22ff      	movs	r2, #255	; 0xff
 800379a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800379c:	4b86      	ldr	r3, [pc, #536]	; (80039b8 <MX_LWIP_Init+0x240>)
 800379e:	22ff      	movs	r2, #255	; 0xff
 80037a0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80037a2:	4b85      	ldr	r3, [pc, #532]	; (80039b8 <MX_LWIP_Init+0x240>)
 80037a4:	22ff      	movs	r2, #255	; 0xff
 80037a6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80037a8:	4b83      	ldr	r3, [pc, #524]	; (80039b8 <MX_LWIP_Init+0x240>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80037ae:	4b83      	ldr	r3, [pc, #524]	; (80039bc <MX_LWIP_Init+0x244>)
 80037b0:	22c0      	movs	r2, #192	; 0xc0
 80037b2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80037b4:	4b81      	ldr	r3, [pc, #516]	; (80039bc <MX_LWIP_Init+0x244>)
 80037b6:	22a8      	movs	r2, #168	; 0xa8
 80037b8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 18;
 80037ba:	4b80      	ldr	r3, [pc, #512]	; (80039bc <MX_LWIP_Init+0x244>)
 80037bc:	2212      	movs	r2, #18
 80037be:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80037c0:	4b7e      	ldr	r3, [pc, #504]	; (80039bc <MX_LWIP_Init+0x244>)
 80037c2:	2201      	movs	r2, #1
 80037c4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80037c6:	f000 fcc1 	bl	800414c <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80037ca:	4b7a      	ldr	r3, [pc, #488]	; (80039b4 <MX_LWIP_Init+0x23c>)
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	061a      	lsls	r2, r3, #24
 80037d0:	4b78      	ldr	r3, [pc, #480]	; (80039b4 <MX_LWIP_Init+0x23c>)
 80037d2:	785b      	ldrb	r3, [r3, #1]
 80037d4:	041b      	lsls	r3, r3, #16
 80037d6:	431a      	orrs	r2, r3
 80037d8:	4b76      	ldr	r3, [pc, #472]	; (80039b4 <MX_LWIP_Init+0x23c>)
 80037da:	789b      	ldrb	r3, [r3, #2]
 80037dc:	021b      	lsls	r3, r3, #8
 80037de:	4313      	orrs	r3, r2
 80037e0:	4a74      	ldr	r2, [pc, #464]	; (80039b4 <MX_LWIP_Init+0x23c>)
 80037e2:	78d2      	ldrb	r2, [r2, #3]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	061a      	lsls	r2, r3, #24
 80037e8:	4b72      	ldr	r3, [pc, #456]	; (80039b4 <MX_LWIP_Init+0x23c>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	0619      	lsls	r1, r3, #24
 80037ee:	4b71      	ldr	r3, [pc, #452]	; (80039b4 <MX_LWIP_Init+0x23c>)
 80037f0:	785b      	ldrb	r3, [r3, #1]
 80037f2:	041b      	lsls	r3, r3, #16
 80037f4:	4319      	orrs	r1, r3
 80037f6:	4b6f      	ldr	r3, [pc, #444]	; (80039b4 <MX_LWIP_Init+0x23c>)
 80037f8:	789b      	ldrb	r3, [r3, #2]
 80037fa:	021b      	lsls	r3, r3, #8
 80037fc:	430b      	orrs	r3, r1
 80037fe:	496d      	ldr	r1, [pc, #436]	; (80039b4 <MX_LWIP_Init+0x23c>)
 8003800:	78c9      	ldrb	r1, [r1, #3]
 8003802:	430b      	orrs	r3, r1
 8003804:	021b      	lsls	r3, r3, #8
 8003806:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800380a:	431a      	orrs	r2, r3
 800380c:	4b69      	ldr	r3, [pc, #420]	; (80039b4 <MX_LWIP_Init+0x23c>)
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	0619      	lsls	r1, r3, #24
 8003812:	4b68      	ldr	r3, [pc, #416]	; (80039b4 <MX_LWIP_Init+0x23c>)
 8003814:	785b      	ldrb	r3, [r3, #1]
 8003816:	041b      	lsls	r3, r3, #16
 8003818:	4319      	orrs	r1, r3
 800381a:	4b66      	ldr	r3, [pc, #408]	; (80039b4 <MX_LWIP_Init+0x23c>)
 800381c:	789b      	ldrb	r3, [r3, #2]
 800381e:	021b      	lsls	r3, r3, #8
 8003820:	430b      	orrs	r3, r1
 8003822:	4964      	ldr	r1, [pc, #400]	; (80039b4 <MX_LWIP_Init+0x23c>)
 8003824:	78c9      	ldrb	r1, [r1, #3]
 8003826:	430b      	orrs	r3, r1
 8003828:	0a1b      	lsrs	r3, r3, #8
 800382a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800382e:	431a      	orrs	r2, r3
 8003830:	4b60      	ldr	r3, [pc, #384]	; (80039b4 <MX_LWIP_Init+0x23c>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	0619      	lsls	r1, r3, #24
 8003836:	4b5f      	ldr	r3, [pc, #380]	; (80039b4 <MX_LWIP_Init+0x23c>)
 8003838:	785b      	ldrb	r3, [r3, #1]
 800383a:	041b      	lsls	r3, r3, #16
 800383c:	4319      	orrs	r1, r3
 800383e:	4b5d      	ldr	r3, [pc, #372]	; (80039b4 <MX_LWIP_Init+0x23c>)
 8003840:	789b      	ldrb	r3, [r3, #2]
 8003842:	021b      	lsls	r3, r3, #8
 8003844:	430b      	orrs	r3, r1
 8003846:	495b      	ldr	r1, [pc, #364]	; (80039b4 <MX_LWIP_Init+0x23c>)
 8003848:	78c9      	ldrb	r1, [r1, #3]
 800384a:	430b      	orrs	r3, r1
 800384c:	0e1b      	lsrs	r3, r3, #24
 800384e:	4313      	orrs	r3, r2
 8003850:	4a5b      	ldr	r2, [pc, #364]	; (80039c0 <MX_LWIP_Init+0x248>)
 8003852:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003854:	4b58      	ldr	r3, [pc, #352]	; (80039b8 <MX_LWIP_Init+0x240>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	061a      	lsls	r2, r3, #24
 800385a:	4b57      	ldr	r3, [pc, #348]	; (80039b8 <MX_LWIP_Init+0x240>)
 800385c:	785b      	ldrb	r3, [r3, #1]
 800385e:	041b      	lsls	r3, r3, #16
 8003860:	431a      	orrs	r2, r3
 8003862:	4b55      	ldr	r3, [pc, #340]	; (80039b8 <MX_LWIP_Init+0x240>)
 8003864:	789b      	ldrb	r3, [r3, #2]
 8003866:	021b      	lsls	r3, r3, #8
 8003868:	4313      	orrs	r3, r2
 800386a:	4a53      	ldr	r2, [pc, #332]	; (80039b8 <MX_LWIP_Init+0x240>)
 800386c:	78d2      	ldrb	r2, [r2, #3]
 800386e:	4313      	orrs	r3, r2
 8003870:	061a      	lsls	r2, r3, #24
 8003872:	4b51      	ldr	r3, [pc, #324]	; (80039b8 <MX_LWIP_Init+0x240>)
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	0619      	lsls	r1, r3, #24
 8003878:	4b4f      	ldr	r3, [pc, #316]	; (80039b8 <MX_LWIP_Init+0x240>)
 800387a:	785b      	ldrb	r3, [r3, #1]
 800387c:	041b      	lsls	r3, r3, #16
 800387e:	4319      	orrs	r1, r3
 8003880:	4b4d      	ldr	r3, [pc, #308]	; (80039b8 <MX_LWIP_Init+0x240>)
 8003882:	789b      	ldrb	r3, [r3, #2]
 8003884:	021b      	lsls	r3, r3, #8
 8003886:	430b      	orrs	r3, r1
 8003888:	494b      	ldr	r1, [pc, #300]	; (80039b8 <MX_LWIP_Init+0x240>)
 800388a:	78c9      	ldrb	r1, [r1, #3]
 800388c:	430b      	orrs	r3, r1
 800388e:	021b      	lsls	r3, r3, #8
 8003890:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003894:	431a      	orrs	r2, r3
 8003896:	4b48      	ldr	r3, [pc, #288]	; (80039b8 <MX_LWIP_Init+0x240>)
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	0619      	lsls	r1, r3, #24
 800389c:	4b46      	ldr	r3, [pc, #280]	; (80039b8 <MX_LWIP_Init+0x240>)
 800389e:	785b      	ldrb	r3, [r3, #1]
 80038a0:	041b      	lsls	r3, r3, #16
 80038a2:	4319      	orrs	r1, r3
 80038a4:	4b44      	ldr	r3, [pc, #272]	; (80039b8 <MX_LWIP_Init+0x240>)
 80038a6:	789b      	ldrb	r3, [r3, #2]
 80038a8:	021b      	lsls	r3, r3, #8
 80038aa:	430b      	orrs	r3, r1
 80038ac:	4942      	ldr	r1, [pc, #264]	; (80039b8 <MX_LWIP_Init+0x240>)
 80038ae:	78c9      	ldrb	r1, [r1, #3]
 80038b0:	430b      	orrs	r3, r1
 80038b2:	0a1b      	lsrs	r3, r3, #8
 80038b4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80038b8:	431a      	orrs	r2, r3
 80038ba:	4b3f      	ldr	r3, [pc, #252]	; (80039b8 <MX_LWIP_Init+0x240>)
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	0619      	lsls	r1, r3, #24
 80038c0:	4b3d      	ldr	r3, [pc, #244]	; (80039b8 <MX_LWIP_Init+0x240>)
 80038c2:	785b      	ldrb	r3, [r3, #1]
 80038c4:	041b      	lsls	r3, r3, #16
 80038c6:	4319      	orrs	r1, r3
 80038c8:	4b3b      	ldr	r3, [pc, #236]	; (80039b8 <MX_LWIP_Init+0x240>)
 80038ca:	789b      	ldrb	r3, [r3, #2]
 80038cc:	021b      	lsls	r3, r3, #8
 80038ce:	430b      	orrs	r3, r1
 80038d0:	4939      	ldr	r1, [pc, #228]	; (80039b8 <MX_LWIP_Init+0x240>)
 80038d2:	78c9      	ldrb	r1, [r1, #3]
 80038d4:	430b      	orrs	r3, r1
 80038d6:	0e1b      	lsrs	r3, r3, #24
 80038d8:	4313      	orrs	r3, r2
 80038da:	4a3a      	ldr	r2, [pc, #232]	; (80039c4 <MX_LWIP_Init+0x24c>)
 80038dc:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80038de:	4b37      	ldr	r3, [pc, #220]	; (80039bc <MX_LWIP_Init+0x244>)
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	061a      	lsls	r2, r3, #24
 80038e4:	4b35      	ldr	r3, [pc, #212]	; (80039bc <MX_LWIP_Init+0x244>)
 80038e6:	785b      	ldrb	r3, [r3, #1]
 80038e8:	041b      	lsls	r3, r3, #16
 80038ea:	431a      	orrs	r2, r3
 80038ec:	4b33      	ldr	r3, [pc, #204]	; (80039bc <MX_LWIP_Init+0x244>)
 80038ee:	789b      	ldrb	r3, [r3, #2]
 80038f0:	021b      	lsls	r3, r3, #8
 80038f2:	4313      	orrs	r3, r2
 80038f4:	4a31      	ldr	r2, [pc, #196]	; (80039bc <MX_LWIP_Init+0x244>)
 80038f6:	78d2      	ldrb	r2, [r2, #3]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	061a      	lsls	r2, r3, #24
 80038fc:	4b2f      	ldr	r3, [pc, #188]	; (80039bc <MX_LWIP_Init+0x244>)
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	0619      	lsls	r1, r3, #24
 8003902:	4b2e      	ldr	r3, [pc, #184]	; (80039bc <MX_LWIP_Init+0x244>)
 8003904:	785b      	ldrb	r3, [r3, #1]
 8003906:	041b      	lsls	r3, r3, #16
 8003908:	4319      	orrs	r1, r3
 800390a:	4b2c      	ldr	r3, [pc, #176]	; (80039bc <MX_LWIP_Init+0x244>)
 800390c:	789b      	ldrb	r3, [r3, #2]
 800390e:	021b      	lsls	r3, r3, #8
 8003910:	430b      	orrs	r3, r1
 8003912:	492a      	ldr	r1, [pc, #168]	; (80039bc <MX_LWIP_Init+0x244>)
 8003914:	78c9      	ldrb	r1, [r1, #3]
 8003916:	430b      	orrs	r3, r1
 8003918:	021b      	lsls	r3, r3, #8
 800391a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800391e:	431a      	orrs	r2, r3
 8003920:	4b26      	ldr	r3, [pc, #152]	; (80039bc <MX_LWIP_Init+0x244>)
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	0619      	lsls	r1, r3, #24
 8003926:	4b25      	ldr	r3, [pc, #148]	; (80039bc <MX_LWIP_Init+0x244>)
 8003928:	785b      	ldrb	r3, [r3, #1]
 800392a:	041b      	lsls	r3, r3, #16
 800392c:	4319      	orrs	r1, r3
 800392e:	4b23      	ldr	r3, [pc, #140]	; (80039bc <MX_LWIP_Init+0x244>)
 8003930:	789b      	ldrb	r3, [r3, #2]
 8003932:	021b      	lsls	r3, r3, #8
 8003934:	430b      	orrs	r3, r1
 8003936:	4921      	ldr	r1, [pc, #132]	; (80039bc <MX_LWIP_Init+0x244>)
 8003938:	78c9      	ldrb	r1, [r1, #3]
 800393a:	430b      	orrs	r3, r1
 800393c:	0a1b      	lsrs	r3, r3, #8
 800393e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003942:	431a      	orrs	r2, r3
 8003944:	4b1d      	ldr	r3, [pc, #116]	; (80039bc <MX_LWIP_Init+0x244>)
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	0619      	lsls	r1, r3, #24
 800394a:	4b1c      	ldr	r3, [pc, #112]	; (80039bc <MX_LWIP_Init+0x244>)
 800394c:	785b      	ldrb	r3, [r3, #1]
 800394e:	041b      	lsls	r3, r3, #16
 8003950:	4319      	orrs	r1, r3
 8003952:	4b1a      	ldr	r3, [pc, #104]	; (80039bc <MX_LWIP_Init+0x244>)
 8003954:	789b      	ldrb	r3, [r3, #2]
 8003956:	021b      	lsls	r3, r3, #8
 8003958:	430b      	orrs	r3, r1
 800395a:	4918      	ldr	r1, [pc, #96]	; (80039bc <MX_LWIP_Init+0x244>)
 800395c:	78c9      	ldrb	r1, [r1, #3]
 800395e:	430b      	orrs	r3, r1
 8003960:	0e1b      	lsrs	r3, r3, #24
 8003962:	4313      	orrs	r3, r2
 8003964:	4a18      	ldr	r2, [pc, #96]	; (80039c8 <MX_LWIP_Init+0x250>)
 8003966:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003968:	4b18      	ldr	r3, [pc, #96]	; (80039cc <MX_LWIP_Init+0x254>)
 800396a:	9302      	str	r3, [sp, #8]
 800396c:	4b18      	ldr	r3, [pc, #96]	; (80039d0 <MX_LWIP_Init+0x258>)
 800396e:	9301      	str	r3, [sp, #4]
 8003970:	2300      	movs	r3, #0
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	4b14      	ldr	r3, [pc, #80]	; (80039c8 <MX_LWIP_Init+0x250>)
 8003976:	4a13      	ldr	r2, [pc, #76]	; (80039c4 <MX_LWIP_Init+0x24c>)
 8003978:	4911      	ldr	r1, [pc, #68]	; (80039c0 <MX_LWIP_Init+0x248>)
 800397a:	4816      	ldr	r0, [pc, #88]	; (80039d4 <MX_LWIP_Init+0x25c>)
 800397c:	f001 f88c 	bl	8004a98 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003980:	4814      	ldr	r0, [pc, #80]	; (80039d4 <MX_LWIP_Init+0x25c>)
 8003982:	f001 fa3b 	bl	8004dfc <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003986:	4b13      	ldr	r3, [pc, #76]	; (80039d4 <MX_LWIP_Init+0x25c>)
 8003988:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800398c:	089b      	lsrs	r3, r3, #2
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b00      	cmp	r3, #0
 8003996:	d003      	beq.n	80039a0 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003998:	480e      	ldr	r0, [pc, #56]	; (80039d4 <MX_LWIP_Init+0x25c>)
 800399a:	f001 fa3f 	bl	8004e1c <netif_set_up>
 800399e:	e002      	b.n	80039a6 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80039a0:	480c      	ldr	r0, [pc, #48]	; (80039d4 <MX_LWIP_Init+0x25c>)
 80039a2:	f001 faa7 	bl	8004ef4 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80039a6:	490c      	ldr	r1, [pc, #48]	; (80039d8 <MX_LWIP_Init+0x260>)
 80039a8:	480a      	ldr	r0, [pc, #40]	; (80039d4 <MX_LWIP_Init+0x25c>)
 80039aa:	f001 fad5 	bl	8004f58 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80039ae:	bf00      	nop
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	20000308 	.word	0x20000308
 80039b8:	20000304 	.word	0x20000304
 80039bc:	200002fc 	.word	0x200002fc
 80039c0:	20000300 	.word	0x20000300
 80039c4:	2000030c 	.word	0x2000030c
 80039c8:	20000310 	.word	0x20000310
 80039cc:	0800dfe5 	.word	0x0800dfe5
 80039d0:	08003f79 	.word	0x08003f79
 80039d4:	20000214 	.word	0x20000214
 80039d8:	08003fe5 	.word	0x08003fe5

080039dc <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b08e      	sub	sp, #56	; 0x38
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039e8:	2200      	movs	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	605a      	str	r2, [r3, #4]
 80039ee:	609a      	str	r2, [r3, #8]
 80039f0:	60da      	str	r2, [r3, #12]
 80039f2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a4a      	ldr	r2, [pc, #296]	; (8003b24 <HAL_ETH_MspInit+0x148>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	f040 808d 	bne.w	8003b1a <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003a00:	2300      	movs	r3, #0
 8003a02:	623b      	str	r3, [r7, #32]
 8003a04:	4b48      	ldr	r3, [pc, #288]	; (8003b28 <HAL_ETH_MspInit+0x14c>)
 8003a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a08:	4a47      	ldr	r2, [pc, #284]	; (8003b28 <HAL_ETH_MspInit+0x14c>)
 8003a0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a0e:	6313      	str	r3, [r2, #48]	; 0x30
 8003a10:	4b45      	ldr	r3, [pc, #276]	; (8003b28 <HAL_ETH_MspInit+0x14c>)
 8003a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a18:	623b      	str	r3, [r7, #32]
 8003a1a:	6a3b      	ldr	r3, [r7, #32]
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	61fb      	str	r3, [r7, #28]
 8003a20:	4b41      	ldr	r3, [pc, #260]	; (8003b28 <HAL_ETH_MspInit+0x14c>)
 8003a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a24:	4a40      	ldr	r2, [pc, #256]	; (8003b28 <HAL_ETH_MspInit+0x14c>)
 8003a26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a2a:	6313      	str	r3, [r2, #48]	; 0x30
 8003a2c:	4b3e      	ldr	r3, [pc, #248]	; (8003b28 <HAL_ETH_MspInit+0x14c>)
 8003a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a34:	61fb      	str	r3, [r7, #28]
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	2300      	movs	r3, #0
 8003a3a:	61bb      	str	r3, [r7, #24]
 8003a3c:	4b3a      	ldr	r3, [pc, #232]	; (8003b28 <HAL_ETH_MspInit+0x14c>)
 8003a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a40:	4a39      	ldr	r2, [pc, #228]	; (8003b28 <HAL_ETH_MspInit+0x14c>)
 8003a42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a46:	6313      	str	r3, [r2, #48]	; 0x30
 8003a48:	4b37      	ldr	r3, [pc, #220]	; (8003b28 <HAL_ETH_MspInit+0x14c>)
 8003a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a50:	61bb      	str	r3, [r7, #24]
 8003a52:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a54:	2300      	movs	r3, #0
 8003a56:	617b      	str	r3, [r7, #20]
 8003a58:	4b33      	ldr	r3, [pc, #204]	; (8003b28 <HAL_ETH_MspInit+0x14c>)
 8003a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5c:	4a32      	ldr	r2, [pc, #200]	; (8003b28 <HAL_ETH_MspInit+0x14c>)
 8003a5e:	f043 0304 	orr.w	r3, r3, #4
 8003a62:	6313      	str	r3, [r2, #48]	; 0x30
 8003a64:	4b30      	ldr	r3, [pc, #192]	; (8003b28 <HAL_ETH_MspInit+0x14c>)
 8003a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	617b      	str	r3, [r7, #20]
 8003a6e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a70:	2300      	movs	r3, #0
 8003a72:	613b      	str	r3, [r7, #16]
 8003a74:	4b2c      	ldr	r3, [pc, #176]	; (8003b28 <HAL_ETH_MspInit+0x14c>)
 8003a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a78:	4a2b      	ldr	r2, [pc, #172]	; (8003b28 <HAL_ETH_MspInit+0x14c>)
 8003a7a:	f043 0301 	orr.w	r3, r3, #1
 8003a7e:	6313      	str	r3, [r2, #48]	; 0x30
 8003a80:	4b29      	ldr	r3, [pc, #164]	; (8003b28 <HAL_ETH_MspInit+0x14c>)
 8003a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	613b      	str	r3, [r7, #16]
 8003a8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	60fb      	str	r3, [r7, #12]
 8003a90:	4b25      	ldr	r3, [pc, #148]	; (8003b28 <HAL_ETH_MspInit+0x14c>)
 8003a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a94:	4a24      	ldr	r2, [pc, #144]	; (8003b28 <HAL_ETH_MspInit+0x14c>)
 8003a96:	f043 0302 	orr.w	r3, r3, #2
 8003a9a:	6313      	str	r3, [r2, #48]	; 0x30
 8003a9c:	4b22      	ldr	r3, [pc, #136]	; (8003b28 <HAL_ETH_MspInit+0x14c>)
 8003a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	60fb      	str	r3, [r7, #12]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003aa8:	2332      	movs	r3, #50	; 0x32
 8003aaa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aac:	2302      	movs	r3, #2
 8003aae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003ab8:	230b      	movs	r3, #11
 8003aba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	481a      	ldr	r0, [pc, #104]	; (8003b2c <HAL_ETH_MspInit+0x150>)
 8003ac4:	f7fe fbee 	bl	80022a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003ac8:	2386      	movs	r3, #134	; 0x86
 8003aca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003acc:	2302      	movs	r3, #2
 8003ace:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003ad8:	230b      	movs	r3, #11
 8003ada:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4813      	ldr	r0, [pc, #76]	; (8003b30 <HAL_ETH_MspInit+0x154>)
 8003ae4:	f7fe fbde 	bl	80022a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8003ae8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003aec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aee:	2302      	movs	r3, #2
 8003af0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af2:	2300      	movs	r3, #0
 8003af4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003af6:	2303      	movs	r3, #3
 8003af8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003afa:	230b      	movs	r3, #11
 8003afc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b02:	4619      	mov	r1, r3
 8003b04:	480b      	ldr	r0, [pc, #44]	; (8003b34 <HAL_ETH_MspInit+0x158>)
 8003b06:	f7fe fbcd 	bl	80022a4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	203d      	movs	r0, #61	; 0x3d
 8003b10:	f7fd f9e5 	bl	8000ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8003b14:	203d      	movs	r0, #61	; 0x3d
 8003b16:	f7fd f9fe 	bl	8000f16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003b1a:	bf00      	nop
 8003b1c:	3738      	adds	r7, #56	; 0x38
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40028000 	.word	0x40028000
 8003b28:	40023800 	.word	0x40023800
 8003b2c:	40020800 	.word	0x40020800
 8003b30:	40020000 	.word	0x40020000
 8003b34:	40020400 	.word	0x40020400

08003b38 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003b40:	2300      	movs	r3, #0
 8003b42:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003b44:	4b4d      	ldr	r3, [pc, #308]	; (8003c7c <low_level_init+0x144>)
 8003b46:	4a4e      	ldr	r2, [pc, #312]	; (8003c80 <low_level_init+0x148>)
 8003b48:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8003b4a:	4b4c      	ldr	r3, [pc, #304]	; (8003c7c <low_level_init+0x144>)
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8003b50:	4b4a      	ldr	r3, [pc, #296]	; (8003c7c <low_level_init+0x144>)
 8003b52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b56:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003b58:	4b48      	ldr	r3, [pc, #288]	; (8003c7c <low_level_init+0x144>)
 8003b5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b5e:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8003b60:	4b46      	ldr	r3, [pc, #280]	; (8003c7c <low_level_init+0x144>)
 8003b62:	2201      	movs	r2, #1
 8003b64:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8003b66:	2300      	movs	r3, #0
 8003b68:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8003b6a:	2380      	movs	r3, #128	; 0x80
 8003b6c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8003b6e:	23e1      	movs	r3, #225	; 0xe1
 8003b70:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8003b72:	2300      	movs	r3, #0
 8003b74:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8003b76:	2300      	movs	r3, #0
 8003b78:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8003b7e:	4a3f      	ldr	r2, [pc, #252]	; (8003c7c <low_level_init+0x144>)
 8003b80:	f107 0308 	add.w	r3, r7, #8
 8003b84:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8003b86:	4b3d      	ldr	r3, [pc, #244]	; (8003c7c <low_level_init+0x144>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8003b8c:	4b3b      	ldr	r3, [pc, #236]	; (8003c7c <low_level_init+0x144>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8003b92:	4b3a      	ldr	r3, [pc, #232]	; (8003c7c <low_level_init+0x144>)
 8003b94:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003b98:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003b9a:	4838      	ldr	r0, [pc, #224]	; (8003c7c <low_level_init+0x144>)
 8003b9c:	f7fd f9d6 	bl	8000f4c <HAL_ETH_Init>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8003ba4:	7dfb      	ldrb	r3, [r7, #23]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d108      	bne.n	8003bbc <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003bb0:	f043 0304 	orr.w	r3, r3, #4
 8003bb4:	b2da      	uxtb	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8003bbc:	2304      	movs	r3, #4
 8003bbe:	4a31      	ldr	r2, [pc, #196]	; (8003c84 <low_level_init+0x14c>)
 8003bc0:	4931      	ldr	r1, [pc, #196]	; (8003c88 <low_level_init+0x150>)
 8003bc2:	482e      	ldr	r0, [pc, #184]	; (8003c7c <low_level_init+0x144>)
 8003bc4:	f7fd fb5e 	bl	8001284 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8003bc8:	2304      	movs	r3, #4
 8003bca:	4a30      	ldr	r2, [pc, #192]	; (8003c8c <low_level_init+0x154>)
 8003bcc:	4930      	ldr	r1, [pc, #192]	; (8003c90 <low_level_init+0x158>)
 8003bce:	482b      	ldr	r0, [pc, #172]	; (8003c7c <low_level_init+0x144>)
 8003bd0:	f7fd fbc1 	bl	8001356 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2206      	movs	r2, #6
 8003bd8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003bdc:	4b27      	ldr	r3, [pc, #156]	; (8003c7c <low_level_init+0x144>)
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	781a      	ldrb	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003be8:	4b24      	ldr	r3, [pc, #144]	; (8003c7c <low_level_init+0x144>)
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	785a      	ldrb	r2, [r3, #1]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003bf4:	4b21      	ldr	r3, [pc, #132]	; (8003c7c <low_level_init+0x144>)
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	789a      	ldrb	r2, [r3, #2]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003c00:	4b1e      	ldr	r3, [pc, #120]	; (8003c7c <low_level_init+0x144>)
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	78da      	ldrb	r2, [r3, #3]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003c0c:	4b1b      	ldr	r3, [pc, #108]	; (8003c7c <low_level_init+0x144>)
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	791a      	ldrb	r2, [r3, #4]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003c18:	4b18      	ldr	r3, [pc, #96]	; (8003c7c <low_level_init+0x144>)
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	795a      	ldrb	r2, [r3, #5]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003c2a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003c32:	f043 030a 	orr.w	r3, r3, #10
 8003c36:	b2da      	uxtb	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8003c3e:	480f      	ldr	r0, [pc, #60]	; (8003c7c <low_level_init+0x144>)
 8003c40:	f7fd feb7 	bl	80019b2 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8003c44:	f107 0310 	add.w	r3, r7, #16
 8003c48:	461a      	mov	r2, r3
 8003c4a:	211d      	movs	r1, #29
 8003c4c:	480b      	ldr	r0, [pc, #44]	; (8003c7c <low_level_init+0x144>)
 8003c4e:	f7fd fde2 	bl	8001816 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	f043 030b 	orr.w	r3, r3, #11
 8003c58:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	211d      	movs	r1, #29
 8003c60:	4806      	ldr	r0, [pc, #24]	; (8003c7c <low_level_init+0x144>)
 8003c62:	f7fd fe40 	bl	80018e6 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8003c66:	f107 0310 	add.w	r3, r7, #16
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	211d      	movs	r1, #29
 8003c6e:	4803      	ldr	r0, [pc, #12]	; (8003c7c <low_level_init+0x144>)
 8003c70:	f7fd fdd1 	bl	8001816 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003c74:	bf00      	nop
 8003c76:	3718      	adds	r7, #24
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	20001be4 	.word	0x20001be4
 8003c80:	40028000 	.word	0x40028000
 8003c84:	20001c2c 	.word	0x20001c2c
 8003c88:	20000314 	.word	0x20000314
 8003c8c:	20000394 	.word	0x20000394
 8003c90:	20001b64 	.word	0x20001b64

08003c94 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b08a      	sub	sp, #40	; 0x28
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8003c9e:	4b4b      	ldr	r3, [pc, #300]	; (8003dcc <low_level_output+0x138>)
 8003ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8003caa:	2300      	movs	r3, #0
 8003cac:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8003cb6:	4b45      	ldr	r3, [pc, #276]	; (8003dcc <low_level_output+0x138>)
 8003cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cba:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	623b      	str	r3, [r7, #32]
 8003cc4:	e05a      	b.n	8003d7c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	da03      	bge.n	8003cd6 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8003cce:	23f8      	movs	r3, #248	; 0xf8
 8003cd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8003cd4:	e05c      	b.n	8003d90 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8003cd6:	6a3b      	ldr	r3, [r7, #32]
 8003cd8:	895b      	ldrh	r3, [r3, #10]
 8003cda:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003ce0:	e02f      	b.n	8003d42 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8003ce2:	69fa      	ldr	r2, [r7, #28]
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	18d0      	adds	r0, r2, r3
 8003ce8:	6a3b      	ldr	r3, [r7, #32]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	18d1      	adds	r1, r2, r3
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8003cf6:	3304      	adds	r3, #4
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	f00a fa7b 	bl	800e1f4 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	da03      	bge.n	8003d14 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8003d0c:	23f8      	movs	r3, #248	; 0xf8
 8003d0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8003d12:	e03d      	b.n	8003d90 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4413      	add	r3, r2
 8003d20:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003d24:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8003d26:	68ba      	ldr	r2, [r7, #8]
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003d30:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003d3c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	4413      	add	r3, r2
 8003d48:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d8c8      	bhi.n	8003ce2 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8003d50:	69fa      	ldr	r2, [r7, #28]
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	18d0      	adds	r0, r2, r3
 8003d56:	6a3b      	ldr	r3, [r7, #32]
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	4619      	mov	r1, r3
 8003d62:	f00a fa47 	bl	800e1f4 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	4413      	add	r3, r2
 8003d74:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8003d76:	6a3b      	ldr	r3, [r7, #32]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	623b      	str	r3, [r7, #32]
 8003d7c:	6a3b      	ldr	r3, [r7, #32]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1a1      	bne.n	8003cc6 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8003d82:	6979      	ldr	r1, [r7, #20]
 8003d84:	4811      	ldr	r0, [pc, #68]	; (8003dcc <low_level_output+0x138>)
 8003d86:	f7fd fb53 	bl	8001430 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003d90:	4b0e      	ldr	r3, [pc, #56]	; (8003dcc <low_level_output+0x138>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d98:	3314      	adds	r3, #20
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0320 	and.w	r3, r3, #32
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00d      	beq.n	8003dc0 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8003da4:	4b09      	ldr	r3, [pc, #36]	; (8003dcc <low_level_output+0x138>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dac:	3314      	adds	r3, #20
 8003dae:	2220      	movs	r2, #32
 8003db0:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8003db2:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <low_level_output+0x138>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dba:	3304      	adds	r3, #4
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8003dc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3728      	adds	r7, #40	; 0x28
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	20001be4 	.word	0x20001be4

08003dd0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b08c      	sub	sp, #48	; 0x30
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8003de0:	2300      	movs	r3, #0
 8003de2:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8003de4:	2300      	movs	r3, #0
 8003de6:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8003de8:	2300      	movs	r3, #0
 8003dea:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8003dec:	2300      	movs	r3, #0
 8003dee:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8003df0:	2300      	movs	r3, #0
 8003df2:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8003df4:	484f      	ldr	r0, [pc, #316]	; (8003f34 <low_level_input+0x164>)
 8003df6:	f7fd fc05 	bl	8001604 <HAL_ETH_GetReceivedFrame>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <low_level_input+0x34>

    return NULL;
 8003e00:	2300      	movs	r3, #0
 8003e02:	e092      	b.n	8003f2a <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8003e04:	4b4b      	ldr	r3, [pc, #300]	; (8003f34 <low_level_input+0x164>)
 8003e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e08:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8003e0a:	4b4a      	ldr	r3, [pc, #296]	; (8003f34 <low_level_input+0x164>)
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8003e10:	89fb      	ldrh	r3, [r7, #14]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d007      	beq.n	8003e26 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8003e16:	89fb      	ldrh	r3, [r7, #14]
 8003e18:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	2000      	movs	r0, #0
 8003e20:	f001 f936 	bl	8005090 <pbuf_alloc>
 8003e24:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8003e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d04b      	beq.n	8003ec4 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003e2c:	4b41      	ldr	r3, [pc, #260]	; (8003f34 <low_level_input+0x164>)
 8003e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e30:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8003e32:	2300      	movs	r3, #0
 8003e34:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e38:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e3a:	e040      	b.n	8003ebe <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8003e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3e:	895b      	ldrh	r3, [r3, #10]
 8003e40:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8003e42:	2300      	movs	r3, #0
 8003e44:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003e46:	e021      	b.n	8003e8c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4a:	685a      	ldr	r2, [r3, #4]
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	18d0      	adds	r0, r2, r3
 8003e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	18d1      	adds	r1, r2, r3
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	461a      	mov	r2, r3
 8003e60:	f00a f9c8 	bl	800e1f4 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003e64:	6a3b      	ldr	r3, [r7, #32]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8003e6a:	6a3b      	ldr	r3, [r7, #32]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8003e70:	69fa      	ldr	r2, [r7, #28]
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	4413      	add	r3, r2
 8003e76:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003e7a:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003e86:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	4413      	add	r3, r2
 8003e92:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d8d6      	bhi.n	8003e48 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8003e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	18d0      	adds	r0, r2, r3
 8003ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	4619      	mov	r1, r3
 8003eac:	f00a f9a2 	bl	800e1f4 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003eb0:	69fa      	ldr	r2, [r7, #28]
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1bb      	bne.n	8003e3c <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003ec4:	4b1b      	ldr	r3, [pc, #108]	; (8003f34 <low_level_input+0x164>)
 8003ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec8:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003eca:	2300      	movs	r3, #0
 8003ecc:	613b      	str	r3, [r7, #16]
 8003ece:	e00b      	b.n	8003ee8 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8003ed0:	6a3b      	ldr	r3, [r7, #32]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003ed8:	6a3b      	ldr	r3, [r7, #32]
 8003eda:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003edc:	6a3b      	ldr	r3, [r7, #32]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	613b      	str	r3, [r7, #16]
 8003ee8:	4b12      	ldr	r3, [pc, #72]	; (8003f34 <low_level_input+0x164>)
 8003eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d3ee      	bcc.n	8003ed0 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8003ef2:	4b10      	ldr	r3, [pc, #64]	; (8003f34 <low_level_input+0x164>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8003ef8:	4b0e      	ldr	r3, [pc, #56]	; (8003f34 <low_level_input+0x164>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f00:	3314      	adds	r3, #20
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00d      	beq.n	8003f28 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8003f0c:	4b09      	ldr	r3, [pc, #36]	; (8003f34 <low_level_input+0x164>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f14:	3314      	adds	r3, #20
 8003f16:	2280      	movs	r2, #128	; 0x80
 8003f18:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8003f1a:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <low_level_input+0x164>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f22:	3308      	adds	r3, #8
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]
  }
  return p;
 8003f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3730      	adds	r7, #48	; 0x30
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	20001be4 	.word	0x20001be4

08003f38 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f7ff ff45 	bl	8003dd0 <low_level_input>
 8003f46:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d010      	beq.n	8003f70 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	6879      	ldr	r1, [r7, #4]
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	4798      	blx	r3
 8003f58:	4603      	mov	r3, r0
 8003f5a:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8003f5c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d006      	beq.n	8003f72 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f001 fb77 	bl	8005658 <pbuf_free>
    p = NULL;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	60fb      	str	r3, [r7, #12]
 8003f6e:	e000      	b.n	8003f72 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8003f70:	bf00      	nop
  }
}
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d106      	bne.n	8003f94 <ethernetif_init+0x1c>
 8003f86:	4b0e      	ldr	r3, [pc, #56]	; (8003fc0 <ethernetif_init+0x48>)
 8003f88:	f240 220e 	movw	r2, #526	; 0x20e
 8003f8c:	490d      	ldr	r1, [pc, #52]	; (8003fc4 <ethernetif_init+0x4c>)
 8003f8e:	480e      	ldr	r0, [pc, #56]	; (8003fc8 <ethernetif_init+0x50>)
 8003f90:	f00a f960 	bl	800e254 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2273      	movs	r2, #115	; 0x73
 8003f98:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2274      	movs	r2, #116	; 0x74
 8003fa0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a09      	ldr	r2, [pc, #36]	; (8003fcc <ethernetif_init+0x54>)
 8003fa8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a08      	ldr	r2, [pc, #32]	; (8003fd0 <ethernetif_init+0x58>)
 8003fae:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f7ff fdc1 	bl	8003b38 <low_level_init>

  return ERR_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	0800f648 	.word	0x0800f648
 8003fc4:	0800f664 	.word	0x0800f664
 8003fc8:	0800f674 	.word	0x0800f674
 8003fcc:	0800c4a9 	.word	0x0800c4a9
 8003fd0:	08003c95 	.word	0x08003c95

08003fd4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003fd8:	f7fc fe76 	bl	8000cc8 <HAL_GetTick>
 8003fdc:	4603      	mov	r3, r0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	bd80      	pop	{r7, pc}
	...

08003fe4 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8003fec:	2300      	movs	r3, #0
 8003fee:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003ffa:	089b      	lsrs	r3, r3, #2
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d05d      	beq.n	80040c2 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004006:	4b34      	ldr	r3, [pc, #208]	; (80040d8 <ethernetif_update_config+0xf4>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d03f      	beq.n	800408e <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800400e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004012:	2100      	movs	r1, #0
 8004014:	4830      	ldr	r0, [pc, #192]	; (80040d8 <ethernetif_update_config+0xf4>)
 8004016:	f7fd fc66 	bl	80018e6 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800401a:	f7fc fe55 	bl	8000cc8 <HAL_GetTick>
 800401e:	4603      	mov	r3, r0
 8004020:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004022:	f107 0308 	add.w	r3, r7, #8
 8004026:	461a      	mov	r2, r3
 8004028:	2101      	movs	r1, #1
 800402a:	482b      	ldr	r0, [pc, #172]	; (80040d8 <ethernetif_update_config+0xf4>)
 800402c:	f7fd fbf3 	bl	8001816 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8004030:	f7fc fe4a 	bl	8000cc8 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800403e:	d828      	bhi.n	8004092 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	f003 0320 	and.w	r3, r3, #32
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0eb      	beq.n	8004022 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800404a:	f107 0308 	add.w	r3, r7, #8
 800404e:	461a      	mov	r2, r3
 8004050:	2110      	movs	r1, #16
 8004052:	4821      	ldr	r0, [pc, #132]	; (80040d8 <ethernetif_update_config+0xf4>)
 8004054:	f7fd fbdf 	bl	8001816 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	f003 0304 	and.w	r3, r3, #4
 800405e:	2b00      	cmp	r3, #0
 8004060:	d004      	beq.n	800406c <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004062:	4b1d      	ldr	r3, [pc, #116]	; (80040d8 <ethernetif_update_config+0xf4>)
 8004064:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004068:	60da      	str	r2, [r3, #12]
 800406a:	e002      	b.n	8004072 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800406c:	4b1a      	ldr	r3, [pc, #104]	; (80040d8 <ethernetif_update_config+0xf4>)
 800406e:	2200      	movs	r2, #0
 8004070:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	2b00      	cmp	r3, #0
 800407a:	d003      	beq.n	8004084 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800407c:	4b16      	ldr	r3, [pc, #88]	; (80040d8 <ethernetif_update_config+0xf4>)
 800407e:	2200      	movs	r2, #0
 8004080:	609a      	str	r2, [r3, #8]
 8004082:	e016      	b.n	80040b2 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8004084:	4b14      	ldr	r3, [pc, #80]	; (80040d8 <ethernetif_update_config+0xf4>)
 8004086:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800408a:	609a      	str	r2, [r3, #8]
 800408c:	e011      	b.n	80040b2 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800408e:	bf00      	nop
 8004090:	e000      	b.n	8004094 <ethernetif_update_config+0xb0>
          goto error;
 8004092:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004094:	4b10      	ldr	r3, [pc, #64]	; (80040d8 <ethernetif_update_config+0xf4>)
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	08db      	lsrs	r3, r3, #3
 800409a:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800409c:	4b0e      	ldr	r3, [pc, #56]	; (80040d8 <ethernetif_update_config+0xf4>)
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	085b      	lsrs	r3, r3, #1
 80040a2:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80040a4:	4313      	orrs	r3, r2
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	461a      	mov	r2, r3
 80040aa:	2100      	movs	r1, #0
 80040ac:	480a      	ldr	r0, [pc, #40]	; (80040d8 <ethernetif_update_config+0xf4>)
 80040ae:	f7fd fc1a 	bl	80018e6 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80040b2:	2100      	movs	r1, #0
 80040b4:	4808      	ldr	r0, [pc, #32]	; (80040d8 <ethernetif_update_config+0xf4>)
 80040b6:	f7fd fcdb 	bl	8001a70 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80040ba:	4807      	ldr	r0, [pc, #28]	; (80040d8 <ethernetif_update_config+0xf4>)
 80040bc:	f7fd fc79 	bl	80019b2 <HAL_ETH_Start>
 80040c0:	e002      	b.n	80040c8 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 80040c2:	4805      	ldr	r0, [pc, #20]	; (80040d8 <ethernetif_update_config+0xf4>)
 80040c4:	f7fd fca4 	bl	8001a10 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 f807 	bl	80040dc <ethernetif_notify_conn_changed>
}
 80040ce:	bf00      	nop
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	20001be4 	.word	0x20001be4

080040dc <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	4603      	mov	r3, r0
 80040f8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80040fa:	88fb      	ldrh	r3, [r7, #6]
 80040fc:	021b      	lsls	r3, r3, #8
 80040fe:	b21a      	sxth	r2, r3
 8004100:	88fb      	ldrh	r3, [r7, #6]
 8004102:	0a1b      	lsrs	r3, r3, #8
 8004104:	b29b      	uxth	r3, r3
 8004106:	b21b      	sxth	r3, r3
 8004108:	4313      	orrs	r3, r2
 800410a:	b21b      	sxth	r3, r3
 800410c:	b29b      	uxth	r3, r3
}
 800410e:	4618      	mov	r0, r3
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800411a:	b480      	push	{r7}
 800411c:	b083      	sub	sp, #12
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	061a      	lsls	r2, r3, #24
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	021b      	lsls	r3, r3, #8
 800412a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800412e:	431a      	orrs	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	0a1b      	lsrs	r3, r3, #8
 8004134:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004138:	431a      	orrs	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	0e1b      	lsrs	r3, r3, #24
 800413e:	4313      	orrs	r3, r2
}
 8004140:	4618      	mov	r0, r3
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8004152:	2300      	movs	r3, #0
 8004154:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8004156:	f000 f8d5 	bl	8004304 <mem_init>
  memp_init();
 800415a:	f000 fbdb 	bl	8004914 <memp_init>
  pbuf_init();
  netif_init();
 800415e:	f000 fc93 	bl	8004a88 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8004162:	f007 f84b 	bl	800b1fc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8004166:	f001 fda7 	bl	8005cb8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800416a:	f006 ffbd 	bl	800b0e8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800416e:	bf00      	nop
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
	...

08004178 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	4603      	mov	r3, r0
 8004180:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8004182:	4b05      	ldr	r3, [pc, #20]	; (8004198 <ptr_to_mem+0x20>)
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	88fb      	ldrh	r3, [r7, #6]
 8004188:	4413      	add	r3, r2
}
 800418a:	4618      	mov	r0, r3
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	2000009c 	.word	0x2000009c

0800419c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80041a4:	4b05      	ldr	r3, [pc, #20]	; (80041bc <mem_to_ptr+0x20>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	b29b      	uxth	r3, r3
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	2000009c 	.word	0x2000009c

080041c0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80041c0:	b590      	push	{r4, r7, lr}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80041c8:	4b45      	ldr	r3, [pc, #276]	; (80042e0 <plug_holes+0x120>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d206      	bcs.n	80041e0 <plug_holes+0x20>
 80041d2:	4b44      	ldr	r3, [pc, #272]	; (80042e4 <plug_holes+0x124>)
 80041d4:	f240 12df 	movw	r2, #479	; 0x1df
 80041d8:	4943      	ldr	r1, [pc, #268]	; (80042e8 <plug_holes+0x128>)
 80041da:	4844      	ldr	r0, [pc, #272]	; (80042ec <plug_holes+0x12c>)
 80041dc:	f00a f83a 	bl	800e254 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80041e0:	4b43      	ldr	r3, [pc, #268]	; (80042f0 <plug_holes+0x130>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d306      	bcc.n	80041f8 <plug_holes+0x38>
 80041ea:	4b3e      	ldr	r3, [pc, #248]	; (80042e4 <plug_holes+0x124>)
 80041ec:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80041f0:	4940      	ldr	r1, [pc, #256]	; (80042f4 <plug_holes+0x134>)
 80041f2:	483e      	ldr	r0, [pc, #248]	; (80042ec <plug_holes+0x12c>)
 80041f4:	f00a f82e 	bl	800e254 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	791b      	ldrb	r3, [r3, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d006      	beq.n	800420e <plug_holes+0x4e>
 8004200:	4b38      	ldr	r3, [pc, #224]	; (80042e4 <plug_holes+0x124>)
 8004202:	f240 12e1 	movw	r2, #481	; 0x1e1
 8004206:	493c      	ldr	r1, [pc, #240]	; (80042f8 <plug_holes+0x138>)
 8004208:	4838      	ldr	r0, [pc, #224]	; (80042ec <plug_holes+0x12c>)
 800420a:	f00a f823 	bl	800e254 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	881b      	ldrh	r3, [r3, #0]
 8004212:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004216:	d906      	bls.n	8004226 <plug_holes+0x66>
 8004218:	4b32      	ldr	r3, [pc, #200]	; (80042e4 <plug_holes+0x124>)
 800421a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800421e:	4937      	ldr	r1, [pc, #220]	; (80042fc <plug_holes+0x13c>)
 8004220:	4832      	ldr	r0, [pc, #200]	; (80042ec <plug_holes+0x12c>)
 8004222:	f00a f817 	bl	800e254 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	881b      	ldrh	r3, [r3, #0]
 800422a:	4618      	mov	r0, r3
 800422c:	f7ff ffa4 	bl	8004178 <ptr_to_mem>
 8004230:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	429a      	cmp	r2, r3
 8004238:	d024      	beq.n	8004284 <plug_holes+0xc4>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	791b      	ldrb	r3, [r3, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d120      	bne.n	8004284 <plug_holes+0xc4>
 8004242:	4b2b      	ldr	r3, [pc, #172]	; (80042f0 <plug_holes+0x130>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	429a      	cmp	r2, r3
 800424a:	d01b      	beq.n	8004284 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800424c:	4b2c      	ldr	r3, [pc, #176]	; (8004300 <plug_holes+0x140>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	429a      	cmp	r2, r3
 8004254:	d102      	bne.n	800425c <plug_holes+0x9c>
      lfree = mem;
 8004256:	4a2a      	ldr	r2, [pc, #168]	; (8004300 <plug_holes+0x140>)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	881a      	ldrh	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	881b      	ldrh	r3, [r3, #0]
 8004268:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800426c:	d00a      	beq.n	8004284 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	881b      	ldrh	r3, [r3, #0]
 8004272:	4618      	mov	r0, r3
 8004274:	f7ff ff80 	bl	8004178 <ptr_to_mem>
 8004278:	4604      	mov	r4, r0
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7ff ff8e 	bl	800419c <mem_to_ptr>
 8004280:	4603      	mov	r3, r0
 8004282:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	885b      	ldrh	r3, [r3, #2]
 8004288:	4618      	mov	r0, r3
 800428a:	f7ff ff75 	bl	8004178 <ptr_to_mem>
 800428e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004290:	68ba      	ldr	r2, [r7, #8]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	429a      	cmp	r2, r3
 8004296:	d01f      	beq.n	80042d8 <plug_holes+0x118>
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	791b      	ldrb	r3, [r3, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d11b      	bne.n	80042d8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80042a0:	4b17      	ldr	r3, [pc, #92]	; (8004300 <plug_holes+0x140>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d102      	bne.n	80042b0 <plug_holes+0xf0>
      lfree = pmem;
 80042aa:	4a15      	ldr	r2, [pc, #84]	; (8004300 <plug_holes+0x140>)
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	881a      	ldrh	r2, [r3, #0]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	881b      	ldrh	r3, [r3, #0]
 80042bc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80042c0:	d00a      	beq.n	80042d8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	881b      	ldrh	r3, [r3, #0]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7ff ff56 	bl	8004178 <ptr_to_mem>
 80042cc:	4604      	mov	r4, r0
 80042ce:	68b8      	ldr	r0, [r7, #8]
 80042d0:	f7ff ff64 	bl	800419c <mem_to_ptr>
 80042d4:	4603      	mov	r3, r0
 80042d6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80042d8:	bf00      	nop
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd90      	pop	{r4, r7, pc}
 80042e0:	2000009c 	.word	0x2000009c
 80042e4:	0800f69c 	.word	0x0800f69c
 80042e8:	0800f6cc 	.word	0x0800f6cc
 80042ec:	0800f6e4 	.word	0x0800f6e4
 80042f0:	200000a0 	.word	0x200000a0
 80042f4:	0800f70c 	.word	0x0800f70c
 80042f8:	0800f728 	.word	0x0800f728
 80042fc:	0800f744 	.word	0x0800f744
 8004300:	200000a4 	.word	0x200000a4

08004304 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800430a:	4b18      	ldr	r3, [pc, #96]	; (800436c <mem_init+0x68>)
 800430c:	3303      	adds	r3, #3
 800430e:	f023 0303 	bic.w	r3, r3, #3
 8004312:	461a      	mov	r2, r3
 8004314:	4b16      	ldr	r3, [pc, #88]	; (8004370 <mem_init+0x6c>)
 8004316:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004318:	4b15      	ldr	r3, [pc, #84]	; (8004370 <mem_init+0x6c>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8004324:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8004332:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8004336:	f7ff ff1f 	bl	8004178 <ptr_to_mem>
 800433a:	4603      	mov	r3, r0
 800433c:	4a0d      	ldr	r2, [pc, #52]	; (8004374 <mem_init+0x70>)
 800433e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8004340:	4b0c      	ldr	r3, [pc, #48]	; (8004374 <mem_init+0x70>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2201      	movs	r2, #1
 8004346:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004348:	4b0a      	ldr	r3, [pc, #40]	; (8004374 <mem_init+0x70>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8004350:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004352:	4b08      	ldr	r3, [pc, #32]	; (8004374 <mem_init+0x70>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800435a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800435c:	4b04      	ldr	r3, [pc, #16]	; (8004370 <mem_init+0x6c>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a05      	ldr	r2, [pc, #20]	; (8004378 <mem_init+0x74>)
 8004362:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004364:	bf00      	nop
 8004366:	3708      	adds	r7, #8
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	20003414 	.word	0x20003414
 8004370:	2000009c 	.word	0x2000009c
 8004374:	200000a0 	.word	0x200000a0
 8004378:	200000a4 	.word	0x200000a4

0800437c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f7ff ff09 	bl	800419c <mem_to_ptr>
 800438a:	4603      	mov	r3, r0
 800438c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	881b      	ldrh	r3, [r3, #0]
 8004392:	4618      	mov	r0, r3
 8004394:	f7ff fef0 	bl	8004178 <ptr_to_mem>
 8004398:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	885b      	ldrh	r3, [r3, #2]
 800439e:	4618      	mov	r0, r3
 80043a0:	f7ff feea 	bl	8004178 <ptr_to_mem>
 80043a4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	881b      	ldrh	r3, [r3, #0]
 80043aa:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80043ae:	d818      	bhi.n	80043e2 <mem_link_valid+0x66>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	885b      	ldrh	r3, [r3, #2]
 80043b4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80043b8:	d813      	bhi.n	80043e2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80043be:	8afa      	ldrh	r2, [r7, #22]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d004      	beq.n	80043ce <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	881b      	ldrh	r3, [r3, #0]
 80043c8:	8afa      	ldrh	r2, [r7, #22]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d109      	bne.n	80043e2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80043ce:	4b08      	ldr	r3, [pc, #32]	; (80043f0 <mem_link_valid+0x74>)
 80043d0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d006      	beq.n	80043e6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	885b      	ldrh	r3, [r3, #2]
 80043dc:	8afa      	ldrh	r2, [r7, #22]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d001      	beq.n	80043e6 <mem_link_valid+0x6a>
    return 0;
 80043e2:	2300      	movs	r3, #0
 80043e4:	e000      	b.n	80043e8 <mem_link_valid+0x6c>
  }
  return 1;
 80043e6:	2301      	movs	r3, #1
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3718      	adds	r7, #24
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	200000a0 	.word	0x200000a0

080043f4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d04c      	beq.n	800449c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f003 0303 	and.w	r3, r3, #3
 8004408:	2b00      	cmp	r3, #0
 800440a:	d007      	beq.n	800441c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800440c:	4b25      	ldr	r3, [pc, #148]	; (80044a4 <mem_free+0xb0>)
 800440e:	f240 2273 	movw	r2, #627	; 0x273
 8004412:	4925      	ldr	r1, [pc, #148]	; (80044a8 <mem_free+0xb4>)
 8004414:	4825      	ldr	r0, [pc, #148]	; (80044ac <mem_free+0xb8>)
 8004416:	f009 ff1d 	bl	800e254 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800441a:	e040      	b.n	800449e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	3b08      	subs	r3, #8
 8004420:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004422:	4b23      	ldr	r3, [pc, #140]	; (80044b0 <mem_free+0xbc>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	429a      	cmp	r2, r3
 800442a:	d306      	bcc.n	800443a <mem_free+0x46>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f103 020c 	add.w	r2, r3, #12
 8004432:	4b20      	ldr	r3, [pc, #128]	; (80044b4 <mem_free+0xc0>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	429a      	cmp	r2, r3
 8004438:	d907      	bls.n	800444a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800443a:	4b1a      	ldr	r3, [pc, #104]	; (80044a4 <mem_free+0xb0>)
 800443c:	f240 227f 	movw	r2, #639	; 0x27f
 8004440:	491d      	ldr	r1, [pc, #116]	; (80044b8 <mem_free+0xc4>)
 8004442:	481a      	ldr	r0, [pc, #104]	; (80044ac <mem_free+0xb8>)
 8004444:	f009 ff06 	bl	800e254 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004448:	e029      	b.n	800449e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	791b      	ldrb	r3, [r3, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d107      	bne.n	8004462 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8004452:	4b14      	ldr	r3, [pc, #80]	; (80044a4 <mem_free+0xb0>)
 8004454:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8004458:	4918      	ldr	r1, [pc, #96]	; (80044bc <mem_free+0xc8>)
 800445a:	4814      	ldr	r0, [pc, #80]	; (80044ac <mem_free+0xb8>)
 800445c:	f009 fefa 	bl	800e254 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004460:	e01d      	b.n	800449e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f7ff ff8a 	bl	800437c <mem_link_valid>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d107      	bne.n	800447e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800446e:	4b0d      	ldr	r3, [pc, #52]	; (80044a4 <mem_free+0xb0>)
 8004470:	f240 2295 	movw	r2, #661	; 0x295
 8004474:	4912      	ldr	r1, [pc, #72]	; (80044c0 <mem_free+0xcc>)
 8004476:	480d      	ldr	r0, [pc, #52]	; (80044ac <mem_free+0xb8>)
 8004478:	f009 feec 	bl	800e254 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800447c:	e00f      	b.n	800449e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004484:	4b0f      	ldr	r3, [pc, #60]	; (80044c4 <mem_free+0xd0>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	429a      	cmp	r2, r3
 800448c:	d202      	bcs.n	8004494 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800448e:	4a0d      	ldr	r2, [pc, #52]	; (80044c4 <mem_free+0xd0>)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f7ff fe93 	bl	80041c0 <plug_holes>
 800449a:	e000      	b.n	800449e <mem_free+0xaa>
    return;
 800449c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	0800f69c 	.word	0x0800f69c
 80044a8:	0800f770 	.word	0x0800f770
 80044ac:	0800f6e4 	.word	0x0800f6e4
 80044b0:	2000009c 	.word	0x2000009c
 80044b4:	200000a0 	.word	0x200000a0
 80044b8:	0800f794 	.word	0x0800f794
 80044bc:	0800f7b0 	.word	0x0800f7b0
 80044c0:	0800f7d8 	.word	0x0800f7d8
 80044c4:	200000a4 	.word	0x200000a4

080044c8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b088      	sub	sp, #32
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	460b      	mov	r3, r1
 80044d2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80044d4:	887b      	ldrh	r3, [r7, #2]
 80044d6:	3303      	adds	r3, #3
 80044d8:	b29b      	uxth	r3, r3
 80044da:	f023 0303 	bic.w	r3, r3, #3
 80044de:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80044e0:	8bfb      	ldrh	r3, [r7, #30]
 80044e2:	2b0b      	cmp	r3, #11
 80044e4:	d801      	bhi.n	80044ea <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80044e6:	230c      	movs	r3, #12
 80044e8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80044ea:	8bfb      	ldrh	r3, [r7, #30]
 80044ec:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80044f0:	d803      	bhi.n	80044fa <mem_trim+0x32>
 80044f2:	8bfa      	ldrh	r2, [r7, #30]
 80044f4:	887b      	ldrh	r3, [r7, #2]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d201      	bcs.n	80044fe <mem_trim+0x36>
    return NULL;
 80044fa:	2300      	movs	r3, #0
 80044fc:	e0cc      	b.n	8004698 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80044fe:	4b68      	ldr	r3, [pc, #416]	; (80046a0 <mem_trim+0x1d8>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	429a      	cmp	r2, r3
 8004506:	d304      	bcc.n	8004512 <mem_trim+0x4a>
 8004508:	4b66      	ldr	r3, [pc, #408]	; (80046a4 <mem_trim+0x1dc>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	429a      	cmp	r2, r3
 8004510:	d306      	bcc.n	8004520 <mem_trim+0x58>
 8004512:	4b65      	ldr	r3, [pc, #404]	; (80046a8 <mem_trim+0x1e0>)
 8004514:	f240 22d1 	movw	r2, #721	; 0x2d1
 8004518:	4964      	ldr	r1, [pc, #400]	; (80046ac <mem_trim+0x1e4>)
 800451a:	4865      	ldr	r0, [pc, #404]	; (80046b0 <mem_trim+0x1e8>)
 800451c:	f009 fe9a 	bl	800e254 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004520:	4b5f      	ldr	r3, [pc, #380]	; (80046a0 <mem_trim+0x1d8>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	429a      	cmp	r2, r3
 8004528:	d304      	bcc.n	8004534 <mem_trim+0x6c>
 800452a:	4b5e      	ldr	r3, [pc, #376]	; (80046a4 <mem_trim+0x1dc>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	429a      	cmp	r2, r3
 8004532:	d301      	bcc.n	8004538 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	e0af      	b.n	8004698 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	3b08      	subs	r3, #8
 800453c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800453e:	69b8      	ldr	r0, [r7, #24]
 8004540:	f7ff fe2c 	bl	800419c <mem_to_ptr>
 8004544:	4603      	mov	r3, r0
 8004546:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	881a      	ldrh	r2, [r3, #0]
 800454c:	8afb      	ldrh	r3, [r7, #22]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	b29b      	uxth	r3, r3
 8004552:	3b08      	subs	r3, #8
 8004554:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004556:	8bfa      	ldrh	r2, [r7, #30]
 8004558:	8abb      	ldrh	r3, [r7, #20]
 800455a:	429a      	cmp	r2, r3
 800455c:	d906      	bls.n	800456c <mem_trim+0xa4>
 800455e:	4b52      	ldr	r3, [pc, #328]	; (80046a8 <mem_trim+0x1e0>)
 8004560:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8004564:	4953      	ldr	r1, [pc, #332]	; (80046b4 <mem_trim+0x1ec>)
 8004566:	4852      	ldr	r0, [pc, #328]	; (80046b0 <mem_trim+0x1e8>)
 8004568:	f009 fe74 	bl	800e254 <iprintf>
  if (newsize > size) {
 800456c:	8bfa      	ldrh	r2, [r7, #30]
 800456e:	8abb      	ldrh	r3, [r7, #20]
 8004570:	429a      	cmp	r2, r3
 8004572:	d901      	bls.n	8004578 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8004574:	2300      	movs	r3, #0
 8004576:	e08f      	b.n	8004698 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8004578:	8bfa      	ldrh	r2, [r7, #30]
 800457a:	8abb      	ldrh	r3, [r7, #20]
 800457c:	429a      	cmp	r2, r3
 800457e:	d101      	bne.n	8004584 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	e089      	b.n	8004698 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	881b      	ldrh	r3, [r3, #0]
 8004588:	4618      	mov	r0, r3
 800458a:	f7ff fdf5 	bl	8004178 <ptr_to_mem>
 800458e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	791b      	ldrb	r3, [r3, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d13f      	bne.n	8004618 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	881b      	ldrh	r3, [r3, #0]
 800459c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80045a0:	d106      	bne.n	80045b0 <mem_trim+0xe8>
 80045a2:	4b41      	ldr	r3, [pc, #260]	; (80046a8 <mem_trim+0x1e0>)
 80045a4:	f240 22f5 	movw	r2, #757	; 0x2f5
 80045a8:	4943      	ldr	r1, [pc, #268]	; (80046b8 <mem_trim+0x1f0>)
 80045aa:	4841      	ldr	r0, [pc, #260]	; (80046b0 <mem_trim+0x1e8>)
 80045ac:	f009 fe52 	bl	800e254 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	881b      	ldrh	r3, [r3, #0]
 80045b4:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80045b6:	8afa      	ldrh	r2, [r7, #22]
 80045b8:	8bfb      	ldrh	r3, [r7, #30]
 80045ba:	4413      	add	r3, r2
 80045bc:	b29b      	uxth	r3, r3
 80045be:	3308      	adds	r3, #8
 80045c0:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80045c2:	4b3e      	ldr	r3, [pc, #248]	; (80046bc <mem_trim+0x1f4>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d106      	bne.n	80045da <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80045cc:	89fb      	ldrh	r3, [r7, #14]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7ff fdd2 	bl	8004178 <ptr_to_mem>
 80045d4:	4603      	mov	r3, r0
 80045d6:	4a39      	ldr	r2, [pc, #228]	; (80046bc <mem_trim+0x1f4>)
 80045d8:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80045da:	89fb      	ldrh	r3, [r7, #14]
 80045dc:	4618      	mov	r0, r3
 80045de:	f7ff fdcb 	bl	8004178 <ptr_to_mem>
 80045e2:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	2200      	movs	r2, #0
 80045e8:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	89ba      	ldrh	r2, [r7, #12]
 80045ee:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	8afa      	ldrh	r2, [r7, #22]
 80045f4:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	89fa      	ldrh	r2, [r7, #14]
 80045fa:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	881b      	ldrh	r3, [r3, #0]
 8004600:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004604:	d047      	beq.n	8004696 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	881b      	ldrh	r3, [r3, #0]
 800460a:	4618      	mov	r0, r3
 800460c:	f7ff fdb4 	bl	8004178 <ptr_to_mem>
 8004610:	4602      	mov	r2, r0
 8004612:	89fb      	ldrh	r3, [r7, #14]
 8004614:	8053      	strh	r3, [r2, #2]
 8004616:	e03e      	b.n	8004696 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004618:	8bfb      	ldrh	r3, [r7, #30]
 800461a:	f103 0214 	add.w	r2, r3, #20
 800461e:	8abb      	ldrh	r3, [r7, #20]
 8004620:	429a      	cmp	r2, r3
 8004622:	d838      	bhi.n	8004696 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004624:	8afa      	ldrh	r2, [r7, #22]
 8004626:	8bfb      	ldrh	r3, [r7, #30]
 8004628:	4413      	add	r3, r2
 800462a:	b29b      	uxth	r3, r3
 800462c:	3308      	adds	r3, #8
 800462e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	881b      	ldrh	r3, [r3, #0]
 8004634:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004638:	d106      	bne.n	8004648 <mem_trim+0x180>
 800463a:	4b1b      	ldr	r3, [pc, #108]	; (80046a8 <mem_trim+0x1e0>)
 800463c:	f240 3216 	movw	r2, #790	; 0x316
 8004640:	491d      	ldr	r1, [pc, #116]	; (80046b8 <mem_trim+0x1f0>)
 8004642:	481b      	ldr	r0, [pc, #108]	; (80046b0 <mem_trim+0x1e8>)
 8004644:	f009 fe06 	bl	800e254 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8004648:	89fb      	ldrh	r3, [r7, #14]
 800464a:	4618      	mov	r0, r3
 800464c:	f7ff fd94 	bl	8004178 <ptr_to_mem>
 8004650:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8004652:	4b1a      	ldr	r3, [pc, #104]	; (80046bc <mem_trim+0x1f4>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	429a      	cmp	r2, r3
 800465a:	d202      	bcs.n	8004662 <mem_trim+0x19a>
      lfree = mem2;
 800465c:	4a17      	ldr	r2, [pc, #92]	; (80046bc <mem_trim+0x1f4>)
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	2200      	movs	r2, #0
 8004666:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	881a      	ldrh	r2, [r3, #0]
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	8afa      	ldrh	r2, [r7, #22]
 8004674:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	89fa      	ldrh	r2, [r7, #14]
 800467a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	881b      	ldrh	r3, [r3, #0]
 8004680:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004684:	d007      	beq.n	8004696 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	881b      	ldrh	r3, [r3, #0]
 800468a:	4618      	mov	r0, r3
 800468c:	f7ff fd74 	bl	8004178 <ptr_to_mem>
 8004690:	4602      	mov	r2, r0
 8004692:	89fb      	ldrh	r3, [r7, #14]
 8004694:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8004696:	687b      	ldr	r3, [r7, #4]
}
 8004698:	4618      	mov	r0, r3
 800469a:	3720      	adds	r7, #32
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	2000009c 	.word	0x2000009c
 80046a4:	200000a0 	.word	0x200000a0
 80046a8:	0800f69c 	.word	0x0800f69c
 80046ac:	0800f80c 	.word	0x0800f80c
 80046b0:	0800f6e4 	.word	0x0800f6e4
 80046b4:	0800f824 	.word	0x0800f824
 80046b8:	0800f844 	.word	0x0800f844
 80046bc:	200000a4 	.word	0x200000a4

080046c0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b088      	sub	sp, #32
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	4603      	mov	r3, r0
 80046c8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80046ca:	88fb      	ldrh	r3, [r7, #6]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <mem_malloc+0x14>
    return NULL;
 80046d0:	2300      	movs	r3, #0
 80046d2:	e0d9      	b.n	8004888 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80046d4:	88fb      	ldrh	r3, [r7, #6]
 80046d6:	3303      	adds	r3, #3
 80046d8:	b29b      	uxth	r3, r3
 80046da:	f023 0303 	bic.w	r3, r3, #3
 80046de:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80046e0:	8bbb      	ldrh	r3, [r7, #28]
 80046e2:	2b0b      	cmp	r3, #11
 80046e4:	d801      	bhi.n	80046ea <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80046e6:	230c      	movs	r3, #12
 80046e8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80046ea:	8bbb      	ldrh	r3, [r7, #28]
 80046ec:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80046f0:	d803      	bhi.n	80046fa <mem_malloc+0x3a>
 80046f2:	8bba      	ldrh	r2, [r7, #28]
 80046f4:	88fb      	ldrh	r3, [r7, #6]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d201      	bcs.n	80046fe <mem_malloc+0x3e>
    return NULL;
 80046fa:	2300      	movs	r3, #0
 80046fc:	e0c4      	b.n	8004888 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80046fe:	4b64      	ldr	r3, [pc, #400]	; (8004890 <mem_malloc+0x1d0>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4618      	mov	r0, r3
 8004704:	f7ff fd4a 	bl	800419c <mem_to_ptr>
 8004708:	4603      	mov	r3, r0
 800470a:	83fb      	strh	r3, [r7, #30]
 800470c:	e0b4      	b.n	8004878 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800470e:	8bfb      	ldrh	r3, [r7, #30]
 8004710:	4618      	mov	r0, r3
 8004712:	f7ff fd31 	bl	8004178 <ptr_to_mem>
 8004716:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	791b      	ldrb	r3, [r3, #4]
 800471c:	2b00      	cmp	r3, #0
 800471e:	f040 80a4 	bne.w	800486a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	881b      	ldrh	r3, [r3, #0]
 8004726:	461a      	mov	r2, r3
 8004728:	8bfb      	ldrh	r3, [r7, #30]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	f1a3 0208 	sub.w	r2, r3, #8
 8004730:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8004732:	429a      	cmp	r2, r3
 8004734:	f0c0 8099 	bcc.w	800486a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	881b      	ldrh	r3, [r3, #0]
 800473c:	461a      	mov	r2, r3
 800473e:	8bfb      	ldrh	r3, [r7, #30]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	f1a3 0208 	sub.w	r2, r3, #8
 8004746:	8bbb      	ldrh	r3, [r7, #28]
 8004748:	3314      	adds	r3, #20
 800474a:	429a      	cmp	r2, r3
 800474c:	d333      	bcc.n	80047b6 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800474e:	8bfa      	ldrh	r2, [r7, #30]
 8004750:	8bbb      	ldrh	r3, [r7, #28]
 8004752:	4413      	add	r3, r2
 8004754:	b29b      	uxth	r3, r3
 8004756:	3308      	adds	r3, #8
 8004758:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800475a:	8a7b      	ldrh	r3, [r7, #18]
 800475c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004760:	d106      	bne.n	8004770 <mem_malloc+0xb0>
 8004762:	4b4c      	ldr	r3, [pc, #304]	; (8004894 <mem_malloc+0x1d4>)
 8004764:	f240 3287 	movw	r2, #903	; 0x387
 8004768:	494b      	ldr	r1, [pc, #300]	; (8004898 <mem_malloc+0x1d8>)
 800476a:	484c      	ldr	r0, [pc, #304]	; (800489c <mem_malloc+0x1dc>)
 800476c:	f009 fd72 	bl	800e254 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8004770:	8a7b      	ldrh	r3, [r7, #18]
 8004772:	4618      	mov	r0, r3
 8004774:	f7ff fd00 	bl	8004178 <ptr_to_mem>
 8004778:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	881a      	ldrh	r2, [r3, #0]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	8bfa      	ldrh	r2, [r7, #30]
 800478c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	8a7a      	ldrh	r2, [r7, #18]
 8004792:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	2201      	movs	r2, #1
 8004798:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80047a2:	d00b      	beq.n	80047bc <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	881b      	ldrh	r3, [r3, #0]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7ff fce5 	bl	8004178 <ptr_to_mem>
 80047ae:	4602      	mov	r2, r0
 80047b0:	8a7b      	ldrh	r3, [r7, #18]
 80047b2:	8053      	strh	r3, [r2, #2]
 80047b4:	e002      	b.n	80047bc <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	2201      	movs	r2, #1
 80047ba:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80047bc:	4b34      	ldr	r3, [pc, #208]	; (8004890 <mem_malloc+0x1d0>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d127      	bne.n	8004816 <mem_malloc+0x156>
          struct mem *cur = lfree;
 80047c6:	4b32      	ldr	r3, [pc, #200]	; (8004890 <mem_malloc+0x1d0>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80047cc:	e005      	b.n	80047da <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	881b      	ldrh	r3, [r3, #0]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7ff fcd0 	bl	8004178 <ptr_to_mem>
 80047d8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	791b      	ldrb	r3, [r3, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d004      	beq.n	80047ec <mem_malloc+0x12c>
 80047e2:	4b2f      	ldr	r3, [pc, #188]	; (80048a0 <mem_malloc+0x1e0>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	69ba      	ldr	r2, [r7, #24]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d1f0      	bne.n	80047ce <mem_malloc+0x10e>
          }
          lfree = cur;
 80047ec:	4a28      	ldr	r2, [pc, #160]	; (8004890 <mem_malloc+0x1d0>)
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80047f2:	4b27      	ldr	r3, [pc, #156]	; (8004890 <mem_malloc+0x1d0>)
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	4b2a      	ldr	r3, [pc, #168]	; (80048a0 <mem_malloc+0x1e0>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d00b      	beq.n	8004816 <mem_malloc+0x156>
 80047fe:	4b24      	ldr	r3, [pc, #144]	; (8004890 <mem_malloc+0x1d0>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	791b      	ldrb	r3, [r3, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d006      	beq.n	8004816 <mem_malloc+0x156>
 8004808:	4b22      	ldr	r3, [pc, #136]	; (8004894 <mem_malloc+0x1d4>)
 800480a:	f240 32b5 	movw	r2, #949	; 0x3b5
 800480e:	4925      	ldr	r1, [pc, #148]	; (80048a4 <mem_malloc+0x1e4>)
 8004810:	4822      	ldr	r0, [pc, #136]	; (800489c <mem_malloc+0x1dc>)
 8004812:	f009 fd1f 	bl	800e254 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8004816:	8bba      	ldrh	r2, [r7, #28]
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	4413      	add	r3, r2
 800481c:	3308      	adds	r3, #8
 800481e:	4a20      	ldr	r2, [pc, #128]	; (80048a0 <mem_malloc+0x1e0>)
 8004820:	6812      	ldr	r2, [r2, #0]
 8004822:	4293      	cmp	r3, r2
 8004824:	d906      	bls.n	8004834 <mem_malloc+0x174>
 8004826:	4b1b      	ldr	r3, [pc, #108]	; (8004894 <mem_malloc+0x1d4>)
 8004828:	f240 32b9 	movw	r2, #953	; 0x3b9
 800482c:	491e      	ldr	r1, [pc, #120]	; (80048a8 <mem_malloc+0x1e8>)
 800482e:	481b      	ldr	r0, [pc, #108]	; (800489c <mem_malloc+0x1dc>)
 8004830:	f009 fd10 	bl	800e254 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	f003 0303 	and.w	r3, r3, #3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d006      	beq.n	800484c <mem_malloc+0x18c>
 800483e:	4b15      	ldr	r3, [pc, #84]	; (8004894 <mem_malloc+0x1d4>)
 8004840:	f240 32bb 	movw	r2, #955	; 0x3bb
 8004844:	4919      	ldr	r1, [pc, #100]	; (80048ac <mem_malloc+0x1ec>)
 8004846:	4815      	ldr	r0, [pc, #84]	; (800489c <mem_malloc+0x1dc>)
 8004848:	f009 fd04 	bl	800e254 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d006      	beq.n	8004864 <mem_malloc+0x1a4>
 8004856:	4b0f      	ldr	r3, [pc, #60]	; (8004894 <mem_malloc+0x1d4>)
 8004858:	f240 32bd 	movw	r2, #957	; 0x3bd
 800485c:	4914      	ldr	r1, [pc, #80]	; (80048b0 <mem_malloc+0x1f0>)
 800485e:	480f      	ldr	r0, [pc, #60]	; (800489c <mem_malloc+0x1dc>)
 8004860:	f009 fcf8 	bl	800e254 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	3308      	adds	r3, #8
 8004868:	e00e      	b.n	8004888 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800486a:	8bfb      	ldrh	r3, [r7, #30]
 800486c:	4618      	mov	r0, r3
 800486e:	f7ff fc83 	bl	8004178 <ptr_to_mem>
 8004872:	4603      	mov	r3, r0
 8004874:	881b      	ldrh	r3, [r3, #0]
 8004876:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004878:	8bfa      	ldrh	r2, [r7, #30]
 800487a:	8bbb      	ldrh	r3, [r7, #28]
 800487c:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8004880:	429a      	cmp	r2, r3
 8004882:	f4ff af44 	bcc.w	800470e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3720      	adds	r7, #32
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	200000a4 	.word	0x200000a4
 8004894:	0800f69c 	.word	0x0800f69c
 8004898:	0800f844 	.word	0x0800f844
 800489c:	0800f6e4 	.word	0x0800f6e4
 80048a0:	200000a0 	.word	0x200000a0
 80048a4:	0800f858 	.word	0x0800f858
 80048a8:	0800f874 	.word	0x0800f874
 80048ac:	0800f8a4 	.word	0x0800f8a4
 80048b0:	0800f8d4 	.word	0x0800f8d4

080048b4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	2200      	movs	r2, #0
 80048c2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	3303      	adds	r3, #3
 80048ca:	f023 0303 	bic.w	r3, r3, #3
 80048ce:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80048d0:	2300      	movs	r3, #0
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	e011      	b.n	80048fa <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	881b      	ldrh	r3, [r3, #0]
 80048ec:	461a      	mov	r2, r3
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	4413      	add	r3, r2
 80048f2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	3301      	adds	r3, #1
 80048f8:	60fb      	str	r3, [r7, #12]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	885b      	ldrh	r3, [r3, #2]
 80048fe:	461a      	mov	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4293      	cmp	r3, r2
 8004904:	dbe7      	blt.n	80048d6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8004906:	bf00      	nop
 8004908:	bf00      	nop
 800490a:	3714      	adds	r7, #20
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800491a:	2300      	movs	r3, #0
 800491c:	80fb      	strh	r3, [r7, #6]
 800491e:	e009      	b.n	8004934 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8004920:	88fb      	ldrh	r3, [r7, #6]
 8004922:	4a08      	ldr	r2, [pc, #32]	; (8004944 <memp_init+0x30>)
 8004924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004928:	4618      	mov	r0, r3
 800492a:	f7ff ffc3 	bl	80048b4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800492e:	88fb      	ldrh	r3, [r7, #6]
 8004930:	3301      	adds	r3, #1
 8004932:	80fb      	strh	r3, [r7, #6]
 8004934:	88fb      	ldrh	r3, [r7, #6]
 8004936:	2b08      	cmp	r3, #8
 8004938:	d9f2      	bls.n	8004920 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800493a:	bf00      	nop
 800493c:	bf00      	nop
 800493e:	3708      	adds	r7, #8
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	080120a4 	.word	0x080120a4

08004948 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d012      	beq.n	8004984 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	6812      	ldr	r2, [r2, #0]
 8004966:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f003 0303 	and.w	r3, r3, #3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d006      	beq.n	8004980 <do_memp_malloc_pool+0x38>
 8004972:	4b07      	ldr	r3, [pc, #28]	; (8004990 <do_memp_malloc_pool+0x48>)
 8004974:	f44f 728c 	mov.w	r2, #280	; 0x118
 8004978:	4906      	ldr	r1, [pc, #24]	; (8004994 <do_memp_malloc_pool+0x4c>)
 800497a:	4807      	ldr	r0, [pc, #28]	; (8004998 <do_memp_malloc_pool+0x50>)
 800497c:	f009 fc6a 	bl	800e254 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	e000      	b.n	8004986 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	0800f8f8 	.word	0x0800f8f8
 8004994:	0800f928 	.word	0x0800f928
 8004998:	0800f94c 	.word	0x0800f94c

0800499c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	4603      	mov	r3, r0
 80049a4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80049a6:	79fb      	ldrb	r3, [r7, #7]
 80049a8:	2b08      	cmp	r3, #8
 80049aa:	d908      	bls.n	80049be <memp_malloc+0x22>
 80049ac:	4b0a      	ldr	r3, [pc, #40]	; (80049d8 <memp_malloc+0x3c>)
 80049ae:	f240 1257 	movw	r2, #343	; 0x157
 80049b2:	490a      	ldr	r1, [pc, #40]	; (80049dc <memp_malloc+0x40>)
 80049b4:	480a      	ldr	r0, [pc, #40]	; (80049e0 <memp_malloc+0x44>)
 80049b6:	f009 fc4d 	bl	800e254 <iprintf>
 80049ba:	2300      	movs	r3, #0
 80049bc:	e008      	b.n	80049d0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80049be:	79fb      	ldrb	r3, [r7, #7]
 80049c0:	4a08      	ldr	r2, [pc, #32]	; (80049e4 <memp_malloc+0x48>)
 80049c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7ff ffbe 	bl	8004948 <do_memp_malloc_pool>
 80049cc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80049ce:	68fb      	ldr	r3, [r7, #12]
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	0800f8f8 	.word	0x0800f8f8
 80049dc:	0800f988 	.word	0x0800f988
 80049e0:	0800f94c 	.word	0x0800f94c
 80049e4:	080120a4 	.word	0x080120a4

080049e8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	f003 0303 	and.w	r3, r3, #3
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d006      	beq.n	8004a0a <do_memp_free_pool+0x22>
 80049fc:	4b0a      	ldr	r3, [pc, #40]	; (8004a28 <do_memp_free_pool+0x40>)
 80049fe:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8004a02:	490a      	ldr	r1, [pc, #40]	; (8004a2c <do_memp_free_pool+0x44>)
 8004a04:	480a      	ldr	r0, [pc, #40]	; (8004a30 <do_memp_free_pool+0x48>)
 8004a06:	f009 fc25 	bl	800e254 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8004a20:	bf00      	nop
 8004a22:	3710      	adds	r7, #16
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	0800f8f8 	.word	0x0800f8f8
 8004a2c:	0800f9a8 	.word	0x0800f9a8
 8004a30:	0800f94c 	.word	0x0800f94c

08004a34 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	6039      	str	r1, [r7, #0]
 8004a3e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004a40:	79fb      	ldrb	r3, [r7, #7]
 8004a42:	2b08      	cmp	r3, #8
 8004a44:	d907      	bls.n	8004a56 <memp_free+0x22>
 8004a46:	4b0c      	ldr	r3, [pc, #48]	; (8004a78 <memp_free+0x44>)
 8004a48:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8004a4c:	490b      	ldr	r1, [pc, #44]	; (8004a7c <memp_free+0x48>)
 8004a4e:	480c      	ldr	r0, [pc, #48]	; (8004a80 <memp_free+0x4c>)
 8004a50:	f009 fc00 	bl	800e254 <iprintf>
 8004a54:	e00c      	b.n	8004a70 <memp_free+0x3c>

  if (mem == NULL) {
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d008      	beq.n	8004a6e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8004a5c:	79fb      	ldrb	r3, [r7, #7]
 8004a5e:	4a09      	ldr	r2, [pc, #36]	; (8004a84 <memp_free+0x50>)
 8004a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a64:	6839      	ldr	r1, [r7, #0]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7ff ffbe 	bl	80049e8 <do_memp_free_pool>
 8004a6c:	e000      	b.n	8004a70 <memp_free+0x3c>
    return;
 8004a6e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8004a70:	3708      	adds	r7, #8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	0800f8f8 	.word	0x0800f8f8
 8004a7c:	0800f9c8 	.word	0x0800f9c8
 8004a80:	0800f94c 	.word	0x0800f94c
 8004a84:	080120a4 	.word	0x080120a4

08004a88 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8004a8c:	bf00      	nop
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
	...

08004a98 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]
 8004aa4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d108      	bne.n	8004abe <netif_add+0x26>
 8004aac:	4b57      	ldr	r3, [pc, #348]	; (8004c0c <netif_add+0x174>)
 8004aae:	f240 1227 	movw	r2, #295	; 0x127
 8004ab2:	4957      	ldr	r1, [pc, #348]	; (8004c10 <netif_add+0x178>)
 8004ab4:	4857      	ldr	r0, [pc, #348]	; (8004c14 <netif_add+0x17c>)
 8004ab6:	f009 fbcd 	bl	800e254 <iprintf>
 8004aba:	2300      	movs	r3, #0
 8004abc:	e0a2      	b.n	8004c04 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8004abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d108      	bne.n	8004ad6 <netif_add+0x3e>
 8004ac4:	4b51      	ldr	r3, [pc, #324]	; (8004c0c <netif_add+0x174>)
 8004ac6:	f44f 7294 	mov.w	r2, #296	; 0x128
 8004aca:	4953      	ldr	r1, [pc, #332]	; (8004c18 <netif_add+0x180>)
 8004acc:	4851      	ldr	r0, [pc, #324]	; (8004c14 <netif_add+0x17c>)
 8004ace:	f009 fbc1 	bl	800e254 <iprintf>
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	e096      	b.n	8004c04 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d101      	bne.n	8004ae0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8004adc:	4b4f      	ldr	r3, [pc, #316]	; (8004c1c <netif_add+0x184>)
 8004ade:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8004ae6:	4b4d      	ldr	r3, [pc, #308]	; (8004c1c <netif_add+0x184>)
 8004ae8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d101      	bne.n	8004af4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8004af0:	4b4a      	ldr	r3, [pc, #296]	; (8004c1c <netif_add+0x184>)
 8004af2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	4a45      	ldr	r2, [pc, #276]	; (8004c20 <netif_add+0x188>)
 8004b0a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6a3a      	ldr	r2, [r7, #32]
 8004b24:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8004b26:	4b3f      	ldr	r3, [pc, #252]	; (8004c24 <netif_add+0x18c>)
 8004b28:	781a      	ldrb	r2, [r3, #0]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b34:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	68b9      	ldr	r1, [r7, #8]
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f000 f913 	bl	8004d68 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	4798      	blx	r3
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <netif_add+0xba>
    return NULL;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	e058      	b.n	8004c04 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b58:	2bff      	cmp	r3, #255	; 0xff
 8004b5a:	d103      	bne.n	8004b64 <netif_add+0xcc>
        netif->num = 0;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8004b64:	2300      	movs	r3, #0
 8004b66:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004b68:	4b2f      	ldr	r3, [pc, #188]	; (8004c28 <netif_add+0x190>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	617b      	str	r3, [r7, #20]
 8004b6e:	e02b      	b.n	8004bc8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d106      	bne.n	8004b86 <netif_add+0xee>
 8004b78:	4b24      	ldr	r3, [pc, #144]	; (8004c0c <netif_add+0x174>)
 8004b7a:	f240 128b 	movw	r2, #395	; 0x18b
 8004b7e:	492b      	ldr	r1, [pc, #172]	; (8004c2c <netif_add+0x194>)
 8004b80:	4824      	ldr	r0, [pc, #144]	; (8004c14 <netif_add+0x17c>)
 8004b82:	f009 fb67 	bl	800e254 <iprintf>
        num_netifs++;
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	3301      	adds	r3, #1
 8004b8a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	2bff      	cmp	r3, #255	; 0xff
 8004b90:	dd06      	ble.n	8004ba0 <netif_add+0x108>
 8004b92:	4b1e      	ldr	r3, [pc, #120]	; (8004c0c <netif_add+0x174>)
 8004b94:	f240 128d 	movw	r2, #397	; 0x18d
 8004b98:	4925      	ldr	r1, [pc, #148]	; (8004c30 <netif_add+0x198>)
 8004b9a:	481e      	ldr	r0, [pc, #120]	; (8004c14 <netif_add+0x17c>)
 8004b9c:	f009 fb5a 	bl	800e254 <iprintf>
        if (netif2->num == netif->num) {
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d108      	bne.n	8004bc2 <netif_add+0x12a>
          netif->num++;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8004bc0:	e005      	b.n	8004bce <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	617b      	str	r3, [r7, #20]
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1d0      	bne.n	8004b70 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1be      	bne.n	8004b52 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004bda:	2bfe      	cmp	r3, #254	; 0xfe
 8004bdc:	d103      	bne.n	8004be6 <netif_add+0x14e>
    netif_num = 0;
 8004bde:	4b11      	ldr	r3, [pc, #68]	; (8004c24 <netif_add+0x18c>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	701a      	strb	r2, [r3, #0]
 8004be4:	e006      	b.n	8004bf4 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004bec:	3301      	adds	r3, #1
 8004bee:	b2da      	uxtb	r2, r3
 8004bf0:	4b0c      	ldr	r3, [pc, #48]	; (8004c24 <netif_add+0x18c>)
 8004bf2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8004bf4:	4b0c      	ldr	r3, [pc, #48]	; (8004c28 <netif_add+0x190>)
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8004bfc:	4a0a      	ldr	r2, [pc, #40]	; (8004c28 <netif_add+0x190>)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8004c02:	68fb      	ldr	r3, [r7, #12]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3718      	adds	r7, #24
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	0800f9e4 	.word	0x0800f9e4
 8004c10:	0800fa78 	.word	0x0800fa78
 8004c14:	0800fa34 	.word	0x0800fa34
 8004c18:	0800fa94 	.word	0x0800fa94
 8004c1c:	08012108 	.word	0x08012108
 8004c20:	08004f7b 	.word	0x08004f7b
 8004c24:	200000cc 	.word	0x200000cc
 8004c28:	20008af0 	.word	0x20008af0
 8004c2c:	0800fab8 	.word	0x0800fab8
 8004c30:	0800facc 	.word	0x0800facc

08004c34 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8004c3e:	6839      	ldr	r1, [r7, #0]
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f002 fb81 	bl	8007348 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8004c46:	6839      	ldr	r1, [r7, #0]
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f006 ffb1 	bl	800bbb0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8004c4e:	bf00      	nop
 8004c50:	3708      	adds	r7, #8
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
	...

08004c58 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b086      	sub	sp, #24
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d106      	bne.n	8004c78 <netif_do_set_ipaddr+0x20>
 8004c6a:	4b1d      	ldr	r3, [pc, #116]	; (8004ce0 <netif_do_set_ipaddr+0x88>)
 8004c6c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8004c70:	491c      	ldr	r1, [pc, #112]	; (8004ce4 <netif_do_set_ipaddr+0x8c>)
 8004c72:	481d      	ldr	r0, [pc, #116]	; (8004ce8 <netif_do_set_ipaddr+0x90>)
 8004c74:	f009 faee 	bl	800e254 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d106      	bne.n	8004c8c <netif_do_set_ipaddr+0x34>
 8004c7e:	4b18      	ldr	r3, [pc, #96]	; (8004ce0 <netif_do_set_ipaddr+0x88>)
 8004c80:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8004c84:	4917      	ldr	r1, [pc, #92]	; (8004ce4 <netif_do_set_ipaddr+0x8c>)
 8004c86:	4818      	ldr	r0, [pc, #96]	; (8004ce8 <netif_do_set_ipaddr+0x90>)
 8004c88:	f009 fae4 	bl	800e254 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	3304      	adds	r3, #4
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d01c      	beq.n	8004cd4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	3304      	adds	r3, #4
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8004caa:	f107 0314 	add.w	r3, r7, #20
 8004cae:	4619      	mov	r1, r3
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f7ff ffbf 	bl	8004c34 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d002      	beq.n	8004cc2 <netif_do_set_ipaddr+0x6a>
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	e000      	b.n	8004cc4 <netif_do_set_ipaddr+0x6c>
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8004cc8:	2101      	movs	r1, #1
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	f000 f8d2 	bl	8004e74 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e000      	b.n	8004cd6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3718      	adds	r7, #24
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	0800f9e4 	.word	0x0800f9e4
 8004ce4:	0800fafc 	.word	0x0800fafc
 8004ce8:	0800fa34 	.word	0x0800fa34

08004cec <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	3308      	adds	r3, #8
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d00a      	beq.n	8004d1c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d002      	beq.n	8004d12 <netif_do_set_netmask+0x26>
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	e000      	b.n	8004d14 <netif_do_set_netmask+0x28>
 8004d12:	2300      	movs	r3, #0
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e000      	b.n	8004d1e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3714      	adds	r7, #20
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr

08004d2a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b085      	sub	sp, #20
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	60f8      	str	r0, [r7, #12]
 8004d32:	60b9      	str	r1, [r7, #8]
 8004d34:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	330c      	adds	r3, #12
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d00a      	beq.n	8004d5a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d002      	beq.n	8004d50 <netif_do_set_gw+0x26>
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	e000      	b.n	8004d52 <netif_do_set_gw+0x28>
 8004d50:	2300      	movs	r3, #0
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8004d56:	2301      	movs	r3, #1
 8004d58:	e000      	b.n	8004d5c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3714      	adds	r7, #20
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b088      	sub	sp, #32
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
 8004d74:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8004d76:	2300      	movs	r3, #0
 8004d78:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d101      	bne.n	8004d88 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8004d84:	4b1c      	ldr	r3, [pc, #112]	; (8004df8 <netif_set_addr+0x90>)
 8004d86:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8004d8e:	4b1a      	ldr	r3, [pc, #104]	; (8004df8 <netif_set_addr+0x90>)
 8004d90:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8004d98:	4b17      	ldr	r3, [pc, #92]	; (8004df8 <netif_set_addr+0x90>)
 8004d9a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d003      	beq.n	8004daa <netif_set_addr+0x42>
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <netif_set_addr+0x46>
 8004daa:	2301      	movs	r3, #1
 8004dac:	e000      	b.n	8004db0 <netif_set_addr+0x48>
 8004dae:	2300      	movs	r3, #0
 8004db0:	617b      	str	r3, [r7, #20]
  if (remove) {
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d006      	beq.n	8004dc6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004db8:	f107 0310 	add.w	r3, r7, #16
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	68b9      	ldr	r1, [r7, #8]
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f7ff ff49 	bl	8004c58 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8004dc6:	69fa      	ldr	r2, [r7, #28]
 8004dc8:	6879      	ldr	r1, [r7, #4]
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f7ff ff8e 	bl	8004cec <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	6839      	ldr	r1, [r7, #0]
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f7ff ffa8 	bl	8004d2a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d106      	bne.n	8004dee <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004de0:	f107 0310 	add.w	r3, r7, #16
 8004de4:	461a      	mov	r2, r3
 8004de6:	68b9      	ldr	r1, [r7, #8]
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f7ff ff35 	bl	8004c58 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8004dee:	bf00      	nop
 8004df0:	3720      	adds	r7, #32
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	08012108 	.word	0x08012108

08004dfc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8004e04:	4a04      	ldr	r2, [pc, #16]	; (8004e18 <netif_set_default+0x1c>)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8004e0a:	bf00      	nop
 8004e0c:	370c      	adds	r7, #12
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	20008af4 	.word	0x20008af4

08004e1c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d107      	bne.n	8004e3a <netif_set_up+0x1e>
 8004e2a:	4b0f      	ldr	r3, [pc, #60]	; (8004e68 <netif_set_up+0x4c>)
 8004e2c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8004e30:	490e      	ldr	r1, [pc, #56]	; (8004e6c <netif_set_up+0x50>)
 8004e32:	480f      	ldr	r0, [pc, #60]	; (8004e70 <netif_set_up+0x54>)
 8004e34:	f009 fa0e 	bl	800e254 <iprintf>
 8004e38:	e013      	b.n	8004e62 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d10c      	bne.n	8004e62 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004e4e:	f043 0301 	orr.w	r3, r3, #1
 8004e52:	b2da      	uxtb	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8004e5a:	2103      	movs	r1, #3
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 f809 	bl	8004e74 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8004e62:	3708      	adds	r7, #8
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	0800f9e4 	.word	0x0800f9e4
 8004e6c:	0800fb6c 	.word	0x0800fb6c
 8004e70:	0800fa34 	.word	0x0800fa34

08004e74 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d106      	bne.n	8004e94 <netif_issue_reports+0x20>
 8004e86:	4b18      	ldr	r3, [pc, #96]	; (8004ee8 <netif_issue_reports+0x74>)
 8004e88:	f240 326d 	movw	r2, #877	; 0x36d
 8004e8c:	4917      	ldr	r1, [pc, #92]	; (8004eec <netif_issue_reports+0x78>)
 8004e8e:	4818      	ldr	r0, [pc, #96]	; (8004ef0 <netif_issue_reports+0x7c>)
 8004e90:	f009 f9e0 	bl	800e254 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004e9a:	f003 0304 	and.w	r3, r3, #4
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d01e      	beq.n	8004ee0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004ea8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d017      	beq.n	8004ee0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004eb0:	78fb      	ldrb	r3, [r7, #3]
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d013      	beq.n	8004ee2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	3304      	adds	r3, #4
 8004ebe:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00e      	beq.n	8004ee2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004eca:	f003 0308 	and.w	r3, r3, #8
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d007      	beq.n	8004ee2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	3304      	adds	r3, #4
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f007 fdd3 	bl	800ca84 <etharp_request>
 8004ede:	e000      	b.n	8004ee2 <netif_issue_reports+0x6e>
    return;
 8004ee0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8004ee2:	3708      	adds	r7, #8
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	0800f9e4 	.word	0x0800f9e4
 8004eec:	0800fb88 	.word	0x0800fb88
 8004ef0:	0800fa34 	.word	0x0800fa34

08004ef4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d107      	bne.n	8004f12 <netif_set_down+0x1e>
 8004f02:	4b12      	ldr	r3, [pc, #72]	; (8004f4c <netif_set_down+0x58>)
 8004f04:	f240 329b 	movw	r2, #923	; 0x39b
 8004f08:	4911      	ldr	r1, [pc, #68]	; (8004f50 <netif_set_down+0x5c>)
 8004f0a:	4812      	ldr	r0, [pc, #72]	; (8004f54 <netif_set_down+0x60>)
 8004f0c:	f009 f9a2 	bl	800e254 <iprintf>
 8004f10:	e019      	b.n	8004f46 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d012      	beq.n	8004f46 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004f26:	f023 0301 	bic.w	r3, r3, #1
 8004f2a:	b2da      	uxtb	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004f38:	f003 0308 	and.w	r3, r3, #8
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d002      	beq.n	8004f46 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f007 f95d 	bl	800c200 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8004f46:	3708      	adds	r7, #8
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	0800f9e4 	.word	0x0800f9e4
 8004f50:	0800fbac 	.word	0x0800fbac
 8004f54:	0800fa34 	.word	0x0800fa34

08004f58 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d002      	beq.n	8004f6e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	61da      	str	r2, [r3, #28]
  }
}
 8004f6e:	bf00      	nop
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b085      	sub	sp, #20
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	60f8      	str	r0, [r7, #12]
 8004f82:	60b9      	str	r1, [r7, #8]
 8004f84:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8004f86:	f06f 030b 	mvn.w	r3, #11
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3714      	adds	r7, #20
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
	...

08004f98 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8004fa2:	79fb      	ldrb	r3, [r7, #7]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d013      	beq.n	8004fd0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8004fa8:	4b0d      	ldr	r3, [pc, #52]	; (8004fe0 <netif_get_by_index+0x48>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	60fb      	str	r3, [r7, #12]
 8004fae:	e00c      	b.n	8004fca <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	79fa      	ldrb	r2, [r7, #7]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d101      	bne.n	8004fc4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	e006      	b.n	8004fd2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	60fb      	str	r3, [r7, #12]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1ef      	bne.n	8004fb0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3714      	adds	r7, #20
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	20008af0 	.word	0x20008af0

08004fe4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8004fea:	4b0c      	ldr	r3, [pc, #48]	; (800501c <pbuf_free_ooseq+0x38>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004ff0:	4b0b      	ldr	r3, [pc, #44]	; (8005020 <pbuf_free_ooseq+0x3c>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	607b      	str	r3, [r7, #4]
 8004ff6:	e00a      	b.n	800500e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d003      	beq.n	8005008 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f002 f9df 	bl	80073c4 <tcp_free_ooseq>
      return;
 8005006:	e005      	b.n	8005014 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	607b      	str	r3, [r7, #4]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1f1      	bne.n	8004ff8 <pbuf_free_ooseq+0x14>
    }
  }
}
 8005014:	3708      	adds	r7, #8
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	20008af8 	.word	0x20008af8
 8005020:	20008b00 	.word	0x20008b00

08005024 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8005024:	b480      	push	{r7}
 8005026:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005028:	4b03      	ldr	r3, [pc, #12]	; (8005038 <pbuf_pool_is_empty+0x14>)
 800502a:	2201      	movs	r2, #1
 800502c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800502e:	bf00      	nop
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	20008af8 	.word	0x20008af8

0800503c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	4611      	mov	r1, r2
 8005048:	461a      	mov	r2, r3
 800504a:	460b      	mov	r3, r1
 800504c:	80fb      	strh	r3, [r7, #6]
 800504e:	4613      	mov	r3, r2
 8005050:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	88fa      	ldrh	r2, [r7, #6]
 8005062:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	88ba      	ldrh	r2, [r7, #4]
 8005068:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800506a:	8b3b      	ldrh	r3, [r7, #24]
 800506c:	b2da      	uxtb	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	7f3a      	ldrb	r2, [r7, #28]
 8005076:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2201      	movs	r2, #1
 800507c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	73da      	strb	r2, [r3, #15]
}
 8005084:	bf00      	nop
 8005086:	3714      	adds	r7, #20
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b08c      	sub	sp, #48	; 0x30
 8005094:	af02      	add	r7, sp, #8
 8005096:	4603      	mov	r3, r0
 8005098:	71fb      	strb	r3, [r7, #7]
 800509a:	460b      	mov	r3, r1
 800509c:	80bb      	strh	r3, [r7, #4]
 800509e:	4613      	mov	r3, r2
 80050a0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80050a2:	79fb      	ldrb	r3, [r7, #7]
 80050a4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80050a6:	887b      	ldrh	r3, [r7, #2]
 80050a8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80050ac:	d07f      	beq.n	80051ae <pbuf_alloc+0x11e>
 80050ae:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80050b2:	f300 80c8 	bgt.w	8005246 <pbuf_alloc+0x1b6>
 80050b6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80050ba:	d010      	beq.n	80050de <pbuf_alloc+0x4e>
 80050bc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80050c0:	f300 80c1 	bgt.w	8005246 <pbuf_alloc+0x1b6>
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d002      	beq.n	80050ce <pbuf_alloc+0x3e>
 80050c8:	2b41      	cmp	r3, #65	; 0x41
 80050ca:	f040 80bc 	bne.w	8005246 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80050ce:	887a      	ldrh	r2, [r7, #2]
 80050d0:	88bb      	ldrh	r3, [r7, #4]
 80050d2:	4619      	mov	r1, r3
 80050d4:	2000      	movs	r0, #0
 80050d6:	f000 f8d1 	bl	800527c <pbuf_alloc_reference>
 80050da:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80050dc:	e0bd      	b.n	800525a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80050de:	2300      	movs	r3, #0
 80050e0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80050e2:	2300      	movs	r3, #0
 80050e4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80050e6:	88bb      	ldrh	r3, [r7, #4]
 80050e8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80050ea:	2008      	movs	r0, #8
 80050ec:	f7ff fc56 	bl	800499c <memp_malloc>
 80050f0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d109      	bne.n	800510c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80050f8:	f7ff ff94 	bl	8005024 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80050fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d002      	beq.n	8005108 <pbuf_alloc+0x78>
            pbuf_free(p);
 8005102:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005104:	f000 faa8 	bl	8005658 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005108:	2300      	movs	r3, #0
 800510a:	e0a7      	b.n	800525c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800510c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800510e:	3303      	adds	r3, #3
 8005110:	b29b      	uxth	r3, r3
 8005112:	f023 0303 	bic.w	r3, r3, #3
 8005116:	b29b      	uxth	r3, r3
 8005118:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800511c:	b29b      	uxth	r3, r3
 800511e:	8b7a      	ldrh	r2, [r7, #26]
 8005120:	4293      	cmp	r3, r2
 8005122:	bf28      	it	cs
 8005124:	4613      	movcs	r3, r2
 8005126:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005128:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800512a:	3310      	adds	r3, #16
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	4413      	add	r3, r2
 8005130:	3303      	adds	r3, #3
 8005132:	f023 0303 	bic.w	r3, r3, #3
 8005136:	4618      	mov	r0, r3
 8005138:	89f9      	ldrh	r1, [r7, #14]
 800513a:	8b7a      	ldrh	r2, [r7, #26]
 800513c:	2300      	movs	r3, #0
 800513e:	9301      	str	r3, [sp, #4]
 8005140:	887b      	ldrh	r3, [r7, #2]
 8005142:	9300      	str	r3, [sp, #0]
 8005144:	460b      	mov	r3, r1
 8005146:	4601      	mov	r1, r0
 8005148:	6938      	ldr	r0, [r7, #16]
 800514a:	f7ff ff77 	bl	800503c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f003 0303 	and.w	r3, r3, #3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d006      	beq.n	8005168 <pbuf_alloc+0xd8>
 800515a:	4b42      	ldr	r3, [pc, #264]	; (8005264 <pbuf_alloc+0x1d4>)
 800515c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005160:	4941      	ldr	r1, [pc, #260]	; (8005268 <pbuf_alloc+0x1d8>)
 8005162:	4842      	ldr	r0, [pc, #264]	; (800526c <pbuf_alloc+0x1dc>)
 8005164:	f009 f876 	bl	800e254 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005168:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800516a:	3303      	adds	r3, #3
 800516c:	f023 0303 	bic.w	r3, r3, #3
 8005170:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8005174:	d106      	bne.n	8005184 <pbuf_alloc+0xf4>
 8005176:	4b3b      	ldr	r3, [pc, #236]	; (8005264 <pbuf_alloc+0x1d4>)
 8005178:	f44f 7281 	mov.w	r2, #258	; 0x102
 800517c:	493c      	ldr	r1, [pc, #240]	; (8005270 <pbuf_alloc+0x1e0>)
 800517e:	483b      	ldr	r0, [pc, #236]	; (800526c <pbuf_alloc+0x1dc>)
 8005180:	f009 f868 	bl	800e254 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	2b00      	cmp	r3, #0
 8005188:	d102      	bne.n	8005190 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	627b      	str	r3, [r7, #36]	; 0x24
 800518e:	e002      	b.n	8005196 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	693a      	ldr	r2, [r7, #16]
 8005194:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800519a:	8b7a      	ldrh	r2, [r7, #26]
 800519c:	89fb      	ldrh	r3, [r7, #14]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80051a2:	2300      	movs	r3, #0
 80051a4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80051a6:	8b7b      	ldrh	r3, [r7, #26]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d19e      	bne.n	80050ea <pbuf_alloc+0x5a>
      break;
 80051ac:	e055      	b.n	800525a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80051ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80051b0:	3303      	adds	r3, #3
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	f023 0303 	bic.w	r3, r3, #3
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	88bb      	ldrh	r3, [r7, #4]
 80051bc:	3303      	adds	r3, #3
 80051be:	b29b      	uxth	r3, r3
 80051c0:	f023 0303 	bic.w	r3, r3, #3
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	4413      	add	r3, r2
 80051c8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80051ca:	8b3b      	ldrh	r3, [r7, #24]
 80051cc:	3310      	adds	r3, #16
 80051ce:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80051d0:	8b3a      	ldrh	r2, [r7, #24]
 80051d2:	88bb      	ldrh	r3, [r7, #4]
 80051d4:	3303      	adds	r3, #3
 80051d6:	f023 0303 	bic.w	r3, r3, #3
 80051da:	429a      	cmp	r2, r3
 80051dc:	d306      	bcc.n	80051ec <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80051de:	8afa      	ldrh	r2, [r7, #22]
 80051e0:	88bb      	ldrh	r3, [r7, #4]
 80051e2:	3303      	adds	r3, #3
 80051e4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d201      	bcs.n	80051f0 <pbuf_alloc+0x160>
        return NULL;
 80051ec:	2300      	movs	r3, #0
 80051ee:	e035      	b.n	800525c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80051f0:	8afb      	ldrh	r3, [r7, #22]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f7ff fa64 	bl	80046c0 <mem_malloc>
 80051f8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80051fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d101      	bne.n	8005204 <pbuf_alloc+0x174>
        return NULL;
 8005200:	2300      	movs	r3, #0
 8005202:	e02b      	b.n	800525c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005204:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005206:	3310      	adds	r3, #16
 8005208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800520a:	4413      	add	r3, r2
 800520c:	3303      	adds	r3, #3
 800520e:	f023 0303 	bic.w	r3, r3, #3
 8005212:	4618      	mov	r0, r3
 8005214:	88b9      	ldrh	r1, [r7, #4]
 8005216:	88ba      	ldrh	r2, [r7, #4]
 8005218:	2300      	movs	r3, #0
 800521a:	9301      	str	r3, [sp, #4]
 800521c:	887b      	ldrh	r3, [r7, #2]
 800521e:	9300      	str	r3, [sp, #0]
 8005220:	460b      	mov	r3, r1
 8005222:	4601      	mov	r1, r0
 8005224:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005226:	f7ff ff09 	bl	800503c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f003 0303 	and.w	r3, r3, #3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d010      	beq.n	8005258 <pbuf_alloc+0x1c8>
 8005236:	4b0b      	ldr	r3, [pc, #44]	; (8005264 <pbuf_alloc+0x1d4>)
 8005238:	f44f 7291 	mov.w	r2, #290	; 0x122
 800523c:	490d      	ldr	r1, [pc, #52]	; (8005274 <pbuf_alloc+0x1e4>)
 800523e:	480b      	ldr	r0, [pc, #44]	; (800526c <pbuf_alloc+0x1dc>)
 8005240:	f009 f808 	bl	800e254 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005244:	e008      	b.n	8005258 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005246:	4b07      	ldr	r3, [pc, #28]	; (8005264 <pbuf_alloc+0x1d4>)
 8005248:	f240 1227 	movw	r2, #295	; 0x127
 800524c:	490a      	ldr	r1, [pc, #40]	; (8005278 <pbuf_alloc+0x1e8>)
 800524e:	4807      	ldr	r0, [pc, #28]	; (800526c <pbuf_alloc+0x1dc>)
 8005250:	f009 f800 	bl	800e254 <iprintf>
      return NULL;
 8005254:	2300      	movs	r3, #0
 8005256:	e001      	b.n	800525c <pbuf_alloc+0x1cc>
      break;
 8005258:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800525a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800525c:	4618      	mov	r0, r3
 800525e:	3728      	adds	r7, #40	; 0x28
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	0800fc14 	.word	0x0800fc14
 8005268:	0800fc44 	.word	0x0800fc44
 800526c:	0800fc74 	.word	0x0800fc74
 8005270:	0800fc9c 	.word	0x0800fc9c
 8005274:	0800fcd0 	.word	0x0800fcd0
 8005278:	0800fcfc 	.word	0x0800fcfc

0800527c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af02      	add	r7, sp, #8
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	460b      	mov	r3, r1
 8005286:	807b      	strh	r3, [r7, #2]
 8005288:	4613      	mov	r3, r2
 800528a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800528c:	883b      	ldrh	r3, [r7, #0]
 800528e:	2b41      	cmp	r3, #65	; 0x41
 8005290:	d009      	beq.n	80052a6 <pbuf_alloc_reference+0x2a>
 8005292:	883b      	ldrh	r3, [r7, #0]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d006      	beq.n	80052a6 <pbuf_alloc_reference+0x2a>
 8005298:	4b0f      	ldr	r3, [pc, #60]	; (80052d8 <pbuf_alloc_reference+0x5c>)
 800529a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800529e:	490f      	ldr	r1, [pc, #60]	; (80052dc <pbuf_alloc_reference+0x60>)
 80052a0:	480f      	ldr	r0, [pc, #60]	; (80052e0 <pbuf_alloc_reference+0x64>)
 80052a2:	f008 ffd7 	bl	800e254 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80052a6:	2007      	movs	r0, #7
 80052a8:	f7ff fb78 	bl	800499c <memp_malloc>
 80052ac:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d101      	bne.n	80052b8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80052b4:	2300      	movs	r3, #0
 80052b6:	e00b      	b.n	80052d0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80052b8:	8879      	ldrh	r1, [r7, #2]
 80052ba:	887a      	ldrh	r2, [r7, #2]
 80052bc:	2300      	movs	r3, #0
 80052be:	9301      	str	r3, [sp, #4]
 80052c0:	883b      	ldrh	r3, [r7, #0]
 80052c2:	9300      	str	r3, [sp, #0]
 80052c4:	460b      	mov	r3, r1
 80052c6:	6879      	ldr	r1, [r7, #4]
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f7ff feb7 	bl	800503c <pbuf_init_alloced_pbuf>
  return p;
 80052ce:	68fb      	ldr	r3, [r7, #12]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	0800fc14 	.word	0x0800fc14
 80052dc:	0800fd18 	.word	0x0800fd18
 80052e0:	0800fc74 	.word	0x0800fc74

080052e4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b088      	sub	sp, #32
 80052e8:	af02      	add	r7, sp, #8
 80052ea:	607b      	str	r3, [r7, #4]
 80052ec:	4603      	mov	r3, r0
 80052ee:	73fb      	strb	r3, [r7, #15]
 80052f0:	460b      	mov	r3, r1
 80052f2:	81bb      	strh	r3, [r7, #12]
 80052f4:	4613      	mov	r3, r2
 80052f6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80052f8:	7bfb      	ldrb	r3, [r7, #15]
 80052fa:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80052fc:	8a7b      	ldrh	r3, [r7, #18]
 80052fe:	3303      	adds	r3, #3
 8005300:	f023 0203 	bic.w	r2, r3, #3
 8005304:	89bb      	ldrh	r3, [r7, #12]
 8005306:	441a      	add	r2, r3
 8005308:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800530a:	429a      	cmp	r2, r3
 800530c:	d901      	bls.n	8005312 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800530e:	2300      	movs	r3, #0
 8005310:	e018      	b.n	8005344 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8005312:	6a3b      	ldr	r3, [r7, #32]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d007      	beq.n	8005328 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005318:	8a7b      	ldrh	r3, [r7, #18]
 800531a:	3303      	adds	r3, #3
 800531c:	f023 0303 	bic.w	r3, r3, #3
 8005320:	6a3a      	ldr	r2, [r7, #32]
 8005322:	4413      	add	r3, r2
 8005324:	617b      	str	r3, [r7, #20]
 8005326:	e001      	b.n	800532c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8005328:	2300      	movs	r3, #0
 800532a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	89b9      	ldrh	r1, [r7, #12]
 8005330:	89ba      	ldrh	r2, [r7, #12]
 8005332:	2302      	movs	r3, #2
 8005334:	9301      	str	r3, [sp, #4]
 8005336:	897b      	ldrh	r3, [r7, #10]
 8005338:	9300      	str	r3, [sp, #0]
 800533a:	460b      	mov	r3, r1
 800533c:	6979      	ldr	r1, [r7, #20]
 800533e:	f7ff fe7d 	bl	800503c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8005342:	687b      	ldr	r3, [r7, #4]
}
 8005344:	4618      	mov	r0, r3
 8005346:	3718      	adds	r7, #24
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	460b      	mov	r3, r1
 8005356:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d106      	bne.n	800536c <pbuf_realloc+0x20>
 800535e:	4b3a      	ldr	r3, [pc, #232]	; (8005448 <pbuf_realloc+0xfc>)
 8005360:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8005364:	4939      	ldr	r1, [pc, #228]	; (800544c <pbuf_realloc+0x100>)
 8005366:	483a      	ldr	r0, [pc, #232]	; (8005450 <pbuf_realloc+0x104>)
 8005368:	f008 ff74 	bl	800e254 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	891b      	ldrh	r3, [r3, #8]
 8005370:	887a      	ldrh	r2, [r7, #2]
 8005372:	429a      	cmp	r2, r3
 8005374:	d263      	bcs.n	800543e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	891a      	ldrh	r2, [r3, #8]
 800537a:	887b      	ldrh	r3, [r7, #2]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8005380:	887b      	ldrh	r3, [r7, #2]
 8005382:	817b      	strh	r3, [r7, #10]
  q = p;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005388:	e018      	b.n	80053bc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	895b      	ldrh	r3, [r3, #10]
 800538e:	897a      	ldrh	r2, [r7, #10]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	891a      	ldrh	r2, [r3, #8]
 8005398:	893b      	ldrh	r3, [r7, #8]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	b29a      	uxth	r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d106      	bne.n	80053bc <pbuf_realloc+0x70>
 80053ae:	4b26      	ldr	r3, [pc, #152]	; (8005448 <pbuf_realloc+0xfc>)
 80053b0:	f240 12af 	movw	r2, #431	; 0x1af
 80053b4:	4927      	ldr	r1, [pc, #156]	; (8005454 <pbuf_realloc+0x108>)
 80053b6:	4826      	ldr	r0, [pc, #152]	; (8005450 <pbuf_realloc+0x104>)
 80053b8:	f008 ff4c 	bl	800e254 <iprintf>
  while (rem_len > q->len) {
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	895b      	ldrh	r3, [r3, #10]
 80053c0:	897a      	ldrh	r2, [r7, #10]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d8e1      	bhi.n	800538a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	7b1b      	ldrb	r3, [r3, #12]
 80053ca:	f003 030f 	and.w	r3, r3, #15
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d121      	bne.n	8005416 <pbuf_realloc+0xca>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	895b      	ldrh	r3, [r3, #10]
 80053d6:	897a      	ldrh	r2, [r7, #10]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d01c      	beq.n	8005416 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	7b5b      	ldrb	r3, [r3, #13]
 80053e0:	f003 0302 	and.w	r3, r3, #2
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d116      	bne.n	8005416 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	897b      	ldrh	r3, [r7, #10]
 80053f4:	4413      	add	r3, r2
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	4619      	mov	r1, r3
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	f7ff f864 	bl	80044c8 <mem_trim>
 8005400:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d106      	bne.n	8005416 <pbuf_realloc+0xca>
 8005408:	4b0f      	ldr	r3, [pc, #60]	; (8005448 <pbuf_realloc+0xfc>)
 800540a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800540e:	4912      	ldr	r1, [pc, #72]	; (8005458 <pbuf_realloc+0x10c>)
 8005410:	480f      	ldr	r0, [pc, #60]	; (8005450 <pbuf_realloc+0x104>)
 8005412:	f008 ff1f 	bl	800e254 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	897a      	ldrh	r2, [r7, #10]
 800541a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	895a      	ldrh	r2, [r3, #10]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d004      	beq.n	8005436 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4618      	mov	r0, r3
 8005432:	f000 f911 	bl	8005658 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	601a      	str	r2, [r3, #0]
 800543c:	e000      	b.n	8005440 <pbuf_realloc+0xf4>
    return;
 800543e:	bf00      	nop

}
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	0800fc14 	.word	0x0800fc14
 800544c:	0800fd2c 	.word	0x0800fd2c
 8005450:	0800fc74 	.word	0x0800fc74
 8005454:	0800fd44 	.word	0x0800fd44
 8005458:	0800fd5c 	.word	0x0800fd5c

0800545c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b086      	sub	sp, #24
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	4613      	mov	r3, r2
 8005468:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d106      	bne.n	800547e <pbuf_add_header_impl+0x22>
 8005470:	4b2b      	ldr	r3, [pc, #172]	; (8005520 <pbuf_add_header_impl+0xc4>)
 8005472:	f240 12df 	movw	r2, #479	; 0x1df
 8005476:	492b      	ldr	r1, [pc, #172]	; (8005524 <pbuf_add_header_impl+0xc8>)
 8005478:	482b      	ldr	r0, [pc, #172]	; (8005528 <pbuf_add_header_impl+0xcc>)
 800547a:	f008 feeb 	bl	800e254 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d003      	beq.n	800548c <pbuf_add_header_impl+0x30>
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800548a:	d301      	bcc.n	8005490 <pbuf_add_header_impl+0x34>
    return 1;
 800548c:	2301      	movs	r3, #1
 800548e:	e043      	b.n	8005518 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d101      	bne.n	800549a <pbuf_add_header_impl+0x3e>
    return 0;
 8005496:	2300      	movs	r3, #0
 8005498:	e03e      	b.n	8005518 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	891a      	ldrh	r2, [r3, #8]
 80054a2:	8a7b      	ldrh	r3, [r7, #18]
 80054a4:	4413      	add	r3, r2
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	8a7a      	ldrh	r2, [r7, #18]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d901      	bls.n	80054b2 <pbuf_add_header_impl+0x56>
    return 1;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e032      	b.n	8005518 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	7b1b      	ldrb	r3, [r3, #12]
 80054b6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80054b8:	8a3b      	ldrh	r3, [r7, #16]
 80054ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00c      	beq.n	80054dc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	685a      	ldr	r2, [r3, #4]
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	425b      	negs	r3, r3
 80054ca:	4413      	add	r3, r2
 80054cc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	3310      	adds	r3, #16
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d20d      	bcs.n	80054f4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80054d8:	2301      	movs	r3, #1
 80054da:	e01d      	b.n	8005518 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80054dc:	79fb      	ldrb	r3, [r7, #7]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d006      	beq.n	80054f0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	685a      	ldr	r2, [r3, #4]
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	425b      	negs	r3, r3
 80054ea:	4413      	add	r3, r2
 80054ec:	617b      	str	r3, [r7, #20]
 80054ee:	e001      	b.n	80054f4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e011      	b.n	8005518 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	895a      	ldrh	r2, [r3, #10]
 80054fe:	8a7b      	ldrh	r3, [r7, #18]
 8005500:	4413      	add	r3, r2
 8005502:	b29a      	uxth	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	891a      	ldrh	r2, [r3, #8]
 800550c:	8a7b      	ldrh	r3, [r7, #18]
 800550e:	4413      	add	r3, r2
 8005510:	b29a      	uxth	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	811a      	strh	r2, [r3, #8]


  return 0;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3718      	adds	r7, #24
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	0800fc14 	.word	0x0800fc14
 8005524:	0800fd78 	.word	0x0800fd78
 8005528:	0800fc74 	.word	0x0800fc74

0800552c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8005536:	2200      	movs	r2, #0
 8005538:	6839      	ldr	r1, [r7, #0]
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f7ff ff8e 	bl	800545c <pbuf_add_header_impl>
 8005540:	4603      	mov	r3, r0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3708      	adds	r7, #8
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
	...

0800554c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d106      	bne.n	800556a <pbuf_remove_header+0x1e>
 800555c:	4b20      	ldr	r3, [pc, #128]	; (80055e0 <pbuf_remove_header+0x94>)
 800555e:	f240 224b 	movw	r2, #587	; 0x24b
 8005562:	4920      	ldr	r1, [pc, #128]	; (80055e4 <pbuf_remove_header+0x98>)
 8005564:	4820      	ldr	r0, [pc, #128]	; (80055e8 <pbuf_remove_header+0x9c>)
 8005566:	f008 fe75 	bl	800e254 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d003      	beq.n	8005578 <pbuf_remove_header+0x2c>
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005576:	d301      	bcc.n	800557c <pbuf_remove_header+0x30>
    return 1;
 8005578:	2301      	movs	r3, #1
 800557a:	e02c      	b.n	80055d6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d101      	bne.n	8005586 <pbuf_remove_header+0x3a>
    return 0;
 8005582:	2300      	movs	r3, #0
 8005584:	e027      	b.n	80055d6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	895b      	ldrh	r3, [r3, #10]
 800558e:	89fa      	ldrh	r2, [r7, #14]
 8005590:	429a      	cmp	r2, r3
 8005592:	d908      	bls.n	80055a6 <pbuf_remove_header+0x5a>
 8005594:	4b12      	ldr	r3, [pc, #72]	; (80055e0 <pbuf_remove_header+0x94>)
 8005596:	f240 2255 	movw	r2, #597	; 0x255
 800559a:	4914      	ldr	r1, [pc, #80]	; (80055ec <pbuf_remove_header+0xa0>)
 800559c:	4812      	ldr	r0, [pc, #72]	; (80055e8 <pbuf_remove_header+0x9c>)
 800559e:	f008 fe59 	bl	800e254 <iprintf>
 80055a2:	2301      	movs	r3, #1
 80055a4:	e017      	b.n	80055d6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685a      	ldr	r2, [r3, #4]
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	441a      	add	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	895a      	ldrh	r2, [r3, #10]
 80055bc:	89fb      	ldrh	r3, [r7, #14]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	b29a      	uxth	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	891a      	ldrh	r2, [r3, #8]
 80055ca:	89fb      	ldrh	r3, [r7, #14]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	b29a      	uxth	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	0800fc14 	.word	0x0800fc14
 80055e4:	0800fd78 	.word	0x0800fd78
 80055e8:	0800fc74 	.word	0x0800fc74
 80055ec:	0800fd84 	.word	0x0800fd84

080055f0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	460b      	mov	r3, r1
 80055fa:	807b      	strh	r3, [r7, #2]
 80055fc:	4613      	mov	r3, r2
 80055fe:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8005600:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005604:	2b00      	cmp	r3, #0
 8005606:	da08      	bge.n	800561a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8005608:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800560c:	425b      	negs	r3, r3
 800560e:	4619      	mov	r1, r3
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f7ff ff9b 	bl	800554c <pbuf_remove_header>
 8005616:	4603      	mov	r3, r0
 8005618:	e007      	b.n	800562a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800561a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800561e:	787a      	ldrb	r2, [r7, #1]
 8005620:	4619      	mov	r1, r3
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7ff ff1a 	bl	800545c <pbuf_add_header_impl>
 8005628:	4603      	mov	r3, r0
  }
}
 800562a:	4618      	mov	r0, r3
 800562c:	3708      	adds	r7, #8
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b082      	sub	sp, #8
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
 800563a:	460b      	mov	r3, r1
 800563c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800563e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005642:	2201      	movs	r2, #1
 8005644:	4619      	mov	r1, r3
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f7ff ffd2 	bl	80055f0 <pbuf_header_impl>
 800564c:	4603      	mov	r3, r0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3708      	adds	r7, #8
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
	...

08005658 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b086      	sub	sp, #24
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d10b      	bne.n	800567e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d106      	bne.n	800567a <pbuf_free+0x22>
 800566c:	4b38      	ldr	r3, [pc, #224]	; (8005750 <pbuf_free+0xf8>)
 800566e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8005672:	4938      	ldr	r1, [pc, #224]	; (8005754 <pbuf_free+0xfc>)
 8005674:	4838      	ldr	r0, [pc, #224]	; (8005758 <pbuf_free+0x100>)
 8005676:	f008 fded 	bl	800e254 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800567a:	2300      	movs	r3, #0
 800567c:	e063      	b.n	8005746 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800567e:	2300      	movs	r3, #0
 8005680:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8005682:	e05c      	b.n	800573e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	7b9b      	ldrb	r3, [r3, #14]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d106      	bne.n	800569a <pbuf_free+0x42>
 800568c:	4b30      	ldr	r3, [pc, #192]	; (8005750 <pbuf_free+0xf8>)
 800568e:	f240 22f1 	movw	r2, #753	; 0x2f1
 8005692:	4932      	ldr	r1, [pc, #200]	; (800575c <pbuf_free+0x104>)
 8005694:	4830      	ldr	r0, [pc, #192]	; (8005758 <pbuf_free+0x100>)
 8005696:	f008 fddd 	bl	800e254 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	7b9b      	ldrb	r3, [r3, #14]
 800569e:	3b01      	subs	r3, #1
 80056a0:	b2da      	uxtb	r2, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	739a      	strb	r2, [r3, #14]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	7b9b      	ldrb	r3, [r3, #14]
 80056aa:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80056ac:	7dbb      	ldrb	r3, [r7, #22]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d143      	bne.n	800573a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	7b1b      	ldrb	r3, [r3, #12]
 80056bc:	f003 030f 	and.w	r3, r3, #15
 80056c0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	7b5b      	ldrb	r3, [r3, #13]
 80056c6:	f003 0302 	and.w	r3, r3, #2
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d011      	beq.n	80056f2 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d106      	bne.n	80056e8 <pbuf_free+0x90>
 80056da:	4b1d      	ldr	r3, [pc, #116]	; (8005750 <pbuf_free+0xf8>)
 80056dc:	f240 22ff 	movw	r2, #767	; 0x2ff
 80056e0:	491f      	ldr	r1, [pc, #124]	; (8005760 <pbuf_free+0x108>)
 80056e2:	481d      	ldr	r0, [pc, #116]	; (8005758 <pbuf_free+0x100>)
 80056e4:	f008 fdb6 	bl	800e254 <iprintf>
        pc->custom_free_function(p);
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	4798      	blx	r3
 80056f0:	e01d      	b.n	800572e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80056f2:	7bfb      	ldrb	r3, [r7, #15]
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d104      	bne.n	8005702 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80056f8:	6879      	ldr	r1, [r7, #4]
 80056fa:	2008      	movs	r0, #8
 80056fc:	f7ff f99a 	bl	8004a34 <memp_free>
 8005700:	e015      	b.n	800572e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8005702:	7bfb      	ldrb	r3, [r7, #15]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d104      	bne.n	8005712 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8005708:	6879      	ldr	r1, [r7, #4]
 800570a:	2007      	movs	r0, #7
 800570c:	f7ff f992 	bl	8004a34 <memp_free>
 8005710:	e00d      	b.n	800572e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8005712:	7bfb      	ldrb	r3, [r7, #15]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d103      	bne.n	8005720 <pbuf_free+0xc8>
          mem_free(p);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f7fe fe6b 	bl	80043f4 <mem_free>
 800571e:	e006      	b.n	800572e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8005720:	4b0b      	ldr	r3, [pc, #44]	; (8005750 <pbuf_free+0xf8>)
 8005722:	f240 320f 	movw	r2, #783	; 0x30f
 8005726:	490f      	ldr	r1, [pc, #60]	; (8005764 <pbuf_free+0x10c>)
 8005728:	480b      	ldr	r0, [pc, #44]	; (8005758 <pbuf_free+0x100>)
 800572a:	f008 fd93 	bl	800e254 <iprintf>
        }
      }
      count++;
 800572e:	7dfb      	ldrb	r3, [r7, #23]
 8005730:	3301      	adds	r3, #1
 8005732:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	607b      	str	r3, [r7, #4]
 8005738:	e001      	b.n	800573e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800573a:	2300      	movs	r3, #0
 800573c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d19f      	bne.n	8005684 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8005744:	7dfb      	ldrb	r3, [r7, #23]
}
 8005746:	4618      	mov	r0, r3
 8005748:	3718      	adds	r7, #24
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	0800fc14 	.word	0x0800fc14
 8005754:	0800fd78 	.word	0x0800fd78
 8005758:	0800fc74 	.word	0x0800fc74
 800575c:	0800fda4 	.word	0x0800fda4
 8005760:	0800fdbc 	.word	0x0800fdbc
 8005764:	0800fde0 	.word	0x0800fde0

08005768 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8005770:	2300      	movs	r3, #0
 8005772:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8005774:	e005      	b.n	8005782 <pbuf_clen+0x1a>
    ++len;
 8005776:	89fb      	ldrh	r3, [r7, #14]
 8005778:	3301      	adds	r3, #1
 800577a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1f6      	bne.n	8005776 <pbuf_clen+0xe>
  }
  return len;
 8005788:	89fb      	ldrh	r3, [r7, #14]
}
 800578a:	4618      	mov	r0, r3
 800578c:	3714      	adds	r7, #20
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
	...

08005798 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d010      	beq.n	80057c8 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	7b9b      	ldrb	r3, [r3, #14]
 80057aa:	3301      	adds	r3, #1
 80057ac:	b2da      	uxtb	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	7b9b      	ldrb	r3, [r3, #14]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d106      	bne.n	80057c8 <pbuf_ref+0x30>
 80057ba:	4b05      	ldr	r3, [pc, #20]	; (80057d0 <pbuf_ref+0x38>)
 80057bc:	f240 3242 	movw	r2, #834	; 0x342
 80057c0:	4904      	ldr	r1, [pc, #16]	; (80057d4 <pbuf_ref+0x3c>)
 80057c2:	4805      	ldr	r0, [pc, #20]	; (80057d8 <pbuf_ref+0x40>)
 80057c4:	f008 fd46 	bl	800e254 <iprintf>
  }
}
 80057c8:	bf00      	nop
 80057ca:	3708      	adds	r7, #8
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	0800fc14 	.word	0x0800fc14
 80057d4:	0800fdf4 	.word	0x0800fdf4
 80057d8:	0800fc74 	.word	0x0800fc74

080057dc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d002      	beq.n	80057f2 <pbuf_cat+0x16>
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d107      	bne.n	8005802 <pbuf_cat+0x26>
 80057f2:	4b20      	ldr	r3, [pc, #128]	; (8005874 <pbuf_cat+0x98>)
 80057f4:	f240 3259 	movw	r2, #857	; 0x359
 80057f8:	491f      	ldr	r1, [pc, #124]	; (8005878 <pbuf_cat+0x9c>)
 80057fa:	4820      	ldr	r0, [pc, #128]	; (800587c <pbuf_cat+0xa0>)
 80057fc:	f008 fd2a 	bl	800e254 <iprintf>
 8005800:	e034      	b.n	800586c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	60fb      	str	r3, [r7, #12]
 8005806:	e00a      	b.n	800581e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	891a      	ldrh	r2, [r3, #8]
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	891b      	ldrh	r3, [r3, #8]
 8005810:	4413      	add	r3, r2
 8005812:	b29a      	uxth	r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	60fb      	str	r3, [r7, #12]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1f0      	bne.n	8005808 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	891a      	ldrh	r2, [r3, #8]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	895b      	ldrh	r3, [r3, #10]
 800582e:	429a      	cmp	r2, r3
 8005830:	d006      	beq.n	8005840 <pbuf_cat+0x64>
 8005832:	4b10      	ldr	r3, [pc, #64]	; (8005874 <pbuf_cat+0x98>)
 8005834:	f240 3262 	movw	r2, #866	; 0x362
 8005838:	4911      	ldr	r1, [pc, #68]	; (8005880 <pbuf_cat+0xa4>)
 800583a:	4810      	ldr	r0, [pc, #64]	; (800587c <pbuf_cat+0xa0>)
 800583c:	f008 fd0a 	bl	800e254 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d006      	beq.n	8005856 <pbuf_cat+0x7a>
 8005848:	4b0a      	ldr	r3, [pc, #40]	; (8005874 <pbuf_cat+0x98>)
 800584a:	f240 3263 	movw	r2, #867	; 0x363
 800584e:	490d      	ldr	r1, [pc, #52]	; (8005884 <pbuf_cat+0xa8>)
 8005850:	480a      	ldr	r0, [pc, #40]	; (800587c <pbuf_cat+0xa0>)
 8005852:	f008 fcff 	bl	800e254 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	891a      	ldrh	r2, [r3, #8]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	891b      	ldrh	r3, [r3, #8]
 800585e:	4413      	add	r3, r2
 8005860:	b29a      	uxth	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	683a      	ldr	r2, [r7, #0]
 800586a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	0800fc14 	.word	0x0800fc14
 8005878:	0800fe08 	.word	0x0800fe08
 800587c:	0800fc74 	.word	0x0800fc74
 8005880:	0800fe40 	.word	0x0800fe40
 8005884:	0800fe70 	.word	0x0800fe70

08005888 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8005892:	6839      	ldr	r1, [r7, #0]
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f7ff ffa1 	bl	80057dc <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800589a:	6838      	ldr	r0, [r7, #0]
 800589c:	f7ff ff7c 	bl	8005798 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80058a0:	bf00      	nop
 80058a2:	3708      	adds	r7, #8
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b086      	sub	sp, #24
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80058b2:	2300      	movs	r3, #0
 80058b4:	617b      	str	r3, [r7, #20]
 80058b6:	2300      	movs	r3, #0
 80058b8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d008      	beq.n	80058d2 <pbuf_copy+0x2a>
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d005      	beq.n	80058d2 <pbuf_copy+0x2a>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	891a      	ldrh	r2, [r3, #8]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	891b      	ldrh	r3, [r3, #8]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d209      	bcs.n	80058e6 <pbuf_copy+0x3e>
 80058d2:	4b57      	ldr	r3, [pc, #348]	; (8005a30 <pbuf_copy+0x188>)
 80058d4:	f240 32c9 	movw	r2, #969	; 0x3c9
 80058d8:	4956      	ldr	r1, [pc, #344]	; (8005a34 <pbuf_copy+0x18c>)
 80058da:	4857      	ldr	r0, [pc, #348]	; (8005a38 <pbuf_copy+0x190>)
 80058dc:	f008 fcba 	bl	800e254 <iprintf>
 80058e0:	f06f 030f 	mvn.w	r3, #15
 80058e4:	e09f      	b.n	8005a26 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	895b      	ldrh	r3, [r3, #10]
 80058ea:	461a      	mov	r2, r3
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	1ad2      	subs	r2, r2, r3
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	895b      	ldrh	r3, [r3, #10]
 80058f4:	4619      	mov	r1, r3
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	1acb      	subs	r3, r1, r3
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d306      	bcc.n	800590c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	895b      	ldrh	r3, [r3, #10]
 8005902:	461a      	mov	r2, r3
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	60fb      	str	r3, [r7, #12]
 800590a:	e005      	b.n	8005918 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	895b      	ldrh	r3, [r3, #10]
 8005910:	461a      	mov	r2, r3
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	18d0      	adds	r0, r2, r3
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	685a      	ldr	r2, [r3, #4]
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	4413      	add	r3, r2
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	4619      	mov	r1, r3
 800592c:	f008 fc62 	bl	800e1f4 <memcpy>
    offset_to += len;
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	4413      	add	r3, r2
 8005936:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	4413      	add	r3, r2
 800593e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	895b      	ldrh	r3, [r3, #10]
 8005944:	461a      	mov	r2, r3
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	4293      	cmp	r3, r2
 800594a:	d906      	bls.n	800595a <pbuf_copy+0xb2>
 800594c:	4b38      	ldr	r3, [pc, #224]	; (8005a30 <pbuf_copy+0x188>)
 800594e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8005952:	493a      	ldr	r1, [pc, #232]	; (8005a3c <pbuf_copy+0x194>)
 8005954:	4838      	ldr	r0, [pc, #224]	; (8005a38 <pbuf_copy+0x190>)
 8005956:	f008 fc7d 	bl	800e254 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	895b      	ldrh	r3, [r3, #10]
 800595e:	461a      	mov	r2, r3
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	4293      	cmp	r3, r2
 8005964:	d906      	bls.n	8005974 <pbuf_copy+0xcc>
 8005966:	4b32      	ldr	r3, [pc, #200]	; (8005a30 <pbuf_copy+0x188>)
 8005968:	f240 32da 	movw	r2, #986	; 0x3da
 800596c:	4934      	ldr	r1, [pc, #208]	; (8005a40 <pbuf_copy+0x198>)
 800596e:	4832      	ldr	r0, [pc, #200]	; (8005a38 <pbuf_copy+0x190>)
 8005970:	f008 fc70 	bl	800e254 <iprintf>
    if (offset_from >= p_from->len) {
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	895b      	ldrh	r3, [r3, #10]
 8005978:	461a      	mov	r2, r3
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	4293      	cmp	r3, r2
 800597e:	d304      	bcc.n	800598a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8005980:	2300      	movs	r3, #0
 8005982:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	895b      	ldrh	r3, [r3, #10]
 800598e:	461a      	mov	r2, r3
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	4293      	cmp	r3, r2
 8005994:	d114      	bne.n	80059c0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8005996:	2300      	movs	r3, #0
 8005998:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10c      	bne.n	80059c0 <pbuf_copy+0x118>
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d009      	beq.n	80059c0 <pbuf_copy+0x118>
 80059ac:	4b20      	ldr	r3, [pc, #128]	; (8005a30 <pbuf_copy+0x188>)
 80059ae:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80059b2:	4924      	ldr	r1, [pc, #144]	; (8005a44 <pbuf_copy+0x19c>)
 80059b4:	4820      	ldr	r0, [pc, #128]	; (8005a38 <pbuf_copy+0x190>)
 80059b6:	f008 fc4d 	bl	800e254 <iprintf>
 80059ba:	f06f 030f 	mvn.w	r3, #15
 80059be:	e032      	b.n	8005a26 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d013      	beq.n	80059ee <pbuf_copy+0x146>
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	895a      	ldrh	r2, [r3, #10]
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	891b      	ldrh	r3, [r3, #8]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d10d      	bne.n	80059ee <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d009      	beq.n	80059ee <pbuf_copy+0x146>
 80059da:	4b15      	ldr	r3, [pc, #84]	; (8005a30 <pbuf_copy+0x188>)
 80059dc:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80059e0:	4919      	ldr	r1, [pc, #100]	; (8005a48 <pbuf_copy+0x1a0>)
 80059e2:	4815      	ldr	r0, [pc, #84]	; (8005a38 <pbuf_copy+0x190>)
 80059e4:	f008 fc36 	bl	800e254 <iprintf>
 80059e8:	f06f 0305 	mvn.w	r3, #5
 80059ec:	e01b      	b.n	8005a26 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d013      	beq.n	8005a1c <pbuf_copy+0x174>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	895a      	ldrh	r2, [r3, #10]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	891b      	ldrh	r3, [r3, #8]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d10d      	bne.n	8005a1c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d009      	beq.n	8005a1c <pbuf_copy+0x174>
 8005a08:	4b09      	ldr	r3, [pc, #36]	; (8005a30 <pbuf_copy+0x188>)
 8005a0a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8005a0e:	490e      	ldr	r1, [pc, #56]	; (8005a48 <pbuf_copy+0x1a0>)
 8005a10:	4809      	ldr	r0, [pc, #36]	; (8005a38 <pbuf_copy+0x190>)
 8005a12:	f008 fc1f 	bl	800e254 <iprintf>
 8005a16:	f06f 0305 	mvn.w	r3, #5
 8005a1a:	e004      	b.n	8005a26 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f47f af61 	bne.w	80058e6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3718      	adds	r7, #24
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	0800fc14 	.word	0x0800fc14
 8005a34:	0800febc 	.word	0x0800febc
 8005a38:	0800fc74 	.word	0x0800fc74
 8005a3c:	0800feec 	.word	0x0800feec
 8005a40:	0800ff04 	.word	0x0800ff04
 8005a44:	0800ff20 	.word	0x0800ff20
 8005a48:	0800ff30 	.word	0x0800ff30

08005a4c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b088      	sub	sp, #32
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	4611      	mov	r1, r2
 8005a58:	461a      	mov	r2, r3
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	80fb      	strh	r3, [r7, #6]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8005a62:	2300      	movs	r3, #0
 8005a64:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8005a66:	2300      	movs	r3, #0
 8005a68:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d108      	bne.n	8005a82 <pbuf_copy_partial+0x36>
 8005a70:	4b2b      	ldr	r3, [pc, #172]	; (8005b20 <pbuf_copy_partial+0xd4>)
 8005a72:	f240 420a 	movw	r2, #1034	; 0x40a
 8005a76:	492b      	ldr	r1, [pc, #172]	; (8005b24 <pbuf_copy_partial+0xd8>)
 8005a78:	482b      	ldr	r0, [pc, #172]	; (8005b28 <pbuf_copy_partial+0xdc>)
 8005a7a:	f008 fbeb 	bl	800e254 <iprintf>
 8005a7e:	2300      	movs	r3, #0
 8005a80:	e04a      	b.n	8005b18 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d108      	bne.n	8005a9a <pbuf_copy_partial+0x4e>
 8005a88:	4b25      	ldr	r3, [pc, #148]	; (8005b20 <pbuf_copy_partial+0xd4>)
 8005a8a:	f240 420b 	movw	r2, #1035	; 0x40b
 8005a8e:	4927      	ldr	r1, [pc, #156]	; (8005b2c <pbuf_copy_partial+0xe0>)
 8005a90:	4825      	ldr	r0, [pc, #148]	; (8005b28 <pbuf_copy_partial+0xdc>)
 8005a92:	f008 fbdf 	bl	800e254 <iprintf>
 8005a96:	2300      	movs	r3, #0
 8005a98:	e03e      	b.n	8005b18 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	61fb      	str	r3, [r7, #28]
 8005a9e:	e034      	b.n	8005b0a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8005aa0:	88bb      	ldrh	r3, [r7, #4]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00a      	beq.n	8005abc <pbuf_copy_partial+0x70>
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	895b      	ldrh	r3, [r3, #10]
 8005aaa:	88ba      	ldrh	r2, [r7, #4]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d305      	bcc.n	8005abc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	895b      	ldrh	r3, [r3, #10]
 8005ab4:	88ba      	ldrh	r2, [r7, #4]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	80bb      	strh	r3, [r7, #4]
 8005aba:	e023      	b.n	8005b04 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	895a      	ldrh	r2, [r3, #10]
 8005ac0:	88bb      	ldrh	r3, [r7, #4]
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8005ac6:	8b3a      	ldrh	r2, [r7, #24]
 8005ac8:	88fb      	ldrh	r3, [r7, #6]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d901      	bls.n	8005ad2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8005ace:	88fb      	ldrh	r3, [r7, #6]
 8005ad0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8005ad2:	8b7b      	ldrh	r3, [r7, #26]
 8005ad4:	68ba      	ldr	r2, [r7, #8]
 8005ad6:	18d0      	adds	r0, r2, r3
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	685a      	ldr	r2, [r3, #4]
 8005adc:	88bb      	ldrh	r3, [r7, #4]
 8005ade:	4413      	add	r3, r2
 8005ae0:	8b3a      	ldrh	r2, [r7, #24]
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	f008 fb86 	bl	800e1f4 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8005ae8:	8afa      	ldrh	r2, [r7, #22]
 8005aea:	8b3b      	ldrh	r3, [r7, #24]
 8005aec:	4413      	add	r3, r2
 8005aee:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8005af0:	8b7a      	ldrh	r2, [r7, #26]
 8005af2:	8b3b      	ldrh	r3, [r7, #24]
 8005af4:	4413      	add	r3, r2
 8005af6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8005af8:	88fa      	ldrh	r2, [r7, #6]
 8005afa:	8b3b      	ldrh	r3, [r7, #24]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8005b00:	2300      	movs	r3, #0
 8005b02:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	61fb      	str	r3, [r7, #28]
 8005b0a:	88fb      	ldrh	r3, [r7, #6]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d002      	beq.n	8005b16 <pbuf_copy_partial+0xca>
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1c4      	bne.n	8005aa0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8005b16:	8afb      	ldrh	r3, [r7, #22]
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3720      	adds	r7, #32
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	0800fc14 	.word	0x0800fc14
 8005b24:	0800ff5c 	.word	0x0800ff5c
 8005b28:	0800fc74 	.word	0x0800fc74
 8005b2c:	0800ff7c 	.word	0x0800ff7c

08005b30 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b088      	sub	sp, #32
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8005b3e:	88fb      	ldrh	r3, [r7, #6]
 8005b40:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8005b42:	2300      	movs	r3, #0
 8005b44:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d109      	bne.n	8005b60 <pbuf_take+0x30>
 8005b4c:	4b3a      	ldr	r3, [pc, #232]	; (8005c38 <pbuf_take+0x108>)
 8005b4e:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8005b52:	493a      	ldr	r1, [pc, #232]	; (8005c3c <pbuf_take+0x10c>)
 8005b54:	483a      	ldr	r0, [pc, #232]	; (8005c40 <pbuf_take+0x110>)
 8005b56:	f008 fb7d 	bl	800e254 <iprintf>
 8005b5a:	f06f 030f 	mvn.w	r3, #15
 8005b5e:	e067      	b.n	8005c30 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d109      	bne.n	8005b7a <pbuf_take+0x4a>
 8005b66:	4b34      	ldr	r3, [pc, #208]	; (8005c38 <pbuf_take+0x108>)
 8005b68:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8005b6c:	4935      	ldr	r1, [pc, #212]	; (8005c44 <pbuf_take+0x114>)
 8005b6e:	4834      	ldr	r0, [pc, #208]	; (8005c40 <pbuf_take+0x110>)
 8005b70:	f008 fb70 	bl	800e254 <iprintf>
 8005b74:	f06f 030f 	mvn.w	r3, #15
 8005b78:	e05a      	b.n	8005c30 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	891b      	ldrh	r3, [r3, #8]
 8005b7e:	88fa      	ldrh	r2, [r7, #6]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d909      	bls.n	8005b98 <pbuf_take+0x68>
 8005b84:	4b2c      	ldr	r3, [pc, #176]	; (8005c38 <pbuf_take+0x108>)
 8005b86:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8005b8a:	492f      	ldr	r1, [pc, #188]	; (8005c48 <pbuf_take+0x118>)
 8005b8c:	482c      	ldr	r0, [pc, #176]	; (8005c40 <pbuf_take+0x110>)
 8005b8e:	f008 fb61 	bl	800e254 <iprintf>
 8005b92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b96:	e04b      	b.n	8005c30 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d007      	beq.n	8005bae <pbuf_take+0x7e>
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d004      	beq.n	8005bae <pbuf_take+0x7e>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	891b      	ldrh	r3, [r3, #8]
 8005ba8:	88fa      	ldrh	r2, [r7, #6]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d902      	bls.n	8005bb4 <pbuf_take+0x84>
    return ERR_ARG;
 8005bae:	f06f 030f 	mvn.w	r3, #15
 8005bb2:	e03d      	b.n	8005c30 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	61fb      	str	r3, [r7, #28]
 8005bb8:	e028      	b.n	8005c0c <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d106      	bne.n	8005bce <pbuf_take+0x9e>
 8005bc0:	4b1d      	ldr	r3, [pc, #116]	; (8005c38 <pbuf_take+0x108>)
 8005bc2:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8005bc6:	4921      	ldr	r1, [pc, #132]	; (8005c4c <pbuf_take+0x11c>)
 8005bc8:	481d      	ldr	r0, [pc, #116]	; (8005c40 <pbuf_take+0x110>)
 8005bca:	f008 fb43 	bl	800e254 <iprintf>
    buf_copy_len = total_copy_len;
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	895b      	ldrh	r3, [r3, #10]
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d902      	bls.n	8005be4 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	895b      	ldrh	r3, [r3, #10]
 8005be2:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	6858      	ldr	r0, [r3, #4]
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	4413      	add	r3, r2
 8005bee:	69ba      	ldr	r2, [r7, #24]
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	f008 faff 	bl	800e1f4 <memcpy>
    total_copy_len -= buf_copy_len;
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	4413      	add	r3, r2
 8005c04:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	61fb      	str	r3, [r7, #28]
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1d3      	bne.n	8005bba <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d103      	bne.n	8005c20 <pbuf_take+0xf0>
 8005c18:	88fb      	ldrh	r3, [r7, #6]
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d006      	beq.n	8005c2e <pbuf_take+0xfe>
 8005c20:	4b05      	ldr	r3, [pc, #20]	; (8005c38 <pbuf_take+0x108>)
 8005c22:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8005c26:	490a      	ldr	r1, [pc, #40]	; (8005c50 <pbuf_take+0x120>)
 8005c28:	4805      	ldr	r0, [pc, #20]	; (8005c40 <pbuf_take+0x110>)
 8005c2a:	f008 fb13 	bl	800e254 <iprintf>
  return ERR_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3720      	adds	r7, #32
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	0800fc14 	.word	0x0800fc14
 8005c3c:	0800ffec 	.word	0x0800ffec
 8005c40:	0800fc74 	.word	0x0800fc74
 8005c44:	08010004 	.word	0x08010004
 8005c48:	08010020 	.word	0x08010020
 8005c4c:	08010040 	.word	0x08010040
 8005c50:	08010058 	.word	0x08010058

08005c54 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	603a      	str	r2, [r7, #0]
 8005c5e:	71fb      	strb	r3, [r7, #7]
 8005c60:	460b      	mov	r3, r1
 8005c62:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	8919      	ldrh	r1, [r3, #8]
 8005c68:	88ba      	ldrh	r2, [r7, #4]
 8005c6a:	79fb      	ldrb	r3, [r7, #7]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7ff fa0f 	bl	8005090 <pbuf_alloc>
 8005c72:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d101      	bne.n	8005c7e <pbuf_clone+0x2a>
    return NULL;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	e011      	b.n	8005ca2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8005c7e:	6839      	ldr	r1, [r7, #0]
 8005c80:	68f8      	ldr	r0, [r7, #12]
 8005c82:	f7ff fe11 	bl	80058a8 <pbuf_copy>
 8005c86:	4603      	mov	r3, r0
 8005c88:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8005c8a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d006      	beq.n	8005ca0 <pbuf_clone+0x4c>
 8005c92:	4b06      	ldr	r3, [pc, #24]	; (8005cac <pbuf_clone+0x58>)
 8005c94:	f240 5224 	movw	r2, #1316	; 0x524
 8005c98:	4905      	ldr	r1, [pc, #20]	; (8005cb0 <pbuf_clone+0x5c>)
 8005c9a:	4806      	ldr	r0, [pc, #24]	; (8005cb4 <pbuf_clone+0x60>)
 8005c9c:	f008 fada 	bl	800e254 <iprintf>
  return q;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3710      	adds	r7, #16
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	0800fc14 	.word	0x0800fc14
 8005cb0:	08010088 	.word	0x08010088
 8005cb4:	0800fc74 	.word	0x0800fc74

08005cb8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8005cbc:	f008 fae2 	bl	800e284 <rand>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	4b01      	ldr	r3, [pc, #4]	; (8005cd8 <tcp_init+0x20>)
 8005cd2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8005cd4:	bf00      	nop
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	2000000a 	.word	0x2000000a

08005cdc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	7d1b      	ldrb	r3, [r3, #20]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d105      	bne.n	8005cf8 <tcp_free+0x1c>
 8005cec:	4b06      	ldr	r3, [pc, #24]	; (8005d08 <tcp_free+0x2c>)
 8005cee:	22d4      	movs	r2, #212	; 0xd4
 8005cf0:	4906      	ldr	r1, [pc, #24]	; (8005d0c <tcp_free+0x30>)
 8005cf2:	4807      	ldr	r0, [pc, #28]	; (8005d10 <tcp_free+0x34>)
 8005cf4:	f008 faae 	bl	800e254 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8005cf8:	6879      	ldr	r1, [r7, #4]
 8005cfa:	2001      	movs	r0, #1
 8005cfc:	f7fe fe9a 	bl	8004a34 <memp_free>
}
 8005d00:	bf00      	nop
 8005d02:	3708      	adds	r7, #8
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	08010114 	.word	0x08010114
 8005d0c:	08010144 	.word	0x08010144
 8005d10:	08010158 	.word	0x08010158

08005d14 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	7d1b      	ldrb	r3, [r3, #20]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d105      	bne.n	8005d30 <tcp_free_listen+0x1c>
 8005d24:	4b06      	ldr	r3, [pc, #24]	; (8005d40 <tcp_free_listen+0x2c>)
 8005d26:	22df      	movs	r2, #223	; 0xdf
 8005d28:	4906      	ldr	r1, [pc, #24]	; (8005d44 <tcp_free_listen+0x30>)
 8005d2a:	4807      	ldr	r0, [pc, #28]	; (8005d48 <tcp_free_listen+0x34>)
 8005d2c:	f008 fa92 	bl	800e254 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8005d30:	6879      	ldr	r1, [r7, #4]
 8005d32:	2002      	movs	r0, #2
 8005d34:	f7fe fe7e 	bl	8004a34 <memp_free>
}
 8005d38:	bf00      	nop
 8005d3a:	3708      	adds	r7, #8
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	08010114 	.word	0x08010114
 8005d44:	08010180 	.word	0x08010180
 8005d48:	08010158 	.word	0x08010158

08005d4c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8005d50:	f000 fea2 	bl	8006a98 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005d54:	4b07      	ldr	r3, [pc, #28]	; (8005d74 <tcp_tmr+0x28>)
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	3301      	adds	r3, #1
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	4b05      	ldr	r3, [pc, #20]	; (8005d74 <tcp_tmr+0x28>)
 8005d5e:	701a      	strb	r2, [r3, #0]
 8005d60:	4b04      	ldr	r3, [pc, #16]	; (8005d74 <tcp_tmr+0x28>)
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	f003 0301 	and.w	r3, r3, #1
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d001      	beq.n	8005d70 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8005d6c:	f000 fb54 	bl	8006418 <tcp_slowtmr>
  }
}
 8005d70:	bf00      	nop
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	200000cd 	.word	0x200000cd

08005d78 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d105      	bne.n	8005d94 <tcp_remove_listener+0x1c>
 8005d88:	4b0d      	ldr	r3, [pc, #52]	; (8005dc0 <tcp_remove_listener+0x48>)
 8005d8a:	22ff      	movs	r2, #255	; 0xff
 8005d8c:	490d      	ldr	r1, [pc, #52]	; (8005dc4 <tcp_remove_listener+0x4c>)
 8005d8e:	480e      	ldr	r0, [pc, #56]	; (8005dc8 <tcp_remove_listener+0x50>)
 8005d90:	f008 fa60 	bl	800e254 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	60fb      	str	r3, [r7, #12]
 8005d98:	e00a      	b.n	8005db0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d9e:	683a      	ldr	r2, [r7, #0]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d102      	bne.n	8005daa <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2200      	movs	r2, #0
 8005da8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	60fb      	str	r3, [r7, #12]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1f1      	bne.n	8005d9a <tcp_remove_listener+0x22>
    }
  }
}
 8005db6:	bf00      	nop
 8005db8:	bf00      	nop
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	08010114 	.word	0x08010114
 8005dc4:	0801019c 	.word	0x0801019c
 8005dc8:	08010158 	.word	0x08010158

08005dcc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d106      	bne.n	8005de8 <tcp_listen_closed+0x1c>
 8005dda:	4b14      	ldr	r3, [pc, #80]	; (8005e2c <tcp_listen_closed+0x60>)
 8005ddc:	f240 1211 	movw	r2, #273	; 0x111
 8005de0:	4913      	ldr	r1, [pc, #76]	; (8005e30 <tcp_listen_closed+0x64>)
 8005de2:	4814      	ldr	r0, [pc, #80]	; (8005e34 <tcp_listen_closed+0x68>)
 8005de4:	f008 fa36 	bl	800e254 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	7d1b      	ldrb	r3, [r3, #20]
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d006      	beq.n	8005dfe <tcp_listen_closed+0x32>
 8005df0:	4b0e      	ldr	r3, [pc, #56]	; (8005e2c <tcp_listen_closed+0x60>)
 8005df2:	f44f 7289 	mov.w	r2, #274	; 0x112
 8005df6:	4910      	ldr	r1, [pc, #64]	; (8005e38 <tcp_listen_closed+0x6c>)
 8005df8:	480e      	ldr	r0, [pc, #56]	; (8005e34 <tcp_listen_closed+0x68>)
 8005dfa:	f008 fa2b 	bl	800e254 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005dfe:	2301      	movs	r3, #1
 8005e00:	60fb      	str	r3, [r7, #12]
 8005e02:	e00b      	b.n	8005e1c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8005e04:	4a0d      	ldr	r2, [pc, #52]	; (8005e3c <tcp_listen_closed+0x70>)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	6879      	ldr	r1, [r7, #4]
 8005e10:	4618      	mov	r0, r3
 8005e12:	f7ff ffb1 	bl	8005d78 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	3301      	adds	r3, #1
 8005e1a:	60fb      	str	r3, [r7, #12]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2b03      	cmp	r3, #3
 8005e20:	d9f0      	bls.n	8005e04 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8005e22:	bf00      	nop
 8005e24:	bf00      	nop
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	08010114 	.word	0x08010114
 8005e30:	080101c4 	.word	0x080101c4
 8005e34:	08010158 	.word	0x08010158
 8005e38:	080101d0 	.word	0x080101d0
 8005e3c:	080120e0 	.word	0x080120e0

08005e40 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8005e40:	b5b0      	push	{r4, r5, r7, lr}
 8005e42:	b088      	sub	sp, #32
 8005e44:	af04      	add	r7, sp, #16
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	460b      	mov	r3, r1
 8005e4a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d106      	bne.n	8005e60 <tcp_close_shutdown+0x20>
 8005e52:	4b63      	ldr	r3, [pc, #396]	; (8005fe0 <tcp_close_shutdown+0x1a0>)
 8005e54:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8005e58:	4962      	ldr	r1, [pc, #392]	; (8005fe4 <tcp_close_shutdown+0x1a4>)
 8005e5a:	4863      	ldr	r0, [pc, #396]	; (8005fe8 <tcp_close_shutdown+0x1a8>)
 8005e5c:	f008 f9fa 	bl	800e254 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8005e60:	78fb      	ldrb	r3, [r7, #3]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d066      	beq.n	8005f34 <tcp_close_shutdown+0xf4>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	7d1b      	ldrb	r3, [r3, #20]
 8005e6a:	2b04      	cmp	r3, #4
 8005e6c:	d003      	beq.n	8005e76 <tcp_close_shutdown+0x36>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	7d1b      	ldrb	r3, [r3, #20]
 8005e72:	2b07      	cmp	r3, #7
 8005e74:	d15e      	bne.n	8005f34 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d104      	bne.n	8005e88 <tcp_close_shutdown+0x48>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e82:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005e86:	d055      	beq.n	8005f34 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	8b5b      	ldrh	r3, [r3, #26]
 8005e8c:	f003 0310 	and.w	r3, r3, #16
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d106      	bne.n	8005ea2 <tcp_close_shutdown+0x62>
 8005e94:	4b52      	ldr	r3, [pc, #328]	; (8005fe0 <tcp_close_shutdown+0x1a0>)
 8005e96:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8005e9a:	4954      	ldr	r1, [pc, #336]	; (8005fec <tcp_close_shutdown+0x1ac>)
 8005e9c:	4852      	ldr	r0, [pc, #328]	; (8005fe8 <tcp_close_shutdown+0x1a8>)
 8005e9e:	f008 f9d9 	bl	800e254 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005eaa:	687d      	ldr	r5, [r7, #4]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	3304      	adds	r3, #4
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	8ad2      	ldrh	r2, [r2, #22]
 8005eb4:	6879      	ldr	r1, [r7, #4]
 8005eb6:	8b09      	ldrh	r1, [r1, #24]
 8005eb8:	9102      	str	r1, [sp, #8]
 8005eba:	9201      	str	r2, [sp, #4]
 8005ebc:	9300      	str	r3, [sp, #0]
 8005ebe:	462b      	mov	r3, r5
 8005ec0:	4622      	mov	r2, r4
 8005ec2:	4601      	mov	r1, r0
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f004 fe8d 	bl	800abe4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f001 f8c6 	bl	800705c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8005ed0:	4b47      	ldr	r3, [pc, #284]	; (8005ff0 <tcp_close_shutdown+0x1b0>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d105      	bne.n	8005ee6 <tcp_close_shutdown+0xa6>
 8005eda:	4b45      	ldr	r3, [pc, #276]	; (8005ff0 <tcp_close_shutdown+0x1b0>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	4a43      	ldr	r2, [pc, #268]	; (8005ff0 <tcp_close_shutdown+0x1b0>)
 8005ee2:	6013      	str	r3, [r2, #0]
 8005ee4:	e013      	b.n	8005f0e <tcp_close_shutdown+0xce>
 8005ee6:	4b42      	ldr	r3, [pc, #264]	; (8005ff0 <tcp_close_shutdown+0x1b0>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	60fb      	str	r3, [r7, #12]
 8005eec:	e00c      	b.n	8005f08 <tcp_close_shutdown+0xc8>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d104      	bne.n	8005f02 <tcp_close_shutdown+0xc2>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	68da      	ldr	r2, [r3, #12]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	60da      	str	r2, [r3, #12]
 8005f00:	e005      	b.n	8005f0e <tcp_close_shutdown+0xce>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	60fb      	str	r3, [r7, #12]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d1ef      	bne.n	8005eee <tcp_close_shutdown+0xae>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	60da      	str	r2, [r3, #12]
 8005f14:	4b37      	ldr	r3, [pc, #220]	; (8005ff4 <tcp_close_shutdown+0x1b4>)
 8005f16:	2201      	movs	r2, #1
 8005f18:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8005f1a:	4b37      	ldr	r3, [pc, #220]	; (8005ff8 <tcp_close_shutdown+0x1b8>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d102      	bne.n	8005f2a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8005f24:	f003 fd5a 	bl	80099dc <tcp_trigger_input_pcb_close>
 8005f28:	e002      	b.n	8005f30 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f7ff fed6 	bl	8005cdc <tcp_free>
      }
      return ERR_OK;
 8005f30:	2300      	movs	r3, #0
 8005f32:	e050      	b.n	8005fd6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	7d1b      	ldrb	r3, [r3, #20]
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d03b      	beq.n	8005fb4 <tcp_close_shutdown+0x174>
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	dc44      	bgt.n	8005fca <tcp_close_shutdown+0x18a>
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d002      	beq.n	8005f4a <tcp_close_shutdown+0x10a>
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d02a      	beq.n	8005f9e <tcp_close_shutdown+0x15e>
 8005f48:	e03f      	b.n	8005fca <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	8adb      	ldrh	r3, [r3, #22]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d021      	beq.n	8005f96 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005f52:	4b2a      	ldr	r3, [pc, #168]	; (8005ffc <tcp_close_shutdown+0x1bc>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d105      	bne.n	8005f68 <tcp_close_shutdown+0x128>
 8005f5c:	4b27      	ldr	r3, [pc, #156]	; (8005ffc <tcp_close_shutdown+0x1bc>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	4a26      	ldr	r2, [pc, #152]	; (8005ffc <tcp_close_shutdown+0x1bc>)
 8005f64:	6013      	str	r3, [r2, #0]
 8005f66:	e013      	b.n	8005f90 <tcp_close_shutdown+0x150>
 8005f68:	4b24      	ldr	r3, [pc, #144]	; (8005ffc <tcp_close_shutdown+0x1bc>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	60bb      	str	r3, [r7, #8]
 8005f6e:	e00c      	b.n	8005f8a <tcp_close_shutdown+0x14a>
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d104      	bne.n	8005f84 <tcp_close_shutdown+0x144>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	68da      	ldr	r2, [r3, #12]
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	60da      	str	r2, [r3, #12]
 8005f82:	e005      	b.n	8005f90 <tcp_close_shutdown+0x150>
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	60bb      	str	r3, [r7, #8]
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1ef      	bne.n	8005f70 <tcp_close_shutdown+0x130>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f7ff fea0 	bl	8005cdc <tcp_free>
      break;
 8005f9c:	e01a      	b.n	8005fd4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7ff ff14 	bl	8005dcc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8005fa4:	6879      	ldr	r1, [r7, #4]
 8005fa6:	4816      	ldr	r0, [pc, #88]	; (8006000 <tcp_close_shutdown+0x1c0>)
 8005fa8:	f001 f8a8 	bl	80070fc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f7ff feb1 	bl	8005d14 <tcp_free_listen>
      break;
 8005fb2:	e00f      	b.n	8005fd4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005fb4:	6879      	ldr	r1, [r7, #4]
 8005fb6:	480e      	ldr	r0, [pc, #56]	; (8005ff0 <tcp_close_shutdown+0x1b0>)
 8005fb8:	f001 f8a0 	bl	80070fc <tcp_pcb_remove>
 8005fbc:	4b0d      	ldr	r3, [pc, #52]	; (8005ff4 <tcp_close_shutdown+0x1b4>)
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f7ff fe8a 	bl	8005cdc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8005fc8:	e004      	b.n	8005fd4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 f81a 	bl	8006004 <tcp_close_shutdown_fin>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	e000      	b.n	8005fd6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bdb0      	pop	{r4, r5, r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	08010114 	.word	0x08010114
 8005fe4:	080101e8 	.word	0x080101e8
 8005fe8:	08010158 	.word	0x08010158
 8005fec:	08010208 	.word	0x08010208
 8005ff0:	20008b00 	.word	0x20008b00
 8005ff4:	20008afc 	.word	0x20008afc
 8005ff8:	20008b14 	.word	0x20008b14
 8005ffc:	20008b0c 	.word	0x20008b0c
 8006000:	20008b08 	.word	0x20008b08

08006004 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d106      	bne.n	8006020 <tcp_close_shutdown_fin+0x1c>
 8006012:	4b2e      	ldr	r3, [pc, #184]	; (80060cc <tcp_close_shutdown_fin+0xc8>)
 8006014:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8006018:	492d      	ldr	r1, [pc, #180]	; (80060d0 <tcp_close_shutdown_fin+0xcc>)
 800601a:	482e      	ldr	r0, [pc, #184]	; (80060d4 <tcp_close_shutdown_fin+0xd0>)
 800601c:	f008 f91a 	bl	800e254 <iprintf>

  switch (pcb->state) {
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	7d1b      	ldrb	r3, [r3, #20]
 8006024:	2b07      	cmp	r3, #7
 8006026:	d020      	beq.n	800606a <tcp_close_shutdown_fin+0x66>
 8006028:	2b07      	cmp	r3, #7
 800602a:	dc2b      	bgt.n	8006084 <tcp_close_shutdown_fin+0x80>
 800602c:	2b03      	cmp	r3, #3
 800602e:	d002      	beq.n	8006036 <tcp_close_shutdown_fin+0x32>
 8006030:	2b04      	cmp	r3, #4
 8006032:	d00d      	beq.n	8006050 <tcp_close_shutdown_fin+0x4c>
 8006034:	e026      	b.n	8006084 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f003 fee2 	bl	8009e00 <tcp_send_fin>
 800603c:	4603      	mov	r3, r0
 800603e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006040:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d11f      	bne.n	8006088 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2205      	movs	r2, #5
 800604c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800604e:	e01b      	b.n	8006088 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f003 fed5 	bl	8009e00 <tcp_send_fin>
 8006056:	4603      	mov	r3, r0
 8006058:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800605a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d114      	bne.n	800608c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2205      	movs	r2, #5
 8006066:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006068:	e010      	b.n	800608c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f003 fec8 	bl	8009e00 <tcp_send_fin>
 8006070:	4603      	mov	r3, r0
 8006072:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006074:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d109      	bne.n	8006090 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2209      	movs	r2, #9
 8006080:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006082:	e005      	b.n	8006090 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8006084:	2300      	movs	r3, #0
 8006086:	e01c      	b.n	80060c2 <tcp_close_shutdown_fin+0xbe>
      break;
 8006088:	bf00      	nop
 800608a:	e002      	b.n	8006092 <tcp_close_shutdown_fin+0x8e>
      break;
 800608c:	bf00      	nop
 800608e:	e000      	b.n	8006092 <tcp_close_shutdown_fin+0x8e>
      break;
 8006090:	bf00      	nop
  }

  if (err == ERR_OK) {
 8006092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d103      	bne.n	80060a2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f003 ffee 	bl	800a07c <tcp_output>
 80060a0:	e00d      	b.n	80060be <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80060a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060aa:	d108      	bne.n	80060be <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	8b5b      	ldrh	r3, [r3, #26]
 80060b0:	f043 0308 	orr.w	r3, r3, #8
 80060b4:	b29a      	uxth	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80060ba:	2300      	movs	r3, #0
 80060bc:	e001      	b.n	80060c2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80060be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3710      	adds	r7, #16
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	08010114 	.word	0x08010114
 80060d0:	080101c4 	.word	0x080101c4
 80060d4:	08010158 	.word	0x08010158

080060d8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d109      	bne.n	80060fa <tcp_close+0x22>
 80060e6:	4b0f      	ldr	r3, [pc, #60]	; (8006124 <tcp_close+0x4c>)
 80060e8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80060ec:	490e      	ldr	r1, [pc, #56]	; (8006128 <tcp_close+0x50>)
 80060ee:	480f      	ldr	r0, [pc, #60]	; (800612c <tcp_close+0x54>)
 80060f0:	f008 f8b0 	bl	800e254 <iprintf>
 80060f4:	f06f 030f 	mvn.w	r3, #15
 80060f8:	e00f      	b.n	800611a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	7d1b      	ldrb	r3, [r3, #20]
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d006      	beq.n	8006110 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	8b5b      	ldrh	r3, [r3, #26]
 8006106:	f043 0310 	orr.w	r3, r3, #16
 800610a:	b29a      	uxth	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006110:	2101      	movs	r1, #1
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f7ff fe94 	bl	8005e40 <tcp_close_shutdown>
 8006118:	4603      	mov	r3, r0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3708      	adds	r7, #8
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	08010114 	.word	0x08010114
 8006128:	08010224 	.word	0x08010224
 800612c:	08010158 	.word	0x08010158

08006130 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b08e      	sub	sp, #56	; 0x38
 8006134:	af04      	add	r7, sp, #16
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d107      	bne.n	8006150 <tcp_abandon+0x20>
 8006140:	4b52      	ldr	r3, [pc, #328]	; (800628c <tcp_abandon+0x15c>)
 8006142:	f240 223d 	movw	r2, #573	; 0x23d
 8006146:	4952      	ldr	r1, [pc, #328]	; (8006290 <tcp_abandon+0x160>)
 8006148:	4852      	ldr	r0, [pc, #328]	; (8006294 <tcp_abandon+0x164>)
 800614a:	f008 f883 	bl	800e254 <iprintf>
 800614e:	e099      	b.n	8006284 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	7d1b      	ldrb	r3, [r3, #20]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d106      	bne.n	8006166 <tcp_abandon+0x36>
 8006158:	4b4c      	ldr	r3, [pc, #304]	; (800628c <tcp_abandon+0x15c>)
 800615a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800615e:	494e      	ldr	r1, [pc, #312]	; (8006298 <tcp_abandon+0x168>)
 8006160:	484c      	ldr	r0, [pc, #304]	; (8006294 <tcp_abandon+0x164>)
 8006162:	f008 f877 	bl	800e254 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	7d1b      	ldrb	r3, [r3, #20]
 800616a:	2b0a      	cmp	r3, #10
 800616c:	d107      	bne.n	800617e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800616e:	6879      	ldr	r1, [r7, #4]
 8006170:	484a      	ldr	r0, [pc, #296]	; (800629c <tcp_abandon+0x16c>)
 8006172:	f000 ffc3 	bl	80070fc <tcp_pcb_remove>
    tcp_free(pcb);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f7ff fdb0 	bl	8005cdc <tcp_free>
 800617c:	e082      	b.n	8006284 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800617e:	2300      	movs	r3, #0
 8006180:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8006182:	2300      	movs	r3, #0
 8006184:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800618a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006190:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006198:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	7d1b      	ldrb	r3, [r3, #20]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d126      	bne.n	80061f6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	8adb      	ldrh	r3, [r3, #22]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d02e      	beq.n	800620e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80061b0:	4b3b      	ldr	r3, [pc, #236]	; (80062a0 <tcp_abandon+0x170>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d105      	bne.n	80061c6 <tcp_abandon+0x96>
 80061ba:	4b39      	ldr	r3, [pc, #228]	; (80062a0 <tcp_abandon+0x170>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	4a37      	ldr	r2, [pc, #220]	; (80062a0 <tcp_abandon+0x170>)
 80061c2:	6013      	str	r3, [r2, #0]
 80061c4:	e013      	b.n	80061ee <tcp_abandon+0xbe>
 80061c6:	4b36      	ldr	r3, [pc, #216]	; (80062a0 <tcp_abandon+0x170>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	61fb      	str	r3, [r7, #28]
 80061cc:	e00c      	b.n	80061e8 <tcp_abandon+0xb8>
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d104      	bne.n	80061e2 <tcp_abandon+0xb2>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	68da      	ldr	r2, [r3, #12]
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	60da      	str	r2, [r3, #12]
 80061e0:	e005      	b.n	80061ee <tcp_abandon+0xbe>
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	61fb      	str	r3, [r7, #28]
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d1ef      	bne.n	80061ce <tcp_abandon+0x9e>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	60da      	str	r2, [r3, #12]
 80061f4:	e00b      	b.n	800620e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	8adb      	ldrh	r3, [r3, #22]
 80061fe:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006200:	6879      	ldr	r1, [r7, #4]
 8006202:	4828      	ldr	r0, [pc, #160]	; (80062a4 <tcp_abandon+0x174>)
 8006204:	f000 ff7a 	bl	80070fc <tcp_pcb_remove>
 8006208:	4b27      	ldr	r3, [pc, #156]	; (80062a8 <tcp_abandon+0x178>)
 800620a:	2201      	movs	r2, #1
 800620c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006212:	2b00      	cmp	r3, #0
 8006214:	d004      	beq.n	8006220 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800621a:	4618      	mov	r0, r3
 800621c:	f000 fd1c 	bl	8006c58 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006224:	2b00      	cmp	r3, #0
 8006226:	d004      	beq.n	8006232 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800622c:	4618      	mov	r0, r3
 800622e:	f000 fd13 	bl	8006c58 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006236:	2b00      	cmp	r3, #0
 8006238:	d004      	beq.n	8006244 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800623e:	4618      	mov	r0, r3
 8006240:	f000 fd0a 	bl	8006c58 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00e      	beq.n	8006268 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800624a:	6879      	ldr	r1, [r7, #4]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	3304      	adds	r3, #4
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	8b12      	ldrh	r2, [r2, #24]
 8006254:	9202      	str	r2, [sp, #8]
 8006256:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006258:	9201      	str	r2, [sp, #4]
 800625a:	9300      	str	r3, [sp, #0]
 800625c:	460b      	mov	r3, r1
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	69b9      	ldr	r1, [r7, #24]
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f004 fcbe 	bl	800abe4 <tcp_rst>
    }
    last_state = pcb->state;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	7d1b      	ldrb	r3, [r3, #20]
 800626c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f7ff fd34 	bl	8005cdc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d004      	beq.n	8006284 <tcp_abandon+0x154>
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	f06f 010c 	mvn.w	r1, #12
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	4798      	blx	r3
  }
}
 8006284:	3728      	adds	r7, #40	; 0x28
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	08010114 	.word	0x08010114
 8006290:	08010258 	.word	0x08010258
 8006294:	08010158 	.word	0x08010158
 8006298:	08010274 	.word	0x08010274
 800629c:	20008b10 	.word	0x20008b10
 80062a0:	20008b0c 	.word	0x20008b0c
 80062a4:	20008b00 	.word	0x20008b00
 80062a8:	20008afc 	.word	0x20008afc

080062ac <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80062b4:	2101      	movs	r1, #1
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f7ff ff3a 	bl	8006130 <tcp_abandon>
}
 80062bc:	bf00      	nop
 80062be:	3708      	adds	r7, #8
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d106      	bne.n	80062e0 <tcp_update_rcv_ann_wnd+0x1c>
 80062d2:	4b25      	ldr	r3, [pc, #148]	; (8006368 <tcp_update_rcv_ann_wnd+0xa4>)
 80062d4:	f240 32a6 	movw	r2, #934	; 0x3a6
 80062d8:	4924      	ldr	r1, [pc, #144]	; (800636c <tcp_update_rcv_ann_wnd+0xa8>)
 80062da:	4825      	ldr	r0, [pc, #148]	; (8006370 <tcp_update_rcv_ann_wnd+0xac>)
 80062dc:	f007 ffba 	bl	800e254 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80062e8:	4413      	add	r3, r2
 80062ea:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80062f4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80062f8:	bf28      	it	cs
 80062fa:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80062fe:	b292      	uxth	r2, r2
 8006300:	4413      	add	r3, r2
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	2b00      	cmp	r3, #0
 8006308:	db08      	blt.n	800631c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	1ad3      	subs	r3, r2, r3
 800631a:	e020      	b.n	800635e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	2b00      	cmp	r3, #0
 8006328:	dd03      	ble.n	8006332 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006330:	e014      	b.n	800635c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006344:	d306      	bcc.n	8006354 <tcp_update_rcv_ann_wnd+0x90>
 8006346:	4b08      	ldr	r3, [pc, #32]	; (8006368 <tcp_update_rcv_ann_wnd+0xa4>)
 8006348:	f240 32b6 	movw	r2, #950	; 0x3b6
 800634c:	4909      	ldr	r1, [pc, #36]	; (8006374 <tcp_update_rcv_ann_wnd+0xb0>)
 800634e:	4808      	ldr	r0, [pc, #32]	; (8006370 <tcp_update_rcv_ann_wnd+0xac>)
 8006350:	f007 ff80 	bl	800e254 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	b29a      	uxth	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800635c:	2300      	movs	r3, #0
  }
}
 800635e:	4618      	mov	r0, r3
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	08010114 	.word	0x08010114
 800636c:	08010370 	.word	0x08010370
 8006370:	08010158 	.word	0x08010158
 8006374:	08010394 	.word	0x08010394

08006378 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	460b      	mov	r3, r1
 8006382:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d107      	bne.n	800639a <tcp_recved+0x22>
 800638a:	4b1f      	ldr	r3, [pc, #124]	; (8006408 <tcp_recved+0x90>)
 800638c:	f240 32cf 	movw	r2, #975	; 0x3cf
 8006390:	491e      	ldr	r1, [pc, #120]	; (800640c <tcp_recved+0x94>)
 8006392:	481f      	ldr	r0, [pc, #124]	; (8006410 <tcp_recved+0x98>)
 8006394:	f007 ff5e 	bl	800e254 <iprintf>
 8006398:	e032      	b.n	8006400 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	7d1b      	ldrb	r3, [r3, #20]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d106      	bne.n	80063b0 <tcp_recved+0x38>
 80063a2:	4b19      	ldr	r3, [pc, #100]	; (8006408 <tcp_recved+0x90>)
 80063a4:	f240 32d2 	movw	r2, #978	; 0x3d2
 80063a8:	491a      	ldr	r1, [pc, #104]	; (8006414 <tcp_recved+0x9c>)
 80063aa:	4819      	ldr	r0, [pc, #100]	; (8006410 <tcp_recved+0x98>)
 80063ac:	f007 ff52 	bl	800e254 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80063b4:	887b      	ldrh	r3, [r7, #2]
 80063b6:	4413      	add	r3, r2
 80063b8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80063ba:	89fb      	ldrh	r3, [r7, #14]
 80063bc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80063c0:	d804      	bhi.n	80063cc <tcp_recved+0x54>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063c6:	89fa      	ldrh	r2, [r7, #14]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d204      	bcs.n	80063d6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80063d2:	851a      	strh	r2, [r3, #40]	; 0x28
 80063d4:	e002      	b.n	80063dc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	89fa      	ldrh	r2, [r7, #14]
 80063da:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f7ff ff71 	bl	80062c4 <tcp_update_rcv_ann_wnd>
 80063e2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80063ea:	d309      	bcc.n	8006400 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	8b5b      	ldrh	r3, [r3, #26]
 80063f0:	f043 0302 	orr.w	r3, r3, #2
 80063f4:	b29a      	uxth	r2, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f003 fe3e 	bl	800a07c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	08010114 	.word	0x08010114
 800640c:	080103b0 	.word	0x080103b0
 8006410:	08010158 	.word	0x08010158
 8006414:	080103c8 	.word	0x080103c8

08006418 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8006418:	b5b0      	push	{r4, r5, r7, lr}
 800641a:	b090      	sub	sp, #64	; 0x40
 800641c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800641e:	2300      	movs	r3, #0
 8006420:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8006424:	4b94      	ldr	r3, [pc, #592]	; (8006678 <tcp_slowtmr+0x260>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	3301      	adds	r3, #1
 800642a:	4a93      	ldr	r2, [pc, #588]	; (8006678 <tcp_slowtmr+0x260>)
 800642c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800642e:	4b93      	ldr	r3, [pc, #588]	; (800667c <tcp_slowtmr+0x264>)
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	3301      	adds	r3, #1
 8006434:	b2da      	uxtb	r2, r3
 8006436:	4b91      	ldr	r3, [pc, #580]	; (800667c <tcp_slowtmr+0x264>)
 8006438:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800643a:	2300      	movs	r3, #0
 800643c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800643e:	4b90      	ldr	r3, [pc, #576]	; (8006680 <tcp_slowtmr+0x268>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8006444:	e29f      	b.n	8006986 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006448:	7d1b      	ldrb	r3, [r3, #20]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d106      	bne.n	800645c <tcp_slowtmr+0x44>
 800644e:	4b8d      	ldr	r3, [pc, #564]	; (8006684 <tcp_slowtmr+0x26c>)
 8006450:	f240 42be 	movw	r2, #1214	; 0x4be
 8006454:	498c      	ldr	r1, [pc, #560]	; (8006688 <tcp_slowtmr+0x270>)
 8006456:	488d      	ldr	r0, [pc, #564]	; (800668c <tcp_slowtmr+0x274>)
 8006458:	f007 fefc 	bl	800e254 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800645c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800645e:	7d1b      	ldrb	r3, [r3, #20]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d106      	bne.n	8006472 <tcp_slowtmr+0x5a>
 8006464:	4b87      	ldr	r3, [pc, #540]	; (8006684 <tcp_slowtmr+0x26c>)
 8006466:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800646a:	4989      	ldr	r1, [pc, #548]	; (8006690 <tcp_slowtmr+0x278>)
 800646c:	4887      	ldr	r0, [pc, #540]	; (800668c <tcp_slowtmr+0x274>)
 800646e:	f007 fef1 	bl	800e254 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8006472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006474:	7d1b      	ldrb	r3, [r3, #20]
 8006476:	2b0a      	cmp	r3, #10
 8006478:	d106      	bne.n	8006488 <tcp_slowtmr+0x70>
 800647a:	4b82      	ldr	r3, [pc, #520]	; (8006684 <tcp_slowtmr+0x26c>)
 800647c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8006480:	4984      	ldr	r1, [pc, #528]	; (8006694 <tcp_slowtmr+0x27c>)
 8006482:	4882      	ldr	r0, [pc, #520]	; (800668c <tcp_slowtmr+0x274>)
 8006484:	f007 fee6 	bl	800e254 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8006488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648a:	7f9a      	ldrb	r2, [r3, #30]
 800648c:	4b7b      	ldr	r3, [pc, #492]	; (800667c <tcp_slowtmr+0x264>)
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	429a      	cmp	r2, r3
 8006492:	d105      	bne.n	80064a0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8006494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006496:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800649e:	e272      	b.n	8006986 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 80064a0:	4b76      	ldr	r3, [pc, #472]	; (800667c <tcp_slowtmr+0x264>)
 80064a2:	781a      	ldrb	r2, [r3, #0]
 80064a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80064a8:	2300      	movs	r3, #0
 80064aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80064ae:	2300      	movs	r3, #0
 80064b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80064b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b6:	7d1b      	ldrb	r3, [r3, #20]
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d10a      	bne.n	80064d2 <tcp_slowtmr+0xba>
 80064bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80064c2:	2b05      	cmp	r3, #5
 80064c4:	d905      	bls.n	80064d2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 80064c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064ca:	3301      	adds	r3, #1
 80064cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80064d0:	e11e      	b.n	8006710 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80064d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80064d8:	2b0b      	cmp	r3, #11
 80064da:	d905      	bls.n	80064e8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80064dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064e0:	3301      	adds	r3, #1
 80064e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80064e6:	e113      	b.n	8006710 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80064e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d075      	beq.n	80065de <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80064f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d006      	beq.n	8006508 <tcp_slowtmr+0xf0>
 80064fa:	4b62      	ldr	r3, [pc, #392]	; (8006684 <tcp_slowtmr+0x26c>)
 80064fc:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8006500:	4965      	ldr	r1, [pc, #404]	; (8006698 <tcp_slowtmr+0x280>)
 8006502:	4862      	ldr	r0, [pc, #392]	; (800668c <tcp_slowtmr+0x274>)
 8006504:	f007 fea6 	bl	800e254 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8006508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800650a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800650c:	2b00      	cmp	r3, #0
 800650e:	d106      	bne.n	800651e <tcp_slowtmr+0x106>
 8006510:	4b5c      	ldr	r3, [pc, #368]	; (8006684 <tcp_slowtmr+0x26c>)
 8006512:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8006516:	4961      	ldr	r1, [pc, #388]	; (800669c <tcp_slowtmr+0x284>)
 8006518:	485c      	ldr	r0, [pc, #368]	; (800668c <tcp_slowtmr+0x274>)
 800651a:	f007 fe9b 	bl	800e254 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800651e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006520:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8006524:	2b0b      	cmp	r3, #11
 8006526:	d905      	bls.n	8006534 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8006528:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800652c:	3301      	adds	r3, #1
 800652e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006532:	e0ed      	b.n	8006710 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8006534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006536:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800653a:	3b01      	subs	r3, #1
 800653c:	4a58      	ldr	r2, [pc, #352]	; (80066a0 <tcp_slowtmr+0x288>)
 800653e:	5cd3      	ldrb	r3, [r2, r3]
 8006540:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8006542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006544:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006548:	7c7a      	ldrb	r2, [r7, #17]
 800654a:	429a      	cmp	r2, r3
 800654c:	d907      	bls.n	800655e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800654e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006550:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006554:	3301      	adds	r3, #1
 8006556:	b2da      	uxtb	r2, r3
 8006558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800655a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800655e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006560:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006564:	7c7a      	ldrb	r2, [r7, #17]
 8006566:	429a      	cmp	r2, r3
 8006568:	f200 80d2 	bhi.w	8006710 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800656c:	2301      	movs	r3, #1
 800656e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8006570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006572:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006576:	2b00      	cmp	r3, #0
 8006578:	d108      	bne.n	800658c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800657a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800657c:	f004 fc26 	bl	800adcc <tcp_zero_window_probe>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d014      	beq.n	80065b0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8006586:	2300      	movs	r3, #0
 8006588:	623b      	str	r3, [r7, #32]
 800658a:	e011      	b.n	80065b0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800658c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800658e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006592:	4619      	mov	r1, r3
 8006594:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006596:	f003 faeb 	bl	8009b70 <tcp_split_unsent_seg>
 800659a:	4603      	mov	r3, r0
 800659c:	2b00      	cmp	r3, #0
 800659e:	d107      	bne.n	80065b0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80065a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80065a2:	f003 fd6b 	bl	800a07c <tcp_output>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d101      	bne.n	80065b0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80065ac:	2300      	movs	r3, #0
 80065ae:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80065b0:	6a3b      	ldr	r3, [r7, #32]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f000 80ac 	beq.w	8006710 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80065b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ba:	2200      	movs	r2, #0
 80065bc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80065c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80065c6:	2b06      	cmp	r3, #6
 80065c8:	f200 80a2 	bhi.w	8006710 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80065cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ce:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80065d2:	3301      	adds	r3, #1
 80065d4:	b2da      	uxtb	r2, r3
 80065d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80065dc:	e098      	b.n	8006710 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80065de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	db0f      	blt.n	8006608 <tcp_slowtmr+0x1f0>
 80065e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ea:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80065ee:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d008      	beq.n	8006608 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80065f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	3301      	adds	r3, #1
 8006600:	b29b      	uxth	r3, r3
 8006602:	b21a      	sxth	r2, r3
 8006604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006606:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8006608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800660a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800660e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006610:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006614:	429a      	cmp	r2, r3
 8006616:	db7b      	blt.n	8006710 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8006618:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800661a:	f004 f821 	bl	800a660 <tcp_rexmit_rto_prepare>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d007      	beq.n	8006634 <tcp_slowtmr+0x21c>
 8006624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006628:	2b00      	cmp	r3, #0
 800662a:	d171      	bne.n	8006710 <tcp_slowtmr+0x2f8>
 800662c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006630:	2b00      	cmp	r3, #0
 8006632:	d06d      	beq.n	8006710 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8006634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006636:	7d1b      	ldrb	r3, [r3, #20]
 8006638:	2b02      	cmp	r3, #2
 800663a:	d03a      	beq.n	80066b2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800663c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006642:	2b0c      	cmp	r3, #12
 8006644:	bf28      	it	cs
 8006646:	230c      	movcs	r3, #12
 8006648:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800664a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8006650:	10db      	asrs	r3, r3, #3
 8006652:	b21b      	sxth	r3, r3
 8006654:	461a      	mov	r2, r3
 8006656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006658:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800665c:	4413      	add	r3, r2
 800665e:	7efa      	ldrb	r2, [r7, #27]
 8006660:	4910      	ldr	r1, [pc, #64]	; (80066a4 <tcp_slowtmr+0x28c>)
 8006662:	5c8a      	ldrb	r2, [r1, r2]
 8006664:	4093      	lsls	r3, r2
 8006666:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800666e:	4293      	cmp	r3, r2
 8006670:	dc1a      	bgt.n	80066a8 <tcp_slowtmr+0x290>
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	b21a      	sxth	r2, r3
 8006676:	e019      	b.n	80066ac <tcp_slowtmr+0x294>
 8006678:	20008b04 	.word	0x20008b04
 800667c:	200000ce 	.word	0x200000ce
 8006680:	20008b00 	.word	0x20008b00
 8006684:	08010114 	.word	0x08010114
 8006688:	08010458 	.word	0x08010458
 800668c:	08010158 	.word	0x08010158
 8006690:	08010484 	.word	0x08010484
 8006694:	080104b0 	.word	0x080104b0
 8006698:	080104e0 	.word	0x080104e0
 800669c:	08010514 	.word	0x08010514
 80066a0:	080120d8 	.word	0x080120d8
 80066a4:	080120c8 	.word	0x080120c8
 80066a8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80066ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80066b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b4:	2200      	movs	r2, #0
 80066b6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80066b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80066be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80066c4:	4293      	cmp	r3, r2
 80066c6:	bf28      	it	cs
 80066c8:	4613      	movcs	r3, r2
 80066ca:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80066cc:	8a7b      	ldrh	r3, [r7, #18]
 80066ce:	085b      	lsrs	r3, r3, #1
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80066d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066da:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80066de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80066e2:	005b      	lsls	r3, r3, #1
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d206      	bcs.n	80066f8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80066ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80066ee:	005b      	lsls	r3, r3, #1
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80066f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fa:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80066fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8006702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006704:	2200      	movs	r2, #0
 8006706:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800670a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800670c:	f004 f818 	bl	800a740 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8006710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006712:	7d1b      	ldrb	r3, [r3, #20]
 8006714:	2b06      	cmp	r3, #6
 8006716:	d111      	bne.n	800673c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8006718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800671a:	8b5b      	ldrh	r3, [r3, #26]
 800671c:	f003 0310 	and.w	r3, r3, #16
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00b      	beq.n	800673c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006724:	4b9d      	ldr	r3, [pc, #628]	; (800699c <tcp_slowtmr+0x584>)
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672a:	6a1b      	ldr	r3, [r3, #32]
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	2b28      	cmp	r3, #40	; 0x28
 8006730:	d904      	bls.n	800673c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8006732:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006736:	3301      	adds	r3, #1
 8006738:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800673c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800673e:	7a5b      	ldrb	r3, [r3, #9]
 8006740:	f003 0308 	and.w	r3, r3, #8
 8006744:	2b00      	cmp	r3, #0
 8006746:	d04c      	beq.n	80067e2 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8006748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800674c:	2b04      	cmp	r3, #4
 800674e:	d003      	beq.n	8006758 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8006750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006752:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8006754:	2b07      	cmp	r3, #7
 8006756:	d144      	bne.n	80067e2 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006758:	4b90      	ldr	r3, [pc, #576]	; (800699c <tcp_slowtmr+0x584>)
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800675e:	6a1b      	ldr	r3, [r3, #32]
 8006760:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8006762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006764:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006768:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800676c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8006770:	498b      	ldr	r1, [pc, #556]	; (80069a0 <tcp_slowtmr+0x588>)
 8006772:	fba1 1303 	umull	r1, r3, r1, r3
 8006776:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006778:	429a      	cmp	r2, r3
 800677a:	d90a      	bls.n	8006792 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800677c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006780:	3301      	adds	r3, #1
 8006782:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8006786:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800678a:	3301      	adds	r3, #1
 800678c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006790:	e027      	b.n	80067e2 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006792:	4b82      	ldr	r3, [pc, #520]	; (800699c <tcp_slowtmr+0x584>)
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800679c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800679e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80067a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80067a8:	4618      	mov	r0, r3
 80067aa:	4b7e      	ldr	r3, [pc, #504]	; (80069a4 <tcp_slowtmr+0x58c>)
 80067ac:	fb03 f300 	mul.w	r3, r3, r0
 80067b0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80067b2:	497b      	ldr	r1, [pc, #492]	; (80069a0 <tcp_slowtmr+0x588>)
 80067b4:	fba1 1303 	umull	r1, r3, r1, r3
 80067b8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d911      	bls.n	80067e2 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80067be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80067c0:	f004 fac4 	bl	800ad4c <tcp_keepalive>
 80067c4:	4603      	mov	r3, r0
 80067c6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80067ca:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d107      	bne.n	80067e2 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80067d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80067d8:	3301      	adds	r3, #1
 80067da:	b2da      	uxtb	r2, r3
 80067dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067de:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80067e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d011      	beq.n	800680e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80067ea:	4b6c      	ldr	r3, [pc, #432]	; (800699c <tcp_slowtmr+0x584>)
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f0:	6a1b      	ldr	r3, [r3, #32]
 80067f2:	1ad2      	subs	r2, r2, r3
 80067f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80067fa:	4619      	mov	r1, r3
 80067fc:	460b      	mov	r3, r1
 80067fe:	005b      	lsls	r3, r3, #1
 8006800:	440b      	add	r3, r1
 8006802:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8006804:	429a      	cmp	r2, r3
 8006806:	d302      	bcc.n	800680e <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8006808:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800680a:	f000 fddb 	bl	80073c4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800680e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006810:	7d1b      	ldrb	r3, [r3, #20]
 8006812:	2b03      	cmp	r3, #3
 8006814:	d10b      	bne.n	800682e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006816:	4b61      	ldr	r3, [pc, #388]	; (800699c <tcp_slowtmr+0x584>)
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	2b28      	cmp	r3, #40	; 0x28
 8006822:	d904      	bls.n	800682e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8006824:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006828:	3301      	adds	r3, #1
 800682a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800682e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006830:	7d1b      	ldrb	r3, [r3, #20]
 8006832:	2b09      	cmp	r3, #9
 8006834:	d10b      	bne.n	800684e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006836:	4b59      	ldr	r3, [pc, #356]	; (800699c <tcp_slowtmr+0x584>)
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	2bf0      	cmp	r3, #240	; 0xf0
 8006842:	d904      	bls.n	800684e <tcp_slowtmr+0x436>
        ++pcb_remove;
 8006844:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006848:	3301      	adds	r3, #1
 800684a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800684e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006852:	2b00      	cmp	r3, #0
 8006854:	d060      	beq.n	8006918 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8006856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800685c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800685e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006860:	f000 fbfc 	bl	800705c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8006864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006866:	2b00      	cmp	r3, #0
 8006868:	d010      	beq.n	800688c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800686a:	4b4f      	ldr	r3, [pc, #316]	; (80069a8 <tcp_slowtmr+0x590>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006870:	429a      	cmp	r2, r3
 8006872:	d106      	bne.n	8006882 <tcp_slowtmr+0x46a>
 8006874:	4b4d      	ldr	r3, [pc, #308]	; (80069ac <tcp_slowtmr+0x594>)
 8006876:	f240 526d 	movw	r2, #1389	; 0x56d
 800687a:	494d      	ldr	r1, [pc, #308]	; (80069b0 <tcp_slowtmr+0x598>)
 800687c:	484d      	ldr	r0, [pc, #308]	; (80069b4 <tcp_slowtmr+0x59c>)
 800687e:	f007 fce9 	bl	800e254 <iprintf>
        prev->next = pcb->next;
 8006882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006884:	68da      	ldr	r2, [r3, #12]
 8006886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006888:	60da      	str	r2, [r3, #12]
 800688a:	e00f      	b.n	80068ac <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800688c:	4b46      	ldr	r3, [pc, #280]	; (80069a8 <tcp_slowtmr+0x590>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006892:	429a      	cmp	r2, r3
 8006894:	d006      	beq.n	80068a4 <tcp_slowtmr+0x48c>
 8006896:	4b45      	ldr	r3, [pc, #276]	; (80069ac <tcp_slowtmr+0x594>)
 8006898:	f240 5271 	movw	r2, #1393	; 0x571
 800689c:	4946      	ldr	r1, [pc, #280]	; (80069b8 <tcp_slowtmr+0x5a0>)
 800689e:	4845      	ldr	r0, [pc, #276]	; (80069b4 <tcp_slowtmr+0x59c>)
 80068a0:	f007 fcd8 	bl	800e254 <iprintf>
        tcp_active_pcbs = pcb->next;
 80068a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	4a3f      	ldr	r2, [pc, #252]	; (80069a8 <tcp_slowtmr+0x590>)
 80068aa:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80068ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d013      	beq.n	80068dc <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80068b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80068b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ba:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80068bc:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80068be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c0:	3304      	adds	r3, #4
 80068c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068c4:	8ad2      	ldrh	r2, [r2, #22]
 80068c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068c8:	8b09      	ldrh	r1, [r1, #24]
 80068ca:	9102      	str	r1, [sp, #8]
 80068cc:	9201      	str	r2, [sp, #4]
 80068ce:	9300      	str	r3, [sp, #0]
 80068d0:	462b      	mov	r3, r5
 80068d2:	4622      	mov	r2, r4
 80068d4:	4601      	mov	r1, r0
 80068d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80068d8:	f004 f984 	bl	800abe4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80068dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80068e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e4:	7d1b      	ldrb	r3, [r3, #20]
 80068e6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80068e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ea:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80068ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80068f2:	6838      	ldr	r0, [r7, #0]
 80068f4:	f7ff f9f2 	bl	8005cdc <tcp_free>

      tcp_active_pcbs_changed = 0;
 80068f8:	4b30      	ldr	r3, [pc, #192]	; (80069bc <tcp_slowtmr+0x5a4>)
 80068fa:	2200      	movs	r2, #0
 80068fc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d004      	beq.n	800690e <tcp_slowtmr+0x4f6>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f06f 010c 	mvn.w	r1, #12
 800690a:	68b8      	ldr	r0, [r7, #8]
 800690c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800690e:	4b2b      	ldr	r3, [pc, #172]	; (80069bc <tcp_slowtmr+0x5a4>)
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d037      	beq.n	8006986 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8006916:	e590      	b.n	800643a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8006918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800691a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800691c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8006922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006924:	7f1b      	ldrb	r3, [r3, #28]
 8006926:	3301      	adds	r3, #1
 8006928:	b2da      	uxtb	r2, r3
 800692a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800692e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006930:	7f1a      	ldrb	r2, [r3, #28]
 8006932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006934:	7f5b      	ldrb	r3, [r3, #29]
 8006936:	429a      	cmp	r2, r3
 8006938:	d325      	bcc.n	8006986 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800693a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693c:	2200      	movs	r2, #0
 800693e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8006940:	4b1e      	ldr	r3, [pc, #120]	; (80069bc <tcp_slowtmr+0x5a4>)
 8006942:	2200      	movs	r2, #0
 8006944:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8006946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006948:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00b      	beq.n	8006968 <tcp_slowtmr+0x550>
 8006950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006952:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006956:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006958:	6912      	ldr	r2, [r2, #16]
 800695a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800695c:	4610      	mov	r0, r2
 800695e:	4798      	blx	r3
 8006960:	4603      	mov	r3, r0
 8006962:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006966:	e002      	b.n	800696e <tcp_slowtmr+0x556>
 8006968:	2300      	movs	r3, #0
 800696a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800696e:	4b13      	ldr	r3, [pc, #76]	; (80069bc <tcp_slowtmr+0x5a4>)
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d000      	beq.n	8006978 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8006976:	e560      	b.n	800643a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8006978:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800697c:	2b00      	cmp	r3, #0
 800697e:	d102      	bne.n	8006986 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8006980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006982:	f003 fb7b 	bl	800a07c <tcp_output>
  while (pcb != NULL) {
 8006986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006988:	2b00      	cmp	r3, #0
 800698a:	f47f ad5c 	bne.w	8006446 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800698e:	2300      	movs	r3, #0
 8006990:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8006992:	4b0b      	ldr	r3, [pc, #44]	; (80069c0 <tcp_slowtmr+0x5a8>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8006998:	e067      	b.n	8006a6a <tcp_slowtmr+0x652>
 800699a:	bf00      	nop
 800699c:	20008b04 	.word	0x20008b04
 80069a0:	10624dd3 	.word	0x10624dd3
 80069a4:	000124f8 	.word	0x000124f8
 80069a8:	20008b00 	.word	0x20008b00
 80069ac:	08010114 	.word	0x08010114
 80069b0:	0801054c 	.word	0x0801054c
 80069b4:	08010158 	.word	0x08010158
 80069b8:	08010578 	.word	0x08010578
 80069bc:	20008afc 	.word	0x20008afc
 80069c0:	20008b10 	.word	0x20008b10
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80069c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c6:	7d1b      	ldrb	r3, [r3, #20]
 80069c8:	2b0a      	cmp	r3, #10
 80069ca:	d006      	beq.n	80069da <tcp_slowtmr+0x5c2>
 80069cc:	4b2b      	ldr	r3, [pc, #172]	; (8006a7c <tcp_slowtmr+0x664>)
 80069ce:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80069d2:	492b      	ldr	r1, [pc, #172]	; (8006a80 <tcp_slowtmr+0x668>)
 80069d4:	482b      	ldr	r0, [pc, #172]	; (8006a84 <tcp_slowtmr+0x66c>)
 80069d6:	f007 fc3d 	bl	800e254 <iprintf>
    pcb_remove = 0;
 80069da:	2300      	movs	r3, #0
 80069dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80069e0:	4b29      	ldr	r3, [pc, #164]	; (8006a88 <tcp_slowtmr+0x670>)
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e6:	6a1b      	ldr	r3, [r3, #32]
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	2bf0      	cmp	r3, #240	; 0xf0
 80069ec:	d904      	bls.n	80069f8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80069ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069f2:	3301      	adds	r3, #1
 80069f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80069f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d02f      	beq.n	8006a60 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8006a00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a02:	f000 fb2b 	bl	800705c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8006a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d010      	beq.n	8006a2e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006a0c:	4b1f      	ldr	r3, [pc, #124]	; (8006a8c <tcp_slowtmr+0x674>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d106      	bne.n	8006a24 <tcp_slowtmr+0x60c>
 8006a16:	4b19      	ldr	r3, [pc, #100]	; (8006a7c <tcp_slowtmr+0x664>)
 8006a18:	f240 52af 	movw	r2, #1455	; 0x5af
 8006a1c:	491c      	ldr	r1, [pc, #112]	; (8006a90 <tcp_slowtmr+0x678>)
 8006a1e:	4819      	ldr	r0, [pc, #100]	; (8006a84 <tcp_slowtmr+0x66c>)
 8006a20:	f007 fc18 	bl	800e254 <iprintf>
        prev->next = pcb->next;
 8006a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a26:	68da      	ldr	r2, [r3, #12]
 8006a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2a:	60da      	str	r2, [r3, #12]
 8006a2c:	e00f      	b.n	8006a4e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8006a2e:	4b17      	ldr	r3, [pc, #92]	; (8006a8c <tcp_slowtmr+0x674>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d006      	beq.n	8006a46 <tcp_slowtmr+0x62e>
 8006a38:	4b10      	ldr	r3, [pc, #64]	; (8006a7c <tcp_slowtmr+0x664>)
 8006a3a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8006a3e:	4915      	ldr	r1, [pc, #84]	; (8006a94 <tcp_slowtmr+0x67c>)
 8006a40:	4810      	ldr	r0, [pc, #64]	; (8006a84 <tcp_slowtmr+0x66c>)
 8006a42:	f007 fc07 	bl	800e254 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8006a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	4a10      	ldr	r2, [pc, #64]	; (8006a8c <tcp_slowtmr+0x674>)
 8006a4c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8006a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a50:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8006a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8006a58:	69f8      	ldr	r0, [r7, #28]
 8006a5a:	f7ff f93f 	bl	8005cdc <tcp_free>
 8006a5e:	e004      	b.n	8006a6a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8006a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a62:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8006a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d1a9      	bne.n	80069c4 <tcp_slowtmr+0x5ac>
    }
  }
}
 8006a70:	bf00      	nop
 8006a72:	bf00      	nop
 8006a74:	3730      	adds	r7, #48	; 0x30
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bdb0      	pop	{r4, r5, r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	08010114 	.word	0x08010114
 8006a80:	080105a4 	.word	0x080105a4
 8006a84:	08010158 	.word	0x08010158
 8006a88:	20008b04 	.word	0x20008b04
 8006a8c:	20008b10 	.word	0x20008b10
 8006a90:	080105d4 	.word	0x080105d4
 8006a94:	080105fc 	.word	0x080105fc

08006a98 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8006a9e:	4b2d      	ldr	r3, [pc, #180]	; (8006b54 <tcp_fasttmr+0xbc>)
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	b2da      	uxtb	r2, r3
 8006aa6:	4b2b      	ldr	r3, [pc, #172]	; (8006b54 <tcp_fasttmr+0xbc>)
 8006aa8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8006aaa:	4b2b      	ldr	r3, [pc, #172]	; (8006b58 <tcp_fasttmr+0xc0>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006ab0:	e048      	b.n	8006b44 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	7f9a      	ldrb	r2, [r3, #30]
 8006ab6:	4b27      	ldr	r3, [pc, #156]	; (8006b54 <tcp_fasttmr+0xbc>)
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d03f      	beq.n	8006b3e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8006abe:	4b25      	ldr	r3, [pc, #148]	; (8006b54 <tcp_fasttmr+0xbc>)
 8006ac0:	781a      	ldrb	r2, [r3, #0]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	8b5b      	ldrh	r3, [r3, #26]
 8006aca:	f003 0301 	and.w	r3, r3, #1
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d010      	beq.n	8006af4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	8b5b      	ldrh	r3, [r3, #26]
 8006ad6:	f043 0302 	orr.w	r3, r3, #2
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f003 facb 	bl	800a07c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	8b5b      	ldrh	r3, [r3, #26]
 8006aea:	f023 0303 	bic.w	r3, r3, #3
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	8b5b      	ldrh	r3, [r3, #26]
 8006af8:	f003 0308 	and.w	r3, r3, #8
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d009      	beq.n	8006b14 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	8b5b      	ldrh	r3, [r3, #26]
 8006b04:	f023 0308 	bic.w	r3, r3, #8
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f7ff fa78 	bl	8006004 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00a      	beq.n	8006b38 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8006b22:	4b0e      	ldr	r3, [pc, #56]	; (8006b5c <tcp_fasttmr+0xc4>)
 8006b24:	2200      	movs	r2, #0
 8006b26:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 f819 	bl	8006b60 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8006b2e:	4b0b      	ldr	r3, [pc, #44]	; (8006b5c <tcp_fasttmr+0xc4>)
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d000      	beq.n	8006b38 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8006b36:	e7b8      	b.n	8006aaa <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	607b      	str	r3, [r7, #4]
 8006b3c:	e002      	b.n	8006b44 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1b3      	bne.n	8006ab2 <tcp_fasttmr+0x1a>
    }
  }
}
 8006b4a:	bf00      	nop
 8006b4c:	bf00      	nop
 8006b4e:	3708      	adds	r7, #8
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	200000ce 	.word	0x200000ce
 8006b58:	20008b00 	.word	0x20008b00
 8006b5c:	20008afc 	.word	0x20008afc

08006b60 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8006b60:	b590      	push	{r4, r7, lr}
 8006b62:	b085      	sub	sp, #20
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d109      	bne.n	8006b82 <tcp_process_refused_data+0x22>
 8006b6e:	4b37      	ldr	r3, [pc, #220]	; (8006c4c <tcp_process_refused_data+0xec>)
 8006b70:	f240 6209 	movw	r2, #1545	; 0x609
 8006b74:	4936      	ldr	r1, [pc, #216]	; (8006c50 <tcp_process_refused_data+0xf0>)
 8006b76:	4837      	ldr	r0, [pc, #220]	; (8006c54 <tcp_process_refused_data+0xf4>)
 8006b78:	f007 fb6c 	bl	800e254 <iprintf>
 8006b7c:	f06f 030f 	mvn.w	r3, #15
 8006b80:	e060      	b.n	8006c44 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b86:	7b5b      	ldrb	r3, [r3, #13]
 8006b88:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b8e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d00b      	beq.n	8006bb8 <tcp_process_refused_data+0x58>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6918      	ldr	r0, [r3, #16]
 8006baa:	2300      	movs	r3, #0
 8006bac:	68ba      	ldr	r2, [r7, #8]
 8006bae:	6879      	ldr	r1, [r7, #4]
 8006bb0:	47a0      	blx	r4
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	73fb      	strb	r3, [r7, #15]
 8006bb6:	e007      	b.n	8006bc8 <tcp_process_refused_data+0x68>
 8006bb8:	2300      	movs	r3, #0
 8006bba:	68ba      	ldr	r2, [r7, #8]
 8006bbc:	6879      	ldr	r1, [r7, #4]
 8006bbe:	2000      	movs	r0, #0
 8006bc0:	f000 f8a4 	bl	8006d0c <tcp_recv_null>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006bc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d12a      	bne.n	8006c26 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8006bd0:	7bbb      	ldrb	r3, [r7, #14]
 8006bd2:	f003 0320 	and.w	r3, r3, #32
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d033      	beq.n	8006c42 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bde:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006be2:	d005      	beq.n	8006bf0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006be8:	3301      	adds	r3, #1
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00b      	beq.n	8006c12 <tcp_process_refused_data+0xb2>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6918      	ldr	r0, [r3, #16]
 8006c04:	2300      	movs	r3, #0
 8006c06:	2200      	movs	r2, #0
 8006c08:	6879      	ldr	r1, [r7, #4]
 8006c0a:	47a0      	blx	r4
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	73fb      	strb	r3, [r7, #15]
 8006c10:	e001      	b.n	8006c16 <tcp_process_refused_data+0xb6>
 8006c12:	2300      	movs	r3, #0
 8006c14:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8006c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c1a:	f113 0f0d 	cmn.w	r3, #13
 8006c1e:	d110      	bne.n	8006c42 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8006c20:	f06f 030c 	mvn.w	r3, #12
 8006c24:	e00e      	b.n	8006c44 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8006c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c2a:	f113 0f0d 	cmn.w	r3, #13
 8006c2e:	d102      	bne.n	8006c36 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8006c30:	f06f 030c 	mvn.w	r3, #12
 8006c34:	e006      	b.n	8006c44 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	68ba      	ldr	r2, [r7, #8]
 8006c3a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8006c3c:	f06f 0304 	mvn.w	r3, #4
 8006c40:	e000      	b.n	8006c44 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3714      	adds	r7, #20
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd90      	pop	{r4, r7, pc}
 8006c4c:	08010114 	.word	0x08010114
 8006c50:	08010624 	.word	0x08010624
 8006c54:	08010158 	.word	0x08010158

08006c58 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8006c60:	e007      	b.n	8006c72 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 f80a 	bl	8006c82 <tcp_seg_free>
    seg = next;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d1f4      	bne.n	8006c62 <tcp_segs_free+0xa>
  }
}
 8006c78:	bf00      	nop
 8006c7a:	bf00      	nop
 8006c7c:	3710      	adds	r7, #16
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b082      	sub	sp, #8
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d00c      	beq.n	8006caa <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d004      	beq.n	8006ca2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f7fe fcdb 	bl	8005658 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8006ca2:	6879      	ldr	r1, [r7, #4]
 8006ca4:	2003      	movs	r0, #3
 8006ca6:	f7fd fec5 	bl	8004a34 <memp_free>
  }
}
 8006caa:	bf00      	nop
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
	...

08006cb4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d106      	bne.n	8006cd0 <tcp_seg_copy+0x1c>
 8006cc2:	4b0f      	ldr	r3, [pc, #60]	; (8006d00 <tcp_seg_copy+0x4c>)
 8006cc4:	f240 6282 	movw	r2, #1666	; 0x682
 8006cc8:	490e      	ldr	r1, [pc, #56]	; (8006d04 <tcp_seg_copy+0x50>)
 8006cca:	480f      	ldr	r0, [pc, #60]	; (8006d08 <tcp_seg_copy+0x54>)
 8006ccc:	f007 fac2 	bl	800e254 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8006cd0:	2003      	movs	r0, #3
 8006cd2:	f7fd fe63 	bl	800499c <memp_malloc>
 8006cd6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d101      	bne.n	8006ce2 <tcp_seg_copy+0x2e>
    return NULL;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	e00a      	b.n	8006cf8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8006ce2:	2210      	movs	r2, #16
 8006ce4:	6879      	ldr	r1, [r7, #4]
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	f007 fa84 	bl	800e1f4 <memcpy>
  pbuf_ref(cseg->p);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7fe fd51 	bl	8005798 <pbuf_ref>
  return cseg;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3710      	adds	r7, #16
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	08010114 	.word	0x08010114
 8006d04:	08010668 	.word	0x08010668
 8006d08:	08010158 	.word	0x08010158

08006d0c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
 8006d18:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d109      	bne.n	8006d34 <tcp_recv_null+0x28>
 8006d20:	4b12      	ldr	r3, [pc, #72]	; (8006d6c <tcp_recv_null+0x60>)
 8006d22:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8006d26:	4912      	ldr	r1, [pc, #72]	; (8006d70 <tcp_recv_null+0x64>)
 8006d28:	4812      	ldr	r0, [pc, #72]	; (8006d74 <tcp_recv_null+0x68>)
 8006d2a:	f007 fa93 	bl	800e254 <iprintf>
 8006d2e:	f06f 030f 	mvn.w	r3, #15
 8006d32:	e016      	b.n	8006d62 <tcp_recv_null+0x56>

  if (p != NULL) {
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d009      	beq.n	8006d4e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	891b      	ldrh	r3, [r3, #8]
 8006d3e:	4619      	mov	r1, r3
 8006d40:	68b8      	ldr	r0, [r7, #8]
 8006d42:	f7ff fb19 	bl	8006378 <tcp_recved>
    pbuf_free(p);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f7fe fc86 	bl	8005658 <pbuf_free>
 8006d4c:	e008      	b.n	8006d60 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8006d4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d104      	bne.n	8006d60 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8006d56:	68b8      	ldr	r0, [r7, #8]
 8006d58:	f7ff f9be 	bl	80060d8 <tcp_close>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	e000      	b.n	8006d62 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	08010114 	.word	0x08010114
 8006d70:	08010684 	.word	0x08010684
 8006d74:	08010158 	.word	0x08010158

08006d78 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b086      	sub	sp, #24
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	4603      	mov	r3, r0
 8006d80:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8006d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	db01      	blt.n	8006d8e <tcp_kill_prio+0x16>
 8006d8a:	79fb      	ldrb	r3, [r7, #7]
 8006d8c:	e000      	b.n	8006d90 <tcp_kill_prio+0x18>
 8006d8e:	237f      	movs	r3, #127	; 0x7f
 8006d90:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8006d92:	7afb      	ldrb	r3, [r7, #11]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d034      	beq.n	8006e02 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8006d98:	7afb      	ldrb	r3, [r7, #11]
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006da2:	2300      	movs	r3, #0
 8006da4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006da6:	4b19      	ldr	r3, [pc, #100]	; (8006e0c <tcp_kill_prio+0x94>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	617b      	str	r3, [r7, #20]
 8006dac:	e01f      	b.n	8006dee <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	7d5b      	ldrb	r3, [r3, #21]
 8006db2:	7afa      	ldrb	r2, [r7, #11]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d80c      	bhi.n	8006dd2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8006dbc:	7afa      	ldrb	r2, [r7, #11]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d112      	bne.n	8006de8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006dc2:	4b13      	ldr	r3, [pc, #76]	; (8006e10 <tcp_kill_prio+0x98>)
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	6a1b      	ldr	r3, [r3, #32]
 8006dca:	1ad3      	subs	r3, r2, r3
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d80a      	bhi.n	8006de8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8006dd2:	4b0f      	ldr	r3, [pc, #60]	; (8006e10 <tcp_kill_prio+0x98>)
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	6a1b      	ldr	r3, [r3, #32]
 8006dda:	1ad3      	subs	r3, r2, r3
 8006ddc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	7d5b      	ldrb	r3, [r3, #21]
 8006de6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	617b      	str	r3, [r7, #20]
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d1dc      	bne.n	8006dae <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d004      	beq.n	8006e04 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006dfa:	6938      	ldr	r0, [r7, #16]
 8006dfc:	f7ff fa56 	bl	80062ac <tcp_abort>
 8006e00:	e000      	b.n	8006e04 <tcp_kill_prio+0x8c>
    return;
 8006e02:	bf00      	nop
  }
}
 8006e04:	3718      	adds	r7, #24
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	20008b00 	.word	0x20008b00
 8006e10:	20008b04 	.word	0x20008b04

08006e14 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b086      	sub	sp, #24
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8006e1e:	79fb      	ldrb	r3, [r7, #7]
 8006e20:	2b08      	cmp	r3, #8
 8006e22:	d009      	beq.n	8006e38 <tcp_kill_state+0x24>
 8006e24:	79fb      	ldrb	r3, [r7, #7]
 8006e26:	2b09      	cmp	r3, #9
 8006e28:	d006      	beq.n	8006e38 <tcp_kill_state+0x24>
 8006e2a:	4b1a      	ldr	r3, [pc, #104]	; (8006e94 <tcp_kill_state+0x80>)
 8006e2c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8006e30:	4919      	ldr	r1, [pc, #100]	; (8006e98 <tcp_kill_state+0x84>)
 8006e32:	481a      	ldr	r0, [pc, #104]	; (8006e9c <tcp_kill_state+0x88>)
 8006e34:	f007 fa0e 	bl	800e254 <iprintf>

  inactivity = 0;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006e40:	4b17      	ldr	r3, [pc, #92]	; (8006ea0 <tcp_kill_state+0x8c>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	617b      	str	r3, [r7, #20]
 8006e46:	e017      	b.n	8006e78 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	7d1b      	ldrb	r3, [r3, #20]
 8006e4c:	79fa      	ldrb	r2, [r7, #7]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d10f      	bne.n	8006e72 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006e52:	4b14      	ldr	r3, [pc, #80]	; (8006ea4 <tcp_kill_state+0x90>)
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	6a1b      	ldr	r3, [r3, #32]
 8006e5a:	1ad3      	subs	r3, r2, r3
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d807      	bhi.n	8006e72 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8006e62:	4b10      	ldr	r3, [pc, #64]	; (8006ea4 <tcp_kill_state+0x90>)
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	6a1b      	ldr	r3, [r3, #32]
 8006e6a:	1ad3      	subs	r3, r2, r3
 8006e6c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	617b      	str	r3, [r7, #20]
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d1e4      	bne.n	8006e48 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d003      	beq.n	8006e8c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8006e84:	2100      	movs	r1, #0
 8006e86:	6938      	ldr	r0, [r7, #16]
 8006e88:	f7ff f952 	bl	8006130 <tcp_abandon>
  }
}
 8006e8c:	bf00      	nop
 8006e8e:	3718      	adds	r7, #24
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	08010114 	.word	0x08010114
 8006e98:	080106a0 	.word	0x080106a0
 8006e9c:	08010158 	.word	0x08010158
 8006ea0:	20008b00 	.word	0x20008b00
 8006ea4:	20008b04 	.word	0x20008b04

08006ea8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006eb6:	4b12      	ldr	r3, [pc, #72]	; (8006f00 <tcp_kill_timewait+0x58>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	60fb      	str	r3, [r7, #12]
 8006ebc:	e012      	b.n	8006ee4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006ebe:	4b11      	ldr	r3, [pc, #68]	; (8006f04 <tcp_kill_timewait+0x5c>)
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6a1b      	ldr	r3, [r3, #32]
 8006ec6:	1ad3      	subs	r3, r2, r3
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d807      	bhi.n	8006ede <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8006ece:	4b0d      	ldr	r3, [pc, #52]	; (8006f04 <tcp_kill_timewait+0x5c>)
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6a1b      	ldr	r3, [r3, #32]
 8006ed6:	1ad3      	subs	r3, r2, r3
 8006ed8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	60fb      	str	r3, [r7, #12]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d1e9      	bne.n	8006ebe <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d002      	beq.n	8006ef6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006ef0:	68b8      	ldr	r0, [r7, #8]
 8006ef2:	f7ff f9db 	bl	80062ac <tcp_abort>
  }
}
 8006ef6:	bf00      	nop
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	20008b10 	.word	0x20008b10
 8006f04:	20008b04 	.word	0x20008b04

08006f08 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8006f0e:	4b10      	ldr	r3, [pc, #64]	; (8006f50 <tcp_handle_closepend+0x48>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006f14:	e014      	b.n	8006f40 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	8b5b      	ldrh	r3, [r3, #26]
 8006f20:	f003 0308 	and.w	r3, r3, #8
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d009      	beq.n	8006f3c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	8b5b      	ldrh	r3, [r3, #26]
 8006f2c:	f023 0308 	bic.w	r3, r3, #8
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f7ff f864 	bl	8006004 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1e7      	bne.n	8006f16 <tcp_handle_closepend+0xe>
  }
}
 8006f46:	bf00      	nop
 8006f48:	bf00      	nop
 8006f4a:	3708      	adds	r7, #8
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	20008b00 	.word	0x20008b00

08006f54 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006f5e:	2001      	movs	r0, #1
 8006f60:	f7fd fd1c 	bl	800499c <memp_malloc>
 8006f64:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d126      	bne.n	8006fba <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8006f6c:	f7ff ffcc 	bl	8006f08 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8006f70:	f7ff ff9a 	bl	8006ea8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006f74:	2001      	movs	r0, #1
 8006f76:	f7fd fd11 	bl	800499c <memp_malloc>
 8006f7a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d11b      	bne.n	8006fba <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8006f82:	2009      	movs	r0, #9
 8006f84:	f7ff ff46 	bl	8006e14 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006f88:	2001      	movs	r0, #1
 8006f8a:	f7fd fd07 	bl	800499c <memp_malloc>
 8006f8e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d111      	bne.n	8006fba <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8006f96:	2008      	movs	r0, #8
 8006f98:	f7ff ff3c 	bl	8006e14 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006f9c:	2001      	movs	r0, #1
 8006f9e:	f7fd fcfd 	bl	800499c <memp_malloc>
 8006fa2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d107      	bne.n	8006fba <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8006faa:	79fb      	ldrb	r3, [r7, #7]
 8006fac:	4618      	mov	r0, r3
 8006fae:	f7ff fee3 	bl	8006d78 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006fb2:	2001      	movs	r0, #1
 8006fb4:	f7fd fcf2 	bl	800499c <memp_malloc>
 8006fb8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d03f      	beq.n	8007040 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8006fc0:	229c      	movs	r2, #156	; 0x9c
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	68f8      	ldr	r0, [r7, #12]
 8006fc6:	f007 f93d 	bl	800e244 <memset>
    pcb->prio = prio;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	79fa      	ldrb	r2, [r7, #7]
 8006fce:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8006fd6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006fe0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	22ff      	movs	r2, #255	; 0xff
 8006fee:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f44f 7206 	mov.w	r2, #536	; 0x218
 8006ff6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2206      	movs	r2, #6
 8006ffc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2206      	movs	r2, #6
 8007004:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800700c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2201      	movs	r2, #1
 8007012:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8007016:	4b0d      	ldr	r3, [pc, #52]	; (800704c <tcp_alloc+0xf8>)
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800701e:	4b0c      	ldr	r3, [pc, #48]	; (8007050 <tcp_alloc+0xfc>)
 8007020:	781a      	ldrb	r2, [r3, #0]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800702c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	4a08      	ldr	r2, [pc, #32]	; (8007054 <tcp_alloc+0x100>)
 8007034:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	4a07      	ldr	r2, [pc, #28]	; (8007058 <tcp_alloc+0x104>)
 800703c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007040:	68fb      	ldr	r3, [r7, #12]
}
 8007042:	4618      	mov	r0, r3
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	20008b04 	.word	0x20008b04
 8007050:	200000ce 	.word	0x200000ce
 8007054:	08006d0d 	.word	0x08006d0d
 8007058:	006ddd00 	.word	0x006ddd00

0800705c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d107      	bne.n	800707a <tcp_pcb_purge+0x1e>
 800706a:	4b21      	ldr	r3, [pc, #132]	; (80070f0 <tcp_pcb_purge+0x94>)
 800706c:	f640 0251 	movw	r2, #2129	; 0x851
 8007070:	4920      	ldr	r1, [pc, #128]	; (80070f4 <tcp_pcb_purge+0x98>)
 8007072:	4821      	ldr	r0, [pc, #132]	; (80070f8 <tcp_pcb_purge+0x9c>)
 8007074:	f007 f8ee 	bl	800e254 <iprintf>
 8007078:	e037      	b.n	80070ea <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	7d1b      	ldrb	r3, [r3, #20]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d033      	beq.n	80070ea <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8007086:	2b0a      	cmp	r3, #10
 8007088:	d02f      	beq.n	80070ea <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800708e:	2b01      	cmp	r3, #1
 8007090:	d02b      	beq.n	80070ea <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007096:	2b00      	cmp	r3, #0
 8007098:	d007      	beq.n	80070aa <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800709e:	4618      	mov	r0, r3
 80070a0:	f7fe fada 	bl	8005658 <pbuf_free>
      pcb->refused_data = NULL;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d002      	beq.n	80070b8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 f986 	bl	80073c4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80070be:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070c4:	4618      	mov	r0, r3
 80070c6:	f7ff fdc7 	bl	8006c58 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7ff fdc2 	bl	8006c58 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	66da      	str	r2, [r3, #108]	; 0x6c
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80070ea:	3708      	adds	r7, #8
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	08010114 	.word	0x08010114
 80070f4:	08010760 	.word	0x08010760
 80070f8:	08010158 	.word	0x08010158

080070fc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d106      	bne.n	800711a <tcp_pcb_remove+0x1e>
 800710c:	4b3e      	ldr	r3, [pc, #248]	; (8007208 <tcp_pcb_remove+0x10c>)
 800710e:	f640 0283 	movw	r2, #2179	; 0x883
 8007112:	493e      	ldr	r1, [pc, #248]	; (800720c <tcp_pcb_remove+0x110>)
 8007114:	483e      	ldr	r0, [pc, #248]	; (8007210 <tcp_pcb_remove+0x114>)
 8007116:	f007 f89d 	bl	800e254 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d106      	bne.n	800712e <tcp_pcb_remove+0x32>
 8007120:	4b39      	ldr	r3, [pc, #228]	; (8007208 <tcp_pcb_remove+0x10c>)
 8007122:	f640 0284 	movw	r2, #2180	; 0x884
 8007126:	493b      	ldr	r1, [pc, #236]	; (8007214 <tcp_pcb_remove+0x118>)
 8007128:	4839      	ldr	r0, [pc, #228]	; (8007210 <tcp_pcb_remove+0x114>)
 800712a:	f007 f893 	bl	800e254 <iprintf>

  TCP_RMV(pcblist, pcb);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	683a      	ldr	r2, [r7, #0]
 8007134:	429a      	cmp	r2, r3
 8007136:	d105      	bne.n	8007144 <tcp_pcb_remove+0x48>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68da      	ldr	r2, [r3, #12]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	601a      	str	r2, [r3, #0]
 8007142:	e013      	b.n	800716c <tcp_pcb_remove+0x70>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	60fb      	str	r3, [r7, #12]
 800714a:	e00c      	b.n	8007166 <tcp_pcb_remove+0x6a>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	683a      	ldr	r2, [r7, #0]
 8007152:	429a      	cmp	r2, r3
 8007154:	d104      	bne.n	8007160 <tcp_pcb_remove+0x64>
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	68da      	ldr	r2, [r3, #12]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	60da      	str	r2, [r3, #12]
 800715e:	e005      	b.n	800716c <tcp_pcb_remove+0x70>
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	60fb      	str	r3, [r7, #12]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d1ef      	bne.n	800714c <tcp_pcb_remove+0x50>
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	2200      	movs	r2, #0
 8007170:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8007172:	6838      	ldr	r0, [r7, #0]
 8007174:	f7ff ff72 	bl	800705c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	7d1b      	ldrb	r3, [r3, #20]
 800717c:	2b0a      	cmp	r3, #10
 800717e:	d013      	beq.n	80071a8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8007184:	2b01      	cmp	r3, #1
 8007186:	d00f      	beq.n	80071a8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	8b5b      	ldrh	r3, [r3, #26]
 800718c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8007190:	2b00      	cmp	r3, #0
 8007192:	d009      	beq.n	80071a8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	8b5b      	ldrh	r3, [r3, #26]
 8007198:	f043 0302 	orr.w	r3, r3, #2
 800719c:	b29a      	uxth	r2, r3
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80071a2:	6838      	ldr	r0, [r7, #0]
 80071a4:	f002 ff6a 	bl	800a07c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	7d1b      	ldrb	r3, [r3, #20]
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d020      	beq.n	80071f2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d006      	beq.n	80071c6 <tcp_pcb_remove+0xca>
 80071b8:	4b13      	ldr	r3, [pc, #76]	; (8007208 <tcp_pcb_remove+0x10c>)
 80071ba:	f640 0293 	movw	r2, #2195	; 0x893
 80071be:	4916      	ldr	r1, [pc, #88]	; (8007218 <tcp_pcb_remove+0x11c>)
 80071c0:	4813      	ldr	r0, [pc, #76]	; (8007210 <tcp_pcb_remove+0x114>)
 80071c2:	f007 f847 	bl	800e254 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d006      	beq.n	80071dc <tcp_pcb_remove+0xe0>
 80071ce:	4b0e      	ldr	r3, [pc, #56]	; (8007208 <tcp_pcb_remove+0x10c>)
 80071d0:	f640 0294 	movw	r2, #2196	; 0x894
 80071d4:	4911      	ldr	r1, [pc, #68]	; (800721c <tcp_pcb_remove+0x120>)
 80071d6:	480e      	ldr	r0, [pc, #56]	; (8007210 <tcp_pcb_remove+0x114>)
 80071d8:	f007 f83c 	bl	800e254 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d006      	beq.n	80071f2 <tcp_pcb_remove+0xf6>
 80071e4:	4b08      	ldr	r3, [pc, #32]	; (8007208 <tcp_pcb_remove+0x10c>)
 80071e6:	f640 0296 	movw	r2, #2198	; 0x896
 80071ea:	490d      	ldr	r1, [pc, #52]	; (8007220 <tcp_pcb_remove+0x124>)
 80071ec:	4808      	ldr	r0, [pc, #32]	; (8007210 <tcp_pcb_remove+0x114>)
 80071ee:	f007 f831 	bl	800e254 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	2200      	movs	r2, #0
 80071f6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	2200      	movs	r2, #0
 80071fc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80071fe:	bf00      	nop
 8007200:	3710      	adds	r7, #16
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	08010114 	.word	0x08010114
 800720c:	0801077c 	.word	0x0801077c
 8007210:	08010158 	.word	0x08010158
 8007214:	08010798 	.word	0x08010798
 8007218:	080107b8 	.word	0x080107b8
 800721c:	080107d0 	.word	0x080107d0
 8007220:	080107ec 	.word	0x080107ec

08007224 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d106      	bne.n	8007240 <tcp_next_iss+0x1c>
 8007232:	4b0a      	ldr	r3, [pc, #40]	; (800725c <tcp_next_iss+0x38>)
 8007234:	f640 02af 	movw	r2, #2223	; 0x8af
 8007238:	4909      	ldr	r1, [pc, #36]	; (8007260 <tcp_next_iss+0x3c>)
 800723a:	480a      	ldr	r0, [pc, #40]	; (8007264 <tcp_next_iss+0x40>)
 800723c:	f007 f80a 	bl	800e254 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8007240:	4b09      	ldr	r3, [pc, #36]	; (8007268 <tcp_next_iss+0x44>)
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	4b09      	ldr	r3, [pc, #36]	; (800726c <tcp_next_iss+0x48>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4413      	add	r3, r2
 800724a:	4a07      	ldr	r2, [pc, #28]	; (8007268 <tcp_next_iss+0x44>)
 800724c:	6013      	str	r3, [r2, #0]
  return iss;
 800724e:	4b06      	ldr	r3, [pc, #24]	; (8007268 <tcp_next_iss+0x44>)
 8007250:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8007252:	4618      	mov	r0, r3
 8007254:	3708      	adds	r7, #8
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	08010114 	.word	0x08010114
 8007260:	08010804 	.word	0x08010804
 8007264:	08010158 	.word	0x08010158
 8007268:	2000000c 	.word	0x2000000c
 800726c:	20008b04 	.word	0x20008b04

08007270 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b086      	sub	sp, #24
 8007274:	af00      	add	r7, sp, #0
 8007276:	4603      	mov	r3, r0
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	607a      	str	r2, [r7, #4]
 800727c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d106      	bne.n	8007292 <tcp_eff_send_mss_netif+0x22>
 8007284:	4b14      	ldr	r3, [pc, #80]	; (80072d8 <tcp_eff_send_mss_netif+0x68>)
 8007286:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800728a:	4914      	ldr	r1, [pc, #80]	; (80072dc <tcp_eff_send_mss_netif+0x6c>)
 800728c:	4814      	ldr	r0, [pc, #80]	; (80072e0 <tcp_eff_send_mss_netif+0x70>)
 800728e:	f006 ffe1 	bl	800e254 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d101      	bne.n	800729c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8007298:	89fb      	ldrh	r3, [r7, #14]
 800729a:	e019      	b.n	80072d0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80072a0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80072a2:	8afb      	ldrh	r3, [r7, #22]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d012      	beq.n	80072ce <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80072a8:	2328      	movs	r3, #40	; 0x28
 80072aa:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80072ac:	8afa      	ldrh	r2, [r7, #22]
 80072ae:	8abb      	ldrh	r3, [r7, #20]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d904      	bls.n	80072be <tcp_eff_send_mss_netif+0x4e>
 80072b4:	8afa      	ldrh	r2, [r7, #22]
 80072b6:	8abb      	ldrh	r3, [r7, #20]
 80072b8:	1ad3      	subs	r3, r2, r3
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	e000      	b.n	80072c0 <tcp_eff_send_mss_netif+0x50>
 80072be:	2300      	movs	r3, #0
 80072c0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80072c2:	8a7a      	ldrh	r2, [r7, #18]
 80072c4:	89fb      	ldrh	r3, [r7, #14]
 80072c6:	4293      	cmp	r3, r2
 80072c8:	bf28      	it	cs
 80072ca:	4613      	movcs	r3, r2
 80072cc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80072ce:	89fb      	ldrh	r3, [r7, #14]
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3718      	adds	r7, #24
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}
 80072d8:	08010114 	.word	0x08010114
 80072dc:	08010820 	.word	0x08010820
 80072e0:	08010158 	.word	0x08010158

080072e4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d119      	bne.n	800732c <tcp_netif_ip_addr_changed_pcblist+0x48>
 80072f8:	4b10      	ldr	r3, [pc, #64]	; (800733c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80072fa:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80072fe:	4910      	ldr	r1, [pc, #64]	; (8007340 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8007300:	4810      	ldr	r0, [pc, #64]	; (8007344 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8007302:	f006 ffa7 	bl	800e254 <iprintf>

  while (pcb != NULL) {
 8007306:	e011      	b.n	800732c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	429a      	cmp	r2, r3
 8007312:	d108      	bne.n	8007326 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800731a:	68f8      	ldr	r0, [r7, #12]
 800731c:	f7fe ffc6 	bl	80062ac <tcp_abort>
      pcb = next;
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	60fb      	str	r3, [r7, #12]
 8007324:	e002      	b.n	800732c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1ea      	bne.n	8007308 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8007332:	bf00      	nop
 8007334:	bf00      	nop
 8007336:	3710      	adds	r7, #16
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}
 800733c:	08010114 	.word	0x08010114
 8007340:	08010848 	.word	0x08010848
 8007344:	08010158 	.word	0x08010158

08007348 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d02a      	beq.n	80073ae <tcp_netif_ip_addr_changed+0x66>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d026      	beq.n	80073ae <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007360:	4b15      	ldr	r3, [pc, #84]	; (80073b8 <tcp_netif_ip_addr_changed+0x70>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4619      	mov	r1, r3
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f7ff ffbc 	bl	80072e4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800736c:	4b13      	ldr	r3, [pc, #76]	; (80073bc <tcp_netif_ip_addr_changed+0x74>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4619      	mov	r1, r3
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f7ff ffb6 	bl	80072e4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d017      	beq.n	80073ae <tcp_netif_ip_addr_changed+0x66>
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d013      	beq.n	80073ae <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007386:	4b0e      	ldr	r3, [pc, #56]	; (80073c0 <tcp_netif_ip_addr_changed+0x78>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	60fb      	str	r3, [r7, #12]
 800738c:	e00c      	b.n	80073a8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	429a      	cmp	r2, r3
 8007398:	d103      	bne.n	80073a2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	60fb      	str	r3, [r7, #12]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d1ef      	bne.n	800738e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80073ae:	bf00      	nop
 80073b0:	3710      	adds	r7, #16
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	bf00      	nop
 80073b8:	20008b00 	.word	0x20008b00
 80073bc:	20008b0c 	.word	0x20008b0c
 80073c0:	20008b08 	.word	0x20008b08

080073c4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d007      	beq.n	80073e4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073d8:	4618      	mov	r0, r3
 80073da:	f7ff fc3d 	bl	8006c58 <tcp_segs_free>
    pcb->ooseq = NULL;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80073e4:	bf00      	nop
 80073e6:	3708      	adds	r7, #8
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80073ec:	b590      	push	{r4, r7, lr}
 80073ee:	b08d      	sub	sp, #52	; 0x34
 80073f0:	af04      	add	r7, sp, #16
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d105      	bne.n	8007408 <tcp_input+0x1c>
 80073fc:	4b9b      	ldr	r3, [pc, #620]	; (800766c <tcp_input+0x280>)
 80073fe:	2283      	movs	r2, #131	; 0x83
 8007400:	499b      	ldr	r1, [pc, #620]	; (8007670 <tcp_input+0x284>)
 8007402:	489c      	ldr	r0, [pc, #624]	; (8007674 <tcp_input+0x288>)
 8007404:	f006 ff26 	bl	800e254 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	4a9a      	ldr	r2, [pc, #616]	; (8007678 <tcp_input+0x28c>)
 800740e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	895b      	ldrh	r3, [r3, #10]
 8007414:	2b13      	cmp	r3, #19
 8007416:	f240 83c4 	bls.w	8007ba2 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800741a:	4b98      	ldr	r3, [pc, #608]	; (800767c <tcp_input+0x290>)
 800741c:	695b      	ldr	r3, [r3, #20]
 800741e:	4a97      	ldr	r2, [pc, #604]	; (800767c <tcp_input+0x290>)
 8007420:	6812      	ldr	r2, [r2, #0]
 8007422:	4611      	mov	r1, r2
 8007424:	4618      	mov	r0, r3
 8007426:	f005 ff63 	bl	800d2f0 <ip4_addr_isbroadcast_u32>
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	f040 83ba 	bne.w	8007ba6 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8007432:	4b92      	ldr	r3, [pc, #584]	; (800767c <tcp_input+0x290>)
 8007434:	695b      	ldr	r3, [r3, #20]
 8007436:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800743a:	2be0      	cmp	r3, #224	; 0xe0
 800743c:	f000 83b3 	beq.w	8007ba6 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8007440:	4b8d      	ldr	r3, [pc, #564]	; (8007678 <tcp_input+0x28c>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	899b      	ldrh	r3, [r3, #12]
 8007446:	b29b      	uxth	r3, r3
 8007448:	4618      	mov	r0, r3
 800744a:	f7fc fe51 	bl	80040f0 <lwip_htons>
 800744e:	4603      	mov	r3, r0
 8007450:	0b1b      	lsrs	r3, r3, #12
 8007452:	b29b      	uxth	r3, r3
 8007454:	b2db      	uxtb	r3, r3
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800745a:	7cbb      	ldrb	r3, [r7, #18]
 800745c:	2b13      	cmp	r3, #19
 800745e:	f240 83a4 	bls.w	8007baa <tcp_input+0x7be>
 8007462:	7cbb      	ldrb	r3, [r7, #18]
 8007464:	b29a      	uxth	r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	891b      	ldrh	r3, [r3, #8]
 800746a:	429a      	cmp	r2, r3
 800746c:	f200 839d 	bhi.w	8007baa <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8007470:	7cbb      	ldrb	r3, [r7, #18]
 8007472:	b29b      	uxth	r3, r3
 8007474:	3b14      	subs	r3, #20
 8007476:	b29a      	uxth	r2, r3
 8007478:	4b81      	ldr	r3, [pc, #516]	; (8007680 <tcp_input+0x294>)
 800747a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800747c:	4b81      	ldr	r3, [pc, #516]	; (8007684 <tcp_input+0x298>)
 800747e:	2200      	movs	r2, #0
 8007480:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	895a      	ldrh	r2, [r3, #10]
 8007486:	7cbb      	ldrb	r3, [r7, #18]
 8007488:	b29b      	uxth	r3, r3
 800748a:	429a      	cmp	r2, r3
 800748c:	d309      	bcc.n	80074a2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800748e:	4b7c      	ldr	r3, [pc, #496]	; (8007680 <tcp_input+0x294>)
 8007490:	881a      	ldrh	r2, [r3, #0]
 8007492:	4b7d      	ldr	r3, [pc, #500]	; (8007688 <tcp_input+0x29c>)
 8007494:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8007496:	7cbb      	ldrb	r3, [r7, #18]
 8007498:	4619      	mov	r1, r3
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f7fe f856 	bl	800554c <pbuf_remove_header>
 80074a0:	e04e      	b.n	8007540 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d105      	bne.n	80074b6 <tcp_input+0xca>
 80074aa:	4b70      	ldr	r3, [pc, #448]	; (800766c <tcp_input+0x280>)
 80074ac:	22c2      	movs	r2, #194	; 0xc2
 80074ae:	4977      	ldr	r1, [pc, #476]	; (800768c <tcp_input+0x2a0>)
 80074b0:	4870      	ldr	r0, [pc, #448]	; (8007674 <tcp_input+0x288>)
 80074b2:	f006 fecf 	bl	800e254 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80074b6:	2114      	movs	r1, #20
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f7fe f847 	bl	800554c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	895a      	ldrh	r2, [r3, #10]
 80074c2:	4b71      	ldr	r3, [pc, #452]	; (8007688 <tcp_input+0x29c>)
 80074c4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80074c6:	4b6e      	ldr	r3, [pc, #440]	; (8007680 <tcp_input+0x294>)
 80074c8:	881a      	ldrh	r2, [r3, #0]
 80074ca:	4b6f      	ldr	r3, [pc, #444]	; (8007688 <tcp_input+0x29c>)
 80074cc:	881b      	ldrh	r3, [r3, #0]
 80074ce:	1ad3      	subs	r3, r2, r3
 80074d0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80074d2:	4b6d      	ldr	r3, [pc, #436]	; (8007688 <tcp_input+0x29c>)
 80074d4:	881b      	ldrh	r3, [r3, #0]
 80074d6:	4619      	mov	r1, r3
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f7fe f837 	bl	800554c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	895b      	ldrh	r3, [r3, #10]
 80074e4:	8a3a      	ldrh	r2, [r7, #16]
 80074e6:	429a      	cmp	r2, r3
 80074e8:	f200 8361 	bhi.w	8007bae <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	4a64      	ldr	r2, [pc, #400]	; (8007684 <tcp_input+0x298>)
 80074f4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	8a3a      	ldrh	r2, [r7, #16]
 80074fc:	4611      	mov	r1, r2
 80074fe:	4618      	mov	r0, r3
 8007500:	f7fe f824 	bl	800554c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	891a      	ldrh	r2, [r3, #8]
 8007508:	8a3b      	ldrh	r3, [r7, #16]
 800750a:	1ad3      	subs	r3, r2, r3
 800750c:	b29a      	uxth	r2, r3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	895b      	ldrh	r3, [r3, #10]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d005      	beq.n	8007526 <tcp_input+0x13a>
 800751a:	4b54      	ldr	r3, [pc, #336]	; (800766c <tcp_input+0x280>)
 800751c:	22df      	movs	r2, #223	; 0xdf
 800751e:	495c      	ldr	r1, [pc, #368]	; (8007690 <tcp_input+0x2a4>)
 8007520:	4854      	ldr	r0, [pc, #336]	; (8007674 <tcp_input+0x288>)
 8007522:	f006 fe97 	bl	800e254 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	891a      	ldrh	r2, [r3, #8]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	891b      	ldrh	r3, [r3, #8]
 8007530:	429a      	cmp	r2, r3
 8007532:	d005      	beq.n	8007540 <tcp_input+0x154>
 8007534:	4b4d      	ldr	r3, [pc, #308]	; (800766c <tcp_input+0x280>)
 8007536:	22e0      	movs	r2, #224	; 0xe0
 8007538:	4956      	ldr	r1, [pc, #344]	; (8007694 <tcp_input+0x2a8>)
 800753a:	484e      	ldr	r0, [pc, #312]	; (8007674 <tcp_input+0x288>)
 800753c:	f006 fe8a 	bl	800e254 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007540:	4b4d      	ldr	r3, [pc, #308]	; (8007678 <tcp_input+0x28c>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	881b      	ldrh	r3, [r3, #0]
 8007546:	b29b      	uxth	r3, r3
 8007548:	4a4b      	ldr	r2, [pc, #300]	; (8007678 <tcp_input+0x28c>)
 800754a:	6814      	ldr	r4, [r2, #0]
 800754c:	4618      	mov	r0, r3
 800754e:	f7fc fdcf 	bl	80040f0 <lwip_htons>
 8007552:	4603      	mov	r3, r0
 8007554:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8007556:	4b48      	ldr	r3, [pc, #288]	; (8007678 <tcp_input+0x28c>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	885b      	ldrh	r3, [r3, #2]
 800755c:	b29b      	uxth	r3, r3
 800755e:	4a46      	ldr	r2, [pc, #280]	; (8007678 <tcp_input+0x28c>)
 8007560:	6814      	ldr	r4, [r2, #0]
 8007562:	4618      	mov	r0, r3
 8007564:	f7fc fdc4 	bl	80040f0 <lwip_htons>
 8007568:	4603      	mov	r3, r0
 800756a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800756c:	4b42      	ldr	r3, [pc, #264]	; (8007678 <tcp_input+0x28c>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	4a41      	ldr	r2, [pc, #260]	; (8007678 <tcp_input+0x28c>)
 8007574:	6814      	ldr	r4, [r2, #0]
 8007576:	4618      	mov	r0, r3
 8007578:	f7fc fdcf 	bl	800411a <lwip_htonl>
 800757c:	4603      	mov	r3, r0
 800757e:	6063      	str	r3, [r4, #4]
 8007580:	6863      	ldr	r3, [r4, #4]
 8007582:	4a45      	ldr	r2, [pc, #276]	; (8007698 <tcp_input+0x2ac>)
 8007584:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007586:	4b3c      	ldr	r3, [pc, #240]	; (8007678 <tcp_input+0x28c>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	4a3a      	ldr	r2, [pc, #232]	; (8007678 <tcp_input+0x28c>)
 800758e:	6814      	ldr	r4, [r2, #0]
 8007590:	4618      	mov	r0, r3
 8007592:	f7fc fdc2 	bl	800411a <lwip_htonl>
 8007596:	4603      	mov	r3, r0
 8007598:	60a3      	str	r3, [r4, #8]
 800759a:	68a3      	ldr	r3, [r4, #8]
 800759c:	4a3f      	ldr	r2, [pc, #252]	; (800769c <tcp_input+0x2b0>)
 800759e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80075a0:	4b35      	ldr	r3, [pc, #212]	; (8007678 <tcp_input+0x28c>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	89db      	ldrh	r3, [r3, #14]
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	4a33      	ldr	r2, [pc, #204]	; (8007678 <tcp_input+0x28c>)
 80075aa:	6814      	ldr	r4, [r2, #0]
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7fc fd9f 	bl	80040f0 <lwip_htons>
 80075b2:	4603      	mov	r3, r0
 80075b4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80075b6:	4b30      	ldr	r3, [pc, #192]	; (8007678 <tcp_input+0x28c>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	899b      	ldrh	r3, [r3, #12]
 80075bc:	b29b      	uxth	r3, r3
 80075be:	4618      	mov	r0, r3
 80075c0:	f7fc fd96 	bl	80040f0 <lwip_htons>
 80075c4:	4603      	mov	r3, r0
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075cc:	b2da      	uxtb	r2, r3
 80075ce:	4b34      	ldr	r3, [pc, #208]	; (80076a0 <tcp_input+0x2b4>)
 80075d0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	891a      	ldrh	r2, [r3, #8]
 80075d6:	4b33      	ldr	r3, [pc, #204]	; (80076a4 <tcp_input+0x2b8>)
 80075d8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80075da:	4b31      	ldr	r3, [pc, #196]	; (80076a0 <tcp_input+0x2b4>)
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	f003 0303 	and.w	r3, r3, #3
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00c      	beq.n	8007600 <tcp_input+0x214>
    tcplen++;
 80075e6:	4b2f      	ldr	r3, [pc, #188]	; (80076a4 <tcp_input+0x2b8>)
 80075e8:	881b      	ldrh	r3, [r3, #0]
 80075ea:	3301      	adds	r3, #1
 80075ec:	b29a      	uxth	r2, r3
 80075ee:	4b2d      	ldr	r3, [pc, #180]	; (80076a4 <tcp_input+0x2b8>)
 80075f0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	891a      	ldrh	r2, [r3, #8]
 80075f6:	4b2b      	ldr	r3, [pc, #172]	; (80076a4 <tcp_input+0x2b8>)
 80075f8:	881b      	ldrh	r3, [r3, #0]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	f200 82d9 	bhi.w	8007bb2 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8007600:	2300      	movs	r3, #0
 8007602:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007604:	4b28      	ldr	r3, [pc, #160]	; (80076a8 <tcp_input+0x2bc>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	61fb      	str	r3, [r7, #28]
 800760a:	e09d      	b.n	8007748 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	7d1b      	ldrb	r3, [r3, #20]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d105      	bne.n	8007620 <tcp_input+0x234>
 8007614:	4b15      	ldr	r3, [pc, #84]	; (800766c <tcp_input+0x280>)
 8007616:	22fb      	movs	r2, #251	; 0xfb
 8007618:	4924      	ldr	r1, [pc, #144]	; (80076ac <tcp_input+0x2c0>)
 800761a:	4816      	ldr	r0, [pc, #88]	; (8007674 <tcp_input+0x288>)
 800761c:	f006 fe1a 	bl	800e254 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	7d1b      	ldrb	r3, [r3, #20]
 8007624:	2b0a      	cmp	r3, #10
 8007626:	d105      	bne.n	8007634 <tcp_input+0x248>
 8007628:	4b10      	ldr	r3, [pc, #64]	; (800766c <tcp_input+0x280>)
 800762a:	22fc      	movs	r2, #252	; 0xfc
 800762c:	4920      	ldr	r1, [pc, #128]	; (80076b0 <tcp_input+0x2c4>)
 800762e:	4811      	ldr	r0, [pc, #68]	; (8007674 <tcp_input+0x288>)
 8007630:	f006 fe10 	bl	800e254 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	7d1b      	ldrb	r3, [r3, #20]
 8007638:	2b01      	cmp	r3, #1
 800763a:	d105      	bne.n	8007648 <tcp_input+0x25c>
 800763c:	4b0b      	ldr	r3, [pc, #44]	; (800766c <tcp_input+0x280>)
 800763e:	22fd      	movs	r2, #253	; 0xfd
 8007640:	491c      	ldr	r1, [pc, #112]	; (80076b4 <tcp_input+0x2c8>)
 8007642:	480c      	ldr	r0, [pc, #48]	; (8007674 <tcp_input+0x288>)
 8007644:	f006 fe06 	bl	800e254 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	7a1b      	ldrb	r3, [r3, #8]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d033      	beq.n	80076b8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	7a1a      	ldrb	r2, [r3, #8]
 8007654:	4b09      	ldr	r3, [pc, #36]	; (800767c <tcp_input+0x290>)
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800765c:	3301      	adds	r3, #1
 800765e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007660:	429a      	cmp	r2, r3
 8007662:	d029      	beq.n	80076b8 <tcp_input+0x2cc>
      prev = pcb;
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	61bb      	str	r3, [r7, #24]
      continue;
 8007668:	e06b      	b.n	8007742 <tcp_input+0x356>
 800766a:	bf00      	nop
 800766c:	0801087c 	.word	0x0801087c
 8007670:	080108b0 	.word	0x080108b0
 8007674:	080108c8 	.word	0x080108c8
 8007678:	200000e0 	.word	0x200000e0
 800767c:	200033fc 	.word	0x200033fc
 8007680:	200000e4 	.word	0x200000e4
 8007684:	200000e8 	.word	0x200000e8
 8007688:	200000e6 	.word	0x200000e6
 800768c:	080108f0 	.word	0x080108f0
 8007690:	08010900 	.word	0x08010900
 8007694:	0801090c 	.word	0x0801090c
 8007698:	200000f0 	.word	0x200000f0
 800769c:	200000f4 	.word	0x200000f4
 80076a0:	200000fc 	.word	0x200000fc
 80076a4:	200000fa 	.word	0x200000fa
 80076a8:	20008b00 	.word	0x20008b00
 80076ac:	0801092c 	.word	0x0801092c
 80076b0:	08010954 	.word	0x08010954
 80076b4:	08010980 	.word	0x08010980
    }

    if (pcb->remote_port == tcphdr->src &&
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	8b1a      	ldrh	r2, [r3, #24]
 80076bc:	4b94      	ldr	r3, [pc, #592]	; (8007910 <tcp_input+0x524>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	881b      	ldrh	r3, [r3, #0]
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d13a      	bne.n	800773e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	8ada      	ldrh	r2, [r3, #22]
 80076cc:	4b90      	ldr	r3, [pc, #576]	; (8007910 <tcp_input+0x524>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	885b      	ldrh	r3, [r3, #2]
 80076d2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d132      	bne.n	800773e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	685a      	ldr	r2, [r3, #4]
 80076dc:	4b8d      	ldr	r3, [pc, #564]	; (8007914 <tcp_input+0x528>)
 80076de:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d12c      	bne.n	800773e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	4b8a      	ldr	r3, [pc, #552]	; (8007914 <tcp_input+0x528>)
 80076ea:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d126      	bne.n	800773e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	69fa      	ldr	r2, [r7, #28]
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d106      	bne.n	8007708 <tcp_input+0x31c>
 80076fa:	4b87      	ldr	r3, [pc, #540]	; (8007918 <tcp_input+0x52c>)
 80076fc:	f240 120d 	movw	r2, #269	; 0x10d
 8007700:	4986      	ldr	r1, [pc, #536]	; (800791c <tcp_input+0x530>)
 8007702:	4887      	ldr	r0, [pc, #540]	; (8007920 <tcp_input+0x534>)
 8007704:	f006 fda6 	bl	800e254 <iprintf>
      if (prev != NULL) {
 8007708:	69bb      	ldr	r3, [r7, #24]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d00a      	beq.n	8007724 <tcp_input+0x338>
        prev->next = pcb->next;
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	68da      	ldr	r2, [r3, #12]
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8007716:	4b83      	ldr	r3, [pc, #524]	; (8007924 <tcp_input+0x538>)
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	69fb      	ldr	r3, [r7, #28]
 800771c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800771e:	4a81      	ldr	r2, [pc, #516]	; (8007924 <tcp_input+0x538>)
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	69fa      	ldr	r2, [r7, #28]
 800772a:	429a      	cmp	r2, r3
 800772c:	d111      	bne.n	8007752 <tcp_input+0x366>
 800772e:	4b7a      	ldr	r3, [pc, #488]	; (8007918 <tcp_input+0x52c>)
 8007730:	f240 1215 	movw	r2, #277	; 0x115
 8007734:	497c      	ldr	r1, [pc, #496]	; (8007928 <tcp_input+0x53c>)
 8007736:	487a      	ldr	r0, [pc, #488]	; (8007920 <tcp_input+0x534>)
 8007738:	f006 fd8c 	bl	800e254 <iprintf>
      break;
 800773c:	e009      	b.n	8007752 <tcp_input+0x366>
    }
    prev = pcb;
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	61fb      	str	r3, [r7, #28]
 8007748:	69fb      	ldr	r3, [r7, #28]
 800774a:	2b00      	cmp	r3, #0
 800774c:	f47f af5e 	bne.w	800760c <tcp_input+0x220>
 8007750:	e000      	b.n	8007754 <tcp_input+0x368>
      break;
 8007752:	bf00      	nop
  }

  if (pcb == NULL) {
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	2b00      	cmp	r3, #0
 8007758:	f040 8095 	bne.w	8007886 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800775c:	4b73      	ldr	r3, [pc, #460]	; (800792c <tcp_input+0x540>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	61fb      	str	r3, [r7, #28]
 8007762:	e03f      	b.n	80077e4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007764:	69fb      	ldr	r3, [r7, #28]
 8007766:	7d1b      	ldrb	r3, [r3, #20]
 8007768:	2b0a      	cmp	r3, #10
 800776a:	d006      	beq.n	800777a <tcp_input+0x38e>
 800776c:	4b6a      	ldr	r3, [pc, #424]	; (8007918 <tcp_input+0x52c>)
 800776e:	f240 121f 	movw	r2, #287	; 0x11f
 8007772:	496f      	ldr	r1, [pc, #444]	; (8007930 <tcp_input+0x544>)
 8007774:	486a      	ldr	r0, [pc, #424]	; (8007920 <tcp_input+0x534>)
 8007776:	f006 fd6d 	bl	800e254 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	7a1b      	ldrb	r3, [r3, #8]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d009      	beq.n	8007796 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	7a1a      	ldrb	r2, [r3, #8]
 8007786:	4b63      	ldr	r3, [pc, #396]	; (8007914 <tcp_input+0x528>)
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800778e:	3301      	adds	r3, #1
 8007790:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007792:	429a      	cmp	r2, r3
 8007794:	d122      	bne.n	80077dc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	8b1a      	ldrh	r2, [r3, #24]
 800779a:	4b5d      	ldr	r3, [pc, #372]	; (8007910 <tcp_input+0x524>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	881b      	ldrh	r3, [r3, #0]
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d11b      	bne.n	80077de <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80077a6:	69fb      	ldr	r3, [r7, #28]
 80077a8:	8ada      	ldrh	r2, [r3, #22]
 80077aa:	4b59      	ldr	r3, [pc, #356]	; (8007910 <tcp_input+0x524>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	885b      	ldrh	r3, [r3, #2]
 80077b0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d113      	bne.n	80077de <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80077b6:	69fb      	ldr	r3, [r7, #28]
 80077b8:	685a      	ldr	r2, [r3, #4]
 80077ba:	4b56      	ldr	r3, [pc, #344]	; (8007914 <tcp_input+0x528>)
 80077bc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80077be:	429a      	cmp	r2, r3
 80077c0:	d10d      	bne.n	80077de <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	4b53      	ldr	r3, [pc, #332]	; (8007914 <tcp_input+0x528>)
 80077c8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d107      	bne.n	80077de <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80077ce:	69f8      	ldr	r0, [r7, #28]
 80077d0:	f000 fb54 	bl	8007e7c <tcp_timewait_input>
        }
        pbuf_free(p);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f7fd ff3f 	bl	8005658 <pbuf_free>
        return;
 80077da:	e1f0      	b.n	8007bbe <tcp_input+0x7d2>
        continue;
 80077dc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	61fb      	str	r3, [r7, #28]
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d1bc      	bne.n	8007764 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80077ea:	2300      	movs	r3, #0
 80077ec:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80077ee:	4b51      	ldr	r3, [pc, #324]	; (8007934 <tcp_input+0x548>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	617b      	str	r3, [r7, #20]
 80077f4:	e02a      	b.n	800784c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	7a1b      	ldrb	r3, [r3, #8]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d00c      	beq.n	8007818 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	7a1a      	ldrb	r2, [r3, #8]
 8007802:	4b44      	ldr	r3, [pc, #272]	; (8007914 <tcp_input+0x528>)
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800780a:	3301      	adds	r3, #1
 800780c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800780e:	429a      	cmp	r2, r3
 8007810:	d002      	beq.n	8007818 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	61bb      	str	r3, [r7, #24]
        continue;
 8007816:	e016      	b.n	8007846 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	8ada      	ldrh	r2, [r3, #22]
 800781c:	4b3c      	ldr	r3, [pc, #240]	; (8007910 <tcp_input+0x524>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	885b      	ldrh	r3, [r3, #2]
 8007822:	b29b      	uxth	r3, r3
 8007824:	429a      	cmp	r2, r3
 8007826:	d10c      	bne.n	8007842 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	4b39      	ldr	r3, [pc, #228]	; (8007914 <tcp_input+0x528>)
 800782e:	695b      	ldr	r3, [r3, #20]
 8007830:	429a      	cmp	r2, r3
 8007832:	d00f      	beq.n	8007854 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d00d      	beq.n	8007856 <tcp_input+0x46a>
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d009      	beq.n	8007856 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	617b      	str	r3, [r7, #20]
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d1d1      	bne.n	80077f6 <tcp_input+0x40a>
 8007852:	e000      	b.n	8007856 <tcp_input+0x46a>
            break;
 8007854:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d014      	beq.n	8007886 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800785c:	69bb      	ldr	r3, [r7, #24]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d00a      	beq.n	8007878 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	68da      	ldr	r2, [r3, #12]
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800786a:	4b32      	ldr	r3, [pc, #200]	; (8007934 <tcp_input+0x548>)
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8007872:	4a30      	ldr	r2, [pc, #192]	; (8007934 <tcp_input+0x548>)
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8007878:	6978      	ldr	r0, [r7, #20]
 800787a:	f000 fa01 	bl	8007c80 <tcp_listen_input>
      }
      pbuf_free(p);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f7fd feea 	bl	8005658 <pbuf_free>
      return;
 8007884:	e19b      	b.n	8007bbe <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	2b00      	cmp	r3, #0
 800788a:	f000 8160 	beq.w	8007b4e <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800788e:	4b2a      	ldr	r3, [pc, #168]	; (8007938 <tcp_input+0x54c>)
 8007890:	2200      	movs	r2, #0
 8007892:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	891a      	ldrh	r2, [r3, #8]
 8007898:	4b27      	ldr	r3, [pc, #156]	; (8007938 <tcp_input+0x54c>)
 800789a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800789c:	4a26      	ldr	r2, [pc, #152]	; (8007938 <tcp_input+0x54c>)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80078a2:	4b1b      	ldr	r3, [pc, #108]	; (8007910 <tcp_input+0x524>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a24      	ldr	r2, [pc, #144]	; (8007938 <tcp_input+0x54c>)
 80078a8:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80078aa:	4b24      	ldr	r3, [pc, #144]	; (800793c <tcp_input+0x550>)
 80078ac:	2200      	movs	r2, #0
 80078ae:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80078b0:	4b23      	ldr	r3, [pc, #140]	; (8007940 <tcp_input+0x554>)
 80078b2:	2200      	movs	r2, #0
 80078b4:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80078b6:	4b23      	ldr	r3, [pc, #140]	; (8007944 <tcp_input+0x558>)
 80078b8:	2200      	movs	r2, #0
 80078ba:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80078bc:	4b22      	ldr	r3, [pc, #136]	; (8007948 <tcp_input+0x55c>)
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	f003 0308 	and.w	r3, r3, #8
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d006      	beq.n	80078d6 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	7b5b      	ldrb	r3, [r3, #13]
 80078cc:	f043 0301 	orr.w	r3, r3, #1
 80078d0:	b2da      	uxtb	r2, r3
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d038      	beq.n	8007950 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80078de:	69f8      	ldr	r0, [r7, #28]
 80078e0:	f7ff f93e 	bl	8006b60 <tcp_process_refused_data>
 80078e4:	4603      	mov	r3, r0
 80078e6:	f113 0f0d 	cmn.w	r3, #13
 80078ea:	d007      	beq.n	80078fc <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d02d      	beq.n	8007950 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80078f4:	4b15      	ldr	r3, [pc, #84]	; (800794c <tcp_input+0x560>)
 80078f6:	881b      	ldrh	r3, [r3, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d029      	beq.n	8007950 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007900:	2b00      	cmp	r3, #0
 8007902:	f040 8104 	bne.w	8007b0e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8007906:	69f8      	ldr	r0, [r7, #28]
 8007908:	f003 f9be 	bl	800ac88 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800790c:	e0ff      	b.n	8007b0e <tcp_input+0x722>
 800790e:	bf00      	nop
 8007910:	200000e0 	.word	0x200000e0
 8007914:	200033fc 	.word	0x200033fc
 8007918:	0801087c 	.word	0x0801087c
 800791c:	080109a8 	.word	0x080109a8
 8007920:	080108c8 	.word	0x080108c8
 8007924:	20008b00 	.word	0x20008b00
 8007928:	080109d4 	.word	0x080109d4
 800792c:	20008b10 	.word	0x20008b10
 8007930:	08010a00 	.word	0x08010a00
 8007934:	20008b08 	.word	0x20008b08
 8007938:	200000d0 	.word	0x200000d0
 800793c:	20000100 	.word	0x20000100
 8007940:	200000fd 	.word	0x200000fd
 8007944:	200000f8 	.word	0x200000f8
 8007948:	200000fc 	.word	0x200000fc
 800794c:	200000fa 	.word	0x200000fa
      }
    }
    tcp_input_pcb = pcb;
 8007950:	4a9c      	ldr	r2, [pc, #624]	; (8007bc4 <tcp_input+0x7d8>)
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8007956:	69f8      	ldr	r0, [r7, #28]
 8007958:	f000 fb0a 	bl	8007f70 <tcp_process>
 800795c:	4603      	mov	r3, r0
 800795e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007960:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007964:	f113 0f0d 	cmn.w	r3, #13
 8007968:	f000 80d3 	beq.w	8007b12 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800796c:	4b96      	ldr	r3, [pc, #600]	; (8007bc8 <tcp_input+0x7dc>)
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	f003 0308 	and.w	r3, r3, #8
 8007974:	2b00      	cmp	r3, #0
 8007976:	d015      	beq.n	80079a4 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007978:	69fb      	ldr	r3, [r7, #28]
 800797a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800797e:	2b00      	cmp	r3, #0
 8007980:	d008      	beq.n	8007994 <tcp_input+0x5a8>
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007988:	69fa      	ldr	r2, [r7, #28]
 800798a:	6912      	ldr	r2, [r2, #16]
 800798c:	f06f 010d 	mvn.w	r1, #13
 8007990:	4610      	mov	r0, r2
 8007992:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007994:	69f9      	ldr	r1, [r7, #28]
 8007996:	488d      	ldr	r0, [pc, #564]	; (8007bcc <tcp_input+0x7e0>)
 8007998:	f7ff fbb0 	bl	80070fc <tcp_pcb_remove>
        tcp_free(pcb);
 800799c:	69f8      	ldr	r0, [r7, #28]
 800799e:	f7fe f99d 	bl	8005cdc <tcp_free>
 80079a2:	e0c1      	b.n	8007b28 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 80079a4:	2300      	movs	r3, #0
 80079a6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80079a8:	4b89      	ldr	r3, [pc, #548]	; (8007bd0 <tcp_input+0x7e4>)
 80079aa:	881b      	ldrh	r3, [r3, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d01d      	beq.n	80079ec <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80079b0:	4b87      	ldr	r3, [pc, #540]	; (8007bd0 <tcp_input+0x7e4>)
 80079b2:	881b      	ldrh	r3, [r3, #0]
 80079b4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d00a      	beq.n	80079d6 <tcp_input+0x5ea>
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079c6:	69fa      	ldr	r2, [r7, #28]
 80079c8:	6910      	ldr	r0, [r2, #16]
 80079ca:	89fa      	ldrh	r2, [r7, #14]
 80079cc:	69f9      	ldr	r1, [r7, #28]
 80079ce:	4798      	blx	r3
 80079d0:	4603      	mov	r3, r0
 80079d2:	74fb      	strb	r3, [r7, #19]
 80079d4:	e001      	b.n	80079da <tcp_input+0x5ee>
 80079d6:	2300      	movs	r3, #0
 80079d8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80079da:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80079de:	f113 0f0d 	cmn.w	r3, #13
 80079e2:	f000 8098 	beq.w	8007b16 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 80079e6:	4b7a      	ldr	r3, [pc, #488]	; (8007bd0 <tcp_input+0x7e4>)
 80079e8:	2200      	movs	r2, #0
 80079ea:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80079ec:	69f8      	ldr	r0, [r7, #28]
 80079ee:	f000 f907 	bl	8007c00 <tcp_input_delayed_close>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	f040 8090 	bne.w	8007b1a <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80079fa:	4b76      	ldr	r3, [pc, #472]	; (8007bd4 <tcp_input+0x7e8>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d041      	beq.n	8007a86 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d006      	beq.n	8007a18 <tcp_input+0x62c>
 8007a0a:	4b73      	ldr	r3, [pc, #460]	; (8007bd8 <tcp_input+0x7ec>)
 8007a0c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8007a10:	4972      	ldr	r1, [pc, #456]	; (8007bdc <tcp_input+0x7f0>)
 8007a12:	4873      	ldr	r0, [pc, #460]	; (8007be0 <tcp_input+0x7f4>)
 8007a14:	f006 fc1e 	bl	800e254 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	8b5b      	ldrh	r3, [r3, #26]
 8007a1c:	f003 0310 	and.w	r3, r3, #16
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d008      	beq.n	8007a36 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8007a24:	4b6b      	ldr	r3, [pc, #428]	; (8007bd4 <tcp_input+0x7e8>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f7fd fe15 	bl	8005658 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8007a2e:	69f8      	ldr	r0, [r7, #28]
 8007a30:	f7fe fc3c 	bl	80062ac <tcp_abort>
            goto aborted;
 8007a34:	e078      	b.n	8007b28 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d00c      	beq.n	8007a5a <tcp_input+0x66e>
 8007a40:	69fb      	ldr	r3, [r7, #28]
 8007a42:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	6918      	ldr	r0, [r3, #16]
 8007a4a:	4b62      	ldr	r3, [pc, #392]	; (8007bd4 <tcp_input+0x7e8>)
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	2300      	movs	r3, #0
 8007a50:	69f9      	ldr	r1, [r7, #28]
 8007a52:	47a0      	blx	r4
 8007a54:	4603      	mov	r3, r0
 8007a56:	74fb      	strb	r3, [r7, #19]
 8007a58:	e008      	b.n	8007a6c <tcp_input+0x680>
 8007a5a:	4b5e      	ldr	r3, [pc, #376]	; (8007bd4 <tcp_input+0x7e8>)
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	2300      	movs	r3, #0
 8007a60:	69f9      	ldr	r1, [r7, #28]
 8007a62:	2000      	movs	r0, #0
 8007a64:	f7ff f952 	bl	8006d0c <tcp_recv_null>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8007a6c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007a70:	f113 0f0d 	cmn.w	r3, #13
 8007a74:	d053      	beq.n	8007b1e <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8007a76:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d003      	beq.n	8007a86 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8007a7e:	4b55      	ldr	r3, [pc, #340]	; (8007bd4 <tcp_input+0x7e8>)
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	69fb      	ldr	r3, [r7, #28]
 8007a84:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8007a86:	4b50      	ldr	r3, [pc, #320]	; (8007bc8 <tcp_input+0x7dc>)
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	f003 0320 	and.w	r3, r3, #32
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d030      	beq.n	8007af4 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d009      	beq.n	8007aae <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a9e:	7b5a      	ldrb	r2, [r3, #13]
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007aa4:	f042 0220 	orr.w	r2, r2, #32
 8007aa8:	b2d2      	uxtb	r2, r2
 8007aaa:	735a      	strb	r2, [r3, #13]
 8007aac:	e022      	b.n	8007af4 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007aae:	69fb      	ldr	r3, [r7, #28]
 8007ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ab2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007ab6:	d005      	beq.n	8007ac4 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8007ab8:	69fb      	ldr	r3, [r7, #28]
 8007aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007abc:	3301      	adds	r3, #1
 8007abe:	b29a      	uxth	r2, r3
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00b      	beq.n	8007ae6 <tcp_input+0x6fa>
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007ad4:	69fb      	ldr	r3, [r7, #28]
 8007ad6:	6918      	ldr	r0, [r3, #16]
 8007ad8:	2300      	movs	r3, #0
 8007ada:	2200      	movs	r2, #0
 8007adc:	69f9      	ldr	r1, [r7, #28]
 8007ade:	47a0      	blx	r4
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	74fb      	strb	r3, [r7, #19]
 8007ae4:	e001      	b.n	8007aea <tcp_input+0x6fe>
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007aea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007aee:	f113 0f0d 	cmn.w	r3, #13
 8007af2:	d016      	beq.n	8007b22 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8007af4:	4b33      	ldr	r3, [pc, #204]	; (8007bc4 <tcp_input+0x7d8>)
 8007af6:	2200      	movs	r2, #0
 8007af8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8007afa:	69f8      	ldr	r0, [r7, #28]
 8007afc:	f000 f880 	bl	8007c00 <tcp_input_delayed_close>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d10f      	bne.n	8007b26 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8007b06:	69f8      	ldr	r0, [r7, #28]
 8007b08:	f002 fab8 	bl	800a07c <tcp_output>
 8007b0c:	e00c      	b.n	8007b28 <tcp_input+0x73c>
        goto aborted;
 8007b0e:	bf00      	nop
 8007b10:	e00a      	b.n	8007b28 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8007b12:	bf00      	nop
 8007b14:	e008      	b.n	8007b28 <tcp_input+0x73c>
              goto aborted;
 8007b16:	bf00      	nop
 8007b18:	e006      	b.n	8007b28 <tcp_input+0x73c>
          goto aborted;
 8007b1a:	bf00      	nop
 8007b1c:	e004      	b.n	8007b28 <tcp_input+0x73c>
            goto aborted;
 8007b1e:	bf00      	nop
 8007b20:	e002      	b.n	8007b28 <tcp_input+0x73c>
              goto aborted;
 8007b22:	bf00      	nop
 8007b24:	e000      	b.n	8007b28 <tcp_input+0x73c>
          goto aborted;
 8007b26:	bf00      	nop
    tcp_input_pcb = NULL;
 8007b28:	4b26      	ldr	r3, [pc, #152]	; (8007bc4 <tcp_input+0x7d8>)
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8007b2e:	4b29      	ldr	r3, [pc, #164]	; (8007bd4 <tcp_input+0x7e8>)
 8007b30:	2200      	movs	r2, #0
 8007b32:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8007b34:	4b2b      	ldr	r3, [pc, #172]	; (8007be4 <tcp_input+0x7f8>)
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d03f      	beq.n	8007bbc <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8007b3c:	4b29      	ldr	r3, [pc, #164]	; (8007be4 <tcp_input+0x7f8>)
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7fd fd89 	bl	8005658 <pbuf_free>
      inseg.p = NULL;
 8007b46:	4b27      	ldr	r3, [pc, #156]	; (8007be4 <tcp_input+0x7f8>)
 8007b48:	2200      	movs	r2, #0
 8007b4a:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8007b4c:	e036      	b.n	8007bbc <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8007b4e:	4b26      	ldr	r3, [pc, #152]	; (8007be8 <tcp_input+0x7fc>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	899b      	ldrh	r3, [r3, #12]
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7fc faca 	bl	80040f0 <lwip_htons>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	f003 0304 	and.w	r3, r3, #4
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d118      	bne.n	8007b9a <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007b68:	4b20      	ldr	r3, [pc, #128]	; (8007bec <tcp_input+0x800>)
 8007b6a:	6819      	ldr	r1, [r3, #0]
 8007b6c:	4b20      	ldr	r3, [pc, #128]	; (8007bf0 <tcp_input+0x804>)
 8007b6e:	881b      	ldrh	r3, [r3, #0]
 8007b70:	461a      	mov	r2, r3
 8007b72:	4b20      	ldr	r3, [pc, #128]	; (8007bf4 <tcp_input+0x808>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007b78:	4b1b      	ldr	r3, [pc, #108]	; (8007be8 <tcp_input+0x7fc>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007b7c:	885b      	ldrh	r3, [r3, #2]
 8007b7e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007b80:	4a19      	ldr	r2, [pc, #100]	; (8007be8 <tcp_input+0x7fc>)
 8007b82:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007b84:	8812      	ldrh	r2, [r2, #0]
 8007b86:	b292      	uxth	r2, r2
 8007b88:	9202      	str	r2, [sp, #8]
 8007b8a:	9301      	str	r3, [sp, #4]
 8007b8c:	4b1a      	ldr	r3, [pc, #104]	; (8007bf8 <tcp_input+0x80c>)
 8007b8e:	9300      	str	r3, [sp, #0]
 8007b90:	4b1a      	ldr	r3, [pc, #104]	; (8007bfc <tcp_input+0x810>)
 8007b92:	4602      	mov	r2, r0
 8007b94:	2000      	movs	r0, #0
 8007b96:	f003 f825 	bl	800abe4 <tcp_rst>
    pbuf_free(p);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f7fd fd5c 	bl	8005658 <pbuf_free>
  return;
 8007ba0:	e00c      	b.n	8007bbc <tcp_input+0x7d0>
    goto dropped;
 8007ba2:	bf00      	nop
 8007ba4:	e006      	b.n	8007bb4 <tcp_input+0x7c8>
    goto dropped;
 8007ba6:	bf00      	nop
 8007ba8:	e004      	b.n	8007bb4 <tcp_input+0x7c8>
    goto dropped;
 8007baa:	bf00      	nop
 8007bac:	e002      	b.n	8007bb4 <tcp_input+0x7c8>
      goto dropped;
 8007bae:	bf00      	nop
 8007bb0:	e000      	b.n	8007bb4 <tcp_input+0x7c8>
      goto dropped;
 8007bb2:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f7fd fd4f 	bl	8005658 <pbuf_free>
 8007bba:	e000      	b.n	8007bbe <tcp_input+0x7d2>
  return;
 8007bbc:	bf00      	nop
}
 8007bbe:	3724      	adds	r7, #36	; 0x24
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd90      	pop	{r4, r7, pc}
 8007bc4:	20008b14 	.word	0x20008b14
 8007bc8:	200000fd 	.word	0x200000fd
 8007bcc:	20008b00 	.word	0x20008b00
 8007bd0:	200000f8 	.word	0x200000f8
 8007bd4:	20000100 	.word	0x20000100
 8007bd8:	0801087c 	.word	0x0801087c
 8007bdc:	08010a30 	.word	0x08010a30
 8007be0:	080108c8 	.word	0x080108c8
 8007be4:	200000d0 	.word	0x200000d0
 8007be8:	200000e0 	.word	0x200000e0
 8007bec:	200000f4 	.word	0x200000f4
 8007bf0:	200000fa 	.word	0x200000fa
 8007bf4:	200000f0 	.word	0x200000f0
 8007bf8:	2000340c 	.word	0x2000340c
 8007bfc:	20003410 	.word	0x20003410

08007c00 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d106      	bne.n	8007c1c <tcp_input_delayed_close+0x1c>
 8007c0e:	4b17      	ldr	r3, [pc, #92]	; (8007c6c <tcp_input_delayed_close+0x6c>)
 8007c10:	f240 225a 	movw	r2, #602	; 0x25a
 8007c14:	4916      	ldr	r1, [pc, #88]	; (8007c70 <tcp_input_delayed_close+0x70>)
 8007c16:	4817      	ldr	r0, [pc, #92]	; (8007c74 <tcp_input_delayed_close+0x74>)
 8007c18:	f006 fb1c 	bl	800e254 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8007c1c:	4b16      	ldr	r3, [pc, #88]	; (8007c78 <tcp_input_delayed_close+0x78>)
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	f003 0310 	and.w	r3, r3, #16
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d01c      	beq.n	8007c62 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	8b5b      	ldrh	r3, [r3, #26]
 8007c2c:	f003 0310 	and.w	r3, r3, #16
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d10d      	bne.n	8007c50 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d008      	beq.n	8007c50 <tcp_input_delayed_close+0x50>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	6912      	ldr	r2, [r2, #16]
 8007c48:	f06f 010e 	mvn.w	r1, #14
 8007c4c:	4610      	mov	r0, r2
 8007c4e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007c50:	6879      	ldr	r1, [r7, #4]
 8007c52:	480a      	ldr	r0, [pc, #40]	; (8007c7c <tcp_input_delayed_close+0x7c>)
 8007c54:	f7ff fa52 	bl	80070fc <tcp_pcb_remove>
    tcp_free(pcb);
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f7fe f83f 	bl	8005cdc <tcp_free>
    return 1;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e000      	b.n	8007c64 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3708      	adds	r7, #8
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	0801087c 	.word	0x0801087c
 8007c70:	08010a4c 	.word	0x08010a4c
 8007c74:	080108c8 	.word	0x080108c8
 8007c78:	200000fd 	.word	0x200000fd
 8007c7c:	20008b00 	.word	0x20008b00

08007c80 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8007c80:	b590      	push	{r4, r7, lr}
 8007c82:	b08b      	sub	sp, #44	; 0x2c
 8007c84:	af04      	add	r7, sp, #16
 8007c86:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8007c88:	4b6f      	ldr	r3, [pc, #444]	; (8007e48 <tcp_listen_input+0x1c8>)
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	f003 0304 	and.w	r3, r3, #4
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	f040 80d2 	bne.w	8007e3a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d106      	bne.n	8007caa <tcp_listen_input+0x2a>
 8007c9c:	4b6b      	ldr	r3, [pc, #428]	; (8007e4c <tcp_listen_input+0x1cc>)
 8007c9e:	f240 2281 	movw	r2, #641	; 0x281
 8007ca2:	496b      	ldr	r1, [pc, #428]	; (8007e50 <tcp_listen_input+0x1d0>)
 8007ca4:	486b      	ldr	r0, [pc, #428]	; (8007e54 <tcp_listen_input+0x1d4>)
 8007ca6:	f006 fad5 	bl	800e254 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8007caa:	4b67      	ldr	r3, [pc, #412]	; (8007e48 <tcp_listen_input+0x1c8>)
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	f003 0310 	and.w	r3, r3, #16
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d019      	beq.n	8007cea <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007cb6:	4b68      	ldr	r3, [pc, #416]	; (8007e58 <tcp_listen_input+0x1d8>)
 8007cb8:	6819      	ldr	r1, [r3, #0]
 8007cba:	4b68      	ldr	r3, [pc, #416]	; (8007e5c <tcp_listen_input+0x1dc>)
 8007cbc:	881b      	ldrh	r3, [r3, #0]
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	4b67      	ldr	r3, [pc, #412]	; (8007e60 <tcp_listen_input+0x1e0>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007cc6:	4b67      	ldr	r3, [pc, #412]	; (8007e64 <tcp_listen_input+0x1e4>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007cca:	885b      	ldrh	r3, [r3, #2]
 8007ccc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007cce:	4a65      	ldr	r2, [pc, #404]	; (8007e64 <tcp_listen_input+0x1e4>)
 8007cd0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007cd2:	8812      	ldrh	r2, [r2, #0]
 8007cd4:	b292      	uxth	r2, r2
 8007cd6:	9202      	str	r2, [sp, #8]
 8007cd8:	9301      	str	r3, [sp, #4]
 8007cda:	4b63      	ldr	r3, [pc, #396]	; (8007e68 <tcp_listen_input+0x1e8>)
 8007cdc:	9300      	str	r3, [sp, #0]
 8007cde:	4b63      	ldr	r3, [pc, #396]	; (8007e6c <tcp_listen_input+0x1ec>)
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f002 ff7e 	bl	800abe4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8007ce8:	e0a9      	b.n	8007e3e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8007cea:	4b57      	ldr	r3, [pc, #348]	; (8007e48 <tcp_listen_input+0x1c8>)
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	f003 0302 	and.w	r3, r3, #2
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	f000 80a3 	beq.w	8007e3e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	7d5b      	ldrb	r3, [r3, #21]
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f7ff f929 	bl	8006f54 <tcp_alloc>
 8007d02:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d111      	bne.n	8007d2e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	699b      	ldr	r3, [r3, #24]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00a      	beq.n	8007d28 <tcp_listen_input+0xa8>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	699b      	ldr	r3, [r3, #24]
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	6910      	ldr	r0, [r2, #16]
 8007d1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d1e:	2100      	movs	r1, #0
 8007d20:	4798      	blx	r3
 8007d22:	4603      	mov	r3, r0
 8007d24:	73bb      	strb	r3, [r7, #14]
      return;
 8007d26:	e08b      	b.n	8007e40 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007d28:	23f0      	movs	r3, #240	; 0xf0
 8007d2a:	73bb      	strb	r3, [r7, #14]
      return;
 8007d2c:	e088      	b.n	8007e40 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8007d2e:	4b50      	ldr	r3, [pc, #320]	; (8007e70 <tcp_listen_input+0x1f0>)
 8007d30:	695a      	ldr	r2, [r3, #20]
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8007d36:	4b4e      	ldr	r3, [pc, #312]	; (8007e70 <tcp_listen_input+0x1f0>)
 8007d38:	691a      	ldr	r2, [r3, #16]
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	8ada      	ldrh	r2, [r3, #22]
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8007d46:	4b47      	ldr	r3, [pc, #284]	; (8007e64 <tcp_listen_input+0x1e4>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	881b      	ldrh	r3, [r3, #0]
 8007d4c:	b29a      	uxth	r2, r3
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	2203      	movs	r2, #3
 8007d56:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8007d58:	4b41      	ldr	r3, [pc, #260]	; (8007e60 <tcp_listen_input+0x1e0>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	1c5a      	adds	r2, r3, #1
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8007d6a:	6978      	ldr	r0, [r7, #20]
 8007d6c:	f7ff fa5a 	bl	8007224 <tcp_next_iss>
 8007d70:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	693a      	ldr	r2, [r7, #16]
 8007d76:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	693a      	ldr	r2, [r7, #16]
 8007d7c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	693a      	ldr	r2, [r7, #16]
 8007d82:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	693a      	ldr	r2, [r7, #16]
 8007d88:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8007d8a:	4b35      	ldr	r3, [pc, #212]	; (8007e60 <tcp_listen_input+0x1e0>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	1e5a      	subs	r2, r3, #1
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	691a      	ldr	r2, [r3, #16]
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	7a5b      	ldrb	r3, [r3, #9]
 8007da6:	f003 030c 	and.w	r3, r3, #12
 8007daa:	b2da      	uxtb	r2, r3
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	7a1a      	ldrb	r2, [r3, #8]
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8007db8:	4b2e      	ldr	r3, [pc, #184]	; (8007e74 <tcp_listen_input+0x1f4>)
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	60da      	str	r2, [r3, #12]
 8007dc0:	4a2c      	ldr	r2, [pc, #176]	; (8007e74 <tcp_listen_input+0x1f4>)
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	6013      	str	r3, [r2, #0]
 8007dc6:	f003 f8cf 	bl	800af68 <tcp_timer_needed>
 8007dca:	4b2b      	ldr	r3, [pc, #172]	; (8007e78 <tcp_listen_input+0x1f8>)
 8007dcc:	2201      	movs	r2, #1
 8007dce:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8007dd0:	6978      	ldr	r0, [r7, #20]
 8007dd2:	f001 fd8d 	bl	80098f0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8007dd6:	4b23      	ldr	r3, [pc, #140]	; (8007e64 <tcp_listen_input+0x1e4>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	89db      	ldrh	r3, [r3, #14]
 8007ddc:	b29a      	uxth	r2, r3
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	3304      	adds	r3, #4
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f004 ffe3 	bl	800cdc4 <ip4_route>
 8007dfe:	4601      	mov	r1, r0
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	3304      	adds	r3, #4
 8007e04:	461a      	mov	r2, r3
 8007e06:	4620      	mov	r0, r4
 8007e08:	f7ff fa32 	bl	8007270 <tcp_eff_send_mss_netif>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	461a      	mov	r2, r3
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8007e14:	2112      	movs	r1, #18
 8007e16:	6978      	ldr	r0, [r7, #20]
 8007e18:	f002 f842 	bl	8009ea0 <tcp_enqueue_flags>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8007e20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d004      	beq.n	8007e32 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8007e28:	2100      	movs	r1, #0
 8007e2a:	6978      	ldr	r0, [r7, #20]
 8007e2c:	f7fe f980 	bl	8006130 <tcp_abandon>
      return;
 8007e30:	e006      	b.n	8007e40 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8007e32:	6978      	ldr	r0, [r7, #20]
 8007e34:	f002 f922 	bl	800a07c <tcp_output>
  return;
 8007e38:	e001      	b.n	8007e3e <tcp_listen_input+0x1be>
    return;
 8007e3a:	bf00      	nop
 8007e3c:	e000      	b.n	8007e40 <tcp_listen_input+0x1c0>
  return;
 8007e3e:	bf00      	nop
}
 8007e40:	371c      	adds	r7, #28
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd90      	pop	{r4, r7, pc}
 8007e46:	bf00      	nop
 8007e48:	200000fc 	.word	0x200000fc
 8007e4c:	0801087c 	.word	0x0801087c
 8007e50:	08010a74 	.word	0x08010a74
 8007e54:	080108c8 	.word	0x080108c8
 8007e58:	200000f4 	.word	0x200000f4
 8007e5c:	200000fa 	.word	0x200000fa
 8007e60:	200000f0 	.word	0x200000f0
 8007e64:	200000e0 	.word	0x200000e0
 8007e68:	2000340c 	.word	0x2000340c
 8007e6c:	20003410 	.word	0x20003410
 8007e70:	200033fc 	.word	0x200033fc
 8007e74:	20008b00 	.word	0x20008b00
 8007e78:	20008afc 	.word	0x20008afc

08007e7c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b086      	sub	sp, #24
 8007e80:	af04      	add	r7, sp, #16
 8007e82:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8007e84:	4b2f      	ldr	r3, [pc, #188]	; (8007f44 <tcp_timewait_input+0xc8>)
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	f003 0304 	and.w	r3, r3, #4
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d153      	bne.n	8007f38 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d106      	bne.n	8007ea4 <tcp_timewait_input+0x28>
 8007e96:	4b2c      	ldr	r3, [pc, #176]	; (8007f48 <tcp_timewait_input+0xcc>)
 8007e98:	f240 22ee 	movw	r2, #750	; 0x2ee
 8007e9c:	492b      	ldr	r1, [pc, #172]	; (8007f4c <tcp_timewait_input+0xd0>)
 8007e9e:	482c      	ldr	r0, [pc, #176]	; (8007f50 <tcp_timewait_input+0xd4>)
 8007ea0:	f006 f9d8 	bl	800e254 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8007ea4:	4b27      	ldr	r3, [pc, #156]	; (8007f44 <tcp_timewait_input+0xc8>)
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	f003 0302 	and.w	r3, r3, #2
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d02a      	beq.n	8007f06 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8007eb0:	4b28      	ldr	r3, [pc, #160]	; (8007f54 <tcp_timewait_input+0xd8>)
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb8:	1ad3      	subs	r3, r2, r3
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	db2d      	blt.n	8007f1a <tcp_timewait_input+0x9e>
 8007ebe:	4b25      	ldr	r3, [pc, #148]	; (8007f54 <tcp_timewait_input+0xd8>)
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec6:	6879      	ldr	r1, [r7, #4]
 8007ec8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007eca:	440b      	add	r3, r1
 8007ecc:	1ad3      	subs	r3, r2, r3
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	dc23      	bgt.n	8007f1a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007ed2:	4b21      	ldr	r3, [pc, #132]	; (8007f58 <tcp_timewait_input+0xdc>)
 8007ed4:	6819      	ldr	r1, [r3, #0]
 8007ed6:	4b21      	ldr	r3, [pc, #132]	; (8007f5c <tcp_timewait_input+0xe0>)
 8007ed8:	881b      	ldrh	r3, [r3, #0]
 8007eda:	461a      	mov	r2, r3
 8007edc:	4b1d      	ldr	r3, [pc, #116]	; (8007f54 <tcp_timewait_input+0xd8>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007ee2:	4b1f      	ldr	r3, [pc, #124]	; (8007f60 <tcp_timewait_input+0xe4>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007ee6:	885b      	ldrh	r3, [r3, #2]
 8007ee8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007eea:	4a1d      	ldr	r2, [pc, #116]	; (8007f60 <tcp_timewait_input+0xe4>)
 8007eec:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007eee:	8812      	ldrh	r2, [r2, #0]
 8007ef0:	b292      	uxth	r2, r2
 8007ef2:	9202      	str	r2, [sp, #8]
 8007ef4:	9301      	str	r3, [sp, #4]
 8007ef6:	4b1b      	ldr	r3, [pc, #108]	; (8007f64 <tcp_timewait_input+0xe8>)
 8007ef8:	9300      	str	r3, [sp, #0]
 8007efa:	4b1b      	ldr	r3, [pc, #108]	; (8007f68 <tcp_timewait_input+0xec>)
 8007efc:	4602      	mov	r2, r0
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f002 fe70 	bl	800abe4 <tcp_rst>
      return;
 8007f04:	e01b      	b.n	8007f3e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8007f06:	4b0f      	ldr	r3, [pc, #60]	; (8007f44 <tcp_timewait_input+0xc8>)
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	f003 0301 	and.w	r3, r3, #1
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d003      	beq.n	8007f1a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8007f12:	4b16      	ldr	r3, [pc, #88]	; (8007f6c <tcp_timewait_input+0xf0>)
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8007f1a:	4b10      	ldr	r3, [pc, #64]	; (8007f5c <tcp_timewait_input+0xe0>)
 8007f1c:	881b      	ldrh	r3, [r3, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00c      	beq.n	8007f3c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	8b5b      	ldrh	r3, [r3, #26]
 8007f26:	f043 0302 	orr.w	r3, r3, #2
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f002 f8a3 	bl	800a07c <tcp_output>
  }
  return;
 8007f36:	e001      	b.n	8007f3c <tcp_timewait_input+0xc0>
    return;
 8007f38:	bf00      	nop
 8007f3a:	e000      	b.n	8007f3e <tcp_timewait_input+0xc2>
  return;
 8007f3c:	bf00      	nop
}
 8007f3e:	3708      	adds	r7, #8
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	200000fc 	.word	0x200000fc
 8007f48:	0801087c 	.word	0x0801087c
 8007f4c:	08010a94 	.word	0x08010a94
 8007f50:	080108c8 	.word	0x080108c8
 8007f54:	200000f0 	.word	0x200000f0
 8007f58:	200000f4 	.word	0x200000f4
 8007f5c:	200000fa 	.word	0x200000fa
 8007f60:	200000e0 	.word	0x200000e0
 8007f64:	2000340c 	.word	0x2000340c
 8007f68:	20003410 	.word	0x20003410
 8007f6c:	20008b04 	.word	0x20008b04

08007f70 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8007f70:	b590      	push	{r4, r7, lr}
 8007f72:	b08d      	sub	sp, #52	; 0x34
 8007f74:	af04      	add	r7, sp, #16
 8007f76:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d106      	bne.n	8007f94 <tcp_process+0x24>
 8007f86:	4ba5      	ldr	r3, [pc, #660]	; (800821c <tcp_process+0x2ac>)
 8007f88:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8007f8c:	49a4      	ldr	r1, [pc, #656]	; (8008220 <tcp_process+0x2b0>)
 8007f8e:	48a5      	ldr	r0, [pc, #660]	; (8008224 <tcp_process+0x2b4>)
 8007f90:	f006 f960 	bl	800e254 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8007f94:	4ba4      	ldr	r3, [pc, #656]	; (8008228 <tcp_process+0x2b8>)
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	f003 0304 	and.w	r3, r3, #4
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d04e      	beq.n	800803e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	7d1b      	ldrb	r3, [r3, #20]
 8007fa4:	2b02      	cmp	r3, #2
 8007fa6:	d108      	bne.n	8007fba <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007fac:	4b9f      	ldr	r3, [pc, #636]	; (800822c <tcp_process+0x2bc>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d123      	bne.n	8007ffc <tcp_process+0x8c>
        acceptable = 1;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	76fb      	strb	r3, [r7, #27]
 8007fb8:	e020      	b.n	8007ffc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007fbe:	4b9c      	ldr	r3, [pc, #624]	; (8008230 <tcp_process+0x2c0>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d102      	bne.n	8007fcc <tcp_process+0x5c>
        acceptable = 1;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	76fb      	strb	r3, [r7, #27]
 8007fca:	e017      	b.n	8007ffc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007fcc:	4b98      	ldr	r3, [pc, #608]	; (8008230 <tcp_process+0x2c0>)
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd4:	1ad3      	subs	r3, r2, r3
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	db10      	blt.n	8007ffc <tcp_process+0x8c>
 8007fda:	4b95      	ldr	r3, [pc, #596]	; (8008230 <tcp_process+0x2c0>)
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe2:	6879      	ldr	r1, [r7, #4]
 8007fe4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007fe6:	440b      	add	r3, r1
 8007fe8:	1ad3      	subs	r3, r2, r3
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	dc06      	bgt.n	8007ffc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	8b5b      	ldrh	r3, [r3, #26]
 8007ff2:	f043 0302 	orr.w	r3, r3, #2
 8007ff6:	b29a      	uxth	r2, r3
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8007ffc:	7efb      	ldrb	r3, [r7, #27]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d01b      	beq.n	800803a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	7d1b      	ldrb	r3, [r3, #20]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d106      	bne.n	8008018 <tcp_process+0xa8>
 800800a:	4b84      	ldr	r3, [pc, #528]	; (800821c <tcp_process+0x2ac>)
 800800c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8008010:	4988      	ldr	r1, [pc, #544]	; (8008234 <tcp_process+0x2c4>)
 8008012:	4884      	ldr	r0, [pc, #528]	; (8008224 <tcp_process+0x2b4>)
 8008014:	f006 f91e 	bl	800e254 <iprintf>
      recv_flags |= TF_RESET;
 8008018:	4b87      	ldr	r3, [pc, #540]	; (8008238 <tcp_process+0x2c8>)
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	f043 0308 	orr.w	r3, r3, #8
 8008020:	b2da      	uxtb	r2, r3
 8008022:	4b85      	ldr	r3, [pc, #532]	; (8008238 <tcp_process+0x2c8>)
 8008024:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	8b5b      	ldrh	r3, [r3, #26]
 800802a:	f023 0301 	bic.w	r3, r3, #1
 800802e:	b29a      	uxth	r2, r3
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8008034:	f06f 030d 	mvn.w	r3, #13
 8008038:	e37a      	b.n	8008730 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800803a:	2300      	movs	r3, #0
 800803c:	e378      	b.n	8008730 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800803e:	4b7a      	ldr	r3, [pc, #488]	; (8008228 <tcp_process+0x2b8>)
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	f003 0302 	and.w	r3, r3, #2
 8008046:	2b00      	cmp	r3, #0
 8008048:	d010      	beq.n	800806c <tcp_process+0xfc>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	7d1b      	ldrb	r3, [r3, #20]
 800804e:	2b02      	cmp	r3, #2
 8008050:	d00c      	beq.n	800806c <tcp_process+0xfc>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	7d1b      	ldrb	r3, [r3, #20]
 8008056:	2b03      	cmp	r3, #3
 8008058:	d008      	beq.n	800806c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	8b5b      	ldrh	r3, [r3, #26]
 800805e:	f043 0302 	orr.w	r3, r3, #2
 8008062:	b29a      	uxth	r2, r3
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8008068:	2300      	movs	r3, #0
 800806a:	e361      	b.n	8008730 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	8b5b      	ldrh	r3, [r3, #26]
 8008070:	f003 0310 	and.w	r3, r3, #16
 8008074:	2b00      	cmp	r3, #0
 8008076:	d103      	bne.n	8008080 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8008078:	4b70      	ldr	r3, [pc, #448]	; (800823c <tcp_process+0x2cc>)
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f001 fc2d 	bl	80098f0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	7d1b      	ldrb	r3, [r3, #20]
 800809a:	3b02      	subs	r3, #2
 800809c:	2b07      	cmp	r3, #7
 800809e:	f200 8337 	bhi.w	8008710 <tcp_process+0x7a0>
 80080a2:	a201      	add	r2, pc, #4	; (adr r2, 80080a8 <tcp_process+0x138>)
 80080a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a8:	080080c9 	.word	0x080080c9
 80080ac:	080082f9 	.word	0x080082f9
 80080b0:	08008471 	.word	0x08008471
 80080b4:	0800849b 	.word	0x0800849b
 80080b8:	080085bf 	.word	0x080085bf
 80080bc:	08008471 	.word	0x08008471
 80080c0:	0800864b 	.word	0x0800864b
 80080c4:	080086db 	.word	0x080086db
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80080c8:	4b57      	ldr	r3, [pc, #348]	; (8008228 <tcp_process+0x2b8>)
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	f003 0310 	and.w	r3, r3, #16
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	f000 80e4 	beq.w	800829e <tcp_process+0x32e>
 80080d6:	4b54      	ldr	r3, [pc, #336]	; (8008228 <tcp_process+0x2b8>)
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	f003 0302 	and.w	r3, r3, #2
 80080de:	2b00      	cmp	r3, #0
 80080e0:	f000 80dd 	beq.w	800829e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080e8:	1c5a      	adds	r2, r3, #1
 80080ea:	4b50      	ldr	r3, [pc, #320]	; (800822c <tcp_process+0x2bc>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	429a      	cmp	r2, r3
 80080f0:	f040 80d5 	bne.w	800829e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80080f4:	4b4e      	ldr	r3, [pc, #312]	; (8008230 <tcp_process+0x2c0>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	1c5a      	adds	r2, r3, #1
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8008106:	4b49      	ldr	r3, [pc, #292]	; (800822c <tcp_process+0x2bc>)
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800810e:	4b4c      	ldr	r3, [pc, #304]	; (8008240 <tcp_process+0x2d0>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	89db      	ldrh	r3, [r3, #14]
 8008114:	b29a      	uxth	r2, r3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008128:	4b41      	ldr	r3, [pc, #260]	; (8008230 <tcp_process+0x2c0>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	1e5a      	subs	r2, r3, #1
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2204      	movs	r2, #4
 8008136:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	3304      	adds	r3, #4
 8008140:	4618      	mov	r0, r3
 8008142:	f004 fe3f 	bl	800cdc4 <ip4_route>
 8008146:	4601      	mov	r1, r0
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	3304      	adds	r3, #4
 800814c:	461a      	mov	r2, r3
 800814e:	4620      	mov	r0, r4
 8008150:	f7ff f88e 	bl	8007270 <tcp_eff_send_mss_netif>
 8008154:	4603      	mov	r3, r0
 8008156:	461a      	mov	r2, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008160:	009a      	lsls	r2, r3, #2
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008166:	005b      	lsls	r3, r3, #1
 8008168:	f241 111c 	movw	r1, #4380	; 0x111c
 800816c:	428b      	cmp	r3, r1
 800816e:	bf38      	it	cc
 8008170:	460b      	movcc	r3, r1
 8008172:	429a      	cmp	r2, r3
 8008174:	d204      	bcs.n	8008180 <tcp_process+0x210>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800817a:	009b      	lsls	r3, r3, #2
 800817c:	b29b      	uxth	r3, r3
 800817e:	e00d      	b.n	800819c <tcp_process+0x22c>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008184:	005b      	lsls	r3, r3, #1
 8008186:	f241 121c 	movw	r2, #4380	; 0x111c
 800818a:	4293      	cmp	r3, r2
 800818c:	d904      	bls.n	8008198 <tcp_process+0x228>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008192:	005b      	lsls	r3, r3, #1
 8008194:	b29b      	uxth	r3, r3
 8008196:	e001      	b.n	800819c <tcp_process+0x22c>
 8008198:	f241 131c 	movw	r3, #4380	; 0x111c
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d106      	bne.n	80081ba <tcp_process+0x24a>
 80081ac:	4b1b      	ldr	r3, [pc, #108]	; (800821c <tcp_process+0x2ac>)
 80081ae:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80081b2:	4924      	ldr	r1, [pc, #144]	; (8008244 <tcp_process+0x2d4>)
 80081b4:	481b      	ldr	r0, [pc, #108]	; (8008224 <tcp_process+0x2b4>)
 80081b6:	f006 f84d 	bl	800e254 <iprintf>
        --pcb->snd_queuelen;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80081c0:	3b01      	subs	r3, #1
 80081c2:	b29a      	uxth	r2, r3
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ce:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80081d0:	69fb      	ldr	r3, [r7, #28]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d111      	bne.n	80081fa <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081da:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80081dc:	69fb      	ldr	r3, [r7, #28]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d106      	bne.n	80081f0 <tcp_process+0x280>
 80081e2:	4b0e      	ldr	r3, [pc, #56]	; (800821c <tcp_process+0x2ac>)
 80081e4:	f44f 725d 	mov.w	r2, #884	; 0x374
 80081e8:	4917      	ldr	r1, [pc, #92]	; (8008248 <tcp_process+0x2d8>)
 80081ea:	480e      	ldr	r0, [pc, #56]	; (8008224 <tcp_process+0x2b4>)
 80081ec:	f006 f832 	bl	800e254 <iprintf>
          pcb->unsent = rseg->next;
 80081f0:	69fb      	ldr	r3, [r7, #28]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	66da      	str	r2, [r3, #108]	; 0x6c
 80081f8:	e003      	b.n	8008202 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 80081fa:	69fb      	ldr	r3, [r7, #28]
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8008202:	69f8      	ldr	r0, [r7, #28]
 8008204:	f7fe fd3d 	bl	8006c82 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800820c:	2b00      	cmp	r3, #0
 800820e:	d11d      	bne.n	800824c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008216:	861a      	strh	r2, [r3, #48]	; 0x30
 8008218:	e01f      	b.n	800825a <tcp_process+0x2ea>
 800821a:	bf00      	nop
 800821c:	0801087c 	.word	0x0801087c
 8008220:	08010ab4 	.word	0x08010ab4
 8008224:	080108c8 	.word	0x080108c8
 8008228:	200000fc 	.word	0x200000fc
 800822c:	200000f4 	.word	0x200000f4
 8008230:	200000f0 	.word	0x200000f0
 8008234:	08010ad0 	.word	0x08010ad0
 8008238:	200000fd 	.word	0x200000fd
 800823c:	20008b04 	.word	0x20008b04
 8008240:	200000e0 	.word	0x200000e0
 8008244:	08010af0 	.word	0x08010af0
 8008248:	08010b08 	.word	0x08010b08
        } else {
          pcb->rtime = 0;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008260:	2b00      	cmp	r3, #0
 8008262:	d00a      	beq.n	800827a <tcp_process+0x30a>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	6910      	ldr	r0, [r2, #16]
 800826e:	2200      	movs	r2, #0
 8008270:	6879      	ldr	r1, [r7, #4]
 8008272:	4798      	blx	r3
 8008274:	4603      	mov	r3, r0
 8008276:	76bb      	strb	r3, [r7, #26]
 8008278:	e001      	b.n	800827e <tcp_process+0x30e>
 800827a:	2300      	movs	r3, #0
 800827c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800827e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008282:	f113 0f0d 	cmn.w	r3, #13
 8008286:	d102      	bne.n	800828e <tcp_process+0x31e>
          return ERR_ABRT;
 8008288:	f06f 030c 	mvn.w	r3, #12
 800828c:	e250      	b.n	8008730 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	8b5b      	ldrh	r3, [r3, #26]
 8008292:	f043 0302 	orr.w	r3, r3, #2
 8008296:	b29a      	uxth	r2, r3
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800829c:	e23a      	b.n	8008714 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800829e:	4b9d      	ldr	r3, [pc, #628]	; (8008514 <tcp_process+0x5a4>)
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	f003 0310 	and.w	r3, r3, #16
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	f000 8234 	beq.w	8008714 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80082ac:	4b9a      	ldr	r3, [pc, #616]	; (8008518 <tcp_process+0x5a8>)
 80082ae:	6819      	ldr	r1, [r3, #0]
 80082b0:	4b9a      	ldr	r3, [pc, #616]	; (800851c <tcp_process+0x5ac>)
 80082b2:	881b      	ldrh	r3, [r3, #0]
 80082b4:	461a      	mov	r2, r3
 80082b6:	4b9a      	ldr	r3, [pc, #616]	; (8008520 <tcp_process+0x5b0>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80082bc:	4b99      	ldr	r3, [pc, #612]	; (8008524 <tcp_process+0x5b4>)
 80082be:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80082c0:	885b      	ldrh	r3, [r3, #2]
 80082c2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80082c4:	4a97      	ldr	r2, [pc, #604]	; (8008524 <tcp_process+0x5b4>)
 80082c6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80082c8:	8812      	ldrh	r2, [r2, #0]
 80082ca:	b292      	uxth	r2, r2
 80082cc:	9202      	str	r2, [sp, #8]
 80082ce:	9301      	str	r3, [sp, #4]
 80082d0:	4b95      	ldr	r3, [pc, #596]	; (8008528 <tcp_process+0x5b8>)
 80082d2:	9300      	str	r3, [sp, #0]
 80082d4:	4b95      	ldr	r3, [pc, #596]	; (800852c <tcp_process+0x5bc>)
 80082d6:	4602      	mov	r2, r0
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f002 fc83 	bl	800abe4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80082e4:	2b05      	cmp	r3, #5
 80082e6:	f200 8215 	bhi.w	8008714 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2200      	movs	r2, #0
 80082ee:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f002 fa4d 	bl	800a790 <tcp_rexmit_rto>
      break;
 80082f6:	e20d      	b.n	8008714 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80082f8:	4b86      	ldr	r3, [pc, #536]	; (8008514 <tcp_process+0x5a4>)
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	f003 0310 	and.w	r3, r3, #16
 8008300:	2b00      	cmp	r3, #0
 8008302:	f000 80a1 	beq.w	8008448 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008306:	4b84      	ldr	r3, [pc, #528]	; (8008518 <tcp_process+0x5a8>)
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800830e:	1ad3      	subs	r3, r2, r3
 8008310:	3b01      	subs	r3, #1
 8008312:	2b00      	cmp	r3, #0
 8008314:	db7e      	blt.n	8008414 <tcp_process+0x4a4>
 8008316:	4b80      	ldr	r3, [pc, #512]	; (8008518 <tcp_process+0x5a8>)
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800831e:	1ad3      	subs	r3, r2, r3
 8008320:	2b00      	cmp	r3, #0
 8008322:	dc77      	bgt.n	8008414 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2204      	movs	r2, #4
 8008328:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800832e:	2b00      	cmp	r3, #0
 8008330:	d102      	bne.n	8008338 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8008332:	23fa      	movs	r3, #250	; 0xfa
 8008334:	76bb      	strb	r3, [r7, #26]
 8008336:	e01d      	b.n	8008374 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800833c:	699b      	ldr	r3, [r3, #24]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d106      	bne.n	8008350 <tcp_process+0x3e0>
 8008342:	4b7b      	ldr	r3, [pc, #492]	; (8008530 <tcp_process+0x5c0>)
 8008344:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8008348:	497a      	ldr	r1, [pc, #488]	; (8008534 <tcp_process+0x5c4>)
 800834a:	487b      	ldr	r0, [pc, #492]	; (8008538 <tcp_process+0x5c8>)
 800834c:	f005 ff82 	bl	800e254 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008354:	699b      	ldr	r3, [r3, #24]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d00a      	beq.n	8008370 <tcp_process+0x400>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800835e:	699b      	ldr	r3, [r3, #24]
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	6910      	ldr	r0, [r2, #16]
 8008364:	2200      	movs	r2, #0
 8008366:	6879      	ldr	r1, [r7, #4]
 8008368:	4798      	blx	r3
 800836a:	4603      	mov	r3, r0
 800836c:	76bb      	strb	r3, [r7, #26]
 800836e:	e001      	b.n	8008374 <tcp_process+0x404>
 8008370:	23f0      	movs	r3, #240	; 0xf0
 8008372:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8008374:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d00a      	beq.n	8008392 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800837c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008380:	f113 0f0d 	cmn.w	r3, #13
 8008384:	d002      	beq.n	800838c <tcp_process+0x41c>
              tcp_abort(pcb);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f7fd ff90 	bl	80062ac <tcp_abort>
            }
            return ERR_ABRT;
 800838c:	f06f 030c 	mvn.w	r3, #12
 8008390:	e1ce      	b.n	8008730 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 fae0 	bl	8008958 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8008398:	4b68      	ldr	r3, [pc, #416]	; (800853c <tcp_process+0x5cc>)
 800839a:	881b      	ldrh	r3, [r3, #0]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d005      	beq.n	80083ac <tcp_process+0x43c>
            recv_acked--;
 80083a0:	4b66      	ldr	r3, [pc, #408]	; (800853c <tcp_process+0x5cc>)
 80083a2:	881b      	ldrh	r3, [r3, #0]
 80083a4:	3b01      	subs	r3, #1
 80083a6:	b29a      	uxth	r2, r3
 80083a8:	4b64      	ldr	r3, [pc, #400]	; (800853c <tcp_process+0x5cc>)
 80083aa:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80083b0:	009a      	lsls	r2, r3, #2
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80083b6:	005b      	lsls	r3, r3, #1
 80083b8:	f241 111c 	movw	r1, #4380	; 0x111c
 80083bc:	428b      	cmp	r3, r1
 80083be:	bf38      	it	cc
 80083c0:	460b      	movcc	r3, r1
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d204      	bcs.n	80083d0 <tcp_process+0x460>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	e00d      	b.n	80083ec <tcp_process+0x47c>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80083d4:	005b      	lsls	r3, r3, #1
 80083d6:	f241 121c 	movw	r2, #4380	; 0x111c
 80083da:	4293      	cmp	r3, r2
 80083dc:	d904      	bls.n	80083e8 <tcp_process+0x478>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80083e2:	005b      	lsls	r3, r3, #1
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	e001      	b.n	80083ec <tcp_process+0x47c>
 80083e8:	f241 131c 	movw	r3, #4380	; 0x111c
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80083f2:	4b53      	ldr	r3, [pc, #332]	; (8008540 <tcp_process+0x5d0>)
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	f003 0320 	and.w	r3, r3, #32
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d037      	beq.n	800846e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	8b5b      	ldrh	r3, [r3, #26]
 8008402:	f043 0302 	orr.w	r3, r3, #2
 8008406:	b29a      	uxth	r2, r3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2207      	movs	r2, #7
 8008410:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8008412:	e02c      	b.n	800846e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008414:	4b40      	ldr	r3, [pc, #256]	; (8008518 <tcp_process+0x5a8>)
 8008416:	6819      	ldr	r1, [r3, #0]
 8008418:	4b40      	ldr	r3, [pc, #256]	; (800851c <tcp_process+0x5ac>)
 800841a:	881b      	ldrh	r3, [r3, #0]
 800841c:	461a      	mov	r2, r3
 800841e:	4b40      	ldr	r3, [pc, #256]	; (8008520 <tcp_process+0x5b0>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008424:	4b3f      	ldr	r3, [pc, #252]	; (8008524 <tcp_process+0x5b4>)
 8008426:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008428:	885b      	ldrh	r3, [r3, #2]
 800842a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800842c:	4a3d      	ldr	r2, [pc, #244]	; (8008524 <tcp_process+0x5b4>)
 800842e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008430:	8812      	ldrh	r2, [r2, #0]
 8008432:	b292      	uxth	r2, r2
 8008434:	9202      	str	r2, [sp, #8]
 8008436:	9301      	str	r3, [sp, #4]
 8008438:	4b3b      	ldr	r3, [pc, #236]	; (8008528 <tcp_process+0x5b8>)
 800843a:	9300      	str	r3, [sp, #0]
 800843c:	4b3b      	ldr	r3, [pc, #236]	; (800852c <tcp_process+0x5bc>)
 800843e:	4602      	mov	r2, r0
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f002 fbcf 	bl	800abe4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8008446:	e167      	b.n	8008718 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008448:	4b32      	ldr	r3, [pc, #200]	; (8008514 <tcp_process+0x5a4>)
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	f003 0302 	and.w	r3, r3, #2
 8008450:	2b00      	cmp	r3, #0
 8008452:	f000 8161 	beq.w	8008718 <tcp_process+0x7a8>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845a:	1e5a      	subs	r2, r3, #1
 800845c:	4b30      	ldr	r3, [pc, #192]	; (8008520 <tcp_process+0x5b0>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	429a      	cmp	r2, r3
 8008462:	f040 8159 	bne.w	8008718 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f002 f9b4 	bl	800a7d4 <tcp_rexmit>
      break;
 800846c:	e154      	b.n	8008718 <tcp_process+0x7a8>
 800846e:	e153      	b.n	8008718 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 fa71 	bl	8008958 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8008476:	4b32      	ldr	r3, [pc, #200]	; (8008540 <tcp_process+0x5d0>)
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	f003 0320 	and.w	r3, r3, #32
 800847e:	2b00      	cmp	r3, #0
 8008480:	f000 814c 	beq.w	800871c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	8b5b      	ldrh	r3, [r3, #26]
 8008488:	f043 0302 	orr.w	r3, r3, #2
 800848c:	b29a      	uxth	r2, r3
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2207      	movs	r2, #7
 8008496:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008498:	e140      	b.n	800871c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 fa5c 	bl	8008958 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80084a0:	4b27      	ldr	r3, [pc, #156]	; (8008540 <tcp_process+0x5d0>)
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	f003 0320 	and.w	r3, r3, #32
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d071      	beq.n	8008590 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80084ac:	4b19      	ldr	r3, [pc, #100]	; (8008514 <tcp_process+0x5a4>)
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	f003 0310 	and.w	r3, r3, #16
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d060      	beq.n	800857a <tcp_process+0x60a>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80084bc:	4b16      	ldr	r3, [pc, #88]	; (8008518 <tcp_process+0x5a8>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d15a      	bne.n	800857a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d156      	bne.n	800857a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	8b5b      	ldrh	r3, [r3, #26]
 80084d0:	f043 0302 	orr.w	r3, r3, #2
 80084d4:	b29a      	uxth	r2, r3
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f7fe fdbe 	bl	800705c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80084e0:	4b18      	ldr	r3, [pc, #96]	; (8008544 <tcp_process+0x5d4>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d105      	bne.n	80084f6 <tcp_process+0x586>
 80084ea:	4b16      	ldr	r3, [pc, #88]	; (8008544 <tcp_process+0x5d4>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	4a14      	ldr	r2, [pc, #80]	; (8008544 <tcp_process+0x5d4>)
 80084f2:	6013      	str	r3, [r2, #0]
 80084f4:	e02e      	b.n	8008554 <tcp_process+0x5e4>
 80084f6:	4b13      	ldr	r3, [pc, #76]	; (8008544 <tcp_process+0x5d4>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	617b      	str	r3, [r7, #20]
 80084fc:	e027      	b.n	800854e <tcp_process+0x5de>
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	429a      	cmp	r2, r3
 8008506:	d11f      	bne.n	8008548 <tcp_process+0x5d8>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	68da      	ldr	r2, [r3, #12]
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	60da      	str	r2, [r3, #12]
 8008510:	e020      	b.n	8008554 <tcp_process+0x5e4>
 8008512:	bf00      	nop
 8008514:	200000fc 	.word	0x200000fc
 8008518:	200000f4 	.word	0x200000f4
 800851c:	200000fa 	.word	0x200000fa
 8008520:	200000f0 	.word	0x200000f0
 8008524:	200000e0 	.word	0x200000e0
 8008528:	2000340c 	.word	0x2000340c
 800852c:	20003410 	.word	0x20003410
 8008530:	0801087c 	.word	0x0801087c
 8008534:	08010b1c 	.word	0x08010b1c
 8008538:	080108c8 	.word	0x080108c8
 800853c:	200000f8 	.word	0x200000f8
 8008540:	200000fd 	.word	0x200000fd
 8008544:	20008b00 	.word	0x20008b00
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	617b      	str	r3, [r7, #20]
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d1d4      	bne.n	80084fe <tcp_process+0x58e>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	60da      	str	r2, [r3, #12]
 800855a:	4b77      	ldr	r3, [pc, #476]	; (8008738 <tcp_process+0x7c8>)
 800855c:	2201      	movs	r2, #1
 800855e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	220a      	movs	r2, #10
 8008564:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8008566:	4b75      	ldr	r3, [pc, #468]	; (800873c <tcp_process+0x7cc>)
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	60da      	str	r2, [r3, #12]
 800856e:	4a73      	ldr	r2, [pc, #460]	; (800873c <tcp_process+0x7cc>)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6013      	str	r3, [r2, #0]
 8008574:	f002 fcf8 	bl	800af68 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8008578:	e0d2      	b.n	8008720 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	8b5b      	ldrh	r3, [r3, #26]
 800857e:	f043 0302 	orr.w	r3, r3, #2
 8008582:	b29a      	uxth	r2, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2208      	movs	r2, #8
 800858c:	751a      	strb	r2, [r3, #20]
      break;
 800858e:	e0c7      	b.n	8008720 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008590:	4b6b      	ldr	r3, [pc, #428]	; (8008740 <tcp_process+0x7d0>)
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	f003 0310 	and.w	r3, r3, #16
 8008598:	2b00      	cmp	r3, #0
 800859a:	f000 80c1 	beq.w	8008720 <tcp_process+0x7b0>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80085a2:	4b68      	ldr	r3, [pc, #416]	; (8008744 <tcp_process+0x7d4>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	f040 80ba 	bne.w	8008720 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	f040 80b5 	bne.w	8008720 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2206      	movs	r2, #6
 80085ba:	751a      	strb	r2, [r3, #20]
      break;
 80085bc:	e0b0      	b.n	8008720 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 f9ca 	bl	8008958 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80085c4:	4b60      	ldr	r3, [pc, #384]	; (8008748 <tcp_process+0x7d8>)
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	f003 0320 	and.w	r3, r3, #32
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	f000 80a9 	beq.w	8008724 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	8b5b      	ldrh	r3, [r3, #26]
 80085d6:	f043 0302 	orr.w	r3, r3, #2
 80085da:	b29a      	uxth	r2, r3
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f7fe fd3b 	bl	800705c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80085e6:	4b59      	ldr	r3, [pc, #356]	; (800874c <tcp_process+0x7dc>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d105      	bne.n	80085fc <tcp_process+0x68c>
 80085f0:	4b56      	ldr	r3, [pc, #344]	; (800874c <tcp_process+0x7dc>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	68db      	ldr	r3, [r3, #12]
 80085f6:	4a55      	ldr	r2, [pc, #340]	; (800874c <tcp_process+0x7dc>)
 80085f8:	6013      	str	r3, [r2, #0]
 80085fa:	e013      	b.n	8008624 <tcp_process+0x6b4>
 80085fc:	4b53      	ldr	r3, [pc, #332]	; (800874c <tcp_process+0x7dc>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	613b      	str	r3, [r7, #16]
 8008602:	e00c      	b.n	800861e <tcp_process+0x6ae>
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	429a      	cmp	r2, r3
 800860c:	d104      	bne.n	8008618 <tcp_process+0x6a8>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	68da      	ldr	r2, [r3, #12]
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	60da      	str	r2, [r3, #12]
 8008616:	e005      	b.n	8008624 <tcp_process+0x6b4>
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	68db      	ldr	r3, [r3, #12]
 800861c:	613b      	str	r3, [r7, #16]
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d1ef      	bne.n	8008604 <tcp_process+0x694>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2200      	movs	r2, #0
 8008628:	60da      	str	r2, [r3, #12]
 800862a:	4b43      	ldr	r3, [pc, #268]	; (8008738 <tcp_process+0x7c8>)
 800862c:	2201      	movs	r2, #1
 800862e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	220a      	movs	r2, #10
 8008634:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008636:	4b41      	ldr	r3, [pc, #260]	; (800873c <tcp_process+0x7cc>)
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	60da      	str	r2, [r3, #12]
 800863e:	4a3f      	ldr	r2, [pc, #252]	; (800873c <tcp_process+0x7cc>)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6013      	str	r3, [r2, #0]
 8008644:	f002 fc90 	bl	800af68 <tcp_timer_needed>
      }
      break;
 8008648:	e06c      	b.n	8008724 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 f984 	bl	8008958 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008650:	4b3b      	ldr	r3, [pc, #236]	; (8008740 <tcp_process+0x7d0>)
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	f003 0310 	and.w	r3, r3, #16
 8008658:	2b00      	cmp	r3, #0
 800865a:	d065      	beq.n	8008728 <tcp_process+0x7b8>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008660:	4b38      	ldr	r3, [pc, #224]	; (8008744 <tcp_process+0x7d4>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	429a      	cmp	r2, r3
 8008666:	d15f      	bne.n	8008728 <tcp_process+0x7b8>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800866c:	2b00      	cmp	r3, #0
 800866e:	d15b      	bne.n	8008728 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f7fe fcf3 	bl	800705c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008676:	4b35      	ldr	r3, [pc, #212]	; (800874c <tcp_process+0x7dc>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	429a      	cmp	r2, r3
 800867e:	d105      	bne.n	800868c <tcp_process+0x71c>
 8008680:	4b32      	ldr	r3, [pc, #200]	; (800874c <tcp_process+0x7dc>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	68db      	ldr	r3, [r3, #12]
 8008686:	4a31      	ldr	r2, [pc, #196]	; (800874c <tcp_process+0x7dc>)
 8008688:	6013      	str	r3, [r2, #0]
 800868a:	e013      	b.n	80086b4 <tcp_process+0x744>
 800868c:	4b2f      	ldr	r3, [pc, #188]	; (800874c <tcp_process+0x7dc>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	60fb      	str	r3, [r7, #12]
 8008692:	e00c      	b.n	80086ae <tcp_process+0x73e>
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	429a      	cmp	r2, r3
 800869c:	d104      	bne.n	80086a8 <tcp_process+0x738>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	68da      	ldr	r2, [r3, #12]
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	60da      	str	r2, [r3, #12]
 80086a6:	e005      	b.n	80086b4 <tcp_process+0x744>
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	68db      	ldr	r3, [r3, #12]
 80086ac:	60fb      	str	r3, [r7, #12]
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d1ef      	bne.n	8008694 <tcp_process+0x724>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	60da      	str	r2, [r3, #12]
 80086ba:	4b1f      	ldr	r3, [pc, #124]	; (8008738 <tcp_process+0x7c8>)
 80086bc:	2201      	movs	r2, #1
 80086be:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	220a      	movs	r2, #10
 80086c4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80086c6:	4b1d      	ldr	r3, [pc, #116]	; (800873c <tcp_process+0x7cc>)
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	60da      	str	r2, [r3, #12]
 80086ce:	4a1b      	ldr	r2, [pc, #108]	; (800873c <tcp_process+0x7cc>)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6013      	str	r3, [r2, #0]
 80086d4:	f002 fc48 	bl	800af68 <tcp_timer_needed>
      }
      break;
 80086d8:	e026      	b.n	8008728 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 f93c 	bl	8008958 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80086e0:	4b17      	ldr	r3, [pc, #92]	; (8008740 <tcp_process+0x7d0>)
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	f003 0310 	and.w	r3, r3, #16
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d01f      	beq.n	800872c <tcp_process+0x7bc>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80086f0:	4b14      	ldr	r3, [pc, #80]	; (8008744 <tcp_process+0x7d4>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d119      	bne.n	800872c <tcp_process+0x7bc>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d115      	bne.n	800872c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8008700:	4b11      	ldr	r3, [pc, #68]	; (8008748 <tcp_process+0x7d8>)
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	f043 0310 	orr.w	r3, r3, #16
 8008708:	b2da      	uxtb	r2, r3
 800870a:	4b0f      	ldr	r3, [pc, #60]	; (8008748 <tcp_process+0x7d8>)
 800870c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800870e:	e00d      	b.n	800872c <tcp_process+0x7bc>
    default:
      break;
 8008710:	bf00      	nop
 8008712:	e00c      	b.n	800872e <tcp_process+0x7be>
      break;
 8008714:	bf00      	nop
 8008716:	e00a      	b.n	800872e <tcp_process+0x7be>
      break;
 8008718:	bf00      	nop
 800871a:	e008      	b.n	800872e <tcp_process+0x7be>
      break;
 800871c:	bf00      	nop
 800871e:	e006      	b.n	800872e <tcp_process+0x7be>
      break;
 8008720:	bf00      	nop
 8008722:	e004      	b.n	800872e <tcp_process+0x7be>
      break;
 8008724:	bf00      	nop
 8008726:	e002      	b.n	800872e <tcp_process+0x7be>
      break;
 8008728:	bf00      	nop
 800872a:	e000      	b.n	800872e <tcp_process+0x7be>
      break;
 800872c:	bf00      	nop
  }
  return ERR_OK;
 800872e:	2300      	movs	r3, #0
}
 8008730:	4618      	mov	r0, r3
 8008732:	3724      	adds	r7, #36	; 0x24
 8008734:	46bd      	mov	sp, r7
 8008736:	bd90      	pop	{r4, r7, pc}
 8008738:	20008afc 	.word	0x20008afc
 800873c:	20008b10 	.word	0x20008b10
 8008740:	200000fc 	.word	0x200000fc
 8008744:	200000f4 	.word	0x200000f4
 8008748:	200000fd 	.word	0x200000fd
 800874c:	20008b00 	.word	0x20008b00

08008750 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8008750:	b590      	push	{r4, r7, lr}
 8008752:	b085      	sub	sp, #20
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d106      	bne.n	800876e <tcp_oos_insert_segment+0x1e>
 8008760:	4b3b      	ldr	r3, [pc, #236]	; (8008850 <tcp_oos_insert_segment+0x100>)
 8008762:	f240 421f 	movw	r2, #1055	; 0x41f
 8008766:	493b      	ldr	r1, [pc, #236]	; (8008854 <tcp_oos_insert_segment+0x104>)
 8008768:	483b      	ldr	r0, [pc, #236]	; (8008858 <tcp_oos_insert_segment+0x108>)
 800876a:	f005 fd73 	bl	800e254 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	899b      	ldrh	r3, [r3, #12]
 8008774:	b29b      	uxth	r3, r3
 8008776:	4618      	mov	r0, r3
 8008778:	f7fb fcba 	bl	80040f0 <lwip_htons>
 800877c:	4603      	mov	r3, r0
 800877e:	b2db      	uxtb	r3, r3
 8008780:	f003 0301 	and.w	r3, r3, #1
 8008784:	2b00      	cmp	r3, #0
 8008786:	d028      	beq.n	80087da <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8008788:	6838      	ldr	r0, [r7, #0]
 800878a:	f7fe fa65 	bl	8006c58 <tcp_segs_free>
    next = NULL;
 800878e:	2300      	movs	r3, #0
 8008790:	603b      	str	r3, [r7, #0]
 8008792:	e056      	b.n	8008842 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	899b      	ldrh	r3, [r3, #12]
 800879a:	b29b      	uxth	r3, r3
 800879c:	4618      	mov	r0, r3
 800879e:	f7fb fca7 	bl	80040f0 <lwip_htons>
 80087a2:	4603      	mov	r3, r0
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	f003 0301 	and.w	r3, r3, #1
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d00d      	beq.n	80087ca <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	68db      	ldr	r3, [r3, #12]
 80087b2:	899b      	ldrh	r3, [r3, #12]
 80087b4:	b29c      	uxth	r4, r3
 80087b6:	2001      	movs	r0, #1
 80087b8:	f7fb fc9a 	bl	80040f0 <lwip_htons>
 80087bc:	4603      	mov	r3, r0
 80087be:	461a      	mov	r2, r3
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	68db      	ldr	r3, [r3, #12]
 80087c4:	4322      	orrs	r2, r4
 80087c6:	b292      	uxth	r2, r2
 80087c8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80087d4:	68f8      	ldr	r0, [r7, #12]
 80087d6:	f7fe fa54 	bl	8006c82 <tcp_seg_free>
    while (next &&
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d00e      	beq.n	80087fe <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	891b      	ldrh	r3, [r3, #8]
 80087e4:	461a      	mov	r2, r3
 80087e6:	4b1d      	ldr	r3, [pc, #116]	; (800885c <tcp_oos_insert_segment+0x10c>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	441a      	add	r2, r3
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	68db      	ldr	r3, [r3, #12]
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	6839      	ldr	r1, [r7, #0]
 80087f4:	8909      	ldrh	r1, [r1, #8]
 80087f6:	440b      	add	r3, r1
 80087f8:	1ad3      	subs	r3, r2, r3
    while (next &&
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	daca      	bge.n	8008794 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d01e      	beq.n	8008842 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	891b      	ldrh	r3, [r3, #8]
 8008808:	461a      	mov	r2, r3
 800880a:	4b14      	ldr	r3, [pc, #80]	; (800885c <tcp_oos_insert_segment+0x10c>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	441a      	add	r2, r3
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	1ad3      	subs	r3, r2, r3
    if (next &&
 8008818:	2b00      	cmp	r3, #0
 800881a:	dd12      	ble.n	8008842 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	68db      	ldr	r3, [r3, #12]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	b29a      	uxth	r2, r3
 8008824:	4b0d      	ldr	r3, [pc, #52]	; (800885c <tcp_oos_insert_segment+0x10c>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	b29b      	uxth	r3, r3
 800882a:	1ad3      	subs	r3, r2, r3
 800882c:	b29a      	uxth	r2, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	685a      	ldr	r2, [r3, #4]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	891b      	ldrh	r3, [r3, #8]
 800883a:	4619      	mov	r1, r3
 800883c:	4610      	mov	r0, r2
 800883e:	f7fc fd85 	bl	800534c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	683a      	ldr	r2, [r7, #0]
 8008846:	601a      	str	r2, [r3, #0]
}
 8008848:	bf00      	nop
 800884a:	3714      	adds	r7, #20
 800884c:	46bd      	mov	sp, r7
 800884e:	bd90      	pop	{r4, r7, pc}
 8008850:	0801087c 	.word	0x0801087c
 8008854:	08010b3c 	.word	0x08010b3c
 8008858:	080108c8 	.word	0x080108c8
 800885c:	200000f0 	.word	0x200000f0

08008860 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8008860:	b5b0      	push	{r4, r5, r7, lr}
 8008862:	b086      	sub	sp, #24
 8008864:	af00      	add	r7, sp, #0
 8008866:	60f8      	str	r0, [r7, #12]
 8008868:	60b9      	str	r1, [r7, #8]
 800886a:	607a      	str	r2, [r7, #4]
 800886c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800886e:	e03e      	b.n	80088ee <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	4618      	mov	r0, r3
 8008880:	f7fc ff72 	bl	8005768 <pbuf_clen>
 8008884:	4603      	mov	r3, r0
 8008886:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800888e:	8a7a      	ldrh	r2, [r7, #18]
 8008890:	429a      	cmp	r2, r3
 8008892:	d906      	bls.n	80088a2 <tcp_free_acked_segments+0x42>
 8008894:	4b2a      	ldr	r3, [pc, #168]	; (8008940 <tcp_free_acked_segments+0xe0>)
 8008896:	f240 4257 	movw	r2, #1111	; 0x457
 800889a:	492a      	ldr	r1, [pc, #168]	; (8008944 <tcp_free_acked_segments+0xe4>)
 800889c:	482a      	ldr	r0, [pc, #168]	; (8008948 <tcp_free_acked_segments+0xe8>)
 800889e:	f005 fcd9 	bl	800e254 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80088a8:	8a7b      	ldrh	r3, [r7, #18]
 80088aa:	1ad3      	subs	r3, r2, r3
 80088ac:	b29a      	uxth	r2, r3
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	891a      	ldrh	r2, [r3, #8]
 80088b8:	4b24      	ldr	r3, [pc, #144]	; (800894c <tcp_free_acked_segments+0xec>)
 80088ba:	881b      	ldrh	r3, [r3, #0]
 80088bc:	4413      	add	r3, r2
 80088be:	b29a      	uxth	r2, r3
 80088c0:	4b22      	ldr	r3, [pc, #136]	; (800894c <tcp_free_acked_segments+0xec>)
 80088c2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80088c4:	6978      	ldr	r0, [r7, #20]
 80088c6:	f7fe f9dc 	bl	8006c82 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d00c      	beq.n	80088ee <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d109      	bne.n	80088ee <tcp_free_acked_segments+0x8e>
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d106      	bne.n	80088ee <tcp_free_acked_segments+0x8e>
 80088e0:	4b17      	ldr	r3, [pc, #92]	; (8008940 <tcp_free_acked_segments+0xe0>)
 80088e2:	f240 4261 	movw	r2, #1121	; 0x461
 80088e6:	491a      	ldr	r1, [pc, #104]	; (8008950 <tcp_free_acked_segments+0xf0>)
 80088e8:	4817      	ldr	r0, [pc, #92]	; (8008948 <tcp_free_acked_segments+0xe8>)
 80088ea:	f005 fcb3 	bl	800e254 <iprintf>
  while (seg_list != NULL &&
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d020      	beq.n	8008936 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	4618      	mov	r0, r3
 80088fc:	f7fb fc0d 	bl	800411a <lwip_htonl>
 8008900:	4604      	mov	r4, r0
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	891b      	ldrh	r3, [r3, #8]
 8008906:	461d      	mov	r5, r3
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	899b      	ldrh	r3, [r3, #12]
 800890e:	b29b      	uxth	r3, r3
 8008910:	4618      	mov	r0, r3
 8008912:	f7fb fbed 	bl	80040f0 <lwip_htons>
 8008916:	4603      	mov	r3, r0
 8008918:	b2db      	uxtb	r3, r3
 800891a:	f003 0303 	and.w	r3, r3, #3
 800891e:	2b00      	cmp	r3, #0
 8008920:	d001      	beq.n	8008926 <tcp_free_acked_segments+0xc6>
 8008922:	2301      	movs	r3, #1
 8008924:	e000      	b.n	8008928 <tcp_free_acked_segments+0xc8>
 8008926:	2300      	movs	r3, #0
 8008928:	442b      	add	r3, r5
 800892a:	18e2      	adds	r2, r4, r3
 800892c:	4b09      	ldr	r3, [pc, #36]	; (8008954 <tcp_free_acked_segments+0xf4>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8008932:	2b00      	cmp	r3, #0
 8008934:	dd9c      	ble.n	8008870 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8008936:	68bb      	ldr	r3, [r7, #8]
}
 8008938:	4618      	mov	r0, r3
 800893a:	3718      	adds	r7, #24
 800893c:	46bd      	mov	sp, r7
 800893e:	bdb0      	pop	{r4, r5, r7, pc}
 8008940:	0801087c 	.word	0x0801087c
 8008944:	08010b64 	.word	0x08010b64
 8008948:	080108c8 	.word	0x080108c8
 800894c:	200000f8 	.word	0x200000f8
 8008950:	08010b8c 	.word	0x08010b8c
 8008954:	200000f4 	.word	0x200000f4

08008958 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8008958:	b5b0      	push	{r4, r5, r7, lr}
 800895a:	b094      	sub	sp, #80	; 0x50
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8008960:	2300      	movs	r3, #0
 8008962:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d106      	bne.n	8008978 <tcp_receive+0x20>
 800896a:	4ba6      	ldr	r3, [pc, #664]	; (8008c04 <tcp_receive+0x2ac>)
 800896c:	f240 427b 	movw	r2, #1147	; 0x47b
 8008970:	49a5      	ldr	r1, [pc, #660]	; (8008c08 <tcp_receive+0x2b0>)
 8008972:	48a6      	ldr	r0, [pc, #664]	; (8008c0c <tcp_receive+0x2b4>)
 8008974:	f005 fc6e 	bl	800e254 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	7d1b      	ldrb	r3, [r3, #20]
 800897c:	2b03      	cmp	r3, #3
 800897e:	d806      	bhi.n	800898e <tcp_receive+0x36>
 8008980:	4ba0      	ldr	r3, [pc, #640]	; (8008c04 <tcp_receive+0x2ac>)
 8008982:	f240 427c 	movw	r2, #1148	; 0x47c
 8008986:	49a2      	ldr	r1, [pc, #648]	; (8008c10 <tcp_receive+0x2b8>)
 8008988:	48a0      	ldr	r0, [pc, #640]	; (8008c0c <tcp_receive+0x2b4>)
 800898a:	f005 fc63 	bl	800e254 <iprintf>

  if (flags & TCP_ACK) {
 800898e:	4ba1      	ldr	r3, [pc, #644]	; (8008c14 <tcp_receive+0x2bc>)
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	f003 0310 	and.w	r3, r3, #16
 8008996:	2b00      	cmp	r3, #0
 8008998:	f000 8263 	beq.w	8008e62 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80089a2:	461a      	mov	r2, r3
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089a8:	4413      	add	r3, r2
 80089aa:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80089b0:	4b99      	ldr	r3, [pc, #612]	; (8008c18 <tcp_receive+0x2c0>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	1ad3      	subs	r3, r2, r3
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	db1b      	blt.n	80089f2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80089be:	4b96      	ldr	r3, [pc, #600]	; (8008c18 <tcp_receive+0x2c0>)
 80089c0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d106      	bne.n	80089d4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80089ca:	4b94      	ldr	r3, [pc, #592]	; (8008c1c <tcp_receive+0x2c4>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	1ad3      	subs	r3, r2, r3
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	db0e      	blt.n	80089f2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80089d8:	4b90      	ldr	r3, [pc, #576]	; (8008c1c <tcp_receive+0x2c4>)
 80089da:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80089dc:	429a      	cmp	r2, r3
 80089de:	d125      	bne.n	8008a2c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80089e0:	4b8f      	ldr	r3, [pc, #572]	; (8008c20 <tcp_receive+0x2c8>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	89db      	ldrh	r3, [r3, #14]
 80089e6:	b29a      	uxth	r2, r3
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d91c      	bls.n	8008a2c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80089f2:	4b8b      	ldr	r3, [pc, #556]	; (8008c20 <tcp_receive+0x2c8>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	89db      	ldrh	r3, [r3, #14]
 80089f8:	b29a      	uxth	r2, r3
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d205      	bcs.n	8008a1c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8008a1c:	4b7e      	ldr	r3, [pc, #504]	; (8008c18 <tcp_receive+0x2c0>)
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8008a24:	4b7d      	ldr	r3, [pc, #500]	; (8008c1c <tcp_receive+0x2c4>)
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008a2c:	4b7b      	ldr	r3, [pc, #492]	; (8008c1c <tcp_receive+0x2c4>)
 8008a2e:	681a      	ldr	r2, [r3, #0]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a34:	1ad3      	subs	r3, r2, r3
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	dc58      	bgt.n	8008aec <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8008a3a:	4b7a      	ldr	r3, [pc, #488]	; (8008c24 <tcp_receive+0x2cc>)
 8008a3c:	881b      	ldrh	r3, [r3, #0]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d14b      	bne.n	8008ada <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8008a4c:	4413      	add	r3, r2
 8008a4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d142      	bne.n	8008ada <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	db3d      	blt.n	8008ada <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a62:	4b6e      	ldr	r3, [pc, #440]	; (8008c1c <tcp_receive+0x2c4>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d137      	bne.n	8008ada <tcp_receive+0x182>
              found_dupack = 1;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008a74:	2bff      	cmp	r3, #255	; 0xff
 8008a76:	d007      	beq.n	8008a88 <tcp_receive+0x130>
                ++pcb->dupacks;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008a7e:	3301      	adds	r3, #1
 8008a80:	b2da      	uxtb	r2, r3
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008a8e:	2b03      	cmp	r3, #3
 8008a90:	d91b      	bls.n	8008aca <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008a9c:	4413      	add	r3, r2
 8008a9e:	b29a      	uxth	r2, r3
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d30a      	bcc.n	8008ac0 <tcp_receive+0x168>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008ab4:	4413      	add	r3, r2
 8008ab6:	b29a      	uxth	r2, r3
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008abe:	e004      	b.n	8008aca <tcp_receive+0x172>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ac6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008ad0:	2b02      	cmp	r3, #2
 8008ad2:	d902      	bls.n	8008ada <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f001 fee9 	bl	800a8ac <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8008ada:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	f040 8160 	bne.w	8008da2 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008aea:	e15a      	b.n	8008da2 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008aec:	4b4b      	ldr	r3, [pc, #300]	; (8008c1c <tcp_receive+0x2c4>)
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008af4:	1ad3      	subs	r3, r2, r3
 8008af6:	3b01      	subs	r3, #1
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	f2c0 814d 	blt.w	8008d98 <tcp_receive+0x440>
 8008afe:	4b47      	ldr	r3, [pc, #284]	; (8008c1c <tcp_receive+0x2c4>)
 8008b00:	681a      	ldr	r2, [r3, #0]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b06:	1ad3      	subs	r3, r2, r3
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	f300 8145 	bgt.w	8008d98 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	8b5b      	ldrh	r3, [r3, #26]
 8008b12:	f003 0304 	and.w	r3, r3, #4
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d010      	beq.n	8008b3c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	8b5b      	ldrh	r3, [r3, #26]
 8008b1e:	f023 0304 	bic.w	r3, r3, #4
 8008b22:	b29a      	uxth	r2, r3
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2200      	movs	r2, #0
 8008b38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008b4a:	10db      	asrs	r3, r3, #3
 8008b4c:	b21b      	sxth	r3, r3
 8008b4e:	b29a      	uxth	r2, r3
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	4413      	add	r3, r2
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	b21a      	sxth	r2, r3
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8008b64:	4b2d      	ldr	r3, [pc, #180]	; (8008c1c <tcp_receive+0x2c4>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	b29a      	uxth	r2, r3
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	1ad3      	subs	r3, r2, r3
 8008b72:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2200      	movs	r2, #0
 8008b78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8008b7c:	4b27      	ldr	r3, [pc, #156]	; (8008c1c <tcp_receive+0x2c4>)
 8008b7e:	681a      	ldr	r2, [r3, #0]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	7d1b      	ldrb	r3, [r3, #20]
 8008b88:	2b03      	cmp	r3, #3
 8008b8a:	f240 8096 	bls.w	8008cba <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d244      	bcs.n	8008c28 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	8b5b      	ldrh	r3, [r3, #26]
 8008ba2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d001      	beq.n	8008bae <tcp_receive+0x256>
 8008baa:	2301      	movs	r3, #1
 8008bac:	e000      	b.n	8008bb0 <tcp_receive+0x258>
 8008bae:	2302      	movs	r3, #2
 8008bb0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8008bb4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008bb8:	b29a      	uxth	r2, r3
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008bbe:	fb12 f303 	smulbb	r3, r2, r3
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	bf28      	it	cs
 8008bca:	4613      	movcs	r3, r2
 8008bcc:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008bd4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008bd6:	4413      	add	r3, r2
 8008bd8:	b29a      	uxth	r2, r3
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d309      	bcc.n	8008bf8 <tcp_receive+0x2a0>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008bea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008bec:	4413      	add	r3, r2
 8008bee:	b29a      	uxth	r2, r3
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008bf6:	e060      	b.n	8008cba <tcp_receive+0x362>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008bfe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008c02:	e05a      	b.n	8008cba <tcp_receive+0x362>
 8008c04:	0801087c 	.word	0x0801087c
 8008c08:	08010bac 	.word	0x08010bac
 8008c0c:	080108c8 	.word	0x080108c8
 8008c10:	08010bc8 	.word	0x08010bc8
 8008c14:	200000fc 	.word	0x200000fc
 8008c18:	200000f0 	.word	0x200000f0
 8008c1c:	200000f4 	.word	0x200000f4
 8008c20:	200000e0 	.word	0x200000e0
 8008c24:	200000fa 	.word	0x200000fa
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008c2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008c30:	4413      	add	r3, r2
 8008c32:	b29a      	uxth	r2, r3
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d309      	bcc.n	8008c52 <tcp_receive+0x2fa>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008c44:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008c46:	4413      	add	r3, r2
 8008c48:	b29a      	uxth	r2, r3
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008c50:	e004      	b.n	8008c5c <tcp_receive+0x304>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d326      	bcc.n	8008cba <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008c78:	1ad3      	subs	r3, r2, r3
 8008c7a:	b29a      	uxth	r2, r3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c8c:	4413      	add	r3, r2
 8008c8e:	b29a      	uxth	r2, r3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d30a      	bcc.n	8008cb0 <tcp_receive+0x358>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008ca4:	4413      	add	r3, r2
 8008ca6:	b29a      	uxth	r2, r3
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008cae:	e004      	b.n	8008cba <tcp_receive+0x362>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008cb6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cc2:	4a98      	ldr	r2, [pc, #608]	; (8008f24 <tcp_receive+0x5cc>)
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f7ff fdcb 	bl	8008860 <tcp_free_acked_segments>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cd8:	4a93      	ldr	r2, [pc, #588]	; (8008f28 <tcp_receive+0x5d0>)
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f7ff fdc0 	bl	8008860 <tcp_free_acked_segments>
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d104      	bne.n	8008cf8 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008cf4:	861a      	strh	r2, [r3, #48]	; 0x30
 8008cf6:	e002      	b.n	8008cfe <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2200      	movs	r2, #0
 8008d02:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d103      	bne.n	8008d14 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8008d1a:	4b84      	ldr	r3, [pc, #528]	; (8008f2c <tcp_receive+0x5d4>)
 8008d1c:	881b      	ldrh	r3, [r3, #0]
 8008d1e:	4413      	add	r3, r2
 8008d20:	b29a      	uxth	r2, r3
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	8b5b      	ldrh	r3, [r3, #26]
 8008d2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d035      	beq.n	8008da0 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d118      	bne.n	8008d6e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d00c      	beq.n	8008d5e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d4c:	68db      	ldr	r3, [r3, #12]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	4618      	mov	r0, r3
 8008d52:	f7fb f9e2 	bl	800411a <lwip_htonl>
 8008d56:	4603      	mov	r3, r0
 8008d58:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	dc20      	bgt.n	8008da0 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	8b5b      	ldrh	r3, [r3, #26]
 8008d62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d66:	b29a      	uxth	r2, r3
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008d6c:	e018      	b.n	8008da0 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d76:	68db      	ldr	r3, [r3, #12]
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7fb f9cd 	bl	800411a <lwip_htonl>
 8008d80:	4603      	mov	r3, r0
 8008d82:	1ae3      	subs	r3, r4, r3
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	dc0b      	bgt.n	8008da0 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	8b5b      	ldrh	r3, [r3, #26]
 8008d8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d90:	b29a      	uxth	r2, r3
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008d96:	e003      	b.n	8008da0 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f001 ff75 	bl	800ac88 <tcp_send_empty_ack>
 8008d9e:	e000      	b.n	8008da2 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008da0:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d05b      	beq.n	8008e62 <tcp_receive+0x50a>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dae:	4b60      	ldr	r3, [pc, #384]	; (8008f30 <tcp_receive+0x5d8>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	1ad3      	subs	r3, r2, r3
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	da54      	bge.n	8008e62 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8008db8:	4b5e      	ldr	r3, [pc, #376]	; (8008f34 <tcp_receive+0x5dc>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	b29a      	uxth	r2, r3
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	1ad3      	subs	r3, r2, r3
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8008dcc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008dd6:	10db      	asrs	r3, r3, #3
 8008dd8:	b21b      	sxth	r3, r3
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	1ad3      	subs	r3, r2, r3
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008dea:	b29a      	uxth	r2, r3
 8008dec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008df0:	4413      	add	r3, r2
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	b21a      	sxth	r2, r3
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8008dfa:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	da05      	bge.n	8008e0e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8008e02:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008e06:	425b      	negs	r3, r3
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8008e0e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008e18:	109b      	asrs	r3, r3, #2
 8008e1a:	b21b      	sxth	r3, r3
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	1ad3      	subs	r3, r2, r3
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008e2c:	b29a      	uxth	r2, r3
 8008e2e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008e32:	4413      	add	r3, r2
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	b21a      	sxth	r2, r3
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008e42:	10db      	asrs	r3, r3, #3
 8008e44:	b21b      	sxth	r3, r3
 8008e46:	b29a      	uxth	r2, r3
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	4413      	add	r3, r2
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	b21a      	sxth	r2, r3
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8008e62:	4b35      	ldr	r3, [pc, #212]	; (8008f38 <tcp_receive+0x5e0>)
 8008e64:	881b      	ldrh	r3, [r3, #0]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	f000 84e1 	beq.w	800982e <tcp_receive+0xed6>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	7d1b      	ldrb	r3, [r3, #20]
 8008e70:	2b06      	cmp	r3, #6
 8008e72:	f200 84dc 	bhi.w	800982e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e7a:	4b30      	ldr	r3, [pc, #192]	; (8008f3c <tcp_receive+0x5e4>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	1ad3      	subs	r3, r2, r3
 8008e80:	3b01      	subs	r3, #1
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	f2c0 808e 	blt.w	8008fa4 <tcp_receive+0x64c>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e8c:	4b2a      	ldr	r3, [pc, #168]	; (8008f38 <tcp_receive+0x5e0>)
 8008e8e:	881b      	ldrh	r3, [r3, #0]
 8008e90:	4619      	mov	r1, r3
 8008e92:	4b2a      	ldr	r3, [pc, #168]	; (8008f3c <tcp_receive+0x5e4>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	440b      	add	r3, r1
 8008e98:	1ad3      	subs	r3, r2, r3
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	f300 8081 	bgt.w	8008fa4 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8008ea2:	4b27      	ldr	r3, [pc, #156]	; (8008f40 <tcp_receive+0x5e8>)
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008eac:	4b23      	ldr	r3, [pc, #140]	; (8008f3c <tcp_receive+0x5e4>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	1ad3      	subs	r3, r2, r3
 8008eb2:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8008eb4:	4b22      	ldr	r3, [pc, #136]	; (8008f40 <tcp_receive+0x5e8>)
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d106      	bne.n	8008eca <tcp_receive+0x572>
 8008ebc:	4b21      	ldr	r3, [pc, #132]	; (8008f44 <tcp_receive+0x5ec>)
 8008ebe:	f240 5294 	movw	r2, #1428	; 0x594
 8008ec2:	4921      	ldr	r1, [pc, #132]	; (8008f48 <tcp_receive+0x5f0>)
 8008ec4:	4821      	ldr	r0, [pc, #132]	; (8008f4c <tcp_receive+0x5f4>)
 8008ec6:	f005 f9c5 	bl	800e254 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8008eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ecc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d906      	bls.n	8008ee2 <tcp_receive+0x58a>
 8008ed4:	4b1b      	ldr	r3, [pc, #108]	; (8008f44 <tcp_receive+0x5ec>)
 8008ed6:	f240 5295 	movw	r2, #1429	; 0x595
 8008eda:	491d      	ldr	r1, [pc, #116]	; (8008f50 <tcp_receive+0x5f8>)
 8008edc:	481b      	ldr	r0, [pc, #108]	; (8008f4c <tcp_receive+0x5f4>)
 8008ede:	f005 f9b9 	bl	800e254 <iprintf>
      off = (u16_t)off32;
 8008ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008ee8:	4b15      	ldr	r3, [pc, #84]	; (8008f40 <tcp_receive+0x5e8>)
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	891b      	ldrh	r3, [r3, #8]
 8008eee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d906      	bls.n	8008f04 <tcp_receive+0x5ac>
 8008ef6:	4b13      	ldr	r3, [pc, #76]	; (8008f44 <tcp_receive+0x5ec>)
 8008ef8:	f240 5297 	movw	r2, #1431	; 0x597
 8008efc:	4915      	ldr	r1, [pc, #84]	; (8008f54 <tcp_receive+0x5fc>)
 8008efe:	4813      	ldr	r0, [pc, #76]	; (8008f4c <tcp_receive+0x5f4>)
 8008f00:	f005 f9a8 	bl	800e254 <iprintf>
      inseg.len -= off;
 8008f04:	4b0e      	ldr	r3, [pc, #56]	; (8008f40 <tcp_receive+0x5e8>)
 8008f06:	891a      	ldrh	r2, [r3, #8]
 8008f08:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008f0c:	1ad3      	subs	r3, r2, r3
 8008f0e:	b29a      	uxth	r2, r3
 8008f10:	4b0b      	ldr	r3, [pc, #44]	; (8008f40 <tcp_receive+0x5e8>)
 8008f12:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8008f14:	4b0a      	ldr	r3, [pc, #40]	; (8008f40 <tcp_receive+0x5e8>)
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	891a      	ldrh	r2, [r3, #8]
 8008f1a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008f1e:	1ad3      	subs	r3, r2, r3
 8008f20:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8008f22:	e029      	b.n	8008f78 <tcp_receive+0x620>
 8008f24:	08010be4 	.word	0x08010be4
 8008f28:	08010bec 	.word	0x08010bec
 8008f2c:	200000f8 	.word	0x200000f8
 8008f30:	200000f4 	.word	0x200000f4
 8008f34:	20008b04 	.word	0x20008b04
 8008f38:	200000fa 	.word	0x200000fa
 8008f3c:	200000f0 	.word	0x200000f0
 8008f40:	200000d0 	.word	0x200000d0
 8008f44:	0801087c 	.word	0x0801087c
 8008f48:	08010bf4 	.word	0x08010bf4
 8008f4c:	080108c8 	.word	0x080108c8
 8008f50:	08010c04 	.word	0x08010c04
 8008f54:	08010c14 	.word	0x08010c14
        off -= p->len;
 8008f58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f5a:	895b      	ldrh	r3, [r3, #10]
 8008f5c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008f60:	1ad3      	subs	r3, r2, r3
 8008f62:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8008f66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f68:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008f6a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8008f6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f6e:	2200      	movs	r2, #0
 8008f70:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8008f72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8008f78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f7a:	895b      	ldrh	r3, [r3, #10]
 8008f7c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d8e9      	bhi.n	8008f58 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8008f84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008f88:	4619      	mov	r1, r3
 8008f8a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008f8c:	f7fc fade 	bl	800554c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f94:	4a91      	ldr	r2, [pc, #580]	; (80091dc <tcp_receive+0x884>)
 8008f96:	6013      	str	r3, [r2, #0]
 8008f98:	4b91      	ldr	r3, [pc, #580]	; (80091e0 <tcp_receive+0x888>)
 8008f9a:	68db      	ldr	r3, [r3, #12]
 8008f9c:	4a8f      	ldr	r2, [pc, #572]	; (80091dc <tcp_receive+0x884>)
 8008f9e:	6812      	ldr	r2, [r2, #0]
 8008fa0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008fa2:	e00d      	b.n	8008fc0 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8008fa4:	4b8d      	ldr	r3, [pc, #564]	; (80091dc <tcp_receive+0x884>)
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fac:	1ad3      	subs	r3, r2, r3
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	da06      	bge.n	8008fc0 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	8b5b      	ldrh	r3, [r3, #26]
 8008fb6:	f043 0302 	orr.w	r3, r3, #2
 8008fba:	b29a      	uxth	r2, r3
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008fc0:	4b86      	ldr	r3, [pc, #536]	; (80091dc <tcp_receive+0x884>)
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc8:	1ad3      	subs	r3, r2, r3
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	f2c0 842a 	blt.w	8009824 <tcp_receive+0xecc>
 8008fd0:	4b82      	ldr	r3, [pc, #520]	; (80091dc <tcp_receive+0x884>)
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd8:	6879      	ldr	r1, [r7, #4]
 8008fda:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008fdc:	440b      	add	r3, r1
 8008fde:	1ad3      	subs	r3, r2, r3
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	f300 841e 	bgt.w	8009824 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008fec:	4b7b      	ldr	r3, [pc, #492]	; (80091dc <tcp_receive+0x884>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	f040 829a 	bne.w	800952a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8008ff6:	4b7a      	ldr	r3, [pc, #488]	; (80091e0 <tcp_receive+0x888>)
 8008ff8:	891c      	ldrh	r4, [r3, #8]
 8008ffa:	4b79      	ldr	r3, [pc, #484]	; (80091e0 <tcp_receive+0x888>)
 8008ffc:	68db      	ldr	r3, [r3, #12]
 8008ffe:	899b      	ldrh	r3, [r3, #12]
 8009000:	b29b      	uxth	r3, r3
 8009002:	4618      	mov	r0, r3
 8009004:	f7fb f874 	bl	80040f0 <lwip_htons>
 8009008:	4603      	mov	r3, r0
 800900a:	b2db      	uxtb	r3, r3
 800900c:	f003 0303 	and.w	r3, r3, #3
 8009010:	2b00      	cmp	r3, #0
 8009012:	d001      	beq.n	8009018 <tcp_receive+0x6c0>
 8009014:	2301      	movs	r3, #1
 8009016:	e000      	b.n	800901a <tcp_receive+0x6c2>
 8009018:	2300      	movs	r3, #0
 800901a:	4423      	add	r3, r4
 800901c:	b29a      	uxth	r2, r3
 800901e:	4b71      	ldr	r3, [pc, #452]	; (80091e4 <tcp_receive+0x88c>)
 8009020:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009026:	4b6f      	ldr	r3, [pc, #444]	; (80091e4 <tcp_receive+0x88c>)
 8009028:	881b      	ldrh	r3, [r3, #0]
 800902a:	429a      	cmp	r2, r3
 800902c:	d275      	bcs.n	800911a <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800902e:	4b6c      	ldr	r3, [pc, #432]	; (80091e0 <tcp_receive+0x888>)
 8009030:	68db      	ldr	r3, [r3, #12]
 8009032:	899b      	ldrh	r3, [r3, #12]
 8009034:	b29b      	uxth	r3, r3
 8009036:	4618      	mov	r0, r3
 8009038:	f7fb f85a 	bl	80040f0 <lwip_htons>
 800903c:	4603      	mov	r3, r0
 800903e:	b2db      	uxtb	r3, r3
 8009040:	f003 0301 	and.w	r3, r3, #1
 8009044:	2b00      	cmp	r3, #0
 8009046:	d01f      	beq.n	8009088 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009048:	4b65      	ldr	r3, [pc, #404]	; (80091e0 <tcp_receive+0x888>)
 800904a:	68db      	ldr	r3, [r3, #12]
 800904c:	899b      	ldrh	r3, [r3, #12]
 800904e:	b29b      	uxth	r3, r3
 8009050:	b21b      	sxth	r3, r3
 8009052:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009056:	b21c      	sxth	r4, r3
 8009058:	4b61      	ldr	r3, [pc, #388]	; (80091e0 <tcp_receive+0x888>)
 800905a:	68db      	ldr	r3, [r3, #12]
 800905c:	899b      	ldrh	r3, [r3, #12]
 800905e:	b29b      	uxth	r3, r3
 8009060:	4618      	mov	r0, r3
 8009062:	f7fb f845 	bl	80040f0 <lwip_htons>
 8009066:	4603      	mov	r3, r0
 8009068:	b2db      	uxtb	r3, r3
 800906a:	b29b      	uxth	r3, r3
 800906c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009070:	b29b      	uxth	r3, r3
 8009072:	4618      	mov	r0, r3
 8009074:	f7fb f83c 	bl	80040f0 <lwip_htons>
 8009078:	4603      	mov	r3, r0
 800907a:	b21b      	sxth	r3, r3
 800907c:	4323      	orrs	r3, r4
 800907e:	b21a      	sxth	r2, r3
 8009080:	4b57      	ldr	r3, [pc, #348]	; (80091e0 <tcp_receive+0x888>)
 8009082:	68db      	ldr	r3, [r3, #12]
 8009084:	b292      	uxth	r2, r2
 8009086:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800908c:	4b54      	ldr	r3, [pc, #336]	; (80091e0 <tcp_receive+0x888>)
 800908e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009090:	4b53      	ldr	r3, [pc, #332]	; (80091e0 <tcp_receive+0x888>)
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	899b      	ldrh	r3, [r3, #12]
 8009096:	b29b      	uxth	r3, r3
 8009098:	4618      	mov	r0, r3
 800909a:	f7fb f829 	bl	80040f0 <lwip_htons>
 800909e:	4603      	mov	r3, r0
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	f003 0302 	and.w	r3, r3, #2
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d005      	beq.n	80090b6 <tcp_receive+0x75e>
            inseg.len -= 1;
 80090aa:	4b4d      	ldr	r3, [pc, #308]	; (80091e0 <tcp_receive+0x888>)
 80090ac:	891b      	ldrh	r3, [r3, #8]
 80090ae:	3b01      	subs	r3, #1
 80090b0:	b29a      	uxth	r2, r3
 80090b2:	4b4b      	ldr	r3, [pc, #300]	; (80091e0 <tcp_receive+0x888>)
 80090b4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80090b6:	4b4a      	ldr	r3, [pc, #296]	; (80091e0 <tcp_receive+0x888>)
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	4a49      	ldr	r2, [pc, #292]	; (80091e0 <tcp_receive+0x888>)
 80090bc:	8912      	ldrh	r2, [r2, #8]
 80090be:	4611      	mov	r1, r2
 80090c0:	4618      	mov	r0, r3
 80090c2:	f7fc f943 	bl	800534c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80090c6:	4b46      	ldr	r3, [pc, #280]	; (80091e0 <tcp_receive+0x888>)
 80090c8:	891c      	ldrh	r4, [r3, #8]
 80090ca:	4b45      	ldr	r3, [pc, #276]	; (80091e0 <tcp_receive+0x888>)
 80090cc:	68db      	ldr	r3, [r3, #12]
 80090ce:	899b      	ldrh	r3, [r3, #12]
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	4618      	mov	r0, r3
 80090d4:	f7fb f80c 	bl	80040f0 <lwip_htons>
 80090d8:	4603      	mov	r3, r0
 80090da:	b2db      	uxtb	r3, r3
 80090dc:	f003 0303 	and.w	r3, r3, #3
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d001      	beq.n	80090e8 <tcp_receive+0x790>
 80090e4:	2301      	movs	r3, #1
 80090e6:	e000      	b.n	80090ea <tcp_receive+0x792>
 80090e8:	2300      	movs	r3, #0
 80090ea:	4423      	add	r3, r4
 80090ec:	b29a      	uxth	r2, r3
 80090ee:	4b3d      	ldr	r3, [pc, #244]	; (80091e4 <tcp_receive+0x88c>)
 80090f0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80090f2:	4b3c      	ldr	r3, [pc, #240]	; (80091e4 <tcp_receive+0x88c>)
 80090f4:	881b      	ldrh	r3, [r3, #0]
 80090f6:	461a      	mov	r2, r3
 80090f8:	4b38      	ldr	r3, [pc, #224]	; (80091dc <tcp_receive+0x884>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	441a      	add	r2, r3
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009102:	6879      	ldr	r1, [r7, #4]
 8009104:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009106:	440b      	add	r3, r1
 8009108:	429a      	cmp	r2, r3
 800910a:	d006      	beq.n	800911a <tcp_receive+0x7c2>
 800910c:	4b36      	ldr	r3, [pc, #216]	; (80091e8 <tcp_receive+0x890>)
 800910e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8009112:	4936      	ldr	r1, [pc, #216]	; (80091ec <tcp_receive+0x894>)
 8009114:	4836      	ldr	r0, [pc, #216]	; (80091f0 <tcp_receive+0x898>)
 8009116:	f005 f89d 	bl	800e254 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800911e:	2b00      	cmp	r3, #0
 8009120:	f000 80e7 	beq.w	80092f2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009124:	4b2e      	ldr	r3, [pc, #184]	; (80091e0 <tcp_receive+0x888>)
 8009126:	68db      	ldr	r3, [r3, #12]
 8009128:	899b      	ldrh	r3, [r3, #12]
 800912a:	b29b      	uxth	r3, r3
 800912c:	4618      	mov	r0, r3
 800912e:	f7fa ffdf 	bl	80040f0 <lwip_htons>
 8009132:	4603      	mov	r3, r0
 8009134:	b2db      	uxtb	r3, r3
 8009136:	f003 0301 	and.w	r3, r3, #1
 800913a:	2b00      	cmp	r3, #0
 800913c:	d010      	beq.n	8009160 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800913e:	e00a      	b.n	8009156 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009144:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800914a:	681a      	ldr	r2, [r3, #0]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8009150:	68f8      	ldr	r0, [r7, #12]
 8009152:	f7fd fd96 	bl	8006c82 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800915a:	2b00      	cmp	r3, #0
 800915c:	d1f0      	bne.n	8009140 <tcp_receive+0x7e8>
 800915e:	e0c8      	b.n	80092f2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009164:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8009166:	e052      	b.n	800920e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800916a:	68db      	ldr	r3, [r3, #12]
 800916c:	899b      	ldrh	r3, [r3, #12]
 800916e:	b29b      	uxth	r3, r3
 8009170:	4618      	mov	r0, r3
 8009172:	f7fa ffbd 	bl	80040f0 <lwip_htons>
 8009176:	4603      	mov	r3, r0
 8009178:	b2db      	uxtb	r3, r3
 800917a:	f003 0301 	and.w	r3, r3, #1
 800917e:	2b00      	cmp	r3, #0
 8009180:	d03d      	beq.n	80091fe <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8009182:	4b17      	ldr	r3, [pc, #92]	; (80091e0 <tcp_receive+0x888>)
 8009184:	68db      	ldr	r3, [r3, #12]
 8009186:	899b      	ldrh	r3, [r3, #12]
 8009188:	b29b      	uxth	r3, r3
 800918a:	4618      	mov	r0, r3
 800918c:	f7fa ffb0 	bl	80040f0 <lwip_htons>
 8009190:	4603      	mov	r3, r0
 8009192:	b2db      	uxtb	r3, r3
 8009194:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009198:	2b00      	cmp	r3, #0
 800919a:	d130      	bne.n	80091fe <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800919c:	4b10      	ldr	r3, [pc, #64]	; (80091e0 <tcp_receive+0x888>)
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	899b      	ldrh	r3, [r3, #12]
 80091a2:	b29c      	uxth	r4, r3
 80091a4:	2001      	movs	r0, #1
 80091a6:	f7fa ffa3 	bl	80040f0 <lwip_htons>
 80091aa:	4603      	mov	r3, r0
 80091ac:	461a      	mov	r2, r3
 80091ae:	4b0c      	ldr	r3, [pc, #48]	; (80091e0 <tcp_receive+0x888>)
 80091b0:	68db      	ldr	r3, [r3, #12]
 80091b2:	4322      	orrs	r2, r4
 80091b4:	b292      	uxth	r2, r2
 80091b6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80091b8:	4b09      	ldr	r3, [pc, #36]	; (80091e0 <tcp_receive+0x888>)
 80091ba:	891c      	ldrh	r4, [r3, #8]
 80091bc:	4b08      	ldr	r3, [pc, #32]	; (80091e0 <tcp_receive+0x888>)
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	899b      	ldrh	r3, [r3, #12]
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	4618      	mov	r0, r3
 80091c6:	f7fa ff93 	bl	80040f0 <lwip_htons>
 80091ca:	4603      	mov	r3, r0
 80091cc:	b2db      	uxtb	r3, r3
 80091ce:	f003 0303 	and.w	r3, r3, #3
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d00e      	beq.n	80091f4 <tcp_receive+0x89c>
 80091d6:	2301      	movs	r3, #1
 80091d8:	e00d      	b.n	80091f6 <tcp_receive+0x89e>
 80091da:	bf00      	nop
 80091dc:	200000f0 	.word	0x200000f0
 80091e0:	200000d0 	.word	0x200000d0
 80091e4:	200000fa 	.word	0x200000fa
 80091e8:	0801087c 	.word	0x0801087c
 80091ec:	08010c24 	.word	0x08010c24
 80091f0:	080108c8 	.word	0x080108c8
 80091f4:	2300      	movs	r3, #0
 80091f6:	4423      	add	r3, r4
 80091f8:	b29a      	uxth	r2, r3
 80091fa:	4b98      	ldr	r3, [pc, #608]	; (800945c <tcp_receive+0xb04>)
 80091fc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80091fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009200:	613b      	str	r3, [r7, #16]
              next = next->next;
 8009202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8009208:	6938      	ldr	r0, [r7, #16]
 800920a:	f7fd fd3a 	bl	8006c82 <tcp_seg_free>
            while (next &&
 800920e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009210:	2b00      	cmp	r3, #0
 8009212:	d00e      	beq.n	8009232 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009214:	4b91      	ldr	r3, [pc, #580]	; (800945c <tcp_receive+0xb04>)
 8009216:	881b      	ldrh	r3, [r3, #0]
 8009218:	461a      	mov	r2, r3
 800921a:	4b91      	ldr	r3, [pc, #580]	; (8009460 <tcp_receive+0xb08>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	441a      	add	r2, r3
 8009220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009222:	68db      	ldr	r3, [r3, #12]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009228:	8909      	ldrh	r1, [r1, #8]
 800922a:	440b      	add	r3, r1
 800922c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800922e:	2b00      	cmp	r3, #0
 8009230:	da9a      	bge.n	8009168 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8009232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009234:	2b00      	cmp	r3, #0
 8009236:	d059      	beq.n	80092ec <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8009238:	4b88      	ldr	r3, [pc, #544]	; (800945c <tcp_receive+0xb04>)
 800923a:	881b      	ldrh	r3, [r3, #0]
 800923c:	461a      	mov	r2, r3
 800923e:	4b88      	ldr	r3, [pc, #544]	; (8009460 <tcp_receive+0xb08>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	441a      	add	r2, r3
 8009244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009246:	68db      	ldr	r3, [r3, #12]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800924c:	2b00      	cmp	r3, #0
 800924e:	dd4d      	ble.n	80092ec <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009252:	68db      	ldr	r3, [r3, #12]
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	b29a      	uxth	r2, r3
 8009258:	4b81      	ldr	r3, [pc, #516]	; (8009460 <tcp_receive+0xb08>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	b29b      	uxth	r3, r3
 800925e:	1ad3      	subs	r3, r2, r3
 8009260:	b29a      	uxth	r2, r3
 8009262:	4b80      	ldr	r3, [pc, #512]	; (8009464 <tcp_receive+0xb0c>)
 8009264:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009266:	4b7f      	ldr	r3, [pc, #508]	; (8009464 <tcp_receive+0xb0c>)
 8009268:	68db      	ldr	r3, [r3, #12]
 800926a:	899b      	ldrh	r3, [r3, #12]
 800926c:	b29b      	uxth	r3, r3
 800926e:	4618      	mov	r0, r3
 8009270:	f7fa ff3e 	bl	80040f0 <lwip_htons>
 8009274:	4603      	mov	r3, r0
 8009276:	b2db      	uxtb	r3, r3
 8009278:	f003 0302 	and.w	r3, r3, #2
 800927c:	2b00      	cmp	r3, #0
 800927e:	d005      	beq.n	800928c <tcp_receive+0x934>
                inseg.len -= 1;
 8009280:	4b78      	ldr	r3, [pc, #480]	; (8009464 <tcp_receive+0xb0c>)
 8009282:	891b      	ldrh	r3, [r3, #8]
 8009284:	3b01      	subs	r3, #1
 8009286:	b29a      	uxth	r2, r3
 8009288:	4b76      	ldr	r3, [pc, #472]	; (8009464 <tcp_receive+0xb0c>)
 800928a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800928c:	4b75      	ldr	r3, [pc, #468]	; (8009464 <tcp_receive+0xb0c>)
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	4a74      	ldr	r2, [pc, #464]	; (8009464 <tcp_receive+0xb0c>)
 8009292:	8912      	ldrh	r2, [r2, #8]
 8009294:	4611      	mov	r1, r2
 8009296:	4618      	mov	r0, r3
 8009298:	f7fc f858 	bl	800534c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800929c:	4b71      	ldr	r3, [pc, #452]	; (8009464 <tcp_receive+0xb0c>)
 800929e:	891c      	ldrh	r4, [r3, #8]
 80092a0:	4b70      	ldr	r3, [pc, #448]	; (8009464 <tcp_receive+0xb0c>)
 80092a2:	68db      	ldr	r3, [r3, #12]
 80092a4:	899b      	ldrh	r3, [r3, #12]
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	4618      	mov	r0, r3
 80092aa:	f7fa ff21 	bl	80040f0 <lwip_htons>
 80092ae:	4603      	mov	r3, r0
 80092b0:	b2db      	uxtb	r3, r3
 80092b2:	f003 0303 	and.w	r3, r3, #3
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d001      	beq.n	80092be <tcp_receive+0x966>
 80092ba:	2301      	movs	r3, #1
 80092bc:	e000      	b.n	80092c0 <tcp_receive+0x968>
 80092be:	2300      	movs	r3, #0
 80092c0:	4423      	add	r3, r4
 80092c2:	b29a      	uxth	r2, r3
 80092c4:	4b65      	ldr	r3, [pc, #404]	; (800945c <tcp_receive+0xb04>)
 80092c6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80092c8:	4b64      	ldr	r3, [pc, #400]	; (800945c <tcp_receive+0xb04>)
 80092ca:	881b      	ldrh	r3, [r3, #0]
 80092cc:	461a      	mov	r2, r3
 80092ce:	4b64      	ldr	r3, [pc, #400]	; (8009460 <tcp_receive+0xb08>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	441a      	add	r2, r3
 80092d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092d6:	68db      	ldr	r3, [r3, #12]
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	429a      	cmp	r2, r3
 80092dc:	d006      	beq.n	80092ec <tcp_receive+0x994>
 80092de:	4b62      	ldr	r3, [pc, #392]	; (8009468 <tcp_receive+0xb10>)
 80092e0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80092e4:	4961      	ldr	r1, [pc, #388]	; (800946c <tcp_receive+0xb14>)
 80092e6:	4862      	ldr	r0, [pc, #392]	; (8009470 <tcp_receive+0xb18>)
 80092e8:	f004 ffb4 	bl	800e254 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80092f0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80092f2:	4b5a      	ldr	r3, [pc, #360]	; (800945c <tcp_receive+0xb04>)
 80092f4:	881b      	ldrh	r3, [r3, #0]
 80092f6:	461a      	mov	r2, r3
 80092f8:	4b59      	ldr	r3, [pc, #356]	; (8009460 <tcp_receive+0xb08>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	441a      	add	r2, r3
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009306:	4b55      	ldr	r3, [pc, #340]	; (800945c <tcp_receive+0xb04>)
 8009308:	881b      	ldrh	r3, [r3, #0]
 800930a:	429a      	cmp	r2, r3
 800930c:	d206      	bcs.n	800931c <tcp_receive+0x9c4>
 800930e:	4b56      	ldr	r3, [pc, #344]	; (8009468 <tcp_receive+0xb10>)
 8009310:	f240 6207 	movw	r2, #1543	; 0x607
 8009314:	4957      	ldr	r1, [pc, #348]	; (8009474 <tcp_receive+0xb1c>)
 8009316:	4856      	ldr	r0, [pc, #344]	; (8009470 <tcp_receive+0xb18>)
 8009318:	f004 ff9c 	bl	800e254 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009320:	4b4e      	ldr	r3, [pc, #312]	; (800945c <tcp_receive+0xb04>)
 8009322:	881b      	ldrh	r3, [r3, #0]
 8009324:	1ad3      	subs	r3, r2, r3
 8009326:	b29a      	uxth	r2, r3
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f7fc ffc9 	bl	80062c4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8009332:	4b4c      	ldr	r3, [pc, #304]	; (8009464 <tcp_receive+0xb0c>)
 8009334:	685b      	ldr	r3, [r3, #4]
 8009336:	891b      	ldrh	r3, [r3, #8]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d006      	beq.n	800934a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800933c:	4b49      	ldr	r3, [pc, #292]	; (8009464 <tcp_receive+0xb0c>)
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	4a4d      	ldr	r2, [pc, #308]	; (8009478 <tcp_receive+0xb20>)
 8009342:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8009344:	4b47      	ldr	r3, [pc, #284]	; (8009464 <tcp_receive+0xb0c>)
 8009346:	2200      	movs	r2, #0
 8009348:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800934a:	4b46      	ldr	r3, [pc, #280]	; (8009464 <tcp_receive+0xb0c>)
 800934c:	68db      	ldr	r3, [r3, #12]
 800934e:	899b      	ldrh	r3, [r3, #12]
 8009350:	b29b      	uxth	r3, r3
 8009352:	4618      	mov	r0, r3
 8009354:	f7fa fecc 	bl	80040f0 <lwip_htons>
 8009358:	4603      	mov	r3, r0
 800935a:	b2db      	uxtb	r3, r3
 800935c:	f003 0301 	and.w	r3, r3, #1
 8009360:	2b00      	cmp	r3, #0
 8009362:	f000 80b8 	beq.w	80094d6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8009366:	4b45      	ldr	r3, [pc, #276]	; (800947c <tcp_receive+0xb24>)
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	f043 0320 	orr.w	r3, r3, #32
 800936e:	b2da      	uxtb	r2, r3
 8009370:	4b42      	ldr	r3, [pc, #264]	; (800947c <tcp_receive+0xb24>)
 8009372:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8009374:	e0af      	b.n	80094d6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800937a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009380:	68db      	ldr	r3, [r3, #12]
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	4a36      	ldr	r2, [pc, #216]	; (8009460 <tcp_receive+0xb08>)
 8009386:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	891b      	ldrh	r3, [r3, #8]
 800938c:	461c      	mov	r4, r3
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	68db      	ldr	r3, [r3, #12]
 8009392:	899b      	ldrh	r3, [r3, #12]
 8009394:	b29b      	uxth	r3, r3
 8009396:	4618      	mov	r0, r3
 8009398:	f7fa feaa 	bl	80040f0 <lwip_htons>
 800939c:	4603      	mov	r3, r0
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	f003 0303 	and.w	r3, r3, #3
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d001      	beq.n	80093ac <tcp_receive+0xa54>
 80093a8:	2301      	movs	r3, #1
 80093aa:	e000      	b.n	80093ae <tcp_receive+0xa56>
 80093ac:	2300      	movs	r3, #0
 80093ae:	191a      	adds	r2, r3, r4
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b4:	441a      	add	r2, r3
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093be:	461c      	mov	r4, r3
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	891b      	ldrh	r3, [r3, #8]
 80093c4:	461d      	mov	r5, r3
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	68db      	ldr	r3, [r3, #12]
 80093ca:	899b      	ldrh	r3, [r3, #12]
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7fa fe8e 	bl	80040f0 <lwip_htons>
 80093d4:	4603      	mov	r3, r0
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	f003 0303 	and.w	r3, r3, #3
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d001      	beq.n	80093e4 <tcp_receive+0xa8c>
 80093e0:	2301      	movs	r3, #1
 80093e2:	e000      	b.n	80093e6 <tcp_receive+0xa8e>
 80093e4:	2300      	movs	r3, #0
 80093e6:	442b      	add	r3, r5
 80093e8:	429c      	cmp	r4, r3
 80093ea:	d206      	bcs.n	80093fa <tcp_receive+0xaa2>
 80093ec:	4b1e      	ldr	r3, [pc, #120]	; (8009468 <tcp_receive+0xb10>)
 80093ee:	f240 622b 	movw	r2, #1579	; 0x62b
 80093f2:	4923      	ldr	r1, [pc, #140]	; (8009480 <tcp_receive+0xb28>)
 80093f4:	481e      	ldr	r0, [pc, #120]	; (8009470 <tcp_receive+0xb18>)
 80093f6:	f004 ff2d 	bl	800e254 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	891b      	ldrh	r3, [r3, #8]
 80093fe:	461c      	mov	r4, r3
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	899b      	ldrh	r3, [r3, #12]
 8009406:	b29b      	uxth	r3, r3
 8009408:	4618      	mov	r0, r3
 800940a:	f7fa fe71 	bl	80040f0 <lwip_htons>
 800940e:	4603      	mov	r3, r0
 8009410:	b2db      	uxtb	r3, r3
 8009412:	f003 0303 	and.w	r3, r3, #3
 8009416:	2b00      	cmp	r3, #0
 8009418:	d001      	beq.n	800941e <tcp_receive+0xac6>
 800941a:	2301      	movs	r3, #1
 800941c:	e000      	b.n	8009420 <tcp_receive+0xac8>
 800941e:	2300      	movs	r3, #0
 8009420:	1919      	adds	r1, r3, r4
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009426:	b28b      	uxth	r3, r1
 8009428:	1ad3      	subs	r3, r2, r3
 800942a:	b29a      	uxth	r2, r3
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f7fc ff47 	bl	80062c4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	891b      	ldrh	r3, [r3, #8]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d028      	beq.n	8009492 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8009440:	4b0d      	ldr	r3, [pc, #52]	; (8009478 <tcp_receive+0xb20>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d01d      	beq.n	8009484 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8009448:	4b0b      	ldr	r3, [pc, #44]	; (8009478 <tcp_receive+0xb20>)
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	4619      	mov	r1, r3
 8009452:	4610      	mov	r0, r2
 8009454:	f7fc f9c2 	bl	80057dc <pbuf_cat>
 8009458:	e018      	b.n	800948c <tcp_receive+0xb34>
 800945a:	bf00      	nop
 800945c:	200000fa 	.word	0x200000fa
 8009460:	200000f0 	.word	0x200000f0
 8009464:	200000d0 	.word	0x200000d0
 8009468:	0801087c 	.word	0x0801087c
 800946c:	08010c5c 	.word	0x08010c5c
 8009470:	080108c8 	.word	0x080108c8
 8009474:	08010c98 	.word	0x08010c98
 8009478:	20000100 	.word	0x20000100
 800947c:	200000fd 	.word	0x200000fd
 8009480:	08010cb8 	.word	0x08010cb8
            } else {
              recv_data = cseg->p;
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	4a70      	ldr	r2, [pc, #448]	; (800964c <tcp_receive+0xcf4>)
 800948a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	2200      	movs	r2, #0
 8009490:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	68db      	ldr	r3, [r3, #12]
 8009496:	899b      	ldrh	r3, [r3, #12]
 8009498:	b29b      	uxth	r3, r3
 800949a:	4618      	mov	r0, r3
 800949c:	f7fa fe28 	bl	80040f0 <lwip_htons>
 80094a0:	4603      	mov	r3, r0
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	f003 0301 	and.w	r3, r3, #1
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d00d      	beq.n	80094c8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80094ac:	4b68      	ldr	r3, [pc, #416]	; (8009650 <tcp_receive+0xcf8>)
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	f043 0320 	orr.w	r3, r3, #32
 80094b4:	b2da      	uxtb	r2, r3
 80094b6:	4b66      	ldr	r3, [pc, #408]	; (8009650 <tcp_receive+0xcf8>)
 80094b8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	7d1b      	ldrb	r3, [r3, #20]
 80094be:	2b04      	cmp	r3, #4
 80094c0:	d102      	bne.n	80094c8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2207      	movs	r2, #7
 80094c6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80094d0:	68b8      	ldr	r0, [r7, #8]
 80094d2:	f7fd fbd6 	bl	8006c82 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d008      	beq.n	80094f0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	685a      	ldr	r2, [r3, #4]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80094ea:	429a      	cmp	r2, r3
 80094ec:	f43f af43 	beq.w	8009376 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	8b5b      	ldrh	r3, [r3, #26]
 80094f4:	f003 0301 	and.w	r3, r3, #1
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d00e      	beq.n	800951a <tcp_receive+0xbc2>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	8b5b      	ldrh	r3, [r3, #26]
 8009500:	f023 0301 	bic.w	r3, r3, #1
 8009504:	b29a      	uxth	r2, r3
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	835a      	strh	r2, [r3, #26]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	8b5b      	ldrh	r3, [r3, #26]
 800950e:	f043 0302 	orr.w	r3, r3, #2
 8009512:	b29a      	uxth	r2, r3
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009518:	e188      	b.n	800982c <tcp_receive+0xed4>
        tcp_ack(pcb);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	8b5b      	ldrh	r3, [r3, #26]
 800951e:	f043 0301 	orr.w	r3, r3, #1
 8009522:	b29a      	uxth	r2, r3
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009528:	e180      	b.n	800982c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800952e:	2b00      	cmp	r3, #0
 8009530:	d106      	bne.n	8009540 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8009532:	4848      	ldr	r0, [pc, #288]	; (8009654 <tcp_receive+0xcfc>)
 8009534:	f7fd fbbe 	bl	8006cb4 <tcp_seg_copy>
 8009538:	4602      	mov	r2, r0
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	675a      	str	r2, [r3, #116]	; 0x74
 800953e:	e16d      	b.n	800981c <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8009540:	2300      	movs	r3, #0
 8009542:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009548:	63bb      	str	r3, [r7, #56]	; 0x38
 800954a:	e157      	b.n	80097fc <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800954c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800954e:	68db      	ldr	r3, [r3, #12]
 8009550:	685a      	ldr	r2, [r3, #4]
 8009552:	4b41      	ldr	r3, [pc, #260]	; (8009658 <tcp_receive+0xd00>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	429a      	cmp	r2, r3
 8009558:	d11d      	bne.n	8009596 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800955a:	4b3e      	ldr	r3, [pc, #248]	; (8009654 <tcp_receive+0xcfc>)
 800955c:	891a      	ldrh	r2, [r3, #8]
 800955e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009560:	891b      	ldrh	r3, [r3, #8]
 8009562:	429a      	cmp	r2, r3
 8009564:	f240 814f 	bls.w	8009806 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009568:	483a      	ldr	r0, [pc, #232]	; (8009654 <tcp_receive+0xcfc>)
 800956a:	f7fd fba3 	bl	8006cb4 <tcp_seg_copy>
 800956e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	2b00      	cmp	r3, #0
 8009574:	f000 8149 	beq.w	800980a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8009578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800957a:	2b00      	cmp	r3, #0
 800957c:	d003      	beq.n	8009586 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800957e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009580:	697a      	ldr	r2, [r7, #20]
 8009582:	601a      	str	r2, [r3, #0]
 8009584:	e002      	b.n	800958c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	697a      	ldr	r2, [r7, #20]
 800958a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800958c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800958e:	6978      	ldr	r0, [r7, #20]
 8009590:	f7ff f8de 	bl	8008750 <tcp_oos_insert_segment>
                }
                break;
 8009594:	e139      	b.n	800980a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8009596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009598:	2b00      	cmp	r3, #0
 800959a:	d117      	bne.n	80095cc <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800959c:	4b2e      	ldr	r3, [pc, #184]	; (8009658 <tcp_receive+0xd00>)
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a2:	68db      	ldr	r3, [r3, #12]
 80095a4:	685b      	ldr	r3, [r3, #4]
 80095a6:	1ad3      	subs	r3, r2, r3
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	da57      	bge.n	800965c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80095ac:	4829      	ldr	r0, [pc, #164]	; (8009654 <tcp_receive+0xcfc>)
 80095ae:	f7fd fb81 	bl	8006cb4 <tcp_seg_copy>
 80095b2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80095b4:	69bb      	ldr	r3, [r7, #24]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	f000 8129 	beq.w	800980e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	69ba      	ldr	r2, [r7, #24]
 80095c0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80095c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80095c4:	69b8      	ldr	r0, [r7, #24]
 80095c6:	f7ff f8c3 	bl	8008750 <tcp_oos_insert_segment>
                  }
                  break;
 80095ca:	e120      	b.n	800980e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80095cc:	4b22      	ldr	r3, [pc, #136]	; (8009658 <tcp_receive+0xd00>)
 80095ce:	681a      	ldr	r2, [r3, #0]
 80095d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095d2:	68db      	ldr	r3, [r3, #12]
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	1ad3      	subs	r3, r2, r3
 80095d8:	3b01      	subs	r3, #1
 80095da:	2b00      	cmp	r3, #0
 80095dc:	db3e      	blt.n	800965c <tcp_receive+0xd04>
 80095de:	4b1e      	ldr	r3, [pc, #120]	; (8009658 <tcp_receive+0xd00>)
 80095e0:	681a      	ldr	r2, [r3, #0]
 80095e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e4:	68db      	ldr	r3, [r3, #12]
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	1ad3      	subs	r3, r2, r3
 80095ea:	3301      	adds	r3, #1
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	dc35      	bgt.n	800965c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80095f0:	4818      	ldr	r0, [pc, #96]	; (8009654 <tcp_receive+0xcfc>)
 80095f2:	f7fd fb5f 	bl	8006cb4 <tcp_seg_copy>
 80095f6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80095f8:	69fb      	ldr	r3, [r7, #28]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	f000 8109 	beq.w	8009812 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8009600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009608:	8912      	ldrh	r2, [r2, #8]
 800960a:	441a      	add	r2, r3
 800960c:	4b12      	ldr	r3, [pc, #72]	; (8009658 <tcp_receive+0xd00>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	1ad3      	subs	r3, r2, r3
 8009612:	2b00      	cmp	r3, #0
 8009614:	dd12      	ble.n	800963c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009616:	4b10      	ldr	r3, [pc, #64]	; (8009658 <tcp_receive+0xd00>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	b29a      	uxth	r2, r3
 800961c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800961e:	68db      	ldr	r3, [r3, #12]
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	b29b      	uxth	r3, r3
 8009624:	1ad3      	subs	r3, r2, r3
 8009626:	b29a      	uxth	r2, r3
 8009628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800962a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800962c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800962e:	685a      	ldr	r2, [r3, #4]
 8009630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009632:	891b      	ldrh	r3, [r3, #8]
 8009634:	4619      	mov	r1, r3
 8009636:	4610      	mov	r0, r2
 8009638:	f7fb fe88 	bl	800534c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800963c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800963e:	69fa      	ldr	r2, [r7, #28]
 8009640:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8009642:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009644:	69f8      	ldr	r0, [r7, #28]
 8009646:	f7ff f883 	bl	8008750 <tcp_oos_insert_segment>
                  }
                  break;
 800964a:	e0e2      	b.n	8009812 <tcp_receive+0xeba>
 800964c:	20000100 	.word	0x20000100
 8009650:	200000fd 	.word	0x200000fd
 8009654:	200000d0 	.word	0x200000d0
 8009658:	200000f0 	.word	0x200000f0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800965c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800965e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8009660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	2b00      	cmp	r3, #0
 8009666:	f040 80c6 	bne.w	80097f6 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800966a:	4b80      	ldr	r3, [pc, #512]	; (800986c <tcp_receive+0xf14>)
 800966c:	681a      	ldr	r2, [r3, #0]
 800966e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009670:	68db      	ldr	r3, [r3, #12]
 8009672:	685b      	ldr	r3, [r3, #4]
 8009674:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8009676:	2b00      	cmp	r3, #0
 8009678:	f340 80bd 	ble.w	80097f6 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800967c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800967e:	68db      	ldr	r3, [r3, #12]
 8009680:	899b      	ldrh	r3, [r3, #12]
 8009682:	b29b      	uxth	r3, r3
 8009684:	4618      	mov	r0, r3
 8009686:	f7fa fd33 	bl	80040f0 <lwip_htons>
 800968a:	4603      	mov	r3, r0
 800968c:	b2db      	uxtb	r3, r3
 800968e:	f003 0301 	and.w	r3, r3, #1
 8009692:	2b00      	cmp	r3, #0
 8009694:	f040 80bf 	bne.w	8009816 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8009698:	4875      	ldr	r0, [pc, #468]	; (8009870 <tcp_receive+0xf18>)
 800969a:	f7fd fb0b 	bl	8006cb4 <tcp_seg_copy>
 800969e:	4602      	mov	r2, r0
 80096a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096a2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80096a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	f000 80b6 	beq.w	800981a <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80096ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b0:	68db      	ldr	r3, [r3, #12]
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80096b6:	8912      	ldrh	r2, [r2, #8]
 80096b8:	441a      	add	r2, r3
 80096ba:	4b6c      	ldr	r3, [pc, #432]	; (800986c <tcp_receive+0xf14>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	1ad3      	subs	r3, r2, r3
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	dd12      	ble.n	80096ea <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80096c4:	4b69      	ldr	r3, [pc, #420]	; (800986c <tcp_receive+0xf14>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	b29a      	uxth	r2, r3
 80096ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096cc:	68db      	ldr	r3, [r3, #12]
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	1ad3      	subs	r3, r2, r3
 80096d4:	b29a      	uxth	r2, r3
 80096d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80096da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096dc:	685a      	ldr	r2, [r3, #4]
 80096de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e0:	891b      	ldrh	r3, [r3, #8]
 80096e2:	4619      	mov	r1, r3
 80096e4:	4610      	mov	r0, r2
 80096e6:	f7fb fe31 	bl	800534c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80096ea:	4b62      	ldr	r3, [pc, #392]	; (8009874 <tcp_receive+0xf1c>)
 80096ec:	881b      	ldrh	r3, [r3, #0]
 80096ee:	461a      	mov	r2, r3
 80096f0:	4b5e      	ldr	r3, [pc, #376]	; (800986c <tcp_receive+0xf14>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	441a      	add	r2, r3
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096fa:	6879      	ldr	r1, [r7, #4]
 80096fc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80096fe:	440b      	add	r3, r1
 8009700:	1ad3      	subs	r3, r2, r3
 8009702:	2b00      	cmp	r3, #0
 8009704:	f340 8089 	ble.w	800981a <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8009708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	68db      	ldr	r3, [r3, #12]
 800970e:	899b      	ldrh	r3, [r3, #12]
 8009710:	b29b      	uxth	r3, r3
 8009712:	4618      	mov	r0, r3
 8009714:	f7fa fcec 	bl	80040f0 <lwip_htons>
 8009718:	4603      	mov	r3, r0
 800971a:	b2db      	uxtb	r3, r3
 800971c:	f003 0301 	and.w	r3, r3, #1
 8009720:	2b00      	cmp	r3, #0
 8009722:	d022      	beq.n	800976a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8009724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	68db      	ldr	r3, [r3, #12]
 800972a:	899b      	ldrh	r3, [r3, #12]
 800972c:	b29b      	uxth	r3, r3
 800972e:	b21b      	sxth	r3, r3
 8009730:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009734:	b21c      	sxth	r4, r3
 8009736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	68db      	ldr	r3, [r3, #12]
 800973c:	899b      	ldrh	r3, [r3, #12]
 800973e:	b29b      	uxth	r3, r3
 8009740:	4618      	mov	r0, r3
 8009742:	f7fa fcd5 	bl	80040f0 <lwip_htons>
 8009746:	4603      	mov	r3, r0
 8009748:	b2db      	uxtb	r3, r3
 800974a:	b29b      	uxth	r3, r3
 800974c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009750:	b29b      	uxth	r3, r3
 8009752:	4618      	mov	r0, r3
 8009754:	f7fa fccc 	bl	80040f0 <lwip_htons>
 8009758:	4603      	mov	r3, r0
 800975a:	b21b      	sxth	r3, r3
 800975c:	4323      	orrs	r3, r4
 800975e:	b21a      	sxth	r2, r3
 8009760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	68db      	ldr	r3, [r3, #12]
 8009766:	b292      	uxth	r2, r2
 8009768:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800976e:	b29a      	uxth	r2, r3
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009774:	4413      	add	r3, r2
 8009776:	b299      	uxth	r1, r3
 8009778:	4b3c      	ldr	r3, [pc, #240]	; (800986c <tcp_receive+0xf14>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	b29a      	uxth	r2, r3
 800977e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	1a8a      	subs	r2, r1, r2
 8009784:	b292      	uxth	r2, r2
 8009786:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8009788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	685a      	ldr	r2, [r3, #4]
 800978e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	891b      	ldrh	r3, [r3, #8]
 8009794:	4619      	mov	r1, r3
 8009796:	4610      	mov	r0, r2
 8009798:	f7fb fdd8 	bl	800534c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800979c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	891c      	ldrh	r4, [r3, #8]
 80097a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	68db      	ldr	r3, [r3, #12]
 80097a8:	899b      	ldrh	r3, [r3, #12]
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	4618      	mov	r0, r3
 80097ae:	f7fa fc9f 	bl	80040f0 <lwip_htons>
 80097b2:	4603      	mov	r3, r0
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	f003 0303 	and.w	r3, r3, #3
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d001      	beq.n	80097c2 <tcp_receive+0xe6a>
 80097be:	2301      	movs	r3, #1
 80097c0:	e000      	b.n	80097c4 <tcp_receive+0xe6c>
 80097c2:	2300      	movs	r3, #0
 80097c4:	4423      	add	r3, r4
 80097c6:	b29a      	uxth	r2, r3
 80097c8:	4b2a      	ldr	r3, [pc, #168]	; (8009874 <tcp_receive+0xf1c>)
 80097ca:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80097cc:	4b29      	ldr	r3, [pc, #164]	; (8009874 <tcp_receive+0xf1c>)
 80097ce:	881b      	ldrh	r3, [r3, #0]
 80097d0:	461a      	mov	r2, r3
 80097d2:	4b26      	ldr	r3, [pc, #152]	; (800986c <tcp_receive+0xf14>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	441a      	add	r2, r3
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097dc:	6879      	ldr	r1, [r7, #4]
 80097de:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80097e0:	440b      	add	r3, r1
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d019      	beq.n	800981a <tcp_receive+0xec2>
 80097e6:	4b24      	ldr	r3, [pc, #144]	; (8009878 <tcp_receive+0xf20>)
 80097e8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80097ec:	4923      	ldr	r1, [pc, #140]	; (800987c <tcp_receive+0xf24>)
 80097ee:	4824      	ldr	r0, [pc, #144]	; (8009880 <tcp_receive+0xf28>)
 80097f0:	f004 fd30 	bl	800e254 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80097f4:	e011      	b.n	800981a <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80097f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80097fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097fe:	2b00      	cmp	r3, #0
 8009800:	f47f aea4 	bne.w	800954c <tcp_receive+0xbf4>
 8009804:	e00a      	b.n	800981c <tcp_receive+0xec4>
                break;
 8009806:	bf00      	nop
 8009808:	e008      	b.n	800981c <tcp_receive+0xec4>
                break;
 800980a:	bf00      	nop
 800980c:	e006      	b.n	800981c <tcp_receive+0xec4>
                  break;
 800980e:	bf00      	nop
 8009810:	e004      	b.n	800981c <tcp_receive+0xec4>
                  break;
 8009812:	bf00      	nop
 8009814:	e002      	b.n	800981c <tcp_receive+0xec4>
                  break;
 8009816:	bf00      	nop
 8009818:	e000      	b.n	800981c <tcp_receive+0xec4>
                break;
 800981a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f001 fa33 	bl	800ac88 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8009822:	e003      	b.n	800982c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f001 fa2f 	bl	800ac88 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800982a:	e01a      	b.n	8009862 <tcp_receive+0xf0a>
 800982c:	e019      	b.n	8009862 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800982e:	4b0f      	ldr	r3, [pc, #60]	; (800986c <tcp_receive+0xf14>)
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009836:	1ad3      	subs	r3, r2, r3
 8009838:	2b00      	cmp	r3, #0
 800983a:	db0a      	blt.n	8009852 <tcp_receive+0xefa>
 800983c:	4b0b      	ldr	r3, [pc, #44]	; (800986c <tcp_receive+0xf14>)
 800983e:	681a      	ldr	r2, [r3, #0]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009844:	6879      	ldr	r1, [r7, #4]
 8009846:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009848:	440b      	add	r3, r1
 800984a:	1ad3      	subs	r3, r2, r3
 800984c:	3301      	adds	r3, #1
 800984e:	2b00      	cmp	r3, #0
 8009850:	dd07      	ble.n	8009862 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	8b5b      	ldrh	r3, [r3, #26]
 8009856:	f043 0302 	orr.w	r3, r3, #2
 800985a:	b29a      	uxth	r2, r3
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8009860:	e7ff      	b.n	8009862 <tcp_receive+0xf0a>
 8009862:	bf00      	nop
 8009864:	3750      	adds	r7, #80	; 0x50
 8009866:	46bd      	mov	sp, r7
 8009868:	bdb0      	pop	{r4, r5, r7, pc}
 800986a:	bf00      	nop
 800986c:	200000f0 	.word	0x200000f0
 8009870:	200000d0 	.word	0x200000d0
 8009874:	200000fa 	.word	0x200000fa
 8009878:	0801087c 	.word	0x0801087c
 800987c:	08010c24 	.word	0x08010c24
 8009880:	080108c8 	.word	0x080108c8

08009884 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8009884:	b480      	push	{r7}
 8009886:	b083      	sub	sp, #12
 8009888:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800988a:	4b15      	ldr	r3, [pc, #84]	; (80098e0 <tcp_get_next_optbyte+0x5c>)
 800988c:	881b      	ldrh	r3, [r3, #0]
 800988e:	1c5a      	adds	r2, r3, #1
 8009890:	b291      	uxth	r1, r2
 8009892:	4a13      	ldr	r2, [pc, #76]	; (80098e0 <tcp_get_next_optbyte+0x5c>)
 8009894:	8011      	strh	r1, [r2, #0]
 8009896:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009898:	4b12      	ldr	r3, [pc, #72]	; (80098e4 <tcp_get_next_optbyte+0x60>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d004      	beq.n	80098aa <tcp_get_next_optbyte+0x26>
 80098a0:	4b11      	ldr	r3, [pc, #68]	; (80098e8 <tcp_get_next_optbyte+0x64>)
 80098a2:	881b      	ldrh	r3, [r3, #0]
 80098a4:	88fa      	ldrh	r2, [r7, #6]
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d208      	bcs.n	80098bc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80098aa:	4b10      	ldr	r3, [pc, #64]	; (80098ec <tcp_get_next_optbyte+0x68>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	3314      	adds	r3, #20
 80098b0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80098b2:	88fb      	ldrh	r3, [r7, #6]
 80098b4:	683a      	ldr	r2, [r7, #0]
 80098b6:	4413      	add	r3, r2
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	e00b      	b.n	80098d4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80098bc:	88fb      	ldrh	r3, [r7, #6]
 80098be:	b2da      	uxtb	r2, r3
 80098c0:	4b09      	ldr	r3, [pc, #36]	; (80098e8 <tcp_get_next_optbyte+0x64>)
 80098c2:	881b      	ldrh	r3, [r3, #0]
 80098c4:	b2db      	uxtb	r3, r3
 80098c6:	1ad3      	subs	r3, r2, r3
 80098c8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80098ca:	4b06      	ldr	r3, [pc, #24]	; (80098e4 <tcp_get_next_optbyte+0x60>)
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	797b      	ldrb	r3, [r7, #5]
 80098d0:	4413      	add	r3, r2
 80098d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	370c      	adds	r7, #12
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr
 80098e0:	200000ec 	.word	0x200000ec
 80098e4:	200000e8 	.word	0x200000e8
 80098e8:	200000e6 	.word	0x200000e6
 80098ec:	200000e0 	.word	0x200000e0

080098f0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b084      	sub	sp, #16
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d106      	bne.n	800990c <tcp_parseopt+0x1c>
 80098fe:	4b32      	ldr	r3, [pc, #200]	; (80099c8 <tcp_parseopt+0xd8>)
 8009900:	f240 727d 	movw	r2, #1917	; 0x77d
 8009904:	4931      	ldr	r1, [pc, #196]	; (80099cc <tcp_parseopt+0xdc>)
 8009906:	4832      	ldr	r0, [pc, #200]	; (80099d0 <tcp_parseopt+0xe0>)
 8009908:	f004 fca4 	bl	800e254 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800990c:	4b31      	ldr	r3, [pc, #196]	; (80099d4 <tcp_parseopt+0xe4>)
 800990e:	881b      	ldrh	r3, [r3, #0]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d055      	beq.n	80099c0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009914:	4b30      	ldr	r3, [pc, #192]	; (80099d8 <tcp_parseopt+0xe8>)
 8009916:	2200      	movs	r2, #0
 8009918:	801a      	strh	r2, [r3, #0]
 800991a:	e045      	b.n	80099a8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800991c:	f7ff ffb2 	bl	8009884 <tcp_get_next_optbyte>
 8009920:	4603      	mov	r3, r0
 8009922:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8009924:	7bfb      	ldrb	r3, [r7, #15]
 8009926:	2b02      	cmp	r3, #2
 8009928:	d006      	beq.n	8009938 <tcp_parseopt+0x48>
 800992a:	2b02      	cmp	r3, #2
 800992c:	dc2b      	bgt.n	8009986 <tcp_parseopt+0x96>
 800992e:	2b00      	cmp	r3, #0
 8009930:	d041      	beq.n	80099b6 <tcp_parseopt+0xc6>
 8009932:	2b01      	cmp	r3, #1
 8009934:	d127      	bne.n	8009986 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8009936:	e037      	b.n	80099a8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009938:	f7ff ffa4 	bl	8009884 <tcp_get_next_optbyte>
 800993c:	4603      	mov	r3, r0
 800993e:	2b04      	cmp	r3, #4
 8009940:	d13b      	bne.n	80099ba <tcp_parseopt+0xca>
 8009942:	4b25      	ldr	r3, [pc, #148]	; (80099d8 <tcp_parseopt+0xe8>)
 8009944:	881b      	ldrh	r3, [r3, #0]
 8009946:	3301      	adds	r3, #1
 8009948:	4a22      	ldr	r2, [pc, #136]	; (80099d4 <tcp_parseopt+0xe4>)
 800994a:	8812      	ldrh	r2, [r2, #0]
 800994c:	4293      	cmp	r3, r2
 800994e:	da34      	bge.n	80099ba <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009950:	f7ff ff98 	bl	8009884 <tcp_get_next_optbyte>
 8009954:	4603      	mov	r3, r0
 8009956:	b29b      	uxth	r3, r3
 8009958:	021b      	lsls	r3, r3, #8
 800995a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800995c:	f7ff ff92 	bl	8009884 <tcp_get_next_optbyte>
 8009960:	4603      	mov	r3, r0
 8009962:	b29a      	uxth	r2, r3
 8009964:	89bb      	ldrh	r3, [r7, #12]
 8009966:	4313      	orrs	r3, r2
 8009968:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800996a:	89bb      	ldrh	r3, [r7, #12]
 800996c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009970:	d804      	bhi.n	800997c <tcp_parseopt+0x8c>
 8009972:	89bb      	ldrh	r3, [r7, #12]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d001      	beq.n	800997c <tcp_parseopt+0x8c>
 8009978:	89ba      	ldrh	r2, [r7, #12]
 800997a:	e001      	b.n	8009980 <tcp_parseopt+0x90>
 800997c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8009984:	e010      	b.n	80099a8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8009986:	f7ff ff7d 	bl	8009884 <tcp_get_next_optbyte>
 800998a:	4603      	mov	r3, r0
 800998c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800998e:	7afb      	ldrb	r3, [r7, #11]
 8009990:	2b01      	cmp	r3, #1
 8009992:	d914      	bls.n	80099be <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8009994:	7afb      	ldrb	r3, [r7, #11]
 8009996:	b29a      	uxth	r2, r3
 8009998:	4b0f      	ldr	r3, [pc, #60]	; (80099d8 <tcp_parseopt+0xe8>)
 800999a:	881b      	ldrh	r3, [r3, #0]
 800999c:	4413      	add	r3, r2
 800999e:	b29b      	uxth	r3, r3
 80099a0:	3b02      	subs	r3, #2
 80099a2:	b29a      	uxth	r2, r3
 80099a4:	4b0c      	ldr	r3, [pc, #48]	; (80099d8 <tcp_parseopt+0xe8>)
 80099a6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80099a8:	4b0b      	ldr	r3, [pc, #44]	; (80099d8 <tcp_parseopt+0xe8>)
 80099aa:	881a      	ldrh	r2, [r3, #0]
 80099ac:	4b09      	ldr	r3, [pc, #36]	; (80099d4 <tcp_parseopt+0xe4>)
 80099ae:	881b      	ldrh	r3, [r3, #0]
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d3b3      	bcc.n	800991c <tcp_parseopt+0x2c>
 80099b4:	e004      	b.n	80099c0 <tcp_parseopt+0xd0>
          return;
 80099b6:	bf00      	nop
 80099b8:	e002      	b.n	80099c0 <tcp_parseopt+0xd0>
            return;
 80099ba:	bf00      	nop
 80099bc:	e000      	b.n	80099c0 <tcp_parseopt+0xd0>
            return;
 80099be:	bf00      	nop
      }
    }
  }
}
 80099c0:	3710      	adds	r7, #16
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	bf00      	nop
 80099c8:	0801087c 	.word	0x0801087c
 80099cc:	08010ce0 	.word	0x08010ce0
 80099d0:	080108c8 	.word	0x080108c8
 80099d4:	200000e4 	.word	0x200000e4
 80099d8:	200000ec 	.word	0x200000ec

080099dc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80099dc:	b480      	push	{r7}
 80099de:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80099e0:	4b05      	ldr	r3, [pc, #20]	; (80099f8 <tcp_trigger_input_pcb_close+0x1c>)
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	f043 0310 	orr.w	r3, r3, #16
 80099e8:	b2da      	uxtb	r2, r3
 80099ea:	4b03      	ldr	r3, [pc, #12]	; (80099f8 <tcp_trigger_input_pcb_close+0x1c>)
 80099ec:	701a      	strb	r2, [r3, #0]
}
 80099ee:	bf00      	nop
 80099f0:	46bd      	mov	sp, r7
 80099f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f6:	4770      	bx	lr
 80099f8:	200000fd 	.word	0x200000fd

080099fc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b084      	sub	sp, #16
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	60f8      	str	r0, [r7, #12]
 8009a04:	60b9      	str	r1, [r7, #8]
 8009a06:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d00a      	beq.n	8009a24 <tcp_route+0x28>
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	7a1b      	ldrb	r3, [r3, #8]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d006      	beq.n	8009a24 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	7a1b      	ldrb	r3, [r3, #8]
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f7fb fabc 	bl	8004f98 <netif_get_by_index>
 8009a20:	4603      	mov	r3, r0
 8009a22:	e003      	b.n	8009a2c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f003 f9cd 	bl	800cdc4 <ip4_route>
 8009a2a:	4603      	mov	r3, r0
  }
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3710      	adds	r7, #16
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8009a34:	b590      	push	{r4, r7, lr}
 8009a36:	b087      	sub	sp, #28
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	60f8      	str	r0, [r7, #12]
 8009a3c:	60b9      	str	r1, [r7, #8]
 8009a3e:	603b      	str	r3, [r7, #0]
 8009a40:	4613      	mov	r3, r2
 8009a42:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d105      	bne.n	8009a56 <tcp_create_segment+0x22>
 8009a4a:	4b44      	ldr	r3, [pc, #272]	; (8009b5c <tcp_create_segment+0x128>)
 8009a4c:	22a3      	movs	r2, #163	; 0xa3
 8009a4e:	4944      	ldr	r1, [pc, #272]	; (8009b60 <tcp_create_segment+0x12c>)
 8009a50:	4844      	ldr	r0, [pc, #272]	; (8009b64 <tcp_create_segment+0x130>)
 8009a52:	f004 fbff 	bl	800e254 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d105      	bne.n	8009a68 <tcp_create_segment+0x34>
 8009a5c:	4b3f      	ldr	r3, [pc, #252]	; (8009b5c <tcp_create_segment+0x128>)
 8009a5e:	22a4      	movs	r2, #164	; 0xa4
 8009a60:	4941      	ldr	r1, [pc, #260]	; (8009b68 <tcp_create_segment+0x134>)
 8009a62:	4840      	ldr	r0, [pc, #256]	; (8009b64 <tcp_create_segment+0x130>)
 8009a64:	f004 fbf6 	bl	800e254 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009a68:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009a6c:	009b      	lsls	r3, r3, #2
 8009a6e:	b2db      	uxtb	r3, r3
 8009a70:	f003 0304 	and.w	r3, r3, #4
 8009a74:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8009a76:	2003      	movs	r0, #3
 8009a78:	f7fa ff90 	bl	800499c <memp_malloc>
 8009a7c:	6138      	str	r0, [r7, #16]
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d104      	bne.n	8009a8e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8009a84:	68b8      	ldr	r0, [r7, #8]
 8009a86:	f7fb fde7 	bl	8005658 <pbuf_free>
    return NULL;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	e061      	b.n	8009b52 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8009a94:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	68ba      	ldr	r2, [r7, #8]
 8009aa0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	891a      	ldrh	r2, [r3, #8]
 8009aa6:	7dfb      	ldrb	r3, [r7, #23]
 8009aa8:	b29b      	uxth	r3, r3
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d205      	bcs.n	8009aba <tcp_create_segment+0x86>
 8009aae:	4b2b      	ldr	r3, [pc, #172]	; (8009b5c <tcp_create_segment+0x128>)
 8009ab0:	22b0      	movs	r2, #176	; 0xb0
 8009ab2:	492e      	ldr	r1, [pc, #184]	; (8009b6c <tcp_create_segment+0x138>)
 8009ab4:	482b      	ldr	r0, [pc, #172]	; (8009b64 <tcp_create_segment+0x130>)
 8009ab6:	f004 fbcd 	bl	800e254 <iprintf>
  seg->len = p->tot_len - optlen;
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	891a      	ldrh	r2, [r3, #8]
 8009abe:	7dfb      	ldrb	r3, [r7, #23]
 8009ac0:	b29b      	uxth	r3, r3
 8009ac2:	1ad3      	subs	r3, r2, r3
 8009ac4:	b29a      	uxth	r2, r3
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8009aca:	2114      	movs	r1, #20
 8009acc:	68b8      	ldr	r0, [r7, #8]
 8009ace:	f7fb fd2d 	bl	800552c <pbuf_add_header>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d004      	beq.n	8009ae2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8009ad8:	6938      	ldr	r0, [r7, #16]
 8009ada:	f7fd f8d2 	bl	8006c82 <tcp_seg_free>
    return NULL;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	e037      	b.n	8009b52 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	685a      	ldr	r2, [r3, #4]
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	8ada      	ldrh	r2, [r3, #22]
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	68dc      	ldr	r4, [r3, #12]
 8009af4:	4610      	mov	r0, r2
 8009af6:	f7fa fafb 	bl	80040f0 <lwip_htons>
 8009afa:	4603      	mov	r3, r0
 8009afc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	8b1a      	ldrh	r2, [r3, #24]
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	68dc      	ldr	r4, [r3, #12]
 8009b06:	4610      	mov	r0, r2
 8009b08:	f7fa faf2 	bl	80040f0 <lwip_htons>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	68dc      	ldr	r4, [r3, #12]
 8009b14:	6838      	ldr	r0, [r7, #0]
 8009b16:	f7fa fb00 	bl	800411a <lwip_htonl>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8009b1e:	7dfb      	ldrb	r3, [r7, #23]
 8009b20:	089b      	lsrs	r3, r3, #2
 8009b22:	b2db      	uxtb	r3, r3
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	3305      	adds	r3, #5
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	031b      	lsls	r3, r3, #12
 8009b2c:	b29a      	uxth	r2, r3
 8009b2e:	79fb      	ldrb	r3, [r7, #7]
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	4313      	orrs	r3, r2
 8009b34:	b29a      	uxth	r2, r3
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	68dc      	ldr	r4, [r3, #12]
 8009b3a:	4610      	mov	r0, r2
 8009b3c:	f7fa fad8 	bl	80040f0 <lwip_htons>
 8009b40:	4603      	mov	r3, r0
 8009b42:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	68db      	ldr	r3, [r3, #12]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	749a      	strb	r2, [r3, #18]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	74da      	strb	r2, [r3, #19]
  return seg;
 8009b50:	693b      	ldr	r3, [r7, #16]
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	371c      	adds	r7, #28
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd90      	pop	{r4, r7, pc}
 8009b5a:	bf00      	nop
 8009b5c:	08010cfc 	.word	0x08010cfc
 8009b60:	08010d30 	.word	0x08010d30
 8009b64:	08010d50 	.word	0x08010d50
 8009b68:	08010d78 	.word	0x08010d78
 8009b6c:	08010d9c 	.word	0x08010d9c

08009b70 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8009b70:	b590      	push	{r4, r7, lr}
 8009b72:	b08b      	sub	sp, #44	; 0x2c
 8009b74:	af02      	add	r7, sp, #8
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	460b      	mov	r3, r1
 8009b7a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	61fb      	str	r3, [r7, #28]
 8009b80:	2300      	movs	r3, #0
 8009b82:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8009b84:	2300      	movs	r3, #0
 8009b86:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d106      	bne.n	8009b9c <tcp_split_unsent_seg+0x2c>
 8009b8e:	4b95      	ldr	r3, [pc, #596]	; (8009de4 <tcp_split_unsent_seg+0x274>)
 8009b90:	f240 324b 	movw	r2, #843	; 0x34b
 8009b94:	4994      	ldr	r1, [pc, #592]	; (8009de8 <tcp_split_unsent_seg+0x278>)
 8009b96:	4895      	ldr	r0, [pc, #596]	; (8009dec <tcp_split_unsent_seg+0x27c>)
 8009b98:	f004 fb5c 	bl	800e254 <iprintf>

  useg = pcb->unsent;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ba0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d102      	bne.n	8009bae <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8009ba8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009bac:	e116      	b.n	8009ddc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8009bae:	887b      	ldrh	r3, [r7, #2]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d109      	bne.n	8009bc8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8009bb4:	4b8b      	ldr	r3, [pc, #556]	; (8009de4 <tcp_split_unsent_seg+0x274>)
 8009bb6:	f240 3253 	movw	r2, #851	; 0x353
 8009bba:	498d      	ldr	r1, [pc, #564]	; (8009df0 <tcp_split_unsent_seg+0x280>)
 8009bbc:	488b      	ldr	r0, [pc, #556]	; (8009dec <tcp_split_unsent_seg+0x27c>)
 8009bbe:	f004 fb49 	bl	800e254 <iprintf>
    return ERR_VAL;
 8009bc2:	f06f 0305 	mvn.w	r3, #5
 8009bc6:	e109      	b.n	8009ddc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	891b      	ldrh	r3, [r3, #8]
 8009bcc:	887a      	ldrh	r2, [r7, #2]
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d301      	bcc.n	8009bd6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	e102      	b.n	8009ddc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009bda:	887a      	ldrh	r2, [r7, #2]
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d906      	bls.n	8009bee <tcp_split_unsent_seg+0x7e>
 8009be0:	4b80      	ldr	r3, [pc, #512]	; (8009de4 <tcp_split_unsent_seg+0x274>)
 8009be2:	f240 325b 	movw	r2, #859	; 0x35b
 8009be6:	4983      	ldr	r1, [pc, #524]	; (8009df4 <tcp_split_unsent_seg+0x284>)
 8009be8:	4880      	ldr	r0, [pc, #512]	; (8009dec <tcp_split_unsent_seg+0x27c>)
 8009bea:	f004 fb33 	bl	800e254 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	891b      	ldrh	r3, [r3, #8]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d106      	bne.n	8009c04 <tcp_split_unsent_seg+0x94>
 8009bf6:	4b7b      	ldr	r3, [pc, #492]	; (8009de4 <tcp_split_unsent_seg+0x274>)
 8009bf8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8009bfc:	497e      	ldr	r1, [pc, #504]	; (8009df8 <tcp_split_unsent_seg+0x288>)
 8009bfe:	487b      	ldr	r0, [pc, #492]	; (8009dec <tcp_split_unsent_seg+0x27c>)
 8009c00:	f004 fb28 	bl	800e254 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	7a9b      	ldrb	r3, [r3, #10]
 8009c08:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009c0a:	7bfb      	ldrb	r3, [r7, #15]
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	b2db      	uxtb	r3, r3
 8009c10:	f003 0304 	and.w	r3, r3, #4
 8009c14:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	891a      	ldrh	r2, [r3, #8]
 8009c1a:	887b      	ldrh	r3, [r7, #2]
 8009c1c:	1ad3      	subs	r3, r2, r3
 8009c1e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8009c20:	7bbb      	ldrb	r3, [r7, #14]
 8009c22:	b29a      	uxth	r2, r3
 8009c24:	89bb      	ldrh	r3, [r7, #12]
 8009c26:	4413      	add	r3, r2
 8009c28:	b29b      	uxth	r3, r3
 8009c2a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009c2e:	4619      	mov	r1, r3
 8009c30:	2036      	movs	r0, #54	; 0x36
 8009c32:	f7fb fa2d 	bl	8005090 <pbuf_alloc>
 8009c36:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	f000 80b7 	beq.w	8009dae <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	891a      	ldrh	r2, [r3, #8]
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	891b      	ldrh	r3, [r3, #8]
 8009c4a:	1ad3      	subs	r3, r2, r3
 8009c4c:	b29a      	uxth	r2, r3
 8009c4e:	887b      	ldrh	r3, [r7, #2]
 8009c50:	4413      	add	r3, r2
 8009c52:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	6858      	ldr	r0, [r3, #4]
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	685a      	ldr	r2, [r3, #4]
 8009c5c:	7bbb      	ldrb	r3, [r7, #14]
 8009c5e:	18d1      	adds	r1, r2, r3
 8009c60:	897b      	ldrh	r3, [r7, #10]
 8009c62:	89ba      	ldrh	r2, [r7, #12]
 8009c64:	f7fb fef2 	bl	8005a4c <pbuf_copy_partial>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	89bb      	ldrh	r3, [r7, #12]
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	f040 809f 	bne.w	8009db2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	68db      	ldr	r3, [r3, #12]
 8009c78:	899b      	ldrh	r3, [r3, #12]
 8009c7a:	b29b      	uxth	r3, r3
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f7fa fa37 	bl	80040f0 <lwip_htons>
 8009c82:	4603      	mov	r3, r0
 8009c84:	b2db      	uxtb	r3, r3
 8009c86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c8a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8009c90:	7efb      	ldrb	r3, [r7, #27]
 8009c92:	f003 0308 	and.w	r3, r3, #8
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d007      	beq.n	8009caa <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8009c9a:	7efb      	ldrb	r3, [r7, #27]
 8009c9c:	f023 0308 	bic.w	r3, r3, #8
 8009ca0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8009ca2:	7ebb      	ldrb	r3, [r7, #26]
 8009ca4:	f043 0308 	orr.w	r3, r3, #8
 8009ca8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8009caa:	7efb      	ldrb	r3, [r7, #27]
 8009cac:	f003 0301 	and.w	r3, r3, #1
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d007      	beq.n	8009cc4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8009cb4:	7efb      	ldrb	r3, [r7, #27]
 8009cb6:	f023 0301 	bic.w	r3, r3, #1
 8009cba:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8009cbc:	7ebb      	ldrb	r3, [r7, #26]
 8009cbe:	f043 0301 	orr.w	r3, r3, #1
 8009cc2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	68db      	ldr	r3, [r3, #12]
 8009cc8:	685b      	ldr	r3, [r3, #4]
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f7fa fa25 	bl	800411a <lwip_htonl>
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	887b      	ldrh	r3, [r7, #2]
 8009cd4:	18d1      	adds	r1, r2, r3
 8009cd6:	7eba      	ldrb	r2, [r7, #26]
 8009cd8:	7bfb      	ldrb	r3, [r7, #15]
 8009cda:	9300      	str	r3, [sp, #0]
 8009cdc:	460b      	mov	r3, r1
 8009cde:	6939      	ldr	r1, [r7, #16]
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f7ff fea7 	bl	8009a34 <tcp_create_segment>
 8009ce6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8009ce8:	69fb      	ldr	r3, [r7, #28]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d063      	beq.n	8009db6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f7fb fd38 	bl	8005768 <pbuf_clen>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009d02:	1a9b      	subs	r3, r3, r2
 8009d04:	b29a      	uxth	r2, r3
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	6858      	ldr	r0, [r3, #4]
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	891a      	ldrh	r2, [r3, #8]
 8009d16:	89bb      	ldrh	r3, [r7, #12]
 8009d18:	1ad3      	subs	r3, r2, r3
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	f7fb fb15 	bl	800534c <pbuf_realloc>
  useg->len -= remainder;
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	891a      	ldrh	r2, [r3, #8]
 8009d26:	89bb      	ldrh	r3, [r7, #12]
 8009d28:	1ad3      	subs	r3, r2, r3
 8009d2a:	b29a      	uxth	r2, r3
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	68db      	ldr	r3, [r3, #12]
 8009d34:	899b      	ldrh	r3, [r3, #12]
 8009d36:	b29c      	uxth	r4, r3
 8009d38:	7efb      	ldrb	r3, [r7, #27]
 8009d3a:	b29b      	uxth	r3, r3
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f7fa f9d7 	bl	80040f0 <lwip_htons>
 8009d42:	4603      	mov	r3, r0
 8009d44:	461a      	mov	r2, r3
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	68db      	ldr	r3, [r3, #12]
 8009d4a:	4322      	orrs	r2, r4
 8009d4c:	b292      	uxth	r2, r2
 8009d4e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	4618      	mov	r0, r3
 8009d56:	f7fb fd07 	bl	8005768 <pbuf_clen>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	461a      	mov	r2, r3
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009d64:	4413      	add	r3, r2
 8009d66:	b29a      	uxth	r2, r3
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009d6e:	69fb      	ldr	r3, [r7, #28]
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	4618      	mov	r0, r3
 8009d74:	f7fb fcf8 	bl	8005768 <pbuf_clen>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009d82:	4413      	add	r3, r2
 8009d84:	b29a      	uxth	r2, r3
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	69fb      	ldr	r3, [r7, #28]
 8009d92:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	69fa      	ldr	r2, [r7, #28]
 8009d98:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8009d9a:	69fb      	ldr	r3, [r7, #28]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d103      	bne.n	8009daa <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2200      	movs	r2, #0
 8009da6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8009daa:	2300      	movs	r3, #0
 8009dac:	e016      	b.n	8009ddc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8009dae:	bf00      	nop
 8009db0:	e002      	b.n	8009db8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8009db2:	bf00      	nop
 8009db4:	e000      	b.n	8009db8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8009db6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8009db8:	69fb      	ldr	r3, [r7, #28]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d006      	beq.n	8009dcc <tcp_split_unsent_seg+0x25c>
 8009dbe:	4b09      	ldr	r3, [pc, #36]	; (8009de4 <tcp_split_unsent_seg+0x274>)
 8009dc0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8009dc4:	490d      	ldr	r1, [pc, #52]	; (8009dfc <tcp_split_unsent_seg+0x28c>)
 8009dc6:	4809      	ldr	r0, [pc, #36]	; (8009dec <tcp_split_unsent_seg+0x27c>)
 8009dc8:	f004 fa44 	bl	800e254 <iprintf>
  if (p != NULL) {
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d002      	beq.n	8009dd8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8009dd2:	6938      	ldr	r0, [r7, #16]
 8009dd4:	f7fb fc40 	bl	8005658 <pbuf_free>
  }

  return ERR_MEM;
 8009dd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3724      	adds	r7, #36	; 0x24
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd90      	pop	{r4, r7, pc}
 8009de4:	08010cfc 	.word	0x08010cfc
 8009de8:	08011090 	.word	0x08011090
 8009dec:	08010d50 	.word	0x08010d50
 8009df0:	080110b4 	.word	0x080110b4
 8009df4:	080110d8 	.word	0x080110d8
 8009df8:	080110e8 	.word	0x080110e8
 8009dfc:	080110f8 	.word	0x080110f8

08009e00 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8009e00:	b590      	push	{r4, r7, lr}
 8009e02:	b085      	sub	sp, #20
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d106      	bne.n	8009e1c <tcp_send_fin+0x1c>
 8009e0e:	4b21      	ldr	r3, [pc, #132]	; (8009e94 <tcp_send_fin+0x94>)
 8009e10:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8009e14:	4920      	ldr	r1, [pc, #128]	; (8009e98 <tcp_send_fin+0x98>)
 8009e16:	4821      	ldr	r0, [pc, #132]	; (8009e9c <tcp_send_fin+0x9c>)
 8009e18:	f004 fa1c 	bl	800e254 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d02e      	beq.n	8009e82 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e28:	60fb      	str	r3, [r7, #12]
 8009e2a:	e002      	b.n	8009e32 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d1f8      	bne.n	8009e2c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	68db      	ldr	r3, [r3, #12]
 8009e3e:	899b      	ldrh	r3, [r3, #12]
 8009e40:	b29b      	uxth	r3, r3
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7fa f954 	bl	80040f0 <lwip_htons>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	b2db      	uxtb	r3, r3
 8009e4c:	f003 0307 	and.w	r3, r3, #7
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d116      	bne.n	8009e82 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	68db      	ldr	r3, [r3, #12]
 8009e58:	899b      	ldrh	r3, [r3, #12]
 8009e5a:	b29c      	uxth	r4, r3
 8009e5c:	2001      	movs	r0, #1
 8009e5e:	f7fa f947 	bl	80040f0 <lwip_htons>
 8009e62:	4603      	mov	r3, r0
 8009e64:	461a      	mov	r2, r3
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	68db      	ldr	r3, [r3, #12]
 8009e6a:	4322      	orrs	r2, r4
 8009e6c:	b292      	uxth	r2, r2
 8009e6e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	8b5b      	ldrh	r3, [r3, #26]
 8009e74:	f043 0320 	orr.w	r3, r3, #32
 8009e78:	b29a      	uxth	r2, r3
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	e004      	b.n	8009e8c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8009e82:	2101      	movs	r1, #1
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f000 f80b 	bl	8009ea0 <tcp_enqueue_flags>
 8009e8a:	4603      	mov	r3, r0
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3714      	adds	r7, #20
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd90      	pop	{r4, r7, pc}
 8009e94:	08010cfc 	.word	0x08010cfc
 8009e98:	08011104 	.word	0x08011104
 8009e9c:	08010d50 	.word	0x08010d50

08009ea0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b08a      	sub	sp, #40	; 0x28
 8009ea4:	af02      	add	r7, sp, #8
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	460b      	mov	r3, r1
 8009eaa:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8009eac:	2300      	movs	r3, #0
 8009eae:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8009eb4:	78fb      	ldrb	r3, [r7, #3]
 8009eb6:	f003 0303 	and.w	r3, r3, #3
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d106      	bne.n	8009ecc <tcp_enqueue_flags+0x2c>
 8009ebe:	4b67      	ldr	r3, [pc, #412]	; (800a05c <tcp_enqueue_flags+0x1bc>)
 8009ec0:	f240 4211 	movw	r2, #1041	; 0x411
 8009ec4:	4966      	ldr	r1, [pc, #408]	; (800a060 <tcp_enqueue_flags+0x1c0>)
 8009ec6:	4867      	ldr	r0, [pc, #412]	; (800a064 <tcp_enqueue_flags+0x1c4>)
 8009ec8:	f004 f9c4 	bl	800e254 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d106      	bne.n	8009ee0 <tcp_enqueue_flags+0x40>
 8009ed2:	4b62      	ldr	r3, [pc, #392]	; (800a05c <tcp_enqueue_flags+0x1bc>)
 8009ed4:	f240 4213 	movw	r2, #1043	; 0x413
 8009ed8:	4963      	ldr	r1, [pc, #396]	; (800a068 <tcp_enqueue_flags+0x1c8>)
 8009eda:	4862      	ldr	r0, [pc, #392]	; (800a064 <tcp_enqueue_flags+0x1c4>)
 8009edc:	f004 f9ba 	bl	800e254 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8009ee0:	78fb      	ldrb	r3, [r7, #3]
 8009ee2:	f003 0302 	and.w	r3, r3, #2
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d001      	beq.n	8009eee <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8009eea:	2301      	movs	r3, #1
 8009eec:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009eee:	7ffb      	ldrb	r3, [r7, #31]
 8009ef0:	009b      	lsls	r3, r3, #2
 8009ef2:	b2db      	uxtb	r3, r3
 8009ef4:	f003 0304 	and.w	r3, r3, #4
 8009ef8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009efa:	7dfb      	ldrb	r3, [r7, #23]
 8009efc:	b29b      	uxth	r3, r3
 8009efe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009f02:	4619      	mov	r1, r3
 8009f04:	2036      	movs	r0, #54	; 0x36
 8009f06:	f7fb f8c3 	bl	8005090 <pbuf_alloc>
 8009f0a:	6138      	str	r0, [r7, #16]
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d109      	bne.n	8009f26 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	8b5b      	ldrh	r3, [r3, #26]
 8009f16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f1a:	b29a      	uxth	r2, r3
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009f20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f24:	e095      	b.n	800a052 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	895a      	ldrh	r2, [r3, #10]
 8009f2a:	7dfb      	ldrb	r3, [r7, #23]
 8009f2c:	b29b      	uxth	r3, r3
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	d206      	bcs.n	8009f40 <tcp_enqueue_flags+0xa0>
 8009f32:	4b4a      	ldr	r3, [pc, #296]	; (800a05c <tcp_enqueue_flags+0x1bc>)
 8009f34:	f240 4239 	movw	r2, #1081	; 0x439
 8009f38:	494c      	ldr	r1, [pc, #304]	; (800a06c <tcp_enqueue_flags+0x1cc>)
 8009f3a:	484a      	ldr	r0, [pc, #296]	; (800a064 <tcp_enqueue_flags+0x1c4>)
 8009f3c:	f004 f98a 	bl	800e254 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8009f44:	78fa      	ldrb	r2, [r7, #3]
 8009f46:	7ffb      	ldrb	r3, [r7, #31]
 8009f48:	9300      	str	r3, [sp, #0]
 8009f4a:	460b      	mov	r3, r1
 8009f4c:	6939      	ldr	r1, [r7, #16]
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f7ff fd70 	bl	8009a34 <tcp_create_segment>
 8009f54:	60f8      	str	r0, [r7, #12]
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d109      	bne.n	8009f70 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	8b5b      	ldrh	r3, [r3, #26]
 8009f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f64:	b29a      	uxth	r2, r3
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009f6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f6e:	e070      	b.n	800a052 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	f003 0303 	and.w	r3, r3, #3
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d006      	beq.n	8009f8a <tcp_enqueue_flags+0xea>
 8009f7c:	4b37      	ldr	r3, [pc, #220]	; (800a05c <tcp_enqueue_flags+0x1bc>)
 8009f7e:	f240 4242 	movw	r2, #1090	; 0x442
 8009f82:	493b      	ldr	r1, [pc, #236]	; (800a070 <tcp_enqueue_flags+0x1d0>)
 8009f84:	4837      	ldr	r0, [pc, #220]	; (800a064 <tcp_enqueue_flags+0x1c4>)
 8009f86:	f004 f965 	bl	800e254 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	891b      	ldrh	r3, [r3, #8]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d006      	beq.n	8009fa0 <tcp_enqueue_flags+0x100>
 8009f92:	4b32      	ldr	r3, [pc, #200]	; (800a05c <tcp_enqueue_flags+0x1bc>)
 8009f94:	f240 4243 	movw	r2, #1091	; 0x443
 8009f98:	4936      	ldr	r1, [pc, #216]	; (800a074 <tcp_enqueue_flags+0x1d4>)
 8009f9a:	4832      	ldr	r0, [pc, #200]	; (800a064 <tcp_enqueue_flags+0x1c4>)
 8009f9c:	f004 f95a 	bl	800e254 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d103      	bne.n	8009fb0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	68fa      	ldr	r2, [r7, #12]
 8009fac:	66da      	str	r2, [r3, #108]	; 0x6c
 8009fae:	e00d      	b.n	8009fcc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009fb4:	61bb      	str	r3, [r7, #24]
 8009fb6:	e002      	b.n	8009fbe <tcp_enqueue_flags+0x11e>
 8009fb8:	69bb      	ldr	r3, [r7, #24]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	61bb      	str	r3, [r7, #24]
 8009fbe:	69bb      	ldr	r3, [r7, #24]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d1f8      	bne.n	8009fb8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8009fc6:	69bb      	ldr	r3, [r7, #24]
 8009fc8:	68fa      	ldr	r2, [r7, #12]
 8009fca:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8009fd4:	78fb      	ldrb	r3, [r7, #3]
 8009fd6:	f003 0302 	and.w	r3, r3, #2
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d104      	bne.n	8009fe8 <tcp_enqueue_flags+0x148>
 8009fde:	78fb      	ldrb	r3, [r7, #3]
 8009fe0:	f003 0301 	and.w	r3, r3, #1
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d004      	beq.n	8009ff2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fec:	1c5a      	adds	r2, r3, #1
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8009ff2:	78fb      	ldrb	r3, [r7, #3]
 8009ff4:	f003 0301 	and.w	r3, r3, #1
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d006      	beq.n	800a00a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	8b5b      	ldrh	r3, [r3, #26]
 800a000:	f043 0320 	orr.w	r3, r3, #32
 800a004:	b29a      	uxth	r2, r3
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	4618      	mov	r0, r3
 800a010:	f7fb fbaa 	bl	8005768 <pbuf_clen>
 800a014:	4603      	mov	r3, r0
 800a016:	461a      	mov	r2, r3
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a01e:	4413      	add	r3, r2
 800a020:	b29a      	uxth	r2, r3
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d00e      	beq.n	800a050 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a036:	2b00      	cmp	r3, #0
 800a038:	d10a      	bne.n	800a050 <tcp_enqueue_flags+0x1b0>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d106      	bne.n	800a050 <tcp_enqueue_flags+0x1b0>
 800a042:	4b06      	ldr	r3, [pc, #24]	; (800a05c <tcp_enqueue_flags+0x1bc>)
 800a044:	f240 4265 	movw	r2, #1125	; 0x465
 800a048:	490b      	ldr	r1, [pc, #44]	; (800a078 <tcp_enqueue_flags+0x1d8>)
 800a04a:	4806      	ldr	r0, [pc, #24]	; (800a064 <tcp_enqueue_flags+0x1c4>)
 800a04c:	f004 f902 	bl	800e254 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800a050:	2300      	movs	r3, #0
}
 800a052:	4618      	mov	r0, r3
 800a054:	3720      	adds	r7, #32
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
 800a05a:	bf00      	nop
 800a05c:	08010cfc 	.word	0x08010cfc
 800a060:	08011120 	.word	0x08011120
 800a064:	08010d50 	.word	0x08010d50
 800a068:	08011178 	.word	0x08011178
 800a06c:	08011198 	.word	0x08011198
 800a070:	080111d4 	.word	0x080111d4
 800a074:	080111ec 	.word	0x080111ec
 800a078:	08011218 	.word	0x08011218

0800a07c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800a07c:	b5b0      	push	{r4, r5, r7, lr}
 800a07e:	b08a      	sub	sp, #40	; 0x28
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d106      	bne.n	800a098 <tcp_output+0x1c>
 800a08a:	4b9e      	ldr	r3, [pc, #632]	; (800a304 <tcp_output+0x288>)
 800a08c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800a090:	499d      	ldr	r1, [pc, #628]	; (800a308 <tcp_output+0x28c>)
 800a092:	489e      	ldr	r0, [pc, #632]	; (800a30c <tcp_output+0x290>)
 800a094:	f004 f8de 	bl	800e254 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	7d1b      	ldrb	r3, [r3, #20]
 800a09c:	2b01      	cmp	r3, #1
 800a09e:	d106      	bne.n	800a0ae <tcp_output+0x32>
 800a0a0:	4b98      	ldr	r3, [pc, #608]	; (800a304 <tcp_output+0x288>)
 800a0a2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800a0a6:	499a      	ldr	r1, [pc, #616]	; (800a310 <tcp_output+0x294>)
 800a0a8:	4898      	ldr	r0, [pc, #608]	; (800a30c <tcp_output+0x290>)
 800a0aa:	f004 f8d3 	bl	800e254 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800a0ae:	4b99      	ldr	r3, [pc, #612]	; (800a314 <tcp_output+0x298>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	687a      	ldr	r2, [r7, #4]
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	d101      	bne.n	800a0bc <tcp_output+0x40>
    return ERR_OK;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	e1ce      	b.n	800a45a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	bf28      	it	cs
 800a0cc:	4613      	movcs	r3, r2
 800a0ce:	b29b      	uxth	r3, r3
 800a0d0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0d6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800a0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d10b      	bne.n	800a0f6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	8b5b      	ldrh	r3, [r3, #26]
 800a0e2:	f003 0302 	and.w	r3, r3, #2
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	f000 81aa 	beq.w	800a440 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f000 fdcb 	bl	800ac88 <tcp_send_empty_ack>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	e1b1      	b.n	800a45a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800a0f6:	6879      	ldr	r1, [r7, #4]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	3304      	adds	r3, #4
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f7ff fc7c 	bl	80099fc <tcp_route>
 800a104:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d102      	bne.n	800a112 <tcp_output+0x96>
    return ERR_RTE;
 800a10c:	f06f 0303 	mvn.w	r3, #3
 800a110:	e1a3      	b.n	800a45a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d003      	beq.n	800a120 <tcp_output+0xa4>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d111      	bne.n	800a144 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d002      	beq.n	800a12c <tcp_output+0xb0>
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	3304      	adds	r3, #4
 800a12a:	e000      	b.n	800a12e <tcp_output+0xb2>
 800a12c:	2300      	movs	r3, #0
 800a12e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d102      	bne.n	800a13c <tcp_output+0xc0>
      return ERR_RTE;
 800a136:	f06f 0303 	mvn.w	r3, #3
 800a13a:	e18e      	b.n	800a45a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	681a      	ldr	r2, [r3, #0]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800a144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a146:	68db      	ldr	r3, [r3, #12]
 800a148:	685b      	ldr	r3, [r3, #4]
 800a14a:	4618      	mov	r0, r3
 800a14c:	f7f9 ffe5 	bl	800411a <lwip_htonl>
 800a150:	4602      	mov	r2, r0
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a156:	1ad3      	subs	r3, r2, r3
 800a158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a15a:	8912      	ldrh	r2, [r2, #8]
 800a15c:	4413      	add	r3, r2
 800a15e:	69ba      	ldr	r2, [r7, #24]
 800a160:	429a      	cmp	r2, r3
 800a162:	d227      	bcs.n	800a1b4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a16a:	461a      	mov	r2, r3
 800a16c:	69bb      	ldr	r3, [r7, #24]
 800a16e:	4293      	cmp	r3, r2
 800a170:	d114      	bne.n	800a19c <tcp_output+0x120>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a176:	2b00      	cmp	r3, #0
 800a178:	d110      	bne.n	800a19c <tcp_output+0x120>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a180:	2b00      	cmp	r3, #0
 800a182:	d10b      	bne.n	800a19c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2200      	movs	r2, #0
 800a188:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2201      	movs	r2, #1
 800a190:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2200      	movs	r2, #0
 800a198:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	8b5b      	ldrh	r3, [r3, #26]
 800a1a0:	f003 0302 	and.w	r3, r3, #2
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	f000 814d 	beq.w	800a444 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f000 fd6c 	bl	800ac88 <tcp_send_empty_ack>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	e152      	b.n	800a45a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1c0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800a1c2:	6a3b      	ldr	r3, [r7, #32]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	f000 811c 	beq.w	800a402 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800a1ca:	e002      	b.n	800a1d2 <tcp_output+0x156>
 800a1cc:	6a3b      	ldr	r3, [r7, #32]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	623b      	str	r3, [r7, #32]
 800a1d2:	6a3b      	ldr	r3, [r7, #32]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d1f8      	bne.n	800a1cc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800a1da:	e112      	b.n	800a402 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800a1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1de:	68db      	ldr	r3, [r3, #12]
 800a1e0:	899b      	ldrh	r3, [r3, #12]
 800a1e2:	b29b      	uxth	r3, r3
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	f7f9 ff83 	bl	80040f0 <lwip_htons>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	b2db      	uxtb	r3, r3
 800a1ee:	f003 0304 	and.w	r3, r3, #4
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d006      	beq.n	800a204 <tcp_output+0x188>
 800a1f6:	4b43      	ldr	r3, [pc, #268]	; (800a304 <tcp_output+0x288>)
 800a1f8:	f240 5236 	movw	r2, #1334	; 0x536
 800a1fc:	4946      	ldr	r1, [pc, #280]	; (800a318 <tcp_output+0x29c>)
 800a1fe:	4843      	ldr	r0, [pc, #268]	; (800a30c <tcp_output+0x290>)
 800a200:	f004 f828 	bl	800e254 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d01f      	beq.n	800a24c <tcp_output+0x1d0>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	8b5b      	ldrh	r3, [r3, #26]
 800a210:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800a214:	2b00      	cmp	r3, #0
 800a216:	d119      	bne.n	800a24c <tcp_output+0x1d0>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d00b      	beq.n	800a238 <tcp_output+0x1bc>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d110      	bne.n	800a24c <tcp_output+0x1d0>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a22e:	891a      	ldrh	r2, [r3, #8]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a234:	429a      	cmp	r2, r3
 800a236:	d209      	bcs.n	800a24c <tcp_output+0x1d0>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d004      	beq.n	800a24c <tcp_output+0x1d0>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a248:	2b08      	cmp	r3, #8
 800a24a:	d901      	bls.n	800a250 <tcp_output+0x1d4>
 800a24c:	2301      	movs	r3, #1
 800a24e:	e000      	b.n	800a252 <tcp_output+0x1d6>
 800a250:	2300      	movs	r3, #0
 800a252:	2b00      	cmp	r3, #0
 800a254:	d106      	bne.n	800a264 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	8b5b      	ldrh	r3, [r3, #26]
 800a25a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a25e:	2b00      	cmp	r3, #0
 800a260:	f000 80e4 	beq.w	800a42c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	7d1b      	ldrb	r3, [r3, #20]
 800a268:	2b02      	cmp	r3, #2
 800a26a:	d00d      	beq.n	800a288 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800a26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26e:	68db      	ldr	r3, [r3, #12]
 800a270:	899b      	ldrh	r3, [r3, #12]
 800a272:	b29c      	uxth	r4, r3
 800a274:	2010      	movs	r0, #16
 800a276:	f7f9 ff3b 	bl	80040f0 <lwip_htons>
 800a27a:	4603      	mov	r3, r0
 800a27c:	461a      	mov	r2, r3
 800a27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a280:	68db      	ldr	r3, [r3, #12]
 800a282:	4322      	orrs	r2, r4
 800a284:	b292      	uxth	r2, r2
 800a286:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800a288:	697a      	ldr	r2, [r7, #20]
 800a28a:	6879      	ldr	r1, [r7, #4]
 800a28c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a28e:	f000 f909 	bl	800a4a4 <tcp_output_segment>
 800a292:	4603      	mov	r3, r0
 800a294:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800a296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d009      	beq.n	800a2b2 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	8b5b      	ldrh	r3, [r3, #26]
 800a2a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2a6:	b29a      	uxth	r2, r3
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	835a      	strh	r2, [r3, #26]
      return err;
 800a2ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2b0:	e0d3      	b.n	800a45a <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800a2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b4:	681a      	ldr	r2, [r3, #0]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	7d1b      	ldrb	r3, [r3, #20]
 800a2be:	2b02      	cmp	r3, #2
 800a2c0:	d006      	beq.n	800a2d0 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	8b5b      	ldrh	r3, [r3, #26]
 800a2c6:	f023 0303 	bic.w	r3, r3, #3
 800a2ca:	b29a      	uxth	r2, r3
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d2:	68db      	ldr	r3, [r3, #12]
 800a2d4:	685b      	ldr	r3, [r3, #4]
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f7f9 ff1f 	bl	800411a <lwip_htonl>
 800a2dc:	4604      	mov	r4, r0
 800a2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e0:	891b      	ldrh	r3, [r3, #8]
 800a2e2:	461d      	mov	r5, r3
 800a2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e6:	68db      	ldr	r3, [r3, #12]
 800a2e8:	899b      	ldrh	r3, [r3, #12]
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f7f9 feff 	bl	80040f0 <lwip_htons>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	b2db      	uxtb	r3, r3
 800a2f6:	f003 0303 	and.w	r3, r3, #3
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d00e      	beq.n	800a31c <tcp_output+0x2a0>
 800a2fe:	2301      	movs	r3, #1
 800a300:	e00d      	b.n	800a31e <tcp_output+0x2a2>
 800a302:	bf00      	nop
 800a304:	08010cfc 	.word	0x08010cfc
 800a308:	08011240 	.word	0x08011240
 800a30c:	08010d50 	.word	0x08010d50
 800a310:	08011258 	.word	0x08011258
 800a314:	20008b14 	.word	0x20008b14
 800a318:	08011280 	.word	0x08011280
 800a31c:	2300      	movs	r3, #0
 800a31e:	442b      	add	r3, r5
 800a320:	4423      	add	r3, r4
 800a322:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	1ad3      	subs	r3, r2, r3
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	da02      	bge.n	800a336 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	68ba      	ldr	r2, [r7, #8]
 800a334:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800a336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a338:	891b      	ldrh	r3, [r3, #8]
 800a33a:	461c      	mov	r4, r3
 800a33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a33e:	68db      	ldr	r3, [r3, #12]
 800a340:	899b      	ldrh	r3, [r3, #12]
 800a342:	b29b      	uxth	r3, r3
 800a344:	4618      	mov	r0, r3
 800a346:	f7f9 fed3 	bl	80040f0 <lwip_htons>
 800a34a:	4603      	mov	r3, r0
 800a34c:	b2db      	uxtb	r3, r3
 800a34e:	f003 0303 	and.w	r3, r3, #3
 800a352:	2b00      	cmp	r3, #0
 800a354:	d001      	beq.n	800a35a <tcp_output+0x2de>
 800a356:	2301      	movs	r3, #1
 800a358:	e000      	b.n	800a35c <tcp_output+0x2e0>
 800a35a:	2300      	movs	r3, #0
 800a35c:	4423      	add	r3, r4
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d049      	beq.n	800a3f6 <tcp_output+0x37a>
      seg->next = NULL;
 800a362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a364:	2200      	movs	r2, #0
 800a366:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d105      	bne.n	800a37c <tcp_output+0x300>
        pcb->unacked = seg;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a374:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800a376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a378:	623b      	str	r3, [r7, #32]
 800a37a:	e03f      	b.n	800a3fc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800a37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37e:	68db      	ldr	r3, [r3, #12]
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	4618      	mov	r0, r3
 800a384:	f7f9 fec9 	bl	800411a <lwip_htonl>
 800a388:	4604      	mov	r4, r0
 800a38a:	6a3b      	ldr	r3, [r7, #32]
 800a38c:	68db      	ldr	r3, [r3, #12]
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	4618      	mov	r0, r3
 800a392:	f7f9 fec2 	bl	800411a <lwip_htonl>
 800a396:	4603      	mov	r3, r0
 800a398:	1ae3      	subs	r3, r4, r3
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	da24      	bge.n	800a3e8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	3370      	adds	r3, #112	; 0x70
 800a3a2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a3a4:	e002      	b.n	800a3ac <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800a3a6:	69fb      	ldr	r3, [r7, #28]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a3ac:	69fb      	ldr	r3, [r7, #28]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d011      	beq.n	800a3d8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a3b4:	69fb      	ldr	r3, [r7, #28]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	68db      	ldr	r3, [r3, #12]
 800a3ba:	685b      	ldr	r3, [r3, #4]
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f7f9 feac 	bl	800411a <lwip_htonl>
 800a3c2:	4604      	mov	r4, r0
 800a3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c6:	68db      	ldr	r3, [r3, #12]
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7f9 fea5 	bl	800411a <lwip_htonl>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	dbe6      	blt.n	800a3a6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800a3d8:	69fb      	ldr	r3, [r7, #28]
 800a3da:	681a      	ldr	r2, [r3, #0]
 800a3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3de:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800a3e0:	69fb      	ldr	r3, [r7, #28]
 800a3e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3e4:	601a      	str	r2, [r3, #0]
 800a3e6:	e009      	b.n	800a3fc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800a3e8:	6a3b      	ldr	r3, [r7, #32]
 800a3ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3ec:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800a3ee:	6a3b      	ldr	r3, [r7, #32]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	623b      	str	r3, [r7, #32]
 800a3f4:	e002      	b.n	800a3fc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800a3f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a3f8:	f7fc fc43 	bl	8006c82 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a400:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800a402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a404:	2b00      	cmp	r3, #0
 800a406:	d012      	beq.n	800a42e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800a408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40a:	68db      	ldr	r3, [r3, #12]
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	4618      	mov	r0, r3
 800a410:	f7f9 fe83 	bl	800411a <lwip_htonl>
 800a414:	4602      	mov	r2, r0
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a41a:	1ad3      	subs	r3, r2, r3
 800a41c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a41e:	8912      	ldrh	r2, [r2, #8]
 800a420:	4413      	add	r3, r2
  while (seg != NULL &&
 800a422:	69ba      	ldr	r2, [r7, #24]
 800a424:	429a      	cmp	r2, r3
 800a426:	f4bf aed9 	bcs.w	800a1dc <tcp_output+0x160>
 800a42a:	e000      	b.n	800a42e <tcp_output+0x3b2>
      break;
 800a42c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a432:	2b00      	cmp	r3, #0
 800a434:	d108      	bne.n	800a448 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2200      	movs	r2, #0
 800a43a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800a43e:	e004      	b.n	800a44a <tcp_output+0x3ce>
    goto output_done;
 800a440:	bf00      	nop
 800a442:	e002      	b.n	800a44a <tcp_output+0x3ce>
    goto output_done;
 800a444:	bf00      	nop
 800a446:	e000      	b.n	800a44a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800a448:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	8b5b      	ldrh	r3, [r3, #26]
 800a44e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a452:	b29a      	uxth	r2, r3
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800a458:	2300      	movs	r3, #0
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3728      	adds	r7, #40	; 0x28
 800a45e:	46bd      	mov	sp, r7
 800a460:	bdb0      	pop	{r4, r5, r7, pc}
 800a462:	bf00      	nop

0800a464 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b082      	sub	sp, #8
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d106      	bne.n	800a480 <tcp_output_segment_busy+0x1c>
 800a472:	4b09      	ldr	r3, [pc, #36]	; (800a498 <tcp_output_segment_busy+0x34>)
 800a474:	f240 529a 	movw	r2, #1434	; 0x59a
 800a478:	4908      	ldr	r1, [pc, #32]	; (800a49c <tcp_output_segment_busy+0x38>)
 800a47a:	4809      	ldr	r0, [pc, #36]	; (800a4a0 <tcp_output_segment_busy+0x3c>)
 800a47c:	f003 feea 	bl	800e254 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	685b      	ldr	r3, [r3, #4]
 800a484:	7b9b      	ldrb	r3, [r3, #14]
 800a486:	2b01      	cmp	r3, #1
 800a488:	d001      	beq.n	800a48e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800a48a:	2301      	movs	r3, #1
 800a48c:	e000      	b.n	800a490 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800a48e:	2300      	movs	r3, #0
}
 800a490:	4618      	mov	r0, r3
 800a492:	3708      	adds	r7, #8
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}
 800a498:	08010cfc 	.word	0x08010cfc
 800a49c:	08011298 	.word	0x08011298
 800a4a0:	08010d50 	.word	0x08010d50

0800a4a4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800a4a4:	b5b0      	push	{r4, r5, r7, lr}
 800a4a6:	b08c      	sub	sp, #48	; 0x30
 800a4a8:	af04      	add	r7, sp, #16
 800a4aa:	60f8      	str	r0, [r7, #12]
 800a4ac:	60b9      	str	r1, [r7, #8]
 800a4ae:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d106      	bne.n	800a4c4 <tcp_output_segment+0x20>
 800a4b6:	4b63      	ldr	r3, [pc, #396]	; (800a644 <tcp_output_segment+0x1a0>)
 800a4b8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800a4bc:	4962      	ldr	r1, [pc, #392]	; (800a648 <tcp_output_segment+0x1a4>)
 800a4be:	4863      	ldr	r0, [pc, #396]	; (800a64c <tcp_output_segment+0x1a8>)
 800a4c0:	f003 fec8 	bl	800e254 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d106      	bne.n	800a4d8 <tcp_output_segment+0x34>
 800a4ca:	4b5e      	ldr	r3, [pc, #376]	; (800a644 <tcp_output_segment+0x1a0>)
 800a4cc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800a4d0:	495f      	ldr	r1, [pc, #380]	; (800a650 <tcp_output_segment+0x1ac>)
 800a4d2:	485e      	ldr	r0, [pc, #376]	; (800a64c <tcp_output_segment+0x1a8>)
 800a4d4:	f003 febe 	bl	800e254 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d106      	bne.n	800a4ec <tcp_output_segment+0x48>
 800a4de:	4b59      	ldr	r3, [pc, #356]	; (800a644 <tcp_output_segment+0x1a0>)
 800a4e0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800a4e4:	495b      	ldr	r1, [pc, #364]	; (800a654 <tcp_output_segment+0x1b0>)
 800a4e6:	4859      	ldr	r0, [pc, #356]	; (800a64c <tcp_output_segment+0x1a8>)
 800a4e8:	f003 feb4 	bl	800e254 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800a4ec:	68f8      	ldr	r0, [r7, #12]
 800a4ee:	f7ff ffb9 	bl	800a464 <tcp_output_segment_busy>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d001      	beq.n	800a4fc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	e09f      	b.n	800a63c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	68dc      	ldr	r4, [r3, #12]
 800a504:	4610      	mov	r0, r2
 800a506:	f7f9 fe08 	bl	800411a <lwip_htonl>
 800a50a:	4603      	mov	r3, r0
 800a50c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	68dc      	ldr	r4, [r3, #12]
 800a516:	4610      	mov	r0, r2
 800a518:	f7f9 fdea 	bl	80040f0 <lwip_htons>
 800a51c:	4603      	mov	r3, r0
 800a51e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a524:	68ba      	ldr	r2, [r7, #8]
 800a526:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800a528:	441a      	add	r2, r3
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	68db      	ldr	r3, [r3, #12]
 800a532:	3314      	adds	r3, #20
 800a534:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	7a9b      	ldrb	r3, [r3, #10]
 800a53a:	f003 0301 	and.w	r3, r3, #1
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d015      	beq.n	800a56e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	3304      	adds	r3, #4
 800a546:	461a      	mov	r2, r3
 800a548:	6879      	ldr	r1, [r7, #4]
 800a54a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800a54e:	f7fc fe8f 	bl	8007270 <tcp_eff_send_mss_netif>
 800a552:	4603      	mov	r3, r0
 800a554:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800a556:	8b7b      	ldrh	r3, [r7, #26]
 800a558:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800a55c:	4618      	mov	r0, r3
 800a55e:	f7f9 fddc 	bl	800411a <lwip_htonl>
 800a562:	4602      	mov	r2, r0
 800a564:	69fb      	ldr	r3, [r7, #28]
 800a566:	601a      	str	r2, [r3, #0]
    opts += 1;
 800a568:	69fb      	ldr	r3, [r7, #28]
 800a56a:	3304      	adds	r3, #4
 800a56c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a574:	2b00      	cmp	r3, #0
 800a576:	da02      	bge.n	800a57e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	2200      	movs	r2, #0
 800a57c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a582:	2b00      	cmp	r3, #0
 800a584:	d10c      	bne.n	800a5a0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800a586:	4b34      	ldr	r3, [pc, #208]	; (800a658 <tcp_output_segment+0x1b4>)
 800a588:	681a      	ldr	r2, [r3, #0]
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	68db      	ldr	r3, [r3, #12]
 800a592:	685b      	ldr	r3, [r3, #4]
 800a594:	4618      	mov	r0, r3
 800a596:	f7f9 fdc0 	bl	800411a <lwip_htonl>
 800a59a:	4602      	mov	r2, r0
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	68da      	ldr	r2, [r3, #12]
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	685b      	ldr	r3, [r3, #4]
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	1ad3      	subs	r3, r2, r3
 800a5ac:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	8959      	ldrh	r1, [r3, #10]
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	685b      	ldr	r3, [r3, #4]
 800a5b8:	8b3a      	ldrh	r2, [r7, #24]
 800a5ba:	1a8a      	subs	r2, r1, r2
 800a5bc:	b292      	uxth	r2, r2
 800a5be:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	685b      	ldr	r3, [r3, #4]
 800a5c4:	8919      	ldrh	r1, [r3, #8]
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	685b      	ldr	r3, [r3, #4]
 800a5ca:	8b3a      	ldrh	r2, [r7, #24]
 800a5cc:	1a8a      	subs	r2, r1, r2
 800a5ce:	b292      	uxth	r2, r2
 800a5d0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	685b      	ldr	r3, [r3, #4]
 800a5d6:	68fa      	ldr	r2, [r7, #12]
 800a5d8:	68d2      	ldr	r2, [r2, #12]
 800a5da:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	68db      	ldr	r3, [r3, #12]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	741a      	strb	r2, [r3, #16]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	68db      	ldr	r3, [r3, #12]
 800a5ec:	f103 0214 	add.w	r2, r3, #20
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	7a9b      	ldrb	r3, [r3, #10]
 800a5f4:	009b      	lsls	r3, r3, #2
 800a5f6:	f003 0304 	and.w	r3, r3, #4
 800a5fa:	4413      	add	r3, r2
 800a5fc:	69fa      	ldr	r2, [r7, #28]
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d006      	beq.n	800a610 <tcp_output_segment+0x16c>
 800a602:	4b10      	ldr	r3, [pc, #64]	; (800a644 <tcp_output_segment+0x1a0>)
 800a604:	f240 621c 	movw	r2, #1564	; 0x61c
 800a608:	4914      	ldr	r1, [pc, #80]	; (800a65c <tcp_output_segment+0x1b8>)
 800a60a:	4810      	ldr	r0, [pc, #64]	; (800a64c <tcp_output_segment+0x1a8>)
 800a60c:	f003 fe22 	bl	800e254 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	6858      	ldr	r0, [r3, #4]
 800a614:	68b9      	ldr	r1, [r7, #8]
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	1d1c      	adds	r4, r3, #4
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	7add      	ldrb	r5, [r3, #11]
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	7a9b      	ldrb	r3, [r3, #10]
 800a622:	687a      	ldr	r2, [r7, #4]
 800a624:	9202      	str	r2, [sp, #8]
 800a626:	2206      	movs	r2, #6
 800a628:	9201      	str	r2, [sp, #4]
 800a62a:	9300      	str	r3, [sp, #0]
 800a62c:	462b      	mov	r3, r5
 800a62e:	4622      	mov	r2, r4
 800a630:	f002 fd86 	bl	800d140 <ip4_output_if>
 800a634:	4603      	mov	r3, r0
 800a636:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800a638:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3720      	adds	r7, #32
 800a640:	46bd      	mov	sp, r7
 800a642:	bdb0      	pop	{r4, r5, r7, pc}
 800a644:	08010cfc 	.word	0x08010cfc
 800a648:	080112c0 	.word	0x080112c0
 800a64c:	08010d50 	.word	0x08010d50
 800a650:	080112e0 	.word	0x080112e0
 800a654:	08011300 	.word	0x08011300
 800a658:	20008b04 	.word	0x20008b04
 800a65c:	08011324 	.word	0x08011324

0800a660 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800a660:	b5b0      	push	{r4, r5, r7, lr}
 800a662:	b084      	sub	sp, #16
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d106      	bne.n	800a67c <tcp_rexmit_rto_prepare+0x1c>
 800a66e:	4b31      	ldr	r3, [pc, #196]	; (800a734 <tcp_rexmit_rto_prepare+0xd4>)
 800a670:	f240 6263 	movw	r2, #1635	; 0x663
 800a674:	4930      	ldr	r1, [pc, #192]	; (800a738 <tcp_rexmit_rto_prepare+0xd8>)
 800a676:	4831      	ldr	r0, [pc, #196]	; (800a73c <tcp_rexmit_rto_prepare+0xdc>)
 800a678:	f003 fdec 	bl	800e254 <iprintf>

  if (pcb->unacked == NULL) {
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a680:	2b00      	cmp	r3, #0
 800a682:	d102      	bne.n	800a68a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800a684:	f06f 0305 	mvn.w	r3, #5
 800a688:	e050      	b.n	800a72c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a68e:	60fb      	str	r3, [r7, #12]
 800a690:	e00b      	b.n	800a6aa <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800a692:	68f8      	ldr	r0, [r7, #12]
 800a694:	f7ff fee6 	bl	800a464 <tcp_output_segment_busy>
 800a698:	4603      	mov	r3, r0
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d002      	beq.n	800a6a4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800a69e:	f06f 0305 	mvn.w	r3, #5
 800a6a2:	e043      	b.n	800a72c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	60fb      	str	r3, [r7, #12]
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d1ef      	bne.n	800a692 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800a6b2:	68f8      	ldr	r0, [r7, #12]
 800a6b4:	f7ff fed6 	bl	800a464 <tcp_output_segment_busy>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d002      	beq.n	800a6c4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800a6be:	f06f 0305 	mvn.w	r3, #5
 800a6c2:	e033      	b.n	800a72c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	8b5b      	ldrh	r3, [r3, #26]
 800a6de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a6e2:	b29a      	uxth	r2, r3
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	68db      	ldr	r3, [r3, #12]
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f7f9 fd13 	bl	800411a <lwip_htonl>
 800a6f4:	4604      	mov	r4, r0
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	891b      	ldrh	r3, [r3, #8]
 800a6fa:	461d      	mov	r5, r3
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	68db      	ldr	r3, [r3, #12]
 800a700:	899b      	ldrh	r3, [r3, #12]
 800a702:	b29b      	uxth	r3, r3
 800a704:	4618      	mov	r0, r3
 800a706:	f7f9 fcf3 	bl	80040f0 <lwip_htons>
 800a70a:	4603      	mov	r3, r0
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	f003 0303 	and.w	r3, r3, #3
 800a712:	2b00      	cmp	r3, #0
 800a714:	d001      	beq.n	800a71a <tcp_rexmit_rto_prepare+0xba>
 800a716:	2301      	movs	r3, #1
 800a718:	e000      	b.n	800a71c <tcp_rexmit_rto_prepare+0xbc>
 800a71a:	2300      	movs	r3, #0
 800a71c:	442b      	add	r3, r5
 800a71e:	18e2      	adds	r2, r4, r3
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2200      	movs	r2, #0
 800a728:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800a72a:	2300      	movs	r3, #0
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3710      	adds	r7, #16
 800a730:	46bd      	mov	sp, r7
 800a732:	bdb0      	pop	{r4, r5, r7, pc}
 800a734:	08010cfc 	.word	0x08010cfc
 800a738:	08011338 	.word	0x08011338
 800a73c:	08010d50 	.word	0x08010d50

0800a740 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b082      	sub	sp, #8
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d106      	bne.n	800a75c <tcp_rexmit_rto_commit+0x1c>
 800a74e:	4b0d      	ldr	r3, [pc, #52]	; (800a784 <tcp_rexmit_rto_commit+0x44>)
 800a750:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800a754:	490c      	ldr	r1, [pc, #48]	; (800a788 <tcp_rexmit_rto_commit+0x48>)
 800a756:	480d      	ldr	r0, [pc, #52]	; (800a78c <tcp_rexmit_rto_commit+0x4c>)
 800a758:	f003 fd7c 	bl	800e254 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a762:	2bff      	cmp	r3, #255	; 0xff
 800a764:	d007      	beq.n	800a776 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a76c:	3301      	adds	r3, #1
 800a76e:	b2da      	uxtb	r2, r3
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f7ff fc80 	bl	800a07c <tcp_output>
}
 800a77c:	bf00      	nop
 800a77e:	3708      	adds	r7, #8
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}
 800a784:	08010cfc 	.word	0x08010cfc
 800a788:	0801135c 	.word	0x0801135c
 800a78c:	08010d50 	.word	0x08010d50

0800a790 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b082      	sub	sp, #8
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d106      	bne.n	800a7ac <tcp_rexmit_rto+0x1c>
 800a79e:	4b0a      	ldr	r3, [pc, #40]	; (800a7c8 <tcp_rexmit_rto+0x38>)
 800a7a0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800a7a4:	4909      	ldr	r1, [pc, #36]	; (800a7cc <tcp_rexmit_rto+0x3c>)
 800a7a6:	480a      	ldr	r0, [pc, #40]	; (800a7d0 <tcp_rexmit_rto+0x40>)
 800a7a8:	f003 fd54 	bl	800e254 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f7ff ff57 	bl	800a660 <tcp_rexmit_rto_prepare>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d102      	bne.n	800a7be <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f7ff ffc1 	bl	800a740 <tcp_rexmit_rto_commit>
  }
}
 800a7be:	bf00      	nop
 800a7c0:	3708      	adds	r7, #8
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	08010cfc 	.word	0x08010cfc
 800a7cc:	08011380 	.word	0x08011380
 800a7d0:	08010d50 	.word	0x08010d50

0800a7d4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800a7d4:	b590      	push	{r4, r7, lr}
 800a7d6:	b085      	sub	sp, #20
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d106      	bne.n	800a7f0 <tcp_rexmit+0x1c>
 800a7e2:	4b2f      	ldr	r3, [pc, #188]	; (800a8a0 <tcp_rexmit+0xcc>)
 800a7e4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800a7e8:	492e      	ldr	r1, [pc, #184]	; (800a8a4 <tcp_rexmit+0xd0>)
 800a7ea:	482f      	ldr	r0, [pc, #188]	; (800a8a8 <tcp_rexmit+0xd4>)
 800a7ec:	f003 fd32 	bl	800e254 <iprintf>

  if (pcb->unacked == NULL) {
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d102      	bne.n	800a7fe <tcp_rexmit+0x2a>
    return ERR_VAL;
 800a7f8:	f06f 0305 	mvn.w	r3, #5
 800a7fc:	e04c      	b.n	800a898 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a802:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800a804:	68b8      	ldr	r0, [r7, #8]
 800a806:	f7ff fe2d 	bl	800a464 <tcp_output_segment_busy>
 800a80a:	4603      	mov	r3, r0
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d002      	beq.n	800a816 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800a810:	f06f 0305 	mvn.w	r3, #5
 800a814:	e040      	b.n	800a898 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	336c      	adds	r3, #108	; 0x6c
 800a822:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a824:	e002      	b.n	800a82c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d011      	beq.n	800a858 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	68db      	ldr	r3, [r3, #12]
 800a83a:	685b      	ldr	r3, [r3, #4]
 800a83c:	4618      	mov	r0, r3
 800a83e:	f7f9 fc6c 	bl	800411a <lwip_htonl>
 800a842:	4604      	mov	r4, r0
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	68db      	ldr	r3, [r3, #12]
 800a848:	685b      	ldr	r3, [r3, #4]
 800a84a:	4618      	mov	r0, r3
 800a84c:	f7f9 fc65 	bl	800411a <lwip_htonl>
 800a850:	4603      	mov	r3, r0
 800a852:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800a854:	2b00      	cmp	r3, #0
 800a856:	dbe6      	blt.n	800a826 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	68ba      	ldr	r2, [r7, #8]
 800a864:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d103      	bne.n	800a876 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2200      	movs	r2, #0
 800a872:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a87c:	2bff      	cmp	r3, #255	; 0xff
 800a87e:	d007      	beq.n	800a890 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a886:	3301      	adds	r3, #1
 800a888:	b2da      	uxtb	r2, r3
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2200      	movs	r2, #0
 800a894:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800a896:	2300      	movs	r3, #0
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3714      	adds	r7, #20
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd90      	pop	{r4, r7, pc}
 800a8a0:	08010cfc 	.word	0x08010cfc
 800a8a4:	0801139c 	.word	0x0801139c
 800a8a8:	08010d50 	.word	0x08010d50

0800a8ac <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b082      	sub	sp, #8
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d106      	bne.n	800a8c8 <tcp_rexmit_fast+0x1c>
 800a8ba:	4b2a      	ldr	r3, [pc, #168]	; (800a964 <tcp_rexmit_fast+0xb8>)
 800a8bc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800a8c0:	4929      	ldr	r1, [pc, #164]	; (800a968 <tcp_rexmit_fast+0xbc>)
 800a8c2:	482a      	ldr	r0, [pc, #168]	; (800a96c <tcp_rexmit_fast+0xc0>)
 800a8c4:	f003 fcc6 	bl	800e254 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d044      	beq.n	800a95a <tcp_rexmit_fast+0xae>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	8b5b      	ldrh	r3, [r3, #26]
 800a8d4:	f003 0304 	and.w	r3, r3, #4
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d13e      	bne.n	800a95a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f7ff ff79 	bl	800a7d4 <tcp_rexmit>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d138      	bne.n	800a95a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	bf28      	it	cs
 800a8f8:	4613      	movcs	r3, r2
 800a8fa:	b29b      	uxth	r3, r3
 800a8fc:	0fda      	lsrs	r2, r3, #31
 800a8fe:	4413      	add	r3, r2
 800a900:	105b      	asrs	r3, r3, #1
 800a902:	b29a      	uxth	r2, r3
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a910:	461a      	mov	r2, r3
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a916:	005b      	lsls	r3, r3, #1
 800a918:	429a      	cmp	r2, r3
 800a91a:	d206      	bcs.n	800a92a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a920:	005b      	lsls	r3, r3, #1
 800a922:	b29a      	uxth	r2, r3
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a934:	4619      	mov	r1, r3
 800a936:	0049      	lsls	r1, r1, #1
 800a938:	440b      	add	r3, r1
 800a93a:	b29b      	uxth	r3, r3
 800a93c:	4413      	add	r3, r2
 800a93e:	b29a      	uxth	r2, r3
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	8b5b      	ldrh	r3, [r3, #26]
 800a94a:	f043 0304 	orr.w	r3, r3, #4
 800a94e:	b29a      	uxth	r2, r3
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2200      	movs	r2, #0
 800a958:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800a95a:	bf00      	nop
 800a95c:	3708      	adds	r7, #8
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}
 800a962:	bf00      	nop
 800a964:	08010cfc 	.word	0x08010cfc
 800a968:	080113b4 	.word	0x080113b4
 800a96c:	08010d50 	.word	0x08010d50

0800a970 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b086      	sub	sp, #24
 800a974:	af00      	add	r7, sp, #0
 800a976:	60f8      	str	r0, [r7, #12]
 800a978:	607b      	str	r3, [r7, #4]
 800a97a:	460b      	mov	r3, r1
 800a97c:	817b      	strh	r3, [r7, #10]
 800a97e:	4613      	mov	r3, r2
 800a980:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800a982:	897a      	ldrh	r2, [r7, #10]
 800a984:	893b      	ldrh	r3, [r7, #8]
 800a986:	4413      	add	r3, r2
 800a988:	b29b      	uxth	r3, r3
 800a98a:	3314      	adds	r3, #20
 800a98c:	b29b      	uxth	r3, r3
 800a98e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a992:	4619      	mov	r1, r3
 800a994:	2022      	movs	r0, #34	; 0x22
 800a996:	f7fa fb7b 	bl	8005090 <pbuf_alloc>
 800a99a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d04d      	beq.n	800aa3e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800a9a2:	897b      	ldrh	r3, [r7, #10]
 800a9a4:	3313      	adds	r3, #19
 800a9a6:	697a      	ldr	r2, [r7, #20]
 800a9a8:	8952      	ldrh	r2, [r2, #10]
 800a9aa:	4293      	cmp	r3, r2
 800a9ac:	db06      	blt.n	800a9bc <tcp_output_alloc_header_common+0x4c>
 800a9ae:	4b26      	ldr	r3, [pc, #152]	; (800aa48 <tcp_output_alloc_header_common+0xd8>)
 800a9b0:	f240 7223 	movw	r2, #1827	; 0x723
 800a9b4:	4925      	ldr	r1, [pc, #148]	; (800aa4c <tcp_output_alloc_header_common+0xdc>)
 800a9b6:	4826      	ldr	r0, [pc, #152]	; (800aa50 <tcp_output_alloc_header_common+0xe0>)
 800a9b8:	f003 fc4c 	bl	800e254 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	685b      	ldr	r3, [r3, #4]
 800a9c0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800a9c2:	8c3b      	ldrh	r3, [r7, #32]
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f7f9 fb93 	bl	80040f0 <lwip_htons>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800a9d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f7f9 fb8b 	bl	80040f0 <lwip_htons>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	461a      	mov	r2, r3
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	687a      	ldr	r2, [r7, #4]
 800a9e6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800a9e8:	68f8      	ldr	r0, [r7, #12]
 800a9ea:	f7f9 fb96 	bl	800411a <lwip_htonl>
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800a9f4:	897b      	ldrh	r3, [r7, #10]
 800a9f6:	089b      	lsrs	r3, r3, #2
 800a9f8:	b29b      	uxth	r3, r3
 800a9fa:	3305      	adds	r3, #5
 800a9fc:	b29b      	uxth	r3, r3
 800a9fe:	031b      	lsls	r3, r3, #12
 800aa00:	b29a      	uxth	r2, r3
 800aa02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800aa06:	b29b      	uxth	r3, r3
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	b29b      	uxth	r3, r3
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f7f9 fb6f 	bl	80040f0 <lwip_htons>
 800aa12:	4603      	mov	r3, r0
 800aa14:	461a      	mov	r2, r3
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800aa1a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f7f9 fb67 	bl	80040f0 <lwip_htons>
 800aa22:	4603      	mov	r3, r0
 800aa24:	461a      	mov	r2, r3
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	741a      	strb	r2, [r3, #16]
 800aa30:	2200      	movs	r2, #0
 800aa32:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	2200      	movs	r2, #0
 800aa38:	749a      	strb	r2, [r3, #18]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800aa3e:	697b      	ldr	r3, [r7, #20]
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3718      	adds	r7, #24
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}
 800aa48:	08010cfc 	.word	0x08010cfc
 800aa4c:	080113d4 	.word	0x080113d4
 800aa50:	08010d50 	.word	0x08010d50

0800aa54 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800aa54:	b5b0      	push	{r4, r5, r7, lr}
 800aa56:	b08a      	sub	sp, #40	; 0x28
 800aa58:	af04      	add	r7, sp, #16
 800aa5a:	60f8      	str	r0, [r7, #12]
 800aa5c:	607b      	str	r3, [r7, #4]
 800aa5e:	460b      	mov	r3, r1
 800aa60:	817b      	strh	r3, [r7, #10]
 800aa62:	4613      	mov	r3, r2
 800aa64:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d106      	bne.n	800aa7a <tcp_output_alloc_header+0x26>
 800aa6c:	4b15      	ldr	r3, [pc, #84]	; (800aac4 <tcp_output_alloc_header+0x70>)
 800aa6e:	f240 7242 	movw	r2, #1858	; 0x742
 800aa72:	4915      	ldr	r1, [pc, #84]	; (800aac8 <tcp_output_alloc_header+0x74>)
 800aa74:	4815      	ldr	r0, [pc, #84]	; (800aacc <tcp_output_alloc_header+0x78>)
 800aa76:	f003 fbed 	bl	800e254 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	8adb      	ldrh	r3, [r3, #22]
 800aa82:	68fa      	ldr	r2, [r7, #12]
 800aa84:	8b12      	ldrh	r2, [r2, #24]
 800aa86:	68f9      	ldr	r1, [r7, #12]
 800aa88:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800aa8a:	893d      	ldrh	r5, [r7, #8]
 800aa8c:	897c      	ldrh	r4, [r7, #10]
 800aa8e:	9103      	str	r1, [sp, #12]
 800aa90:	2110      	movs	r1, #16
 800aa92:	9102      	str	r1, [sp, #8]
 800aa94:	9201      	str	r2, [sp, #4]
 800aa96:	9300      	str	r3, [sp, #0]
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	462a      	mov	r2, r5
 800aa9c:	4621      	mov	r1, r4
 800aa9e:	f7ff ff67 	bl	800a970 <tcp_output_alloc_header_common>
 800aaa2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d006      	beq.n	800aab8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaae:	68fa      	ldr	r2, [r7, #12]
 800aab0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800aab2:	441a      	add	r2, r3
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800aab8:	697b      	ldr	r3, [r7, #20]
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3718      	adds	r7, #24
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bdb0      	pop	{r4, r5, r7, pc}
 800aac2:	bf00      	nop
 800aac4:	08010cfc 	.word	0x08010cfc
 800aac8:	08011404 	.word	0x08011404
 800aacc:	08010d50 	.word	0x08010d50

0800aad0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b088      	sub	sp, #32
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	60f8      	str	r0, [r7, #12]
 800aad8:	60b9      	str	r1, [r7, #8]
 800aada:	4611      	mov	r1, r2
 800aadc:	461a      	mov	r2, r3
 800aade:	460b      	mov	r3, r1
 800aae0:	71fb      	strb	r3, [r7, #7]
 800aae2:	4613      	mov	r3, r2
 800aae4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800aae6:	2300      	movs	r3, #0
 800aae8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d106      	bne.n	800aafe <tcp_output_fill_options+0x2e>
 800aaf0:	4b13      	ldr	r3, [pc, #76]	; (800ab40 <tcp_output_fill_options+0x70>)
 800aaf2:	f240 7256 	movw	r2, #1878	; 0x756
 800aaf6:	4913      	ldr	r1, [pc, #76]	; (800ab44 <tcp_output_fill_options+0x74>)
 800aaf8:	4813      	ldr	r0, [pc, #76]	; (800ab48 <tcp_output_fill_options+0x78>)
 800aafa:	f003 fbab 	bl	800e254 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800ab04:	69bb      	ldr	r3, [r7, #24]
 800ab06:	3314      	adds	r3, #20
 800ab08:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800ab0a:	69bb      	ldr	r3, [r7, #24]
 800ab0c:	f103 0214 	add.w	r2, r3, #20
 800ab10:	8bfb      	ldrh	r3, [r7, #30]
 800ab12:	009b      	lsls	r3, r3, #2
 800ab14:	4619      	mov	r1, r3
 800ab16:	79fb      	ldrb	r3, [r7, #7]
 800ab18:	009b      	lsls	r3, r3, #2
 800ab1a:	f003 0304 	and.w	r3, r3, #4
 800ab1e:	440b      	add	r3, r1
 800ab20:	4413      	add	r3, r2
 800ab22:	697a      	ldr	r2, [r7, #20]
 800ab24:	429a      	cmp	r2, r3
 800ab26:	d006      	beq.n	800ab36 <tcp_output_fill_options+0x66>
 800ab28:	4b05      	ldr	r3, [pc, #20]	; (800ab40 <tcp_output_fill_options+0x70>)
 800ab2a:	f240 7275 	movw	r2, #1909	; 0x775
 800ab2e:	4907      	ldr	r1, [pc, #28]	; (800ab4c <tcp_output_fill_options+0x7c>)
 800ab30:	4805      	ldr	r0, [pc, #20]	; (800ab48 <tcp_output_fill_options+0x78>)
 800ab32:	f003 fb8f 	bl	800e254 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800ab36:	bf00      	nop
 800ab38:	3720      	adds	r7, #32
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}
 800ab3e:	bf00      	nop
 800ab40:	08010cfc 	.word	0x08010cfc
 800ab44:	0801142c 	.word	0x0801142c
 800ab48:	08010d50 	.word	0x08010d50
 800ab4c:	08011324 	.word	0x08011324

0800ab50 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b08a      	sub	sp, #40	; 0x28
 800ab54:	af04      	add	r7, sp, #16
 800ab56:	60f8      	str	r0, [r7, #12]
 800ab58:	60b9      	str	r1, [r7, #8]
 800ab5a:	607a      	str	r2, [r7, #4]
 800ab5c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d106      	bne.n	800ab72 <tcp_output_control_segment+0x22>
 800ab64:	4b1c      	ldr	r3, [pc, #112]	; (800abd8 <tcp_output_control_segment+0x88>)
 800ab66:	f240 7287 	movw	r2, #1927	; 0x787
 800ab6a:	491c      	ldr	r1, [pc, #112]	; (800abdc <tcp_output_control_segment+0x8c>)
 800ab6c:	481c      	ldr	r0, [pc, #112]	; (800abe0 <tcp_output_control_segment+0x90>)
 800ab6e:	f003 fb71 	bl	800e254 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800ab72:	683a      	ldr	r2, [r7, #0]
 800ab74:	6879      	ldr	r1, [r7, #4]
 800ab76:	68f8      	ldr	r0, [r7, #12]
 800ab78:	f7fe ff40 	bl	80099fc <tcp_route>
 800ab7c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d102      	bne.n	800ab8a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800ab84:	23fc      	movs	r3, #252	; 0xfc
 800ab86:	75fb      	strb	r3, [r7, #23]
 800ab88:	e01c      	b.n	800abc4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d006      	beq.n	800ab9e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	7adb      	ldrb	r3, [r3, #11]
 800ab94:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	7a9b      	ldrb	r3, [r3, #10]
 800ab9a:	757b      	strb	r3, [r7, #21]
 800ab9c:	e003      	b.n	800aba6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800ab9e:	23ff      	movs	r3, #255	; 0xff
 800aba0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800aba2:	2300      	movs	r3, #0
 800aba4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800aba6:	7dba      	ldrb	r2, [r7, #22]
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	9302      	str	r3, [sp, #8]
 800abac:	2306      	movs	r3, #6
 800abae:	9301      	str	r3, [sp, #4]
 800abb0:	7d7b      	ldrb	r3, [r7, #21]
 800abb2:	9300      	str	r3, [sp, #0]
 800abb4:	4613      	mov	r3, r2
 800abb6:	683a      	ldr	r2, [r7, #0]
 800abb8:	6879      	ldr	r1, [r7, #4]
 800abba:	68b8      	ldr	r0, [r7, #8]
 800abbc:	f002 fac0 	bl	800d140 <ip4_output_if>
 800abc0:	4603      	mov	r3, r0
 800abc2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800abc4:	68b8      	ldr	r0, [r7, #8]
 800abc6:	f7fa fd47 	bl	8005658 <pbuf_free>
  return err;
 800abca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3718      	adds	r7, #24
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}
 800abd6:	bf00      	nop
 800abd8:	08010cfc 	.word	0x08010cfc
 800abdc:	08011454 	.word	0x08011454
 800abe0:	08010d50 	.word	0x08010d50

0800abe4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800abe4:	b590      	push	{r4, r7, lr}
 800abe6:	b08b      	sub	sp, #44	; 0x2c
 800abe8:	af04      	add	r7, sp, #16
 800abea:	60f8      	str	r0, [r7, #12]
 800abec:	60b9      	str	r1, [r7, #8]
 800abee:	607a      	str	r2, [r7, #4]
 800abf0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d106      	bne.n	800ac06 <tcp_rst+0x22>
 800abf8:	4b1f      	ldr	r3, [pc, #124]	; (800ac78 <tcp_rst+0x94>)
 800abfa:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800abfe:	491f      	ldr	r1, [pc, #124]	; (800ac7c <tcp_rst+0x98>)
 800ac00:	481f      	ldr	r0, [pc, #124]	; (800ac80 <tcp_rst+0x9c>)
 800ac02:	f003 fb27 	bl	800e254 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800ac06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d106      	bne.n	800ac1a <tcp_rst+0x36>
 800ac0c:	4b1a      	ldr	r3, [pc, #104]	; (800ac78 <tcp_rst+0x94>)
 800ac0e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800ac12:	491c      	ldr	r1, [pc, #112]	; (800ac84 <tcp_rst+0xa0>)
 800ac14:	481a      	ldr	r0, [pc, #104]	; (800ac80 <tcp_rst+0x9c>)
 800ac16:	f003 fb1d 	bl	800e254 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800ac1e:	f246 0308 	movw	r3, #24584	; 0x6008
 800ac22:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800ac24:	7dfb      	ldrb	r3, [r7, #23]
 800ac26:	b29c      	uxth	r4, r3
 800ac28:	68b8      	ldr	r0, [r7, #8]
 800ac2a:	f7f9 fa76 	bl	800411a <lwip_htonl>
 800ac2e:	4602      	mov	r2, r0
 800ac30:	8abb      	ldrh	r3, [r7, #20]
 800ac32:	9303      	str	r3, [sp, #12]
 800ac34:	2314      	movs	r3, #20
 800ac36:	9302      	str	r3, [sp, #8]
 800ac38:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ac3a:	9301      	str	r3, [sp, #4]
 800ac3c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ac3e:	9300      	str	r3, [sp, #0]
 800ac40:	4613      	mov	r3, r2
 800ac42:	2200      	movs	r2, #0
 800ac44:	4621      	mov	r1, r4
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f7ff fe92 	bl	800a970 <tcp_output_alloc_header_common>
 800ac4c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d00c      	beq.n	800ac6e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ac54:	7dfb      	ldrb	r3, [r7, #23]
 800ac56:	2200      	movs	r2, #0
 800ac58:	6939      	ldr	r1, [r7, #16]
 800ac5a:	68f8      	ldr	r0, [r7, #12]
 800ac5c:	f7ff ff38 	bl	800aad0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800ac60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac62:	683a      	ldr	r2, [r7, #0]
 800ac64:	6939      	ldr	r1, [r7, #16]
 800ac66:	68f8      	ldr	r0, [r7, #12]
 800ac68:	f7ff ff72 	bl	800ab50 <tcp_output_control_segment>
 800ac6c:	e000      	b.n	800ac70 <tcp_rst+0x8c>
    return;
 800ac6e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800ac70:	371c      	adds	r7, #28
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd90      	pop	{r4, r7, pc}
 800ac76:	bf00      	nop
 800ac78:	08010cfc 	.word	0x08010cfc
 800ac7c:	08011480 	.word	0x08011480
 800ac80:	08010d50 	.word	0x08010d50
 800ac84:	0801149c 	.word	0x0801149c

0800ac88 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800ac88:	b590      	push	{r4, r7, lr}
 800ac8a:	b087      	sub	sp, #28
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800ac90:	2300      	movs	r3, #0
 800ac92:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800ac94:	2300      	movs	r3, #0
 800ac96:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d106      	bne.n	800acac <tcp_send_empty_ack+0x24>
 800ac9e:	4b28      	ldr	r3, [pc, #160]	; (800ad40 <tcp_send_empty_ack+0xb8>)
 800aca0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800aca4:	4927      	ldr	r1, [pc, #156]	; (800ad44 <tcp_send_empty_ack+0xbc>)
 800aca6:	4828      	ldr	r0, [pc, #160]	; (800ad48 <tcp_send_empty_ack+0xc0>)
 800aca8:	f003 fad4 	bl	800e254 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800acac:	7dfb      	ldrb	r3, [r7, #23]
 800acae:	009b      	lsls	r3, r3, #2
 800acb0:	b2db      	uxtb	r3, r3
 800acb2:	f003 0304 	and.w	r3, r3, #4
 800acb6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800acb8:	7d7b      	ldrb	r3, [r7, #21]
 800acba:	b29c      	uxth	r4, r3
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acc0:	4618      	mov	r0, r3
 800acc2:	f7f9 fa2a 	bl	800411a <lwip_htonl>
 800acc6:	4603      	mov	r3, r0
 800acc8:	2200      	movs	r2, #0
 800acca:	4621      	mov	r1, r4
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f7ff fec1 	bl	800aa54 <tcp_output_alloc_header>
 800acd2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d109      	bne.n	800acee <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	8b5b      	ldrh	r3, [r3, #26]
 800acde:	f043 0303 	orr.w	r3, r3, #3
 800ace2:	b29a      	uxth	r2, r3
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800ace8:	f06f 0301 	mvn.w	r3, #1
 800acec:	e023      	b.n	800ad36 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800acee:	7dbb      	ldrb	r3, [r7, #22]
 800acf0:	7dfa      	ldrb	r2, [r7, #23]
 800acf2:	6939      	ldr	r1, [r7, #16]
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f7ff feeb 	bl	800aad0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800acfa:	687a      	ldr	r2, [r7, #4]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	3304      	adds	r3, #4
 800ad00:	6939      	ldr	r1, [r7, #16]
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f7ff ff24 	bl	800ab50 <tcp_output_control_segment>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800ad0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d007      	beq.n	800ad24 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	8b5b      	ldrh	r3, [r3, #26]
 800ad18:	f043 0303 	orr.w	r3, r3, #3
 800ad1c:	b29a      	uxth	r2, r3
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	835a      	strh	r2, [r3, #26]
 800ad22:	e006      	b.n	800ad32 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	8b5b      	ldrh	r3, [r3, #26]
 800ad28:	f023 0303 	bic.w	r3, r3, #3
 800ad2c:	b29a      	uxth	r2, r3
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800ad32:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	371c      	adds	r7, #28
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd90      	pop	{r4, r7, pc}
 800ad3e:	bf00      	nop
 800ad40:	08010cfc 	.word	0x08010cfc
 800ad44:	080114b8 	.word	0x080114b8
 800ad48:	08010d50 	.word	0x08010d50

0800ad4c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800ad4c:	b590      	push	{r4, r7, lr}
 800ad4e:	b087      	sub	sp, #28
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ad54:	2300      	movs	r3, #0
 800ad56:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d106      	bne.n	800ad6c <tcp_keepalive+0x20>
 800ad5e:	4b18      	ldr	r3, [pc, #96]	; (800adc0 <tcp_keepalive+0x74>)
 800ad60:	f640 0224 	movw	r2, #2084	; 0x824
 800ad64:	4917      	ldr	r1, [pc, #92]	; (800adc4 <tcp_keepalive+0x78>)
 800ad66:	4818      	ldr	r0, [pc, #96]	; (800adc8 <tcp_keepalive+0x7c>)
 800ad68:	f003 fa74 	bl	800e254 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800ad6c:	7dfb      	ldrb	r3, [r7, #23]
 800ad6e:	b29c      	uxth	r4, r3
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad74:	3b01      	subs	r3, #1
 800ad76:	4618      	mov	r0, r3
 800ad78:	f7f9 f9cf 	bl	800411a <lwip_htonl>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	2200      	movs	r2, #0
 800ad80:	4621      	mov	r1, r4
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f7ff fe66 	bl	800aa54 <tcp_output_alloc_header>
 800ad88:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d102      	bne.n	800ad96 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800ad90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad94:	e010      	b.n	800adb8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ad96:	7dfb      	ldrb	r3, [r7, #23]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	6939      	ldr	r1, [r7, #16]
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f7ff fe97 	bl	800aad0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ada2:	687a      	ldr	r2, [r7, #4]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	3304      	adds	r3, #4
 800ada8:	6939      	ldr	r1, [r7, #16]
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f7ff fed0 	bl	800ab50 <tcp_output_control_segment>
 800adb0:	4603      	mov	r3, r0
 800adb2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800adb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800adb8:	4618      	mov	r0, r3
 800adba:	371c      	adds	r7, #28
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd90      	pop	{r4, r7, pc}
 800adc0:	08010cfc 	.word	0x08010cfc
 800adc4:	080114d8 	.word	0x080114d8
 800adc8:	08010d50 	.word	0x08010d50

0800adcc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800adcc:	b590      	push	{r4, r7, lr}
 800adce:	b08b      	sub	sp, #44	; 0x2c
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800add4:	2300      	movs	r3, #0
 800add6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d106      	bne.n	800adee <tcp_zero_window_probe+0x22>
 800ade0:	4b4c      	ldr	r3, [pc, #304]	; (800af14 <tcp_zero_window_probe+0x148>)
 800ade2:	f640 024f 	movw	r2, #2127	; 0x84f
 800ade6:	494c      	ldr	r1, [pc, #304]	; (800af18 <tcp_zero_window_probe+0x14c>)
 800ade8:	484c      	ldr	r0, [pc, #304]	; (800af1c <tcp_zero_window_probe+0x150>)
 800adea:	f003 fa33 	bl	800e254 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adf2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800adf4:	6a3b      	ldr	r3, [r7, #32]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d101      	bne.n	800adfe <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800adfa:	2300      	movs	r3, #0
 800adfc:	e086      	b.n	800af0c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ae04:	2bff      	cmp	r3, #255	; 0xff
 800ae06:	d007      	beq.n	800ae18 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ae0e:	3301      	adds	r3, #1
 800ae10:	b2da      	uxtb	r2, r3
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ae18:	6a3b      	ldr	r3, [r7, #32]
 800ae1a:	68db      	ldr	r3, [r3, #12]
 800ae1c:	899b      	ldrh	r3, [r3, #12]
 800ae1e:	b29b      	uxth	r3, r3
 800ae20:	4618      	mov	r0, r3
 800ae22:	f7f9 f965 	bl	80040f0 <lwip_htons>
 800ae26:	4603      	mov	r3, r0
 800ae28:	b2db      	uxtb	r3, r3
 800ae2a:	f003 0301 	and.w	r3, r3, #1
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d005      	beq.n	800ae3e <tcp_zero_window_probe+0x72>
 800ae32:	6a3b      	ldr	r3, [r7, #32]
 800ae34:	891b      	ldrh	r3, [r3, #8]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d101      	bne.n	800ae3e <tcp_zero_window_probe+0x72>
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	e000      	b.n	800ae40 <tcp_zero_window_probe+0x74>
 800ae3e:	2300      	movs	r3, #0
 800ae40:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800ae42:	7ffb      	ldrb	r3, [r7, #31]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	bf0c      	ite	eq
 800ae48:	2301      	moveq	r3, #1
 800ae4a:	2300      	movne	r3, #0
 800ae4c:	b2db      	uxtb	r3, r3
 800ae4e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ae50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae54:	b299      	uxth	r1, r3
 800ae56:	6a3b      	ldr	r3, [r7, #32]
 800ae58:	68db      	ldr	r3, [r3, #12]
 800ae5a:	685b      	ldr	r3, [r3, #4]
 800ae5c:	8bba      	ldrh	r2, [r7, #28]
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f7ff fdf8 	bl	800aa54 <tcp_output_alloc_header>
 800ae64:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800ae66:	69bb      	ldr	r3, [r7, #24]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d102      	bne.n	800ae72 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800ae6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae70:	e04c      	b.n	800af0c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800ae72:	69bb      	ldr	r3, [r7, #24]
 800ae74:	685b      	ldr	r3, [r3, #4]
 800ae76:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800ae78:	7ffb      	ldrb	r3, [r7, #31]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d011      	beq.n	800aea2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	899b      	ldrh	r3, [r3, #12]
 800ae82:	b29b      	uxth	r3, r3
 800ae84:	b21b      	sxth	r3, r3
 800ae86:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ae8a:	b21c      	sxth	r4, r3
 800ae8c:	2011      	movs	r0, #17
 800ae8e:	f7f9 f92f 	bl	80040f0 <lwip_htons>
 800ae92:	4603      	mov	r3, r0
 800ae94:	b21b      	sxth	r3, r3
 800ae96:	4323      	orrs	r3, r4
 800ae98:	b21b      	sxth	r3, r3
 800ae9a:	b29a      	uxth	r2, r3
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	819a      	strh	r2, [r3, #12]
 800aea0:	e010      	b.n	800aec4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800aea2:	69bb      	ldr	r3, [r7, #24]
 800aea4:	685b      	ldr	r3, [r3, #4]
 800aea6:	3314      	adds	r3, #20
 800aea8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800aeaa:	6a3b      	ldr	r3, [r7, #32]
 800aeac:	6858      	ldr	r0, [r3, #4]
 800aeae:	6a3b      	ldr	r3, [r7, #32]
 800aeb0:	685b      	ldr	r3, [r3, #4]
 800aeb2:	891a      	ldrh	r2, [r3, #8]
 800aeb4:	6a3b      	ldr	r3, [r7, #32]
 800aeb6:	891b      	ldrh	r3, [r3, #8]
 800aeb8:	1ad3      	subs	r3, r2, r3
 800aeba:	b29b      	uxth	r3, r3
 800aebc:	2201      	movs	r2, #1
 800aebe:	6939      	ldr	r1, [r7, #16]
 800aec0:	f7fa fdc4 	bl	8005a4c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800aec4:	6a3b      	ldr	r3, [r7, #32]
 800aec6:	68db      	ldr	r3, [r3, #12]
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	4618      	mov	r0, r3
 800aecc:	f7f9 f925 	bl	800411a <lwip_htonl>
 800aed0:	4603      	mov	r3, r0
 800aed2:	3301      	adds	r3, #1
 800aed4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	1ad3      	subs	r3, r2, r3
 800aede:	2b00      	cmp	r3, #0
 800aee0:	da02      	bge.n	800aee8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	68fa      	ldr	r2, [r7, #12]
 800aee6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800aee8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aeec:	2200      	movs	r2, #0
 800aeee:	69b9      	ldr	r1, [r7, #24]
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f7ff fded 	bl	800aad0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800aef6:	687a      	ldr	r2, [r7, #4]
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	3304      	adds	r3, #4
 800aefc:	69b9      	ldr	r1, [r7, #24]
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f7ff fe26 	bl	800ab50 <tcp_output_control_segment>
 800af04:	4603      	mov	r3, r0
 800af06:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800af08:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	372c      	adds	r7, #44	; 0x2c
 800af10:	46bd      	mov	sp, r7
 800af12:	bd90      	pop	{r4, r7, pc}
 800af14:	08010cfc 	.word	0x08010cfc
 800af18:	080114f4 	.word	0x080114f4
 800af1c:	08010d50 	.word	0x08010d50

0800af20 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b082      	sub	sp, #8
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800af28:	f7fa ff10 	bl	8005d4c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800af2c:	4b0a      	ldr	r3, [pc, #40]	; (800af58 <tcpip_tcp_timer+0x38>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d103      	bne.n	800af3c <tcpip_tcp_timer+0x1c>
 800af34:	4b09      	ldr	r3, [pc, #36]	; (800af5c <tcpip_tcp_timer+0x3c>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d005      	beq.n	800af48 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800af3c:	2200      	movs	r2, #0
 800af3e:	4908      	ldr	r1, [pc, #32]	; (800af60 <tcpip_tcp_timer+0x40>)
 800af40:	20fa      	movs	r0, #250	; 0xfa
 800af42:	f000 f8f3 	bl	800b12c <sys_timeout>
 800af46:	e003      	b.n	800af50 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800af48:	4b06      	ldr	r3, [pc, #24]	; (800af64 <tcpip_tcp_timer+0x44>)
 800af4a:	2200      	movs	r2, #0
 800af4c:	601a      	str	r2, [r3, #0]
  }
}
 800af4e:	bf00      	nop
 800af50:	bf00      	nop
 800af52:	3708      	adds	r7, #8
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}
 800af58:	20008b00 	.word	0x20008b00
 800af5c:	20008b10 	.word	0x20008b10
 800af60:	0800af21 	.word	0x0800af21
 800af64:	2000010c 	.word	0x2000010c

0800af68 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800af6c:	4b0a      	ldr	r3, [pc, #40]	; (800af98 <tcp_timer_needed+0x30>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d10f      	bne.n	800af94 <tcp_timer_needed+0x2c>
 800af74:	4b09      	ldr	r3, [pc, #36]	; (800af9c <tcp_timer_needed+0x34>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d103      	bne.n	800af84 <tcp_timer_needed+0x1c>
 800af7c:	4b08      	ldr	r3, [pc, #32]	; (800afa0 <tcp_timer_needed+0x38>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d007      	beq.n	800af94 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800af84:	4b04      	ldr	r3, [pc, #16]	; (800af98 <tcp_timer_needed+0x30>)
 800af86:	2201      	movs	r2, #1
 800af88:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800af8a:	2200      	movs	r2, #0
 800af8c:	4905      	ldr	r1, [pc, #20]	; (800afa4 <tcp_timer_needed+0x3c>)
 800af8e:	20fa      	movs	r0, #250	; 0xfa
 800af90:	f000 f8cc 	bl	800b12c <sys_timeout>
  }
}
 800af94:	bf00      	nop
 800af96:	bd80      	pop	{r7, pc}
 800af98:	2000010c 	.word	0x2000010c
 800af9c:	20008b00 	.word	0x20008b00
 800afa0:	20008b10 	.word	0x20008b10
 800afa4:	0800af21 	.word	0x0800af21

0800afa8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b086      	sub	sp, #24
 800afac:	af00      	add	r7, sp, #0
 800afae:	60f8      	str	r0, [r7, #12]
 800afb0:	60b9      	str	r1, [r7, #8]
 800afb2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800afb4:	2006      	movs	r0, #6
 800afb6:	f7f9 fcf1 	bl	800499c <memp_malloc>
 800afba:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d109      	bne.n	800afd6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d151      	bne.n	800b06c <sys_timeout_abs+0xc4>
 800afc8:	4b2a      	ldr	r3, [pc, #168]	; (800b074 <sys_timeout_abs+0xcc>)
 800afca:	22be      	movs	r2, #190	; 0xbe
 800afcc:	492a      	ldr	r1, [pc, #168]	; (800b078 <sys_timeout_abs+0xd0>)
 800afce:	482b      	ldr	r0, [pc, #172]	; (800b07c <sys_timeout_abs+0xd4>)
 800afd0:	f003 f940 	bl	800e254 <iprintf>
    return;
 800afd4:	e04a      	b.n	800b06c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	2200      	movs	r2, #0
 800afda:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	68ba      	ldr	r2, [r7, #8]
 800afe0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	687a      	ldr	r2, [r7, #4]
 800afe6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800afe8:	693b      	ldr	r3, [r7, #16]
 800afea:	68fa      	ldr	r2, [r7, #12]
 800afec:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800afee:	4b24      	ldr	r3, [pc, #144]	; (800b080 <sys_timeout_abs+0xd8>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d103      	bne.n	800affe <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800aff6:	4a22      	ldr	r2, [pc, #136]	; (800b080 <sys_timeout_abs+0xd8>)
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	6013      	str	r3, [r2, #0]
    return;
 800affc:	e037      	b.n	800b06e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	685a      	ldr	r2, [r3, #4]
 800b002:	4b1f      	ldr	r3, [pc, #124]	; (800b080 <sys_timeout_abs+0xd8>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	685b      	ldr	r3, [r3, #4]
 800b008:	1ad3      	subs	r3, r2, r3
 800b00a:	0fdb      	lsrs	r3, r3, #31
 800b00c:	f003 0301 	and.w	r3, r3, #1
 800b010:	b2db      	uxtb	r3, r3
 800b012:	2b00      	cmp	r3, #0
 800b014:	d007      	beq.n	800b026 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800b016:	4b1a      	ldr	r3, [pc, #104]	; (800b080 <sys_timeout_abs+0xd8>)
 800b018:	681a      	ldr	r2, [r3, #0]
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800b01e:	4a18      	ldr	r2, [pc, #96]	; (800b080 <sys_timeout_abs+0xd8>)
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	6013      	str	r3, [r2, #0]
 800b024:	e023      	b.n	800b06e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800b026:	4b16      	ldr	r3, [pc, #88]	; (800b080 <sys_timeout_abs+0xd8>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	617b      	str	r3, [r7, #20]
 800b02c:	e01a      	b.n	800b064 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d00b      	beq.n	800b04e <sys_timeout_abs+0xa6>
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	685a      	ldr	r2, [r3, #4]
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	685b      	ldr	r3, [r3, #4]
 800b040:	1ad3      	subs	r3, r2, r3
 800b042:	0fdb      	lsrs	r3, r3, #31
 800b044:	f003 0301 	and.w	r3, r3, #1
 800b048:	b2db      	uxtb	r3, r3
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d007      	beq.n	800b05e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	681a      	ldr	r2, [r3, #0]
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	693a      	ldr	r2, [r7, #16]
 800b05a:	601a      	str	r2, [r3, #0]
        break;
 800b05c:	e007      	b.n	800b06e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	617b      	str	r3, [r7, #20]
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d1e1      	bne.n	800b02e <sys_timeout_abs+0x86>
 800b06a:	e000      	b.n	800b06e <sys_timeout_abs+0xc6>
    return;
 800b06c:	bf00      	nop
      }
    }
  }
}
 800b06e:	3718      	adds	r7, #24
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}
 800b074:	08011518 	.word	0x08011518
 800b078:	0801154c 	.word	0x0801154c
 800b07c:	0801158c 	.word	0x0801158c
 800b080:	20000104 	.word	0x20000104

0800b084 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b086      	sub	sp, #24
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	685b      	ldr	r3, [r3, #4]
 800b094:	4798      	blx	r3

  now = sys_now();
 800b096:	f7f8 ff9d 	bl	8003fd4 <sys_now>
 800b09a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	681a      	ldr	r2, [r3, #0]
 800b0a0:	4b0f      	ldr	r3, [pc, #60]	; (800b0e0 <lwip_cyclic_timer+0x5c>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	4413      	add	r3, r2
 800b0a6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800b0a8:	68fa      	ldr	r2, [r7, #12]
 800b0aa:	693b      	ldr	r3, [r7, #16]
 800b0ac:	1ad3      	subs	r3, r2, r3
 800b0ae:	0fdb      	lsrs	r3, r3, #31
 800b0b0:	f003 0301 	and.w	r3, r3, #1
 800b0b4:	b2db      	uxtb	r3, r3
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d009      	beq.n	800b0ce <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	681a      	ldr	r2, [r3, #0]
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	4413      	add	r3, r2
 800b0c2:	687a      	ldr	r2, [r7, #4]
 800b0c4:	4907      	ldr	r1, [pc, #28]	; (800b0e4 <lwip_cyclic_timer+0x60>)
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f7ff ff6e 	bl	800afa8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800b0cc:	e004      	b.n	800b0d8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800b0ce:	687a      	ldr	r2, [r7, #4]
 800b0d0:	4904      	ldr	r1, [pc, #16]	; (800b0e4 <lwip_cyclic_timer+0x60>)
 800b0d2:	68f8      	ldr	r0, [r7, #12]
 800b0d4:	f7ff ff68 	bl	800afa8 <sys_timeout_abs>
}
 800b0d8:	bf00      	nop
 800b0da:	3718      	adds	r7, #24
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}
 800b0e0:	20000108 	.word	0x20000108
 800b0e4:	0800b085 	.word	0x0800b085

0800b0e8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b082      	sub	sp, #8
 800b0ec:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	607b      	str	r3, [r7, #4]
 800b0f2:	e00e      	b.n	800b112 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800b0f4:	4a0b      	ldr	r2, [pc, #44]	; (800b124 <sys_timeouts_init+0x3c>)
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	00db      	lsls	r3, r3, #3
 800b100:	4a08      	ldr	r2, [pc, #32]	; (800b124 <sys_timeouts_init+0x3c>)
 800b102:	4413      	add	r3, r2
 800b104:	461a      	mov	r2, r3
 800b106:	4908      	ldr	r1, [pc, #32]	; (800b128 <sys_timeouts_init+0x40>)
 800b108:	f000 f810 	bl	800b12c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	3301      	adds	r3, #1
 800b110:	607b      	str	r3, [r7, #4]
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2b02      	cmp	r3, #2
 800b116:	d9ed      	bls.n	800b0f4 <sys_timeouts_init+0xc>
  }
}
 800b118:	bf00      	nop
 800b11a:	bf00      	nop
 800b11c:	3708      	adds	r7, #8
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}
 800b122:	bf00      	nop
 800b124:	080120f0 	.word	0x080120f0
 800b128:	0800b085 	.word	0x0800b085

0800b12c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b086      	sub	sp, #24
 800b130:	af00      	add	r7, sp, #0
 800b132:	60f8      	str	r0, [r7, #12]
 800b134:	60b9      	str	r1, [r7, #8]
 800b136:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b13e:	d306      	bcc.n	800b14e <sys_timeout+0x22>
 800b140:	4b0a      	ldr	r3, [pc, #40]	; (800b16c <sys_timeout+0x40>)
 800b142:	f240 1229 	movw	r2, #297	; 0x129
 800b146:	490a      	ldr	r1, [pc, #40]	; (800b170 <sys_timeout+0x44>)
 800b148:	480a      	ldr	r0, [pc, #40]	; (800b174 <sys_timeout+0x48>)
 800b14a:	f003 f883 	bl	800e254 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800b14e:	f7f8 ff41 	bl	8003fd4 <sys_now>
 800b152:	4602      	mov	r2, r0
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	4413      	add	r3, r2
 800b158:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800b15a:	687a      	ldr	r2, [r7, #4]
 800b15c:	68b9      	ldr	r1, [r7, #8]
 800b15e:	6978      	ldr	r0, [r7, #20]
 800b160:	f7ff ff22 	bl	800afa8 <sys_timeout_abs>
#endif
}
 800b164:	bf00      	nop
 800b166:	3718      	adds	r7, #24
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}
 800b16c:	08011518 	.word	0x08011518
 800b170:	080115b4 	.word	0x080115b4
 800b174:	0801158c 	.word	0x0801158c

0800b178 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b084      	sub	sp, #16
 800b17c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800b17e:	f7f8 ff29 	bl	8003fd4 <sys_now>
 800b182:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800b184:	4b1a      	ldr	r3, [pc, #104]	; (800b1f0 <sys_check_timeouts+0x78>)
 800b186:	781b      	ldrb	r3, [r3, #0]
 800b188:	b2db      	uxtb	r3, r3
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d001      	beq.n	800b192 <sys_check_timeouts+0x1a>
 800b18e:	f7f9 ff29 	bl	8004fe4 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800b192:	4b18      	ldr	r3, [pc, #96]	; (800b1f4 <sys_check_timeouts+0x7c>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d022      	beq.n	800b1e4 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	68fa      	ldr	r2, [r7, #12]
 800b1a4:	1ad3      	subs	r3, r2, r3
 800b1a6:	0fdb      	lsrs	r3, r3, #31
 800b1a8:	f003 0301 	and.w	r3, r3, #1
 800b1ac:	b2db      	uxtb	r3, r3
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d11a      	bne.n	800b1e8 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	4a0f      	ldr	r2, [pc, #60]	; (800b1f4 <sys_check_timeouts+0x7c>)
 800b1b8:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	689b      	ldr	r3, [r3, #8]
 800b1be:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	68db      	ldr	r3, [r3, #12]
 800b1c4:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	685b      	ldr	r3, [r3, #4]
 800b1ca:	4a0b      	ldr	r2, [pc, #44]	; (800b1f8 <sys_check_timeouts+0x80>)
 800b1cc:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800b1ce:	68b9      	ldr	r1, [r7, #8]
 800b1d0:	2006      	movs	r0, #6
 800b1d2:	f7f9 fc2f 	bl	8004a34 <memp_free>
    if (handler != NULL) {
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d0d3      	beq.n	800b184 <sys_check_timeouts+0xc>
      handler(arg);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6838      	ldr	r0, [r7, #0]
 800b1e0:	4798      	blx	r3
  do {
 800b1e2:	e7cf      	b.n	800b184 <sys_check_timeouts+0xc>
      return;
 800b1e4:	bf00      	nop
 800b1e6:	e000      	b.n	800b1ea <sys_check_timeouts+0x72>
      return;
 800b1e8:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800b1ea:	3710      	adds	r7, #16
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}
 800b1f0:	20008af8 	.word	0x20008af8
 800b1f4:	20000104 	.word	0x20000104
 800b1f8:	20000108 	.word	0x20000108

0800b1fc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b200:	f003 f840 	bl	800e284 <rand>
 800b204:	4603      	mov	r3, r0
 800b206:	b29b      	uxth	r3, r3
 800b208:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b20c:	b29b      	uxth	r3, r3
 800b20e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800b212:	b29a      	uxth	r2, r3
 800b214:	4b01      	ldr	r3, [pc, #4]	; (800b21c <udp_init+0x20>)
 800b216:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b218:	bf00      	nop
 800b21a:	bd80      	pop	{r7, pc}
 800b21c:	20000010 	.word	0x20000010

0800b220 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800b220:	b480      	push	{r7}
 800b222:	b083      	sub	sp, #12
 800b224:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800b226:	2300      	movs	r3, #0
 800b228:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800b22a:	4b17      	ldr	r3, [pc, #92]	; (800b288 <udp_new_port+0x68>)
 800b22c:	881b      	ldrh	r3, [r3, #0]
 800b22e:	1c5a      	adds	r2, r3, #1
 800b230:	b291      	uxth	r1, r2
 800b232:	4a15      	ldr	r2, [pc, #84]	; (800b288 <udp_new_port+0x68>)
 800b234:	8011      	strh	r1, [r2, #0]
 800b236:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b23a:	4293      	cmp	r3, r2
 800b23c:	d103      	bne.n	800b246 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800b23e:	4b12      	ldr	r3, [pc, #72]	; (800b288 <udp_new_port+0x68>)
 800b240:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800b244:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b246:	4b11      	ldr	r3, [pc, #68]	; (800b28c <udp_new_port+0x6c>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	603b      	str	r3, [r7, #0]
 800b24c:	e011      	b.n	800b272 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	8a5a      	ldrh	r2, [r3, #18]
 800b252:	4b0d      	ldr	r3, [pc, #52]	; (800b288 <udp_new_port+0x68>)
 800b254:	881b      	ldrh	r3, [r3, #0]
 800b256:	429a      	cmp	r2, r3
 800b258:	d108      	bne.n	800b26c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800b25a:	88fb      	ldrh	r3, [r7, #6]
 800b25c:	3301      	adds	r3, #1
 800b25e:	80fb      	strh	r3, [r7, #6]
 800b260:	88fb      	ldrh	r3, [r7, #6]
 800b262:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b266:	d3e0      	bcc.n	800b22a <udp_new_port+0xa>
        return 0;
 800b268:	2300      	movs	r3, #0
 800b26a:	e007      	b.n	800b27c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	68db      	ldr	r3, [r3, #12]
 800b270:	603b      	str	r3, [r7, #0]
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d1ea      	bne.n	800b24e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800b278:	4b03      	ldr	r3, [pc, #12]	; (800b288 <udp_new_port+0x68>)
 800b27a:	881b      	ldrh	r3, [r3, #0]
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	370c      	adds	r7, #12
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr
 800b288:	20000010 	.word	0x20000010
 800b28c:	20008b18 	.word	0x20008b18

0800b290 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	af00      	add	r7, sp, #0
 800b296:	60f8      	str	r0, [r7, #12]
 800b298:	60b9      	str	r1, [r7, #8]
 800b29a:	4613      	mov	r3, r2
 800b29c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d105      	bne.n	800b2b0 <udp_input_local_match+0x20>
 800b2a4:	4b27      	ldr	r3, [pc, #156]	; (800b344 <udp_input_local_match+0xb4>)
 800b2a6:	2287      	movs	r2, #135	; 0x87
 800b2a8:	4927      	ldr	r1, [pc, #156]	; (800b348 <udp_input_local_match+0xb8>)
 800b2aa:	4828      	ldr	r0, [pc, #160]	; (800b34c <udp_input_local_match+0xbc>)
 800b2ac:	f002 ffd2 	bl	800e254 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d105      	bne.n	800b2c2 <udp_input_local_match+0x32>
 800b2b6:	4b23      	ldr	r3, [pc, #140]	; (800b344 <udp_input_local_match+0xb4>)
 800b2b8:	2288      	movs	r2, #136	; 0x88
 800b2ba:	4925      	ldr	r1, [pc, #148]	; (800b350 <udp_input_local_match+0xc0>)
 800b2bc:	4823      	ldr	r0, [pc, #140]	; (800b34c <udp_input_local_match+0xbc>)
 800b2be:	f002 ffc9 	bl	800e254 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	7a1b      	ldrb	r3, [r3, #8]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d00b      	beq.n	800b2e2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	7a1a      	ldrb	r2, [r3, #8]
 800b2ce:	4b21      	ldr	r3, [pc, #132]	; (800b354 <udp_input_local_match+0xc4>)
 800b2d0:	685b      	ldr	r3, [r3, #4]
 800b2d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b2d6:	3301      	adds	r3, #1
 800b2d8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d001      	beq.n	800b2e2 <udp_input_local_match+0x52>
    return 0;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	e02b      	b.n	800b33a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800b2e2:	79fb      	ldrb	r3, [r7, #7]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d018      	beq.n	800b31a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d013      	beq.n	800b316 <udp_input_local_match+0x86>
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d00f      	beq.n	800b316 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b2f6:	4b17      	ldr	r3, [pc, #92]	; (800b354 <udp_input_local_match+0xc4>)
 800b2f8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b2fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b2fe:	d00a      	beq.n	800b316 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681a      	ldr	r2, [r3, #0]
 800b304:	4b13      	ldr	r3, [pc, #76]	; (800b354 <udp_input_local_match+0xc4>)
 800b306:	695b      	ldr	r3, [r3, #20]
 800b308:	405a      	eors	r2, r3
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	3308      	adds	r3, #8
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b312:	2b00      	cmp	r3, #0
 800b314:	d110      	bne.n	800b338 <udp_input_local_match+0xa8>
          return 1;
 800b316:	2301      	movs	r3, #1
 800b318:	e00f      	b.n	800b33a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d009      	beq.n	800b334 <udp_input_local_match+0xa4>
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d005      	beq.n	800b334 <udp_input_local_match+0xa4>
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	681a      	ldr	r2, [r3, #0]
 800b32c:	4b09      	ldr	r3, [pc, #36]	; (800b354 <udp_input_local_match+0xc4>)
 800b32e:	695b      	ldr	r3, [r3, #20]
 800b330:	429a      	cmp	r2, r3
 800b332:	d101      	bne.n	800b338 <udp_input_local_match+0xa8>
        return 1;
 800b334:	2301      	movs	r3, #1
 800b336:	e000      	b.n	800b33a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800b338:	2300      	movs	r3, #0
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3710      	adds	r7, #16
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}
 800b342:	bf00      	nop
 800b344:	08011600 	.word	0x08011600
 800b348:	08011630 	.word	0x08011630
 800b34c:	08011654 	.word	0x08011654
 800b350:	0801167c 	.word	0x0801167c
 800b354:	200033fc 	.word	0x200033fc

0800b358 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800b358:	b590      	push	{r4, r7, lr}
 800b35a:	b08d      	sub	sp, #52	; 0x34
 800b35c:	af02      	add	r7, sp, #8
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800b362:	2300      	movs	r3, #0
 800b364:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d105      	bne.n	800b378 <udp_input+0x20>
 800b36c:	4b7c      	ldr	r3, [pc, #496]	; (800b560 <udp_input+0x208>)
 800b36e:	22cf      	movs	r2, #207	; 0xcf
 800b370:	497c      	ldr	r1, [pc, #496]	; (800b564 <udp_input+0x20c>)
 800b372:	487d      	ldr	r0, [pc, #500]	; (800b568 <udp_input+0x210>)
 800b374:	f002 ff6e 	bl	800e254 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d105      	bne.n	800b38a <udp_input+0x32>
 800b37e:	4b78      	ldr	r3, [pc, #480]	; (800b560 <udp_input+0x208>)
 800b380:	22d0      	movs	r2, #208	; 0xd0
 800b382:	497a      	ldr	r1, [pc, #488]	; (800b56c <udp_input+0x214>)
 800b384:	4878      	ldr	r0, [pc, #480]	; (800b568 <udp_input+0x210>)
 800b386:	f002 ff65 	bl	800e254 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	895b      	ldrh	r3, [r3, #10]
 800b38e:	2b07      	cmp	r3, #7
 800b390:	d803      	bhi.n	800b39a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f7fa f960 	bl	8005658 <pbuf_free>
    goto end;
 800b398:	e0de      	b.n	800b558 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	685b      	ldr	r3, [r3, #4]
 800b39e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800b3a0:	4b73      	ldr	r3, [pc, #460]	; (800b570 <udp_input+0x218>)
 800b3a2:	695b      	ldr	r3, [r3, #20]
 800b3a4:	4a72      	ldr	r2, [pc, #456]	; (800b570 <udp_input+0x218>)
 800b3a6:	6812      	ldr	r2, [r2, #0]
 800b3a8:	4611      	mov	r1, r2
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f001 ffa0 	bl	800d2f0 <ip4_addr_isbroadcast_u32>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800b3b4:	697b      	ldr	r3, [r7, #20]
 800b3b6:	881b      	ldrh	r3, [r3, #0]
 800b3b8:	b29b      	uxth	r3, r3
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f7f8 fe98 	bl	80040f0 <lwip_htons>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	885b      	ldrh	r3, [r3, #2]
 800b3c8:	b29b      	uxth	r3, r3
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f7f8 fe90 	bl	80040f0 <lwip_htons>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b3e0:	4b64      	ldr	r3, [pc, #400]	; (800b574 <udp_input+0x21c>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	627b      	str	r3, [r7, #36]	; 0x24
 800b3e6:	e054      	b.n	800b492 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800b3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ea:	8a5b      	ldrh	r3, [r3, #18]
 800b3ec:	89fa      	ldrh	r2, [r7, #14]
 800b3ee:	429a      	cmp	r2, r3
 800b3f0:	d14a      	bne.n	800b488 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800b3f2:	7cfb      	ldrb	r3, [r7, #19]
 800b3f4:	461a      	mov	r2, r3
 800b3f6:	6839      	ldr	r1, [r7, #0]
 800b3f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b3fa:	f7ff ff49 	bl	800b290 <udp_input_local_match>
 800b3fe:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800b400:	2b00      	cmp	r3, #0
 800b402:	d041      	beq.n	800b488 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800b404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b406:	7c1b      	ldrb	r3, [r3, #16]
 800b408:	f003 0304 	and.w	r3, r3, #4
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d11d      	bne.n	800b44c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800b410:	69fb      	ldr	r3, [r7, #28]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d102      	bne.n	800b41c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800b416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b418:	61fb      	str	r3, [r7, #28]
 800b41a:	e017      	b.n	800b44c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800b41c:	7cfb      	ldrb	r3, [r7, #19]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d014      	beq.n	800b44c <udp_input+0xf4>
 800b422:	4b53      	ldr	r3, [pc, #332]	; (800b570 <udp_input+0x218>)
 800b424:	695b      	ldr	r3, [r3, #20]
 800b426:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b42a:	d10f      	bne.n	800b44c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800b42c:	69fb      	ldr	r3, [r7, #28]
 800b42e:	681a      	ldr	r2, [r3, #0]
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	3304      	adds	r3, #4
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	429a      	cmp	r2, r3
 800b438:	d008      	beq.n	800b44c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800b43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b43c:	681a      	ldr	r2, [r3, #0]
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	3304      	adds	r3, #4
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	429a      	cmp	r2, r3
 800b446:	d101      	bne.n	800b44c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800b448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b44a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800b44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b44e:	8a9b      	ldrh	r3, [r3, #20]
 800b450:	8a3a      	ldrh	r2, [r7, #16]
 800b452:	429a      	cmp	r2, r3
 800b454:	d118      	bne.n	800b488 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b458:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d005      	beq.n	800b46a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800b45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b460:	685a      	ldr	r2, [r3, #4]
 800b462:	4b43      	ldr	r3, [pc, #268]	; (800b570 <udp_input+0x218>)
 800b464:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b466:	429a      	cmp	r2, r3
 800b468:	d10e      	bne.n	800b488 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800b46a:	6a3b      	ldr	r3, [r7, #32]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d014      	beq.n	800b49a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800b470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b472:	68da      	ldr	r2, [r3, #12]
 800b474:	6a3b      	ldr	r3, [r7, #32]
 800b476:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800b478:	4b3e      	ldr	r3, [pc, #248]	; (800b574 <udp_input+0x21c>)
 800b47a:	681a      	ldr	r2, [r3, #0]
 800b47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b47e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800b480:	4a3c      	ldr	r2, [pc, #240]	; (800b574 <udp_input+0x21c>)
 800b482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b484:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800b486:	e008      	b.n	800b49a <udp_input+0x142>
      }
    }

    prev = pcb;
 800b488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b48a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b48e:	68db      	ldr	r3, [r3, #12]
 800b490:	627b      	str	r3, [r7, #36]	; 0x24
 800b492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b494:	2b00      	cmp	r3, #0
 800b496:	d1a7      	bne.n	800b3e8 <udp_input+0x90>
 800b498:	e000      	b.n	800b49c <udp_input+0x144>
        break;
 800b49a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800b49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d101      	bne.n	800b4a6 <udp_input+0x14e>
    pcb = uncon_pcb;
 800b4a2:	69fb      	ldr	r3, [r7, #28]
 800b4a4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800b4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d002      	beq.n	800b4b2 <udp_input+0x15a>
    for_us = 1;
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	76fb      	strb	r3, [r7, #27]
 800b4b0:	e00a      	b.n	800b4c8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	3304      	adds	r3, #4
 800b4b6:	681a      	ldr	r2, [r3, #0]
 800b4b8:	4b2d      	ldr	r3, [pc, #180]	; (800b570 <udp_input+0x218>)
 800b4ba:	695b      	ldr	r3, [r3, #20]
 800b4bc:	429a      	cmp	r2, r3
 800b4be:	bf0c      	ite	eq
 800b4c0:	2301      	moveq	r3, #1
 800b4c2:	2300      	movne	r3, #0
 800b4c4:	b2db      	uxtb	r3, r3
 800b4c6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800b4c8:	7efb      	ldrb	r3, [r7, #27]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d041      	beq.n	800b552 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800b4ce:	2108      	movs	r1, #8
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	f7fa f83b 	bl	800554c <pbuf_remove_header>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d00a      	beq.n	800b4f2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800b4dc:	4b20      	ldr	r3, [pc, #128]	; (800b560 <udp_input+0x208>)
 800b4de:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800b4e2:	4925      	ldr	r1, [pc, #148]	; (800b578 <udp_input+0x220>)
 800b4e4:	4820      	ldr	r0, [pc, #128]	; (800b568 <udp_input+0x210>)
 800b4e6:	f002 feb5 	bl	800e254 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f7fa f8b4 	bl	8005658 <pbuf_free>
      goto end;
 800b4f0:	e032      	b.n	800b558 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800b4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d012      	beq.n	800b51e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800b4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4fa:	699b      	ldr	r3, [r3, #24]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d00a      	beq.n	800b516 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800b500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b502:	699c      	ldr	r4, [r3, #24]
 800b504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b506:	69d8      	ldr	r0, [r3, #28]
 800b508:	8a3b      	ldrh	r3, [r7, #16]
 800b50a:	9300      	str	r3, [sp, #0]
 800b50c:	4b1b      	ldr	r3, [pc, #108]	; (800b57c <udp_input+0x224>)
 800b50e:	687a      	ldr	r2, [r7, #4]
 800b510:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b512:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800b514:	e021      	b.n	800b55a <udp_input+0x202>
        pbuf_free(p);
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f7fa f89e 	bl	8005658 <pbuf_free>
        goto end;
 800b51c:	e01c      	b.n	800b558 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800b51e:	7cfb      	ldrb	r3, [r7, #19]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d112      	bne.n	800b54a <udp_input+0x1f2>
 800b524:	4b12      	ldr	r3, [pc, #72]	; (800b570 <udp_input+0x218>)
 800b526:	695b      	ldr	r3, [r3, #20]
 800b528:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b52c:	2be0      	cmp	r3, #224	; 0xe0
 800b52e:	d00c      	beq.n	800b54a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800b530:	4b0f      	ldr	r3, [pc, #60]	; (800b570 <udp_input+0x218>)
 800b532:	899b      	ldrh	r3, [r3, #12]
 800b534:	3308      	adds	r3, #8
 800b536:	b29b      	uxth	r3, r3
 800b538:	b21b      	sxth	r3, r3
 800b53a:	4619      	mov	r1, r3
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f7fa f878 	bl	8005632 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800b542:	2103      	movs	r1, #3
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f001 fbb3 	bl	800ccb0 <icmp_dest_unreach>
      pbuf_free(p);
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f7fa f884 	bl	8005658 <pbuf_free>
  return;
 800b550:	e003      	b.n	800b55a <udp_input+0x202>
    pbuf_free(p);
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f7fa f880 	bl	8005658 <pbuf_free>
  return;
 800b558:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800b55a:	372c      	adds	r7, #44	; 0x2c
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd90      	pop	{r4, r7, pc}
 800b560:	08011600 	.word	0x08011600
 800b564:	080116a4 	.word	0x080116a4
 800b568:	08011654 	.word	0x08011654
 800b56c:	080116bc 	.word	0x080116bc
 800b570:	200033fc 	.word	0x200033fc
 800b574:	20008b18 	.word	0x20008b18
 800b578:	080116d8 	.word	0x080116d8
 800b57c:	2000340c 	.word	0x2000340c

0800b580 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b082      	sub	sp, #8
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
 800b588:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d109      	bne.n	800b5a4 <udp_send+0x24>
 800b590:	4b11      	ldr	r3, [pc, #68]	; (800b5d8 <udp_send+0x58>)
 800b592:	f240 12d5 	movw	r2, #469	; 0x1d5
 800b596:	4911      	ldr	r1, [pc, #68]	; (800b5dc <udp_send+0x5c>)
 800b598:	4811      	ldr	r0, [pc, #68]	; (800b5e0 <udp_send+0x60>)
 800b59a:	f002 fe5b 	bl	800e254 <iprintf>
 800b59e:	f06f 030f 	mvn.w	r3, #15
 800b5a2:	e015      	b.n	800b5d0 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d109      	bne.n	800b5be <udp_send+0x3e>
 800b5aa:	4b0b      	ldr	r3, [pc, #44]	; (800b5d8 <udp_send+0x58>)
 800b5ac:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800b5b0:	490c      	ldr	r1, [pc, #48]	; (800b5e4 <udp_send+0x64>)
 800b5b2:	480b      	ldr	r0, [pc, #44]	; (800b5e0 <udp_send+0x60>)
 800b5b4:	f002 fe4e 	bl	800e254 <iprintf>
 800b5b8:	f06f 030f 	mvn.w	r3, #15
 800b5bc:	e008      	b.n	800b5d0 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	1d1a      	adds	r2, r3, #4
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	8a9b      	ldrh	r3, [r3, #20]
 800b5c6:	6839      	ldr	r1, [r7, #0]
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f000 f80d 	bl	800b5e8 <udp_sendto>
 800b5ce:	4603      	mov	r3, r0
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	3708      	adds	r7, #8
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}
 800b5d8:	08011600 	.word	0x08011600
 800b5dc:	080116f4 	.word	0x080116f4
 800b5e0:	08011654 	.word	0x08011654
 800b5e4:	0801170c 	.word	0x0801170c

0800b5e8 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b088      	sub	sp, #32
 800b5ec:	af02      	add	r7, sp, #8
 800b5ee:	60f8      	str	r0, [r7, #12]
 800b5f0:	60b9      	str	r1, [r7, #8]
 800b5f2:	607a      	str	r2, [r7, #4]
 800b5f4:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d109      	bne.n	800b610 <udp_sendto+0x28>
 800b5fc:	4b23      	ldr	r3, [pc, #140]	; (800b68c <udp_sendto+0xa4>)
 800b5fe:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b602:	4923      	ldr	r1, [pc, #140]	; (800b690 <udp_sendto+0xa8>)
 800b604:	4823      	ldr	r0, [pc, #140]	; (800b694 <udp_sendto+0xac>)
 800b606:	f002 fe25 	bl	800e254 <iprintf>
 800b60a:	f06f 030f 	mvn.w	r3, #15
 800b60e:	e038      	b.n	800b682 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d109      	bne.n	800b62a <udp_sendto+0x42>
 800b616:	4b1d      	ldr	r3, [pc, #116]	; (800b68c <udp_sendto+0xa4>)
 800b618:	f240 2219 	movw	r2, #537	; 0x219
 800b61c:	491e      	ldr	r1, [pc, #120]	; (800b698 <udp_sendto+0xb0>)
 800b61e:	481d      	ldr	r0, [pc, #116]	; (800b694 <udp_sendto+0xac>)
 800b620:	f002 fe18 	bl	800e254 <iprintf>
 800b624:	f06f 030f 	mvn.w	r3, #15
 800b628:	e02b      	b.n	800b682 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d109      	bne.n	800b644 <udp_sendto+0x5c>
 800b630:	4b16      	ldr	r3, [pc, #88]	; (800b68c <udp_sendto+0xa4>)
 800b632:	f240 221a 	movw	r2, #538	; 0x21a
 800b636:	4919      	ldr	r1, [pc, #100]	; (800b69c <udp_sendto+0xb4>)
 800b638:	4816      	ldr	r0, [pc, #88]	; (800b694 <udp_sendto+0xac>)
 800b63a:	f002 fe0b 	bl	800e254 <iprintf>
 800b63e:	f06f 030f 	mvn.w	r3, #15
 800b642:	e01e      	b.n	800b682 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	7a1b      	ldrb	r3, [r3, #8]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d006      	beq.n	800b65a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	7a1b      	ldrb	r3, [r3, #8]
 800b650:	4618      	mov	r0, r3
 800b652:	f7f9 fca1 	bl	8004f98 <netif_get_by_index>
 800b656:	6178      	str	r0, [r7, #20]
 800b658:	e003      	b.n	800b662 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f001 fbb2 	bl	800cdc4 <ip4_route>
 800b660:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d102      	bne.n	800b66e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800b668:	f06f 0303 	mvn.w	r3, #3
 800b66c:	e009      	b.n	800b682 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800b66e:	887a      	ldrh	r2, [r7, #2]
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	9300      	str	r3, [sp, #0]
 800b674:	4613      	mov	r3, r2
 800b676:	687a      	ldr	r2, [r7, #4]
 800b678:	68b9      	ldr	r1, [r7, #8]
 800b67a:	68f8      	ldr	r0, [r7, #12]
 800b67c:	f000 f810 	bl	800b6a0 <udp_sendto_if>
 800b680:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800b682:	4618      	mov	r0, r3
 800b684:	3718      	adds	r7, #24
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}
 800b68a:	bf00      	nop
 800b68c:	08011600 	.word	0x08011600
 800b690:	08011724 	.word	0x08011724
 800b694:	08011654 	.word	0x08011654
 800b698:	0801173c 	.word	0x0801173c
 800b69c:	08011758 	.word	0x08011758

0800b6a0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b088      	sub	sp, #32
 800b6a4:	af02      	add	r7, sp, #8
 800b6a6:	60f8      	str	r0, [r7, #12]
 800b6a8:	60b9      	str	r1, [r7, #8]
 800b6aa:	607a      	str	r2, [r7, #4]
 800b6ac:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d109      	bne.n	800b6c8 <udp_sendto_if+0x28>
 800b6b4:	4b2e      	ldr	r3, [pc, #184]	; (800b770 <udp_sendto_if+0xd0>)
 800b6b6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b6ba:	492e      	ldr	r1, [pc, #184]	; (800b774 <udp_sendto_if+0xd4>)
 800b6bc:	482e      	ldr	r0, [pc, #184]	; (800b778 <udp_sendto_if+0xd8>)
 800b6be:	f002 fdc9 	bl	800e254 <iprintf>
 800b6c2:	f06f 030f 	mvn.w	r3, #15
 800b6c6:	e04f      	b.n	800b768 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d109      	bne.n	800b6e2 <udp_sendto_if+0x42>
 800b6ce:	4b28      	ldr	r3, [pc, #160]	; (800b770 <udp_sendto_if+0xd0>)
 800b6d0:	f240 2281 	movw	r2, #641	; 0x281
 800b6d4:	4929      	ldr	r1, [pc, #164]	; (800b77c <udp_sendto_if+0xdc>)
 800b6d6:	4828      	ldr	r0, [pc, #160]	; (800b778 <udp_sendto_if+0xd8>)
 800b6d8:	f002 fdbc 	bl	800e254 <iprintf>
 800b6dc:	f06f 030f 	mvn.w	r3, #15
 800b6e0:	e042      	b.n	800b768 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d109      	bne.n	800b6fc <udp_sendto_if+0x5c>
 800b6e8:	4b21      	ldr	r3, [pc, #132]	; (800b770 <udp_sendto_if+0xd0>)
 800b6ea:	f240 2282 	movw	r2, #642	; 0x282
 800b6ee:	4924      	ldr	r1, [pc, #144]	; (800b780 <udp_sendto_if+0xe0>)
 800b6f0:	4821      	ldr	r0, [pc, #132]	; (800b778 <udp_sendto_if+0xd8>)
 800b6f2:	f002 fdaf 	bl	800e254 <iprintf>
 800b6f6:	f06f 030f 	mvn.w	r3, #15
 800b6fa:	e035      	b.n	800b768 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800b6fc:	6a3b      	ldr	r3, [r7, #32]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d109      	bne.n	800b716 <udp_sendto_if+0x76>
 800b702:	4b1b      	ldr	r3, [pc, #108]	; (800b770 <udp_sendto_if+0xd0>)
 800b704:	f240 2283 	movw	r2, #643	; 0x283
 800b708:	491e      	ldr	r1, [pc, #120]	; (800b784 <udp_sendto_if+0xe4>)
 800b70a:	481b      	ldr	r0, [pc, #108]	; (800b778 <udp_sendto_if+0xd8>)
 800b70c:	f002 fda2 	bl	800e254 <iprintf>
 800b710:	f06f 030f 	mvn.w	r3, #15
 800b714:	e028      	b.n	800b768 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d009      	beq.n	800b730 <udp_sendto_if+0x90>
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d005      	beq.n	800b730 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b72c:	2be0      	cmp	r3, #224	; 0xe0
 800b72e:	d103      	bne.n	800b738 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800b730:	6a3b      	ldr	r3, [r7, #32]
 800b732:	3304      	adds	r3, #4
 800b734:	617b      	str	r3, [r7, #20]
 800b736:	e00b      	b.n	800b750 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681a      	ldr	r2, [r3, #0]
 800b73c:	6a3b      	ldr	r3, [r7, #32]
 800b73e:	3304      	adds	r3, #4
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	429a      	cmp	r2, r3
 800b744:	d002      	beq.n	800b74c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800b746:	f06f 0303 	mvn.w	r3, #3
 800b74a:	e00d      	b.n	800b768 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800b750:	887a      	ldrh	r2, [r7, #2]
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	9301      	str	r3, [sp, #4]
 800b756:	6a3b      	ldr	r3, [r7, #32]
 800b758:	9300      	str	r3, [sp, #0]
 800b75a:	4613      	mov	r3, r2
 800b75c:	687a      	ldr	r2, [r7, #4]
 800b75e:	68b9      	ldr	r1, [r7, #8]
 800b760:	68f8      	ldr	r0, [r7, #12]
 800b762:	f000 f811 	bl	800b788 <udp_sendto_if_src>
 800b766:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3718      	adds	r7, #24
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}
 800b770:	08011600 	.word	0x08011600
 800b774:	08011774 	.word	0x08011774
 800b778:	08011654 	.word	0x08011654
 800b77c:	08011790 	.word	0x08011790
 800b780:	080117ac 	.word	0x080117ac
 800b784:	080117cc 	.word	0x080117cc

0800b788 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b08c      	sub	sp, #48	; 0x30
 800b78c:	af04      	add	r7, sp, #16
 800b78e:	60f8      	str	r0, [r7, #12]
 800b790:	60b9      	str	r1, [r7, #8]
 800b792:	607a      	str	r2, [r7, #4]
 800b794:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d109      	bne.n	800b7b0 <udp_sendto_if_src+0x28>
 800b79c:	4b65      	ldr	r3, [pc, #404]	; (800b934 <udp_sendto_if_src+0x1ac>)
 800b79e:	f240 22d1 	movw	r2, #721	; 0x2d1
 800b7a2:	4965      	ldr	r1, [pc, #404]	; (800b938 <udp_sendto_if_src+0x1b0>)
 800b7a4:	4865      	ldr	r0, [pc, #404]	; (800b93c <udp_sendto_if_src+0x1b4>)
 800b7a6:	f002 fd55 	bl	800e254 <iprintf>
 800b7aa:	f06f 030f 	mvn.w	r3, #15
 800b7ae:	e0bc      	b.n	800b92a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d109      	bne.n	800b7ca <udp_sendto_if_src+0x42>
 800b7b6:	4b5f      	ldr	r3, [pc, #380]	; (800b934 <udp_sendto_if_src+0x1ac>)
 800b7b8:	f240 22d2 	movw	r2, #722	; 0x2d2
 800b7bc:	4960      	ldr	r1, [pc, #384]	; (800b940 <udp_sendto_if_src+0x1b8>)
 800b7be:	485f      	ldr	r0, [pc, #380]	; (800b93c <udp_sendto_if_src+0x1b4>)
 800b7c0:	f002 fd48 	bl	800e254 <iprintf>
 800b7c4:	f06f 030f 	mvn.w	r3, #15
 800b7c8:	e0af      	b.n	800b92a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d109      	bne.n	800b7e4 <udp_sendto_if_src+0x5c>
 800b7d0:	4b58      	ldr	r3, [pc, #352]	; (800b934 <udp_sendto_if_src+0x1ac>)
 800b7d2:	f240 22d3 	movw	r2, #723	; 0x2d3
 800b7d6:	495b      	ldr	r1, [pc, #364]	; (800b944 <udp_sendto_if_src+0x1bc>)
 800b7d8:	4858      	ldr	r0, [pc, #352]	; (800b93c <udp_sendto_if_src+0x1b4>)
 800b7da:	f002 fd3b 	bl	800e254 <iprintf>
 800b7de:	f06f 030f 	mvn.w	r3, #15
 800b7e2:	e0a2      	b.n	800b92a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800b7e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d109      	bne.n	800b7fe <udp_sendto_if_src+0x76>
 800b7ea:	4b52      	ldr	r3, [pc, #328]	; (800b934 <udp_sendto_if_src+0x1ac>)
 800b7ec:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800b7f0:	4955      	ldr	r1, [pc, #340]	; (800b948 <udp_sendto_if_src+0x1c0>)
 800b7f2:	4852      	ldr	r0, [pc, #328]	; (800b93c <udp_sendto_if_src+0x1b4>)
 800b7f4:	f002 fd2e 	bl	800e254 <iprintf>
 800b7f8:	f06f 030f 	mvn.w	r3, #15
 800b7fc:	e095      	b.n	800b92a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800b7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b800:	2b00      	cmp	r3, #0
 800b802:	d109      	bne.n	800b818 <udp_sendto_if_src+0x90>
 800b804:	4b4b      	ldr	r3, [pc, #300]	; (800b934 <udp_sendto_if_src+0x1ac>)
 800b806:	f240 22d5 	movw	r2, #725	; 0x2d5
 800b80a:	4950      	ldr	r1, [pc, #320]	; (800b94c <udp_sendto_if_src+0x1c4>)
 800b80c:	484b      	ldr	r0, [pc, #300]	; (800b93c <udp_sendto_if_src+0x1b4>)
 800b80e:	f002 fd21 	bl	800e254 <iprintf>
 800b812:	f06f 030f 	mvn.w	r3, #15
 800b816:	e088      	b.n	800b92a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	8a5b      	ldrh	r3, [r3, #18]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d10f      	bne.n	800b840 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800b820:	68f9      	ldr	r1, [r7, #12]
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	8a5b      	ldrh	r3, [r3, #18]
 800b826:	461a      	mov	r2, r3
 800b828:	68f8      	ldr	r0, [r7, #12]
 800b82a:	f000 f893 	bl	800b954 <udp_bind>
 800b82e:	4603      	mov	r3, r0
 800b830:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800b832:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d002      	beq.n	800b840 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800b83a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b83e:	e074      	b.n	800b92a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	891b      	ldrh	r3, [r3, #8]
 800b844:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800b848:	4293      	cmp	r3, r2
 800b84a:	d902      	bls.n	800b852 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800b84c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b850:	e06b      	b.n	800b92a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800b852:	2108      	movs	r1, #8
 800b854:	68b8      	ldr	r0, [r7, #8]
 800b856:	f7f9 fe69 	bl	800552c <pbuf_add_header>
 800b85a:	4603      	mov	r3, r0
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d015      	beq.n	800b88c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800b860:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b864:	2108      	movs	r1, #8
 800b866:	2022      	movs	r0, #34	; 0x22
 800b868:	f7f9 fc12 	bl	8005090 <pbuf_alloc>
 800b86c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800b86e:	69fb      	ldr	r3, [r7, #28]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d102      	bne.n	800b87a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800b874:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b878:	e057      	b.n	800b92a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	891b      	ldrh	r3, [r3, #8]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d006      	beq.n	800b890 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800b882:	68b9      	ldr	r1, [r7, #8]
 800b884:	69f8      	ldr	r0, [r7, #28]
 800b886:	f7f9 ffff 	bl	8005888 <pbuf_chain>
 800b88a:	e001      	b.n	800b890 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800b890:	69fb      	ldr	r3, [r7, #28]
 800b892:	895b      	ldrh	r3, [r3, #10]
 800b894:	2b07      	cmp	r3, #7
 800b896:	d806      	bhi.n	800b8a6 <udp_sendto_if_src+0x11e>
 800b898:	4b26      	ldr	r3, [pc, #152]	; (800b934 <udp_sendto_if_src+0x1ac>)
 800b89a:	f240 320d 	movw	r2, #781	; 0x30d
 800b89e:	492c      	ldr	r1, [pc, #176]	; (800b950 <udp_sendto_if_src+0x1c8>)
 800b8a0:	4826      	ldr	r0, [pc, #152]	; (800b93c <udp_sendto_if_src+0x1b4>)
 800b8a2:	f002 fcd7 	bl	800e254 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800b8a6:	69fb      	ldr	r3, [r7, #28]
 800b8a8:	685b      	ldr	r3, [r3, #4]
 800b8aa:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	8a5b      	ldrh	r3, [r3, #18]
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f7f8 fc1d 	bl	80040f0 <lwip_htons>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	461a      	mov	r2, r3
 800b8ba:	697b      	ldr	r3, [r7, #20]
 800b8bc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800b8be:	887b      	ldrh	r3, [r7, #2]
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f7f8 fc15 	bl	80040f0 <lwip_htons>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	461a      	mov	r2, r3
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	719a      	strb	r2, [r3, #6]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800b8d8:	69fb      	ldr	r3, [r7, #28]
 800b8da:	891b      	ldrh	r3, [r3, #8]
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f7f8 fc07 	bl	80040f0 <lwip_htons>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	461a      	mov	r2, r3
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800b8ea:	2311      	movs	r3, #17
 800b8ec:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	7adb      	ldrb	r3, [r3, #11]
 800b8f2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	7a9b      	ldrb	r3, [r3, #10]
 800b8f8:	7cb9      	ldrb	r1, [r7, #18]
 800b8fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8fc:	9202      	str	r2, [sp, #8]
 800b8fe:	7cfa      	ldrb	r2, [r7, #19]
 800b900:	9201      	str	r2, [sp, #4]
 800b902:	9300      	str	r3, [sp, #0]
 800b904:	460b      	mov	r3, r1
 800b906:	687a      	ldr	r2, [r7, #4]
 800b908:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b90a:	69f8      	ldr	r0, [r7, #28]
 800b90c:	f001 fc42 	bl	800d194 <ip4_output_if_src>
 800b910:	4603      	mov	r3, r0
 800b912:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800b914:	69fa      	ldr	r2, [r7, #28]
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	429a      	cmp	r2, r3
 800b91a:	d004      	beq.n	800b926 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800b91c:	69f8      	ldr	r0, [r7, #28]
 800b91e:	f7f9 fe9b 	bl	8005658 <pbuf_free>
    q = NULL;
 800b922:	2300      	movs	r3, #0
 800b924:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800b926:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	3720      	adds	r7, #32
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}
 800b932:	bf00      	nop
 800b934:	08011600 	.word	0x08011600
 800b938:	080117ec 	.word	0x080117ec
 800b93c:	08011654 	.word	0x08011654
 800b940:	0801180c 	.word	0x0801180c
 800b944:	0801182c 	.word	0x0801182c
 800b948:	08011850 	.word	0x08011850
 800b94c:	08011874 	.word	0x08011874
 800b950:	08011898 	.word	0x08011898

0800b954 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b086      	sub	sp, #24
 800b958:	af00      	add	r7, sp, #0
 800b95a:	60f8      	str	r0, [r7, #12]
 800b95c:	60b9      	str	r1, [r7, #8]
 800b95e:	4613      	mov	r3, r2
 800b960:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d101      	bne.n	800b96c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800b968:	4b39      	ldr	r3, [pc, #228]	; (800ba50 <udp_bind+0xfc>)
 800b96a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d109      	bne.n	800b986 <udp_bind+0x32>
 800b972:	4b38      	ldr	r3, [pc, #224]	; (800ba54 <udp_bind+0x100>)
 800b974:	f240 32b7 	movw	r2, #951	; 0x3b7
 800b978:	4937      	ldr	r1, [pc, #220]	; (800ba58 <udp_bind+0x104>)
 800b97a:	4838      	ldr	r0, [pc, #224]	; (800ba5c <udp_bind+0x108>)
 800b97c:	f002 fc6a 	bl	800e254 <iprintf>
 800b980:	f06f 030f 	mvn.w	r3, #15
 800b984:	e060      	b.n	800ba48 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800b986:	2300      	movs	r3, #0
 800b988:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b98a:	4b35      	ldr	r3, [pc, #212]	; (800ba60 <udp_bind+0x10c>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	617b      	str	r3, [r7, #20]
 800b990:	e009      	b.n	800b9a6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800b992:	68fa      	ldr	r2, [r7, #12]
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	429a      	cmp	r2, r3
 800b998:	d102      	bne.n	800b9a0 <udp_bind+0x4c>
      rebind = 1;
 800b99a:	2301      	movs	r3, #1
 800b99c:	74fb      	strb	r3, [r7, #19]
      break;
 800b99e:	e005      	b.n	800b9ac <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	68db      	ldr	r3, [r3, #12]
 800b9a4:	617b      	str	r3, [r7, #20]
 800b9a6:	697b      	ldr	r3, [r7, #20]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d1f2      	bne.n	800b992 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800b9ac:	88fb      	ldrh	r3, [r7, #6]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d109      	bne.n	800b9c6 <udp_bind+0x72>
    port = udp_new_port();
 800b9b2:	f7ff fc35 	bl	800b220 <udp_new_port>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800b9ba:	88fb      	ldrh	r3, [r7, #6]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d12c      	bne.n	800ba1a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800b9c0:	f06f 0307 	mvn.w	r3, #7
 800b9c4:	e040      	b.n	800ba48 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b9c6:	4b26      	ldr	r3, [pc, #152]	; (800ba60 <udp_bind+0x10c>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	617b      	str	r3, [r7, #20]
 800b9cc:	e022      	b.n	800ba14 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800b9ce:	68fa      	ldr	r2, [r7, #12]
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	d01b      	beq.n	800ba0e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	8a5b      	ldrh	r3, [r3, #18]
 800b9da:	88fa      	ldrh	r2, [r7, #6]
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d116      	bne.n	800ba0e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	681a      	ldr	r2, [r3, #0]
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	d00d      	beq.n	800ba08 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d00a      	beq.n	800ba08 <udp_bind+0xb4>
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d006      	beq.n	800ba08 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800b9fa:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d003      	beq.n	800ba08 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800ba00:	697b      	ldr	r3, [r7, #20]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d102      	bne.n	800ba0e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800ba08:	f06f 0307 	mvn.w	r3, #7
 800ba0c:	e01c      	b.n	800ba48 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	68db      	ldr	r3, [r3, #12]
 800ba12:	617b      	str	r3, [r7, #20]
 800ba14:	697b      	ldr	r3, [r7, #20]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d1d9      	bne.n	800b9ce <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d002      	beq.n	800ba26 <udp_bind+0xd2>
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	e000      	b.n	800ba28 <udp_bind+0xd4>
 800ba26:	2300      	movs	r3, #0
 800ba28:	68fa      	ldr	r2, [r7, #12]
 800ba2a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	88fa      	ldrh	r2, [r7, #6]
 800ba30:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800ba32:	7cfb      	ldrb	r3, [r7, #19]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d106      	bne.n	800ba46 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800ba38:	4b09      	ldr	r3, [pc, #36]	; (800ba60 <udp_bind+0x10c>)
 800ba3a:	681a      	ldr	r2, [r3, #0]
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800ba40:	4a07      	ldr	r2, [pc, #28]	; (800ba60 <udp_bind+0x10c>)
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800ba46:	2300      	movs	r3, #0
}
 800ba48:	4618      	mov	r0, r3
 800ba4a:	3718      	adds	r7, #24
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}
 800ba50:	08012108 	.word	0x08012108
 800ba54:	08011600 	.word	0x08011600
 800ba58:	080118c8 	.word	0x080118c8
 800ba5c:	08011654 	.word	0x08011654
 800ba60:	20008b18 	.word	0x20008b18

0800ba64 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b086      	sub	sp, #24
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	60f8      	str	r0, [r7, #12]
 800ba6c:	60b9      	str	r1, [r7, #8]
 800ba6e:	4613      	mov	r3, r2
 800ba70:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d109      	bne.n	800ba8c <udp_connect+0x28>
 800ba78:	4b2c      	ldr	r3, [pc, #176]	; (800bb2c <udp_connect+0xc8>)
 800ba7a:	f240 4235 	movw	r2, #1077	; 0x435
 800ba7e:	492c      	ldr	r1, [pc, #176]	; (800bb30 <udp_connect+0xcc>)
 800ba80:	482c      	ldr	r0, [pc, #176]	; (800bb34 <udp_connect+0xd0>)
 800ba82:	f002 fbe7 	bl	800e254 <iprintf>
 800ba86:	f06f 030f 	mvn.w	r3, #15
 800ba8a:	e04b      	b.n	800bb24 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d109      	bne.n	800baa6 <udp_connect+0x42>
 800ba92:	4b26      	ldr	r3, [pc, #152]	; (800bb2c <udp_connect+0xc8>)
 800ba94:	f240 4236 	movw	r2, #1078	; 0x436
 800ba98:	4927      	ldr	r1, [pc, #156]	; (800bb38 <udp_connect+0xd4>)
 800ba9a:	4826      	ldr	r0, [pc, #152]	; (800bb34 <udp_connect+0xd0>)
 800ba9c:	f002 fbda 	bl	800e254 <iprintf>
 800baa0:	f06f 030f 	mvn.w	r3, #15
 800baa4:	e03e      	b.n	800bb24 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	8a5b      	ldrh	r3, [r3, #18]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d10f      	bne.n	800bace <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800baae:	68f9      	ldr	r1, [r7, #12]
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	8a5b      	ldrh	r3, [r3, #18]
 800bab4:	461a      	mov	r2, r3
 800bab6:	68f8      	ldr	r0, [r7, #12]
 800bab8:	f7ff ff4c 	bl	800b954 <udp_bind>
 800babc:	4603      	mov	r3, r0
 800babe:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800bac0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d002      	beq.n	800bace <udp_connect+0x6a>
      return err;
 800bac8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bacc:	e02a      	b.n	800bb24 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d002      	beq.n	800bada <udp_connect+0x76>
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	e000      	b.n	800badc <udp_connect+0x78>
 800bada:	2300      	movs	r3, #0
 800badc:	68fa      	ldr	r2, [r7, #12]
 800bade:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	88fa      	ldrh	r2, [r7, #6]
 800bae4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	7c1b      	ldrb	r3, [r3, #16]
 800baea:	f043 0304 	orr.w	r3, r3, #4
 800baee:	b2da      	uxtb	r2, r3
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800baf4:	4b11      	ldr	r3, [pc, #68]	; (800bb3c <udp_connect+0xd8>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	617b      	str	r3, [r7, #20]
 800bafa:	e008      	b.n	800bb0e <udp_connect+0xaa>
    if (pcb == ipcb) {
 800bafc:	68fa      	ldr	r2, [r7, #12]
 800bafe:	697b      	ldr	r3, [r7, #20]
 800bb00:	429a      	cmp	r2, r3
 800bb02:	d101      	bne.n	800bb08 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800bb04:	2300      	movs	r3, #0
 800bb06:	e00d      	b.n	800bb24 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800bb08:	697b      	ldr	r3, [r7, #20]
 800bb0a:	68db      	ldr	r3, [r3, #12]
 800bb0c:	617b      	str	r3, [r7, #20]
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d1f3      	bne.n	800bafc <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800bb14:	4b09      	ldr	r3, [pc, #36]	; (800bb3c <udp_connect+0xd8>)
 800bb16:	681a      	ldr	r2, [r3, #0]
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800bb1c:	4a07      	ldr	r2, [pc, #28]	; (800bb3c <udp_connect+0xd8>)
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800bb22:	2300      	movs	r3, #0
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	3718      	adds	r7, #24
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}
 800bb2c:	08011600 	.word	0x08011600
 800bb30:	080118e0 	.word	0x080118e0
 800bb34:	08011654 	.word	0x08011654
 800bb38:	080118fc 	.word	0x080118fc
 800bb3c:	20008b18 	.word	0x20008b18

0800bb40 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b084      	sub	sp, #16
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	60f8      	str	r0, [r7, #12]
 800bb48:	60b9      	str	r1, [r7, #8]
 800bb4a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d107      	bne.n	800bb62 <udp_recv+0x22>
 800bb52:	4b08      	ldr	r3, [pc, #32]	; (800bb74 <udp_recv+0x34>)
 800bb54:	f240 428a 	movw	r2, #1162	; 0x48a
 800bb58:	4907      	ldr	r1, [pc, #28]	; (800bb78 <udp_recv+0x38>)
 800bb5a:	4808      	ldr	r0, [pc, #32]	; (800bb7c <udp_recv+0x3c>)
 800bb5c:	f002 fb7a 	bl	800e254 <iprintf>
 800bb60:	e005      	b.n	800bb6e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	68ba      	ldr	r2, [r7, #8]
 800bb66:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	687a      	ldr	r2, [r7, #4]
 800bb6c:	61da      	str	r2, [r3, #28]
}
 800bb6e:	3710      	adds	r7, #16
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}
 800bb74:	08011600 	.word	0x08011600
 800bb78:	08011934 	.word	0x08011934
 800bb7c:	08011654 	.word	0x08011654

0800bb80 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b082      	sub	sp, #8
 800bb84:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800bb86:	2000      	movs	r0, #0
 800bb88:	f7f8 ff08 	bl	800499c <memp_malloc>
 800bb8c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d007      	beq.n	800bba4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800bb94:	2220      	movs	r2, #32
 800bb96:	2100      	movs	r1, #0
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	f002 fb53 	bl	800e244 <memset>
    pcb->ttl = UDP_TTL;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	22ff      	movs	r2, #255	; 0xff
 800bba2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800bba4:	687b      	ldr	r3, [r7, #4]
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	3708      	adds	r7, #8
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}
	...

0800bbb0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	b085      	sub	sp, #20
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
 800bbb8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d01e      	beq.n	800bbfe <udp_netif_ip_addr_changed+0x4e>
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d01a      	beq.n	800bbfe <udp_netif_ip_addr_changed+0x4e>
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d017      	beq.n	800bbfe <udp_netif_ip_addr_changed+0x4e>
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d013      	beq.n	800bbfe <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800bbd6:	4b0d      	ldr	r3, [pc, #52]	; (800bc0c <udp_netif_ip_addr_changed+0x5c>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	60fb      	str	r3, [r7, #12]
 800bbdc:	e00c      	b.n	800bbf8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	681a      	ldr	r2, [r3, #0]
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	429a      	cmp	r2, r3
 800bbe8:	d103      	bne.n	800bbf2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	681a      	ldr	r2, [r3, #0]
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	68db      	ldr	r3, [r3, #12]
 800bbf6:	60fb      	str	r3, [r7, #12]
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d1ef      	bne.n	800bbde <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800bbfe:	bf00      	nop
 800bc00:	3714      	adds	r7, #20
 800bc02:	46bd      	mov	sp, r7
 800bc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc08:	4770      	bx	lr
 800bc0a:	bf00      	nop
 800bc0c:	20008b18 	.word	0x20008b18

0800bc10 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b082      	sub	sp, #8
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800bc18:	4915      	ldr	r1, [pc, #84]	; (800bc70 <etharp_free_entry+0x60>)
 800bc1a:	687a      	ldr	r2, [r7, #4]
 800bc1c:	4613      	mov	r3, r2
 800bc1e:	005b      	lsls	r3, r3, #1
 800bc20:	4413      	add	r3, r2
 800bc22:	00db      	lsls	r3, r3, #3
 800bc24:	440b      	add	r3, r1
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d013      	beq.n	800bc54 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800bc2c:	4910      	ldr	r1, [pc, #64]	; (800bc70 <etharp_free_entry+0x60>)
 800bc2e:	687a      	ldr	r2, [r7, #4]
 800bc30:	4613      	mov	r3, r2
 800bc32:	005b      	lsls	r3, r3, #1
 800bc34:	4413      	add	r3, r2
 800bc36:	00db      	lsls	r3, r3, #3
 800bc38:	440b      	add	r3, r1
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f7f9 fd0b 	bl	8005658 <pbuf_free>
    arp_table[i].q = NULL;
 800bc42:	490b      	ldr	r1, [pc, #44]	; (800bc70 <etharp_free_entry+0x60>)
 800bc44:	687a      	ldr	r2, [r7, #4]
 800bc46:	4613      	mov	r3, r2
 800bc48:	005b      	lsls	r3, r3, #1
 800bc4a:	4413      	add	r3, r2
 800bc4c:	00db      	lsls	r3, r3, #3
 800bc4e:	440b      	add	r3, r1
 800bc50:	2200      	movs	r2, #0
 800bc52:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800bc54:	4906      	ldr	r1, [pc, #24]	; (800bc70 <etharp_free_entry+0x60>)
 800bc56:	687a      	ldr	r2, [r7, #4]
 800bc58:	4613      	mov	r3, r2
 800bc5a:	005b      	lsls	r3, r3, #1
 800bc5c:	4413      	add	r3, r2
 800bc5e:	00db      	lsls	r3, r3, #3
 800bc60:	440b      	add	r3, r1
 800bc62:	3314      	adds	r3, #20
 800bc64:	2200      	movs	r2, #0
 800bc66:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800bc68:	bf00      	nop
 800bc6a:	3708      	adds	r7, #8
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}
 800bc70:	20000110 	.word	0x20000110

0800bc74 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b082      	sub	sp, #8
 800bc78:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	607b      	str	r3, [r7, #4]
 800bc7e:	e096      	b.n	800bdae <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800bc80:	494f      	ldr	r1, [pc, #316]	; (800bdc0 <etharp_tmr+0x14c>)
 800bc82:	687a      	ldr	r2, [r7, #4]
 800bc84:	4613      	mov	r3, r2
 800bc86:	005b      	lsls	r3, r3, #1
 800bc88:	4413      	add	r3, r2
 800bc8a:	00db      	lsls	r3, r3, #3
 800bc8c:	440b      	add	r3, r1
 800bc8e:	3314      	adds	r3, #20
 800bc90:	781b      	ldrb	r3, [r3, #0]
 800bc92:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800bc94:	78fb      	ldrb	r3, [r7, #3]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	f000 8086 	beq.w	800bda8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800bc9c:	4948      	ldr	r1, [pc, #288]	; (800bdc0 <etharp_tmr+0x14c>)
 800bc9e:	687a      	ldr	r2, [r7, #4]
 800bca0:	4613      	mov	r3, r2
 800bca2:	005b      	lsls	r3, r3, #1
 800bca4:	4413      	add	r3, r2
 800bca6:	00db      	lsls	r3, r3, #3
 800bca8:	440b      	add	r3, r1
 800bcaa:	3312      	adds	r3, #18
 800bcac:	881b      	ldrh	r3, [r3, #0]
 800bcae:	3301      	adds	r3, #1
 800bcb0:	b298      	uxth	r0, r3
 800bcb2:	4943      	ldr	r1, [pc, #268]	; (800bdc0 <etharp_tmr+0x14c>)
 800bcb4:	687a      	ldr	r2, [r7, #4]
 800bcb6:	4613      	mov	r3, r2
 800bcb8:	005b      	lsls	r3, r3, #1
 800bcba:	4413      	add	r3, r2
 800bcbc:	00db      	lsls	r3, r3, #3
 800bcbe:	440b      	add	r3, r1
 800bcc0:	3312      	adds	r3, #18
 800bcc2:	4602      	mov	r2, r0
 800bcc4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800bcc6:	493e      	ldr	r1, [pc, #248]	; (800bdc0 <etharp_tmr+0x14c>)
 800bcc8:	687a      	ldr	r2, [r7, #4]
 800bcca:	4613      	mov	r3, r2
 800bccc:	005b      	lsls	r3, r3, #1
 800bcce:	4413      	add	r3, r2
 800bcd0:	00db      	lsls	r3, r3, #3
 800bcd2:	440b      	add	r3, r1
 800bcd4:	3312      	adds	r3, #18
 800bcd6:	881b      	ldrh	r3, [r3, #0]
 800bcd8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800bcdc:	d215      	bcs.n	800bd0a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800bcde:	4938      	ldr	r1, [pc, #224]	; (800bdc0 <etharp_tmr+0x14c>)
 800bce0:	687a      	ldr	r2, [r7, #4]
 800bce2:	4613      	mov	r3, r2
 800bce4:	005b      	lsls	r3, r3, #1
 800bce6:	4413      	add	r3, r2
 800bce8:	00db      	lsls	r3, r3, #3
 800bcea:	440b      	add	r3, r1
 800bcec:	3314      	adds	r3, #20
 800bcee:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800bcf0:	2b01      	cmp	r3, #1
 800bcf2:	d10e      	bne.n	800bd12 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800bcf4:	4932      	ldr	r1, [pc, #200]	; (800bdc0 <etharp_tmr+0x14c>)
 800bcf6:	687a      	ldr	r2, [r7, #4]
 800bcf8:	4613      	mov	r3, r2
 800bcfa:	005b      	lsls	r3, r3, #1
 800bcfc:	4413      	add	r3, r2
 800bcfe:	00db      	lsls	r3, r3, #3
 800bd00:	440b      	add	r3, r1
 800bd02:	3312      	adds	r3, #18
 800bd04:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800bd06:	2b04      	cmp	r3, #4
 800bd08:	d903      	bls.n	800bd12 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	f7ff ff80 	bl	800bc10 <etharp_free_entry>
 800bd10:	e04a      	b.n	800bda8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800bd12:	492b      	ldr	r1, [pc, #172]	; (800bdc0 <etharp_tmr+0x14c>)
 800bd14:	687a      	ldr	r2, [r7, #4]
 800bd16:	4613      	mov	r3, r2
 800bd18:	005b      	lsls	r3, r3, #1
 800bd1a:	4413      	add	r3, r2
 800bd1c:	00db      	lsls	r3, r3, #3
 800bd1e:	440b      	add	r3, r1
 800bd20:	3314      	adds	r3, #20
 800bd22:	781b      	ldrb	r3, [r3, #0]
 800bd24:	2b03      	cmp	r3, #3
 800bd26:	d10a      	bne.n	800bd3e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800bd28:	4925      	ldr	r1, [pc, #148]	; (800bdc0 <etharp_tmr+0x14c>)
 800bd2a:	687a      	ldr	r2, [r7, #4]
 800bd2c:	4613      	mov	r3, r2
 800bd2e:	005b      	lsls	r3, r3, #1
 800bd30:	4413      	add	r3, r2
 800bd32:	00db      	lsls	r3, r3, #3
 800bd34:	440b      	add	r3, r1
 800bd36:	3314      	adds	r3, #20
 800bd38:	2204      	movs	r2, #4
 800bd3a:	701a      	strb	r2, [r3, #0]
 800bd3c:	e034      	b.n	800bda8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800bd3e:	4920      	ldr	r1, [pc, #128]	; (800bdc0 <etharp_tmr+0x14c>)
 800bd40:	687a      	ldr	r2, [r7, #4]
 800bd42:	4613      	mov	r3, r2
 800bd44:	005b      	lsls	r3, r3, #1
 800bd46:	4413      	add	r3, r2
 800bd48:	00db      	lsls	r3, r3, #3
 800bd4a:	440b      	add	r3, r1
 800bd4c:	3314      	adds	r3, #20
 800bd4e:	781b      	ldrb	r3, [r3, #0]
 800bd50:	2b04      	cmp	r3, #4
 800bd52:	d10a      	bne.n	800bd6a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800bd54:	491a      	ldr	r1, [pc, #104]	; (800bdc0 <etharp_tmr+0x14c>)
 800bd56:	687a      	ldr	r2, [r7, #4]
 800bd58:	4613      	mov	r3, r2
 800bd5a:	005b      	lsls	r3, r3, #1
 800bd5c:	4413      	add	r3, r2
 800bd5e:	00db      	lsls	r3, r3, #3
 800bd60:	440b      	add	r3, r1
 800bd62:	3314      	adds	r3, #20
 800bd64:	2202      	movs	r2, #2
 800bd66:	701a      	strb	r2, [r3, #0]
 800bd68:	e01e      	b.n	800bda8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800bd6a:	4915      	ldr	r1, [pc, #84]	; (800bdc0 <etharp_tmr+0x14c>)
 800bd6c:	687a      	ldr	r2, [r7, #4]
 800bd6e:	4613      	mov	r3, r2
 800bd70:	005b      	lsls	r3, r3, #1
 800bd72:	4413      	add	r3, r2
 800bd74:	00db      	lsls	r3, r3, #3
 800bd76:	440b      	add	r3, r1
 800bd78:	3314      	adds	r3, #20
 800bd7a:	781b      	ldrb	r3, [r3, #0]
 800bd7c:	2b01      	cmp	r3, #1
 800bd7e:	d113      	bne.n	800bda8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800bd80:	490f      	ldr	r1, [pc, #60]	; (800bdc0 <etharp_tmr+0x14c>)
 800bd82:	687a      	ldr	r2, [r7, #4]
 800bd84:	4613      	mov	r3, r2
 800bd86:	005b      	lsls	r3, r3, #1
 800bd88:	4413      	add	r3, r2
 800bd8a:	00db      	lsls	r3, r3, #3
 800bd8c:	440b      	add	r3, r1
 800bd8e:	3308      	adds	r3, #8
 800bd90:	6818      	ldr	r0, [r3, #0]
 800bd92:	687a      	ldr	r2, [r7, #4]
 800bd94:	4613      	mov	r3, r2
 800bd96:	005b      	lsls	r3, r3, #1
 800bd98:	4413      	add	r3, r2
 800bd9a:	00db      	lsls	r3, r3, #3
 800bd9c:	4a08      	ldr	r2, [pc, #32]	; (800bdc0 <etharp_tmr+0x14c>)
 800bd9e:	4413      	add	r3, r2
 800bda0:	3304      	adds	r3, #4
 800bda2:	4619      	mov	r1, r3
 800bda4:	f000 fe6e 	bl	800ca84 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	3301      	adds	r3, #1
 800bdac:	607b      	str	r3, [r7, #4]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2b09      	cmp	r3, #9
 800bdb2:	f77f af65 	ble.w	800bc80 <etharp_tmr+0xc>
      }
    }
  }
}
 800bdb6:	bf00      	nop
 800bdb8:	bf00      	nop
 800bdba:	3708      	adds	r7, #8
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}
 800bdc0:	20000110 	.word	0x20000110

0800bdc4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b08a      	sub	sp, #40	; 0x28
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	60f8      	str	r0, [r7, #12]
 800bdcc:	460b      	mov	r3, r1
 800bdce:	607a      	str	r2, [r7, #4]
 800bdd0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800bdd2:	230a      	movs	r3, #10
 800bdd4:	84fb      	strh	r3, [r7, #38]	; 0x26
 800bdd6:	230a      	movs	r3, #10
 800bdd8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800bdda:	230a      	movs	r3, #10
 800bddc:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800bdde:	2300      	movs	r3, #0
 800bde0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800bde2:	230a      	movs	r3, #10
 800bde4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800bde6:	2300      	movs	r3, #0
 800bde8:	83bb      	strh	r3, [r7, #28]
 800bdea:	2300      	movs	r3, #0
 800bdec:	837b      	strh	r3, [r7, #26]
 800bdee:	2300      	movs	r3, #0
 800bdf0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	843b      	strh	r3, [r7, #32]
 800bdf6:	e0ae      	b.n	800bf56 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800bdf8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bdfc:	49a6      	ldr	r1, [pc, #664]	; (800c098 <etharp_find_entry+0x2d4>)
 800bdfe:	4613      	mov	r3, r2
 800be00:	005b      	lsls	r3, r3, #1
 800be02:	4413      	add	r3, r2
 800be04:	00db      	lsls	r3, r3, #3
 800be06:	440b      	add	r3, r1
 800be08:	3314      	adds	r3, #20
 800be0a:	781b      	ldrb	r3, [r3, #0]
 800be0c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800be0e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800be12:	2b0a      	cmp	r3, #10
 800be14:	d105      	bne.n	800be22 <etharp_find_entry+0x5e>
 800be16:	7dfb      	ldrb	r3, [r7, #23]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d102      	bne.n	800be22 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800be1c:	8c3b      	ldrh	r3, [r7, #32]
 800be1e:	847b      	strh	r3, [r7, #34]	; 0x22
 800be20:	e095      	b.n	800bf4e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800be22:	7dfb      	ldrb	r3, [r7, #23]
 800be24:	2b00      	cmp	r3, #0
 800be26:	f000 8092 	beq.w	800bf4e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800be2a:	7dfb      	ldrb	r3, [r7, #23]
 800be2c:	2b01      	cmp	r3, #1
 800be2e:	d009      	beq.n	800be44 <etharp_find_entry+0x80>
 800be30:	7dfb      	ldrb	r3, [r7, #23]
 800be32:	2b01      	cmp	r3, #1
 800be34:	d806      	bhi.n	800be44 <etharp_find_entry+0x80>
 800be36:	4b99      	ldr	r3, [pc, #612]	; (800c09c <etharp_find_entry+0x2d8>)
 800be38:	f240 1223 	movw	r2, #291	; 0x123
 800be3c:	4998      	ldr	r1, [pc, #608]	; (800c0a0 <etharp_find_entry+0x2dc>)
 800be3e:	4899      	ldr	r0, [pc, #612]	; (800c0a4 <etharp_find_entry+0x2e0>)
 800be40:	f002 fa08 	bl	800e254 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d020      	beq.n	800be8c <etharp_find_entry+0xc8>
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	6819      	ldr	r1, [r3, #0]
 800be4e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800be52:	4891      	ldr	r0, [pc, #580]	; (800c098 <etharp_find_entry+0x2d4>)
 800be54:	4613      	mov	r3, r2
 800be56:	005b      	lsls	r3, r3, #1
 800be58:	4413      	add	r3, r2
 800be5a:	00db      	lsls	r3, r3, #3
 800be5c:	4403      	add	r3, r0
 800be5e:	3304      	adds	r3, #4
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	4299      	cmp	r1, r3
 800be64:	d112      	bne.n	800be8c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d00c      	beq.n	800be86 <etharp_find_entry+0xc2>
 800be6c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800be70:	4989      	ldr	r1, [pc, #548]	; (800c098 <etharp_find_entry+0x2d4>)
 800be72:	4613      	mov	r3, r2
 800be74:	005b      	lsls	r3, r3, #1
 800be76:	4413      	add	r3, r2
 800be78:	00db      	lsls	r3, r3, #3
 800be7a:	440b      	add	r3, r1
 800be7c:	3308      	adds	r3, #8
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	687a      	ldr	r2, [r7, #4]
 800be82:	429a      	cmp	r2, r3
 800be84:	d102      	bne.n	800be8c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800be86:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800be8a:	e100      	b.n	800c08e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800be8c:	7dfb      	ldrb	r3, [r7, #23]
 800be8e:	2b01      	cmp	r3, #1
 800be90:	d140      	bne.n	800bf14 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800be92:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800be96:	4980      	ldr	r1, [pc, #512]	; (800c098 <etharp_find_entry+0x2d4>)
 800be98:	4613      	mov	r3, r2
 800be9a:	005b      	lsls	r3, r3, #1
 800be9c:	4413      	add	r3, r2
 800be9e:	00db      	lsls	r3, r3, #3
 800bea0:	440b      	add	r3, r1
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d01a      	beq.n	800bede <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800bea8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800beac:	497a      	ldr	r1, [pc, #488]	; (800c098 <etharp_find_entry+0x2d4>)
 800beae:	4613      	mov	r3, r2
 800beb0:	005b      	lsls	r3, r3, #1
 800beb2:	4413      	add	r3, r2
 800beb4:	00db      	lsls	r3, r3, #3
 800beb6:	440b      	add	r3, r1
 800beb8:	3312      	adds	r3, #18
 800beba:	881b      	ldrh	r3, [r3, #0]
 800bebc:	8bba      	ldrh	r2, [r7, #28]
 800bebe:	429a      	cmp	r2, r3
 800bec0:	d845      	bhi.n	800bf4e <etharp_find_entry+0x18a>
            old_queue = i;
 800bec2:	8c3b      	ldrh	r3, [r7, #32]
 800bec4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800bec6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800beca:	4973      	ldr	r1, [pc, #460]	; (800c098 <etharp_find_entry+0x2d4>)
 800becc:	4613      	mov	r3, r2
 800bece:	005b      	lsls	r3, r3, #1
 800bed0:	4413      	add	r3, r2
 800bed2:	00db      	lsls	r3, r3, #3
 800bed4:	440b      	add	r3, r1
 800bed6:	3312      	adds	r3, #18
 800bed8:	881b      	ldrh	r3, [r3, #0]
 800beda:	83bb      	strh	r3, [r7, #28]
 800bedc:	e037      	b.n	800bf4e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800bede:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bee2:	496d      	ldr	r1, [pc, #436]	; (800c098 <etharp_find_entry+0x2d4>)
 800bee4:	4613      	mov	r3, r2
 800bee6:	005b      	lsls	r3, r3, #1
 800bee8:	4413      	add	r3, r2
 800beea:	00db      	lsls	r3, r3, #3
 800beec:	440b      	add	r3, r1
 800beee:	3312      	adds	r3, #18
 800bef0:	881b      	ldrh	r3, [r3, #0]
 800bef2:	8b7a      	ldrh	r2, [r7, #26]
 800bef4:	429a      	cmp	r2, r3
 800bef6:	d82a      	bhi.n	800bf4e <etharp_find_entry+0x18a>
            old_pending = i;
 800bef8:	8c3b      	ldrh	r3, [r7, #32]
 800befa:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800befc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bf00:	4965      	ldr	r1, [pc, #404]	; (800c098 <etharp_find_entry+0x2d4>)
 800bf02:	4613      	mov	r3, r2
 800bf04:	005b      	lsls	r3, r3, #1
 800bf06:	4413      	add	r3, r2
 800bf08:	00db      	lsls	r3, r3, #3
 800bf0a:	440b      	add	r3, r1
 800bf0c:	3312      	adds	r3, #18
 800bf0e:	881b      	ldrh	r3, [r3, #0]
 800bf10:	837b      	strh	r3, [r7, #26]
 800bf12:	e01c      	b.n	800bf4e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800bf14:	7dfb      	ldrb	r3, [r7, #23]
 800bf16:	2b01      	cmp	r3, #1
 800bf18:	d919      	bls.n	800bf4e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800bf1a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bf1e:	495e      	ldr	r1, [pc, #376]	; (800c098 <etharp_find_entry+0x2d4>)
 800bf20:	4613      	mov	r3, r2
 800bf22:	005b      	lsls	r3, r3, #1
 800bf24:	4413      	add	r3, r2
 800bf26:	00db      	lsls	r3, r3, #3
 800bf28:	440b      	add	r3, r1
 800bf2a:	3312      	adds	r3, #18
 800bf2c:	881b      	ldrh	r3, [r3, #0]
 800bf2e:	8b3a      	ldrh	r2, [r7, #24]
 800bf30:	429a      	cmp	r2, r3
 800bf32:	d80c      	bhi.n	800bf4e <etharp_find_entry+0x18a>
            old_stable = i;
 800bf34:	8c3b      	ldrh	r3, [r7, #32]
 800bf36:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800bf38:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bf3c:	4956      	ldr	r1, [pc, #344]	; (800c098 <etharp_find_entry+0x2d4>)
 800bf3e:	4613      	mov	r3, r2
 800bf40:	005b      	lsls	r3, r3, #1
 800bf42:	4413      	add	r3, r2
 800bf44:	00db      	lsls	r3, r3, #3
 800bf46:	440b      	add	r3, r1
 800bf48:	3312      	adds	r3, #18
 800bf4a:	881b      	ldrh	r3, [r3, #0]
 800bf4c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bf4e:	8c3b      	ldrh	r3, [r7, #32]
 800bf50:	3301      	adds	r3, #1
 800bf52:	b29b      	uxth	r3, r3
 800bf54:	843b      	strh	r3, [r7, #32]
 800bf56:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bf5a:	2b09      	cmp	r3, #9
 800bf5c:	f77f af4c 	ble.w	800bdf8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800bf60:	7afb      	ldrb	r3, [r7, #11]
 800bf62:	f003 0302 	and.w	r3, r3, #2
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d108      	bne.n	800bf7c <etharp_find_entry+0x1b8>
 800bf6a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800bf6e:	2b0a      	cmp	r3, #10
 800bf70:	d107      	bne.n	800bf82 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800bf72:	7afb      	ldrb	r3, [r7, #11]
 800bf74:	f003 0301 	and.w	r3, r3, #1
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d102      	bne.n	800bf82 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800bf7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf80:	e085      	b.n	800c08e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800bf82:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800bf86:	2b09      	cmp	r3, #9
 800bf88:	dc02      	bgt.n	800bf90 <etharp_find_entry+0x1cc>
    i = empty;
 800bf8a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bf8c:	843b      	strh	r3, [r7, #32]
 800bf8e:	e039      	b.n	800c004 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800bf90:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800bf94:	2b09      	cmp	r3, #9
 800bf96:	dc14      	bgt.n	800bfc2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800bf98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bf9a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800bf9c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bfa0:	493d      	ldr	r1, [pc, #244]	; (800c098 <etharp_find_entry+0x2d4>)
 800bfa2:	4613      	mov	r3, r2
 800bfa4:	005b      	lsls	r3, r3, #1
 800bfa6:	4413      	add	r3, r2
 800bfa8:	00db      	lsls	r3, r3, #3
 800bfaa:	440b      	add	r3, r1
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d018      	beq.n	800bfe4 <etharp_find_entry+0x220>
 800bfb2:	4b3a      	ldr	r3, [pc, #232]	; (800c09c <etharp_find_entry+0x2d8>)
 800bfb4:	f240 126d 	movw	r2, #365	; 0x16d
 800bfb8:	493b      	ldr	r1, [pc, #236]	; (800c0a8 <etharp_find_entry+0x2e4>)
 800bfba:	483a      	ldr	r0, [pc, #232]	; (800c0a4 <etharp_find_entry+0x2e0>)
 800bfbc:	f002 f94a 	bl	800e254 <iprintf>
 800bfc0:	e010      	b.n	800bfe4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800bfc2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800bfc6:	2b09      	cmp	r3, #9
 800bfc8:	dc02      	bgt.n	800bfd0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800bfca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bfcc:	843b      	strh	r3, [r7, #32]
 800bfce:	e009      	b.n	800bfe4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800bfd0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800bfd4:	2b09      	cmp	r3, #9
 800bfd6:	dc02      	bgt.n	800bfde <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800bfd8:	8bfb      	ldrh	r3, [r7, #30]
 800bfda:	843b      	strh	r3, [r7, #32]
 800bfdc:	e002      	b.n	800bfe4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800bfde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bfe2:	e054      	b.n	800c08e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800bfe4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bfe8:	2b09      	cmp	r3, #9
 800bfea:	dd06      	ble.n	800bffa <etharp_find_entry+0x236>
 800bfec:	4b2b      	ldr	r3, [pc, #172]	; (800c09c <etharp_find_entry+0x2d8>)
 800bfee:	f240 127f 	movw	r2, #383	; 0x17f
 800bff2:	492e      	ldr	r1, [pc, #184]	; (800c0ac <etharp_find_entry+0x2e8>)
 800bff4:	482b      	ldr	r0, [pc, #172]	; (800c0a4 <etharp_find_entry+0x2e0>)
 800bff6:	f002 f92d 	bl	800e254 <iprintf>
    etharp_free_entry(i);
 800bffa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bffe:	4618      	mov	r0, r3
 800c000:	f7ff fe06 	bl	800bc10 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c004:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c008:	2b09      	cmp	r3, #9
 800c00a:	dd06      	ble.n	800c01a <etharp_find_entry+0x256>
 800c00c:	4b23      	ldr	r3, [pc, #140]	; (800c09c <etharp_find_entry+0x2d8>)
 800c00e:	f240 1283 	movw	r2, #387	; 0x183
 800c012:	4926      	ldr	r1, [pc, #152]	; (800c0ac <etharp_find_entry+0x2e8>)
 800c014:	4823      	ldr	r0, [pc, #140]	; (800c0a4 <etharp_find_entry+0x2e0>)
 800c016:	f002 f91d 	bl	800e254 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c01a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c01e:	491e      	ldr	r1, [pc, #120]	; (800c098 <etharp_find_entry+0x2d4>)
 800c020:	4613      	mov	r3, r2
 800c022:	005b      	lsls	r3, r3, #1
 800c024:	4413      	add	r3, r2
 800c026:	00db      	lsls	r3, r3, #3
 800c028:	440b      	add	r3, r1
 800c02a:	3314      	adds	r3, #20
 800c02c:	781b      	ldrb	r3, [r3, #0]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d006      	beq.n	800c040 <etharp_find_entry+0x27c>
 800c032:	4b1a      	ldr	r3, [pc, #104]	; (800c09c <etharp_find_entry+0x2d8>)
 800c034:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800c038:	491d      	ldr	r1, [pc, #116]	; (800c0b0 <etharp_find_entry+0x2ec>)
 800c03a:	481a      	ldr	r0, [pc, #104]	; (800c0a4 <etharp_find_entry+0x2e0>)
 800c03c:	f002 f90a 	bl	800e254 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d00b      	beq.n	800c05e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800c046:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	6819      	ldr	r1, [r3, #0]
 800c04e:	4812      	ldr	r0, [pc, #72]	; (800c098 <etharp_find_entry+0x2d4>)
 800c050:	4613      	mov	r3, r2
 800c052:	005b      	lsls	r3, r3, #1
 800c054:	4413      	add	r3, r2
 800c056:	00db      	lsls	r3, r3, #3
 800c058:	4403      	add	r3, r0
 800c05a:	3304      	adds	r3, #4
 800c05c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800c05e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c062:	490d      	ldr	r1, [pc, #52]	; (800c098 <etharp_find_entry+0x2d4>)
 800c064:	4613      	mov	r3, r2
 800c066:	005b      	lsls	r3, r3, #1
 800c068:	4413      	add	r3, r2
 800c06a:	00db      	lsls	r3, r3, #3
 800c06c:	440b      	add	r3, r1
 800c06e:	3312      	adds	r3, #18
 800c070:	2200      	movs	r2, #0
 800c072:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800c074:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c078:	4907      	ldr	r1, [pc, #28]	; (800c098 <etharp_find_entry+0x2d4>)
 800c07a:	4613      	mov	r3, r2
 800c07c:	005b      	lsls	r3, r3, #1
 800c07e:	4413      	add	r3, r2
 800c080:	00db      	lsls	r3, r3, #3
 800c082:	440b      	add	r3, r1
 800c084:	3308      	adds	r3, #8
 800c086:	687a      	ldr	r2, [r7, #4]
 800c088:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800c08a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800c08e:	4618      	mov	r0, r3
 800c090:	3728      	adds	r7, #40	; 0x28
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}
 800c096:	bf00      	nop
 800c098:	20000110 	.word	0x20000110
 800c09c:	08011964 	.word	0x08011964
 800c0a0:	0801199c 	.word	0x0801199c
 800c0a4:	080119dc 	.word	0x080119dc
 800c0a8:	08011a04 	.word	0x08011a04
 800c0ac:	08011a1c 	.word	0x08011a1c
 800c0b0:	08011a30 	.word	0x08011a30

0800c0b4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b088      	sub	sp, #32
 800c0b8:	af02      	add	r7, sp, #8
 800c0ba:	60f8      	str	r0, [r7, #12]
 800c0bc:	60b9      	str	r1, [r7, #8]
 800c0be:	607a      	str	r2, [r7, #4]
 800c0c0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c0c8:	2b06      	cmp	r3, #6
 800c0ca:	d006      	beq.n	800c0da <etharp_update_arp_entry+0x26>
 800c0cc:	4b48      	ldr	r3, [pc, #288]	; (800c1f0 <etharp_update_arp_entry+0x13c>)
 800c0ce:	f240 12a9 	movw	r2, #425	; 0x1a9
 800c0d2:	4948      	ldr	r1, [pc, #288]	; (800c1f4 <etharp_update_arp_entry+0x140>)
 800c0d4:	4848      	ldr	r0, [pc, #288]	; (800c1f8 <etharp_update_arp_entry+0x144>)
 800c0d6:	f002 f8bd 	bl	800e254 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d012      	beq.n	800c106 <etharp_update_arp_entry+0x52>
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d00e      	beq.n	800c106 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	68f9      	ldr	r1, [r7, #12]
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f001 f8fe 	bl	800d2f0 <ip4_addr_isbroadcast_u32>
 800c0f4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d105      	bne.n	800c106 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800c0fa:	68bb      	ldr	r3, [r7, #8]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c102:	2be0      	cmp	r3, #224	; 0xe0
 800c104:	d102      	bne.n	800c10c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c106:	f06f 030f 	mvn.w	r3, #15
 800c10a:	e06c      	b.n	800c1e6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800c10c:	78fb      	ldrb	r3, [r7, #3]
 800c10e:	68fa      	ldr	r2, [r7, #12]
 800c110:	4619      	mov	r1, r3
 800c112:	68b8      	ldr	r0, [r7, #8]
 800c114:	f7ff fe56 	bl	800bdc4 <etharp_find_entry>
 800c118:	4603      	mov	r3, r0
 800c11a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800c11c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c120:	2b00      	cmp	r3, #0
 800c122:	da02      	bge.n	800c12a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800c124:	8afb      	ldrh	r3, [r7, #22]
 800c126:	b25b      	sxtb	r3, r3
 800c128:	e05d      	b.n	800c1e6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800c12a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c12e:	4933      	ldr	r1, [pc, #204]	; (800c1fc <etharp_update_arp_entry+0x148>)
 800c130:	4613      	mov	r3, r2
 800c132:	005b      	lsls	r3, r3, #1
 800c134:	4413      	add	r3, r2
 800c136:	00db      	lsls	r3, r3, #3
 800c138:	440b      	add	r3, r1
 800c13a:	3314      	adds	r3, #20
 800c13c:	2202      	movs	r2, #2
 800c13e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800c140:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c144:	492d      	ldr	r1, [pc, #180]	; (800c1fc <etharp_update_arp_entry+0x148>)
 800c146:	4613      	mov	r3, r2
 800c148:	005b      	lsls	r3, r3, #1
 800c14a:	4413      	add	r3, r2
 800c14c:	00db      	lsls	r3, r3, #3
 800c14e:	440b      	add	r3, r1
 800c150:	3308      	adds	r3, #8
 800c152:	68fa      	ldr	r2, [r7, #12]
 800c154:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800c156:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c15a:	4613      	mov	r3, r2
 800c15c:	005b      	lsls	r3, r3, #1
 800c15e:	4413      	add	r3, r2
 800c160:	00db      	lsls	r3, r3, #3
 800c162:	3308      	adds	r3, #8
 800c164:	4a25      	ldr	r2, [pc, #148]	; (800c1fc <etharp_update_arp_entry+0x148>)
 800c166:	4413      	add	r3, r2
 800c168:	3304      	adds	r3, #4
 800c16a:	2206      	movs	r2, #6
 800c16c:	6879      	ldr	r1, [r7, #4]
 800c16e:	4618      	mov	r0, r3
 800c170:	f002 f840 	bl	800e1f4 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800c174:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c178:	4920      	ldr	r1, [pc, #128]	; (800c1fc <etharp_update_arp_entry+0x148>)
 800c17a:	4613      	mov	r3, r2
 800c17c:	005b      	lsls	r3, r3, #1
 800c17e:	4413      	add	r3, r2
 800c180:	00db      	lsls	r3, r3, #3
 800c182:	440b      	add	r3, r1
 800c184:	3312      	adds	r3, #18
 800c186:	2200      	movs	r2, #0
 800c188:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800c18a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c18e:	491b      	ldr	r1, [pc, #108]	; (800c1fc <etharp_update_arp_entry+0x148>)
 800c190:	4613      	mov	r3, r2
 800c192:	005b      	lsls	r3, r3, #1
 800c194:	4413      	add	r3, r2
 800c196:	00db      	lsls	r3, r3, #3
 800c198:	440b      	add	r3, r1
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d021      	beq.n	800c1e4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800c1a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c1a4:	4915      	ldr	r1, [pc, #84]	; (800c1fc <etharp_update_arp_entry+0x148>)
 800c1a6:	4613      	mov	r3, r2
 800c1a8:	005b      	lsls	r3, r3, #1
 800c1aa:	4413      	add	r3, r2
 800c1ac:	00db      	lsls	r3, r3, #3
 800c1ae:	440b      	add	r3, r1
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800c1b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c1b8:	4910      	ldr	r1, [pc, #64]	; (800c1fc <etharp_update_arp_entry+0x148>)
 800c1ba:	4613      	mov	r3, r2
 800c1bc:	005b      	lsls	r3, r3, #1
 800c1be:	4413      	add	r3, r2
 800c1c0:	00db      	lsls	r3, r3, #3
 800c1c2:	440b      	add	r3, r1
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c1ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c1d2:	9300      	str	r3, [sp, #0]
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	6939      	ldr	r1, [r7, #16]
 800c1d8:	68f8      	ldr	r0, [r7, #12]
 800c1da:	f001 ff91 	bl	800e100 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800c1de:	6938      	ldr	r0, [r7, #16]
 800c1e0:	f7f9 fa3a 	bl	8005658 <pbuf_free>
  }
  return ERR_OK;
 800c1e4:	2300      	movs	r3, #0
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3718      	adds	r7, #24
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}
 800c1ee:	bf00      	nop
 800c1f0:	08011964 	.word	0x08011964
 800c1f4:	08011a5c 	.word	0x08011a5c
 800c1f8:	080119dc 	.word	0x080119dc
 800c1fc:	20000110 	.word	0x20000110

0800c200 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b084      	sub	sp, #16
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c208:	2300      	movs	r3, #0
 800c20a:	60fb      	str	r3, [r7, #12]
 800c20c:	e01e      	b.n	800c24c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800c20e:	4913      	ldr	r1, [pc, #76]	; (800c25c <etharp_cleanup_netif+0x5c>)
 800c210:	68fa      	ldr	r2, [r7, #12]
 800c212:	4613      	mov	r3, r2
 800c214:	005b      	lsls	r3, r3, #1
 800c216:	4413      	add	r3, r2
 800c218:	00db      	lsls	r3, r3, #3
 800c21a:	440b      	add	r3, r1
 800c21c:	3314      	adds	r3, #20
 800c21e:	781b      	ldrb	r3, [r3, #0]
 800c220:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800c222:	7afb      	ldrb	r3, [r7, #11]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d00e      	beq.n	800c246 <etharp_cleanup_netif+0x46>
 800c228:	490c      	ldr	r1, [pc, #48]	; (800c25c <etharp_cleanup_netif+0x5c>)
 800c22a:	68fa      	ldr	r2, [r7, #12]
 800c22c:	4613      	mov	r3, r2
 800c22e:	005b      	lsls	r3, r3, #1
 800c230:	4413      	add	r3, r2
 800c232:	00db      	lsls	r3, r3, #3
 800c234:	440b      	add	r3, r1
 800c236:	3308      	adds	r3, #8
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	687a      	ldr	r2, [r7, #4]
 800c23c:	429a      	cmp	r2, r3
 800c23e:	d102      	bne.n	800c246 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800c240:	68f8      	ldr	r0, [r7, #12]
 800c242:	f7ff fce5 	bl	800bc10 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	3301      	adds	r3, #1
 800c24a:	60fb      	str	r3, [r7, #12]
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	2b09      	cmp	r3, #9
 800c250:	dddd      	ble.n	800c20e <etharp_cleanup_netif+0xe>
    }
  }
}
 800c252:	bf00      	nop
 800c254:	bf00      	nop
 800c256:	3710      	adds	r7, #16
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}
 800c25c:	20000110 	.word	0x20000110

0800c260 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800c260:	b5b0      	push	{r4, r5, r7, lr}
 800c262:	b08a      	sub	sp, #40	; 0x28
 800c264:	af04      	add	r7, sp, #16
 800c266:	6078      	str	r0, [r7, #4]
 800c268:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d107      	bne.n	800c280 <etharp_input+0x20>
 800c270:	4b3d      	ldr	r3, [pc, #244]	; (800c368 <etharp_input+0x108>)
 800c272:	f240 228a 	movw	r2, #650	; 0x28a
 800c276:	493d      	ldr	r1, [pc, #244]	; (800c36c <etharp_input+0x10c>)
 800c278:	483d      	ldr	r0, [pc, #244]	; (800c370 <etharp_input+0x110>)
 800c27a:	f001 ffeb 	bl	800e254 <iprintf>
 800c27e:	e06f      	b.n	800c360 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	685b      	ldr	r3, [r3, #4]
 800c284:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	881b      	ldrh	r3, [r3, #0]
 800c28a:	b29b      	uxth	r3, r3
 800c28c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c290:	d10c      	bne.n	800c2ac <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c296:	2b06      	cmp	r3, #6
 800c298:	d108      	bne.n	800c2ac <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c29e:	2b04      	cmp	r3, #4
 800c2a0:	d104      	bne.n	800c2ac <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800c2a2:	693b      	ldr	r3, [r7, #16]
 800c2a4:	885b      	ldrh	r3, [r3, #2]
 800c2a6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c2a8:	2b08      	cmp	r3, #8
 800c2aa:	d003      	beq.n	800c2b4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	f7f9 f9d3 	bl	8005658 <pbuf_free>
    return;
 800c2b2:	e055      	b.n	800c360 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800c2b4:	693b      	ldr	r3, [r7, #16]
 800c2b6:	330e      	adds	r3, #14
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	3318      	adds	r3, #24
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	3304      	adds	r3, #4
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d102      	bne.n	800c2d4 <etharp_input+0x74>
    for_us = 0;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	75fb      	strb	r3, [r7, #23]
 800c2d2:	e009      	b.n	800c2e8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800c2d4:	68ba      	ldr	r2, [r7, #8]
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	3304      	adds	r3, #4
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	429a      	cmp	r2, r3
 800c2de:	bf0c      	ite	eq
 800c2e0:	2301      	moveq	r3, #1
 800c2e2:	2300      	movne	r3, #0
 800c2e4:	b2db      	uxtb	r3, r3
 800c2e6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c2e8:	693b      	ldr	r3, [r7, #16]
 800c2ea:	f103 0208 	add.w	r2, r3, #8
 800c2ee:	7dfb      	ldrb	r3, [r7, #23]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d001      	beq.n	800c2f8 <etharp_input+0x98>
 800c2f4:	2301      	movs	r3, #1
 800c2f6:	e000      	b.n	800c2fa <etharp_input+0x9a>
 800c2f8:	2302      	movs	r3, #2
 800c2fa:	f107 010c 	add.w	r1, r7, #12
 800c2fe:	6838      	ldr	r0, [r7, #0]
 800c300:	f7ff fed8 	bl	800c0b4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800c304:	693b      	ldr	r3, [r7, #16]
 800c306:	88db      	ldrh	r3, [r3, #6]
 800c308:	b29b      	uxth	r3, r3
 800c30a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c30e:	d003      	beq.n	800c318 <etharp_input+0xb8>
 800c310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c314:	d01e      	beq.n	800c354 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800c316:	e020      	b.n	800c35a <etharp_input+0xfa>
      if (for_us) {
 800c318:	7dfb      	ldrb	r3, [r7, #23]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d01c      	beq.n	800c358 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800c334:	693a      	ldr	r2, [r7, #16]
 800c336:	3208      	adds	r2, #8
        etharp_raw(netif,
 800c338:	2102      	movs	r1, #2
 800c33a:	9103      	str	r1, [sp, #12]
 800c33c:	f107 010c 	add.w	r1, r7, #12
 800c340:	9102      	str	r1, [sp, #8]
 800c342:	9201      	str	r2, [sp, #4]
 800c344:	9300      	str	r3, [sp, #0]
 800c346:	462b      	mov	r3, r5
 800c348:	4622      	mov	r2, r4
 800c34a:	4601      	mov	r1, r0
 800c34c:	6838      	ldr	r0, [r7, #0]
 800c34e:	f000 faeb 	bl	800c928 <etharp_raw>
      break;
 800c352:	e001      	b.n	800c358 <etharp_input+0xf8>
      break;
 800c354:	bf00      	nop
 800c356:	e000      	b.n	800c35a <etharp_input+0xfa>
      break;
 800c358:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f7f9 f97c 	bl	8005658 <pbuf_free>
}
 800c360:	3718      	adds	r7, #24
 800c362:	46bd      	mov	sp, r7
 800c364:	bdb0      	pop	{r4, r5, r7, pc}
 800c366:	bf00      	nop
 800c368:	08011964 	.word	0x08011964
 800c36c:	08011ab4 	.word	0x08011ab4
 800c370:	080119dc 	.word	0x080119dc

0800c374 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b086      	sub	sp, #24
 800c378:	af02      	add	r7, sp, #8
 800c37a:	60f8      	str	r0, [r7, #12]
 800c37c:	60b9      	str	r1, [r7, #8]
 800c37e:	4613      	mov	r3, r2
 800c380:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c382:	79fa      	ldrb	r2, [r7, #7]
 800c384:	4944      	ldr	r1, [pc, #272]	; (800c498 <etharp_output_to_arp_index+0x124>)
 800c386:	4613      	mov	r3, r2
 800c388:	005b      	lsls	r3, r3, #1
 800c38a:	4413      	add	r3, r2
 800c38c:	00db      	lsls	r3, r3, #3
 800c38e:	440b      	add	r3, r1
 800c390:	3314      	adds	r3, #20
 800c392:	781b      	ldrb	r3, [r3, #0]
 800c394:	2b01      	cmp	r3, #1
 800c396:	d806      	bhi.n	800c3a6 <etharp_output_to_arp_index+0x32>
 800c398:	4b40      	ldr	r3, [pc, #256]	; (800c49c <etharp_output_to_arp_index+0x128>)
 800c39a:	f240 22ee 	movw	r2, #750	; 0x2ee
 800c39e:	4940      	ldr	r1, [pc, #256]	; (800c4a0 <etharp_output_to_arp_index+0x12c>)
 800c3a0:	4840      	ldr	r0, [pc, #256]	; (800c4a4 <etharp_output_to_arp_index+0x130>)
 800c3a2:	f001 ff57 	bl	800e254 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c3a6:	79fa      	ldrb	r2, [r7, #7]
 800c3a8:	493b      	ldr	r1, [pc, #236]	; (800c498 <etharp_output_to_arp_index+0x124>)
 800c3aa:	4613      	mov	r3, r2
 800c3ac:	005b      	lsls	r3, r3, #1
 800c3ae:	4413      	add	r3, r2
 800c3b0:	00db      	lsls	r3, r3, #3
 800c3b2:	440b      	add	r3, r1
 800c3b4:	3314      	adds	r3, #20
 800c3b6:	781b      	ldrb	r3, [r3, #0]
 800c3b8:	2b02      	cmp	r3, #2
 800c3ba:	d153      	bne.n	800c464 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800c3bc:	79fa      	ldrb	r2, [r7, #7]
 800c3be:	4936      	ldr	r1, [pc, #216]	; (800c498 <etharp_output_to_arp_index+0x124>)
 800c3c0:	4613      	mov	r3, r2
 800c3c2:	005b      	lsls	r3, r3, #1
 800c3c4:	4413      	add	r3, r2
 800c3c6:	00db      	lsls	r3, r3, #3
 800c3c8:	440b      	add	r3, r1
 800c3ca:	3312      	adds	r3, #18
 800c3cc:	881b      	ldrh	r3, [r3, #0]
 800c3ce:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800c3d2:	d919      	bls.n	800c408 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c3d4:	79fa      	ldrb	r2, [r7, #7]
 800c3d6:	4613      	mov	r3, r2
 800c3d8:	005b      	lsls	r3, r3, #1
 800c3da:	4413      	add	r3, r2
 800c3dc:	00db      	lsls	r3, r3, #3
 800c3de:	4a2e      	ldr	r2, [pc, #184]	; (800c498 <etharp_output_to_arp_index+0x124>)
 800c3e0:	4413      	add	r3, r2
 800c3e2:	3304      	adds	r3, #4
 800c3e4:	4619      	mov	r1, r3
 800c3e6:	68f8      	ldr	r0, [r7, #12]
 800c3e8:	f000 fb4c 	bl	800ca84 <etharp_request>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d138      	bne.n	800c464 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c3f2:	79fa      	ldrb	r2, [r7, #7]
 800c3f4:	4928      	ldr	r1, [pc, #160]	; (800c498 <etharp_output_to_arp_index+0x124>)
 800c3f6:	4613      	mov	r3, r2
 800c3f8:	005b      	lsls	r3, r3, #1
 800c3fa:	4413      	add	r3, r2
 800c3fc:	00db      	lsls	r3, r3, #3
 800c3fe:	440b      	add	r3, r1
 800c400:	3314      	adds	r3, #20
 800c402:	2203      	movs	r2, #3
 800c404:	701a      	strb	r2, [r3, #0]
 800c406:	e02d      	b.n	800c464 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800c408:	79fa      	ldrb	r2, [r7, #7]
 800c40a:	4923      	ldr	r1, [pc, #140]	; (800c498 <etharp_output_to_arp_index+0x124>)
 800c40c:	4613      	mov	r3, r2
 800c40e:	005b      	lsls	r3, r3, #1
 800c410:	4413      	add	r3, r2
 800c412:	00db      	lsls	r3, r3, #3
 800c414:	440b      	add	r3, r1
 800c416:	3312      	adds	r3, #18
 800c418:	881b      	ldrh	r3, [r3, #0]
 800c41a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c41e:	d321      	bcc.n	800c464 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c420:	79fa      	ldrb	r2, [r7, #7]
 800c422:	4613      	mov	r3, r2
 800c424:	005b      	lsls	r3, r3, #1
 800c426:	4413      	add	r3, r2
 800c428:	00db      	lsls	r3, r3, #3
 800c42a:	4a1b      	ldr	r2, [pc, #108]	; (800c498 <etharp_output_to_arp_index+0x124>)
 800c42c:	4413      	add	r3, r2
 800c42e:	1d19      	adds	r1, r3, #4
 800c430:	79fa      	ldrb	r2, [r7, #7]
 800c432:	4613      	mov	r3, r2
 800c434:	005b      	lsls	r3, r3, #1
 800c436:	4413      	add	r3, r2
 800c438:	00db      	lsls	r3, r3, #3
 800c43a:	3308      	adds	r3, #8
 800c43c:	4a16      	ldr	r2, [pc, #88]	; (800c498 <etharp_output_to_arp_index+0x124>)
 800c43e:	4413      	add	r3, r2
 800c440:	3304      	adds	r3, #4
 800c442:	461a      	mov	r2, r3
 800c444:	68f8      	ldr	r0, [r7, #12]
 800c446:	f000 fafb 	bl	800ca40 <etharp_request_dst>
 800c44a:	4603      	mov	r3, r0
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d109      	bne.n	800c464 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c450:	79fa      	ldrb	r2, [r7, #7]
 800c452:	4911      	ldr	r1, [pc, #68]	; (800c498 <etharp_output_to_arp_index+0x124>)
 800c454:	4613      	mov	r3, r2
 800c456:	005b      	lsls	r3, r3, #1
 800c458:	4413      	add	r3, r2
 800c45a:	00db      	lsls	r3, r3, #3
 800c45c:	440b      	add	r3, r1
 800c45e:	3314      	adds	r3, #20
 800c460:	2203      	movs	r2, #3
 800c462:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800c46a:	79fa      	ldrb	r2, [r7, #7]
 800c46c:	4613      	mov	r3, r2
 800c46e:	005b      	lsls	r3, r3, #1
 800c470:	4413      	add	r3, r2
 800c472:	00db      	lsls	r3, r3, #3
 800c474:	3308      	adds	r3, #8
 800c476:	4a08      	ldr	r2, [pc, #32]	; (800c498 <etharp_output_to_arp_index+0x124>)
 800c478:	4413      	add	r3, r2
 800c47a:	3304      	adds	r3, #4
 800c47c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c480:	9200      	str	r2, [sp, #0]
 800c482:	460a      	mov	r2, r1
 800c484:	68b9      	ldr	r1, [r7, #8]
 800c486:	68f8      	ldr	r0, [r7, #12]
 800c488:	f001 fe3a 	bl	800e100 <ethernet_output>
 800c48c:	4603      	mov	r3, r0
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3710      	adds	r7, #16
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}
 800c496:	bf00      	nop
 800c498:	20000110 	.word	0x20000110
 800c49c:	08011964 	.word	0x08011964
 800c4a0:	08011ad4 	.word	0x08011ad4
 800c4a4:	080119dc 	.word	0x080119dc

0800c4a8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b08a      	sub	sp, #40	; 0x28
 800c4ac:	af02      	add	r7, sp, #8
 800c4ae:	60f8      	str	r0, [r7, #12]
 800c4b0:	60b9      	str	r1, [r7, #8]
 800c4b2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d106      	bne.n	800c4cc <etharp_output+0x24>
 800c4be:	4b73      	ldr	r3, [pc, #460]	; (800c68c <etharp_output+0x1e4>)
 800c4c0:	f240 321e 	movw	r2, #798	; 0x31e
 800c4c4:	4972      	ldr	r1, [pc, #456]	; (800c690 <etharp_output+0x1e8>)
 800c4c6:	4873      	ldr	r0, [pc, #460]	; (800c694 <etharp_output+0x1ec>)
 800c4c8:	f001 fec4 	bl	800e254 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d106      	bne.n	800c4e0 <etharp_output+0x38>
 800c4d2:	4b6e      	ldr	r3, [pc, #440]	; (800c68c <etharp_output+0x1e4>)
 800c4d4:	f240 321f 	movw	r2, #799	; 0x31f
 800c4d8:	496f      	ldr	r1, [pc, #444]	; (800c698 <etharp_output+0x1f0>)
 800c4da:	486e      	ldr	r0, [pc, #440]	; (800c694 <etharp_output+0x1ec>)
 800c4dc:	f001 feba 	bl	800e254 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d106      	bne.n	800c4f4 <etharp_output+0x4c>
 800c4e6:	4b69      	ldr	r3, [pc, #420]	; (800c68c <etharp_output+0x1e4>)
 800c4e8:	f44f 7248 	mov.w	r2, #800	; 0x320
 800c4ec:	496b      	ldr	r1, [pc, #428]	; (800c69c <etharp_output+0x1f4>)
 800c4ee:	4869      	ldr	r0, [pc, #420]	; (800c694 <etharp_output+0x1ec>)
 800c4f0:	f001 feb0 	bl	800e254 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	68f9      	ldr	r1, [r7, #12]
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	f000 fef8 	bl	800d2f0 <ip4_addr_isbroadcast_u32>
 800c500:	4603      	mov	r3, r0
 800c502:	2b00      	cmp	r3, #0
 800c504:	d002      	beq.n	800c50c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800c506:	4b66      	ldr	r3, [pc, #408]	; (800c6a0 <etharp_output+0x1f8>)
 800c508:	61fb      	str	r3, [r7, #28]
 800c50a:	e0af      	b.n	800c66c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c514:	2be0      	cmp	r3, #224	; 0xe0
 800c516:	d118      	bne.n	800c54a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800c518:	2301      	movs	r3, #1
 800c51a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800c51c:	2300      	movs	r3, #0
 800c51e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800c520:	235e      	movs	r3, #94	; 0x5e
 800c522:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	3301      	adds	r3, #1
 800c528:	781b      	ldrb	r3, [r3, #0]
 800c52a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c52e:	b2db      	uxtb	r3, r3
 800c530:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	3302      	adds	r3, #2
 800c536:	781b      	ldrb	r3, [r3, #0]
 800c538:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	3303      	adds	r3, #3
 800c53e:	781b      	ldrb	r3, [r3, #0]
 800c540:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800c542:	f107 0310 	add.w	r3, r7, #16
 800c546:	61fb      	str	r3, [r7, #28]
 800c548:	e090      	b.n	800c66c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681a      	ldr	r2, [r3, #0]
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	3304      	adds	r3, #4
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	405a      	eors	r2, r3
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	3308      	adds	r3, #8
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	4013      	ands	r3, r2
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d012      	beq.n	800c588 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c568:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800c56c:	4293      	cmp	r3, r2
 800c56e:	d00b      	beq.n	800c588 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	330c      	adds	r3, #12
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d003      	beq.n	800c582 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	330c      	adds	r3, #12
 800c57e:	61bb      	str	r3, [r7, #24]
 800c580:	e002      	b.n	800c588 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800c582:	f06f 0303 	mvn.w	r3, #3
 800c586:	e07d      	b.n	800c684 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c588:	4b46      	ldr	r3, [pc, #280]	; (800c6a4 <etharp_output+0x1fc>)
 800c58a:	781b      	ldrb	r3, [r3, #0]
 800c58c:	4619      	mov	r1, r3
 800c58e:	4a46      	ldr	r2, [pc, #280]	; (800c6a8 <etharp_output+0x200>)
 800c590:	460b      	mov	r3, r1
 800c592:	005b      	lsls	r3, r3, #1
 800c594:	440b      	add	r3, r1
 800c596:	00db      	lsls	r3, r3, #3
 800c598:	4413      	add	r3, r2
 800c59a:	3314      	adds	r3, #20
 800c59c:	781b      	ldrb	r3, [r3, #0]
 800c59e:	2b01      	cmp	r3, #1
 800c5a0:	d925      	bls.n	800c5ee <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c5a2:	4b40      	ldr	r3, [pc, #256]	; (800c6a4 <etharp_output+0x1fc>)
 800c5a4:	781b      	ldrb	r3, [r3, #0]
 800c5a6:	4619      	mov	r1, r3
 800c5a8:	4a3f      	ldr	r2, [pc, #252]	; (800c6a8 <etharp_output+0x200>)
 800c5aa:	460b      	mov	r3, r1
 800c5ac:	005b      	lsls	r3, r3, #1
 800c5ae:	440b      	add	r3, r1
 800c5b0:	00db      	lsls	r3, r3, #3
 800c5b2:	4413      	add	r3, r2
 800c5b4:	3308      	adds	r3, #8
 800c5b6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c5b8:	68fa      	ldr	r2, [r7, #12]
 800c5ba:	429a      	cmp	r2, r3
 800c5bc:	d117      	bne.n	800c5ee <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800c5be:	69bb      	ldr	r3, [r7, #24]
 800c5c0:	681a      	ldr	r2, [r3, #0]
 800c5c2:	4b38      	ldr	r3, [pc, #224]	; (800c6a4 <etharp_output+0x1fc>)
 800c5c4:	781b      	ldrb	r3, [r3, #0]
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	4937      	ldr	r1, [pc, #220]	; (800c6a8 <etharp_output+0x200>)
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	005b      	lsls	r3, r3, #1
 800c5ce:	4403      	add	r3, r0
 800c5d0:	00db      	lsls	r3, r3, #3
 800c5d2:	440b      	add	r3, r1
 800c5d4:	3304      	adds	r3, #4
 800c5d6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c5d8:	429a      	cmp	r2, r3
 800c5da:	d108      	bne.n	800c5ee <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800c5dc:	4b31      	ldr	r3, [pc, #196]	; (800c6a4 <etharp_output+0x1fc>)
 800c5de:	781b      	ldrb	r3, [r3, #0]
 800c5e0:	461a      	mov	r2, r3
 800c5e2:	68b9      	ldr	r1, [r7, #8]
 800c5e4:	68f8      	ldr	r0, [r7, #12]
 800c5e6:	f7ff fec5 	bl	800c374 <etharp_output_to_arp_index>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	e04a      	b.n	800c684 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	75fb      	strb	r3, [r7, #23]
 800c5f2:	e031      	b.n	800c658 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c5f4:	7dfa      	ldrb	r2, [r7, #23]
 800c5f6:	492c      	ldr	r1, [pc, #176]	; (800c6a8 <etharp_output+0x200>)
 800c5f8:	4613      	mov	r3, r2
 800c5fa:	005b      	lsls	r3, r3, #1
 800c5fc:	4413      	add	r3, r2
 800c5fe:	00db      	lsls	r3, r3, #3
 800c600:	440b      	add	r3, r1
 800c602:	3314      	adds	r3, #20
 800c604:	781b      	ldrb	r3, [r3, #0]
 800c606:	2b01      	cmp	r3, #1
 800c608:	d923      	bls.n	800c652 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800c60a:	7dfa      	ldrb	r2, [r7, #23]
 800c60c:	4926      	ldr	r1, [pc, #152]	; (800c6a8 <etharp_output+0x200>)
 800c60e:	4613      	mov	r3, r2
 800c610:	005b      	lsls	r3, r3, #1
 800c612:	4413      	add	r3, r2
 800c614:	00db      	lsls	r3, r3, #3
 800c616:	440b      	add	r3, r1
 800c618:	3308      	adds	r3, #8
 800c61a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c61c:	68fa      	ldr	r2, [r7, #12]
 800c61e:	429a      	cmp	r2, r3
 800c620:	d117      	bne.n	800c652 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800c622:	69bb      	ldr	r3, [r7, #24]
 800c624:	6819      	ldr	r1, [r3, #0]
 800c626:	7dfa      	ldrb	r2, [r7, #23]
 800c628:	481f      	ldr	r0, [pc, #124]	; (800c6a8 <etharp_output+0x200>)
 800c62a:	4613      	mov	r3, r2
 800c62c:	005b      	lsls	r3, r3, #1
 800c62e:	4413      	add	r3, r2
 800c630:	00db      	lsls	r3, r3, #3
 800c632:	4403      	add	r3, r0
 800c634:	3304      	adds	r3, #4
 800c636:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800c638:	4299      	cmp	r1, r3
 800c63a:	d10a      	bne.n	800c652 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800c63c:	4a19      	ldr	r2, [pc, #100]	; (800c6a4 <etharp_output+0x1fc>)
 800c63e:	7dfb      	ldrb	r3, [r7, #23]
 800c640:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800c642:	7dfb      	ldrb	r3, [r7, #23]
 800c644:	461a      	mov	r2, r3
 800c646:	68b9      	ldr	r1, [r7, #8]
 800c648:	68f8      	ldr	r0, [r7, #12]
 800c64a:	f7ff fe93 	bl	800c374 <etharp_output_to_arp_index>
 800c64e:	4603      	mov	r3, r0
 800c650:	e018      	b.n	800c684 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c652:	7dfb      	ldrb	r3, [r7, #23]
 800c654:	3301      	adds	r3, #1
 800c656:	75fb      	strb	r3, [r7, #23]
 800c658:	7dfb      	ldrb	r3, [r7, #23]
 800c65a:	2b09      	cmp	r3, #9
 800c65c:	d9ca      	bls.n	800c5f4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800c65e:	68ba      	ldr	r2, [r7, #8]
 800c660:	69b9      	ldr	r1, [r7, #24]
 800c662:	68f8      	ldr	r0, [r7, #12]
 800c664:	f000 f822 	bl	800c6ac <etharp_query>
 800c668:	4603      	mov	r3, r0
 800c66a:	e00b      	b.n	800c684 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c672:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c676:	9300      	str	r3, [sp, #0]
 800c678:	69fb      	ldr	r3, [r7, #28]
 800c67a:	68b9      	ldr	r1, [r7, #8]
 800c67c:	68f8      	ldr	r0, [r7, #12]
 800c67e:	f001 fd3f 	bl	800e100 <ethernet_output>
 800c682:	4603      	mov	r3, r0
}
 800c684:	4618      	mov	r0, r3
 800c686:	3720      	adds	r7, #32
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}
 800c68c:	08011964 	.word	0x08011964
 800c690:	08011ab4 	.word	0x08011ab4
 800c694:	080119dc 	.word	0x080119dc
 800c698:	08011b04 	.word	0x08011b04
 800c69c:	08011aa4 	.word	0x08011aa4
 800c6a0:	0801210c 	.word	0x0801210c
 800c6a4:	20000200 	.word	0x20000200
 800c6a8:	20000110 	.word	0x20000110

0800c6ac <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b08c      	sub	sp, #48	; 0x30
 800c6b0:	af02      	add	r7, sp, #8
 800c6b2:	60f8      	str	r0, [r7, #12]
 800c6b4:	60b9      	str	r1, [r7, #8]
 800c6b6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	3326      	adds	r3, #38	; 0x26
 800c6bc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800c6be:	23ff      	movs	r3, #255	; 0xff
 800c6c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	68f9      	ldr	r1, [r7, #12]
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f000 fe0e 	bl	800d2f0 <ip4_addr_isbroadcast_u32>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d10c      	bne.n	800c6f4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c6e2:	2be0      	cmp	r3, #224	; 0xe0
 800c6e4:	d006      	beq.n	800c6f4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d003      	beq.n	800c6f4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d102      	bne.n	800c6fa <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c6f4:	f06f 030f 	mvn.w	r3, #15
 800c6f8:	e101      	b.n	800c8fe <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800c6fa:	68fa      	ldr	r2, [r7, #12]
 800c6fc:	2101      	movs	r1, #1
 800c6fe:	68b8      	ldr	r0, [r7, #8]
 800c700:	f7ff fb60 	bl	800bdc4 <etharp_find_entry>
 800c704:	4603      	mov	r3, r0
 800c706:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800c708:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	da02      	bge.n	800c716 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800c710:	8a7b      	ldrh	r3, [r7, #18]
 800c712:	b25b      	sxtb	r3, r3
 800c714:	e0f3      	b.n	800c8fe <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800c716:	8a7b      	ldrh	r3, [r7, #18]
 800c718:	2b7e      	cmp	r3, #126	; 0x7e
 800c71a:	d906      	bls.n	800c72a <etharp_query+0x7e>
 800c71c:	4b7a      	ldr	r3, [pc, #488]	; (800c908 <etharp_query+0x25c>)
 800c71e:	f240 32c1 	movw	r2, #961	; 0x3c1
 800c722:	497a      	ldr	r1, [pc, #488]	; (800c90c <etharp_query+0x260>)
 800c724:	487a      	ldr	r0, [pc, #488]	; (800c910 <etharp_query+0x264>)
 800c726:	f001 fd95 	bl	800e254 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800c72a:	8a7b      	ldrh	r3, [r7, #18]
 800c72c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800c72e:	7c7a      	ldrb	r2, [r7, #17]
 800c730:	4978      	ldr	r1, [pc, #480]	; (800c914 <etharp_query+0x268>)
 800c732:	4613      	mov	r3, r2
 800c734:	005b      	lsls	r3, r3, #1
 800c736:	4413      	add	r3, r2
 800c738:	00db      	lsls	r3, r3, #3
 800c73a:	440b      	add	r3, r1
 800c73c:	3314      	adds	r3, #20
 800c73e:	781b      	ldrb	r3, [r3, #0]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d115      	bne.n	800c770 <etharp_query+0xc4>
    is_new_entry = 1;
 800c744:	2301      	movs	r3, #1
 800c746:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800c748:	7c7a      	ldrb	r2, [r7, #17]
 800c74a:	4972      	ldr	r1, [pc, #456]	; (800c914 <etharp_query+0x268>)
 800c74c:	4613      	mov	r3, r2
 800c74e:	005b      	lsls	r3, r3, #1
 800c750:	4413      	add	r3, r2
 800c752:	00db      	lsls	r3, r3, #3
 800c754:	440b      	add	r3, r1
 800c756:	3314      	adds	r3, #20
 800c758:	2201      	movs	r2, #1
 800c75a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800c75c:	7c7a      	ldrb	r2, [r7, #17]
 800c75e:	496d      	ldr	r1, [pc, #436]	; (800c914 <etharp_query+0x268>)
 800c760:	4613      	mov	r3, r2
 800c762:	005b      	lsls	r3, r3, #1
 800c764:	4413      	add	r3, r2
 800c766:	00db      	lsls	r3, r3, #3
 800c768:	440b      	add	r3, r1
 800c76a:	3308      	adds	r3, #8
 800c76c:	68fa      	ldr	r2, [r7, #12]
 800c76e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800c770:	7c7a      	ldrb	r2, [r7, #17]
 800c772:	4968      	ldr	r1, [pc, #416]	; (800c914 <etharp_query+0x268>)
 800c774:	4613      	mov	r3, r2
 800c776:	005b      	lsls	r3, r3, #1
 800c778:	4413      	add	r3, r2
 800c77a:	00db      	lsls	r3, r3, #3
 800c77c:	440b      	add	r3, r1
 800c77e:	3314      	adds	r3, #20
 800c780:	781b      	ldrb	r3, [r3, #0]
 800c782:	2b01      	cmp	r3, #1
 800c784:	d011      	beq.n	800c7aa <etharp_query+0xfe>
 800c786:	7c7a      	ldrb	r2, [r7, #17]
 800c788:	4962      	ldr	r1, [pc, #392]	; (800c914 <etharp_query+0x268>)
 800c78a:	4613      	mov	r3, r2
 800c78c:	005b      	lsls	r3, r3, #1
 800c78e:	4413      	add	r3, r2
 800c790:	00db      	lsls	r3, r3, #3
 800c792:	440b      	add	r3, r1
 800c794:	3314      	adds	r3, #20
 800c796:	781b      	ldrb	r3, [r3, #0]
 800c798:	2b01      	cmp	r3, #1
 800c79a:	d806      	bhi.n	800c7aa <etharp_query+0xfe>
 800c79c:	4b5a      	ldr	r3, [pc, #360]	; (800c908 <etharp_query+0x25c>)
 800c79e:	f240 32cd 	movw	r2, #973	; 0x3cd
 800c7a2:	495d      	ldr	r1, [pc, #372]	; (800c918 <etharp_query+0x26c>)
 800c7a4:	485a      	ldr	r0, [pc, #360]	; (800c910 <etharp_query+0x264>)
 800c7a6:	f001 fd55 	bl	800e254 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800c7aa:	6a3b      	ldr	r3, [r7, #32]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d102      	bne.n	800c7b6 <etharp_query+0x10a>
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d10c      	bne.n	800c7d0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800c7b6:	68b9      	ldr	r1, [r7, #8]
 800c7b8:	68f8      	ldr	r0, [r7, #12]
 800c7ba:	f000 f963 	bl	800ca84 <etharp_request>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d102      	bne.n	800c7d0 <etharp_query+0x124>
      return result;
 800c7ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c7ce:	e096      	b.n	800c8fe <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d106      	bne.n	800c7e4 <etharp_query+0x138>
 800c7d6:	4b4c      	ldr	r3, [pc, #304]	; (800c908 <etharp_query+0x25c>)
 800c7d8:	f240 32e1 	movw	r2, #993	; 0x3e1
 800c7dc:	494f      	ldr	r1, [pc, #316]	; (800c91c <etharp_query+0x270>)
 800c7de:	484c      	ldr	r0, [pc, #304]	; (800c910 <etharp_query+0x264>)
 800c7e0:	f001 fd38 	bl	800e254 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800c7e4:	7c7a      	ldrb	r2, [r7, #17]
 800c7e6:	494b      	ldr	r1, [pc, #300]	; (800c914 <etharp_query+0x268>)
 800c7e8:	4613      	mov	r3, r2
 800c7ea:	005b      	lsls	r3, r3, #1
 800c7ec:	4413      	add	r3, r2
 800c7ee:	00db      	lsls	r3, r3, #3
 800c7f0:	440b      	add	r3, r1
 800c7f2:	3314      	adds	r3, #20
 800c7f4:	781b      	ldrb	r3, [r3, #0]
 800c7f6:	2b01      	cmp	r3, #1
 800c7f8:	d917      	bls.n	800c82a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800c7fa:	4a49      	ldr	r2, [pc, #292]	; (800c920 <etharp_query+0x274>)
 800c7fc:	7c7b      	ldrb	r3, [r7, #17]
 800c7fe:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800c800:	7c7a      	ldrb	r2, [r7, #17]
 800c802:	4613      	mov	r3, r2
 800c804:	005b      	lsls	r3, r3, #1
 800c806:	4413      	add	r3, r2
 800c808:	00db      	lsls	r3, r3, #3
 800c80a:	3308      	adds	r3, #8
 800c80c:	4a41      	ldr	r2, [pc, #260]	; (800c914 <etharp_query+0x268>)
 800c80e:	4413      	add	r3, r2
 800c810:	3304      	adds	r3, #4
 800c812:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c816:	9200      	str	r2, [sp, #0]
 800c818:	697a      	ldr	r2, [r7, #20]
 800c81a:	6879      	ldr	r1, [r7, #4]
 800c81c:	68f8      	ldr	r0, [r7, #12]
 800c81e:	f001 fc6f 	bl	800e100 <ethernet_output>
 800c822:	4603      	mov	r3, r0
 800c824:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c828:	e067      	b.n	800c8fa <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c82a:	7c7a      	ldrb	r2, [r7, #17]
 800c82c:	4939      	ldr	r1, [pc, #228]	; (800c914 <etharp_query+0x268>)
 800c82e:	4613      	mov	r3, r2
 800c830:	005b      	lsls	r3, r3, #1
 800c832:	4413      	add	r3, r2
 800c834:	00db      	lsls	r3, r3, #3
 800c836:	440b      	add	r3, r1
 800c838:	3314      	adds	r3, #20
 800c83a:	781b      	ldrb	r3, [r3, #0]
 800c83c:	2b01      	cmp	r3, #1
 800c83e:	d15c      	bne.n	800c8fa <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800c840:	2300      	movs	r3, #0
 800c842:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c848:	e01c      	b.n	800c884 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800c84a:	69fb      	ldr	r3, [r7, #28]
 800c84c:	895a      	ldrh	r2, [r3, #10]
 800c84e:	69fb      	ldr	r3, [r7, #28]
 800c850:	891b      	ldrh	r3, [r3, #8]
 800c852:	429a      	cmp	r2, r3
 800c854:	d10a      	bne.n	800c86c <etharp_query+0x1c0>
 800c856:	69fb      	ldr	r3, [r7, #28]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d006      	beq.n	800c86c <etharp_query+0x1c0>
 800c85e:	4b2a      	ldr	r3, [pc, #168]	; (800c908 <etharp_query+0x25c>)
 800c860:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800c864:	492f      	ldr	r1, [pc, #188]	; (800c924 <etharp_query+0x278>)
 800c866:	482a      	ldr	r0, [pc, #168]	; (800c910 <etharp_query+0x264>)
 800c868:	f001 fcf4 	bl	800e254 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800c86c:	69fb      	ldr	r3, [r7, #28]
 800c86e:	7b1b      	ldrb	r3, [r3, #12]
 800c870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c874:	2b00      	cmp	r3, #0
 800c876:	d002      	beq.n	800c87e <etharp_query+0x1d2>
        copy_needed = 1;
 800c878:	2301      	movs	r3, #1
 800c87a:	61bb      	str	r3, [r7, #24]
        break;
 800c87c:	e005      	b.n	800c88a <etharp_query+0x1de>
      }
      p = p->next;
 800c87e:	69fb      	ldr	r3, [r7, #28]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c884:	69fb      	ldr	r3, [r7, #28]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d1df      	bne.n	800c84a <etharp_query+0x19e>
    }
    if (copy_needed) {
 800c88a:	69bb      	ldr	r3, [r7, #24]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d007      	beq.n	800c8a0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800c890:	687a      	ldr	r2, [r7, #4]
 800c892:	f44f 7120 	mov.w	r1, #640	; 0x280
 800c896:	200e      	movs	r0, #14
 800c898:	f7f9 f9dc 	bl	8005c54 <pbuf_clone>
 800c89c:	61f8      	str	r0, [r7, #28]
 800c89e:	e004      	b.n	800c8aa <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800c8a4:	69f8      	ldr	r0, [r7, #28]
 800c8a6:	f7f8 ff77 	bl	8005798 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800c8aa:	69fb      	ldr	r3, [r7, #28]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d021      	beq.n	800c8f4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800c8b0:	7c7a      	ldrb	r2, [r7, #17]
 800c8b2:	4918      	ldr	r1, [pc, #96]	; (800c914 <etharp_query+0x268>)
 800c8b4:	4613      	mov	r3, r2
 800c8b6:	005b      	lsls	r3, r3, #1
 800c8b8:	4413      	add	r3, r2
 800c8ba:	00db      	lsls	r3, r3, #3
 800c8bc:	440b      	add	r3, r1
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d00a      	beq.n	800c8da <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800c8c4:	7c7a      	ldrb	r2, [r7, #17]
 800c8c6:	4913      	ldr	r1, [pc, #76]	; (800c914 <etharp_query+0x268>)
 800c8c8:	4613      	mov	r3, r2
 800c8ca:	005b      	lsls	r3, r3, #1
 800c8cc:	4413      	add	r3, r2
 800c8ce:	00db      	lsls	r3, r3, #3
 800c8d0:	440b      	add	r3, r1
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	f7f8 febf 	bl	8005658 <pbuf_free>
      }
      arp_table[i].q = p;
 800c8da:	7c7a      	ldrb	r2, [r7, #17]
 800c8dc:	490d      	ldr	r1, [pc, #52]	; (800c914 <etharp_query+0x268>)
 800c8de:	4613      	mov	r3, r2
 800c8e0:	005b      	lsls	r3, r3, #1
 800c8e2:	4413      	add	r3, r2
 800c8e4:	00db      	lsls	r3, r3, #3
 800c8e6:	440b      	add	r3, r1
 800c8e8:	69fa      	ldr	r2, [r7, #28]
 800c8ea:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c8f2:	e002      	b.n	800c8fa <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800c8f4:	23ff      	movs	r3, #255	; 0xff
 800c8f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800c8fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	3728      	adds	r7, #40	; 0x28
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}
 800c906:	bf00      	nop
 800c908:	08011964 	.word	0x08011964
 800c90c:	08011b10 	.word	0x08011b10
 800c910:	080119dc 	.word	0x080119dc
 800c914:	20000110 	.word	0x20000110
 800c918:	08011b20 	.word	0x08011b20
 800c91c:	08011b04 	.word	0x08011b04
 800c920:	20000200 	.word	0x20000200
 800c924:	08011b48 	.word	0x08011b48

0800c928 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b08a      	sub	sp, #40	; 0x28
 800c92c:	af02      	add	r7, sp, #8
 800c92e:	60f8      	str	r0, [r7, #12]
 800c930:	60b9      	str	r1, [r7, #8]
 800c932:	607a      	str	r2, [r7, #4]
 800c934:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800c936:	2300      	movs	r3, #0
 800c938:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d106      	bne.n	800c94e <etharp_raw+0x26>
 800c940:	4b3a      	ldr	r3, [pc, #232]	; (800ca2c <etharp_raw+0x104>)
 800c942:	f240 4257 	movw	r2, #1111	; 0x457
 800c946:	493a      	ldr	r1, [pc, #232]	; (800ca30 <etharp_raw+0x108>)
 800c948:	483a      	ldr	r0, [pc, #232]	; (800ca34 <etharp_raw+0x10c>)
 800c94a:	f001 fc83 	bl	800e254 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800c94e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c952:	211c      	movs	r1, #28
 800c954:	200e      	movs	r0, #14
 800c956:	f7f8 fb9b 	bl	8005090 <pbuf_alloc>
 800c95a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800c95c:	69bb      	ldr	r3, [r7, #24]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d102      	bne.n	800c968 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800c962:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c966:	e05d      	b.n	800ca24 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800c968:	69bb      	ldr	r3, [r7, #24]
 800c96a:	895b      	ldrh	r3, [r3, #10]
 800c96c:	2b1b      	cmp	r3, #27
 800c96e:	d806      	bhi.n	800c97e <etharp_raw+0x56>
 800c970:	4b2e      	ldr	r3, [pc, #184]	; (800ca2c <etharp_raw+0x104>)
 800c972:	f240 4262 	movw	r2, #1122	; 0x462
 800c976:	4930      	ldr	r1, [pc, #192]	; (800ca38 <etharp_raw+0x110>)
 800c978:	482e      	ldr	r0, [pc, #184]	; (800ca34 <etharp_raw+0x10c>)
 800c97a:	f001 fc6b 	bl	800e254 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800c97e:	69bb      	ldr	r3, [r7, #24]
 800c980:	685b      	ldr	r3, [r3, #4]
 800c982:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800c984:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c986:	4618      	mov	r0, r3
 800c988:	f7f7 fbb2 	bl	80040f0 <lwip_htons>
 800c98c:	4603      	mov	r3, r0
 800c98e:	461a      	mov	r2, r3
 800c990:	697b      	ldr	r3, [r7, #20]
 800c992:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c99a:	2b06      	cmp	r3, #6
 800c99c:	d006      	beq.n	800c9ac <etharp_raw+0x84>
 800c99e:	4b23      	ldr	r3, [pc, #140]	; (800ca2c <etharp_raw+0x104>)
 800c9a0:	f240 4269 	movw	r2, #1129	; 0x469
 800c9a4:	4925      	ldr	r1, [pc, #148]	; (800ca3c <etharp_raw+0x114>)
 800c9a6:	4823      	ldr	r0, [pc, #140]	; (800ca34 <etharp_raw+0x10c>)
 800c9a8:	f001 fc54 	bl	800e254 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	3308      	adds	r3, #8
 800c9b0:	2206      	movs	r2, #6
 800c9b2:	6839      	ldr	r1, [r7, #0]
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f001 fc1d 	bl	800e1f4 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	3312      	adds	r3, #18
 800c9be:	2206      	movs	r2, #6
 800c9c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f001 fc16 	bl	800e1f4 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800c9c8:	697b      	ldr	r3, [r7, #20]
 800c9ca:	330e      	adds	r3, #14
 800c9cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9ce:	6812      	ldr	r2, [r2, #0]
 800c9d0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800c9d2:	697b      	ldr	r3, [r7, #20]
 800c9d4:	3318      	adds	r3, #24
 800c9d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9d8:	6812      	ldr	r2, [r2, #0]
 800c9da:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	2200      	movs	r2, #0
 800c9e0:	701a      	strb	r2, [r3, #0]
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	f042 0201 	orr.w	r2, r2, #1
 800c9e8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800c9ea:	697b      	ldr	r3, [r7, #20]
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	f042 0208 	orr.w	r2, r2, #8
 800c9f2:	709a      	strb	r2, [r3, #2]
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800c9f8:	697b      	ldr	r3, [r7, #20]
 800c9fa:	2206      	movs	r2, #6
 800c9fc:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800c9fe:	697b      	ldr	r3, [r7, #20]
 800ca00:	2204      	movs	r2, #4
 800ca02:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800ca04:	f640 0306 	movw	r3, #2054	; 0x806
 800ca08:	9300      	str	r3, [sp, #0]
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	68ba      	ldr	r2, [r7, #8]
 800ca0e:	69b9      	ldr	r1, [r7, #24]
 800ca10:	68f8      	ldr	r0, [r7, #12]
 800ca12:	f001 fb75 	bl	800e100 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800ca16:	69b8      	ldr	r0, [r7, #24]
 800ca18:	f7f8 fe1e 	bl	8005658 <pbuf_free>
  p = NULL;
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800ca20:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	3720      	adds	r7, #32
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}
 800ca2c:	08011964 	.word	0x08011964
 800ca30:	08011ab4 	.word	0x08011ab4
 800ca34:	080119dc 	.word	0x080119dc
 800ca38:	08011b64 	.word	0x08011b64
 800ca3c:	08011b98 	.word	0x08011b98

0800ca40 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b088      	sub	sp, #32
 800ca44:	af04      	add	r7, sp, #16
 800ca46:	60f8      	str	r0, [r7, #12]
 800ca48:	60b9      	str	r1, [r7, #8]
 800ca4a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ca5c:	2201      	movs	r2, #1
 800ca5e:	9203      	str	r2, [sp, #12]
 800ca60:	68ba      	ldr	r2, [r7, #8]
 800ca62:	9202      	str	r2, [sp, #8]
 800ca64:	4a06      	ldr	r2, [pc, #24]	; (800ca80 <etharp_request_dst+0x40>)
 800ca66:	9201      	str	r2, [sp, #4]
 800ca68:	9300      	str	r3, [sp, #0]
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	687a      	ldr	r2, [r7, #4]
 800ca6e:	68f8      	ldr	r0, [r7, #12]
 800ca70:	f7ff ff5a 	bl	800c928 <etharp_raw>
 800ca74:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	3710      	adds	r7, #16
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd80      	pop	{r7, pc}
 800ca7e:	bf00      	nop
 800ca80:	08012114 	.word	0x08012114

0800ca84 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b082      	sub	sp, #8
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800ca8e:	4a05      	ldr	r2, [pc, #20]	; (800caa4 <etharp_request+0x20>)
 800ca90:	6839      	ldr	r1, [r7, #0]
 800ca92:	6878      	ldr	r0, [r7, #4]
 800ca94:	f7ff ffd4 	bl	800ca40 <etharp_request_dst>
 800ca98:	4603      	mov	r3, r0
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3708      	adds	r7, #8
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}
 800caa2:	bf00      	nop
 800caa4:	0801210c 	.word	0x0801210c

0800caa8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b08e      	sub	sp, #56	; 0x38
 800caac:	af04      	add	r7, sp, #16
 800caae:	6078      	str	r0, [r7, #4]
 800cab0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800cab2:	4b79      	ldr	r3, [pc, #484]	; (800cc98 <icmp_input+0x1f0>)
 800cab4:	689b      	ldr	r3, [r3, #8]
 800cab6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800cab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caba:	781b      	ldrb	r3, [r3, #0]
 800cabc:	f003 030f 	and.w	r3, r3, #15
 800cac0:	b2db      	uxtb	r3, r3
 800cac2:	009b      	lsls	r3, r3, #2
 800cac4:	b2db      	uxtb	r3, r3
 800cac6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800cac8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800caca:	2b13      	cmp	r3, #19
 800cacc:	f240 80cd 	bls.w	800cc6a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	895b      	ldrh	r3, [r3, #10]
 800cad4:	2b03      	cmp	r3, #3
 800cad6:	f240 80ca 	bls.w	800cc6e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	685b      	ldr	r3, [r3, #4]
 800cade:	781b      	ldrb	r3, [r3, #0]
 800cae0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800cae4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800cae8:	2b00      	cmp	r3, #0
 800caea:	f000 80b7 	beq.w	800cc5c <icmp_input+0x1b4>
 800caee:	2b08      	cmp	r3, #8
 800caf0:	f040 80b7 	bne.w	800cc62 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800caf4:	4b69      	ldr	r3, [pc, #420]	; (800cc9c <icmp_input+0x1f4>)
 800caf6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800caf8:	4b67      	ldr	r3, [pc, #412]	; (800cc98 <icmp_input+0x1f0>)
 800cafa:	695b      	ldr	r3, [r3, #20]
 800cafc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cb00:	2be0      	cmp	r3, #224	; 0xe0
 800cb02:	f000 80bb 	beq.w	800cc7c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800cb06:	4b64      	ldr	r3, [pc, #400]	; (800cc98 <icmp_input+0x1f0>)
 800cb08:	695b      	ldr	r3, [r3, #20]
 800cb0a:	4a63      	ldr	r2, [pc, #396]	; (800cc98 <icmp_input+0x1f0>)
 800cb0c:	6812      	ldr	r2, [r2, #0]
 800cb0e:	4611      	mov	r1, r2
 800cb10:	4618      	mov	r0, r3
 800cb12:	f000 fbed 	bl	800d2f0 <ip4_addr_isbroadcast_u32>
 800cb16:	4603      	mov	r3, r0
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	f040 80b1 	bne.w	800cc80 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	891b      	ldrh	r3, [r3, #8]
 800cb22:	2b07      	cmp	r3, #7
 800cb24:	f240 80a5 	bls.w	800cc72 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800cb28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cb2a:	330e      	adds	r3, #14
 800cb2c:	4619      	mov	r1, r3
 800cb2e:	6878      	ldr	r0, [r7, #4]
 800cb30:	f7f8 fcfc 	bl	800552c <pbuf_add_header>
 800cb34:	4603      	mov	r3, r0
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d04b      	beq.n	800cbd2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	891a      	ldrh	r2, [r3, #8]
 800cb3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cb40:	4413      	add	r3, r2
 800cb42:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	891b      	ldrh	r3, [r3, #8]
 800cb48:	8b7a      	ldrh	r2, [r7, #26]
 800cb4a:	429a      	cmp	r2, r3
 800cb4c:	f0c0 809a 	bcc.w	800cc84 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800cb50:	8b7b      	ldrh	r3, [r7, #26]
 800cb52:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cb56:	4619      	mov	r1, r3
 800cb58:	200e      	movs	r0, #14
 800cb5a:	f7f8 fa99 	bl	8005090 <pbuf_alloc>
 800cb5e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800cb60:	697b      	ldr	r3, [r7, #20]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	f000 8090 	beq.w	800cc88 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800cb68:	697b      	ldr	r3, [r7, #20]
 800cb6a:	895b      	ldrh	r3, [r3, #10]
 800cb6c:	461a      	mov	r2, r3
 800cb6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cb70:	3308      	adds	r3, #8
 800cb72:	429a      	cmp	r2, r3
 800cb74:	d203      	bcs.n	800cb7e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800cb76:	6978      	ldr	r0, [r7, #20]
 800cb78:	f7f8 fd6e 	bl	8005658 <pbuf_free>
          goto icmperr;
 800cb7c:	e085      	b.n	800cc8a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800cb7e:	697b      	ldr	r3, [r7, #20]
 800cb80:	685b      	ldr	r3, [r3, #4]
 800cb82:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cb84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cb86:	4618      	mov	r0, r3
 800cb88:	f001 fb34 	bl	800e1f4 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800cb8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cb8e:	4619      	mov	r1, r3
 800cb90:	6978      	ldr	r0, [r7, #20]
 800cb92:	f7f8 fcdb 	bl	800554c <pbuf_remove_header>
 800cb96:	4603      	mov	r3, r0
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d009      	beq.n	800cbb0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800cb9c:	4b40      	ldr	r3, [pc, #256]	; (800cca0 <icmp_input+0x1f8>)
 800cb9e:	22b6      	movs	r2, #182	; 0xb6
 800cba0:	4940      	ldr	r1, [pc, #256]	; (800cca4 <icmp_input+0x1fc>)
 800cba2:	4841      	ldr	r0, [pc, #260]	; (800cca8 <icmp_input+0x200>)
 800cba4:	f001 fb56 	bl	800e254 <iprintf>
          pbuf_free(r);
 800cba8:	6978      	ldr	r0, [r7, #20]
 800cbaa:	f7f8 fd55 	bl	8005658 <pbuf_free>
          goto icmperr;
 800cbae:	e06c      	b.n	800cc8a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800cbb0:	6879      	ldr	r1, [r7, #4]
 800cbb2:	6978      	ldr	r0, [r7, #20]
 800cbb4:	f7f8 fe78 	bl	80058a8 <pbuf_copy>
 800cbb8:	4603      	mov	r3, r0
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d003      	beq.n	800cbc6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800cbbe:	6978      	ldr	r0, [r7, #20]
 800cbc0:	f7f8 fd4a 	bl	8005658 <pbuf_free>
          goto icmperr;
 800cbc4:	e061      	b.n	800cc8a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	f7f8 fd46 	bl	8005658 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800cbcc:	697b      	ldr	r3, [r7, #20]
 800cbce:	607b      	str	r3, [r7, #4]
 800cbd0:	e00f      	b.n	800cbf2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800cbd2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cbd4:	330e      	adds	r3, #14
 800cbd6:	4619      	mov	r1, r3
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f7f8 fcb7 	bl	800554c <pbuf_remove_header>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d006      	beq.n	800cbf2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800cbe4:	4b2e      	ldr	r3, [pc, #184]	; (800cca0 <icmp_input+0x1f8>)
 800cbe6:	22c7      	movs	r2, #199	; 0xc7
 800cbe8:	4930      	ldr	r1, [pc, #192]	; (800ccac <icmp_input+0x204>)
 800cbea:	482f      	ldr	r0, [pc, #188]	; (800cca8 <icmp_input+0x200>)
 800cbec:	f001 fb32 	bl	800e254 <iprintf>
          goto icmperr;
 800cbf0:	e04b      	b.n	800cc8a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	685b      	ldr	r3, [r3, #4]
 800cbf6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800cbf8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cbfa:	4619      	mov	r1, r3
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f7f8 fc95 	bl	800552c <pbuf_add_header>
 800cc02:	4603      	mov	r3, r0
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d12b      	bne.n	800cc60 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	685b      	ldr	r3, [r3, #4]
 800cc0c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800cc0e:	69fb      	ldr	r3, [r7, #28]
 800cc10:	681a      	ldr	r2, [r3, #0]
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800cc16:	4b20      	ldr	r3, [pc, #128]	; (800cc98 <icmp_input+0x1f0>)
 800cc18:	691a      	ldr	r2, [r3, #16]
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800cc1e:	693b      	ldr	r3, [r7, #16]
 800cc20:	2200      	movs	r2, #0
 800cc22:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800cc24:	693b      	ldr	r3, [r7, #16]
 800cc26:	2200      	movs	r2, #0
 800cc28:	709a      	strb	r2, [r3, #2]
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	22ff      	movs	r2, #255	; 0xff
 800cc32:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	2200      	movs	r2, #0
 800cc38:	729a      	strb	r2, [r3, #10]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	9302      	str	r3, [sp, #8]
 800cc42:	2301      	movs	r3, #1
 800cc44:	9301      	str	r3, [sp, #4]
 800cc46:	2300      	movs	r3, #0
 800cc48:	9300      	str	r3, [sp, #0]
 800cc4a:	23ff      	movs	r3, #255	; 0xff
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	69f9      	ldr	r1, [r7, #28]
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f000 fa75 	bl	800d140 <ip4_output_if>
 800cc56:	4603      	mov	r3, r0
 800cc58:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800cc5a:	e001      	b.n	800cc60 <icmp_input+0x1b8>
      break;
 800cc5c:	bf00      	nop
 800cc5e:	e000      	b.n	800cc62 <icmp_input+0x1ba>
      break;
 800cc60:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f7f8 fcf8 	bl	8005658 <pbuf_free>
  return;
 800cc68:	e013      	b.n	800cc92 <icmp_input+0x1ea>
    goto lenerr;
 800cc6a:	bf00      	nop
 800cc6c:	e002      	b.n	800cc74 <icmp_input+0x1cc>
    goto lenerr;
 800cc6e:	bf00      	nop
 800cc70:	e000      	b.n	800cc74 <icmp_input+0x1cc>
        goto lenerr;
 800cc72:	bf00      	nop
lenerr:
  pbuf_free(p);
 800cc74:	6878      	ldr	r0, [r7, #4]
 800cc76:	f7f8 fcef 	bl	8005658 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800cc7a:	e00a      	b.n	800cc92 <icmp_input+0x1ea>
        goto icmperr;
 800cc7c:	bf00      	nop
 800cc7e:	e004      	b.n	800cc8a <icmp_input+0x1e2>
        goto icmperr;
 800cc80:	bf00      	nop
 800cc82:	e002      	b.n	800cc8a <icmp_input+0x1e2>
          goto icmperr;
 800cc84:	bf00      	nop
 800cc86:	e000      	b.n	800cc8a <icmp_input+0x1e2>
          goto icmperr;
 800cc88:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f7f8 fce4 	bl	8005658 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800cc90:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800cc92:	3728      	adds	r7, #40	; 0x28
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}
 800cc98:	200033fc 	.word	0x200033fc
 800cc9c:	20003410 	.word	0x20003410
 800cca0:	08011bdc 	.word	0x08011bdc
 800cca4:	08011c14 	.word	0x08011c14
 800cca8:	08011c4c 	.word	0x08011c4c
 800ccac:	08011c74 	.word	0x08011c74

0800ccb0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b082      	sub	sp, #8
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
 800ccb8:	460b      	mov	r3, r1
 800ccba:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800ccbc:	78fb      	ldrb	r3, [r7, #3]
 800ccbe:	461a      	mov	r2, r3
 800ccc0:	2103      	movs	r1, #3
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f000 f814 	bl	800ccf0 <icmp_send_response>
}
 800ccc8:	bf00      	nop
 800ccca:	3708      	adds	r7, #8
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}

0800ccd0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b082      	sub	sp, #8
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
 800ccd8:	460b      	mov	r3, r1
 800ccda:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800ccdc:	78fb      	ldrb	r3, [r7, #3]
 800ccde:	461a      	mov	r2, r3
 800cce0:	210b      	movs	r1, #11
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	f000 f804 	bl	800ccf0 <icmp_send_response>
}
 800cce8:	bf00      	nop
 800ccea:	3708      	adds	r7, #8
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bd80      	pop	{r7, pc}

0800ccf0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b08c      	sub	sp, #48	; 0x30
 800ccf4:	af04      	add	r7, sp, #16
 800ccf6:	6078      	str	r0, [r7, #4]
 800ccf8:	460b      	mov	r3, r1
 800ccfa:	70fb      	strb	r3, [r7, #3]
 800ccfc:	4613      	mov	r3, r2
 800ccfe:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800cd00:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cd04:	2124      	movs	r1, #36	; 0x24
 800cd06:	2022      	movs	r0, #34	; 0x22
 800cd08:	f7f8 f9c2 	bl	8005090 <pbuf_alloc>
 800cd0c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800cd0e:	69fb      	ldr	r3, [r7, #28]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d04c      	beq.n	800cdae <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800cd14:	69fb      	ldr	r3, [r7, #28]
 800cd16:	895b      	ldrh	r3, [r3, #10]
 800cd18:	2b23      	cmp	r3, #35	; 0x23
 800cd1a:	d806      	bhi.n	800cd2a <icmp_send_response+0x3a>
 800cd1c:	4b26      	ldr	r3, [pc, #152]	; (800cdb8 <icmp_send_response+0xc8>)
 800cd1e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800cd22:	4926      	ldr	r1, [pc, #152]	; (800cdbc <icmp_send_response+0xcc>)
 800cd24:	4826      	ldr	r0, [pc, #152]	; (800cdc0 <icmp_send_response+0xd0>)
 800cd26:	f001 fa95 	bl	800e254 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	685b      	ldr	r3, [r3, #4]
 800cd2e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800cd30:	69fb      	ldr	r3, [r7, #28]
 800cd32:	685b      	ldr	r3, [r3, #4]
 800cd34:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	78fa      	ldrb	r2, [r7, #3]
 800cd3a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800cd3c:	697b      	ldr	r3, [r7, #20]
 800cd3e:	78ba      	ldrb	r2, [r7, #2]
 800cd40:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	2200      	movs	r2, #0
 800cd46:	711a      	strb	r2, [r3, #4]
 800cd48:	2200      	movs	r2, #0
 800cd4a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	2200      	movs	r2, #0
 800cd50:	719a      	strb	r2, [r3, #6]
 800cd52:	2200      	movs	r2, #0
 800cd54:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800cd56:	69fb      	ldr	r3, [r7, #28]
 800cd58:	685b      	ldr	r3, [r3, #4]
 800cd5a:	f103 0008 	add.w	r0, r3, #8
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	685b      	ldr	r3, [r3, #4]
 800cd62:	221c      	movs	r2, #28
 800cd64:	4619      	mov	r1, r3
 800cd66:	f001 fa45 	bl	800e1f4 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800cd6a:	69bb      	ldr	r3, [r7, #24]
 800cd6c:	68db      	ldr	r3, [r3, #12]
 800cd6e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800cd70:	f107 030c 	add.w	r3, r7, #12
 800cd74:	4618      	mov	r0, r3
 800cd76:	f000 f825 	bl	800cdc4 <ip4_route>
 800cd7a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800cd7c:	693b      	ldr	r3, [r7, #16]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d011      	beq.n	800cda6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800cd82:	697b      	ldr	r3, [r7, #20]
 800cd84:	2200      	movs	r2, #0
 800cd86:	709a      	strb	r2, [r3, #2]
 800cd88:	2200      	movs	r2, #0
 800cd8a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800cd8c:	f107 020c 	add.w	r2, r7, #12
 800cd90:	693b      	ldr	r3, [r7, #16]
 800cd92:	9302      	str	r3, [sp, #8]
 800cd94:	2301      	movs	r3, #1
 800cd96:	9301      	str	r3, [sp, #4]
 800cd98:	2300      	movs	r3, #0
 800cd9a:	9300      	str	r3, [sp, #0]
 800cd9c:	23ff      	movs	r3, #255	; 0xff
 800cd9e:	2100      	movs	r1, #0
 800cda0:	69f8      	ldr	r0, [r7, #28]
 800cda2:	f000 f9cd 	bl	800d140 <ip4_output_if>
  }
  pbuf_free(q);
 800cda6:	69f8      	ldr	r0, [r7, #28]
 800cda8:	f7f8 fc56 	bl	8005658 <pbuf_free>
 800cdac:	e000      	b.n	800cdb0 <icmp_send_response+0xc0>
    return;
 800cdae:	bf00      	nop
}
 800cdb0:	3720      	adds	r7, #32
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bd80      	pop	{r7, pc}
 800cdb6:	bf00      	nop
 800cdb8:	08011bdc 	.word	0x08011bdc
 800cdbc:	08011ca8 	.word	0x08011ca8
 800cdc0:	08011c4c 	.word	0x08011c4c

0800cdc4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	b085      	sub	sp, #20
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800cdcc:	4b33      	ldr	r3, [pc, #204]	; (800ce9c <ip4_route+0xd8>)
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	60fb      	str	r3, [r7, #12]
 800cdd2:	e036      	b.n	800ce42 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cdda:	f003 0301 	and.w	r3, r3, #1
 800cdde:	b2db      	uxtb	r3, r3
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d02b      	beq.n	800ce3c <ip4_route+0x78>
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cdea:	089b      	lsrs	r3, r3, #2
 800cdec:	f003 0301 	and.w	r3, r3, #1
 800cdf0:	b2db      	uxtb	r3, r3
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d022      	beq.n	800ce3c <ip4_route+0x78>
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	3304      	adds	r3, #4
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d01d      	beq.n	800ce3c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681a      	ldr	r2, [r3, #0]
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	3304      	adds	r3, #4
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	405a      	eors	r2, r3
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	3308      	adds	r3, #8
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	4013      	ands	r3, r2
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d101      	bne.n	800ce1c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	e038      	b.n	800ce8e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ce22:	f003 0302 	and.w	r3, r3, #2
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d108      	bne.n	800ce3c <ip4_route+0x78>
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681a      	ldr	r2, [r3, #0]
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	330c      	adds	r3, #12
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	429a      	cmp	r2, r3
 800ce36:	d101      	bne.n	800ce3c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	e028      	b.n	800ce8e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	60fb      	str	r3, [r7, #12]
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d1c5      	bne.n	800cdd4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ce48:	4b15      	ldr	r3, [pc, #84]	; (800cea0 <ip4_route+0xdc>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d01a      	beq.n	800ce86 <ip4_route+0xc2>
 800ce50:	4b13      	ldr	r3, [pc, #76]	; (800cea0 <ip4_route+0xdc>)
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ce58:	f003 0301 	and.w	r3, r3, #1
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d012      	beq.n	800ce86 <ip4_route+0xc2>
 800ce60:	4b0f      	ldr	r3, [pc, #60]	; (800cea0 <ip4_route+0xdc>)
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ce68:	f003 0304 	and.w	r3, r3, #4
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d00a      	beq.n	800ce86 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ce70:	4b0b      	ldr	r3, [pc, #44]	; (800cea0 <ip4_route+0xdc>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	3304      	adds	r3, #4
 800ce76:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d004      	beq.n	800ce86 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	b2db      	uxtb	r3, r3
 800ce82:	2b7f      	cmp	r3, #127	; 0x7f
 800ce84:	d101      	bne.n	800ce8a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800ce86:	2300      	movs	r3, #0
 800ce88:	e001      	b.n	800ce8e <ip4_route+0xca>
  }

  return netif_default;
 800ce8a:	4b05      	ldr	r3, [pc, #20]	; (800cea0 <ip4_route+0xdc>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
}
 800ce8e:	4618      	mov	r0, r3
 800ce90:	3714      	adds	r7, #20
 800ce92:	46bd      	mov	sp, r7
 800ce94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce98:	4770      	bx	lr
 800ce9a:	bf00      	nop
 800ce9c:	20008af0 	.word	0x20008af0
 800cea0:	20008af4 	.word	0x20008af4

0800cea4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b082      	sub	sp, #8
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ceb2:	f003 0301 	and.w	r3, r3, #1
 800ceb6:	b2db      	uxtb	r3, r3
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d016      	beq.n	800ceea <ip4_input_accept+0x46>
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	3304      	adds	r3, #4
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d011      	beq.n	800ceea <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800cec6:	4b0b      	ldr	r3, [pc, #44]	; (800cef4 <ip4_input_accept+0x50>)
 800cec8:	695a      	ldr	r2, [r3, #20]
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	3304      	adds	r3, #4
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	429a      	cmp	r2, r3
 800ced2:	d008      	beq.n	800cee6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800ced4:	4b07      	ldr	r3, [pc, #28]	; (800cef4 <ip4_input_accept+0x50>)
 800ced6:	695b      	ldr	r3, [r3, #20]
 800ced8:	6879      	ldr	r1, [r7, #4]
 800ceda:	4618      	mov	r0, r3
 800cedc:	f000 fa08 	bl	800d2f0 <ip4_addr_isbroadcast_u32>
 800cee0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d001      	beq.n	800ceea <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800cee6:	2301      	movs	r3, #1
 800cee8:	e000      	b.n	800ceec <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800ceea:	2300      	movs	r3, #0
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	3708      	adds	r7, #8
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bd80      	pop	{r7, pc}
 800cef4:	200033fc 	.word	0x200033fc

0800cef8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b086      	sub	sp, #24
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
 800cf00:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	685b      	ldr	r3, [r3, #4]
 800cf06:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	781b      	ldrb	r3, [r3, #0]
 800cf0c:	091b      	lsrs	r3, r3, #4
 800cf0e:	b2db      	uxtb	r3, r3
 800cf10:	2b04      	cmp	r3, #4
 800cf12:	d004      	beq.n	800cf1e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f7f8 fb9f 	bl	8005658 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	e107      	b.n	800d12e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800cf1e:	697b      	ldr	r3, [r7, #20]
 800cf20:	781b      	ldrb	r3, [r3, #0]
 800cf22:	f003 030f 	and.w	r3, r3, #15
 800cf26:	b2db      	uxtb	r3, r3
 800cf28:	009b      	lsls	r3, r3, #2
 800cf2a:	b2db      	uxtb	r3, r3
 800cf2c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800cf2e:	697b      	ldr	r3, [r7, #20]
 800cf30:	885b      	ldrh	r3, [r3, #2]
 800cf32:	b29b      	uxth	r3, r3
 800cf34:	4618      	mov	r0, r3
 800cf36:	f7f7 f8db 	bl	80040f0 <lwip_htons>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	891b      	ldrh	r3, [r3, #8]
 800cf42:	89ba      	ldrh	r2, [r7, #12]
 800cf44:	429a      	cmp	r2, r3
 800cf46:	d204      	bcs.n	800cf52 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800cf48:	89bb      	ldrh	r3, [r7, #12]
 800cf4a:	4619      	mov	r1, r3
 800cf4c:	6878      	ldr	r0, [r7, #4]
 800cf4e:	f7f8 f9fd 	bl	800534c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	895b      	ldrh	r3, [r3, #10]
 800cf56:	89fa      	ldrh	r2, [r7, #14]
 800cf58:	429a      	cmp	r2, r3
 800cf5a:	d807      	bhi.n	800cf6c <ip4_input+0x74>
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	891b      	ldrh	r3, [r3, #8]
 800cf60:	89ba      	ldrh	r2, [r7, #12]
 800cf62:	429a      	cmp	r2, r3
 800cf64:	d802      	bhi.n	800cf6c <ip4_input+0x74>
 800cf66:	89fb      	ldrh	r3, [r7, #14]
 800cf68:	2b13      	cmp	r3, #19
 800cf6a:	d804      	bhi.n	800cf76 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f7f8 fb73 	bl	8005658 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800cf72:	2300      	movs	r3, #0
 800cf74:	e0db      	b.n	800d12e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800cf76:	697b      	ldr	r3, [r7, #20]
 800cf78:	691b      	ldr	r3, [r3, #16]
 800cf7a:	4a6f      	ldr	r2, [pc, #444]	; (800d138 <ip4_input+0x240>)
 800cf7c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	68db      	ldr	r3, [r3, #12]
 800cf82:	4a6d      	ldr	r2, [pc, #436]	; (800d138 <ip4_input+0x240>)
 800cf84:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cf86:	4b6c      	ldr	r3, [pc, #432]	; (800d138 <ip4_input+0x240>)
 800cf88:	695b      	ldr	r3, [r3, #20]
 800cf8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cf8e:	2be0      	cmp	r3, #224	; 0xe0
 800cf90:	d112      	bne.n	800cfb8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cf98:	f003 0301 	and.w	r3, r3, #1
 800cf9c:	b2db      	uxtb	r3, r3
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d007      	beq.n	800cfb2 <ip4_input+0xba>
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	3304      	adds	r3, #4
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d002      	beq.n	800cfb2 <ip4_input+0xba>
      netif = inp;
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	613b      	str	r3, [r7, #16]
 800cfb0:	e02a      	b.n	800d008 <ip4_input+0x110>
    } else {
      netif = NULL;
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	613b      	str	r3, [r7, #16]
 800cfb6:	e027      	b.n	800d008 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800cfb8:	6838      	ldr	r0, [r7, #0]
 800cfba:	f7ff ff73 	bl	800cea4 <ip4_input_accept>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d002      	beq.n	800cfca <ip4_input+0xd2>
      netif = inp;
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	613b      	str	r3, [r7, #16]
 800cfc8:	e01e      	b.n	800d008 <ip4_input+0x110>
    } else {
      netif = NULL;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800cfce:	4b5a      	ldr	r3, [pc, #360]	; (800d138 <ip4_input+0x240>)
 800cfd0:	695b      	ldr	r3, [r3, #20]
 800cfd2:	b2db      	uxtb	r3, r3
 800cfd4:	2b7f      	cmp	r3, #127	; 0x7f
 800cfd6:	d017      	beq.n	800d008 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800cfd8:	4b58      	ldr	r3, [pc, #352]	; (800d13c <ip4_input+0x244>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	613b      	str	r3, [r7, #16]
 800cfde:	e00e      	b.n	800cffe <ip4_input+0x106>
          if (netif == inp) {
 800cfe0:	693a      	ldr	r2, [r7, #16]
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	429a      	cmp	r2, r3
 800cfe6:	d006      	beq.n	800cff6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800cfe8:	6938      	ldr	r0, [r7, #16]
 800cfea:	f7ff ff5b 	bl	800cea4 <ip4_input_accept>
 800cfee:	4603      	mov	r3, r0
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d108      	bne.n	800d006 <ip4_input+0x10e>
 800cff4:	e000      	b.n	800cff8 <ip4_input+0x100>
            continue;
 800cff6:	bf00      	nop
        NETIF_FOREACH(netif) {
 800cff8:	693b      	ldr	r3, [r7, #16]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	613b      	str	r3, [r7, #16]
 800cffe:	693b      	ldr	r3, [r7, #16]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d1ed      	bne.n	800cfe0 <ip4_input+0xe8>
 800d004:	e000      	b.n	800d008 <ip4_input+0x110>
            break;
 800d006:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d008:	4b4b      	ldr	r3, [pc, #300]	; (800d138 <ip4_input+0x240>)
 800d00a:	691b      	ldr	r3, [r3, #16]
 800d00c:	6839      	ldr	r1, [r7, #0]
 800d00e:	4618      	mov	r0, r3
 800d010:	f000 f96e 	bl	800d2f0 <ip4_addr_isbroadcast_u32>
 800d014:	4603      	mov	r3, r0
 800d016:	2b00      	cmp	r3, #0
 800d018:	d105      	bne.n	800d026 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800d01a:	4b47      	ldr	r3, [pc, #284]	; (800d138 <ip4_input+0x240>)
 800d01c:	691b      	ldr	r3, [r3, #16]
 800d01e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d022:	2be0      	cmp	r3, #224	; 0xe0
 800d024:	d104      	bne.n	800d030 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800d026:	6878      	ldr	r0, [r7, #4]
 800d028:	f7f8 fb16 	bl	8005658 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800d02c:	2300      	movs	r3, #0
 800d02e:	e07e      	b.n	800d12e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d104      	bne.n	800d040 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f7f8 fb0e 	bl	8005658 <pbuf_free>
    return ERR_OK;
 800d03c:	2300      	movs	r3, #0
 800d03e:	e076      	b.n	800d12e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800d040:	697b      	ldr	r3, [r7, #20]
 800d042:	88db      	ldrh	r3, [r3, #6]
 800d044:	b29b      	uxth	r3, r3
 800d046:	461a      	mov	r2, r3
 800d048:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800d04c:	4013      	ands	r3, r2
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d00b      	beq.n	800d06a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800d052:	6878      	ldr	r0, [r7, #4]
 800d054:	f000 fc92 	bl	800d97c <ip4_reass>
 800d058:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d101      	bne.n	800d064 <ip4_input+0x16c>
      return ERR_OK;
 800d060:	2300      	movs	r3, #0
 800d062:	e064      	b.n	800d12e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	685b      	ldr	r3, [r3, #4]
 800d068:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800d06a:	4a33      	ldr	r2, [pc, #204]	; (800d138 <ip4_input+0x240>)
 800d06c:	693b      	ldr	r3, [r7, #16]
 800d06e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800d070:	4a31      	ldr	r2, [pc, #196]	; (800d138 <ip4_input+0x240>)
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800d076:	4a30      	ldr	r2, [pc, #192]	; (800d138 <ip4_input+0x240>)
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800d07c:	697b      	ldr	r3, [r7, #20]
 800d07e:	781b      	ldrb	r3, [r3, #0]
 800d080:	f003 030f 	and.w	r3, r3, #15
 800d084:	b2db      	uxtb	r3, r3
 800d086:	009b      	lsls	r3, r3, #2
 800d088:	b2db      	uxtb	r3, r3
 800d08a:	b29a      	uxth	r2, r3
 800d08c:	4b2a      	ldr	r3, [pc, #168]	; (800d138 <ip4_input+0x240>)
 800d08e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800d090:	89fb      	ldrh	r3, [r7, #14]
 800d092:	4619      	mov	r1, r3
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	f7f8 fa59 	bl	800554c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	7a5b      	ldrb	r3, [r3, #9]
 800d09e:	2b11      	cmp	r3, #17
 800d0a0:	d006      	beq.n	800d0b0 <ip4_input+0x1b8>
 800d0a2:	2b11      	cmp	r3, #17
 800d0a4:	dc13      	bgt.n	800d0ce <ip4_input+0x1d6>
 800d0a6:	2b01      	cmp	r3, #1
 800d0a8:	d00c      	beq.n	800d0c4 <ip4_input+0x1cc>
 800d0aa:	2b06      	cmp	r3, #6
 800d0ac:	d005      	beq.n	800d0ba <ip4_input+0x1c2>
 800d0ae:	e00e      	b.n	800d0ce <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800d0b0:	6839      	ldr	r1, [r7, #0]
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f7fe f950 	bl	800b358 <udp_input>
        break;
 800d0b8:	e026      	b.n	800d108 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800d0ba:	6839      	ldr	r1, [r7, #0]
 800d0bc:	6878      	ldr	r0, [r7, #4]
 800d0be:	f7fa f995 	bl	80073ec <tcp_input>
        break;
 800d0c2:	e021      	b.n	800d108 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800d0c4:	6839      	ldr	r1, [r7, #0]
 800d0c6:	6878      	ldr	r0, [r7, #4]
 800d0c8:	f7ff fcee 	bl	800caa8 <icmp_input>
        break;
 800d0cc:	e01c      	b.n	800d108 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d0ce:	4b1a      	ldr	r3, [pc, #104]	; (800d138 <ip4_input+0x240>)
 800d0d0:	695b      	ldr	r3, [r3, #20]
 800d0d2:	6939      	ldr	r1, [r7, #16]
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	f000 f90b 	bl	800d2f0 <ip4_addr_isbroadcast_u32>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d10f      	bne.n	800d100 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d0e0:	4b15      	ldr	r3, [pc, #84]	; (800d138 <ip4_input+0x240>)
 800d0e2:	695b      	ldr	r3, [r3, #20]
 800d0e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d0e8:	2be0      	cmp	r3, #224	; 0xe0
 800d0ea:	d009      	beq.n	800d100 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800d0ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d0f0:	4619      	mov	r1, r3
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f7f8 fa9d 	bl	8005632 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800d0f8:	2102      	movs	r1, #2
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f7ff fdd8 	bl	800ccb0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800d100:	6878      	ldr	r0, [r7, #4]
 800d102:	f7f8 faa9 	bl	8005658 <pbuf_free>
        break;
 800d106:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800d108:	4b0b      	ldr	r3, [pc, #44]	; (800d138 <ip4_input+0x240>)
 800d10a:	2200      	movs	r2, #0
 800d10c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800d10e:	4b0a      	ldr	r3, [pc, #40]	; (800d138 <ip4_input+0x240>)
 800d110:	2200      	movs	r2, #0
 800d112:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800d114:	4b08      	ldr	r3, [pc, #32]	; (800d138 <ip4_input+0x240>)
 800d116:	2200      	movs	r2, #0
 800d118:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800d11a:	4b07      	ldr	r3, [pc, #28]	; (800d138 <ip4_input+0x240>)
 800d11c:	2200      	movs	r2, #0
 800d11e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800d120:	4b05      	ldr	r3, [pc, #20]	; (800d138 <ip4_input+0x240>)
 800d122:	2200      	movs	r2, #0
 800d124:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800d126:	4b04      	ldr	r3, [pc, #16]	; (800d138 <ip4_input+0x240>)
 800d128:	2200      	movs	r2, #0
 800d12a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800d12c:	2300      	movs	r3, #0
}
 800d12e:	4618      	mov	r0, r3
 800d130:	3718      	adds	r7, #24
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}
 800d136:	bf00      	nop
 800d138:	200033fc 	.word	0x200033fc
 800d13c:	20008af0 	.word	0x20008af0

0800d140 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b08a      	sub	sp, #40	; 0x28
 800d144:	af04      	add	r7, sp, #16
 800d146:	60f8      	str	r0, [r7, #12]
 800d148:	60b9      	str	r1, [r7, #8]
 800d14a:	607a      	str	r2, [r7, #4]
 800d14c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800d14e:	68bb      	ldr	r3, [r7, #8]
 800d150:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d009      	beq.n	800d16c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800d158:	68bb      	ldr	r3, [r7, #8]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d003      	beq.n	800d166 <ip4_output_if+0x26>
 800d15e:	68bb      	ldr	r3, [r7, #8]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d102      	bne.n	800d16c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800d166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d168:	3304      	adds	r3, #4
 800d16a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800d16c:	78fa      	ldrb	r2, [r7, #3]
 800d16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d170:	9302      	str	r3, [sp, #8]
 800d172:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d176:	9301      	str	r3, [sp, #4]
 800d178:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d17c:	9300      	str	r3, [sp, #0]
 800d17e:	4613      	mov	r3, r2
 800d180:	687a      	ldr	r2, [r7, #4]
 800d182:	6979      	ldr	r1, [r7, #20]
 800d184:	68f8      	ldr	r0, [r7, #12]
 800d186:	f000 f805 	bl	800d194 <ip4_output_if_src>
 800d18a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800d18c:	4618      	mov	r0, r3
 800d18e:	3718      	adds	r7, #24
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}

0800d194 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b088      	sub	sp, #32
 800d198:	af00      	add	r7, sp, #0
 800d19a:	60f8      	str	r0, [r7, #12]
 800d19c:	60b9      	str	r1, [r7, #8]
 800d19e:	607a      	str	r2, [r7, #4]
 800d1a0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	7b9b      	ldrb	r3, [r3, #14]
 800d1a6:	2b01      	cmp	r3, #1
 800d1a8:	d006      	beq.n	800d1b8 <ip4_output_if_src+0x24>
 800d1aa:	4b4b      	ldr	r3, [pc, #300]	; (800d2d8 <ip4_output_if_src+0x144>)
 800d1ac:	f44f 7255 	mov.w	r2, #852	; 0x354
 800d1b0:	494a      	ldr	r1, [pc, #296]	; (800d2dc <ip4_output_if_src+0x148>)
 800d1b2:	484b      	ldr	r0, [pc, #300]	; (800d2e0 <ip4_output_if_src+0x14c>)
 800d1b4:	f001 f84e 	bl	800e254 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d060      	beq.n	800d280 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800d1be:	2314      	movs	r3, #20
 800d1c0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800d1c2:	2114      	movs	r1, #20
 800d1c4:	68f8      	ldr	r0, [r7, #12]
 800d1c6:	f7f8 f9b1 	bl	800552c <pbuf_add_header>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d002      	beq.n	800d1d6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d1d0:	f06f 0301 	mvn.w	r3, #1
 800d1d4:	e07c      	b.n	800d2d0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	685b      	ldr	r3, [r3, #4]
 800d1da:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	895b      	ldrh	r3, [r3, #10]
 800d1e0:	2b13      	cmp	r3, #19
 800d1e2:	d806      	bhi.n	800d1f2 <ip4_output_if_src+0x5e>
 800d1e4:	4b3c      	ldr	r3, [pc, #240]	; (800d2d8 <ip4_output_if_src+0x144>)
 800d1e6:	f44f 7262 	mov.w	r2, #904	; 0x388
 800d1ea:	493e      	ldr	r1, [pc, #248]	; (800d2e4 <ip4_output_if_src+0x150>)
 800d1ec:	483c      	ldr	r0, [pc, #240]	; (800d2e0 <ip4_output_if_src+0x14c>)
 800d1ee:	f001 f831 	bl	800e254 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800d1f2:	69fb      	ldr	r3, [r7, #28]
 800d1f4:	78fa      	ldrb	r2, [r7, #3]
 800d1f6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800d1f8:	69fb      	ldr	r3, [r7, #28]
 800d1fa:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d1fe:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681a      	ldr	r2, [r3, #0]
 800d204:	69fb      	ldr	r3, [r7, #28]
 800d206:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800d208:	8b7b      	ldrh	r3, [r7, #26]
 800d20a:	089b      	lsrs	r3, r3, #2
 800d20c:	b29b      	uxth	r3, r3
 800d20e:	b2db      	uxtb	r3, r3
 800d210:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d214:	b2da      	uxtb	r2, r3
 800d216:	69fb      	ldr	r3, [r7, #28]
 800d218:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800d21a:	69fb      	ldr	r3, [r7, #28]
 800d21c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d220:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	891b      	ldrh	r3, [r3, #8]
 800d226:	4618      	mov	r0, r3
 800d228:	f7f6 ff62 	bl	80040f0 <lwip_htons>
 800d22c:	4603      	mov	r3, r0
 800d22e:	461a      	mov	r2, r3
 800d230:	69fb      	ldr	r3, [r7, #28]
 800d232:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800d234:	69fb      	ldr	r3, [r7, #28]
 800d236:	2200      	movs	r2, #0
 800d238:	719a      	strb	r2, [r3, #6]
 800d23a:	2200      	movs	r2, #0
 800d23c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d23e:	4b2a      	ldr	r3, [pc, #168]	; (800d2e8 <ip4_output_if_src+0x154>)
 800d240:	881b      	ldrh	r3, [r3, #0]
 800d242:	4618      	mov	r0, r3
 800d244:	f7f6 ff54 	bl	80040f0 <lwip_htons>
 800d248:	4603      	mov	r3, r0
 800d24a:	461a      	mov	r2, r3
 800d24c:	69fb      	ldr	r3, [r7, #28]
 800d24e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800d250:	4b25      	ldr	r3, [pc, #148]	; (800d2e8 <ip4_output_if_src+0x154>)
 800d252:	881b      	ldrh	r3, [r3, #0]
 800d254:	3301      	adds	r3, #1
 800d256:	b29a      	uxth	r2, r3
 800d258:	4b23      	ldr	r3, [pc, #140]	; (800d2e8 <ip4_output_if_src+0x154>)
 800d25a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800d25c:	68bb      	ldr	r3, [r7, #8]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d104      	bne.n	800d26c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800d262:	4b22      	ldr	r3, [pc, #136]	; (800d2ec <ip4_output_if_src+0x158>)
 800d264:	681a      	ldr	r2, [r3, #0]
 800d266:	69fb      	ldr	r3, [r7, #28]
 800d268:	60da      	str	r2, [r3, #12]
 800d26a:	e003      	b.n	800d274 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800d26c:	68bb      	ldr	r3, [r7, #8]
 800d26e:	681a      	ldr	r2, [r3, #0]
 800d270:	69fb      	ldr	r3, [r7, #28]
 800d272:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800d274:	69fb      	ldr	r3, [r7, #28]
 800d276:	2200      	movs	r2, #0
 800d278:	729a      	strb	r2, [r3, #10]
 800d27a:	2200      	movs	r2, #0
 800d27c:	72da      	strb	r2, [r3, #11]
 800d27e:	e00f      	b.n	800d2a0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	895b      	ldrh	r3, [r3, #10]
 800d284:	2b13      	cmp	r3, #19
 800d286:	d802      	bhi.n	800d28e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d288:	f06f 0301 	mvn.w	r3, #1
 800d28c:	e020      	b.n	800d2d0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	685b      	ldr	r3, [r3, #4]
 800d292:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d294:	69fb      	ldr	r3, [r7, #28]
 800d296:	691b      	ldr	r3, [r3, #16]
 800d298:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800d29a:	f107 0314 	add.w	r3, r7, #20
 800d29e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d00c      	beq.n	800d2c2 <ip4_output_if_src+0x12e>
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	891a      	ldrh	r2, [r3, #8]
 800d2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	d906      	bls.n	800d2c2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800d2b4:	687a      	ldr	r2, [r7, #4]
 800d2b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d2b8:	68f8      	ldr	r0, [r7, #12]
 800d2ba:	f000 fd4d 	bl	800dd58 <ip4_frag>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	e006      	b.n	800d2d0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800d2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2c4:	695b      	ldr	r3, [r3, #20]
 800d2c6:	687a      	ldr	r2, [r7, #4]
 800d2c8:	68f9      	ldr	r1, [r7, #12]
 800d2ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2cc:	4798      	blx	r3
 800d2ce:	4603      	mov	r3, r0
}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	3720      	adds	r7, #32
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}
 800d2d8:	08011cd4 	.word	0x08011cd4
 800d2dc:	08011d08 	.word	0x08011d08
 800d2e0:	08011d14 	.word	0x08011d14
 800d2e4:	08011d3c 	.word	0x08011d3c
 800d2e8:	20000202 	.word	0x20000202
 800d2ec:	08012108 	.word	0x08012108

0800d2f0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800d2f0:	b480      	push	{r7}
 800d2f2:	b085      	sub	sp, #20
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
 800d2f8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d304:	d002      	beq.n	800d30c <ip4_addr_isbroadcast_u32+0x1c>
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d101      	bne.n	800d310 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800d30c:	2301      	movs	r3, #1
 800d30e:	e02a      	b.n	800d366 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d316:	f003 0302 	and.w	r3, r3, #2
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d101      	bne.n	800d322 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800d31e:	2300      	movs	r3, #0
 800d320:	e021      	b.n	800d366 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	3304      	adds	r3, #4
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	687a      	ldr	r2, [r7, #4]
 800d32a:	429a      	cmp	r2, r3
 800d32c:	d101      	bne.n	800d332 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800d32e:	2300      	movs	r3, #0
 800d330:	e019      	b.n	800d366 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800d332:	68fa      	ldr	r2, [r7, #12]
 800d334:	683b      	ldr	r3, [r7, #0]
 800d336:	3304      	adds	r3, #4
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	405a      	eors	r2, r3
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	3308      	adds	r3, #8
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	4013      	ands	r3, r2
 800d344:	2b00      	cmp	r3, #0
 800d346:	d10d      	bne.n	800d364 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	3308      	adds	r3, #8
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	43da      	mvns	r2, r3
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	3308      	adds	r3, #8
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d35c:	429a      	cmp	r2, r3
 800d35e:	d101      	bne.n	800d364 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800d360:	2301      	movs	r3, #1
 800d362:	e000      	b.n	800d366 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800d364:	2300      	movs	r3, #0
  }
}
 800d366:	4618      	mov	r0, r3
 800d368:	3714      	adds	r7, #20
 800d36a:	46bd      	mov	sp, r7
 800d36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d370:	4770      	bx	lr
	...

0800d374 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b084      	sub	sp, #16
 800d378:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800d37a:	2300      	movs	r3, #0
 800d37c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800d37e:	4b12      	ldr	r3, [pc, #72]	; (800d3c8 <ip_reass_tmr+0x54>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800d384:	e018      	b.n	800d3b8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	7fdb      	ldrb	r3, [r3, #31]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d00b      	beq.n	800d3a6 <ip_reass_tmr+0x32>
      r->timer--;
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	7fdb      	ldrb	r3, [r3, #31]
 800d392:	3b01      	subs	r3, #1
 800d394:	b2da      	uxtb	r2, r3
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	60fb      	str	r3, [r7, #12]
 800d3a4:	e008      	b.n	800d3b8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800d3b0:	68b9      	ldr	r1, [r7, #8]
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f000 f80a 	bl	800d3cc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d1e3      	bne.n	800d386 <ip_reass_tmr+0x12>
    }
  }
}
 800d3be:	bf00      	nop
 800d3c0:	bf00      	nop
 800d3c2:	3710      	adds	r7, #16
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}
 800d3c8:	20000204 	.word	0x20000204

0800d3cc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b088      	sub	sp, #32
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
 800d3d4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d3da:	683a      	ldr	r2, [r7, #0]
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	429a      	cmp	r2, r3
 800d3e0:	d105      	bne.n	800d3ee <ip_reass_free_complete_datagram+0x22>
 800d3e2:	4b45      	ldr	r3, [pc, #276]	; (800d4f8 <ip_reass_free_complete_datagram+0x12c>)
 800d3e4:	22ab      	movs	r2, #171	; 0xab
 800d3e6:	4945      	ldr	r1, [pc, #276]	; (800d4fc <ip_reass_free_complete_datagram+0x130>)
 800d3e8:	4845      	ldr	r0, [pc, #276]	; (800d500 <ip_reass_free_complete_datagram+0x134>)
 800d3ea:	f000 ff33 	bl	800e254 <iprintf>
  if (prev != NULL) {
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d00a      	beq.n	800d40a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	687a      	ldr	r2, [r7, #4]
 800d3fa:	429a      	cmp	r2, r3
 800d3fc:	d005      	beq.n	800d40a <ip_reass_free_complete_datagram+0x3e>
 800d3fe:	4b3e      	ldr	r3, [pc, #248]	; (800d4f8 <ip_reass_free_complete_datagram+0x12c>)
 800d400:	22ad      	movs	r2, #173	; 0xad
 800d402:	4940      	ldr	r1, [pc, #256]	; (800d504 <ip_reass_free_complete_datagram+0x138>)
 800d404:	483e      	ldr	r0, [pc, #248]	; (800d500 <ip_reass_free_complete_datagram+0x134>)
 800d406:	f000 ff25 	bl	800e254 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	685b      	ldr	r3, [r3, #4]
 800d40e:	685b      	ldr	r3, [r3, #4]
 800d410:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800d412:	697b      	ldr	r3, [r7, #20]
 800d414:	889b      	ldrh	r3, [r3, #4]
 800d416:	b29b      	uxth	r3, r3
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d12a      	bne.n	800d472 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	685b      	ldr	r3, [r3, #4]
 800d420:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800d422:	697b      	ldr	r3, [r7, #20]
 800d424:	681a      	ldr	r2, [r3, #0]
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d42a:	69bb      	ldr	r3, [r7, #24]
 800d42c:	6858      	ldr	r0, [r3, #4]
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	3308      	adds	r3, #8
 800d432:	2214      	movs	r2, #20
 800d434:	4619      	mov	r1, r3
 800d436:	f000 fedd 	bl	800e1f4 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d43a:	2101      	movs	r1, #1
 800d43c:	69b8      	ldr	r0, [r7, #24]
 800d43e:	f7ff fc47 	bl	800ccd0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800d442:	69b8      	ldr	r0, [r7, #24]
 800d444:	f7f8 f990 	bl	8005768 <pbuf_clen>
 800d448:	4603      	mov	r3, r0
 800d44a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d44c:	8bfa      	ldrh	r2, [r7, #30]
 800d44e:	8a7b      	ldrh	r3, [r7, #18]
 800d450:	4413      	add	r3, r2
 800d452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d456:	db05      	blt.n	800d464 <ip_reass_free_complete_datagram+0x98>
 800d458:	4b27      	ldr	r3, [pc, #156]	; (800d4f8 <ip_reass_free_complete_datagram+0x12c>)
 800d45a:	22bc      	movs	r2, #188	; 0xbc
 800d45c:	492a      	ldr	r1, [pc, #168]	; (800d508 <ip_reass_free_complete_datagram+0x13c>)
 800d45e:	4828      	ldr	r0, [pc, #160]	; (800d500 <ip_reass_free_complete_datagram+0x134>)
 800d460:	f000 fef8 	bl	800e254 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d464:	8bfa      	ldrh	r2, [r7, #30]
 800d466:	8a7b      	ldrh	r3, [r7, #18]
 800d468:	4413      	add	r3, r2
 800d46a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800d46c:	69b8      	ldr	r0, [r7, #24]
 800d46e:	f7f8 f8f3 	bl	8005658 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	685b      	ldr	r3, [r3, #4]
 800d476:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800d478:	e01f      	b.n	800d4ba <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800d47a:	69bb      	ldr	r3, [r7, #24]
 800d47c:	685b      	ldr	r3, [r3, #4]
 800d47e:	617b      	str	r3, [r7, #20]
    pcur = p;
 800d480:	69bb      	ldr	r3, [r7, #24]
 800d482:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800d484:	697b      	ldr	r3, [r7, #20]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800d48a:	68f8      	ldr	r0, [r7, #12]
 800d48c:	f7f8 f96c 	bl	8005768 <pbuf_clen>
 800d490:	4603      	mov	r3, r0
 800d492:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d494:	8bfa      	ldrh	r2, [r7, #30]
 800d496:	8a7b      	ldrh	r3, [r7, #18]
 800d498:	4413      	add	r3, r2
 800d49a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d49e:	db05      	blt.n	800d4ac <ip_reass_free_complete_datagram+0xe0>
 800d4a0:	4b15      	ldr	r3, [pc, #84]	; (800d4f8 <ip_reass_free_complete_datagram+0x12c>)
 800d4a2:	22cc      	movs	r2, #204	; 0xcc
 800d4a4:	4918      	ldr	r1, [pc, #96]	; (800d508 <ip_reass_free_complete_datagram+0x13c>)
 800d4a6:	4816      	ldr	r0, [pc, #88]	; (800d500 <ip_reass_free_complete_datagram+0x134>)
 800d4a8:	f000 fed4 	bl	800e254 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d4ac:	8bfa      	ldrh	r2, [r7, #30]
 800d4ae:	8a7b      	ldrh	r3, [r7, #18]
 800d4b0:	4413      	add	r3, r2
 800d4b2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800d4b4:	68f8      	ldr	r0, [r7, #12]
 800d4b6:	f7f8 f8cf 	bl	8005658 <pbuf_free>
  while (p != NULL) {
 800d4ba:	69bb      	ldr	r3, [r7, #24]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d1dc      	bne.n	800d47a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800d4c0:	6839      	ldr	r1, [r7, #0]
 800d4c2:	6878      	ldr	r0, [r7, #4]
 800d4c4:	f000 f8c2 	bl	800d64c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800d4c8:	4b10      	ldr	r3, [pc, #64]	; (800d50c <ip_reass_free_complete_datagram+0x140>)
 800d4ca:	881b      	ldrh	r3, [r3, #0]
 800d4cc:	8bfa      	ldrh	r2, [r7, #30]
 800d4ce:	429a      	cmp	r2, r3
 800d4d0:	d905      	bls.n	800d4de <ip_reass_free_complete_datagram+0x112>
 800d4d2:	4b09      	ldr	r3, [pc, #36]	; (800d4f8 <ip_reass_free_complete_datagram+0x12c>)
 800d4d4:	22d2      	movs	r2, #210	; 0xd2
 800d4d6:	490e      	ldr	r1, [pc, #56]	; (800d510 <ip_reass_free_complete_datagram+0x144>)
 800d4d8:	4809      	ldr	r0, [pc, #36]	; (800d500 <ip_reass_free_complete_datagram+0x134>)
 800d4da:	f000 febb 	bl	800e254 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800d4de:	4b0b      	ldr	r3, [pc, #44]	; (800d50c <ip_reass_free_complete_datagram+0x140>)
 800d4e0:	881a      	ldrh	r2, [r3, #0]
 800d4e2:	8bfb      	ldrh	r3, [r7, #30]
 800d4e4:	1ad3      	subs	r3, r2, r3
 800d4e6:	b29a      	uxth	r2, r3
 800d4e8:	4b08      	ldr	r3, [pc, #32]	; (800d50c <ip_reass_free_complete_datagram+0x140>)
 800d4ea:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800d4ec:	8bfb      	ldrh	r3, [r7, #30]
}
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	3720      	adds	r7, #32
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	bd80      	pop	{r7, pc}
 800d4f6:	bf00      	nop
 800d4f8:	08011d6c 	.word	0x08011d6c
 800d4fc:	08011da8 	.word	0x08011da8
 800d500:	08011db4 	.word	0x08011db4
 800d504:	08011ddc 	.word	0x08011ddc
 800d508:	08011df0 	.word	0x08011df0
 800d50c:	20000208 	.word	0x20000208
 800d510:	08011e10 	.word	0x08011e10

0800d514 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b08a      	sub	sp, #40	; 0x28
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
 800d51c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800d51e:	2300      	movs	r3, #0
 800d520:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800d522:	2300      	movs	r3, #0
 800d524:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800d526:	2300      	movs	r3, #0
 800d528:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800d52a:	2300      	movs	r3, #0
 800d52c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800d52e:	2300      	movs	r3, #0
 800d530:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800d532:	4b28      	ldr	r3, [pc, #160]	; (800d5d4 <ip_reass_remove_oldest_datagram+0xc0>)
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d538:	e030      	b.n	800d59c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d53c:	695a      	ldr	r2, [r3, #20]
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	68db      	ldr	r3, [r3, #12]
 800d542:	429a      	cmp	r2, r3
 800d544:	d10c      	bne.n	800d560 <ip_reass_remove_oldest_datagram+0x4c>
 800d546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d548:	699a      	ldr	r2, [r3, #24]
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	691b      	ldr	r3, [r3, #16]
 800d54e:	429a      	cmp	r2, r3
 800d550:	d106      	bne.n	800d560 <ip_reass_remove_oldest_datagram+0x4c>
 800d552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d554:	899a      	ldrh	r2, [r3, #12]
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	889b      	ldrh	r3, [r3, #4]
 800d55a:	b29b      	uxth	r3, r3
 800d55c:	429a      	cmp	r2, r3
 800d55e:	d014      	beq.n	800d58a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	3301      	adds	r3, #1
 800d564:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800d566:	6a3b      	ldr	r3, [r7, #32]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d104      	bne.n	800d576 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800d56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d56e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d570:	69fb      	ldr	r3, [r7, #28]
 800d572:	61bb      	str	r3, [r7, #24]
 800d574:	e009      	b.n	800d58a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800d576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d578:	7fda      	ldrb	r2, [r3, #31]
 800d57a:	6a3b      	ldr	r3, [r7, #32]
 800d57c:	7fdb      	ldrb	r3, [r3, #31]
 800d57e:	429a      	cmp	r2, r3
 800d580:	d803      	bhi.n	800d58a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800d582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d584:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d586:	69fb      	ldr	r3, [r7, #28]
 800d588:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800d58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d001      	beq.n	800d596 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800d592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d594:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800d596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d1cb      	bne.n	800d53a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800d5a2:	6a3b      	ldr	r3, [r7, #32]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d008      	beq.n	800d5ba <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800d5a8:	69b9      	ldr	r1, [r7, #24]
 800d5aa:	6a38      	ldr	r0, [r7, #32]
 800d5ac:	f7ff ff0e 	bl	800d3cc <ip_reass_free_complete_datagram>
 800d5b0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800d5b2:	697a      	ldr	r2, [r7, #20]
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	4413      	add	r3, r2
 800d5b8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800d5ba:	697a      	ldr	r2, [r7, #20]
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	429a      	cmp	r2, r3
 800d5c0:	da02      	bge.n	800d5c8 <ip_reass_remove_oldest_datagram+0xb4>
 800d5c2:	693b      	ldr	r3, [r7, #16]
 800d5c4:	2b01      	cmp	r3, #1
 800d5c6:	dcac      	bgt.n	800d522 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800d5c8:	697b      	ldr	r3, [r7, #20]
}
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	3728      	adds	r7, #40	; 0x28
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}
 800d5d2:	bf00      	nop
 800d5d4:	20000204 	.word	0x20000204

0800d5d8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b084      	sub	sp, #16
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
 800d5e0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d5e2:	2004      	movs	r0, #4
 800d5e4:	f7f7 f9da 	bl	800499c <memp_malloc>
 800d5e8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d110      	bne.n	800d612 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800d5f0:	6839      	ldr	r1, [r7, #0]
 800d5f2:	6878      	ldr	r0, [r7, #4]
 800d5f4:	f7ff ff8e 	bl	800d514 <ip_reass_remove_oldest_datagram>
 800d5f8:	4602      	mov	r2, r0
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	4293      	cmp	r3, r2
 800d5fe:	dc03      	bgt.n	800d608 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d600:	2004      	movs	r0, #4
 800d602:	f7f7 f9cb 	bl	800499c <memp_malloc>
 800d606:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d101      	bne.n	800d612 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800d60e:	2300      	movs	r3, #0
 800d610:	e016      	b.n	800d640 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800d612:	2220      	movs	r2, #32
 800d614:	2100      	movs	r1, #0
 800d616:	68f8      	ldr	r0, [r7, #12]
 800d618:	f000 fe14 	bl	800e244 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	220f      	movs	r2, #15
 800d620:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800d622:	4b09      	ldr	r3, [pc, #36]	; (800d648 <ip_reass_enqueue_new_datagram+0x70>)
 800d624:	681a      	ldr	r2, [r3, #0]
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800d62a:	4a07      	ldr	r2, [pc, #28]	; (800d648 <ip_reass_enqueue_new_datagram+0x70>)
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	3308      	adds	r3, #8
 800d634:	2214      	movs	r2, #20
 800d636:	6879      	ldr	r1, [r7, #4]
 800d638:	4618      	mov	r0, r3
 800d63a:	f000 fddb 	bl	800e1f4 <memcpy>
  return ipr;
 800d63e:	68fb      	ldr	r3, [r7, #12]
}
 800d640:	4618      	mov	r0, r3
 800d642:	3710      	adds	r7, #16
 800d644:	46bd      	mov	sp, r7
 800d646:	bd80      	pop	{r7, pc}
 800d648:	20000204 	.word	0x20000204

0800d64c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b082      	sub	sp, #8
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
 800d654:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800d656:	4b10      	ldr	r3, [pc, #64]	; (800d698 <ip_reass_dequeue_datagram+0x4c>)
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	687a      	ldr	r2, [r7, #4]
 800d65c:	429a      	cmp	r2, r3
 800d65e:	d104      	bne.n	800d66a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	4a0c      	ldr	r2, [pc, #48]	; (800d698 <ip_reass_dequeue_datagram+0x4c>)
 800d666:	6013      	str	r3, [r2, #0]
 800d668:	e00d      	b.n	800d686 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d106      	bne.n	800d67e <ip_reass_dequeue_datagram+0x32>
 800d670:	4b0a      	ldr	r3, [pc, #40]	; (800d69c <ip_reass_dequeue_datagram+0x50>)
 800d672:	f240 1245 	movw	r2, #325	; 0x145
 800d676:	490a      	ldr	r1, [pc, #40]	; (800d6a0 <ip_reass_dequeue_datagram+0x54>)
 800d678:	480a      	ldr	r0, [pc, #40]	; (800d6a4 <ip_reass_dequeue_datagram+0x58>)
 800d67a:	f000 fdeb 	bl	800e254 <iprintf>
    prev->next = ipr->next;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681a      	ldr	r2, [r3, #0]
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800d686:	6879      	ldr	r1, [r7, #4]
 800d688:	2004      	movs	r0, #4
 800d68a:	f7f7 f9d3 	bl	8004a34 <memp_free>
}
 800d68e:	bf00      	nop
 800d690:	3708      	adds	r7, #8
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}
 800d696:	bf00      	nop
 800d698:	20000204 	.word	0x20000204
 800d69c:	08011d6c 	.word	0x08011d6c
 800d6a0:	08011e34 	.word	0x08011e34
 800d6a4:	08011db4 	.word	0x08011db4

0800d6a8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b08c      	sub	sp, #48	; 0x30
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	60f8      	str	r0, [r7, #12]
 800d6b0:	60b9      	str	r1, [r7, #8]
 800d6b2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800d6b8:	2301      	movs	r3, #1
 800d6ba:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	685b      	ldr	r3, [r3, #4]
 800d6c0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d6c2:	69fb      	ldr	r3, [r7, #28]
 800d6c4:	885b      	ldrh	r3, [r3, #2]
 800d6c6:	b29b      	uxth	r3, r3
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f7f6 fd11 	bl	80040f0 <lwip_htons>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800d6d2:	69fb      	ldr	r3, [r7, #28]
 800d6d4:	781b      	ldrb	r3, [r3, #0]
 800d6d6:	f003 030f 	and.w	r3, r3, #15
 800d6da:	b2db      	uxtb	r3, r3
 800d6dc:	009b      	lsls	r3, r3, #2
 800d6de:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800d6e0:	7e7b      	ldrb	r3, [r7, #25]
 800d6e2:	b29b      	uxth	r3, r3
 800d6e4:	8b7a      	ldrh	r2, [r7, #26]
 800d6e6:	429a      	cmp	r2, r3
 800d6e8:	d202      	bcs.n	800d6f0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d6ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d6ee:	e135      	b.n	800d95c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800d6f0:	7e7b      	ldrb	r3, [r7, #25]
 800d6f2:	b29b      	uxth	r3, r3
 800d6f4:	8b7a      	ldrh	r2, [r7, #26]
 800d6f6:	1ad3      	subs	r3, r2, r3
 800d6f8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800d6fa:	69fb      	ldr	r3, [r7, #28]
 800d6fc:	88db      	ldrh	r3, [r3, #6]
 800d6fe:	b29b      	uxth	r3, r3
 800d700:	4618      	mov	r0, r3
 800d702:	f7f6 fcf5 	bl	80040f0 <lwip_htons>
 800d706:	4603      	mov	r3, r0
 800d708:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d70c:	b29b      	uxth	r3, r3
 800d70e:	00db      	lsls	r3, r3, #3
 800d710:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800d712:	68bb      	ldr	r3, [r7, #8]
 800d714:	685b      	ldr	r3, [r3, #4]
 800d716:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800d718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d71a:	2200      	movs	r2, #0
 800d71c:	701a      	strb	r2, [r3, #0]
 800d71e:	2200      	movs	r2, #0
 800d720:	705a      	strb	r2, [r3, #1]
 800d722:	2200      	movs	r2, #0
 800d724:	709a      	strb	r2, [r3, #2]
 800d726:	2200      	movs	r2, #0
 800d728:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800d72a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d72c:	8afa      	ldrh	r2, [r7, #22]
 800d72e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800d730:	8afa      	ldrh	r2, [r7, #22]
 800d732:	8b7b      	ldrh	r3, [r7, #26]
 800d734:	4413      	add	r3, r2
 800d736:	b29a      	uxth	r2, r3
 800d738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d73a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800d73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d73e:	88db      	ldrh	r3, [r3, #6]
 800d740:	b29b      	uxth	r3, r3
 800d742:	8afa      	ldrh	r2, [r7, #22]
 800d744:	429a      	cmp	r2, r3
 800d746:	d902      	bls.n	800d74e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d748:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d74c:	e106      	b.n	800d95c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	685b      	ldr	r3, [r3, #4]
 800d752:	627b      	str	r3, [r7, #36]	; 0x24
 800d754:	e068      	b.n	800d828 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800d756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d758:	685b      	ldr	r3, [r3, #4]
 800d75a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800d75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d75e:	889b      	ldrh	r3, [r3, #4]
 800d760:	b29a      	uxth	r2, r3
 800d762:	693b      	ldr	r3, [r7, #16]
 800d764:	889b      	ldrh	r3, [r3, #4]
 800d766:	b29b      	uxth	r3, r3
 800d768:	429a      	cmp	r2, r3
 800d76a:	d235      	bcs.n	800d7d8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800d76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d76e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d770:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800d772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d774:	2b00      	cmp	r3, #0
 800d776:	d020      	beq.n	800d7ba <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800d778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d77a:	889b      	ldrh	r3, [r3, #4]
 800d77c:	b29a      	uxth	r2, r3
 800d77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d780:	88db      	ldrh	r3, [r3, #6]
 800d782:	b29b      	uxth	r3, r3
 800d784:	429a      	cmp	r2, r3
 800d786:	d307      	bcc.n	800d798 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800d788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d78a:	88db      	ldrh	r3, [r3, #6]
 800d78c:	b29a      	uxth	r2, r3
 800d78e:	693b      	ldr	r3, [r7, #16]
 800d790:	889b      	ldrh	r3, [r3, #4]
 800d792:	b29b      	uxth	r3, r3
 800d794:	429a      	cmp	r2, r3
 800d796:	d902      	bls.n	800d79e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d798:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d79c:	e0de      	b.n	800d95c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800d79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a0:	68ba      	ldr	r2, [r7, #8]
 800d7a2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800d7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a6:	88db      	ldrh	r3, [r3, #6]
 800d7a8:	b29a      	uxth	r2, r3
 800d7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ac:	889b      	ldrh	r3, [r3, #4]
 800d7ae:	b29b      	uxth	r3, r3
 800d7b0:	429a      	cmp	r2, r3
 800d7b2:	d03d      	beq.n	800d830 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800d7b8:	e03a      	b.n	800d830 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800d7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7bc:	88db      	ldrh	r3, [r3, #6]
 800d7be:	b29a      	uxth	r2, r3
 800d7c0:	693b      	ldr	r3, [r7, #16]
 800d7c2:	889b      	ldrh	r3, [r3, #4]
 800d7c4:	b29b      	uxth	r3, r3
 800d7c6:	429a      	cmp	r2, r3
 800d7c8:	d902      	bls.n	800d7d0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d7ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d7ce:	e0c5      	b.n	800d95c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	68ba      	ldr	r2, [r7, #8]
 800d7d4:	605a      	str	r2, [r3, #4]
      break;
 800d7d6:	e02b      	b.n	800d830 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800d7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7da:	889b      	ldrh	r3, [r3, #4]
 800d7dc:	b29a      	uxth	r2, r3
 800d7de:	693b      	ldr	r3, [r7, #16]
 800d7e0:	889b      	ldrh	r3, [r3, #4]
 800d7e2:	b29b      	uxth	r3, r3
 800d7e4:	429a      	cmp	r2, r3
 800d7e6:	d102      	bne.n	800d7ee <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d7e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d7ec:	e0b6      	b.n	800d95c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800d7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7f0:	889b      	ldrh	r3, [r3, #4]
 800d7f2:	b29a      	uxth	r2, r3
 800d7f4:	693b      	ldr	r3, [r7, #16]
 800d7f6:	88db      	ldrh	r3, [r3, #6]
 800d7f8:	b29b      	uxth	r3, r3
 800d7fa:	429a      	cmp	r2, r3
 800d7fc:	d202      	bcs.n	800d804 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d7fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d802:	e0ab      	b.n	800d95c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800d804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d806:	2b00      	cmp	r3, #0
 800d808:	d009      	beq.n	800d81e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800d80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d80c:	88db      	ldrh	r3, [r3, #6]
 800d80e:	b29a      	uxth	r2, r3
 800d810:	693b      	ldr	r3, [r7, #16]
 800d812:	889b      	ldrh	r3, [r3, #4]
 800d814:	b29b      	uxth	r3, r3
 800d816:	429a      	cmp	r2, r3
 800d818:	d001      	beq.n	800d81e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d81a:	2300      	movs	r3, #0
 800d81c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800d81e:	693b      	ldr	r3, [r7, #16]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800d824:	693b      	ldr	r3, [r7, #16]
 800d826:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800d828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d193      	bne.n	800d756 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800d82e:	e000      	b.n	800d832 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800d830:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800d832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d834:	2b00      	cmp	r3, #0
 800d836:	d12d      	bne.n	800d894 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800d838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d01c      	beq.n	800d878 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800d83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d840:	88db      	ldrh	r3, [r3, #6]
 800d842:	b29a      	uxth	r2, r3
 800d844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d846:	889b      	ldrh	r3, [r3, #4]
 800d848:	b29b      	uxth	r3, r3
 800d84a:	429a      	cmp	r2, r3
 800d84c:	d906      	bls.n	800d85c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800d84e:	4b45      	ldr	r3, [pc, #276]	; (800d964 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d850:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800d854:	4944      	ldr	r1, [pc, #272]	; (800d968 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d856:	4845      	ldr	r0, [pc, #276]	; (800d96c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d858:	f000 fcfc 	bl	800e254 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800d85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d85e:	68ba      	ldr	r2, [r7, #8]
 800d860:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800d862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d864:	88db      	ldrh	r3, [r3, #6]
 800d866:	b29a      	uxth	r2, r3
 800d868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d86a:	889b      	ldrh	r3, [r3, #4]
 800d86c:	b29b      	uxth	r3, r3
 800d86e:	429a      	cmp	r2, r3
 800d870:	d010      	beq.n	800d894 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800d872:	2300      	movs	r3, #0
 800d874:	623b      	str	r3, [r7, #32]
 800d876:	e00d      	b.n	800d894 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	685b      	ldr	r3, [r3, #4]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d006      	beq.n	800d88e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800d880:	4b38      	ldr	r3, [pc, #224]	; (800d964 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d882:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800d886:	493a      	ldr	r1, [pc, #232]	; (800d970 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800d888:	4838      	ldr	r0, [pc, #224]	; (800d96c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d88a:	f000 fce3 	bl	800e254 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	68ba      	ldr	r2, [r7, #8]
 800d892:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d105      	bne.n	800d8a6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	7f9b      	ldrb	r3, [r3, #30]
 800d89e:	f003 0301 	and.w	r3, r3, #1
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d059      	beq.n	800d95a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800d8a6:	6a3b      	ldr	r3, [r7, #32]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d04f      	beq.n	800d94c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	685b      	ldr	r3, [r3, #4]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d006      	beq.n	800d8c2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	685b      	ldr	r3, [r3, #4]
 800d8b8:	685b      	ldr	r3, [r3, #4]
 800d8ba:	889b      	ldrh	r3, [r3, #4]
 800d8bc:	b29b      	uxth	r3, r3
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d002      	beq.n	800d8c8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	623b      	str	r3, [r7, #32]
 800d8c6:	e041      	b.n	800d94c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800d8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ca:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800d8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800d8d2:	e012      	b.n	800d8fa <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800d8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d6:	685b      	ldr	r3, [r3, #4]
 800d8d8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800d8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8dc:	88db      	ldrh	r3, [r3, #6]
 800d8de:	b29a      	uxth	r2, r3
 800d8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e2:	889b      	ldrh	r3, [r3, #4]
 800d8e4:	b29b      	uxth	r3, r3
 800d8e6:	429a      	cmp	r2, r3
 800d8e8:	d002      	beq.n	800d8f0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	623b      	str	r3, [r7, #32]
            break;
 800d8ee:	e007      	b.n	800d900 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800d8f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8f2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800d8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800d8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d1e9      	bne.n	800d8d4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800d900:	6a3b      	ldr	r3, [r7, #32]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d022      	beq.n	800d94c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	685b      	ldr	r3, [r3, #4]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d106      	bne.n	800d91c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800d90e:	4b15      	ldr	r3, [pc, #84]	; (800d964 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d910:	f240 12df 	movw	r2, #479	; 0x1df
 800d914:	4917      	ldr	r1, [pc, #92]	; (800d974 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800d916:	4815      	ldr	r0, [pc, #84]	; (800d96c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d918:	f000 fc9c 	bl	800e254 <iprintf>
          LWIP_ASSERT("sanity check",
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	685b      	ldr	r3, [r3, #4]
 800d920:	685b      	ldr	r3, [r3, #4]
 800d922:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d924:	429a      	cmp	r2, r3
 800d926:	d106      	bne.n	800d936 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800d928:	4b0e      	ldr	r3, [pc, #56]	; (800d964 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d92a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d92e:	4911      	ldr	r1, [pc, #68]	; (800d974 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800d930:	480e      	ldr	r0, [pc, #56]	; (800d96c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d932:	f000 fc8f 	bl	800e254 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800d936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d006      	beq.n	800d94c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800d93e:	4b09      	ldr	r3, [pc, #36]	; (800d964 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d940:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800d944:	490c      	ldr	r1, [pc, #48]	; (800d978 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800d946:	4809      	ldr	r0, [pc, #36]	; (800d96c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d948:	f000 fc84 	bl	800e254 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800d94c:	6a3b      	ldr	r3, [r7, #32]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	bf14      	ite	ne
 800d952:	2301      	movne	r3, #1
 800d954:	2300      	moveq	r3, #0
 800d956:	b2db      	uxtb	r3, r3
 800d958:	e000      	b.n	800d95c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800d95a:	2300      	movs	r3, #0
}
 800d95c:	4618      	mov	r0, r3
 800d95e:	3730      	adds	r7, #48	; 0x30
 800d960:	46bd      	mov	sp, r7
 800d962:	bd80      	pop	{r7, pc}
 800d964:	08011d6c 	.word	0x08011d6c
 800d968:	08011e50 	.word	0x08011e50
 800d96c:	08011db4 	.word	0x08011db4
 800d970:	08011e70 	.word	0x08011e70
 800d974:	08011ea8 	.word	0x08011ea8
 800d978:	08011eb8 	.word	0x08011eb8

0800d97c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b08e      	sub	sp, #56	; 0x38
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	685b      	ldr	r3, [r3, #4]
 800d988:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800d98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d98c:	781b      	ldrb	r3, [r3, #0]
 800d98e:	f003 030f 	and.w	r3, r3, #15
 800d992:	b2db      	uxtb	r3, r3
 800d994:	009b      	lsls	r3, r3, #2
 800d996:	b2db      	uxtb	r3, r3
 800d998:	2b14      	cmp	r3, #20
 800d99a:	f040 8167 	bne.w	800dc6c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800d99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9a0:	88db      	ldrh	r3, [r3, #6]
 800d9a2:	b29b      	uxth	r3, r3
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f7f6 fba3 	bl	80040f0 <lwip_htons>
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d9b0:	b29b      	uxth	r3, r3
 800d9b2:	00db      	lsls	r3, r3, #3
 800d9b4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d9b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9b8:	885b      	ldrh	r3, [r3, #2]
 800d9ba:	b29b      	uxth	r3, r3
 800d9bc:	4618      	mov	r0, r3
 800d9be:	f7f6 fb97 	bl	80040f0 <lwip_htons>
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800d9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9c8:	781b      	ldrb	r3, [r3, #0]
 800d9ca:	f003 030f 	and.w	r3, r3, #15
 800d9ce:	b2db      	uxtb	r3, r3
 800d9d0:	009b      	lsls	r3, r3, #2
 800d9d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800d9d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d9da:	b29b      	uxth	r3, r3
 800d9dc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d9de:	429a      	cmp	r2, r3
 800d9e0:	f0c0 8146 	bcc.w	800dc70 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800d9e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d9e8:	b29b      	uxth	r3, r3
 800d9ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d9ec:	1ad3      	subs	r3, r2, r3
 800d9ee:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800d9f0:	6878      	ldr	r0, [r7, #4]
 800d9f2:	f7f7 feb9 	bl	8005768 <pbuf_clen>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800d9fa:	4b9f      	ldr	r3, [pc, #636]	; (800dc78 <ip4_reass+0x2fc>)
 800d9fc:	881b      	ldrh	r3, [r3, #0]
 800d9fe:	461a      	mov	r2, r3
 800da00:	8c3b      	ldrh	r3, [r7, #32]
 800da02:	4413      	add	r3, r2
 800da04:	2b0a      	cmp	r3, #10
 800da06:	dd10      	ble.n	800da2a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800da08:	8c3b      	ldrh	r3, [r7, #32]
 800da0a:	4619      	mov	r1, r3
 800da0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da0e:	f7ff fd81 	bl	800d514 <ip_reass_remove_oldest_datagram>
 800da12:	4603      	mov	r3, r0
 800da14:	2b00      	cmp	r3, #0
 800da16:	f000 812d 	beq.w	800dc74 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800da1a:	4b97      	ldr	r3, [pc, #604]	; (800dc78 <ip4_reass+0x2fc>)
 800da1c:	881b      	ldrh	r3, [r3, #0]
 800da1e:	461a      	mov	r2, r3
 800da20:	8c3b      	ldrh	r3, [r7, #32]
 800da22:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800da24:	2b0a      	cmp	r3, #10
 800da26:	f300 8125 	bgt.w	800dc74 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800da2a:	4b94      	ldr	r3, [pc, #592]	; (800dc7c <ip4_reass+0x300>)
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	633b      	str	r3, [r7, #48]	; 0x30
 800da30:	e015      	b.n	800da5e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800da32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da34:	695a      	ldr	r2, [r3, #20]
 800da36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da38:	68db      	ldr	r3, [r3, #12]
 800da3a:	429a      	cmp	r2, r3
 800da3c:	d10c      	bne.n	800da58 <ip4_reass+0xdc>
 800da3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da40:	699a      	ldr	r2, [r3, #24]
 800da42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da44:	691b      	ldr	r3, [r3, #16]
 800da46:	429a      	cmp	r2, r3
 800da48:	d106      	bne.n	800da58 <ip4_reass+0xdc>
 800da4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da4c:	899a      	ldrh	r2, [r3, #12]
 800da4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da50:	889b      	ldrh	r3, [r3, #4]
 800da52:	b29b      	uxth	r3, r3
 800da54:	429a      	cmp	r2, r3
 800da56:	d006      	beq.n	800da66 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800da58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	633b      	str	r3, [r7, #48]	; 0x30
 800da5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da60:	2b00      	cmp	r3, #0
 800da62:	d1e6      	bne.n	800da32 <ip4_reass+0xb6>
 800da64:	e000      	b.n	800da68 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800da66:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800da68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d109      	bne.n	800da82 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800da6e:	8c3b      	ldrh	r3, [r7, #32]
 800da70:	4619      	mov	r1, r3
 800da72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da74:	f7ff fdb0 	bl	800d5d8 <ip_reass_enqueue_new_datagram>
 800da78:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800da7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d11c      	bne.n	800daba <ip4_reass+0x13e>
      goto nullreturn;
 800da80:	e109      	b.n	800dc96 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800da82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da84:	88db      	ldrh	r3, [r3, #6]
 800da86:	b29b      	uxth	r3, r3
 800da88:	4618      	mov	r0, r3
 800da8a:	f7f6 fb31 	bl	80040f0 <lwip_htons>
 800da8e:	4603      	mov	r3, r0
 800da90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800da94:	2b00      	cmp	r3, #0
 800da96:	d110      	bne.n	800daba <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800da98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da9a:	89db      	ldrh	r3, [r3, #14]
 800da9c:	4618      	mov	r0, r3
 800da9e:	f7f6 fb27 	bl	80040f0 <lwip_htons>
 800daa2:	4603      	mov	r3, r0
 800daa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d006      	beq.n	800daba <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800daac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daae:	3308      	adds	r3, #8
 800dab0:	2214      	movs	r2, #20
 800dab2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dab4:	4618      	mov	r0, r3
 800dab6:	f000 fb9d 	bl	800e1f4 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800daba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dabc:	88db      	ldrh	r3, [r3, #6]
 800dabe:	b29b      	uxth	r3, r3
 800dac0:	f003 0320 	and.w	r3, r3, #32
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	bf0c      	ite	eq
 800dac8:	2301      	moveq	r3, #1
 800daca:	2300      	movne	r3, #0
 800dacc:	b2db      	uxtb	r3, r3
 800dace:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800dad0:	69fb      	ldr	r3, [r7, #28]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d00e      	beq.n	800daf4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800dad6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dad8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dada:	4413      	add	r3, r2
 800dadc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800dade:	8b7a      	ldrh	r2, [r7, #26]
 800dae0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dae2:	429a      	cmp	r2, r3
 800dae4:	f0c0 80a0 	bcc.w	800dc28 <ip4_reass+0x2ac>
 800dae8:	8b7b      	ldrh	r3, [r7, #26]
 800daea:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800daee:	4293      	cmp	r3, r2
 800daf0:	f200 809a 	bhi.w	800dc28 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800daf4:	69fa      	ldr	r2, [r7, #28]
 800daf6:	6879      	ldr	r1, [r7, #4]
 800daf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dafa:	f7ff fdd5 	bl	800d6a8 <ip_reass_chain_frag_into_datagram_and_validate>
 800dafe:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800db00:	697b      	ldr	r3, [r7, #20]
 800db02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db06:	f000 8091 	beq.w	800dc2c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800db0a:	4b5b      	ldr	r3, [pc, #364]	; (800dc78 <ip4_reass+0x2fc>)
 800db0c:	881a      	ldrh	r2, [r3, #0]
 800db0e:	8c3b      	ldrh	r3, [r7, #32]
 800db10:	4413      	add	r3, r2
 800db12:	b29a      	uxth	r2, r3
 800db14:	4b58      	ldr	r3, [pc, #352]	; (800dc78 <ip4_reass+0x2fc>)
 800db16:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800db18:	69fb      	ldr	r3, [r7, #28]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d00d      	beq.n	800db3a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800db1e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800db20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db22:	4413      	add	r3, r2
 800db24:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800db26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db28:	8a7a      	ldrh	r2, [r7, #18]
 800db2a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800db2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db2e:	7f9b      	ldrb	r3, [r3, #30]
 800db30:	f043 0301 	orr.w	r3, r3, #1
 800db34:	b2da      	uxtb	r2, r3
 800db36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db38:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800db3a:	697b      	ldr	r3, [r7, #20]
 800db3c:	2b01      	cmp	r3, #1
 800db3e:	d171      	bne.n	800dc24 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800db40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db42:	8b9b      	ldrh	r3, [r3, #28]
 800db44:	3314      	adds	r3, #20
 800db46:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800db48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db4a:	685b      	ldr	r3, [r3, #4]
 800db4c:	685b      	ldr	r3, [r3, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800db52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db54:	685b      	ldr	r3, [r3, #4]
 800db56:	685b      	ldr	r3, [r3, #4]
 800db58:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800db5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db5c:	3308      	adds	r3, #8
 800db5e:	2214      	movs	r2, #20
 800db60:	4619      	mov	r1, r3
 800db62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db64:	f000 fb46 	bl	800e1f4 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800db68:	8a3b      	ldrh	r3, [r7, #16]
 800db6a:	4618      	mov	r0, r3
 800db6c:	f7f6 fac0 	bl	80040f0 <lwip_htons>
 800db70:	4603      	mov	r3, r0
 800db72:	461a      	mov	r2, r3
 800db74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db76:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800db78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db7a:	2200      	movs	r2, #0
 800db7c:	719a      	strb	r2, [r3, #6]
 800db7e:	2200      	movs	r2, #0
 800db80:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800db82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db84:	2200      	movs	r2, #0
 800db86:	729a      	strb	r2, [r3, #10]
 800db88:	2200      	movs	r2, #0
 800db8a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800db8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db8e:	685b      	ldr	r3, [r3, #4]
 800db90:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800db92:	e00d      	b.n	800dbb0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800db94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db96:	685b      	ldr	r3, [r3, #4]
 800db98:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800db9a:	2114      	movs	r1, #20
 800db9c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800db9e:	f7f7 fcd5 	bl	800554c <pbuf_remove_header>
      pbuf_cat(p, r);
 800dba2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dba4:	6878      	ldr	r0, [r7, #4]
 800dba6:	f7f7 fe19 	bl	80057dc <pbuf_cat>
      r = iprh->next_pbuf;
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800dbb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d1ee      	bne.n	800db94 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800dbb6:	4b31      	ldr	r3, [pc, #196]	; (800dc7c <ip4_reass+0x300>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d102      	bne.n	800dbc6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dbc4:	e010      	b.n	800dbe8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800dbc6:	4b2d      	ldr	r3, [pc, #180]	; (800dc7c <ip4_reass+0x300>)
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dbcc:	e007      	b.n	800dbde <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800dbce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbd4:	429a      	cmp	r2, r3
 800dbd6:	d006      	beq.n	800dbe6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800dbd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dbde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d1f4      	bne.n	800dbce <ip4_reass+0x252>
 800dbe4:	e000      	b.n	800dbe8 <ip4_reass+0x26c>
          break;
 800dbe6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800dbe8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dbea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dbec:	f7ff fd2e 	bl	800d64c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800dbf0:	6878      	ldr	r0, [r7, #4]
 800dbf2:	f7f7 fdb9 	bl	8005768 <pbuf_clen>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800dbfa:	4b1f      	ldr	r3, [pc, #124]	; (800dc78 <ip4_reass+0x2fc>)
 800dbfc:	881b      	ldrh	r3, [r3, #0]
 800dbfe:	8c3a      	ldrh	r2, [r7, #32]
 800dc00:	429a      	cmp	r2, r3
 800dc02:	d906      	bls.n	800dc12 <ip4_reass+0x296>
 800dc04:	4b1e      	ldr	r3, [pc, #120]	; (800dc80 <ip4_reass+0x304>)
 800dc06:	f240 229b 	movw	r2, #667	; 0x29b
 800dc0a:	491e      	ldr	r1, [pc, #120]	; (800dc84 <ip4_reass+0x308>)
 800dc0c:	481e      	ldr	r0, [pc, #120]	; (800dc88 <ip4_reass+0x30c>)
 800dc0e:	f000 fb21 	bl	800e254 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800dc12:	4b19      	ldr	r3, [pc, #100]	; (800dc78 <ip4_reass+0x2fc>)
 800dc14:	881a      	ldrh	r2, [r3, #0]
 800dc16:	8c3b      	ldrh	r3, [r7, #32]
 800dc18:	1ad3      	subs	r3, r2, r3
 800dc1a:	b29a      	uxth	r2, r3
 800dc1c:	4b16      	ldr	r3, [pc, #88]	; (800dc78 <ip4_reass+0x2fc>)
 800dc1e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	e03c      	b.n	800dc9e <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800dc24:	2300      	movs	r3, #0
 800dc26:	e03a      	b.n	800dc9e <ip4_reass+0x322>
      goto nullreturn_ipr;
 800dc28:	bf00      	nop
 800dc2a:	e000      	b.n	800dc2e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800dc2c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800dc2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d106      	bne.n	800dc42 <ip4_reass+0x2c6>
 800dc34:	4b12      	ldr	r3, [pc, #72]	; (800dc80 <ip4_reass+0x304>)
 800dc36:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800dc3a:	4914      	ldr	r1, [pc, #80]	; (800dc8c <ip4_reass+0x310>)
 800dc3c:	4812      	ldr	r0, [pc, #72]	; (800dc88 <ip4_reass+0x30c>)
 800dc3e:	f000 fb09 	bl	800e254 <iprintf>
  if (ipr->p == NULL) {
 800dc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc44:	685b      	ldr	r3, [r3, #4]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d124      	bne.n	800dc94 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800dc4a:	4b0c      	ldr	r3, [pc, #48]	; (800dc7c <ip4_reass+0x300>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc50:	429a      	cmp	r2, r3
 800dc52:	d006      	beq.n	800dc62 <ip4_reass+0x2e6>
 800dc54:	4b0a      	ldr	r3, [pc, #40]	; (800dc80 <ip4_reass+0x304>)
 800dc56:	f240 22ab 	movw	r2, #683	; 0x2ab
 800dc5a:	490d      	ldr	r1, [pc, #52]	; (800dc90 <ip4_reass+0x314>)
 800dc5c:	480a      	ldr	r0, [pc, #40]	; (800dc88 <ip4_reass+0x30c>)
 800dc5e:	f000 faf9 	bl	800e254 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800dc62:	2100      	movs	r1, #0
 800dc64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc66:	f7ff fcf1 	bl	800d64c <ip_reass_dequeue_datagram>
 800dc6a:	e014      	b.n	800dc96 <ip4_reass+0x31a>
    goto nullreturn;
 800dc6c:	bf00      	nop
 800dc6e:	e012      	b.n	800dc96 <ip4_reass+0x31a>
    goto nullreturn;
 800dc70:	bf00      	nop
 800dc72:	e010      	b.n	800dc96 <ip4_reass+0x31a>
      goto nullreturn;
 800dc74:	bf00      	nop
 800dc76:	e00e      	b.n	800dc96 <ip4_reass+0x31a>
 800dc78:	20000208 	.word	0x20000208
 800dc7c:	20000204 	.word	0x20000204
 800dc80:	08011d6c 	.word	0x08011d6c
 800dc84:	08011edc 	.word	0x08011edc
 800dc88:	08011db4 	.word	0x08011db4
 800dc8c:	08011ef8 	.word	0x08011ef8
 800dc90:	08011f04 	.word	0x08011f04
  }

nullreturn:
 800dc94:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	f7f7 fcde 	bl	8005658 <pbuf_free>
  return NULL;
 800dc9c:	2300      	movs	r3, #0
}
 800dc9e:	4618      	mov	r0, r3
 800dca0:	3738      	adds	r7, #56	; 0x38
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}
 800dca6:	bf00      	nop

0800dca8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800dcac:	2005      	movs	r0, #5
 800dcae:	f7f6 fe75 	bl	800499c <memp_malloc>
 800dcb2:	4603      	mov	r3, r0
}
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	bd80      	pop	{r7, pc}

0800dcb8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b082      	sub	sp, #8
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d106      	bne.n	800dcd4 <ip_frag_free_pbuf_custom_ref+0x1c>
 800dcc6:	4b07      	ldr	r3, [pc, #28]	; (800dce4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800dcc8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800dccc:	4906      	ldr	r1, [pc, #24]	; (800dce8 <ip_frag_free_pbuf_custom_ref+0x30>)
 800dcce:	4807      	ldr	r0, [pc, #28]	; (800dcec <ip_frag_free_pbuf_custom_ref+0x34>)
 800dcd0:	f000 fac0 	bl	800e254 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800dcd4:	6879      	ldr	r1, [r7, #4]
 800dcd6:	2005      	movs	r0, #5
 800dcd8:	f7f6 feac 	bl	8004a34 <memp_free>
}
 800dcdc:	bf00      	nop
 800dcde:	3708      	adds	r7, #8
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}
 800dce4:	08011d6c 	.word	0x08011d6c
 800dce8:	08011f24 	.word	0x08011f24
 800dcec:	08011db4 	.word	0x08011db4

0800dcf0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b084      	sub	sp, #16
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d106      	bne.n	800dd10 <ipfrag_free_pbuf_custom+0x20>
 800dd02:	4b11      	ldr	r3, [pc, #68]	; (800dd48 <ipfrag_free_pbuf_custom+0x58>)
 800dd04:	f240 22ce 	movw	r2, #718	; 0x2ce
 800dd08:	4910      	ldr	r1, [pc, #64]	; (800dd4c <ipfrag_free_pbuf_custom+0x5c>)
 800dd0a:	4811      	ldr	r0, [pc, #68]	; (800dd50 <ipfrag_free_pbuf_custom+0x60>)
 800dd0c:	f000 faa2 	bl	800e254 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800dd10:	68fa      	ldr	r2, [r7, #12]
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	429a      	cmp	r2, r3
 800dd16:	d006      	beq.n	800dd26 <ipfrag_free_pbuf_custom+0x36>
 800dd18:	4b0b      	ldr	r3, [pc, #44]	; (800dd48 <ipfrag_free_pbuf_custom+0x58>)
 800dd1a:	f240 22cf 	movw	r2, #719	; 0x2cf
 800dd1e:	490d      	ldr	r1, [pc, #52]	; (800dd54 <ipfrag_free_pbuf_custom+0x64>)
 800dd20:	480b      	ldr	r0, [pc, #44]	; (800dd50 <ipfrag_free_pbuf_custom+0x60>)
 800dd22:	f000 fa97 	bl	800e254 <iprintf>
  if (pcr->original != NULL) {
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	695b      	ldr	r3, [r3, #20]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d004      	beq.n	800dd38 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	695b      	ldr	r3, [r3, #20]
 800dd32:	4618      	mov	r0, r3
 800dd34:	f7f7 fc90 	bl	8005658 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800dd38:	68f8      	ldr	r0, [r7, #12]
 800dd3a:	f7ff ffbd 	bl	800dcb8 <ip_frag_free_pbuf_custom_ref>
}
 800dd3e:	bf00      	nop
 800dd40:	3710      	adds	r7, #16
 800dd42:	46bd      	mov	sp, r7
 800dd44:	bd80      	pop	{r7, pc}
 800dd46:	bf00      	nop
 800dd48:	08011d6c 	.word	0x08011d6c
 800dd4c:	08011f30 	.word	0x08011f30
 800dd50:	08011db4 	.word	0x08011db4
 800dd54:	08011f3c 	.word	0x08011f3c

0800dd58 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b094      	sub	sp, #80	; 0x50
 800dd5c:	af02      	add	r7, sp, #8
 800dd5e:	60f8      	str	r0, [r7, #12]
 800dd60:	60b9      	str	r1, [r7, #8]
 800dd62:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800dd64:	2300      	movs	r3, #0
 800dd66:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800dd6a:	68bb      	ldr	r3, [r7, #8]
 800dd6c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dd6e:	3b14      	subs	r3, #20
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	da00      	bge.n	800dd76 <ip4_frag+0x1e>
 800dd74:	3307      	adds	r3, #7
 800dd76:	10db      	asrs	r3, r3, #3
 800dd78:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800dd7a:	2314      	movs	r3, #20
 800dd7c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	685b      	ldr	r3, [r3, #4]
 800dd82:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800dd84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd86:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800dd88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd8a:	781b      	ldrb	r3, [r3, #0]
 800dd8c:	f003 030f 	and.w	r3, r3, #15
 800dd90:	b2db      	uxtb	r3, r3
 800dd92:	009b      	lsls	r3, r3, #2
 800dd94:	b2db      	uxtb	r3, r3
 800dd96:	2b14      	cmp	r3, #20
 800dd98:	d002      	beq.n	800dda0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800dd9a:	f06f 0305 	mvn.w	r3, #5
 800dd9e:	e110      	b.n	800dfc2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	895b      	ldrh	r3, [r3, #10]
 800dda4:	2b13      	cmp	r3, #19
 800dda6:	d809      	bhi.n	800ddbc <ip4_frag+0x64>
 800dda8:	4b88      	ldr	r3, [pc, #544]	; (800dfcc <ip4_frag+0x274>)
 800ddaa:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800ddae:	4988      	ldr	r1, [pc, #544]	; (800dfd0 <ip4_frag+0x278>)
 800ddb0:	4888      	ldr	r0, [pc, #544]	; (800dfd4 <ip4_frag+0x27c>)
 800ddb2:	f000 fa4f 	bl	800e254 <iprintf>
 800ddb6:	f06f 0305 	mvn.w	r3, #5
 800ddba:	e102      	b.n	800dfc2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800ddbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddbe:	88db      	ldrh	r3, [r3, #6]
 800ddc0:	b29b      	uxth	r3, r3
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f7f6 f994 	bl	80040f0 <lwip_htons>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800ddcc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ddce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ddd2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800ddd6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ddd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dddc:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	891b      	ldrh	r3, [r3, #8]
 800dde2:	3b14      	subs	r3, #20
 800dde4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800dde8:	e0e1      	b.n	800dfae <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800ddea:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ddec:	00db      	lsls	r3, r3, #3
 800ddee:	b29b      	uxth	r3, r3
 800ddf0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ddf4:	4293      	cmp	r3, r2
 800ddf6:	bf28      	it	cs
 800ddf8:	4613      	movcs	r3, r2
 800ddfa:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800ddfc:	f44f 7220 	mov.w	r2, #640	; 0x280
 800de00:	2114      	movs	r1, #20
 800de02:	200e      	movs	r0, #14
 800de04:	f7f7 f944 	bl	8005090 <pbuf_alloc>
 800de08:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800de0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	f000 80d5 	beq.w	800dfbc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800de12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de14:	895b      	ldrh	r3, [r3, #10]
 800de16:	2b13      	cmp	r3, #19
 800de18:	d806      	bhi.n	800de28 <ip4_frag+0xd0>
 800de1a:	4b6c      	ldr	r3, [pc, #432]	; (800dfcc <ip4_frag+0x274>)
 800de1c:	f44f 7249 	mov.w	r2, #804	; 0x324
 800de20:	496d      	ldr	r1, [pc, #436]	; (800dfd8 <ip4_frag+0x280>)
 800de22:	486c      	ldr	r0, [pc, #432]	; (800dfd4 <ip4_frag+0x27c>)
 800de24:	f000 fa16 	bl	800e254 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800de28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de2a:	685b      	ldr	r3, [r3, #4]
 800de2c:	2214      	movs	r2, #20
 800de2e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800de30:	4618      	mov	r0, r3
 800de32:	f000 f9df 	bl	800e1f4 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800de36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de38:	685b      	ldr	r3, [r3, #4]
 800de3a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800de3c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800de3e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800de42:	e064      	b.n	800df0e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	895a      	ldrh	r2, [r3, #10]
 800de48:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800de4a:	1ad3      	subs	r3, r2, r3
 800de4c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	895b      	ldrh	r3, [r3, #10]
 800de52:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800de54:	429a      	cmp	r2, r3
 800de56:	d906      	bls.n	800de66 <ip4_frag+0x10e>
 800de58:	4b5c      	ldr	r3, [pc, #368]	; (800dfcc <ip4_frag+0x274>)
 800de5a:	f240 322d 	movw	r2, #813	; 0x32d
 800de5e:	495f      	ldr	r1, [pc, #380]	; (800dfdc <ip4_frag+0x284>)
 800de60:	485c      	ldr	r0, [pc, #368]	; (800dfd4 <ip4_frag+0x27c>)
 800de62:	f000 f9f7 	bl	800e254 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800de66:	8bfa      	ldrh	r2, [r7, #30]
 800de68:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800de6c:	4293      	cmp	r3, r2
 800de6e:	bf28      	it	cs
 800de70:	4613      	movcs	r3, r2
 800de72:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800de76:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d105      	bne.n	800de8a <ip4_frag+0x132>
        poff = 0;
 800de7e:	2300      	movs	r3, #0
 800de80:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	60fb      	str	r3, [r7, #12]
        continue;
 800de88:	e041      	b.n	800df0e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800de8a:	f7ff ff0d 	bl	800dca8 <ip_frag_alloc_pbuf_custom_ref>
 800de8e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800de90:	69bb      	ldr	r3, [r7, #24]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d103      	bne.n	800de9e <ip4_frag+0x146>
        pbuf_free(rambuf);
 800de96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de98:	f7f7 fbde 	bl	8005658 <pbuf_free>
        goto memerr;
 800de9c:	e08f      	b.n	800dfbe <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800de9e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800dea4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800dea6:	4413      	add	r3, r2
 800dea8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800deac:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800deb0:	9201      	str	r2, [sp, #4]
 800deb2:	9300      	str	r3, [sp, #0]
 800deb4:	4603      	mov	r3, r0
 800deb6:	2241      	movs	r2, #65	; 0x41
 800deb8:	2000      	movs	r0, #0
 800deba:	f7f7 fa13 	bl	80052e4 <pbuf_alloced_custom>
 800debe:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800dec0:	697b      	ldr	r3, [r7, #20]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d106      	bne.n	800ded4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800dec6:	69b8      	ldr	r0, [r7, #24]
 800dec8:	f7ff fef6 	bl	800dcb8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800decc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dece:	f7f7 fbc3 	bl	8005658 <pbuf_free>
        goto memerr;
 800ded2:	e074      	b.n	800dfbe <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800ded4:	68f8      	ldr	r0, [r7, #12]
 800ded6:	f7f7 fc5f 	bl	8005798 <pbuf_ref>
      pcr->original = p;
 800deda:	69bb      	ldr	r3, [r7, #24]
 800dedc:	68fa      	ldr	r2, [r7, #12]
 800dede:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800dee0:	69bb      	ldr	r3, [r7, #24]
 800dee2:	4a3f      	ldr	r2, [pc, #252]	; (800dfe0 <ip4_frag+0x288>)
 800dee4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800dee6:	6979      	ldr	r1, [r7, #20]
 800dee8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800deea:	f7f7 fc77 	bl	80057dc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800deee:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800def2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800def6:	1ad3      	subs	r3, r2, r3
 800def8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800defc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800df00:	2b00      	cmp	r3, #0
 800df02:	d004      	beq.n	800df0e <ip4_frag+0x1b6>
        poff = 0;
 800df04:	2300      	movs	r3, #0
 800df06:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800df0e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800df12:	2b00      	cmp	r3, #0
 800df14:	d196      	bne.n	800de44 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800df16:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800df18:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800df1c:	4413      	add	r3, r2
 800df1e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800df20:	68bb      	ldr	r3, [r7, #8]
 800df22:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800df24:	f1a3 0213 	sub.w	r2, r3, #19
 800df28:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800df2c:	429a      	cmp	r2, r3
 800df2e:	bfcc      	ite	gt
 800df30:	2301      	movgt	r3, #1
 800df32:	2300      	movle	r3, #0
 800df34:	b2db      	uxtb	r3, r3
 800df36:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800df38:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800df3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800df40:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800df42:	6a3b      	ldr	r3, [r7, #32]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d002      	beq.n	800df4e <ip4_frag+0x1f6>
 800df48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d003      	beq.n	800df56 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800df4e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800df50:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800df54:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800df56:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800df58:	4618      	mov	r0, r3
 800df5a:	f7f6 f8c9 	bl	80040f0 <lwip_htons>
 800df5e:	4603      	mov	r3, r0
 800df60:	461a      	mov	r2, r3
 800df62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df64:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800df66:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800df68:	3314      	adds	r3, #20
 800df6a:	b29b      	uxth	r3, r3
 800df6c:	4618      	mov	r0, r3
 800df6e:	f7f6 f8bf 	bl	80040f0 <lwip_htons>
 800df72:	4603      	mov	r3, r0
 800df74:	461a      	mov	r2, r3
 800df76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df78:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800df7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df7c:	2200      	movs	r2, #0
 800df7e:	729a      	strb	r2, [r3, #10]
 800df80:	2200      	movs	r2, #0
 800df82:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800df84:	68bb      	ldr	r3, [r7, #8]
 800df86:	695b      	ldr	r3, [r3, #20]
 800df88:	687a      	ldr	r2, [r7, #4]
 800df8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800df8c:	68b8      	ldr	r0, [r7, #8]
 800df8e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800df90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df92:	f7f7 fb61 	bl	8005658 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800df96:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800df9a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800df9c:	1ad3      	subs	r3, r2, r3
 800df9e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800dfa2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800dfa6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800dfa8:	4413      	add	r3, r2
 800dfaa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800dfae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	f47f af19 	bne.w	800ddea <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800dfb8:	2300      	movs	r3, #0
 800dfba:	e002      	b.n	800dfc2 <ip4_frag+0x26a>
      goto memerr;
 800dfbc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800dfbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	3748      	adds	r7, #72	; 0x48
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	bd80      	pop	{r7, pc}
 800dfca:	bf00      	nop
 800dfcc:	08011d6c 	.word	0x08011d6c
 800dfd0:	08011f48 	.word	0x08011f48
 800dfd4:	08011db4 	.word	0x08011db4
 800dfd8:	08011f64 	.word	0x08011f64
 800dfdc:	08011f84 	.word	0x08011f84
 800dfe0:	0800dcf1 	.word	0x0800dcf1

0800dfe4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b086      	sub	sp, #24
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
 800dfec:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800dfee:	230e      	movs	r3, #14
 800dff0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	895b      	ldrh	r3, [r3, #10]
 800dff6:	2b0e      	cmp	r3, #14
 800dff8:	d96e      	bls.n	800e0d8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	7bdb      	ldrb	r3, [r3, #15]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d106      	bne.n	800e010 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e008:	3301      	adds	r3, #1
 800e00a:	b2da      	uxtb	r2, r3
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	685b      	ldr	r3, [r3, #4]
 800e014:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800e016:	693b      	ldr	r3, [r7, #16]
 800e018:	7b1a      	ldrb	r2, [r3, #12]
 800e01a:	7b5b      	ldrb	r3, [r3, #13]
 800e01c:	021b      	lsls	r3, r3, #8
 800e01e:	4313      	orrs	r3, r2
 800e020:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e022:	693b      	ldr	r3, [r7, #16]
 800e024:	781b      	ldrb	r3, [r3, #0]
 800e026:	f003 0301 	and.w	r3, r3, #1
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d023      	beq.n	800e076 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800e02e:	693b      	ldr	r3, [r7, #16]
 800e030:	781b      	ldrb	r3, [r3, #0]
 800e032:	2b01      	cmp	r3, #1
 800e034:	d10f      	bne.n	800e056 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e036:	693b      	ldr	r3, [r7, #16]
 800e038:	785b      	ldrb	r3, [r3, #1]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d11b      	bne.n	800e076 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800e03e:	693b      	ldr	r3, [r7, #16]
 800e040:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e042:	2b5e      	cmp	r3, #94	; 0x5e
 800e044:	d117      	bne.n	800e076 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	7b5b      	ldrb	r3, [r3, #13]
 800e04a:	f043 0310 	orr.w	r3, r3, #16
 800e04e:	b2da      	uxtb	r2, r3
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	735a      	strb	r2, [r3, #13]
 800e054:	e00f      	b.n	800e076 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800e056:	693b      	ldr	r3, [r7, #16]
 800e058:	2206      	movs	r2, #6
 800e05a:	4928      	ldr	r1, [pc, #160]	; (800e0fc <ethernet_input+0x118>)
 800e05c:	4618      	mov	r0, r3
 800e05e:	f000 f8bb 	bl	800e1d8 <memcmp>
 800e062:	4603      	mov	r3, r0
 800e064:	2b00      	cmp	r3, #0
 800e066:	d106      	bne.n	800e076 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	7b5b      	ldrb	r3, [r3, #13]
 800e06c:	f043 0308 	orr.w	r3, r3, #8
 800e070:	b2da      	uxtb	r2, r3
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800e076:	89fb      	ldrh	r3, [r7, #14]
 800e078:	2b08      	cmp	r3, #8
 800e07a:	d003      	beq.n	800e084 <ethernet_input+0xa0>
 800e07c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800e080:	d014      	beq.n	800e0ac <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800e082:	e032      	b.n	800e0ea <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e084:	683b      	ldr	r3, [r7, #0]
 800e086:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e08a:	f003 0308 	and.w	r3, r3, #8
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d024      	beq.n	800e0dc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e092:	8afb      	ldrh	r3, [r7, #22]
 800e094:	4619      	mov	r1, r3
 800e096:	6878      	ldr	r0, [r7, #4]
 800e098:	f7f7 fa58 	bl	800554c <pbuf_remove_header>
 800e09c:	4603      	mov	r3, r0
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d11e      	bne.n	800e0e0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800e0a2:	6839      	ldr	r1, [r7, #0]
 800e0a4:	6878      	ldr	r0, [r7, #4]
 800e0a6:	f7fe ff27 	bl	800cef8 <ip4_input>
      break;
 800e0aa:	e013      	b.n	800e0d4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e0b2:	f003 0308 	and.w	r3, r3, #8
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d014      	beq.n	800e0e4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e0ba:	8afb      	ldrh	r3, [r7, #22]
 800e0bc:	4619      	mov	r1, r3
 800e0be:	6878      	ldr	r0, [r7, #4]
 800e0c0:	f7f7 fa44 	bl	800554c <pbuf_remove_header>
 800e0c4:	4603      	mov	r3, r0
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d10e      	bne.n	800e0e8 <ethernet_input+0x104>
        etharp_input(p, netif);
 800e0ca:	6839      	ldr	r1, [r7, #0]
 800e0cc:	6878      	ldr	r0, [r7, #4]
 800e0ce:	f7fe f8c7 	bl	800c260 <etharp_input>
      break;
 800e0d2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	e00c      	b.n	800e0f2 <ethernet_input+0x10e>
    goto free_and_return;
 800e0d8:	bf00      	nop
 800e0da:	e006      	b.n	800e0ea <ethernet_input+0x106>
        goto free_and_return;
 800e0dc:	bf00      	nop
 800e0de:	e004      	b.n	800e0ea <ethernet_input+0x106>
        goto free_and_return;
 800e0e0:	bf00      	nop
 800e0e2:	e002      	b.n	800e0ea <ethernet_input+0x106>
        goto free_and_return;
 800e0e4:	bf00      	nop
 800e0e6:	e000      	b.n	800e0ea <ethernet_input+0x106>
        goto free_and_return;
 800e0e8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800e0ea:	6878      	ldr	r0, [r7, #4]
 800e0ec:	f7f7 fab4 	bl	8005658 <pbuf_free>
  return ERR_OK;
 800e0f0:	2300      	movs	r3, #0
}
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	3718      	adds	r7, #24
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bd80      	pop	{r7, pc}
 800e0fa:	bf00      	nop
 800e0fc:	0801210c 	.word	0x0801210c

0800e100 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800e100:	b580      	push	{r7, lr}
 800e102:	b086      	sub	sp, #24
 800e104:	af00      	add	r7, sp, #0
 800e106:	60f8      	str	r0, [r7, #12]
 800e108:	60b9      	str	r1, [r7, #8]
 800e10a:	607a      	str	r2, [r7, #4]
 800e10c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800e10e:	8c3b      	ldrh	r3, [r7, #32]
 800e110:	4618      	mov	r0, r3
 800e112:	f7f5 ffed 	bl	80040f0 <lwip_htons>
 800e116:	4603      	mov	r3, r0
 800e118:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800e11a:	210e      	movs	r1, #14
 800e11c:	68b8      	ldr	r0, [r7, #8]
 800e11e:	f7f7 fa05 	bl	800552c <pbuf_add_header>
 800e122:	4603      	mov	r3, r0
 800e124:	2b00      	cmp	r3, #0
 800e126:	d125      	bne.n	800e174 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800e128:	68bb      	ldr	r3, [r7, #8]
 800e12a:	685b      	ldr	r3, [r3, #4]
 800e12c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800e12e:	693b      	ldr	r3, [r7, #16]
 800e130:	8afa      	ldrh	r2, [r7, #22]
 800e132:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800e134:	693b      	ldr	r3, [r7, #16]
 800e136:	2206      	movs	r2, #6
 800e138:	6839      	ldr	r1, [r7, #0]
 800e13a:	4618      	mov	r0, r3
 800e13c:	f000 f85a 	bl	800e1f4 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800e140:	693b      	ldr	r3, [r7, #16]
 800e142:	3306      	adds	r3, #6
 800e144:	2206      	movs	r2, #6
 800e146:	6879      	ldr	r1, [r7, #4]
 800e148:	4618      	mov	r0, r3
 800e14a:	f000 f853 	bl	800e1f4 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e154:	2b06      	cmp	r3, #6
 800e156:	d006      	beq.n	800e166 <ethernet_output+0x66>
 800e158:	4b0a      	ldr	r3, [pc, #40]	; (800e184 <ethernet_output+0x84>)
 800e15a:	f44f 7299 	mov.w	r2, #306	; 0x132
 800e15e:	490a      	ldr	r1, [pc, #40]	; (800e188 <ethernet_output+0x88>)
 800e160:	480a      	ldr	r0, [pc, #40]	; (800e18c <ethernet_output+0x8c>)
 800e162:	f000 f877 	bl	800e254 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	699b      	ldr	r3, [r3, #24]
 800e16a:	68b9      	ldr	r1, [r7, #8]
 800e16c:	68f8      	ldr	r0, [r7, #12]
 800e16e:	4798      	blx	r3
 800e170:	4603      	mov	r3, r0
 800e172:	e002      	b.n	800e17a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800e174:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800e176:	f06f 0301 	mvn.w	r3, #1
}
 800e17a:	4618      	mov	r0, r3
 800e17c:	3718      	adds	r7, #24
 800e17e:	46bd      	mov	sp, r7
 800e180:	bd80      	pop	{r7, pc}
 800e182:	bf00      	nop
 800e184:	08011f94 	.word	0x08011f94
 800e188:	08011fcc 	.word	0x08011fcc
 800e18c:	08012000 	.word	0x08012000

0800e190 <__libc_init_array>:
 800e190:	b570      	push	{r4, r5, r6, lr}
 800e192:	4d0d      	ldr	r5, [pc, #52]	; (800e1c8 <__libc_init_array+0x38>)
 800e194:	4c0d      	ldr	r4, [pc, #52]	; (800e1cc <__libc_init_array+0x3c>)
 800e196:	1b64      	subs	r4, r4, r5
 800e198:	10a4      	asrs	r4, r4, #2
 800e19a:	2600      	movs	r6, #0
 800e19c:	42a6      	cmp	r6, r4
 800e19e:	d109      	bne.n	800e1b4 <__libc_init_array+0x24>
 800e1a0:	4d0b      	ldr	r5, [pc, #44]	; (800e1d0 <__libc_init_array+0x40>)
 800e1a2:	4c0c      	ldr	r4, [pc, #48]	; (800e1d4 <__libc_init_array+0x44>)
 800e1a4:	f001 fa2e 	bl	800f604 <_init>
 800e1a8:	1b64      	subs	r4, r4, r5
 800e1aa:	10a4      	asrs	r4, r4, #2
 800e1ac:	2600      	movs	r6, #0
 800e1ae:	42a6      	cmp	r6, r4
 800e1b0:	d105      	bne.n	800e1be <__libc_init_array+0x2e>
 800e1b2:	bd70      	pop	{r4, r5, r6, pc}
 800e1b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800e1b8:	4798      	blx	r3
 800e1ba:	3601      	adds	r6, #1
 800e1bc:	e7ee      	b.n	800e19c <__libc_init_array+0xc>
 800e1be:	f855 3b04 	ldr.w	r3, [r5], #4
 800e1c2:	4798      	blx	r3
 800e1c4:	3601      	adds	r6, #1
 800e1c6:	e7f2      	b.n	800e1ae <__libc_init_array+0x1e>
 800e1c8:	08012270 	.word	0x08012270
 800e1cc:	08012270 	.word	0x08012270
 800e1d0:	08012270 	.word	0x08012270
 800e1d4:	08012274 	.word	0x08012274

0800e1d8 <memcmp>:
 800e1d8:	b530      	push	{r4, r5, lr}
 800e1da:	3901      	subs	r1, #1
 800e1dc:	2400      	movs	r4, #0
 800e1de:	42a2      	cmp	r2, r4
 800e1e0:	d101      	bne.n	800e1e6 <memcmp+0xe>
 800e1e2:	2000      	movs	r0, #0
 800e1e4:	e005      	b.n	800e1f2 <memcmp+0x1a>
 800e1e6:	5d03      	ldrb	r3, [r0, r4]
 800e1e8:	3401      	adds	r4, #1
 800e1ea:	5d0d      	ldrb	r5, [r1, r4]
 800e1ec:	42ab      	cmp	r3, r5
 800e1ee:	d0f6      	beq.n	800e1de <memcmp+0x6>
 800e1f0:	1b58      	subs	r0, r3, r5
 800e1f2:	bd30      	pop	{r4, r5, pc}

0800e1f4 <memcpy>:
 800e1f4:	440a      	add	r2, r1
 800e1f6:	4291      	cmp	r1, r2
 800e1f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e1fc:	d100      	bne.n	800e200 <memcpy+0xc>
 800e1fe:	4770      	bx	lr
 800e200:	b510      	push	{r4, lr}
 800e202:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e206:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e20a:	4291      	cmp	r1, r2
 800e20c:	d1f9      	bne.n	800e202 <memcpy+0xe>
 800e20e:	bd10      	pop	{r4, pc}

0800e210 <memmove>:
 800e210:	4288      	cmp	r0, r1
 800e212:	b510      	push	{r4, lr}
 800e214:	eb01 0402 	add.w	r4, r1, r2
 800e218:	d902      	bls.n	800e220 <memmove+0x10>
 800e21a:	4284      	cmp	r4, r0
 800e21c:	4623      	mov	r3, r4
 800e21e:	d807      	bhi.n	800e230 <memmove+0x20>
 800e220:	1e43      	subs	r3, r0, #1
 800e222:	42a1      	cmp	r1, r4
 800e224:	d008      	beq.n	800e238 <memmove+0x28>
 800e226:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e22a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e22e:	e7f8      	b.n	800e222 <memmove+0x12>
 800e230:	4402      	add	r2, r0
 800e232:	4601      	mov	r1, r0
 800e234:	428a      	cmp	r2, r1
 800e236:	d100      	bne.n	800e23a <memmove+0x2a>
 800e238:	bd10      	pop	{r4, pc}
 800e23a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e23e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e242:	e7f7      	b.n	800e234 <memmove+0x24>

0800e244 <memset>:
 800e244:	4402      	add	r2, r0
 800e246:	4603      	mov	r3, r0
 800e248:	4293      	cmp	r3, r2
 800e24a:	d100      	bne.n	800e24e <memset+0xa>
 800e24c:	4770      	bx	lr
 800e24e:	f803 1b01 	strb.w	r1, [r3], #1
 800e252:	e7f9      	b.n	800e248 <memset+0x4>

0800e254 <iprintf>:
 800e254:	b40f      	push	{r0, r1, r2, r3}
 800e256:	4b0a      	ldr	r3, [pc, #40]	; (800e280 <iprintf+0x2c>)
 800e258:	b513      	push	{r0, r1, r4, lr}
 800e25a:	681c      	ldr	r4, [r3, #0]
 800e25c:	b124      	cbz	r4, 800e268 <iprintf+0x14>
 800e25e:	69a3      	ldr	r3, [r4, #24]
 800e260:	b913      	cbnz	r3, 800e268 <iprintf+0x14>
 800e262:	4620      	mov	r0, r4
 800e264:	f000 f8f8 	bl	800e458 <__sinit>
 800e268:	ab05      	add	r3, sp, #20
 800e26a:	9a04      	ldr	r2, [sp, #16]
 800e26c:	68a1      	ldr	r1, [r4, #8]
 800e26e:	9301      	str	r3, [sp, #4]
 800e270:	4620      	mov	r0, r4
 800e272:	f000 fbdb 	bl	800ea2c <_vfiprintf_r>
 800e276:	b002      	add	sp, #8
 800e278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e27c:	b004      	add	sp, #16
 800e27e:	4770      	bx	lr
 800e280:	20000014 	.word	0x20000014

0800e284 <rand>:
 800e284:	4b17      	ldr	r3, [pc, #92]	; (800e2e4 <rand+0x60>)
 800e286:	b510      	push	{r4, lr}
 800e288:	681c      	ldr	r4, [r3, #0]
 800e28a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e28c:	b9b3      	cbnz	r3, 800e2bc <rand+0x38>
 800e28e:	2018      	movs	r0, #24
 800e290:	f000 f994 	bl	800e5bc <malloc>
 800e294:	63a0      	str	r0, [r4, #56]	; 0x38
 800e296:	b928      	cbnz	r0, 800e2a4 <rand+0x20>
 800e298:	4602      	mov	r2, r0
 800e29a:	4b13      	ldr	r3, [pc, #76]	; (800e2e8 <rand+0x64>)
 800e29c:	4813      	ldr	r0, [pc, #76]	; (800e2ec <rand+0x68>)
 800e29e:	214e      	movs	r1, #78	; 0x4e
 800e2a0:	f000 f864 	bl	800e36c <__assert_func>
 800e2a4:	4a12      	ldr	r2, [pc, #72]	; (800e2f0 <rand+0x6c>)
 800e2a6:	4b13      	ldr	r3, [pc, #76]	; (800e2f4 <rand+0x70>)
 800e2a8:	e9c0 2300 	strd	r2, r3, [r0]
 800e2ac:	4b12      	ldr	r3, [pc, #72]	; (800e2f8 <rand+0x74>)
 800e2ae:	6083      	str	r3, [r0, #8]
 800e2b0:	230b      	movs	r3, #11
 800e2b2:	8183      	strh	r3, [r0, #12]
 800e2b4:	2201      	movs	r2, #1
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800e2bc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e2be:	480f      	ldr	r0, [pc, #60]	; (800e2fc <rand+0x78>)
 800e2c0:	690a      	ldr	r2, [r1, #16]
 800e2c2:	694b      	ldr	r3, [r1, #20]
 800e2c4:	4c0e      	ldr	r4, [pc, #56]	; (800e300 <rand+0x7c>)
 800e2c6:	4350      	muls	r0, r2
 800e2c8:	fb04 0003 	mla	r0, r4, r3, r0
 800e2cc:	fba2 3404 	umull	r3, r4, r2, r4
 800e2d0:	1c5a      	adds	r2, r3, #1
 800e2d2:	4404      	add	r4, r0
 800e2d4:	f144 0000 	adc.w	r0, r4, #0
 800e2d8:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800e2dc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e2e0:	bd10      	pop	{r4, pc}
 800e2e2:	bf00      	nop
 800e2e4:	20000014 	.word	0x20000014
 800e2e8:	08012120 	.word	0x08012120
 800e2ec:	08012137 	.word	0x08012137
 800e2f0:	abcd330e 	.word	0xabcd330e
 800e2f4:	e66d1234 	.word	0xe66d1234
 800e2f8:	0005deec 	.word	0x0005deec
 800e2fc:	5851f42d 	.word	0x5851f42d
 800e300:	4c957f2d 	.word	0x4c957f2d

0800e304 <siprintf>:
 800e304:	b40e      	push	{r1, r2, r3}
 800e306:	b500      	push	{lr}
 800e308:	b09c      	sub	sp, #112	; 0x70
 800e30a:	ab1d      	add	r3, sp, #116	; 0x74
 800e30c:	9002      	str	r0, [sp, #8]
 800e30e:	9006      	str	r0, [sp, #24]
 800e310:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e314:	4809      	ldr	r0, [pc, #36]	; (800e33c <siprintf+0x38>)
 800e316:	9107      	str	r1, [sp, #28]
 800e318:	9104      	str	r1, [sp, #16]
 800e31a:	4909      	ldr	r1, [pc, #36]	; (800e340 <siprintf+0x3c>)
 800e31c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e320:	9105      	str	r1, [sp, #20]
 800e322:	6800      	ldr	r0, [r0, #0]
 800e324:	9301      	str	r3, [sp, #4]
 800e326:	a902      	add	r1, sp, #8
 800e328:	f000 fa56 	bl	800e7d8 <_svfiprintf_r>
 800e32c:	9b02      	ldr	r3, [sp, #8]
 800e32e:	2200      	movs	r2, #0
 800e330:	701a      	strb	r2, [r3, #0]
 800e332:	b01c      	add	sp, #112	; 0x70
 800e334:	f85d eb04 	ldr.w	lr, [sp], #4
 800e338:	b003      	add	sp, #12
 800e33a:	4770      	bx	lr
 800e33c:	20000014 	.word	0x20000014
 800e340:	ffff0208 	.word	0xffff0208

0800e344 <strncpy>:
 800e344:	b510      	push	{r4, lr}
 800e346:	3901      	subs	r1, #1
 800e348:	4603      	mov	r3, r0
 800e34a:	b132      	cbz	r2, 800e35a <strncpy+0x16>
 800e34c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e350:	f803 4b01 	strb.w	r4, [r3], #1
 800e354:	3a01      	subs	r2, #1
 800e356:	2c00      	cmp	r4, #0
 800e358:	d1f7      	bne.n	800e34a <strncpy+0x6>
 800e35a:	441a      	add	r2, r3
 800e35c:	2100      	movs	r1, #0
 800e35e:	4293      	cmp	r3, r2
 800e360:	d100      	bne.n	800e364 <strncpy+0x20>
 800e362:	bd10      	pop	{r4, pc}
 800e364:	f803 1b01 	strb.w	r1, [r3], #1
 800e368:	e7f9      	b.n	800e35e <strncpy+0x1a>
	...

0800e36c <__assert_func>:
 800e36c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e36e:	4614      	mov	r4, r2
 800e370:	461a      	mov	r2, r3
 800e372:	4b09      	ldr	r3, [pc, #36]	; (800e398 <__assert_func+0x2c>)
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	4605      	mov	r5, r0
 800e378:	68d8      	ldr	r0, [r3, #12]
 800e37a:	b14c      	cbz	r4, 800e390 <__assert_func+0x24>
 800e37c:	4b07      	ldr	r3, [pc, #28]	; (800e39c <__assert_func+0x30>)
 800e37e:	9100      	str	r1, [sp, #0]
 800e380:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e384:	4906      	ldr	r1, [pc, #24]	; (800e3a0 <__assert_func+0x34>)
 800e386:	462b      	mov	r3, r5
 800e388:	f000 f8e4 	bl	800e554 <fiprintf>
 800e38c:	f000 ff38 	bl	800f200 <abort>
 800e390:	4b04      	ldr	r3, [pc, #16]	; (800e3a4 <__assert_func+0x38>)
 800e392:	461c      	mov	r4, r3
 800e394:	e7f3      	b.n	800e37e <__assert_func+0x12>
 800e396:	bf00      	nop
 800e398:	20000014 	.word	0x20000014
 800e39c:	08012196 	.word	0x08012196
 800e3a0:	080121a3 	.word	0x080121a3
 800e3a4:	080121d1 	.word	0x080121d1

0800e3a8 <std>:
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	b510      	push	{r4, lr}
 800e3ac:	4604      	mov	r4, r0
 800e3ae:	e9c0 3300 	strd	r3, r3, [r0]
 800e3b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e3b6:	6083      	str	r3, [r0, #8]
 800e3b8:	8181      	strh	r1, [r0, #12]
 800e3ba:	6643      	str	r3, [r0, #100]	; 0x64
 800e3bc:	81c2      	strh	r2, [r0, #14]
 800e3be:	6183      	str	r3, [r0, #24]
 800e3c0:	4619      	mov	r1, r3
 800e3c2:	2208      	movs	r2, #8
 800e3c4:	305c      	adds	r0, #92	; 0x5c
 800e3c6:	f7ff ff3d 	bl	800e244 <memset>
 800e3ca:	4b05      	ldr	r3, [pc, #20]	; (800e3e0 <std+0x38>)
 800e3cc:	6263      	str	r3, [r4, #36]	; 0x24
 800e3ce:	4b05      	ldr	r3, [pc, #20]	; (800e3e4 <std+0x3c>)
 800e3d0:	62a3      	str	r3, [r4, #40]	; 0x28
 800e3d2:	4b05      	ldr	r3, [pc, #20]	; (800e3e8 <std+0x40>)
 800e3d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e3d6:	4b05      	ldr	r3, [pc, #20]	; (800e3ec <std+0x44>)
 800e3d8:	6224      	str	r4, [r4, #32]
 800e3da:	6323      	str	r3, [r4, #48]	; 0x30
 800e3dc:	bd10      	pop	{r4, pc}
 800e3de:	bf00      	nop
 800e3e0:	0800efd5 	.word	0x0800efd5
 800e3e4:	0800eff7 	.word	0x0800eff7
 800e3e8:	0800f02f 	.word	0x0800f02f
 800e3ec:	0800f053 	.word	0x0800f053

0800e3f0 <_cleanup_r>:
 800e3f0:	4901      	ldr	r1, [pc, #4]	; (800e3f8 <_cleanup_r+0x8>)
 800e3f2:	f000 b8c1 	b.w	800e578 <_fwalk_reent>
 800e3f6:	bf00      	nop
 800e3f8:	0800f33d 	.word	0x0800f33d

0800e3fc <__sfmoreglue>:
 800e3fc:	b570      	push	{r4, r5, r6, lr}
 800e3fe:	1e4a      	subs	r2, r1, #1
 800e400:	2568      	movs	r5, #104	; 0x68
 800e402:	4355      	muls	r5, r2
 800e404:	460e      	mov	r6, r1
 800e406:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e40a:	f000 f92f 	bl	800e66c <_malloc_r>
 800e40e:	4604      	mov	r4, r0
 800e410:	b140      	cbz	r0, 800e424 <__sfmoreglue+0x28>
 800e412:	2100      	movs	r1, #0
 800e414:	e9c0 1600 	strd	r1, r6, [r0]
 800e418:	300c      	adds	r0, #12
 800e41a:	60a0      	str	r0, [r4, #8]
 800e41c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e420:	f7ff ff10 	bl	800e244 <memset>
 800e424:	4620      	mov	r0, r4
 800e426:	bd70      	pop	{r4, r5, r6, pc}

0800e428 <__sfp_lock_acquire>:
 800e428:	4801      	ldr	r0, [pc, #4]	; (800e430 <__sfp_lock_acquire+0x8>)
 800e42a:	f000 b8c5 	b.w	800e5b8 <__retarget_lock_acquire_recursive>
 800e42e:	bf00      	nop
 800e430:	20008b28 	.word	0x20008b28

0800e434 <__sfp_lock_release>:
 800e434:	4801      	ldr	r0, [pc, #4]	; (800e43c <__sfp_lock_release+0x8>)
 800e436:	f000 b8c0 	b.w	800e5ba <__retarget_lock_release_recursive>
 800e43a:	bf00      	nop
 800e43c:	20008b28 	.word	0x20008b28

0800e440 <__sinit_lock_acquire>:
 800e440:	4801      	ldr	r0, [pc, #4]	; (800e448 <__sinit_lock_acquire+0x8>)
 800e442:	f000 b8b9 	b.w	800e5b8 <__retarget_lock_acquire_recursive>
 800e446:	bf00      	nop
 800e448:	20008b23 	.word	0x20008b23

0800e44c <__sinit_lock_release>:
 800e44c:	4801      	ldr	r0, [pc, #4]	; (800e454 <__sinit_lock_release+0x8>)
 800e44e:	f000 b8b4 	b.w	800e5ba <__retarget_lock_release_recursive>
 800e452:	bf00      	nop
 800e454:	20008b23 	.word	0x20008b23

0800e458 <__sinit>:
 800e458:	b510      	push	{r4, lr}
 800e45a:	4604      	mov	r4, r0
 800e45c:	f7ff fff0 	bl	800e440 <__sinit_lock_acquire>
 800e460:	69a3      	ldr	r3, [r4, #24]
 800e462:	b11b      	cbz	r3, 800e46c <__sinit+0x14>
 800e464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e468:	f7ff bff0 	b.w	800e44c <__sinit_lock_release>
 800e46c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e470:	6523      	str	r3, [r4, #80]	; 0x50
 800e472:	4b13      	ldr	r3, [pc, #76]	; (800e4c0 <__sinit+0x68>)
 800e474:	4a13      	ldr	r2, [pc, #76]	; (800e4c4 <__sinit+0x6c>)
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	62a2      	str	r2, [r4, #40]	; 0x28
 800e47a:	42a3      	cmp	r3, r4
 800e47c:	bf04      	itt	eq
 800e47e:	2301      	moveq	r3, #1
 800e480:	61a3      	streq	r3, [r4, #24]
 800e482:	4620      	mov	r0, r4
 800e484:	f000 f820 	bl	800e4c8 <__sfp>
 800e488:	6060      	str	r0, [r4, #4]
 800e48a:	4620      	mov	r0, r4
 800e48c:	f000 f81c 	bl	800e4c8 <__sfp>
 800e490:	60a0      	str	r0, [r4, #8]
 800e492:	4620      	mov	r0, r4
 800e494:	f000 f818 	bl	800e4c8 <__sfp>
 800e498:	2200      	movs	r2, #0
 800e49a:	60e0      	str	r0, [r4, #12]
 800e49c:	2104      	movs	r1, #4
 800e49e:	6860      	ldr	r0, [r4, #4]
 800e4a0:	f7ff ff82 	bl	800e3a8 <std>
 800e4a4:	68a0      	ldr	r0, [r4, #8]
 800e4a6:	2201      	movs	r2, #1
 800e4a8:	2109      	movs	r1, #9
 800e4aa:	f7ff ff7d 	bl	800e3a8 <std>
 800e4ae:	68e0      	ldr	r0, [r4, #12]
 800e4b0:	2202      	movs	r2, #2
 800e4b2:	2112      	movs	r1, #18
 800e4b4:	f7ff ff78 	bl	800e3a8 <std>
 800e4b8:	2301      	movs	r3, #1
 800e4ba:	61a3      	str	r3, [r4, #24]
 800e4bc:	e7d2      	b.n	800e464 <__sinit+0xc>
 800e4be:	bf00      	nop
 800e4c0:	0801211c 	.word	0x0801211c
 800e4c4:	0800e3f1 	.word	0x0800e3f1

0800e4c8 <__sfp>:
 800e4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4ca:	4607      	mov	r7, r0
 800e4cc:	f7ff ffac 	bl	800e428 <__sfp_lock_acquire>
 800e4d0:	4b1e      	ldr	r3, [pc, #120]	; (800e54c <__sfp+0x84>)
 800e4d2:	681e      	ldr	r6, [r3, #0]
 800e4d4:	69b3      	ldr	r3, [r6, #24]
 800e4d6:	b913      	cbnz	r3, 800e4de <__sfp+0x16>
 800e4d8:	4630      	mov	r0, r6
 800e4da:	f7ff ffbd 	bl	800e458 <__sinit>
 800e4de:	3648      	adds	r6, #72	; 0x48
 800e4e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e4e4:	3b01      	subs	r3, #1
 800e4e6:	d503      	bpl.n	800e4f0 <__sfp+0x28>
 800e4e8:	6833      	ldr	r3, [r6, #0]
 800e4ea:	b30b      	cbz	r3, 800e530 <__sfp+0x68>
 800e4ec:	6836      	ldr	r6, [r6, #0]
 800e4ee:	e7f7      	b.n	800e4e0 <__sfp+0x18>
 800e4f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e4f4:	b9d5      	cbnz	r5, 800e52c <__sfp+0x64>
 800e4f6:	4b16      	ldr	r3, [pc, #88]	; (800e550 <__sfp+0x88>)
 800e4f8:	60e3      	str	r3, [r4, #12]
 800e4fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e4fe:	6665      	str	r5, [r4, #100]	; 0x64
 800e500:	f000 f859 	bl	800e5b6 <__retarget_lock_init_recursive>
 800e504:	f7ff ff96 	bl	800e434 <__sfp_lock_release>
 800e508:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e50c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e510:	6025      	str	r5, [r4, #0]
 800e512:	61a5      	str	r5, [r4, #24]
 800e514:	2208      	movs	r2, #8
 800e516:	4629      	mov	r1, r5
 800e518:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e51c:	f7ff fe92 	bl	800e244 <memset>
 800e520:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e524:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e528:	4620      	mov	r0, r4
 800e52a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e52c:	3468      	adds	r4, #104	; 0x68
 800e52e:	e7d9      	b.n	800e4e4 <__sfp+0x1c>
 800e530:	2104      	movs	r1, #4
 800e532:	4638      	mov	r0, r7
 800e534:	f7ff ff62 	bl	800e3fc <__sfmoreglue>
 800e538:	4604      	mov	r4, r0
 800e53a:	6030      	str	r0, [r6, #0]
 800e53c:	2800      	cmp	r0, #0
 800e53e:	d1d5      	bne.n	800e4ec <__sfp+0x24>
 800e540:	f7ff ff78 	bl	800e434 <__sfp_lock_release>
 800e544:	230c      	movs	r3, #12
 800e546:	603b      	str	r3, [r7, #0]
 800e548:	e7ee      	b.n	800e528 <__sfp+0x60>
 800e54a:	bf00      	nop
 800e54c:	0801211c 	.word	0x0801211c
 800e550:	ffff0001 	.word	0xffff0001

0800e554 <fiprintf>:
 800e554:	b40e      	push	{r1, r2, r3}
 800e556:	b503      	push	{r0, r1, lr}
 800e558:	4601      	mov	r1, r0
 800e55a:	ab03      	add	r3, sp, #12
 800e55c:	4805      	ldr	r0, [pc, #20]	; (800e574 <fiprintf+0x20>)
 800e55e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e562:	6800      	ldr	r0, [r0, #0]
 800e564:	9301      	str	r3, [sp, #4]
 800e566:	f000 fa61 	bl	800ea2c <_vfiprintf_r>
 800e56a:	b002      	add	sp, #8
 800e56c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e570:	b003      	add	sp, #12
 800e572:	4770      	bx	lr
 800e574:	20000014 	.word	0x20000014

0800e578 <_fwalk_reent>:
 800e578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e57c:	4606      	mov	r6, r0
 800e57e:	4688      	mov	r8, r1
 800e580:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e584:	2700      	movs	r7, #0
 800e586:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e58a:	f1b9 0901 	subs.w	r9, r9, #1
 800e58e:	d505      	bpl.n	800e59c <_fwalk_reent+0x24>
 800e590:	6824      	ldr	r4, [r4, #0]
 800e592:	2c00      	cmp	r4, #0
 800e594:	d1f7      	bne.n	800e586 <_fwalk_reent+0xe>
 800e596:	4638      	mov	r0, r7
 800e598:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e59c:	89ab      	ldrh	r3, [r5, #12]
 800e59e:	2b01      	cmp	r3, #1
 800e5a0:	d907      	bls.n	800e5b2 <_fwalk_reent+0x3a>
 800e5a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e5a6:	3301      	adds	r3, #1
 800e5a8:	d003      	beq.n	800e5b2 <_fwalk_reent+0x3a>
 800e5aa:	4629      	mov	r1, r5
 800e5ac:	4630      	mov	r0, r6
 800e5ae:	47c0      	blx	r8
 800e5b0:	4307      	orrs	r7, r0
 800e5b2:	3568      	adds	r5, #104	; 0x68
 800e5b4:	e7e9      	b.n	800e58a <_fwalk_reent+0x12>

0800e5b6 <__retarget_lock_init_recursive>:
 800e5b6:	4770      	bx	lr

0800e5b8 <__retarget_lock_acquire_recursive>:
 800e5b8:	4770      	bx	lr

0800e5ba <__retarget_lock_release_recursive>:
 800e5ba:	4770      	bx	lr

0800e5bc <malloc>:
 800e5bc:	4b02      	ldr	r3, [pc, #8]	; (800e5c8 <malloc+0xc>)
 800e5be:	4601      	mov	r1, r0
 800e5c0:	6818      	ldr	r0, [r3, #0]
 800e5c2:	f000 b853 	b.w	800e66c <_malloc_r>
 800e5c6:	bf00      	nop
 800e5c8:	20000014 	.word	0x20000014

0800e5cc <_free_r>:
 800e5cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e5ce:	2900      	cmp	r1, #0
 800e5d0:	d048      	beq.n	800e664 <_free_r+0x98>
 800e5d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e5d6:	9001      	str	r0, [sp, #4]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	f1a1 0404 	sub.w	r4, r1, #4
 800e5de:	bfb8      	it	lt
 800e5e0:	18e4      	addlt	r4, r4, r3
 800e5e2:	f000 ff5d 	bl	800f4a0 <__malloc_lock>
 800e5e6:	4a20      	ldr	r2, [pc, #128]	; (800e668 <_free_r+0x9c>)
 800e5e8:	9801      	ldr	r0, [sp, #4]
 800e5ea:	6813      	ldr	r3, [r2, #0]
 800e5ec:	4615      	mov	r5, r2
 800e5ee:	b933      	cbnz	r3, 800e5fe <_free_r+0x32>
 800e5f0:	6063      	str	r3, [r4, #4]
 800e5f2:	6014      	str	r4, [r2, #0]
 800e5f4:	b003      	add	sp, #12
 800e5f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e5fa:	f000 bf57 	b.w	800f4ac <__malloc_unlock>
 800e5fe:	42a3      	cmp	r3, r4
 800e600:	d90b      	bls.n	800e61a <_free_r+0x4e>
 800e602:	6821      	ldr	r1, [r4, #0]
 800e604:	1862      	adds	r2, r4, r1
 800e606:	4293      	cmp	r3, r2
 800e608:	bf04      	itt	eq
 800e60a:	681a      	ldreq	r2, [r3, #0]
 800e60c:	685b      	ldreq	r3, [r3, #4]
 800e60e:	6063      	str	r3, [r4, #4]
 800e610:	bf04      	itt	eq
 800e612:	1852      	addeq	r2, r2, r1
 800e614:	6022      	streq	r2, [r4, #0]
 800e616:	602c      	str	r4, [r5, #0]
 800e618:	e7ec      	b.n	800e5f4 <_free_r+0x28>
 800e61a:	461a      	mov	r2, r3
 800e61c:	685b      	ldr	r3, [r3, #4]
 800e61e:	b10b      	cbz	r3, 800e624 <_free_r+0x58>
 800e620:	42a3      	cmp	r3, r4
 800e622:	d9fa      	bls.n	800e61a <_free_r+0x4e>
 800e624:	6811      	ldr	r1, [r2, #0]
 800e626:	1855      	adds	r5, r2, r1
 800e628:	42a5      	cmp	r5, r4
 800e62a:	d10b      	bne.n	800e644 <_free_r+0x78>
 800e62c:	6824      	ldr	r4, [r4, #0]
 800e62e:	4421      	add	r1, r4
 800e630:	1854      	adds	r4, r2, r1
 800e632:	42a3      	cmp	r3, r4
 800e634:	6011      	str	r1, [r2, #0]
 800e636:	d1dd      	bne.n	800e5f4 <_free_r+0x28>
 800e638:	681c      	ldr	r4, [r3, #0]
 800e63a:	685b      	ldr	r3, [r3, #4]
 800e63c:	6053      	str	r3, [r2, #4]
 800e63e:	4421      	add	r1, r4
 800e640:	6011      	str	r1, [r2, #0]
 800e642:	e7d7      	b.n	800e5f4 <_free_r+0x28>
 800e644:	d902      	bls.n	800e64c <_free_r+0x80>
 800e646:	230c      	movs	r3, #12
 800e648:	6003      	str	r3, [r0, #0]
 800e64a:	e7d3      	b.n	800e5f4 <_free_r+0x28>
 800e64c:	6825      	ldr	r5, [r4, #0]
 800e64e:	1961      	adds	r1, r4, r5
 800e650:	428b      	cmp	r3, r1
 800e652:	bf04      	itt	eq
 800e654:	6819      	ldreq	r1, [r3, #0]
 800e656:	685b      	ldreq	r3, [r3, #4]
 800e658:	6063      	str	r3, [r4, #4]
 800e65a:	bf04      	itt	eq
 800e65c:	1949      	addeq	r1, r1, r5
 800e65e:	6021      	streq	r1, [r4, #0]
 800e660:	6054      	str	r4, [r2, #4]
 800e662:	e7c7      	b.n	800e5f4 <_free_r+0x28>
 800e664:	b003      	add	sp, #12
 800e666:	bd30      	pop	{r4, r5, pc}
 800e668:	2000020c 	.word	0x2000020c

0800e66c <_malloc_r>:
 800e66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e66e:	1ccd      	adds	r5, r1, #3
 800e670:	f025 0503 	bic.w	r5, r5, #3
 800e674:	3508      	adds	r5, #8
 800e676:	2d0c      	cmp	r5, #12
 800e678:	bf38      	it	cc
 800e67a:	250c      	movcc	r5, #12
 800e67c:	2d00      	cmp	r5, #0
 800e67e:	4606      	mov	r6, r0
 800e680:	db01      	blt.n	800e686 <_malloc_r+0x1a>
 800e682:	42a9      	cmp	r1, r5
 800e684:	d903      	bls.n	800e68e <_malloc_r+0x22>
 800e686:	230c      	movs	r3, #12
 800e688:	6033      	str	r3, [r6, #0]
 800e68a:	2000      	movs	r0, #0
 800e68c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e68e:	f000 ff07 	bl	800f4a0 <__malloc_lock>
 800e692:	4921      	ldr	r1, [pc, #132]	; (800e718 <_malloc_r+0xac>)
 800e694:	680a      	ldr	r2, [r1, #0]
 800e696:	4614      	mov	r4, r2
 800e698:	b99c      	cbnz	r4, 800e6c2 <_malloc_r+0x56>
 800e69a:	4f20      	ldr	r7, [pc, #128]	; (800e71c <_malloc_r+0xb0>)
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	b923      	cbnz	r3, 800e6aa <_malloc_r+0x3e>
 800e6a0:	4621      	mov	r1, r4
 800e6a2:	4630      	mov	r0, r6
 800e6a4:	f000 fc86 	bl	800efb4 <_sbrk_r>
 800e6a8:	6038      	str	r0, [r7, #0]
 800e6aa:	4629      	mov	r1, r5
 800e6ac:	4630      	mov	r0, r6
 800e6ae:	f000 fc81 	bl	800efb4 <_sbrk_r>
 800e6b2:	1c43      	adds	r3, r0, #1
 800e6b4:	d123      	bne.n	800e6fe <_malloc_r+0x92>
 800e6b6:	230c      	movs	r3, #12
 800e6b8:	6033      	str	r3, [r6, #0]
 800e6ba:	4630      	mov	r0, r6
 800e6bc:	f000 fef6 	bl	800f4ac <__malloc_unlock>
 800e6c0:	e7e3      	b.n	800e68a <_malloc_r+0x1e>
 800e6c2:	6823      	ldr	r3, [r4, #0]
 800e6c4:	1b5b      	subs	r3, r3, r5
 800e6c6:	d417      	bmi.n	800e6f8 <_malloc_r+0x8c>
 800e6c8:	2b0b      	cmp	r3, #11
 800e6ca:	d903      	bls.n	800e6d4 <_malloc_r+0x68>
 800e6cc:	6023      	str	r3, [r4, #0]
 800e6ce:	441c      	add	r4, r3
 800e6d0:	6025      	str	r5, [r4, #0]
 800e6d2:	e004      	b.n	800e6de <_malloc_r+0x72>
 800e6d4:	6863      	ldr	r3, [r4, #4]
 800e6d6:	42a2      	cmp	r2, r4
 800e6d8:	bf0c      	ite	eq
 800e6da:	600b      	streq	r3, [r1, #0]
 800e6dc:	6053      	strne	r3, [r2, #4]
 800e6de:	4630      	mov	r0, r6
 800e6e0:	f000 fee4 	bl	800f4ac <__malloc_unlock>
 800e6e4:	f104 000b 	add.w	r0, r4, #11
 800e6e8:	1d23      	adds	r3, r4, #4
 800e6ea:	f020 0007 	bic.w	r0, r0, #7
 800e6ee:	1ac2      	subs	r2, r0, r3
 800e6f0:	d0cc      	beq.n	800e68c <_malloc_r+0x20>
 800e6f2:	1a1b      	subs	r3, r3, r0
 800e6f4:	50a3      	str	r3, [r4, r2]
 800e6f6:	e7c9      	b.n	800e68c <_malloc_r+0x20>
 800e6f8:	4622      	mov	r2, r4
 800e6fa:	6864      	ldr	r4, [r4, #4]
 800e6fc:	e7cc      	b.n	800e698 <_malloc_r+0x2c>
 800e6fe:	1cc4      	adds	r4, r0, #3
 800e700:	f024 0403 	bic.w	r4, r4, #3
 800e704:	42a0      	cmp	r0, r4
 800e706:	d0e3      	beq.n	800e6d0 <_malloc_r+0x64>
 800e708:	1a21      	subs	r1, r4, r0
 800e70a:	4630      	mov	r0, r6
 800e70c:	f000 fc52 	bl	800efb4 <_sbrk_r>
 800e710:	3001      	adds	r0, #1
 800e712:	d1dd      	bne.n	800e6d0 <_malloc_r+0x64>
 800e714:	e7cf      	b.n	800e6b6 <_malloc_r+0x4a>
 800e716:	bf00      	nop
 800e718:	2000020c 	.word	0x2000020c
 800e71c:	20000210 	.word	0x20000210

0800e720 <__ssputs_r>:
 800e720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e724:	688e      	ldr	r6, [r1, #8]
 800e726:	429e      	cmp	r6, r3
 800e728:	4682      	mov	sl, r0
 800e72a:	460c      	mov	r4, r1
 800e72c:	4690      	mov	r8, r2
 800e72e:	461f      	mov	r7, r3
 800e730:	d838      	bhi.n	800e7a4 <__ssputs_r+0x84>
 800e732:	898a      	ldrh	r2, [r1, #12]
 800e734:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e738:	d032      	beq.n	800e7a0 <__ssputs_r+0x80>
 800e73a:	6825      	ldr	r5, [r4, #0]
 800e73c:	6909      	ldr	r1, [r1, #16]
 800e73e:	eba5 0901 	sub.w	r9, r5, r1
 800e742:	6965      	ldr	r5, [r4, #20]
 800e744:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e748:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e74c:	3301      	adds	r3, #1
 800e74e:	444b      	add	r3, r9
 800e750:	106d      	asrs	r5, r5, #1
 800e752:	429d      	cmp	r5, r3
 800e754:	bf38      	it	cc
 800e756:	461d      	movcc	r5, r3
 800e758:	0553      	lsls	r3, r2, #21
 800e75a:	d531      	bpl.n	800e7c0 <__ssputs_r+0xa0>
 800e75c:	4629      	mov	r1, r5
 800e75e:	f7ff ff85 	bl	800e66c <_malloc_r>
 800e762:	4606      	mov	r6, r0
 800e764:	b950      	cbnz	r0, 800e77c <__ssputs_r+0x5c>
 800e766:	230c      	movs	r3, #12
 800e768:	f8ca 3000 	str.w	r3, [sl]
 800e76c:	89a3      	ldrh	r3, [r4, #12]
 800e76e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e772:	81a3      	strh	r3, [r4, #12]
 800e774:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e77c:	6921      	ldr	r1, [r4, #16]
 800e77e:	464a      	mov	r2, r9
 800e780:	f7ff fd38 	bl	800e1f4 <memcpy>
 800e784:	89a3      	ldrh	r3, [r4, #12]
 800e786:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e78a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e78e:	81a3      	strh	r3, [r4, #12]
 800e790:	6126      	str	r6, [r4, #16]
 800e792:	6165      	str	r5, [r4, #20]
 800e794:	444e      	add	r6, r9
 800e796:	eba5 0509 	sub.w	r5, r5, r9
 800e79a:	6026      	str	r6, [r4, #0]
 800e79c:	60a5      	str	r5, [r4, #8]
 800e79e:	463e      	mov	r6, r7
 800e7a0:	42be      	cmp	r6, r7
 800e7a2:	d900      	bls.n	800e7a6 <__ssputs_r+0x86>
 800e7a4:	463e      	mov	r6, r7
 800e7a6:	4632      	mov	r2, r6
 800e7a8:	6820      	ldr	r0, [r4, #0]
 800e7aa:	4641      	mov	r1, r8
 800e7ac:	f7ff fd30 	bl	800e210 <memmove>
 800e7b0:	68a3      	ldr	r3, [r4, #8]
 800e7b2:	6822      	ldr	r2, [r4, #0]
 800e7b4:	1b9b      	subs	r3, r3, r6
 800e7b6:	4432      	add	r2, r6
 800e7b8:	60a3      	str	r3, [r4, #8]
 800e7ba:	6022      	str	r2, [r4, #0]
 800e7bc:	2000      	movs	r0, #0
 800e7be:	e7db      	b.n	800e778 <__ssputs_r+0x58>
 800e7c0:	462a      	mov	r2, r5
 800e7c2:	f000 fe79 	bl	800f4b8 <_realloc_r>
 800e7c6:	4606      	mov	r6, r0
 800e7c8:	2800      	cmp	r0, #0
 800e7ca:	d1e1      	bne.n	800e790 <__ssputs_r+0x70>
 800e7cc:	6921      	ldr	r1, [r4, #16]
 800e7ce:	4650      	mov	r0, sl
 800e7d0:	f7ff fefc 	bl	800e5cc <_free_r>
 800e7d4:	e7c7      	b.n	800e766 <__ssputs_r+0x46>
	...

0800e7d8 <_svfiprintf_r>:
 800e7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7dc:	4698      	mov	r8, r3
 800e7de:	898b      	ldrh	r3, [r1, #12]
 800e7e0:	061b      	lsls	r3, r3, #24
 800e7e2:	b09d      	sub	sp, #116	; 0x74
 800e7e4:	4607      	mov	r7, r0
 800e7e6:	460d      	mov	r5, r1
 800e7e8:	4614      	mov	r4, r2
 800e7ea:	d50e      	bpl.n	800e80a <_svfiprintf_r+0x32>
 800e7ec:	690b      	ldr	r3, [r1, #16]
 800e7ee:	b963      	cbnz	r3, 800e80a <_svfiprintf_r+0x32>
 800e7f0:	2140      	movs	r1, #64	; 0x40
 800e7f2:	f7ff ff3b 	bl	800e66c <_malloc_r>
 800e7f6:	6028      	str	r0, [r5, #0]
 800e7f8:	6128      	str	r0, [r5, #16]
 800e7fa:	b920      	cbnz	r0, 800e806 <_svfiprintf_r+0x2e>
 800e7fc:	230c      	movs	r3, #12
 800e7fe:	603b      	str	r3, [r7, #0]
 800e800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e804:	e0d1      	b.n	800e9aa <_svfiprintf_r+0x1d2>
 800e806:	2340      	movs	r3, #64	; 0x40
 800e808:	616b      	str	r3, [r5, #20]
 800e80a:	2300      	movs	r3, #0
 800e80c:	9309      	str	r3, [sp, #36]	; 0x24
 800e80e:	2320      	movs	r3, #32
 800e810:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e814:	f8cd 800c 	str.w	r8, [sp, #12]
 800e818:	2330      	movs	r3, #48	; 0x30
 800e81a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e9c4 <_svfiprintf_r+0x1ec>
 800e81e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e822:	f04f 0901 	mov.w	r9, #1
 800e826:	4623      	mov	r3, r4
 800e828:	469a      	mov	sl, r3
 800e82a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e82e:	b10a      	cbz	r2, 800e834 <_svfiprintf_r+0x5c>
 800e830:	2a25      	cmp	r2, #37	; 0x25
 800e832:	d1f9      	bne.n	800e828 <_svfiprintf_r+0x50>
 800e834:	ebba 0b04 	subs.w	fp, sl, r4
 800e838:	d00b      	beq.n	800e852 <_svfiprintf_r+0x7a>
 800e83a:	465b      	mov	r3, fp
 800e83c:	4622      	mov	r2, r4
 800e83e:	4629      	mov	r1, r5
 800e840:	4638      	mov	r0, r7
 800e842:	f7ff ff6d 	bl	800e720 <__ssputs_r>
 800e846:	3001      	adds	r0, #1
 800e848:	f000 80aa 	beq.w	800e9a0 <_svfiprintf_r+0x1c8>
 800e84c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e84e:	445a      	add	r2, fp
 800e850:	9209      	str	r2, [sp, #36]	; 0x24
 800e852:	f89a 3000 	ldrb.w	r3, [sl]
 800e856:	2b00      	cmp	r3, #0
 800e858:	f000 80a2 	beq.w	800e9a0 <_svfiprintf_r+0x1c8>
 800e85c:	2300      	movs	r3, #0
 800e85e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e862:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e866:	f10a 0a01 	add.w	sl, sl, #1
 800e86a:	9304      	str	r3, [sp, #16]
 800e86c:	9307      	str	r3, [sp, #28]
 800e86e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e872:	931a      	str	r3, [sp, #104]	; 0x68
 800e874:	4654      	mov	r4, sl
 800e876:	2205      	movs	r2, #5
 800e878:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e87c:	4851      	ldr	r0, [pc, #324]	; (800e9c4 <_svfiprintf_r+0x1ec>)
 800e87e:	f7f1 fca7 	bl	80001d0 <memchr>
 800e882:	9a04      	ldr	r2, [sp, #16]
 800e884:	b9d8      	cbnz	r0, 800e8be <_svfiprintf_r+0xe6>
 800e886:	06d0      	lsls	r0, r2, #27
 800e888:	bf44      	itt	mi
 800e88a:	2320      	movmi	r3, #32
 800e88c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e890:	0711      	lsls	r1, r2, #28
 800e892:	bf44      	itt	mi
 800e894:	232b      	movmi	r3, #43	; 0x2b
 800e896:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e89a:	f89a 3000 	ldrb.w	r3, [sl]
 800e89e:	2b2a      	cmp	r3, #42	; 0x2a
 800e8a0:	d015      	beq.n	800e8ce <_svfiprintf_r+0xf6>
 800e8a2:	9a07      	ldr	r2, [sp, #28]
 800e8a4:	4654      	mov	r4, sl
 800e8a6:	2000      	movs	r0, #0
 800e8a8:	f04f 0c0a 	mov.w	ip, #10
 800e8ac:	4621      	mov	r1, r4
 800e8ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e8b2:	3b30      	subs	r3, #48	; 0x30
 800e8b4:	2b09      	cmp	r3, #9
 800e8b6:	d94e      	bls.n	800e956 <_svfiprintf_r+0x17e>
 800e8b8:	b1b0      	cbz	r0, 800e8e8 <_svfiprintf_r+0x110>
 800e8ba:	9207      	str	r2, [sp, #28]
 800e8bc:	e014      	b.n	800e8e8 <_svfiprintf_r+0x110>
 800e8be:	eba0 0308 	sub.w	r3, r0, r8
 800e8c2:	fa09 f303 	lsl.w	r3, r9, r3
 800e8c6:	4313      	orrs	r3, r2
 800e8c8:	9304      	str	r3, [sp, #16]
 800e8ca:	46a2      	mov	sl, r4
 800e8cc:	e7d2      	b.n	800e874 <_svfiprintf_r+0x9c>
 800e8ce:	9b03      	ldr	r3, [sp, #12]
 800e8d0:	1d19      	adds	r1, r3, #4
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	9103      	str	r1, [sp, #12]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	bfbb      	ittet	lt
 800e8da:	425b      	neglt	r3, r3
 800e8dc:	f042 0202 	orrlt.w	r2, r2, #2
 800e8e0:	9307      	strge	r3, [sp, #28]
 800e8e2:	9307      	strlt	r3, [sp, #28]
 800e8e4:	bfb8      	it	lt
 800e8e6:	9204      	strlt	r2, [sp, #16]
 800e8e8:	7823      	ldrb	r3, [r4, #0]
 800e8ea:	2b2e      	cmp	r3, #46	; 0x2e
 800e8ec:	d10c      	bne.n	800e908 <_svfiprintf_r+0x130>
 800e8ee:	7863      	ldrb	r3, [r4, #1]
 800e8f0:	2b2a      	cmp	r3, #42	; 0x2a
 800e8f2:	d135      	bne.n	800e960 <_svfiprintf_r+0x188>
 800e8f4:	9b03      	ldr	r3, [sp, #12]
 800e8f6:	1d1a      	adds	r2, r3, #4
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	9203      	str	r2, [sp, #12]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	bfb8      	it	lt
 800e900:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e904:	3402      	adds	r4, #2
 800e906:	9305      	str	r3, [sp, #20]
 800e908:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e9d4 <_svfiprintf_r+0x1fc>
 800e90c:	7821      	ldrb	r1, [r4, #0]
 800e90e:	2203      	movs	r2, #3
 800e910:	4650      	mov	r0, sl
 800e912:	f7f1 fc5d 	bl	80001d0 <memchr>
 800e916:	b140      	cbz	r0, 800e92a <_svfiprintf_r+0x152>
 800e918:	2340      	movs	r3, #64	; 0x40
 800e91a:	eba0 000a 	sub.w	r0, r0, sl
 800e91e:	fa03 f000 	lsl.w	r0, r3, r0
 800e922:	9b04      	ldr	r3, [sp, #16]
 800e924:	4303      	orrs	r3, r0
 800e926:	3401      	adds	r4, #1
 800e928:	9304      	str	r3, [sp, #16]
 800e92a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e92e:	4826      	ldr	r0, [pc, #152]	; (800e9c8 <_svfiprintf_r+0x1f0>)
 800e930:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e934:	2206      	movs	r2, #6
 800e936:	f7f1 fc4b 	bl	80001d0 <memchr>
 800e93a:	2800      	cmp	r0, #0
 800e93c:	d038      	beq.n	800e9b0 <_svfiprintf_r+0x1d8>
 800e93e:	4b23      	ldr	r3, [pc, #140]	; (800e9cc <_svfiprintf_r+0x1f4>)
 800e940:	bb1b      	cbnz	r3, 800e98a <_svfiprintf_r+0x1b2>
 800e942:	9b03      	ldr	r3, [sp, #12]
 800e944:	3307      	adds	r3, #7
 800e946:	f023 0307 	bic.w	r3, r3, #7
 800e94a:	3308      	adds	r3, #8
 800e94c:	9303      	str	r3, [sp, #12]
 800e94e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e950:	4433      	add	r3, r6
 800e952:	9309      	str	r3, [sp, #36]	; 0x24
 800e954:	e767      	b.n	800e826 <_svfiprintf_r+0x4e>
 800e956:	fb0c 3202 	mla	r2, ip, r2, r3
 800e95a:	460c      	mov	r4, r1
 800e95c:	2001      	movs	r0, #1
 800e95e:	e7a5      	b.n	800e8ac <_svfiprintf_r+0xd4>
 800e960:	2300      	movs	r3, #0
 800e962:	3401      	adds	r4, #1
 800e964:	9305      	str	r3, [sp, #20]
 800e966:	4619      	mov	r1, r3
 800e968:	f04f 0c0a 	mov.w	ip, #10
 800e96c:	4620      	mov	r0, r4
 800e96e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e972:	3a30      	subs	r2, #48	; 0x30
 800e974:	2a09      	cmp	r2, #9
 800e976:	d903      	bls.n	800e980 <_svfiprintf_r+0x1a8>
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d0c5      	beq.n	800e908 <_svfiprintf_r+0x130>
 800e97c:	9105      	str	r1, [sp, #20]
 800e97e:	e7c3      	b.n	800e908 <_svfiprintf_r+0x130>
 800e980:	fb0c 2101 	mla	r1, ip, r1, r2
 800e984:	4604      	mov	r4, r0
 800e986:	2301      	movs	r3, #1
 800e988:	e7f0      	b.n	800e96c <_svfiprintf_r+0x194>
 800e98a:	ab03      	add	r3, sp, #12
 800e98c:	9300      	str	r3, [sp, #0]
 800e98e:	462a      	mov	r2, r5
 800e990:	4b0f      	ldr	r3, [pc, #60]	; (800e9d0 <_svfiprintf_r+0x1f8>)
 800e992:	a904      	add	r1, sp, #16
 800e994:	4638      	mov	r0, r7
 800e996:	f3af 8000 	nop.w
 800e99a:	1c42      	adds	r2, r0, #1
 800e99c:	4606      	mov	r6, r0
 800e99e:	d1d6      	bne.n	800e94e <_svfiprintf_r+0x176>
 800e9a0:	89ab      	ldrh	r3, [r5, #12]
 800e9a2:	065b      	lsls	r3, r3, #25
 800e9a4:	f53f af2c 	bmi.w	800e800 <_svfiprintf_r+0x28>
 800e9a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e9aa:	b01d      	add	sp, #116	; 0x74
 800e9ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9b0:	ab03      	add	r3, sp, #12
 800e9b2:	9300      	str	r3, [sp, #0]
 800e9b4:	462a      	mov	r2, r5
 800e9b6:	4b06      	ldr	r3, [pc, #24]	; (800e9d0 <_svfiprintf_r+0x1f8>)
 800e9b8:	a904      	add	r1, sp, #16
 800e9ba:	4638      	mov	r0, r7
 800e9bc:	f000 f9d4 	bl	800ed68 <_printf_i>
 800e9c0:	e7eb      	b.n	800e99a <_svfiprintf_r+0x1c2>
 800e9c2:	bf00      	nop
 800e9c4:	08012234 	.word	0x08012234
 800e9c8:	0801223e 	.word	0x0801223e
 800e9cc:	00000000 	.word	0x00000000
 800e9d0:	0800e721 	.word	0x0800e721
 800e9d4:	0801223a 	.word	0x0801223a

0800e9d8 <__sfputc_r>:
 800e9d8:	6893      	ldr	r3, [r2, #8]
 800e9da:	3b01      	subs	r3, #1
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	b410      	push	{r4}
 800e9e0:	6093      	str	r3, [r2, #8]
 800e9e2:	da08      	bge.n	800e9f6 <__sfputc_r+0x1e>
 800e9e4:	6994      	ldr	r4, [r2, #24]
 800e9e6:	42a3      	cmp	r3, r4
 800e9e8:	db01      	blt.n	800e9ee <__sfputc_r+0x16>
 800e9ea:	290a      	cmp	r1, #10
 800e9ec:	d103      	bne.n	800e9f6 <__sfputc_r+0x1e>
 800e9ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e9f2:	f000 bb33 	b.w	800f05c <__swbuf_r>
 800e9f6:	6813      	ldr	r3, [r2, #0]
 800e9f8:	1c58      	adds	r0, r3, #1
 800e9fa:	6010      	str	r0, [r2, #0]
 800e9fc:	7019      	strb	r1, [r3, #0]
 800e9fe:	4608      	mov	r0, r1
 800ea00:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea04:	4770      	bx	lr

0800ea06 <__sfputs_r>:
 800ea06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea08:	4606      	mov	r6, r0
 800ea0a:	460f      	mov	r7, r1
 800ea0c:	4614      	mov	r4, r2
 800ea0e:	18d5      	adds	r5, r2, r3
 800ea10:	42ac      	cmp	r4, r5
 800ea12:	d101      	bne.n	800ea18 <__sfputs_r+0x12>
 800ea14:	2000      	movs	r0, #0
 800ea16:	e007      	b.n	800ea28 <__sfputs_r+0x22>
 800ea18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea1c:	463a      	mov	r2, r7
 800ea1e:	4630      	mov	r0, r6
 800ea20:	f7ff ffda 	bl	800e9d8 <__sfputc_r>
 800ea24:	1c43      	adds	r3, r0, #1
 800ea26:	d1f3      	bne.n	800ea10 <__sfputs_r+0xa>
 800ea28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ea2c <_vfiprintf_r>:
 800ea2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea30:	460d      	mov	r5, r1
 800ea32:	b09d      	sub	sp, #116	; 0x74
 800ea34:	4614      	mov	r4, r2
 800ea36:	4698      	mov	r8, r3
 800ea38:	4606      	mov	r6, r0
 800ea3a:	b118      	cbz	r0, 800ea44 <_vfiprintf_r+0x18>
 800ea3c:	6983      	ldr	r3, [r0, #24]
 800ea3e:	b90b      	cbnz	r3, 800ea44 <_vfiprintf_r+0x18>
 800ea40:	f7ff fd0a 	bl	800e458 <__sinit>
 800ea44:	4b89      	ldr	r3, [pc, #548]	; (800ec6c <_vfiprintf_r+0x240>)
 800ea46:	429d      	cmp	r5, r3
 800ea48:	d11b      	bne.n	800ea82 <_vfiprintf_r+0x56>
 800ea4a:	6875      	ldr	r5, [r6, #4]
 800ea4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ea4e:	07d9      	lsls	r1, r3, #31
 800ea50:	d405      	bmi.n	800ea5e <_vfiprintf_r+0x32>
 800ea52:	89ab      	ldrh	r3, [r5, #12]
 800ea54:	059a      	lsls	r2, r3, #22
 800ea56:	d402      	bmi.n	800ea5e <_vfiprintf_r+0x32>
 800ea58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ea5a:	f7ff fdad 	bl	800e5b8 <__retarget_lock_acquire_recursive>
 800ea5e:	89ab      	ldrh	r3, [r5, #12]
 800ea60:	071b      	lsls	r3, r3, #28
 800ea62:	d501      	bpl.n	800ea68 <_vfiprintf_r+0x3c>
 800ea64:	692b      	ldr	r3, [r5, #16]
 800ea66:	b9eb      	cbnz	r3, 800eaa4 <_vfiprintf_r+0x78>
 800ea68:	4629      	mov	r1, r5
 800ea6a:	4630      	mov	r0, r6
 800ea6c:	f000 fb5a 	bl	800f124 <__swsetup_r>
 800ea70:	b1c0      	cbz	r0, 800eaa4 <_vfiprintf_r+0x78>
 800ea72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ea74:	07dc      	lsls	r4, r3, #31
 800ea76:	d50e      	bpl.n	800ea96 <_vfiprintf_r+0x6a>
 800ea78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ea7c:	b01d      	add	sp, #116	; 0x74
 800ea7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea82:	4b7b      	ldr	r3, [pc, #492]	; (800ec70 <_vfiprintf_r+0x244>)
 800ea84:	429d      	cmp	r5, r3
 800ea86:	d101      	bne.n	800ea8c <_vfiprintf_r+0x60>
 800ea88:	68b5      	ldr	r5, [r6, #8]
 800ea8a:	e7df      	b.n	800ea4c <_vfiprintf_r+0x20>
 800ea8c:	4b79      	ldr	r3, [pc, #484]	; (800ec74 <_vfiprintf_r+0x248>)
 800ea8e:	429d      	cmp	r5, r3
 800ea90:	bf08      	it	eq
 800ea92:	68f5      	ldreq	r5, [r6, #12]
 800ea94:	e7da      	b.n	800ea4c <_vfiprintf_r+0x20>
 800ea96:	89ab      	ldrh	r3, [r5, #12]
 800ea98:	0598      	lsls	r0, r3, #22
 800ea9a:	d4ed      	bmi.n	800ea78 <_vfiprintf_r+0x4c>
 800ea9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ea9e:	f7ff fd8c 	bl	800e5ba <__retarget_lock_release_recursive>
 800eaa2:	e7e9      	b.n	800ea78 <_vfiprintf_r+0x4c>
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	9309      	str	r3, [sp, #36]	; 0x24
 800eaa8:	2320      	movs	r3, #32
 800eaaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eaae:	f8cd 800c 	str.w	r8, [sp, #12]
 800eab2:	2330      	movs	r3, #48	; 0x30
 800eab4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ec78 <_vfiprintf_r+0x24c>
 800eab8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eabc:	f04f 0901 	mov.w	r9, #1
 800eac0:	4623      	mov	r3, r4
 800eac2:	469a      	mov	sl, r3
 800eac4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eac8:	b10a      	cbz	r2, 800eace <_vfiprintf_r+0xa2>
 800eaca:	2a25      	cmp	r2, #37	; 0x25
 800eacc:	d1f9      	bne.n	800eac2 <_vfiprintf_r+0x96>
 800eace:	ebba 0b04 	subs.w	fp, sl, r4
 800ead2:	d00b      	beq.n	800eaec <_vfiprintf_r+0xc0>
 800ead4:	465b      	mov	r3, fp
 800ead6:	4622      	mov	r2, r4
 800ead8:	4629      	mov	r1, r5
 800eada:	4630      	mov	r0, r6
 800eadc:	f7ff ff93 	bl	800ea06 <__sfputs_r>
 800eae0:	3001      	adds	r0, #1
 800eae2:	f000 80aa 	beq.w	800ec3a <_vfiprintf_r+0x20e>
 800eae6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eae8:	445a      	add	r2, fp
 800eaea:	9209      	str	r2, [sp, #36]	; 0x24
 800eaec:	f89a 3000 	ldrb.w	r3, [sl]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	f000 80a2 	beq.w	800ec3a <_vfiprintf_r+0x20e>
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eafc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb00:	f10a 0a01 	add.w	sl, sl, #1
 800eb04:	9304      	str	r3, [sp, #16]
 800eb06:	9307      	str	r3, [sp, #28]
 800eb08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eb0c:	931a      	str	r3, [sp, #104]	; 0x68
 800eb0e:	4654      	mov	r4, sl
 800eb10:	2205      	movs	r2, #5
 800eb12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb16:	4858      	ldr	r0, [pc, #352]	; (800ec78 <_vfiprintf_r+0x24c>)
 800eb18:	f7f1 fb5a 	bl	80001d0 <memchr>
 800eb1c:	9a04      	ldr	r2, [sp, #16]
 800eb1e:	b9d8      	cbnz	r0, 800eb58 <_vfiprintf_r+0x12c>
 800eb20:	06d1      	lsls	r1, r2, #27
 800eb22:	bf44      	itt	mi
 800eb24:	2320      	movmi	r3, #32
 800eb26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb2a:	0713      	lsls	r3, r2, #28
 800eb2c:	bf44      	itt	mi
 800eb2e:	232b      	movmi	r3, #43	; 0x2b
 800eb30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb34:	f89a 3000 	ldrb.w	r3, [sl]
 800eb38:	2b2a      	cmp	r3, #42	; 0x2a
 800eb3a:	d015      	beq.n	800eb68 <_vfiprintf_r+0x13c>
 800eb3c:	9a07      	ldr	r2, [sp, #28]
 800eb3e:	4654      	mov	r4, sl
 800eb40:	2000      	movs	r0, #0
 800eb42:	f04f 0c0a 	mov.w	ip, #10
 800eb46:	4621      	mov	r1, r4
 800eb48:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb4c:	3b30      	subs	r3, #48	; 0x30
 800eb4e:	2b09      	cmp	r3, #9
 800eb50:	d94e      	bls.n	800ebf0 <_vfiprintf_r+0x1c4>
 800eb52:	b1b0      	cbz	r0, 800eb82 <_vfiprintf_r+0x156>
 800eb54:	9207      	str	r2, [sp, #28]
 800eb56:	e014      	b.n	800eb82 <_vfiprintf_r+0x156>
 800eb58:	eba0 0308 	sub.w	r3, r0, r8
 800eb5c:	fa09 f303 	lsl.w	r3, r9, r3
 800eb60:	4313      	orrs	r3, r2
 800eb62:	9304      	str	r3, [sp, #16]
 800eb64:	46a2      	mov	sl, r4
 800eb66:	e7d2      	b.n	800eb0e <_vfiprintf_r+0xe2>
 800eb68:	9b03      	ldr	r3, [sp, #12]
 800eb6a:	1d19      	adds	r1, r3, #4
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	9103      	str	r1, [sp, #12]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	bfbb      	ittet	lt
 800eb74:	425b      	neglt	r3, r3
 800eb76:	f042 0202 	orrlt.w	r2, r2, #2
 800eb7a:	9307      	strge	r3, [sp, #28]
 800eb7c:	9307      	strlt	r3, [sp, #28]
 800eb7e:	bfb8      	it	lt
 800eb80:	9204      	strlt	r2, [sp, #16]
 800eb82:	7823      	ldrb	r3, [r4, #0]
 800eb84:	2b2e      	cmp	r3, #46	; 0x2e
 800eb86:	d10c      	bne.n	800eba2 <_vfiprintf_r+0x176>
 800eb88:	7863      	ldrb	r3, [r4, #1]
 800eb8a:	2b2a      	cmp	r3, #42	; 0x2a
 800eb8c:	d135      	bne.n	800ebfa <_vfiprintf_r+0x1ce>
 800eb8e:	9b03      	ldr	r3, [sp, #12]
 800eb90:	1d1a      	adds	r2, r3, #4
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	9203      	str	r2, [sp, #12]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	bfb8      	it	lt
 800eb9a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800eb9e:	3402      	adds	r4, #2
 800eba0:	9305      	str	r3, [sp, #20]
 800eba2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ec88 <_vfiprintf_r+0x25c>
 800eba6:	7821      	ldrb	r1, [r4, #0]
 800eba8:	2203      	movs	r2, #3
 800ebaa:	4650      	mov	r0, sl
 800ebac:	f7f1 fb10 	bl	80001d0 <memchr>
 800ebb0:	b140      	cbz	r0, 800ebc4 <_vfiprintf_r+0x198>
 800ebb2:	2340      	movs	r3, #64	; 0x40
 800ebb4:	eba0 000a 	sub.w	r0, r0, sl
 800ebb8:	fa03 f000 	lsl.w	r0, r3, r0
 800ebbc:	9b04      	ldr	r3, [sp, #16]
 800ebbe:	4303      	orrs	r3, r0
 800ebc0:	3401      	adds	r4, #1
 800ebc2:	9304      	str	r3, [sp, #16]
 800ebc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebc8:	482c      	ldr	r0, [pc, #176]	; (800ec7c <_vfiprintf_r+0x250>)
 800ebca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ebce:	2206      	movs	r2, #6
 800ebd0:	f7f1 fafe 	bl	80001d0 <memchr>
 800ebd4:	2800      	cmp	r0, #0
 800ebd6:	d03f      	beq.n	800ec58 <_vfiprintf_r+0x22c>
 800ebd8:	4b29      	ldr	r3, [pc, #164]	; (800ec80 <_vfiprintf_r+0x254>)
 800ebda:	bb1b      	cbnz	r3, 800ec24 <_vfiprintf_r+0x1f8>
 800ebdc:	9b03      	ldr	r3, [sp, #12]
 800ebde:	3307      	adds	r3, #7
 800ebe0:	f023 0307 	bic.w	r3, r3, #7
 800ebe4:	3308      	adds	r3, #8
 800ebe6:	9303      	str	r3, [sp, #12]
 800ebe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebea:	443b      	add	r3, r7
 800ebec:	9309      	str	r3, [sp, #36]	; 0x24
 800ebee:	e767      	b.n	800eac0 <_vfiprintf_r+0x94>
 800ebf0:	fb0c 3202 	mla	r2, ip, r2, r3
 800ebf4:	460c      	mov	r4, r1
 800ebf6:	2001      	movs	r0, #1
 800ebf8:	e7a5      	b.n	800eb46 <_vfiprintf_r+0x11a>
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	3401      	adds	r4, #1
 800ebfe:	9305      	str	r3, [sp, #20]
 800ec00:	4619      	mov	r1, r3
 800ec02:	f04f 0c0a 	mov.w	ip, #10
 800ec06:	4620      	mov	r0, r4
 800ec08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec0c:	3a30      	subs	r2, #48	; 0x30
 800ec0e:	2a09      	cmp	r2, #9
 800ec10:	d903      	bls.n	800ec1a <_vfiprintf_r+0x1ee>
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d0c5      	beq.n	800eba2 <_vfiprintf_r+0x176>
 800ec16:	9105      	str	r1, [sp, #20]
 800ec18:	e7c3      	b.n	800eba2 <_vfiprintf_r+0x176>
 800ec1a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec1e:	4604      	mov	r4, r0
 800ec20:	2301      	movs	r3, #1
 800ec22:	e7f0      	b.n	800ec06 <_vfiprintf_r+0x1da>
 800ec24:	ab03      	add	r3, sp, #12
 800ec26:	9300      	str	r3, [sp, #0]
 800ec28:	462a      	mov	r2, r5
 800ec2a:	4b16      	ldr	r3, [pc, #88]	; (800ec84 <_vfiprintf_r+0x258>)
 800ec2c:	a904      	add	r1, sp, #16
 800ec2e:	4630      	mov	r0, r6
 800ec30:	f3af 8000 	nop.w
 800ec34:	4607      	mov	r7, r0
 800ec36:	1c78      	adds	r0, r7, #1
 800ec38:	d1d6      	bne.n	800ebe8 <_vfiprintf_r+0x1bc>
 800ec3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ec3c:	07d9      	lsls	r1, r3, #31
 800ec3e:	d405      	bmi.n	800ec4c <_vfiprintf_r+0x220>
 800ec40:	89ab      	ldrh	r3, [r5, #12]
 800ec42:	059a      	lsls	r2, r3, #22
 800ec44:	d402      	bmi.n	800ec4c <_vfiprintf_r+0x220>
 800ec46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ec48:	f7ff fcb7 	bl	800e5ba <__retarget_lock_release_recursive>
 800ec4c:	89ab      	ldrh	r3, [r5, #12]
 800ec4e:	065b      	lsls	r3, r3, #25
 800ec50:	f53f af12 	bmi.w	800ea78 <_vfiprintf_r+0x4c>
 800ec54:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec56:	e711      	b.n	800ea7c <_vfiprintf_r+0x50>
 800ec58:	ab03      	add	r3, sp, #12
 800ec5a:	9300      	str	r3, [sp, #0]
 800ec5c:	462a      	mov	r2, r5
 800ec5e:	4b09      	ldr	r3, [pc, #36]	; (800ec84 <_vfiprintf_r+0x258>)
 800ec60:	a904      	add	r1, sp, #16
 800ec62:	4630      	mov	r0, r6
 800ec64:	f000 f880 	bl	800ed68 <_printf_i>
 800ec68:	e7e4      	b.n	800ec34 <_vfiprintf_r+0x208>
 800ec6a:	bf00      	nop
 800ec6c:	080121f4 	.word	0x080121f4
 800ec70:	08012214 	.word	0x08012214
 800ec74:	080121d4 	.word	0x080121d4
 800ec78:	08012234 	.word	0x08012234
 800ec7c:	0801223e 	.word	0x0801223e
 800ec80:	00000000 	.word	0x00000000
 800ec84:	0800ea07 	.word	0x0800ea07
 800ec88:	0801223a 	.word	0x0801223a

0800ec8c <_printf_common>:
 800ec8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec90:	4616      	mov	r6, r2
 800ec92:	4699      	mov	r9, r3
 800ec94:	688a      	ldr	r2, [r1, #8]
 800ec96:	690b      	ldr	r3, [r1, #16]
 800ec98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ec9c:	4293      	cmp	r3, r2
 800ec9e:	bfb8      	it	lt
 800eca0:	4613      	movlt	r3, r2
 800eca2:	6033      	str	r3, [r6, #0]
 800eca4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eca8:	4607      	mov	r7, r0
 800ecaa:	460c      	mov	r4, r1
 800ecac:	b10a      	cbz	r2, 800ecb2 <_printf_common+0x26>
 800ecae:	3301      	adds	r3, #1
 800ecb0:	6033      	str	r3, [r6, #0]
 800ecb2:	6823      	ldr	r3, [r4, #0]
 800ecb4:	0699      	lsls	r1, r3, #26
 800ecb6:	bf42      	ittt	mi
 800ecb8:	6833      	ldrmi	r3, [r6, #0]
 800ecba:	3302      	addmi	r3, #2
 800ecbc:	6033      	strmi	r3, [r6, #0]
 800ecbe:	6825      	ldr	r5, [r4, #0]
 800ecc0:	f015 0506 	ands.w	r5, r5, #6
 800ecc4:	d106      	bne.n	800ecd4 <_printf_common+0x48>
 800ecc6:	f104 0a19 	add.w	sl, r4, #25
 800ecca:	68e3      	ldr	r3, [r4, #12]
 800eccc:	6832      	ldr	r2, [r6, #0]
 800ecce:	1a9b      	subs	r3, r3, r2
 800ecd0:	42ab      	cmp	r3, r5
 800ecd2:	dc26      	bgt.n	800ed22 <_printf_common+0x96>
 800ecd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ecd8:	1e13      	subs	r3, r2, #0
 800ecda:	6822      	ldr	r2, [r4, #0]
 800ecdc:	bf18      	it	ne
 800ecde:	2301      	movne	r3, #1
 800ece0:	0692      	lsls	r2, r2, #26
 800ece2:	d42b      	bmi.n	800ed3c <_printf_common+0xb0>
 800ece4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ece8:	4649      	mov	r1, r9
 800ecea:	4638      	mov	r0, r7
 800ecec:	47c0      	blx	r8
 800ecee:	3001      	adds	r0, #1
 800ecf0:	d01e      	beq.n	800ed30 <_printf_common+0xa4>
 800ecf2:	6823      	ldr	r3, [r4, #0]
 800ecf4:	68e5      	ldr	r5, [r4, #12]
 800ecf6:	6832      	ldr	r2, [r6, #0]
 800ecf8:	f003 0306 	and.w	r3, r3, #6
 800ecfc:	2b04      	cmp	r3, #4
 800ecfe:	bf08      	it	eq
 800ed00:	1aad      	subeq	r5, r5, r2
 800ed02:	68a3      	ldr	r3, [r4, #8]
 800ed04:	6922      	ldr	r2, [r4, #16]
 800ed06:	bf0c      	ite	eq
 800ed08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ed0c:	2500      	movne	r5, #0
 800ed0e:	4293      	cmp	r3, r2
 800ed10:	bfc4      	itt	gt
 800ed12:	1a9b      	subgt	r3, r3, r2
 800ed14:	18ed      	addgt	r5, r5, r3
 800ed16:	2600      	movs	r6, #0
 800ed18:	341a      	adds	r4, #26
 800ed1a:	42b5      	cmp	r5, r6
 800ed1c:	d11a      	bne.n	800ed54 <_printf_common+0xc8>
 800ed1e:	2000      	movs	r0, #0
 800ed20:	e008      	b.n	800ed34 <_printf_common+0xa8>
 800ed22:	2301      	movs	r3, #1
 800ed24:	4652      	mov	r2, sl
 800ed26:	4649      	mov	r1, r9
 800ed28:	4638      	mov	r0, r7
 800ed2a:	47c0      	blx	r8
 800ed2c:	3001      	adds	r0, #1
 800ed2e:	d103      	bne.n	800ed38 <_printf_common+0xac>
 800ed30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ed34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed38:	3501      	adds	r5, #1
 800ed3a:	e7c6      	b.n	800ecca <_printf_common+0x3e>
 800ed3c:	18e1      	adds	r1, r4, r3
 800ed3e:	1c5a      	adds	r2, r3, #1
 800ed40:	2030      	movs	r0, #48	; 0x30
 800ed42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ed46:	4422      	add	r2, r4
 800ed48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ed4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ed50:	3302      	adds	r3, #2
 800ed52:	e7c7      	b.n	800ece4 <_printf_common+0x58>
 800ed54:	2301      	movs	r3, #1
 800ed56:	4622      	mov	r2, r4
 800ed58:	4649      	mov	r1, r9
 800ed5a:	4638      	mov	r0, r7
 800ed5c:	47c0      	blx	r8
 800ed5e:	3001      	adds	r0, #1
 800ed60:	d0e6      	beq.n	800ed30 <_printf_common+0xa4>
 800ed62:	3601      	adds	r6, #1
 800ed64:	e7d9      	b.n	800ed1a <_printf_common+0x8e>
	...

0800ed68 <_printf_i>:
 800ed68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed6c:	460c      	mov	r4, r1
 800ed6e:	4691      	mov	r9, r2
 800ed70:	7e27      	ldrb	r7, [r4, #24]
 800ed72:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ed74:	2f78      	cmp	r7, #120	; 0x78
 800ed76:	4680      	mov	r8, r0
 800ed78:	469a      	mov	sl, r3
 800ed7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ed7e:	d807      	bhi.n	800ed90 <_printf_i+0x28>
 800ed80:	2f62      	cmp	r7, #98	; 0x62
 800ed82:	d80a      	bhi.n	800ed9a <_printf_i+0x32>
 800ed84:	2f00      	cmp	r7, #0
 800ed86:	f000 80d8 	beq.w	800ef3a <_printf_i+0x1d2>
 800ed8a:	2f58      	cmp	r7, #88	; 0x58
 800ed8c:	f000 80a3 	beq.w	800eed6 <_printf_i+0x16e>
 800ed90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ed94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ed98:	e03a      	b.n	800ee10 <_printf_i+0xa8>
 800ed9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ed9e:	2b15      	cmp	r3, #21
 800eda0:	d8f6      	bhi.n	800ed90 <_printf_i+0x28>
 800eda2:	a001      	add	r0, pc, #4	; (adr r0, 800eda8 <_printf_i+0x40>)
 800eda4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800eda8:	0800ee01 	.word	0x0800ee01
 800edac:	0800ee15 	.word	0x0800ee15
 800edb0:	0800ed91 	.word	0x0800ed91
 800edb4:	0800ed91 	.word	0x0800ed91
 800edb8:	0800ed91 	.word	0x0800ed91
 800edbc:	0800ed91 	.word	0x0800ed91
 800edc0:	0800ee15 	.word	0x0800ee15
 800edc4:	0800ed91 	.word	0x0800ed91
 800edc8:	0800ed91 	.word	0x0800ed91
 800edcc:	0800ed91 	.word	0x0800ed91
 800edd0:	0800ed91 	.word	0x0800ed91
 800edd4:	0800ef21 	.word	0x0800ef21
 800edd8:	0800ee45 	.word	0x0800ee45
 800eddc:	0800ef03 	.word	0x0800ef03
 800ede0:	0800ed91 	.word	0x0800ed91
 800ede4:	0800ed91 	.word	0x0800ed91
 800ede8:	0800ef43 	.word	0x0800ef43
 800edec:	0800ed91 	.word	0x0800ed91
 800edf0:	0800ee45 	.word	0x0800ee45
 800edf4:	0800ed91 	.word	0x0800ed91
 800edf8:	0800ed91 	.word	0x0800ed91
 800edfc:	0800ef0b 	.word	0x0800ef0b
 800ee00:	680b      	ldr	r3, [r1, #0]
 800ee02:	1d1a      	adds	r2, r3, #4
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	600a      	str	r2, [r1, #0]
 800ee08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ee0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ee10:	2301      	movs	r3, #1
 800ee12:	e0a3      	b.n	800ef5c <_printf_i+0x1f4>
 800ee14:	6825      	ldr	r5, [r4, #0]
 800ee16:	6808      	ldr	r0, [r1, #0]
 800ee18:	062e      	lsls	r6, r5, #24
 800ee1a:	f100 0304 	add.w	r3, r0, #4
 800ee1e:	d50a      	bpl.n	800ee36 <_printf_i+0xce>
 800ee20:	6805      	ldr	r5, [r0, #0]
 800ee22:	600b      	str	r3, [r1, #0]
 800ee24:	2d00      	cmp	r5, #0
 800ee26:	da03      	bge.n	800ee30 <_printf_i+0xc8>
 800ee28:	232d      	movs	r3, #45	; 0x2d
 800ee2a:	426d      	negs	r5, r5
 800ee2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee30:	485e      	ldr	r0, [pc, #376]	; (800efac <_printf_i+0x244>)
 800ee32:	230a      	movs	r3, #10
 800ee34:	e019      	b.n	800ee6a <_printf_i+0x102>
 800ee36:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ee3a:	6805      	ldr	r5, [r0, #0]
 800ee3c:	600b      	str	r3, [r1, #0]
 800ee3e:	bf18      	it	ne
 800ee40:	b22d      	sxthne	r5, r5
 800ee42:	e7ef      	b.n	800ee24 <_printf_i+0xbc>
 800ee44:	680b      	ldr	r3, [r1, #0]
 800ee46:	6825      	ldr	r5, [r4, #0]
 800ee48:	1d18      	adds	r0, r3, #4
 800ee4a:	6008      	str	r0, [r1, #0]
 800ee4c:	0628      	lsls	r0, r5, #24
 800ee4e:	d501      	bpl.n	800ee54 <_printf_i+0xec>
 800ee50:	681d      	ldr	r5, [r3, #0]
 800ee52:	e002      	b.n	800ee5a <_printf_i+0xf2>
 800ee54:	0669      	lsls	r1, r5, #25
 800ee56:	d5fb      	bpl.n	800ee50 <_printf_i+0xe8>
 800ee58:	881d      	ldrh	r5, [r3, #0]
 800ee5a:	4854      	ldr	r0, [pc, #336]	; (800efac <_printf_i+0x244>)
 800ee5c:	2f6f      	cmp	r7, #111	; 0x6f
 800ee5e:	bf0c      	ite	eq
 800ee60:	2308      	moveq	r3, #8
 800ee62:	230a      	movne	r3, #10
 800ee64:	2100      	movs	r1, #0
 800ee66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ee6a:	6866      	ldr	r6, [r4, #4]
 800ee6c:	60a6      	str	r6, [r4, #8]
 800ee6e:	2e00      	cmp	r6, #0
 800ee70:	bfa2      	ittt	ge
 800ee72:	6821      	ldrge	r1, [r4, #0]
 800ee74:	f021 0104 	bicge.w	r1, r1, #4
 800ee78:	6021      	strge	r1, [r4, #0]
 800ee7a:	b90d      	cbnz	r5, 800ee80 <_printf_i+0x118>
 800ee7c:	2e00      	cmp	r6, #0
 800ee7e:	d04d      	beq.n	800ef1c <_printf_i+0x1b4>
 800ee80:	4616      	mov	r6, r2
 800ee82:	fbb5 f1f3 	udiv	r1, r5, r3
 800ee86:	fb03 5711 	mls	r7, r3, r1, r5
 800ee8a:	5dc7      	ldrb	r7, [r0, r7]
 800ee8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ee90:	462f      	mov	r7, r5
 800ee92:	42bb      	cmp	r3, r7
 800ee94:	460d      	mov	r5, r1
 800ee96:	d9f4      	bls.n	800ee82 <_printf_i+0x11a>
 800ee98:	2b08      	cmp	r3, #8
 800ee9a:	d10b      	bne.n	800eeb4 <_printf_i+0x14c>
 800ee9c:	6823      	ldr	r3, [r4, #0]
 800ee9e:	07df      	lsls	r7, r3, #31
 800eea0:	d508      	bpl.n	800eeb4 <_printf_i+0x14c>
 800eea2:	6923      	ldr	r3, [r4, #16]
 800eea4:	6861      	ldr	r1, [r4, #4]
 800eea6:	4299      	cmp	r1, r3
 800eea8:	bfde      	ittt	le
 800eeaa:	2330      	movle	r3, #48	; 0x30
 800eeac:	f806 3c01 	strble.w	r3, [r6, #-1]
 800eeb0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800eeb4:	1b92      	subs	r2, r2, r6
 800eeb6:	6122      	str	r2, [r4, #16]
 800eeb8:	f8cd a000 	str.w	sl, [sp]
 800eebc:	464b      	mov	r3, r9
 800eebe:	aa03      	add	r2, sp, #12
 800eec0:	4621      	mov	r1, r4
 800eec2:	4640      	mov	r0, r8
 800eec4:	f7ff fee2 	bl	800ec8c <_printf_common>
 800eec8:	3001      	adds	r0, #1
 800eeca:	d14c      	bne.n	800ef66 <_printf_i+0x1fe>
 800eecc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eed0:	b004      	add	sp, #16
 800eed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eed6:	4835      	ldr	r0, [pc, #212]	; (800efac <_printf_i+0x244>)
 800eed8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800eedc:	6823      	ldr	r3, [r4, #0]
 800eede:	680e      	ldr	r6, [r1, #0]
 800eee0:	061f      	lsls	r7, r3, #24
 800eee2:	f856 5b04 	ldr.w	r5, [r6], #4
 800eee6:	600e      	str	r6, [r1, #0]
 800eee8:	d514      	bpl.n	800ef14 <_printf_i+0x1ac>
 800eeea:	07d9      	lsls	r1, r3, #31
 800eeec:	bf44      	itt	mi
 800eeee:	f043 0320 	orrmi.w	r3, r3, #32
 800eef2:	6023      	strmi	r3, [r4, #0]
 800eef4:	b91d      	cbnz	r5, 800eefe <_printf_i+0x196>
 800eef6:	6823      	ldr	r3, [r4, #0]
 800eef8:	f023 0320 	bic.w	r3, r3, #32
 800eefc:	6023      	str	r3, [r4, #0]
 800eefe:	2310      	movs	r3, #16
 800ef00:	e7b0      	b.n	800ee64 <_printf_i+0xfc>
 800ef02:	6823      	ldr	r3, [r4, #0]
 800ef04:	f043 0320 	orr.w	r3, r3, #32
 800ef08:	6023      	str	r3, [r4, #0]
 800ef0a:	2378      	movs	r3, #120	; 0x78
 800ef0c:	4828      	ldr	r0, [pc, #160]	; (800efb0 <_printf_i+0x248>)
 800ef0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ef12:	e7e3      	b.n	800eedc <_printf_i+0x174>
 800ef14:	065e      	lsls	r6, r3, #25
 800ef16:	bf48      	it	mi
 800ef18:	b2ad      	uxthmi	r5, r5
 800ef1a:	e7e6      	b.n	800eeea <_printf_i+0x182>
 800ef1c:	4616      	mov	r6, r2
 800ef1e:	e7bb      	b.n	800ee98 <_printf_i+0x130>
 800ef20:	680b      	ldr	r3, [r1, #0]
 800ef22:	6826      	ldr	r6, [r4, #0]
 800ef24:	6960      	ldr	r0, [r4, #20]
 800ef26:	1d1d      	adds	r5, r3, #4
 800ef28:	600d      	str	r5, [r1, #0]
 800ef2a:	0635      	lsls	r5, r6, #24
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	d501      	bpl.n	800ef34 <_printf_i+0x1cc>
 800ef30:	6018      	str	r0, [r3, #0]
 800ef32:	e002      	b.n	800ef3a <_printf_i+0x1d2>
 800ef34:	0671      	lsls	r1, r6, #25
 800ef36:	d5fb      	bpl.n	800ef30 <_printf_i+0x1c8>
 800ef38:	8018      	strh	r0, [r3, #0]
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	6123      	str	r3, [r4, #16]
 800ef3e:	4616      	mov	r6, r2
 800ef40:	e7ba      	b.n	800eeb8 <_printf_i+0x150>
 800ef42:	680b      	ldr	r3, [r1, #0]
 800ef44:	1d1a      	adds	r2, r3, #4
 800ef46:	600a      	str	r2, [r1, #0]
 800ef48:	681e      	ldr	r6, [r3, #0]
 800ef4a:	6862      	ldr	r2, [r4, #4]
 800ef4c:	2100      	movs	r1, #0
 800ef4e:	4630      	mov	r0, r6
 800ef50:	f7f1 f93e 	bl	80001d0 <memchr>
 800ef54:	b108      	cbz	r0, 800ef5a <_printf_i+0x1f2>
 800ef56:	1b80      	subs	r0, r0, r6
 800ef58:	6060      	str	r0, [r4, #4]
 800ef5a:	6863      	ldr	r3, [r4, #4]
 800ef5c:	6123      	str	r3, [r4, #16]
 800ef5e:	2300      	movs	r3, #0
 800ef60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef64:	e7a8      	b.n	800eeb8 <_printf_i+0x150>
 800ef66:	6923      	ldr	r3, [r4, #16]
 800ef68:	4632      	mov	r2, r6
 800ef6a:	4649      	mov	r1, r9
 800ef6c:	4640      	mov	r0, r8
 800ef6e:	47d0      	blx	sl
 800ef70:	3001      	adds	r0, #1
 800ef72:	d0ab      	beq.n	800eecc <_printf_i+0x164>
 800ef74:	6823      	ldr	r3, [r4, #0]
 800ef76:	079b      	lsls	r3, r3, #30
 800ef78:	d413      	bmi.n	800efa2 <_printf_i+0x23a>
 800ef7a:	68e0      	ldr	r0, [r4, #12]
 800ef7c:	9b03      	ldr	r3, [sp, #12]
 800ef7e:	4298      	cmp	r0, r3
 800ef80:	bfb8      	it	lt
 800ef82:	4618      	movlt	r0, r3
 800ef84:	e7a4      	b.n	800eed0 <_printf_i+0x168>
 800ef86:	2301      	movs	r3, #1
 800ef88:	4632      	mov	r2, r6
 800ef8a:	4649      	mov	r1, r9
 800ef8c:	4640      	mov	r0, r8
 800ef8e:	47d0      	blx	sl
 800ef90:	3001      	adds	r0, #1
 800ef92:	d09b      	beq.n	800eecc <_printf_i+0x164>
 800ef94:	3501      	adds	r5, #1
 800ef96:	68e3      	ldr	r3, [r4, #12]
 800ef98:	9903      	ldr	r1, [sp, #12]
 800ef9a:	1a5b      	subs	r3, r3, r1
 800ef9c:	42ab      	cmp	r3, r5
 800ef9e:	dcf2      	bgt.n	800ef86 <_printf_i+0x21e>
 800efa0:	e7eb      	b.n	800ef7a <_printf_i+0x212>
 800efa2:	2500      	movs	r5, #0
 800efa4:	f104 0619 	add.w	r6, r4, #25
 800efa8:	e7f5      	b.n	800ef96 <_printf_i+0x22e>
 800efaa:	bf00      	nop
 800efac:	08012245 	.word	0x08012245
 800efb0:	08012256 	.word	0x08012256

0800efb4 <_sbrk_r>:
 800efb4:	b538      	push	{r3, r4, r5, lr}
 800efb6:	4d06      	ldr	r5, [pc, #24]	; (800efd0 <_sbrk_r+0x1c>)
 800efb8:	2300      	movs	r3, #0
 800efba:	4604      	mov	r4, r0
 800efbc:	4608      	mov	r0, r1
 800efbe:	602b      	str	r3, [r5, #0]
 800efc0:	f7f1 fd14 	bl	80009ec <_sbrk>
 800efc4:	1c43      	adds	r3, r0, #1
 800efc6:	d102      	bne.n	800efce <_sbrk_r+0x1a>
 800efc8:	682b      	ldr	r3, [r5, #0]
 800efca:	b103      	cbz	r3, 800efce <_sbrk_r+0x1a>
 800efcc:	6023      	str	r3, [r4, #0]
 800efce:	bd38      	pop	{r3, r4, r5, pc}
 800efd0:	20008b1c 	.word	0x20008b1c

0800efd4 <__sread>:
 800efd4:	b510      	push	{r4, lr}
 800efd6:	460c      	mov	r4, r1
 800efd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efdc:	f000 fa92 	bl	800f504 <_read_r>
 800efe0:	2800      	cmp	r0, #0
 800efe2:	bfab      	itete	ge
 800efe4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800efe6:	89a3      	ldrhlt	r3, [r4, #12]
 800efe8:	181b      	addge	r3, r3, r0
 800efea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800efee:	bfac      	ite	ge
 800eff0:	6563      	strge	r3, [r4, #84]	; 0x54
 800eff2:	81a3      	strhlt	r3, [r4, #12]
 800eff4:	bd10      	pop	{r4, pc}

0800eff6 <__swrite>:
 800eff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800effa:	461f      	mov	r7, r3
 800effc:	898b      	ldrh	r3, [r1, #12]
 800effe:	05db      	lsls	r3, r3, #23
 800f000:	4605      	mov	r5, r0
 800f002:	460c      	mov	r4, r1
 800f004:	4616      	mov	r6, r2
 800f006:	d505      	bpl.n	800f014 <__swrite+0x1e>
 800f008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f00c:	2302      	movs	r3, #2
 800f00e:	2200      	movs	r2, #0
 800f010:	f000 f9d0 	bl	800f3b4 <_lseek_r>
 800f014:	89a3      	ldrh	r3, [r4, #12]
 800f016:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f01a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f01e:	81a3      	strh	r3, [r4, #12]
 800f020:	4632      	mov	r2, r6
 800f022:	463b      	mov	r3, r7
 800f024:	4628      	mov	r0, r5
 800f026:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f02a:	f000 b869 	b.w	800f100 <_write_r>

0800f02e <__sseek>:
 800f02e:	b510      	push	{r4, lr}
 800f030:	460c      	mov	r4, r1
 800f032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f036:	f000 f9bd 	bl	800f3b4 <_lseek_r>
 800f03a:	1c43      	adds	r3, r0, #1
 800f03c:	89a3      	ldrh	r3, [r4, #12]
 800f03e:	bf15      	itete	ne
 800f040:	6560      	strne	r0, [r4, #84]	; 0x54
 800f042:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f046:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f04a:	81a3      	strheq	r3, [r4, #12]
 800f04c:	bf18      	it	ne
 800f04e:	81a3      	strhne	r3, [r4, #12]
 800f050:	bd10      	pop	{r4, pc}

0800f052 <__sclose>:
 800f052:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f056:	f000 b8db 	b.w	800f210 <_close_r>
	...

0800f05c <__swbuf_r>:
 800f05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f05e:	460e      	mov	r6, r1
 800f060:	4614      	mov	r4, r2
 800f062:	4605      	mov	r5, r0
 800f064:	b118      	cbz	r0, 800f06e <__swbuf_r+0x12>
 800f066:	6983      	ldr	r3, [r0, #24]
 800f068:	b90b      	cbnz	r3, 800f06e <__swbuf_r+0x12>
 800f06a:	f7ff f9f5 	bl	800e458 <__sinit>
 800f06e:	4b21      	ldr	r3, [pc, #132]	; (800f0f4 <__swbuf_r+0x98>)
 800f070:	429c      	cmp	r4, r3
 800f072:	d12b      	bne.n	800f0cc <__swbuf_r+0x70>
 800f074:	686c      	ldr	r4, [r5, #4]
 800f076:	69a3      	ldr	r3, [r4, #24]
 800f078:	60a3      	str	r3, [r4, #8]
 800f07a:	89a3      	ldrh	r3, [r4, #12]
 800f07c:	071a      	lsls	r2, r3, #28
 800f07e:	d52f      	bpl.n	800f0e0 <__swbuf_r+0x84>
 800f080:	6923      	ldr	r3, [r4, #16]
 800f082:	b36b      	cbz	r3, 800f0e0 <__swbuf_r+0x84>
 800f084:	6923      	ldr	r3, [r4, #16]
 800f086:	6820      	ldr	r0, [r4, #0]
 800f088:	1ac0      	subs	r0, r0, r3
 800f08a:	6963      	ldr	r3, [r4, #20]
 800f08c:	b2f6      	uxtb	r6, r6
 800f08e:	4283      	cmp	r3, r0
 800f090:	4637      	mov	r7, r6
 800f092:	dc04      	bgt.n	800f09e <__swbuf_r+0x42>
 800f094:	4621      	mov	r1, r4
 800f096:	4628      	mov	r0, r5
 800f098:	f000 f950 	bl	800f33c <_fflush_r>
 800f09c:	bb30      	cbnz	r0, 800f0ec <__swbuf_r+0x90>
 800f09e:	68a3      	ldr	r3, [r4, #8]
 800f0a0:	3b01      	subs	r3, #1
 800f0a2:	60a3      	str	r3, [r4, #8]
 800f0a4:	6823      	ldr	r3, [r4, #0]
 800f0a6:	1c5a      	adds	r2, r3, #1
 800f0a8:	6022      	str	r2, [r4, #0]
 800f0aa:	701e      	strb	r6, [r3, #0]
 800f0ac:	6963      	ldr	r3, [r4, #20]
 800f0ae:	3001      	adds	r0, #1
 800f0b0:	4283      	cmp	r3, r0
 800f0b2:	d004      	beq.n	800f0be <__swbuf_r+0x62>
 800f0b4:	89a3      	ldrh	r3, [r4, #12]
 800f0b6:	07db      	lsls	r3, r3, #31
 800f0b8:	d506      	bpl.n	800f0c8 <__swbuf_r+0x6c>
 800f0ba:	2e0a      	cmp	r6, #10
 800f0bc:	d104      	bne.n	800f0c8 <__swbuf_r+0x6c>
 800f0be:	4621      	mov	r1, r4
 800f0c0:	4628      	mov	r0, r5
 800f0c2:	f000 f93b 	bl	800f33c <_fflush_r>
 800f0c6:	b988      	cbnz	r0, 800f0ec <__swbuf_r+0x90>
 800f0c8:	4638      	mov	r0, r7
 800f0ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0cc:	4b0a      	ldr	r3, [pc, #40]	; (800f0f8 <__swbuf_r+0x9c>)
 800f0ce:	429c      	cmp	r4, r3
 800f0d0:	d101      	bne.n	800f0d6 <__swbuf_r+0x7a>
 800f0d2:	68ac      	ldr	r4, [r5, #8]
 800f0d4:	e7cf      	b.n	800f076 <__swbuf_r+0x1a>
 800f0d6:	4b09      	ldr	r3, [pc, #36]	; (800f0fc <__swbuf_r+0xa0>)
 800f0d8:	429c      	cmp	r4, r3
 800f0da:	bf08      	it	eq
 800f0dc:	68ec      	ldreq	r4, [r5, #12]
 800f0de:	e7ca      	b.n	800f076 <__swbuf_r+0x1a>
 800f0e0:	4621      	mov	r1, r4
 800f0e2:	4628      	mov	r0, r5
 800f0e4:	f000 f81e 	bl	800f124 <__swsetup_r>
 800f0e8:	2800      	cmp	r0, #0
 800f0ea:	d0cb      	beq.n	800f084 <__swbuf_r+0x28>
 800f0ec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f0f0:	e7ea      	b.n	800f0c8 <__swbuf_r+0x6c>
 800f0f2:	bf00      	nop
 800f0f4:	080121f4 	.word	0x080121f4
 800f0f8:	08012214 	.word	0x08012214
 800f0fc:	080121d4 	.word	0x080121d4

0800f100 <_write_r>:
 800f100:	b538      	push	{r3, r4, r5, lr}
 800f102:	4d07      	ldr	r5, [pc, #28]	; (800f120 <_write_r+0x20>)
 800f104:	4604      	mov	r4, r0
 800f106:	4608      	mov	r0, r1
 800f108:	4611      	mov	r1, r2
 800f10a:	2200      	movs	r2, #0
 800f10c:	602a      	str	r2, [r5, #0]
 800f10e:	461a      	mov	r2, r3
 800f110:	f7f1 fc1b 	bl	800094a <_write>
 800f114:	1c43      	adds	r3, r0, #1
 800f116:	d102      	bne.n	800f11e <_write_r+0x1e>
 800f118:	682b      	ldr	r3, [r5, #0]
 800f11a:	b103      	cbz	r3, 800f11e <_write_r+0x1e>
 800f11c:	6023      	str	r3, [r4, #0]
 800f11e:	bd38      	pop	{r3, r4, r5, pc}
 800f120:	20008b1c 	.word	0x20008b1c

0800f124 <__swsetup_r>:
 800f124:	4b32      	ldr	r3, [pc, #200]	; (800f1f0 <__swsetup_r+0xcc>)
 800f126:	b570      	push	{r4, r5, r6, lr}
 800f128:	681d      	ldr	r5, [r3, #0]
 800f12a:	4606      	mov	r6, r0
 800f12c:	460c      	mov	r4, r1
 800f12e:	b125      	cbz	r5, 800f13a <__swsetup_r+0x16>
 800f130:	69ab      	ldr	r3, [r5, #24]
 800f132:	b913      	cbnz	r3, 800f13a <__swsetup_r+0x16>
 800f134:	4628      	mov	r0, r5
 800f136:	f7ff f98f 	bl	800e458 <__sinit>
 800f13a:	4b2e      	ldr	r3, [pc, #184]	; (800f1f4 <__swsetup_r+0xd0>)
 800f13c:	429c      	cmp	r4, r3
 800f13e:	d10f      	bne.n	800f160 <__swsetup_r+0x3c>
 800f140:	686c      	ldr	r4, [r5, #4]
 800f142:	89a3      	ldrh	r3, [r4, #12]
 800f144:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f148:	0719      	lsls	r1, r3, #28
 800f14a:	d42c      	bmi.n	800f1a6 <__swsetup_r+0x82>
 800f14c:	06dd      	lsls	r5, r3, #27
 800f14e:	d411      	bmi.n	800f174 <__swsetup_r+0x50>
 800f150:	2309      	movs	r3, #9
 800f152:	6033      	str	r3, [r6, #0]
 800f154:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f158:	81a3      	strh	r3, [r4, #12]
 800f15a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f15e:	e03e      	b.n	800f1de <__swsetup_r+0xba>
 800f160:	4b25      	ldr	r3, [pc, #148]	; (800f1f8 <__swsetup_r+0xd4>)
 800f162:	429c      	cmp	r4, r3
 800f164:	d101      	bne.n	800f16a <__swsetup_r+0x46>
 800f166:	68ac      	ldr	r4, [r5, #8]
 800f168:	e7eb      	b.n	800f142 <__swsetup_r+0x1e>
 800f16a:	4b24      	ldr	r3, [pc, #144]	; (800f1fc <__swsetup_r+0xd8>)
 800f16c:	429c      	cmp	r4, r3
 800f16e:	bf08      	it	eq
 800f170:	68ec      	ldreq	r4, [r5, #12]
 800f172:	e7e6      	b.n	800f142 <__swsetup_r+0x1e>
 800f174:	0758      	lsls	r0, r3, #29
 800f176:	d512      	bpl.n	800f19e <__swsetup_r+0x7a>
 800f178:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f17a:	b141      	cbz	r1, 800f18e <__swsetup_r+0x6a>
 800f17c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f180:	4299      	cmp	r1, r3
 800f182:	d002      	beq.n	800f18a <__swsetup_r+0x66>
 800f184:	4630      	mov	r0, r6
 800f186:	f7ff fa21 	bl	800e5cc <_free_r>
 800f18a:	2300      	movs	r3, #0
 800f18c:	6363      	str	r3, [r4, #52]	; 0x34
 800f18e:	89a3      	ldrh	r3, [r4, #12]
 800f190:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f194:	81a3      	strh	r3, [r4, #12]
 800f196:	2300      	movs	r3, #0
 800f198:	6063      	str	r3, [r4, #4]
 800f19a:	6923      	ldr	r3, [r4, #16]
 800f19c:	6023      	str	r3, [r4, #0]
 800f19e:	89a3      	ldrh	r3, [r4, #12]
 800f1a0:	f043 0308 	orr.w	r3, r3, #8
 800f1a4:	81a3      	strh	r3, [r4, #12]
 800f1a6:	6923      	ldr	r3, [r4, #16]
 800f1a8:	b94b      	cbnz	r3, 800f1be <__swsetup_r+0x9a>
 800f1aa:	89a3      	ldrh	r3, [r4, #12]
 800f1ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f1b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f1b4:	d003      	beq.n	800f1be <__swsetup_r+0x9a>
 800f1b6:	4621      	mov	r1, r4
 800f1b8:	4630      	mov	r0, r6
 800f1ba:	f000 f931 	bl	800f420 <__smakebuf_r>
 800f1be:	89a0      	ldrh	r0, [r4, #12]
 800f1c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f1c4:	f010 0301 	ands.w	r3, r0, #1
 800f1c8:	d00a      	beq.n	800f1e0 <__swsetup_r+0xbc>
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	60a3      	str	r3, [r4, #8]
 800f1ce:	6963      	ldr	r3, [r4, #20]
 800f1d0:	425b      	negs	r3, r3
 800f1d2:	61a3      	str	r3, [r4, #24]
 800f1d4:	6923      	ldr	r3, [r4, #16]
 800f1d6:	b943      	cbnz	r3, 800f1ea <__swsetup_r+0xc6>
 800f1d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f1dc:	d1ba      	bne.n	800f154 <__swsetup_r+0x30>
 800f1de:	bd70      	pop	{r4, r5, r6, pc}
 800f1e0:	0781      	lsls	r1, r0, #30
 800f1e2:	bf58      	it	pl
 800f1e4:	6963      	ldrpl	r3, [r4, #20]
 800f1e6:	60a3      	str	r3, [r4, #8]
 800f1e8:	e7f4      	b.n	800f1d4 <__swsetup_r+0xb0>
 800f1ea:	2000      	movs	r0, #0
 800f1ec:	e7f7      	b.n	800f1de <__swsetup_r+0xba>
 800f1ee:	bf00      	nop
 800f1f0:	20000014 	.word	0x20000014
 800f1f4:	080121f4 	.word	0x080121f4
 800f1f8:	08012214 	.word	0x08012214
 800f1fc:	080121d4 	.word	0x080121d4

0800f200 <abort>:
 800f200:	b508      	push	{r3, lr}
 800f202:	2006      	movs	r0, #6
 800f204:	f000 f9b8 	bl	800f578 <raise>
 800f208:	2001      	movs	r0, #1
 800f20a:	f7f1 fb77 	bl	80008fc <_exit>
	...

0800f210 <_close_r>:
 800f210:	b538      	push	{r3, r4, r5, lr}
 800f212:	4d06      	ldr	r5, [pc, #24]	; (800f22c <_close_r+0x1c>)
 800f214:	2300      	movs	r3, #0
 800f216:	4604      	mov	r4, r0
 800f218:	4608      	mov	r0, r1
 800f21a:	602b      	str	r3, [r5, #0]
 800f21c:	f7f1 fbb1 	bl	8000982 <_close>
 800f220:	1c43      	adds	r3, r0, #1
 800f222:	d102      	bne.n	800f22a <_close_r+0x1a>
 800f224:	682b      	ldr	r3, [r5, #0]
 800f226:	b103      	cbz	r3, 800f22a <_close_r+0x1a>
 800f228:	6023      	str	r3, [r4, #0]
 800f22a:	bd38      	pop	{r3, r4, r5, pc}
 800f22c:	20008b1c 	.word	0x20008b1c

0800f230 <__sflush_r>:
 800f230:	898a      	ldrh	r2, [r1, #12]
 800f232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f236:	4605      	mov	r5, r0
 800f238:	0710      	lsls	r0, r2, #28
 800f23a:	460c      	mov	r4, r1
 800f23c:	d458      	bmi.n	800f2f0 <__sflush_r+0xc0>
 800f23e:	684b      	ldr	r3, [r1, #4]
 800f240:	2b00      	cmp	r3, #0
 800f242:	dc05      	bgt.n	800f250 <__sflush_r+0x20>
 800f244:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f246:	2b00      	cmp	r3, #0
 800f248:	dc02      	bgt.n	800f250 <__sflush_r+0x20>
 800f24a:	2000      	movs	r0, #0
 800f24c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f250:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f252:	2e00      	cmp	r6, #0
 800f254:	d0f9      	beq.n	800f24a <__sflush_r+0x1a>
 800f256:	2300      	movs	r3, #0
 800f258:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f25c:	682f      	ldr	r7, [r5, #0]
 800f25e:	602b      	str	r3, [r5, #0]
 800f260:	d032      	beq.n	800f2c8 <__sflush_r+0x98>
 800f262:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f264:	89a3      	ldrh	r3, [r4, #12]
 800f266:	075a      	lsls	r2, r3, #29
 800f268:	d505      	bpl.n	800f276 <__sflush_r+0x46>
 800f26a:	6863      	ldr	r3, [r4, #4]
 800f26c:	1ac0      	subs	r0, r0, r3
 800f26e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f270:	b10b      	cbz	r3, 800f276 <__sflush_r+0x46>
 800f272:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f274:	1ac0      	subs	r0, r0, r3
 800f276:	2300      	movs	r3, #0
 800f278:	4602      	mov	r2, r0
 800f27a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f27c:	6a21      	ldr	r1, [r4, #32]
 800f27e:	4628      	mov	r0, r5
 800f280:	47b0      	blx	r6
 800f282:	1c43      	adds	r3, r0, #1
 800f284:	89a3      	ldrh	r3, [r4, #12]
 800f286:	d106      	bne.n	800f296 <__sflush_r+0x66>
 800f288:	6829      	ldr	r1, [r5, #0]
 800f28a:	291d      	cmp	r1, #29
 800f28c:	d82c      	bhi.n	800f2e8 <__sflush_r+0xb8>
 800f28e:	4a2a      	ldr	r2, [pc, #168]	; (800f338 <__sflush_r+0x108>)
 800f290:	40ca      	lsrs	r2, r1
 800f292:	07d6      	lsls	r6, r2, #31
 800f294:	d528      	bpl.n	800f2e8 <__sflush_r+0xb8>
 800f296:	2200      	movs	r2, #0
 800f298:	6062      	str	r2, [r4, #4]
 800f29a:	04d9      	lsls	r1, r3, #19
 800f29c:	6922      	ldr	r2, [r4, #16]
 800f29e:	6022      	str	r2, [r4, #0]
 800f2a0:	d504      	bpl.n	800f2ac <__sflush_r+0x7c>
 800f2a2:	1c42      	adds	r2, r0, #1
 800f2a4:	d101      	bne.n	800f2aa <__sflush_r+0x7a>
 800f2a6:	682b      	ldr	r3, [r5, #0]
 800f2a8:	b903      	cbnz	r3, 800f2ac <__sflush_r+0x7c>
 800f2aa:	6560      	str	r0, [r4, #84]	; 0x54
 800f2ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f2ae:	602f      	str	r7, [r5, #0]
 800f2b0:	2900      	cmp	r1, #0
 800f2b2:	d0ca      	beq.n	800f24a <__sflush_r+0x1a>
 800f2b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f2b8:	4299      	cmp	r1, r3
 800f2ba:	d002      	beq.n	800f2c2 <__sflush_r+0x92>
 800f2bc:	4628      	mov	r0, r5
 800f2be:	f7ff f985 	bl	800e5cc <_free_r>
 800f2c2:	2000      	movs	r0, #0
 800f2c4:	6360      	str	r0, [r4, #52]	; 0x34
 800f2c6:	e7c1      	b.n	800f24c <__sflush_r+0x1c>
 800f2c8:	6a21      	ldr	r1, [r4, #32]
 800f2ca:	2301      	movs	r3, #1
 800f2cc:	4628      	mov	r0, r5
 800f2ce:	47b0      	blx	r6
 800f2d0:	1c41      	adds	r1, r0, #1
 800f2d2:	d1c7      	bne.n	800f264 <__sflush_r+0x34>
 800f2d4:	682b      	ldr	r3, [r5, #0]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d0c4      	beq.n	800f264 <__sflush_r+0x34>
 800f2da:	2b1d      	cmp	r3, #29
 800f2dc:	d001      	beq.n	800f2e2 <__sflush_r+0xb2>
 800f2de:	2b16      	cmp	r3, #22
 800f2e0:	d101      	bne.n	800f2e6 <__sflush_r+0xb6>
 800f2e2:	602f      	str	r7, [r5, #0]
 800f2e4:	e7b1      	b.n	800f24a <__sflush_r+0x1a>
 800f2e6:	89a3      	ldrh	r3, [r4, #12]
 800f2e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2ec:	81a3      	strh	r3, [r4, #12]
 800f2ee:	e7ad      	b.n	800f24c <__sflush_r+0x1c>
 800f2f0:	690f      	ldr	r7, [r1, #16]
 800f2f2:	2f00      	cmp	r7, #0
 800f2f4:	d0a9      	beq.n	800f24a <__sflush_r+0x1a>
 800f2f6:	0793      	lsls	r3, r2, #30
 800f2f8:	680e      	ldr	r6, [r1, #0]
 800f2fa:	bf08      	it	eq
 800f2fc:	694b      	ldreq	r3, [r1, #20]
 800f2fe:	600f      	str	r7, [r1, #0]
 800f300:	bf18      	it	ne
 800f302:	2300      	movne	r3, #0
 800f304:	eba6 0807 	sub.w	r8, r6, r7
 800f308:	608b      	str	r3, [r1, #8]
 800f30a:	f1b8 0f00 	cmp.w	r8, #0
 800f30e:	dd9c      	ble.n	800f24a <__sflush_r+0x1a>
 800f310:	6a21      	ldr	r1, [r4, #32]
 800f312:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f314:	4643      	mov	r3, r8
 800f316:	463a      	mov	r2, r7
 800f318:	4628      	mov	r0, r5
 800f31a:	47b0      	blx	r6
 800f31c:	2800      	cmp	r0, #0
 800f31e:	dc06      	bgt.n	800f32e <__sflush_r+0xfe>
 800f320:	89a3      	ldrh	r3, [r4, #12]
 800f322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f326:	81a3      	strh	r3, [r4, #12]
 800f328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f32c:	e78e      	b.n	800f24c <__sflush_r+0x1c>
 800f32e:	4407      	add	r7, r0
 800f330:	eba8 0800 	sub.w	r8, r8, r0
 800f334:	e7e9      	b.n	800f30a <__sflush_r+0xda>
 800f336:	bf00      	nop
 800f338:	20400001 	.word	0x20400001

0800f33c <_fflush_r>:
 800f33c:	b538      	push	{r3, r4, r5, lr}
 800f33e:	690b      	ldr	r3, [r1, #16]
 800f340:	4605      	mov	r5, r0
 800f342:	460c      	mov	r4, r1
 800f344:	b913      	cbnz	r3, 800f34c <_fflush_r+0x10>
 800f346:	2500      	movs	r5, #0
 800f348:	4628      	mov	r0, r5
 800f34a:	bd38      	pop	{r3, r4, r5, pc}
 800f34c:	b118      	cbz	r0, 800f356 <_fflush_r+0x1a>
 800f34e:	6983      	ldr	r3, [r0, #24]
 800f350:	b90b      	cbnz	r3, 800f356 <_fflush_r+0x1a>
 800f352:	f7ff f881 	bl	800e458 <__sinit>
 800f356:	4b14      	ldr	r3, [pc, #80]	; (800f3a8 <_fflush_r+0x6c>)
 800f358:	429c      	cmp	r4, r3
 800f35a:	d11b      	bne.n	800f394 <_fflush_r+0x58>
 800f35c:	686c      	ldr	r4, [r5, #4]
 800f35e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d0ef      	beq.n	800f346 <_fflush_r+0xa>
 800f366:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f368:	07d0      	lsls	r0, r2, #31
 800f36a:	d404      	bmi.n	800f376 <_fflush_r+0x3a>
 800f36c:	0599      	lsls	r1, r3, #22
 800f36e:	d402      	bmi.n	800f376 <_fflush_r+0x3a>
 800f370:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f372:	f7ff f921 	bl	800e5b8 <__retarget_lock_acquire_recursive>
 800f376:	4628      	mov	r0, r5
 800f378:	4621      	mov	r1, r4
 800f37a:	f7ff ff59 	bl	800f230 <__sflush_r>
 800f37e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f380:	07da      	lsls	r2, r3, #31
 800f382:	4605      	mov	r5, r0
 800f384:	d4e0      	bmi.n	800f348 <_fflush_r+0xc>
 800f386:	89a3      	ldrh	r3, [r4, #12]
 800f388:	059b      	lsls	r3, r3, #22
 800f38a:	d4dd      	bmi.n	800f348 <_fflush_r+0xc>
 800f38c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f38e:	f7ff f914 	bl	800e5ba <__retarget_lock_release_recursive>
 800f392:	e7d9      	b.n	800f348 <_fflush_r+0xc>
 800f394:	4b05      	ldr	r3, [pc, #20]	; (800f3ac <_fflush_r+0x70>)
 800f396:	429c      	cmp	r4, r3
 800f398:	d101      	bne.n	800f39e <_fflush_r+0x62>
 800f39a:	68ac      	ldr	r4, [r5, #8]
 800f39c:	e7df      	b.n	800f35e <_fflush_r+0x22>
 800f39e:	4b04      	ldr	r3, [pc, #16]	; (800f3b0 <_fflush_r+0x74>)
 800f3a0:	429c      	cmp	r4, r3
 800f3a2:	bf08      	it	eq
 800f3a4:	68ec      	ldreq	r4, [r5, #12]
 800f3a6:	e7da      	b.n	800f35e <_fflush_r+0x22>
 800f3a8:	080121f4 	.word	0x080121f4
 800f3ac:	08012214 	.word	0x08012214
 800f3b0:	080121d4 	.word	0x080121d4

0800f3b4 <_lseek_r>:
 800f3b4:	b538      	push	{r3, r4, r5, lr}
 800f3b6:	4d07      	ldr	r5, [pc, #28]	; (800f3d4 <_lseek_r+0x20>)
 800f3b8:	4604      	mov	r4, r0
 800f3ba:	4608      	mov	r0, r1
 800f3bc:	4611      	mov	r1, r2
 800f3be:	2200      	movs	r2, #0
 800f3c0:	602a      	str	r2, [r5, #0]
 800f3c2:	461a      	mov	r2, r3
 800f3c4:	f7f1 fb04 	bl	80009d0 <_lseek>
 800f3c8:	1c43      	adds	r3, r0, #1
 800f3ca:	d102      	bne.n	800f3d2 <_lseek_r+0x1e>
 800f3cc:	682b      	ldr	r3, [r5, #0]
 800f3ce:	b103      	cbz	r3, 800f3d2 <_lseek_r+0x1e>
 800f3d0:	6023      	str	r3, [r4, #0]
 800f3d2:	bd38      	pop	{r3, r4, r5, pc}
 800f3d4:	20008b1c 	.word	0x20008b1c

0800f3d8 <__swhatbuf_r>:
 800f3d8:	b570      	push	{r4, r5, r6, lr}
 800f3da:	460e      	mov	r6, r1
 800f3dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3e0:	2900      	cmp	r1, #0
 800f3e2:	b096      	sub	sp, #88	; 0x58
 800f3e4:	4614      	mov	r4, r2
 800f3e6:	461d      	mov	r5, r3
 800f3e8:	da07      	bge.n	800f3fa <__swhatbuf_r+0x22>
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	602b      	str	r3, [r5, #0]
 800f3ee:	89b3      	ldrh	r3, [r6, #12]
 800f3f0:	061a      	lsls	r2, r3, #24
 800f3f2:	d410      	bmi.n	800f416 <__swhatbuf_r+0x3e>
 800f3f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f3f8:	e00e      	b.n	800f418 <__swhatbuf_r+0x40>
 800f3fa:	466a      	mov	r2, sp
 800f3fc:	f000 f8d8 	bl	800f5b0 <_fstat_r>
 800f400:	2800      	cmp	r0, #0
 800f402:	dbf2      	blt.n	800f3ea <__swhatbuf_r+0x12>
 800f404:	9a01      	ldr	r2, [sp, #4]
 800f406:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f40a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f40e:	425a      	negs	r2, r3
 800f410:	415a      	adcs	r2, r3
 800f412:	602a      	str	r2, [r5, #0]
 800f414:	e7ee      	b.n	800f3f4 <__swhatbuf_r+0x1c>
 800f416:	2340      	movs	r3, #64	; 0x40
 800f418:	2000      	movs	r0, #0
 800f41a:	6023      	str	r3, [r4, #0]
 800f41c:	b016      	add	sp, #88	; 0x58
 800f41e:	bd70      	pop	{r4, r5, r6, pc}

0800f420 <__smakebuf_r>:
 800f420:	898b      	ldrh	r3, [r1, #12]
 800f422:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f424:	079d      	lsls	r5, r3, #30
 800f426:	4606      	mov	r6, r0
 800f428:	460c      	mov	r4, r1
 800f42a:	d507      	bpl.n	800f43c <__smakebuf_r+0x1c>
 800f42c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f430:	6023      	str	r3, [r4, #0]
 800f432:	6123      	str	r3, [r4, #16]
 800f434:	2301      	movs	r3, #1
 800f436:	6163      	str	r3, [r4, #20]
 800f438:	b002      	add	sp, #8
 800f43a:	bd70      	pop	{r4, r5, r6, pc}
 800f43c:	ab01      	add	r3, sp, #4
 800f43e:	466a      	mov	r2, sp
 800f440:	f7ff ffca 	bl	800f3d8 <__swhatbuf_r>
 800f444:	9900      	ldr	r1, [sp, #0]
 800f446:	4605      	mov	r5, r0
 800f448:	4630      	mov	r0, r6
 800f44a:	f7ff f90f 	bl	800e66c <_malloc_r>
 800f44e:	b948      	cbnz	r0, 800f464 <__smakebuf_r+0x44>
 800f450:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f454:	059a      	lsls	r2, r3, #22
 800f456:	d4ef      	bmi.n	800f438 <__smakebuf_r+0x18>
 800f458:	f023 0303 	bic.w	r3, r3, #3
 800f45c:	f043 0302 	orr.w	r3, r3, #2
 800f460:	81a3      	strh	r3, [r4, #12]
 800f462:	e7e3      	b.n	800f42c <__smakebuf_r+0xc>
 800f464:	4b0d      	ldr	r3, [pc, #52]	; (800f49c <__smakebuf_r+0x7c>)
 800f466:	62b3      	str	r3, [r6, #40]	; 0x28
 800f468:	89a3      	ldrh	r3, [r4, #12]
 800f46a:	6020      	str	r0, [r4, #0]
 800f46c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f470:	81a3      	strh	r3, [r4, #12]
 800f472:	9b00      	ldr	r3, [sp, #0]
 800f474:	6163      	str	r3, [r4, #20]
 800f476:	9b01      	ldr	r3, [sp, #4]
 800f478:	6120      	str	r0, [r4, #16]
 800f47a:	b15b      	cbz	r3, 800f494 <__smakebuf_r+0x74>
 800f47c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f480:	4630      	mov	r0, r6
 800f482:	f000 f8a7 	bl	800f5d4 <_isatty_r>
 800f486:	b128      	cbz	r0, 800f494 <__smakebuf_r+0x74>
 800f488:	89a3      	ldrh	r3, [r4, #12]
 800f48a:	f023 0303 	bic.w	r3, r3, #3
 800f48e:	f043 0301 	orr.w	r3, r3, #1
 800f492:	81a3      	strh	r3, [r4, #12]
 800f494:	89a0      	ldrh	r0, [r4, #12]
 800f496:	4305      	orrs	r5, r0
 800f498:	81a5      	strh	r5, [r4, #12]
 800f49a:	e7cd      	b.n	800f438 <__smakebuf_r+0x18>
 800f49c:	0800e3f1 	.word	0x0800e3f1

0800f4a0 <__malloc_lock>:
 800f4a0:	4801      	ldr	r0, [pc, #4]	; (800f4a8 <__malloc_lock+0x8>)
 800f4a2:	f7ff b889 	b.w	800e5b8 <__retarget_lock_acquire_recursive>
 800f4a6:	bf00      	nop
 800f4a8:	20008b24 	.word	0x20008b24

0800f4ac <__malloc_unlock>:
 800f4ac:	4801      	ldr	r0, [pc, #4]	; (800f4b4 <__malloc_unlock+0x8>)
 800f4ae:	f7ff b884 	b.w	800e5ba <__retarget_lock_release_recursive>
 800f4b2:	bf00      	nop
 800f4b4:	20008b24 	.word	0x20008b24

0800f4b8 <_realloc_r>:
 800f4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4ba:	4607      	mov	r7, r0
 800f4bc:	4614      	mov	r4, r2
 800f4be:	460e      	mov	r6, r1
 800f4c0:	b921      	cbnz	r1, 800f4cc <_realloc_r+0x14>
 800f4c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f4c6:	4611      	mov	r1, r2
 800f4c8:	f7ff b8d0 	b.w	800e66c <_malloc_r>
 800f4cc:	b922      	cbnz	r2, 800f4d8 <_realloc_r+0x20>
 800f4ce:	f7ff f87d 	bl	800e5cc <_free_r>
 800f4d2:	4625      	mov	r5, r4
 800f4d4:	4628      	mov	r0, r5
 800f4d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4d8:	f000 f88c 	bl	800f5f4 <_malloc_usable_size_r>
 800f4dc:	42a0      	cmp	r0, r4
 800f4de:	d20f      	bcs.n	800f500 <_realloc_r+0x48>
 800f4e0:	4621      	mov	r1, r4
 800f4e2:	4638      	mov	r0, r7
 800f4e4:	f7ff f8c2 	bl	800e66c <_malloc_r>
 800f4e8:	4605      	mov	r5, r0
 800f4ea:	2800      	cmp	r0, #0
 800f4ec:	d0f2      	beq.n	800f4d4 <_realloc_r+0x1c>
 800f4ee:	4631      	mov	r1, r6
 800f4f0:	4622      	mov	r2, r4
 800f4f2:	f7fe fe7f 	bl	800e1f4 <memcpy>
 800f4f6:	4631      	mov	r1, r6
 800f4f8:	4638      	mov	r0, r7
 800f4fa:	f7ff f867 	bl	800e5cc <_free_r>
 800f4fe:	e7e9      	b.n	800f4d4 <_realloc_r+0x1c>
 800f500:	4635      	mov	r5, r6
 800f502:	e7e7      	b.n	800f4d4 <_realloc_r+0x1c>

0800f504 <_read_r>:
 800f504:	b538      	push	{r3, r4, r5, lr}
 800f506:	4d07      	ldr	r5, [pc, #28]	; (800f524 <_read_r+0x20>)
 800f508:	4604      	mov	r4, r0
 800f50a:	4608      	mov	r0, r1
 800f50c:	4611      	mov	r1, r2
 800f50e:	2200      	movs	r2, #0
 800f510:	602a      	str	r2, [r5, #0]
 800f512:	461a      	mov	r2, r3
 800f514:	f7f1 f9fc 	bl	8000910 <_read>
 800f518:	1c43      	adds	r3, r0, #1
 800f51a:	d102      	bne.n	800f522 <_read_r+0x1e>
 800f51c:	682b      	ldr	r3, [r5, #0]
 800f51e:	b103      	cbz	r3, 800f522 <_read_r+0x1e>
 800f520:	6023      	str	r3, [r4, #0]
 800f522:	bd38      	pop	{r3, r4, r5, pc}
 800f524:	20008b1c 	.word	0x20008b1c

0800f528 <_raise_r>:
 800f528:	291f      	cmp	r1, #31
 800f52a:	b538      	push	{r3, r4, r5, lr}
 800f52c:	4604      	mov	r4, r0
 800f52e:	460d      	mov	r5, r1
 800f530:	d904      	bls.n	800f53c <_raise_r+0x14>
 800f532:	2316      	movs	r3, #22
 800f534:	6003      	str	r3, [r0, #0]
 800f536:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f53a:	bd38      	pop	{r3, r4, r5, pc}
 800f53c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f53e:	b112      	cbz	r2, 800f546 <_raise_r+0x1e>
 800f540:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f544:	b94b      	cbnz	r3, 800f55a <_raise_r+0x32>
 800f546:	4620      	mov	r0, r4
 800f548:	f000 f830 	bl	800f5ac <_getpid_r>
 800f54c:	462a      	mov	r2, r5
 800f54e:	4601      	mov	r1, r0
 800f550:	4620      	mov	r0, r4
 800f552:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f556:	f000 b817 	b.w	800f588 <_kill_r>
 800f55a:	2b01      	cmp	r3, #1
 800f55c:	d00a      	beq.n	800f574 <_raise_r+0x4c>
 800f55e:	1c59      	adds	r1, r3, #1
 800f560:	d103      	bne.n	800f56a <_raise_r+0x42>
 800f562:	2316      	movs	r3, #22
 800f564:	6003      	str	r3, [r0, #0]
 800f566:	2001      	movs	r0, #1
 800f568:	e7e7      	b.n	800f53a <_raise_r+0x12>
 800f56a:	2400      	movs	r4, #0
 800f56c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f570:	4628      	mov	r0, r5
 800f572:	4798      	blx	r3
 800f574:	2000      	movs	r0, #0
 800f576:	e7e0      	b.n	800f53a <_raise_r+0x12>

0800f578 <raise>:
 800f578:	4b02      	ldr	r3, [pc, #8]	; (800f584 <raise+0xc>)
 800f57a:	4601      	mov	r1, r0
 800f57c:	6818      	ldr	r0, [r3, #0]
 800f57e:	f7ff bfd3 	b.w	800f528 <_raise_r>
 800f582:	bf00      	nop
 800f584:	20000014 	.word	0x20000014

0800f588 <_kill_r>:
 800f588:	b538      	push	{r3, r4, r5, lr}
 800f58a:	4d07      	ldr	r5, [pc, #28]	; (800f5a8 <_kill_r+0x20>)
 800f58c:	2300      	movs	r3, #0
 800f58e:	4604      	mov	r4, r0
 800f590:	4608      	mov	r0, r1
 800f592:	4611      	mov	r1, r2
 800f594:	602b      	str	r3, [r5, #0]
 800f596:	f7f1 f99f 	bl	80008d8 <_kill>
 800f59a:	1c43      	adds	r3, r0, #1
 800f59c:	d102      	bne.n	800f5a4 <_kill_r+0x1c>
 800f59e:	682b      	ldr	r3, [r5, #0]
 800f5a0:	b103      	cbz	r3, 800f5a4 <_kill_r+0x1c>
 800f5a2:	6023      	str	r3, [r4, #0]
 800f5a4:	bd38      	pop	{r3, r4, r5, pc}
 800f5a6:	bf00      	nop
 800f5a8:	20008b1c 	.word	0x20008b1c

0800f5ac <_getpid_r>:
 800f5ac:	f7f1 b98c 	b.w	80008c8 <_getpid>

0800f5b0 <_fstat_r>:
 800f5b0:	b538      	push	{r3, r4, r5, lr}
 800f5b2:	4d07      	ldr	r5, [pc, #28]	; (800f5d0 <_fstat_r+0x20>)
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	4604      	mov	r4, r0
 800f5b8:	4608      	mov	r0, r1
 800f5ba:	4611      	mov	r1, r2
 800f5bc:	602b      	str	r3, [r5, #0]
 800f5be:	f7f1 f9ec 	bl	800099a <_fstat>
 800f5c2:	1c43      	adds	r3, r0, #1
 800f5c4:	d102      	bne.n	800f5cc <_fstat_r+0x1c>
 800f5c6:	682b      	ldr	r3, [r5, #0]
 800f5c8:	b103      	cbz	r3, 800f5cc <_fstat_r+0x1c>
 800f5ca:	6023      	str	r3, [r4, #0]
 800f5cc:	bd38      	pop	{r3, r4, r5, pc}
 800f5ce:	bf00      	nop
 800f5d0:	20008b1c 	.word	0x20008b1c

0800f5d4 <_isatty_r>:
 800f5d4:	b538      	push	{r3, r4, r5, lr}
 800f5d6:	4d06      	ldr	r5, [pc, #24]	; (800f5f0 <_isatty_r+0x1c>)
 800f5d8:	2300      	movs	r3, #0
 800f5da:	4604      	mov	r4, r0
 800f5dc:	4608      	mov	r0, r1
 800f5de:	602b      	str	r3, [r5, #0]
 800f5e0:	f7f1 f9eb 	bl	80009ba <_isatty>
 800f5e4:	1c43      	adds	r3, r0, #1
 800f5e6:	d102      	bne.n	800f5ee <_isatty_r+0x1a>
 800f5e8:	682b      	ldr	r3, [r5, #0]
 800f5ea:	b103      	cbz	r3, 800f5ee <_isatty_r+0x1a>
 800f5ec:	6023      	str	r3, [r4, #0]
 800f5ee:	bd38      	pop	{r3, r4, r5, pc}
 800f5f0:	20008b1c 	.word	0x20008b1c

0800f5f4 <_malloc_usable_size_r>:
 800f5f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f5f8:	1f18      	subs	r0, r3, #4
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	bfbc      	itt	lt
 800f5fe:	580b      	ldrlt	r3, [r1, r0]
 800f600:	18c0      	addlt	r0, r0, r3
 800f602:	4770      	bx	lr

0800f604 <_init>:
 800f604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f606:	bf00      	nop
 800f608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f60a:	bc08      	pop	{r3}
 800f60c:	469e      	mov	lr, r3
 800f60e:	4770      	bx	lr

0800f610 <_fini>:
 800f610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f612:	bf00      	nop
 800f614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f616:	bc08      	pop	{r3}
 800f618:	469e      	mov	lr, r3
 800f61a:	4770      	bx	lr
