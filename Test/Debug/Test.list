
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017c20  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007d3c  08017db0  08017db0  00027db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801faec  0801faec  00030090  2**0
                  CONTENTS
  4 .ARM          00000008  0801faec  0801faec  0002faec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801faf4  0801faf4  00030090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801faf4  0801faf4  0002faf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801faf8  0801faf8  0002faf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0801fafc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030090  2**0
                  CONTENTS
 10 .bss          00017994  20000090  20000090  00030090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20017a24  20017a24  00030090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003dff6  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000076d7  00000000  00000000  0006e0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b78  00000000  00000000  00075790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a90  00000000  00000000  00077308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000309a9  00000000  00000000  00078d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002fbda  00000000  00000000  000a9741  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4c24  00000000  00000000  000d931b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001bdf3f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007c00  00000000  00000000  001bdf94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08017d98 	.word	0x08017d98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08017d98 	.word	0x08017d98

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <ssi_handler>:
char const *TAGCHAR[] = { "json", "test", "jsontag" };
char const **TAGS = TAGCHAR;
int f = 0;

uint16_t ssi_handler(int iIndex, char *pcInsert, int iInsertLen,
		u16_t current_tag_part, u16_t *next_tag_part) {
 8000598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800059a:	b091      	sub	sp, #68	; 0x44
 800059c:	af08      	add	r7, sp, #32
 800059e:	6178      	str	r0, [r7, #20]
 80005a0:	6139      	str	r1, [r7, #16]
 80005a2:	60fa      	str	r2, [r7, #12]
 80005a4:	817b      	strh	r3, [r7, #10]

	switch (iIndex) {
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	2b02      	cmp	r3, #2
 80005aa:	f000 8177 	beq.w	800089c <ssi_handler+0x304>
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	2b02      	cmp	r3, #2
 80005b2:	f300 8226 	bgt.w	8000a02 <ssi_handler+0x46a>
 80005b6:	697b      	ldr	r3, [r7, #20]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d004      	beq.n	80005c6 <ssi_handler+0x2e>
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	f000 815a 	beq.w	8000878 <ssi_handler+0x2e0>
		memset(json, '\0', sizeof(json));
		memset(arrline, '\0', sizeof(arrline));
		return strlen(pcInsert);
		break;
	default:
		break;
 80005c4:	e21d      	b.n	8000a02 <ssi_handler+0x46a>
			if(variable == num_lines){
 80005c6:	4ba5      	ldr	r3, [pc, #660]	; (800085c <ssi_handler+0x2c4>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	2b46      	cmp	r3, #70	; 0x46
 80005cc:	d106      	bne.n	80005dc <ssi_handler+0x44>
				printf("Exit from function! \n");
 80005ce:	48a4      	ldr	r0, [pc, #656]	; (8000860 <ssi_handler+0x2c8>)
 80005d0:	f016 f8da 	bl	8016788 <puts>
				variable=0;
 80005d4:	4ba1      	ldr	r3, [pc, #644]	; (800085c <ssi_handler+0x2c4>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
				break;
 80005da:	e213      	b.n	8000a04 <ssi_handler+0x46c>
				if(variable == 0){
 80005dc:	4b9f      	ldr	r3, [pc, #636]	; (800085c <ssi_handler+0x2c4>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d160      	bne.n	80006a6 <ssi_handler+0x10e>
				T[variable].pulluptype, T[variable].bounceinterval, T[variable].holdinterval,
 80005e4:	4b9d      	ldr	r3, [pc, #628]	; (800085c <ssi_handler+0x2c4>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2258      	movs	r2, #88	; 0x58
 80005ea:	fb02 f303 	mul.w	r3, r2, r3
 80005ee:	4a9d      	ldr	r2, [pc, #628]	; (8000864 <ssi_handler+0x2cc>)
 80005f0:	eb03 0c02 	add.w	ip, r3, r2
					sprintf(pcInsert, "[{\"pulluptype\":\"%s\",\"bounceinterval\":%d,\"holdinterval\":%d,\"repeat\":%d,\"repeatinterval\":%d,\"doubleclickinterval\":%d,\"preventclick\":%d,\"infofield\":\"%s\",\"onoff\":%d},",
 80005f4:	4b99      	ldr	r3, [pc, #612]	; (800085c <ssi_handler+0x2c4>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a9a      	ldr	r2, [pc, #616]	; (8000864 <ssi_handler+0x2cc>)
 80005fa:	2158      	movs	r1, #88	; 0x58
 80005fc:	fb01 f303 	mul.w	r3, r1, r3
 8000600:	4413      	add	r3, r2
 8000602:	3328      	adds	r3, #40	; 0x28
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	4b94      	ldr	r3, [pc, #592]	; (800085c <ssi_handler+0x2c4>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a95      	ldr	r2, [pc, #596]	; (8000864 <ssi_handler+0x2cc>)
 800060e:	2158      	movs	r1, #88	; 0x58
 8000610:	fb01 f303 	mul.w	r3, r1, r3
 8000614:	4413      	add	r3, r2
 8000616:	332c      	adds	r3, #44	; 0x2c
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a90      	ldr	r2, [pc, #576]	; (800085c <ssi_handler+0x2c4>)
 800061c:	6812      	ldr	r2, [r2, #0]
 800061e:	4991      	ldr	r1, [pc, #580]	; (8000864 <ssi_handler+0x2cc>)
 8000620:	2058      	movs	r0, #88	; 0x58
 8000622:	fb00 f202 	mul.w	r2, r0, r2
 8000626:	440a      	add	r2, r1
 8000628:	3230      	adds	r2, #48	; 0x30
 800062a:	6812      	ldr	r2, [r2, #0]
 800062c:	603a      	str	r2, [r7, #0]
 800062e:	498b      	ldr	r1, [pc, #556]	; (800085c <ssi_handler+0x2c4>)
 8000630:	6809      	ldr	r1, [r1, #0]
 8000632:	488c      	ldr	r0, [pc, #560]	; (8000864 <ssi_handler+0x2cc>)
 8000634:	2458      	movs	r4, #88	; 0x58
 8000636:	fb04 f101 	mul.w	r1, r4, r1
 800063a:	4401      	add	r1, r0
 800063c:	3134      	adds	r1, #52	; 0x34
 800063e:	6809      	ldr	r1, [r1, #0]
 8000640:	4886      	ldr	r0, [pc, #536]	; (800085c <ssi_handler+0x2c4>)
 8000642:	6800      	ldr	r0, [r0, #0]
 8000644:	4c87      	ldr	r4, [pc, #540]	; (8000864 <ssi_handler+0x2cc>)
 8000646:	2558      	movs	r5, #88	; 0x58
 8000648:	fb05 f000 	mul.w	r0, r5, r0
 800064c:	4420      	add	r0, r4
 800064e:	3038      	adds	r0, #56	; 0x38
 8000650:	6800      	ldr	r0, [r0, #0]
 8000652:	4c82      	ldr	r4, [pc, #520]	; (800085c <ssi_handler+0x2c4>)
 8000654:	6824      	ldr	r4, [r4, #0]
 8000656:	4d83      	ldr	r5, [pc, #524]	; (8000864 <ssi_handler+0x2cc>)
 8000658:	2658      	movs	r6, #88	; 0x58
 800065a:	fb06 f404 	mul.w	r4, r6, r4
 800065e:	442c      	add	r4, r5
 8000660:	343c      	adds	r4, #60	; 0x3c
 8000662:	6824      	ldr	r4, [r4, #0]
				T[variable].preventclick, T[variable].infofield, T[variable].onoff);
 8000664:	4d7d      	ldr	r5, [pc, #500]	; (800085c <ssi_handler+0x2c4>)
 8000666:	682d      	ldr	r5, [r5, #0]
 8000668:	2658      	movs	r6, #88	; 0x58
 800066a:	fb06 f505 	mul.w	r5, r6, r5
 800066e:	3540      	adds	r5, #64	; 0x40
 8000670:	4e7c      	ldr	r6, [pc, #496]	; (8000864 <ssi_handler+0x2cc>)
 8000672:	4435      	add	r5, r6
					sprintf(pcInsert, "[{\"pulluptype\":\"%s\",\"bounceinterval\":%d,\"holdinterval\":%d,\"repeat\":%d,\"repeatinterval\":%d,\"doubleclickinterval\":%d,\"preventclick\":%d,\"infofield\":\"%s\",\"onoff\":%d},",
 8000674:	4e79      	ldr	r6, [pc, #484]	; (800085c <ssi_handler+0x2c4>)
 8000676:	6836      	ldr	r6, [r6, #0]
 8000678:	4a7a      	ldr	r2, [pc, #488]	; (8000864 <ssi_handler+0x2cc>)
 800067a:	f04f 0e58 	mov.w	lr, #88	; 0x58
 800067e:	fb0e f606 	mul.w	r6, lr, r6
 8000682:	4416      	add	r6, r2
 8000684:	3654      	adds	r6, #84	; 0x54
 8000686:	6836      	ldr	r6, [r6, #0]
 8000688:	9606      	str	r6, [sp, #24]
 800068a:	9505      	str	r5, [sp, #20]
 800068c:	9404      	str	r4, [sp, #16]
 800068e:	9003      	str	r0, [sp, #12]
 8000690:	9102      	str	r1, [sp, #8]
 8000692:	683a      	ldr	r2, [r7, #0]
 8000694:	9201      	str	r2, [sp, #4]
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	4662      	mov	r2, ip
 800069c:	4972      	ldr	r1, [pc, #456]	; (8000868 <ssi_handler+0x2d0>)
 800069e:	6938      	ldr	r0, [r7, #16]
 80006a0:	f016 f8ee 	bl	8016880 <siprintf>
 80006a4:	e0c4      	b.n	8000830 <ssi_handler+0x298>
				}else if(variable == num_lines-1){
 80006a6:	4b6d      	ldr	r3, [pc, #436]	; (800085c <ssi_handler+0x2c4>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2b45      	cmp	r3, #69	; 0x45
 80006ac:	d160      	bne.n	8000770 <ssi_handler+0x1d8>
									T[variable].pulluptype, T[variable].bounceinterval, T[variable].holdinterval,
 80006ae:	4b6b      	ldr	r3, [pc, #428]	; (800085c <ssi_handler+0x2c4>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2258      	movs	r2, #88	; 0x58
 80006b4:	fb02 f303 	mul.w	r3, r2, r3
 80006b8:	4a6a      	ldr	r2, [pc, #424]	; (8000864 <ssi_handler+0x2cc>)
 80006ba:	eb03 0c02 	add.w	ip, r3, r2
					sprintf(pcInsert, "{\"pulluptype\":\"%s\",\"bounceinterval\":%d,\"holdinterval\":%d,\"repeat\":%d,\"repeatinterval\":%d,\"doubleclickinterval\":%d,\"preventclick\":%d,\"infofield\":\"%s\",\"onoff\":%d}]",
 80006be:	4b67      	ldr	r3, [pc, #412]	; (800085c <ssi_handler+0x2c4>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a68      	ldr	r2, [pc, #416]	; (8000864 <ssi_handler+0x2cc>)
 80006c4:	2158      	movs	r1, #88	; 0x58
 80006c6:	fb01 f303 	mul.w	r3, r1, r3
 80006ca:	4413      	add	r3, r2
 80006cc:	3328      	adds	r3, #40	; 0x28
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	4b62      	ldr	r3, [pc, #392]	; (800085c <ssi_handler+0x2c4>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a63      	ldr	r2, [pc, #396]	; (8000864 <ssi_handler+0x2cc>)
 80006d8:	2158      	movs	r1, #88	; 0x58
 80006da:	fb01 f303 	mul.w	r3, r1, r3
 80006de:	4413      	add	r3, r2
 80006e0:	332c      	adds	r3, #44	; 0x2c
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a5d      	ldr	r2, [pc, #372]	; (800085c <ssi_handler+0x2c4>)
 80006e6:	6812      	ldr	r2, [r2, #0]
 80006e8:	495e      	ldr	r1, [pc, #376]	; (8000864 <ssi_handler+0x2cc>)
 80006ea:	2058      	movs	r0, #88	; 0x58
 80006ec:	fb00 f202 	mul.w	r2, r0, r2
 80006f0:	440a      	add	r2, r1
 80006f2:	3230      	adds	r2, #48	; 0x30
 80006f4:	6812      	ldr	r2, [r2, #0]
 80006f6:	603a      	str	r2, [r7, #0]
 80006f8:	4958      	ldr	r1, [pc, #352]	; (800085c <ssi_handler+0x2c4>)
 80006fa:	6809      	ldr	r1, [r1, #0]
 80006fc:	4859      	ldr	r0, [pc, #356]	; (8000864 <ssi_handler+0x2cc>)
 80006fe:	2458      	movs	r4, #88	; 0x58
 8000700:	fb04 f101 	mul.w	r1, r4, r1
 8000704:	4401      	add	r1, r0
 8000706:	3134      	adds	r1, #52	; 0x34
 8000708:	6809      	ldr	r1, [r1, #0]
 800070a:	4854      	ldr	r0, [pc, #336]	; (800085c <ssi_handler+0x2c4>)
 800070c:	6800      	ldr	r0, [r0, #0]
 800070e:	4c55      	ldr	r4, [pc, #340]	; (8000864 <ssi_handler+0x2cc>)
 8000710:	2558      	movs	r5, #88	; 0x58
 8000712:	fb05 f000 	mul.w	r0, r5, r0
 8000716:	4420      	add	r0, r4
 8000718:	3038      	adds	r0, #56	; 0x38
 800071a:	6800      	ldr	r0, [r0, #0]
 800071c:	4c4f      	ldr	r4, [pc, #316]	; (800085c <ssi_handler+0x2c4>)
 800071e:	6824      	ldr	r4, [r4, #0]
 8000720:	4d50      	ldr	r5, [pc, #320]	; (8000864 <ssi_handler+0x2cc>)
 8000722:	2658      	movs	r6, #88	; 0x58
 8000724:	fb06 f404 	mul.w	r4, r6, r4
 8000728:	442c      	add	r4, r5
 800072a:	343c      	adds	r4, #60	; 0x3c
 800072c:	6824      	ldr	r4, [r4, #0]
									T[variable].preventclick, T[variable].infofield, T[variable].onoff);
 800072e:	4d4b      	ldr	r5, [pc, #300]	; (800085c <ssi_handler+0x2c4>)
 8000730:	682d      	ldr	r5, [r5, #0]
 8000732:	2658      	movs	r6, #88	; 0x58
 8000734:	fb06 f505 	mul.w	r5, r6, r5
 8000738:	3540      	adds	r5, #64	; 0x40
 800073a:	4e4a      	ldr	r6, [pc, #296]	; (8000864 <ssi_handler+0x2cc>)
 800073c:	4435      	add	r5, r6
					sprintf(pcInsert, "{\"pulluptype\":\"%s\",\"bounceinterval\":%d,\"holdinterval\":%d,\"repeat\":%d,\"repeatinterval\":%d,\"doubleclickinterval\":%d,\"preventclick\":%d,\"infofield\":\"%s\",\"onoff\":%d}]",
 800073e:	4e47      	ldr	r6, [pc, #284]	; (800085c <ssi_handler+0x2c4>)
 8000740:	6836      	ldr	r6, [r6, #0]
 8000742:	4a48      	ldr	r2, [pc, #288]	; (8000864 <ssi_handler+0x2cc>)
 8000744:	f04f 0e58 	mov.w	lr, #88	; 0x58
 8000748:	fb0e f606 	mul.w	r6, lr, r6
 800074c:	4416      	add	r6, r2
 800074e:	3654      	adds	r6, #84	; 0x54
 8000750:	6836      	ldr	r6, [r6, #0]
 8000752:	9606      	str	r6, [sp, #24]
 8000754:	9505      	str	r5, [sp, #20]
 8000756:	9404      	str	r4, [sp, #16]
 8000758:	9003      	str	r0, [sp, #12]
 800075a:	9102      	str	r1, [sp, #8]
 800075c:	683a      	ldr	r2, [r7, #0]
 800075e:	9201      	str	r2, [sp, #4]
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	4662      	mov	r2, ip
 8000766:	4941      	ldr	r1, [pc, #260]	; (800086c <ssi_handler+0x2d4>)
 8000768:	6938      	ldr	r0, [r7, #16]
 800076a:	f016 f889 	bl	8016880 <siprintf>
 800076e:	e05f      	b.n	8000830 <ssi_handler+0x298>
														T[variable].pulluptype, T[variable].bounceinterval, T[variable].holdinterval,
 8000770:	4b3a      	ldr	r3, [pc, #232]	; (800085c <ssi_handler+0x2c4>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2258      	movs	r2, #88	; 0x58
 8000776:	fb02 f303 	mul.w	r3, r2, r3
 800077a:	4a3a      	ldr	r2, [pc, #232]	; (8000864 <ssi_handler+0x2cc>)
 800077c:	eb03 0c02 	add.w	ip, r3, r2
					sprintf(pcInsert, "{\"pulluptype\":\"%s\",\"bounceinterval\":%d,\"holdinterval\":%d,\"repeat\":%d,\"repeatinterval\":%d,\"doubleclickinterval\":%d,\"preventclick\":%d,\"infofield\":\"%s\",\"onoff\":%d},",
 8000780:	4b36      	ldr	r3, [pc, #216]	; (800085c <ssi_handler+0x2c4>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a37      	ldr	r2, [pc, #220]	; (8000864 <ssi_handler+0x2cc>)
 8000786:	2158      	movs	r1, #88	; 0x58
 8000788:	fb01 f303 	mul.w	r3, r1, r3
 800078c:	4413      	add	r3, r2
 800078e:	3328      	adds	r3, #40	; 0x28
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	4b31      	ldr	r3, [pc, #196]	; (800085c <ssi_handler+0x2c4>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a32      	ldr	r2, [pc, #200]	; (8000864 <ssi_handler+0x2cc>)
 800079a:	2158      	movs	r1, #88	; 0x58
 800079c:	fb01 f303 	mul.w	r3, r1, r3
 80007a0:	4413      	add	r3, r2
 80007a2:	332c      	adds	r3, #44	; 0x2c
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a2d      	ldr	r2, [pc, #180]	; (800085c <ssi_handler+0x2c4>)
 80007a8:	6812      	ldr	r2, [r2, #0]
 80007aa:	492e      	ldr	r1, [pc, #184]	; (8000864 <ssi_handler+0x2cc>)
 80007ac:	2058      	movs	r0, #88	; 0x58
 80007ae:	fb00 f202 	mul.w	r2, r0, r2
 80007b2:	440a      	add	r2, r1
 80007b4:	3230      	adds	r2, #48	; 0x30
 80007b6:	6812      	ldr	r2, [r2, #0]
 80007b8:	603a      	str	r2, [r7, #0]
 80007ba:	4928      	ldr	r1, [pc, #160]	; (800085c <ssi_handler+0x2c4>)
 80007bc:	6809      	ldr	r1, [r1, #0]
 80007be:	4829      	ldr	r0, [pc, #164]	; (8000864 <ssi_handler+0x2cc>)
 80007c0:	2458      	movs	r4, #88	; 0x58
 80007c2:	fb04 f101 	mul.w	r1, r4, r1
 80007c6:	4401      	add	r1, r0
 80007c8:	3134      	adds	r1, #52	; 0x34
 80007ca:	6809      	ldr	r1, [r1, #0]
 80007cc:	4823      	ldr	r0, [pc, #140]	; (800085c <ssi_handler+0x2c4>)
 80007ce:	6800      	ldr	r0, [r0, #0]
 80007d0:	4c24      	ldr	r4, [pc, #144]	; (8000864 <ssi_handler+0x2cc>)
 80007d2:	2558      	movs	r5, #88	; 0x58
 80007d4:	fb05 f000 	mul.w	r0, r5, r0
 80007d8:	4420      	add	r0, r4
 80007da:	3038      	adds	r0, #56	; 0x38
 80007dc:	6800      	ldr	r0, [r0, #0]
 80007de:	4c1f      	ldr	r4, [pc, #124]	; (800085c <ssi_handler+0x2c4>)
 80007e0:	6824      	ldr	r4, [r4, #0]
 80007e2:	4d20      	ldr	r5, [pc, #128]	; (8000864 <ssi_handler+0x2cc>)
 80007e4:	2658      	movs	r6, #88	; 0x58
 80007e6:	fb06 f404 	mul.w	r4, r6, r4
 80007ea:	442c      	add	r4, r5
 80007ec:	343c      	adds	r4, #60	; 0x3c
 80007ee:	6824      	ldr	r4, [r4, #0]
														T[variable].preventclick, T[variable].infofield, T[variable].onoff);
 80007f0:	4d1a      	ldr	r5, [pc, #104]	; (800085c <ssi_handler+0x2c4>)
 80007f2:	682d      	ldr	r5, [r5, #0]
 80007f4:	2658      	movs	r6, #88	; 0x58
 80007f6:	fb06 f505 	mul.w	r5, r6, r5
 80007fa:	3540      	adds	r5, #64	; 0x40
 80007fc:	4e19      	ldr	r6, [pc, #100]	; (8000864 <ssi_handler+0x2cc>)
 80007fe:	4435      	add	r5, r6
					sprintf(pcInsert, "{\"pulluptype\":\"%s\",\"bounceinterval\":%d,\"holdinterval\":%d,\"repeat\":%d,\"repeatinterval\":%d,\"doubleclickinterval\":%d,\"preventclick\":%d,\"infofield\":\"%s\",\"onoff\":%d},",
 8000800:	4e16      	ldr	r6, [pc, #88]	; (800085c <ssi_handler+0x2c4>)
 8000802:	6836      	ldr	r6, [r6, #0]
 8000804:	4a17      	ldr	r2, [pc, #92]	; (8000864 <ssi_handler+0x2cc>)
 8000806:	f04f 0e58 	mov.w	lr, #88	; 0x58
 800080a:	fb0e f606 	mul.w	r6, lr, r6
 800080e:	4416      	add	r6, r2
 8000810:	3654      	adds	r6, #84	; 0x54
 8000812:	6836      	ldr	r6, [r6, #0]
 8000814:	9606      	str	r6, [sp, #24]
 8000816:	9505      	str	r5, [sp, #20]
 8000818:	9404      	str	r4, [sp, #16]
 800081a:	9003      	str	r0, [sp, #12]
 800081c:	9102      	str	r1, [sp, #8]
 800081e:	683a      	ldr	r2, [r7, #0]
 8000820:	9201      	str	r2, [sp, #4]
 8000822:	9300      	str	r3, [sp, #0]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	4662      	mov	r2, ip
 8000828:	4911      	ldr	r1, [pc, #68]	; (8000870 <ssi_handler+0x2d8>)
 800082a:	6938      	ldr	r0, [r7, #16]
 800082c:	f016 f828 	bl	8016880 <siprintf>
				*next_tag_part = variable;
 8000830:	4b0a      	ldr	r3, [pc, #40]	; (800085c <ssi_handler+0x2c4>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	b29a      	uxth	r2, r3
 8000836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000838:	801a      	strh	r2, [r3, #0]
				printf("*next_tag_part = %d\n",*next_tag_part);
 800083a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800083c:	881b      	ldrh	r3, [r3, #0]
 800083e:	4619      	mov	r1, r3
 8000840:	480c      	ldr	r0, [pc, #48]	; (8000874 <ssi_handler+0x2dc>)
 8000842:	f015 ff1b 	bl	801667c <iprintf>
				variable ++;
 8000846:	4b05      	ldr	r3, [pc, #20]	; (800085c <ssi_handler+0x2c4>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	3301      	adds	r3, #1
 800084c:	4a03      	ldr	r2, [pc, #12]	; (800085c <ssi_handler+0x2c4>)
 800084e:	6013      	str	r3, [r2, #0]
				return strlen(pcInsert);
 8000850:	6938      	ldr	r0, [r7, #16]
 8000852:	f7ff fcc7 	bl	80001e4 <strlen>
 8000856:	4603      	mov	r3, r0
 8000858:	b29b      	uxth	r3, r3
 800085a:	e0d4      	b.n	8000a06 <ssi_handler+0x46e>
 800085c:	200000b0 	.word	0x200000b0
 8000860:	08017dc8 	.word	0x08017dc8
 8000864:	20001c48 	.word	0x20001c48
 8000868:	08017de0 	.word	0x08017de0
 800086c:	08017e84 	.word	0x08017e84
 8000870:	08017f28 	.word	0x08017f28
 8000874:	08017fcc 	.word	0x08017fcc
		indx1 += 1;
 8000878:	4b65      	ldr	r3, [pc, #404]	; (8000a10 <ssi_handler+0x478>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	3301      	adds	r3, #1
 800087e:	4a64      	ldr	r2, [pc, #400]	; (8000a10 <ssi_handler+0x478>)
 8000880:	6013      	str	r3, [r2, #0]
		sprintf(pcInsert, "%d", indx1);
 8000882:	4b63      	ldr	r3, [pc, #396]	; (8000a10 <ssi_handler+0x478>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	461a      	mov	r2, r3
 8000888:	4962      	ldr	r1, [pc, #392]	; (8000a14 <ssi_handler+0x47c>)
 800088a:	6938      	ldr	r0, [r7, #16]
 800088c:	f015 fff8 	bl	8016880 <siprintf>
		return strlen(pcInsert);
 8000890:	6938      	ldr	r0, [r7, #16]
 8000892:	f7ff fca7 	bl	80001e4 <strlen>
 8000896:	4603      	mov	r3, r0
 8000898:	b29b      	uxth	r3, r3
 800089a:	e0b4      	b.n	8000a06 <ssi_handler+0x46e>
		strcat(json, "[");
 800089c:	485e      	ldr	r0, [pc, #376]	; (8000a18 <ssi_handler+0x480>)
 800089e:	f7ff fca1 	bl	80001e4 <strlen>
 80008a2:	4603      	mov	r3, r0
 80008a4:	461a      	mov	r2, r3
 80008a6:	4b5c      	ldr	r3, [pc, #368]	; (8000a18 <ssi_handler+0x480>)
 80008a8:	4413      	add	r3, r2
 80008aa:	495c      	ldr	r1, [pc, #368]	; (8000a1c <ssi_handler+0x484>)
 80008ac:	461a      	mov	r2, r3
 80008ae:	460b      	mov	r3, r1
 80008b0:	881b      	ldrh	r3, [r3, #0]
 80008b2:	8013      	strh	r3, [r2, #0]
		for (int i = 0; i <= tabline; i++) {
 80008b4:	2300      	movs	r3, #0
 80008b6:	61fb      	str	r3, [r7, #28]
 80008b8:	e077      	b.n	80009aa <ssi_handler+0x412>
										T[variable].pulluptype, T[variable].bounceinterval, T[variable].holdinterval,
 80008ba:	4b59      	ldr	r3, [pc, #356]	; (8000a20 <ssi_handler+0x488>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2258      	movs	r2, #88	; 0x58
 80008c0:	fb02 f303 	mul.w	r3, r2, r3
 80008c4:	4a57      	ldr	r2, [pc, #348]	; (8000a24 <ssi_handler+0x48c>)
 80008c6:	eb03 0c02 	add.w	ip, r3, r2
			sprintf(arrline, "{\"pulluptype\":\"%s\",\"bounceinterval\":%d,\"holdinterval\":%d,\"repeat\":%d,\"repeatinterval\":%d,\"doubleclickinterval\":%d,\"preventclick\":%d,\"infofield\":\"%s\",\"onoff\":%d}",
 80008ca:	4b55      	ldr	r3, [pc, #340]	; (8000a20 <ssi_handler+0x488>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a55      	ldr	r2, [pc, #340]	; (8000a24 <ssi_handler+0x48c>)
 80008d0:	2158      	movs	r1, #88	; 0x58
 80008d2:	fb01 f303 	mul.w	r3, r1, r3
 80008d6:	4413      	add	r3, r2
 80008d8:	3328      	adds	r3, #40	; 0x28
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	4b50      	ldr	r3, [pc, #320]	; (8000a20 <ssi_handler+0x488>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a50      	ldr	r2, [pc, #320]	; (8000a24 <ssi_handler+0x48c>)
 80008e4:	2158      	movs	r1, #88	; 0x58
 80008e6:	fb01 f303 	mul.w	r3, r1, r3
 80008ea:	4413      	add	r3, r2
 80008ec:	332c      	adds	r3, #44	; 0x2c
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a4b      	ldr	r2, [pc, #300]	; (8000a20 <ssi_handler+0x488>)
 80008f2:	6812      	ldr	r2, [r2, #0]
 80008f4:	494b      	ldr	r1, [pc, #300]	; (8000a24 <ssi_handler+0x48c>)
 80008f6:	2058      	movs	r0, #88	; 0x58
 80008f8:	fb00 f202 	mul.w	r2, r0, r2
 80008fc:	440a      	add	r2, r1
 80008fe:	3230      	adds	r2, #48	; 0x30
 8000900:	6812      	ldr	r2, [r2, #0]
 8000902:	603a      	str	r2, [r7, #0]
 8000904:	4946      	ldr	r1, [pc, #280]	; (8000a20 <ssi_handler+0x488>)
 8000906:	6809      	ldr	r1, [r1, #0]
 8000908:	4846      	ldr	r0, [pc, #280]	; (8000a24 <ssi_handler+0x48c>)
 800090a:	2458      	movs	r4, #88	; 0x58
 800090c:	fb04 f101 	mul.w	r1, r4, r1
 8000910:	4401      	add	r1, r0
 8000912:	3134      	adds	r1, #52	; 0x34
 8000914:	6809      	ldr	r1, [r1, #0]
 8000916:	4842      	ldr	r0, [pc, #264]	; (8000a20 <ssi_handler+0x488>)
 8000918:	6800      	ldr	r0, [r0, #0]
 800091a:	4c42      	ldr	r4, [pc, #264]	; (8000a24 <ssi_handler+0x48c>)
 800091c:	2558      	movs	r5, #88	; 0x58
 800091e:	fb05 f000 	mul.w	r0, r5, r0
 8000922:	4420      	add	r0, r4
 8000924:	3038      	adds	r0, #56	; 0x38
 8000926:	6800      	ldr	r0, [r0, #0]
 8000928:	4c3d      	ldr	r4, [pc, #244]	; (8000a20 <ssi_handler+0x488>)
 800092a:	6824      	ldr	r4, [r4, #0]
 800092c:	4d3d      	ldr	r5, [pc, #244]	; (8000a24 <ssi_handler+0x48c>)
 800092e:	2658      	movs	r6, #88	; 0x58
 8000930:	fb06 f404 	mul.w	r4, r6, r4
 8000934:	442c      	add	r4, r5
 8000936:	343c      	adds	r4, #60	; 0x3c
 8000938:	6824      	ldr	r4, [r4, #0]
										T[variable].preventclick, T[variable].infofield, T[variable].onoff);
 800093a:	4d39      	ldr	r5, [pc, #228]	; (8000a20 <ssi_handler+0x488>)
 800093c:	682d      	ldr	r5, [r5, #0]
 800093e:	2658      	movs	r6, #88	; 0x58
 8000940:	fb06 f505 	mul.w	r5, r6, r5
 8000944:	3540      	adds	r5, #64	; 0x40
 8000946:	4e37      	ldr	r6, [pc, #220]	; (8000a24 <ssi_handler+0x48c>)
 8000948:	4435      	add	r5, r6
			sprintf(arrline, "{\"pulluptype\":\"%s\",\"bounceinterval\":%d,\"holdinterval\":%d,\"repeat\":%d,\"repeatinterval\":%d,\"doubleclickinterval\":%d,\"preventclick\":%d,\"infofield\":\"%s\",\"onoff\":%d}",
 800094a:	4e35      	ldr	r6, [pc, #212]	; (8000a20 <ssi_handler+0x488>)
 800094c:	6836      	ldr	r6, [r6, #0]
 800094e:	4a35      	ldr	r2, [pc, #212]	; (8000a24 <ssi_handler+0x48c>)
 8000950:	f04f 0e58 	mov.w	lr, #88	; 0x58
 8000954:	fb0e f606 	mul.w	r6, lr, r6
 8000958:	4416      	add	r6, r2
 800095a:	3654      	adds	r6, #84	; 0x54
 800095c:	6836      	ldr	r6, [r6, #0]
 800095e:	9606      	str	r6, [sp, #24]
 8000960:	9505      	str	r5, [sp, #20]
 8000962:	9404      	str	r4, [sp, #16]
 8000964:	9003      	str	r0, [sp, #12]
 8000966:	9102      	str	r1, [sp, #8]
 8000968:	683a      	ldr	r2, [r7, #0]
 800096a:	9201      	str	r2, [sp, #4]
 800096c:	9300      	str	r3, [sp, #0]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4662      	mov	r2, ip
 8000972:	492d      	ldr	r1, [pc, #180]	; (8000a28 <ssi_handler+0x490>)
 8000974:	482d      	ldr	r0, [pc, #180]	; (8000a2c <ssi_handler+0x494>)
 8000976:	f015 ff83 	bl	8016880 <siprintf>
			strcat(json, arrline);
 800097a:	492c      	ldr	r1, [pc, #176]	; (8000a2c <ssi_handler+0x494>)
 800097c:	4826      	ldr	r0, [pc, #152]	; (8000a18 <ssi_handler+0x480>)
 800097e:	f015 ff9f 	bl	80168c0 <strcat>
			if (i != tabline)
 8000982:	4b2b      	ldr	r3, [pc, #172]	; (8000a30 <ssi_handler+0x498>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	69fa      	ldr	r2, [r7, #28]
 8000988:	429a      	cmp	r2, r3
 800098a:	d00b      	beq.n	80009a4 <ssi_handler+0x40c>
				strcat(json, ",");
 800098c:	4822      	ldr	r0, [pc, #136]	; (8000a18 <ssi_handler+0x480>)
 800098e:	f7ff fc29 	bl	80001e4 <strlen>
 8000992:	4603      	mov	r3, r0
 8000994:	461a      	mov	r2, r3
 8000996:	4b20      	ldr	r3, [pc, #128]	; (8000a18 <ssi_handler+0x480>)
 8000998:	4413      	add	r3, r2
 800099a:	4926      	ldr	r1, [pc, #152]	; (8000a34 <ssi_handler+0x49c>)
 800099c:	461a      	mov	r2, r3
 800099e:	460b      	mov	r3, r1
 80009a0:	881b      	ldrh	r3, [r3, #0]
 80009a2:	8013      	strh	r3, [r2, #0]
		for (int i = 0; i <= tabline; i++) {
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	3301      	adds	r3, #1
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	4b21      	ldr	r3, [pc, #132]	; (8000a30 <ssi_handler+0x498>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	69fa      	ldr	r2, [r7, #28]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	dd82      	ble.n	80008ba <ssi_handler+0x322>
		strcat(json, "]");
 80009b4:	4818      	ldr	r0, [pc, #96]	; (8000a18 <ssi_handler+0x480>)
 80009b6:	f7ff fc15 	bl	80001e4 <strlen>
 80009ba:	4603      	mov	r3, r0
 80009bc:	461a      	mov	r2, r3
 80009be:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <ssi_handler+0x480>)
 80009c0:	4413      	add	r3, r2
 80009c2:	491d      	ldr	r1, [pc, #116]	; (8000a38 <ssi_handler+0x4a0>)
 80009c4:	461a      	mov	r2, r3
 80009c6:	460b      	mov	r3, r1
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	8013      	strh	r3, [r2, #0]
		printf(" %s\n", json);
 80009cc:	4912      	ldr	r1, [pc, #72]	; (8000a18 <ssi_handler+0x480>)
 80009ce:	481b      	ldr	r0, [pc, #108]	; (8000a3c <ssi_handler+0x4a4>)
 80009d0:	f015 fe54 	bl	801667c <iprintf>
		sprintf(pcInsert, "%s", json);
 80009d4:	4a10      	ldr	r2, [pc, #64]	; (8000a18 <ssi_handler+0x480>)
 80009d6:	491a      	ldr	r1, [pc, #104]	; (8000a40 <ssi_handler+0x4a8>)
 80009d8:	6938      	ldr	r0, [r7, #16]
 80009da:	f015 ff51 	bl	8016880 <siprintf>
		memset(json, '\0', sizeof(json));
 80009de:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80009e2:	2100      	movs	r1, #0
 80009e4:	480c      	ldr	r0, [pc, #48]	; (8000a18 <ssi_handler+0x480>)
 80009e6:	f015 fe41 	bl	801666c <memset>
		memset(arrline, '\0', sizeof(arrline));
 80009ea:	f44f 62af 	mov.w	r2, #1400	; 0x578
 80009ee:	2100      	movs	r1, #0
 80009f0:	480e      	ldr	r0, [pc, #56]	; (8000a2c <ssi_handler+0x494>)
 80009f2:	f015 fe3b 	bl	801666c <memset>
		return strlen(pcInsert);
 80009f6:	6938      	ldr	r0, [r7, #16]
 80009f8:	f7ff fbf4 	bl	80001e4 <strlen>
 80009fc:	4603      	mov	r3, r0
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	e001      	b.n	8000a06 <ssi_handler+0x46e>
		break;
 8000a02:	bf00      	nop
	}

	return 0;
 8000a04:	2300      	movs	r3, #0
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3724      	adds	r7, #36	; 0x24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200000ac 	.word	0x200000ac
 8000a14:	08017fe4 	.word	0x08017fe4
 8000a18:	20005b6c 	.word	0x20005b6c
 8000a1c:	08017fe8 	.word	0x08017fe8
 8000a20:	200000b0 	.word	0x200000b0
 8000a24:	20001c48 	.word	0x20001c48
 8000a28:	08017fec 	.word	0x08017fec
 8000a2c:	200016d0 	.word	0x200016d0
 8000a30:	20000000 	.word	0x20000000
 8000a34:	08018090 	.word	0x08018090
 8000a38:	08018094 	.word	0x08018094
 8000a3c:	08018098 	.word	0x08018098
 8000a40:	080180a0 	.word	0x080180a0

08000a44 <CGIForm_Handler>:
char name[30];

tCGI CGI_TAB[2]; // 3. For form создадим массив для form CGI

const char* CGIForm_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	607a      	str	r2, [r7, #4]
 8000a50:	603b      	str	r3, [r7, #0]
	printf("OK GET \r\n");
 8000a52:	4828      	ldr	r0, [pc, #160]	; (8000af4 <CGIForm_Handler+0xb0>)
 8000a54:	f015 fe98 	bl	8016788 <puts>
	if (iIndex == 0) {
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d145      	bne.n	8000aea <CGIForm_Handler+0xa6>
		for (int i = 0; i < iNumParams; i++) {
 8000a5e:	2300      	movs	r3, #0
 8000a60:	617b      	str	r3, [r7, #20]
 8000a62:	e03e      	b.n	8000ae2 <CGIForm_Handler+0x9e>
			if (strcmp(pcParam[i], "fname") == 0) // if the fname string is found
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	687a      	ldr	r2, [r7, #4]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4922      	ldr	r1, [pc, #136]	; (8000af8 <CGIForm_Handler+0xb4>)
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fbad 	bl	80001d0 <strcmp>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d10e      	bne.n	8000a9a <CGIForm_Handler+0x56>
					{
				memset(name, '\0', 30); // Очищаем массив перед записью новых данных.
 8000a7c:	221e      	movs	r2, #30
 8000a7e:	2100      	movs	r1, #0
 8000a80:	481e      	ldr	r0, [pc, #120]	; (8000afc <CGIForm_Handler+0xb8>)
 8000a82:	f015 fdf3 	bl	801666c <memset>
				strcpy(name, pcValue[i]); // Сохраняем значение в переменную.
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	683a      	ldr	r2, [r7, #0]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4619      	mov	r1, r3
 8000a92:	481a      	ldr	r0, [pc, #104]	; (8000afc <CGIForm_Handler+0xb8>)
 8000a94:	f015 ff30 	bl	80168f8 <strcpy>
 8000a98:	e020      	b.n	8000adc <CGIForm_Handler+0x98>
			}

			else if (strcmp(pcParam[i], "lname") == 0) // if the lname string is found
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4916      	ldr	r1, [pc, #88]	; (8000b00 <CGIForm_Handler+0xbc>)
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff fb92 	bl	80001d0 <strcmp>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d114      	bne.n	8000adc <CGIForm_Handler+0x98>
					{
				strcat(name, " "); // Сконкатенируем fname с lname разделяя пробелом.
 8000ab2:	4812      	ldr	r0, [pc, #72]	; (8000afc <CGIForm_Handler+0xb8>)
 8000ab4:	f7ff fb96 	bl	80001e4 <strlen>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	461a      	mov	r2, r3
 8000abc:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <CGIForm_Handler+0xb8>)
 8000abe:	4413      	add	r3, r2
 8000ac0:	4910      	ldr	r1, [pc, #64]	; (8000b04 <CGIForm_Handler+0xc0>)
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	881b      	ldrh	r3, [r3, #0]
 8000ac8:	8013      	strh	r3, [r2, #0]
				strcat(name, pcValue[i]); // Сохраняем значение в переменную.
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	683a      	ldr	r2, [r7, #0]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4809      	ldr	r0, [pc, #36]	; (8000afc <CGIForm_Handler+0xb8>)
 8000ad8:	f015 fef2 	bl	80168c0 <strcat>
		for (int i = 0; i < iNumParams; i++) {
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	617b      	str	r3, [r7, #20]
 8000ae2:	697a      	ldr	r2, [r7, #20]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	dbbc      	blt.n	8000a64 <CGIForm_Handler+0x20>
			}
		}
	}

	return "/1.shtml"; // Здесь пропишем имя файла из которого берем переменные.
 8000aea:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <CGIForm_Handler+0xc4>)
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3718      	adds	r7, #24
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	080180b0 	.word	0x080180b0
 8000af8:	080180bc 	.word	0x080180bc
 8000afc:	20006530 	.word	0x20006530
 8000b00:	080180c4 	.word	0x080180c4
 8000b04:	080180cc 	.word	0x080180cc
 8000b08:	080180d0 	.word	0x080180d0

08000b0c <httpd_post_begin>:
static void *valid_connection;
int http_post_content_len;

err_t httpd_post_begin(void *connection, const char *uri,
		const char *http_request, uint16_t http_request_len, int content_len,
		char *response_uri, uint16_t response_uri_len, uint8_t *post_auto_wnd) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
 8000b18:	807b      	strh	r3, [r7, #2]

	printf("OK POST 1 \r\n");
 8000b1a:	480f      	ldr	r0, [pc, #60]	; (8000b58 <httpd_post_begin+0x4c>)
 8000b1c:	f015 fe34 	bl	8016788 <puts>
	//LWIP_UNUSED_ARG(connection);
	//LWIP_UNUSED_ARG(http_request);
	//LWIP_UNUSED_ARG(http_request_len);
	//LWIP_UNUSED_ARG(content_len);
	//LWIP_UNUSED_ARG(post_auto_wnd);
	http_post_content_len = content_len;
 8000b20:	4a0e      	ldr	r2, [pc, #56]	; (8000b5c <httpd_post_begin+0x50>)
 8000b22:	69bb      	ldr	r3, [r7, #24]
 8000b24:	6013      	str	r3, [r2, #0]

	//printf("httpd_post_begin: Post Content: %s\n",  http_request);
	//printf("%d \r\n",  http_post_content_len);

	if (current_connection != connection) {
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <httpd_post_begin+0x54>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d00d      	beq.n	8000b4c <httpd_post_begin+0x40>

		current_connection = connection;
 8000b30:	4a0b      	ldr	r2, [pc, #44]	; (8000b60 <httpd_post_begin+0x54>)
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	6013      	str	r3, [r2, #0]
		valid_connection = NULL;
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <httpd_post_begin+0x58>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]

		/* default page is "login failed" */
		snprintf(response_uri, response_uri_len, "/cgi_leds.html");
 8000b3c:	8c3b      	ldrh	r3, [r7, #32]
 8000b3e:	4a0a      	ldr	r2, [pc, #40]	; (8000b68 <httpd_post_begin+0x5c>)
 8000b40:	4619      	mov	r1, r3
 8000b42:	69f8      	ldr	r0, [r7, #28]
 8000b44:	f015 fe68 	bl	8016818 <sniprintf>
		/* e.g. for large uploads to slow flash over a fast connection, you should
		 manually update the rx window. That way, a sender can only send a full
		 tcp window at a time. If this is required, set 'post_aut_wnd' to 0.
		 We do not need to throttle upload speed here, so: */
		return ERR_OK;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	e001      	b.n	8000b50 <httpd_post_begin+0x44>
	}

	return ERR_VAL;
 8000b4c:	f06f 0305 	mvn.w	r3, #5
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3710      	adds	r7, #16
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	080180dc 	.word	0x080180dc
 8000b5c:	200016cc 	.word	0x200016cc
 8000b60:	200000b4 	.word	0x200000b4
 8000b64:	200000b8 	.word	0x200000b8
 8000b68:	080180e8 	.word	0x080180e8

08000b6c <httpd_post_receive_data>:

err_t httpd_post_receive_data(void *connection, struct pbuf *p) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6039      	str	r1, [r7, #0]

	printf("OK POST 2 \r\n");
 8000b76:	4818      	ldr	r0, [pc, #96]	; (8000bd8 <httpd_post_receive_data+0x6c>)
 8000b78:	f015 fe06 	bl	8016788 <puts>
	char *data;

	if (current_connection == connection && p != NULL) {
 8000b7c:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <httpd_post_receive_data+0x70>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	687a      	ldr	r2, [r7, #4]
 8000b82:	429a      	cmp	r2, r3
 8000b84:	d119      	bne.n	8000bba <httpd_post_receive_data+0x4e>
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d016      	beq.n	8000bba <httpd_post_receive_data+0x4e>

		data = p->payload;
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	60fb      	str	r3, [r7, #12]
		printf("DATA %s \r\n", data);
 8000b92:	68f9      	ldr	r1, [r7, #12]
 8000b94:	4812      	ldr	r0, [pc, #72]	; (8000be0 <httpd_post_receive_data+0x74>)
 8000b96:	f015 fd71 	bl	801667c <iprintf>
		strcat(bufervar, p->payload);
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4810      	ldr	r0, [pc, #64]	; (8000be4 <httpd_post_receive_data+0x78>)
 8000ba2:	f015 fe8d 	bl	80168c0 <strcat>
		pbuf_free(p);
 8000ba6:	6838      	ldr	r0, [r7, #0]
 8000ba8:	f00c fc5a 	bl	800d460 <pbuf_free>
		memset(data, '\0', sizeof(*data));
 8000bac:	2201      	movs	r2, #1
 8000bae:	2100      	movs	r1, #0
 8000bb0:	68f8      	ldr	r0, [r7, #12]
 8000bb2:	f015 fd5b 	bl	801666c <memset>
		return ERR_OK;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e00a      	b.n	8000bd0 <httpd_post_receive_data+0x64>
	}
	if (p != NULL) {
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d005      	beq.n	8000bcc <httpd_post_receive_data+0x60>
		printf("END \r\n");
 8000bc0:	4809      	ldr	r0, [pc, #36]	; (8000be8 <httpd_post_receive_data+0x7c>)
 8000bc2:	f015 fde1 	bl	8016788 <puts>
		pbuf_free(p);
 8000bc6:	6838      	ldr	r0, [r7, #0]
 8000bc8:	f00c fc4a 	bl	800d460 <pbuf_free>
	}
	return ERR_VAL;
 8000bcc:	f06f 0305 	mvn.w	r3, #5
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	080180f8 	.word	0x080180f8
 8000bdc:	200000b4 	.word	0x200000b4
 8000be0:	08018104 	.word	0x08018104
 8000be4:	20003458 	.word	0x20003458
 8000be8:	08018110 	.word	0x08018110

08000bec <httpd_post_finished>:

void httpd_post_finished(void *connection, char *response_uri,
		u16_t response_uri_len) {
 8000bec:	b5b0      	push	{r4, r5, r7, lr}
 8000bee:	b090      	sub	sp, #64	; 0x40
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	80fb      	strh	r3, [r7, #6]
 8000bfa:	466b      	mov	r3, sp
 8000bfc:	461d      	mov	r5, r3
	printf("OK POST 3 \r\n");
 8000bfe:	4885      	ldr	r0, [pc, #532]	; (8000e14 <httpd_post_finished+0x228>)
 8000c00:	f015 fdc2 	bl	8016788 <puts>

	char *token;
	char *token1;
	char *token2;
	char *name1;
	int z = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	63bb      	str	r3, [r7, #56]	; 0x38
	int id;
	char urlline[http_post_content_len];
 8000c08:	4b83      	ldr	r3, [pc, #524]	; (8000e18 <httpd_post_finished+0x22c>)
 8000c0a:	681c      	ldr	r4, [r3, #0]
 8000c0c:	1e63      	subs	r3, r4, #1
 8000c0e:	633b      	str	r3, [r7, #48]	; 0x30
 8000c10:	4623      	mov	r3, r4
 8000c12:	4618      	mov	r0, r3
 8000c14:	f04f 0100 	mov.w	r1, #0
 8000c18:	f04f 0200 	mov.w	r2, #0
 8000c1c:	f04f 0300 	mov.w	r3, #0
 8000c20:	00cb      	lsls	r3, r1, #3
 8000c22:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000c26:	00c2      	lsls	r2, r0, #3
 8000c28:	4623      	mov	r3, r4
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f04f 0100 	mov.w	r1, #0
 8000c30:	f04f 0200 	mov.w	r2, #0
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	00cb      	lsls	r3, r1, #3
 8000c3a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000c3e:	00c2      	lsls	r2, r0, #3
 8000c40:	4623      	mov	r3, r4
 8000c42:	3307      	adds	r3, #7
 8000c44:	08db      	lsrs	r3, r3, #3
 8000c46:	00db      	lsls	r3, r3, #3
 8000c48:	ebad 0d03 	sub.w	sp, sp, r3
 8000c4c:	466b      	mov	r3, sp
 8000c4e:	3300      	adds	r3, #0
 8000c50:	62fb      	str	r3, [r7, #44]	; 0x2c

	strncpy(urlline, bufervar, http_post_content_len);
 8000c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c54:	4a70      	ldr	r2, [pc, #448]	; (8000e18 <httpd_post_finished+0x22c>)
 8000c56:	6812      	ldr	r2, [r2, #0]
 8000c58:	4970      	ldr	r1, [pc, #448]	; (8000e1c <httpd_post_finished+0x230>)
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f015 fe66 	bl	801692c <strncpy>

	printf("%s \r\n", urlline);
 8000c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c62:	4619      	mov	r1, r3
 8000c64:	486e      	ldr	r0, [pc, #440]	; (8000e20 <httpd_post_finished+0x234>)
 8000c66:	f015 fd09 	bl	801667c <iprintf>
	printf("COUNT %d \r\n", http_post_content_len);
 8000c6a:	4b6b      	ldr	r3, [pc, #428]	; (8000e18 <httpd_post_finished+0x22c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4619      	mov	r1, r3
 8000c70:	486c      	ldr	r0, [pc, #432]	; (8000e24 <httpd_post_finished+0x238>)
 8000c72:	f015 fd03 	bl	801667c <iprintf>

	char *rest = urlline;
 8000c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c78:	61fb      	str	r3, [r7, #28]

	while ((token = strtok_r(rest, "&", &rest))) {
 8000c7a:	e112      	b.n	8000ea2 <httpd_post_finished+0x2b6>
		//printf("%s\n", token);
		char *rest1 = token;
 8000c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c7e:	61bb      	str	r3, [r7, #24]
		y = 0;
 8000c80:	4b69      	ldr	r3, [pc, #420]	; (8000e28 <httpd_post_finished+0x23c>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
		while ((token1 = strtok_r(rest1, "=", &rest1))) {
 8000c86:	e0fd      	b.n	8000e84 <httpd_post_finished+0x298>
			z = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	63bb      	str	r3, [r7, #56]	; 0x38
			if (y == 0) {
 8000c8c:	4b66      	ldr	r3, [pc, #408]	; (8000e28 <httpd_post_finished+0x23c>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d11c      	bne.n	8000cce <httpd_post_finished+0xe2>
				//printf("NAME %s\n", token1);
				//name = token1; // имя переменной
				// получение id
				char *rest2 = token1;
 8000c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c96:	617b      	str	r3, [r7, #20]
				while ((token2 = strtok_r(rest2, "_", &rest2))) {
 8000c98:	e00e      	b.n	8000cb8 <httpd_post_finished+0xcc>
					if (z == 0) {
 8000c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d101      	bne.n	8000ca4 <httpd_post_finished+0xb8>
						name1 = token2;
 8000ca0:	6a3b      	ldr	r3, [r7, #32]
 8000ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
					}
					if (z == 1) {
 8000ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d103      	bne.n	8000cb2 <httpd_post_finished+0xc6>
						id = atoi(token2);
 8000caa:	6a38      	ldr	r0, [r7, #32]
 8000cac:	f015 fc80 	bl	80165b0 <atoi>
 8000cb0:	6378      	str	r0, [r7, #52]	; 0x34
						//printf("ID %d\n", id);
					}
					z++;
 8000cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	63bb      	str	r3, [r7, #56]	; 0x38
				while ((token2 = strtok_r(rest2, "_", &rest2))) {
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	f107 0214 	add.w	r2, r7, #20
 8000cbe:	495b      	ldr	r1, [pc, #364]	; (8000e2c <httpd_post_finished+0x240>)
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f015 fe85 	bl	80169d0 <strtok_r>
 8000cc6:	6238      	str	r0, [r7, #32]
 8000cc8:	6a3b      	ldr	r3, [r7, #32]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d1e5      	bne.n	8000c9a <httpd_post_finished+0xae>
				}
			}
			if (y == 1) {
 8000cce:	4b56      	ldr	r3, [pc, #344]	; (8000e28 <httpd_post_finished+0x23c>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	f040 80d1 	bne.w	8000e7a <httpd_post_finished+0x28e>
				// значение переменной
				//printf("VAL %s\n", token1);
				// записывае в структуру
				/************************************************/
				if (strcmp(name1, "pulluptype") == 0) {
 8000cd8:	4955      	ldr	r1, [pc, #340]	; (8000e30 <httpd_post_finished+0x244>)
 8000cda:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000cdc:	f7ff fa78 	bl	80001d0 <strcmp>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d10a      	bne.n	8000cfc <httpd_post_finished+0x110>
					strcpy(T[id].pulluptype, token1);
 8000ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ce8:	2258      	movs	r2, #88	; 0x58
 8000cea:	fb02 f303 	mul.w	r3, r2, r3
 8000cee:	4a51      	ldr	r2, [pc, #324]	; (8000e34 <httpd_post_finished+0x248>)
 8000cf0:	4413      	add	r3, r2
 8000cf2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f015 fdff 	bl	80168f8 <strcpy>
 8000cfa:	e0be      	b.n	8000e7a <httpd_post_finished+0x28e>
				} else if (strcmp(name1, "bounceinterval") == 0) {
 8000cfc:	494e      	ldr	r1, [pc, #312]	; (8000e38 <httpd_post_finished+0x24c>)
 8000cfe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000d00:	f7ff fa66 	bl	80001d0 <strcmp>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d10c      	bne.n	8000d24 <httpd_post_finished+0x138>
					T[id].bounceinterval = atoi(token1);
 8000d0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000d0c:	f015 fc50 	bl	80165b0 <atoi>
 8000d10:	4602      	mov	r2, r0
 8000d12:	4948      	ldr	r1, [pc, #288]	; (8000e34 <httpd_post_finished+0x248>)
 8000d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d16:	2058      	movs	r0, #88	; 0x58
 8000d18:	fb00 f303 	mul.w	r3, r0, r3
 8000d1c:	440b      	add	r3, r1
 8000d1e:	3328      	adds	r3, #40	; 0x28
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	e0aa      	b.n	8000e7a <httpd_post_finished+0x28e>
				} else if (strcmp(name1, "holdinterval") == 0) {
 8000d24:	4945      	ldr	r1, [pc, #276]	; (8000e3c <httpd_post_finished+0x250>)
 8000d26:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000d28:	f7ff fa52 	bl	80001d0 <strcmp>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d10c      	bne.n	8000d4c <httpd_post_finished+0x160>
					T[id].holdinterval = atoi(token1);
 8000d32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000d34:	f015 fc3c 	bl	80165b0 <atoi>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	493e      	ldr	r1, [pc, #248]	; (8000e34 <httpd_post_finished+0x248>)
 8000d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d3e:	2058      	movs	r0, #88	; 0x58
 8000d40:	fb00 f303 	mul.w	r3, r0, r3
 8000d44:	440b      	add	r3, r1
 8000d46:	332c      	adds	r3, #44	; 0x2c
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	e096      	b.n	8000e7a <httpd_post_finished+0x28e>
				} else if (strcmp(name1, "repeat") == 0) {
 8000d4c:	493c      	ldr	r1, [pc, #240]	; (8000e40 <httpd_post_finished+0x254>)
 8000d4e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000d50:	f7ff fa3e 	bl	80001d0 <strcmp>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d10c      	bne.n	8000d74 <httpd_post_finished+0x188>
					T[id].repeat = atoi(token1);
 8000d5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000d5c:	f015 fc28 	bl	80165b0 <atoi>
 8000d60:	4602      	mov	r2, r0
 8000d62:	4934      	ldr	r1, [pc, #208]	; (8000e34 <httpd_post_finished+0x248>)
 8000d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d66:	2058      	movs	r0, #88	; 0x58
 8000d68:	fb00 f303 	mul.w	r3, r0, r3
 8000d6c:	440b      	add	r3, r1
 8000d6e:	3330      	adds	r3, #48	; 0x30
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	e082      	b.n	8000e7a <httpd_post_finished+0x28e>
				} else if (strcmp(name1, "repeatinterval") == 0) {
 8000d74:	4933      	ldr	r1, [pc, #204]	; (8000e44 <httpd_post_finished+0x258>)
 8000d76:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000d78:	f7ff fa2a 	bl	80001d0 <strcmp>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d10c      	bne.n	8000d9c <httpd_post_finished+0x1b0>
					T[id].repeatinterval = atoi(token1);
 8000d82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000d84:	f015 fc14 	bl	80165b0 <atoi>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	492a      	ldr	r1, [pc, #168]	; (8000e34 <httpd_post_finished+0x248>)
 8000d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d8e:	2058      	movs	r0, #88	; 0x58
 8000d90:	fb00 f303 	mul.w	r3, r0, r3
 8000d94:	440b      	add	r3, r1
 8000d96:	3334      	adds	r3, #52	; 0x34
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	e06e      	b.n	8000e7a <httpd_post_finished+0x28e>
				} else if (strcmp(name1, "doubleclickinterval") == 0) {
 8000d9c:	492a      	ldr	r1, [pc, #168]	; (8000e48 <httpd_post_finished+0x25c>)
 8000d9e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000da0:	f7ff fa16 	bl	80001d0 <strcmp>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d10c      	bne.n	8000dc4 <httpd_post_finished+0x1d8>
					T[id].doubleclickinterval = atoi(token1);
 8000daa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000dac:	f015 fc00 	bl	80165b0 <atoi>
 8000db0:	4602      	mov	r2, r0
 8000db2:	4920      	ldr	r1, [pc, #128]	; (8000e34 <httpd_post_finished+0x248>)
 8000db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000db6:	2058      	movs	r0, #88	; 0x58
 8000db8:	fb00 f303 	mul.w	r3, r0, r3
 8000dbc:	440b      	add	r3, r1
 8000dbe:	3338      	adds	r3, #56	; 0x38
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	e05a      	b.n	8000e7a <httpd_post_finished+0x28e>
				} else if (strcmp(name1, "preventclick") == 0) {
 8000dc4:	4921      	ldr	r1, [pc, #132]	; (8000e4c <httpd_post_finished+0x260>)
 8000dc6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000dc8:	f7ff fa02 	bl	80001d0 <strcmp>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d10c      	bne.n	8000dec <httpd_post_finished+0x200>
					T[id].preventclick = atoi(token1);
 8000dd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000dd4:	f015 fbec 	bl	80165b0 <atoi>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	4916      	ldr	r1, [pc, #88]	; (8000e34 <httpd_post_finished+0x248>)
 8000ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dde:	2058      	movs	r0, #88	; 0x58
 8000de0:	fb00 f303 	mul.w	r3, r0, r3
 8000de4:	440b      	add	r3, r1
 8000de6:	333c      	adds	r3, #60	; 0x3c
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	e046      	b.n	8000e7a <httpd_post_finished+0x28e>
				} else if (strcmp(name1, "infofield") == 0) {
 8000dec:	4918      	ldr	r1, [pc, #96]	; (8000e50 <httpd_post_finished+0x264>)
 8000dee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000df0:	f7ff f9ee 	bl	80001d0 <strcmp>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d12c      	bne.n	8000e54 <httpd_post_finished+0x268>
					strcpy(T[id].infofield, token1);
 8000dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dfc:	2258      	movs	r2, #88	; 0x58
 8000dfe:	fb02 f303 	mul.w	r3, r2, r3
 8000e02:	3340      	adds	r3, #64	; 0x40
 8000e04:	4a0b      	ldr	r2, [pc, #44]	; (8000e34 <httpd_post_finished+0x248>)
 8000e06:	4413      	add	r3, r2
 8000e08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f015 fd74 	bl	80168f8 <strcpy>
 8000e10:	e033      	b.n	8000e7a <httpd_post_finished+0x28e>
 8000e12:	bf00      	nop
 8000e14:	08018118 	.word	0x08018118
 8000e18:	200016cc 	.word	0x200016cc
 8000e1c:	20003458 	.word	0x20003458
 8000e20:	08018124 	.word	0x08018124
 8000e24:	0801812c 	.word	0x0801812c
 8000e28:	20005b68 	.word	0x20005b68
 8000e2c:	08018138 	.word	0x08018138
 8000e30:	0801813c 	.word	0x0801813c
 8000e34:	20001c48 	.word	0x20001c48
 8000e38:	08018148 	.word	0x08018148
 8000e3c:	08018158 	.word	0x08018158
 8000e40:	08018168 	.word	0x08018168
 8000e44:	08018170 	.word	0x08018170
 8000e48:	08018180 	.word	0x08018180
 8000e4c:	08018194 	.word	0x08018194
 8000e50:	080181a4 	.word	0x080181a4
				} else if (strcmp(name1, "onoff") == 0) {
 8000e54:	4933      	ldr	r1, [pc, #204]	; (8000f24 <httpd_post_finished+0x338>)
 8000e56:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000e58:	f7ff f9ba 	bl	80001d0 <strcmp>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d10b      	bne.n	8000e7a <httpd_post_finished+0x28e>
					T[id].onoff = atoi(token1);
 8000e62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000e64:	f015 fba4 	bl	80165b0 <atoi>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	492f      	ldr	r1, [pc, #188]	; (8000f28 <httpd_post_finished+0x33c>)
 8000e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e6e:	2058      	movs	r0, #88	; 0x58
 8000e70:	fb00 f303 	mul.w	r3, r0, r3
 8000e74:	440b      	add	r3, r1
 8000e76:	3354      	adds	r3, #84	; 0x54
 8000e78:	601a      	str	r2, [r3, #0]
				}
				/************************************************/
			}
			y++;
 8000e7a:	4b2c      	ldr	r3, [pc, #176]	; (8000f2c <httpd_post_finished+0x340>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	4a2a      	ldr	r2, [pc, #168]	; (8000f2c <httpd_post_finished+0x340>)
 8000e82:	6013      	str	r3, [r2, #0]
		while ((token1 = strtok_r(rest1, "=", &rest1))) {
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	f107 0218 	add.w	r2, r7, #24
 8000e8a:	4929      	ldr	r1, [pc, #164]	; (8000f30 <httpd_post_finished+0x344>)
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f015 fd9f 	bl	80169d0 <strtok_r>
 8000e92:	6278      	str	r0, [r7, #36]	; 0x24
 8000e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	f47f aef6 	bne.w	8000c88 <httpd_post_finished+0x9c>
		}
		z++;
 8000e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	63bb      	str	r3, [r7, #56]	; 0x38
	while ((token = strtok_r(rest, "&", &rest))) {
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	f107 021c 	add.w	r2, r7, #28
 8000ea8:	4922      	ldr	r1, [pc, #136]	; (8000f34 <httpd_post_finished+0x348>)
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f015 fd90 	bl	80169d0 <strtok_r>
 8000eb0:	62b8      	str	r0, [r7, #40]	; 0x28
 8000eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	f47f aee1 	bne.w	8000c7c <httpd_post_finished+0x90>
	}
	memset(urlline, '\0', sizeof(urlline));
 8000eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ebc:	4622      	mov	r2, r4
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f015 fbd3 	bl	801666c <memset>
	memset(bufervar, '\0', sizeof(bufervar));
 8000ec6:	f242 7210 	movw	r2, #10000	; 0x2710
 8000eca:	2100      	movs	r1, #0
 8000ecc:	481a      	ldr	r0, [pc, #104]	; (8000f38 <httpd_post_finished+0x34c>)
 8000ece:	f015 fbcd 	bl	801666c <memset>
	memset(json, '\0', sizeof(json));
 8000ed2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4818      	ldr	r0, [pc, #96]	; (8000f3c <httpd_post_finished+0x350>)
 8000eda:	f015 fbc7 	bl	801666c <memset>
	//printf("httpd_post_finished! \r\n");
	/* default page is "login failed" */
	snprintf(response_uri, response_uri_len, "/tab.shtml");
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	4a17      	ldr	r2, [pc, #92]	; (8000f40 <httpd_post_finished+0x354>)
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	68b8      	ldr	r0, [r7, #8]
 8000ee6:	f015 fc97 	bl	8016818 <sniprintf>
	if (current_connection == connection) {
 8000eea:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <httpd_post_finished+0x358>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d110      	bne.n	8000f16 <httpd_post_finished+0x32a>
		if (valid_connection == connection) {
 8000ef4:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <httpd_post_finished+0x35c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	68fa      	ldr	r2, [r7, #12]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d105      	bne.n	8000f0a <httpd_post_finished+0x31e>
			/* login succeeded */
			snprintf(response_uri, response_uri_len, "/tab.shtml");
 8000efe:	88fb      	ldrh	r3, [r7, #6]
 8000f00:	4a0f      	ldr	r2, [pc, #60]	; (8000f40 <httpd_post_finished+0x354>)
 8000f02:	4619      	mov	r1, r3
 8000f04:	68b8      	ldr	r0, [r7, #8]
 8000f06:	f015 fc87 	bl	8016818 <sniprintf>
		}
		current_connection = NULL;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <httpd_post_finished+0x358>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
		valid_connection = NULL;
 8000f10:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <httpd_post_finished+0x35c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
	}
	connection = NULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	46ad      	mov	sp, r5
}
 8000f1c:	bf00      	nop
 8000f1e:	3740      	adds	r7, #64	; 0x40
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bdb0      	pop	{r4, r5, r7, pc}
 8000f24:	080181b0 	.word	0x080181b0
 8000f28:	20001c48 	.word	0x20001c48
 8000f2c:	20005b68 	.word	0x20005b68
 8000f30:	080181b8 	.word	0x080181b8
 8000f34:	080181bc 	.word	0x080181bc
 8000f38:	20003458 	.word	0x20003458
 8000f3c:	20005b6c 	.word	0x20005b6c
 8000f40:	080181c0 	.word	0x080181c0
 8000f44:	200000b4 	.word	0x200000b4
 8000f48:	200000b8 	.word	0x200000b8

08000f4c <http_server_init>:
//////////////////// POST  END ////////////////////////

void http_server_init(void) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
	httpd_init();
 8000f50:	f00a fe62 	bl	800bc18 <httpd_init>

	http_set_ssi_handler(ssi_handler, (char const**) TAGS, 3);
 8000f54:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <http_server_init+0x30>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2203      	movs	r2, #3
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4808      	ldr	r0, [pc, #32]	; (8000f80 <http_server_init+0x34>)
 8000f5e:	f00a fe7b 	bl	800bc58 <http_set_ssi_handler>
	// 4. For LED Перед созданиме CGI_handle нам нужно назначить
	CGI_TAB[0] = FORM_CGI; // CGI структуру
 8000f62:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <http_server_init+0x38>)
 8000f64:	4a08      	ldr	r2, [pc, #32]	; (8000f88 <http_server_init+0x3c>)
 8000f66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f6a:	e883 0003 	stmia.w	r3, {r0, r1}

	//http_set_cgi_handlers (&FORM_CGI, 1); // Это пример когда у нас всего один "Handler" пример из видео.
	http_set_cgi_handlers(CGI_TAB, 1); // 5. И теперь мы передадим структуру массива в CGI_handle!
 8000f6e:	2101      	movs	r1, #1
 8000f70:	4804      	ldr	r0, [pc, #16]	; (8000f84 <http_server_init+0x38>)
 8000f72:	f00a feb3 	bl	800bcdc <http_set_cgi_handlers>
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000010 	.word	0x20000010
 8000f80:	08000599 	.word	0x08000599
 8000f84:	20006550 	.word	0x20006550
 8000f88:	0801b7a0 	.word	0x0801b7a0

08000f8c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f94:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f98:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d013      	beq.n	8000fcc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000fa4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fa8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000fac:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d00b      	beq.n	8000fcc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000fb4:	e000      	b.n	8000fb8 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000fb6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000fb8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d0f9      	beq.n	8000fb6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000fc2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	b2d2      	uxtb	r2, r2
 8000fca:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000fcc:	687b      	ldr	r3, [r7, #4]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
	...

08000fdc <_write>:
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_SDIO_SD_Init(void);
static void MX_USART6_UART_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart6, (uint8_t*) ptr, len, 50);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	2332      	movs	r3, #50	; 0x32
 8000fee:	68b9      	ldr	r1, [r7, #8]
 8000ff0:	480c      	ldr	r0, [pc, #48]	; (8001024 <_write+0x48>)
 8000ff2:	f004 fd19 	bl	8005a28 <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
 8000ffa:	e009      	b.n	8001010 <_write+0x34>
		ITM_SendChar(*ptr++);
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	1c5a      	adds	r2, r3, #1
 8001000:	60ba      	str	r2, [r7, #8]
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ffc1 	bl	8000f8c <ITM_SendChar>
	for (i = 0; i < len; i++) {
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	3301      	adds	r3, #1
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	697a      	ldr	r2, [r7, #20]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	429a      	cmp	r2, r3
 8001016:	dbf1      	blt.n	8000ffc <_write+0x20>
	}
	return len;
 8001018:	687b      	ldr	r3, [r7, #4]
}
 800101a:	4618      	mov	r0, r3
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	200066d8 	.word	0x200066d8

08001028 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800102c:	f000 fcea 	bl	8001a04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001030:	f000 f81a 	bl	8001068 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001034:	f000 f8f4 	bl	8001220 <MX_GPIO_Init>
  MX_DMA_Init();
 8001038:	f000 f8ca 	bl	80011d0 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 800103c:	f000 f87e 	bl	800113c <MX_SDIO_SD_Init>
  MX_USART6_UART_Init();
 8001040:	f000 f89c 	bl	800117c <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8001044:	f005 fd2c 	bl	8006aa0 <MX_FATFS_Init>
  MX_LWIP_Init();
 8001048:	f005 ff70 	bl	8006f2c <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  http_server_init();
 800104c:	f7ff ff7e 	bl	8000f4c <http_server_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  zerg_mount();
 8001050:	f000 fbea 	bl	8001828 <zerg_mount>
  //zerg_format();
  //zerg_creat_folder(folder_name);
  //zerg_open();
  //zerg_write();
  //zerg_read();
  zerg_get_data_from_sd();
 8001054:	f000 fc04 	bl	8001860 <zerg_get_data_from_sd>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      ethernetif_input(&gnetif);
 8001058:	4802      	ldr	r0, [pc, #8]	; (8001064 <main+0x3c>)
 800105a:	f006 fb3f 	bl	80076dc <ethernetif_input>
      sys_check_timeouts();
 800105e:	f012 fdeb 	bl	8013c38 <sys_check_timeouts>
      ethernetif_input(&gnetif);
 8001062:	e7f9      	b.n	8001058 <main+0x30>
 8001064:	200065c0 	.word	0x200065c0

08001068 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b094      	sub	sp, #80	; 0x50
 800106c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800106e:	f107 0320 	add.w	r3, r7, #32
 8001072:	2230      	movs	r2, #48	; 0x30
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f015 faf8 	bl	801666c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800108c:	2300      	movs	r3, #0
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	4b28      	ldr	r3, [pc, #160]	; (8001134 <SystemClock_Config+0xcc>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	4a27      	ldr	r2, [pc, #156]	; (8001134 <SystemClock_Config+0xcc>)
 8001096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800109a:	6413      	str	r3, [r2, #64]	; 0x40
 800109c:	4b25      	ldr	r3, [pc, #148]	; (8001134 <SystemClock_Config+0xcc>)
 800109e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a8:	2300      	movs	r3, #0
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	4b22      	ldr	r3, [pc, #136]	; (8001138 <SystemClock_Config+0xd0>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a21      	ldr	r2, [pc, #132]	; (8001138 <SystemClock_Config+0xd0>)
 80010b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	4b1f      	ldr	r3, [pc, #124]	; (8001138 <SystemClock_Config+0xd0>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010c4:	2301      	movs	r3, #1
 80010c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ce:	2302      	movs	r3, #2
 80010d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010d8:	2304      	movs	r3, #4
 80010da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010dc:	23a8      	movs	r3, #168	; 0xa8
 80010de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010e0:	2302      	movs	r3, #2
 80010e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010e4:	2307      	movs	r3, #7
 80010e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e8:	f107 0320 	add.w	r3, r7, #32
 80010ec:	4618      	mov	r0, r3
 80010ee:	f002 fcab 	bl	8003a48 <HAL_RCC_OscConfig>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010f8:	f000 f8fe 	bl	80012f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fc:	230f      	movs	r3, #15
 80010fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001100:	2302      	movs	r3, #2
 8001102:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001108:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800110c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800110e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001112:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001114:	f107 030c 	add.w	r3, r7, #12
 8001118:	2105      	movs	r1, #5
 800111a:	4618      	mov	r0, r3
 800111c:	f002 ff0c 	bl	8003f38 <HAL_RCC_ClockConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001126:	f000 f8e7 	bl	80012f8 <Error_Handler>
  }
}
 800112a:	bf00      	nop
 800112c:	3750      	adds	r7, #80	; 0x50
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40023800 	.word	0x40023800
 8001138:	40007000 	.word	0x40007000

0800113c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <MX_SDIO_SD_Init+0x38>)
 8001142:	4a0d      	ldr	r2, [pc, #52]	; (8001178 <MX_SDIO_SD_Init+0x3c>)
 8001144:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001146:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <MX_SDIO_SD_Init+0x38>)
 8001148:	2200      	movs	r2, #0
 800114a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800114c:	4b09      	ldr	r3, [pc, #36]	; (8001174 <MX_SDIO_SD_Init+0x38>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001152:	4b08      	ldr	r3, [pc, #32]	; (8001174 <MX_SDIO_SD_Init+0x38>)
 8001154:	2200      	movs	r2, #0
 8001156:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <MX_SDIO_SD_Init+0x38>)
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800115e:	4b05      	ldr	r3, [pc, #20]	; (8001174 <MX_SDIO_SD_Init+0x38>)
 8001160:	2200      	movs	r2, #0
 8001162:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001164:	4b03      	ldr	r3, [pc, #12]	; (8001174 <MX_SDIO_SD_Init+0x38>)
 8001166:	2200      	movs	r2, #0
 8001168:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	20006654 	.word	0x20006654
 8001178:	40012c00 	.word	0x40012c00

0800117c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001180:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <MX_USART6_UART_Init+0x4c>)
 8001182:	4a12      	ldr	r2, [pc, #72]	; (80011cc <MX_USART6_UART_Init+0x50>)
 8001184:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001186:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <MX_USART6_UART_Init+0x4c>)
 8001188:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800118c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <MX_USART6_UART_Init+0x4c>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <MX_USART6_UART_Init+0x4c>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800119a:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <MX_USART6_UART_Init+0x4c>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80011a0:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <MX_USART6_UART_Init+0x4c>)
 80011a2:	220c      	movs	r2, #12
 80011a4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011a6:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <MX_USART6_UART_Init+0x4c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <MX_USART6_UART_Init+0x4c>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80011b2:	4805      	ldr	r0, [pc, #20]	; (80011c8 <MX_USART6_UART_Init+0x4c>)
 80011b4:	f004 fbeb 	bl	800598e <HAL_UART_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80011be:	f000 f89b 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200066d8 	.word	0x200066d8
 80011cc:	40011400 	.word	0x40011400

080011d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	4b10      	ldr	r3, [pc, #64]	; (800121c <MX_DMA_Init+0x4c>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a0f      	ldr	r2, [pc, #60]	; (800121c <MX_DMA_Init+0x4c>)
 80011e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b0d      	ldr	r3, [pc, #52]	; (800121c <MX_DMA_Init+0x4c>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2100      	movs	r1, #0
 80011f6:	203b      	movs	r0, #59	; 0x3b
 80011f8:	f000 fd75 	bl	8001ce6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80011fc:	203b      	movs	r0, #59	; 0x3b
 80011fe:	f000 fd8e 	bl	8001d1e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	2045      	movs	r0, #69	; 0x45
 8001208:	f000 fd6d 	bl	8001ce6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800120c:	2045      	movs	r0, #69	; 0x45
 800120e:	f000 fd86 	bl	8001d1e <HAL_NVIC_EnableIRQ>

}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40023800 	.word	0x40023800

08001220 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	; 0x28
 8001224:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
 8001234:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	613b      	str	r3, [r7, #16]
 800123a:	4b2d      	ldr	r3, [pc, #180]	; (80012f0 <MX_GPIO_Init+0xd0>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a2c      	ldr	r2, [pc, #176]	; (80012f0 <MX_GPIO_Init+0xd0>)
 8001240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b2a      	ldr	r3, [pc, #168]	; (80012f0 <MX_GPIO_Init+0xd0>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800124e:	613b      	str	r3, [r7, #16]
 8001250:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	4b26      	ldr	r3, [pc, #152]	; (80012f0 <MX_GPIO_Init+0xd0>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a25      	ldr	r2, [pc, #148]	; (80012f0 <MX_GPIO_Init+0xd0>)
 800125c:	f043 0304 	orr.w	r3, r3, #4
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b23      	ldr	r3, [pc, #140]	; (80012f0 <MX_GPIO_Init+0xd0>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	4b1f      	ldr	r3, [pc, #124]	; (80012f0 <MX_GPIO_Init+0xd0>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a1e      	ldr	r2, [pc, #120]	; (80012f0 <MX_GPIO_Init+0xd0>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b1c      	ldr	r3, [pc, #112]	; (80012f0 <MX_GPIO_Init+0xd0>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <MX_GPIO_Init+0xd0>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a17      	ldr	r2, [pc, #92]	; (80012f0 <MX_GPIO_Init+0xd0>)
 8001294:	f043 0302 	orr.w	r3, r3, #2
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <MX_GPIO_Init+0xd0>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	603b      	str	r3, [r7, #0]
 80012aa:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <MX_GPIO_Init+0xd0>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a10      	ldr	r2, [pc, #64]	; (80012f0 <MX_GPIO_Init+0xd0>)
 80012b0:	f043 0308 	orr.w	r3, r3, #8
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <MX_GPIO_Init+0xd0>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0308 	and.w	r3, r3, #8
 80012be:	603b      	str	r3, [r7, #0]
 80012c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2101      	movs	r1, #1
 80012c6:	480b      	ldr	r0, [pc, #44]	; (80012f4 <MX_GPIO_Init+0xd4>)
 80012c8:	f002 fba4 	bl	8003a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012cc:	2301      	movs	r3, #1
 80012ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d0:	2301      	movs	r3, #1
 80012d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	4619      	mov	r1, r3
 80012e2:	4804      	ldr	r0, [pc, #16]	; (80012f4 <MX_GPIO_Init+0xd4>)
 80012e4:	f002 f9fa 	bl	80036dc <HAL_GPIO_Init>

}
 80012e8:	bf00      	nop
 80012ea:	3728      	adds	r7, #40	; 0x28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40020000 	.word	0x40020000

080012f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012fc:	b672      	cpsid	i
}
 80012fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001300:	e7fe      	b.n	8001300 <Error_Handler+0x8>
	...

08001304 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	607b      	str	r3, [r7, #4]
 800130e:	4b10      	ldr	r3, [pc, #64]	; (8001350 <HAL_MspInit+0x4c>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	4a0f      	ldr	r2, [pc, #60]	; (8001350 <HAL_MspInit+0x4c>)
 8001314:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001318:	6453      	str	r3, [r2, #68]	; 0x44
 800131a:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <HAL_MspInit+0x4c>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	603b      	str	r3, [r7, #0]
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <HAL_MspInit+0x4c>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	4a08      	ldr	r2, [pc, #32]	; (8001350 <HAL_MspInit+0x4c>)
 8001330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001334:	6413      	str	r3, [r2, #64]	; 0x40
 8001336:	4b06      	ldr	r3, [pc, #24]	; (8001350 <HAL_MspInit+0x4c>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133e:	603b      	str	r3, [r7, #0]
 8001340:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	40023800 	.word	0x40023800

08001354 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08a      	sub	sp, #40	; 0x28
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a70      	ldr	r2, [pc, #448]	; (8001534 <HAL_SD_MspInit+0x1e0>)
 8001372:	4293      	cmp	r3, r2
 8001374:	f040 80da 	bne.w	800152c <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001378:	2300      	movs	r3, #0
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	4b6e      	ldr	r3, [pc, #440]	; (8001538 <HAL_SD_MspInit+0x1e4>)
 800137e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001380:	4a6d      	ldr	r2, [pc, #436]	; (8001538 <HAL_SD_MspInit+0x1e4>)
 8001382:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001386:	6453      	str	r3, [r2, #68]	; 0x44
 8001388:	4b6b      	ldr	r3, [pc, #428]	; (8001538 <HAL_SD_MspInit+0x1e4>)
 800138a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	4b67      	ldr	r3, [pc, #412]	; (8001538 <HAL_SD_MspInit+0x1e4>)
 800139a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139c:	4a66      	ldr	r2, [pc, #408]	; (8001538 <HAL_SD_MspInit+0x1e4>)
 800139e:	f043 0304 	orr.w	r3, r3, #4
 80013a2:	6313      	str	r3, [r2, #48]	; 0x30
 80013a4:	4b64      	ldr	r3, [pc, #400]	; (8001538 <HAL_SD_MspInit+0x1e4>)
 80013a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b0:	2300      	movs	r3, #0
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	4b60      	ldr	r3, [pc, #384]	; (8001538 <HAL_SD_MspInit+0x1e4>)
 80013b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b8:	4a5f      	ldr	r2, [pc, #380]	; (8001538 <HAL_SD_MspInit+0x1e4>)
 80013ba:	f043 0308 	orr.w	r3, r3, #8
 80013be:	6313      	str	r3, [r2, #48]	; 0x30
 80013c0:	4b5d      	ldr	r3, [pc, #372]	; (8001538 <HAL_SD_MspInit+0x1e4>)
 80013c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c4:	f003 0308 	and.w	r3, r3, #8
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80013cc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80013d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d2:	2302      	movs	r3, #2
 80013d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d6:	2301      	movs	r3, #1
 80013d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013da:	2303      	movs	r3, #3
 80013dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80013de:	230c      	movs	r3, #12
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	4619      	mov	r1, r3
 80013e8:	4854      	ldr	r0, [pc, #336]	; (800153c <HAL_SD_MspInit+0x1e8>)
 80013ea:	f002 f977 	bl	80036dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f4:	2302      	movs	r3, #2
 80013f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fc:	2303      	movs	r3, #3
 80013fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001400:	230c      	movs	r3, #12
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	4619      	mov	r1, r3
 800140a:	484c      	ldr	r0, [pc, #304]	; (800153c <HAL_SD_MspInit+0x1e8>)
 800140c:	f002 f966 	bl	80036dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001410:	2304      	movs	r3, #4
 8001412:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001414:	2302      	movs	r3, #2
 8001416:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001418:	2301      	movs	r3, #1
 800141a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141c:	2303      	movs	r3, #3
 800141e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001420:	230c      	movs	r3, #12
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	4619      	mov	r1, r3
 800142a:	4845      	ldr	r0, [pc, #276]	; (8001540 <HAL_SD_MspInit+0x1ec>)
 800142c:	f002 f956 	bl	80036dc <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001430:	4b44      	ldr	r3, [pc, #272]	; (8001544 <HAL_SD_MspInit+0x1f0>)
 8001432:	4a45      	ldr	r2, [pc, #276]	; (8001548 <HAL_SD_MspInit+0x1f4>)
 8001434:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001436:	4b43      	ldr	r3, [pc, #268]	; (8001544 <HAL_SD_MspInit+0x1f0>)
 8001438:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800143c:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800143e:	4b41      	ldr	r3, [pc, #260]	; (8001544 <HAL_SD_MspInit+0x1f0>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001444:	4b3f      	ldr	r3, [pc, #252]	; (8001544 <HAL_SD_MspInit+0x1f0>)
 8001446:	2200      	movs	r2, #0
 8001448:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800144a:	4b3e      	ldr	r3, [pc, #248]	; (8001544 <HAL_SD_MspInit+0x1f0>)
 800144c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001450:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001452:	4b3c      	ldr	r3, [pc, #240]	; (8001544 <HAL_SD_MspInit+0x1f0>)
 8001454:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001458:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800145a:	4b3a      	ldr	r3, [pc, #232]	; (8001544 <HAL_SD_MspInit+0x1f0>)
 800145c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001460:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001462:	4b38      	ldr	r3, [pc, #224]	; (8001544 <HAL_SD_MspInit+0x1f0>)
 8001464:	2220      	movs	r2, #32
 8001466:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001468:	4b36      	ldr	r3, [pc, #216]	; (8001544 <HAL_SD_MspInit+0x1f0>)
 800146a:	2200      	movs	r2, #0
 800146c:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800146e:	4b35      	ldr	r3, [pc, #212]	; (8001544 <HAL_SD_MspInit+0x1f0>)
 8001470:	2204      	movs	r2, #4
 8001472:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001474:	4b33      	ldr	r3, [pc, #204]	; (8001544 <HAL_SD_MspInit+0x1f0>)
 8001476:	2203      	movs	r2, #3
 8001478:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800147a:	4b32      	ldr	r3, [pc, #200]	; (8001544 <HAL_SD_MspInit+0x1f0>)
 800147c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001480:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001482:	4b30      	ldr	r3, [pc, #192]	; (8001544 <HAL_SD_MspInit+0x1f0>)
 8001484:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001488:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800148a:	482e      	ldr	r0, [pc, #184]	; (8001544 <HAL_SD_MspInit+0x1f0>)
 800148c:	f000 fc62 	bl	8001d54 <HAL_DMA_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8001496:	f7ff ff2f 	bl	80012f8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a29      	ldr	r2, [pc, #164]	; (8001544 <HAL_SD_MspInit+0x1f0>)
 800149e:	641a      	str	r2, [r3, #64]	; 0x40
 80014a0:	4a28      	ldr	r2, [pc, #160]	; (8001544 <HAL_SD_MspInit+0x1f0>)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80014a6:	4b29      	ldr	r3, [pc, #164]	; (800154c <HAL_SD_MspInit+0x1f8>)
 80014a8:	4a29      	ldr	r2, [pc, #164]	; (8001550 <HAL_SD_MspInit+0x1fc>)
 80014aa:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80014ac:	4b27      	ldr	r3, [pc, #156]	; (800154c <HAL_SD_MspInit+0x1f8>)
 80014ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014b2:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014b4:	4b25      	ldr	r3, [pc, #148]	; (800154c <HAL_SD_MspInit+0x1f8>)
 80014b6:	2240      	movs	r2, #64	; 0x40
 80014b8:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ba:	4b24      	ldr	r3, [pc, #144]	; (800154c <HAL_SD_MspInit+0x1f8>)
 80014bc:	2200      	movs	r2, #0
 80014be:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014c0:	4b22      	ldr	r3, [pc, #136]	; (800154c <HAL_SD_MspInit+0x1f8>)
 80014c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014c6:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014c8:	4b20      	ldr	r3, [pc, #128]	; (800154c <HAL_SD_MspInit+0x1f8>)
 80014ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014ce:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014d0:	4b1e      	ldr	r3, [pc, #120]	; (800154c <HAL_SD_MspInit+0x1f8>)
 80014d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014d6:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80014d8:	4b1c      	ldr	r3, [pc, #112]	; (800154c <HAL_SD_MspInit+0x1f8>)
 80014da:	2220      	movs	r2, #32
 80014dc:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014de:	4b1b      	ldr	r3, [pc, #108]	; (800154c <HAL_SD_MspInit+0x1f8>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80014e4:	4b19      	ldr	r3, [pc, #100]	; (800154c <HAL_SD_MspInit+0x1f8>)
 80014e6:	2204      	movs	r2, #4
 80014e8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80014ea:	4b18      	ldr	r3, [pc, #96]	; (800154c <HAL_SD_MspInit+0x1f8>)
 80014ec:	2203      	movs	r2, #3
 80014ee:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80014f0:	4b16      	ldr	r3, [pc, #88]	; (800154c <HAL_SD_MspInit+0x1f8>)
 80014f2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80014f6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80014f8:	4b14      	ldr	r3, [pc, #80]	; (800154c <HAL_SD_MspInit+0x1f8>)
 80014fa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80014fe:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001500:	4812      	ldr	r0, [pc, #72]	; (800154c <HAL_SD_MspInit+0x1f8>)
 8001502:	f000 fc27 	bl	8001d54 <HAL_DMA_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 800150c:	f7ff fef4 	bl	80012f8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4a0e      	ldr	r2, [pc, #56]	; (800154c <HAL_SD_MspInit+0x1f8>)
 8001514:	63da      	str	r2, [r3, #60]	; 0x3c
 8001516:	4a0d      	ldr	r2, [pc, #52]	; (800154c <HAL_SD_MspInit+0x1f8>)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800151c:	2200      	movs	r2, #0
 800151e:	2100      	movs	r1, #0
 8001520:	2031      	movs	r0, #49	; 0x31
 8001522:	f000 fbe0 	bl	8001ce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001526:	2031      	movs	r0, #49	; 0x31
 8001528:	f000 fbf9 	bl	8001d1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800152c:	bf00      	nop
 800152e:	3728      	adds	r7, #40	; 0x28
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40012c00 	.word	0x40012c00
 8001538:	40023800 	.word	0x40023800
 800153c:	40020800 	.word	0x40020800
 8001540:	40020c00 	.word	0x40020c00
 8001544:	20006560 	.word	0x20006560
 8001548:	40026458 	.word	0x40026458
 800154c:	200065f4 	.word	0x200065f4
 8001550:	400264a0 	.word	0x400264a0

08001554 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	; 0x28
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a19      	ldr	r2, [pc, #100]	; (80015d8 <HAL_UART_MspInit+0x84>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d12b      	bne.n	80015ce <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
 800157a:	4b18      	ldr	r3, [pc, #96]	; (80015dc <HAL_UART_MspInit+0x88>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	4a17      	ldr	r2, [pc, #92]	; (80015dc <HAL_UART_MspInit+0x88>)
 8001580:	f043 0320 	orr.w	r3, r3, #32
 8001584:	6453      	str	r3, [r2, #68]	; 0x44
 8001586:	4b15      	ldr	r3, [pc, #84]	; (80015dc <HAL_UART_MspInit+0x88>)
 8001588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158a:	f003 0320 	and.w	r3, r3, #32
 800158e:	613b      	str	r3, [r7, #16]
 8001590:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	4b11      	ldr	r3, [pc, #68]	; (80015dc <HAL_UART_MspInit+0x88>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a10      	ldr	r2, [pc, #64]	; (80015dc <HAL_UART_MspInit+0x88>)
 800159c:	f043 0304 	orr.w	r3, r3, #4
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <HAL_UART_MspInit+0x88>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015ae:	23c0      	movs	r3, #192	; 0xc0
 80015b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b2:	2302      	movs	r3, #2
 80015b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ba:	2303      	movs	r3, #3
 80015bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80015be:	2308      	movs	r3, #8
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	4619      	mov	r1, r3
 80015c8:	4805      	ldr	r0, [pc, #20]	; (80015e0 <HAL_UART_MspInit+0x8c>)
 80015ca:	f002 f887 	bl	80036dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80015ce:	bf00      	nop
 80015d0:	3728      	adds	r7, #40	; 0x28
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40011400 	.word	0x40011400
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40020800 	.word	0x40020800

080015e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <NMI_Handler+0x4>

080015ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ee:	e7fe      	b.n	80015ee <HardFault_Handler+0x4>

080015f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <MemManage_Handler+0x4>

080015f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015fa:	e7fe      	b.n	80015fa <BusFault_Handler+0x4>

080015fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <UsageFault_Handler+0x4>

08001602 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001630:	f000 fa3a 	bl	8001aa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}

08001638 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800163c:	4802      	ldr	r0, [pc, #8]	; (8001648 <SDIO_IRQHandler+0x10>)
 800163e:	f003 f8ed 	bl	800481c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20006654 	.word	0x20006654

0800164c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001650:	4802      	ldr	r0, [pc, #8]	; (800165c <DMA2_Stream3_IRQHandler+0x10>)
 8001652:	f000 fca7 	bl	8001fa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20006560 	.word	0x20006560

08001660 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001664:	4802      	ldr	r0, [pc, #8]	; (8001670 <DMA2_Stream6_IRQHandler+0x10>)
 8001666:	f000 fc9d 	bl	8001fa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	200065f4 	.word	0x200065f4

08001674 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
	return 1;
 8001678:	2301      	movs	r3, #1
}
 800167a:	4618      	mov	r0, r3
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <_kill>:

int _kill(int pid, int sig)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800168e:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <_kill+0x20>)
 8001690:	2216      	movs	r2, #22
 8001692:	601a      	str	r2, [r3, #0]
	return -1;
 8001694:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001698:	4618      	mov	r0, r3
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	20017a14 	.word	0x20017a14

080016a8 <_exit>:

void _exit (int status)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80016b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff ffe5 	bl	8001684 <_kill>
	while (1) {}		/* Make sure we hang here */
 80016ba:	e7fe      	b.n	80016ba <_exit+0x12>

080016bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	e00a      	b.n	80016e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016ce:	f3af 8000 	nop.w
 80016d2:	4601      	mov	r1, r0
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	1c5a      	adds	r2, r3, #1
 80016d8:	60ba      	str	r2, [r7, #8]
 80016da:	b2ca      	uxtb	r2, r1
 80016dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	3301      	adds	r3, #1
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	697a      	ldr	r2, [r7, #20]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	dbf0      	blt.n	80016ce <_read+0x12>
	}

return len;
 80016ec:	687b      	ldr	r3, [r7, #4]
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b083      	sub	sp, #12
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
	return -1;
 80016fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001702:	4618      	mov	r0, r3
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800170e:	b480      	push	{r7}
 8001710:	b083      	sub	sp, #12
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
 8001716:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800171e:	605a      	str	r2, [r3, #4]
	return 0;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <_isatty>:

int _isatty(int file)
{
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
	return 1;
 8001736:	2301      	movs	r3, #1
}
 8001738:	4618      	mov	r0, r3
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
	return 0;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
	...

08001760 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001760:	b480      	push	{r7}
 8001762:	b087      	sub	sp, #28
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001768:	4a14      	ldr	r2, [pc, #80]	; (80017bc <_sbrk+0x5c>)
 800176a:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <_sbrk+0x60>)
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001774:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <_sbrk+0x64>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d102      	bne.n	8001782 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800177c:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <_sbrk+0x64>)
 800177e:	4a12      	ldr	r2, [pc, #72]	; (80017c8 <_sbrk+0x68>)
 8001780:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <_sbrk+0x64>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	429a      	cmp	r2, r3
 800178e:	d205      	bcs.n	800179c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001790:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <_sbrk+0x6c>)
 8001792:	220c      	movs	r2, #12
 8001794:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001796:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800179a:	e009      	b.n	80017b0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800179c:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <_sbrk+0x64>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017a2:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <_sbrk+0x64>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4413      	add	r3, r2
 80017aa:	4a06      	ldr	r2, [pc, #24]	; (80017c4 <_sbrk+0x64>)
 80017ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ae:	68fb      	ldr	r3, [r7, #12]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	371c      	adds	r7, #28
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	20020000 	.word	0x20020000
 80017c0:	00000400 	.word	0x00000400
 80017c4:	200000bc 	.word	0x200000bc
 80017c8:	20017a28 	.word	0x20017a28
 80017cc:	20017a14 	.word	0x20017a14

080017d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <SystemInit+0x20>)
 80017d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017da:	4a05      	ldr	r2, [pc, #20]	; (80017f0 <SystemInit+0x20>)
 80017dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <clear_buffer>:
FATFS *pfs;
uint32_t total, free_space;

/*--------------------------------------------------------------------------------------------------------------*/
// Очищаем буфер. / Clear buffer
void clear_buffer(void) {
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
	for (int i = 0; i < 100; i++)
 80017fa:	2300      	movs	r3, #0
 80017fc:	607b      	str	r3, [r7, #4]
 80017fe:	e007      	b.n	8001810 <clear_buffer+0x1c>
		buffer[i] = '\0'; // BUFFER_SIZE
 8001800:	4a08      	ldr	r2, [pc, #32]	; (8001824 <clear_buffer+0x30>)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4413      	add	r3, r2
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 100; i++)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	3301      	adds	r3, #1
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b63      	cmp	r3, #99	; 0x63
 8001814:	ddf4      	ble.n	8001800 <clear_buffer+0xc>
}
 8001816:	bf00      	nop
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	200000c0 	.word	0x200000c0

08001828 <zerg_mount>:
/*--------------------------------------------------------------------------------------------------------------*/
// Монтируем SD-карту / Mount SD card
void zerg_mount(void) {
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
	if (f_mount(&SDFatFS, (TCHAR const*) SDPath, 0) != FR_OK) {
 800182c:	2200      	movs	r2, #0
 800182e:	4908      	ldr	r1, [pc, #32]	; (8001850 <zerg_mount+0x28>)
 8001830:	4808      	ldr	r0, [pc, #32]	; (8001854 <zerg_mount+0x2c>)
 8001832:	f007 fe29 	bl	8009488 <f_mount>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <zerg_mount+0x1c>
		printf("Error Mounting SD Card\r\n");
 800183c:	4806      	ldr	r0, [pc, #24]	; (8001858 <zerg_mount+0x30>)
 800183e:	f014 ffa3 	bl	8016788 <puts>
	} else {
		printf("SD card mounted successfully!\r\n");
	}
}
 8001842:	e002      	b.n	800184a <zerg_mount+0x22>
		printf("SD card mounted successfully!\r\n");
 8001844:	4805      	ldr	r0, [pc, #20]	; (800185c <zerg_mount+0x34>)
 8001846:	f014 ff9f 	bl	8016788 <puts>
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	2000928c 	.word	0x2000928c
 8001854:	2000a2c0 	.word	0x2000a2c0
 8001858:	080181e4 	.word	0x080181e4
 800185c:	080181fc 	.word	0x080181fc

08001860 <zerg_get_data_from_sd>:
	}
	f_close(&SDFile);
	clear_buffer();
}

int zerg_get_data_from_sd(void) {
 8001860:	b580      	push	{r7, lr}
 8001862:	b08a      	sub	sp, #40	; 0x28
 8001864:	af00      	add	r7, sp, #0
	f_open(&SDFile, (char*) name_sd, FA_READ);
 8001866:	4b45      	ldr	r3, [pc, #276]	; (800197c <zerg_get_data_from_sd+0x11c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2201      	movs	r2, #1
 800186c:	4619      	mov	r1, r3
 800186e:	4844      	ldr	r0, [pc, #272]	; (8001980 <zerg_get_data_from_sd+0x120>)
 8001870:	f007 fe50 	bl	8009514 <f_open>
	memset(rtext, 0, sizeof(rtext));
 8001874:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8001878:	2100      	movs	r1, #0
 800187a:	4842      	ldr	r0, [pc, #264]	; (8001984 <zerg_get_data_from_sd+0x124>)
 800187c:	f014 fef6 	bl	801666c <memset>
	res = f_read(&SDFile, rtext, sizeof(rtext), (UINT*) &bytesread);
 8001880:	4b41      	ldr	r3, [pc, #260]	; (8001988 <zerg_get_data_from_sd+0x128>)
 8001882:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8001886:	493f      	ldr	r1, [pc, #252]	; (8001984 <zerg_get_data_from_sd+0x124>)
 8001888:	483d      	ldr	r0, [pc, #244]	; (8001980 <zerg_get_data_from_sd+0x120>)
 800188a:	f008 f80f 	bl	80098ac <f_read>
 800188e:	4603      	mov	r3, r0
 8001890:	461a      	mov	r2, r3
 8001892:	4b3e      	ldr	r3, [pc, #248]	; (800198c <zerg_get_data_from_sd+0x12c>)
 8001894:	701a      	strb	r2, [r3, #0]
	if ((bytesread == 0) || (res != FR_OK)) {
 8001896:	4b3c      	ldr	r3, [pc, #240]	; (8001988 <zerg_get_data_from_sd+0x128>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <zerg_get_data_from_sd+0x46>
 800189e:	4b3b      	ldr	r3, [pc, #236]	; (800198c <zerg_get_data_from_sd+0x12c>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d004      	beq.n	80018b0 <zerg_get_data_from_sd+0x50>
		printf("Failed to read file!\r\n");
 80018a6:	483a      	ldr	r0, [pc, #232]	; (8001990 <zerg_get_data_from_sd+0x130>)
 80018a8:	f014 ff6e 	bl	8016788 <puts>
		return 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	e060      	b.n	8001972 <zerg_get_data_from_sd+0x112>
		//printf("File *%s* readed successfully! \n", name);
		//printf("File *%s* has content it is; %s\r\n",name_sd, (char *)rtext);
		//printf("Data from SD card:\r\n");
		//printf("%s\r\n", rtext);
		char *token1, *token2, *token3;
		char *rest = rtext;
 80018b0:	4b34      	ldr	r3, [pc, #208]	; (8001984 <zerg_get_data_from_sd+0x124>)
 80018b2:	60bb      	str	r3, [r7, #8]
		char *name1; // для записи в структуру
		int id;
		int z = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
		int y = 0;
 80018b8:	2300      	movs	r3, #0
 80018ba:	623b      	str	r3, [r7, #32]

		while ((token1 = strtok_r(rest, "\n", &rest))) {
 80018bc:	e048      	b.n	8001950 <zerg_get_data_from_sd+0xf0>
			printf("token - %s\n", token1);
 80018be:	69f9      	ldr	r1, [r7, #28]
 80018c0:	4834      	ldr	r0, [pc, #208]	; (8001994 <zerg_get_data_from_sd+0x134>)
 80018c2:	f014 fedb 	bl	801667c <iprintf>
			char *rest1 = token1;
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	607b      	str	r3, [r7, #4]
			y = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	623b      	str	r3, [r7, #32]
			while ((token2 = strtok_r(rest1, "=", &rest1))) {
 80018ce:	e032      	b.n	8001936 <zerg_get_data_from_sd+0xd6>
				printf("NAME - %s\n", token2);
 80018d0:	69b9      	ldr	r1, [r7, #24]
 80018d2:	4831      	ldr	r0, [pc, #196]	; (8001998 <zerg_get_data_from_sd+0x138>)
 80018d4:	f014 fed2 	bl	801667c <iprintf>
				z = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	627b      	str	r3, [r7, #36]	; 0x24
				if (y == 0) {
 80018dc:	6a3b      	ldr	r3, [r7, #32]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d11f      	bne.n	8001922 <zerg_get_data_from_sd+0xc2>
					// получение id
					char *rest2 = token2;
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	603b      	str	r3, [r7, #0]
					while ((token3 = strtok_r(rest2, "_", &rest2))) {
 80018e6:	e012      	b.n	800190e <zerg_get_data_from_sd+0xae>
						if (z == 0) {
 80018e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <zerg_get_data_from_sd+0x92>
							name1 = token2;
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	613b      	str	r3, [r7, #16]
						}
						if (z == 1) {
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d107      	bne.n	8001908 <zerg_get_data_from_sd+0xa8>
							id = atoi(token3);
 80018f8:	6978      	ldr	r0, [r7, #20]
 80018fa:	f014 fe59 	bl	80165b0 <atoi>
 80018fe:	60f8      	str	r0, [r7, #12]
							printf("ID %d\n", id);
 8001900:	68f9      	ldr	r1, [r7, #12]
 8001902:	4826      	ldr	r0, [pc, #152]	; (800199c <zerg_get_data_from_sd+0x13c>)
 8001904:	f014 feba 	bl	801667c <iprintf>
						}
						z++;
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	3301      	adds	r3, #1
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
					while ((token3 = strtok_r(rest2, "_", &rest2))) {
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	463a      	mov	r2, r7
 8001912:	4923      	ldr	r1, [pc, #140]	; (80019a0 <zerg_get_data_from_sd+0x140>)
 8001914:	4618      	mov	r0, r3
 8001916:	f015 f85b 	bl	80169d0 <strtok_r>
 800191a:	6178      	str	r0, [r7, #20]
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1e2      	bne.n	80018e8 <zerg_get_data_from_sd+0x88>
					}
				}
				if (y == 1) {
 8001922:	6a3b      	ldr	r3, [r7, #32]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d103      	bne.n	8001930 <zerg_get_data_from_sd+0xd0>
					printf("VAL = %s\n", token2);
 8001928:	69b9      	ldr	r1, [r7, #24]
 800192a:	481e      	ldr	r0, [pc, #120]	; (80019a4 <zerg_get_data_from_sd+0x144>)
 800192c:	f014 fea6 	bl	801667c <iprintf>
//					} else if (strcmp(name1, "onoff") == 0) {
//						T[id].onoff = atoi(token2);
//					}
					/************************************************/
				}
				y++;
 8001930:	6a3b      	ldr	r3, [r7, #32]
 8001932:	3301      	adds	r3, #1
 8001934:	623b      	str	r3, [r7, #32]
			while ((token2 = strtok_r(rest1, "=", &rest1))) {
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	1d3a      	adds	r2, r7, #4
 800193a:	491b      	ldr	r1, [pc, #108]	; (80019a8 <zerg_get_data_from_sd+0x148>)
 800193c:	4618      	mov	r0, r3
 800193e:	f015 f847 	bl	80169d0 <strtok_r>
 8001942:	61b8      	str	r0, [r7, #24]
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1c2      	bne.n	80018d0 <zerg_get_data_from_sd+0x70>
			}
			z++;
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	3301      	adds	r3, #1
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
		while ((token1 = strtok_r(rest, "\n", &rest))) {
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	f107 0208 	add.w	r2, r7, #8
 8001956:	4915      	ldr	r1, [pc, #84]	; (80019ac <zerg_get_data_from_sd+0x14c>)
 8001958:	4618      	mov	r0, r3
 800195a:	f015 f839 	bl	80169d0 <strtok_r>
 800195e:	61f8      	str	r0, [r7, #28]
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1ab      	bne.n	80018be <zerg_get_data_from_sd+0x5e>
		}
	}

	f_close(&SDFile);
 8001966:	4806      	ldr	r0, [pc, #24]	; (8001980 <zerg_get_data_from_sd+0x120>)
 8001968:	f008 f97d 	bl	8009c66 <f_close>
	clear_buffer();
 800196c:	f7ff ff42 	bl	80017f4 <clear_buffer>
	return 0;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3728      	adds	r7, #40	; 0x28
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000014 	.word	0x20000014
 8001980:	20009290 	.word	0x20009290
 8001984:	2000674c 	.word	0x2000674c
 8001988:	20006728 	.word	0x20006728
 800198c:	20009280 	.word	0x20009280
 8001990:	080182c4 	.word	0x080182c4
 8001994:	080182f8 	.word	0x080182f8
 8001998:	08018304 	.word	0x08018304
 800199c:	08018310 	.word	0x08018310
 80019a0:	08018318 	.word	0x08018318
 80019a4:	0801831c 	.word	0x0801831c
 80019a8:	08018328 	.word	0x08018328
 80019ac:	0801832c 	.word	0x0801832c

080019b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019b4:	480d      	ldr	r0, [pc, #52]	; (80019ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019b6:	490e      	ldr	r1, [pc, #56]	; (80019f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019b8:	4a0e      	ldr	r2, [pc, #56]	; (80019f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019bc:	e002      	b.n	80019c4 <LoopCopyDataInit>

080019be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019c2:	3304      	adds	r3, #4

080019c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c8:	d3f9      	bcc.n	80019be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ca:	4a0b      	ldr	r2, [pc, #44]	; (80019f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019cc:	4c0b      	ldr	r4, [pc, #44]	; (80019fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80019ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d0:	e001      	b.n	80019d6 <LoopFillZerobss>

080019d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d4:	3204      	adds	r2, #4

080019d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d8:	d3fb      	bcc.n	80019d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019da:	f7ff fef9 	bl	80017d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019de:	f014 fdeb 	bl	80165b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019e2:	f7ff fb21 	bl	8001028 <main>
  bx  lr    
 80019e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80019f4:	0801fafc 	.word	0x0801fafc
  ldr r2, =_sbss
 80019f8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80019fc:	20017a24 	.word	0x20017a24

08001a00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a00:	e7fe      	b.n	8001a00 <ADC_IRQHandler>
	...

08001a04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a08:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <HAL_Init+0x40>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a0d      	ldr	r2, [pc, #52]	; (8001a44 <HAL_Init+0x40>)
 8001a0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <HAL_Init+0x40>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a0a      	ldr	r2, [pc, #40]	; (8001a44 <HAL_Init+0x40>)
 8001a1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a20:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <HAL_Init+0x40>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a07      	ldr	r2, [pc, #28]	; (8001a44 <HAL_Init+0x40>)
 8001a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a2c:	2003      	movs	r0, #3
 8001a2e:	f000 f94f 	bl	8001cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a32:	200f      	movs	r0, #15
 8001a34:	f000 f808 	bl	8001a48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a38:	f7ff fc64 	bl	8001304 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40023c00 	.word	0x40023c00

08001a48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a50:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <HAL_InitTick+0x54>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <HAL_InitTick+0x58>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a66:	4618      	mov	r0, r3
 8001a68:	f000 f967 	bl	8001d3a <HAL_SYSTICK_Config>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e00e      	b.n	8001a94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b0f      	cmp	r3, #15
 8001a7a:	d80a      	bhi.n	8001a92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a84:	f000 f92f 	bl	8001ce6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a88:	4a06      	ldr	r2, [pc, #24]	; (8001aa4 <HAL_InitTick+0x5c>)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	e000      	b.n	8001a94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20000018 	.word	0x20000018
 8001aa0:	20000020 	.word	0x20000020
 8001aa4:	2000001c 	.word	0x2000001c

08001aa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <HAL_IncTick+0x20>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <HAL_IncTick+0x24>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	4a04      	ldr	r2, [pc, #16]	; (8001acc <HAL_IncTick+0x24>)
 8001aba:	6013      	str	r3, [r2, #0]
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	20000020 	.word	0x20000020
 8001acc:	20009284 	.word	0x20009284

08001ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad4:	4b03      	ldr	r3, [pc, #12]	; (8001ae4 <HAL_GetTick+0x14>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	20009284 	.word	0x20009284

08001ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af0:	f7ff ffee 	bl	8001ad0 <HAL_GetTick>
 8001af4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b00:	d005      	beq.n	8001b0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b02:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <HAL_Delay+0x44>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	461a      	mov	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b0e:	bf00      	nop
 8001b10:	f7ff ffde 	bl	8001ad0 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d8f7      	bhi.n	8001b10 <HAL_Delay+0x28>
  {
  }
}
 8001b20:	bf00      	nop
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000020 	.word	0x20000020

08001b30 <__NVIC_SetPriorityGrouping>:
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b40:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <__NVIC_SetPriorityGrouping+0x44>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b62:	4a04      	ldr	r2, [pc, #16]	; (8001b74 <__NVIC_SetPriorityGrouping+0x44>)
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	60d3      	str	r3, [r2, #12]
}
 8001b68:	bf00      	nop
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <__NVIC_GetPriorityGrouping>:
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b7c:	4b04      	ldr	r3, [pc, #16]	; (8001b90 <__NVIC_GetPriorityGrouping+0x18>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	0a1b      	lsrs	r3, r3, #8
 8001b82:	f003 0307 	and.w	r3, r3, #7
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <__NVIC_EnableIRQ>:
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	db0b      	blt.n	8001bbe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	f003 021f 	and.w	r2, r3, #31
 8001bac:	4907      	ldr	r1, [pc, #28]	; (8001bcc <__NVIC_EnableIRQ+0x38>)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	095b      	lsrs	r3, r3, #5
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	e000e100 	.word	0xe000e100

08001bd0 <__NVIC_SetPriority>:
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	6039      	str	r1, [r7, #0]
 8001bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	db0a      	blt.n	8001bfa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	490c      	ldr	r1, [pc, #48]	; (8001c1c <__NVIC_SetPriority+0x4c>)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	0112      	lsls	r2, r2, #4
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	440b      	add	r3, r1
 8001bf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001bf8:	e00a      	b.n	8001c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	4908      	ldr	r1, [pc, #32]	; (8001c20 <__NVIC_SetPriority+0x50>)
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	3b04      	subs	r3, #4
 8001c08:	0112      	lsls	r2, r2, #4
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	761a      	strb	r2, [r3, #24]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	e000e100 	.word	0xe000e100
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <NVIC_EncodePriority>:
{
 8001c24:	b480      	push	{r7}
 8001c26:	b089      	sub	sp, #36	; 0x24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f1c3 0307 	rsb	r3, r3, #7
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	bf28      	it	cs
 8001c42:	2304      	movcs	r3, #4
 8001c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3304      	adds	r3, #4
 8001c4a:	2b06      	cmp	r3, #6
 8001c4c:	d902      	bls.n	8001c54 <NVIC_EncodePriority+0x30>
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	3b03      	subs	r3, #3
 8001c52:	e000      	b.n	8001c56 <NVIC_EncodePriority+0x32>
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43da      	mvns	r2, r3
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	401a      	ands	r2, r3
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	fa01 f303 	lsl.w	r3, r1, r3
 8001c76:	43d9      	mvns	r1, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c7c:	4313      	orrs	r3, r2
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3724      	adds	r7, #36	; 0x24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
	...

08001c8c <SysTick_Config>:
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c9c:	d301      	bcc.n	8001ca2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e00f      	b.n	8001cc2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ca2:	4a0a      	ldr	r2, [pc, #40]	; (8001ccc <SysTick_Config+0x40>)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001caa:	210f      	movs	r1, #15
 8001cac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cb0:	f7ff ff8e 	bl	8001bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cb4:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <SysTick_Config+0x40>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cba:	4b04      	ldr	r3, [pc, #16]	; (8001ccc <SysTick_Config+0x40>)
 8001cbc:	2207      	movs	r2, #7
 8001cbe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	e000e010 	.word	0xe000e010

08001cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7ff ff29 	bl	8001b30 <__NVIC_SetPriorityGrouping>
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b086      	sub	sp, #24
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	4603      	mov	r3, r0
 8001cee:	60b9      	str	r1, [r7, #8]
 8001cf0:	607a      	str	r2, [r7, #4]
 8001cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf8:	f7ff ff3e 	bl	8001b78 <__NVIC_GetPriorityGrouping>
 8001cfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	68b9      	ldr	r1, [r7, #8]
 8001d02:	6978      	ldr	r0, [r7, #20]
 8001d04:	f7ff ff8e 	bl	8001c24 <NVIC_EncodePriority>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d0e:	4611      	mov	r1, r2
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff ff5d 	bl	8001bd0 <__NVIC_SetPriority>
}
 8001d16:	bf00      	nop
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	4603      	mov	r3, r0
 8001d26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff ff31 	bl	8001b94 <__NVIC_EnableIRQ>
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7ff ffa2 	bl	8001c8c <SysTick_Config>
 8001d48:	4603      	mov	r3, r0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d60:	f7ff feb6 	bl	8001ad0 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d101      	bne.n	8001d70 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e099      	b.n	8001ea4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2202      	movs	r2, #2
 8001d74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f022 0201 	bic.w	r2, r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d90:	e00f      	b.n	8001db2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d92:	f7ff fe9d 	bl	8001ad0 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b05      	cmp	r3, #5
 8001d9e:	d908      	bls.n	8001db2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2220      	movs	r2, #32
 8001da4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2203      	movs	r2, #3
 8001daa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e078      	b.n	8001ea4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1e8      	bne.n	8001d92 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	4b38      	ldr	r3, [pc, #224]	; (8001eac <HAL_DMA_Init+0x158>)
 8001dcc:	4013      	ands	r3, r2
 8001dce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dde:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001df6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e08:	2b04      	cmp	r3, #4
 8001e0a:	d107      	bne.n	8001e1c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e14:	4313      	orrs	r3, r2
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	f023 0307 	bic.w	r3, r3, #7
 8001e32:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	d117      	bne.n	8001e76 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00e      	beq.n	8001e76 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 fa9d 	bl	8002398 <DMA_CheckFifoParam>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d008      	beq.n	8001e76 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2240      	movs	r2, #64	; 0x40
 8001e68:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e72:	2301      	movs	r3, #1
 8001e74:	e016      	b.n	8001ea4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 fa54 	bl	800232c <DMA_CalcBaseAndBitshift>
 8001e84:	4603      	mov	r3, r0
 8001e86:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8c:	223f      	movs	r2, #63	; 0x3f
 8001e8e:	409a      	lsls	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	f010803f 	.word	0xf010803f

08001eb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
 8001ebc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d101      	bne.n	8001ed6 <HAL_DMA_Start_IT+0x26>
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	e040      	b.n	8001f58 <HAL_DMA_Start_IT+0xa8>
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d12f      	bne.n	8001f4a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2202      	movs	r2, #2
 8001eee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	68b9      	ldr	r1, [r7, #8]
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f000 f9e6 	bl	80022d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f08:	223f      	movs	r2, #63	; 0x3f
 8001f0a:	409a      	lsls	r2, r3
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0216 	orr.w	r2, r2, #22
 8001f1e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d007      	beq.n	8001f38 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f042 0208 	orr.w	r2, r2, #8
 8001f36:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f042 0201 	orr.w	r2, r2, #1
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	e005      	b.n	8001f56 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f52:	2302      	movs	r3, #2
 8001f54:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d004      	beq.n	8001f7e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2280      	movs	r2, #128	; 0x80
 8001f78:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e00c      	b.n	8001f98 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2205      	movs	r2, #5
 8001f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0201 	bic.w	r2, r2, #1
 8001f94:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001fac:	2300      	movs	r3, #0
 8001fae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fb0:	4b92      	ldr	r3, [pc, #584]	; (80021fc <HAL_DMA_IRQHandler+0x258>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a92      	ldr	r2, [pc, #584]	; (8002200 <HAL_DMA_IRQHandler+0x25c>)
 8001fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fba:	0a9b      	lsrs	r3, r3, #10
 8001fbc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fce:	2208      	movs	r2, #8
 8001fd0:	409a      	lsls	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d01a      	beq.n	8002010 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d013      	beq.n	8002010 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 0204 	bic.w	r2, r2, #4
 8001ff6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ffc:	2208      	movs	r2, #8
 8001ffe:	409a      	lsls	r2, r3
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002008:	f043 0201 	orr.w	r2, r3, #1
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002014:	2201      	movs	r2, #1
 8002016:	409a      	lsls	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	4013      	ands	r3, r2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d012      	beq.n	8002046 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00b      	beq.n	8002046 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002032:	2201      	movs	r2, #1
 8002034:	409a      	lsls	r2, r3
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800203e:	f043 0202 	orr.w	r2, r3, #2
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204a:	2204      	movs	r2, #4
 800204c:	409a      	lsls	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	4013      	ands	r3, r2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d012      	beq.n	800207c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00b      	beq.n	800207c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002068:	2204      	movs	r2, #4
 800206a:	409a      	lsls	r2, r3
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002074:	f043 0204 	orr.w	r2, r3, #4
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002080:	2210      	movs	r2, #16
 8002082:	409a      	lsls	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	4013      	ands	r3, r2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d043      	beq.n	8002114 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0308 	and.w	r3, r3, #8
 8002096:	2b00      	cmp	r3, #0
 8002098:	d03c      	beq.n	8002114 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800209e:	2210      	movs	r2, #16
 80020a0:	409a      	lsls	r2, r3
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d018      	beq.n	80020e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d108      	bne.n	80020d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d024      	beq.n	8002114 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	4798      	blx	r3
 80020d2:	e01f      	b.n	8002114 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d01b      	beq.n	8002114 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	4798      	blx	r3
 80020e4:	e016      	b.n	8002114 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d107      	bne.n	8002104 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f022 0208 	bic.w	r2, r2, #8
 8002102:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002108:	2b00      	cmp	r3, #0
 800210a:	d003      	beq.n	8002114 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002118:	2220      	movs	r2, #32
 800211a:	409a      	lsls	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	4013      	ands	r3, r2
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 808e 	beq.w	8002242 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0310 	and.w	r3, r3, #16
 8002130:	2b00      	cmp	r3, #0
 8002132:	f000 8086 	beq.w	8002242 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800213a:	2220      	movs	r2, #32
 800213c:	409a      	lsls	r2, r3
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b05      	cmp	r3, #5
 800214c:	d136      	bne.n	80021bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0216 	bic.w	r2, r2, #22
 800215c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	695a      	ldr	r2, [r3, #20]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800216c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	2b00      	cmp	r3, #0
 8002174:	d103      	bne.n	800217e <HAL_DMA_IRQHandler+0x1da>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800217a:	2b00      	cmp	r3, #0
 800217c:	d007      	beq.n	800218e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 0208 	bic.w	r2, r2, #8
 800218c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002192:	223f      	movs	r2, #63	; 0x3f
 8002194:	409a      	lsls	r2, r3
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d07d      	beq.n	80022ae <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	4798      	blx	r3
        }
        return;
 80021ba:	e078      	b.n	80022ae <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d01c      	beq.n	8002204 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d108      	bne.n	80021ea <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d030      	beq.n	8002242 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	4798      	blx	r3
 80021e8:	e02b      	b.n	8002242 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d027      	beq.n	8002242 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	4798      	blx	r3
 80021fa:	e022      	b.n	8002242 <HAL_DMA_IRQHandler+0x29e>
 80021fc:	20000018 	.word	0x20000018
 8002200:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220e:	2b00      	cmp	r3, #0
 8002210:	d10f      	bne.n	8002232 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 0210 	bic.w	r2, r2, #16
 8002220:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002246:	2b00      	cmp	r3, #0
 8002248:	d032      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d022      	beq.n	800229c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2205      	movs	r2, #5
 800225a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 0201 	bic.w	r2, r2, #1
 800226c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	3301      	adds	r3, #1
 8002272:	60bb      	str	r3, [r7, #8]
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	429a      	cmp	r2, r3
 8002278:	d307      	bcc.n	800228a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1f2      	bne.n	800226e <HAL_DMA_IRQHandler+0x2ca>
 8002288:	e000      	b.n	800228c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800228a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d005      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	4798      	blx	r3
 80022ac:	e000      	b.n	80022b0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80022ae:	bf00      	nop
    }
  }
}
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop

080022b8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
 80022dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	2b40      	cmp	r3, #64	; 0x40
 80022fc:	d108      	bne.n	8002310 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800230e:	e007      	b.n	8002320 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68ba      	ldr	r2, [r7, #8]
 8002316:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	60da      	str	r2, [r3, #12]
}
 8002320:	bf00      	nop
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	b2db      	uxtb	r3, r3
 800233a:	3b10      	subs	r3, #16
 800233c:	4a14      	ldr	r2, [pc, #80]	; (8002390 <DMA_CalcBaseAndBitshift+0x64>)
 800233e:	fba2 2303 	umull	r2, r3, r2, r3
 8002342:	091b      	lsrs	r3, r3, #4
 8002344:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002346:	4a13      	ldr	r2, [pc, #76]	; (8002394 <DMA_CalcBaseAndBitshift+0x68>)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4413      	add	r3, r2
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	461a      	mov	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2b03      	cmp	r3, #3
 8002358:	d909      	bls.n	800236e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002362:	f023 0303 	bic.w	r3, r3, #3
 8002366:	1d1a      	adds	r2, r3, #4
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	659a      	str	r2, [r3, #88]	; 0x58
 800236c:	e007      	b.n	800237e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002376:	f023 0303 	bic.w	r3, r3, #3
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002382:	4618      	mov	r0, r3
 8002384:	3714      	adds	r7, #20
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	aaaaaaab 	.word	0xaaaaaaab
 8002394:	0801b7c0 	.word	0x0801b7c0

08002398 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023a0:	2300      	movs	r3, #0
 80023a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d11f      	bne.n	80023f2 <DMA_CheckFifoParam+0x5a>
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	2b03      	cmp	r3, #3
 80023b6:	d856      	bhi.n	8002466 <DMA_CheckFifoParam+0xce>
 80023b8:	a201      	add	r2, pc, #4	; (adr r2, 80023c0 <DMA_CheckFifoParam+0x28>)
 80023ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023be:	bf00      	nop
 80023c0:	080023d1 	.word	0x080023d1
 80023c4:	080023e3 	.word	0x080023e3
 80023c8:	080023d1 	.word	0x080023d1
 80023cc:	08002467 	.word	0x08002467
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d046      	beq.n	800246a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023e0:	e043      	b.n	800246a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023ea:	d140      	bne.n	800246e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023f0:	e03d      	b.n	800246e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023fa:	d121      	bne.n	8002440 <DMA_CheckFifoParam+0xa8>
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	2b03      	cmp	r3, #3
 8002400:	d837      	bhi.n	8002472 <DMA_CheckFifoParam+0xda>
 8002402:	a201      	add	r2, pc, #4	; (adr r2, 8002408 <DMA_CheckFifoParam+0x70>)
 8002404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002408:	08002419 	.word	0x08002419
 800240c:	0800241f 	.word	0x0800241f
 8002410:	08002419 	.word	0x08002419
 8002414:	08002431 	.word	0x08002431
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	73fb      	strb	r3, [r7, #15]
      break;
 800241c:	e030      	b.n	8002480 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002422:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d025      	beq.n	8002476 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800242e:	e022      	b.n	8002476 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002434:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002438:	d11f      	bne.n	800247a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800243e:	e01c      	b.n	800247a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	2b02      	cmp	r3, #2
 8002444:	d903      	bls.n	800244e <DMA_CheckFifoParam+0xb6>
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	2b03      	cmp	r3, #3
 800244a:	d003      	beq.n	8002454 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800244c:	e018      	b.n	8002480 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	73fb      	strb	r3, [r7, #15]
      break;
 8002452:	e015      	b.n	8002480 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002458:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00e      	beq.n	800247e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	73fb      	strb	r3, [r7, #15]
      break;
 8002464:	e00b      	b.n	800247e <DMA_CheckFifoParam+0xe6>
      break;
 8002466:	bf00      	nop
 8002468:	e00a      	b.n	8002480 <DMA_CheckFifoParam+0xe8>
      break;
 800246a:	bf00      	nop
 800246c:	e008      	b.n	8002480 <DMA_CheckFifoParam+0xe8>
      break;
 800246e:	bf00      	nop
 8002470:	e006      	b.n	8002480 <DMA_CheckFifoParam+0xe8>
      break;
 8002472:	bf00      	nop
 8002474:	e004      	b.n	8002480 <DMA_CheckFifoParam+0xe8>
      break;
 8002476:	bf00      	nop
 8002478:	e002      	b.n	8002480 <DMA_CheckFifoParam+0xe8>
      break;   
 800247a:	bf00      	nop
 800247c:	e000      	b.n	8002480 <DMA_CheckFifoParam+0xe8>
      break;
 800247e:	bf00      	nop
    }
  } 
  
  return status; 
 8002480:	7bfb      	ldrb	r3, [r7, #15]
}
 8002482:	4618      	mov	r0, r3
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop

08002490 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b088      	sub	sp, #32
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8002498:	2300      	movs	r3, #0
 800249a:	61fb      	str	r3, [r7, #28]
 800249c:	2300      	movs	r3, #0
 800249e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80024a0:	4baa      	ldr	r3, [pc, #680]	; (800274c <HAL_ETH_Init+0x2bc>)
 80024a2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80024a8:	2300      	movs	r3, #0
 80024aa:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e183      	b.n	80027be <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d106      	bne.n	80024d0 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f004 fe60 	bl	8007190 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024d0:	2300      	movs	r3, #0
 80024d2:	60bb      	str	r3, [r7, #8]
 80024d4:	4b9e      	ldr	r3, [pc, #632]	; (8002750 <HAL_ETH_Init+0x2c0>)
 80024d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d8:	4a9d      	ldr	r2, [pc, #628]	; (8002750 <HAL_ETH_Init+0x2c0>)
 80024da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024de:	6453      	str	r3, [r2, #68]	; 0x44
 80024e0:	4b9b      	ldr	r3, [pc, #620]	; (8002750 <HAL_ETH_Init+0x2c0>)
 80024e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024e8:	60bb      	str	r3, [r7, #8]
 80024ea:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80024ec:	4b99      	ldr	r3, [pc, #612]	; (8002754 <HAL_ETH_Init+0x2c4>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	4a98      	ldr	r2, [pc, #608]	; (8002754 <HAL_ETH_Init+0x2c4>)
 80024f2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80024f6:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80024f8:	4b96      	ldr	r3, [pc, #600]	; (8002754 <HAL_ETH_Init+0x2c4>)
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	4994      	ldr	r1, [pc, #592]	; (8002754 <HAL_ETH_Init+0x2c4>)
 8002502:	4313      	orrs	r3, r2
 8002504:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f042 0201 	orr.w	r2, r2, #1
 8002518:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800251c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800251e:	f7ff fad7 	bl	8001ad0 <HAL_GetTick>
 8002522:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002524:	e011      	b.n	800254a <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8002526:	f7ff fad3 	bl	8001ad0 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002534:	d909      	bls.n	800254a <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2203      	movs	r2, #3
 800253a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e139      	b.n	80027be <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1e4      	bne.n	8002526 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	f023 031c 	bic.w	r3, r3, #28
 800256a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800256c:	f001 feac 	bl	80042c8 <HAL_RCC_GetHCLKFreq>
 8002570:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	4a78      	ldr	r2, [pc, #480]	; (8002758 <HAL_ETH_Init+0x2c8>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d908      	bls.n	800258c <HAL_ETH_Init+0xfc>
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	4a77      	ldr	r2, [pc, #476]	; (800275c <HAL_ETH_Init+0x2cc>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d804      	bhi.n	800258c <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	f043 0308 	orr.w	r3, r3, #8
 8002588:	61fb      	str	r3, [r7, #28]
 800258a:	e027      	b.n	80025dc <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	4a73      	ldr	r2, [pc, #460]	; (800275c <HAL_ETH_Init+0x2cc>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d908      	bls.n	80025a6 <HAL_ETH_Init+0x116>
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	4a6d      	ldr	r2, [pc, #436]	; (800274c <HAL_ETH_Init+0x2bc>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d204      	bcs.n	80025a6 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f043 030c 	orr.w	r3, r3, #12
 80025a2:	61fb      	str	r3, [r7, #28]
 80025a4:	e01a      	b.n	80025dc <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	4a68      	ldr	r2, [pc, #416]	; (800274c <HAL_ETH_Init+0x2bc>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d303      	bcc.n	80025b6 <HAL_ETH_Init+0x126>
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	4a6b      	ldr	r2, [pc, #428]	; (8002760 <HAL_ETH_Init+0x2d0>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d911      	bls.n	80025da <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	4a69      	ldr	r2, [pc, #420]	; (8002760 <HAL_ETH_Init+0x2d0>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d908      	bls.n	80025d0 <HAL_ETH_Init+0x140>
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	4a68      	ldr	r2, [pc, #416]	; (8002764 <HAL_ETH_Init+0x2d4>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d804      	bhi.n	80025d0 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	f043 0304 	orr.w	r3, r3, #4
 80025cc:	61fb      	str	r3, [r7, #28]
 80025ce:	e005      	b.n	80025dc <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	f043 0310 	orr.w	r3, r3, #16
 80025d6:	61fb      	str	r3, [r7, #28]
 80025d8:	e000      	b.n	80025dc <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80025da:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	69fa      	ldr	r2, [r7, #28]
 80025e2:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80025e4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80025e8:	2100      	movs	r1, #0
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 fb98 	bl	8002d20 <HAL_ETH_WritePHYRegister>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00b      	beq.n	800260e <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80025fa:	6939      	ldr	r1, [r7, #16]
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 fd4d 	bl	800309c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e0d7      	b.n	80027be <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800260e:	20ff      	movs	r0, #255	; 0xff
 8002610:	f7ff fa6a 	bl	8001ae8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 80a5 	beq.w	8002768 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800261e:	f7ff fa57 	bl	8001ad0 <HAL_GetTick>
 8002622:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002624:	f107 030c 	add.w	r3, r7, #12
 8002628:	461a      	mov	r2, r3
 800262a:	2101      	movs	r1, #1
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 fb0f 	bl	8002c50 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8002632:	f7ff fa4d 	bl	8001ad0 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002640:	4293      	cmp	r3, r2
 8002642:	d90f      	bls.n	8002664 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002648:	6939      	ldr	r1, [r7, #16]
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 fd26 	bl	800309c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e0ac      	b.n	80027be <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f003 0304 	and.w	r3, r3, #4
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0da      	beq.n	8002624 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800266e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002672:	2100      	movs	r1, #0
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 fb53 	bl	8002d20 <HAL_ETH_WritePHYRegister>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00b      	beq.n	8002698 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002684:	6939      	ldr	r1, [r7, #16]
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 fd08 	bl	800309c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002694:	2301      	movs	r3, #1
 8002696:	e092      	b.n	80027be <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002698:	f7ff fa1a 	bl	8001ad0 <HAL_GetTick>
 800269c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800269e:	f107 030c 	add.w	r3, r7, #12
 80026a2:	461a      	mov	r2, r3
 80026a4:	2101      	movs	r1, #1
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 fad2 	bl	8002c50 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80026ac:	f7ff fa10 	bl	8001ad0 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d90f      	bls.n	80026de <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80026c2:	6939      	ldr	r1, [r7, #16]
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 fce9 	bl	800309c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e06f      	b.n	80027be <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f003 0320 	and.w	r3, r3, #32
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0da      	beq.n	800269e <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80026e8:	f107 030c 	add.w	r3, r7, #12
 80026ec:	461a      	mov	r2, r3
 80026ee:	2110      	movs	r1, #16
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 faad 	bl	8002c50 <HAL_ETH_ReadPHYRegister>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00b      	beq.n	8002714 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002700:	6939      	ldr	r1, [r7, #16]
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 fcca 	bl	800309c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002710:	2301      	movs	r3, #1
 8002712:	e054      	b.n	80027be <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f003 0304 	and.w	r3, r3, #4
 800271a:	2b00      	cmp	r3, #0
 800271c:	d004      	beq.n	8002728 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002724:	60da      	str	r2, [r3, #12]
 8002726:	e002      	b.n	800272e <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d003      	beq.n	8002740 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	609a      	str	r2, [r3, #8]
 800273e:	e035      	b.n	80027ac <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	e030      	b.n	80027ac <HAL_ETH_Init+0x31c>
 800274a:	bf00      	nop
 800274c:	03938700 	.word	0x03938700
 8002750:	40023800 	.word	0x40023800
 8002754:	40013800 	.word	0x40013800
 8002758:	01312cff 	.word	0x01312cff
 800275c:	02160ebf 	.word	0x02160ebf
 8002760:	05f5e0ff 	.word	0x05f5e0ff
 8002764:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	08db      	lsrs	r3, r3, #3
 800276e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	085b      	lsrs	r3, r3, #1
 8002776:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002778:	4313      	orrs	r3, r2
 800277a:	b29b      	uxth	r3, r3
 800277c:	461a      	mov	r2, r3
 800277e:	2100      	movs	r1, #0
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 facd 	bl	8002d20 <HAL_ETH_WritePHYRegister>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00b      	beq.n	80027a4 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002790:	6939      	ldr	r1, [r7, #16]
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 fc82 	bl	800309c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e00c      	b.n	80027be <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80027a4:	f640 70ff 	movw	r0, #4095	; 0xfff
 80027a8:	f7ff f99e 	bl	8001ae8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80027ac:	6939      	ldr	r1, [r7, #16]
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 fc74 	bl	800309c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3720      	adds	r7, #32
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop

080027c8 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b087      	sub	sp, #28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
 80027d4:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d101      	bne.n	80027e8 <HAL_ETH_DMATxDescListInit+0x20>
 80027e4:	2302      	movs	r3, #2
 80027e6:	e052      	b.n	800288e <HAL_ETH_DMATxDescListInit+0xc6>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2202      	movs	r2, #2
 80027f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
 8002802:	e030      	b.n	8002866 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	015b      	lsls	r3, r3, #5
 8002808:	68ba      	ldr	r2, [r7, #8]
 800280a:	4413      	add	r3, r2
 800280c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002814:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800281c:	fb02 f303 	mul.w	r3, r2, r3
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	4413      	add	r3, r2
 8002824:	461a      	mov	r2, r3
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d105      	bne.n	800283e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	3b01      	subs	r3, #1
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	429a      	cmp	r2, r3
 8002846:	d208      	bcs.n	800285a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	3301      	adds	r3, #1
 800284c:	015b      	lsls	r3, r3, #5
 800284e:	68ba      	ldr	r2, [r7, #8]
 8002850:	4413      	add	r3, r2
 8002852:	461a      	mov	r2, r3
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	60da      	str	r2, [r3, #12]
 8002858:	e002      	b.n	8002860 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	3301      	adds	r3, #1
 8002864:	617b      	str	r3, [r7, #20]
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	429a      	cmp	r2, r3
 800286c:	d3ca      	bcc.n	8002804 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002878:	3310      	adds	r3, #16
 800287a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	371c      	adds	r7, #28
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800289a:	b480      	push	{r7}
 800289c:	b087      	sub	sp, #28
 800289e:	af00      	add	r7, sp, #0
 80028a0:	60f8      	str	r0, [r7, #12]
 80028a2:	60b9      	str	r1, [r7, #8]
 80028a4:	607a      	str	r2, [r7, #4]
 80028a6:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80028a8:	2300      	movs	r3, #0
 80028aa:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d101      	bne.n	80028ba <HAL_ETH_DMARxDescListInit+0x20>
 80028b6:	2302      	movs	r3, #2
 80028b8:	e056      	b.n	8002968 <HAL_ETH_DMARxDescListInit+0xce>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2202      	movs	r2, #2
 80028c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	68ba      	ldr	r2, [r7, #8]
 80028ce:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80028d0:	2300      	movs	r3, #0
 80028d2:	617b      	str	r3, [r7, #20]
 80028d4:	e034      	b.n	8002940 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	015b      	lsls	r3, r3, #5
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	4413      	add	r3, r2
 80028de:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80028e6:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80028ee:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80028f6:	fb02 f303 	mul.w	r3, r2, r3
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	4413      	add	r3, r2
 80028fe:	461a      	mov	r2, r3
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d105      	bne.n	8002918 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	3b01      	subs	r3, #1
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	429a      	cmp	r2, r3
 8002920:	d208      	bcs.n	8002934 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	3301      	adds	r3, #1
 8002926:	015b      	lsls	r3, r3, #5
 8002928:	68ba      	ldr	r2, [r7, #8]
 800292a:	4413      	add	r3, r2
 800292c:	461a      	mov	r2, r3
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	60da      	str	r2, [r3, #12]
 8002932:	e002      	b.n	800293a <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8002934:	68ba      	ldr	r2, [r7, #8]
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	3301      	adds	r3, #1
 800293e:	617b      	str	r3, [r7, #20]
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	429a      	cmp	r2, r3
 8002946:	d3c6      	bcc.n	80028d6 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68ba      	ldr	r2, [r7, #8]
 800294e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002952:	330c      	adds	r3, #12
 8002954:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	371c      	adds	r7, #28
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8002974:	b480      	push	{r7}
 8002976:	b087      	sub	sp, #28
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800297e:	2300      	movs	r3, #0
 8002980:	617b      	str	r3, [r7, #20]
 8002982:	2300      	movs	r3, #0
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	2300      	movs	r3, #0
 8002988:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002990:	2b01      	cmp	r3, #1
 8002992:	d101      	bne.n	8002998 <HAL_ETH_TransmitFrame+0x24>
 8002994:	2302      	movs	r3, #2
 8002996:	e0cd      	b.n	8002b34 <HAL_ETH_TransmitFrame+0x1c0>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2202      	movs	r2, #2
 80029a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d109      	bne.n	80029c2 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80029be:	2301      	movs	r3, #1
 80029c0:	e0b8      	b.n	8002b34 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	da09      	bge.n	80029e0 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2212      	movs	r2, #18
 80029d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e0a9      	b.n	8002b34 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d915      	bls.n	8002a16 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	4a54      	ldr	r2, [pc, #336]	; (8002b40 <HAL_ETH_TransmitFrame+0x1cc>)
 80029ee:	fba2 2303 	umull	r2, r3, r2, r3
 80029f2:	0a9b      	lsrs	r3, r3, #10
 80029f4:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	4b51      	ldr	r3, [pc, #324]	; (8002b40 <HAL_ETH_TransmitFrame+0x1cc>)
 80029fa:	fba3 1302 	umull	r1, r3, r3, r2
 80029fe:	0a9b      	lsrs	r3, r3, #10
 8002a00:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8002a04:	fb01 f303 	mul.w	r3, r1, r3
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d005      	beq.n	8002a1a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	3301      	adds	r3, #1
 8002a12:	617b      	str	r3, [r7, #20]
 8002a14:	e001      	b.n	8002a1a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8002a16:	2301      	movs	r3, #1
 8002a18:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d11c      	bne.n	8002a5a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8002a2e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002a3a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a46:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a4a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	461a      	mov	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a58:	e04b      	b.n	8002af2 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	613b      	str	r3, [r7, #16]
 8002a5e:	e044      	b.n	8002aea <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a6e:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d107      	bne.n	8002a86 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a80:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002a84:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002a8e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d116      	bne.n	8002ac8 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002aa8:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	4a25      	ldr	r2, [pc, #148]	; (8002b44 <HAL_ETH_TransmitFrame+0x1d0>)
 8002aae:	fb02 f203 	mul.w	r2, r2, r3
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8002aba:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002ac6:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002ad6:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	613b      	str	r3, [r7, #16]
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d3b6      	bcc.n	8002a60 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002afa:	3314      	adds	r3, #20
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0304 	and.w	r3, r3, #4
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00d      	beq.n	8002b22 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b0e:	3314      	adds	r3, #20
 8002b10:	2204      	movs	r2, #4
 8002b12:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	2200      	movs	r2, #0
 8002b20:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	371c      	adds	r7, #28
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	ac02b00b 	.word	0xac02b00b
 8002b44:	fffffa0c 	.word	0xfffffa0c

08002b48 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d101      	bne.n	8002b62 <HAL_ETH_GetReceivedFrame+0x1a>
 8002b5e:	2302      	movs	r3, #2
 8002b60:	e070      	b.n	8002c44 <HAL_ETH_GetReceivedFrame+0xfc>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	db5a      	blt.n	8002c32 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d030      	beq.n	8002bec <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8e:	1c5a      	adds	r2, r3, #1
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d103      	bne.n	8002ba4 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	0c1b      	lsrs	r3, r3, #16
 8002bb4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002bb8:	3b04      	subs	r3, #4
 8002bba:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8002be8:	2300      	movs	r3, #0
 8002bea:	e02b      	b.n	8002c44 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d010      	beq.n	8002c1c <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	461a      	mov	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	629a      	str	r2, [r3, #40]	; 0x28
 8002c1a:	e00a      	b.n	8002c32 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c20:	1c5a      	adds	r2, r3, #1
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3714      	adds	r7, #20
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	460b      	mov	r3, r1
 8002c5a:	607a      	str	r2, [r7, #4]
 8002c5c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8002c5e:	2300      	movs	r3, #0
 8002c60:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002c62:	2300      	movs	r3, #0
 8002c64:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b82      	cmp	r3, #130	; 0x82
 8002c70:	d101      	bne.n	8002c76 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002c72:	2302      	movs	r3, #2
 8002c74:	e050      	b.n	8002d18 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2282      	movs	r2, #130	; 0x82
 8002c7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	f003 031c 	and.w	r3, r3, #28
 8002c8c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8a1b      	ldrh	r3, [r3, #16]
 8002c92:	02db      	lsls	r3, r3, #11
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002c9c:	897b      	ldrh	r3, [r7, #10]
 8002c9e:	019b      	lsls	r3, r3, #6
 8002ca0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f023 0302 	bic.w	r3, r3, #2
 8002cb0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	f043 0301 	orr.w	r3, r3, #1
 8002cb8:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002cc2:	f7fe ff05 	bl	8001ad0 <HAL_GetTick>
 8002cc6:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002cc8:	e015      	b.n	8002cf6 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002cca:	f7fe ff01 	bl	8001ad0 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cd8:	d309      	bcc.n	8002cee <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e014      	b.n	8002d18 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1e4      	bne.n	8002cca <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	461a      	mov	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3718      	adds	r7, #24
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	460b      	mov	r3, r1
 8002d2a:	607a      	str	r2, [r7, #4]
 8002d2c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b42      	cmp	r3, #66	; 0x42
 8002d40:	d101      	bne.n	8002d46 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002d42:	2302      	movs	r3, #2
 8002d44:	e04e      	b.n	8002de4 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2242      	movs	r2, #66	; 0x42
 8002d4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f003 031c 	and.w	r3, r3, #28
 8002d5c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8a1b      	ldrh	r3, [r3, #16]
 8002d62:	02db      	lsls	r3, r3, #11
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002d6c:	897b      	ldrh	r3, [r7, #10]
 8002d6e:	019b      	lsls	r3, r3, #6
 8002d70:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	f043 0302 	orr.w	r3, r3, #2
 8002d80:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f043 0301 	orr.w	r3, r3, #1
 8002d88:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002d9c:	f7fe fe98 	bl	8001ad0 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002da2:	e015      	b.n	8002dd0 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002da4:	f7fe fe94 	bl	8001ad0 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002db2:	d309      	bcc.n	8002dc8 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e00d      	b.n	8002de4 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1e4      	bne.n	8002da4 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3718      	adds	r7, #24
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d101      	bne.n	8002e02 <HAL_ETH_Start+0x16>
 8002dfe:	2302      	movs	r3, #2
 8002e00:	e01f      	b.n	8002e42 <HAL_ETH_Start+0x56>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 fb44 	bl	80034a0 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 fb7b 	bl	8003514 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 fc12 	bl	8003648 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 fbaf 	bl	8003588 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 fbdc 	bl	80035e8 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b082      	sub	sp, #8
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d101      	bne.n	8002e60 <HAL_ETH_Stop+0x16>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	e01f      	b.n	8002ea0 <HAL_ETH_Stop+0x56>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 fba1 	bl	80035b8 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 fbce 	bl	8003618 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 fb66 	bl	800354e <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 fbe0 	bl	8003648 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 fb26 	bl	80034da <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d101      	bne.n	8002ec4 <HAL_ETH_ConfigMAC+0x1c>
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	e0e4      	b.n	800308e <HAL_ETH_ConfigMAC+0x1e6>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2202      	movs	r2, #2
 8002ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 80b1 	beq.w	800303e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	4b6c      	ldr	r3, [pc, #432]	; (8003098 <HAL_ETH_ConfigMAC+0x1f0>)
 8002ee8:	4013      	ands	r3, r2
 8002eea:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002ef4:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8002efa:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8002f00:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8002f06:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8002f0c:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8002f12:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8002f18:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8002f1e:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8002f24:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8002f2a:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8002f30:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8002f36:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f4e:	2001      	movs	r0, #1
 8002f50:	f7fe fdca 	bl	8001ae8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002f64:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8002f6a:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8002f70:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8002f76:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8002f7c:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8002f82:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8002f8e:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002f90:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f9a:	2001      	movs	r0, #1
 8002f9c:	f7fe fda4 	bl	8001ae8 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002fb0:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002fba:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002fca:	4013      	ands	r3, r2
 8002fcc:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd2:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002fd8:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8002fde:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002fe4:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8002fea:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002ff0:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003008:	2001      	movs	r0, #1
 800300a:	f7fe fd6d 	bl	8001ae8 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	430a      	orrs	r2, r1
 8003024:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	69db      	ldr	r3, [r3, #28]
 800302c:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800302e:	2001      	movs	r0, #1
 8003030:	f7fe fd5a 	bl	8001ae8 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	61da      	str	r2, [r3, #28]
 800303c:	e01e      	b.n	800307c <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800304c:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689a      	ldr	r2, [r3, #8]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	4313      	orrs	r3, r2
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	4313      	orrs	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800306e:	2001      	movs	r0, #1
 8003070:	f7fe fd3a 	bl	8001ae8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	ff20810f 	.word	0xff20810f

0800309c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b0b0      	sub	sp, #192	; 0xc0
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80030a6:	2300      	movs	r3, #0
 80030a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d007      	beq.n	80030c2 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030b8:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80030c0:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80030c2:	2300      	movs	r3, #0
 80030c4:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80030c6:	2300      	movs	r3, #0
 80030c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80030ca:	2300      	movs	r3, #0
 80030cc:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80030ce:	2300      	movs	r3, #0
 80030d0:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80030d2:	2300      	movs	r3, #0
 80030d4:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80030d6:	2300      	movs	r3, #0
 80030d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d103      	bne.n	80030ea <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80030e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030e6:	663b      	str	r3, [r7, #96]	; 0x60
 80030e8:	e001      	b.n	80030ee <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80030ea:	2300      	movs	r3, #0
 80030ec:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80030ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030f2:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80030f4:	2300      	movs	r3, #0
 80030f6:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80030f8:	2300      	movs	r3, #0
 80030fa:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80030fc:	2300      	movs	r3, #0
 80030fe:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8003100:	2300      	movs	r3, #0
 8003102:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8003104:	2300      	movs	r3, #0
 8003106:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8003108:	2340      	movs	r3, #64	; 0x40
 800310a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800310c:	2300      	movs	r3, #0
 800310e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8003112:	2300      	movs	r3, #0
 8003114:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8003118:	2300      	movs	r3, #0
 800311a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800311e:	2300      	movs	r3, #0
 8003120:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8003124:	2300      	movs	r3, #0
 8003126:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800312a:	2300      	movs	r3, #0
 800312c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8003130:	2300      	movs	r3, #0
 8003132:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8003136:	2300      	movs	r3, #0
 8003138:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800313c:	2380      	movs	r3, #128	; 0x80
 800313e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003142:	2300      	movs	r3, #0
 8003144:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8003148:	2300      	movs	r3, #0
 800314a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800314e:	2300      	movs	r3, #0
 8003150:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8003154:	2300      	movs	r3, #0
 8003156:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800315a:	2300      	movs	r3, #0
 800315c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8003160:	2300      	movs	r3, #0
 8003162:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003170:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003174:	4bac      	ldr	r3, [pc, #688]	; (8003428 <ETH_MACDMAConfig+0x38c>)
 8003176:	4013      	ands	r3, r2
 8003178:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800317c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800317e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003180:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8003182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8003184:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8003186:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8003188:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800318e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8003190:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8003192:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8003194:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8003196:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800319c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800319e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80031a0:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80031a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80031a4:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80031a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80031a8:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80031aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80031ac:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80031ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80031b0:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80031b2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80031b6:	4313      	orrs	r3, r2
 80031b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80031c4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80031d0:	2001      	movs	r0, #1
 80031d2:	f7fe fc89 	bl	8001ae8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80031de:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80031e0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80031e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80031e4:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80031e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80031e8:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80031ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80031ee:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80031f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80031f4:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80031f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80031fa:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80031fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8003200:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003204:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800320c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800320e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800321a:	2001      	movs	r0, #1
 800321c:	f7fe fc64 	bl	8001ae8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003228:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003232:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800323c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003248:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800324c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003250:	4013      	ands	r3, r2
 8003252:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003256:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800325a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800325c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003260:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8003262:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8003266:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8003268:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800326c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800326e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8003272:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8003274:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8003278:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800327a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800327e:	4313      	orrs	r3, r2
 8003280:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800328c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003298:	2001      	movs	r0, #1
 800329a:	f7fe fc25 	bl	8001ae8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80032a6:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80032a8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80032ac:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	430a      	orrs	r2, r1
 80032b6:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80032c2:	2001      	movs	r0, #1
 80032c4:	f7fe fc10 	bl	8001ae8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80032d0:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80032d2:	2300      	movs	r3, #0
 80032d4:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80032d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032da:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80032dc:	2300      	movs	r3, #0
 80032de:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80032e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80032e4:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80032e6:	2300      	movs	r3, #0
 80032e8:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80032ea:	2300      	movs	r3, #0
 80032ec:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80032ee:	2300      	movs	r3, #0
 80032f0:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80032f2:	2300      	movs	r3, #0
 80032f4:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80032f6:	2304      	movs	r3, #4
 80032f8:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80032fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8003300:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003304:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003306:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800330a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800330c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003310:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8003312:	2380      	movs	r3, #128	; 0x80
 8003314:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8003316:	2300      	movs	r3, #0
 8003318:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800331a:	2300      	movs	r3, #0
 800331c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003326:	3318      	adds	r3, #24
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800332e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003332:	4b3e      	ldr	r3, [pc, #248]	; (800342c <ETH_MACDMAConfig+0x390>)
 8003334:	4013      	ands	r3, r2
 8003336:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800333a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800333c:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800333e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8003340:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8003342:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8003344:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8003346:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8003348:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800334a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800334c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800334e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8003350:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8003352:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8003354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8003356:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8003358:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800335a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800335c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003360:	4313      	orrs	r3, r2
 8003362:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800336e:	3318      	adds	r3, #24
 8003370:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003374:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800337e:	3318      	adds	r3, #24
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003386:	2001      	movs	r0, #1
 8003388:	f7fe fbae 	bl	8001ae8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003394:	3318      	adds	r3, #24
 8003396:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800339a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800339c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800339e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80033a0:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80033a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80033a4:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80033a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80033a8:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80033aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80033ac:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80033ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033b0:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80033b2:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80033b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80033b6:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80033c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033c4:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80033d4:	2001      	movs	r0, #1
 80033d6:	f7fe fb87 	bl	8001ae8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033e2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80033e6:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d10f      	bne.n	8003410 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033f8:	331c      	adds	r3, #28
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003404:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800340c:	331c      	adds	r3, #28
 800340e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	461a      	mov	r2, r3
 8003416:	2100      	movs	r1, #0
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 f809 	bl	8003430 <ETH_MACAddressConfig>
}
 800341e:	bf00      	nop
 8003420:	37c0      	adds	r7, #192	; 0xc0
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	ff20810f 	.word	0xff20810f
 800342c:	f8de3f23 	.word	0xf8de3f23

08003430 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003430:	b480      	push	{r7}
 8003432:	b087      	sub	sp, #28
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	3305      	adds	r3, #5
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	021b      	lsls	r3, r3, #8
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	3204      	adds	r2, #4
 8003448:	7812      	ldrb	r2, [r2, #0]
 800344a:	4313      	orrs	r3, r2
 800344c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800344e:	68ba      	ldr	r2, [r7, #8]
 8003450:	4b11      	ldr	r3, [pc, #68]	; (8003498 <ETH_MACAddressConfig+0x68>)
 8003452:	4413      	add	r3, r2
 8003454:	461a      	mov	r2, r3
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	3303      	adds	r3, #3
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	061a      	lsls	r2, r3, #24
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3302      	adds	r3, #2
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	041b      	lsls	r3, r3, #16
 800346a:	431a      	orrs	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3301      	adds	r3, #1
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	021b      	lsls	r3, r3, #8
 8003474:	4313      	orrs	r3, r2
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	7812      	ldrb	r2, [r2, #0]
 800347a:	4313      	orrs	r3, r2
 800347c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800347e:	68ba      	ldr	r2, [r7, #8]
 8003480:	4b06      	ldr	r3, [pc, #24]	; (800349c <ETH_MACAddressConfig+0x6c>)
 8003482:	4413      	add	r3, r2
 8003484:	461a      	mov	r2, r3
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	6013      	str	r3, [r2, #0]
}
 800348a:	bf00      	nop
 800348c:	371c      	adds	r7, #28
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	40028040 	.word	0x40028040
 800349c:	40028044 	.word	0x40028044

080034a0 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0208 	orr.w	r2, r2, #8
 80034ba:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80034c4:	2001      	movs	r0, #1
 80034c6:	f000 f8e9 	bl	800369c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	601a      	str	r2, [r3, #0]
}
 80034d2:	bf00      	nop
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80034da:	b580      	push	{r7, lr}
 80034dc:	b084      	sub	sp, #16
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80034e2:	2300      	movs	r3, #0
 80034e4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0208 	bic.w	r2, r2, #8
 80034f4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80034fe:	2001      	movs	r0, #1
 8003500:	f000 f8cc 	bl	800369c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	601a      	str	r2, [r3, #0]
}
 800350c:	bf00      	nop
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800351c:	2300      	movs	r3, #0
 800351e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f042 0204 	orr.w	r2, r2, #4
 800352e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003538:	2001      	movs	r0, #1
 800353a:	f000 f8af 	bl	800369c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	601a      	str	r2, [r3, #0]
}
 8003546:	bf00      	nop
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800354e:	b580      	push	{r7, lr}
 8003550:	b084      	sub	sp, #16
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003556:	2300      	movs	r3, #0
 8003558:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 0204 	bic.w	r2, r2, #4
 8003568:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003572:	2001      	movs	r0, #1
 8003574:	f000 f892 	bl	800369c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	601a      	str	r2, [r3, #0]
}
 8003580:	bf00      	nop
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003598:	3318      	adds	r3, #24
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035a8:	3318      	adds	r3, #24
 80035aa:	601a      	str	r2, [r3, #0]
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035c8:	3318      	adds	r3, #24
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035d8:	3318      	adds	r3, #24
 80035da:	601a      	str	r2, [r3, #0]
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035f8:	3318      	adds	r3, #24
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f042 0202 	orr.w	r2, r2, #2
 8003604:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003608:	3318      	adds	r3, #24
 800360a:	601a      	str	r2, [r3, #0]
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003628:	3318      	adds	r3, #24
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 0202 	bic.w	r2, r2, #2
 8003634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003638:	3318      	adds	r3, #24
 800363a:	601a      	str	r2, [r3, #0]
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003650:	2300      	movs	r3, #0
 8003652:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800365c:	3318      	adds	r3, #24
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800366c:	3318      	adds	r3, #24
 800366e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003678:	3318      	adds	r3, #24
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800367e:	2001      	movs	r0, #1
 8003680:	f000 f80c 	bl	800369c <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800368e:	3318      	adds	r3, #24
 8003690:	601a      	str	r2, [r3, #0]
}
 8003692:	bf00      	nop
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
	...

0800369c <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036a4:	4b0b      	ldr	r3, [pc, #44]	; (80036d4 <ETH_Delay+0x38>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a0b      	ldr	r2, [pc, #44]	; (80036d8 <ETH_Delay+0x3c>)
 80036aa:	fba2 2303 	umull	r2, r3, r2, r3
 80036ae:	0a5b      	lsrs	r3, r3, #9
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	fb02 f303 	mul.w	r3, r2, r3
 80036b6:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80036b8:	bf00      	nop
  } 
  while (Delay --);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	1e5a      	subs	r2, r3, #1
 80036be:	60fa      	str	r2, [r7, #12]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1f9      	bne.n	80036b8 <ETH_Delay+0x1c>
}
 80036c4:	bf00      	nop
 80036c6:	bf00      	nop
 80036c8:	3714      	adds	r7, #20
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	20000018 	.word	0x20000018
 80036d8:	10624dd3 	.word	0x10624dd3

080036dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036dc:	b480      	push	{r7}
 80036de:	b089      	sub	sp, #36	; 0x24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036e6:	2300      	movs	r3, #0
 80036e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036f2:	2300      	movs	r3, #0
 80036f4:	61fb      	str	r3, [r7, #28]
 80036f6:	e16b      	b.n	80039d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036f8:	2201      	movs	r2, #1
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	4013      	ands	r3, r2
 800370a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	429a      	cmp	r2, r3
 8003712:	f040 815a 	bne.w	80039ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f003 0303 	and.w	r3, r3, #3
 800371e:	2b01      	cmp	r3, #1
 8003720:	d005      	beq.n	800372e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800372a:	2b02      	cmp	r3, #2
 800372c:	d130      	bne.n	8003790 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	2203      	movs	r2, #3
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	43db      	mvns	r3, r3
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	4013      	ands	r3, r2
 8003744:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	68da      	ldr	r2, [r3, #12]
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	4313      	orrs	r3, r2
 8003756:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003764:	2201      	movs	r2, #1
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	43db      	mvns	r3, r3
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	4013      	ands	r3, r2
 8003772:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	091b      	lsrs	r3, r3, #4
 800377a:	f003 0201 	and.w	r2, r3, #1
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	4313      	orrs	r3, r2
 8003788:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 0303 	and.w	r3, r3, #3
 8003798:	2b03      	cmp	r3, #3
 800379a:	d017      	beq.n	80037cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	2203      	movs	r2, #3
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	43db      	mvns	r3, r3
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	4013      	ands	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	fa02 f303 	lsl.w	r3, r2, r3
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f003 0303 	and.w	r3, r3, #3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d123      	bne.n	8003820 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	08da      	lsrs	r2, r3, #3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3208      	adds	r2, #8
 80037e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	220f      	movs	r2, #15
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	43db      	mvns	r3, r3
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	4013      	ands	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	691a      	ldr	r2, [r3, #16]
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	f003 0307 	and.w	r3, r3, #7
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	4313      	orrs	r3, r2
 8003810:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	08da      	lsrs	r2, r3, #3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	3208      	adds	r2, #8
 800381a:	69b9      	ldr	r1, [r7, #24]
 800381c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	2203      	movs	r2, #3
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	43db      	mvns	r3, r3
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	4013      	ands	r3, r2
 8003836:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f003 0203 	and.w	r2, r3, #3
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	4313      	orrs	r3, r2
 800384c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 80b4 	beq.w	80039ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003862:	2300      	movs	r3, #0
 8003864:	60fb      	str	r3, [r7, #12]
 8003866:	4b60      	ldr	r3, [pc, #384]	; (80039e8 <HAL_GPIO_Init+0x30c>)
 8003868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386a:	4a5f      	ldr	r2, [pc, #380]	; (80039e8 <HAL_GPIO_Init+0x30c>)
 800386c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003870:	6453      	str	r3, [r2, #68]	; 0x44
 8003872:	4b5d      	ldr	r3, [pc, #372]	; (80039e8 <HAL_GPIO_Init+0x30c>)
 8003874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800387e:	4a5b      	ldr	r2, [pc, #364]	; (80039ec <HAL_GPIO_Init+0x310>)
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	089b      	lsrs	r3, r3, #2
 8003884:	3302      	adds	r3, #2
 8003886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800388a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	f003 0303 	and.w	r3, r3, #3
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	220f      	movs	r2, #15
 8003896:	fa02 f303 	lsl.w	r3, r2, r3
 800389a:	43db      	mvns	r3, r3
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	4013      	ands	r3, r2
 80038a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a52      	ldr	r2, [pc, #328]	; (80039f0 <HAL_GPIO_Init+0x314>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d02b      	beq.n	8003902 <HAL_GPIO_Init+0x226>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a51      	ldr	r2, [pc, #324]	; (80039f4 <HAL_GPIO_Init+0x318>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d025      	beq.n	80038fe <HAL_GPIO_Init+0x222>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a50      	ldr	r2, [pc, #320]	; (80039f8 <HAL_GPIO_Init+0x31c>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d01f      	beq.n	80038fa <HAL_GPIO_Init+0x21e>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a4f      	ldr	r2, [pc, #316]	; (80039fc <HAL_GPIO_Init+0x320>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d019      	beq.n	80038f6 <HAL_GPIO_Init+0x21a>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a4e      	ldr	r2, [pc, #312]	; (8003a00 <HAL_GPIO_Init+0x324>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d013      	beq.n	80038f2 <HAL_GPIO_Init+0x216>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a4d      	ldr	r2, [pc, #308]	; (8003a04 <HAL_GPIO_Init+0x328>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d00d      	beq.n	80038ee <HAL_GPIO_Init+0x212>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a4c      	ldr	r2, [pc, #304]	; (8003a08 <HAL_GPIO_Init+0x32c>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d007      	beq.n	80038ea <HAL_GPIO_Init+0x20e>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a4b      	ldr	r2, [pc, #300]	; (8003a0c <HAL_GPIO_Init+0x330>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d101      	bne.n	80038e6 <HAL_GPIO_Init+0x20a>
 80038e2:	2307      	movs	r3, #7
 80038e4:	e00e      	b.n	8003904 <HAL_GPIO_Init+0x228>
 80038e6:	2308      	movs	r3, #8
 80038e8:	e00c      	b.n	8003904 <HAL_GPIO_Init+0x228>
 80038ea:	2306      	movs	r3, #6
 80038ec:	e00a      	b.n	8003904 <HAL_GPIO_Init+0x228>
 80038ee:	2305      	movs	r3, #5
 80038f0:	e008      	b.n	8003904 <HAL_GPIO_Init+0x228>
 80038f2:	2304      	movs	r3, #4
 80038f4:	e006      	b.n	8003904 <HAL_GPIO_Init+0x228>
 80038f6:	2303      	movs	r3, #3
 80038f8:	e004      	b.n	8003904 <HAL_GPIO_Init+0x228>
 80038fa:	2302      	movs	r3, #2
 80038fc:	e002      	b.n	8003904 <HAL_GPIO_Init+0x228>
 80038fe:	2301      	movs	r3, #1
 8003900:	e000      	b.n	8003904 <HAL_GPIO_Init+0x228>
 8003902:	2300      	movs	r3, #0
 8003904:	69fa      	ldr	r2, [r7, #28]
 8003906:	f002 0203 	and.w	r2, r2, #3
 800390a:	0092      	lsls	r2, r2, #2
 800390c:	4093      	lsls	r3, r2
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	4313      	orrs	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003914:	4935      	ldr	r1, [pc, #212]	; (80039ec <HAL_GPIO_Init+0x310>)
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	089b      	lsrs	r3, r3, #2
 800391a:	3302      	adds	r3, #2
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003922:	4b3b      	ldr	r3, [pc, #236]	; (8003a10 <HAL_GPIO_Init+0x334>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	43db      	mvns	r3, r3
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	4013      	ands	r3, r2
 8003930:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	4313      	orrs	r3, r2
 8003944:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003946:	4a32      	ldr	r2, [pc, #200]	; (8003a10 <HAL_GPIO_Init+0x334>)
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800394c:	4b30      	ldr	r3, [pc, #192]	; (8003a10 <HAL_GPIO_Init+0x334>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	43db      	mvns	r3, r3
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	4013      	ands	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d003      	beq.n	8003970 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	4313      	orrs	r3, r2
 800396e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003970:	4a27      	ldr	r2, [pc, #156]	; (8003a10 <HAL_GPIO_Init+0x334>)
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003976:	4b26      	ldr	r3, [pc, #152]	; (8003a10 <HAL_GPIO_Init+0x334>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	43db      	mvns	r3, r3
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	4013      	ands	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	4313      	orrs	r3, r2
 8003998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800399a:	4a1d      	ldr	r2, [pc, #116]	; (8003a10 <HAL_GPIO_Init+0x334>)
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039a0:	4b1b      	ldr	r3, [pc, #108]	; (8003a10 <HAL_GPIO_Init+0x334>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	43db      	mvns	r3, r3
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	4013      	ands	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d003      	beq.n	80039c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039c4:	4a12      	ldr	r2, [pc, #72]	; (8003a10 <HAL_GPIO_Init+0x334>)
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	3301      	adds	r3, #1
 80039ce:	61fb      	str	r3, [r7, #28]
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	2b0f      	cmp	r3, #15
 80039d4:	f67f ae90 	bls.w	80036f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039d8:	bf00      	nop
 80039da:	bf00      	nop
 80039dc:	3724      	adds	r7, #36	; 0x24
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40023800 	.word	0x40023800
 80039ec:	40013800 	.word	0x40013800
 80039f0:	40020000 	.word	0x40020000
 80039f4:	40020400 	.word	0x40020400
 80039f8:	40020800 	.word	0x40020800
 80039fc:	40020c00 	.word	0x40020c00
 8003a00:	40021000 	.word	0x40021000
 8003a04:	40021400 	.word	0x40021400
 8003a08:	40021800 	.word	0x40021800
 8003a0c:	40021c00 	.word	0x40021c00
 8003a10:	40013c00 	.word	0x40013c00

08003a14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	807b      	strh	r3, [r7, #2]
 8003a20:	4613      	mov	r3, r2
 8003a22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a24:	787b      	ldrb	r3, [r7, #1]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a2a:	887a      	ldrh	r2, [r7, #2]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a30:	e003      	b.n	8003a3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a32:	887b      	ldrh	r3, [r7, #2]
 8003a34:	041a      	lsls	r2, r3, #16
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	619a      	str	r2, [r3, #24]
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
	...

08003a48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e264      	b.n	8003f24 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d075      	beq.n	8003b52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a66:	4ba3      	ldr	r3, [pc, #652]	; (8003cf4 <HAL_RCC_OscConfig+0x2ac>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 030c 	and.w	r3, r3, #12
 8003a6e:	2b04      	cmp	r3, #4
 8003a70:	d00c      	beq.n	8003a8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a72:	4ba0      	ldr	r3, [pc, #640]	; (8003cf4 <HAL_RCC_OscConfig+0x2ac>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a7a:	2b08      	cmp	r3, #8
 8003a7c:	d112      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a7e:	4b9d      	ldr	r3, [pc, #628]	; (8003cf4 <HAL_RCC_OscConfig+0x2ac>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a8a:	d10b      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a8c:	4b99      	ldr	r3, [pc, #612]	; (8003cf4 <HAL_RCC_OscConfig+0x2ac>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d05b      	beq.n	8003b50 <HAL_RCC_OscConfig+0x108>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d157      	bne.n	8003b50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e23f      	b.n	8003f24 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aac:	d106      	bne.n	8003abc <HAL_RCC_OscConfig+0x74>
 8003aae:	4b91      	ldr	r3, [pc, #580]	; (8003cf4 <HAL_RCC_OscConfig+0x2ac>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a90      	ldr	r2, [pc, #576]	; (8003cf4 <HAL_RCC_OscConfig+0x2ac>)
 8003ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab8:	6013      	str	r3, [r2, #0]
 8003aba:	e01d      	b.n	8003af8 <HAL_RCC_OscConfig+0xb0>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ac4:	d10c      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x98>
 8003ac6:	4b8b      	ldr	r3, [pc, #556]	; (8003cf4 <HAL_RCC_OscConfig+0x2ac>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a8a      	ldr	r2, [pc, #552]	; (8003cf4 <HAL_RCC_OscConfig+0x2ac>)
 8003acc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ad0:	6013      	str	r3, [r2, #0]
 8003ad2:	4b88      	ldr	r3, [pc, #544]	; (8003cf4 <HAL_RCC_OscConfig+0x2ac>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a87      	ldr	r2, [pc, #540]	; (8003cf4 <HAL_RCC_OscConfig+0x2ac>)
 8003ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003adc:	6013      	str	r3, [r2, #0]
 8003ade:	e00b      	b.n	8003af8 <HAL_RCC_OscConfig+0xb0>
 8003ae0:	4b84      	ldr	r3, [pc, #528]	; (8003cf4 <HAL_RCC_OscConfig+0x2ac>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a83      	ldr	r2, [pc, #524]	; (8003cf4 <HAL_RCC_OscConfig+0x2ac>)
 8003ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aea:	6013      	str	r3, [r2, #0]
 8003aec:	4b81      	ldr	r3, [pc, #516]	; (8003cf4 <HAL_RCC_OscConfig+0x2ac>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a80      	ldr	r2, [pc, #512]	; (8003cf4 <HAL_RCC_OscConfig+0x2ac>)
 8003af2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003af6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d013      	beq.n	8003b28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b00:	f7fd ffe6 	bl	8001ad0 <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b08:	f7fd ffe2 	bl	8001ad0 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b64      	cmp	r3, #100	; 0x64
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e204      	b.n	8003f24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b1a:	4b76      	ldr	r3, [pc, #472]	; (8003cf4 <HAL_RCC_OscConfig+0x2ac>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d0f0      	beq.n	8003b08 <HAL_RCC_OscConfig+0xc0>
 8003b26:	e014      	b.n	8003b52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b28:	f7fd ffd2 	bl	8001ad0 <HAL_GetTick>
 8003b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b30:	f7fd ffce 	bl	8001ad0 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b64      	cmp	r3, #100	; 0x64
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e1f0      	b.n	8003f24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b42:	4b6c      	ldr	r3, [pc, #432]	; (8003cf4 <HAL_RCC_OscConfig+0x2ac>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1f0      	bne.n	8003b30 <HAL_RCC_OscConfig+0xe8>
 8003b4e:	e000      	b.n	8003b52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d063      	beq.n	8003c26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b5e:	4b65      	ldr	r3, [pc, #404]	; (8003cf4 <HAL_RCC_OscConfig+0x2ac>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 030c 	and.w	r3, r3, #12
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00b      	beq.n	8003b82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b6a:	4b62      	ldr	r3, [pc, #392]	; (8003cf4 <HAL_RCC_OscConfig+0x2ac>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b72:	2b08      	cmp	r3, #8
 8003b74:	d11c      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b76:	4b5f      	ldr	r3, [pc, #380]	; (8003cf4 <HAL_RCC_OscConfig+0x2ac>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d116      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b82:	4b5c      	ldr	r3, [pc, #368]	; (8003cf4 <HAL_RCC_OscConfig+0x2ac>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d005      	beq.n	8003b9a <HAL_RCC_OscConfig+0x152>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d001      	beq.n	8003b9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e1c4      	b.n	8003f24 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b9a:	4b56      	ldr	r3, [pc, #344]	; (8003cf4 <HAL_RCC_OscConfig+0x2ac>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	4952      	ldr	r1, [pc, #328]	; (8003cf4 <HAL_RCC_OscConfig+0x2ac>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bae:	e03a      	b.n	8003c26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d020      	beq.n	8003bfa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bb8:	4b4f      	ldr	r3, [pc, #316]	; (8003cf8 <HAL_RCC_OscConfig+0x2b0>)
 8003bba:	2201      	movs	r2, #1
 8003bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbe:	f7fd ff87 	bl	8001ad0 <HAL_GetTick>
 8003bc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bc4:	e008      	b.n	8003bd8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bc6:	f7fd ff83 	bl	8001ad0 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e1a5      	b.n	8003f24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bd8:	4b46      	ldr	r3, [pc, #280]	; (8003cf4 <HAL_RCC_OscConfig+0x2ac>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0f0      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003be4:	4b43      	ldr	r3, [pc, #268]	; (8003cf4 <HAL_RCC_OscConfig+0x2ac>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	00db      	lsls	r3, r3, #3
 8003bf2:	4940      	ldr	r1, [pc, #256]	; (8003cf4 <HAL_RCC_OscConfig+0x2ac>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	600b      	str	r3, [r1, #0]
 8003bf8:	e015      	b.n	8003c26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bfa:	4b3f      	ldr	r3, [pc, #252]	; (8003cf8 <HAL_RCC_OscConfig+0x2b0>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c00:	f7fd ff66 	bl	8001ad0 <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c08:	f7fd ff62 	bl	8001ad0 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e184      	b.n	8003f24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c1a:	4b36      	ldr	r3, [pc, #216]	; (8003cf4 <HAL_RCC_OscConfig+0x2ac>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1f0      	bne.n	8003c08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0308 	and.w	r3, r3, #8
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d030      	beq.n	8003c94 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d016      	beq.n	8003c68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c3a:	4b30      	ldr	r3, [pc, #192]	; (8003cfc <HAL_RCC_OscConfig+0x2b4>)
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c40:	f7fd ff46 	bl	8001ad0 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c48:	f7fd ff42 	bl	8001ad0 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e164      	b.n	8003f24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c5a:	4b26      	ldr	r3, [pc, #152]	; (8003cf4 <HAL_RCC_OscConfig+0x2ac>)
 8003c5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d0f0      	beq.n	8003c48 <HAL_RCC_OscConfig+0x200>
 8003c66:	e015      	b.n	8003c94 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c68:	4b24      	ldr	r3, [pc, #144]	; (8003cfc <HAL_RCC_OscConfig+0x2b4>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c6e:	f7fd ff2f 	bl	8001ad0 <HAL_GetTick>
 8003c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c74:	e008      	b.n	8003c88 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c76:	f7fd ff2b 	bl	8001ad0 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d901      	bls.n	8003c88 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e14d      	b.n	8003f24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c88:	4b1a      	ldr	r3, [pc, #104]	; (8003cf4 <HAL_RCC_OscConfig+0x2ac>)
 8003c8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1f0      	bne.n	8003c76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0304 	and.w	r3, r3, #4
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 80a0 	beq.w	8003de2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ca6:	4b13      	ldr	r3, [pc, #76]	; (8003cf4 <HAL_RCC_OscConfig+0x2ac>)
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10f      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60bb      	str	r3, [r7, #8]
 8003cb6:	4b0f      	ldr	r3, [pc, #60]	; (8003cf4 <HAL_RCC_OscConfig+0x2ac>)
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cba:	4a0e      	ldr	r2, [pc, #56]	; (8003cf4 <HAL_RCC_OscConfig+0x2ac>)
 8003cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8003cc2:	4b0c      	ldr	r3, [pc, #48]	; (8003cf4 <HAL_RCC_OscConfig+0x2ac>)
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cca:	60bb      	str	r3, [r7, #8]
 8003ccc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd2:	4b0b      	ldr	r3, [pc, #44]	; (8003d00 <HAL_RCC_OscConfig+0x2b8>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d121      	bne.n	8003d22 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cde:	4b08      	ldr	r3, [pc, #32]	; (8003d00 <HAL_RCC_OscConfig+0x2b8>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a07      	ldr	r2, [pc, #28]	; (8003d00 <HAL_RCC_OscConfig+0x2b8>)
 8003ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ce8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cea:	f7fd fef1 	bl	8001ad0 <HAL_GetTick>
 8003cee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf0:	e011      	b.n	8003d16 <HAL_RCC_OscConfig+0x2ce>
 8003cf2:	bf00      	nop
 8003cf4:	40023800 	.word	0x40023800
 8003cf8:	42470000 	.word	0x42470000
 8003cfc:	42470e80 	.word	0x42470e80
 8003d00:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d04:	f7fd fee4 	bl	8001ad0 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e106      	b.n	8003f24 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d16:	4b85      	ldr	r3, [pc, #532]	; (8003f2c <HAL_RCC_OscConfig+0x4e4>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d0f0      	beq.n	8003d04 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d106      	bne.n	8003d38 <HAL_RCC_OscConfig+0x2f0>
 8003d2a:	4b81      	ldr	r3, [pc, #516]	; (8003f30 <HAL_RCC_OscConfig+0x4e8>)
 8003d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2e:	4a80      	ldr	r2, [pc, #512]	; (8003f30 <HAL_RCC_OscConfig+0x4e8>)
 8003d30:	f043 0301 	orr.w	r3, r3, #1
 8003d34:	6713      	str	r3, [r2, #112]	; 0x70
 8003d36:	e01c      	b.n	8003d72 <HAL_RCC_OscConfig+0x32a>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	2b05      	cmp	r3, #5
 8003d3e:	d10c      	bne.n	8003d5a <HAL_RCC_OscConfig+0x312>
 8003d40:	4b7b      	ldr	r3, [pc, #492]	; (8003f30 <HAL_RCC_OscConfig+0x4e8>)
 8003d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d44:	4a7a      	ldr	r2, [pc, #488]	; (8003f30 <HAL_RCC_OscConfig+0x4e8>)
 8003d46:	f043 0304 	orr.w	r3, r3, #4
 8003d4a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d4c:	4b78      	ldr	r3, [pc, #480]	; (8003f30 <HAL_RCC_OscConfig+0x4e8>)
 8003d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d50:	4a77      	ldr	r2, [pc, #476]	; (8003f30 <HAL_RCC_OscConfig+0x4e8>)
 8003d52:	f043 0301 	orr.w	r3, r3, #1
 8003d56:	6713      	str	r3, [r2, #112]	; 0x70
 8003d58:	e00b      	b.n	8003d72 <HAL_RCC_OscConfig+0x32a>
 8003d5a:	4b75      	ldr	r3, [pc, #468]	; (8003f30 <HAL_RCC_OscConfig+0x4e8>)
 8003d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5e:	4a74      	ldr	r2, [pc, #464]	; (8003f30 <HAL_RCC_OscConfig+0x4e8>)
 8003d60:	f023 0301 	bic.w	r3, r3, #1
 8003d64:	6713      	str	r3, [r2, #112]	; 0x70
 8003d66:	4b72      	ldr	r3, [pc, #456]	; (8003f30 <HAL_RCC_OscConfig+0x4e8>)
 8003d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6a:	4a71      	ldr	r2, [pc, #452]	; (8003f30 <HAL_RCC_OscConfig+0x4e8>)
 8003d6c:	f023 0304 	bic.w	r3, r3, #4
 8003d70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d015      	beq.n	8003da6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d7a:	f7fd fea9 	bl	8001ad0 <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d80:	e00a      	b.n	8003d98 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d82:	f7fd fea5 	bl	8001ad0 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e0c5      	b.n	8003f24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d98:	4b65      	ldr	r3, [pc, #404]	; (8003f30 <HAL_RCC_OscConfig+0x4e8>)
 8003d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d0ee      	beq.n	8003d82 <HAL_RCC_OscConfig+0x33a>
 8003da4:	e014      	b.n	8003dd0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003da6:	f7fd fe93 	bl	8001ad0 <HAL_GetTick>
 8003daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dac:	e00a      	b.n	8003dc4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dae:	f7fd fe8f 	bl	8001ad0 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e0af      	b.n	8003f24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dc4:	4b5a      	ldr	r3, [pc, #360]	; (8003f30 <HAL_RCC_OscConfig+0x4e8>)
 8003dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1ee      	bne.n	8003dae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dd0:	7dfb      	ldrb	r3, [r7, #23]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d105      	bne.n	8003de2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dd6:	4b56      	ldr	r3, [pc, #344]	; (8003f30 <HAL_RCC_OscConfig+0x4e8>)
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	4a55      	ldr	r2, [pc, #340]	; (8003f30 <HAL_RCC_OscConfig+0x4e8>)
 8003ddc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003de0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 809b 	beq.w	8003f22 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dec:	4b50      	ldr	r3, [pc, #320]	; (8003f30 <HAL_RCC_OscConfig+0x4e8>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f003 030c 	and.w	r3, r3, #12
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	d05c      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d141      	bne.n	8003e84 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e00:	4b4c      	ldr	r3, [pc, #304]	; (8003f34 <HAL_RCC_OscConfig+0x4ec>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e06:	f7fd fe63 	bl	8001ad0 <HAL_GetTick>
 8003e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e0c:	e008      	b.n	8003e20 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e0e:	f7fd fe5f 	bl	8001ad0 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d901      	bls.n	8003e20 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e081      	b.n	8003f24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e20:	4b43      	ldr	r3, [pc, #268]	; (8003f30 <HAL_RCC_OscConfig+0x4e8>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1f0      	bne.n	8003e0e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	69da      	ldr	r2, [r3, #28]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	431a      	orrs	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3a:	019b      	lsls	r3, r3, #6
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e42:	085b      	lsrs	r3, r3, #1
 8003e44:	3b01      	subs	r3, #1
 8003e46:	041b      	lsls	r3, r3, #16
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4e:	061b      	lsls	r3, r3, #24
 8003e50:	4937      	ldr	r1, [pc, #220]	; (8003f30 <HAL_RCC_OscConfig+0x4e8>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e56:	4b37      	ldr	r3, [pc, #220]	; (8003f34 <HAL_RCC_OscConfig+0x4ec>)
 8003e58:	2201      	movs	r2, #1
 8003e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e5c:	f7fd fe38 	bl	8001ad0 <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e62:	e008      	b.n	8003e76 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e64:	f7fd fe34 	bl	8001ad0 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e056      	b.n	8003f24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e76:	4b2e      	ldr	r3, [pc, #184]	; (8003f30 <HAL_RCC_OscConfig+0x4e8>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d0f0      	beq.n	8003e64 <HAL_RCC_OscConfig+0x41c>
 8003e82:	e04e      	b.n	8003f22 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e84:	4b2b      	ldr	r3, [pc, #172]	; (8003f34 <HAL_RCC_OscConfig+0x4ec>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e8a:	f7fd fe21 	bl	8001ad0 <HAL_GetTick>
 8003e8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e90:	e008      	b.n	8003ea4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e92:	f7fd fe1d 	bl	8001ad0 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e03f      	b.n	8003f24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ea4:	4b22      	ldr	r3, [pc, #136]	; (8003f30 <HAL_RCC_OscConfig+0x4e8>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1f0      	bne.n	8003e92 <HAL_RCC_OscConfig+0x44a>
 8003eb0:	e037      	b.n	8003f22 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d101      	bne.n	8003ebe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e032      	b.n	8003f24 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ebe:	4b1c      	ldr	r3, [pc, #112]	; (8003f30 <HAL_RCC_OscConfig+0x4e8>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d028      	beq.n	8003f1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d121      	bne.n	8003f1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d11a      	bne.n	8003f1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003eee:	4013      	ands	r3, r2
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ef4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d111      	bne.n	8003f1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f04:	085b      	lsrs	r3, r3, #1
 8003f06:	3b01      	subs	r3, #1
 8003f08:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d107      	bne.n	8003f1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f18:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d001      	beq.n	8003f22 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e000      	b.n	8003f24 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3718      	adds	r7, #24
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	40007000 	.word	0x40007000
 8003f30:	40023800 	.word	0x40023800
 8003f34:	42470060 	.word	0x42470060

08003f38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d101      	bne.n	8003f4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e0cc      	b.n	80040e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f4c:	4b68      	ldr	r3, [pc, #416]	; (80040f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0307 	and.w	r3, r3, #7
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d90c      	bls.n	8003f74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f5a:	4b65      	ldr	r3, [pc, #404]	; (80040f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f62:	4b63      	ldr	r3, [pc, #396]	; (80040f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0307 	and.w	r3, r3, #7
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d001      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e0b8      	b.n	80040e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d020      	beq.n	8003fc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d005      	beq.n	8003f98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f8c:	4b59      	ldr	r3, [pc, #356]	; (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	4a58      	ldr	r2, [pc, #352]	; (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0308 	and.w	r3, r3, #8
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d005      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fa4:	4b53      	ldr	r3, [pc, #332]	; (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	4a52      	ldr	r2, [pc, #328]	; (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003faa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fb0:	4b50      	ldr	r3, [pc, #320]	; (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	494d      	ldr	r1, [pc, #308]	; (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d044      	beq.n	8004058 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d107      	bne.n	8003fe6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fd6:	4b47      	ldr	r3, [pc, #284]	; (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d119      	bne.n	8004016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e07f      	b.n	80040e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d003      	beq.n	8003ff6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ff2:	2b03      	cmp	r3, #3
 8003ff4:	d107      	bne.n	8004006 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ff6:	4b3f      	ldr	r3, [pc, #252]	; (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d109      	bne.n	8004016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e06f      	b.n	80040e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004006:	4b3b      	ldr	r3, [pc, #236]	; (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e067      	b.n	80040e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004016:	4b37      	ldr	r3, [pc, #220]	; (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f023 0203 	bic.w	r2, r3, #3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	4934      	ldr	r1, [pc, #208]	; (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004024:	4313      	orrs	r3, r2
 8004026:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004028:	f7fd fd52 	bl	8001ad0 <HAL_GetTick>
 800402c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800402e:	e00a      	b.n	8004046 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004030:	f7fd fd4e 	bl	8001ad0 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	f241 3288 	movw	r2, #5000	; 0x1388
 800403e:	4293      	cmp	r3, r2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e04f      	b.n	80040e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004046:	4b2b      	ldr	r3, [pc, #172]	; (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f003 020c 	and.w	r2, r3, #12
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	429a      	cmp	r2, r3
 8004056:	d1eb      	bne.n	8004030 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004058:	4b25      	ldr	r3, [pc, #148]	; (80040f0 <HAL_RCC_ClockConfig+0x1b8>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	683a      	ldr	r2, [r7, #0]
 8004062:	429a      	cmp	r2, r3
 8004064:	d20c      	bcs.n	8004080 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004066:	4b22      	ldr	r3, [pc, #136]	; (80040f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004068:	683a      	ldr	r2, [r7, #0]
 800406a:	b2d2      	uxtb	r2, r2
 800406c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800406e:	4b20      	ldr	r3, [pc, #128]	; (80040f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0307 	and.w	r3, r3, #7
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	429a      	cmp	r2, r3
 800407a:	d001      	beq.n	8004080 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e032      	b.n	80040e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0304 	and.w	r3, r3, #4
 8004088:	2b00      	cmp	r3, #0
 800408a:	d008      	beq.n	800409e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800408c:	4b19      	ldr	r3, [pc, #100]	; (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	4916      	ldr	r1, [pc, #88]	; (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 800409a:	4313      	orrs	r3, r2
 800409c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0308 	and.w	r3, r3, #8
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d009      	beq.n	80040be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040aa:	4b12      	ldr	r3, [pc, #72]	; (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	490e      	ldr	r1, [pc, #56]	; (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040be:	f000 f821 	bl	8004104 <HAL_RCC_GetSysClockFreq>
 80040c2:	4602      	mov	r2, r0
 80040c4:	4b0b      	ldr	r3, [pc, #44]	; (80040f4 <HAL_RCC_ClockConfig+0x1bc>)
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	091b      	lsrs	r3, r3, #4
 80040ca:	f003 030f 	and.w	r3, r3, #15
 80040ce:	490a      	ldr	r1, [pc, #40]	; (80040f8 <HAL_RCC_ClockConfig+0x1c0>)
 80040d0:	5ccb      	ldrb	r3, [r1, r3]
 80040d2:	fa22 f303 	lsr.w	r3, r2, r3
 80040d6:	4a09      	ldr	r2, [pc, #36]	; (80040fc <HAL_RCC_ClockConfig+0x1c4>)
 80040d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040da:	4b09      	ldr	r3, [pc, #36]	; (8004100 <HAL_RCC_ClockConfig+0x1c8>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4618      	mov	r0, r3
 80040e0:	f7fd fcb2 	bl	8001a48 <HAL_InitTick>

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	40023c00 	.word	0x40023c00
 80040f4:	40023800 	.word	0x40023800
 80040f8:	0801b7a8 	.word	0x0801b7a8
 80040fc:	20000018 	.word	0x20000018
 8004100:	2000001c 	.word	0x2000001c

08004104 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004104:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004108:	b084      	sub	sp, #16
 800410a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800410c:	2300      	movs	r3, #0
 800410e:	607b      	str	r3, [r7, #4]
 8004110:	2300      	movs	r3, #0
 8004112:	60fb      	str	r3, [r7, #12]
 8004114:	2300      	movs	r3, #0
 8004116:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004118:	2300      	movs	r3, #0
 800411a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800411c:	4b67      	ldr	r3, [pc, #412]	; (80042bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f003 030c 	and.w	r3, r3, #12
 8004124:	2b08      	cmp	r3, #8
 8004126:	d00d      	beq.n	8004144 <HAL_RCC_GetSysClockFreq+0x40>
 8004128:	2b08      	cmp	r3, #8
 800412a:	f200 80bd 	bhi.w	80042a8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800412e:	2b00      	cmp	r3, #0
 8004130:	d002      	beq.n	8004138 <HAL_RCC_GetSysClockFreq+0x34>
 8004132:	2b04      	cmp	r3, #4
 8004134:	d003      	beq.n	800413e <HAL_RCC_GetSysClockFreq+0x3a>
 8004136:	e0b7      	b.n	80042a8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004138:	4b61      	ldr	r3, [pc, #388]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800413a:	60bb      	str	r3, [r7, #8]
       break;
 800413c:	e0b7      	b.n	80042ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800413e:	4b61      	ldr	r3, [pc, #388]	; (80042c4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004140:	60bb      	str	r3, [r7, #8]
      break;
 8004142:	e0b4      	b.n	80042ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004144:	4b5d      	ldr	r3, [pc, #372]	; (80042bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800414c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800414e:	4b5b      	ldr	r3, [pc, #364]	; (80042bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d04d      	beq.n	80041f6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800415a:	4b58      	ldr	r3, [pc, #352]	; (80042bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	099b      	lsrs	r3, r3, #6
 8004160:	461a      	mov	r2, r3
 8004162:	f04f 0300 	mov.w	r3, #0
 8004166:	f240 10ff 	movw	r0, #511	; 0x1ff
 800416a:	f04f 0100 	mov.w	r1, #0
 800416e:	ea02 0800 	and.w	r8, r2, r0
 8004172:	ea03 0901 	and.w	r9, r3, r1
 8004176:	4640      	mov	r0, r8
 8004178:	4649      	mov	r1, r9
 800417a:	f04f 0200 	mov.w	r2, #0
 800417e:	f04f 0300 	mov.w	r3, #0
 8004182:	014b      	lsls	r3, r1, #5
 8004184:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004188:	0142      	lsls	r2, r0, #5
 800418a:	4610      	mov	r0, r2
 800418c:	4619      	mov	r1, r3
 800418e:	ebb0 0008 	subs.w	r0, r0, r8
 8004192:	eb61 0109 	sbc.w	r1, r1, r9
 8004196:	f04f 0200 	mov.w	r2, #0
 800419a:	f04f 0300 	mov.w	r3, #0
 800419e:	018b      	lsls	r3, r1, #6
 80041a0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80041a4:	0182      	lsls	r2, r0, #6
 80041a6:	1a12      	subs	r2, r2, r0
 80041a8:	eb63 0301 	sbc.w	r3, r3, r1
 80041ac:	f04f 0000 	mov.w	r0, #0
 80041b0:	f04f 0100 	mov.w	r1, #0
 80041b4:	00d9      	lsls	r1, r3, #3
 80041b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041ba:	00d0      	lsls	r0, r2, #3
 80041bc:	4602      	mov	r2, r0
 80041be:	460b      	mov	r3, r1
 80041c0:	eb12 0208 	adds.w	r2, r2, r8
 80041c4:	eb43 0309 	adc.w	r3, r3, r9
 80041c8:	f04f 0000 	mov.w	r0, #0
 80041cc:	f04f 0100 	mov.w	r1, #0
 80041d0:	0259      	lsls	r1, r3, #9
 80041d2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80041d6:	0250      	lsls	r0, r2, #9
 80041d8:	4602      	mov	r2, r0
 80041da:	460b      	mov	r3, r1
 80041dc:	4610      	mov	r0, r2
 80041de:	4619      	mov	r1, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	461a      	mov	r2, r3
 80041e4:	f04f 0300 	mov.w	r3, #0
 80041e8:	f7fc f85a 	bl	80002a0 <__aeabi_uldivmod>
 80041ec:	4602      	mov	r2, r0
 80041ee:	460b      	mov	r3, r1
 80041f0:	4613      	mov	r3, r2
 80041f2:	60fb      	str	r3, [r7, #12]
 80041f4:	e04a      	b.n	800428c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041f6:	4b31      	ldr	r3, [pc, #196]	; (80042bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	099b      	lsrs	r3, r3, #6
 80041fc:	461a      	mov	r2, r3
 80041fe:	f04f 0300 	mov.w	r3, #0
 8004202:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004206:	f04f 0100 	mov.w	r1, #0
 800420a:	ea02 0400 	and.w	r4, r2, r0
 800420e:	ea03 0501 	and.w	r5, r3, r1
 8004212:	4620      	mov	r0, r4
 8004214:	4629      	mov	r1, r5
 8004216:	f04f 0200 	mov.w	r2, #0
 800421a:	f04f 0300 	mov.w	r3, #0
 800421e:	014b      	lsls	r3, r1, #5
 8004220:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004224:	0142      	lsls	r2, r0, #5
 8004226:	4610      	mov	r0, r2
 8004228:	4619      	mov	r1, r3
 800422a:	1b00      	subs	r0, r0, r4
 800422c:	eb61 0105 	sbc.w	r1, r1, r5
 8004230:	f04f 0200 	mov.w	r2, #0
 8004234:	f04f 0300 	mov.w	r3, #0
 8004238:	018b      	lsls	r3, r1, #6
 800423a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800423e:	0182      	lsls	r2, r0, #6
 8004240:	1a12      	subs	r2, r2, r0
 8004242:	eb63 0301 	sbc.w	r3, r3, r1
 8004246:	f04f 0000 	mov.w	r0, #0
 800424a:	f04f 0100 	mov.w	r1, #0
 800424e:	00d9      	lsls	r1, r3, #3
 8004250:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004254:	00d0      	lsls	r0, r2, #3
 8004256:	4602      	mov	r2, r0
 8004258:	460b      	mov	r3, r1
 800425a:	1912      	adds	r2, r2, r4
 800425c:	eb45 0303 	adc.w	r3, r5, r3
 8004260:	f04f 0000 	mov.w	r0, #0
 8004264:	f04f 0100 	mov.w	r1, #0
 8004268:	0299      	lsls	r1, r3, #10
 800426a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800426e:	0290      	lsls	r0, r2, #10
 8004270:	4602      	mov	r2, r0
 8004272:	460b      	mov	r3, r1
 8004274:	4610      	mov	r0, r2
 8004276:	4619      	mov	r1, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	461a      	mov	r2, r3
 800427c:	f04f 0300 	mov.w	r3, #0
 8004280:	f7fc f80e 	bl	80002a0 <__aeabi_uldivmod>
 8004284:	4602      	mov	r2, r0
 8004286:	460b      	mov	r3, r1
 8004288:	4613      	mov	r3, r2
 800428a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800428c:	4b0b      	ldr	r3, [pc, #44]	; (80042bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	0c1b      	lsrs	r3, r3, #16
 8004292:	f003 0303 	and.w	r3, r3, #3
 8004296:	3301      	adds	r3, #1
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a4:	60bb      	str	r3, [r7, #8]
      break;
 80042a6:	e002      	b.n	80042ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042a8:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80042aa:	60bb      	str	r3, [r7, #8]
      break;
 80042ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042ae:	68bb      	ldr	r3, [r7, #8]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80042ba:	bf00      	nop
 80042bc:	40023800 	.word	0x40023800
 80042c0:	00f42400 	.word	0x00f42400
 80042c4:	007a1200 	.word	0x007a1200

080042c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042cc:	4b03      	ldr	r3, [pc, #12]	; (80042dc <HAL_RCC_GetHCLKFreq+0x14>)
 80042ce:	681b      	ldr	r3, [r3, #0]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	20000018 	.word	0x20000018

080042e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042e4:	f7ff fff0 	bl	80042c8 <HAL_RCC_GetHCLKFreq>
 80042e8:	4602      	mov	r2, r0
 80042ea:	4b05      	ldr	r3, [pc, #20]	; (8004300 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	0a9b      	lsrs	r3, r3, #10
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	4903      	ldr	r1, [pc, #12]	; (8004304 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042f6:	5ccb      	ldrb	r3, [r1, r3]
 80042f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	40023800 	.word	0x40023800
 8004304:	0801b7b8 	.word	0x0801b7b8

08004308 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800430c:	f7ff ffdc 	bl	80042c8 <HAL_RCC_GetHCLKFreq>
 8004310:	4602      	mov	r2, r0
 8004312:	4b05      	ldr	r3, [pc, #20]	; (8004328 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	0b5b      	lsrs	r3, r3, #13
 8004318:	f003 0307 	and.w	r3, r3, #7
 800431c:	4903      	ldr	r1, [pc, #12]	; (800432c <HAL_RCC_GetPCLK2Freq+0x24>)
 800431e:	5ccb      	ldrb	r3, [r1, r3]
 8004320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004324:	4618      	mov	r0, r3
 8004326:	bd80      	pop	{r7, pc}
 8004328:	40023800 	.word	0x40023800
 800432c:	0801b7b8 	.word	0x0801b7b8

08004330 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e022      	b.n	8004388 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d105      	bne.n	800435a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f7fc fffd 	bl	8001354 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2203      	movs	r2, #3
 800435e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f814 	bl	8004390 <HAL_SD_InitCard>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e00a      	b.n	8004388 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3708      	adds	r7, #8
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004390:	b5b0      	push	{r4, r5, r7, lr}
 8004392:	b08e      	sub	sp, #56	; 0x38
 8004394:	af04      	add	r7, sp, #16
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004398:	2300      	movs	r3, #0
 800439a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800439c:	2300      	movs	r3, #0
 800439e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80043a0:	2300      	movs	r3, #0
 80043a2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80043a4:	2300      	movs	r3, #0
 80043a6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80043a8:	2300      	movs	r3, #0
 80043aa:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80043ac:	2376      	movs	r3, #118	; 0x76
 80043ae:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681d      	ldr	r5, [r3, #0]
 80043b4:	466c      	mov	r4, sp
 80043b6:	f107 0314 	add.w	r3, r7, #20
 80043ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80043be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80043c2:	f107 0308 	add.w	r3, r7, #8
 80043c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043c8:	4628      	mov	r0, r5
 80043ca:	f001 fdf5 	bl	8005fb8 <SDIO_Init>
 80043ce:	4603      	mov	r3, r0
 80043d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80043d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d001      	beq.n	80043e0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e04c      	b.n	800447a <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80043e0:	4b28      	ldr	r3, [pc, #160]	; (8004484 <HAL_SD_InitCard+0xf4>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f001 fe2d 	bl	800604a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80043f0:	4b24      	ldr	r3, [pc, #144]	; (8004484 <HAL_SD_InitCard+0xf4>)
 80043f2:	2201      	movs	r2, #1
 80043f4:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f001 f804 	bl	8005404 <SD_PowerON>
 80043fc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80043fe:	6a3b      	ldr	r3, [r7, #32]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00b      	beq.n	800441c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	431a      	orrs	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e02e      	b.n	800447a <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 ff25 	bl	800526c <SD_InitCard>
 8004422:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004424:	6a3b      	ldr	r3, [r7, #32]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00b      	beq.n	8004442 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004436:	6a3b      	ldr	r3, [r7, #32]
 8004438:	431a      	orrs	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e01b      	b.n	800447a <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f44f 7100 	mov.w	r1, #512	; 0x200
 800444a:	4618      	mov	r0, r3
 800444c:	f001 fe90 	bl	8006170 <SDMMC_CmdBlockLength>
 8004450:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004452:	6a3b      	ldr	r3, [r7, #32]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00f      	beq.n	8004478 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a0a      	ldr	r2, [pc, #40]	; (8004488 <HAL_SD_InitCard+0xf8>)
 800445e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004464:	6a3b      	ldr	r3, [r7, #32]
 8004466:	431a      	orrs	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e000      	b.n	800447a <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3728      	adds	r7, #40	; 0x28
 800447e:	46bd      	mov	sp, r7
 8004480:	bdb0      	pop	{r4, r5, r7, pc}
 8004482:	bf00      	nop
 8004484:	422580a0 	.word	0x422580a0
 8004488:	004005ff 	.word	0x004005ff

0800448c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b08c      	sub	sp, #48	; 0x30
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
 8004498:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d107      	bne.n	80044b4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e0c0      	b.n	8004636 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b01      	cmp	r3, #1
 80044be:	f040 80b9 	bne.w	8004634 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80044c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	441a      	add	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d907      	bls.n	80044e6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044da:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e0a7      	b.n	8004636 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2203      	movs	r2, #3
 80044ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2200      	movs	r2, #0
 80044f4:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	6812      	ldr	r2, [r2, #0]
 8004500:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8004504:	f043 0302 	orr.w	r3, r3, #2
 8004508:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	4a4c      	ldr	r2, [pc, #304]	; (8004640 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8004510:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	4a4b      	ldr	r2, [pc, #300]	; (8004644 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8004518:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451e:	2200      	movs	r2, #0
 8004520:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	2200      	movs	r2, #0
 8004528:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453a:	689a      	ldr	r2, [r3, #8]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	430a      	orrs	r2, r1
 8004544:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	3380      	adds	r3, #128	; 0x80
 8004550:	4619      	mov	r1, r3
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	025b      	lsls	r3, r3, #9
 8004558:	089b      	lsrs	r3, r3, #2
 800455a:	f7fd fca9 	bl	8001eb0 <HAL_DMA_Start_IT>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d017      	beq.n	8004594 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8004572:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a33      	ldr	r2, [pc, #204]	; (8004648 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800457a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004580:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e050      	b.n	8004636 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8004594:	4b2d      	ldr	r3, [pc, #180]	; (800464c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8004596:	2201      	movs	r2, #1
 8004598:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d002      	beq.n	80045a8 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80045a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a4:	025b      	lsls	r3, r3, #9
 80045a6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80045a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045ac:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	025b      	lsls	r3, r3, #9
 80045b2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80045b4:	2390      	movs	r3, #144	; 0x90
 80045b6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80045b8:	2302      	movs	r3, #2
 80045ba:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80045bc:	2300      	movs	r3, #0
 80045be:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80045c0:	2301      	movs	r3, #1
 80045c2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f107 0210 	add.w	r2, r7, #16
 80045cc:	4611      	mov	r1, r2
 80045ce:	4618      	mov	r0, r3
 80045d0:	f001 fda2 	bl	8006118 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d90a      	bls.n	80045f0 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2282      	movs	r2, #130	; 0x82
 80045de:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045e6:	4618      	mov	r0, r3
 80045e8:	f001 fe06 	bl	80061f8 <SDMMC_CmdReadMultiBlock>
 80045ec:	62f8      	str	r0, [r7, #44]	; 0x2c
 80045ee:	e009      	b.n	8004604 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2281      	movs	r2, #129	; 0x81
 80045f4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045fc:	4618      	mov	r0, r3
 80045fe:	f001 fdd9 	bl	80061b4 <SDMMC_CmdReadSingleBlock>
 8004602:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8004604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004606:	2b00      	cmp	r3, #0
 8004608:	d012      	beq.n	8004630 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a0e      	ldr	r2, [pc, #56]	; (8004648 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8004610:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004618:	431a      	orrs	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e002      	b.n	8004636 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8004630:	2300      	movs	r3, #0
 8004632:	e000      	b.n	8004636 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8004634:	2302      	movs	r3, #2
  }
}
 8004636:	4618      	mov	r0, r3
 8004638:	3730      	adds	r7, #48	; 0x30
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	0800507b 	.word	0x0800507b
 8004644:	080050ed 	.word	0x080050ed
 8004648:	004005ff 	.word	0x004005ff
 800464c:	4225858c 	.word	0x4225858c

08004650 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b08c      	sub	sp, #48	; 0x30
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
 800465c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d107      	bne.n	8004678 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e0c5      	b.n	8004804 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b01      	cmp	r3, #1
 8004682:	f040 80be 	bne.w	8004802 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800468c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	441a      	add	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004696:	429a      	cmp	r2, r3
 8004698:	d907      	bls.n	80046aa <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e0ac      	b.n	8004804 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2203      	movs	r2, #3
 80046ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2200      	movs	r2, #0
 80046b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	6812      	ldr	r2, [r2, #0]
 80046c4:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80046c8:	f043 0302 	orr.w	r3, r3, #2
 80046cc:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d2:	4a4e      	ldr	r2, [pc, #312]	; (800480c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80046d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046da:	4a4d      	ldr	r2, [pc, #308]	; (8004810 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80046dc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e2:	2200      	movs	r2, #0
 80046e4:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d002      	beq.n	80046f4 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80046ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f0:	025b      	lsls	r3, r3, #9
 80046f2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d90a      	bls.n	8004710 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	22a0      	movs	r2, #160	; 0xa0
 80046fe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004706:	4618      	mov	r0, r3
 8004708:	f001 fdba 	bl	8006280 <SDMMC_CmdWriteMultiBlock>
 800470c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800470e:	e009      	b.n	8004724 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2290      	movs	r2, #144	; 0x90
 8004714:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800471c:	4618      	mov	r0, r3
 800471e:	f001 fd8d 	bl	800623c <SDMMC_CmdWriteSingleBlock>
 8004722:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004726:	2b00      	cmp	r3, #0
 8004728:	d012      	beq.n	8004750 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a39      	ldr	r2, [pc, #228]	; (8004814 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004730:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004738:	431a      	orrs	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e059      	b.n	8004804 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004750:	4b31      	ldr	r3, [pc, #196]	; (8004818 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8004752:	2201      	movs	r2, #1
 8004754:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800475a:	2240      	movs	r2, #64	; 0x40
 800475c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476e:	689a      	ldr	r2, [r3, #8]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	430a      	orrs	r2, r1
 8004778:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800477e:	68b9      	ldr	r1, [r7, #8]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	3380      	adds	r3, #128	; 0x80
 8004786:	461a      	mov	r2, r3
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	025b      	lsls	r3, r3, #9
 800478c:	089b      	lsrs	r3, r3, #2
 800478e:	f7fd fb8f 	bl	8001eb0 <HAL_DMA_Start_IT>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d01c      	beq.n	80047d2 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	6812      	ldr	r2, [r2, #0]
 80047a2:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80047a6:	f023 0302 	bic.w	r3, r3, #2
 80047aa:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a18      	ldr	r2, [pc, #96]	; (8004814 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80047b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e018      	b.n	8004804 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80047d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047d6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	025b      	lsls	r3, r3, #9
 80047dc:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80047de:	2390      	movs	r3, #144	; 0x90
 80047e0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80047e2:	2300      	movs	r3, #0
 80047e4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80047e6:	2300      	movs	r3, #0
 80047e8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80047ea:	2301      	movs	r3, #1
 80047ec:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f107 0210 	add.w	r2, r7, #16
 80047f6:	4611      	mov	r1, r2
 80047f8:	4618      	mov	r0, r3
 80047fa:	f001 fc8d 	bl	8006118 <SDIO_ConfigData>

      return HAL_OK;
 80047fe:	2300      	movs	r3, #0
 8004800:	e000      	b.n	8004804 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8004802:	2302      	movs	r3, #2
  }
}
 8004804:	4618      	mov	r0, r3
 8004806:	3730      	adds	r7, #48	; 0x30
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	08005051 	.word	0x08005051
 8004810:	080050ed 	.word	0x080050ed
 8004814:	004005ff 	.word	0x004005ff
 8004818:	4225858c 	.word	0x4225858c

0800481c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004828:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004830:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d008      	beq.n	800484a <HAL_SD_IRQHandler+0x2e>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f003 0308 	and.w	r3, r3, #8
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 fffd 	bl	8005842 <SD_Read_IT>
 8004848:	e165      	b.n	8004b16 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004854:	2b00      	cmp	r3, #0
 8004856:	f000 808f 	beq.w	8004978 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004862:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	6812      	ldr	r2, [r2, #0]
 800486e:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8004872:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8004876:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f022 0201 	bic.w	r2, r2, #1
 8004886:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f003 0308 	and.w	r3, r3, #8
 800488e:	2b00      	cmp	r3, #0
 8004890:	d039      	beq.n	8004906 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d104      	bne.n	80048a6 <HAL_SD_IRQHandler+0x8a>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f003 0320 	and.w	r3, r3, #32
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d011      	beq.n	80048ca <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f001 fd0a 	bl	80062c4 <SDMMC_CmdStopTransfer>
 80048b0:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d008      	beq.n	80048ca <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	431a      	orrs	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 f92f 	bl	8004b28 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f240 523a 	movw	r2, #1338	; 0x53a
 80048d2:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d104      	bne.n	80048f6 <HAL_SD_IRQHandler+0xda>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f002 f978 	bl	8006bec <HAL_SD_RxCpltCallback>
 80048fc:	e10b      	b.n	8004b16 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f002 f96a 	bl	8006bd8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004904:	e107      	b.n	8004b16 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 8102 	beq.w	8004b16 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f003 0320 	and.w	r3, r3, #32
 8004918:	2b00      	cmp	r3, #0
 800491a:	d011      	beq.n	8004940 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4618      	mov	r0, r3
 8004922:	f001 fccf 	bl	80062c4 <SDMMC_CmdStopTransfer>
 8004926:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d008      	beq.n	8004940 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	431a      	orrs	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f8f4 	bl	8004b28 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b00      	cmp	r3, #0
 8004948:	f040 80e5 	bne.w	8004b16 <HAL_SD_IRQHandler+0x2fa>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b00      	cmp	r3, #0
 8004954:	f040 80df 	bne.w	8004b16 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f022 0208 	bic.w	r2, r2, #8
 8004966:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f002 f931 	bl	8006bd8 <HAL_SD_TxCpltCallback>
}
 8004976:	e0ce      	b.n	8004b16 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800497e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d008      	beq.n	8004998 <HAL_SD_IRQHandler+0x17c>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f003 0308 	and.w	r3, r3, #8
 800498c:	2b00      	cmp	r3, #0
 800498e:	d003      	beq.n	8004998 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 ffa7 	bl	80058e4 <SD_Write_IT>
 8004996:	e0be      	b.n	8004b16 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800499e:	f240 233a 	movw	r3, #570	; 0x23a
 80049a2:	4013      	ands	r3, r2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f000 80b6 	beq.w	8004b16 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049b0:	f003 0302 	and.w	r3, r3, #2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d005      	beq.n	80049c4 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049bc:	f043 0202 	orr.w	r2, r3, #2
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ca:	f003 0308 	and.w	r3, r3, #8
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d005      	beq.n	80049de <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d6:	f043 0208 	orr.w	r2, r3, #8
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e4:	f003 0320 	and.w	r3, r3, #32
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d005      	beq.n	80049f8 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f0:	f043 0220 	orr.w	r2, r3, #32
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049fe:	f003 0310 	and.w	r3, r3, #16
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d005      	beq.n	8004a12 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0a:	f043 0210 	orr.w	r2, r3, #16
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d005      	beq.n	8004a2c <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a24:	f043 0208 	orr.w	r2, r3, #8
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f240 723a 	movw	r2, #1850	; 0x73a
 8004a34:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	6812      	ldr	r2, [r2, #0]
 8004a40:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8004a44:	f023 0302 	bic.w	r3, r3, #2
 8004a48:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f001 fc38 	bl	80062c4 <SDMMC_CmdStopTransfer>
 8004a54:	4602      	mov	r2, r0
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f003 0308 	and.w	r3, r3, #8
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00a      	beq.n	8004a80 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 f855 	bl	8004b28 <HAL_SD_ErrorCallback>
}
 8004a7e:	e04a      	b.n	8004b16 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d045      	beq.n	8004b16 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f003 0310 	and.w	r3, r3, #16
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d104      	bne.n	8004a9e <HAL_SD_IRQHandler+0x282>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f003 0320 	and.w	r3, r3, #32
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d011      	beq.n	8004ac2 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa2:	4a1f      	ldr	r2, [pc, #124]	; (8004b20 <HAL_SD_IRQHandler+0x304>)
 8004aa4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7fd fa58 	bl	8001f60 <HAL_DMA_Abort_IT>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d02f      	beq.n	8004b16 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 fb68 	bl	8005190 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004ac0:	e029      	b.n	8004b16 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f003 0301 	and.w	r3, r3, #1
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d104      	bne.n	8004ad6 <HAL_SD_IRQHandler+0x2ba>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d011      	beq.n	8004afa <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	4a12      	ldr	r2, [pc, #72]	; (8004b24 <HAL_SD_IRQHandler+0x308>)
 8004adc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7fd fa3c 	bl	8001f60 <HAL_DMA_Abort_IT>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d013      	beq.n	8004b16 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 fb83 	bl	80051fe <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004af8:	e00d      	b.n	8004b16 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f002 f858 	bl	8006bc4 <HAL_SD_AbortCallback>
}
 8004b14:	e7ff      	b.n	8004b16 <HAL_SD_IRQHandler+0x2fa>
 8004b16:	bf00      	nop
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	08005191 	.word	0x08005191
 8004b24:	080051ff 	.word	0x080051ff

08004b28 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b4a:	0f9b      	lsrs	r3, r3, #30
 8004b4c:	b2da      	uxtb	r2, r3
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b56:	0e9b      	lsrs	r3, r3, #26
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	f003 030f 	and.w	r3, r3, #15
 8004b5e:	b2da      	uxtb	r2, r3
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b68:	0e1b      	lsrs	r3, r3, #24
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	f003 0303 	and.w	r3, r3, #3
 8004b70:	b2da      	uxtb	r2, r3
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b7a:	0c1b      	lsrs	r3, r3, #16
 8004b7c:	b2da      	uxtb	r2, r3
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b86:	0a1b      	lsrs	r3, r3, #8
 8004b88:	b2da      	uxtb	r2, r3
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b9c:	0d1b      	lsrs	r3, r3, #20
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ba8:	0c1b      	lsrs	r3, r3, #16
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	f003 030f 	and.w	r3, r3, #15
 8004bb0:	b2da      	uxtb	r2, r3
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bba:	0bdb      	lsrs	r3, r3, #15
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	b2da      	uxtb	r2, r3
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bcc:	0b9b      	lsrs	r3, r3, #14
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bde:	0b5b      	lsrs	r3, r3, #13
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bf0:	0b1b      	lsrs	r3, r3, #12
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	2200      	movs	r2, #0
 8004c02:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d163      	bne.n	8004cd4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c10:	009a      	lsls	r2, r3, #2
 8004c12:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004c16:	4013      	ands	r3, r2
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004c1c:	0f92      	lsrs	r2, r2, #30
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c28:	0edb      	lsrs	r3, r3, #27
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	f003 0307 	and.w	r3, r3, #7
 8004c30:	b2da      	uxtb	r2, r3
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c3a:	0e1b      	lsrs	r3, r3, #24
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	f003 0307 	and.w	r3, r3, #7
 8004c42:	b2da      	uxtb	r2, r3
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c4c:	0d5b      	lsrs	r3, r3, #21
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	f003 0307 	and.w	r3, r3, #7
 8004c54:	b2da      	uxtb	r2, r3
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c5e:	0c9b      	lsrs	r3, r3, #18
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	f003 0307 	and.w	r3, r3, #7
 8004c66:	b2da      	uxtb	r2, r3
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c70:	0bdb      	lsrs	r3, r3, #15
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	f003 0307 	and.w	r3, r3, #7
 8004c78:	b2da      	uxtb	r2, r3
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	1c5a      	adds	r2, r3, #1
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	7e1b      	ldrb	r3, [r3, #24]
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	f003 0307 	and.w	r3, r3, #7
 8004c92:	3302      	adds	r3, #2
 8004c94:	2201      	movs	r2, #1
 8004c96:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004c9e:	fb02 f203 	mul.w	r2, r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	7a1b      	ldrb	r3, [r3, #8]
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	f003 030f 	and.w	r3, r3, #15
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	409a      	lsls	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004cc0:	0a52      	lsrs	r2, r2, #9
 8004cc2:	fb02 f203 	mul.w	r2, r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cd0:	661a      	str	r2, [r3, #96]	; 0x60
 8004cd2:	e031      	b.n	8004d38 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d11d      	bne.n	8004d18 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ce0:	041b      	lsls	r3, r3, #16
 8004ce2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cea:	0c1b      	lsrs	r3, r3, #16
 8004cec:	431a      	orrs	r2, r3
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	029a      	lsls	r2, r3, #10
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d0c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	661a      	str	r2, [r3, #96]	; 0x60
 8004d16:	e00f      	b.n	8004d38 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a58      	ldr	r2, [pc, #352]	; (8004e80 <HAL_SD_GetCardCSD+0x344>)
 8004d1e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d24:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e09d      	b.n	8004e74 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d3c:	0b9b      	lsrs	r3, r3, #14
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	b2da      	uxtb	r2, r3
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d4e:	09db      	lsrs	r3, r3, #7
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d56:	b2da      	uxtb	r2, r3
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d66:	b2da      	uxtb	r2, r3
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d70:	0fdb      	lsrs	r3, r3, #31
 8004d72:	b2da      	uxtb	r2, r3
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d7c:	0f5b      	lsrs	r3, r3, #29
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	f003 0303 	and.w	r3, r3, #3
 8004d84:	b2da      	uxtb	r2, r3
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d8e:	0e9b      	lsrs	r3, r3, #26
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	f003 0307 	and.w	r3, r3, #7
 8004d96:	b2da      	uxtb	r2, r3
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da0:	0d9b      	lsrs	r3, r3, #22
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	f003 030f 	and.w	r3, r3, #15
 8004da8:	b2da      	uxtb	r2, r3
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db2:	0d5b      	lsrs	r3, r3, #21
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	b2da      	uxtb	r2, r3
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dce:	0c1b      	lsrs	r3, r3, #16
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	b2da      	uxtb	r2, r3
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de2:	0bdb      	lsrs	r3, r3, #15
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	b2da      	uxtb	r2, r3
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df6:	0b9b      	lsrs	r3, r3, #14
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e0a:	0b5b      	lsrs	r3, r3, #13
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	b2da      	uxtb	r2, r3
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1e:	0b1b      	lsrs	r3, r3, #12
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	b2da      	uxtb	r2, r3
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e32:	0a9b      	lsrs	r3, r3, #10
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	f003 0303 	and.w	r3, r3, #3
 8004e3a:	b2da      	uxtb	r2, r3
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e46:	0a1b      	lsrs	r3, r3, #8
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	f003 0303 	and.w	r3, r3, #3
 8004e4e:	b2da      	uxtb	r2, r3
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5a:	085b      	lsrs	r3, r3, #1
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e62:	b2da      	uxtb	r2, r3
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr
 8004e80:	004005ff 	.word	0x004005ff

08004e84 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004edc:	b5b0      	push	{r4, r5, r7, lr}
 8004ede:	b08e      	sub	sp, #56	; 0x38
 8004ee0:	af04      	add	r7, sp, #16
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2203      	movs	r2, #3
 8004ef0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef8:	2b03      	cmp	r3, #3
 8004efa:	d02e      	beq.n	8004f5a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f02:	d106      	bne.n	8004f12 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f08:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	639a      	str	r2, [r3, #56]	; 0x38
 8004f10:	e029      	b.n	8004f66 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f18:	d10a      	bne.n	8004f30 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 fb28 	bl	8005570 <SD_WideBus_Enable>
 8004f20:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f26:	6a3b      	ldr	r3, [r7, #32]
 8004f28:	431a      	orrs	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	639a      	str	r2, [r3, #56]	; 0x38
 8004f2e:	e01a      	b.n	8004f66 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10a      	bne.n	8004f4c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 fb65 	bl	8005606 <SD_WideBus_Disable>
 8004f3c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f42:	6a3b      	ldr	r3, [r7, #32]
 8004f44:	431a      	orrs	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	639a      	str	r2, [r3, #56]	; 0x38
 8004f4a:	e00c      	b.n	8004f66 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f50:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	639a      	str	r2, [r3, #56]	; 0x38
 8004f58:	e005      	b.n	8004f66 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00b      	beq.n	8004f86 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a26      	ldr	r2, [pc, #152]	; (800500c <HAL_SD_ConfigWideBusOperation+0x130>)
 8004f74:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004f84:	e01f      	b.n	8004fc6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681d      	ldr	r5, [r3, #0]
 8004fac:	466c      	mov	r4, sp
 8004fae:	f107 0314 	add.w	r3, r7, #20
 8004fb2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004fb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004fba:	f107 0308 	add.w	r3, r7, #8
 8004fbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004fc0:	4628      	mov	r0, r5
 8004fc2:	f000 fff9 	bl	8005fb8 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f001 f8ce 	bl	8006170 <SDMMC_CmdBlockLength>
 8004fd4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004fd6:	6a3b      	ldr	r3, [r7, #32]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00c      	beq.n	8004ff6 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a0a      	ldr	r2, [pc, #40]	; (800500c <HAL_SD_ConfigWideBusOperation+0x130>)
 8004fe2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fe8:	6a3b      	ldr	r3, [r7, #32]
 8004fea:	431a      	orrs	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8004ffe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005002:	4618      	mov	r0, r3
 8005004:	3728      	adds	r7, #40	; 0x28
 8005006:	46bd      	mov	sp, r7
 8005008:	bdb0      	pop	{r4, r5, r7, pc}
 800500a:	bf00      	nop
 800500c:	004005ff 	.word	0x004005ff

08005010 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005018:	2300      	movs	r3, #0
 800501a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800501c:	f107 030c 	add.w	r3, r7, #12
 8005020:	4619      	mov	r1, r3
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 fa7c 	bl	8005520 <SD_SendStatus>
 8005028:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d005      	beq.n	800503c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	431a      	orrs	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	0a5b      	lsrs	r3, r3, #9
 8005040:	f003 030f 	and.w	r3, r3, #15
 8005044:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005046:	693b      	ldr	r3, [r7, #16]
}
 8005048:	4618      	mov	r0, r3
 800504a:	3718      	adds	r7, #24
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800506c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800506e:	bf00      	nop
 8005070:	3714      	adds	r7, #20
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr

0800507a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b084      	sub	sp, #16
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005086:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508c:	2b82      	cmp	r3, #130	; 0x82
 800508e:	d111      	bne.n	80050b4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4618      	mov	r0, r3
 8005096:	f001 f915 	bl	80062c4 <SDMMC_CmdStopTransfer>
 800509a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d008      	beq.n	80050b4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	431a      	orrs	r2, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f7ff fd3a 	bl	8004b28 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 0208 	bic.w	r2, r2, #8
 80050c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f240 523a 	movw	r2, #1338	; 0x53a
 80050cc:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f001 fd85 	bl	8006bec <HAL_SD_RxCpltCallback>
#endif
}
 80050e2:	bf00      	nop
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
	...

080050ec <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b086      	sub	sp, #24
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f7fd f8dc 	bl	80022b8 <HAL_DMA_GetError>
 8005100:	4603      	mov	r3, r0
 8005102:	2b02      	cmp	r3, #2
 8005104:	d03e      	beq.n	8005184 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800510c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005114:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	2b01      	cmp	r3, #1
 800511a:	d002      	beq.n	8005122 <SD_DMAError+0x36>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d12d      	bne.n	800517e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a19      	ldr	r2, [pc, #100]	; (800518c <SD_DMAError+0xa0>)
 8005128:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005138:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8005146:	6978      	ldr	r0, [r7, #20]
 8005148:	f7ff ff62 	bl	8005010 <HAL_SD_GetCardState>
 800514c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	2b06      	cmp	r3, #6
 8005152:	d002      	beq.n	800515a <SD_DMAError+0x6e>
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	2b05      	cmp	r3, #5
 8005158:	d10a      	bne.n	8005170 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4618      	mov	r0, r3
 8005160:	f001 f8b0 	bl	80062c4 <SDMMC_CmdStopTransfer>
 8005164:	4602      	mov	r2, r0
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516a:	431a      	orrs	r2, r3
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	2200      	movs	r2, #0
 800517c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800517e:	6978      	ldr	r0, [r7, #20]
 8005180:	f7ff fcd2 	bl	8004b28 <HAL_SD_ErrorCallback>
#endif
  }
}
 8005184:	bf00      	nop
 8005186:	3718      	adds	r7, #24
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	004005ff 	.word	0x004005ff

08005190 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f240 523a 	movw	r2, #1338	; 0x53a
 80051a6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f7ff ff31 	bl	8005010 <HAL_SD_GetCardState>
 80051ae:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	2b06      	cmp	r3, #6
 80051c2:	d002      	beq.n	80051ca <SD_DMATxAbort+0x3a>
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	2b05      	cmp	r3, #5
 80051c8:	d10a      	bne.n	80051e0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f001 f878 	bl	80062c4 <SDMMC_CmdStopTransfer>
 80051d4:	4602      	mov	r2, r0
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051da:	431a      	orrs	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d103      	bne.n	80051f0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f001 fceb 	bl	8006bc4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80051ee:	e002      	b.n	80051f6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f7ff fc99 	bl	8004b28 <HAL_SD_ErrorCallback>
}
 80051f6:	bf00      	nop
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}

080051fe <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b084      	sub	sp, #16
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f240 523a 	movw	r2, #1338	; 0x53a
 8005214:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f7ff fefa 	bl	8005010 <HAL_SD_GetCardState>
 800521c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	2b06      	cmp	r3, #6
 8005230:	d002      	beq.n	8005238 <SD_DMARxAbort+0x3a>
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	2b05      	cmp	r3, #5
 8005236:	d10a      	bne.n	800524e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4618      	mov	r0, r3
 800523e:	f001 f841 	bl	80062c4 <SDMMC_CmdStopTransfer>
 8005242:	4602      	mov	r2, r0
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005248:	431a      	orrs	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005252:	2b00      	cmp	r3, #0
 8005254:	d103      	bne.n	800525e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f001 fcb4 	bl	8006bc4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800525c:	e002      	b.n	8005264 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f7ff fc62 	bl	8004b28 <HAL_SD_ErrorCallback>
}
 8005264:	bf00      	nop
 8005266:	3710      	adds	r7, #16
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800526c:	b5b0      	push	{r4, r5, r7, lr}
 800526e:	b094      	sub	sp, #80	; 0x50
 8005270:	af04      	add	r7, sp, #16
 8005272:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005274:	2301      	movs	r3, #1
 8005276:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4618      	mov	r0, r3
 800527e:	f000 fef3 	bl	8006068 <SDIO_GetPowerState>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d102      	bne.n	800528e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005288:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800528c:	e0b6      	b.n	80053fc <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005292:	2b03      	cmp	r3, #3
 8005294:	d02f      	beq.n	80052f6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4618      	mov	r0, r3
 800529c:	f001 f91c 	bl	80064d8 <SDMMC_CmdSendCID>
 80052a0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80052a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d001      	beq.n	80052ac <SD_InitCard+0x40>
    {
      return errorstate;
 80052a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052aa:	e0a7      	b.n	80053fc <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2100      	movs	r1, #0
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 ff1d 	bl	80060f2 <SDIO_GetResponse>
 80052b8:	4602      	mov	r2, r0
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2104      	movs	r1, #4
 80052c4:	4618      	mov	r0, r3
 80052c6:	f000 ff14 	bl	80060f2 <SDIO_GetResponse>
 80052ca:	4602      	mov	r2, r0
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2108      	movs	r1, #8
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 ff0b 	bl	80060f2 <SDIO_GetResponse>
 80052dc:	4602      	mov	r2, r0
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	210c      	movs	r1, #12
 80052e8:	4618      	mov	r0, r3
 80052ea:	f000 ff02 	bl	80060f2 <SDIO_GetResponse>
 80052ee:	4602      	mov	r2, r0
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052fa:	2b03      	cmp	r3, #3
 80052fc:	d00d      	beq.n	800531a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f107 020e 	add.w	r2, r7, #14
 8005306:	4611      	mov	r1, r2
 8005308:	4618      	mov	r0, r3
 800530a:	f001 f922 	bl	8006552 <SDMMC_CmdSetRelAdd>
 800530e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005312:	2b00      	cmp	r3, #0
 8005314:	d001      	beq.n	800531a <SD_InitCard+0xae>
    {
      return errorstate;
 8005316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005318:	e070      	b.n	80053fc <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800531e:	2b03      	cmp	r3, #3
 8005320:	d036      	beq.n	8005390 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005322:	89fb      	ldrh	r3, [r7, #14]
 8005324:	461a      	mov	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005332:	041b      	lsls	r3, r3, #16
 8005334:	4619      	mov	r1, r3
 8005336:	4610      	mov	r0, r2
 8005338:	f001 f8ec 	bl	8006514 <SDMMC_CmdSendCSD>
 800533c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800533e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005340:	2b00      	cmp	r3, #0
 8005342:	d001      	beq.n	8005348 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005346:	e059      	b.n	80053fc <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2100      	movs	r1, #0
 800534e:	4618      	mov	r0, r3
 8005350:	f000 fecf 	bl	80060f2 <SDIO_GetResponse>
 8005354:	4602      	mov	r2, r0
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2104      	movs	r1, #4
 8005360:	4618      	mov	r0, r3
 8005362:	f000 fec6 	bl	80060f2 <SDIO_GetResponse>
 8005366:	4602      	mov	r2, r0
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2108      	movs	r1, #8
 8005372:	4618      	mov	r0, r3
 8005374:	f000 febd 	bl	80060f2 <SDIO_GetResponse>
 8005378:	4602      	mov	r2, r0
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	210c      	movs	r1, #12
 8005384:	4618      	mov	r0, r3
 8005386:	f000 feb4 	bl	80060f2 <SDIO_GetResponse>
 800538a:	4602      	mov	r2, r0
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2104      	movs	r1, #4
 8005396:	4618      	mov	r0, r3
 8005398:	f000 feab 	bl	80060f2 <SDIO_GetResponse>
 800539c:	4603      	mov	r3, r0
 800539e:	0d1a      	lsrs	r2, r3, #20
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80053a4:	f107 0310 	add.w	r3, r7, #16
 80053a8:	4619      	mov	r1, r3
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f7ff fbc6 	bl	8004b3c <HAL_SD_GetCardCSD>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d002      	beq.n	80053bc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80053b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80053ba:	e01f      	b.n	80053fc <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6819      	ldr	r1, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053c4:	041b      	lsls	r3, r3, #16
 80053c6:	461a      	mov	r2, r3
 80053c8:	f04f 0300 	mov.w	r3, #0
 80053cc:	4608      	mov	r0, r1
 80053ce:	f000 ff9b 	bl	8006308 <SDMMC_CmdSelDesel>
 80053d2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80053d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <SD_InitCard+0x172>
  {
    return errorstate;
 80053da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053dc:	e00e      	b.n	80053fc <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681d      	ldr	r5, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	466c      	mov	r4, sp
 80053e6:	f103 0210 	add.w	r2, r3, #16
 80053ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80053ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80053f0:	3304      	adds	r3, #4
 80053f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053f4:	4628      	mov	r0, r5
 80053f6:	f000 fddf 	bl	8005fb8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3740      	adds	r7, #64	; 0x40
 8005400:	46bd      	mov	sp, r7
 8005402:	bdb0      	pop	{r4, r5, r7, pc}

08005404 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b086      	sub	sp, #24
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800540c:	2300      	movs	r3, #0
 800540e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005410:	2300      	movs	r3, #0
 8005412:	617b      	str	r3, [r7, #20]
 8005414:	2300      	movs	r3, #0
 8005416:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4618      	mov	r0, r3
 800541e:	f000 ff96 	bl	800634e <SDMMC_CmdGoIdleState>
 8005422:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d001      	beq.n	800542e <SD_PowerON+0x2a>
  {
    return errorstate;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	e072      	b.n	8005514 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4618      	mov	r0, r3
 8005434:	f000 ffa9 	bl	800638a <SDMMC_CmdOperCond>
 8005438:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00d      	beq.n	800545c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4618      	mov	r0, r3
 800544c:	f000 ff7f 	bl	800634e <SDMMC_CmdGoIdleState>
 8005450:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d004      	beq.n	8005462 <SD_PowerON+0x5e>
    {
      return errorstate;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	e05b      	b.n	8005514 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005466:	2b01      	cmp	r3, #1
 8005468:	d137      	bne.n	80054da <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2100      	movs	r1, #0
 8005470:	4618      	mov	r0, r3
 8005472:	f000 ffa9 	bl	80063c8 <SDMMC_CmdAppCommand>
 8005476:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d02d      	beq.n	80054da <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800547e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005482:	e047      	b.n	8005514 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2100      	movs	r1, #0
 800548a:	4618      	mov	r0, r3
 800548c:	f000 ff9c 	bl	80063c8 <SDMMC_CmdAppCommand>
 8005490:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d001      	beq.n	800549c <SD_PowerON+0x98>
    {
      return errorstate;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	e03b      	b.n	8005514 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	491e      	ldr	r1, [pc, #120]	; (800551c <SD_PowerON+0x118>)
 80054a2:	4618      	mov	r0, r3
 80054a4:	f000 ffb2 	bl	800640c <SDMMC_CmdAppOperCommand>
 80054a8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d002      	beq.n	80054b6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80054b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80054b4:	e02e      	b.n	8005514 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2100      	movs	r1, #0
 80054bc:	4618      	mov	r0, r3
 80054be:	f000 fe18 	bl	80060f2 <SDIO_GetResponse>
 80054c2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	0fdb      	lsrs	r3, r3, #31
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d101      	bne.n	80054d0 <SD_PowerON+0xcc>
 80054cc:	2301      	movs	r3, #1
 80054ce:	e000      	b.n	80054d2 <SD_PowerON+0xce>
 80054d0:	2300      	movs	r3, #0
 80054d2:	613b      	str	r3, [r7, #16]

    count++;
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	3301      	adds	r3, #1
 80054d8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d802      	bhi.n	80054ea <SD_PowerON+0xe6>
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d0cc      	beq.n	8005484 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d902      	bls.n	80054fa <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80054f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80054f8:	e00c      	b.n	8005514 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d003      	beq.n	800550c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	645a      	str	r2, [r3, #68]	; 0x44
 800550a:	e002      	b.n	8005512 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	3718      	adds	r7, #24
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	c1100000 	.word	0xc1100000

08005520 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d102      	bne.n	8005536 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005530:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005534:	e018      	b.n	8005568 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800553e:	041b      	lsls	r3, r3, #16
 8005540:	4619      	mov	r1, r3
 8005542:	4610      	mov	r0, r2
 8005544:	f001 f826 	bl	8006594 <SDMMC_CmdSendStatus>
 8005548:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d001      	beq.n	8005554 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	e009      	b.n	8005568 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2100      	movs	r1, #0
 800555a:	4618      	mov	r0, r3
 800555c:	f000 fdc9 	bl	80060f2 <SDIO_GetResponse>
 8005560:	4602      	mov	r2, r0
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3710      	adds	r7, #16
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b086      	sub	sp, #24
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005578:	2300      	movs	r3, #0
 800557a:	60fb      	str	r3, [r7, #12]
 800557c:	2300      	movs	r3, #0
 800557e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2100      	movs	r1, #0
 8005586:	4618      	mov	r0, r3
 8005588:	f000 fdb3 	bl	80060f2 <SDIO_GetResponse>
 800558c:	4603      	mov	r3, r0
 800558e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005592:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005596:	d102      	bne.n	800559e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005598:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800559c:	e02f      	b.n	80055fe <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800559e:	f107 030c 	add.w	r3, r7, #12
 80055a2:	4619      	mov	r1, r3
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 f879 	bl	800569c <SD_FindSCR>
 80055aa:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d001      	beq.n	80055b6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	e023      	b.n	80055fe <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d01c      	beq.n	80055fa <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055c8:	041b      	lsls	r3, r3, #16
 80055ca:	4619      	mov	r1, r3
 80055cc:	4610      	mov	r0, r2
 80055ce:	f000 fefb 	bl	80063c8 <SDMMC_CmdAppCommand>
 80055d2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d001      	beq.n	80055de <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	e00f      	b.n	80055fe <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2102      	movs	r1, #2
 80055e4:	4618      	mov	r0, r3
 80055e6:	f000 ff34 	bl	8006452 <SDMMC_CmdBusWidth>
 80055ea:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d001      	beq.n	80055f6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	e003      	b.n	80055fe <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80055f6:	2300      	movs	r3, #0
 80055f8:	e001      	b.n	80055fe <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80055fa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3718      	adds	r7, #24
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005606:	b580      	push	{r7, lr}
 8005608:	b086      	sub	sp, #24
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800560e:	2300      	movs	r3, #0
 8005610:	60fb      	str	r3, [r7, #12]
 8005612:	2300      	movs	r3, #0
 8005614:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2100      	movs	r1, #0
 800561c:	4618      	mov	r0, r3
 800561e:	f000 fd68 	bl	80060f2 <SDIO_GetResponse>
 8005622:	4603      	mov	r3, r0
 8005624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005628:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800562c:	d102      	bne.n	8005634 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800562e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005632:	e02f      	b.n	8005694 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005634:	f107 030c 	add.w	r3, r7, #12
 8005638:	4619      	mov	r1, r3
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f82e 	bl	800569c <SD_FindSCR>
 8005640:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d001      	beq.n	800564c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	e023      	b.n	8005694 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d01c      	beq.n	8005690 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800565e:	041b      	lsls	r3, r3, #16
 8005660:	4619      	mov	r1, r3
 8005662:	4610      	mov	r0, r2
 8005664:	f000 feb0 	bl	80063c8 <SDMMC_CmdAppCommand>
 8005668:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d001      	beq.n	8005674 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	e00f      	b.n	8005694 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2100      	movs	r1, #0
 800567a:	4618      	mov	r0, r3
 800567c:	f000 fee9 	bl	8006452 <SDMMC_CmdBusWidth>
 8005680:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d001      	beq.n	800568c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	e003      	b.n	8005694 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800568c:	2300      	movs	r3, #0
 800568e:	e001      	b.n	8005694 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005690:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005694:	4618      	mov	r0, r3
 8005696:	3718      	adds	r7, #24
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800569c:	b590      	push	{r4, r7, lr}
 800569e:	b08f      	sub	sp, #60	; 0x3c
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80056a6:	f7fc fa13 	bl	8001ad0 <HAL_GetTick>
 80056aa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80056ac:	2300      	movs	r3, #0
 80056ae:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80056b0:	2300      	movs	r3, #0
 80056b2:	60bb      	str	r3, [r7, #8]
 80056b4:	2300      	movs	r3, #0
 80056b6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2108      	movs	r1, #8
 80056c2:	4618      	mov	r0, r3
 80056c4:	f000 fd54 	bl	8006170 <SDMMC_CmdBlockLength>
 80056c8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80056ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d001      	beq.n	80056d4 <SD_FindSCR+0x38>
  {
    return errorstate;
 80056d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d2:	e0b2      	b.n	800583a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056dc:	041b      	lsls	r3, r3, #16
 80056de:	4619      	mov	r1, r3
 80056e0:	4610      	mov	r0, r2
 80056e2:	f000 fe71 	bl	80063c8 <SDMMC_CmdAppCommand>
 80056e6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80056e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d001      	beq.n	80056f2 <SD_FindSCR+0x56>
  {
    return errorstate;
 80056ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f0:	e0a3      	b.n	800583a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80056f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056f6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80056f8:	2308      	movs	r3, #8
 80056fa:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80056fc:	2330      	movs	r3, #48	; 0x30
 80056fe:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005700:	2302      	movs	r3, #2
 8005702:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005704:	2300      	movs	r3, #0
 8005706:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005708:	2301      	movs	r3, #1
 800570a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f107 0210 	add.w	r2, r7, #16
 8005714:	4611      	mov	r1, r2
 8005716:	4618      	mov	r0, r3
 8005718:	f000 fcfe 	bl	8006118 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4618      	mov	r0, r3
 8005722:	f000 feb8 	bl	8006496 <SDMMC_CmdSendSCR>
 8005726:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572a:	2b00      	cmp	r3, #0
 800572c:	d02a      	beq.n	8005784 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800572e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005730:	e083      	b.n	800583a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005738:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00f      	beq.n	8005760 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6819      	ldr	r1, [r3, #0]
 8005744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	f107 0208 	add.w	r2, r7, #8
 800574c:	18d4      	adds	r4, r2, r3
 800574e:	4608      	mov	r0, r1
 8005750:	f000 fc5d 	bl	800600e <SDIO_ReadFIFO>
 8005754:	4603      	mov	r3, r0
 8005756:	6023      	str	r3, [r4, #0]
      index++;
 8005758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800575a:	3301      	adds	r3, #1
 800575c:	637b      	str	r3, [r7, #52]	; 0x34
 800575e:	e006      	b.n	800576e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005766:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d012      	beq.n	8005794 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800576e:	f7fc f9af 	bl	8001ad0 <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800577c:	d102      	bne.n	8005784 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800577e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005782:	e05a      	b.n	800583a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800578a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800578e:	2b00      	cmp	r3, #0
 8005790:	d0cf      	beq.n	8005732 <SD_FindSCR+0x96>
 8005792:	e000      	b.n	8005796 <SD_FindSCR+0xfa>
      break;
 8005794:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800579c:	f003 0308 	and.w	r3, r3, #8
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d005      	beq.n	80057b0 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2208      	movs	r2, #8
 80057aa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80057ac:	2308      	movs	r3, #8
 80057ae:	e044      	b.n	800583a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b6:	f003 0302 	and.w	r3, r3, #2
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d005      	beq.n	80057ca <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2202      	movs	r2, #2
 80057c4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80057c6:	2302      	movs	r3, #2
 80057c8:	e037      	b.n	800583a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057d0:	f003 0320 	and.w	r3, r3, #32
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d005      	beq.n	80057e4 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2220      	movs	r2, #32
 80057de:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80057e0:	2320      	movs	r3, #32
 80057e2:	e02a      	b.n	800583a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f240 523a 	movw	r2, #1338	; 0x53a
 80057ec:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	061a      	lsls	r2, r3, #24
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	021b      	lsls	r3, r3, #8
 80057f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80057fa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	0a1b      	lsrs	r3, r3, #8
 8005800:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005804:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	0e1b      	lsrs	r3, r3, #24
 800580a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800580c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800580e:	601a      	str	r2, [r3, #0]
    scr++;
 8005810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005812:	3304      	adds	r3, #4
 8005814:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	061a      	lsls	r2, r3, #24
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	021b      	lsls	r3, r3, #8
 800581e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005822:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	0a1b      	lsrs	r3, r3, #8
 8005828:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800582c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	0e1b      	lsrs	r3, r3, #24
 8005832:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005836:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	373c      	adds	r7, #60	; 0x3c
 800583e:	46bd      	mov	sp, r7
 8005840:	bd90      	pop	{r4, r7, pc}

08005842 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8005842:	b580      	push	{r7, lr}
 8005844:	b086      	sub	sp, #24
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005854:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d03f      	beq.n	80058dc <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800585c:	2300      	movs	r3, #0
 800585e:	617b      	str	r3, [r7, #20]
 8005860:	e033      	b.n	80058ca <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4618      	mov	r0, r3
 8005868:	f000 fbd1 	bl	800600e <SDIO_ReadFIFO>
 800586c:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	b2da      	uxtb	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	3301      	adds	r3, #1
 800587a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	3b01      	subs	r3, #1
 8005880:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	0a1b      	lsrs	r3, r3, #8
 8005886:	b2da      	uxtb	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	3301      	adds	r3, #1
 8005890:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	3b01      	subs	r3, #1
 8005896:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	0c1b      	lsrs	r3, r3, #16
 800589c:	b2da      	uxtb	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	3301      	adds	r3, #1
 80058a6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	3b01      	subs	r3, #1
 80058ac:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	0e1b      	lsrs	r3, r3, #24
 80058b2:	b2da      	uxtb	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	3301      	adds	r3, #1
 80058bc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	3b01      	subs	r3, #1
 80058c2:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	3301      	adds	r3, #1
 80058c8:	617b      	str	r3, [r7, #20]
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	2b07      	cmp	r3, #7
 80058ce:	d9c8      	bls.n	8005862 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80058dc:	bf00      	nop
 80058de:	3718      	adds	r7, #24
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b086      	sub	sp, #24
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a1b      	ldr	r3, [r3, #32]
 80058f0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d043      	beq.n	8005986 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80058fe:	2300      	movs	r3, #0
 8005900:	617b      	str	r3, [r7, #20]
 8005902:	e037      	b.n	8005974 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	60bb      	str	r3, [r7, #8]
      tmp++;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	3301      	adds	r3, #1
 800590e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	3b01      	subs	r3, #1
 8005914:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	021a      	lsls	r2, r3, #8
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	4313      	orrs	r3, r2
 8005920:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	3301      	adds	r3, #1
 8005926:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	3b01      	subs	r3, #1
 800592c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	041a      	lsls	r2, r3, #16
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	4313      	orrs	r3, r2
 8005938:	60bb      	str	r3, [r7, #8]
      tmp++;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	3301      	adds	r3, #1
 800593e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	3b01      	subs	r3, #1
 8005944:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	061a      	lsls	r2, r3, #24
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	4313      	orrs	r3, r2
 8005950:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	3301      	adds	r3, #1
 8005956:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	3b01      	subs	r3, #1
 800595c:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f107 0208 	add.w	r2, r7, #8
 8005966:	4611      	mov	r1, r2
 8005968:	4618      	mov	r0, r3
 800596a:	f000 fb5d 	bl	8006028 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	3301      	adds	r3, #1
 8005972:	617b      	str	r3, [r7, #20]
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	2b07      	cmp	r3, #7
 8005978:	d9c4      	bls.n	8005904 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	693a      	ldr	r2, [r7, #16]
 8005984:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8005986:	bf00      	nop
 8005988:	3718      	adds	r7, #24
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b082      	sub	sp, #8
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d101      	bne.n	80059a0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e03f      	b.n	8005a20 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d106      	bne.n	80059ba <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f7fb fdcd 	bl	8001554 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2224      	movs	r2, #36	; 0x24
 80059be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68da      	ldr	r2, [r3, #12]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059d0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f928 	bl	8005c28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	691a      	ldr	r2, [r3, #16]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059e6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	695a      	ldr	r2, [r3, #20]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059f6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68da      	ldr	r2, [r3, #12]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a06:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2220      	movs	r2, #32
 8005a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2220      	movs	r2, #32
 8005a1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3708      	adds	r7, #8
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b08a      	sub	sp, #40	; 0x28
 8005a2c:	af02      	add	r7, sp, #8
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	603b      	str	r3, [r7, #0]
 8005a34:	4613      	mov	r3, r2
 8005a36:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	2b20      	cmp	r3, #32
 8005a46:	d17c      	bne.n	8005b42 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d002      	beq.n	8005a54 <HAL_UART_Transmit+0x2c>
 8005a4e:	88fb      	ldrh	r3, [r7, #6]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e075      	b.n	8005b44 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d101      	bne.n	8005a66 <HAL_UART_Transmit+0x3e>
 8005a62:	2302      	movs	r3, #2
 8005a64:	e06e      	b.n	8005b44 <HAL_UART_Transmit+0x11c>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2221      	movs	r2, #33	; 0x21
 8005a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a7c:	f7fc f828 	bl	8001ad0 <HAL_GetTick>
 8005a80:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	88fa      	ldrh	r2, [r7, #6]
 8005a86:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	88fa      	ldrh	r2, [r7, #6]
 8005a8c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a96:	d108      	bne.n	8005aaa <HAL_UART_Transmit+0x82>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d104      	bne.n	8005aaa <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	61bb      	str	r3, [r7, #24]
 8005aa8:	e003      	b.n	8005ab2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005aba:	e02a      	b.n	8005b12 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	2180      	movs	r1, #128	; 0x80
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f000 f840 	bl	8005b4c <UART_WaitOnFlagUntilTimeout>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d001      	beq.n	8005ad6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e036      	b.n	8005b44 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d10b      	bne.n	8005af4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	881b      	ldrh	r3, [r3, #0]
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005aea:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	3302      	adds	r3, #2
 8005af0:	61bb      	str	r3, [r7, #24]
 8005af2:	e007      	b.n	8005b04 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	781a      	ldrb	r2, [r3, #0]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	3301      	adds	r3, #1
 8005b02:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1cf      	bne.n	8005abc <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	9300      	str	r3, [sp, #0]
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	2200      	movs	r2, #0
 8005b24:	2140      	movs	r1, #64	; 0x40
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f000 f810 	bl	8005b4c <UART_WaitOnFlagUntilTimeout>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d001      	beq.n	8005b36 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e006      	b.n	8005b44 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2220      	movs	r2, #32
 8005b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	e000      	b.n	8005b44 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005b42:	2302      	movs	r3, #2
  }
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3720      	adds	r7, #32
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b090      	sub	sp, #64	; 0x40
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	603b      	str	r3, [r7, #0]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b5c:	e050      	b.n	8005c00 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b64:	d04c      	beq.n	8005c00 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005b66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d007      	beq.n	8005b7c <UART_WaitOnFlagUntilTimeout+0x30>
 8005b6c:	f7fb ffb0 	bl	8001ad0 <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d241      	bcs.n	8005c00 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	330c      	adds	r3, #12
 8005b82:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b86:	e853 3f00 	ldrex	r3, [r3]
 8005b8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	330c      	adds	r3, #12
 8005b9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b9c:	637a      	str	r2, [r7, #52]	; 0x34
 8005b9e:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ba2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ba4:	e841 2300 	strex	r3, r2, [r1]
 8005ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d1e5      	bne.n	8005b7c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	3314      	adds	r3, #20
 8005bb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	e853 3f00 	ldrex	r3, [r3]
 8005bbe:	613b      	str	r3, [r7, #16]
   return(result);
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	f023 0301 	bic.w	r3, r3, #1
 8005bc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	3314      	adds	r3, #20
 8005bce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bd0:	623a      	str	r2, [r7, #32]
 8005bd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd4:	69f9      	ldr	r1, [r7, #28]
 8005bd6:	6a3a      	ldr	r2, [r7, #32]
 8005bd8:	e841 2300 	strex	r3, r2, [r1]
 8005bdc:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1e5      	bne.n	8005bb0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2220      	movs	r2, #32
 8005be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2220      	movs	r2, #32
 8005bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e00f      	b.n	8005c20 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	4013      	ands	r3, r2
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	bf0c      	ite	eq
 8005c10:	2301      	moveq	r3, #1
 8005c12:	2300      	movne	r3, #0
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	461a      	mov	r2, r3
 8005c18:	79fb      	ldrb	r3, [r7, #7]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d09f      	beq.n	8005b5e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3740      	adds	r7, #64	; 0x40
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c2c:	b09f      	sub	sp, #124	; 0x7c
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c3e:	68d9      	ldr	r1, [r3, #12]
 8005c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	ea40 0301 	orr.w	r3, r0, r1
 8005c48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c4c:	689a      	ldr	r2, [r3, #8]
 8005c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	431a      	orrs	r2, r3
 8005c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c56:	695b      	ldr	r3, [r3, #20]
 8005c58:	431a      	orrs	r2, r3
 8005c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c5c:	69db      	ldr	r3, [r3, #28]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005c6c:	f021 010c 	bic.w	r1, r1, #12
 8005c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c76:	430b      	orrs	r3, r1
 8005c78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	695b      	ldr	r3, [r3, #20]
 8005c80:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005c84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c86:	6999      	ldr	r1, [r3, #24]
 8005c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	ea40 0301 	orr.w	r3, r0, r1
 8005c90:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	4bc5      	ldr	r3, [pc, #788]	; (8005fac <UART_SetConfig+0x384>)
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d004      	beq.n	8005ca6 <UART_SetConfig+0x7e>
 8005c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	4bc3      	ldr	r3, [pc, #780]	; (8005fb0 <UART_SetConfig+0x388>)
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d103      	bne.n	8005cae <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ca6:	f7fe fb2f 	bl	8004308 <HAL_RCC_GetPCLK2Freq>
 8005caa:	6778      	str	r0, [r7, #116]	; 0x74
 8005cac:	e002      	b.n	8005cb4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005cae:	f7fe fb17 	bl	80042e0 <HAL_RCC_GetPCLK1Freq>
 8005cb2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cb6:	69db      	ldr	r3, [r3, #28]
 8005cb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cbc:	f040 80b6 	bne.w	8005e2c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005cc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cc2:	461c      	mov	r4, r3
 8005cc4:	f04f 0500 	mov.w	r5, #0
 8005cc8:	4622      	mov	r2, r4
 8005cca:	462b      	mov	r3, r5
 8005ccc:	1891      	adds	r1, r2, r2
 8005cce:	6439      	str	r1, [r7, #64]	; 0x40
 8005cd0:	415b      	adcs	r3, r3
 8005cd2:	647b      	str	r3, [r7, #68]	; 0x44
 8005cd4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005cd8:	1912      	adds	r2, r2, r4
 8005cda:	eb45 0303 	adc.w	r3, r5, r3
 8005cde:	f04f 0000 	mov.w	r0, #0
 8005ce2:	f04f 0100 	mov.w	r1, #0
 8005ce6:	00d9      	lsls	r1, r3, #3
 8005ce8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005cec:	00d0      	lsls	r0, r2, #3
 8005cee:	4602      	mov	r2, r0
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	1911      	adds	r1, r2, r4
 8005cf4:	6639      	str	r1, [r7, #96]	; 0x60
 8005cf6:	416b      	adcs	r3, r5
 8005cf8:	667b      	str	r3, [r7, #100]	; 0x64
 8005cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	461a      	mov	r2, r3
 8005d00:	f04f 0300 	mov.w	r3, #0
 8005d04:	1891      	adds	r1, r2, r2
 8005d06:	63b9      	str	r1, [r7, #56]	; 0x38
 8005d08:	415b      	adcs	r3, r3
 8005d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005d10:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005d14:	f7fa fac4 	bl	80002a0 <__aeabi_uldivmod>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	4ba5      	ldr	r3, [pc, #660]	; (8005fb4 <UART_SetConfig+0x38c>)
 8005d1e:	fba3 2302 	umull	r2, r3, r3, r2
 8005d22:	095b      	lsrs	r3, r3, #5
 8005d24:	011e      	lsls	r6, r3, #4
 8005d26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d28:	461c      	mov	r4, r3
 8005d2a:	f04f 0500 	mov.w	r5, #0
 8005d2e:	4622      	mov	r2, r4
 8005d30:	462b      	mov	r3, r5
 8005d32:	1891      	adds	r1, r2, r2
 8005d34:	6339      	str	r1, [r7, #48]	; 0x30
 8005d36:	415b      	adcs	r3, r3
 8005d38:	637b      	str	r3, [r7, #52]	; 0x34
 8005d3a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005d3e:	1912      	adds	r2, r2, r4
 8005d40:	eb45 0303 	adc.w	r3, r5, r3
 8005d44:	f04f 0000 	mov.w	r0, #0
 8005d48:	f04f 0100 	mov.w	r1, #0
 8005d4c:	00d9      	lsls	r1, r3, #3
 8005d4e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d52:	00d0      	lsls	r0, r2, #3
 8005d54:	4602      	mov	r2, r0
 8005d56:	460b      	mov	r3, r1
 8005d58:	1911      	adds	r1, r2, r4
 8005d5a:	65b9      	str	r1, [r7, #88]	; 0x58
 8005d5c:	416b      	adcs	r3, r5
 8005d5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	461a      	mov	r2, r3
 8005d66:	f04f 0300 	mov.w	r3, #0
 8005d6a:	1891      	adds	r1, r2, r2
 8005d6c:	62b9      	str	r1, [r7, #40]	; 0x28
 8005d6e:	415b      	adcs	r3, r3
 8005d70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d76:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005d7a:	f7fa fa91 	bl	80002a0 <__aeabi_uldivmod>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	460b      	mov	r3, r1
 8005d82:	4b8c      	ldr	r3, [pc, #560]	; (8005fb4 <UART_SetConfig+0x38c>)
 8005d84:	fba3 1302 	umull	r1, r3, r3, r2
 8005d88:	095b      	lsrs	r3, r3, #5
 8005d8a:	2164      	movs	r1, #100	; 0x64
 8005d8c:	fb01 f303 	mul.w	r3, r1, r3
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	00db      	lsls	r3, r3, #3
 8005d94:	3332      	adds	r3, #50	; 0x32
 8005d96:	4a87      	ldr	r2, [pc, #540]	; (8005fb4 <UART_SetConfig+0x38c>)
 8005d98:	fba2 2303 	umull	r2, r3, r2, r3
 8005d9c:	095b      	lsrs	r3, r3, #5
 8005d9e:	005b      	lsls	r3, r3, #1
 8005da0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005da4:	441e      	add	r6, r3
 8005da6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005da8:	4618      	mov	r0, r3
 8005daa:	f04f 0100 	mov.w	r1, #0
 8005dae:	4602      	mov	r2, r0
 8005db0:	460b      	mov	r3, r1
 8005db2:	1894      	adds	r4, r2, r2
 8005db4:	623c      	str	r4, [r7, #32]
 8005db6:	415b      	adcs	r3, r3
 8005db8:	627b      	str	r3, [r7, #36]	; 0x24
 8005dba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005dbe:	1812      	adds	r2, r2, r0
 8005dc0:	eb41 0303 	adc.w	r3, r1, r3
 8005dc4:	f04f 0400 	mov.w	r4, #0
 8005dc8:	f04f 0500 	mov.w	r5, #0
 8005dcc:	00dd      	lsls	r5, r3, #3
 8005dce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005dd2:	00d4      	lsls	r4, r2, #3
 8005dd4:	4622      	mov	r2, r4
 8005dd6:	462b      	mov	r3, r5
 8005dd8:	1814      	adds	r4, r2, r0
 8005dda:	653c      	str	r4, [r7, #80]	; 0x50
 8005ddc:	414b      	adcs	r3, r1
 8005dde:	657b      	str	r3, [r7, #84]	; 0x54
 8005de0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	461a      	mov	r2, r3
 8005de6:	f04f 0300 	mov.w	r3, #0
 8005dea:	1891      	adds	r1, r2, r2
 8005dec:	61b9      	str	r1, [r7, #24]
 8005dee:	415b      	adcs	r3, r3
 8005df0:	61fb      	str	r3, [r7, #28]
 8005df2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005df6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005dfa:	f7fa fa51 	bl	80002a0 <__aeabi_uldivmod>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	460b      	mov	r3, r1
 8005e02:	4b6c      	ldr	r3, [pc, #432]	; (8005fb4 <UART_SetConfig+0x38c>)
 8005e04:	fba3 1302 	umull	r1, r3, r3, r2
 8005e08:	095b      	lsrs	r3, r3, #5
 8005e0a:	2164      	movs	r1, #100	; 0x64
 8005e0c:	fb01 f303 	mul.w	r3, r1, r3
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	00db      	lsls	r3, r3, #3
 8005e14:	3332      	adds	r3, #50	; 0x32
 8005e16:	4a67      	ldr	r2, [pc, #412]	; (8005fb4 <UART_SetConfig+0x38c>)
 8005e18:	fba2 2303 	umull	r2, r3, r2, r3
 8005e1c:	095b      	lsrs	r3, r3, #5
 8005e1e:	f003 0207 	and.w	r2, r3, #7
 8005e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4432      	add	r2, r6
 8005e28:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e2a:	e0b9      	b.n	8005fa0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e2e:	461c      	mov	r4, r3
 8005e30:	f04f 0500 	mov.w	r5, #0
 8005e34:	4622      	mov	r2, r4
 8005e36:	462b      	mov	r3, r5
 8005e38:	1891      	adds	r1, r2, r2
 8005e3a:	6139      	str	r1, [r7, #16]
 8005e3c:	415b      	adcs	r3, r3
 8005e3e:	617b      	str	r3, [r7, #20]
 8005e40:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005e44:	1912      	adds	r2, r2, r4
 8005e46:	eb45 0303 	adc.w	r3, r5, r3
 8005e4a:	f04f 0000 	mov.w	r0, #0
 8005e4e:	f04f 0100 	mov.w	r1, #0
 8005e52:	00d9      	lsls	r1, r3, #3
 8005e54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e58:	00d0      	lsls	r0, r2, #3
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	eb12 0804 	adds.w	r8, r2, r4
 8005e62:	eb43 0905 	adc.w	r9, r3, r5
 8005e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f04f 0100 	mov.w	r1, #0
 8005e70:	f04f 0200 	mov.w	r2, #0
 8005e74:	f04f 0300 	mov.w	r3, #0
 8005e78:	008b      	lsls	r3, r1, #2
 8005e7a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005e7e:	0082      	lsls	r2, r0, #2
 8005e80:	4640      	mov	r0, r8
 8005e82:	4649      	mov	r1, r9
 8005e84:	f7fa fa0c 	bl	80002a0 <__aeabi_uldivmod>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	4b49      	ldr	r3, [pc, #292]	; (8005fb4 <UART_SetConfig+0x38c>)
 8005e8e:	fba3 2302 	umull	r2, r3, r3, r2
 8005e92:	095b      	lsrs	r3, r3, #5
 8005e94:	011e      	lsls	r6, r3, #4
 8005e96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f04f 0100 	mov.w	r1, #0
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	1894      	adds	r4, r2, r2
 8005ea4:	60bc      	str	r4, [r7, #8]
 8005ea6:	415b      	adcs	r3, r3
 8005ea8:	60fb      	str	r3, [r7, #12]
 8005eaa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005eae:	1812      	adds	r2, r2, r0
 8005eb0:	eb41 0303 	adc.w	r3, r1, r3
 8005eb4:	f04f 0400 	mov.w	r4, #0
 8005eb8:	f04f 0500 	mov.w	r5, #0
 8005ebc:	00dd      	lsls	r5, r3, #3
 8005ebe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005ec2:	00d4      	lsls	r4, r2, #3
 8005ec4:	4622      	mov	r2, r4
 8005ec6:	462b      	mov	r3, r5
 8005ec8:	1814      	adds	r4, r2, r0
 8005eca:	64bc      	str	r4, [r7, #72]	; 0x48
 8005ecc:	414b      	adcs	r3, r1
 8005ece:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f04f 0100 	mov.w	r1, #0
 8005eda:	f04f 0200 	mov.w	r2, #0
 8005ede:	f04f 0300 	mov.w	r3, #0
 8005ee2:	008b      	lsls	r3, r1, #2
 8005ee4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005ee8:	0082      	lsls	r2, r0, #2
 8005eea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005eee:	f7fa f9d7 	bl	80002a0 <__aeabi_uldivmod>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	4b2f      	ldr	r3, [pc, #188]	; (8005fb4 <UART_SetConfig+0x38c>)
 8005ef8:	fba3 1302 	umull	r1, r3, r3, r2
 8005efc:	095b      	lsrs	r3, r3, #5
 8005efe:	2164      	movs	r1, #100	; 0x64
 8005f00:	fb01 f303 	mul.w	r3, r1, r3
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	011b      	lsls	r3, r3, #4
 8005f08:	3332      	adds	r3, #50	; 0x32
 8005f0a:	4a2a      	ldr	r2, [pc, #168]	; (8005fb4 <UART_SetConfig+0x38c>)
 8005f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f10:	095b      	lsrs	r3, r3, #5
 8005f12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f16:	441e      	add	r6, r3
 8005f18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f04f 0100 	mov.w	r1, #0
 8005f20:	4602      	mov	r2, r0
 8005f22:	460b      	mov	r3, r1
 8005f24:	1894      	adds	r4, r2, r2
 8005f26:	603c      	str	r4, [r7, #0]
 8005f28:	415b      	adcs	r3, r3
 8005f2a:	607b      	str	r3, [r7, #4]
 8005f2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f30:	1812      	adds	r2, r2, r0
 8005f32:	eb41 0303 	adc.w	r3, r1, r3
 8005f36:	f04f 0400 	mov.w	r4, #0
 8005f3a:	f04f 0500 	mov.w	r5, #0
 8005f3e:	00dd      	lsls	r5, r3, #3
 8005f40:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005f44:	00d4      	lsls	r4, r2, #3
 8005f46:	4622      	mov	r2, r4
 8005f48:	462b      	mov	r3, r5
 8005f4a:	eb12 0a00 	adds.w	sl, r2, r0
 8005f4e:	eb43 0b01 	adc.w	fp, r3, r1
 8005f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	4618      	mov	r0, r3
 8005f58:	f04f 0100 	mov.w	r1, #0
 8005f5c:	f04f 0200 	mov.w	r2, #0
 8005f60:	f04f 0300 	mov.w	r3, #0
 8005f64:	008b      	lsls	r3, r1, #2
 8005f66:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005f6a:	0082      	lsls	r2, r0, #2
 8005f6c:	4650      	mov	r0, sl
 8005f6e:	4659      	mov	r1, fp
 8005f70:	f7fa f996 	bl	80002a0 <__aeabi_uldivmod>
 8005f74:	4602      	mov	r2, r0
 8005f76:	460b      	mov	r3, r1
 8005f78:	4b0e      	ldr	r3, [pc, #56]	; (8005fb4 <UART_SetConfig+0x38c>)
 8005f7a:	fba3 1302 	umull	r1, r3, r3, r2
 8005f7e:	095b      	lsrs	r3, r3, #5
 8005f80:	2164      	movs	r1, #100	; 0x64
 8005f82:	fb01 f303 	mul.w	r3, r1, r3
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	011b      	lsls	r3, r3, #4
 8005f8a:	3332      	adds	r3, #50	; 0x32
 8005f8c:	4a09      	ldr	r2, [pc, #36]	; (8005fb4 <UART_SetConfig+0x38c>)
 8005f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f92:	095b      	lsrs	r3, r3, #5
 8005f94:	f003 020f 	and.w	r2, r3, #15
 8005f98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4432      	add	r2, r6
 8005f9e:	609a      	str	r2, [r3, #8]
}
 8005fa0:	bf00      	nop
 8005fa2:	377c      	adds	r7, #124	; 0x7c
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005faa:	bf00      	nop
 8005fac:	40011000 	.word	0x40011000
 8005fb0:	40011400 	.word	0x40011400
 8005fb4:	51eb851f 	.word	0x51eb851f

08005fb8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005fb8:	b084      	sub	sp, #16
 8005fba:	b480      	push	{r7}
 8005fbc:	b085      	sub	sp, #20
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
 8005fc2:	f107 001c 	add.w	r0, r7, #28
 8005fc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005fce:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005fd0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005fd2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005fd6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005fda:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005fde:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005fe2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005ff2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	431a      	orrs	r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	3714      	adds	r7, #20
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	b004      	add	sp, #16
 800600c:	4770      	bx	lr

0800600e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800600e:	b480      	push	{r7}
 8006010:	b083      	sub	sp, #12
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800601c:	4618      	mov	r0, r3
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	370c      	adds	r7, #12
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr

0800604a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800604a:	b580      	push	{r7, lr}
 800604c:	b082      	sub	sp, #8
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2203      	movs	r2, #3
 8006056:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8006058:	2002      	movs	r0, #2
 800605a:	f7fb fd45 	bl	8001ae8 <HAL_Delay>
  
  return HAL_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	3708      	adds	r7, #8
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0303 	and.w	r3, r3, #3
}
 8006078:	4618      	mov	r0, r3
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800608e:	2300      	movs	r3, #0
 8006090:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80060a2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80060a8:	431a      	orrs	r2, r3
                       Command->CPSM);
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80060ae:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80060be:	f023 030f 	bic.w	r3, r3, #15
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	431a      	orrs	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3714      	adds	r7, #20
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	b2db      	uxtb	r3, r3
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr

080060f2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80060f2:	b480      	push	{r7}
 80060f4:	b085      	sub	sp, #20
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
 80060fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	3314      	adds	r3, #20
 8006100:	461a      	mov	r2, r3
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	4413      	add	r3, r2
 8006106:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
}  
 800610c:	4618      	mov	r0, r3
 800610e:	3714      	adds	r7, #20
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006122:	2300      	movs	r3, #0
 8006124:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	685a      	ldr	r2, [r3, #4]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800613e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006144:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800614a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	4313      	orrs	r3, r2
 8006150:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006156:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	431a      	orrs	r2, r3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006162:	2300      	movs	r3, #0

}
 8006164:	4618      	mov	r0, r3
 8006166:	3714      	adds	r7, #20
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b088      	sub	sp, #32
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800617e:	2310      	movs	r3, #16
 8006180:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006182:	2340      	movs	r3, #64	; 0x40
 8006184:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006186:	2300      	movs	r3, #0
 8006188:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800618a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800618e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006190:	f107 0308 	add.w	r3, r7, #8
 8006194:	4619      	mov	r1, r3
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f7ff ff74 	bl	8006084 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800619c:	f241 3288 	movw	r2, #5000	; 0x1388
 80061a0:	2110      	movs	r1, #16
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 fa44 	bl	8006630 <SDMMC_GetCmdResp1>
 80061a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061aa:	69fb      	ldr	r3, [r7, #28]
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3720      	adds	r7, #32
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b088      	sub	sp, #32
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80061c2:	2311      	movs	r3, #17
 80061c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80061c6:	2340      	movs	r3, #64	; 0x40
 80061c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80061ca:	2300      	movs	r3, #0
 80061cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80061ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80061d4:	f107 0308 	add.w	r3, r7, #8
 80061d8:	4619      	mov	r1, r3
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f7ff ff52 	bl	8006084 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80061e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80061e4:	2111      	movs	r1, #17
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 fa22 	bl	8006630 <SDMMC_GetCmdResp1>
 80061ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061ee:	69fb      	ldr	r3, [r7, #28]
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3720      	adds	r7, #32
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b088      	sub	sp, #32
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006206:	2312      	movs	r3, #18
 8006208:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800620a:	2340      	movs	r3, #64	; 0x40
 800620c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800620e:	2300      	movs	r3, #0
 8006210:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006212:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006216:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006218:	f107 0308 	add.w	r3, r7, #8
 800621c:	4619      	mov	r1, r3
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f7ff ff30 	bl	8006084 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006224:	f241 3288 	movw	r2, #5000	; 0x1388
 8006228:	2112      	movs	r1, #18
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 fa00 	bl	8006630 <SDMMC_GetCmdResp1>
 8006230:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006232:	69fb      	ldr	r3, [r7, #28]
}
 8006234:	4618      	mov	r0, r3
 8006236:	3720      	adds	r7, #32
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b088      	sub	sp, #32
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800624a:	2318      	movs	r3, #24
 800624c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800624e:	2340      	movs	r3, #64	; 0x40
 8006250:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006252:	2300      	movs	r3, #0
 8006254:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006256:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800625a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800625c:	f107 0308 	add.w	r3, r7, #8
 8006260:	4619      	mov	r1, r3
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f7ff ff0e 	bl	8006084 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006268:	f241 3288 	movw	r2, #5000	; 0x1388
 800626c:	2118      	movs	r1, #24
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 f9de 	bl	8006630 <SDMMC_GetCmdResp1>
 8006274:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006276:	69fb      	ldr	r3, [r7, #28]
}
 8006278:	4618      	mov	r0, r3
 800627a:	3720      	adds	r7, #32
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b088      	sub	sp, #32
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800628e:	2319      	movs	r3, #25
 8006290:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006292:	2340      	movs	r3, #64	; 0x40
 8006294:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006296:	2300      	movs	r3, #0
 8006298:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800629a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800629e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80062a0:	f107 0308 	add.w	r3, r7, #8
 80062a4:	4619      	mov	r1, r3
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f7ff feec 	bl	8006084 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80062ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80062b0:	2119      	movs	r1, #25
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 f9bc 	bl	8006630 <SDMMC_GetCmdResp1>
 80062b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062ba:	69fb      	ldr	r3, [r7, #28]
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3720      	adds	r7, #32
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b088      	sub	sp, #32
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80062cc:	2300      	movs	r3, #0
 80062ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80062d0:	230c      	movs	r3, #12
 80062d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80062d4:	2340      	movs	r3, #64	; 0x40
 80062d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80062d8:	2300      	movs	r3, #0
 80062da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80062dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80062e2:	f107 0308 	add.w	r3, r7, #8
 80062e6:	4619      	mov	r1, r3
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f7ff fecb 	bl	8006084 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80062ee:	4a05      	ldr	r2, [pc, #20]	; (8006304 <SDMMC_CmdStopTransfer+0x40>)
 80062f0:	210c      	movs	r1, #12
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 f99c 	bl	8006630 <SDMMC_GetCmdResp1>
 80062f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062fa:	69fb      	ldr	r3, [r7, #28]
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3720      	adds	r7, #32
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	05f5e100 	.word	0x05f5e100

08006308 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b08a      	sub	sp, #40	; 0x28
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006318:	2307      	movs	r3, #7
 800631a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800631c:	2340      	movs	r3, #64	; 0x40
 800631e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006320:	2300      	movs	r3, #0
 8006322:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006324:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006328:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800632a:	f107 0310 	add.w	r3, r7, #16
 800632e:	4619      	mov	r1, r3
 8006330:	68f8      	ldr	r0, [r7, #12]
 8006332:	f7ff fea7 	bl	8006084 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006336:	f241 3288 	movw	r2, #5000	; 0x1388
 800633a:	2107      	movs	r1, #7
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f000 f977 	bl	8006630 <SDMMC_GetCmdResp1>
 8006342:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006346:	4618      	mov	r0, r3
 8006348:	3728      	adds	r7, #40	; 0x28
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b088      	sub	sp, #32
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006356:	2300      	movs	r3, #0
 8006358:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800635a:	2300      	movs	r3, #0
 800635c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800635e:	2300      	movs	r3, #0
 8006360:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006362:	2300      	movs	r3, #0
 8006364:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006366:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800636a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800636c:	f107 0308 	add.w	r3, r7, #8
 8006370:	4619      	mov	r1, r3
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f7ff fe86 	bl	8006084 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 f92d 	bl	80065d8 <SDMMC_GetCmdError>
 800637e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006380:	69fb      	ldr	r3, [r7, #28]
}
 8006382:	4618      	mov	r0, r3
 8006384:	3720      	adds	r7, #32
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}

0800638a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800638a:	b580      	push	{r7, lr}
 800638c:	b088      	sub	sp, #32
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006392:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006396:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006398:	2308      	movs	r3, #8
 800639a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800639c:	2340      	movs	r3, #64	; 0x40
 800639e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80063a0:	2300      	movs	r3, #0
 80063a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80063a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80063aa:	f107 0308 	add.w	r3, r7, #8
 80063ae:	4619      	mov	r1, r3
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f7ff fe67 	bl	8006084 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 fb24 	bl	8006a04 <SDMMC_GetCmdResp7>
 80063bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80063be:	69fb      	ldr	r3, [r7, #28]
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3720      	adds	r7, #32
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b088      	sub	sp, #32
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80063d6:	2337      	movs	r3, #55	; 0x37
 80063d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80063da:	2340      	movs	r3, #64	; 0x40
 80063dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80063de:	2300      	movs	r3, #0
 80063e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80063e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80063e8:	f107 0308 	add.w	r3, r7, #8
 80063ec:	4619      	mov	r1, r3
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f7ff fe48 	bl	8006084 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80063f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80063f8:	2137      	movs	r1, #55	; 0x37
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 f918 	bl	8006630 <SDMMC_GetCmdResp1>
 8006400:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006402:	69fb      	ldr	r3, [r7, #28]
}
 8006404:	4618      	mov	r0, r3
 8006406:	3720      	adds	r7, #32
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b088      	sub	sp, #32
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800641c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006420:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006422:	2329      	movs	r3, #41	; 0x29
 8006424:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006426:	2340      	movs	r3, #64	; 0x40
 8006428:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800642a:	2300      	movs	r3, #0
 800642c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800642e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006432:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006434:	f107 0308 	add.w	r3, r7, #8
 8006438:	4619      	mov	r1, r3
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f7ff fe22 	bl	8006084 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 fa2b 	bl	800689c <SDMMC_GetCmdResp3>
 8006446:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006448:	69fb      	ldr	r3, [r7, #28]
}
 800644a:	4618      	mov	r0, r3
 800644c:	3720      	adds	r7, #32
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8006452:	b580      	push	{r7, lr}
 8006454:	b088      	sub	sp, #32
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
 800645a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006460:	2306      	movs	r3, #6
 8006462:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006464:	2340      	movs	r3, #64	; 0x40
 8006466:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006468:	2300      	movs	r3, #0
 800646a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800646c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006470:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006472:	f107 0308 	add.w	r3, r7, #8
 8006476:	4619      	mov	r1, r3
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f7ff fe03 	bl	8006084 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800647e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006482:	2106      	movs	r1, #6
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 f8d3 	bl	8006630 <SDMMC_GetCmdResp1>
 800648a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800648c:	69fb      	ldr	r3, [r7, #28]
}
 800648e:	4618      	mov	r0, r3
 8006490:	3720      	adds	r7, #32
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}

08006496 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8006496:	b580      	push	{r7, lr}
 8006498:	b088      	sub	sp, #32
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800649e:	2300      	movs	r3, #0
 80064a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80064a2:	2333      	movs	r3, #51	; 0x33
 80064a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80064a6:	2340      	movs	r3, #64	; 0x40
 80064a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80064aa:	2300      	movs	r3, #0
 80064ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80064ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80064b4:	f107 0308 	add.w	r3, r7, #8
 80064b8:	4619      	mov	r1, r3
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f7ff fde2 	bl	8006084 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80064c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80064c4:	2133      	movs	r1, #51	; 0x33
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f8b2 	bl	8006630 <SDMMC_GetCmdResp1>
 80064cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80064ce:	69fb      	ldr	r3, [r7, #28]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3720      	adds	r7, #32
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b088      	sub	sp, #32
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80064e0:	2300      	movs	r3, #0
 80064e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80064e4:	2302      	movs	r3, #2
 80064e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80064e8:	23c0      	movs	r3, #192	; 0xc0
 80064ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80064ec:	2300      	movs	r3, #0
 80064ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80064f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80064f6:	f107 0308 	add.w	r3, r7, #8
 80064fa:	4619      	mov	r1, r3
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f7ff fdc1 	bl	8006084 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f982 	bl	800680c <SDMMC_GetCmdResp2>
 8006508:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800650a:	69fb      	ldr	r3, [r7, #28]
}
 800650c:	4618      	mov	r0, r3
 800650e:	3720      	adds	r7, #32
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b088      	sub	sp, #32
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006522:	2309      	movs	r3, #9
 8006524:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006526:	23c0      	movs	r3, #192	; 0xc0
 8006528:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800652a:	2300      	movs	r3, #0
 800652c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800652e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006532:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006534:	f107 0308 	add.w	r3, r7, #8
 8006538:	4619      	mov	r1, r3
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f7ff fda2 	bl	8006084 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 f963 	bl	800680c <SDMMC_GetCmdResp2>
 8006546:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006548:	69fb      	ldr	r3, [r7, #28]
}
 800654a:	4618      	mov	r0, r3
 800654c:	3720      	adds	r7, #32
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}

08006552 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006552:	b580      	push	{r7, lr}
 8006554:	b088      	sub	sp, #32
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
 800655a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800655c:	2300      	movs	r3, #0
 800655e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006560:	2303      	movs	r3, #3
 8006562:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006564:	2340      	movs	r3, #64	; 0x40
 8006566:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006568:	2300      	movs	r3, #0
 800656a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800656c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006570:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006572:	f107 0308 	add.w	r3, r7, #8
 8006576:	4619      	mov	r1, r3
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f7ff fd83 	bl	8006084 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800657e:	683a      	ldr	r2, [r7, #0]
 8006580:	2103      	movs	r1, #3
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 f9c8 	bl	8006918 <SDMMC_GetCmdResp6>
 8006588:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800658a:	69fb      	ldr	r3, [r7, #28]
}
 800658c:	4618      	mov	r0, r3
 800658e:	3720      	adds	r7, #32
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b088      	sub	sp, #32
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80065a2:	230d      	movs	r3, #13
 80065a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80065a6:	2340      	movs	r3, #64	; 0x40
 80065a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80065aa:	2300      	movs	r3, #0
 80065ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80065ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80065b4:	f107 0308 	add.w	r3, r7, #8
 80065b8:	4619      	mov	r1, r3
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f7ff fd62 	bl	8006084 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80065c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80065c4:	210d      	movs	r1, #13
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 f832 	bl	8006630 <SDMMC_GetCmdResp1>
 80065cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80065ce:	69fb      	ldr	r3, [r7, #28]
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3720      	adds	r7, #32
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80065e0:	4b11      	ldr	r3, [pc, #68]	; (8006628 <SDMMC_GetCmdError+0x50>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a11      	ldr	r2, [pc, #68]	; (800662c <SDMMC_GetCmdError+0x54>)
 80065e6:	fba2 2303 	umull	r2, r3, r2, r3
 80065ea:	0a5b      	lsrs	r3, r3, #9
 80065ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80065f0:	fb02 f303 	mul.w	r3, r2, r3
 80065f4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	1e5a      	subs	r2, r3, #1
 80065fa:	60fa      	str	r2, [r7, #12]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d102      	bne.n	8006606 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006600:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006604:	e009      	b.n	800661a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800660a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800660e:	2b00      	cmp	r3, #0
 8006610:	d0f1      	beq.n	80065f6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	22c5      	movs	r2, #197	; 0xc5
 8006616:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3714      	adds	r7, #20
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	20000018 	.word	0x20000018
 800662c:	10624dd3 	.word	0x10624dd3

08006630 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b088      	sub	sp, #32
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	460b      	mov	r3, r1
 800663a:	607a      	str	r2, [r7, #4]
 800663c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800663e:	4b70      	ldr	r3, [pc, #448]	; (8006800 <SDMMC_GetCmdResp1+0x1d0>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a70      	ldr	r2, [pc, #448]	; (8006804 <SDMMC_GetCmdResp1+0x1d4>)
 8006644:	fba2 2303 	umull	r2, r3, r2, r3
 8006648:	0a5a      	lsrs	r2, r3, #9
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	fb02 f303 	mul.w	r3, r2, r3
 8006650:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	1e5a      	subs	r2, r3, #1
 8006656:	61fa      	str	r2, [r7, #28]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d102      	bne.n	8006662 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800665c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006660:	e0c9      	b.n	80067f6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006666:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800666e:	2b00      	cmp	r3, #0
 8006670:	d0ef      	beq.n	8006652 <SDMMC_GetCmdResp1+0x22>
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1ea      	bne.n	8006652 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006680:	f003 0304 	and.w	r3, r3, #4
 8006684:	2b00      	cmp	r3, #0
 8006686:	d004      	beq.n	8006692 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2204      	movs	r2, #4
 800668c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800668e:	2304      	movs	r3, #4
 8006690:	e0b1      	b.n	80067f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006696:	f003 0301 	and.w	r3, r3, #1
 800669a:	2b00      	cmp	r3, #0
 800669c:	d004      	beq.n	80066a8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2201      	movs	r2, #1
 80066a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e0a6      	b.n	80067f6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	22c5      	movs	r2, #197	; 0xc5
 80066ac:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f7ff fd12 	bl	80060d8 <SDIO_GetCommandResponse>
 80066b4:	4603      	mov	r3, r0
 80066b6:	461a      	mov	r2, r3
 80066b8:	7afb      	ldrb	r3, [r7, #11]
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d001      	beq.n	80066c2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80066be:	2301      	movs	r3, #1
 80066c0:	e099      	b.n	80067f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80066c2:	2100      	movs	r1, #0
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	f7ff fd14 	bl	80060f2 <SDIO_GetResponse>
 80066ca:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	4b4e      	ldr	r3, [pc, #312]	; (8006808 <SDMMC_GetCmdResp1+0x1d8>)
 80066d0:	4013      	ands	r3, r2
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d101      	bne.n	80066da <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80066d6:	2300      	movs	r3, #0
 80066d8:	e08d      	b.n	80067f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	da02      	bge.n	80066e6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80066e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80066e4:	e087      	b.n	80067f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d001      	beq.n	80066f4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80066f0:	2340      	movs	r3, #64	; 0x40
 80066f2:	e080      	b.n	80067f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d001      	beq.n	8006702 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80066fe:	2380      	movs	r3, #128	; 0x80
 8006700:	e079      	b.n	80067f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d002      	beq.n	8006712 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800670c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006710:	e071      	b.n	80067f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d002      	beq.n	8006722 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800671c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006720:	e069      	b.n	80067f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d002      	beq.n	8006732 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800672c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006730:	e061      	b.n	80067f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006738:	2b00      	cmp	r3, #0
 800673a:	d002      	beq.n	8006742 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800673c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006740:	e059      	b.n	80067f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006748:	2b00      	cmp	r3, #0
 800674a:	d002      	beq.n	8006752 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800674c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006750:	e051      	b.n	80067f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d002      	beq.n	8006762 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800675c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006760:	e049      	b.n	80067f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006768:	2b00      	cmp	r3, #0
 800676a:	d002      	beq.n	8006772 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800676c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006770:	e041      	b.n	80067f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006778:	2b00      	cmp	r3, #0
 800677a:	d002      	beq.n	8006782 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800677c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006780:	e039      	b.n	80067f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006788:	2b00      	cmp	r3, #0
 800678a:	d002      	beq.n	8006792 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800678c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006790:	e031      	b.n	80067f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006798:	2b00      	cmp	r3, #0
 800679a:	d002      	beq.n	80067a2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800679c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80067a0:	e029      	b.n	80067f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d002      	beq.n	80067b2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80067ac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80067b0:	e021      	b.n	80067f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d002      	beq.n	80067c2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80067bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80067c0:	e019      	b.n	80067f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d002      	beq.n	80067d2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80067cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80067d0:	e011      	b.n	80067f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d002      	beq.n	80067e2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80067dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80067e0:	e009      	b.n	80067f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	f003 0308 	and.w	r3, r3, #8
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d002      	beq.n	80067f2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80067ec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80067f0:	e001      	b.n	80067f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80067f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3720      	adds	r7, #32
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	20000018 	.word	0x20000018
 8006804:	10624dd3 	.word	0x10624dd3
 8006808:	fdffe008 	.word	0xfdffe008

0800680c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006814:	4b1f      	ldr	r3, [pc, #124]	; (8006894 <SDMMC_GetCmdResp2+0x88>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a1f      	ldr	r2, [pc, #124]	; (8006898 <SDMMC_GetCmdResp2+0x8c>)
 800681a:	fba2 2303 	umull	r2, r3, r2, r3
 800681e:	0a5b      	lsrs	r3, r3, #9
 8006820:	f241 3288 	movw	r2, #5000	; 0x1388
 8006824:	fb02 f303 	mul.w	r3, r2, r3
 8006828:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	1e5a      	subs	r2, r3, #1
 800682e:	60fa      	str	r2, [r7, #12]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d102      	bne.n	800683a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006834:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006838:	e026      	b.n	8006888 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800683e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006846:	2b00      	cmp	r3, #0
 8006848:	d0ef      	beq.n	800682a <SDMMC_GetCmdResp2+0x1e>
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006850:	2b00      	cmp	r3, #0
 8006852:	d1ea      	bne.n	800682a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006858:	f003 0304 	and.w	r3, r3, #4
 800685c:	2b00      	cmp	r3, #0
 800685e:	d004      	beq.n	800686a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2204      	movs	r2, #4
 8006864:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006866:	2304      	movs	r3, #4
 8006868:	e00e      	b.n	8006888 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800686e:	f003 0301 	and.w	r3, r3, #1
 8006872:	2b00      	cmp	r3, #0
 8006874:	d004      	beq.n	8006880 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2201      	movs	r2, #1
 800687a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800687c:	2301      	movs	r3, #1
 800687e:	e003      	b.n	8006888 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	22c5      	movs	r2, #197	; 0xc5
 8006884:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3714      	adds	r7, #20
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr
 8006894:	20000018 	.word	0x20000018
 8006898:	10624dd3 	.word	0x10624dd3

0800689c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800689c:	b480      	push	{r7}
 800689e:	b085      	sub	sp, #20
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80068a4:	4b1a      	ldr	r3, [pc, #104]	; (8006910 <SDMMC_GetCmdResp3+0x74>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a1a      	ldr	r2, [pc, #104]	; (8006914 <SDMMC_GetCmdResp3+0x78>)
 80068aa:	fba2 2303 	umull	r2, r3, r2, r3
 80068ae:	0a5b      	lsrs	r3, r3, #9
 80068b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80068b4:	fb02 f303 	mul.w	r3, r2, r3
 80068b8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	1e5a      	subs	r2, r3, #1
 80068be:	60fa      	str	r2, [r7, #12]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d102      	bne.n	80068ca <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80068c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80068c8:	e01b      	b.n	8006902 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ce:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d0ef      	beq.n	80068ba <SDMMC_GetCmdResp3+0x1e>
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d1ea      	bne.n	80068ba <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068e8:	f003 0304 	and.w	r3, r3, #4
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d004      	beq.n	80068fa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2204      	movs	r2, #4
 80068f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80068f6:	2304      	movs	r3, #4
 80068f8:	e003      	b.n	8006902 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	22c5      	movs	r2, #197	; 0xc5
 80068fe:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3714      	adds	r7, #20
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr
 800690e:	bf00      	nop
 8006910:	20000018 	.word	0x20000018
 8006914:	10624dd3 	.word	0x10624dd3

08006918 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b088      	sub	sp, #32
 800691c:	af00      	add	r7, sp, #0
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	460b      	mov	r3, r1
 8006922:	607a      	str	r2, [r7, #4]
 8006924:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006926:	4b35      	ldr	r3, [pc, #212]	; (80069fc <SDMMC_GetCmdResp6+0xe4>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a35      	ldr	r2, [pc, #212]	; (8006a00 <SDMMC_GetCmdResp6+0xe8>)
 800692c:	fba2 2303 	umull	r2, r3, r2, r3
 8006930:	0a5b      	lsrs	r3, r3, #9
 8006932:	f241 3288 	movw	r2, #5000	; 0x1388
 8006936:	fb02 f303 	mul.w	r3, r2, r3
 800693a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	1e5a      	subs	r2, r3, #1
 8006940:	61fa      	str	r2, [r7, #28]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d102      	bne.n	800694c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006946:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800694a:	e052      	b.n	80069f2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006950:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006958:	2b00      	cmp	r3, #0
 800695a:	d0ef      	beq.n	800693c <SDMMC_GetCmdResp6+0x24>
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1ea      	bne.n	800693c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800696a:	f003 0304 	and.w	r3, r3, #4
 800696e:	2b00      	cmp	r3, #0
 8006970:	d004      	beq.n	800697c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2204      	movs	r2, #4
 8006976:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006978:	2304      	movs	r3, #4
 800697a:	e03a      	b.n	80069f2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006980:	f003 0301 	and.w	r3, r3, #1
 8006984:	2b00      	cmp	r3, #0
 8006986:	d004      	beq.n	8006992 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2201      	movs	r2, #1
 800698c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800698e:	2301      	movs	r3, #1
 8006990:	e02f      	b.n	80069f2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006992:	68f8      	ldr	r0, [r7, #12]
 8006994:	f7ff fba0 	bl	80060d8 <SDIO_GetCommandResponse>
 8006998:	4603      	mov	r3, r0
 800699a:	461a      	mov	r2, r3
 800699c:	7afb      	ldrb	r3, [r7, #11]
 800699e:	4293      	cmp	r3, r2
 80069a0:	d001      	beq.n	80069a6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e025      	b.n	80069f2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	22c5      	movs	r2, #197	; 0xc5
 80069aa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80069ac:	2100      	movs	r1, #0
 80069ae:	68f8      	ldr	r0, [r7, #12]
 80069b0:	f7ff fb9f 	bl	80060f2 <SDIO_GetResponse>
 80069b4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d106      	bne.n	80069ce <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	0c1b      	lsrs	r3, r3, #16
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80069ca:	2300      	movs	r3, #0
 80069cc:	e011      	b.n	80069f2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d002      	beq.n	80069de <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80069d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80069dc:	e009      	b.n	80069f2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d002      	beq.n	80069ee <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80069e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069ec:	e001      	b.n	80069f2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80069ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3720      	adds	r7, #32
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	20000018 	.word	0x20000018
 8006a00:	10624dd3 	.word	0x10624dd3

08006a04 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b085      	sub	sp, #20
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006a0c:	4b22      	ldr	r3, [pc, #136]	; (8006a98 <SDMMC_GetCmdResp7+0x94>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a22      	ldr	r2, [pc, #136]	; (8006a9c <SDMMC_GetCmdResp7+0x98>)
 8006a12:	fba2 2303 	umull	r2, r3, r2, r3
 8006a16:	0a5b      	lsrs	r3, r3, #9
 8006a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a1c:	fb02 f303 	mul.w	r3, r2, r3
 8006a20:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	1e5a      	subs	r2, r3, #1
 8006a26:	60fa      	str	r2, [r7, #12]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d102      	bne.n	8006a32 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006a2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006a30:	e02c      	b.n	8006a8c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a36:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d0ef      	beq.n	8006a22 <SDMMC_GetCmdResp7+0x1e>
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d1ea      	bne.n	8006a22 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a50:	f003 0304 	and.w	r3, r3, #4
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d004      	beq.n	8006a62 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2204      	movs	r2, #4
 8006a5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006a5e:	2304      	movs	r3, #4
 8006a60:	e014      	b.n	8006a8c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a66:	f003 0301 	and.w	r3, r3, #1
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d004      	beq.n	8006a78 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2201      	movs	r2, #1
 8006a72:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006a74:	2301      	movs	r3, #1
 8006a76:	e009      	b.n	8006a8c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d002      	beq.n	8006a8a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2240      	movs	r2, #64	; 0x40
 8006a88:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006a8a:	2300      	movs	r3, #0
  
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3714      	adds	r7, #20
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr
 8006a98:	20000018 	.word	0x20000018
 8006a9c:	10624dd3 	.word	0x10624dd3

08006aa0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006aa4:	4904      	ldr	r1, [pc, #16]	; (8006ab8 <MX_FATFS_Init+0x18>)
 8006aa6:	4805      	ldr	r0, [pc, #20]	; (8006abc <MX_FATFS_Init+0x1c>)
 8006aa8:	f003 f954 	bl	8009d54 <FATFS_LinkDriver>
 8006aac:	4603      	mov	r3, r0
 8006aae:	461a      	mov	r2, r3
 8006ab0:	4b03      	ldr	r3, [pc, #12]	; (8006ac0 <MX_FATFS_Init+0x20>)
 8006ab2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006ab4:	bf00      	nop
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	2000928c 	.word	0x2000928c
 8006abc:	0801b7c8 	.word	0x0801b7c8
 8006ac0:	20009288 	.word	0x20009288

08006ac4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006ac8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b082      	sub	sp, #8
 8006ad8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8006ada:	2300      	movs	r3, #0
 8006adc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006ade:	f000 f896 	bl	8006c0e <BSP_SD_IsDetected>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d001      	beq.n	8006aec <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e012      	b.n	8006b12 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8006aec:	480b      	ldr	r0, [pc, #44]	; (8006b1c <BSP_SD_Init+0x48>)
 8006aee:	f7fd fc1f 	bl	8004330 <HAL_SD_Init>
 8006af2:	4603      	mov	r3, r0
 8006af4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8006af6:	79fb      	ldrb	r3, [r7, #7]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d109      	bne.n	8006b10 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8006afc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006b00:	4806      	ldr	r0, [pc, #24]	; (8006b1c <BSP_SD_Init+0x48>)
 8006b02:	f7fe f9eb 	bl	8004edc <HAL_SD_ConfigWideBusOperation>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d001      	beq.n	8006b10 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8006b10:	79fb      	ldrb	r3, [r7, #7]
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3708      	adds	r7, #8
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	20006654 	.word	0x20006654

08006b20 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b086      	sub	sp, #24
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	68f9      	ldr	r1, [r7, #12]
 8006b36:	4806      	ldr	r0, [pc, #24]	; (8006b50 <BSP_SD_ReadBlocks_DMA+0x30>)
 8006b38:	f7fd fca8 	bl	800448c <HAL_SD_ReadBlocks_DMA>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d001      	beq.n	8006b46 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006b46:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3718      	adds	r7, #24
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	20006654 	.word	0x20006654

08006b54 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b086      	sub	sp, #24
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006b60:	2300      	movs	r3, #0
 8006b62:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	68ba      	ldr	r2, [r7, #8]
 8006b68:	68f9      	ldr	r1, [r7, #12]
 8006b6a:	4806      	ldr	r0, [pc, #24]	; (8006b84 <BSP_SD_WriteBlocks_DMA+0x30>)
 8006b6c:	f7fd fd70 	bl	8004650 <HAL_SD_WriteBlocks_DMA>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d001      	beq.n	8006b7a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006b7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3718      	adds	r7, #24
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	20006654 	.word	0x20006654

08006b88 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006b8c:	4805      	ldr	r0, [pc, #20]	; (8006ba4 <BSP_SD_GetCardState+0x1c>)
 8006b8e:	f7fe fa3f 	bl	8005010 <HAL_SD_GetCardState>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b04      	cmp	r3, #4
 8006b96:	bf14      	ite	ne
 8006b98:	2301      	movne	r3, #1
 8006b9a:	2300      	moveq	r3, #0
 8006b9c:	b2db      	uxtb	r3, r3
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	20006654 	.word	0x20006654

08006ba8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006bb0:	6879      	ldr	r1, [r7, #4]
 8006bb2:	4803      	ldr	r0, [pc, #12]	; (8006bc0 <BSP_SD_GetCardInfo+0x18>)
 8006bb4:	f7fe f966 	bl	8004e84 <HAL_SD_GetCardInfo>
}
 8006bb8:	bf00      	nop
 8006bba:	3708      	adds	r7, #8
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	20006654 	.word	0x20006654

08006bc4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8006bcc:	f000 f818 	bl	8006c00 <BSP_SD_AbortCallback>
}
 8006bd0:	bf00      	nop
 8006bd2:	3708      	adds	r7, #8
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8006be0:	f000 f98c 	bl	8006efc <BSP_SD_WriteCpltCallback>
}
 8006be4:	bf00      	nop
 8006be6:	3708      	adds	r7, #8
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8006bf4:	f000 f98e 	bl	8006f14 <BSP_SD_ReadCpltCallback>
}
 8006bf8:	bf00      	nop
 8006bfa:	3708      	adds	r7, #8
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8006c00:	b480      	push	{r7}
 8006c02:	af00      	add	r7, sp, #0

}
 8006c04:	bf00      	nop
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr

08006c0e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006c0e:	b480      	push	{r7}
 8006c10:	b083      	sub	sp, #12
 8006c12:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006c14:	2301      	movs	r3, #1
 8006c16:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8006c18:	79fb      	ldrb	r3, [r7, #7]
 8006c1a:	b2db      	uxtb	r3, r3
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8006c30:	f7fa ff4e 	bl	8001ad0 <HAL_GetTick>
 8006c34:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8006c36:	e006      	b.n	8006c46 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006c38:	f7ff ffa6 	bl	8006b88 <BSP_SD_GetCardState>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d101      	bne.n	8006c46 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8006c42:	2300      	movs	r3, #0
 8006c44:	e009      	b.n	8006c5a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8006c46:	f7fa ff43 	bl	8001ad0 <HAL_GetTick>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	1ad3      	subs	r3, r2, r3
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d8f0      	bhi.n	8006c38 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8006c56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
	...

08006c64 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006c6e:	4b0b      	ldr	r3, [pc, #44]	; (8006c9c <SD_CheckStatus+0x38>)
 8006c70:	2201      	movs	r2, #1
 8006c72:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8006c74:	f7ff ff88 	bl	8006b88 <BSP_SD_GetCardState>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d107      	bne.n	8006c8e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006c7e:	4b07      	ldr	r3, [pc, #28]	; (8006c9c <SD_CheckStatus+0x38>)
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	f023 0301 	bic.w	r3, r3, #1
 8006c88:	b2da      	uxtb	r2, r3
 8006c8a:	4b04      	ldr	r3, [pc, #16]	; (8006c9c <SD_CheckStatus+0x38>)
 8006c8c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006c8e:	4b03      	ldr	r3, [pc, #12]	; (8006c9c <SD_CheckStatus+0x38>)
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	b2db      	uxtb	r3, r3
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3708      	adds	r7, #8
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	20000021 	.word	0x20000021

08006ca0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8006caa:	f7ff ff13 	bl	8006ad4 <BSP_SD_Init>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d107      	bne.n	8006cc4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8006cb4:	79fb      	ldrb	r3, [r7, #7]
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f7ff ffd4 	bl	8006c64 <SD_CheckStatus>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	4b04      	ldr	r3, [pc, #16]	; (8006cd4 <SD_initialize+0x34>)
 8006cc2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8006cc4:	4b03      	ldr	r3, [pc, #12]	; (8006cd4 <SD_initialize+0x34>)
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	b2db      	uxtb	r3, r3
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3708      	adds	r7, #8
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	20000021 	.word	0x20000021

08006cd8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	4603      	mov	r3, r0
 8006ce0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006ce2:	79fb      	ldrb	r3, [r7, #7]
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f7ff ffbd 	bl	8006c64 <SD_CheckStatus>
 8006cea:	4603      	mov	r3, r0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3708      	adds	r7, #8
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b086      	sub	sp, #24
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60b9      	str	r1, [r7, #8]
 8006cfc:	607a      	str	r2, [r7, #4]
 8006cfe:	603b      	str	r3, [r7, #0]
 8006d00:	4603      	mov	r3, r0
 8006d02:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006d08:	f247 5030 	movw	r0, #30000	; 0x7530
 8006d0c:	f7ff ff8c 	bl	8006c28 <SD_CheckStatusWithTimeout>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	da01      	bge.n	8006d1a <SD_read+0x26>
  {
    return res;
 8006d16:	7dfb      	ldrb	r3, [r7, #23]
 8006d18:	e03b      	b.n	8006d92 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8006d1a:	683a      	ldr	r2, [r7, #0]
 8006d1c:	6879      	ldr	r1, [r7, #4]
 8006d1e:	68b8      	ldr	r0, [r7, #8]
 8006d20:	f7ff fefe 	bl	8006b20 <BSP_SD_ReadBlocks_DMA>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d132      	bne.n	8006d90 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8006d2a:	4b1c      	ldr	r3, [pc, #112]	; (8006d9c <SD_read+0xa8>)
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8006d30:	f7fa fece 	bl	8001ad0 <HAL_GetTick>
 8006d34:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8006d36:	bf00      	nop
 8006d38:	4b18      	ldr	r3, [pc, #96]	; (8006d9c <SD_read+0xa8>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d108      	bne.n	8006d52 <SD_read+0x5e>
 8006d40:	f7fa fec6 	bl	8001ad0 <HAL_GetTick>
 8006d44:	4602      	mov	r2, r0
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	1ad3      	subs	r3, r2, r3
 8006d4a:	f247 522f 	movw	r2, #29999	; 0x752f
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d9f2      	bls.n	8006d38 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8006d52:	4b12      	ldr	r3, [pc, #72]	; (8006d9c <SD_read+0xa8>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d102      	bne.n	8006d60 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	75fb      	strb	r3, [r7, #23]
 8006d5e:	e017      	b.n	8006d90 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8006d60:	4b0e      	ldr	r3, [pc, #56]	; (8006d9c <SD_read+0xa8>)
 8006d62:	2200      	movs	r2, #0
 8006d64:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8006d66:	f7fa feb3 	bl	8001ad0 <HAL_GetTick>
 8006d6a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006d6c:	e007      	b.n	8006d7e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006d6e:	f7ff ff0b 	bl	8006b88 <BSP_SD_GetCardState>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d102      	bne.n	8006d7e <SD_read+0x8a>
          {
            res = RES_OK;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8006d7c:	e008      	b.n	8006d90 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006d7e:	f7fa fea7 	bl	8001ad0 <HAL_GetTick>
 8006d82:	4602      	mov	r2, r0
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	1ad3      	subs	r3, r2, r3
 8006d88:	f247 522f 	movw	r2, #29999	; 0x752f
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d9ee      	bls.n	8006d6e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8006d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3718      	adds	r7, #24
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	200010c4 	.word	0x200010c4

08006da0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b086      	sub	sp, #24
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60b9      	str	r1, [r7, #8]
 8006da8:	607a      	str	r2, [r7, #4]
 8006daa:	603b      	str	r3, [r7, #0]
 8006dac:	4603      	mov	r3, r0
 8006dae:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8006db4:	4b24      	ldr	r3, [pc, #144]	; (8006e48 <SD_write+0xa8>)
 8006db6:	2200      	movs	r2, #0
 8006db8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006dba:	f247 5030 	movw	r0, #30000	; 0x7530
 8006dbe:	f7ff ff33 	bl	8006c28 <SD_CheckStatusWithTimeout>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	da01      	bge.n	8006dcc <SD_write+0x2c>
  {
    return res;
 8006dc8:	7dfb      	ldrb	r3, [r7, #23]
 8006dca:	e038      	b.n	8006e3e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8006dcc:	683a      	ldr	r2, [r7, #0]
 8006dce:	6879      	ldr	r1, [r7, #4]
 8006dd0:	68b8      	ldr	r0, [r7, #8]
 8006dd2:	f7ff febf 	bl	8006b54 <BSP_SD_WriteBlocks_DMA>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d12f      	bne.n	8006e3c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8006ddc:	f7fa fe78 	bl	8001ad0 <HAL_GetTick>
 8006de0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8006de2:	bf00      	nop
 8006de4:	4b18      	ldr	r3, [pc, #96]	; (8006e48 <SD_write+0xa8>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d108      	bne.n	8006dfe <SD_write+0x5e>
 8006dec:	f7fa fe70 	bl	8001ad0 <HAL_GetTick>
 8006df0:	4602      	mov	r2, r0
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	f247 522f 	movw	r2, #29999	; 0x752f
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d9f2      	bls.n	8006de4 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8006dfe:	4b12      	ldr	r3, [pc, #72]	; (8006e48 <SD_write+0xa8>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d102      	bne.n	8006e0c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	75fb      	strb	r3, [r7, #23]
 8006e0a:	e017      	b.n	8006e3c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8006e0c:	4b0e      	ldr	r3, [pc, #56]	; (8006e48 <SD_write+0xa8>)
 8006e0e:	2200      	movs	r2, #0
 8006e10:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8006e12:	f7fa fe5d 	bl	8001ad0 <HAL_GetTick>
 8006e16:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006e18:	e007      	b.n	8006e2a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006e1a:	f7ff feb5 	bl	8006b88 <BSP_SD_GetCardState>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d102      	bne.n	8006e2a <SD_write+0x8a>
          {
            res = RES_OK;
 8006e24:	2300      	movs	r3, #0
 8006e26:	75fb      	strb	r3, [r7, #23]
            break;
 8006e28:	e008      	b.n	8006e3c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006e2a:	f7fa fe51 	bl	8001ad0 <HAL_GetTick>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	1ad3      	subs	r3, r2, r3
 8006e34:	f247 522f 	movw	r2, #29999	; 0x752f
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d9ee      	bls.n	8006e1a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8006e3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3718      	adds	r7, #24
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	200010c0 	.word	0x200010c0

08006e4c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b08c      	sub	sp, #48	; 0x30
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	4603      	mov	r3, r0
 8006e54:	603a      	str	r2, [r7, #0]
 8006e56:	71fb      	strb	r3, [r7, #7]
 8006e58:	460b      	mov	r3, r1
 8006e5a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006e62:	4b25      	ldr	r3, [pc, #148]	; (8006ef8 <SD_ioctl+0xac>)
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	f003 0301 	and.w	r3, r3, #1
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d001      	beq.n	8006e74 <SD_ioctl+0x28>
 8006e70:	2303      	movs	r3, #3
 8006e72:	e03c      	b.n	8006eee <SD_ioctl+0xa2>

  switch (cmd)
 8006e74:	79bb      	ldrb	r3, [r7, #6]
 8006e76:	2b03      	cmp	r3, #3
 8006e78:	d834      	bhi.n	8006ee4 <SD_ioctl+0x98>
 8006e7a:	a201      	add	r2, pc, #4	; (adr r2, 8006e80 <SD_ioctl+0x34>)
 8006e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e80:	08006e91 	.word	0x08006e91
 8006e84:	08006e99 	.word	0x08006e99
 8006e88:	08006eb1 	.word	0x08006eb1
 8006e8c:	08006ecb 	.word	0x08006ecb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006e90:	2300      	movs	r3, #0
 8006e92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006e96:	e028      	b.n	8006eea <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006e98:	f107 030c 	add.w	r3, r7, #12
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7ff fe83 	bl	8006ba8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006eae:	e01c      	b.n	8006eea <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006eb0:	f107 030c 	add.w	r3, r7, #12
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f7ff fe77 	bl	8006ba8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006ec8:	e00f      	b.n	8006eea <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006eca:	f107 030c 	add.w	r3, r7, #12
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f7ff fe6a 	bl	8006ba8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed6:	0a5a      	lsrs	r2, r3, #9
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006edc:	2300      	movs	r3, #0
 8006ede:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006ee2:	e002      	b.n	8006eea <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006ee4:	2304      	movs	r3, #4
 8006ee6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8006eea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3730      	adds	r7, #48	; 0x30
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	20000021 	.word	0x20000021

08006efc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8006efc:	b480      	push	{r7}
 8006efe:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8006f00:	4b03      	ldr	r3, [pc, #12]	; (8006f10 <BSP_SD_WriteCpltCallback+0x14>)
 8006f02:	2201      	movs	r2, #1
 8006f04:	601a      	str	r2, [r3, #0]
}
 8006f06:	bf00      	nop
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr
 8006f10:	200010c0 	.word	0x200010c0

08006f14 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8006f14:	b480      	push	{r7}
 8006f16:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8006f18:	4b03      	ldr	r3, [pc, #12]	; (8006f28 <BSP_SD_ReadCpltCallback+0x14>)
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	601a      	str	r2, [r3, #0]
}
 8006f1e:	bf00      	nop
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr
 8006f28:	200010c4 	.word	0x200010c4

08006f2c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8006f32:	4b8d      	ldr	r3, [pc, #564]	; (8007168 <MX_LWIP_Init+0x23c>)
 8006f34:	22c0      	movs	r2, #192	; 0xc0
 8006f36:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8006f38:	4b8b      	ldr	r3, [pc, #556]	; (8007168 <MX_LWIP_Init+0x23c>)
 8006f3a:	22a8      	movs	r2, #168	; 0xa8
 8006f3c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 18;
 8006f3e:	4b8a      	ldr	r3, [pc, #552]	; (8007168 <MX_LWIP_Init+0x23c>)
 8006f40:	2212      	movs	r2, #18
 8006f42:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 125;
 8006f44:	4b88      	ldr	r3, [pc, #544]	; (8007168 <MX_LWIP_Init+0x23c>)
 8006f46:	227d      	movs	r2, #125	; 0x7d
 8006f48:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8006f4a:	4b88      	ldr	r3, [pc, #544]	; (800716c <MX_LWIP_Init+0x240>)
 8006f4c:	22ff      	movs	r2, #255	; 0xff
 8006f4e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8006f50:	4b86      	ldr	r3, [pc, #536]	; (800716c <MX_LWIP_Init+0x240>)
 8006f52:	22ff      	movs	r2, #255	; 0xff
 8006f54:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8006f56:	4b85      	ldr	r3, [pc, #532]	; (800716c <MX_LWIP_Init+0x240>)
 8006f58:	22ff      	movs	r2, #255	; 0xff
 8006f5a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8006f5c:	4b83      	ldr	r3, [pc, #524]	; (800716c <MX_LWIP_Init+0x240>)
 8006f5e:	2200      	movs	r2, #0
 8006f60:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8006f62:	4b83      	ldr	r3, [pc, #524]	; (8007170 <MX_LWIP_Init+0x244>)
 8006f64:	22c0      	movs	r2, #192	; 0xc0
 8006f66:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8006f68:	4b81      	ldr	r3, [pc, #516]	; (8007170 <MX_LWIP_Init+0x244>)
 8006f6a:	22a8      	movs	r2, #168	; 0xa8
 8006f6c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 18;
 8006f6e:	4b80      	ldr	r3, [pc, #512]	; (8007170 <MX_LWIP_Init+0x244>)
 8006f70:	2212      	movs	r2, #18
 8006f72:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8006f74:	4b7e      	ldr	r3, [pc, #504]	; (8007170 <MX_LWIP_Init+0x244>)
 8006f76:	2201      	movs	r2, #1
 8006f78:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8006f7a:	f004 ffeb 	bl	800bf54 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8006f7e:	4b7a      	ldr	r3, [pc, #488]	; (8007168 <MX_LWIP_Init+0x23c>)
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	061a      	lsls	r2, r3, #24
 8006f84:	4b78      	ldr	r3, [pc, #480]	; (8007168 <MX_LWIP_Init+0x23c>)
 8006f86:	785b      	ldrb	r3, [r3, #1]
 8006f88:	041b      	lsls	r3, r3, #16
 8006f8a:	431a      	orrs	r2, r3
 8006f8c:	4b76      	ldr	r3, [pc, #472]	; (8007168 <MX_LWIP_Init+0x23c>)
 8006f8e:	789b      	ldrb	r3, [r3, #2]
 8006f90:	021b      	lsls	r3, r3, #8
 8006f92:	4313      	orrs	r3, r2
 8006f94:	4a74      	ldr	r2, [pc, #464]	; (8007168 <MX_LWIP_Init+0x23c>)
 8006f96:	78d2      	ldrb	r2, [r2, #3]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	061a      	lsls	r2, r3, #24
 8006f9c:	4b72      	ldr	r3, [pc, #456]	; (8007168 <MX_LWIP_Init+0x23c>)
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	0619      	lsls	r1, r3, #24
 8006fa2:	4b71      	ldr	r3, [pc, #452]	; (8007168 <MX_LWIP_Init+0x23c>)
 8006fa4:	785b      	ldrb	r3, [r3, #1]
 8006fa6:	041b      	lsls	r3, r3, #16
 8006fa8:	4319      	orrs	r1, r3
 8006faa:	4b6f      	ldr	r3, [pc, #444]	; (8007168 <MX_LWIP_Init+0x23c>)
 8006fac:	789b      	ldrb	r3, [r3, #2]
 8006fae:	021b      	lsls	r3, r3, #8
 8006fb0:	430b      	orrs	r3, r1
 8006fb2:	496d      	ldr	r1, [pc, #436]	; (8007168 <MX_LWIP_Init+0x23c>)
 8006fb4:	78c9      	ldrb	r1, [r1, #3]
 8006fb6:	430b      	orrs	r3, r1
 8006fb8:	021b      	lsls	r3, r3, #8
 8006fba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006fbe:	431a      	orrs	r2, r3
 8006fc0:	4b69      	ldr	r3, [pc, #420]	; (8007168 <MX_LWIP_Init+0x23c>)
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	0619      	lsls	r1, r3, #24
 8006fc6:	4b68      	ldr	r3, [pc, #416]	; (8007168 <MX_LWIP_Init+0x23c>)
 8006fc8:	785b      	ldrb	r3, [r3, #1]
 8006fca:	041b      	lsls	r3, r3, #16
 8006fcc:	4319      	orrs	r1, r3
 8006fce:	4b66      	ldr	r3, [pc, #408]	; (8007168 <MX_LWIP_Init+0x23c>)
 8006fd0:	789b      	ldrb	r3, [r3, #2]
 8006fd2:	021b      	lsls	r3, r3, #8
 8006fd4:	430b      	orrs	r3, r1
 8006fd6:	4964      	ldr	r1, [pc, #400]	; (8007168 <MX_LWIP_Init+0x23c>)
 8006fd8:	78c9      	ldrb	r1, [r1, #3]
 8006fda:	430b      	orrs	r3, r1
 8006fdc:	0a1b      	lsrs	r3, r3, #8
 8006fde:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006fe2:	431a      	orrs	r2, r3
 8006fe4:	4b60      	ldr	r3, [pc, #384]	; (8007168 <MX_LWIP_Init+0x23c>)
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	0619      	lsls	r1, r3, #24
 8006fea:	4b5f      	ldr	r3, [pc, #380]	; (8007168 <MX_LWIP_Init+0x23c>)
 8006fec:	785b      	ldrb	r3, [r3, #1]
 8006fee:	041b      	lsls	r3, r3, #16
 8006ff0:	4319      	orrs	r1, r3
 8006ff2:	4b5d      	ldr	r3, [pc, #372]	; (8007168 <MX_LWIP_Init+0x23c>)
 8006ff4:	789b      	ldrb	r3, [r3, #2]
 8006ff6:	021b      	lsls	r3, r3, #8
 8006ff8:	430b      	orrs	r3, r1
 8006ffa:	495b      	ldr	r1, [pc, #364]	; (8007168 <MX_LWIP_Init+0x23c>)
 8006ffc:	78c9      	ldrb	r1, [r1, #3]
 8006ffe:	430b      	orrs	r3, r1
 8007000:	0e1b      	lsrs	r3, r3, #24
 8007002:	4313      	orrs	r3, r2
 8007004:	4a5b      	ldr	r2, [pc, #364]	; (8007174 <MX_LWIP_Init+0x248>)
 8007006:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007008:	4b58      	ldr	r3, [pc, #352]	; (800716c <MX_LWIP_Init+0x240>)
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	061a      	lsls	r2, r3, #24
 800700e:	4b57      	ldr	r3, [pc, #348]	; (800716c <MX_LWIP_Init+0x240>)
 8007010:	785b      	ldrb	r3, [r3, #1]
 8007012:	041b      	lsls	r3, r3, #16
 8007014:	431a      	orrs	r2, r3
 8007016:	4b55      	ldr	r3, [pc, #340]	; (800716c <MX_LWIP_Init+0x240>)
 8007018:	789b      	ldrb	r3, [r3, #2]
 800701a:	021b      	lsls	r3, r3, #8
 800701c:	4313      	orrs	r3, r2
 800701e:	4a53      	ldr	r2, [pc, #332]	; (800716c <MX_LWIP_Init+0x240>)
 8007020:	78d2      	ldrb	r2, [r2, #3]
 8007022:	4313      	orrs	r3, r2
 8007024:	061a      	lsls	r2, r3, #24
 8007026:	4b51      	ldr	r3, [pc, #324]	; (800716c <MX_LWIP_Init+0x240>)
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	0619      	lsls	r1, r3, #24
 800702c:	4b4f      	ldr	r3, [pc, #316]	; (800716c <MX_LWIP_Init+0x240>)
 800702e:	785b      	ldrb	r3, [r3, #1]
 8007030:	041b      	lsls	r3, r3, #16
 8007032:	4319      	orrs	r1, r3
 8007034:	4b4d      	ldr	r3, [pc, #308]	; (800716c <MX_LWIP_Init+0x240>)
 8007036:	789b      	ldrb	r3, [r3, #2]
 8007038:	021b      	lsls	r3, r3, #8
 800703a:	430b      	orrs	r3, r1
 800703c:	494b      	ldr	r1, [pc, #300]	; (800716c <MX_LWIP_Init+0x240>)
 800703e:	78c9      	ldrb	r1, [r1, #3]
 8007040:	430b      	orrs	r3, r1
 8007042:	021b      	lsls	r3, r3, #8
 8007044:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007048:	431a      	orrs	r2, r3
 800704a:	4b48      	ldr	r3, [pc, #288]	; (800716c <MX_LWIP_Init+0x240>)
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	0619      	lsls	r1, r3, #24
 8007050:	4b46      	ldr	r3, [pc, #280]	; (800716c <MX_LWIP_Init+0x240>)
 8007052:	785b      	ldrb	r3, [r3, #1]
 8007054:	041b      	lsls	r3, r3, #16
 8007056:	4319      	orrs	r1, r3
 8007058:	4b44      	ldr	r3, [pc, #272]	; (800716c <MX_LWIP_Init+0x240>)
 800705a:	789b      	ldrb	r3, [r3, #2]
 800705c:	021b      	lsls	r3, r3, #8
 800705e:	430b      	orrs	r3, r1
 8007060:	4942      	ldr	r1, [pc, #264]	; (800716c <MX_LWIP_Init+0x240>)
 8007062:	78c9      	ldrb	r1, [r1, #3]
 8007064:	430b      	orrs	r3, r1
 8007066:	0a1b      	lsrs	r3, r3, #8
 8007068:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800706c:	431a      	orrs	r2, r3
 800706e:	4b3f      	ldr	r3, [pc, #252]	; (800716c <MX_LWIP_Init+0x240>)
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	0619      	lsls	r1, r3, #24
 8007074:	4b3d      	ldr	r3, [pc, #244]	; (800716c <MX_LWIP_Init+0x240>)
 8007076:	785b      	ldrb	r3, [r3, #1]
 8007078:	041b      	lsls	r3, r3, #16
 800707a:	4319      	orrs	r1, r3
 800707c:	4b3b      	ldr	r3, [pc, #236]	; (800716c <MX_LWIP_Init+0x240>)
 800707e:	789b      	ldrb	r3, [r3, #2]
 8007080:	021b      	lsls	r3, r3, #8
 8007082:	430b      	orrs	r3, r1
 8007084:	4939      	ldr	r1, [pc, #228]	; (800716c <MX_LWIP_Init+0x240>)
 8007086:	78c9      	ldrb	r1, [r1, #3]
 8007088:	430b      	orrs	r3, r1
 800708a:	0e1b      	lsrs	r3, r3, #24
 800708c:	4313      	orrs	r3, r2
 800708e:	4a3a      	ldr	r2, [pc, #232]	; (8007178 <MX_LWIP_Init+0x24c>)
 8007090:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8007092:	4b37      	ldr	r3, [pc, #220]	; (8007170 <MX_LWIP_Init+0x244>)
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	061a      	lsls	r2, r3, #24
 8007098:	4b35      	ldr	r3, [pc, #212]	; (8007170 <MX_LWIP_Init+0x244>)
 800709a:	785b      	ldrb	r3, [r3, #1]
 800709c:	041b      	lsls	r3, r3, #16
 800709e:	431a      	orrs	r2, r3
 80070a0:	4b33      	ldr	r3, [pc, #204]	; (8007170 <MX_LWIP_Init+0x244>)
 80070a2:	789b      	ldrb	r3, [r3, #2]
 80070a4:	021b      	lsls	r3, r3, #8
 80070a6:	4313      	orrs	r3, r2
 80070a8:	4a31      	ldr	r2, [pc, #196]	; (8007170 <MX_LWIP_Init+0x244>)
 80070aa:	78d2      	ldrb	r2, [r2, #3]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	061a      	lsls	r2, r3, #24
 80070b0:	4b2f      	ldr	r3, [pc, #188]	; (8007170 <MX_LWIP_Init+0x244>)
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	0619      	lsls	r1, r3, #24
 80070b6:	4b2e      	ldr	r3, [pc, #184]	; (8007170 <MX_LWIP_Init+0x244>)
 80070b8:	785b      	ldrb	r3, [r3, #1]
 80070ba:	041b      	lsls	r3, r3, #16
 80070bc:	4319      	orrs	r1, r3
 80070be:	4b2c      	ldr	r3, [pc, #176]	; (8007170 <MX_LWIP_Init+0x244>)
 80070c0:	789b      	ldrb	r3, [r3, #2]
 80070c2:	021b      	lsls	r3, r3, #8
 80070c4:	430b      	orrs	r3, r1
 80070c6:	492a      	ldr	r1, [pc, #168]	; (8007170 <MX_LWIP_Init+0x244>)
 80070c8:	78c9      	ldrb	r1, [r1, #3]
 80070ca:	430b      	orrs	r3, r1
 80070cc:	021b      	lsls	r3, r3, #8
 80070ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80070d2:	431a      	orrs	r2, r3
 80070d4:	4b26      	ldr	r3, [pc, #152]	; (8007170 <MX_LWIP_Init+0x244>)
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	0619      	lsls	r1, r3, #24
 80070da:	4b25      	ldr	r3, [pc, #148]	; (8007170 <MX_LWIP_Init+0x244>)
 80070dc:	785b      	ldrb	r3, [r3, #1]
 80070de:	041b      	lsls	r3, r3, #16
 80070e0:	4319      	orrs	r1, r3
 80070e2:	4b23      	ldr	r3, [pc, #140]	; (8007170 <MX_LWIP_Init+0x244>)
 80070e4:	789b      	ldrb	r3, [r3, #2]
 80070e6:	021b      	lsls	r3, r3, #8
 80070e8:	430b      	orrs	r3, r1
 80070ea:	4921      	ldr	r1, [pc, #132]	; (8007170 <MX_LWIP_Init+0x244>)
 80070ec:	78c9      	ldrb	r1, [r1, #3]
 80070ee:	430b      	orrs	r3, r1
 80070f0:	0a1b      	lsrs	r3, r3, #8
 80070f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80070f6:	431a      	orrs	r2, r3
 80070f8:	4b1d      	ldr	r3, [pc, #116]	; (8007170 <MX_LWIP_Init+0x244>)
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	0619      	lsls	r1, r3, #24
 80070fe:	4b1c      	ldr	r3, [pc, #112]	; (8007170 <MX_LWIP_Init+0x244>)
 8007100:	785b      	ldrb	r3, [r3, #1]
 8007102:	041b      	lsls	r3, r3, #16
 8007104:	4319      	orrs	r1, r3
 8007106:	4b1a      	ldr	r3, [pc, #104]	; (8007170 <MX_LWIP_Init+0x244>)
 8007108:	789b      	ldrb	r3, [r3, #2]
 800710a:	021b      	lsls	r3, r3, #8
 800710c:	430b      	orrs	r3, r1
 800710e:	4918      	ldr	r1, [pc, #96]	; (8007170 <MX_LWIP_Init+0x244>)
 8007110:	78c9      	ldrb	r1, [r1, #3]
 8007112:	430b      	orrs	r3, r1
 8007114:	0e1b      	lsrs	r3, r3, #24
 8007116:	4313      	orrs	r3, r2
 8007118:	4a18      	ldr	r2, [pc, #96]	; (800717c <MX_LWIP_Init+0x250>)
 800711a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800711c:	4b18      	ldr	r3, [pc, #96]	; (8007180 <MX_LWIP_Init+0x254>)
 800711e:	9302      	str	r3, [sp, #8]
 8007120:	4b18      	ldr	r3, [pc, #96]	; (8007184 <MX_LWIP_Init+0x258>)
 8007122:	9301      	str	r3, [sp, #4]
 8007124:	2300      	movs	r3, #0
 8007126:	9300      	str	r3, [sp, #0]
 8007128:	4b14      	ldr	r3, [pc, #80]	; (800717c <MX_LWIP_Init+0x250>)
 800712a:	4a13      	ldr	r2, [pc, #76]	; (8007178 <MX_LWIP_Init+0x24c>)
 800712c:	4911      	ldr	r1, [pc, #68]	; (8007174 <MX_LWIP_Init+0x248>)
 800712e:	4816      	ldr	r0, [pc, #88]	; (8007188 <MX_LWIP_Init+0x25c>)
 8007130:	f005 fbb6 	bl	800c8a0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007134:	4814      	ldr	r0, [pc, #80]	; (8007188 <MX_LWIP_Init+0x25c>)
 8007136:	f005 fd65 	bl	800cc04 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800713a:	4b13      	ldr	r3, [pc, #76]	; (8007188 <MX_LWIP_Init+0x25c>)
 800713c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007140:	089b      	lsrs	r3, r3, #2
 8007142:	f003 0301 	and.w	r3, r3, #1
 8007146:	b2db      	uxtb	r3, r3
 8007148:	2b00      	cmp	r3, #0
 800714a:	d003      	beq.n	8007154 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800714c:	480e      	ldr	r0, [pc, #56]	; (8007188 <MX_LWIP_Init+0x25c>)
 800714e:	f005 fd69 	bl	800cc24 <netif_set_up>
 8007152:	e002      	b.n	800715a <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8007154:	480c      	ldr	r0, [pc, #48]	; (8007188 <MX_LWIP_Init+0x25c>)
 8007156:	f005 fdd1 	bl	800ccfc <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800715a:	490c      	ldr	r1, [pc, #48]	; (800718c <MX_LWIP_Init+0x260>)
 800715c:	480a      	ldr	r0, [pc, #40]	; (8007188 <MX_LWIP_Init+0x25c>)
 800715e:	f005 fdff 	bl	800cd60 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007162:	bf00      	nop
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}
 8007168:	2000b300 	.word	0x2000b300
 800716c:	2000b2fc 	.word	0x2000b2fc
 8007170:	2000b2f4 	.word	0x2000b2f4
 8007174:	2000b2f8 	.word	0x2000b2f8
 8007178:	2000b304 	.word	0x2000b304
 800717c:	2000b308 	.word	0x2000b308
 8007180:	08016405 	.word	0x08016405
 8007184:	0800771d 	.word	0x0800771d
 8007188:	200065c0 	.word	0x200065c0
 800718c:	08007789 	.word	0x08007789

08007190 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b08e      	sub	sp, #56	; 0x38
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007198:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800719c:	2200      	movs	r2, #0
 800719e:	601a      	str	r2, [r3, #0]
 80071a0:	605a      	str	r2, [r3, #4]
 80071a2:	609a      	str	r2, [r3, #8]
 80071a4:	60da      	str	r2, [r3, #12]
 80071a6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a46      	ldr	r2, [pc, #280]	; (80072c8 <HAL_ETH_MspInit+0x138>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	f040 8085 	bne.w	80072be <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80071b4:	2300      	movs	r3, #0
 80071b6:	623b      	str	r3, [r7, #32]
 80071b8:	4b44      	ldr	r3, [pc, #272]	; (80072cc <HAL_ETH_MspInit+0x13c>)
 80071ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071bc:	4a43      	ldr	r2, [pc, #268]	; (80072cc <HAL_ETH_MspInit+0x13c>)
 80071be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80071c2:	6313      	str	r3, [r2, #48]	; 0x30
 80071c4:	4b41      	ldr	r3, [pc, #260]	; (80072cc <HAL_ETH_MspInit+0x13c>)
 80071c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071cc:	623b      	str	r3, [r7, #32]
 80071ce:	6a3b      	ldr	r3, [r7, #32]
 80071d0:	2300      	movs	r3, #0
 80071d2:	61fb      	str	r3, [r7, #28]
 80071d4:	4b3d      	ldr	r3, [pc, #244]	; (80072cc <HAL_ETH_MspInit+0x13c>)
 80071d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d8:	4a3c      	ldr	r2, [pc, #240]	; (80072cc <HAL_ETH_MspInit+0x13c>)
 80071da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80071de:	6313      	str	r3, [r2, #48]	; 0x30
 80071e0:	4b3a      	ldr	r3, [pc, #232]	; (80072cc <HAL_ETH_MspInit+0x13c>)
 80071e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80071e8:	61fb      	str	r3, [r7, #28]
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	2300      	movs	r3, #0
 80071ee:	61bb      	str	r3, [r7, #24]
 80071f0:	4b36      	ldr	r3, [pc, #216]	; (80072cc <HAL_ETH_MspInit+0x13c>)
 80071f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f4:	4a35      	ldr	r2, [pc, #212]	; (80072cc <HAL_ETH_MspInit+0x13c>)
 80071f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80071fa:	6313      	str	r3, [r2, #48]	; 0x30
 80071fc:	4b33      	ldr	r3, [pc, #204]	; (80072cc <HAL_ETH_MspInit+0x13c>)
 80071fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007200:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007204:	61bb      	str	r3, [r7, #24]
 8007206:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007208:	2300      	movs	r3, #0
 800720a:	617b      	str	r3, [r7, #20]
 800720c:	4b2f      	ldr	r3, [pc, #188]	; (80072cc <HAL_ETH_MspInit+0x13c>)
 800720e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007210:	4a2e      	ldr	r2, [pc, #184]	; (80072cc <HAL_ETH_MspInit+0x13c>)
 8007212:	f043 0304 	orr.w	r3, r3, #4
 8007216:	6313      	str	r3, [r2, #48]	; 0x30
 8007218:	4b2c      	ldr	r3, [pc, #176]	; (80072cc <HAL_ETH_MspInit+0x13c>)
 800721a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800721c:	f003 0304 	and.w	r3, r3, #4
 8007220:	617b      	str	r3, [r7, #20]
 8007222:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007224:	2300      	movs	r3, #0
 8007226:	613b      	str	r3, [r7, #16]
 8007228:	4b28      	ldr	r3, [pc, #160]	; (80072cc <HAL_ETH_MspInit+0x13c>)
 800722a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800722c:	4a27      	ldr	r2, [pc, #156]	; (80072cc <HAL_ETH_MspInit+0x13c>)
 800722e:	f043 0301 	orr.w	r3, r3, #1
 8007232:	6313      	str	r3, [r2, #48]	; 0x30
 8007234:	4b25      	ldr	r3, [pc, #148]	; (80072cc <HAL_ETH_MspInit+0x13c>)
 8007236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007238:	f003 0301 	and.w	r3, r3, #1
 800723c:	613b      	str	r3, [r7, #16]
 800723e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007240:	2300      	movs	r3, #0
 8007242:	60fb      	str	r3, [r7, #12]
 8007244:	4b21      	ldr	r3, [pc, #132]	; (80072cc <HAL_ETH_MspInit+0x13c>)
 8007246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007248:	4a20      	ldr	r2, [pc, #128]	; (80072cc <HAL_ETH_MspInit+0x13c>)
 800724a:	f043 0302 	orr.w	r3, r3, #2
 800724e:	6313      	str	r3, [r2, #48]	; 0x30
 8007250:	4b1e      	ldr	r3, [pc, #120]	; (80072cc <HAL_ETH_MspInit+0x13c>)
 8007252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007254:	f003 0302 	and.w	r3, r3, #2
 8007258:	60fb      	str	r3, [r7, #12]
 800725a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800725c:	2332      	movs	r3, #50	; 0x32
 800725e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007260:	2302      	movs	r3, #2
 8007262:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007264:	2300      	movs	r3, #0
 8007266:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007268:	2303      	movs	r3, #3
 800726a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800726c:	230b      	movs	r3, #11
 800726e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007270:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007274:	4619      	mov	r1, r3
 8007276:	4816      	ldr	r0, [pc, #88]	; (80072d0 <HAL_ETH_MspInit+0x140>)
 8007278:	f7fc fa30 	bl	80036dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800727c:	2386      	movs	r3, #134	; 0x86
 800727e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007280:	2302      	movs	r3, #2
 8007282:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007284:	2300      	movs	r3, #0
 8007286:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007288:	2303      	movs	r3, #3
 800728a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800728c:	230b      	movs	r3, #11
 800728e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007290:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007294:	4619      	mov	r1, r3
 8007296:	480f      	ldr	r0, [pc, #60]	; (80072d4 <HAL_ETH_MspInit+0x144>)
 8007298:	f7fc fa20 	bl	80036dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800729c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80072a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072a2:	2302      	movs	r3, #2
 80072a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072a6:	2300      	movs	r3, #0
 80072a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072aa:	2303      	movs	r3, #3
 80072ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80072ae:	230b      	movs	r3, #11
 80072b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072b6:	4619      	mov	r1, r3
 80072b8:	4807      	ldr	r0, [pc, #28]	; (80072d8 <HAL_ETH_MspInit+0x148>)
 80072ba:	f7fc fa0f 	bl	80036dc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80072be:	bf00      	nop
 80072c0:	3738      	adds	r7, #56	; 0x38
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	40028000 	.word	0x40028000
 80072cc:	40023800 	.word	0x40023800
 80072d0:	40020800 	.word	0x40020800
 80072d4:	40020000 	.word	0x40020000
 80072d8:	40020400 	.word	0x40020400

080072dc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b086      	sub	sp, #24
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80072e4:	2300      	movs	r3, #0
 80072e6:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80072e8:	4b4d      	ldr	r3, [pc, #308]	; (8007420 <low_level_init+0x144>)
 80072ea:	4a4e      	ldr	r2, [pc, #312]	; (8007424 <low_level_init+0x148>)
 80072ec:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80072ee:	4b4c      	ldr	r3, [pc, #304]	; (8007420 <low_level_init+0x144>)
 80072f0:	2201      	movs	r2, #1
 80072f2:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80072f4:	4b4a      	ldr	r3, [pc, #296]	; (8007420 <low_level_init+0x144>)
 80072f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80072fa:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80072fc:	4b48      	ldr	r3, [pc, #288]	; (8007420 <low_level_init+0x144>)
 80072fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007302:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8007304:	4b46      	ldr	r3, [pc, #280]	; (8007420 <low_level_init+0x144>)
 8007306:	2201      	movs	r2, #1
 8007308:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800730a:	2300      	movs	r3, #0
 800730c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800730e:	2380      	movs	r3, #128	; 0x80
 8007310:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8007312:	23e1      	movs	r3, #225	; 0xe1
 8007314:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8007316:	2300      	movs	r3, #0
 8007318:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800731a:	2300      	movs	r3, #0
 800731c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800731e:	2300      	movs	r3, #0
 8007320:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8007322:	4a3f      	ldr	r2, [pc, #252]	; (8007420 <low_level_init+0x144>)
 8007324:	f107 0308 	add.w	r3, r7, #8
 8007328:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800732a:	4b3d      	ldr	r3, [pc, #244]	; (8007420 <low_level_init+0x144>)
 800732c:	2200      	movs	r2, #0
 800732e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8007330:	4b3b      	ldr	r3, [pc, #236]	; (8007420 <low_level_init+0x144>)
 8007332:	2200      	movs	r2, #0
 8007334:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8007336:	4b3a      	ldr	r3, [pc, #232]	; (8007420 <low_level_init+0x144>)
 8007338:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800733c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800733e:	4838      	ldr	r0, [pc, #224]	; (8007420 <low_level_init+0x144>)
 8007340:	f7fb f8a6 	bl	8002490 <HAL_ETH_Init>
 8007344:	4603      	mov	r3, r0
 8007346:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8007348:	7dfb      	ldrb	r3, [r7, #23]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d108      	bne.n	8007360 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007354:	f043 0304 	orr.w	r3, r3, #4
 8007358:	b2da      	uxtb	r2, r3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8007360:	2304      	movs	r3, #4
 8007362:	4a31      	ldr	r2, [pc, #196]	; (8007428 <low_level_init+0x14c>)
 8007364:	4931      	ldr	r1, [pc, #196]	; (800742c <low_level_init+0x150>)
 8007366:	482e      	ldr	r0, [pc, #184]	; (8007420 <low_level_init+0x144>)
 8007368:	f7fb fa2e 	bl	80027c8 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800736c:	2304      	movs	r3, #4
 800736e:	4a30      	ldr	r2, [pc, #192]	; (8007430 <low_level_init+0x154>)
 8007370:	4930      	ldr	r1, [pc, #192]	; (8007434 <low_level_init+0x158>)
 8007372:	482b      	ldr	r0, [pc, #172]	; (8007420 <low_level_init+0x144>)
 8007374:	f7fb fa91 	bl	800289a <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2206      	movs	r2, #6
 800737c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007380:	4b27      	ldr	r3, [pc, #156]	; (8007420 <low_level_init+0x144>)
 8007382:	695b      	ldr	r3, [r3, #20]
 8007384:	781a      	ldrb	r2, [r3, #0]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800738c:	4b24      	ldr	r3, [pc, #144]	; (8007420 <low_level_init+0x144>)
 800738e:	695b      	ldr	r3, [r3, #20]
 8007390:	785a      	ldrb	r2, [r3, #1]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007398:	4b21      	ldr	r3, [pc, #132]	; (8007420 <low_level_init+0x144>)
 800739a:	695b      	ldr	r3, [r3, #20]
 800739c:	789a      	ldrb	r2, [r3, #2]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80073a4:	4b1e      	ldr	r3, [pc, #120]	; (8007420 <low_level_init+0x144>)
 80073a6:	695b      	ldr	r3, [r3, #20]
 80073a8:	78da      	ldrb	r2, [r3, #3]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80073b0:	4b1b      	ldr	r3, [pc, #108]	; (8007420 <low_level_init+0x144>)
 80073b2:	695b      	ldr	r3, [r3, #20]
 80073b4:	791a      	ldrb	r2, [r3, #4]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80073bc:	4b18      	ldr	r3, [pc, #96]	; (8007420 <low_level_init+0x144>)
 80073be:	695b      	ldr	r3, [r3, #20]
 80073c0:	795a      	ldrb	r2, [r3, #5]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80073ce:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80073d6:	f043 030a 	orr.w	r3, r3, #10
 80073da:	b2da      	uxtb	r2, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80073e2:	480f      	ldr	r0, [pc, #60]	; (8007420 <low_level_init+0x144>)
 80073e4:	f7fb fd02 	bl	8002dec <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80073e8:	f107 0310 	add.w	r3, r7, #16
 80073ec:	461a      	mov	r2, r3
 80073ee:	211d      	movs	r1, #29
 80073f0:	480b      	ldr	r0, [pc, #44]	; (8007420 <low_level_init+0x144>)
 80073f2:	f7fb fc2d 	bl	8002c50 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	f043 030b 	orr.w	r3, r3, #11
 80073fc:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	461a      	mov	r2, r3
 8007402:	211d      	movs	r1, #29
 8007404:	4806      	ldr	r0, [pc, #24]	; (8007420 <low_level_init+0x144>)
 8007406:	f7fb fc8b 	bl	8002d20 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800740a:	f107 0310 	add.w	r3, r7, #16
 800740e:	461a      	mov	r2, r3
 8007410:	211d      	movs	r1, #29
 8007412:	4803      	ldr	r0, [pc, #12]	; (8007420 <low_level_init+0x144>)
 8007414:	f7fb fc1c 	bl	8002c50 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8007418:	bf00      	nop
 800741a:	3718      	adds	r7, #24
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}
 8007420:	2000cbdc 	.word	0x2000cbdc
 8007424:	40028000 	.word	0x40028000
 8007428:	2000cc24 	.word	0x2000cc24
 800742c:	2000b30c 	.word	0x2000b30c
 8007430:	2000b38c 	.word	0x2000b38c
 8007434:	2000cb5c 	.word	0x2000cb5c

08007438 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b08a      	sub	sp, #40	; 0x28
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8007442:	4b4b      	ldr	r3, [pc, #300]	; (8007570 <low_level_output+0x138>)
 8007444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800744a:	2300      	movs	r3, #0
 800744c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800744e:	2300      	movs	r3, #0
 8007450:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8007452:	2300      	movs	r3, #0
 8007454:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8007456:	2300      	movs	r3, #0
 8007458:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800745a:	4b45      	ldr	r3, [pc, #276]	; (8007570 <low_level_output+0x138>)
 800745c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800745e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8007460:	2300      	movs	r3, #0
 8007462:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	623b      	str	r3, [r7, #32]
 8007468:	e05a      	b.n	8007520 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2b00      	cmp	r3, #0
 8007470:	da03      	bge.n	800747a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8007472:	23f8      	movs	r3, #248	; 0xf8
 8007474:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8007478:	e05c      	b.n	8007534 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800747a:	6a3b      	ldr	r3, [r7, #32]
 800747c:	895b      	ldrh	r3, [r3, #10]
 800747e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8007480:	2300      	movs	r3, #0
 8007482:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8007484:	e02f      	b.n	80074e6 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8007486:	69fa      	ldr	r2, [r7, #28]
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	18d0      	adds	r0, r2, r3
 800748c:	6a3b      	ldr	r3, [r7, #32]
 800748e:	685a      	ldr	r2, [r3, #4]
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	18d1      	adds	r1, r2, r3
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800749a:	3304      	adds	r3, #4
 800749c:	461a      	mov	r2, r3
 800749e:	f00f f8bd 	bl	801661c <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80074a8:	69bb      	ldr	r3, [r7, #24]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	da03      	bge.n	80074b8 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80074b0:	23f8      	movs	r3, #248	; 0xf8
 80074b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80074b6:	e03d      	b.n	8007534 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80074b8:	69bb      	ldr	r3, [r7, #24]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80074be:	693a      	ldr	r2, [r7, #16]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	4413      	add	r3, r2
 80074c4:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80074c8:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80074ca:	68ba      	ldr	r2, [r7, #8]
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	1ad3      	subs	r3, r2, r3
 80074d0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80074d4:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	1ad3      	subs	r3, r2, r3
 80074dc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80074e0:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80074e2:	2300      	movs	r3, #0
 80074e4:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	4413      	add	r3, r2
 80074ec:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d8c8      	bhi.n	8007486 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80074f4:	69fa      	ldr	r2, [r7, #28]
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	18d0      	adds	r0, r2, r3
 80074fa:	6a3b      	ldr	r3, [r7, #32]
 80074fc:	685a      	ldr	r2, [r3, #4]
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	4413      	add	r3, r2
 8007502:	68fa      	ldr	r2, [r7, #12]
 8007504:	4619      	mov	r1, r3
 8007506:	f00f f889 	bl	801661c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800750a:	693a      	ldr	r2, [r7, #16]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	4413      	add	r3, r2
 8007510:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8007512:	697a      	ldr	r2, [r7, #20]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	4413      	add	r3, r2
 8007518:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800751a:	6a3b      	ldr	r3, [r7, #32]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	623b      	str	r3, [r7, #32]
 8007520:	6a3b      	ldr	r3, [r7, #32]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d1a1      	bne.n	800746a <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8007526:	6979      	ldr	r1, [r7, #20]
 8007528:	4811      	ldr	r0, [pc, #68]	; (8007570 <low_level_output+0x138>)
 800752a:	f7fb fa23 	bl	8002974 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800752e:	2300      	movs	r3, #0
 8007530:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8007534:	4b0e      	ldr	r3, [pc, #56]	; (8007570 <low_level_output+0x138>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800753c:	3314      	adds	r3, #20
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 0320 	and.w	r3, r3, #32
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00d      	beq.n	8007564 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8007548:	4b09      	ldr	r3, [pc, #36]	; (8007570 <low_level_output+0x138>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007550:	3314      	adds	r3, #20
 8007552:	2220      	movs	r2, #32
 8007554:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8007556:	4b06      	ldr	r3, [pc, #24]	; (8007570 <low_level_output+0x138>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800755e:	3304      	adds	r3, #4
 8007560:	2200      	movs	r2, #0
 8007562:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8007564:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007568:	4618      	mov	r0, r3
 800756a:	3728      	adds	r7, #40	; 0x28
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}
 8007570:	2000cbdc 	.word	0x2000cbdc

08007574 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b08c      	sub	sp, #48	; 0x30
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800757c:	2300      	movs	r3, #0
 800757e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8007580:	2300      	movs	r3, #0
 8007582:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8007584:	2300      	movs	r3, #0
 8007586:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8007588:	2300      	movs	r3, #0
 800758a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800758c:	2300      	movs	r3, #0
 800758e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8007590:	2300      	movs	r3, #0
 8007592:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8007594:	2300      	movs	r3, #0
 8007596:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8007598:	484f      	ldr	r0, [pc, #316]	; (80076d8 <low_level_input+0x164>)
 800759a:	f7fb fad5 	bl	8002b48 <HAL_ETH_GetReceivedFrame>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d001      	beq.n	80075a8 <low_level_input+0x34>

    return NULL;
 80075a4:	2300      	movs	r3, #0
 80075a6:	e092      	b.n	80076ce <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80075a8:	4b4b      	ldr	r3, [pc, #300]	; (80076d8 <low_level_input+0x164>)
 80075aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ac:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80075ae:	4b4a      	ldr	r3, [pc, #296]	; (80076d8 <low_level_input+0x164>)
 80075b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b2:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80075b4:	89fb      	ldrh	r3, [r7, #14]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d007      	beq.n	80075ca <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80075ba:	89fb      	ldrh	r3, [r7, #14]
 80075bc:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80075c0:	4619      	mov	r1, r3
 80075c2:	2000      	movs	r0, #0
 80075c4:	f005 fc68 	bl	800ce98 <pbuf_alloc>
 80075c8:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80075ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d04b      	beq.n	8007668 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80075d0:	4b41      	ldr	r3, [pc, #260]	; (80076d8 <low_level_input+0x164>)
 80075d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d4:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80075d6:	2300      	movs	r3, #0
 80075d8:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80075da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80075de:	e040      	b.n	8007662 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80075e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e2:	895b      	ldrh	r3, [r3, #10]
 80075e4:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80075e6:	2300      	movs	r3, #0
 80075e8:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80075ea:	e021      	b.n	8007630 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80075ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ee:	685a      	ldr	r2, [r3, #4]
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	18d0      	adds	r0, r2, r3
 80075f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075f6:	69fb      	ldr	r3, [r7, #28]
 80075f8:	18d1      	adds	r1, r2, r3
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8007600:	3304      	adds	r3, #4
 8007602:	461a      	mov	r2, r3
 8007604:	f00f f80a 	bl	801661c <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8007608:	6a3b      	ldr	r3, [r7, #32]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800760e:	6a3b      	ldr	r3, [r7, #32]
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8007614:	69fa      	ldr	r2, [r7, #28]
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	4413      	add	r3, r2
 800761a:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800761e:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8007620:	69ba      	ldr	r2, [r7, #24]
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	1ad3      	subs	r3, r2, r3
 8007626:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800762a:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800762c:	2300      	movs	r3, #0
 800762e:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8007630:	697a      	ldr	r2, [r7, #20]
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	4413      	add	r3, r2
 8007636:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800763a:	4293      	cmp	r3, r2
 800763c:	d8d6      	bhi.n	80075ec <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800763e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007640:	685a      	ldr	r2, [r3, #4]
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	18d0      	adds	r0, r2, r3
 8007646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	4413      	add	r3, r2
 800764c:	697a      	ldr	r2, [r7, #20]
 800764e:	4619      	mov	r1, r3
 8007650:	f00e ffe4 	bl	801661c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8007654:	69fa      	ldr	r2, [r7, #28]
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	4413      	add	r3, r2
 800765a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800765c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	62bb      	str	r3, [r7, #40]	; 0x28
 8007662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007664:	2b00      	cmp	r3, #0
 8007666:	d1bb      	bne.n	80075e0 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8007668:	4b1b      	ldr	r3, [pc, #108]	; (80076d8 <low_level_input+0x164>)
 800766a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800766c:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800766e:	2300      	movs	r3, #0
 8007670:	613b      	str	r3, [r7, #16]
 8007672:	e00b      	b.n	800768c <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8007674:	6a3b      	ldr	r3, [r7, #32]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800767c:	6a3b      	ldr	r3, [r7, #32]
 800767e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8007680:	6a3b      	ldr	r3, [r7, #32]
 8007682:	68db      	ldr	r3, [r3, #12]
 8007684:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	3301      	adds	r3, #1
 800768a:	613b      	str	r3, [r7, #16]
 800768c:	4b12      	ldr	r3, [pc, #72]	; (80076d8 <low_level_input+0x164>)
 800768e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007690:	693a      	ldr	r2, [r7, #16]
 8007692:	429a      	cmp	r2, r3
 8007694:	d3ee      	bcc.n	8007674 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8007696:	4b10      	ldr	r3, [pc, #64]	; (80076d8 <low_level_input+0x164>)
 8007698:	2200      	movs	r2, #0
 800769a:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800769c:	4b0e      	ldr	r3, [pc, #56]	; (80076d8 <low_level_input+0x164>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076a4:	3314      	adds	r3, #20
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00d      	beq.n	80076cc <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80076b0:	4b09      	ldr	r3, [pc, #36]	; (80076d8 <low_level_input+0x164>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076b8:	3314      	adds	r3, #20
 80076ba:	2280      	movs	r2, #128	; 0x80
 80076bc:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80076be:	4b06      	ldr	r3, [pc, #24]	; (80076d8 <low_level_input+0x164>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076c6:	3308      	adds	r3, #8
 80076c8:	2200      	movs	r2, #0
 80076ca:	601a      	str	r2, [r3, #0]
  }
  return p;
 80076cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3730      	adds	r7, #48	; 0x30
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	2000cbdc 	.word	0x2000cbdc

080076dc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f7ff ff45 	bl	8007574 <low_level_input>
 80076ea:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d010      	beq.n	8007714 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	6879      	ldr	r1, [r7, #4]
 80076f8:	68f8      	ldr	r0, [r7, #12]
 80076fa:	4798      	blx	r3
 80076fc:	4603      	mov	r3, r0
 80076fe:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8007700:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d006      	beq.n	8007716 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8007708:	68f8      	ldr	r0, [r7, #12]
 800770a:	f005 fea9 	bl	800d460 <pbuf_free>
    p = NULL;
 800770e:	2300      	movs	r3, #0
 8007710:	60fb      	str	r3, [r7, #12]
 8007712:	e000      	b.n	8007716 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8007714:	bf00      	nop
  }
}
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d106      	bne.n	8007738 <ethernetif_init+0x1c>
 800772a:	4b0e      	ldr	r3, [pc, #56]	; (8007764 <ethernetif_init+0x48>)
 800772c:	f44f 7202 	mov.w	r2, #520	; 0x208
 8007730:	490d      	ldr	r1, [pc, #52]	; (8007768 <ethernetif_init+0x4c>)
 8007732:	480e      	ldr	r0, [pc, #56]	; (800776c <ethernetif_init+0x50>)
 8007734:	f00e ffa2 	bl	801667c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2273      	movs	r2, #115	; 0x73
 800773c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2274      	movs	r2, #116	; 0x74
 8007744:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a09      	ldr	r2, [pc, #36]	; (8007770 <ethernetif_init+0x54>)
 800774c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a08      	ldr	r2, [pc, #32]	; (8007774 <ethernetif_init+0x58>)
 8007752:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f7ff fdc1 	bl	80072dc <low_level_init>

  return ERR_OK;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	3708      	adds	r7, #8
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}
 8007764:	080185dc 	.word	0x080185dc
 8007768:	080185f8 	.word	0x080185f8
 800776c:	08018608 	.word	0x08018608
 8007770:	080148c9 	.word	0x080148c9
 8007774:	08007439 	.word	0x08007439

08007778 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800777c:	f7fa f9a8 	bl	8001ad0 <HAL_GetTick>
 8007780:	4603      	mov	r3, r0
}
 8007782:	4618      	mov	r0, r3
 8007784:	bd80      	pop	{r7, pc}
	...

08007788 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8007790:	2300      	movs	r3, #0
 8007792:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8007794:	2300      	movs	r3, #0
 8007796:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800779e:	089b      	lsrs	r3, r3, #2
 80077a0:	f003 0301 	and.w	r3, r3, #1
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d05d      	beq.n	8007866 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80077aa:	4b34      	ldr	r3, [pc, #208]	; (800787c <ethernetif_update_config+0xf4>)
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d03f      	beq.n	8007832 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80077b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80077b6:	2100      	movs	r1, #0
 80077b8:	4830      	ldr	r0, [pc, #192]	; (800787c <ethernetif_update_config+0xf4>)
 80077ba:	f7fb fab1 	bl	8002d20 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80077be:	f7fa f987 	bl	8001ad0 <HAL_GetTick>
 80077c2:	4603      	mov	r3, r0
 80077c4:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80077c6:	f107 0308 	add.w	r3, r7, #8
 80077ca:	461a      	mov	r2, r3
 80077cc:	2101      	movs	r1, #1
 80077ce:	482b      	ldr	r0, [pc, #172]	; (800787c <ethernetif_update_config+0xf4>)
 80077d0:	f7fb fa3e 	bl	8002c50 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80077d4:	f7fa f97c 	bl	8001ad0 <HAL_GetTick>
 80077d8:	4602      	mov	r2, r0
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	1ad3      	subs	r3, r2, r3
 80077de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077e2:	d828      	bhi.n	8007836 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	f003 0320 	and.w	r3, r3, #32
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d0eb      	beq.n	80077c6 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80077ee:	f107 0308 	add.w	r3, r7, #8
 80077f2:	461a      	mov	r2, r3
 80077f4:	2110      	movs	r1, #16
 80077f6:	4821      	ldr	r0, [pc, #132]	; (800787c <ethernetif_update_config+0xf4>)
 80077f8:	f7fb fa2a 	bl	8002c50 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	f003 0304 	and.w	r3, r3, #4
 8007802:	2b00      	cmp	r3, #0
 8007804:	d004      	beq.n	8007810 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8007806:	4b1d      	ldr	r3, [pc, #116]	; (800787c <ethernetif_update_config+0xf4>)
 8007808:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800780c:	60da      	str	r2, [r3, #12]
 800780e:	e002      	b.n	8007816 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8007810:	4b1a      	ldr	r3, [pc, #104]	; (800787c <ethernetif_update_config+0xf4>)
 8007812:	2200      	movs	r2, #0
 8007814:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	f003 0302 	and.w	r3, r3, #2
 800781c:	2b00      	cmp	r3, #0
 800781e:	d003      	beq.n	8007828 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8007820:	4b16      	ldr	r3, [pc, #88]	; (800787c <ethernetif_update_config+0xf4>)
 8007822:	2200      	movs	r2, #0
 8007824:	609a      	str	r2, [r3, #8]
 8007826:	e016      	b.n	8007856 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8007828:	4b14      	ldr	r3, [pc, #80]	; (800787c <ethernetif_update_config+0xf4>)
 800782a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800782e:	609a      	str	r2, [r3, #8]
 8007830:	e011      	b.n	8007856 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8007832:	bf00      	nop
 8007834:	e000      	b.n	8007838 <ethernetif_update_config+0xb0>
          goto error;
 8007836:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8007838:	4b10      	ldr	r3, [pc, #64]	; (800787c <ethernetif_update_config+0xf4>)
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	08db      	lsrs	r3, r3, #3
 800783e:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8007840:	4b0e      	ldr	r3, [pc, #56]	; (800787c <ethernetif_update_config+0xf4>)
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	085b      	lsrs	r3, r3, #1
 8007846:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8007848:	4313      	orrs	r3, r2
 800784a:	b29b      	uxth	r3, r3
 800784c:	461a      	mov	r2, r3
 800784e:	2100      	movs	r1, #0
 8007850:	480a      	ldr	r0, [pc, #40]	; (800787c <ethernetif_update_config+0xf4>)
 8007852:	f7fb fa65 	bl	8002d20 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8007856:	2100      	movs	r1, #0
 8007858:	4808      	ldr	r0, [pc, #32]	; (800787c <ethernetif_update_config+0xf4>)
 800785a:	f7fb fb25 	bl	8002ea8 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800785e:	4807      	ldr	r0, [pc, #28]	; (800787c <ethernetif_update_config+0xf4>)
 8007860:	f7fb fac4 	bl	8002dec <HAL_ETH_Start>
 8007864:	e002      	b.n	800786c <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8007866:	4805      	ldr	r0, [pc, #20]	; (800787c <ethernetif_update_config+0xf4>)
 8007868:	f7fb faef 	bl	8002e4a <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 f807 	bl	8007880 <ethernetif_notify_conn_changed>
}
 8007872:	bf00      	nop
 8007874:	3710      	adds	r7, #16
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	2000cbdc 	.word	0x2000cbdc

08007880 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8007888:	bf00      	nop
 800788a:	370c      	adds	r7, #12
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	4603      	mov	r3, r0
 800789c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800789e:	79fb      	ldrb	r3, [r7, #7]
 80078a0:	4a08      	ldr	r2, [pc, #32]	; (80078c4 <disk_status+0x30>)
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	4413      	add	r3, r2
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	79fa      	ldrb	r2, [r7, #7]
 80078ac:	4905      	ldr	r1, [pc, #20]	; (80078c4 <disk_status+0x30>)
 80078ae:	440a      	add	r2, r1
 80078b0:	7a12      	ldrb	r2, [r2, #8]
 80078b2:	4610      	mov	r0, r2
 80078b4:	4798      	blx	r3
 80078b6:	4603      	mov	r3, r0
 80078b8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80078ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3710      	adds	r7, #16
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	200010f0 	.word	0x200010f0

080078c8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	4603      	mov	r3, r0
 80078d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80078d2:	2300      	movs	r3, #0
 80078d4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80078d6:	79fb      	ldrb	r3, [r7, #7]
 80078d8:	4a0d      	ldr	r2, [pc, #52]	; (8007910 <disk_initialize+0x48>)
 80078da:	5cd3      	ldrb	r3, [r2, r3]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d111      	bne.n	8007904 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80078e0:	79fb      	ldrb	r3, [r7, #7]
 80078e2:	4a0b      	ldr	r2, [pc, #44]	; (8007910 <disk_initialize+0x48>)
 80078e4:	2101      	movs	r1, #1
 80078e6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80078e8:	79fb      	ldrb	r3, [r7, #7]
 80078ea:	4a09      	ldr	r2, [pc, #36]	; (8007910 <disk_initialize+0x48>)
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	4413      	add	r3, r2
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	79fa      	ldrb	r2, [r7, #7]
 80078f6:	4906      	ldr	r1, [pc, #24]	; (8007910 <disk_initialize+0x48>)
 80078f8:	440a      	add	r2, r1
 80078fa:	7a12      	ldrb	r2, [r2, #8]
 80078fc:	4610      	mov	r0, r2
 80078fe:	4798      	blx	r3
 8007900:	4603      	mov	r3, r0
 8007902:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007904:	7bfb      	ldrb	r3, [r7, #15]
}
 8007906:	4618      	mov	r0, r3
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	200010f0 	.word	0x200010f0

08007914 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007914:	b590      	push	{r4, r7, lr}
 8007916:	b087      	sub	sp, #28
 8007918:	af00      	add	r7, sp, #0
 800791a:	60b9      	str	r1, [r7, #8]
 800791c:	607a      	str	r2, [r7, #4]
 800791e:	603b      	str	r3, [r7, #0]
 8007920:	4603      	mov	r3, r0
 8007922:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007924:	7bfb      	ldrb	r3, [r7, #15]
 8007926:	4a0a      	ldr	r2, [pc, #40]	; (8007950 <disk_read+0x3c>)
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	4413      	add	r3, r2
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	689c      	ldr	r4, [r3, #8]
 8007930:	7bfb      	ldrb	r3, [r7, #15]
 8007932:	4a07      	ldr	r2, [pc, #28]	; (8007950 <disk_read+0x3c>)
 8007934:	4413      	add	r3, r2
 8007936:	7a18      	ldrb	r0, [r3, #8]
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	68b9      	ldr	r1, [r7, #8]
 800793e:	47a0      	blx	r4
 8007940:	4603      	mov	r3, r0
 8007942:	75fb      	strb	r3, [r7, #23]
  return res;
 8007944:	7dfb      	ldrb	r3, [r7, #23]
}
 8007946:	4618      	mov	r0, r3
 8007948:	371c      	adds	r7, #28
 800794a:	46bd      	mov	sp, r7
 800794c:	bd90      	pop	{r4, r7, pc}
 800794e:	bf00      	nop
 8007950:	200010f0 	.word	0x200010f0

08007954 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007954:	b590      	push	{r4, r7, lr}
 8007956:	b087      	sub	sp, #28
 8007958:	af00      	add	r7, sp, #0
 800795a:	60b9      	str	r1, [r7, #8]
 800795c:	607a      	str	r2, [r7, #4]
 800795e:	603b      	str	r3, [r7, #0]
 8007960:	4603      	mov	r3, r0
 8007962:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007964:	7bfb      	ldrb	r3, [r7, #15]
 8007966:	4a0a      	ldr	r2, [pc, #40]	; (8007990 <disk_write+0x3c>)
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	4413      	add	r3, r2
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	68dc      	ldr	r4, [r3, #12]
 8007970:	7bfb      	ldrb	r3, [r7, #15]
 8007972:	4a07      	ldr	r2, [pc, #28]	; (8007990 <disk_write+0x3c>)
 8007974:	4413      	add	r3, r2
 8007976:	7a18      	ldrb	r0, [r3, #8]
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	68b9      	ldr	r1, [r7, #8]
 800797e:	47a0      	blx	r4
 8007980:	4603      	mov	r3, r0
 8007982:	75fb      	strb	r3, [r7, #23]
  return res;
 8007984:	7dfb      	ldrb	r3, [r7, #23]
}
 8007986:	4618      	mov	r0, r3
 8007988:	371c      	adds	r7, #28
 800798a:	46bd      	mov	sp, r7
 800798c:	bd90      	pop	{r4, r7, pc}
 800798e:	bf00      	nop
 8007990:	200010f0 	.word	0x200010f0

08007994 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
 800799a:	4603      	mov	r3, r0
 800799c:	603a      	str	r2, [r7, #0]
 800799e:	71fb      	strb	r3, [r7, #7]
 80079a0:	460b      	mov	r3, r1
 80079a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80079a4:	79fb      	ldrb	r3, [r7, #7]
 80079a6:	4a09      	ldr	r2, [pc, #36]	; (80079cc <disk_ioctl+0x38>)
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	4413      	add	r3, r2
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	691b      	ldr	r3, [r3, #16]
 80079b0:	79fa      	ldrb	r2, [r7, #7]
 80079b2:	4906      	ldr	r1, [pc, #24]	; (80079cc <disk_ioctl+0x38>)
 80079b4:	440a      	add	r2, r1
 80079b6:	7a10      	ldrb	r0, [r2, #8]
 80079b8:	79b9      	ldrb	r1, [r7, #6]
 80079ba:	683a      	ldr	r2, [r7, #0]
 80079bc:	4798      	blx	r3
 80079be:	4603      	mov	r3, r0
 80079c0:	73fb      	strb	r3, [r7, #15]
  return res;
 80079c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	200010f0 	.word	0x200010f0

080079d0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80079d0:	b480      	push	{r7}
 80079d2:	b085      	sub	sp, #20
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	3301      	adds	r3, #1
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80079e0:	89fb      	ldrh	r3, [r7, #14]
 80079e2:	021b      	lsls	r3, r3, #8
 80079e4:	b21a      	sxth	r2, r3
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	b21b      	sxth	r3, r3
 80079ec:	4313      	orrs	r3, r2
 80079ee:	b21b      	sxth	r3, r3
 80079f0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80079f2:	89fb      	ldrh	r3, [r7, #14]
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3714      	adds	r7, #20
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	3303      	adds	r3, #3
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	021b      	lsls	r3, r3, #8
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	3202      	adds	r2, #2
 8007a18:	7812      	ldrb	r2, [r2, #0]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	021b      	lsls	r3, r3, #8
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	3201      	adds	r2, #1
 8007a26:	7812      	ldrb	r2, [r2, #0]
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	021b      	lsls	r3, r3, #8
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	7812      	ldrb	r2, [r2, #0]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	60fb      	str	r3, [r7, #12]
	return rv;
 8007a38:	68fb      	ldr	r3, [r7, #12]
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3714      	adds	r7, #20
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr

08007a46 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007a46:	b480      	push	{r7}
 8007a48:	b083      	sub	sp, #12
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
 8007a4e:	460b      	mov	r3, r1
 8007a50:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	1c5a      	adds	r2, r3, #1
 8007a56:	607a      	str	r2, [r7, #4]
 8007a58:	887a      	ldrh	r2, [r7, #2]
 8007a5a:	b2d2      	uxtb	r2, r2
 8007a5c:	701a      	strb	r2, [r3, #0]
 8007a5e:	887b      	ldrh	r3, [r7, #2]
 8007a60:	0a1b      	lsrs	r3, r3, #8
 8007a62:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	1c5a      	adds	r2, r3, #1
 8007a68:	607a      	str	r2, [r7, #4]
 8007a6a:	887a      	ldrh	r2, [r7, #2]
 8007a6c:	b2d2      	uxtb	r2, r2
 8007a6e:	701a      	strb	r2, [r3, #0]
}
 8007a70:	bf00      	nop
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	1c5a      	adds	r2, r3, #1
 8007a8a:	607a      	str	r2, [r7, #4]
 8007a8c:	683a      	ldr	r2, [r7, #0]
 8007a8e:	b2d2      	uxtb	r2, r2
 8007a90:	701a      	strb	r2, [r3, #0]
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	0a1b      	lsrs	r3, r3, #8
 8007a96:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	1c5a      	adds	r2, r3, #1
 8007a9c:	607a      	str	r2, [r7, #4]
 8007a9e:	683a      	ldr	r2, [r7, #0]
 8007aa0:	b2d2      	uxtb	r2, r2
 8007aa2:	701a      	strb	r2, [r3, #0]
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	0a1b      	lsrs	r3, r3, #8
 8007aa8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	1c5a      	adds	r2, r3, #1
 8007aae:	607a      	str	r2, [r7, #4]
 8007ab0:	683a      	ldr	r2, [r7, #0]
 8007ab2:	b2d2      	uxtb	r2, r2
 8007ab4:	701a      	strb	r2, [r3, #0]
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	0a1b      	lsrs	r3, r3, #8
 8007aba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	1c5a      	adds	r2, r3, #1
 8007ac0:	607a      	str	r2, [r7, #4]
 8007ac2:	683a      	ldr	r2, [r7, #0]
 8007ac4:	b2d2      	uxtb	r2, r2
 8007ac6:	701a      	strb	r2, [r3, #0]
}
 8007ac8:	bf00      	nop
 8007aca:	370c      	adds	r7, #12
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007ad4:	b480      	push	{r7}
 8007ad6:	b087      	sub	sp, #28
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00d      	beq.n	8007b0a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007aee:	693a      	ldr	r2, [r7, #16]
 8007af0:	1c53      	adds	r3, r2, #1
 8007af2:	613b      	str	r3, [r7, #16]
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	1c59      	adds	r1, r3, #1
 8007af8:	6179      	str	r1, [r7, #20]
 8007afa:	7812      	ldrb	r2, [r2, #0]
 8007afc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	3b01      	subs	r3, #1
 8007b02:	607b      	str	r3, [r7, #4]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d1f1      	bne.n	8007aee <mem_cpy+0x1a>
	}
}
 8007b0a:	bf00      	nop
 8007b0c:	371c      	adds	r7, #28
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr

08007b16 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007b16:	b480      	push	{r7}
 8007b18:	b087      	sub	sp, #28
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	60f8      	str	r0, [r7, #12]
 8007b1e:	60b9      	str	r1, [r7, #8]
 8007b20:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	1c5a      	adds	r2, r3, #1
 8007b2a:	617a      	str	r2, [r7, #20]
 8007b2c:	68ba      	ldr	r2, [r7, #8]
 8007b2e:	b2d2      	uxtb	r2, r2
 8007b30:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	3b01      	subs	r3, #1
 8007b36:	607b      	str	r3, [r7, #4]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1f3      	bne.n	8007b26 <mem_set+0x10>
}
 8007b3e:	bf00      	nop
 8007b40:	bf00      	nop
 8007b42:	371c      	adds	r7, #28
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007b4c:	b480      	push	{r7}
 8007b4e:	b089      	sub	sp, #36	; 0x24
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	61fb      	str	r3, [r7, #28]
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007b60:	2300      	movs	r3, #0
 8007b62:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007b64:	69fb      	ldr	r3, [r7, #28]
 8007b66:	1c5a      	adds	r2, r3, #1
 8007b68:	61fa      	str	r2, [r7, #28]
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	1c5a      	adds	r2, r3, #1
 8007b72:	61ba      	str	r2, [r7, #24]
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	1acb      	subs	r3, r1, r3
 8007b78:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	607b      	str	r3, [r7, #4]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d002      	beq.n	8007b8c <mem_cmp+0x40>
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d0eb      	beq.n	8007b64 <mem_cmp+0x18>

	return r;
 8007b8c:	697b      	ldr	r3, [r7, #20]
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3724      	adds	r7, #36	; 0x24
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr

08007b9a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007b9a:	b480      	push	{r7}
 8007b9c:	b083      	sub	sp, #12
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
 8007ba2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007ba4:	e002      	b.n	8007bac <chk_chr+0x12>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	3301      	adds	r3, #1
 8007baa:	607b      	str	r3, [r7, #4]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d005      	beq.n	8007bc0 <chk_chr+0x26>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	461a      	mov	r2, r3
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d1f2      	bne.n	8007ba6 <chk_chr+0xc>
	return *str;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	781b      	ldrb	r3, [r3, #0]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b085      	sub	sp, #20
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007bda:	2300      	movs	r3, #0
 8007bdc:	60bb      	str	r3, [r7, #8]
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	60fb      	str	r3, [r7, #12]
 8007be2:	e029      	b.n	8007c38 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007be4:	4a27      	ldr	r2, [pc, #156]	; (8007c84 <chk_lock+0xb4>)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	011b      	lsls	r3, r3, #4
 8007bea:	4413      	add	r3, r2
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d01d      	beq.n	8007c2e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007bf2:	4a24      	ldr	r2, [pc, #144]	; (8007c84 <chk_lock+0xb4>)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	011b      	lsls	r3, r3, #4
 8007bf8:	4413      	add	r3, r2
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d116      	bne.n	8007c32 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007c04:	4a1f      	ldr	r2, [pc, #124]	; (8007c84 <chk_lock+0xb4>)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	011b      	lsls	r3, r3, #4
 8007c0a:	4413      	add	r3, r2
 8007c0c:	3304      	adds	r3, #4
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d10c      	bne.n	8007c32 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007c18:	4a1a      	ldr	r2, [pc, #104]	; (8007c84 <chk_lock+0xb4>)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	011b      	lsls	r3, r3, #4
 8007c1e:	4413      	add	r3, r2
 8007c20:	3308      	adds	r3, #8
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d102      	bne.n	8007c32 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007c2c:	e007      	b.n	8007c3e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	3301      	adds	r3, #1
 8007c36:	60fb      	str	r3, [r7, #12]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d9d2      	bls.n	8007be4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2b02      	cmp	r3, #2
 8007c42:	d109      	bne.n	8007c58 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d102      	bne.n	8007c50 <chk_lock+0x80>
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	2b02      	cmp	r3, #2
 8007c4e:	d101      	bne.n	8007c54 <chk_lock+0x84>
 8007c50:	2300      	movs	r3, #0
 8007c52:	e010      	b.n	8007c76 <chk_lock+0xa6>
 8007c54:	2312      	movs	r3, #18
 8007c56:	e00e      	b.n	8007c76 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d108      	bne.n	8007c70 <chk_lock+0xa0>
 8007c5e:	4a09      	ldr	r2, [pc, #36]	; (8007c84 <chk_lock+0xb4>)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	011b      	lsls	r3, r3, #4
 8007c64:	4413      	add	r3, r2
 8007c66:	330c      	adds	r3, #12
 8007c68:	881b      	ldrh	r3, [r3, #0]
 8007c6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c6e:	d101      	bne.n	8007c74 <chk_lock+0xa4>
 8007c70:	2310      	movs	r3, #16
 8007c72:	e000      	b.n	8007c76 <chk_lock+0xa6>
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3714      	adds	r7, #20
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr
 8007c82:	bf00      	nop
 8007c84:	200010d0 	.word	0x200010d0

08007c88 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	607b      	str	r3, [r7, #4]
 8007c92:	e002      	b.n	8007c9a <enq_lock+0x12>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	3301      	adds	r3, #1
 8007c98:	607b      	str	r3, [r7, #4]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d806      	bhi.n	8007cae <enq_lock+0x26>
 8007ca0:	4a09      	ldr	r2, [pc, #36]	; (8007cc8 <enq_lock+0x40>)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	011b      	lsls	r3, r3, #4
 8007ca6:	4413      	add	r3, r2
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d1f2      	bne.n	8007c94 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2b02      	cmp	r3, #2
 8007cb2:	bf14      	ite	ne
 8007cb4:	2301      	movne	r3, #1
 8007cb6:	2300      	moveq	r3, #0
 8007cb8:	b2db      	uxtb	r3, r3
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	370c      	adds	r7, #12
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr
 8007cc6:	bf00      	nop
 8007cc8:	200010d0 	.word	0x200010d0

08007ccc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	60fb      	str	r3, [r7, #12]
 8007cda:	e01f      	b.n	8007d1c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007cdc:	4a41      	ldr	r2, [pc, #260]	; (8007de4 <inc_lock+0x118>)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	011b      	lsls	r3, r3, #4
 8007ce2:	4413      	add	r3, r2
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d113      	bne.n	8007d16 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007cee:	4a3d      	ldr	r2, [pc, #244]	; (8007de4 <inc_lock+0x118>)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	011b      	lsls	r3, r3, #4
 8007cf4:	4413      	add	r3, r2
 8007cf6:	3304      	adds	r3, #4
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d109      	bne.n	8007d16 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007d02:	4a38      	ldr	r2, [pc, #224]	; (8007de4 <inc_lock+0x118>)
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	011b      	lsls	r3, r3, #4
 8007d08:	4413      	add	r3, r2
 8007d0a:	3308      	adds	r3, #8
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d006      	beq.n	8007d24 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	3301      	adds	r3, #1
 8007d1a:	60fb      	str	r3, [r7, #12]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d9dc      	bls.n	8007cdc <inc_lock+0x10>
 8007d22:	e000      	b.n	8007d26 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007d24:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2b02      	cmp	r3, #2
 8007d2a:	d132      	bne.n	8007d92 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	60fb      	str	r3, [r7, #12]
 8007d30:	e002      	b.n	8007d38 <inc_lock+0x6c>
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	3301      	adds	r3, #1
 8007d36:	60fb      	str	r3, [r7, #12]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d806      	bhi.n	8007d4c <inc_lock+0x80>
 8007d3e:	4a29      	ldr	r2, [pc, #164]	; (8007de4 <inc_lock+0x118>)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	011b      	lsls	r3, r3, #4
 8007d44:	4413      	add	r3, r2
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d1f2      	bne.n	8007d32 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2b02      	cmp	r3, #2
 8007d50:	d101      	bne.n	8007d56 <inc_lock+0x8a>
 8007d52:	2300      	movs	r3, #0
 8007d54:	e040      	b.n	8007dd8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	4922      	ldr	r1, [pc, #136]	; (8007de4 <inc_lock+0x118>)
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	011b      	lsls	r3, r3, #4
 8007d60:	440b      	add	r3, r1
 8007d62:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	689a      	ldr	r2, [r3, #8]
 8007d68:	491e      	ldr	r1, [pc, #120]	; (8007de4 <inc_lock+0x118>)
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	011b      	lsls	r3, r3, #4
 8007d6e:	440b      	add	r3, r1
 8007d70:	3304      	adds	r3, #4
 8007d72:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	695a      	ldr	r2, [r3, #20]
 8007d78:	491a      	ldr	r1, [pc, #104]	; (8007de4 <inc_lock+0x118>)
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	011b      	lsls	r3, r3, #4
 8007d7e:	440b      	add	r3, r1
 8007d80:	3308      	adds	r3, #8
 8007d82:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007d84:	4a17      	ldr	r2, [pc, #92]	; (8007de4 <inc_lock+0x118>)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	011b      	lsls	r3, r3, #4
 8007d8a:	4413      	add	r3, r2
 8007d8c:	330c      	adds	r3, #12
 8007d8e:	2200      	movs	r2, #0
 8007d90:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d009      	beq.n	8007dac <inc_lock+0xe0>
 8007d98:	4a12      	ldr	r2, [pc, #72]	; (8007de4 <inc_lock+0x118>)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	011b      	lsls	r3, r3, #4
 8007d9e:	4413      	add	r3, r2
 8007da0:	330c      	adds	r3, #12
 8007da2:	881b      	ldrh	r3, [r3, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d001      	beq.n	8007dac <inc_lock+0xe0>
 8007da8:	2300      	movs	r3, #0
 8007daa:	e015      	b.n	8007dd8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d108      	bne.n	8007dc4 <inc_lock+0xf8>
 8007db2:	4a0c      	ldr	r2, [pc, #48]	; (8007de4 <inc_lock+0x118>)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	011b      	lsls	r3, r3, #4
 8007db8:	4413      	add	r3, r2
 8007dba:	330c      	adds	r3, #12
 8007dbc:	881b      	ldrh	r3, [r3, #0]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	b29a      	uxth	r2, r3
 8007dc2:	e001      	b.n	8007dc8 <inc_lock+0xfc>
 8007dc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007dc8:	4906      	ldr	r1, [pc, #24]	; (8007de4 <inc_lock+0x118>)
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	011b      	lsls	r3, r3, #4
 8007dce:	440b      	add	r3, r1
 8007dd0:	330c      	adds	r3, #12
 8007dd2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	3301      	adds	r3, #1
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3714      	adds	r7, #20
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr
 8007de4:	200010d0 	.word	0x200010d0

08007de8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b085      	sub	sp, #20
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	3b01      	subs	r3, #1
 8007df4:	607b      	str	r3, [r7, #4]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d825      	bhi.n	8007e48 <dec_lock+0x60>
		n = Files[i].ctr;
 8007dfc:	4a17      	ldr	r2, [pc, #92]	; (8007e5c <dec_lock+0x74>)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	011b      	lsls	r3, r3, #4
 8007e02:	4413      	add	r3, r2
 8007e04:	330c      	adds	r3, #12
 8007e06:	881b      	ldrh	r3, [r3, #0]
 8007e08:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007e0a:	89fb      	ldrh	r3, [r7, #14]
 8007e0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e10:	d101      	bne.n	8007e16 <dec_lock+0x2e>
 8007e12:	2300      	movs	r3, #0
 8007e14:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007e16:	89fb      	ldrh	r3, [r7, #14]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d002      	beq.n	8007e22 <dec_lock+0x3a>
 8007e1c:	89fb      	ldrh	r3, [r7, #14]
 8007e1e:	3b01      	subs	r3, #1
 8007e20:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007e22:	4a0e      	ldr	r2, [pc, #56]	; (8007e5c <dec_lock+0x74>)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	011b      	lsls	r3, r3, #4
 8007e28:	4413      	add	r3, r2
 8007e2a:	330c      	adds	r3, #12
 8007e2c:	89fa      	ldrh	r2, [r7, #14]
 8007e2e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007e30:	89fb      	ldrh	r3, [r7, #14]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d105      	bne.n	8007e42 <dec_lock+0x5a>
 8007e36:	4a09      	ldr	r2, [pc, #36]	; (8007e5c <dec_lock+0x74>)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	011b      	lsls	r3, r3, #4
 8007e3c:	4413      	add	r3, r2
 8007e3e:	2200      	movs	r2, #0
 8007e40:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007e42:	2300      	movs	r3, #0
 8007e44:	737b      	strb	r3, [r7, #13]
 8007e46:	e001      	b.n	8007e4c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007e48:	2302      	movs	r3, #2
 8007e4a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007e4c:	7b7b      	ldrb	r3, [r7, #13]
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3714      	adds	r7, #20
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop
 8007e5c:	200010d0 	.word	0x200010d0

08007e60 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b085      	sub	sp, #20
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007e68:	2300      	movs	r3, #0
 8007e6a:	60fb      	str	r3, [r7, #12]
 8007e6c:	e010      	b.n	8007e90 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007e6e:	4a0d      	ldr	r2, [pc, #52]	; (8007ea4 <clear_lock+0x44>)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	011b      	lsls	r3, r3, #4
 8007e74:	4413      	add	r3, r2
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d105      	bne.n	8007e8a <clear_lock+0x2a>
 8007e7e:	4a09      	ldr	r2, [pc, #36]	; (8007ea4 <clear_lock+0x44>)
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	011b      	lsls	r3, r3, #4
 8007e84:	4413      	add	r3, r2
 8007e86:	2200      	movs	r2, #0
 8007e88:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	60fb      	str	r3, [r7, #12]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d9eb      	bls.n	8007e6e <clear_lock+0xe>
	}
}
 8007e96:	bf00      	nop
 8007e98:	bf00      	nop
 8007e9a:	3714      	adds	r7, #20
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr
 8007ea4:	200010d0 	.word	0x200010d0

08007ea8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b086      	sub	sp, #24
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	78db      	ldrb	r3, [r3, #3]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d034      	beq.n	8007f26 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	7858      	ldrb	r0, [r3, #1]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007ecc:	2301      	movs	r3, #1
 8007ece:	697a      	ldr	r2, [r7, #20]
 8007ed0:	f7ff fd40 	bl	8007954 <disk_write>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d002      	beq.n	8007ee0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	73fb      	strb	r3, [r7, #15]
 8007ede:	e022      	b.n	8007f26 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eea:	697a      	ldr	r2, [r7, #20]
 8007eec:	1ad2      	subs	r2, r2, r3
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	69db      	ldr	r3, [r3, #28]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d217      	bcs.n	8007f26 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	789b      	ldrb	r3, [r3, #2]
 8007efa:	613b      	str	r3, [r7, #16]
 8007efc:	e010      	b.n	8007f20 <sync_window+0x78>
					wsect += fs->fsize;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	69db      	ldr	r3, [r3, #28]
 8007f02:	697a      	ldr	r2, [r7, #20]
 8007f04:	4413      	add	r3, r2
 8007f06:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	7858      	ldrb	r0, [r3, #1]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007f12:	2301      	movs	r3, #1
 8007f14:	697a      	ldr	r2, [r7, #20]
 8007f16:	f7ff fd1d 	bl	8007954 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	3b01      	subs	r3, #1
 8007f1e:	613b      	str	r3, [r7, #16]
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d8eb      	bhi.n	8007efe <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3718      	adds	r7, #24
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f42:	683a      	ldr	r2, [r7, #0]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d01b      	beq.n	8007f80 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f7ff ffad 	bl	8007ea8 <sync_window>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007f52:	7bfb      	ldrb	r3, [r7, #15]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d113      	bne.n	8007f80 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	7858      	ldrb	r0, [r3, #1]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007f62:	2301      	movs	r3, #1
 8007f64:	683a      	ldr	r2, [r7, #0]
 8007f66:	f7ff fcd5 	bl	8007914 <disk_read>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d004      	beq.n	8007f7a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007f70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f74:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	683a      	ldr	r2, [r7, #0]
 8007f7e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8007f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
	...

08007f8c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f7ff ff87 	bl	8007ea8 <sync_window>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007f9e:	7bfb      	ldrb	r3, [r7, #15]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d159      	bne.n	8008058 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	2b03      	cmp	r3, #3
 8007faa:	d149      	bne.n	8008040 <sync_fs+0xb4>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	791b      	ldrb	r3, [r3, #4]
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d145      	bne.n	8008040 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	899b      	ldrh	r3, [r3, #12]
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	2100      	movs	r1, #0
 8007fc2:	f7ff fda8 	bl	8007b16 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	3334      	adds	r3, #52	; 0x34
 8007fca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007fce:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7ff fd37 	bl	8007a46 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	3334      	adds	r3, #52	; 0x34
 8007fdc:	4921      	ldr	r1, [pc, #132]	; (8008064 <sync_fs+0xd8>)
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7ff fd4c 	bl	8007a7c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	3334      	adds	r3, #52	; 0x34
 8007fe8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007fec:	491e      	ldr	r1, [pc, #120]	; (8008068 <sync_fs+0xdc>)
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7ff fd44 	bl	8007a7c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	3334      	adds	r3, #52	; 0x34
 8007ff8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	695b      	ldr	r3, [r3, #20]
 8008000:	4619      	mov	r1, r3
 8008002:	4610      	mov	r0, r2
 8008004:	f7ff fd3a 	bl	8007a7c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	3334      	adds	r3, #52	; 0x34
 800800c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	691b      	ldr	r3, [r3, #16]
 8008014:	4619      	mov	r1, r3
 8008016:	4610      	mov	r0, r2
 8008018:	f7ff fd30 	bl	8007a7c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6a1b      	ldr	r3, [r3, #32]
 8008020:	1c5a      	adds	r2, r3, #1
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	7858      	ldrb	r0, [r3, #1]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008034:	2301      	movs	r3, #1
 8008036:	f7ff fc8d 	bl	8007954 <disk_write>
			fs->fsi_flag = 0;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	785b      	ldrb	r3, [r3, #1]
 8008044:	2200      	movs	r2, #0
 8008046:	2100      	movs	r1, #0
 8008048:	4618      	mov	r0, r3
 800804a:	f7ff fca3 	bl	8007994 <disk_ioctl>
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d001      	beq.n	8008058 <sync_fs+0xcc>
 8008054:	2301      	movs	r3, #1
 8008056:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008058:	7bfb      	ldrb	r3, [r7, #15]
}
 800805a:	4618      	mov	r0, r3
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	41615252 	.word	0x41615252
 8008068:	61417272 	.word	0x61417272

0800806c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	3b02      	subs	r3, #2
 800807a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	699b      	ldr	r3, [r3, #24]
 8008080:	3b02      	subs	r3, #2
 8008082:	683a      	ldr	r2, [r7, #0]
 8008084:	429a      	cmp	r2, r3
 8008086:	d301      	bcc.n	800808c <clust2sect+0x20>
 8008088:	2300      	movs	r3, #0
 800808a:	e008      	b.n	800809e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	895b      	ldrh	r3, [r3, #10]
 8008090:	461a      	mov	r2, r3
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	fb03 f202 	mul.w	r2, r3, r2
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800809c:	4413      	add	r3, r2
}
 800809e:	4618      	mov	r0, r3
 80080a0:	370c      	adds	r7, #12
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr

080080aa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b086      	sub	sp, #24
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
 80080b2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d904      	bls.n	80080ca <get_fat+0x20>
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	699b      	ldr	r3, [r3, #24]
 80080c4:	683a      	ldr	r2, [r7, #0]
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d302      	bcc.n	80080d0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80080ca:	2301      	movs	r3, #1
 80080cc:	617b      	str	r3, [r7, #20]
 80080ce:	e0bb      	b.n	8008248 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80080d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080d4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	2b03      	cmp	r3, #3
 80080dc:	f000 8083 	beq.w	80081e6 <get_fat+0x13c>
 80080e0:	2b03      	cmp	r3, #3
 80080e2:	f300 80a7 	bgt.w	8008234 <get_fat+0x18a>
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d002      	beq.n	80080f0 <get_fat+0x46>
 80080ea:	2b02      	cmp	r3, #2
 80080ec:	d056      	beq.n	800819c <get_fat+0xf2>
 80080ee:	e0a1      	b.n	8008234 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	60fb      	str	r3, [r7, #12]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	085b      	lsrs	r3, r3, #1
 80080f8:	68fa      	ldr	r2, [r7, #12]
 80080fa:	4413      	add	r3, r2
 80080fc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	899b      	ldrh	r3, [r3, #12]
 8008106:	4619      	mov	r1, r3
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	fbb3 f3f1 	udiv	r3, r3, r1
 800810e:	4413      	add	r3, r2
 8008110:	4619      	mov	r1, r3
 8008112:	6938      	ldr	r0, [r7, #16]
 8008114:	f7ff ff0c 	bl	8007f30 <move_window>
 8008118:	4603      	mov	r3, r0
 800811a:	2b00      	cmp	r3, #0
 800811c:	f040 808d 	bne.w	800823a <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	1c5a      	adds	r2, r3, #1
 8008124:	60fa      	str	r2, [r7, #12]
 8008126:	693a      	ldr	r2, [r7, #16]
 8008128:	8992      	ldrh	r2, [r2, #12]
 800812a:	fbb3 f1f2 	udiv	r1, r3, r2
 800812e:	fb02 f201 	mul.w	r2, r2, r1
 8008132:	1a9b      	subs	r3, r3, r2
 8008134:	693a      	ldr	r2, [r7, #16]
 8008136:	4413      	add	r3, r2
 8008138:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800813c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	899b      	ldrh	r3, [r3, #12]
 8008146:	4619      	mov	r1, r3
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	fbb3 f3f1 	udiv	r3, r3, r1
 800814e:	4413      	add	r3, r2
 8008150:	4619      	mov	r1, r3
 8008152:	6938      	ldr	r0, [r7, #16]
 8008154:	f7ff feec 	bl	8007f30 <move_window>
 8008158:	4603      	mov	r3, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d16f      	bne.n	800823e <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	899b      	ldrh	r3, [r3, #12]
 8008162:	461a      	mov	r2, r3
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	fbb3 f1f2 	udiv	r1, r3, r2
 800816a:	fb02 f201 	mul.w	r2, r2, r1
 800816e:	1a9b      	subs	r3, r3, r2
 8008170:	693a      	ldr	r2, [r7, #16]
 8008172:	4413      	add	r3, r2
 8008174:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008178:	021b      	lsls	r3, r3, #8
 800817a:	461a      	mov	r2, r3
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	4313      	orrs	r3, r2
 8008180:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	f003 0301 	and.w	r3, r3, #1
 8008188:	2b00      	cmp	r3, #0
 800818a:	d002      	beq.n	8008192 <get_fat+0xe8>
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	091b      	lsrs	r3, r3, #4
 8008190:	e002      	b.n	8008198 <get_fat+0xee>
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008198:	617b      	str	r3, [r7, #20]
			break;
 800819a:	e055      	b.n	8008248 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	899b      	ldrh	r3, [r3, #12]
 80081a4:	085b      	lsrs	r3, r3, #1
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	4619      	mov	r1, r3
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80081b0:	4413      	add	r3, r2
 80081b2:	4619      	mov	r1, r3
 80081b4:	6938      	ldr	r0, [r7, #16]
 80081b6:	f7ff febb 	bl	8007f30 <move_window>
 80081ba:	4603      	mov	r3, r0
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d140      	bne.n	8008242 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	005b      	lsls	r3, r3, #1
 80081ca:	693a      	ldr	r2, [r7, #16]
 80081cc:	8992      	ldrh	r2, [r2, #12]
 80081ce:	fbb3 f0f2 	udiv	r0, r3, r2
 80081d2:	fb02 f200 	mul.w	r2, r2, r0
 80081d6:	1a9b      	subs	r3, r3, r2
 80081d8:	440b      	add	r3, r1
 80081da:	4618      	mov	r0, r3
 80081dc:	f7ff fbf8 	bl	80079d0 <ld_word>
 80081e0:	4603      	mov	r3, r0
 80081e2:	617b      	str	r3, [r7, #20]
			break;
 80081e4:	e030      	b.n	8008248 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	899b      	ldrh	r3, [r3, #12]
 80081ee:	089b      	lsrs	r3, r3, #2
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	4619      	mov	r1, r3
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80081fa:	4413      	add	r3, r2
 80081fc:	4619      	mov	r1, r3
 80081fe:	6938      	ldr	r0, [r7, #16]
 8008200:	f7ff fe96 	bl	8007f30 <move_window>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d11d      	bne.n	8008246 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	693a      	ldr	r2, [r7, #16]
 8008216:	8992      	ldrh	r2, [r2, #12]
 8008218:	fbb3 f0f2 	udiv	r0, r3, r2
 800821c:	fb02 f200 	mul.w	r2, r2, r0
 8008220:	1a9b      	subs	r3, r3, r2
 8008222:	440b      	add	r3, r1
 8008224:	4618      	mov	r0, r3
 8008226:	f7ff fbeb 	bl	8007a00 <ld_dword>
 800822a:	4603      	mov	r3, r0
 800822c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008230:	617b      	str	r3, [r7, #20]
			break;
 8008232:	e009      	b.n	8008248 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008234:	2301      	movs	r3, #1
 8008236:	617b      	str	r3, [r7, #20]
 8008238:	e006      	b.n	8008248 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800823a:	bf00      	nop
 800823c:	e004      	b.n	8008248 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800823e:	bf00      	nop
 8008240:	e002      	b.n	8008248 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008242:	bf00      	nop
 8008244:	e000      	b.n	8008248 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008246:	bf00      	nop
		}
	}

	return val;
 8008248:	697b      	ldr	r3, [r7, #20]
}
 800824a:	4618      	mov	r0, r3
 800824c:	3718      	adds	r7, #24
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008252:	b590      	push	{r4, r7, lr}
 8008254:	b089      	sub	sp, #36	; 0x24
 8008256:	af00      	add	r7, sp, #0
 8008258:	60f8      	str	r0, [r7, #12]
 800825a:	60b9      	str	r1, [r7, #8]
 800825c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800825e:	2302      	movs	r3, #2
 8008260:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	2b01      	cmp	r3, #1
 8008266:	f240 8102 	bls.w	800846e <put_fat+0x21c>
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	699b      	ldr	r3, [r3, #24]
 800826e:	68ba      	ldr	r2, [r7, #8]
 8008270:	429a      	cmp	r2, r3
 8008272:	f080 80fc 	bcs.w	800846e <put_fat+0x21c>
		switch (fs->fs_type) {
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	2b03      	cmp	r3, #3
 800827c:	f000 80b6 	beq.w	80083ec <put_fat+0x19a>
 8008280:	2b03      	cmp	r3, #3
 8008282:	f300 80fd 	bgt.w	8008480 <put_fat+0x22e>
 8008286:	2b01      	cmp	r3, #1
 8008288:	d003      	beq.n	8008292 <put_fat+0x40>
 800828a:	2b02      	cmp	r3, #2
 800828c:	f000 8083 	beq.w	8008396 <put_fat+0x144>
 8008290:	e0f6      	b.n	8008480 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	61bb      	str	r3, [r7, #24]
 8008296:	69bb      	ldr	r3, [r7, #24]
 8008298:	085b      	lsrs	r3, r3, #1
 800829a:	69ba      	ldr	r2, [r7, #24]
 800829c:	4413      	add	r3, r2
 800829e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	899b      	ldrh	r3, [r3, #12]
 80082a8:	4619      	mov	r1, r3
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80082b0:	4413      	add	r3, r2
 80082b2:	4619      	mov	r1, r3
 80082b4:	68f8      	ldr	r0, [r7, #12]
 80082b6:	f7ff fe3b 	bl	8007f30 <move_window>
 80082ba:	4603      	mov	r3, r0
 80082bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80082be:	7ffb      	ldrb	r3, [r7, #31]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	f040 80d6 	bne.w	8008472 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80082cc:	69bb      	ldr	r3, [r7, #24]
 80082ce:	1c5a      	adds	r2, r3, #1
 80082d0:	61ba      	str	r2, [r7, #24]
 80082d2:	68fa      	ldr	r2, [r7, #12]
 80082d4:	8992      	ldrh	r2, [r2, #12]
 80082d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80082da:	fb02 f200 	mul.w	r2, r2, r0
 80082de:	1a9b      	subs	r3, r3, r2
 80082e0:	440b      	add	r3, r1
 80082e2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	f003 0301 	and.w	r3, r3, #1
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d00d      	beq.n	800830a <put_fat+0xb8>
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	b25b      	sxtb	r3, r3
 80082f4:	f003 030f 	and.w	r3, r3, #15
 80082f8:	b25a      	sxtb	r2, r3
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	011b      	lsls	r3, r3, #4
 8008300:	b25b      	sxtb	r3, r3
 8008302:	4313      	orrs	r3, r2
 8008304:	b25b      	sxtb	r3, r3
 8008306:	b2db      	uxtb	r3, r3
 8008308:	e001      	b.n	800830e <put_fat+0xbc>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	b2db      	uxtb	r3, r3
 800830e:	697a      	ldr	r2, [r7, #20]
 8008310:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2201      	movs	r2, #1
 8008316:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	899b      	ldrh	r3, [r3, #12]
 8008320:	4619      	mov	r1, r3
 8008322:	69bb      	ldr	r3, [r7, #24]
 8008324:	fbb3 f3f1 	udiv	r3, r3, r1
 8008328:	4413      	add	r3, r2
 800832a:	4619      	mov	r1, r3
 800832c:	68f8      	ldr	r0, [r7, #12]
 800832e:	f7ff fdff 	bl	8007f30 <move_window>
 8008332:	4603      	mov	r3, r0
 8008334:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008336:	7ffb      	ldrb	r3, [r7, #31]
 8008338:	2b00      	cmp	r3, #0
 800833a:	f040 809c 	bne.w	8008476 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	899b      	ldrh	r3, [r3, #12]
 8008348:	461a      	mov	r2, r3
 800834a:	69bb      	ldr	r3, [r7, #24]
 800834c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008350:	fb02 f200 	mul.w	r2, r2, r0
 8008354:	1a9b      	subs	r3, r3, r2
 8008356:	440b      	add	r3, r1
 8008358:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	f003 0301 	and.w	r3, r3, #1
 8008360:	2b00      	cmp	r3, #0
 8008362:	d003      	beq.n	800836c <put_fat+0x11a>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	091b      	lsrs	r3, r3, #4
 8008368:	b2db      	uxtb	r3, r3
 800836a:	e00e      	b.n	800838a <put_fat+0x138>
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	b25b      	sxtb	r3, r3
 8008372:	f023 030f 	bic.w	r3, r3, #15
 8008376:	b25a      	sxtb	r2, r3
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	0a1b      	lsrs	r3, r3, #8
 800837c:	b25b      	sxtb	r3, r3
 800837e:	f003 030f 	and.w	r3, r3, #15
 8008382:	b25b      	sxtb	r3, r3
 8008384:	4313      	orrs	r3, r2
 8008386:	b25b      	sxtb	r3, r3
 8008388:	b2db      	uxtb	r3, r3
 800838a:	697a      	ldr	r2, [r7, #20]
 800838c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2201      	movs	r2, #1
 8008392:	70da      	strb	r2, [r3, #3]
			break;
 8008394:	e074      	b.n	8008480 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	899b      	ldrh	r3, [r3, #12]
 800839e:	085b      	lsrs	r3, r3, #1
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	4619      	mov	r1, r3
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80083aa:	4413      	add	r3, r2
 80083ac:	4619      	mov	r1, r3
 80083ae:	68f8      	ldr	r0, [r7, #12]
 80083b0:	f7ff fdbe 	bl	8007f30 <move_window>
 80083b4:	4603      	mov	r3, r0
 80083b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80083b8:	7ffb      	ldrb	r3, [r7, #31]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d15d      	bne.n	800847a <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	005b      	lsls	r3, r3, #1
 80083c8:	68fa      	ldr	r2, [r7, #12]
 80083ca:	8992      	ldrh	r2, [r2, #12]
 80083cc:	fbb3 f0f2 	udiv	r0, r3, r2
 80083d0:	fb02 f200 	mul.w	r2, r2, r0
 80083d4:	1a9b      	subs	r3, r3, r2
 80083d6:	440b      	add	r3, r1
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	b292      	uxth	r2, r2
 80083dc:	4611      	mov	r1, r2
 80083de:	4618      	mov	r0, r3
 80083e0:	f7ff fb31 	bl	8007a46 <st_word>
			fs->wflag = 1;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2201      	movs	r2, #1
 80083e8:	70da      	strb	r2, [r3, #3]
			break;
 80083ea:	e049      	b.n	8008480 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	899b      	ldrh	r3, [r3, #12]
 80083f4:	089b      	lsrs	r3, r3, #2
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	4619      	mov	r1, r3
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	fbb3 f3f1 	udiv	r3, r3, r1
 8008400:	4413      	add	r3, r2
 8008402:	4619      	mov	r1, r3
 8008404:	68f8      	ldr	r0, [r7, #12]
 8008406:	f7ff fd93 	bl	8007f30 <move_window>
 800840a:	4603      	mov	r3, r0
 800840c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800840e:	7ffb      	ldrb	r3, [r7, #31]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d134      	bne.n	800847e <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	68fa      	ldr	r2, [r7, #12]
 8008426:	8992      	ldrh	r2, [r2, #12]
 8008428:	fbb3 f0f2 	udiv	r0, r3, r2
 800842c:	fb02 f200 	mul.w	r2, r2, r0
 8008430:	1a9b      	subs	r3, r3, r2
 8008432:	440b      	add	r3, r1
 8008434:	4618      	mov	r0, r3
 8008436:	f7ff fae3 	bl	8007a00 <ld_dword>
 800843a:	4603      	mov	r3, r0
 800843c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008440:	4323      	orrs	r3, r4
 8008442:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	68fa      	ldr	r2, [r7, #12]
 8008450:	8992      	ldrh	r2, [r2, #12]
 8008452:	fbb3 f0f2 	udiv	r0, r3, r2
 8008456:	fb02 f200 	mul.w	r2, r2, r0
 800845a:	1a9b      	subs	r3, r3, r2
 800845c:	440b      	add	r3, r1
 800845e:	6879      	ldr	r1, [r7, #4]
 8008460:	4618      	mov	r0, r3
 8008462:	f7ff fb0b 	bl	8007a7c <st_dword>
			fs->wflag = 1;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2201      	movs	r2, #1
 800846a:	70da      	strb	r2, [r3, #3]
			break;
 800846c:	e008      	b.n	8008480 <put_fat+0x22e>
		}
	}
 800846e:	bf00      	nop
 8008470:	e006      	b.n	8008480 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008472:	bf00      	nop
 8008474:	e004      	b.n	8008480 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008476:	bf00      	nop
 8008478:	e002      	b.n	8008480 <put_fat+0x22e>
			if (res != FR_OK) break;
 800847a:	bf00      	nop
 800847c:	e000      	b.n	8008480 <put_fat+0x22e>
			if (res != FR_OK) break;
 800847e:	bf00      	nop
	return res;
 8008480:	7ffb      	ldrb	r3, [r7, #31]
}
 8008482:	4618      	mov	r0, r3
 8008484:	3724      	adds	r7, #36	; 0x24
 8008486:	46bd      	mov	sp, r7
 8008488:	bd90      	pop	{r4, r7, pc}

0800848a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800848a:	b580      	push	{r7, lr}
 800848c:	b088      	sub	sp, #32
 800848e:	af00      	add	r7, sp, #0
 8008490:	60f8      	str	r0, [r7, #12]
 8008492:	60b9      	str	r1, [r7, #8]
 8008494:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008496:	2300      	movs	r3, #0
 8008498:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d904      	bls.n	80084b0 <remove_chain+0x26>
 80084a6:	69bb      	ldr	r3, [r7, #24]
 80084a8:	699b      	ldr	r3, [r3, #24]
 80084aa:	68ba      	ldr	r2, [r7, #8]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d301      	bcc.n	80084b4 <remove_chain+0x2a>
 80084b0:	2302      	movs	r3, #2
 80084b2:	e04b      	b.n	800854c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d00c      	beq.n	80084d4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80084ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80084be:	6879      	ldr	r1, [r7, #4]
 80084c0:	69b8      	ldr	r0, [r7, #24]
 80084c2:	f7ff fec6 	bl	8008252 <put_fat>
 80084c6:	4603      	mov	r3, r0
 80084c8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80084ca:	7ffb      	ldrb	r3, [r7, #31]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d001      	beq.n	80084d4 <remove_chain+0x4a>
 80084d0:	7ffb      	ldrb	r3, [r7, #31]
 80084d2:	e03b      	b.n	800854c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80084d4:	68b9      	ldr	r1, [r7, #8]
 80084d6:	68f8      	ldr	r0, [r7, #12]
 80084d8:	f7ff fde7 	bl	80080aa <get_fat>
 80084dc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d031      	beq.n	8008548 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d101      	bne.n	80084ee <remove_chain+0x64>
 80084ea:	2302      	movs	r3, #2
 80084ec:	e02e      	b.n	800854c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084f4:	d101      	bne.n	80084fa <remove_chain+0x70>
 80084f6:	2301      	movs	r3, #1
 80084f8:	e028      	b.n	800854c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80084fa:	2200      	movs	r2, #0
 80084fc:	68b9      	ldr	r1, [r7, #8]
 80084fe:	69b8      	ldr	r0, [r7, #24]
 8008500:	f7ff fea7 	bl	8008252 <put_fat>
 8008504:	4603      	mov	r3, r0
 8008506:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008508:	7ffb      	ldrb	r3, [r7, #31]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d001      	beq.n	8008512 <remove_chain+0x88>
 800850e:	7ffb      	ldrb	r3, [r7, #31]
 8008510:	e01c      	b.n	800854c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008512:	69bb      	ldr	r3, [r7, #24]
 8008514:	695a      	ldr	r2, [r3, #20]
 8008516:	69bb      	ldr	r3, [r7, #24]
 8008518:	699b      	ldr	r3, [r3, #24]
 800851a:	3b02      	subs	r3, #2
 800851c:	429a      	cmp	r2, r3
 800851e:	d20b      	bcs.n	8008538 <remove_chain+0xae>
			fs->free_clst++;
 8008520:	69bb      	ldr	r3, [r7, #24]
 8008522:	695b      	ldr	r3, [r3, #20]
 8008524:	1c5a      	adds	r2, r3, #1
 8008526:	69bb      	ldr	r3, [r7, #24]
 8008528:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800852a:	69bb      	ldr	r3, [r7, #24]
 800852c:	791b      	ldrb	r3, [r3, #4]
 800852e:	f043 0301 	orr.w	r3, r3, #1
 8008532:	b2da      	uxtb	r2, r3
 8008534:	69bb      	ldr	r3, [r7, #24]
 8008536:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800853c:	69bb      	ldr	r3, [r7, #24]
 800853e:	699b      	ldr	r3, [r3, #24]
 8008540:	68ba      	ldr	r2, [r7, #8]
 8008542:	429a      	cmp	r2, r3
 8008544:	d3c6      	bcc.n	80084d4 <remove_chain+0x4a>
 8008546:	e000      	b.n	800854a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008548:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800854a:	2300      	movs	r3, #0
}
 800854c:	4618      	mov	r0, r3
 800854e:	3720      	adds	r7, #32
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b088      	sub	sp, #32
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d10d      	bne.n	8008586 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	691b      	ldr	r3, [r3, #16]
 800856e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008570:	69bb      	ldr	r3, [r7, #24]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d004      	beq.n	8008580 <create_chain+0x2c>
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	699b      	ldr	r3, [r3, #24]
 800857a:	69ba      	ldr	r2, [r7, #24]
 800857c:	429a      	cmp	r2, r3
 800857e:	d31b      	bcc.n	80085b8 <create_chain+0x64>
 8008580:	2301      	movs	r3, #1
 8008582:	61bb      	str	r3, [r7, #24]
 8008584:	e018      	b.n	80085b8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008586:	6839      	ldr	r1, [r7, #0]
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f7ff fd8e 	bl	80080aa <get_fat>
 800858e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2b01      	cmp	r3, #1
 8008594:	d801      	bhi.n	800859a <create_chain+0x46>
 8008596:	2301      	movs	r3, #1
 8008598:	e070      	b.n	800867c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085a0:	d101      	bne.n	80085a6 <create_chain+0x52>
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	e06a      	b.n	800867c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	699b      	ldr	r3, [r3, #24]
 80085aa:	68fa      	ldr	r2, [r7, #12]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d201      	bcs.n	80085b4 <create_chain+0x60>
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	e063      	b.n	800867c <create_chain+0x128>
		scl = clst;
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80085b8:	69bb      	ldr	r3, [r7, #24]
 80085ba:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80085bc:	69fb      	ldr	r3, [r7, #28]
 80085be:	3301      	adds	r3, #1
 80085c0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	699b      	ldr	r3, [r3, #24]
 80085c6:	69fa      	ldr	r2, [r7, #28]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d307      	bcc.n	80085dc <create_chain+0x88>
				ncl = 2;
 80085cc:	2302      	movs	r3, #2
 80085ce:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80085d0:	69fa      	ldr	r2, [r7, #28]
 80085d2:	69bb      	ldr	r3, [r7, #24]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d901      	bls.n	80085dc <create_chain+0x88>
 80085d8:	2300      	movs	r3, #0
 80085da:	e04f      	b.n	800867c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80085dc:	69f9      	ldr	r1, [r7, #28]
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f7ff fd63 	bl	80080aa <get_fat>
 80085e4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d00e      	beq.n	800860a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d003      	beq.n	80085fa <create_chain+0xa6>
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085f8:	d101      	bne.n	80085fe <create_chain+0xaa>
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	e03e      	b.n	800867c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80085fe:	69fa      	ldr	r2, [r7, #28]
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	429a      	cmp	r2, r3
 8008604:	d1da      	bne.n	80085bc <create_chain+0x68>
 8008606:	2300      	movs	r3, #0
 8008608:	e038      	b.n	800867c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800860a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800860c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008610:	69f9      	ldr	r1, [r7, #28]
 8008612:	6938      	ldr	r0, [r7, #16]
 8008614:	f7ff fe1d 	bl	8008252 <put_fat>
 8008618:	4603      	mov	r3, r0
 800861a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800861c:	7dfb      	ldrb	r3, [r7, #23]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d109      	bne.n	8008636 <create_chain+0xe2>
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d006      	beq.n	8008636 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008628:	69fa      	ldr	r2, [r7, #28]
 800862a:	6839      	ldr	r1, [r7, #0]
 800862c:	6938      	ldr	r0, [r7, #16]
 800862e:	f7ff fe10 	bl	8008252 <put_fat>
 8008632:	4603      	mov	r3, r0
 8008634:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008636:	7dfb      	ldrb	r3, [r7, #23]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d116      	bne.n	800866a <create_chain+0x116>
		fs->last_clst = ncl;
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	69fa      	ldr	r2, [r7, #28]
 8008640:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	695a      	ldr	r2, [r3, #20]
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	699b      	ldr	r3, [r3, #24]
 800864a:	3b02      	subs	r3, #2
 800864c:	429a      	cmp	r2, r3
 800864e:	d804      	bhi.n	800865a <create_chain+0x106>
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	695b      	ldr	r3, [r3, #20]
 8008654:	1e5a      	subs	r2, r3, #1
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	791b      	ldrb	r3, [r3, #4]
 800865e:	f043 0301 	orr.w	r3, r3, #1
 8008662:	b2da      	uxtb	r2, r3
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	711a      	strb	r2, [r3, #4]
 8008668:	e007      	b.n	800867a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800866a:	7dfb      	ldrb	r3, [r7, #23]
 800866c:	2b01      	cmp	r3, #1
 800866e:	d102      	bne.n	8008676 <create_chain+0x122>
 8008670:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008674:	e000      	b.n	8008678 <create_chain+0x124>
 8008676:	2301      	movs	r3, #1
 8008678:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800867a:	69fb      	ldr	r3, [r7, #28]
}
 800867c:	4618      	mov	r0, r3
 800867e:	3720      	adds	r7, #32
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008684:	b480      	push	{r7}
 8008686:	b087      	sub	sp, #28
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008698:	3304      	adds	r3, #4
 800869a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	899b      	ldrh	r3, [r3, #12]
 80086a0:	461a      	mov	r2, r3
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80086a8:	68fa      	ldr	r2, [r7, #12]
 80086aa:	8952      	ldrh	r2, [r2, #10]
 80086ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80086b0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	1d1a      	adds	r2, r3, #4
 80086b6:	613a      	str	r2, [r7, #16]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d101      	bne.n	80086c6 <clmt_clust+0x42>
 80086c2:	2300      	movs	r3, #0
 80086c4:	e010      	b.n	80086e8 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80086c6:	697a      	ldr	r2, [r7, #20]
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d307      	bcc.n	80086de <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80086ce:	697a      	ldr	r2, [r7, #20]
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	1ad3      	subs	r3, r2, r3
 80086d4:	617b      	str	r3, [r7, #20]
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	3304      	adds	r3, #4
 80086da:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80086dc:	e7e9      	b.n	80086b2 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80086de:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	4413      	add	r3, r2
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	371c      	adds	r7, #28
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b086      	sub	sp, #24
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800870a:	d204      	bcs.n	8008716 <dir_sdi+0x22>
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	f003 031f 	and.w	r3, r3, #31
 8008712:	2b00      	cmp	r3, #0
 8008714:	d001      	beq.n	800871a <dir_sdi+0x26>
		return FR_INT_ERR;
 8008716:	2302      	movs	r3, #2
 8008718:	e071      	b.n	80087fe <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	683a      	ldr	r2, [r7, #0]
 800871e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d106      	bne.n	800873a <dir_sdi+0x46>
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	2b02      	cmp	r3, #2
 8008732:	d902      	bls.n	800873a <dir_sdi+0x46>
		clst = fs->dirbase;
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008738:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d10c      	bne.n	800875a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	095b      	lsrs	r3, r3, #5
 8008744:	693a      	ldr	r2, [r7, #16]
 8008746:	8912      	ldrh	r2, [r2, #8]
 8008748:	4293      	cmp	r3, r2
 800874a:	d301      	bcc.n	8008750 <dir_sdi+0x5c>
 800874c:	2302      	movs	r3, #2
 800874e:	e056      	b.n	80087fe <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	61da      	str	r2, [r3, #28]
 8008758:	e02d      	b.n	80087b6 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	895b      	ldrh	r3, [r3, #10]
 800875e:	461a      	mov	r2, r3
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	899b      	ldrh	r3, [r3, #12]
 8008764:	fb03 f302 	mul.w	r3, r3, r2
 8008768:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800876a:	e019      	b.n	80087a0 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6979      	ldr	r1, [r7, #20]
 8008770:	4618      	mov	r0, r3
 8008772:	f7ff fc9a 	bl	80080aa <get_fat>
 8008776:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800877e:	d101      	bne.n	8008784 <dir_sdi+0x90>
 8008780:	2301      	movs	r3, #1
 8008782:	e03c      	b.n	80087fe <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	2b01      	cmp	r3, #1
 8008788:	d904      	bls.n	8008794 <dir_sdi+0xa0>
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	699b      	ldr	r3, [r3, #24]
 800878e:	697a      	ldr	r2, [r7, #20]
 8008790:	429a      	cmp	r2, r3
 8008792:	d301      	bcc.n	8008798 <dir_sdi+0xa4>
 8008794:	2302      	movs	r3, #2
 8008796:	e032      	b.n	80087fe <dir_sdi+0x10a>
			ofs -= csz;
 8008798:	683a      	ldr	r2, [r7, #0]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	1ad3      	subs	r3, r2, r3
 800879e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80087a0:	683a      	ldr	r2, [r7, #0]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d2e1      	bcs.n	800876c <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80087a8:	6979      	ldr	r1, [r7, #20]
 80087aa:	6938      	ldr	r0, [r7, #16]
 80087ac:	f7ff fc5e 	bl	800806c <clust2sect>
 80087b0:	4602      	mov	r2, r0
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	697a      	ldr	r2, [r7, #20]
 80087ba:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	69db      	ldr	r3, [r3, #28]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d101      	bne.n	80087c8 <dir_sdi+0xd4>
 80087c4:	2302      	movs	r3, #2
 80087c6:	e01a      	b.n	80087fe <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	69da      	ldr	r2, [r3, #28]
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	899b      	ldrh	r3, [r3, #12]
 80087d0:	4619      	mov	r1, r3
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80087d8:	441a      	add	r2, r3
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	899b      	ldrh	r3, [r3, #12]
 80087e8:	461a      	mov	r2, r3
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	fbb3 f0f2 	udiv	r0, r3, r2
 80087f0:	fb02 f200 	mul.w	r2, r2, r0
 80087f4:	1a9b      	subs	r3, r3, r2
 80087f6:	18ca      	adds	r2, r1, r3
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3718      	adds	r7, #24
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}

08008806 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b086      	sub	sp, #24
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
 800880e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	695b      	ldr	r3, [r3, #20]
 800881a:	3320      	adds	r3, #32
 800881c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	69db      	ldr	r3, [r3, #28]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d003      	beq.n	800882e <dir_next+0x28>
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800882c:	d301      	bcc.n	8008832 <dir_next+0x2c>
 800882e:	2304      	movs	r3, #4
 8008830:	e0bb      	b.n	80089aa <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	899b      	ldrh	r3, [r3, #12]
 8008836:	461a      	mov	r2, r3
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	fbb3 f1f2 	udiv	r1, r3, r2
 800883e:	fb02 f201 	mul.w	r2, r2, r1
 8008842:	1a9b      	subs	r3, r3, r2
 8008844:	2b00      	cmp	r3, #0
 8008846:	f040 809d 	bne.w	8008984 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	69db      	ldr	r3, [r3, #28]
 800884e:	1c5a      	adds	r2, r3, #1
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	699b      	ldr	r3, [r3, #24]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d10b      	bne.n	8008874 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	095b      	lsrs	r3, r3, #5
 8008860:	68fa      	ldr	r2, [r7, #12]
 8008862:	8912      	ldrh	r2, [r2, #8]
 8008864:	4293      	cmp	r3, r2
 8008866:	f0c0 808d 	bcc.w	8008984 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2200      	movs	r2, #0
 800886e:	61da      	str	r2, [r3, #28]
 8008870:	2304      	movs	r3, #4
 8008872:	e09a      	b.n	80089aa <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	899b      	ldrh	r3, [r3, #12]
 8008878:	461a      	mov	r2, r3
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008880:	68fa      	ldr	r2, [r7, #12]
 8008882:	8952      	ldrh	r2, [r2, #10]
 8008884:	3a01      	subs	r2, #1
 8008886:	4013      	ands	r3, r2
 8008888:	2b00      	cmp	r3, #0
 800888a:	d17b      	bne.n	8008984 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	699b      	ldr	r3, [r3, #24]
 8008892:	4619      	mov	r1, r3
 8008894:	4610      	mov	r0, r2
 8008896:	f7ff fc08 	bl	80080aa <get_fat>
 800889a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d801      	bhi.n	80088a6 <dir_next+0xa0>
 80088a2:	2302      	movs	r3, #2
 80088a4:	e081      	b.n	80089aa <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088ac:	d101      	bne.n	80088b2 <dir_next+0xac>
 80088ae:	2301      	movs	r3, #1
 80088b0:	e07b      	b.n	80089aa <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	699b      	ldr	r3, [r3, #24]
 80088b6:	697a      	ldr	r2, [r7, #20]
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d359      	bcc.n	8008970 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d104      	bne.n	80088cc <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	61da      	str	r2, [r3, #28]
 80088c8:	2304      	movs	r3, #4
 80088ca:	e06e      	b.n	80089aa <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	699b      	ldr	r3, [r3, #24]
 80088d2:	4619      	mov	r1, r3
 80088d4:	4610      	mov	r0, r2
 80088d6:	f7ff fe3d 	bl	8008554 <create_chain>
 80088da:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d101      	bne.n	80088e6 <dir_next+0xe0>
 80088e2:	2307      	movs	r3, #7
 80088e4:	e061      	b.n	80089aa <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d101      	bne.n	80088f0 <dir_next+0xea>
 80088ec:	2302      	movs	r3, #2
 80088ee:	e05c      	b.n	80089aa <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088f6:	d101      	bne.n	80088fc <dir_next+0xf6>
 80088f8:	2301      	movs	r3, #1
 80088fa:	e056      	b.n	80089aa <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80088fc:	68f8      	ldr	r0, [r7, #12]
 80088fe:	f7ff fad3 	bl	8007ea8 <sync_window>
 8008902:	4603      	mov	r3, r0
 8008904:	2b00      	cmp	r3, #0
 8008906:	d001      	beq.n	800890c <dir_next+0x106>
 8008908:	2301      	movs	r3, #1
 800890a:	e04e      	b.n	80089aa <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	899b      	ldrh	r3, [r3, #12]
 8008916:	461a      	mov	r2, r3
 8008918:	2100      	movs	r1, #0
 800891a:	f7ff f8fc 	bl	8007b16 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800891e:	2300      	movs	r3, #0
 8008920:	613b      	str	r3, [r7, #16]
 8008922:	6979      	ldr	r1, [r7, #20]
 8008924:	68f8      	ldr	r0, [r7, #12]
 8008926:	f7ff fba1 	bl	800806c <clust2sect>
 800892a:	4602      	mov	r2, r0
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	631a      	str	r2, [r3, #48]	; 0x30
 8008930:	e012      	b.n	8008958 <dir_next+0x152>
						fs->wflag = 1;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2201      	movs	r2, #1
 8008936:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008938:	68f8      	ldr	r0, [r7, #12]
 800893a:	f7ff fab5 	bl	8007ea8 <sync_window>
 800893e:	4603      	mov	r3, r0
 8008940:	2b00      	cmp	r3, #0
 8008942:	d001      	beq.n	8008948 <dir_next+0x142>
 8008944:	2301      	movs	r3, #1
 8008946:	e030      	b.n	80089aa <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	3301      	adds	r3, #1
 800894c:	613b      	str	r3, [r7, #16]
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008952:	1c5a      	adds	r2, r3, #1
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	631a      	str	r2, [r3, #48]	; 0x30
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	895b      	ldrh	r3, [r3, #10]
 800895c:	461a      	mov	r2, r3
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	4293      	cmp	r3, r2
 8008962:	d3e6      	bcc.n	8008932 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	1ad2      	subs	r2, r2, r3
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	697a      	ldr	r2, [r7, #20]
 8008974:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008976:	6979      	ldr	r1, [r7, #20]
 8008978:	68f8      	ldr	r0, [r7, #12]
 800897a:	f7ff fb77 	bl	800806c <clust2sect>
 800897e:	4602      	mov	r2, r0
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	68ba      	ldr	r2, [r7, #8]
 8008988:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	899b      	ldrh	r3, [r3, #12]
 8008994:	461a      	mov	r2, r3
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	fbb3 f0f2 	udiv	r0, r3, r2
 800899c:	fb02 f200 	mul.w	r2, r2, r0
 80089a0:	1a9b      	subs	r3, r3, r2
 80089a2:	18ca      	adds	r2, r1, r3
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80089a8:	2300      	movs	r3, #0
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3718      	adds	r7, #24
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}

080089b2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b086      	sub	sp, #24
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
 80089ba:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80089c2:	2100      	movs	r1, #0
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f7ff fe95 	bl	80086f4 <dir_sdi>
 80089ca:	4603      	mov	r3, r0
 80089cc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80089ce:	7dfb      	ldrb	r3, [r7, #23]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d12b      	bne.n	8008a2c <dir_alloc+0x7a>
		n = 0;
 80089d4:	2300      	movs	r3, #0
 80089d6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	69db      	ldr	r3, [r3, #28]
 80089dc:	4619      	mov	r1, r3
 80089de:	68f8      	ldr	r0, [r7, #12]
 80089e0:	f7ff faa6 	bl	8007f30 <move_window>
 80089e4:	4603      	mov	r3, r0
 80089e6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80089e8:	7dfb      	ldrb	r3, [r7, #23]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d11d      	bne.n	8008a2a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6a1b      	ldr	r3, [r3, #32]
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	2be5      	cmp	r3, #229	; 0xe5
 80089f6:	d004      	beq.n	8008a02 <dir_alloc+0x50>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6a1b      	ldr	r3, [r3, #32]
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d107      	bne.n	8008a12 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	3301      	adds	r3, #1
 8008a06:	613b      	str	r3, [r7, #16]
 8008a08:	693a      	ldr	r2, [r7, #16]
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d102      	bne.n	8008a16 <dir_alloc+0x64>
 8008a10:	e00c      	b.n	8008a2c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008a12:	2300      	movs	r3, #0
 8008a14:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008a16:	2101      	movs	r1, #1
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f7ff fef4 	bl	8008806 <dir_next>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008a22:	7dfb      	ldrb	r3, [r7, #23]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d0d7      	beq.n	80089d8 <dir_alloc+0x26>
 8008a28:	e000      	b.n	8008a2c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008a2a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008a2c:	7dfb      	ldrb	r3, [r7, #23]
 8008a2e:	2b04      	cmp	r3, #4
 8008a30:	d101      	bne.n	8008a36 <dir_alloc+0x84>
 8008a32:	2307      	movs	r3, #7
 8008a34:	75fb      	strb	r3, [r7, #23]
	return res;
 8008a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3718      	adds	r7, #24
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	331a      	adds	r3, #26
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7fe ffbe 	bl	80079d0 <ld_word>
 8008a54:	4603      	mov	r3, r0
 8008a56:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	2b03      	cmp	r3, #3
 8008a5e:	d109      	bne.n	8008a74 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	3314      	adds	r3, #20
 8008a64:	4618      	mov	r0, r3
 8008a66:	f7fe ffb3 	bl	80079d0 <ld_word>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	041b      	lsls	r3, r3, #16
 8008a6e:	68fa      	ldr	r2, [r7, #12]
 8008a70:	4313      	orrs	r3, r2
 8008a72:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008a74:	68fb      	ldr	r3, [r7, #12]
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3710      	adds	r7, #16
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}

08008a7e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008a7e:	b580      	push	{r7, lr}
 8008a80:	b084      	sub	sp, #16
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	60f8      	str	r0, [r7, #12]
 8008a86:	60b9      	str	r1, [r7, #8]
 8008a88:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	331a      	adds	r3, #26
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	b292      	uxth	r2, r2
 8008a92:	4611      	mov	r1, r2
 8008a94:	4618      	mov	r0, r3
 8008a96:	f7fe ffd6 	bl	8007a46 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	781b      	ldrb	r3, [r3, #0]
 8008a9e:	2b03      	cmp	r3, #3
 8008aa0:	d109      	bne.n	8008ab6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	f103 0214 	add.w	r2, r3, #20
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	0c1b      	lsrs	r3, r3, #16
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	4619      	mov	r1, r3
 8008ab0:	4610      	mov	r0, r2
 8008ab2:	f7fe ffc8 	bl	8007a46 <st_word>
	}
}
 8008ab6:	bf00      	nop
 8008ab8:	3710      	adds	r7, #16
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}

08008abe <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b086      	sub	sp, #24
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008acc:	2100      	movs	r1, #0
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f7ff fe10 	bl	80086f4 <dir_sdi>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008ad8:	7dfb      	ldrb	r3, [r7, #23]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d001      	beq.n	8008ae2 <dir_find+0x24>
 8008ade:	7dfb      	ldrb	r3, [r7, #23]
 8008ae0:	e03e      	b.n	8008b60 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	69db      	ldr	r3, [r3, #28]
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	6938      	ldr	r0, [r7, #16]
 8008aea:	f7ff fa21 	bl	8007f30 <move_window>
 8008aee:	4603      	mov	r3, r0
 8008af0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008af2:	7dfb      	ldrb	r3, [r7, #23]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d12f      	bne.n	8008b58 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6a1b      	ldr	r3, [r3, #32]
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008b00:	7bfb      	ldrb	r3, [r7, #15]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d102      	bne.n	8008b0c <dir_find+0x4e>
 8008b06:	2304      	movs	r3, #4
 8008b08:	75fb      	strb	r3, [r7, #23]
 8008b0a:	e028      	b.n	8008b5e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6a1b      	ldr	r3, [r3, #32]
 8008b10:	330b      	adds	r3, #11
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b18:	b2da      	uxtb	r2, r3
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6a1b      	ldr	r3, [r3, #32]
 8008b22:	330b      	adds	r3, #11
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	f003 0308 	and.w	r3, r3, #8
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d10a      	bne.n	8008b44 <dir_find+0x86>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6a18      	ldr	r0, [r3, #32]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	3324      	adds	r3, #36	; 0x24
 8008b36:	220b      	movs	r2, #11
 8008b38:	4619      	mov	r1, r3
 8008b3a:	f7ff f807 	bl	8007b4c <mem_cmp>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d00b      	beq.n	8008b5c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008b44:	2100      	movs	r1, #0
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f7ff fe5d 	bl	8008806 <dir_next>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008b50:	7dfb      	ldrb	r3, [r7, #23]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d0c5      	beq.n	8008ae2 <dir_find+0x24>
 8008b56:	e002      	b.n	8008b5e <dir_find+0xa0>
		if (res != FR_OK) break;
 8008b58:	bf00      	nop
 8008b5a:	e000      	b.n	8008b5e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008b5c:	bf00      	nop

	return res;
 8008b5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3718      	adds	r7, #24
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008b76:	2101      	movs	r1, #1
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f7ff ff1a 	bl	80089b2 <dir_alloc>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008b82:	7bfb      	ldrb	r3, [r7, #15]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d11c      	bne.n	8008bc2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	69db      	ldr	r3, [r3, #28]
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	68b8      	ldr	r0, [r7, #8]
 8008b90:	f7ff f9ce 	bl	8007f30 <move_window>
 8008b94:	4603      	mov	r3, r0
 8008b96:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008b98:	7bfb      	ldrb	r3, [r7, #15]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d111      	bne.n	8008bc2 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6a1b      	ldr	r3, [r3, #32]
 8008ba2:	2220      	movs	r2, #32
 8008ba4:	2100      	movs	r1, #0
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f7fe ffb5 	bl	8007b16 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6a18      	ldr	r0, [r3, #32]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	3324      	adds	r3, #36	; 0x24
 8008bb4:	220b      	movs	r2, #11
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	f7fe ff8c 	bl	8007ad4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3710      	adds	r7, #16
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b088      	sub	sp, #32
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	60fb      	str	r3, [r7, #12]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	3324      	adds	r3, #36	; 0x24
 8008be0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008be2:	220b      	movs	r2, #11
 8008be4:	2120      	movs	r1, #32
 8008be6:	68b8      	ldr	r0, [r7, #8]
 8008be8:	f7fe ff95 	bl	8007b16 <mem_set>
	si = i = 0; ni = 8;
 8008bec:	2300      	movs	r3, #0
 8008bee:	613b      	str	r3, [r7, #16]
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	61fb      	str	r3, [r7, #28]
 8008bf4:	2308      	movs	r3, #8
 8008bf6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008bf8:	69fb      	ldr	r3, [r7, #28]
 8008bfa:	1c5a      	adds	r2, r3, #1
 8008bfc:	61fa      	str	r2, [r7, #28]
 8008bfe:	68fa      	ldr	r2, [r7, #12]
 8008c00:	4413      	add	r3, r2
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008c06:	7efb      	ldrb	r3, [r7, #27]
 8008c08:	2b20      	cmp	r3, #32
 8008c0a:	d94e      	bls.n	8008caa <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008c0c:	7efb      	ldrb	r3, [r7, #27]
 8008c0e:	2b2f      	cmp	r3, #47	; 0x2f
 8008c10:	d006      	beq.n	8008c20 <create_name+0x54>
 8008c12:	7efb      	ldrb	r3, [r7, #27]
 8008c14:	2b5c      	cmp	r3, #92	; 0x5c
 8008c16:	d110      	bne.n	8008c3a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008c18:	e002      	b.n	8008c20 <create_name+0x54>
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	61fb      	str	r3, [r7, #28]
 8008c20:	68fa      	ldr	r2, [r7, #12]
 8008c22:	69fb      	ldr	r3, [r7, #28]
 8008c24:	4413      	add	r3, r2
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	2b2f      	cmp	r3, #47	; 0x2f
 8008c2a:	d0f6      	beq.n	8008c1a <create_name+0x4e>
 8008c2c:	68fa      	ldr	r2, [r7, #12]
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	4413      	add	r3, r2
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	2b5c      	cmp	r3, #92	; 0x5c
 8008c36:	d0f0      	beq.n	8008c1a <create_name+0x4e>
			break;
 8008c38:	e038      	b.n	8008cac <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008c3a:	7efb      	ldrb	r3, [r7, #27]
 8008c3c:	2b2e      	cmp	r3, #46	; 0x2e
 8008c3e:	d003      	beq.n	8008c48 <create_name+0x7c>
 8008c40:	693a      	ldr	r2, [r7, #16]
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d30c      	bcc.n	8008c62 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	2b0b      	cmp	r3, #11
 8008c4c:	d002      	beq.n	8008c54 <create_name+0x88>
 8008c4e:	7efb      	ldrb	r3, [r7, #27]
 8008c50:	2b2e      	cmp	r3, #46	; 0x2e
 8008c52:	d001      	beq.n	8008c58 <create_name+0x8c>
 8008c54:	2306      	movs	r3, #6
 8008c56:	e044      	b.n	8008ce2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008c58:	2308      	movs	r3, #8
 8008c5a:	613b      	str	r3, [r7, #16]
 8008c5c:	230b      	movs	r3, #11
 8008c5e:	617b      	str	r3, [r7, #20]
			continue;
 8008c60:	e022      	b.n	8008ca8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008c62:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	da04      	bge.n	8008c74 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008c6a:	7efb      	ldrb	r3, [r7, #27]
 8008c6c:	3b80      	subs	r3, #128	; 0x80
 8008c6e:	4a1f      	ldr	r2, [pc, #124]	; (8008cec <create_name+0x120>)
 8008c70:	5cd3      	ldrb	r3, [r2, r3]
 8008c72:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008c74:	7efb      	ldrb	r3, [r7, #27]
 8008c76:	4619      	mov	r1, r3
 8008c78:	481d      	ldr	r0, [pc, #116]	; (8008cf0 <create_name+0x124>)
 8008c7a:	f7fe ff8e 	bl	8007b9a <chk_chr>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d001      	beq.n	8008c88 <create_name+0xbc>
 8008c84:	2306      	movs	r3, #6
 8008c86:	e02c      	b.n	8008ce2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008c88:	7efb      	ldrb	r3, [r7, #27]
 8008c8a:	2b60      	cmp	r3, #96	; 0x60
 8008c8c:	d905      	bls.n	8008c9a <create_name+0xce>
 8008c8e:	7efb      	ldrb	r3, [r7, #27]
 8008c90:	2b7a      	cmp	r3, #122	; 0x7a
 8008c92:	d802      	bhi.n	8008c9a <create_name+0xce>
 8008c94:	7efb      	ldrb	r3, [r7, #27]
 8008c96:	3b20      	subs	r3, #32
 8008c98:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	1c5a      	adds	r2, r3, #1
 8008c9e:	613a      	str	r2, [r7, #16]
 8008ca0:	68ba      	ldr	r2, [r7, #8]
 8008ca2:	4413      	add	r3, r2
 8008ca4:	7efa      	ldrb	r2, [r7, #27]
 8008ca6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008ca8:	e7a6      	b.n	8008bf8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008caa:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008cac:	68fa      	ldr	r2, [r7, #12]
 8008cae:	69fb      	ldr	r3, [r7, #28]
 8008cb0:	441a      	add	r2, r3
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d101      	bne.n	8008cc0 <create_name+0xf4>
 8008cbc:	2306      	movs	r3, #6
 8008cbe:	e010      	b.n	8008ce2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	2be5      	cmp	r3, #229	; 0xe5
 8008cc6:	d102      	bne.n	8008cce <create_name+0x102>
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	2205      	movs	r2, #5
 8008ccc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008cce:	7efb      	ldrb	r3, [r7, #27]
 8008cd0:	2b20      	cmp	r3, #32
 8008cd2:	d801      	bhi.n	8008cd8 <create_name+0x10c>
 8008cd4:	2204      	movs	r2, #4
 8008cd6:	e000      	b.n	8008cda <create_name+0x10e>
 8008cd8:	2200      	movs	r2, #0
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	330b      	adds	r3, #11
 8008cde:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008ce0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3720      	adds	r7, #32
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	0801b7dc 	.word	0x0801b7dc
 8008cf0:	08018630 	.word	0x08018630

08008cf4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b086      	sub	sp, #24
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008d08:	e002      	b.n	8008d10 <follow_path+0x1c>
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	603b      	str	r3, [r7, #0]
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	2b2f      	cmp	r3, #47	; 0x2f
 8008d16:	d0f8      	beq.n	8008d0a <follow_path+0x16>
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	2b5c      	cmp	r3, #92	; 0x5c
 8008d1e:	d0f4      	beq.n	8008d0a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	2200      	movs	r2, #0
 8008d24:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	781b      	ldrb	r3, [r3, #0]
 8008d2a:	2b1f      	cmp	r3, #31
 8008d2c:	d80a      	bhi.n	8008d44 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2280      	movs	r2, #128	; 0x80
 8008d32:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008d36:	2100      	movs	r1, #0
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f7ff fcdb 	bl	80086f4 <dir_sdi>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	75fb      	strb	r3, [r7, #23]
 8008d42:	e048      	b.n	8008dd6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008d44:	463b      	mov	r3, r7
 8008d46:	4619      	mov	r1, r3
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f7ff ff3f 	bl	8008bcc <create_name>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008d52:	7dfb      	ldrb	r3, [r7, #23]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d139      	bne.n	8008dcc <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f7ff feb0 	bl	8008abe <dir_find>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008d68:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008d6a:	7dfb      	ldrb	r3, [r7, #23]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d00a      	beq.n	8008d86 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008d70:	7dfb      	ldrb	r3, [r7, #23]
 8008d72:	2b04      	cmp	r3, #4
 8008d74:	d12c      	bne.n	8008dd0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008d76:	7afb      	ldrb	r3, [r7, #11]
 8008d78:	f003 0304 	and.w	r3, r3, #4
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d127      	bne.n	8008dd0 <follow_path+0xdc>
 8008d80:	2305      	movs	r3, #5
 8008d82:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008d84:	e024      	b.n	8008dd0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008d86:	7afb      	ldrb	r3, [r7, #11]
 8008d88:	f003 0304 	and.w	r3, r3, #4
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d121      	bne.n	8008dd4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	799b      	ldrb	r3, [r3, #6]
 8008d94:	f003 0310 	and.w	r3, r3, #16
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d102      	bne.n	8008da2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008d9c:	2305      	movs	r3, #5
 8008d9e:	75fb      	strb	r3, [r7, #23]
 8008da0:	e019      	b.n	8008dd6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	695b      	ldr	r3, [r3, #20]
 8008dac:	68fa      	ldr	r2, [r7, #12]
 8008dae:	8992      	ldrh	r2, [r2, #12]
 8008db0:	fbb3 f0f2 	udiv	r0, r3, r2
 8008db4:	fb02 f200 	mul.w	r2, r2, r0
 8008db8:	1a9b      	subs	r3, r3, r2
 8008dba:	440b      	add	r3, r1
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	68f8      	ldr	r0, [r7, #12]
 8008dc0:	f7ff fe3e 	bl	8008a40 <ld_clust>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008dca:	e7bb      	b.n	8008d44 <follow_path+0x50>
			if (res != FR_OK) break;
 8008dcc:	bf00      	nop
 8008dce:	e002      	b.n	8008dd6 <follow_path+0xe2>
				break;
 8008dd0:	bf00      	nop
 8008dd2:	e000      	b.n	8008dd6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008dd4:	bf00      	nop
			}
		}
	}

	return res;
 8008dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3718      	adds	r7, #24
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b087      	sub	sp, #28
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008de8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008dec:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d031      	beq.n	8008e5a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	617b      	str	r3, [r7, #20]
 8008dfc:	e002      	b.n	8008e04 <get_ldnumber+0x24>
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	3301      	adds	r3, #1
 8008e02:	617b      	str	r3, [r7, #20]
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	2b20      	cmp	r3, #32
 8008e0a:	d903      	bls.n	8008e14 <get_ldnumber+0x34>
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	2b3a      	cmp	r3, #58	; 0x3a
 8008e12:	d1f4      	bne.n	8008dfe <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	2b3a      	cmp	r3, #58	; 0x3a
 8008e1a:	d11c      	bne.n	8008e56 <get_ldnumber+0x76>
			tp = *path;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	1c5a      	adds	r2, r3, #1
 8008e26:	60fa      	str	r2, [r7, #12]
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	3b30      	subs	r3, #48	; 0x30
 8008e2c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	2b09      	cmp	r3, #9
 8008e32:	d80e      	bhi.n	8008e52 <get_ldnumber+0x72>
 8008e34:	68fa      	ldr	r2, [r7, #12]
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d10a      	bne.n	8008e52 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d107      	bne.n	8008e52 <get_ldnumber+0x72>
					vol = (int)i;
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	3301      	adds	r3, #1
 8008e4a:	617b      	str	r3, [r7, #20]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	697a      	ldr	r2, [r7, #20]
 8008e50:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	e002      	b.n	8008e5c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008e56:	2300      	movs	r3, #0
 8008e58:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008e5a:	693b      	ldr	r3, [r7, #16]
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	371c      	adds	r7, #28
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr

08008e68 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2200      	movs	r2, #0
 8008e76:	70da      	strb	r2, [r3, #3]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e7e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008e80:	6839      	ldr	r1, [r7, #0]
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f7ff f854 	bl	8007f30 <move_window>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d001      	beq.n	8008e92 <check_fs+0x2a>
 8008e8e:	2304      	movs	r3, #4
 8008e90:	e038      	b.n	8008f04 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	3334      	adds	r3, #52	; 0x34
 8008e96:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f7fe fd98 	bl	80079d0 <ld_word>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d001      	beq.n	8008eb0 <check_fs+0x48>
 8008eac:	2303      	movs	r3, #3
 8008eae:	e029      	b.n	8008f04 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008eb6:	2be9      	cmp	r3, #233	; 0xe9
 8008eb8:	d009      	beq.n	8008ece <check_fs+0x66>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008ec0:	2beb      	cmp	r3, #235	; 0xeb
 8008ec2:	d11e      	bne.n	8008f02 <check_fs+0x9a>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008eca:	2b90      	cmp	r3, #144	; 0x90
 8008ecc:	d119      	bne.n	8008f02 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	3334      	adds	r3, #52	; 0x34
 8008ed2:	3336      	adds	r3, #54	; 0x36
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7fe fd93 	bl	8007a00 <ld_dword>
 8008eda:	4603      	mov	r3, r0
 8008edc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008ee0:	4a0a      	ldr	r2, [pc, #40]	; (8008f0c <check_fs+0xa4>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d101      	bne.n	8008eea <check_fs+0x82>
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	e00c      	b.n	8008f04 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	3334      	adds	r3, #52	; 0x34
 8008eee:	3352      	adds	r3, #82	; 0x52
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f7fe fd85 	bl	8007a00 <ld_dword>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	4a05      	ldr	r2, [pc, #20]	; (8008f10 <check_fs+0xa8>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d101      	bne.n	8008f02 <check_fs+0x9a>
 8008efe:	2300      	movs	r3, #0
 8008f00:	e000      	b.n	8008f04 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008f02:	2302      	movs	r3, #2
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3708      	adds	r7, #8
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	00544146 	.word	0x00544146
 8008f10:	33544146 	.word	0x33544146

08008f14 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b096      	sub	sp, #88	; 0x58
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	60f8      	str	r0, [r7, #12]
 8008f1c:	60b9      	str	r1, [r7, #8]
 8008f1e:	4613      	mov	r3, r2
 8008f20:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	2200      	movs	r2, #0
 8008f26:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008f28:	68f8      	ldr	r0, [r7, #12]
 8008f2a:	f7ff ff59 	bl	8008de0 <get_ldnumber>
 8008f2e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	da01      	bge.n	8008f3a <find_volume+0x26>
 8008f36:	230b      	movs	r3, #11
 8008f38:	e265      	b.n	8009406 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008f3a:	4ab0      	ldr	r2, [pc, #704]	; (80091fc <find_volume+0x2e8>)
 8008f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f42:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d101      	bne.n	8008f4e <find_volume+0x3a>
 8008f4a:	230c      	movs	r3, #12
 8008f4c:	e25b      	b.n	8009406 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f52:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008f54:	79fb      	ldrb	r3, [r7, #7]
 8008f56:	f023 0301 	bic.w	r3, r3, #1
 8008f5a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f5e:	781b      	ldrb	r3, [r3, #0]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d01a      	beq.n	8008f9a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f66:	785b      	ldrb	r3, [r3, #1]
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f7fe fc93 	bl	8007894 <disk_status>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008f74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008f78:	f003 0301 	and.w	r3, r3, #1
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d10c      	bne.n	8008f9a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008f80:	79fb      	ldrb	r3, [r7, #7]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d007      	beq.n	8008f96 <find_volume+0x82>
 8008f86:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008f8a:	f003 0304 	and.w	r3, r3, #4
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d001      	beq.n	8008f96 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008f92:	230a      	movs	r3, #10
 8008f94:	e237      	b.n	8009406 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8008f96:	2300      	movs	r3, #0
 8008f98:	e235      	b.n	8009406 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fa2:	b2da      	uxtb	r2, r3
 8008fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fa6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008faa:	785b      	ldrb	r3, [r3, #1]
 8008fac:	4618      	mov	r0, r3
 8008fae:	f7fe fc8b 	bl	80078c8 <disk_initialize>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008fb8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008fbc:	f003 0301 	and.w	r3, r3, #1
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d001      	beq.n	8008fc8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008fc4:	2303      	movs	r3, #3
 8008fc6:	e21e      	b.n	8009406 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008fc8:	79fb      	ldrb	r3, [r7, #7]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d007      	beq.n	8008fde <find_volume+0xca>
 8008fce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008fd2:	f003 0304 	and.w	r3, r3, #4
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d001      	beq.n	8008fde <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008fda:	230a      	movs	r3, #10
 8008fdc:	e213      	b.n	8009406 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe0:	7858      	ldrb	r0, [r3, #1]
 8008fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe4:	330c      	adds	r3, #12
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	2102      	movs	r1, #2
 8008fea:	f7fe fcd3 	bl	8007994 <disk_ioctl>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d001      	beq.n	8008ff8 <find_volume+0xe4>
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	e206      	b.n	8009406 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ffa:	899b      	ldrh	r3, [r3, #12]
 8008ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009000:	d80d      	bhi.n	800901e <find_volume+0x10a>
 8009002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009004:	899b      	ldrh	r3, [r3, #12]
 8009006:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800900a:	d308      	bcc.n	800901e <find_volume+0x10a>
 800900c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800900e:	899b      	ldrh	r3, [r3, #12]
 8009010:	461a      	mov	r2, r3
 8009012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009014:	899b      	ldrh	r3, [r3, #12]
 8009016:	3b01      	subs	r3, #1
 8009018:	4013      	ands	r3, r2
 800901a:	2b00      	cmp	r3, #0
 800901c:	d001      	beq.n	8009022 <find_volume+0x10e>
 800901e:	2301      	movs	r3, #1
 8009020:	e1f1      	b.n	8009406 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009022:	2300      	movs	r3, #0
 8009024:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009026:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009028:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800902a:	f7ff ff1d 	bl	8008e68 <check_fs>
 800902e:	4603      	mov	r3, r0
 8009030:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009034:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009038:	2b02      	cmp	r3, #2
 800903a:	d14b      	bne.n	80090d4 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800903c:	2300      	movs	r3, #0
 800903e:	643b      	str	r3, [r7, #64]	; 0x40
 8009040:	e01f      	b.n	8009082 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009044:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009048:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800904a:	011b      	lsls	r3, r3, #4
 800904c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009050:	4413      	add	r3, r2
 8009052:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009056:	3304      	adds	r3, #4
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d006      	beq.n	800906c <find_volume+0x158>
 800905e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009060:	3308      	adds	r3, #8
 8009062:	4618      	mov	r0, r3
 8009064:	f7fe fccc 	bl	8007a00 <ld_dword>
 8009068:	4602      	mov	r2, r0
 800906a:	e000      	b.n	800906e <find_volume+0x15a>
 800906c:	2200      	movs	r2, #0
 800906e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8009076:	440b      	add	r3, r1
 8009078:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800907c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800907e:	3301      	adds	r3, #1
 8009080:	643b      	str	r3, [r7, #64]	; 0x40
 8009082:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009084:	2b03      	cmp	r3, #3
 8009086:	d9dc      	bls.n	8009042 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009088:	2300      	movs	r3, #0
 800908a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800908c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800908e:	2b00      	cmp	r3, #0
 8009090:	d002      	beq.n	8009098 <find_volume+0x184>
 8009092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009094:	3b01      	subs	r3, #1
 8009096:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800909a:	009b      	lsls	r3, r3, #2
 800909c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80090a0:	4413      	add	r3, r2
 80090a2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80090a6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80090a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d005      	beq.n	80090ba <find_volume+0x1a6>
 80090ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80090b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80090b2:	f7ff fed9 	bl	8008e68 <check_fs>
 80090b6:	4603      	mov	r3, r0
 80090b8:	e000      	b.n	80090bc <find_volume+0x1a8>
 80090ba:	2303      	movs	r3, #3
 80090bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80090c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d905      	bls.n	80090d4 <find_volume+0x1c0>
 80090c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090ca:	3301      	adds	r3, #1
 80090cc:	643b      	str	r3, [r7, #64]	; 0x40
 80090ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090d0:	2b03      	cmp	r3, #3
 80090d2:	d9e1      	bls.n	8009098 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80090d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80090d8:	2b04      	cmp	r3, #4
 80090da:	d101      	bne.n	80090e0 <find_volume+0x1cc>
 80090dc:	2301      	movs	r3, #1
 80090de:	e192      	b.n	8009406 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80090e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d901      	bls.n	80090ec <find_volume+0x1d8>
 80090e8:	230d      	movs	r3, #13
 80090ea:	e18c      	b.n	8009406 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80090ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ee:	3334      	adds	r3, #52	; 0x34
 80090f0:	330b      	adds	r3, #11
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7fe fc6c 	bl	80079d0 <ld_word>
 80090f8:	4603      	mov	r3, r0
 80090fa:	461a      	mov	r2, r3
 80090fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090fe:	899b      	ldrh	r3, [r3, #12]
 8009100:	429a      	cmp	r2, r3
 8009102:	d001      	beq.n	8009108 <find_volume+0x1f4>
 8009104:	230d      	movs	r3, #13
 8009106:	e17e      	b.n	8009406 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800910a:	3334      	adds	r3, #52	; 0x34
 800910c:	3316      	adds	r3, #22
 800910e:	4618      	mov	r0, r3
 8009110:	f7fe fc5e 	bl	80079d0 <ld_word>
 8009114:	4603      	mov	r3, r0
 8009116:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800911a:	2b00      	cmp	r3, #0
 800911c:	d106      	bne.n	800912c <find_volume+0x218>
 800911e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009120:	3334      	adds	r3, #52	; 0x34
 8009122:	3324      	adds	r3, #36	; 0x24
 8009124:	4618      	mov	r0, r3
 8009126:	f7fe fc6b 	bl	8007a00 <ld_dword>
 800912a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800912c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800912e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009130:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009134:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800913a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800913c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800913e:	789b      	ldrb	r3, [r3, #2]
 8009140:	2b01      	cmp	r3, #1
 8009142:	d005      	beq.n	8009150 <find_volume+0x23c>
 8009144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009146:	789b      	ldrb	r3, [r3, #2]
 8009148:	2b02      	cmp	r3, #2
 800914a:	d001      	beq.n	8009150 <find_volume+0x23c>
 800914c:	230d      	movs	r3, #13
 800914e:	e15a      	b.n	8009406 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009152:	789b      	ldrb	r3, [r3, #2]
 8009154:	461a      	mov	r2, r3
 8009156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009158:	fb02 f303 	mul.w	r3, r2, r3
 800915c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800915e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009160:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009164:	b29a      	uxth	r2, r3
 8009166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009168:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800916a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800916c:	895b      	ldrh	r3, [r3, #10]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d008      	beq.n	8009184 <find_volume+0x270>
 8009172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009174:	895b      	ldrh	r3, [r3, #10]
 8009176:	461a      	mov	r2, r3
 8009178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800917a:	895b      	ldrh	r3, [r3, #10]
 800917c:	3b01      	subs	r3, #1
 800917e:	4013      	ands	r3, r2
 8009180:	2b00      	cmp	r3, #0
 8009182:	d001      	beq.n	8009188 <find_volume+0x274>
 8009184:	230d      	movs	r3, #13
 8009186:	e13e      	b.n	8009406 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800918a:	3334      	adds	r3, #52	; 0x34
 800918c:	3311      	adds	r3, #17
 800918e:	4618      	mov	r0, r3
 8009190:	f7fe fc1e 	bl	80079d0 <ld_word>
 8009194:	4603      	mov	r3, r0
 8009196:	461a      	mov	r2, r3
 8009198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800919a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800919c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800919e:	891b      	ldrh	r3, [r3, #8]
 80091a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091a2:	8992      	ldrh	r2, [r2, #12]
 80091a4:	0952      	lsrs	r2, r2, #5
 80091a6:	b292      	uxth	r2, r2
 80091a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80091ac:	fb02 f201 	mul.w	r2, r2, r1
 80091b0:	1a9b      	subs	r3, r3, r2
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d001      	beq.n	80091bc <find_volume+0x2a8>
 80091b8:	230d      	movs	r3, #13
 80091ba:	e124      	b.n	8009406 <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80091bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091be:	3334      	adds	r3, #52	; 0x34
 80091c0:	3313      	adds	r3, #19
 80091c2:	4618      	mov	r0, r3
 80091c4:	f7fe fc04 	bl	80079d0 <ld_word>
 80091c8:	4603      	mov	r3, r0
 80091ca:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80091cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d106      	bne.n	80091e0 <find_volume+0x2cc>
 80091d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d4:	3334      	adds	r3, #52	; 0x34
 80091d6:	3320      	adds	r3, #32
 80091d8:	4618      	mov	r0, r3
 80091da:	f7fe fc11 	bl	8007a00 <ld_dword>
 80091de:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80091e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e2:	3334      	adds	r3, #52	; 0x34
 80091e4:	330e      	adds	r3, #14
 80091e6:	4618      	mov	r0, r3
 80091e8:	f7fe fbf2 	bl	80079d0 <ld_word>
 80091ec:	4603      	mov	r3, r0
 80091ee:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80091f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d104      	bne.n	8009200 <find_volume+0x2ec>
 80091f6:	230d      	movs	r3, #13
 80091f8:	e105      	b.n	8009406 <find_volume+0x4f2>
 80091fa:	bf00      	nop
 80091fc:	200010c8 	.word	0x200010c8

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009200:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009202:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009204:	4413      	add	r3, r2
 8009206:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009208:	8911      	ldrh	r1, [r2, #8]
 800920a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800920c:	8992      	ldrh	r2, [r2, #12]
 800920e:	0952      	lsrs	r2, r2, #5
 8009210:	b292      	uxth	r2, r2
 8009212:	fbb1 f2f2 	udiv	r2, r1, r2
 8009216:	b292      	uxth	r2, r2
 8009218:	4413      	add	r3, r2
 800921a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800921c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800921e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009220:	429a      	cmp	r2, r3
 8009222:	d201      	bcs.n	8009228 <find_volume+0x314>
 8009224:	230d      	movs	r3, #13
 8009226:	e0ee      	b.n	8009406 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009228:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800922a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800922c:	1ad3      	subs	r3, r2, r3
 800922e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009230:	8952      	ldrh	r2, [r2, #10]
 8009232:	fbb3 f3f2 	udiv	r3, r3, r2
 8009236:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923a:	2b00      	cmp	r3, #0
 800923c:	d101      	bne.n	8009242 <find_volume+0x32e>
 800923e:	230d      	movs	r3, #13
 8009240:	e0e1      	b.n	8009406 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8009242:	2303      	movs	r3, #3
 8009244:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800924e:	4293      	cmp	r3, r2
 8009250:	d802      	bhi.n	8009258 <find_volume+0x344>
 8009252:	2302      	movs	r3, #2
 8009254:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800925a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800925e:	4293      	cmp	r3, r2
 8009260:	d802      	bhi.n	8009268 <find_volume+0x354>
 8009262:	2301      	movs	r3, #1
 8009264:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926a:	1c9a      	adds	r2, r3, #2
 800926c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800926e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8009270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009272:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009274:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009276:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009278:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800927a:	441a      	add	r2, r3
 800927c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800927e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8009280:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009284:	441a      	add	r2, r3
 8009286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009288:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800928a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800928e:	2b03      	cmp	r3, #3
 8009290:	d11e      	bne.n	80092d0 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009294:	3334      	adds	r3, #52	; 0x34
 8009296:	332a      	adds	r3, #42	; 0x2a
 8009298:	4618      	mov	r0, r3
 800929a:	f7fe fb99 	bl	80079d0 <ld_word>
 800929e:	4603      	mov	r3, r0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d001      	beq.n	80092a8 <find_volume+0x394>
 80092a4:	230d      	movs	r3, #13
 80092a6:	e0ae      	b.n	8009406 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80092a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092aa:	891b      	ldrh	r3, [r3, #8]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d001      	beq.n	80092b4 <find_volume+0x3a0>
 80092b0:	230d      	movs	r3, #13
 80092b2:	e0a8      	b.n	8009406 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80092b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b6:	3334      	adds	r3, #52	; 0x34
 80092b8:	332c      	adds	r3, #44	; 0x2c
 80092ba:	4618      	mov	r0, r3
 80092bc:	f7fe fba0 	bl	8007a00 <ld_dword>
 80092c0:	4602      	mov	r2, r0
 80092c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c4:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80092c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c8:	699b      	ldr	r3, [r3, #24]
 80092ca:	009b      	lsls	r3, r3, #2
 80092cc:	647b      	str	r3, [r7, #68]	; 0x44
 80092ce:	e01f      	b.n	8009310 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80092d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d2:	891b      	ldrh	r3, [r3, #8]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d101      	bne.n	80092dc <find_volume+0x3c8>
 80092d8:	230d      	movs	r3, #13
 80092da:	e094      	b.n	8009406 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80092dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80092e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092e2:	441a      	add	r2, r3
 80092e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80092e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80092ec:	2b02      	cmp	r3, #2
 80092ee:	d103      	bne.n	80092f8 <find_volume+0x3e4>
 80092f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f2:	699b      	ldr	r3, [r3, #24]
 80092f4:	005b      	lsls	r3, r3, #1
 80092f6:	e00a      	b.n	800930e <find_volume+0x3fa>
 80092f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092fa:	699a      	ldr	r2, [r3, #24]
 80092fc:	4613      	mov	r3, r2
 80092fe:	005b      	lsls	r3, r3, #1
 8009300:	4413      	add	r3, r2
 8009302:	085a      	lsrs	r2, r3, #1
 8009304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009306:	699b      	ldr	r3, [r3, #24]
 8009308:	f003 0301 	and.w	r3, r3, #1
 800930c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800930e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009312:	69da      	ldr	r2, [r3, #28]
 8009314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009316:	899b      	ldrh	r3, [r3, #12]
 8009318:	4619      	mov	r1, r3
 800931a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800931c:	440b      	add	r3, r1
 800931e:	3b01      	subs	r3, #1
 8009320:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009322:	8989      	ldrh	r1, [r1, #12]
 8009324:	fbb3 f3f1 	udiv	r3, r3, r1
 8009328:	429a      	cmp	r2, r3
 800932a:	d201      	bcs.n	8009330 <find_volume+0x41c>
 800932c:	230d      	movs	r3, #13
 800932e:	e06a      	b.n	8009406 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009332:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009336:	615a      	str	r2, [r3, #20]
 8009338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933a:	695a      	ldr	r2, [r3, #20]
 800933c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8009340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009342:	2280      	movs	r2, #128	; 0x80
 8009344:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009346:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800934a:	2b03      	cmp	r3, #3
 800934c:	d149      	bne.n	80093e2 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800934e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009350:	3334      	adds	r3, #52	; 0x34
 8009352:	3330      	adds	r3, #48	; 0x30
 8009354:	4618      	mov	r0, r3
 8009356:	f7fe fb3b 	bl	80079d0 <ld_word>
 800935a:	4603      	mov	r3, r0
 800935c:	2b01      	cmp	r3, #1
 800935e:	d140      	bne.n	80093e2 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009360:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009362:	3301      	adds	r3, #1
 8009364:	4619      	mov	r1, r3
 8009366:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009368:	f7fe fde2 	bl	8007f30 <move_window>
 800936c:	4603      	mov	r3, r0
 800936e:	2b00      	cmp	r3, #0
 8009370:	d137      	bne.n	80093e2 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8009372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009374:	2200      	movs	r2, #0
 8009376:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800937a:	3334      	adds	r3, #52	; 0x34
 800937c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009380:	4618      	mov	r0, r3
 8009382:	f7fe fb25 	bl	80079d0 <ld_word>
 8009386:	4603      	mov	r3, r0
 8009388:	461a      	mov	r2, r3
 800938a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800938e:	429a      	cmp	r2, r3
 8009390:	d127      	bne.n	80093e2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009394:	3334      	adds	r3, #52	; 0x34
 8009396:	4618      	mov	r0, r3
 8009398:	f7fe fb32 	bl	8007a00 <ld_dword>
 800939c:	4603      	mov	r3, r0
 800939e:	4a1c      	ldr	r2, [pc, #112]	; (8009410 <find_volume+0x4fc>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d11e      	bne.n	80093e2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80093a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a6:	3334      	adds	r3, #52	; 0x34
 80093a8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80093ac:	4618      	mov	r0, r3
 80093ae:	f7fe fb27 	bl	8007a00 <ld_dword>
 80093b2:	4603      	mov	r3, r0
 80093b4:	4a17      	ldr	r2, [pc, #92]	; (8009414 <find_volume+0x500>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d113      	bne.n	80093e2 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80093ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093bc:	3334      	adds	r3, #52	; 0x34
 80093be:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7fe fb1c 	bl	8007a00 <ld_dword>
 80093c8:	4602      	mov	r2, r0
 80093ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093cc:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80093ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d0:	3334      	adds	r3, #52	; 0x34
 80093d2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80093d6:	4618      	mov	r0, r3
 80093d8:	f7fe fb12 	bl	8007a00 <ld_dword>
 80093dc:	4602      	mov	r2, r0
 80093de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e0:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80093e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80093e8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80093ea:	4b0b      	ldr	r3, [pc, #44]	; (8009418 <find_volume+0x504>)
 80093ec:	881b      	ldrh	r3, [r3, #0]
 80093ee:	3301      	adds	r3, #1
 80093f0:	b29a      	uxth	r2, r3
 80093f2:	4b09      	ldr	r3, [pc, #36]	; (8009418 <find_volume+0x504>)
 80093f4:	801a      	strh	r2, [r3, #0]
 80093f6:	4b08      	ldr	r3, [pc, #32]	; (8009418 <find_volume+0x504>)
 80093f8:	881a      	ldrh	r2, [r3, #0]
 80093fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093fc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80093fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009400:	f7fe fd2e 	bl	8007e60 <clear_lock>
#endif
	return FR_OK;
 8009404:	2300      	movs	r3, #0
}
 8009406:	4618      	mov	r0, r3
 8009408:	3758      	adds	r7, #88	; 0x58
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	41615252 	.word	0x41615252
 8009414:	61417272 	.word	0x61417272
 8009418:	200010cc 	.word	0x200010cc

0800941c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009426:	2309      	movs	r3, #9
 8009428:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d01c      	beq.n	800946a <validate+0x4e>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d018      	beq.n	800946a <validate+0x4e>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d013      	beq.n	800946a <validate+0x4e>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	889a      	ldrh	r2, [r3, #4]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	88db      	ldrh	r3, [r3, #6]
 800944c:	429a      	cmp	r2, r3
 800944e:	d10c      	bne.n	800946a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	785b      	ldrb	r3, [r3, #1]
 8009456:	4618      	mov	r0, r3
 8009458:	f7fe fa1c 	bl	8007894 <disk_status>
 800945c:	4603      	mov	r3, r0
 800945e:	f003 0301 	and.w	r3, r3, #1
 8009462:	2b00      	cmp	r3, #0
 8009464:	d101      	bne.n	800946a <validate+0x4e>
			res = FR_OK;
 8009466:	2300      	movs	r3, #0
 8009468:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800946a:	7bfb      	ldrb	r3, [r7, #15]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d102      	bne.n	8009476 <validate+0x5a>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	e000      	b.n	8009478 <validate+0x5c>
 8009476:	2300      	movs	r3, #0
 8009478:	683a      	ldr	r2, [r7, #0]
 800947a:	6013      	str	r3, [r2, #0]
	return res;
 800947c:	7bfb      	ldrb	r3, [r7, #15]
}
 800947e:	4618      	mov	r0, r3
 8009480:	3710      	adds	r7, #16
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
	...

08009488 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b088      	sub	sp, #32
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	4613      	mov	r3, r2
 8009494:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800949a:	f107 0310 	add.w	r3, r7, #16
 800949e:	4618      	mov	r0, r3
 80094a0:	f7ff fc9e 	bl	8008de0 <get_ldnumber>
 80094a4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80094a6:	69fb      	ldr	r3, [r7, #28]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	da01      	bge.n	80094b0 <f_mount+0x28>
 80094ac:	230b      	movs	r3, #11
 80094ae:	e02b      	b.n	8009508 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80094b0:	4a17      	ldr	r2, [pc, #92]	; (8009510 <f_mount+0x88>)
 80094b2:	69fb      	ldr	r3, [r7, #28]
 80094b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094b8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80094ba:	69bb      	ldr	r3, [r7, #24]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d005      	beq.n	80094cc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80094c0:	69b8      	ldr	r0, [r7, #24]
 80094c2:	f7fe fccd 	bl	8007e60 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80094c6:	69bb      	ldr	r3, [r7, #24]
 80094c8:	2200      	movs	r2, #0
 80094ca:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d002      	beq.n	80094d8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2200      	movs	r2, #0
 80094d6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80094d8:	68fa      	ldr	r2, [r7, #12]
 80094da:	490d      	ldr	r1, [pc, #52]	; (8009510 <f_mount+0x88>)
 80094dc:	69fb      	ldr	r3, [r7, #28]
 80094de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d002      	beq.n	80094ee <f_mount+0x66>
 80094e8:	79fb      	ldrb	r3, [r7, #7]
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d001      	beq.n	80094f2 <f_mount+0x6a>
 80094ee:	2300      	movs	r3, #0
 80094f0:	e00a      	b.n	8009508 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80094f2:	f107 010c 	add.w	r1, r7, #12
 80094f6:	f107 0308 	add.w	r3, r7, #8
 80094fa:	2200      	movs	r2, #0
 80094fc:	4618      	mov	r0, r3
 80094fe:	f7ff fd09 	bl	8008f14 <find_volume>
 8009502:	4603      	mov	r3, r0
 8009504:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009506:	7dfb      	ldrb	r3, [r7, #23]
}
 8009508:	4618      	mov	r0, r3
 800950a:	3720      	adds	r7, #32
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}
 8009510:	200010c8 	.word	0x200010c8

08009514 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b098      	sub	sp, #96	; 0x60
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	4613      	mov	r3, r2
 8009520:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d101      	bne.n	800952c <f_open+0x18>
 8009528:	2309      	movs	r3, #9
 800952a:	e1bb      	b.n	80098a4 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800952c:	79fb      	ldrb	r3, [r7, #7]
 800952e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009532:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009534:	79fa      	ldrb	r2, [r7, #7]
 8009536:	f107 0110 	add.w	r1, r7, #16
 800953a:	f107 0308 	add.w	r3, r7, #8
 800953e:	4618      	mov	r0, r3
 8009540:	f7ff fce8 	bl	8008f14 <find_volume>
 8009544:	4603      	mov	r3, r0
 8009546:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800954a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800954e:	2b00      	cmp	r3, #0
 8009550:	f040 819f 	bne.w	8009892 <f_open+0x37e>
		dj.obj.fs = fs;
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009558:	68ba      	ldr	r2, [r7, #8]
 800955a:	f107 0314 	add.w	r3, r7, #20
 800955e:	4611      	mov	r1, r2
 8009560:	4618      	mov	r0, r3
 8009562:	f7ff fbc7 	bl	8008cf4 <follow_path>
 8009566:	4603      	mov	r3, r0
 8009568:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800956c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009570:	2b00      	cmp	r3, #0
 8009572:	d11a      	bne.n	80095aa <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009574:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009578:	b25b      	sxtb	r3, r3
 800957a:	2b00      	cmp	r3, #0
 800957c:	da03      	bge.n	8009586 <f_open+0x72>
				res = FR_INVALID_NAME;
 800957e:	2306      	movs	r3, #6
 8009580:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009584:	e011      	b.n	80095aa <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009586:	79fb      	ldrb	r3, [r7, #7]
 8009588:	f023 0301 	bic.w	r3, r3, #1
 800958c:	2b00      	cmp	r3, #0
 800958e:	bf14      	ite	ne
 8009590:	2301      	movne	r3, #1
 8009592:	2300      	moveq	r3, #0
 8009594:	b2db      	uxtb	r3, r3
 8009596:	461a      	mov	r2, r3
 8009598:	f107 0314 	add.w	r3, r7, #20
 800959c:	4611      	mov	r1, r2
 800959e:	4618      	mov	r0, r3
 80095a0:	f7fe fb16 	bl	8007bd0 <chk_lock>
 80095a4:	4603      	mov	r3, r0
 80095a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80095aa:	79fb      	ldrb	r3, [r7, #7]
 80095ac:	f003 031c 	and.w	r3, r3, #28
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d07f      	beq.n	80096b4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80095b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d017      	beq.n	80095ec <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80095bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095c0:	2b04      	cmp	r3, #4
 80095c2:	d10e      	bne.n	80095e2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80095c4:	f7fe fb60 	bl	8007c88 <enq_lock>
 80095c8:	4603      	mov	r3, r0
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d006      	beq.n	80095dc <f_open+0xc8>
 80095ce:	f107 0314 	add.w	r3, r7, #20
 80095d2:	4618      	mov	r0, r3
 80095d4:	f7ff fac8 	bl	8008b68 <dir_register>
 80095d8:	4603      	mov	r3, r0
 80095da:	e000      	b.n	80095de <f_open+0xca>
 80095dc:	2312      	movs	r3, #18
 80095de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80095e2:	79fb      	ldrb	r3, [r7, #7]
 80095e4:	f043 0308 	orr.w	r3, r3, #8
 80095e8:	71fb      	strb	r3, [r7, #7]
 80095ea:	e010      	b.n	800960e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80095ec:	7ebb      	ldrb	r3, [r7, #26]
 80095ee:	f003 0311 	and.w	r3, r3, #17
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d003      	beq.n	80095fe <f_open+0xea>
					res = FR_DENIED;
 80095f6:	2307      	movs	r3, #7
 80095f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80095fc:	e007      	b.n	800960e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80095fe:	79fb      	ldrb	r3, [r7, #7]
 8009600:	f003 0304 	and.w	r3, r3, #4
 8009604:	2b00      	cmp	r3, #0
 8009606:	d002      	beq.n	800960e <f_open+0xfa>
 8009608:	2308      	movs	r3, #8
 800960a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800960e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009612:	2b00      	cmp	r3, #0
 8009614:	d168      	bne.n	80096e8 <f_open+0x1d4>
 8009616:	79fb      	ldrb	r3, [r7, #7]
 8009618:	f003 0308 	and.w	r3, r3, #8
 800961c:	2b00      	cmp	r3, #0
 800961e:	d063      	beq.n	80096e8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8009620:	f7fd fa50 	bl	8006ac4 <get_fattime>
 8009624:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009628:	330e      	adds	r3, #14
 800962a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800962c:	4618      	mov	r0, r3
 800962e:	f7fe fa25 	bl	8007a7c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009634:	3316      	adds	r3, #22
 8009636:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009638:	4618      	mov	r0, r3
 800963a:	f7fe fa1f 	bl	8007a7c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800963e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009640:	330b      	adds	r3, #11
 8009642:	2220      	movs	r2, #32
 8009644:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800964a:	4611      	mov	r1, r2
 800964c:	4618      	mov	r0, r3
 800964e:	f7ff f9f7 	bl	8008a40 <ld_clust>
 8009652:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009658:	2200      	movs	r2, #0
 800965a:	4618      	mov	r0, r3
 800965c:	f7ff fa0f 	bl	8008a7e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009662:	331c      	adds	r3, #28
 8009664:	2100      	movs	r1, #0
 8009666:	4618      	mov	r0, r3
 8009668:	f7fe fa08 	bl	8007a7c <st_dword>
					fs->wflag = 1;
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	2201      	movs	r2, #1
 8009670:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009674:	2b00      	cmp	r3, #0
 8009676:	d037      	beq.n	80096e8 <f_open+0x1d4>
						dw = fs->winsect;
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800967c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800967e:	f107 0314 	add.w	r3, r7, #20
 8009682:	2200      	movs	r2, #0
 8009684:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009686:	4618      	mov	r0, r3
 8009688:	f7fe feff 	bl	800848a <remove_chain>
 800968c:	4603      	mov	r3, r0
 800968e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8009692:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009696:	2b00      	cmp	r3, #0
 8009698:	d126      	bne.n	80096e8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800969e:	4618      	mov	r0, r3
 80096a0:	f7fe fc46 	bl	8007f30 <move_window>
 80096a4:	4603      	mov	r3, r0
 80096a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80096ae:	3a01      	subs	r2, #1
 80096b0:	611a      	str	r2, [r3, #16]
 80096b2:	e019      	b.n	80096e8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80096b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d115      	bne.n	80096e8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80096bc:	7ebb      	ldrb	r3, [r7, #26]
 80096be:	f003 0310 	and.w	r3, r3, #16
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d003      	beq.n	80096ce <f_open+0x1ba>
					res = FR_NO_FILE;
 80096c6:	2304      	movs	r3, #4
 80096c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80096cc:	e00c      	b.n	80096e8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80096ce:	79fb      	ldrb	r3, [r7, #7]
 80096d0:	f003 0302 	and.w	r3, r3, #2
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d007      	beq.n	80096e8 <f_open+0x1d4>
 80096d8:	7ebb      	ldrb	r3, [r7, #26]
 80096da:	f003 0301 	and.w	r3, r3, #1
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d002      	beq.n	80096e8 <f_open+0x1d4>
						res = FR_DENIED;
 80096e2:	2307      	movs	r3, #7
 80096e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80096e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d128      	bne.n	8009742 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80096f0:	79fb      	ldrb	r3, [r7, #7]
 80096f2:	f003 0308 	and.w	r3, r3, #8
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d003      	beq.n	8009702 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80096fa:	79fb      	ldrb	r3, [r7, #7]
 80096fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009700:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800970a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009710:	79fb      	ldrb	r3, [r7, #7]
 8009712:	f023 0301 	bic.w	r3, r3, #1
 8009716:	2b00      	cmp	r3, #0
 8009718:	bf14      	ite	ne
 800971a:	2301      	movne	r3, #1
 800971c:	2300      	moveq	r3, #0
 800971e:	b2db      	uxtb	r3, r3
 8009720:	461a      	mov	r2, r3
 8009722:	f107 0314 	add.w	r3, r7, #20
 8009726:	4611      	mov	r1, r2
 8009728:	4618      	mov	r0, r3
 800972a:	f7fe facf 	bl	8007ccc <inc_lock>
 800972e:	4602      	mov	r2, r0
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	691b      	ldr	r3, [r3, #16]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d102      	bne.n	8009742 <f_open+0x22e>
 800973c:	2302      	movs	r3, #2
 800973e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009742:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009746:	2b00      	cmp	r3, #0
 8009748:	f040 80a3 	bne.w	8009892 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009750:	4611      	mov	r1, r2
 8009752:	4618      	mov	r0, r3
 8009754:	f7ff f974 	bl	8008a40 <ld_clust>
 8009758:	4602      	mov	r2, r0
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800975e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009760:	331c      	adds	r3, #28
 8009762:	4618      	mov	r0, r3
 8009764:	f7fe f94c 	bl	8007a00 <ld_dword>
 8009768:	4602      	mov	r2, r0
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2200      	movs	r2, #0
 8009772:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009774:	693a      	ldr	r2, [r7, #16]
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	88da      	ldrh	r2, [r3, #6]
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	79fa      	ldrb	r2, [r7, #7]
 8009786:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2200      	movs	r2, #0
 800978c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2200      	movs	r2, #0
 8009792:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2200      	movs	r2, #0
 8009798:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	3330      	adds	r3, #48	; 0x30
 800979e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80097a2:	2100      	movs	r1, #0
 80097a4:	4618      	mov	r0, r3
 80097a6:	f7fe f9b6 	bl	8007b16 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80097aa:	79fb      	ldrb	r3, [r7, #7]
 80097ac:	f003 0320 	and.w	r3, r3, #32
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d06e      	beq.n	8009892 <f_open+0x37e>
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	68db      	ldr	r3, [r3, #12]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d06a      	beq.n	8009892 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	68da      	ldr	r2, [r3, #12]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	895b      	ldrh	r3, [r3, #10]
 80097c8:	461a      	mov	r2, r3
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	899b      	ldrh	r3, [r3, #12]
 80097ce:	fb03 f302 	mul.w	r3, r3, r2
 80097d2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	68db      	ldr	r3, [r3, #12]
 80097de:	657b      	str	r3, [r7, #84]	; 0x54
 80097e0:	e016      	b.n	8009810 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80097e6:	4618      	mov	r0, r3
 80097e8:	f7fe fc5f 	bl	80080aa <get_fat>
 80097ec:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80097ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d802      	bhi.n	80097fa <f_open+0x2e6>
 80097f4:	2302      	movs	r3, #2
 80097f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80097fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80097fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009800:	d102      	bne.n	8009808 <f_open+0x2f4>
 8009802:	2301      	movs	r3, #1
 8009804:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009808:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800980a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800980c:	1ad3      	subs	r3, r2, r3
 800980e:	657b      	str	r3, [r7, #84]	; 0x54
 8009810:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009814:	2b00      	cmp	r3, #0
 8009816:	d103      	bne.n	8009820 <f_open+0x30c>
 8009818:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800981a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800981c:	429a      	cmp	r2, r3
 800981e:	d8e0      	bhi.n	80097e2 <f_open+0x2ce>
				}
				fp->clust = clst;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009824:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009826:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800982a:	2b00      	cmp	r3, #0
 800982c:	d131      	bne.n	8009892 <f_open+0x37e>
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	899b      	ldrh	r3, [r3, #12]
 8009832:	461a      	mov	r2, r3
 8009834:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009836:	fbb3 f1f2 	udiv	r1, r3, r2
 800983a:	fb02 f201 	mul.w	r2, r2, r1
 800983e:	1a9b      	subs	r3, r3, r2
 8009840:	2b00      	cmp	r3, #0
 8009842:	d026      	beq.n	8009892 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009848:	4618      	mov	r0, r3
 800984a:	f7fe fc0f 	bl	800806c <clust2sect>
 800984e:	6478      	str	r0, [r7, #68]	; 0x44
 8009850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009852:	2b00      	cmp	r3, #0
 8009854:	d103      	bne.n	800985e <f_open+0x34a>
						res = FR_INT_ERR;
 8009856:	2302      	movs	r3, #2
 8009858:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800985c:	e019      	b.n	8009892 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	899b      	ldrh	r3, [r3, #12]
 8009862:	461a      	mov	r2, r3
 8009864:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009866:	fbb3 f2f2 	udiv	r2, r3, r2
 800986a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800986c:	441a      	add	r2, r3
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	7858      	ldrb	r0, [r3, #1]
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	6a1a      	ldr	r2, [r3, #32]
 8009880:	2301      	movs	r3, #1
 8009882:	f7fe f847 	bl	8007914 <disk_read>
 8009886:	4603      	mov	r3, r0
 8009888:	2b00      	cmp	r3, #0
 800988a:	d002      	beq.n	8009892 <f_open+0x37e>
 800988c:	2301      	movs	r3, #1
 800988e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009892:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009896:	2b00      	cmp	r3, #0
 8009898:	d002      	beq.n	80098a0 <f_open+0x38c>
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2200      	movs	r2, #0
 800989e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80098a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3760      	adds	r7, #96	; 0x60
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b08e      	sub	sp, #56	; 0x38
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	60f8      	str	r0, [r7, #12]
 80098b4:	60b9      	str	r1, [r7, #8]
 80098b6:	607a      	str	r2, [r7, #4]
 80098b8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	2200      	movs	r2, #0
 80098c2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f107 0214 	add.w	r2, r7, #20
 80098ca:	4611      	mov	r1, r2
 80098cc:	4618      	mov	r0, r3
 80098ce:	f7ff fda5 	bl	800941c <validate>
 80098d2:	4603      	mov	r3, r0
 80098d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80098d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d107      	bne.n	80098f0 <f_read+0x44>
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	7d5b      	ldrb	r3, [r3, #21]
 80098e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80098e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d002      	beq.n	80098f6 <f_read+0x4a>
 80098f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80098f4:	e135      	b.n	8009b62 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	7d1b      	ldrb	r3, [r3, #20]
 80098fa:	f003 0301 	and.w	r3, r3, #1
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d101      	bne.n	8009906 <f_read+0x5a>
 8009902:	2307      	movs	r3, #7
 8009904:	e12d      	b.n	8009b62 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	68da      	ldr	r2, [r3, #12]
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	699b      	ldr	r3, [r3, #24]
 800990e:	1ad3      	subs	r3, r2, r3
 8009910:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009912:	687a      	ldr	r2, [r7, #4]
 8009914:	6a3b      	ldr	r3, [r7, #32]
 8009916:	429a      	cmp	r2, r3
 8009918:	f240 811e 	bls.w	8009b58 <f_read+0x2ac>
 800991c:	6a3b      	ldr	r3, [r7, #32]
 800991e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009920:	e11a      	b.n	8009b58 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	699b      	ldr	r3, [r3, #24]
 8009926:	697a      	ldr	r2, [r7, #20]
 8009928:	8992      	ldrh	r2, [r2, #12]
 800992a:	fbb3 f1f2 	udiv	r1, r3, r2
 800992e:	fb02 f201 	mul.w	r2, r2, r1
 8009932:	1a9b      	subs	r3, r3, r2
 8009934:	2b00      	cmp	r3, #0
 8009936:	f040 80d5 	bne.w	8009ae4 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	699b      	ldr	r3, [r3, #24]
 800993e:	697a      	ldr	r2, [r7, #20]
 8009940:	8992      	ldrh	r2, [r2, #12]
 8009942:	fbb3 f3f2 	udiv	r3, r3, r2
 8009946:	697a      	ldr	r2, [r7, #20]
 8009948:	8952      	ldrh	r2, [r2, #10]
 800994a:	3a01      	subs	r2, #1
 800994c:	4013      	ands	r3, r2
 800994e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009950:	69fb      	ldr	r3, [r7, #28]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d12f      	bne.n	80099b6 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	699b      	ldr	r3, [r3, #24]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d103      	bne.n	8009966 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	689b      	ldr	r3, [r3, #8]
 8009962:	633b      	str	r3, [r7, #48]	; 0x30
 8009964:	e013      	b.n	800998e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800996a:	2b00      	cmp	r3, #0
 800996c:	d007      	beq.n	800997e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	699b      	ldr	r3, [r3, #24]
 8009972:	4619      	mov	r1, r3
 8009974:	68f8      	ldr	r0, [r7, #12]
 8009976:	f7fe fe85 	bl	8008684 <clmt_clust>
 800997a:	6338      	str	r0, [r7, #48]	; 0x30
 800997c:	e007      	b.n	800998e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800997e:	68fa      	ldr	r2, [r7, #12]
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	69db      	ldr	r3, [r3, #28]
 8009984:	4619      	mov	r1, r3
 8009986:	4610      	mov	r0, r2
 8009988:	f7fe fb8f 	bl	80080aa <get_fat>
 800998c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800998e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009990:	2b01      	cmp	r3, #1
 8009992:	d804      	bhi.n	800999e <f_read+0xf2>
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2202      	movs	r2, #2
 8009998:	755a      	strb	r2, [r3, #21]
 800999a:	2302      	movs	r3, #2
 800999c:	e0e1      	b.n	8009b62 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800999e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099a4:	d104      	bne.n	80099b0 <f_read+0x104>
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2201      	movs	r2, #1
 80099aa:	755a      	strb	r2, [r3, #21]
 80099ac:	2301      	movs	r3, #1
 80099ae:	e0d8      	b.n	8009b62 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099b4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80099b6:	697a      	ldr	r2, [r7, #20]
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	69db      	ldr	r3, [r3, #28]
 80099bc:	4619      	mov	r1, r3
 80099be:	4610      	mov	r0, r2
 80099c0:	f7fe fb54 	bl	800806c <clust2sect>
 80099c4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80099c6:	69bb      	ldr	r3, [r7, #24]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d104      	bne.n	80099d6 <f_read+0x12a>
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2202      	movs	r2, #2
 80099d0:	755a      	strb	r2, [r3, #21]
 80099d2:	2302      	movs	r3, #2
 80099d4:	e0c5      	b.n	8009b62 <f_read+0x2b6>
			sect += csect;
 80099d6:	69ba      	ldr	r2, [r7, #24]
 80099d8:	69fb      	ldr	r3, [r7, #28]
 80099da:	4413      	add	r3, r2
 80099dc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	899b      	ldrh	r3, [r3, #12]
 80099e2:	461a      	mov	r2, r3
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80099ea:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80099ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d041      	beq.n	8009a76 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80099f2:	69fa      	ldr	r2, [r7, #28]
 80099f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f6:	4413      	add	r3, r2
 80099f8:	697a      	ldr	r2, [r7, #20]
 80099fa:	8952      	ldrh	r2, [r2, #10]
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d905      	bls.n	8009a0c <f_read+0x160>
					cc = fs->csize - csect;
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	895b      	ldrh	r3, [r3, #10]
 8009a04:	461a      	mov	r2, r3
 8009a06:	69fb      	ldr	r3, [r7, #28]
 8009a08:	1ad3      	subs	r3, r2, r3
 8009a0a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	7858      	ldrb	r0, [r3, #1]
 8009a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a12:	69ba      	ldr	r2, [r7, #24]
 8009a14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a16:	f7fd ff7d 	bl	8007914 <disk_read>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d004      	beq.n	8009a2a <f_read+0x17e>
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2201      	movs	r2, #1
 8009a24:	755a      	strb	r2, [r3, #21]
 8009a26:	2301      	movs	r3, #1
 8009a28:	e09b      	b.n	8009b62 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	7d1b      	ldrb	r3, [r3, #20]
 8009a2e:	b25b      	sxtb	r3, r3
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	da18      	bge.n	8009a66 <f_read+0x1ba>
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	6a1a      	ldr	r2, [r3, #32]
 8009a38:	69bb      	ldr	r3, [r7, #24]
 8009a3a:	1ad3      	subs	r3, r2, r3
 8009a3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d911      	bls.n	8009a66 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	6a1a      	ldr	r2, [r3, #32]
 8009a46:	69bb      	ldr	r3, [r7, #24]
 8009a48:	1ad3      	subs	r3, r2, r3
 8009a4a:	697a      	ldr	r2, [r7, #20]
 8009a4c:	8992      	ldrh	r2, [r2, #12]
 8009a4e:	fb02 f303 	mul.w	r3, r2, r3
 8009a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a54:	18d0      	adds	r0, r2, r3
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	899b      	ldrh	r3, [r3, #12]
 8009a60:	461a      	mov	r2, r3
 8009a62:	f7fe f837 	bl	8007ad4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	899b      	ldrh	r3, [r3, #12]
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a6e:	fb02 f303 	mul.w	r3, r2, r3
 8009a72:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8009a74:	e05c      	b.n	8009b30 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	6a1b      	ldr	r3, [r3, #32]
 8009a7a:	69ba      	ldr	r2, [r7, #24]
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	d02e      	beq.n	8009ade <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	7d1b      	ldrb	r3, [r3, #20]
 8009a84:	b25b      	sxtb	r3, r3
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	da18      	bge.n	8009abc <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	7858      	ldrb	r0, [r3, #1]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	6a1a      	ldr	r2, [r3, #32]
 8009a98:	2301      	movs	r3, #1
 8009a9a:	f7fd ff5b 	bl	8007954 <disk_write>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d004      	beq.n	8009aae <f_read+0x202>
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	755a      	strb	r2, [r3, #21]
 8009aaa:	2301      	movs	r3, #1
 8009aac:	e059      	b.n	8009b62 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	7d1b      	ldrb	r3, [r3, #20]
 8009ab2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ab6:	b2da      	uxtb	r2, r3
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	7858      	ldrb	r0, [r3, #1]
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	69ba      	ldr	r2, [r7, #24]
 8009aca:	f7fd ff23 	bl	8007914 <disk_read>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d004      	beq.n	8009ade <f_read+0x232>
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	755a      	strb	r2, [r3, #21]
 8009ada:	2301      	movs	r3, #1
 8009adc:	e041      	b.n	8009b62 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	69ba      	ldr	r2, [r7, #24]
 8009ae2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	899b      	ldrh	r3, [r3, #12]
 8009ae8:	4618      	mov	r0, r3
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	699b      	ldr	r3, [r3, #24]
 8009aee:	697a      	ldr	r2, [r7, #20]
 8009af0:	8992      	ldrh	r2, [r2, #12]
 8009af2:	fbb3 f1f2 	udiv	r1, r3, r2
 8009af6:	fb02 f201 	mul.w	r2, r2, r1
 8009afa:	1a9b      	subs	r3, r3, r2
 8009afc:	1ac3      	subs	r3, r0, r3
 8009afe:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009b00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d901      	bls.n	8009b0c <f_read+0x260>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	699b      	ldr	r3, [r3, #24]
 8009b16:	697a      	ldr	r2, [r7, #20]
 8009b18:	8992      	ldrh	r2, [r2, #12]
 8009b1a:	fbb3 f0f2 	udiv	r0, r3, r2
 8009b1e:	fb02 f200 	mul.w	r2, r2, r0
 8009b22:	1a9b      	subs	r3, r3, r2
 8009b24:	440b      	add	r3, r1
 8009b26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b28:	4619      	mov	r1, r3
 8009b2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009b2c:	f7fd ffd2 	bl	8007ad4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b34:	4413      	add	r3, r2
 8009b36:	627b      	str	r3, [r7, #36]	; 0x24
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	699a      	ldr	r2, [r3, #24]
 8009b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b3e:	441a      	add	r2, r3
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	619a      	str	r2, [r3, #24]
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	681a      	ldr	r2, [r3, #0]
 8009b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b4a:	441a      	add	r2, r3
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	601a      	str	r2, [r3, #0]
 8009b50:	687a      	ldr	r2, [r7, #4]
 8009b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b54:	1ad3      	subs	r3, r2, r3
 8009b56:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	f47f aee1 	bne.w	8009922 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009b60:	2300      	movs	r3, #0
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3738      	adds	r7, #56	; 0x38
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}

08009b6a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009b6a:	b580      	push	{r7, lr}
 8009b6c:	b086      	sub	sp, #24
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f107 0208 	add.w	r2, r7, #8
 8009b78:	4611      	mov	r1, r2
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7ff fc4e 	bl	800941c <validate>
 8009b80:	4603      	mov	r3, r0
 8009b82:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009b84:	7dfb      	ldrb	r3, [r7, #23]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d168      	bne.n	8009c5c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	7d1b      	ldrb	r3, [r3, #20]
 8009b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d062      	beq.n	8009c5c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	7d1b      	ldrb	r3, [r3, #20]
 8009b9a:	b25b      	sxtb	r3, r3
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	da15      	bge.n	8009bcc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	7858      	ldrb	r0, [r3, #1]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6a1a      	ldr	r2, [r3, #32]
 8009bae:	2301      	movs	r3, #1
 8009bb0:	f7fd fed0 	bl	8007954 <disk_write>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d001      	beq.n	8009bbe <f_sync+0x54>
 8009bba:	2301      	movs	r3, #1
 8009bbc:	e04f      	b.n	8009c5e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	7d1b      	ldrb	r3, [r3, #20]
 8009bc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bc6:	b2da      	uxtb	r2, r3
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009bcc:	f7fc ff7a 	bl	8006ac4 <get_fattime>
 8009bd0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009bd2:	68ba      	ldr	r2, [r7, #8]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd8:	4619      	mov	r1, r3
 8009bda:	4610      	mov	r0, r2
 8009bdc:	f7fe f9a8 	bl	8007f30 <move_window>
 8009be0:	4603      	mov	r3, r0
 8009be2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009be4:	7dfb      	ldrb	r3, [r7, #23]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d138      	bne.n	8009c5c <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bee:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	330b      	adds	r3, #11
 8009bf4:	781a      	ldrb	r2, [r3, #0]
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	330b      	adds	r3, #11
 8009bfa:	f042 0220 	orr.w	r2, r2, #32
 8009bfe:	b2d2      	uxtb	r2, r2
 8009c00:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6818      	ldr	r0, [r3, #0]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	689b      	ldr	r3, [r3, #8]
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	68f9      	ldr	r1, [r7, #12]
 8009c0e:	f7fe ff36 	bl	8008a7e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f103 021c 	add.w	r2, r3, #28
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	68db      	ldr	r3, [r3, #12]
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	4610      	mov	r0, r2
 8009c20:	f7fd ff2c 	bl	8007a7c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	3316      	adds	r3, #22
 8009c28:	6939      	ldr	r1, [r7, #16]
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f7fd ff26 	bl	8007a7c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	3312      	adds	r3, #18
 8009c34:	2100      	movs	r1, #0
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7fd ff05 	bl	8007a46 <st_word>
					fs->wflag = 1;
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	2201      	movs	r2, #1
 8009c40:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	4618      	mov	r0, r3
 8009c46:	f7fe f9a1 	bl	8007f8c <sync_fs>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	7d1b      	ldrb	r3, [r3, #20]
 8009c52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c56:	b2da      	uxtb	r2, r3
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009c5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3718      	adds	r7, #24
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}

08009c66 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009c66:	b580      	push	{r7, lr}
 8009c68:	b084      	sub	sp, #16
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f7ff ff7b 	bl	8009b6a <f_sync>
 8009c74:	4603      	mov	r3, r0
 8009c76:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009c78:	7bfb      	ldrb	r3, [r7, #15]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d118      	bne.n	8009cb0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f107 0208 	add.w	r2, r7, #8
 8009c84:	4611      	mov	r1, r2
 8009c86:	4618      	mov	r0, r3
 8009c88:	f7ff fbc8 	bl	800941c <validate>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009c90:	7bfb      	ldrb	r3, [r7, #15]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d10c      	bne.n	8009cb0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	691b      	ldr	r3, [r3, #16]
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7fe f8a4 	bl	8007de8 <dec_lock>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009ca4:	7bfb      	ldrb	r3, [r7, #15]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d102      	bne.n	8009cb0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2200      	movs	r2, #0
 8009cae:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3710      	adds	r7, #16
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}
	...

08009cbc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b087      	sub	sp, #28
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	60f8      	str	r0, [r7, #12]
 8009cc4:	60b9      	str	r1, [r7, #8]
 8009cc6:	4613      	mov	r3, r2
 8009cc8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009cd2:	4b1f      	ldr	r3, [pc, #124]	; (8009d50 <FATFS_LinkDriverEx+0x94>)
 8009cd4:	7a5b      	ldrb	r3, [r3, #9]
 8009cd6:	b2db      	uxtb	r3, r3
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d131      	bne.n	8009d40 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009cdc:	4b1c      	ldr	r3, [pc, #112]	; (8009d50 <FATFS_LinkDriverEx+0x94>)
 8009cde:	7a5b      	ldrb	r3, [r3, #9]
 8009ce0:	b2db      	uxtb	r3, r3
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	4b1a      	ldr	r3, [pc, #104]	; (8009d50 <FATFS_LinkDriverEx+0x94>)
 8009ce6:	2100      	movs	r1, #0
 8009ce8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009cea:	4b19      	ldr	r3, [pc, #100]	; (8009d50 <FATFS_LinkDriverEx+0x94>)
 8009cec:	7a5b      	ldrb	r3, [r3, #9]
 8009cee:	b2db      	uxtb	r3, r3
 8009cf0:	4a17      	ldr	r2, [pc, #92]	; (8009d50 <FATFS_LinkDriverEx+0x94>)
 8009cf2:	009b      	lsls	r3, r3, #2
 8009cf4:	4413      	add	r3, r2
 8009cf6:	68fa      	ldr	r2, [r7, #12]
 8009cf8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009cfa:	4b15      	ldr	r3, [pc, #84]	; (8009d50 <FATFS_LinkDriverEx+0x94>)
 8009cfc:	7a5b      	ldrb	r3, [r3, #9]
 8009cfe:	b2db      	uxtb	r3, r3
 8009d00:	461a      	mov	r2, r3
 8009d02:	4b13      	ldr	r3, [pc, #76]	; (8009d50 <FATFS_LinkDriverEx+0x94>)
 8009d04:	4413      	add	r3, r2
 8009d06:	79fa      	ldrb	r2, [r7, #7]
 8009d08:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009d0a:	4b11      	ldr	r3, [pc, #68]	; (8009d50 <FATFS_LinkDriverEx+0x94>)
 8009d0c:	7a5b      	ldrb	r3, [r3, #9]
 8009d0e:	b2db      	uxtb	r3, r3
 8009d10:	1c5a      	adds	r2, r3, #1
 8009d12:	b2d1      	uxtb	r1, r2
 8009d14:	4a0e      	ldr	r2, [pc, #56]	; (8009d50 <FATFS_LinkDriverEx+0x94>)
 8009d16:	7251      	strb	r1, [r2, #9]
 8009d18:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009d1a:	7dbb      	ldrb	r3, [r7, #22]
 8009d1c:	3330      	adds	r3, #48	; 0x30
 8009d1e:	b2da      	uxtb	r2, r3
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	3301      	adds	r3, #1
 8009d28:	223a      	movs	r2, #58	; 0x3a
 8009d2a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	3302      	adds	r3, #2
 8009d30:	222f      	movs	r2, #47	; 0x2f
 8009d32:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	3303      	adds	r3, #3
 8009d38:	2200      	movs	r2, #0
 8009d3a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	371c      	adds	r7, #28
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr
 8009d4e:	bf00      	nop
 8009d50:	200010f0 	.word	0x200010f0

08009d54 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b082      	sub	sp, #8
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009d5e:	2200      	movs	r2, #0
 8009d60:	6839      	ldr	r1, [r7, #0]
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f7ff ffaa 	bl	8009cbc <FATFS_LinkDriverEx>
 8009d68:	4603      	mov	r3, r0
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3708      	adds	r7, #8
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}
	...

08009d74 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b084      	sub	sp, #16
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d002      	beq.n	8009d8a <fs_open+0x16>
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d102      	bne.n	8009d90 <fs_open+0x1c>
    return ERR_ARG;
 8009d8a:	f06f 030f 	mvn.w	r3, #15
 8009d8e:	e028      	b.n	8009de2 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8009d90:	4b16      	ldr	r3, [pc, #88]	; (8009dec <fs_open+0x78>)
 8009d92:	60fb      	str	r3, [r7, #12]
 8009d94:	e020      	b.n	8009dd8 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	4619      	mov	r1, r3
 8009d9c:	6838      	ldr	r0, [r7, #0]
 8009d9e:	f7f6 fa17 	bl	80001d0 <strcmp>
 8009da2:	4603      	mov	r3, r0
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d114      	bne.n	8009dd2 <fs_open+0x5e>
      file->data = (const char *)f->data;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	689a      	ldr	r2, [r3, #8]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	68da      	ldr	r2, [r3, #12]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	68da      	ldr	r2, [r3, #12]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	7c1a      	ldrb	r2, [r3, #16]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	e007      	b.n	8009de2 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	60fb      	str	r3, [r7, #12]
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d1db      	bne.n	8009d96 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8009dde:	f06f 0305 	mvn.w	r3, #5
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3710      	adds	r7, #16
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}
 8009dea:	bf00      	nop
 8009dec:	0801f6bc 	.word	0x0801f6bc

08009df0 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8009df8:	bf00      	nop
 8009dfa:	370c      	adds	r7, #12
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr

08009e04 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	685a      	ldr	r2, [r3, #4]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	689b      	ldr	r3, [r3, #8]
 8009e14:	1ad3      	subs	r3, r2, r3
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	370c      	adds	r7, #12
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr

08009e22 <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state *
http_ssi_state_alloc(void)
{
 8009e22:	b580      	push	{r7, lr}
 8009e24:	b082      	sub	sp, #8
 8009e26:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 8009e28:	f241 709c 	movw	r0, #6044	; 0x179c
 8009e2c:	f002 fb4c 	bl	800c4c8 <mem_malloc>
 8009e30:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d005      	beq.n	8009e44 <http_ssi_state_alloc+0x22>
    memset(ret, 0, sizeof(struct http_ssi_state));
 8009e38:	f241 729c 	movw	r2, #6044	; 0x179c
 8009e3c:	2100      	movs	r1, #0
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f00c fc14 	bl	801666c <memset>
  }
  return ret;
 8009e44:	687b      	ldr	r3, [r7, #4]
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3708      	adds	r7, #8
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}

08009e4e <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 8009e4e:	b580      	push	{r7, lr}
 8009e50:	b082      	sub	sp, #8
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d002      	beq.n	8009e62 <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f002 f9cd 	bl	800c1fc <mem_free>
  }
}
 8009e62:	bf00      	nop
 8009e64:	3708      	adds	r7, #8
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}

08009e6a <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8009e6a:	b580      	push	{r7, lr}
 8009e6c:	b082      	sub	sp, #8
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8009e72:	22d8      	movs	r2, #216	; 0xd8
 8009e74:	2100      	movs	r1, #0
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f00c fbf8 	bl	801666c <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2205      	movs	r2, #5
 8009e80:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8009e84:	bf00      	nop
 8009e86:	3708      	adds	r7, #8
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8009e92:	20d8      	movs	r0, #216	; 0xd8
 8009e94:	f002 fb18 	bl	800c4c8 <mem_malloc>
 8009e98:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d002      	beq.n	8009ea6 <http_state_alloc+0x1a>
    http_state_init(ret);
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f7ff ffe2 	bl	8009e6a <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8009ea6:	687b      	ldr	r3, [r7, #4]
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3708      	adds	r7, #8
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b082      	sub	sp, #8
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	695b      	ldr	r3, [r3, #20]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d007      	beq.n	8009ed0 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	695b      	ldr	r3, [r3, #20]
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f7ff ff93 	bl	8009df0 <fs_close>
    hs->handle = NULL;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d007      	beq.n	8009ee8 <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009edc:	4618      	mov	r0, r3
 8009ede:	f7ff ffb6 	bl	8009e4e <http_ssi_state_free>
    hs->ssi = NULL;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6a1b      	ldr	r3, [r3, #32]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d007      	beq.n	8009f00 <http_state_eof+0x50>
    pbuf_free(hs->req);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6a1b      	ldr	r3, [r3, #32]
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f003 fab3 	bl	800d460 <pbuf_free>
    hs->req = NULL;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2200      	movs	r2, #0
 8009efe:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8009f00:	bf00      	nop
 8009f02:	3708      	adds	r7, #8
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b082      	sub	sp, #8
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d005      	beq.n	8009f22 <http_state_free+0x1a>
    http_state_eof(hs);
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f7ff ffca 	bl	8009eb0 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f002 f96d 	bl	800c1fc <mem_free>
  }
}
 8009f22:	bf00      	nop
 8009f24:	3708      	adds	r7, #8
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
	...

08009f2c <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b086      	sub	sp, #24
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	60f8      	str	r0, [r7, #12]
 8009f34:	60b9      	str	r1, [r7, #8]
 8009f36:	607a      	str	r2, [r7, #4]
 8009f38:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d106      	bne.n	8009f4e <http_write+0x22>
 8009f40:	4b2c      	ldr	r3, [pc, #176]	; (8009ff4 <http_write+0xc8>)
 8009f42:	f240 2219 	movw	r2, #537	; 0x219
 8009f46:	492c      	ldr	r1, [pc, #176]	; (8009ff8 <http_write+0xcc>)
 8009f48:	482c      	ldr	r0, [pc, #176]	; (8009ffc <http_write+0xd0>)
 8009f4a:	f00c fb97 	bl	801667c <iprintf>
  len = *length;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	881b      	ldrh	r3, [r3, #0]
 8009f52:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8009f54:	8afb      	ldrh	r3, [r7, #22]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d101      	bne.n	8009f5e <http_write+0x32>
    return ERR_OK;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	e045      	b.n	8009fea <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009f64:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8009f66:	8aba      	ldrh	r2, [r7, #20]
 8009f68:	8afb      	ldrh	r3, [r7, #22]
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d201      	bcs.n	8009f72 <http_write+0x46>
    len = max_len;
 8009f6e:	8abb      	ldrh	r3, [r7, #20]
 8009f70:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009f76:	005b      	lsls	r3, r3, #1
 8009f78:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 8009f7a:	8afa      	ldrh	r2, [r7, #22]
 8009f7c:	8abb      	ldrh	r3, [r7, #20]
 8009f7e:	429a      	cmp	r2, r3
 8009f80:	d901      	bls.n	8009f86 <http_write+0x5a>
    len = max_len;
 8009f82:	8abb      	ldrh	r3, [r7, #20]
 8009f84:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8009f86:	78fb      	ldrb	r3, [r7, #3]
 8009f88:	8afa      	ldrh	r2, [r7, #22]
 8009f8a:	68b9      	ldr	r1, [r7, #8]
 8009f8c:	68f8      	ldr	r0, [r7, #12]
 8009f8e:	f007 ffeb 	bl	8011f68 <tcp_write>
 8009f92:	4603      	mov	r3, r0
 8009f94:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8009f96:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009f9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f9e:	d10f      	bne.n	8009fc0 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d004      	beq.n	8009fb4 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8009fb0:	2b08      	cmp	r3, #8
 8009fb2:	d902      	bls.n	8009fba <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	82fb      	strh	r3, [r7, #22]
 8009fb8:	e002      	b.n	8009fc0 <http_write+0x94>
      } else {
        len /= 2;
 8009fba:	8afb      	ldrh	r3, [r7, #22]
 8009fbc:	085b      	lsrs	r3, r3, #1
 8009fbe:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8009fc0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009fc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fc8:	d102      	bne.n	8009fd0 <http_write+0xa4>
 8009fca:	8afb      	ldrh	r3, [r7, #22]
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	d8da      	bhi.n	8009f86 <http_write+0x5a>

  if (err == ERR_OK) {
 8009fd0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d103      	bne.n	8009fe0 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	8afa      	ldrh	r2, [r7, #22]
 8009fdc:	801a      	strh	r2, [r3, #0]
 8009fde:	e002      	b.n	8009fe6 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8009fe6:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3718      	adds	r7, #24
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}
 8009ff2:	bf00      	nop
 8009ff4:	08018b44 	.word	0x08018b44
 8009ff8:	08018b7c 	.word	0x08018b7c
 8009ffc:	08018b8c 	.word	0x08018b8c

0800a000 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b086      	sub	sp, #24
 800a004:	af00      	add	r7, sp, #0
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	60b9      	str	r1, [r7, #8]
 800a00a:	4613      	mov	r3, r2
 800a00c:	71fb      	strb	r3, [r7, #7]
  err_t err;
  LWIP_DEBUGF(HTTPD_DEBUG, ("Closing connection %p\n", (void *)pcb));

#if LWIP_HTTPD_SUPPORT_POST
  if (hs != NULL) {
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d00c      	beq.n	800a02e <http_close_or_abort_conn+0x2e>
    if ((hs->post_content_len_left != 0)
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d007      	beq.n	800a02e <http_close_or_abort_conn+0x2e>
#if LWIP_HTTPD_POST_MANUAL_WND
        || ((hs->no_auto_wnd != 0) && (hs->unrecved_bytes != 0))
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
       ) {
      /* make sure the post code knows that the connection is closed */
      http_uri_buf[0] = 0;
 800a01e:	4b1f      	ldr	r3, [pc, #124]	; (800a09c <http_close_or_abort_conn+0x9c>)
 800a020:	2200      	movs	r2, #0
 800a022:	701a      	strb	r2, [r3, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 800a024:	223f      	movs	r2, #63	; 0x3f
 800a026:	491d      	ldr	r1, [pc, #116]	; (800a09c <http_close_or_abort_conn+0x9c>)
 800a028:	68b8      	ldr	r0, [r7, #8]
 800a02a:	f7f6 fddf 	bl	8000bec <httpd_post_finished>
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800a02e:	2100      	movs	r1, #0
 800a030:	68f8      	ldr	r0, [r7, #12]
 800a032:	f005 f85b 	bl	800f0ec <tcp_arg>
  altcp_recv(pcb, NULL);
 800a036:	2100      	movs	r1, #0
 800a038:	68f8      	ldr	r0, [r7, #12]
 800a03a:	f005 f869 	bl	800f110 <tcp_recv>
  altcp_err(pcb, NULL);
 800a03e:	2100      	movs	r1, #0
 800a040:	68f8      	ldr	r0, [r7, #12]
 800a042:	f005 f8a9 	bl	800f198 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800a046:	2200      	movs	r2, #0
 800a048:	2100      	movs	r1, #0
 800a04a:	68f8      	ldr	r0, [r7, #12]
 800a04c:	f005 f8de 	bl	800f20c <tcp_poll>
  altcp_sent(pcb, NULL);
 800a050:	2100      	movs	r1, #0
 800a052:	68f8      	ldr	r0, [r7, #12]
 800a054:	f005 f87e 	bl	800f154 <tcp_sent>
  if (hs != NULL) {
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d002      	beq.n	800a064 <http_close_or_abort_conn+0x64>
    http_state_free(hs);
 800a05e:	68b8      	ldr	r0, [r7, #8]
 800a060:	f7ff ff52 	bl	8009f08 <http_state_free>
  }

  if (abort_conn) {
 800a064:	79fb      	ldrb	r3, [r7, #7]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d004      	beq.n	800a074 <http_close_or_abort_conn+0x74>
    altcp_abort(pcb);
 800a06a:	68f8      	ldr	r0, [r7, #12]
 800a06c:	f003 ff80 	bl	800df70 <tcp_abort>
    return ERR_OK;
 800a070:	2300      	movs	r3, #0
 800a072:	e00f      	b.n	800a094 <http_close_or_abort_conn+0x94>
  }
  err = altcp_close(pcb);
 800a074:	68f8      	ldr	r0, [r7, #12]
 800a076:	f003 fe91 	bl	800dd9c <tcp_close>
 800a07a:	4603      	mov	r3, r0
 800a07c:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800a07e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d004      	beq.n	800a090 <http_close_or_abort_conn+0x90>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800a086:	2204      	movs	r2, #4
 800a088:	4905      	ldr	r1, [pc, #20]	; (800a0a0 <http_close_or_abort_conn+0xa0>)
 800a08a:	68f8      	ldr	r0, [r7, #12]
 800a08c:	f005 f8be 	bl	800f20c <tcp_poll>
  }
  return err;
 800a090:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a094:	4618      	mov	r0, r3
 800a096:	3718      	adds	r7, #24
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}
 800a09c:	200014fc 	.word	0x200014fc
 800a0a0:	0800b953 	.word	0x0800b953

0800a0a4 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	6839      	ldr	r1, [r7, #0]
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f7ff ffa4 	bl	800a000 <http_close_or_abort_conn>
 800a0b8:	4603      	mov	r3, r0
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3708      	adds	r7, #8
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}

0800a0c2 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b082      	sub	sp, #8
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
 800a0ca:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800a0cc:	6839      	ldr	r1, [r7, #0]
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f7ff ffe8 	bl	800a0a4 <http_close_conn>
  }
}
 800a0d4:	bf00      	nop
 800a0d6:	3708      	adds	r7, #8
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b086      	sub	sp, #24
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d003      	beq.n	800a0f4 <extract_uri_parameters+0x18>
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	781b      	ldrb	r3, [r3, #0]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d101      	bne.n	800a0f8 <extract_uri_parameters+0x1c>
    return (0);
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	e04b      	b.n	800a190 <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	613b      	str	r3, [r7, #16]
 800a100:	e03f      	b.n	800a182 <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	693a      	ldr	r2, [r7, #16]
 800a106:	320c      	adds	r2, #12
 800a108:	6979      	ldr	r1, [r7, #20]
 800a10a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 800a112:	2126      	movs	r1, #38	; 0x26
 800a114:	6978      	ldr	r0, [r7, #20]
 800a116:	f00c fbe2 	bl	80168de <strchr>
 800a11a:	6178      	str	r0, [r7, #20]
    if (pair) {
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d006      	beq.n	800a130 <extract_uri_parameters+0x54>
      *pair = '\0';
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	2200      	movs	r2, #0
 800a126:	701a      	strb	r2, [r3, #0]
      pair++;
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	3301      	adds	r3, #1
 800a12c:	617b      	str	r3, [r7, #20]
 800a12e:	e00c      	b.n	800a14a <extract_uri_parameters+0x6e>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 800a130:	2120      	movs	r1, #32
 800a132:	68f8      	ldr	r0, [r7, #12]
 800a134:	f00c fbd3 	bl	80168de <strchr>
 800a138:	6178      	str	r0, [r7, #20]
      if (pair) {
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d002      	beq.n	800a146 <extract_uri_parameters+0x6a>
        *pair = '\0';
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	2200      	movs	r2, #0
 800a144:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 800a146:	2300      	movs	r3, #0
 800a148:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 800a14a:	213d      	movs	r1, #61	; 0x3d
 800a14c:	68f8      	ldr	r0, [r7, #12]
 800a14e:	f00c fbc6 	bl	80168de <strchr>
 800a152:	60f8      	str	r0, [r7, #12]
    if (equals) {
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d00a      	beq.n	800a170 <extract_uri_parameters+0x94>
      *equals = '\0';
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	2200      	movs	r2, #0
 800a15e:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	1c59      	adds	r1, r3, #1
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	693a      	ldr	r2, [r7, #16]
 800a168:	321c      	adds	r2, #28
 800a16a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a16e:	e005      	b.n	800a17c <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	693a      	ldr	r2, [r7, #16]
 800a174:	321c      	adds	r2, #28
 800a176:	2100      	movs	r1, #0
 800a178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	3301      	adds	r3, #1
 800a180:	613b      	str	r3, [r7, #16]
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	2b0f      	cmp	r3, #15
 800a186:	dc02      	bgt.n	800a18e <extract_uri_parameters+0xb2>
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d1b9      	bne.n	800a102 <extract_uri_parameters+0x26>
    }
  }

  return loop;
 800a18e:	693b      	ldr	r3, [r7, #16]
}
 800a190:	4618      	mov	r0, r3
 800a192:	3718      	adds	r7, #24
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}

0800a198 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 800a198:	b590      	push	{r4, r7, lr}
 800a19a:	b089      	sub	sp, #36	; 0x24
 800a19c:	af02      	add	r7, sp, #8
 800a19e:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d106      	bne.n	800a1b4 <get_tag_insert+0x1c>
 800a1a6:	4b5b      	ldr	r3, [pc, #364]	; (800a314 <get_tag_insert+0x17c>)
 800a1a8:	f44f 7241 	mov.w	r2, #772	; 0x304
 800a1ac:	495a      	ldr	r1, [pc, #360]	; (800a318 <get_tag_insert+0x180>)
 800a1ae:	485b      	ldr	r0, [pc, #364]	; (800a31c <get_tag_insert+0x184>)
 800a1b0:	f00c fa64 	bl	801667c <iprintf>
  ssi = hs->ssi;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b8:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d106      	bne.n	800a1ce <get_tag_insert+0x36>
 800a1c0:	4b54      	ldr	r3, [pc, #336]	; (800a314 <get_tag_insert+0x17c>)
 800a1c2:	f240 3206 	movw	r2, #774	; 0x306
 800a1c6:	4956      	ldr	r1, [pc, #344]	; (800a320 <get_tag_insert+0x188>)
 800a1c8:	4854      	ldr	r0, [pc, #336]	; (800a31c <get_tag_insert+0x184>)
 800a1ca:	f00c fa57 	bl	801667c <iprintf>
#if LWIP_HTTPD_SSI_MULTIPART
  current_tag_part = ssi->tag_part;
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	8a9b      	ldrh	r3, [r3, #20]
 800a1d2:	81fb      	strh	r3, [r7, #14]
  ssi->tag_part = HTTPD_LAST_TAG_PART;
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a1da:	829a      	strh	r2, [r3, #20]
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if (httpd_ssi_handler
 800a1dc:	4b51      	ldr	r3, [pc, #324]	; (800a324 <get_tag_insert+0x18c>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d034      	beq.n	800a24e <get_tag_insert+0xb6>
#if !LWIP_HTTPD_SSI_RAW
      && httpd_tags && httpd_num_tags
 800a1e4:	4b50      	ldr	r3, [pc, #320]	; (800a328 <get_tag_insert+0x190>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d030      	beq.n	800a24e <get_tag_insert+0xb6>
 800a1ec:	4b4f      	ldr	r3, [pc, #316]	; (800a32c <get_tag_insert+0x194>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d02c      	beq.n	800a24e <get_tag_insert+0xb6>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for (tag = 0; tag < httpd_num_tags; tag++) {
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	617b      	str	r3, [r7, #20]
 800a1f8:	e024      	b.n	800a244 <get_tag_insert+0xac>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	f103 0018 	add.w	r0, r3, #24
 800a200:	4b49      	ldr	r3, [pc, #292]	; (800a328 <get_tag_insert+0x190>)
 800a202:	681a      	ldr	r2, [r3, #0]
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	009b      	lsls	r3, r3, #2
 800a208:	4413      	add	r3, r2
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4619      	mov	r1, r3
 800a20e:	f7f5 ffdf 	bl	80001d0 <strcmp>
 800a212:	4603      	mov	r3, r0
 800a214:	2b00      	cmp	r3, #0
 800a216:	d112      	bne.n	800a23e <get_tag_insert+0xa6>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 800a218:	4b42      	ldr	r3, [pc, #264]	; (800a324 <get_tag_insert+0x18c>)
 800a21a:	681c      	ldr	r4, [r3, #0]
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	f103 0129 	add.w	r1, r3, #41	; 0x29
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	3314      	adds	r3, #20
 800a226:	89fa      	ldrh	r2, [r7, #14]
 800a228:	9300      	str	r3, [sp, #0]
 800a22a:	4613      	mov	r3, r2
 800a22c:	f241 7270 	movw	r2, #6000	; 0x1770
 800a230:	6978      	ldr	r0, [r7, #20]
 800a232:	47a0      	blx	r4
 800a234:	4603      	mov	r3, r0
 800a236:	461a      	mov	r2, r3
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	825a      	strh	r2, [r3, #18]
                                             );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 800a23c:	e066      	b.n	800a30c <get_tag_insert+0x174>
    for (tag = 0; tag < httpd_num_tags; tag++) {
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	3301      	adds	r3, #1
 800a242:	617b      	str	r3, [r7, #20]
 800a244:	4b39      	ldr	r3, [pc, #228]	; (800a32c <get_tag_insert+0x194>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	697a      	ldr	r2, [r7, #20]
 800a24a:	429a      	cmp	r2, r3
 800a24c:	dbd5      	blt.n	800a1fa <get_tag_insert+0x62>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	3318      	adds	r3, #24
 800a252:	4618      	mov	r0, r3
 800a254:	f7f5 ffc6 	bl	80001e4 <strlen>
 800a258:	4603      	mov	r3, r0
 800a25a:	f241 7256 	movw	r2, #5974	; 0x1756
 800a25e:	4293      	cmp	r3, r2
 800a260:	d81b      	bhi.n	800a29a <get_tag_insert+0x102>
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	3318      	adds	r3, #24
 800a266:	4618      	mov	r0, r3
 800a268:	f7f5 ffbc 	bl	80001e4 <strlen>
 800a26c:	4603      	mov	r3, r0
 800a26e:	2b11      	cmp	r3, #17
 800a270:	d813      	bhi.n	800a29a <get_tag_insert+0x102>
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	3318      	adds	r3, #24
 800a276:	4618      	mov	r0, r3
 800a278:	f7f5 ffb4 	bl	80001e4 <strlen>
 800a27c:	4603      	mov	r3, r0
 800a27e:	f241 7256 	movw	r2, #5974	; 0x1756
 800a282:	4293      	cmp	r3, r2
 800a284:	d806      	bhi.n	800a294 <get_tag_insert+0xfc>
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	3318      	adds	r3, #24
 800a28a:	4618      	mov	r0, r3
 800a28c:	f7f5 ffaa 	bl	80001e4 <strlen>
 800a290:	4603      	mov	r3, r0
 800a292:	e003      	b.n	800a29c <get_tag_insert+0x104>
 800a294:	f241 7357 	movw	r3, #5975	; 0x1757
 800a298:	e000      	b.n	800a29c <get_tag_insert+0x104>
 800a29a:	2311      	movs	r3, #17
 800a29c:	60bb      	str	r3, [r7, #8]
                 LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	3329      	adds	r3, #41	; 0x29
 800a2a2:	2212      	movs	r2, #18
 800a2a4:	4922      	ldr	r1, [pc, #136]	; (800a330 <get_tag_insert+0x198>)
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f00c f9b8 	bl	801661c <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	f103 003b 	add.w	r0, r3, #59	; 0x3b
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	3318      	adds	r3, #24
 800a2b6:	68ba      	ldr	r2, [r7, #8]
 800a2b8:	4619      	mov	r1, r3
 800a2ba:	f00c f9af 	bl	801661c <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	3312      	adds	r3, #18
 800a2c2:	3328      	adds	r3, #40	; 0x28
 800a2c4:	693a      	ldr	r2, [r7, #16]
 800a2c6:	4413      	add	r3, r2
 800a2c8:	3301      	adds	r3, #1
 800a2ca:	2207      	movs	r2, #7
 800a2cc:	4919      	ldr	r1, [pc, #100]	; (800a334 <get_tag_insert+0x19c>)
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f00c f9a4 	bl	801661c <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	3319      	adds	r3, #25
 800a2d8:	693a      	ldr	r2, [r7, #16]
 800a2da:	4413      	add	r3, r2
 800a2dc:	2200      	movs	r2, #0
 800a2de:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  len = strlen(ssi->tag_insert);
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	3329      	adds	r3, #41	; 0x29
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f7f5 ff7c 	bl	80001e4 <strlen>
 800a2ec:	60b8      	str	r0, [r7, #8]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2f4:	d306      	bcc.n	800a304 <get_tag_insert+0x16c>
 800a2f6:	4b07      	ldr	r3, [pc, #28]	; (800a314 <get_tag_insert+0x17c>)
 800a2f8:	f240 323f 	movw	r2, #831	; 0x33f
 800a2fc:	490e      	ldr	r1, [pc, #56]	; (800a338 <get_tag_insert+0x1a0>)
 800a2fe:	4807      	ldr	r0, [pc, #28]	; (800a31c <get_tag_insert+0x184>)
 800a300:	f00c f9bc 	bl	801667c <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	b29a      	uxth	r2, r3
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	825a      	strh	r2, [r3, #18]
}
 800a30c:	371c      	adds	r7, #28
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd90      	pop	{r4, r7, pc}
 800a312:	bf00      	nop
 800a314:	08018b44 	.word	0x08018b44
 800a318:	08018bb4 	.word	0x08018bb4
 800a31c:	08018b8c 	.word	0x08018b8c
 800a320:	08018bc0 	.word	0x08018bc0
 800a324:	2000153c 	.word	0x2000153c
 800a328:	20001544 	.word	0x20001544
 800a32c:	20001540 	.word	0x20001540
 800a330:	08018bcc 	.word	0x08018bcc
 800a334:	08018be0 	.word	0x08018be0
 800a338:	08018be8 	.word	0x08018be8

0800a33c <get_http_headers>:
 * Generate the relevant HTTP headers for the given filename and write
 * them into the supplied buffer.
 */
static void
get_http_headers(struct http_state *hs, const char *uri)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b086      	sub	sp, #24
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]
  char *ext;
  char *vars;

  /* In all cases, the second header we send is the server identification
     so set it here. */
  hs->hdrs[HDR_STRINGS_IDX_SERVER_NAME] = g_psHTTPHeaderStrings[HTTP_HDR_SERVER];
 800a346:	4a55      	ldr	r2, [pc, #340]	; (800a49c <get_http_headers+0x160>)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = NULL;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2200      	movs	r2, #0
 800a352:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = NULL;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2200      	movs	r2, #0
 800a35a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

  /* Is this a normal file or the special case we use to send back the
     default "404: Page not found" response? */
  if (uri == NULL) {
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d110      	bne.n	800a386 <get_http_headers+0x4a>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 800a364:	4a4e      	ldr	r2, [pc, #312]	; (800a4a0 <get_http_headers+0x164>)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    if (hs->keepalive) {
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaderStrings[DEFAULT_404_HTML_PERSISTENT];
    } else
#endif
    {
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaderStrings[DEFAULT_404_HTML];
 800a36c:	4a4d      	ldr	r2, [pc, #308]	; (800a4a4 <get_http_headers+0x168>)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    }

    /* Set up to send the first header string. */
    hs->hdr_index = 0;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2200      	movs	r2, #0
 800a378:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
    hs->hdr_pos = 0;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2200      	movs	r2, #0
 800a380:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    return;
 800a384:	e087      	b.n	800a496 <get_http_headers+0x15a>
  }
  /* We are dealing with a particular filename. Look for one other
      special case.  We assume that any filename with "404" in it must be
      indicative of a 404 server error whereas all other files require
      the 200 OK header. */
  if (strstr(uri, "404")) {
 800a386:	4948      	ldr	r1, [pc, #288]	; (800a4a8 <get_http_headers+0x16c>)
 800a388:	6838      	ldr	r0, [r7, #0]
 800a38a:	f00c fae2 	bl	8016952 <strstr>
 800a38e:	4603      	mov	r3, r0
 800a390:	2b00      	cmp	r3, #0
 800a392:	d004      	beq.n	800a39e <get_http_headers+0x62>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 800a394:	4a42      	ldr	r2, [pc, #264]	; (800a4a0 <get_http_headers+0x164>)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800a39c:	e01b      	b.n	800a3d6 <get_http_headers+0x9a>
  } else if (strstr(uri, "400")) {
 800a39e:	4943      	ldr	r1, [pc, #268]	; (800a4ac <get_http_headers+0x170>)
 800a3a0:	6838      	ldr	r0, [r7, #0]
 800a3a2:	f00c fad6 	bl	8016952 <strstr>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d004      	beq.n	800a3b6 <get_http_headers+0x7a>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_BAD_REQUEST];
 800a3ac:	4a40      	ldr	r2, [pc, #256]	; (800a4b0 <get_http_headers+0x174>)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800a3b4:	e00f      	b.n	800a3d6 <get_http_headers+0x9a>
  } else if (strstr(uri, "501")) {
 800a3b6:	493f      	ldr	r1, [pc, #252]	; (800a4b4 <get_http_headers+0x178>)
 800a3b8:	6838      	ldr	r0, [r7, #0]
 800a3ba:	f00c faca 	bl	8016952 <strstr>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d004      	beq.n	800a3ce <get_http_headers+0x92>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_IMPL];
 800a3c4:	4a3c      	ldr	r2, [pc, #240]	; (800a4b8 <get_http_headers+0x17c>)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800a3cc:	e003      	b.n	800a3d6 <get_http_headers+0x9a>
  } else {
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_OK];
 800a3ce:	4a3b      	ldr	r2, [pc, #236]	; (800a4bc <get_http_headers+0x180>)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }

  /* Determine if the URI has any variables and, if so, temporarily remove
      them. */
  vars = strchr(uri, '?');
 800a3d6:	213f      	movs	r1, #63	; 0x3f
 800a3d8:	6838      	ldr	r0, [r7, #0]
 800a3da:	f00c fa80 	bl	80168de <strchr>
 800a3de:	60b8      	str	r0, [r7, #8]
  if (vars) {
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d002      	beq.n	800a3ec <get_http_headers+0xb0>
    *vars = '\0';
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	701a      	strb	r2, [r3, #0]
  }

  /* Get a pointer to the file extension.  We find this by looking for the
      last occurrence of "." in the filename passed. */
  ext = NULL;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	60fb      	str	r3, [r7, #12]
  tmp = strchr(uri, '.');
 800a3f0:	212e      	movs	r1, #46	; 0x2e
 800a3f2:	6838      	ldr	r0, [r7, #0]
 800a3f4:	f00c fa73 	bl	80168de <strchr>
 800a3f8:	6138      	str	r0, [r7, #16]
  while (tmp) {
 800a3fa:	e007      	b.n	800a40c <get_http_headers+0xd0>
    ext = tmp + 1;
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	3301      	adds	r3, #1
 800a400:	60fb      	str	r3, [r7, #12]
    tmp = strchr(ext, '.');
 800a402:	212e      	movs	r1, #46	; 0x2e
 800a404:	68f8      	ldr	r0, [r7, #12]
 800a406:	f00c fa6a 	bl	80168de <strchr>
 800a40a:	6138      	str	r0, [r7, #16]
  while (tmp) {
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d1f4      	bne.n	800a3fc <get_http_headers+0xc0>
  }
  if (ext != NULL) {
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d014      	beq.n	800a442 <get_http_headers+0x106>
    /* Now determine the content type and add the relevant header for that. */
    for (content_type = 0; content_type < NUM_HTTP_HEADERS; content_type++) {
 800a418:	2300      	movs	r3, #0
 800a41a:	617b      	str	r3, [r7, #20]
 800a41c:	e00d      	b.n	800a43a <get_http_headers+0xfe>
      /* Have we found a matching extension? */
      if (!lwip_stricmp(g_psHTTPHeaders[content_type].extension, ext)) {
 800a41e:	4a28      	ldr	r2, [pc, #160]	; (800a4c0 <get_http_headers+0x184>)
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a426:	68f9      	ldr	r1, [r7, #12]
 800a428:	4618      	mov	r0, r3
 800a42a:	f001 fceb 	bl	800be04 <lwip_stricmp>
 800a42e:	4603      	mov	r3, r0
 800a430:	2b00      	cmp	r3, #0
 800a432:	d009      	beq.n	800a448 <get_http_headers+0x10c>
    for (content_type = 0; content_type < NUM_HTTP_HEADERS; content_type++) {
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	3301      	adds	r3, #1
 800a438:	617b      	str	r3, [r7, #20]
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	2b13      	cmp	r3, #19
 800a43e:	d9ee      	bls.n	800a41e <get_http_headers+0xe2>
 800a440:	e003      	b.n	800a44a <get_http_headers+0x10e>
        break;
      }
    }
  } else {
    content_type = NUM_HTTP_HEADERS;
 800a442:	2314      	movs	r3, #20
 800a444:	617b      	str	r3, [r7, #20]
 800a446:	e000      	b.n	800a44a <get_http_headers+0x10e>
        break;
 800a448:	bf00      	nop
  }

  /* Reinstate the parameter marker if there was one in the original URI. */
  if (vars) {
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d002      	beq.n	800a456 <get_http_headers+0x11a>
    *vars = '?';
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	223f      	movs	r2, #63	; 0x3f
 800a454:	701a      	strb	r2, [r3, #0]
    hs->hdr_index = NUM_FILE_HDR_STRINGS;
    return;
  }
#endif /* LWIP_HTTPD_OMIT_HEADER_FOR_EXTENSIONLESS_URI */
  /* Did we find a matching extension? */
  if (content_type < NUM_HTTP_HEADERS) {
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	2b13      	cmp	r3, #19
 800a45a:	d808      	bhi.n	800a46e <get_http_headers+0x132>
    /* yes, store it */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaders[content_type].content_type;
 800a45c:	4a18      	ldr	r2, [pc, #96]	; (800a4c0 <get_http_headers+0x184>)
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	00db      	lsls	r3, r3, #3
 800a462:	4413      	add	r3, r2
 800a464:	685a      	ldr	r2, [r3, #4]
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800a46c:	e00b      	b.n	800a486 <get_http_headers+0x14a>
  } else if (!ext) {
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d104      	bne.n	800a47e <get_http_headers+0x142>
    /* no, no extension found -> use binary transfer to prevent the browser adding '.txt' on save */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_APP;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	4a13      	ldr	r2, [pc, #76]	; (800a4c4 <get_http_headers+0x188>)
 800a478:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800a47c:	e003      	b.n	800a486 <get_http_headers+0x14a>
  } else {
    /* No - use the default, plain text file type. */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_DEFAULT_TYPE;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	4a11      	ldr	r2, [pc, #68]	; (800a4c8 <get_http_headers+0x18c>)
 800a482:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }
  /* Set up to send the first header string. */
  hs->hdr_index = 0;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2200      	movs	r2, #0
 800a48a:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
  hs->hdr_pos = 0;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2200      	movs	r2, #0
 800a492:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
}
 800a496:	3718      	adds	r7, #24
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}
 800a49c:	080187c4 	.word	0x080187c4
 800a4a0:	08018688 	.word	0x08018688
 800a4a4:	08018804 	.word	0x08018804
 800a4a8:	08018bf8 	.word	0x08018bf8
 800a4ac:	08018bfc 	.word	0x08018bfc
 800a4b0:	080186a8 	.word	0x080186a8
 800a4b4:	08018c00 	.word	0x08018c00
 800a4b8:	080186c4 	.word	0x080186c4
 800a4bc:	08018674 	.word	0x08018674
 800a4c0:	0801f6d0 	.word	0x0801f6d0
 800a4c4:	08018998 	.word	0x08018998
 800a4c8:	08018c04 	.word	0x08018c04

0800a4cc <get_http_content_length>:

/* Add content-length header? */
static void
get_http_content_length(struct http_state *hs)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b084      	sub	sp, #16
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  u8_t add_content_len = 0;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("already been here?", hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] == NULL);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d006      	beq.n	800a4f0 <get_http_content_length+0x24>
 800a4e2:	4b27      	ldr	r3, [pc, #156]	; (800a580 <get_http_content_length+0xb4>)
 800a4e4:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 800a4e8:	4926      	ldr	r1, [pc, #152]	; (800a584 <get_http_content_length+0xb8>)
 800a4ea:	4827      	ldr	r0, [pc, #156]	; (800a588 <get_http_content_length+0xbc>)
 800a4ec:	f00c f8c6 	bl	801667c <iprintf>

  add_content_len = 0;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	73fb      	strb	r3, [r7, #15]
#if LWIP_HTTPD_SSI
  if (hs->ssi == NULL) /* @todo: get maximum file length from SSI */
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d10c      	bne.n	800a516 <get_http_content_length+0x4a>
#endif /* LWIP_HTTPD_SSI */
  {
    if ((hs->handle != NULL) && (hs->handle->flags & FS_FILE_FLAGS_HEADER_PERSISTENT)) {
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	695b      	ldr	r3, [r3, #20]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d008      	beq.n	800a516 <get_http_content_length+0x4a>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	695b      	ldr	r3, [r3, #20]
 800a508:	7c1b      	ldrb	r3, [r3, #16]
 800a50a:	f003 0302 	and.w	r3, r3, #2
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d001      	beq.n	800a516 <get_http_content_length+0x4a>
      add_content_len = 1;
 800a512:	2301      	movs	r3, #1
 800a514:	73fb      	strb	r3, [r7, #15]
    }
  }
  if (add_content_len) {
 800a516:	7bfb      	ldrb	r3, [r7, #15]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d025      	beq.n	800a568 <get_http_content_length+0x9c>
    size_t len;
    lwip_itoa(hs->hdr_content_len, (size_t)LWIP_HTTPD_MAX_CONTENT_LEN_SIZE,
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
              hs->handle->len);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	695b      	ldr	r3, [r3, #20]
    lwip_itoa(hs->hdr_content_len, (size_t)LWIP_HTTPD_MAX_CONTENT_LEN_SIZE,
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	461a      	mov	r2, r3
 800a52a:	210c      	movs	r1, #12
 800a52c:	f001 fc9e 	bl	800be6c <lwip_itoa>
    len = strlen(hs->hdr_content_len);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	33c4      	adds	r3, #196	; 0xc4
 800a534:	4618      	mov	r0, r3
 800a536:	f7f5 fe55 	bl	80001e4 <strlen>
 800a53a:	60b8      	str	r0, [r7, #8]
    if (len <= LWIP_HTTPD_MAX_CONTENT_LEN_SIZE - LWIP_HTTPD_MAX_CONTENT_LEN_OFFSET) {
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	2b09      	cmp	r3, #9
 800a540:	d810      	bhi.n	800a564 <get_http_content_length+0x98>
      SMEMCPY(&hs->hdr_content_len[len], CRLF, 3);
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	33c0      	adds	r3, #192	; 0xc0
 800a546:	687a      	ldr	r2, [r7, #4]
 800a548:	4413      	add	r3, r2
 800a54a:	3304      	adds	r3, #4
 800a54c:	2203      	movs	r2, #3
 800a54e:	490f      	ldr	r1, [pc, #60]	; (800a58c <get_http_content_length+0xc0>)
 800a550:	4618      	mov	r0, r3
 800a552:	f00c f863 	bl	801661c <memcpy>
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = hs->hdr_content_len;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800a562:	e001      	b.n	800a568 <get_http_content_length+0x9c>
    } else {
      add_content_len = 0;
 800a564:	2300      	movs	r3, #0
 800a566:	73fb      	strb	r3, [r7, #15]
  } else {
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONN_CLOSE];
    hs->keepalive = 0;
  }
#else /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  if (add_content_len) {
 800a568:	7bfb      	ldrb	r3, [r7, #15]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d003      	beq.n	800a576 <get_http_content_length+0xaa>
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONTENT_LENGTH];
 800a56e:	4a08      	ldr	r2, [pc, #32]	; (800a590 <get_http_content_length+0xc4>)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
}
 800a576:	bf00      	nop
 800a578:	3710      	adds	r7, #16
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}
 800a57e:	bf00      	nop
 800a580:	08018b44 	.word	0x08018b44
 800a584:	08018c24 	.word	0x08018c24
 800a588:	08018b8c 	.word	0x08018b8c
 800a58c:	08018c38 	.word	0x08018c38
 800a590:	08018754 	.word	0x08018754

0800a594 <http_send_headers>:
 *                                      so don't send HTTP body yet
 *           - HTTP_DATA_TO_SEND_FREED: http_state and pcb are already freed
 */
static u8_t
http_send_headers(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b088      	sub	sp, #32
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
 800a59c:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	777b      	strb	r3, [r7, #29]
  u16_t hdrlen, sendlen;

  if (hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] == NULL) {
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d102      	bne.n	800a5b2 <http_send_headers+0x1e>
    /* set up "content-length" and "connection:" headers */
    get_http_content_length(hs);
 800a5ac:	6838      	ldr	r0, [r7, #0]
 800a5ae:	f7ff ff8d 	bl	800a4cc <get_http_content_length>
  }

  /* How much data can we send? */
  len = altcp_sndbuf(pcb);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a5b8:	83fb      	strh	r3, [r7, #30]
  sendlen = len;
 800a5ba:	8bfb      	ldrh	r3, [r7, #30]
 800a5bc:	81fb      	strh	r3, [r7, #14]

  while (len && (hs->hdr_index < NUM_FILE_HDR_STRINGS) && sendlen) {
 800a5be:	e08b      	b.n	800a6d8 <http_send_headers+0x144>
    const void *ptr;
    u16_t old_sendlen;
    u8_t apiflags;
    /* How much do we have to send from the current header? */
    hdrlen = (u16_t)strlen(hs->hdrs[hs->hdr_index]);
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	322c      	adds	r2, #44	; 0x2c
 800a5cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f7f5 fe07 	bl	80001e4 <strlen>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	837b      	strh	r3, [r7, #26]

    /* How much of this can we send? */
    sendlen = (len < (hdrlen - hs->hdr_pos)) ? len : (hdrlen - hs->hdr_pos);
 800a5da:	8b7b      	ldrh	r3, [r7, #26]
 800a5dc:	683a      	ldr	r2, [r7, #0]
 800a5de:	f8b2 20d0 	ldrh.w	r2, [r2, #208]	; 0xd0
 800a5e2:	1a9a      	subs	r2, r3, r2
 800a5e4:	8bfb      	ldrh	r3, [r7, #30]
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	bfa8      	it	ge
 800a5ea:	4613      	movge	r3, r2
 800a5ec:	b29b      	uxth	r3, r3
 800a5ee:	81fb      	strh	r3, [r7, #14]

    /* Send this amount of data or as much as we can given memory
     * constraints. */
    ptr = (const void *)(hs->hdrs[hs->hdr_index] + hs->hdr_pos);
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800a5f6:	461a      	mov	r2, r3
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	322c      	adds	r2, #44	; 0x2c
 800a5fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a600:	683a      	ldr	r2, [r7, #0]
 800a602:	f8b2 20d0 	ldrh.w	r2, [r2, #208]	; 0xd0
 800a606:	4413      	add	r3, r2
 800a608:	617b      	str	r3, [r7, #20]
    old_sendlen = sendlen;
 800a60a:	89fb      	ldrh	r3, [r7, #14]
 800a60c:	827b      	strh	r3, [r7, #18]
    apiflags = HTTP_IS_HDR_VOLATILE(hs, ptr);
 800a60e:	2300      	movs	r3, #0
 800a610:	773b      	strb	r3, [r7, #28]
    if (hs->hdr_index == HDR_STRINGS_IDX_CONTENT_LEN_NR) {
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800a618:	2b03      	cmp	r3, #3
 800a61a:	d103      	bne.n	800a624 <http_send_headers+0x90>
      /* content-length is always volatile */
      apiflags |= TCP_WRITE_FLAG_COPY;
 800a61c:	7f3b      	ldrb	r3, [r7, #28]
 800a61e:	f043 0301 	orr.w	r3, r3, #1
 800a622:	773b      	strb	r3, [r7, #28]
    }
    if (hs->hdr_index < NUM_FILE_HDR_STRINGS - 1) {
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800a62a:	2b03      	cmp	r3, #3
 800a62c:	d803      	bhi.n	800a636 <http_send_headers+0xa2>
      apiflags |= TCP_WRITE_FLAG_MORE;
 800a62e:	7f3b      	ldrb	r3, [r7, #28]
 800a630:	f043 0302 	orr.w	r3, r3, #2
 800a634:	773b      	strb	r3, [r7, #28]
    }
    err = http_write(pcb, ptr, &sendlen, apiflags);
 800a636:	7f3b      	ldrb	r3, [r7, #28]
 800a638:	f107 020e 	add.w	r2, r7, #14
 800a63c:	6979      	ldr	r1, [r7, #20]
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f7ff fc74 	bl	8009f2c <http_write>
 800a644:	4603      	mov	r3, r0
 800a646:	747b      	strb	r3, [r7, #17]
    if ((err == ERR_OK) && (old_sendlen != sendlen)) {
 800a648:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d106      	bne.n	800a65e <http_send_headers+0xca>
 800a650:	89fb      	ldrh	r3, [r7, #14]
 800a652:	8a7a      	ldrh	r2, [r7, #18]
 800a654:	429a      	cmp	r2, r3
 800a656:	d002      	beq.n	800a65e <http_send_headers+0xca>
      /* Remember that we added some more data to be transmitted. */
      data_to_send = HTTP_DATA_TO_SEND_CONTINUE;
 800a658:	2301      	movs	r3, #1
 800a65a:	777b      	strb	r3, [r7, #29]
 800a65c:	e005      	b.n	800a66a <http_send_headers+0xd6>
    } else if (err != ERR_OK) {
 800a65e:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d001      	beq.n	800a66a <http_send_headers+0xd6>
      /* special case: http_write does not try to send 1 byte */
      sendlen = 0;
 800a666:	2300      	movs	r3, #0
 800a668:	81fb      	strh	r3, [r7, #14]
    }

    /* Fix up the header position for the next time round. */
    hs->hdr_pos += sendlen;
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 800a670:	89fb      	ldrh	r3, [r7, #14]
 800a672:	4413      	add	r3, r2
 800a674:	b29a      	uxth	r2, r3
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    len -= sendlen;
 800a67c:	89fb      	ldrh	r3, [r7, #14]
 800a67e:	8bfa      	ldrh	r2, [r7, #30]
 800a680:	1ad3      	subs	r3, r2, r3
 800a682:	83fb      	strh	r3, [r7, #30]

    /* Have we finished sending this string? */
    if (hs->hdr_pos == hdrlen) {
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 800a68a:	8b7a      	ldrh	r2, [r7, #26]
 800a68c:	429a      	cmp	r2, r3
 800a68e:	d123      	bne.n	800a6d8 <http_send_headers+0x144>
      /* Yes - move on to the next one */
      hs->hdr_index++;
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800a696:	3301      	adds	r3, #1
 800a698:	b29a      	uxth	r2, r3
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
      /* skip headers that are NULL (not all headers are required) */
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 800a6a0:	e007      	b.n	800a6b2 <http_send_headers+0x11e>
             (hs->hdrs[hs->hdr_index] == NULL)) {
        hs->hdr_index++;
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800a6a8:	3301      	adds	r3, #1
 800a6aa:	b29a      	uxth	r2, r3
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800a6b8:	2b04      	cmp	r3, #4
 800a6ba:	d809      	bhi.n	800a6d0 <http_send_headers+0x13c>
             (hs->hdrs[hs->hdr_index] == NULL)) {
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	322c      	adds	r2, #44	; 0x2c
 800a6c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d0e8      	beq.n	800a6a2 <http_send_headers+0x10e>
      }
      hs->hdr_pos = 0;
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
  while (len && (hs->hdr_index < NUM_FILE_HDR_STRINGS) && sendlen) {
 800a6d8:	8bfb      	ldrh	r3, [r7, #30]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d008      	beq.n	800a6f0 <http_send_headers+0x15c>
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800a6e4:	2b04      	cmp	r3, #4
 800a6e6:	d803      	bhi.n	800a6f0 <http_send_headers+0x15c>
 800a6e8:	89fb      	ldrh	r3, [r7, #14]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	f47f af68 	bne.w	800a5c0 <http_send_headers+0x2c>
    }
  }

  if ((hs->hdr_index >= NUM_FILE_HDR_STRINGS) && (hs->file == NULL)) {
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800a6f6:	2b04      	cmp	r3, #4
 800a6f8:	d90f      	bls.n	800a71a <http_send_headers+0x186>
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	699b      	ldr	r3, [r3, #24]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d10b      	bne.n	800a71a <http_send_headers+0x186>
    /* When we are at the end of the headers, check for data to send
     * instead of waiting for ACK from remote side to continue
     * (which would happen when sending files from async read). */
    if (http_check_eof(pcb, hs)) {
 800a702:	6839      	ldr	r1, [r7, #0]
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f000 f819 	bl	800a73c <http_check_eof>
 800a70a:	4603      	mov	r3, r0
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d002      	beq.n	800a716 <http_send_headers+0x182>
      data_to_send = HTTP_DATA_TO_SEND_BREAK;
 800a710:	2302      	movs	r3, #2
 800a712:	777b      	strb	r3, [r7, #29]
 800a714:	e001      	b.n	800a71a <http_send_headers+0x186>
    } else {
      /* At this point, for non-keepalive connections, hs is deallocated an
         pcb is closed. */
      return HTTP_DATA_TO_SEND_FREED;
 800a716:	2303      	movs	r3, #3
 800a718:	e00b      	b.n	800a732 <http_send_headers+0x19e>
  }
  /* If we get here and there are still header bytes to send, we send
   * the header information we just wrote immediately. If there are no
   * more headers to send, but we do have file data to send, drop through
   * to try to send some file data too. */
  if ((hs->hdr_index < NUM_FILE_HDR_STRINGS) || !hs->file) {
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800a720:	2b04      	cmp	r3, #4
 800a722:	d903      	bls.n	800a72c <http_send_headers+0x198>
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	699b      	ldr	r3, [r3, #24]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d101      	bne.n	800a730 <http_send_headers+0x19c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("tcp_output\n"));
    return HTTP_DATA_TO_SEND_BREAK;
 800a72c:	2302      	movs	r3, #2
 800a72e:	e000      	b.n	800a732 <http_send_headers+0x19e>
  }
  return data_to_send;
 800a730:	7f7b      	ldrb	r3, [r7, #29]
}
 800a732:	4618      	mov	r0, r3
 800a734:	3720      	adds	r7, #32
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}
	...

0800a73c <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b084      	sub	sp, #16
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	695b      	ldr	r3, [r3, #20]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d105      	bne.n	800a75a <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800a74e:	6839      	ldr	r1, [r7, #0]
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f7ff fcb6 	bl	800a0c2 <http_eof>
    return 0;
 800a756:	2300      	movs	r3, #0
 800a758:	e016      	b.n	800a788 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	695b      	ldr	r3, [r3, #20]
 800a75e:	4618      	mov	r0, r3
 800a760:	f7ff fb50 	bl	8009e04 <fs_bytes_left>
 800a764:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	dc05      	bgt.n	800a778 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800a76c:	6839      	ldr	r1, [r7, #0]
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f7ff fca7 	bl	800a0c2 <http_eof>
    return 0;
 800a774:	2300      	movs	r3, #0
 800a776:	e007      	b.n	800a788 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800a778:	4b05      	ldr	r3, [pc, #20]	; (800a790 <http_check_eof+0x54>)
 800a77a:	f240 429d 	movw	r2, #1181	; 0x49d
 800a77e:	4905      	ldr	r1, [pc, #20]	; (800a794 <http_check_eof+0x58>)
 800a780:	4805      	ldr	r0, [pc, #20]	; (800a798 <http_check_eof+0x5c>)
 800a782:	f00b ff7b 	bl	801667c <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800a786:	2301      	movs	r3, #1
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3710      	adds	r7, #16
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}
 800a790:	08018b44 	.word	0x08018b44
 800a794:	08018c3c 	.word	0x08018c3c
 800a798:	08018b8c 	.word	0x08018b8c

0800a79c <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b084      	sub	sp, #16
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
 800a7a4:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ae:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d803      	bhi.n	800a7be <http_send_data_nonssi+0x22>
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ba:	b29b      	uxth	r3, r3
 800a7bc:	e001      	b.n	800a7c2 <http_send_data_nonssi+0x26>
 800a7be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a7c2:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	6999      	ldr	r1, [r3, #24]
 800a7c8:	f107 020c 	add.w	r2, r7, #12
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f7ff fbac 	bl	8009f2c <http_write>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800a7d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d10d      	bne.n	800a7fc <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	699b      	ldr	r3, [r3, #24]
 800a7e8:	89ba      	ldrh	r2, [r7, #12]
 800a7ea:	441a      	add	r2, r3
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f4:	89ba      	ldrh	r2, [r7, #12]
 800a7f6:	1a9a      	subs	r2, r3, r2
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 800a7fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3710      	adds	r7, #16
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
	...

0800a808 <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b086      	sub	sp, #24
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
 800a810:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 800a812:	2300      	movs	r3, #0
 800a814:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 800a816:	2300      	movs	r3, #0
 800a818:	75bb      	strb	r3, [r7, #22]
  u8_t tag_type;

  struct http_ssi_state *ssi = hs->ssi;
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a81e:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d106      	bne.n	800a834 <http_send_data_ssi+0x2c>
 800a826:	4b8e      	ldr	r3, [pc, #568]	; (800aa60 <http_send_data_ssi+0x258>)
 800a828:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800a82c:	498d      	ldr	r1, [pc, #564]	; (800aa64 <http_send_data_ssi+0x25c>)
 800a82e:	488e      	ldr	r0, [pc, #568]	; (800aa68 <http_send_data_ssi+0x260>)
 800a830:	f00b ff24 	bl	801667c <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = altcp_sndbuf(pcb);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a83a:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if (ssi->parsed > hs->file) {
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	681a      	ldr	r2, [r3, #0]
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	699b      	ldr	r3, [r3, #24]
 800a844:	429a      	cmp	r2, r3
 800a846:	f240 82d9 	bls.w	800adfc <http_send_data_ssi+0x5f4>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800a84a:	693b      	ldr	r3, [r7, #16]
 800a84c:	681a      	ldr	r2, [r3, #0]
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	699b      	ldr	r3, [r3, #24]
 800a852:	1ad3      	subs	r3, r2, r3
 800a854:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a858:	4293      	cmp	r3, r2
 800a85a:	dc06      	bgt.n	800a86a <http_send_data_ssi+0x62>
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	681a      	ldr	r2, [r3, #0]
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	699b      	ldr	r3, [r3, #24]
 800a864:	1ad3      	subs	r3, r2, r3
 800a866:	b29b      	uxth	r3, r3
 800a868:	e001      	b.n	800a86e <http_send_data_ssi+0x66>
 800a86a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a86e:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	6999      	ldr	r1, [r3, #24]
 800a874:	f107 020e 	add.w	r2, r7, #14
 800a878:	2300      	movs	r3, #0
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f7ff fb56 	bl	8009f2c <http_write>
 800a880:	4603      	mov	r3, r0
 800a882:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800a884:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d10d      	bne.n	800a8a8 <http_send_data_ssi+0xa0>
      data_to_send = 1;
 800a88c:	2301      	movs	r3, #1
 800a88e:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	699b      	ldr	r3, [r3, #24]
 800a894:	89fa      	ldrh	r2, [r7, #14]
 800a896:	441a      	add	r2, r3
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a0:	89fa      	ldrh	r2, [r7, #14]
 800a8a2:	1a9a      	subs	r2, r3, r2
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if (altcp_sndbuf(pcb) == 0) {
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	f040 82a4 	bne.w	800adfc <http_send_data_ssi+0x5f4>
      return data_to_send;
 800a8b4:	7dbb      	ldrb	r3, [r7, #22]
 800a8b6:	e2ee      	b.n	800ae96 <http_send_data_ssi+0x68e>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 800a8b8:	89fb      	ldrh	r3, [r7, #14]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d101      	bne.n	800a8c2 <http_send_data_ssi+0xba>
      return data_to_send;
 800a8be:	7dbb      	ldrb	r3, [r7, #22]
 800a8c0:	e2e9      	b.n	800ae96 <http_send_data_ssi+0x68e>
    }
    switch (ssi->tag_state) {
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800a8c8:	331a      	adds	r3, #26
 800a8ca:	781b      	ldrb	r3, [r3, #0]
 800a8cc:	2b04      	cmp	r3, #4
 800a8ce:	f200 8294 	bhi.w	800adfa <http_send_data_ssi+0x5f2>
 800a8d2:	a201      	add	r2, pc, #4	; (adr r2, 800a8d8 <http_send_data_ssi+0xd0>)
 800a8d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8d8:	0800a8ed 	.word	0x0800a8ed
 800a8dc:	0800a94b 	.word	0x0800a94b
 800a8e0:	0800a9c5 	.word	0x0800a9c5
 800a8e4:	0800ab19 	.word	0x0800ab19
 800a8e8:	0800ac97 	.word	0x0800ac97
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	757b      	strb	r3, [r7, #21]
 800a8f0:	e01d      	b.n	800a92e <http_send_data_ssi+0x126>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	781a      	ldrb	r2, [r3, #0]
 800a8f8:	7d7b      	ldrb	r3, [r7, #21]
 800a8fa:	495c      	ldr	r1, [pc, #368]	; (800aa6c <http_send_data_ssi+0x264>)
 800a8fc:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 800a900:	781b      	ldrb	r3, [r3, #0]
 800a902:	429a      	cmp	r2, r3
 800a904:	d110      	bne.n	800a928 <http_send_data_ssi+0x120>
            /* We found what could be the lead-in for a new tag so change
             * state appropriately. */
            ssi->tag_type = tag_type;
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	7d7a      	ldrb	r2, [r7, #21]
 800a90a:	759a      	strb	r2, [r3, #22]
            ssi->tag_state = TAG_LEADIN;
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800a912:	331a      	adds	r3, #26
 800a914:	2201      	movs	r2, #1
 800a916:	701a      	strb	r2, [r3, #0]
            ssi->tag_index = 1;
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	2201      	movs	r2, #1
 800a91c:	821a      	strh	r2, [r3, #16]
  #if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->tag_started = ssi->parsed;
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	681a      	ldr	r2, [r3, #0]
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	605a      	str	r2, [r3, #4]
  #endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
            break;
 800a926:	e005      	b.n	800a934 <http_send_data_ssi+0x12c>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 800a928:	7d7b      	ldrb	r3, [r7, #21]
 800a92a:	3301      	adds	r3, #1
 800a92c:	757b      	strb	r3, [r7, #21]
 800a92e:	7d7b      	ldrb	r3, [r7, #21]
 800a930:	2b01      	cmp	r3, #1
 800a932:	d9de      	bls.n	800a8f2 <http_send_data_ssi+0xea>
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	68db      	ldr	r3, [r3, #12]
 800a938:	1e5a      	subs	r2, r3, #1
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	60da      	str	r2, [r3, #12]
        ssi->parsed++;
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	1c5a      	adds	r2, r3, #1
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	601a      	str	r2, [r3, #0]
        break;
 800a948:	e258      	b.n	800adfc <http_send_data_ssi+0x5f4>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	7d9b      	ldrb	r3, [r3, #22]
 800a94e:	461a      	mov	r2, r3
 800a950:	4b46      	ldr	r3, [pc, #280]	; (800aa6c <http_send_data_ssi+0x264>)
 800a952:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800a956:	693a      	ldr	r2, [r7, #16]
 800a958:	8a12      	ldrh	r2, [r2, #16]
 800a95a:	4413      	add	r3, r2
 800a95c:	781b      	ldrb	r3, [r3, #0]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d109      	bne.n	800a976 <http_send_data_ssi+0x16e>
          ssi->tag_index = 0;
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	2200      	movs	r2, #0
 800a966:	821a      	strh	r2, [r3, #16]
          ssi->tag_state = TAG_FOUND;
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800a96e:	331a      	adds	r3, #26
 800a970:	2202      	movs	r2, #2
 800a972:	701a      	strb	r2, [r3, #0]
 800a974:	e242      	b.n	800adfc <http_send_data_ssi+0x5f4>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	781a      	ldrb	r2, [r3, #0]
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	7d9b      	ldrb	r3, [r3, #22]
 800a980:	4619      	mov	r1, r3
 800a982:	4b3a      	ldr	r3, [pc, #232]	; (800aa6c <http_send_data_ssi+0x264>)
 800a984:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 800a988:	6939      	ldr	r1, [r7, #16]
 800a98a:	8a09      	ldrh	r1, [r1, #16]
 800a98c:	440b      	add	r3, r1
 800a98e:	781b      	ldrb	r3, [r3, #0]
 800a990:	429a      	cmp	r2, r3
 800a992:	d106      	bne.n	800a9a2 <http_send_data_ssi+0x19a>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	8a1b      	ldrh	r3, [r3, #16]
 800a998:	3301      	adds	r3, #1
 800a99a:	b29a      	uxth	r2, r3
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	821a      	strh	r2, [r3, #16]
 800a9a0:	e005      	b.n	800a9ae <http_send_data_ssi+0x1a6>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800a9a8:	331a      	adds	r3, #26
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	701a      	strb	r2, [r3, #0]
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	68db      	ldr	r3, [r3, #12]
 800a9b2:	1e5a      	subs	r2, r3, #1
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	1c5a      	adds	r2, r3, #1
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	601a      	str	r2, [r3, #0]
        }
        break;
 800a9c2:	e21b      	b.n	800adfc <http_send_data_ssi+0x5f4>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	8a1b      	ldrh	r3, [r3, #16]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d11e      	bne.n	800aa0a <http_send_data_ssi+0x202>
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	781b      	ldrb	r3, [r3, #0]
 800a9d2:	2b20      	cmp	r3, #32
 800a9d4:	d00e      	beq.n	800a9f4 <http_send_data_ssi+0x1ec>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800a9dc:	2b09      	cmp	r3, #9
 800a9de:	d009      	beq.n	800a9f4 <http_send_data_ssi+0x1ec>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	781b      	ldrb	r3, [r3, #0]
 800a9e6:	2b0a      	cmp	r3, #10
 800a9e8:	d004      	beq.n	800a9f4 <http_send_data_ssi+0x1ec>
                                      (*ssi->parsed == '\r'))) {
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800a9f0:	2b0d      	cmp	r3, #13
 800a9f2:	d10a      	bne.n	800aa0a <http_send_data_ssi+0x202>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	68db      	ldr	r3, [r3, #12]
 800a9f8:	1e5a      	subs	r2, r3, #1
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	1c5a      	adds	r2, r3, #1
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	601a      	str	r2, [r3, #0]
          break;
 800aa08:	e1f8      	b.n	800adfc <http_send_data_ssi+0x5f4>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	781a      	ldrb	r2, [r3, #0]
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	7d9b      	ldrb	r3, [r3, #22]
 800aa14:	4915      	ldr	r1, [pc, #84]	; (800aa6c <http_send_data_ssi+0x264>)
 800aa16:	00db      	lsls	r3, r3, #3
 800aa18:	440b      	add	r3, r1
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	781b      	ldrb	r3, [r3, #0]
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d013      	beq.n	800aa4a <http_send_data_ssi+0x242>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	781b      	ldrb	r3, [r3, #0]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 800aa28:	2b20      	cmp	r3, #32
 800aa2a:	d00e      	beq.n	800aa4a <http_send_data_ssi+0x242>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	781b      	ldrb	r3, [r3, #0]
 800aa32:	2b09      	cmp	r3, #9
 800aa34:	d009      	beq.n	800aa4a <http_send_data_ssi+0x242>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800aa36:	693b      	ldr	r3, [r7, #16]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	781b      	ldrb	r3, [r3, #0]
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800aa3c:	2b0a      	cmp	r3, #10
 800aa3e:	d004      	beq.n	800aa4a <http_send_data_ssi+0x242>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	781b      	ldrb	r3, [r3, #0]
 800aa46:	2b0d      	cmp	r3, #13
 800aa48:	d143      	bne.n	800aad2 <http_send_data_ssi+0x2ca>

          if (ssi->tag_index == 0) {
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	8a1b      	ldrh	r3, [r3, #16]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d10e      	bne.n	800aa70 <http_send_data_ssi+0x268>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800aa58:	331a      	adds	r3, #26
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	701a      	strb	r2, [r3, #0]
          if (ssi->tag_index == 0) {
 800aa5e:	e050      	b.n	800ab02 <http_send_data_ssi+0x2fa>
 800aa60:	08018b44 	.word	0x08018b44
 800aa64:	08018bc0 	.word	0x08018bc0
 800aa68:	08018b8c 	.word	0x08018b8c
 800aa6c:	0801f7ac 	.word	0x0801f7ac
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800aa76:	331a      	adds	r3, #26
 800aa78:	2203      	movs	r2, #3
 800aa7a:	701a      	strb	r2, [r3, #0]
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	8a1b      	ldrh	r3, [r3, #16]
 800aa80:	2bff      	cmp	r3, #255	; 0xff
 800aa82:	d906      	bls.n	800aa92 <http_send_data_ssi+0x28a>
 800aa84:	4b95      	ldr	r3, [pc, #596]	; (800acdc <http_send_data_ssi+0x4d4>)
 800aa86:	f240 523a 	movw	r2, #1338	; 0x53a
 800aa8a:	4995      	ldr	r1, [pc, #596]	; (800ace0 <http_send_data_ssi+0x4d8>)
 800aa8c:	4895      	ldr	r0, [pc, #596]	; (800ace4 <http_send_data_ssi+0x4dc>)
 800aa8e:	f00b fdf5 	bl	801667c <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	8a1b      	ldrh	r3, [r3, #16]
 800aa96:	b2da      	uxtb	r2, r3
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	75da      	strb	r2, [r3, #23]
            ssi->tag_name[ssi->tag_index] = '\0';
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	8a1b      	ldrh	r3, [r3, #16]
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	4413      	add	r3, r2
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	761a      	strb	r2, [r3, #24]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	781a      	ldrb	r2, [r3, #0]
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	7d9b      	ldrb	r3, [r3, #22]
 800aab4:	498c      	ldr	r1, [pc, #560]	; (800ace8 <http_send_data_ssi+0x4e0>)
 800aab6:	00db      	lsls	r3, r3, #3
 800aab8:	440b      	add	r3, r1
 800aaba:	685b      	ldr	r3, [r3, #4]
 800aabc:	781b      	ldrb	r3, [r3, #0]
 800aabe:	429a      	cmp	r2, r3
 800aac0:	d103      	bne.n	800aaca <http_send_data_ssi+0x2c2>
              ssi->tag_index = 1;
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	2201      	movs	r2, #1
 800aac6:	821a      	strh	r2, [r3, #16]
          if (ssi->tag_index == 0) {
 800aac8:	e01b      	b.n	800ab02 <http_send_data_ssi+0x2fa>
            } else {
              ssi->tag_index = 0;
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	2200      	movs	r2, #0
 800aace:	821a      	strh	r2, [r3, #16]
          if (ssi->tag_index == 0) {
 800aad0:	e017      	b.n	800ab02 <http_send_data_ssi+0x2fa>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 800aad2:	693b      	ldr	r3, [r7, #16]
 800aad4:	8a1b      	ldrh	r3, [r3, #16]
 800aad6:	2b0f      	cmp	r3, #15
 800aad8:	d80d      	bhi.n	800aaf6 <http_send_data_ssi+0x2ee>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	681a      	ldr	r2, [r3, #0]
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	8a1b      	ldrh	r3, [r3, #16]
 800aae2:	1c59      	adds	r1, r3, #1
 800aae4:	b288      	uxth	r0, r1
 800aae6:	6939      	ldr	r1, [r7, #16]
 800aae8:	8208      	strh	r0, [r1, #16]
 800aaea:	4619      	mov	r1, r3
 800aaec:	7812      	ldrb	r2, [r2, #0]
 800aaee:	693b      	ldr	r3, [r7, #16]
 800aaf0:	440b      	add	r3, r1
 800aaf2:	761a      	strb	r2, [r3, #24]
 800aaf4:	e005      	b.n	800ab02 <http_send_data_ssi+0x2fa>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800aafc:	331a      	adds	r3, #26
 800aafe:	2200      	movs	r2, #0
 800ab00:	701a      	strb	r2, [r3, #0]
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	68db      	ldr	r3, [r3, #12]
 800ab06:	1e5a      	subs	r2, r3, #1
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	60da      	str	r2, [r3, #12]
        ssi->parsed++;
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	1c5a      	adds	r2, r3, #1
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	601a      	str	r2, [r3, #0]

        break;
 800ab16:	e171      	b.n	800adfc <http_send_data_ssi+0x5f4>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	8a1b      	ldrh	r3, [r3, #16]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d11e      	bne.n	800ab5e <http_send_data_ssi+0x356>
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	781b      	ldrb	r3, [r3, #0]
 800ab26:	2b20      	cmp	r3, #32
 800ab28:	d00e      	beq.n	800ab48 <http_send_data_ssi+0x340>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800ab30:	2b09      	cmp	r3, #9
 800ab32:	d009      	beq.n	800ab48 <http_send_data_ssi+0x340>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	781b      	ldrb	r3, [r3, #0]
 800ab3a:	2b0a      	cmp	r3, #10
 800ab3c:	d004      	beq.n	800ab48 <http_send_data_ssi+0x340>
                                      (*ssi->parsed == '\r'))) {
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800ab44:	2b0d      	cmp	r3, #13
 800ab46:	d10a      	bne.n	800ab5e <http_send_data_ssi+0x356>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	68db      	ldr	r3, [r3, #12]
 800ab4c:	1e5a      	subs	r2, r3, #1
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	1c5a      	adds	r2, r3, #1
 800ab58:	693b      	ldr	r3, [r7, #16]
 800ab5a:	601a      	str	r2, [r3, #0]
          break;
 800ab5c:	e14e      	b.n	800adfc <http_send_data_ssi+0x5f4>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	781a      	ldrb	r2, [r3, #0]
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	7d9b      	ldrb	r3, [r3, #22]
 800ab68:	495f      	ldr	r1, [pc, #380]	; (800ace8 <http_send_data_ssi+0x4e0>)
 800ab6a:	00db      	lsls	r3, r3, #3
 800ab6c:	440b      	add	r3, r1
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	6939      	ldr	r1, [r7, #16]
 800ab72:	8a09      	ldrh	r1, [r1, #16]
 800ab74:	440b      	add	r3, r1
 800ab76:	781b      	ldrb	r3, [r3, #0]
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	d17b      	bne.n	800ac74 <http_send_data_ssi+0x46c>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	68db      	ldr	r3, [r3, #12]
 800ab80:	1e5a      	subs	r2, r3, #1
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	1c5a      	adds	r2, r3, #1
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	601a      	str	r2, [r3, #0]
          ssi->tag_index++;
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	8a1b      	ldrh	r3, [r3, #16]
 800ab94:	3301      	adds	r3, #1
 800ab96:	b29a      	uxth	r2, r3
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	821a      	strh	r2, [r3, #16]

          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	7d9b      	ldrb	r3, [r3, #22]
 800aba0:	4a51      	ldr	r2, [pc, #324]	; (800ace8 <http_send_data_ssi+0x4e0>)
 800aba2:	00db      	lsls	r3, r3, #3
 800aba4:	4413      	add	r3, r2
 800aba6:	685b      	ldr	r3, [r3, #4]
 800aba8:	693a      	ldr	r2, [r7, #16]
 800abaa:	8a12      	ldrh	r2, [r2, #16]
 800abac:	4413      	add	r3, r2
 800abae:	781b      	ldrb	r3, [r3, #0]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	f040 8123 	bne.w	800adfc <http_send_data_ssi+0x5f4>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	2200      	movs	r2, #0
 800abba:	829a      	strh	r2, [r3, #20]
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 800abbc:	6838      	ldr	r0, [r7, #0]
 800abbe:	f7ff faeb 	bl	800a198 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	2200      	movs	r2, #0
 800abc6:	821a      	strh	r2, [r3, #16]
            ssi->tag_state = TAG_SENDING;
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800abce:	331a      	adds	r3, #26
 800abd0:	2204      	movs	r2, #4
 800abd2:	701a      	strb	r2, [r3, #0]
            ssi->tag_end = ssi->parsed;
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	681a      	ldr	r2, [r3, #0]
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	609a      	str	r2, [r3, #8]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->parsed = ssi->tag_started;
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	685a      	ldr	r2, [r3, #4]
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	601a      	str	r2, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	689a      	ldr	r2, [r3, #8]
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	699b      	ldr	r3, [r3, #24]
 800abec:	429a      	cmp	r2, r3
 800abee:	f240 8105 	bls.w	800adfc <http_send_data_ssi+0x5f4>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	685a      	ldr	r2, [r3, #4]
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	699b      	ldr	r3, [r3, #24]
 800abfa:	1ad3      	subs	r3, r2, r3
 800abfc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ac00:	4293      	cmp	r3, r2
 800ac02:	dc06      	bgt.n	800ac12 <http_send_data_ssi+0x40a>
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	685a      	ldr	r2, [r3, #4]
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	699b      	ldr	r3, [r3, #24]
 800ac0c:	1ad3      	subs	r3, r2, r3
 800ac0e:	b29b      	uxth	r3, r3
 800ac10:	e001      	b.n	800ac16 <http_send_data_ssi+0x40e>
 800ac12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ac16:	81fb      	strh	r3, [r7, #14]
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	6999      	ldr	r1, [r3, #24]
 800ac1c:	f107 020e 	add.w	r2, r7, #14
 800ac20:	2300      	movs	r3, #0
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f7ff f982 	bl	8009f2c <http_write>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 800ac2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	f040 80e3 	bne.w	800adfc <http_send_data_ssi+0x5f4>
                data_to_send = 1;
 800ac36:	2301      	movs	r3, #1
 800ac38:	75bb      	strb	r3, [r7, #22]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
                if (ssi->tag_started <= hs->file) {
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	685a      	ldr	r2, [r3, #4]
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	699b      	ldr	r3, [r3, #24]
 800ac42:	429a      	cmp	r2, r3
 800ac44:	d809      	bhi.n	800ac5a <http_send_data_ssi+0x452>
                  /* pretend to have sent the tag, too */
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	689a      	ldr	r2, [r3, #8]
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	1ad3      	subs	r3, r2, r3
 800ac50:	b29a      	uxth	r2, r3
 800ac52:	89fb      	ldrh	r3, [r7, #14]
 800ac54:	4413      	add	r3, r2
 800ac56:	b29b      	uxth	r3, r3
 800ac58:	81fb      	strh	r3, [r7, #14]
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	699b      	ldr	r3, [r3, #24]
 800ac5e:	89fa      	ldrh	r2, [r7, #14]
 800ac60:	441a      	add	r2, r3
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac6a:	89fa      	ldrh	r2, [r7, #14]
 800ac6c:	1a9a      	subs	r2, r3, r2
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	625a      	str	r2, [r3, #36]	; 0x24
 800ac72:	e0c3      	b.n	800adfc <http_send_data_ssi+0x5f4>
            }
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	68db      	ldr	r3, [r3, #12]
 800ac78:	1e5a      	subs	r2, r3, #1
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	1c5a      	adds	r2, r3, #1
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800ac8e:	331a      	adds	r3, #26
 800ac90:	2200      	movs	r2, #0
 800ac92:	701a      	strb	r2, [r3, #0]
        }
        break;
 800ac94:	e0b2      	b.n	800adfc <http_send_data_ssi+0x5f4>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if (ssi->tag_end > hs->file) {
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	689a      	ldr	r2, [r3, #8]
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	699b      	ldr	r3, [r3, #24]
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	d95c      	bls.n	800ad5c <http_send_data_ssi+0x554>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	685a      	ldr	r2, [r3, #4]
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	699b      	ldr	r3, [r3, #24]
 800acaa:	429a      	cmp	r2, r3
 800acac:	d206      	bcs.n	800acbc <http_send_data_ssi+0x4b4>
 800acae:	4b0b      	ldr	r3, [pc, #44]	; (800acdc <http_send_data_ssi+0x4d4>)
 800acb0:	f240 52ac 	movw	r2, #1452	; 0x5ac
 800acb4:	490d      	ldr	r1, [pc, #52]	; (800acec <http_send_data_ssi+0x4e4>)
 800acb6:	480b      	ldr	r0, [pc, #44]	; (800ace4 <http_send_data_ssi+0x4dc>)
 800acb8:	f00b fce0 	bl	801667c <iprintf>
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	685a      	ldr	r2, [r3, #4]
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	699b      	ldr	r3, [r3, #24]
 800acc4:	1ad3      	subs	r3, r2, r3
 800acc6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800acca:	4293      	cmp	r3, r2
 800accc:	dc10      	bgt.n	800acf0 <http_send_data_ssi+0x4e8>
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	685a      	ldr	r2, [r3, #4]
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	699b      	ldr	r3, [r3, #24]
 800acd6:	1ad3      	subs	r3, r2, r3
 800acd8:	b29b      	uxth	r3, r3
 800acda:	e00b      	b.n	800acf4 <http_send_data_ssi+0x4ec>
 800acdc:	08018b44 	.word	0x08018b44
 800ace0:	08018c74 	.word	0x08018c74
 800ace4:	08018b8c 	.word	0x08018b8c
 800ace8:	0801f7ac 	.word	0x0801f7ac
 800acec:	08018c8c 	.word	0x08018c8c
 800acf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800acf4:	81fb      	strh	r3, [r7, #14]
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 800acf6:	89fb      	ldrh	r3, [r7, #14]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d00a      	beq.n	800ad12 <http_send_data_ssi+0x50a>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	6999      	ldr	r1, [r3, #24]
 800ad00:	f107 020e 	add.w	r2, r7, #14
 800ad04:	2300      	movs	r3, #0
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f7ff f910 	bl	8009f2c <http_write>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	75fb      	strb	r3, [r7, #23]
 800ad10:	e001      	b.n	800ad16 <http_send_data_ssi+0x50e>
          } else {
            err = ERR_OK;
 800ad12:	2300      	movs	r3, #0
 800ad14:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 800ad16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d16e      	bne.n	800adfc <http_send_data_ssi+0x5f4>
            data_to_send = 1;
 800ad1e:	2301      	movs	r3, #1
 800ad20:	75bb      	strb	r3, [r7, #22]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
            if (ssi->tag_started <= hs->file) {
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	685a      	ldr	r2, [r3, #4]
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	699b      	ldr	r3, [r3, #24]
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	d809      	bhi.n	800ad42 <http_send_data_ssi+0x53a>
              /* pretend to have sent the tag, too */
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	689a      	ldr	r2, [r3, #8]
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	685b      	ldr	r3, [r3, #4]
 800ad36:	1ad3      	subs	r3, r2, r3
 800ad38:	b29a      	uxth	r2, r3
 800ad3a:	89fb      	ldrh	r3, [r7, #14]
 800ad3c:	4413      	add	r3, r2
 800ad3e:	b29b      	uxth	r3, r3
 800ad40:	81fb      	strh	r3, [r7, #14]
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	699b      	ldr	r3, [r3, #24]
 800ad46:	89fa      	ldrh	r2, [r7, #14]
 800ad48:	441a      	add	r2, r3
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad52:	89fa      	ldrh	r2, [r7, #14]
 800ad54:	1a9a      	subs	r2, r3, r2
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	625a      	str	r2, [r3, #36]	; 0x24
 800ad5a:	e04f      	b.n	800adfc <http_send_data_ssi+0x5f4>
          }
        } else {
#if LWIP_HTTPD_SSI_MULTIPART
          if (ssi->tag_index >= ssi->tag_insert_len) {
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	8a1a      	ldrh	r2, [r3, #16]
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	8a5b      	ldrh	r3, [r3, #18]
 800ad64:	429a      	cmp	r2, r3
 800ad66:	d30b      	bcc.n	800ad80 <http_send_data_ssi+0x578>
            /* Did the last SSIHandler have more to send? */
            if (ssi->tag_part != HTTPD_LAST_TAG_PART) {
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	8a9b      	ldrh	r3, [r3, #20]
 800ad6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d005      	beq.n	800ad80 <http_send_data_ssi+0x578>
              /* If so, call it again */
              ssi->tag_index = 0;
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	2200      	movs	r2, #0
 800ad78:	821a      	strh	r2, [r3, #16]
              get_tag_insert(hs);
 800ad7a:	6838      	ldr	r0, [r7, #0]
 800ad7c:	f7ff fa0c 	bl	800a198 <get_tag_insert>
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if (ssi->tag_index < ssi->tag_insert_len) {
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	8a1a      	ldrh	r2, [r3, #16]
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	8a5b      	ldrh	r3, [r3, #18]
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	d222      	bcs.n	800add2 <http_send_data_ssi+0x5ca>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	8a5a      	ldrh	r2, [r3, #18]
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	8a1b      	ldrh	r3, [r3, #16]
 800ad94:	1ad3      	subs	r3, r2, r3
 800ad96:	b29b      	uxth	r3, r3
 800ad98:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	8a1b      	ldrh	r3, [r3, #16]
 800ad9e:	3328      	adds	r3, #40	; 0x28
 800ada0:	693a      	ldr	r2, [r7, #16]
 800ada2:	4413      	add	r3, r2
 800ada4:	1c59      	adds	r1, r3, #1
 800ada6:	f107 020e 	add.w	r2, r7, #14
 800adaa:	2301      	movs	r3, #1
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f7ff f8bd 	bl	8009f2c <http_write>
 800adb2:	4603      	mov	r3, r0
 800adb4:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 800adb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d11e      	bne.n	800adfc <http_send_data_ssi+0x5f4>
              data_to_send = 1;
 800adbe:	2301      	movs	r3, #1
 800adc0:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 800adc2:	693b      	ldr	r3, [r7, #16]
 800adc4:	8a1a      	ldrh	r2, [r3, #16]
 800adc6:	89fb      	ldrh	r3, [r7, #14]
 800adc8:	4413      	add	r3, r2
 800adca:	b29a      	uxth	r2, r3
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	821a      	strh	r2, [r3, #16]
 800add0:	e014      	b.n	800adfc <http_send_data_ssi+0x5f4>
              /* Don't return here: keep on sending data */
            }
          } else {
#if LWIP_HTTPD_SSI_MULTIPART
            if (ssi->tag_part == HTTPD_LAST_TAG_PART)
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	8a9b      	ldrh	r3, [r3, #20]
 800add6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800adda:	4293      	cmp	r3, r2
 800addc:	d10e      	bne.n	800adfc <http_send_data_ssi+0x5f4>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	2200      	movs	r2, #0
 800ade2:	821a      	strh	r2, [r3, #16]
              ssi->tag_state = TAG_NONE;
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800adea:	331a      	adds	r3, #26
 800adec:	2200      	movs	r2, #0
 800adee:	701a      	strb	r2, [r3, #0]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	689a      	ldr	r2, [r3, #8]
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	601a      	str	r2, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 800adf8:	e000      	b.n	800adfc <http_send_data_ssi+0x5f4>
        default:
          break;
 800adfa:	bf00      	nop
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800ae02:	331a      	adds	r3, #26
 800ae04:	781b      	ldrb	r3, [r3, #0]
 800ae06:	2b04      	cmp	r3, #4
 800ae08:	d003      	beq.n	800ae12 <http_send_data_ssi+0x60a>
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	68db      	ldr	r3, [r3, #12]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d004      	beq.n	800ae1c <http_send_data_ssi+0x614>
 800ae12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	f43f ad4e 	beq.w	800a8b8 <http_send_data_ssi+0xb0>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 800ae1c:	693b      	ldr	r3, [r7, #16]
 800ae1e:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800ae22:	331a      	adds	r3, #26
 800ae24:	781b      	ldrb	r3, [r3, #0]
 800ae26:	2b04      	cmp	r3, #4
 800ae28:	d034      	beq.n	800ae94 <http_send_data_ssi+0x68c>
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	681a      	ldr	r2, [r3, #0]
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	699b      	ldr	r3, [r3, #24]
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d92e      	bls.n	800ae94 <http_send_data_ssi+0x68c>
      ssi->parsed = ssi->tag_started;
      ssi->tag_started = hs->buf;
    } else
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ && !LWIP_HTTPD_SSI_INCLUDE_TAG */
    {
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	681a      	ldr	r2, [r3, #0]
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	699b      	ldr	r3, [r3, #24]
 800ae3e:	1ad3      	subs	r3, r2, r3
 800ae40:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ae44:	4293      	cmp	r3, r2
 800ae46:	dc06      	bgt.n	800ae56 <http_send_data_ssi+0x64e>
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	681a      	ldr	r2, [r3, #0]
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	699b      	ldr	r3, [r3, #24]
 800ae50:	1ad3      	subs	r3, r2, r3
 800ae52:	b29b      	uxth	r3, r3
 800ae54:	e001      	b.n	800ae5a <http_send_data_ssi+0x652>
 800ae56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ae5a:	81fb      	strh	r3, [r7, #14]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	6999      	ldr	r1, [r3, #24]
 800ae60:	f107 020e 	add.w	r2, r7, #14
 800ae64:	2300      	movs	r3, #0
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f7ff f860 	bl	8009f2c <http_write>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800ae70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d10d      	bne.n	800ae94 <http_send_data_ssi+0x68c>
      data_to_send = 1;
 800ae78:	2301      	movs	r3, #1
 800ae7a:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	699b      	ldr	r3, [r3, #24]
 800ae80:	89fa      	ldrh	r2, [r7, #14]
 800ae82:	441a      	add	r2, r3
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae8c:	89fa      	ldrh	r2, [r7, #14]
 800ae8e:	1a9a      	subs	r2, r3, r2
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
 800ae94:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3718      	adds	r7, #24
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}
 800ae9e:	bf00      	nop

0800aea0 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b084      	sub	sp, #16
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d101      	bne.n	800aeb8 <http_send+0x18>
    return 0;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	e048      	b.n	800af4a <http_send+0xaa>
  }
#endif /* LWIP_HTTPD_FS_ASYNC_READ */

#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Do we have any more header data to send for this file? */
  if (hs->hdr_index < NUM_FILE_HDR_STRINGS) {
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800aebe:	2b04      	cmp	r3, #4
 800aec0:	d812      	bhi.n	800aee8 <http_send+0x48>
    data_to_send = http_send_headers(pcb, hs);
 800aec2:	6839      	ldr	r1, [r7, #0]
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f7ff fb65 	bl	800a594 <http_send_headers>
 800aeca:	4603      	mov	r3, r0
 800aecc:	73fb      	strb	r3, [r7, #15]
    if ((data_to_send == HTTP_DATA_TO_SEND_FREED) ||
 800aece:	7bfb      	ldrb	r3, [r7, #15]
 800aed0:	2b03      	cmp	r3, #3
 800aed2:	d007      	beq.n	800aee4 <http_send+0x44>
 800aed4:	7bfb      	ldrb	r3, [r7, #15]
 800aed6:	2b01      	cmp	r3, #1
 800aed8:	d006      	beq.n	800aee8 <http_send+0x48>
        ((data_to_send != HTTP_DATA_TO_SEND_CONTINUE) &&
         (hs->hdr_index < NUM_FILE_HDR_STRINGS))) {
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
        ((data_to_send != HTTP_DATA_TO_SEND_CONTINUE) &&
 800aee0:	2b04      	cmp	r3, #4
 800aee2:	d801      	bhi.n	800aee8 <http_send+0x48>
      return data_to_send;
 800aee4:	7bfb      	ldrb	r3, [r7, #15]
 800aee6:	e030      	b.n	800af4a <http_send+0xaa>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d108      	bne.n	800af02 <http_send+0x62>
    if (!http_check_eof(pcb, hs)) {
 800aef0:	6839      	ldr	r1, [r7, #0]
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f7ff fc22 	bl	800a73c <http_check_eof>
 800aef8:	4603      	mov	r3, r0
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d101      	bne.n	800af02 <http_send+0x62>
      return 0;
 800aefe:	2300      	movs	r3, #0
 800af00:	e023      	b.n	800af4a <http_send+0xaa>
    }
  }

#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af06:	2b00      	cmp	r3, #0
 800af08:	d006      	beq.n	800af18 <http_send+0x78>
    data_to_send = http_send_data_ssi(pcb, hs);
 800af0a:	6839      	ldr	r1, [r7, #0]
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f7ff fc7b 	bl	800a808 <http_send_data_ssi>
 800af12:	4603      	mov	r3, r0
 800af14:	73fb      	strb	r3, [r7, #15]
 800af16:	e005      	b.n	800af24 <http_send+0x84>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800af18:	6839      	ldr	r1, [r7, #0]
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f7ff fc3e 	bl	800a79c <http_send_data_nonssi>
 800af20:	4603      	mov	r3, r0
 800af22:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d10d      	bne.n	800af48 <http_send+0xa8>
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	695b      	ldr	r3, [r3, #20]
 800af30:	4618      	mov	r0, r3
 800af32:	f7fe ff67 	bl	8009e04 <fs_bytes_left>
 800af36:	4603      	mov	r3, r0
 800af38:	2b00      	cmp	r3, #0
 800af3a:	dc05      	bgt.n	800af48 <http_send+0xa8>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800af3c:	6839      	ldr	r1, [r7, #0]
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f7ff f8bf 	bl	800a0c2 <http_eof>
    return 0;
 800af44:	2300      	movs	r3, #0
 800af46:	e000      	b.n	800af4a <http_send+0xaa>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800af48:	7bfb      	ldrb	r3, [r7, #15]
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3710      	adds	r7, #16
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}
	...

0800af54 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b084      	sub	sp, #16
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	4a1c      	ldr	r2, [pc, #112]	; (800afd4 <http_get_404_file+0x80>)
 800af62:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800af64:	687a      	ldr	r2, [r7, #4]
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	4619      	mov	r1, r3
 800af6c:	4610      	mov	r0, r2
 800af6e:	f7fe ff01 	bl	8009d74 <fs_open>
 800af72:	4603      	mov	r3, r0
 800af74:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800af76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d024      	beq.n	800afc8 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	4a15      	ldr	r2, [pc, #84]	; (800afd8 <http_get_404_file+0x84>)
 800af82:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800af84:	687a      	ldr	r2, [r7, #4]
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	4619      	mov	r1, r3
 800af8c:	4610      	mov	r0, r2
 800af8e:	f7fe fef1 	bl	8009d74 <fs_open>
 800af92:	4603      	mov	r3, r0
 800af94:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800af96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d014      	beq.n	800afc8 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	4a0e      	ldr	r2, [pc, #56]	; (800afdc <http_get_404_file+0x88>)
 800afa2:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800afa4:	687a      	ldr	r2, [r7, #4]
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	4619      	mov	r1, r3
 800afac:	4610      	mov	r0, r2
 800afae:	f7fe fee1 	bl	8009d74 <fs_open>
 800afb2:	4603      	mov	r3, r0
 800afb4:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800afb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d004      	beq.n	800afc8 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	2200      	movs	r2, #0
 800afc2:	601a      	str	r2, [r3, #0]
        return NULL;
 800afc4:	2300      	movs	r3, #0
 800afc6:	e000      	b.n	800afca <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800afc8:	687b      	ldr	r3, [r7, #4]
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3710      	adds	r7, #16
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}
 800afd2:	bf00      	nop
 800afd4:	08018ca4 	.word	0x08018ca4
 800afd8:	08018cb0 	.word	0x08018cb0
 800afdc:	08018cbc 	.word	0x08018cbc

0800afe0 <http_handle_post_finished>:

#if LWIP_HTTPD_SUPPORT_POST
static err_t
http_handle_post_finished(struct http_state *hs)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b082      	sub	sp, #8
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  }
  hs->post_finished = 1;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
  /* application error or POST finished */
  /* NULL-terminate the buffer */
  http_uri_buf[0] = 0;
 800afe8:	4b08      	ldr	r3, [pc, #32]	; (800b00c <http_handle_post_finished+0x2c>)
 800afea:	2200      	movs	r2, #0
 800afec:	701a      	strb	r2, [r3, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 800afee:	223f      	movs	r2, #63	; 0x3f
 800aff0:	4906      	ldr	r1, [pc, #24]	; (800b00c <http_handle_post_finished+0x2c>)
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f7f5 fdfa 	bl	8000bec <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 800aff8:	2200      	movs	r2, #0
 800affa:	4904      	ldr	r1, [pc, #16]	; (800b00c <http_handle_post_finished+0x2c>)
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f000 faab 	bl	800b558 <http_find_file>
 800b002:	4603      	mov	r3, r0
}
 800b004:	4618      	mov	r0, r3
 800b006:	3708      	adds	r7, #8
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}
 800b00c:	200014fc 	.word	0x200014fc

0800b010 <http_post_rxpbuf>:
 * @return ERR_OK if passed successfully, another err_t if the response file
 *         hasn't been found (after POST finished)
 */
static err_t
http_post_rxpbuf(struct http_state *hs, struct pbuf *p)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b084      	sub	sp, #16
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	6039      	str	r1, [r7, #0]
  err_t err;

  if (p != NULL) {
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d014      	beq.n	800b04a <http_post_rxpbuf+0x3a>
    /* adjust remaining Content-Length */
    if (hs->post_content_len_left < p->tot_len) {
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b026:	683a      	ldr	r2, [r7, #0]
 800b028:	8912      	ldrh	r2, [r2, #8]
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d204      	bcs.n	800b038 <http_post_rxpbuf+0x28>
      hs->post_content_len_left = 0;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2200      	movs	r2, #0
 800b032:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800b036:	e008      	b.n	800b04a <http_post_rxpbuf+0x3a>
    } else {
      hs->post_content_len_left -= p->tot_len;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b03e:	683a      	ldr	r2, [r7, #0]
 800b040:	8912      	ldrh	r2, [r2, #8]
 800b042:	1a9a      	subs	r2, r3, r2
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  /* prevent connection being closed if httpd_post_data_recved() is called nested */
  hs->unrecved_bytes++;
#endif
  if (p != NULL) {
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d006      	beq.n	800b05e <http_post_rxpbuf+0x4e>
    err = httpd_post_receive_data(hs, p);
 800b050:	6839      	ldr	r1, [r7, #0]
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f7f5 fd8a 	bl	8000b6c <httpd_post_receive_data>
 800b058:	4603      	mov	r3, r0
 800b05a:	73fb      	strb	r3, [r7, #15]
 800b05c:	e001      	b.n	800b062 <http_post_rxpbuf+0x52>
  } else {
    err = ERR_OK;
 800b05e:	2300      	movs	r3, #0
 800b060:	73fb      	strb	r3, [r7, #15]
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  hs->unrecved_bytes--;
#endif
  if (err != ERR_OK) {
 800b062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d003      	beq.n	800b072 <http_post_rxpbuf+0x62>
    /* Ignore remaining content in case of application error */
    hs->post_content_len_left = 0;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2200      	movs	r2, #0
 800b06e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  }
  if (hs->post_content_len_left == 0) {
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d104      	bne.n	800b086 <http_post_rxpbuf+0x76>
    if (hs->unrecved_bytes != 0) {
      return ERR_OK;
    }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
    /* application error or POST finished */
    return http_handle_post_finished(hs);
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f7ff ffaf 	bl	800afe0 <http_handle_post_finished>
 800b082:	4603      	mov	r3, r0
 800b084:	e000      	b.n	800b088 <http_post_rxpbuf+0x78>
  }

  return ERR_OK;
 800b086:	2300      	movs	r3, #0
}
 800b088:	4618      	mov	r0, r3
 800b08a:	3710      	adds	r7, #16
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <http_post_request>:
 *         another err_t: Error parsing POST or denied by the application
 */
static err_t
http_post_request(struct pbuf *inp, struct http_state *hs,
                  char *data, u16_t data_len, char *uri, char *uri_end)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b092      	sub	sp, #72	; 0x48
 800b094:	af04      	add	r7, sp, #16
 800b096:	60f8      	str	r0, [r7, #12]
 800b098:	60b9      	str	r1, [r7, #8]
 800b09a:	607a      	str	r2, [r7, #4]
 800b09c:	807b      	strh	r3, [r7, #2]
  err_t err;
  /* search for end-of-header (first double-CRLF) */
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 800b09e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0a0:	1c58      	adds	r0, r3, #1
 800b0a2:	887a      	ldrh	r2, [r7, #2]
 800b0a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0a6:	1c59      	adds	r1, r3, #1
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	1acb      	subs	r3, r1, r3
 800b0ac:	1ad3      	subs	r3, r2, r3
 800b0ae:	461a      	mov	r2, r3
 800b0b0:	4965      	ldr	r1, [pc, #404]	; (800b248 <http_post_request+0x1b8>)
 800b0b2:	f000 fe71 	bl	800bd98 <lwip_strnstr>
 800b0b6:	62b8      	str	r0, [r7, #40]	; 0x28

  if (crlfcrlf != NULL) {
 800b0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	f000 80be 	beq.w	800b23c <http_post_request+0x1ac>
    /* search for "Content-Length: " */
#define HTTP_HDR_CONTENT_LEN                "Content-Length: "
#define HTTP_HDR_CONTENT_LEN_LEN            16
#define HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN  10
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 800b0c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0c2:	1c58      	adds	r0, r3, #1
 800b0c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0c6:	3301      	adds	r3, #1
 800b0c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0ca:	1ad3      	subs	r3, r2, r3
 800b0cc:	461a      	mov	r2, r3
 800b0ce:	495f      	ldr	r1, [pc, #380]	; (800b24c <http_post_request+0x1bc>)
 800b0d0:	f000 fe62 	bl	800bd98 <lwip_strnstr>
 800b0d4:	6278      	str	r0, [r7, #36]	; 0x24
    if (scontent_len != NULL) {
 800b0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	f000 80ac 	beq.w	800b236 <http_post_request+0x1a6>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 800b0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e0:	3310      	adds	r3, #16
 800b0e2:	220a      	movs	r2, #10
 800b0e4:	495a      	ldr	r1, [pc, #360]	; (800b250 <http_post_request+0x1c0>)
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f000 fe56 	bl	800bd98 <lwip_strnstr>
 800b0ec:	6238      	str	r0, [r7, #32]
      if (scontent_len_end != NULL) {
 800b0ee:	6a3b      	ldr	r3, [r7, #32]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	f000 80a0 	beq.w	800b236 <http_post_request+0x1a6>
        int content_len;
        char *content_len_num = scontent_len + HTTP_HDR_CONTENT_LEN_LEN;
 800b0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f8:	3310      	adds	r3, #16
 800b0fa:	61fb      	str	r3, [r7, #28]
        content_len = atoi(content_len_num);
 800b0fc:	69f8      	ldr	r0, [r7, #28]
 800b0fe:	f00b fa57 	bl	80165b0 <atoi>
 800b102:	6378      	str	r0, [r7, #52]	; 0x34
        if (content_len == 0) {
 800b104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b106:	2b00      	cmp	r3, #0
 800b108:	d10b      	bne.n	800b122 <http_post_request+0x92>
          /* if atoi returns 0 on error, fix this */
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 800b10a:	69fb      	ldr	r3, [r7, #28]
 800b10c:	781b      	ldrb	r3, [r3, #0]
 800b10e:	2b30      	cmp	r3, #48	; 0x30
 800b110:	d104      	bne.n	800b11c <http_post_request+0x8c>
 800b112:	69fb      	ldr	r3, [r7, #28]
 800b114:	3301      	adds	r3, #1
 800b116:	781b      	ldrb	r3, [r3, #0]
 800b118:	2b0d      	cmp	r3, #13
 800b11a:	d002      	beq.n	800b122 <http_post_request+0x92>
            content_len = -1;
 800b11c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b120:	637b      	str	r3, [r7, #52]	; 0x34
          }
        }
        if (content_len >= 0) {
 800b122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b124:	2b00      	cmp	r3, #0
 800b126:	f2c0 8083 	blt.w	800b230 <http_post_request+0x1a0>
          /* adjust length of HTTP header passed to application */
          const char *hdr_start_after_uri = uri_end + 1;
 800b12a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b12c:	3301      	adds	r3, #1
 800b12e:	61bb      	str	r3, [r7, #24]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 800b130:	887a      	ldrh	r2, [r7, #2]
 800b132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b134:	1d19      	adds	r1, r3, #4
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	1acb      	subs	r3, r1, r3
 800b13a:	429a      	cmp	r2, r3
 800b13c:	db05      	blt.n	800b14a <http_post_request+0xba>
 800b13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b140:	1d1a      	adds	r2, r3, #4
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	1ad3      	subs	r3, r2, r3
 800b146:	b29b      	uxth	r3, r3
 800b148:	e000      	b.n	800b14c <http_post_request+0xbc>
 800b14a:	887b      	ldrh	r3, [r7, #2]
 800b14c:	82fb      	strh	r3, [r7, #22]
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 800b14e:	887a      	ldrh	r2, [r7, #2]
 800b150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b152:	1d19      	adds	r1, r3, #4
 800b154:	69bb      	ldr	r3, [r7, #24]
 800b156:	1acb      	subs	r3, r1, r3
 800b158:	429a      	cmp	r2, r3
 800b15a:	db05      	blt.n	800b168 <http_post_request+0xd8>
 800b15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b15e:	1d1a      	adds	r2, r3, #4
 800b160:	69bb      	ldr	r3, [r7, #24]
 800b162:	1ad3      	subs	r3, r2, r3
 800b164:	b29b      	uxth	r3, r3
 800b166:	e000      	b.n	800b16a <http_post_request+0xda>
 800b168:	887b      	ldrh	r3, [r7, #2]
 800b16a:	82bb      	strh	r3, [r7, #20]
          u8_t post_auto_wnd = 1;
 800b16c:	2301      	movs	r3, #1
 800b16e:	74bb      	strb	r3, [r7, #18]
          http_uri_buf[0] = 0;
 800b170:	4b38      	ldr	r3, [pc, #224]	; (800b254 <http_post_request+0x1c4>)
 800b172:	2200      	movs	r2, #0
 800b174:	701a      	strb	r2, [r3, #0]
          /* trim http header */
          *crlfcrlf = 0;
 800b176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b178:	2200      	movs	r2, #0
 800b17a:	701a      	strb	r2, [r3, #0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 800b17c:	8aba      	ldrh	r2, [r7, #20]
 800b17e:	f107 0312 	add.w	r3, r7, #18
 800b182:	9303      	str	r3, [sp, #12]
 800b184:	233f      	movs	r3, #63	; 0x3f
 800b186:	9302      	str	r3, [sp, #8]
 800b188:	4b32      	ldr	r3, [pc, #200]	; (800b254 <http_post_request+0x1c4>)
 800b18a:	9301      	str	r3, [sp, #4]
 800b18c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b18e:	9300      	str	r3, [sp, #0]
 800b190:	4613      	mov	r3, r2
 800b192:	69ba      	ldr	r2, [r7, #24]
 800b194:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b196:	68b8      	ldr	r0, [r7, #8]
 800b198:	f7f5 fcb8 	bl	8000b0c <httpd_post_begin>
 800b19c:	4603      	mov	r3, r0
 800b19e:	74fb      	strb	r3, [r7, #19]
                                 http_uri_buf, LWIP_HTTPD_URI_BUF_LEN, &post_auto_wnd);
          if (err == ERR_OK) {
 800b1a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d13c      	bne.n	800b222 <http_post_request+0x192>
            /* try to pass in data of the first pbuf(s) */
            struct pbuf *q = inp;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	633b      	str	r3, [r7, #48]	; 0x30
            u16_t start_offset = hdr_len;
 800b1ac:	8afb      	ldrh	r3, [r7, #22]
 800b1ae:	85fb      	strh	r3, [r7, #46]	; 0x2e
#if LWIP_HTTPD_POST_MANUAL_WND
            hs->no_auto_wnd = !post_auto_wnd;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
            /* set the Content-Length to be received for this POST */
            hs->post_content_len_left = (u32_t)content_len;
 800b1b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

            /* get to the pbuf where the body starts */
            while ((q != NULL) && (q->len <= start_offset)) {
 800b1b8:	e007      	b.n	800b1ca <http_post_request+0x13a>
              start_offset -= q->len;
 800b1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1bc:	895b      	ldrh	r3, [r3, #10]
 800b1be:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b1c0:	1ad3      	subs	r3, r2, r3
 800b1c2:	85fb      	strh	r3, [r7, #46]	; 0x2e
              q = q->next;
 800b1c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	633b      	str	r3, [r7, #48]	; 0x30
            while ((q != NULL) && (q->len <= start_offset)) {
 800b1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d004      	beq.n	800b1da <http_post_request+0x14a>
 800b1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d2:	895b      	ldrh	r3, [r3, #10]
 800b1d4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b1d6:	429a      	cmp	r2, r3
 800b1d8:	d2ef      	bcs.n	800b1ba <http_post_request+0x12a>
            }
            if (q != NULL) {
 800b1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d00d      	beq.n	800b1fc <http_post_request+0x16c>
              /* hide the remaining HTTP header */
              pbuf_remove_header(q, start_offset);
 800b1e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b1e6:	f002 f8b5 	bl	800d354 <pbuf_remove_header>
              if (!post_auto_wnd) {
                /* already tcp_recved() this data... */
                hs->unrecved_bytes = q->tot_len;
              }
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
              pbuf_ref(q);
 800b1ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b1ec:	f002 f9d8 	bl	800d5a0 <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 800b1f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b1f2:	68b8      	ldr	r0, [r7, #8]
 800b1f4:	f7ff ff0c 	bl	800b010 <http_post_rxpbuf>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	e021      	b.n	800b240 <http_post_request+0x1b0>
            } else if (hs->post_content_len_left == 0) {
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b202:	2b00      	cmp	r3, #0
 800b204:	d10b      	bne.n	800b21e <http_post_request+0x18e>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 800b206:	2241      	movs	r2, #65	; 0x41
 800b208:	2100      	movs	r1, #0
 800b20a:	2000      	movs	r0, #0
 800b20c:	f001 fe44 	bl	800ce98 <pbuf_alloc>
 800b210:	6338      	str	r0, [r7, #48]	; 0x30
              return http_post_rxpbuf(hs, q);
 800b212:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b214:	68b8      	ldr	r0, [r7, #8]
 800b216:	f7ff fefb 	bl	800b010 <http_post_rxpbuf>
 800b21a:	4603      	mov	r3, r0
 800b21c:	e010      	b.n	800b240 <http_post_request+0x1b0>
            } else {
              return ERR_OK;
 800b21e:	2300      	movs	r3, #0
 800b220:	e00e      	b.n	800b240 <http_post_request+0x1b0>
            }
          } else {
            /* return file passed from application */
            return http_find_file(hs, http_uri_buf, 0);
 800b222:	2200      	movs	r2, #0
 800b224:	490b      	ldr	r1, [pc, #44]	; (800b254 <http_post_request+0x1c4>)
 800b226:	68b8      	ldr	r0, [r7, #8]
 800b228:	f000 f996 	bl	800b558 <http_find_file>
 800b22c:	4603      	mov	r3, r0
 800b22e:	e007      	b.n	800b240 <http_post_request+0x1b0>
          }
        } else {
          LWIP_DEBUGF(HTTPD_DEBUG, ("POST received invalid Content-Length: %s\n",
                                    content_len_num));
          return ERR_ARG;
 800b230:	f06f 030f 	mvn.w	r3, #15
 800b234:	e004      	b.n	800b240 <http_post_request+0x1b0>
    }
    /* If we come here, headers are fully received (double-crlf), but Content-Length
       was not included. Since this is currently the only supported method, we have
       to fail in this case! */
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error when parsing Content-Length\n"));
    return ERR_ARG;
 800b236:	f06f 030f 	mvn.w	r3, #15
 800b23a:	e001      	b.n	800b240 <http_post_request+0x1b0>
  }
  /* if we come here, the POST is incomplete */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  return ERR_INPROGRESS;
 800b23c:	f06f 0304 	mvn.w	r3, #4
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  return ERR_ARG;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800b240:	4618      	mov	r0, r3
 800b242:	3738      	adds	r7, #56	; 0x38
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}
 800b248:	08018cc8 	.word	0x08018cc8
 800b24c:	08018754 	.word	0x08018754
 800b250:	08018c38 	.word	0x08018c38
 800b254:	200014fc 	.word	0x200014fc

0800b258 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b092      	sub	sp, #72	; 0x48
 800b25c:	af02      	add	r7, sp, #8
 800b25e:	60f8      	str	r0, [r7, #12]
 800b260:	60b9      	str	r1, [r7, #8]
 800b262:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800b268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d106      	bne.n	800b27c <http_parse_request+0x24>
 800b26e:	4b87      	ldr	r3, [pc, #540]	; (800b48c <http_parse_request+0x234>)
 800b270:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800b274:	4986      	ldr	r1, [pc, #536]	; (800b490 <http_parse_request+0x238>)
 800b276:	4887      	ldr	r0, [pc, #540]	; (800b494 <http_parse_request+0x23c>)
 800b278:	f00b fa00 	bl	801667c <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d106      	bne.n	800b290 <http_parse_request+0x38>
 800b282:	4b82      	ldr	r3, [pc, #520]	; (800b48c <http_parse_request+0x234>)
 800b284:	f240 72af 	movw	r2, #1967	; 0x7af
 800b288:	4983      	ldr	r1, [pc, #524]	; (800b498 <http_parse_request+0x240>)
 800b28a:	4882      	ldr	r0, [pc, #520]	; (800b494 <http_parse_request+0x23c>)
 800b28c:	f00b f9f6 	bl	801667c <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	695b      	ldr	r3, [r3, #20]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d103      	bne.n	800b2a0 <http_parse_request+0x48>
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	699b      	ldr	r3, [r3, #24]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d002      	beq.n	800b2a6 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800b2a0:	f06f 0307 	mvn.w	r3, #7
 800b2a4:	e0ed      	b.n	800b482 <http_parse_request+0x22a>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	6a1b      	ldr	r3, [r3, #32]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d103      	bne.n	800b2b6 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2b2:	621a      	str	r2, [r3, #32]
 800b2b4:	e005      	b.n	800b2c2 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	6a1b      	ldr	r3, [r3, #32]
 800b2ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f002 f991 	bl	800d5e4 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800b2c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b2c4:	f002 f96c 	bl	800d5a0 <pbuf_ref>

  if (hs->req->next != NULL) {
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	6a1b      	ldr	r3, [r3, #32]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d012      	beq.n	800b2f8 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	6a1b      	ldr	r3, [r3, #32]
 800b2d6:	891b      	ldrh	r3, [r3, #8]
 800b2d8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	bf28      	it	cs
 800b2e0:	4613      	movcs	r3, r2
 800b2e2:	877b      	strh	r3, [r7, #58]	; 0x3a
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	6a18      	ldr	r0, [r3, #32]
 800b2e8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	496b      	ldr	r1, [pc, #428]	; (800b49c <http_parse_request+0x244>)
 800b2ee:	f002 faa1 	bl	800d834 <pbuf_copy_partial>
    data = httpd_req_buf;
 800b2f2:	4b6a      	ldr	r3, [pc, #424]	; (800b49c <http_parse_request+0x244>)
 800b2f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2f6:	e005      	b.n	800b304 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800b2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2fa:	685b      	ldr	r3, [r3, #4]
 800b2fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    data_len = p->len;
 800b2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b300:	895b      	ldrh	r3, [r3, #10]
 800b302:	877b      	strh	r3, [r7, #58]	; 0x3a
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800b304:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b306:	2b06      	cmp	r3, #6
 800b308:	f240 80a1 	bls.w	800b44e <http_parse_request+0x1f6>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800b30c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b30e:	461a      	mov	r2, r3
 800b310:	4963      	ldr	r1, [pc, #396]	; (800b4a0 <http_parse_request+0x248>)
 800b312:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b314:	f000 fd40 	bl	800bd98 <lwip_strnstr>
 800b318:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800b31a:	6a3b      	ldr	r3, [r7, #32]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	f000 8096 	beq.w	800b44e <http_parse_request+0x1f6>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
 800b322:	2300      	movs	r3, #0
 800b324:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800b326:	2300      	movs	r3, #0
 800b328:	633b      	str	r3, [r7, #48]	; 0x30
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800b32a:	2204      	movs	r2, #4
 800b32c:	495d      	ldr	r1, [pc, #372]	; (800b4a4 <http_parse_request+0x24c>)
 800b32e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b330:	f00b faea 	bl	8016908 <strncmp>
 800b334:	4603      	mov	r3, r0
 800b336:	2b00      	cmp	r3, #0
 800b338:	d103      	bne.n	800b342 <http_parse_request+0xea>
        sp1 = data + 3;
 800b33a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b33c:	3303      	adds	r3, #3
 800b33e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b340:	e014      	b.n	800b36c <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received GET request\"\n"));
#if LWIP_HTTPD_SUPPORT_POST
      } else if (!strncmp(data, "POST ", 5)) {
 800b342:	2205      	movs	r2, #5
 800b344:	4958      	ldr	r1, [pc, #352]	; (800b4a8 <http_parse_request+0x250>)
 800b346:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b348:	f00b fade 	bl	8016908 <strncmp>
 800b34c:	4603      	mov	r3, r0
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d105      	bne.n	800b35e <http_parse_request+0x106>
        /* store request type */
        is_post = 1;
 800b352:	2301      	movs	r3, #1
 800b354:	637b      	str	r3, [r7, #52]	; 0x34
        sp1 = data + 4;
 800b356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b358:	3304      	adds	r3, #4
 800b35a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b35c:	e006      	b.n	800b36c <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received POST request\n"));
#endif /* LWIP_HTTPD_SUPPORT_POST */
      } else {
        /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
        data[4] = 0;
 800b35e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b360:	3304      	adds	r3, #4
 800b362:	2200      	movs	r2, #0
 800b364:	701a      	strb	r2, [r3, #0]
        /* unsupported method! */
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
 800b366:	f06f 030f 	mvn.w	r3, #15
 800b36a:	e08a      	b.n	800b482 <http_parse_request+0x22a>
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800b36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b36e:	1c5a      	adds	r2, r3, #1
 800b370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b372:	1ad3      	subs	r3, r2, r3
 800b374:	b29b      	uxth	r3, r3
 800b376:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b378:	1ad3      	subs	r3, r2, r3
 800b37a:	83fb      	strh	r3, [r7, #30]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800b37c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b37e:	3301      	adds	r3, #1
 800b380:	8bfa      	ldrh	r2, [r7, #30]
 800b382:	494a      	ldr	r1, [pc, #296]	; (800b4ac <http_parse_request+0x254>)
 800b384:	4618      	mov	r0, r3
 800b386:	f000 fd07 	bl	800bd98 <lwip_strnstr>
 800b38a:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800b38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d10c      	bne.n	800b3ac <http_parse_request+0x154>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800b392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b394:	3301      	adds	r3, #1
 800b396:	8bfa      	ldrh	r2, [r7, #30]
 800b398:	4941      	ldr	r1, [pc, #260]	; (800b4a0 <http_parse_request+0x248>)
 800b39a:	4618      	mov	r0, r3
 800b39c:	f000 fcfc 	bl	800bd98 <lwip_strnstr>
 800b3a0:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	633b      	str	r3, [r7, #48]	; 0x30
#if LWIP_HTTPD_SUPPORT_POST
        if (is_post) {
 800b3a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d163      	bne.n	800b474 <http_parse_request+0x21c>
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800b3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ae:	3301      	adds	r3, #1
 800b3b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3b2:	1ad3      	subs	r3, r2, r3
 800b3b4:	83bb      	strh	r3, [r7, #28]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800b3b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d048      	beq.n	800b44e <http_parse_request+0x1f6>
 800b3bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	d944      	bls.n	800b44e <http_parse_request+0x1f6>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800b3c4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b3c6:	461a      	mov	r2, r3
 800b3c8:	4939      	ldr	r1, [pc, #228]	; (800b4b0 <http_parse_request+0x258>)
 800b3ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b3cc:	f000 fce4 	bl	800bd98 <lwip_strnstr>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d03b      	beq.n	800b44e <http_parse_request+0x1f6>
          char *uri = sp1 + 1;
 800b3d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3d8:	3301      	adds	r3, #1
 800b3da:	61bb      	str	r3, [r7, #24]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800b3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3de:	2200      	movs	r2, #0
 800b3e0:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800b3e2:	8bbb      	ldrh	r3, [r7, #28]
 800b3e4:	69ba      	ldr	r2, [r7, #24]
 800b3e6:	4413      	add	r3, r2
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	701a      	strb	r2, [r3, #0]
          LWIP_DEBUGF(HTTPD_DEBUG, ("Received \"%s\" request for URI: \"%s\"\n",
                                    data, uri));
#if LWIP_HTTPD_SUPPORT_POST
          if (is_post) {
 800b3ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d026      	beq.n	800b440 <http_parse_request+0x1e8>
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
            struct pbuf *q = hs->req;
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	6a1b      	ldr	r3, [r3, #32]
 800b3f6:	617b      	str	r3, [r7, #20]
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            struct pbuf *q = inp;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            err = http_post_request(q, hs, data, data_len, uri, sp2);
 800b3f8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3fc:	9301      	str	r3, [sp, #4]
 800b3fe:	69bb      	ldr	r3, [r7, #24]
 800b400:	9300      	str	r3, [sp, #0]
 800b402:	4613      	mov	r3, r2
 800b404:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b406:	68b9      	ldr	r1, [r7, #8]
 800b408:	6978      	ldr	r0, [r7, #20]
 800b40a:	f7ff fe41 	bl	800b090 <http_post_request>
 800b40e:	4603      	mov	r3, r0
 800b410:	74fb      	strb	r3, [r7, #19]
            if (err != ERR_OK) {
 800b412:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d00a      	beq.n	800b430 <http_parse_request+0x1d8>
              /* restore header for next try */
              *sp1 = ' ';
 800b41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b41c:	2220      	movs	r2, #32
 800b41e:	701a      	strb	r2, [r3, #0]
              *sp2 = ' ';
 800b420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b422:	2220      	movs	r2, #32
 800b424:	701a      	strb	r2, [r3, #0]
              uri[uri_len] = ' ';
 800b426:	8bbb      	ldrh	r3, [r7, #28]
 800b428:	69ba      	ldr	r2, [r7, #24]
 800b42a:	4413      	add	r3, r2
 800b42c:	2220      	movs	r2, #32
 800b42e:	701a      	strb	r2, [r3, #0]
            }
            if (err == ERR_ARG) {
 800b430:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b434:	f113 0f10 	cmn.w	r3, #16
 800b438:	d01e      	beq.n	800b478 <http_parse_request+0x220>
              goto badrequest;
            }
            return err;
 800b43a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b43e:	e020      	b.n	800b482 <http_parse_request+0x22a>
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800b440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b442:	69b9      	ldr	r1, [r7, #24]
 800b444:	68b8      	ldr	r0, [r7, #8]
 800b446:	f000 f887 	bl	800b558 <http_find_file>
 800b44a:	4603      	mov	r3, r0
 800b44c:	e019      	b.n	800b482 <http_parse_request+0x22a>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	6a1b      	ldr	r3, [r3, #32]
 800b452:	4618      	mov	r0, r3
 800b454:	f002 f88c 	bl	800d570 <pbuf_clen>
 800b458:	4603      	mov	r3, r0
 800b45a:	823b      	strh	r3, [r7, #16]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	6a1b      	ldr	r3, [r3, #32]
 800b460:	891b      	ldrh	r3, [r3, #8]
 800b462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b466:	d209      	bcs.n	800b47c <http_parse_request+0x224>
 800b468:	8a3b      	ldrh	r3, [r7, #16]
 800b46a:	2b05      	cmp	r3, #5
 800b46c:	d806      	bhi.n	800b47c <http_parse_request+0x224>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800b46e:	f06f 0304 	mvn.w	r3, #4
 800b472:	e006      	b.n	800b482 <http_parse_request+0x22a>
          goto badrequest;
 800b474:	bf00      	nop
 800b476:	e002      	b.n	800b47e <http_parse_request+0x226>
              goto badrequest;
 800b478:	bf00      	nop
 800b47a:	e000      	b.n	800b47e <http_parse_request+0x226>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
 800b47c:	bf00      	nop
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800b47e:	f06f 030f 	mvn.w	r3, #15
  }
}
 800b482:	4618      	mov	r0, r3
 800b484:	3740      	adds	r7, #64	; 0x40
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}
 800b48a:	bf00      	nop
 800b48c:	08018b44 	.word	0x08018b44
 800b490:	08018cd0 	.word	0x08018cd0
 800b494:	08018b8c 	.word	0x08018b8c
 800b498:	08018bb4 	.word	0x08018bb4
 800b49c:	200010fc 	.word	0x200010fc
 800b4a0:	08018c38 	.word	0x08018c38
 800b4a4:	08018cdc 	.word	0x08018cdc
 800b4a8:	08018ce4 	.word	0x08018ce4
 800b4ac:	08018cec 	.word	0x08018cec
 800b4b0:	08018cc8 	.word	0x08018cc8

0800b4b4 <http_uri_is_ssi>:
 *
 * @return 1 for SSI, 0 for standard files
 */
static u8_t
http_uri_is_ssi(struct fs_file *file, const char *uri)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b088      	sub	sp, #32
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
 800b4bc:	6039      	str	r1, [r7, #0]
  size_t loop;
  u8_t tag_check = 0;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	76fb      	strb	r3, [r7, #27]
  if (file != NULL) {
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d040      	beq.n	800b54a <http_uri_is_ssi+0x96>
    /* See if we have been asked for an shtml file and, if so,
        enable tag checking. */
    const char *ext = NULL, *sub;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	617b      	str	r3, [r7, #20]
    char *param = (char *)strstr(uri, "?");
 800b4cc:	213f      	movs	r1, #63	; 0x3f
 800b4ce:	6838      	ldr	r0, [r7, #0]
 800b4d0:	f00b fa05 	bl	80168de <strchr>
 800b4d4:	60f8      	str	r0, [r7, #12]
    if (param != NULL) {
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d002      	beq.n	800b4e2 <http_uri_is_ssi+0x2e>
      /* separate uri from parameters for now, set back later */
      *param = 0;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	701a      	strb	r2, [r3, #0]
    }
    sub = uri;
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	613b      	str	r3, [r7, #16]
    ext = uri;
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	617b      	str	r3, [r7, #20]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 800b4ea:	212e      	movs	r1, #46	; 0x2e
 800b4ec:	6938      	ldr	r0, [r7, #16]
 800b4ee:	f00b f9f6 	bl	80168de <strchr>
 800b4f2:	6138      	str	r0, [r7, #16]
 800b4f4:	e009      	b.n	800b50a <http_uri_is_ssi+0x56>
      ext = sub;
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	617b      	str	r3, [r7, #20]
      sub++;
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	3301      	adds	r3, #1
 800b4fe:	613b      	str	r3, [r7, #16]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 800b500:	212e      	movs	r1, #46	; 0x2e
 800b502:	6938      	ldr	r0, [r7, #16]
 800b504:	f00b f9eb 	bl	80168de <strchr>
 800b508:	6138      	str	r0, [r7, #16]
 800b50a:	693b      	ldr	r3, [r7, #16]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d1f2      	bne.n	800b4f6 <http_uri_is_ssi+0x42>
    }
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800b510:	2300      	movs	r3, #0
 800b512:	61fb      	str	r3, [r7, #28]
 800b514:	e010      	b.n	800b538 <http_uri_is_ssi+0x84>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 800b516:	4a0f      	ldr	r2, [pc, #60]	; (800b554 <http_uri_is_ssi+0xa0>)
 800b518:	69fb      	ldr	r3, [r7, #28]
 800b51a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b51e:	4619      	mov	r1, r3
 800b520:	6978      	ldr	r0, [r7, #20]
 800b522:	f000 fc6f 	bl	800be04 <lwip_stricmp>
 800b526:	4603      	mov	r3, r0
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d102      	bne.n	800b532 <http_uri_is_ssi+0x7e>
        tag_check = 1;
 800b52c:	2301      	movs	r3, #1
 800b52e:	76fb      	strb	r3, [r7, #27]
        break;
 800b530:	e005      	b.n	800b53e <http_uri_is_ssi+0x8a>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800b532:	69fb      	ldr	r3, [r7, #28]
 800b534:	3301      	adds	r3, #1
 800b536:	61fb      	str	r3, [r7, #28]
 800b538:	69fb      	ldr	r3, [r7, #28]
 800b53a:	2b04      	cmp	r3, #4
 800b53c:	d9eb      	bls.n	800b516 <http_uri_is_ssi+0x62>
      }
    }
    if (param != NULL) {
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d002      	beq.n	800b54a <http_uri_is_ssi+0x96>
      *param = '?';
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	223f      	movs	r2, #63	; 0x3f
 800b548:	701a      	strb	r2, [r3, #0]
    }
  }
  return tag_check;
 800b54a:	7efb      	ldrb	r3, [r7, #27]
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3720      	adds	r7, #32
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}
 800b554:	0801f770 	.word	0x0801f770

0800b558 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800b558:	b590      	push	{r4, r7, lr}
 800b55a:	b093      	sub	sp, #76	; 0x4c
 800b55c:	af02      	add	r7, sp, #8
 800b55e:	60f8      	str	r0, [r7, #12]
 800b560:	60b9      	str	r1, [r7, #8]
 800b562:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800b564:	2300      	movs	r3, #0
 800b566:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800b568:	2300      	movs	r3, #0
 800b56a:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800b56c:	2300      	movs	r3, #0
 800b56e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	4618      	mov	r0, r3
 800b576:	f7f4 fe35 	bl	80001e4 <strlen>
 800b57a:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800b57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d072      	beq.n	800b668 <http_find_file+0x110>
 800b582:	68ba      	ldr	r2, [r7, #8]
 800b584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b586:	3b01      	subs	r3, #1
 800b588:	4413      	add	r3, r2
 800b58a:	781b      	ldrb	r3, [r3, #0]
 800b58c:	2b2f      	cmp	r3, #47	; 0x2f
 800b58e:	d16b      	bne.n	800b668 <http_find_file+0x110>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800b590:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800b592:	4a80      	ldr	r2, [pc, #512]	; (800b794 <http_find_file+0x23c>)
 800b594:	4293      	cmp	r3, r2
 800b596:	d102      	bne.n	800b59e <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800b598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b59a:	2b01      	cmp	r3, #1
 800b59c:	d164      	bne.n	800b668 <http_find_file+0x110>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800b59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a0:	3b01      	subs	r3, #1
 800b5a2:	2b3f      	cmp	r3, #63	; 0x3f
 800b5a4:	bf28      	it	cs
 800b5a6:	233f      	movcs	r3, #63	; 0x3f
 800b5a8:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 800b5aa:	6a3b      	ldr	r3, [r7, #32]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d00a      	beq.n	800b5c6 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	6a3a      	ldr	r2, [r7, #32]
 800b5b4:	4619      	mov	r1, r3
 800b5b6:	4877      	ldr	r0, [pc, #476]	; (800b794 <http_find_file+0x23c>)
 800b5b8:	f00b f830 	bl	801661c <memcpy>
      http_uri_buf[copy_len] = 0;
 800b5bc:	4a75      	ldr	r2, [pc, #468]	; (800b794 <http_find_file+0x23c>)
 800b5be:	6a3b      	ldr	r3, [r7, #32]
 800b5c0:	4413      	add	r3, r2
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5ca:	e04a      	b.n	800b662 <http_find_file+0x10a>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800b5cc:	6a3b      	ldr	r3, [r7, #32]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d028      	beq.n	800b624 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800b5d2:	6a3b      	ldr	r3, [r7, #32]
 800b5d4:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800b5d8:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 800b5da:	69fb      	ldr	r3, [r7, #28]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d01e      	beq.n	800b61e <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800b5e0:	4a6d      	ldr	r2, [pc, #436]	; (800b798 <http_find_file+0x240>)
 800b5e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f7f4 fdfb 	bl	80001e4 <strlen>
 800b5ee:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800b5f0:	69ba      	ldr	r2, [r7, #24]
 800b5f2:	69fb      	ldr	r3, [r7, #28]
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	bf28      	it	cs
 800b5f8:	4613      	movcs	r3, r2
 800b5fa:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800b5fc:	6a3b      	ldr	r3, [r7, #32]
 800b5fe:	4a65      	ldr	r2, [pc, #404]	; (800b794 <http_find_file+0x23c>)
 800b600:	1898      	adds	r0, r3, r2
 800b602:	4a65      	ldr	r2, [pc, #404]	; (800b798 <http_find_file+0x240>)
 800b604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b606:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b60a:	697a      	ldr	r2, [r7, #20]
 800b60c:	4619      	mov	r1, r3
 800b60e:	f00b f805 	bl	801661c <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800b612:	6a3a      	ldr	r2, [r7, #32]
 800b614:	697b      	ldr	r3, [r7, #20]
 800b616:	4413      	add	r3, r2
 800b618:	4a5e      	ldr	r2, [pc, #376]	; (800b794 <http_find_file+0x23c>)
 800b61a:	2100      	movs	r1, #0
 800b61c:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800b61e:	4b5d      	ldr	r3, [pc, #372]	; (800b794 <http_find_file+0x23c>)
 800b620:	62bb      	str	r3, [r7, #40]	; 0x28
 800b622:	e004      	b.n	800b62e <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800b624:	4a5c      	ldr	r2, [pc, #368]	; (800b798 <http_find_file+0x240>)
 800b626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b628:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b62c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b632:	4618      	mov	r0, r3
 800b634:	f7fe fb9e 	bl	8009d74 <fs_open>
 800b638:	4603      	mov	r3, r0
 800b63a:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 800b63c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d10b      	bne.n	800b65c <http_find_file+0x104>
        uri = file_name;
 800b644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b646:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
 800b64c:	4a52      	ldr	r2, [pc, #328]	; (800b798 <http_find_file+0x240>)
 800b64e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b650:	00db      	lsls	r3, r3, #3
 800b652:	4413      	add	r3, r2
 800b654:	791b      	ldrb	r3, [r3, #4]
 800b656:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI */
        break;
 800b65a:	e005      	b.n	800b668 <http_find_file+0x110>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800b65c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b65e:	3301      	adds	r3, #1
 800b660:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b664:	2b04      	cmp	r3, #4
 800b666:	d9b1      	bls.n	800b5cc <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800b668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d176      	bne.n	800b75c <http_find_file+0x204>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	213f      	movs	r1, #63	; 0x3f
 800b672:	4618      	mov	r0, r3
 800b674:	f00b f933 	bl	80168de <strchr>
 800b678:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800b67a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d005      	beq.n	800b68c <http_find_file+0x134>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800b680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b682:	2200      	movs	r2, #0
 800b684:	701a      	strb	r2, [r3, #0]
      params++;
 800b686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b688:	3301      	adds	r3, #1
 800b68a:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 800b68c:	4b43      	ldr	r3, [pc, #268]	; (800b79c <http_find_file+0x244>)
 800b68e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b692:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 800b694:	4b42      	ldr	r3, [pc, #264]	; (800b7a0 <http_find_file+0x248>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d034      	beq.n	800b706 <http_find_file+0x1ae>
 800b69c:	4b41      	ldr	r3, [pc, #260]	; (800b7a4 <http_find_file+0x24c>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d030      	beq.n	800b706 <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	633b      	str	r3, [r7, #48]	; 0x30
 800b6a8:	e028      	b.n	800b6fc <http_find_file+0x1a4>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 800b6aa:	68b8      	ldr	r0, [r7, #8]
 800b6ac:	4b3d      	ldr	r3, [pc, #244]	; (800b7a4 <http_find_file+0x24c>)
 800b6ae:	681a      	ldr	r2, [r3, #0]
 800b6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b2:	00db      	lsls	r3, r3, #3
 800b6b4:	4413      	add	r3, r2
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4619      	mov	r1, r3
 800b6ba:	f7f4 fd89 	bl	80001d0 <strcmp>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d118      	bne.n	800b6f6 <http_find_file+0x19e>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 800b6c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b6c6:	68f8      	ldr	r0, [r7, #12]
 800b6c8:	f7fe fd08 	bl	800a0dc <extract_uri_parameters>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	4a33      	ldr	r2, [pc, #204]	; (800b79c <http_find_file+0x244>)
 800b6d0:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800b6d2:	4b34      	ldr	r3, [pc, #208]	; (800b7a4 <http_find_file+0x24c>)
 800b6d4:	681a      	ldr	r2, [r3, #0]
 800b6d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d8:	00db      	lsls	r3, r3, #3
 800b6da:	4413      	add	r3, r2
 800b6dc:	685c      	ldr	r4, [r3, #4]
 800b6de:	4b2f      	ldr	r3, [pc, #188]	; (800b79c <http_find_file+0x244>)
 800b6e0:	6819      	ldr	r1, [r3, #0]
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                         hs->param_vals);
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	3370      	adds	r3, #112	; 0x70
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800b6ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6ee:	47a0      	blx	r4
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	60bb      	str	r3, [r7, #8]
          break;
 800b6f4:	e007      	b.n	800b706 <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 800b6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f8:	3301      	adds	r3, #1
 800b6fa:	633b      	str	r3, [r7, #48]	; 0x30
 800b6fc:	4b28      	ldr	r3, [pc, #160]	; (800b7a0 <http_find_file+0x248>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b702:	429a      	cmp	r2, r3
 800b704:	dbd1      	blt.n	800b6aa <http_find_file+0x152>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	68ba      	ldr	r2, [r7, #8]
 800b70a:	4611      	mov	r1, r2
 800b70c:	4618      	mov	r0, r3
 800b70e:	f7fe fb31 	bl	8009d74 <fs_open>
 800b712:	4603      	mov	r3, r0
 800b714:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 800b716:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d102      	bne.n	800b724 <http_find_file+0x1cc>
      file = &hs->file_handle;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	63bb      	str	r3, [r7, #56]	; 0x38
 800b722:	e006      	b.n	800b732 <http_find_file+0x1da>
    } else {
      file = http_get_404_file(hs, &uri);
 800b724:	f107 0308 	add.w	r3, r7, #8
 800b728:	4619      	mov	r1, r3
 800b72a:	68f8      	ldr	r0, [r7, #12]
 800b72c:	f7ff fc12 	bl	800af54 <http_get_404_file>
 800b730:	63b8      	str	r0, [r7, #56]	; 0x38
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 800b732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b734:	2b00      	cmp	r3, #0
 800b736:	d011      	beq.n	800b75c <http_find_file+0x204>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 800b738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b73a:	7c1b      	ldrb	r3, [r3, #16]
 800b73c:	f003 0308 	and.w	r3, r3, #8
 800b740:	2b00      	cmp	r3, #0
 800b742:	d003      	beq.n	800b74c <http_find_file+0x1f4>
        tag_check = 1;
 800b744:	2301      	movs	r3, #1
 800b746:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b74a:	e007      	b.n	800b75c <http_find_file+0x204>
      } else {
#if LWIP_HTTPD_SSI_BY_FILE_EXTENSION
        tag_check = http_uri_is_ssi(file, uri);
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	4619      	mov	r1, r3
 800b750:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b752:	f7ff feaf 	bl	800b4b4 <http_uri_is_ssi>
 800b756:	4603      	mov	r3, r0
 800b758:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800b75c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d106      	bne.n	800b770 <http_find_file+0x218>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800b762:	f107 0308 	add.w	r3, r7, #8
 800b766:	4619      	mov	r1, r3
 800b768:	68f8      	ldr	r0, [r7, #12]
 800b76a:	f7ff fbf3 	bl	800af54 <http_get_404_file>
 800b76e:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800b770:	68ba      	ldr	r2, [r7, #8]
 800b772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b774:	9301      	str	r3, [sp, #4]
 800b776:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b77a:	9300      	str	r3, [sp, #0]
 800b77c:	4613      	mov	r3, r2
 800b77e:	687a      	ldr	r2, [r7, #4]
 800b780:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b782:	68f8      	ldr	r0, [r7, #12]
 800b784:	f000 f810 	bl	800b7a8 <http_init_file>
 800b788:	4603      	mov	r3, r0
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3744      	adds	r7, #68	; 0x44
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd90      	pop	{r4, r7, pc}
 800b792:	bf00      	nop
 800b794:	200014fc 	.word	0x200014fc
 800b798:	0801f784 	.word	0x0801f784
 800b79c:	20001550 	.word	0x20001550
 800b7a0:	2000154c 	.word	0x2000154c
 800b7a4:	20001548 	.word	0x20001548

0800b7a8 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b088      	sub	sp, #32
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	60f8      	str	r0, [r7, #12]
 800b7b0:	60b9      	str	r1, [r7, #8]
 800b7b2:	607a      	str	r2, [r7, #4]
 800b7b4:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d071      	beq.n	800b8a0 <http_init_file+0xf8>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d106      	bne.n	800b7d2 <http_init_file+0x2a>
 800b7c4:	4b47      	ldr	r3, [pc, #284]	; (800b8e4 <http_init_file+0x13c>)
 800b7c6:	f640 120b 	movw	r2, #2315	; 0x90b
 800b7ca:	4947      	ldr	r1, [pc, #284]	; (800b8e8 <http_init_file+0x140>)
 800b7cc:	4847      	ldr	r0, [pc, #284]	; (800b8ec <http_init_file+0x144>)
 800b7ce:	f00a ff55 	bl	801667c <iprintf>
#endif

#if LWIP_HTTPD_SSI
    if (tag_check) {
 800b7d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d01e      	beq.n	800b818 <http_init_file+0x70>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 800b7da:	f7fe fb22 	bl	8009e22 <http_ssi_state_alloc>
 800b7de:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 800b7e0:	69fb      	ldr	r3, [r7, #28]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d018      	beq.n	800b818 <http_init_file+0x70>
        ssi->tag_index = 0;
 800b7e6:	69fb      	ldr	r3, [r7, #28]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	821a      	strh	r2, [r3, #16]
        ssi->tag_state = TAG_NONE;
 800b7ec:	69fb      	ldr	r3, [r7, #28]
 800b7ee:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800b7f2:	331a      	adds	r3, #26
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	701a      	strb	r2, [r3, #0]
        ssi->parsed = file->data;
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	681a      	ldr	r2, [r3, #0]
 800b7fc:	69fb      	ldr	r3, [r7, #28]
 800b7fe:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	685b      	ldr	r3, [r3, #4]
 800b804:	461a      	mov	r2, r3
 800b806:	69fb      	ldr	r3, [r7, #28]
 800b808:	60da      	str	r2, [r3, #12]
        ssi->tag_end = file->data;
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	681a      	ldr	r2, [r3, #0]
 800b80e:	69fb      	ldr	r3, [r7, #28]
 800b810:	609a      	str	r2, [r3, #8]
        hs->ssi = ssi;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	69fa      	ldr	r2, [r7, #28]
 800b816:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	68ba      	ldr	r2, [r7, #8]
 800b81c:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	681a      	ldr	r2, [r3, #0]
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	685b      	ldr	r3, [r3, #4]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	da06      	bge.n	800b83c <http_init_file+0x94>
 800b82e:	4b2d      	ldr	r3, [pc, #180]	; (800b8e4 <http_init_file+0x13c>)
 800b830:	f640 1234 	movw	r2, #2356	; 0x934
 800b834:	492e      	ldr	r1, [pc, #184]	; (800b8f0 <http_init_file+0x148>)
 800b836:	482d      	ldr	r0, [pc, #180]	; (800b8ec <http_init_file+0x144>)
 800b838:	f00a ff20 	bl	801667c <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	685b      	ldr	r3, [r3, #4]
 800b840:	461a      	mov	r2, r3
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2200      	movs	r2, #0
 800b84a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d032      	beq.n	800b8ba <http_init_file+0x112>
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	695b      	ldr	r3, [r3, #20]
 800b858:	7c1b      	ldrb	r3, [r3, #16]
 800b85a:	f003 0301 	and.w	r3, r3, #1
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d02b      	beq.n	800b8ba <http_init_file+0x112>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	6998      	ldr	r0, [r3, #24]
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b86a:	461a      	mov	r2, r3
 800b86c:	4921      	ldr	r1, [pc, #132]	; (800b8f4 <http_init_file+0x14c>)
 800b86e:	f000 fa93 	bl	800bd98 <lwip_strnstr>
 800b872:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 800b874:	69bb      	ldr	r3, [r7, #24]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d01f      	beq.n	800b8ba <http_init_file+0x112>
        int diff = file_start + 4 - hs->file;
 800b87a:	69bb      	ldr	r3, [r7, #24]
 800b87c:	1d1a      	adds	r2, r3, #4
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	699b      	ldr	r3, [r3, #24]
 800b882:	1ad3      	subs	r3, r2, r3
 800b884:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	699a      	ldr	r2, [r3, #24]
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	441a      	add	r2, r3
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b896:	697b      	ldr	r3, [r7, #20]
 800b898:	1ad2      	subs	r2, r2, r3
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	625a      	str	r2, [r3, #36]	; 0x24
 800b89e:	e00c      	b.n	800b8ba <http_init_file+0x112>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  }
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Determine the HTTP headers to send based on the file extension of
   * the requested URI. */
  if ((hs->handle == NULL) || ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) == 0)) {
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	695b      	ldr	r3, [r3, #20]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d006      	beq.n	800b8d0 <http_init_file+0x128>
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	695b      	ldr	r3, [r3, #20]
 800b8c6:	7c1b      	ldrb	r3, [r3, #16]
 800b8c8:	f003 0301 	and.w	r3, r3, #1
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d103      	bne.n	800b8d8 <http_init_file+0x130>
    get_http_headers(hs, uri);
 800b8d0:	6839      	ldr	r1, [r7, #0]
 800b8d2:	68f8      	ldr	r0, [r7, #12]
 800b8d4:	f7fe fd32 	bl	800a33c <get_http_headers>
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800b8d8:	2300      	movs	r3, #0
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3720      	adds	r7, #32
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}
 800b8e2:	bf00      	nop
 800b8e4:	08018b44 	.word	0x08018b44
 800b8e8:	08018cf0 	.word	0x08018cf0
 800b8ec:	08018b8c 	.word	0x08018b8c
 800b8f0:	08018d04 	.word	0x08018d04
 800b8f4:	08018cc8 	.word	0x08018cc8

0800b8f8 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b084      	sub	sp, #16
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
 800b900:	460b      	mov	r3, r1
 800b902:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d002      	beq.n	800b914 <http_err+0x1c>
    http_state_free(hs);
 800b90e:	68f8      	ldr	r0, [r7, #12]
 800b910:	f7fe fafa 	bl	8009f08 <http_state_free>
  }
}
 800b914:	bf00      	nop
 800b916:	3710      	adds	r7, #16
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}

0800b91c <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b086      	sub	sp, #24
 800b920:	af00      	add	r7, sp, #0
 800b922:	60f8      	str	r0, [r7, #12]
 800b924:	60b9      	str	r1, [r7, #8]
 800b926:	4613      	mov	r3, r2
 800b928:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800b92e:	697b      	ldr	r3, [r7, #20]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d101      	bne.n	800b938 <http_sent+0x1c>
    return ERR_OK;
 800b934:	2300      	movs	r3, #0
 800b936:	e008      	b.n	800b94a <http_sent+0x2e>
  }

  hs->retries = 0;
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	2200      	movs	r2, #0
 800b93c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800b940:	6979      	ldr	r1, [r7, #20]
 800b942:	68b8      	ldr	r0, [r7, #8]
 800b944:	f7ff faac 	bl	800aea0 <http_send>

  return ERR_OK;
 800b948:	2300      	movs	r3, #0
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3718      	adds	r7, #24
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}

0800b952 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800b952:	b580      	push	{r7, lr}
 800b954:	b084      	sub	sp, #16
 800b956:	af00      	add	r7, sp, #0
 800b958:	6078      	str	r0, [r7, #4]
 800b95a:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d107      	bne.n	800b976 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800b966:	2100      	movs	r1, #0
 800b968:	6838      	ldr	r0, [r7, #0]
 800b96a:	f7fe fb9b 	bl	800a0a4 <http_close_conn>
 800b96e:	4603      	mov	r3, r0
 800b970:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800b972:	2300      	movs	r3, #0
 800b974:	e021      	b.n	800b9ba <http_poll+0x68>
  } else {
    hs->retries++;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b97c:	3301      	adds	r3, #1
 800b97e:	b2da      	uxtb	r2, r3
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b98c:	2b04      	cmp	r3, #4
 800b98e:	d105      	bne.n	800b99c <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800b990:	68f9      	ldr	r1, [r7, #12]
 800b992:	6838      	ldr	r0, [r7, #0]
 800b994:	f7fe fb86 	bl	800a0a4 <http_close_conn>
      return ERR_OK;
 800b998:	2300      	movs	r3, #0
 800b99a:	e00e      	b.n	800b9ba <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	695b      	ldr	r3, [r3, #20]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d009      	beq.n	800b9b8 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800b9a4:	68f9      	ldr	r1, [r7, #12]
 800b9a6:	6838      	ldr	r0, [r7, #0]
 800b9a8:	f7ff fa7a 	bl	800aea0 <http_send>
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d002      	beq.n	800b9b8 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800b9b2:	6838      	ldr	r0, [r7, #0]
 800b9b4:	f007 f8c2 	bl	8012b3c <tcp_output>
      }
    }
  }

  return ERR_OK;
 800b9b8:	2300      	movs	r3, #0
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3710      	adds	r7, #16
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}
	...

0800b9c4 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b086      	sub	sp, #24
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	60f8      	str	r0, [r7, #12]
 800b9cc:	60b9      	str	r1, [r7, #8]
 800b9ce:	607a      	str	r2, [r7, #4]
 800b9d0:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800b9d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d105      	bne.n	800b9ea <http_recv+0x26>
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d002      	beq.n	800b9ea <http_recv+0x26>
 800b9e4:	697b      	ldr	r3, [r7, #20]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d111      	bne.n	800ba0e <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d008      	beq.n	800ba02 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	891b      	ldrh	r3, [r3, #8]
 800b9f4:	4619      	mov	r1, r3
 800b9f6:	68b8      	ldr	r0, [r7, #8]
 800b9f8:	f002 fc94 	bl	800e324 <tcp_recved>
      pbuf_free(p);
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f001 fd2f 	bl	800d460 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800ba02:	6979      	ldr	r1, [r7, #20]
 800ba04:	68b8      	ldr	r0, [r7, #8]
 800ba06:	f7fe fb4d 	bl	800a0a4 <http_close_conn>
    return ERR_OK;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	e072      	b.n	800baf4 <http_recv+0x130>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	891b      	ldrh	r3, [r3, #8]
 800ba12:	4619      	mov	r1, r3
 800ba14:	68b8      	ldr	r0, [r7, #8]
 800ba16:	f002 fc85 	bl	800e324 <tcp_recved>
  }

#if LWIP_HTTPD_SUPPORT_POST
  if (hs->post_content_len_left > 0) {
 800ba1a:	697b      	ldr	r3, [r7, #20]
 800ba1c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d012      	beq.n	800ba4a <http_recv+0x86>
    /* reset idle counter when POST data is received */
    hs->retries = 0;
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	2200      	movs	r2, #0
 800ba28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    /* this is data for a POST, pass the complete pbuf to the application */
    http_post_rxpbuf(hs, p);
 800ba2c:	6879      	ldr	r1, [r7, #4]
 800ba2e:	6978      	ldr	r0, [r7, #20]
 800ba30:	f7ff faee 	bl	800b010 <http_post_rxpbuf>
    /* pbuf is passed to the application, don't free it! */
    if (hs->post_content_len_left == 0) {
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d103      	bne.n	800ba46 <http_recv+0x82>
      /* all data received, send response or close connection */
      http_send(pcb, hs);
 800ba3e:	6979      	ldr	r1, [r7, #20]
 800ba40:	68b8      	ldr	r0, [r7, #8]
 800ba42:	f7ff fa2d 	bl	800aea0 <http_send>
    }
    return ERR_OK;
 800ba46:	2300      	movs	r3, #0
 800ba48:	e054      	b.n	800baf4 <http_recv+0x130>
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	695b      	ldr	r3, [r3, #20]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d14c      	bne.n	800baec <http_recv+0x128>
      err_t parsed = http_parse_request(p, hs, pcb);
 800ba52:	68ba      	ldr	r2, [r7, #8]
 800ba54:	6979      	ldr	r1, [r7, #20]
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f7ff fbfe 	bl	800b258 <http_parse_request>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800ba60:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d015      	beq.n	800ba94 <http_recv+0xd0>
 800ba68:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ba6c:	f113 0f05 	cmn.w	r3, #5
 800ba70:	d010      	beq.n	800ba94 <http_recv+0xd0>
 800ba72:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ba76:	f113 0f10 	cmn.w	r3, #16
 800ba7a:	d00b      	beq.n	800ba94 <http_recv+0xd0>
 800ba7c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ba80:	f113 0f08 	cmn.w	r3, #8
 800ba84:	d006      	beq.n	800ba94 <http_recv+0xd0>
 800ba86:	4b1d      	ldr	r3, [pc, #116]	; (800bafc <http_recv+0x138>)
 800ba88:	f640 2204 	movw	r2, #2564	; 0xa04
 800ba8c:	491c      	ldr	r1, [pc, #112]	; (800bb00 <http_recv+0x13c>)
 800ba8e:	481d      	ldr	r0, [pc, #116]	; (800bb04 <http_recv+0x140>)
 800ba90:	f00a fdf4 	bl	801667c <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800ba94:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ba98:	f113 0f05 	cmn.w	r3, #5
 800ba9c:	d00b      	beq.n	800bab6 <http_recv+0xf2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800ba9e:	697b      	ldr	r3, [r7, #20]
 800baa0:	6a1b      	ldr	r3, [r3, #32]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d007      	beq.n	800bab6 <http_recv+0xf2>
          pbuf_free(hs->req);
 800baa6:	697b      	ldr	r3, [r7, #20]
 800baa8:	6a1b      	ldr	r3, [r3, #32]
 800baaa:	4618      	mov	r0, r3
 800baac:	f001 fcd8 	bl	800d460 <pbuf_free>
          hs->req = NULL;
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	2200      	movs	r2, #0
 800bab4:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f001 fcd2 	bl	800d460 <pbuf_free>
      if (parsed == ERR_OK) {
 800babc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d109      	bne.n	800bad8 <http_recv+0x114>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
 800bac4:	697b      	ldr	r3, [r7, #20]
 800bac6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d111      	bne.n	800baf2 <http_recv+0x12e>
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800bace:	6979      	ldr	r1, [r7, #20]
 800bad0:	68b8      	ldr	r0, [r7, #8]
 800bad2:	f7ff f9e5 	bl	800aea0 <http_send>
 800bad6:	e00c      	b.n	800baf2 <http_recv+0x12e>
        }
      } else if (parsed == ERR_ARG) {
 800bad8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800badc:	f113 0f10 	cmn.w	r3, #16
 800bae0:	d107      	bne.n	800baf2 <http_recv+0x12e>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800bae2:	6979      	ldr	r1, [r7, #20]
 800bae4:	68b8      	ldr	r0, [r7, #8]
 800bae6:	f7fe fadd 	bl	800a0a4 <http_close_conn>
 800baea:	e002      	b.n	800baf2 <http_recv+0x12e>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f001 fcb7 	bl	800d460 <pbuf_free>
    }
  }
  return ERR_OK;
 800baf2:	2300      	movs	r3, #0
}
 800baf4:	4618      	mov	r0, r3
 800baf6:	3718      	adds	r7, #24
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}
 800bafc:	08018b44 	.word	0x08018b44
 800bb00:	08018d24 	.word	0x08018d24
 800bb04:	08018b8c 	.word	0x08018b8c

0800bb08 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b086      	sub	sp, #24
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	60f8      	str	r0, [r7, #12]
 800bb10:	60b9      	str	r1, [r7, #8]
 800bb12:	4613      	mov	r3, r2
 800bb14:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800bb16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d102      	bne.n	800bb24 <http_accept+0x1c>
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d102      	bne.n	800bb2a <http_accept+0x22>
    return ERR_VAL;
 800bb24:	f06f 0305 	mvn.w	r3, #5
 800bb28:	e025      	b.n	800bb76 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800bb2a:	2101      	movs	r1, #1
 800bb2c:	68b8      	ldr	r0, [r7, #8]
 800bb2e:	f003 f8dd 	bl	800ecec <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800bb32:	f7fe f9ab 	bl	8009e8c <http_state_alloc>
 800bb36:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800bb38:	697b      	ldr	r3, [r7, #20]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d102      	bne.n	800bb44 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800bb3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bb42:	e018      	b.n	800bb76 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	68ba      	ldr	r2, [r7, #8]
 800bb48:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800bb4a:	6979      	ldr	r1, [r7, #20]
 800bb4c:	68b8      	ldr	r0, [r7, #8]
 800bb4e:	f003 facd 	bl	800f0ec <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800bb52:	490b      	ldr	r1, [pc, #44]	; (800bb80 <http_accept+0x78>)
 800bb54:	68b8      	ldr	r0, [r7, #8]
 800bb56:	f003 fadb 	bl	800f110 <tcp_recv>
  altcp_err(pcb, http_err);
 800bb5a:	490a      	ldr	r1, [pc, #40]	; (800bb84 <http_accept+0x7c>)
 800bb5c:	68b8      	ldr	r0, [r7, #8]
 800bb5e:	f003 fb1b 	bl	800f198 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800bb62:	2204      	movs	r2, #4
 800bb64:	4908      	ldr	r1, [pc, #32]	; (800bb88 <http_accept+0x80>)
 800bb66:	68b8      	ldr	r0, [r7, #8]
 800bb68:	f003 fb50 	bl	800f20c <tcp_poll>
  altcp_sent(pcb, http_sent);
 800bb6c:	4907      	ldr	r1, [pc, #28]	; (800bb8c <http_accept+0x84>)
 800bb6e:	68b8      	ldr	r0, [r7, #8]
 800bb70:	f003 faf0 	bl	800f154 <tcp_sent>

  return ERR_OK;
 800bb74:	2300      	movs	r3, #0
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	3718      	adds	r7, #24
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
 800bb7e:	bf00      	nop
 800bb80:	0800b9c5 	.word	0x0800b9c5
 800bb84:	0800b8f9 	.word	0x0800b8f9
 800bb88:	0800b953 	.word	0x0800b953
 800bb8c:	0800b91d 	.word	0x0800b91d

0800bb90 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b084      	sub	sp, #16
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
 800bb98:	460b      	mov	r3, r1
 800bb9a:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d029      	beq.n	800bbf6 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800bba2:	2101      	movs	r1, #1
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f003 f8a1 	bl	800ecec <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800bbaa:	887b      	ldrh	r3, [r7, #2]
 800bbac:	461a      	mov	r2, r3
 800bbae:	4914      	ldr	r1, [pc, #80]	; (800bc00 <httpd_init_pcb+0x70>)
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f002 f9e9 	bl	800df88 <tcp_bind>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800bbba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d006      	beq.n	800bbd0 <httpd_init_pcb+0x40>
 800bbc2:	4b10      	ldr	r3, [pc, #64]	; (800bc04 <httpd_init_pcb+0x74>)
 800bbc4:	f640 2257 	movw	r2, #2647	; 0xa57
 800bbc8:	490f      	ldr	r1, [pc, #60]	; (800bc08 <httpd_init_pcb+0x78>)
 800bbca:	4810      	ldr	r0, [pc, #64]	; (800bc0c <httpd_init_pcb+0x7c>)
 800bbcc:	f00a fd56 	bl	801667c <iprintf>
    pcb = altcp_listen(pcb);
 800bbd0:	21ff      	movs	r1, #255	; 0xff
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f002 fa90 	bl	800e0f8 <tcp_listen_with_backlog>
 800bbd8:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d106      	bne.n	800bbee <httpd_init_pcb+0x5e>
 800bbe0:	4b08      	ldr	r3, [pc, #32]	; (800bc04 <httpd_init_pcb+0x74>)
 800bbe2:	f640 2259 	movw	r2, #2649	; 0xa59
 800bbe6:	490a      	ldr	r1, [pc, #40]	; (800bc10 <httpd_init_pcb+0x80>)
 800bbe8:	4808      	ldr	r0, [pc, #32]	; (800bc0c <httpd_init_pcb+0x7c>)
 800bbea:	f00a fd47 	bl	801667c <iprintf>
    altcp_accept(pcb, http_accept);
 800bbee:	4909      	ldr	r1, [pc, #36]	; (800bc14 <httpd_init_pcb+0x84>)
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f003 faf3 	bl	800f1dc <tcp_accept>
  }
}
 800bbf6:	bf00      	nop
 800bbf8:	3710      	adds	r7, #16
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}
 800bbfe:	bf00      	nop
 800bc00:	0801f88c 	.word	0x0801f88c
 800bc04:	08018b44 	.word	0x08018b44
 800bc08:	08018d50 	.word	0x08018d50
 800bc0c:	08018b8c 	.word	0x08018b8c
 800bc10:	08018d6c 	.word	0x08018d6c
 800bc14:	0800bb09 	.word	0x0800bb09

0800bc18 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b082      	sub	sp, #8
 800bc1c:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800bc1e:	202e      	movs	r0, #46	; 0x2e
 800bc20:	f003 fa56 	bl	800f0d0 <tcp_new_ip_type>
 800bc24:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d106      	bne.n	800bc3a <httpd_init+0x22>
 800bc2c:	4b07      	ldr	r3, [pc, #28]	; (800bc4c <httpd_init+0x34>)
 800bc2e:	f640 2272 	movw	r2, #2674	; 0xa72
 800bc32:	4907      	ldr	r1, [pc, #28]	; (800bc50 <httpd_init+0x38>)
 800bc34:	4807      	ldr	r0, [pc, #28]	; (800bc54 <httpd_init+0x3c>)
 800bc36:	f00a fd21 	bl	801667c <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800bc3a:	2150      	movs	r1, #80	; 0x50
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f7ff ffa7 	bl	800bb90 <httpd_init_pcb>
}
 800bc42:	bf00      	nop
 800bc44:	3708      	adds	r7, #8
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}
 800bc4a:	bf00      	nop
 800bc4c:	08018b44 	.word	0x08018b44
 800bc50:	08018d8c 	.word	0x08018d8c
 800bc54:	08018b8c 	.word	0x08018b8c

0800bc58 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b084      	sub	sp, #16
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	60f8      	str	r0, [r7, #12]
 800bc60:	60b9      	str	r1, [r7, #8]
 800bc62:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d106      	bne.n	800bc78 <http_set_ssi_handler+0x20>
 800bc6a:	4b14      	ldr	r3, [pc, #80]	; (800bcbc <http_set_ssi_handler+0x64>)
 800bc6c:	f640 2297 	movw	r2, #2711	; 0xa97
 800bc70:	4913      	ldr	r1, [pc, #76]	; (800bcc0 <http_set_ssi_handler+0x68>)
 800bc72:	4814      	ldr	r0, [pc, #80]	; (800bcc4 <http_set_ssi_handler+0x6c>)
 800bc74:	f00a fd02 	bl	801667c <iprintf>
  httpd_ssi_handler = ssi_handler;
 800bc78:	4a13      	ldr	r2, [pc, #76]	; (800bcc8 <http_set_ssi_handler+0x70>)
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	6013      	str	r3, [r2, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 800bc7e:	68bb      	ldr	r3, [r7, #8]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d106      	bne.n	800bc92 <http_set_ssi_handler+0x3a>
 800bc84:	4b0d      	ldr	r3, [pc, #52]	; (800bcbc <http_set_ssi_handler+0x64>)
 800bc86:	f640 229e 	movw	r2, #2718	; 0xa9e
 800bc8a:	4910      	ldr	r1, [pc, #64]	; (800bccc <http_set_ssi_handler+0x74>)
 800bc8c:	480d      	ldr	r0, [pc, #52]	; (800bcc4 <http_set_ssi_handler+0x6c>)
 800bc8e:	f00a fcf5 	bl	801667c <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	dc06      	bgt.n	800bca6 <http_set_ssi_handler+0x4e>
 800bc98:	4b08      	ldr	r3, [pc, #32]	; (800bcbc <http_set_ssi_handler+0x64>)
 800bc9a:	f640 229f 	movw	r2, #2719	; 0xa9f
 800bc9e:	490c      	ldr	r1, [pc, #48]	; (800bcd0 <http_set_ssi_handler+0x78>)
 800bca0:	4808      	ldr	r0, [pc, #32]	; (800bcc4 <http_set_ssi_handler+0x6c>)
 800bca2:	f00a fceb 	bl	801667c <iprintf>

  httpd_tags = tags;
 800bca6:	4a0b      	ldr	r2, [pc, #44]	; (800bcd4 <http_set_ssi_handler+0x7c>)
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	6013      	str	r3, [r2, #0]
  httpd_num_tags = num_tags;
 800bcac:	4a0a      	ldr	r2, [pc, #40]	; (800bcd8 <http_set_ssi_handler+0x80>)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6013      	str	r3, [r2, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 800bcb2:	bf00      	nop
 800bcb4:	3710      	adds	r7, #16
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}
 800bcba:	bf00      	nop
 800bcbc:	08018b44 	.word	0x08018b44
 800bcc0:	08018da8 	.word	0x08018da8
 800bcc4:	08018b8c 	.word	0x08018b8c
 800bcc8:	2000153c 	.word	0x2000153c
 800bccc:	08018dc0 	.word	0x08018dc0
 800bcd0:	08018dd0 	.word	0x08018dd0
 800bcd4:	20001544 	.word	0x20001544
 800bcd8:	20001540 	.word	0x20001540

0800bcdc <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b082      	sub	sp, #8
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
 800bce4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d106      	bne.n	800bcfa <http_set_cgi_handlers+0x1e>
 800bcec:	4b0d      	ldr	r3, [pc, #52]	; (800bd24 <http_set_cgi_handlers+0x48>)
 800bcee:	f640 22b2 	movw	r2, #2738	; 0xab2
 800bcf2:	490d      	ldr	r1, [pc, #52]	; (800bd28 <http_set_cgi_handlers+0x4c>)
 800bcf4:	480d      	ldr	r0, [pc, #52]	; (800bd2c <http_set_cgi_handlers+0x50>)
 800bcf6:	f00a fcc1 	bl	801667c <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	dc06      	bgt.n	800bd0e <http_set_cgi_handlers+0x32>
 800bd00:	4b08      	ldr	r3, [pc, #32]	; (800bd24 <http_set_cgi_handlers+0x48>)
 800bd02:	f640 22b3 	movw	r2, #2739	; 0xab3
 800bd06:	490a      	ldr	r1, [pc, #40]	; (800bd30 <http_set_cgi_handlers+0x54>)
 800bd08:	4808      	ldr	r0, [pc, #32]	; (800bd2c <http_set_cgi_handlers+0x50>)
 800bd0a:	f00a fcb7 	bl	801667c <iprintf>

  httpd_cgis = cgis;
 800bd0e:	4a09      	ldr	r2, [pc, #36]	; (800bd34 <http_set_cgi_handlers+0x58>)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
 800bd14:	4a08      	ldr	r2, [pc, #32]	; (800bd38 <http_set_cgi_handlers+0x5c>)
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	6013      	str	r3, [r2, #0]
}
 800bd1a:	bf00      	nop
 800bd1c:	3708      	adds	r7, #8
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}
 800bd22:	bf00      	nop
 800bd24:	08018b44 	.word	0x08018b44
 800bd28:	08018de8 	.word	0x08018de8
 800bd2c:	08018b8c 	.word	0x08018b8c
 800bd30:	08018df8 	.word	0x08018df8
 800bd34:	20001548 	.word	0x20001548
 800bd38:	2000154c 	.word	0x2000154c

0800bd3c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b083      	sub	sp, #12
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	4603      	mov	r3, r0
 800bd44:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800bd46:	88fb      	ldrh	r3, [r7, #6]
 800bd48:	021b      	lsls	r3, r3, #8
 800bd4a:	b21a      	sxth	r2, r3
 800bd4c:	88fb      	ldrh	r3, [r7, #6]
 800bd4e:	0a1b      	lsrs	r3, r3, #8
 800bd50:	b29b      	uxth	r3, r3
 800bd52:	b21b      	sxth	r3, r3
 800bd54:	4313      	orrs	r3, r2
 800bd56:	b21b      	sxth	r3, r3
 800bd58:	b29b      	uxth	r3, r3
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	370c      	adds	r7, #12
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd64:	4770      	bx	lr

0800bd66 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800bd66:	b480      	push	{r7}
 800bd68:	b083      	sub	sp, #12
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	061a      	lsls	r2, r3, #24
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	021b      	lsls	r3, r3, #8
 800bd76:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bd7a:	431a      	orrs	r2, r3
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	0a1b      	lsrs	r3, r3, #8
 800bd80:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bd84:	431a      	orrs	r2, r3
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	0e1b      	lsrs	r3, r3, #24
 800bd8a:	4313      	orrs	r3, r2
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	370c      	adds	r7, #12
 800bd90:	46bd      	mov	sp, r7
 800bd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd96:	4770      	bx	lr

0800bd98 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b086      	sub	sp, #24
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	60f8      	str	r0, [r7, #12]
 800bda0:	60b9      	str	r1, [r7, #8]
 800bda2:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800bda4:	68b8      	ldr	r0, [r7, #8]
 800bda6:	f7f4 fa1d 	bl	80001e4 <strlen>
 800bdaa:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d101      	bne.n	800bdb6 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	e022      	b.n	800bdfc <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	617b      	str	r3, [r7, #20]
 800bdba:	e012      	b.n	800bde2 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	781a      	ldrb	r2, [r3, #0]
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	781b      	ldrb	r3, [r3, #0]
 800bdc4:	429a      	cmp	r2, r3
 800bdc6:	d109      	bne.n	800bddc <lwip_strnstr+0x44>
 800bdc8:	693a      	ldr	r2, [r7, #16]
 800bdca:	68b9      	ldr	r1, [r7, #8]
 800bdcc:	6978      	ldr	r0, [r7, #20]
 800bdce:	f00a fd9b 	bl	8016908 <strncmp>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d101      	bne.n	800bddc <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800bdd8:	697b      	ldr	r3, [r7, #20]
 800bdda:	e00f      	b.n	800bdfc <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800bddc:	697b      	ldr	r3, [r7, #20]
 800bdde:	3301      	adds	r3, #1
 800bde0:	617b      	str	r3, [r7, #20]
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	781b      	ldrb	r3, [r3, #0]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d007      	beq.n	800bdfa <lwip_strnstr+0x62>
 800bdea:	697a      	ldr	r2, [r7, #20]
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	441a      	add	r2, r3
 800bdf0:	68f9      	ldr	r1, [r7, #12]
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	440b      	add	r3, r1
 800bdf6:	429a      	cmp	r2, r3
 800bdf8:	d9e0      	bls.n	800bdbc <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800bdfa:	2300      	movs	r3, #0
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3718      	adds	r7, #24
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}

0800be04 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
 800be04:	b480      	push	{r7}
 800be06:	b085      	sub	sp, #20
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
 800be0c:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	1c5a      	adds	r2, r3, #1
 800be12:	607a      	str	r2, [r7, #4]
 800be14:	781b      	ldrb	r3, [r3, #0]
 800be16:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	1c5a      	adds	r2, r3, #1
 800be1c:	603a      	str	r2, [r7, #0]
 800be1e:	781b      	ldrb	r3, [r3, #0]
 800be20:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 800be22:	7bfa      	ldrb	r2, [r7, #15]
 800be24:	7bbb      	ldrb	r3, [r7, #14]
 800be26:	429a      	cmp	r2, r3
 800be28:	d016      	beq.n	800be58 <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 800be2a:	7bfb      	ldrb	r3, [r7, #15]
 800be2c:	f043 0320 	orr.w	r3, r3, #32
 800be30:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800be32:	7b7b      	ldrb	r3, [r7, #13]
 800be34:	2b60      	cmp	r3, #96	; 0x60
 800be36:	d90c      	bls.n	800be52 <lwip_stricmp+0x4e>
 800be38:	7b7b      	ldrb	r3, [r7, #13]
 800be3a:	2b7a      	cmp	r3, #122	; 0x7a
 800be3c:	d809      	bhi.n	800be52 <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 800be3e:	7bbb      	ldrb	r3, [r7, #14]
 800be40:	f043 0320 	orr.w	r3, r3, #32
 800be44:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 800be46:	7b7a      	ldrb	r2, [r7, #13]
 800be48:	7b3b      	ldrb	r3, [r7, #12]
 800be4a:	429a      	cmp	r2, r3
 800be4c:	d003      	beq.n	800be56 <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 800be4e:	2301      	movs	r3, #1
 800be50:	e006      	b.n	800be60 <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 800be52:	2301      	movs	r3, #1
 800be54:	e004      	b.n	800be60 <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800be56:	bf00      	nop
      }
    }
  } while (c1 != 0);
 800be58:	7bfb      	ldrb	r3, [r7, #15]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d1d7      	bne.n	800be0e <lwip_stricmp+0xa>
  return 0;
 800be5e:	2300      	movs	r3, #0
}
 800be60:	4618      	mov	r0, r3
 800be62:	3714      	adds	r7, #20
 800be64:	46bd      	mov	sp, r7
 800be66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6a:	4770      	bx	lr

0800be6c <lwip_itoa>:
 * lwIP default implementation for itoa() non-standard function.
 * This can be \#defined to itoa() or snprintf(result, bufsize, "%d", number) depending on your platform port.
 */
void
lwip_itoa(char *result, size_t bufsize, int number)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b088      	sub	sp, #32
 800be70:	af00      	add	r7, sp, #0
 800be72:	60f8      	str	r0, [r7, #12]
 800be74:	60b9      	str	r1, [r7, #8]
 800be76:	607a      	str	r2, [r7, #4]
  char *res = result;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	61fb      	str	r3, [r7, #28]
  char *tmp = result + bufsize - 1;
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	3b01      	subs	r3, #1
 800be80:	68fa      	ldr	r2, [r7, #12]
 800be82:	4413      	add	r3, r2
 800be84:	61bb      	str	r3, [r7, #24]
  int n = (number >= 0) ? number : -number;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	bfb8      	it	lt
 800be8c:	425b      	neglt	r3, r3
 800be8e:	617b      	str	r3, [r7, #20]

  /* handle invalid bufsize */
  if (bufsize < 2) {
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	2b01      	cmp	r3, #1
 800be94:	d806      	bhi.n	800bea4 <lwip_itoa+0x38>
    if (bufsize == 1) {
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	2b01      	cmp	r3, #1
 800be9a:	d154      	bne.n	800bf46 <lwip_itoa+0xda>
      *result = 0;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	2200      	movs	r2, #0
 800bea0:	701a      	strb	r2, [r3, #0]
    }
    return;
 800bea2:	e050      	b.n	800bf46 <lwip_itoa+0xda>
  }

  /* First, add sign */
  if (number < 0) {
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	da04      	bge.n	800beb4 <lwip_itoa+0x48>
    *res++ = '-';
 800beaa:	69fb      	ldr	r3, [r7, #28]
 800beac:	1c5a      	adds	r2, r3, #1
 800beae:	61fa      	str	r2, [r7, #28]
 800beb0:	222d      	movs	r2, #45	; 0x2d
 800beb2:	701a      	strb	r2, [r3, #0]
  }
  /* Then create the string from the end and stop if buffer full,
     and ensure output string is zero terminated */
  *tmp = 0;
 800beb4:	69bb      	ldr	r3, [r7, #24]
 800beb6:	2200      	movs	r2, #0
 800beb8:	701a      	strb	r2, [r3, #0]
  while ((n != 0) && (tmp > res)) {
 800beba:	e01c      	b.n	800bef6 <lwip_itoa+0x8a>
    char val = (char)('0' + (n % 10));
 800bebc:	697a      	ldr	r2, [r7, #20]
 800bebe:	4b24      	ldr	r3, [pc, #144]	; (800bf50 <lwip_itoa+0xe4>)
 800bec0:	fb83 1302 	smull	r1, r3, r3, r2
 800bec4:	1099      	asrs	r1, r3, #2
 800bec6:	17d3      	asrs	r3, r2, #31
 800bec8:	1ac9      	subs	r1, r1, r3
 800beca:	460b      	mov	r3, r1
 800becc:	009b      	lsls	r3, r3, #2
 800bece:	440b      	add	r3, r1
 800bed0:	005b      	lsls	r3, r3, #1
 800bed2:	1ad1      	subs	r1, r2, r3
 800bed4:	b2cb      	uxtb	r3, r1
 800bed6:	3330      	adds	r3, #48	; 0x30
 800bed8:	74fb      	strb	r3, [r7, #19]
    tmp--;
 800beda:	69bb      	ldr	r3, [r7, #24]
 800bedc:	3b01      	subs	r3, #1
 800bede:	61bb      	str	r3, [r7, #24]
    *tmp = val;
 800bee0:	69bb      	ldr	r3, [r7, #24]
 800bee2:	7cfa      	ldrb	r2, [r7, #19]
 800bee4:	701a      	strb	r2, [r3, #0]
    n = n / 10;
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	4a19      	ldr	r2, [pc, #100]	; (800bf50 <lwip_itoa+0xe4>)
 800beea:	fb82 1203 	smull	r1, r2, r2, r3
 800beee:	1092      	asrs	r2, r2, #2
 800bef0:	17db      	asrs	r3, r3, #31
 800bef2:	1ad3      	subs	r3, r2, r3
 800bef4:	617b      	str	r3, [r7, #20]
  while ((n != 0) && (tmp > res)) {
 800bef6:	697b      	ldr	r3, [r7, #20]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d003      	beq.n	800bf04 <lwip_itoa+0x98>
 800befc:	69ba      	ldr	r2, [r7, #24]
 800befe:	69fb      	ldr	r3, [r7, #28]
 800bf00:	429a      	cmp	r2, r3
 800bf02:	d8db      	bhi.n	800bebc <lwip_itoa+0x50>
  }
  if (n) {
 800bf04:	697b      	ldr	r3, [r7, #20]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d003      	beq.n	800bf12 <lwip_itoa+0xa6>
    /* buffer is too small */
    *result = 0;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	701a      	strb	r2, [r3, #0]
    return;
 800bf10:	e01a      	b.n	800bf48 <lwip_itoa+0xdc>
  }
  if (*tmp == 0) {
 800bf12:	69bb      	ldr	r3, [r7, #24]
 800bf14:	781b      	ldrb	r3, [r3, #0]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d10a      	bne.n	800bf30 <lwip_itoa+0xc4>
    /* Nothing added? */
    *res++ = '0';
 800bf1a:	69fb      	ldr	r3, [r7, #28]
 800bf1c:	1c5a      	adds	r2, r3, #1
 800bf1e:	61fa      	str	r2, [r7, #28]
 800bf20:	2230      	movs	r2, #48	; 0x30
 800bf22:	701a      	strb	r2, [r3, #0]
    *res++ = 0;
 800bf24:	69fb      	ldr	r3, [r7, #28]
 800bf26:	1c5a      	adds	r2, r3, #1
 800bf28:	61fa      	str	r2, [r7, #28]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	701a      	strb	r2, [r3, #0]
    return;
 800bf2e:	e00b      	b.n	800bf48 <lwip_itoa+0xdc>
  }
  /* move from temporary buffer to output buffer (sign is not moved) */
  memmove(res, tmp, (size_t)((result + bufsize) - tmp));
 800bf30:	68fa      	ldr	r2, [r7, #12]
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	441a      	add	r2, r3
 800bf36:	69bb      	ldr	r3, [r7, #24]
 800bf38:	1ad3      	subs	r3, r2, r3
 800bf3a:	461a      	mov	r2, r3
 800bf3c:	69b9      	ldr	r1, [r7, #24]
 800bf3e:	69f8      	ldr	r0, [r7, #28]
 800bf40:	f00a fb7a 	bl	8016638 <memmove>
 800bf44:	e000      	b.n	800bf48 <lwip_itoa+0xdc>
    return;
 800bf46:	bf00      	nop
}
 800bf48:	3720      	adds	r7, #32
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}
 800bf4e:	bf00      	nop
 800bf50:	66666667 	.word	0x66666667

0800bf54 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b082      	sub	sp, #8
 800bf58:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800bf5e:	f000 f8d5 	bl	800c10c <mem_init>
  memp_init();
 800bf62:	f000 fbdb 	bl	800c71c <memp_init>
  pbuf_init();
  netif_init();
 800bf66:	f000 fc93 	bl	800c890 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800bf6a:	f007 fea7 	bl	8013cbc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800bf6e:	f001 fd05 	bl	800d97c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800bf72:	f007 fe19 	bl	8013ba8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800bf76:	bf00      	nop
 800bf78:	3708      	adds	r7, #8
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}
	...

0800bf80 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800bf80:	b480      	push	{r7}
 800bf82:	b083      	sub	sp, #12
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	4603      	mov	r3, r0
 800bf88:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800bf8a:	4b05      	ldr	r3, [pc, #20]	; (800bfa0 <ptr_to_mem+0x20>)
 800bf8c:	681a      	ldr	r2, [r3, #0]
 800bf8e:	88fb      	ldrh	r3, [r7, #6]
 800bf90:	4413      	add	r3, r2
}
 800bf92:	4618      	mov	r0, r3
 800bf94:	370c      	adds	r7, #12
 800bf96:	46bd      	mov	sp, r7
 800bf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9c:	4770      	bx	lr
 800bf9e:	bf00      	nop
 800bfa0:	20001554 	.word	0x20001554

0800bfa4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	b083      	sub	sp, #12
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800bfac:	4b05      	ldr	r3, [pc, #20]	; (800bfc4 <mem_to_ptr+0x20>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	687a      	ldr	r2, [r7, #4]
 800bfb2:	1ad3      	subs	r3, r2, r3
 800bfb4:	b29b      	uxth	r3, r3
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	370c      	adds	r7, #12
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc0:	4770      	bx	lr
 800bfc2:	bf00      	nop
 800bfc4:	20001554 	.word	0x20001554

0800bfc8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800bfc8:	b590      	push	{r4, r7, lr}
 800bfca:	b085      	sub	sp, #20
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800bfd0:	4b45      	ldr	r3, [pc, #276]	; (800c0e8 <plug_holes+0x120>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	687a      	ldr	r2, [r7, #4]
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d206      	bcs.n	800bfe8 <plug_holes+0x20>
 800bfda:	4b44      	ldr	r3, [pc, #272]	; (800c0ec <plug_holes+0x124>)
 800bfdc:	f240 12df 	movw	r2, #479	; 0x1df
 800bfe0:	4943      	ldr	r1, [pc, #268]	; (800c0f0 <plug_holes+0x128>)
 800bfe2:	4844      	ldr	r0, [pc, #272]	; (800c0f4 <plug_holes+0x12c>)
 800bfe4:	f00a fb4a 	bl	801667c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800bfe8:	4b43      	ldr	r3, [pc, #268]	; (800c0f8 <plug_holes+0x130>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	687a      	ldr	r2, [r7, #4]
 800bfee:	429a      	cmp	r2, r3
 800bff0:	d306      	bcc.n	800c000 <plug_holes+0x38>
 800bff2:	4b3e      	ldr	r3, [pc, #248]	; (800c0ec <plug_holes+0x124>)
 800bff4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800bff8:	4940      	ldr	r1, [pc, #256]	; (800c0fc <plug_holes+0x134>)
 800bffa:	483e      	ldr	r0, [pc, #248]	; (800c0f4 <plug_holes+0x12c>)
 800bffc:	f00a fb3e 	bl	801667c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	791b      	ldrb	r3, [r3, #4]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d006      	beq.n	800c016 <plug_holes+0x4e>
 800c008:	4b38      	ldr	r3, [pc, #224]	; (800c0ec <plug_holes+0x124>)
 800c00a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c00e:	493c      	ldr	r1, [pc, #240]	; (800c100 <plug_holes+0x138>)
 800c010:	4838      	ldr	r0, [pc, #224]	; (800c0f4 <plug_holes+0x12c>)
 800c012:	f00a fb33 	bl	801667c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	881b      	ldrh	r3, [r3, #0]
 800c01a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c01e:	d906      	bls.n	800c02e <plug_holes+0x66>
 800c020:	4b32      	ldr	r3, [pc, #200]	; (800c0ec <plug_holes+0x124>)
 800c022:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800c026:	4937      	ldr	r1, [pc, #220]	; (800c104 <plug_holes+0x13c>)
 800c028:	4832      	ldr	r0, [pc, #200]	; (800c0f4 <plug_holes+0x12c>)
 800c02a:	f00a fb27 	bl	801667c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	881b      	ldrh	r3, [r3, #0]
 800c032:	4618      	mov	r0, r3
 800c034:	f7ff ffa4 	bl	800bf80 <ptr_to_mem>
 800c038:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c03a:	687a      	ldr	r2, [r7, #4]
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	429a      	cmp	r2, r3
 800c040:	d024      	beq.n	800c08c <plug_holes+0xc4>
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	791b      	ldrb	r3, [r3, #4]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d120      	bne.n	800c08c <plug_holes+0xc4>
 800c04a:	4b2b      	ldr	r3, [pc, #172]	; (800c0f8 <plug_holes+0x130>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	68fa      	ldr	r2, [r7, #12]
 800c050:	429a      	cmp	r2, r3
 800c052:	d01b      	beq.n	800c08c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c054:	4b2c      	ldr	r3, [pc, #176]	; (800c108 <plug_holes+0x140>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	68fa      	ldr	r2, [r7, #12]
 800c05a:	429a      	cmp	r2, r3
 800c05c:	d102      	bne.n	800c064 <plug_holes+0x9c>
      lfree = mem;
 800c05e:	4a2a      	ldr	r2, [pc, #168]	; (800c108 <plug_holes+0x140>)
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	881a      	ldrh	r2, [r3, #0]
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	881b      	ldrh	r3, [r3, #0]
 800c070:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c074:	d00a      	beq.n	800c08c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	881b      	ldrh	r3, [r3, #0]
 800c07a:	4618      	mov	r0, r3
 800c07c:	f7ff ff80 	bl	800bf80 <ptr_to_mem>
 800c080:	4604      	mov	r4, r0
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	f7ff ff8e 	bl	800bfa4 <mem_to_ptr>
 800c088:	4603      	mov	r3, r0
 800c08a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	885b      	ldrh	r3, [r3, #2]
 800c090:	4618      	mov	r0, r3
 800c092:	f7ff ff75 	bl	800bf80 <ptr_to_mem>
 800c096:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c098:	68ba      	ldr	r2, [r7, #8]
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	429a      	cmp	r2, r3
 800c09e:	d01f      	beq.n	800c0e0 <plug_holes+0x118>
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	791b      	ldrb	r3, [r3, #4]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d11b      	bne.n	800c0e0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c0a8:	4b17      	ldr	r3, [pc, #92]	; (800c108 <plug_holes+0x140>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	687a      	ldr	r2, [r7, #4]
 800c0ae:	429a      	cmp	r2, r3
 800c0b0:	d102      	bne.n	800c0b8 <plug_holes+0xf0>
      lfree = pmem;
 800c0b2:	4a15      	ldr	r2, [pc, #84]	; (800c108 <plug_holes+0x140>)
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	881a      	ldrh	r2, [r3, #0]
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	881b      	ldrh	r3, [r3, #0]
 800c0c4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c0c8:	d00a      	beq.n	800c0e0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	881b      	ldrh	r3, [r3, #0]
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f7ff ff56 	bl	800bf80 <ptr_to_mem>
 800c0d4:	4604      	mov	r4, r0
 800c0d6:	68b8      	ldr	r0, [r7, #8]
 800c0d8:	f7ff ff64 	bl	800bfa4 <mem_to_ptr>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c0e0:	bf00      	nop
 800c0e2:	3714      	adds	r7, #20
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd90      	pop	{r4, r7, pc}
 800c0e8:	20001554 	.word	0x20001554
 800c0ec:	08018e14 	.word	0x08018e14
 800c0f0:	08018e44 	.word	0x08018e44
 800c0f4:	08018e5c 	.word	0x08018e5c
 800c0f8:	20001558 	.word	0x20001558
 800c0fc:	08018e84 	.word	0x08018e84
 800c100:	08018ea0 	.word	0x08018ea0
 800c104:	08018ebc 	.word	0x08018ebc
 800c108:	2000155c 	.word	0x2000155c

0800c10c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b082      	sub	sp, #8
 800c110:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c112:	4b18      	ldr	r3, [pc, #96]	; (800c174 <mem_init+0x68>)
 800c114:	3303      	adds	r3, #3
 800c116:	f023 0303 	bic.w	r3, r3, #3
 800c11a:	461a      	mov	r2, r3
 800c11c:	4b16      	ldr	r3, [pc, #88]	; (800c178 <mem_init+0x6c>)
 800c11e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c120:	4b15      	ldr	r3, [pc, #84]	; (800c178 <mem_init+0x6c>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c12c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2200      	movs	r2, #0
 800c132:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2200      	movs	r2, #0
 800c138:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c13a:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800c13e:	f7ff ff1f 	bl	800bf80 <ptr_to_mem>
 800c142:	4603      	mov	r3, r0
 800c144:	4a0d      	ldr	r2, [pc, #52]	; (800c17c <mem_init+0x70>)
 800c146:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c148:	4b0c      	ldr	r3, [pc, #48]	; (800c17c <mem_init+0x70>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	2201      	movs	r2, #1
 800c14e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c150:	4b0a      	ldr	r3, [pc, #40]	; (800c17c <mem_init+0x70>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c158:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c15a:	4b08      	ldr	r3, [pc, #32]	; (800c17c <mem_init+0x70>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c162:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c164:	4b04      	ldr	r3, [pc, #16]	; (800c178 <mem_init+0x6c>)
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	4a05      	ldr	r2, [pc, #20]	; (800c180 <mem_init+0x74>)
 800c16a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800c16c:	bf00      	nop
 800c16e:	3708      	adds	r7, #8
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}
 800c174:	2000e40c 	.word	0x2000e40c
 800c178:	20001554 	.word	0x20001554
 800c17c:	20001558 	.word	0x20001558
 800c180:	2000155c 	.word	0x2000155c

0800c184 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b086      	sub	sp, #24
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f7ff ff09 	bl	800bfa4 <mem_to_ptr>
 800c192:	4603      	mov	r3, r0
 800c194:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	881b      	ldrh	r3, [r3, #0]
 800c19a:	4618      	mov	r0, r3
 800c19c:	f7ff fef0 	bl	800bf80 <ptr_to_mem>
 800c1a0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	885b      	ldrh	r3, [r3, #2]
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f7ff feea 	bl	800bf80 <ptr_to_mem>
 800c1ac:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	881b      	ldrh	r3, [r3, #0]
 800c1b2:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c1b6:	d818      	bhi.n	800c1ea <mem_link_valid+0x66>
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	885b      	ldrh	r3, [r3, #2]
 800c1bc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c1c0:	d813      	bhi.n	800c1ea <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c1c6:	8afa      	ldrh	r2, [r7, #22]
 800c1c8:	429a      	cmp	r2, r3
 800c1ca:	d004      	beq.n	800c1d6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	881b      	ldrh	r3, [r3, #0]
 800c1d0:	8afa      	ldrh	r2, [r7, #22]
 800c1d2:	429a      	cmp	r2, r3
 800c1d4:	d109      	bne.n	800c1ea <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c1d6:	4b08      	ldr	r3, [pc, #32]	; (800c1f8 <mem_link_valid+0x74>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c1da:	693a      	ldr	r2, [r7, #16]
 800c1dc:	429a      	cmp	r2, r3
 800c1de:	d006      	beq.n	800c1ee <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	885b      	ldrh	r3, [r3, #2]
 800c1e4:	8afa      	ldrh	r2, [r7, #22]
 800c1e6:	429a      	cmp	r2, r3
 800c1e8:	d001      	beq.n	800c1ee <mem_link_valid+0x6a>
    return 0;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	e000      	b.n	800c1f0 <mem_link_valid+0x6c>
  }
  return 1;
 800c1ee:	2301      	movs	r3, #1
}
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	3718      	adds	r7, #24
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}
 800c1f8:	20001558 	.word	0x20001558

0800c1fc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b084      	sub	sp, #16
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d04c      	beq.n	800c2a4 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f003 0303 	and.w	r3, r3, #3
 800c210:	2b00      	cmp	r3, #0
 800c212:	d007      	beq.n	800c224 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c214:	4b25      	ldr	r3, [pc, #148]	; (800c2ac <mem_free+0xb0>)
 800c216:	f240 2273 	movw	r2, #627	; 0x273
 800c21a:	4925      	ldr	r1, [pc, #148]	; (800c2b0 <mem_free+0xb4>)
 800c21c:	4825      	ldr	r0, [pc, #148]	; (800c2b4 <mem_free+0xb8>)
 800c21e:	f00a fa2d 	bl	801667c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c222:	e040      	b.n	800c2a6 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	3b08      	subs	r3, #8
 800c228:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c22a:	4b23      	ldr	r3, [pc, #140]	; (800c2b8 <mem_free+0xbc>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	68fa      	ldr	r2, [r7, #12]
 800c230:	429a      	cmp	r2, r3
 800c232:	d306      	bcc.n	800c242 <mem_free+0x46>
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f103 020c 	add.w	r2, r3, #12
 800c23a:	4b20      	ldr	r3, [pc, #128]	; (800c2bc <mem_free+0xc0>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	429a      	cmp	r2, r3
 800c240:	d907      	bls.n	800c252 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800c242:	4b1a      	ldr	r3, [pc, #104]	; (800c2ac <mem_free+0xb0>)
 800c244:	f240 227f 	movw	r2, #639	; 0x27f
 800c248:	491d      	ldr	r1, [pc, #116]	; (800c2c0 <mem_free+0xc4>)
 800c24a:	481a      	ldr	r0, [pc, #104]	; (800c2b4 <mem_free+0xb8>)
 800c24c:	f00a fa16 	bl	801667c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c250:	e029      	b.n	800c2a6 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	791b      	ldrb	r3, [r3, #4]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d107      	bne.n	800c26a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800c25a:	4b14      	ldr	r3, [pc, #80]	; (800c2ac <mem_free+0xb0>)
 800c25c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800c260:	4918      	ldr	r1, [pc, #96]	; (800c2c4 <mem_free+0xc8>)
 800c262:	4814      	ldr	r0, [pc, #80]	; (800c2b4 <mem_free+0xb8>)
 800c264:	f00a fa0a 	bl	801667c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c268:	e01d      	b.n	800c2a6 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800c26a:	68f8      	ldr	r0, [r7, #12]
 800c26c:	f7ff ff8a 	bl	800c184 <mem_link_valid>
 800c270:	4603      	mov	r3, r0
 800c272:	2b00      	cmp	r3, #0
 800c274:	d107      	bne.n	800c286 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800c276:	4b0d      	ldr	r3, [pc, #52]	; (800c2ac <mem_free+0xb0>)
 800c278:	f240 2295 	movw	r2, #661	; 0x295
 800c27c:	4912      	ldr	r1, [pc, #72]	; (800c2c8 <mem_free+0xcc>)
 800c27e:	480d      	ldr	r0, [pc, #52]	; (800c2b4 <mem_free+0xb8>)
 800c280:	f00a f9fc 	bl	801667c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c284:	e00f      	b.n	800c2a6 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	2200      	movs	r2, #0
 800c28a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800c28c:	4b0f      	ldr	r3, [pc, #60]	; (800c2cc <mem_free+0xd0>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	68fa      	ldr	r2, [r7, #12]
 800c292:	429a      	cmp	r2, r3
 800c294:	d202      	bcs.n	800c29c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c296:	4a0d      	ldr	r2, [pc, #52]	; (800c2cc <mem_free+0xd0>)
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c29c:	68f8      	ldr	r0, [r7, #12]
 800c29e:	f7ff fe93 	bl	800bfc8 <plug_holes>
 800c2a2:	e000      	b.n	800c2a6 <mem_free+0xaa>
    return;
 800c2a4:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800c2a6:	3710      	adds	r7, #16
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}
 800c2ac:	08018e14 	.word	0x08018e14
 800c2b0:	08018ee8 	.word	0x08018ee8
 800c2b4:	08018e5c 	.word	0x08018e5c
 800c2b8:	20001554 	.word	0x20001554
 800c2bc:	20001558 	.word	0x20001558
 800c2c0:	08018f0c 	.word	0x08018f0c
 800c2c4:	08018f28 	.word	0x08018f28
 800c2c8:	08018f50 	.word	0x08018f50
 800c2cc:	2000155c 	.word	0x2000155c

0800c2d0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b088      	sub	sp, #32
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
 800c2d8:	460b      	mov	r3, r1
 800c2da:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800c2dc:	887b      	ldrh	r3, [r7, #2]
 800c2de:	3303      	adds	r3, #3
 800c2e0:	b29b      	uxth	r3, r3
 800c2e2:	f023 0303 	bic.w	r3, r3, #3
 800c2e6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800c2e8:	8bfb      	ldrh	r3, [r7, #30]
 800c2ea:	2b0b      	cmp	r3, #11
 800c2ec:	d801      	bhi.n	800c2f2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c2ee:	230c      	movs	r3, #12
 800c2f0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800c2f2:	8bfb      	ldrh	r3, [r7, #30]
 800c2f4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c2f8:	d803      	bhi.n	800c302 <mem_trim+0x32>
 800c2fa:	8bfa      	ldrh	r2, [r7, #30]
 800c2fc:	887b      	ldrh	r3, [r7, #2]
 800c2fe:	429a      	cmp	r2, r3
 800c300:	d201      	bcs.n	800c306 <mem_trim+0x36>
    return NULL;
 800c302:	2300      	movs	r3, #0
 800c304:	e0cc      	b.n	800c4a0 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c306:	4b68      	ldr	r3, [pc, #416]	; (800c4a8 <mem_trim+0x1d8>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	687a      	ldr	r2, [r7, #4]
 800c30c:	429a      	cmp	r2, r3
 800c30e:	d304      	bcc.n	800c31a <mem_trim+0x4a>
 800c310:	4b66      	ldr	r3, [pc, #408]	; (800c4ac <mem_trim+0x1dc>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	687a      	ldr	r2, [r7, #4]
 800c316:	429a      	cmp	r2, r3
 800c318:	d306      	bcc.n	800c328 <mem_trim+0x58>
 800c31a:	4b65      	ldr	r3, [pc, #404]	; (800c4b0 <mem_trim+0x1e0>)
 800c31c:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c320:	4964      	ldr	r1, [pc, #400]	; (800c4b4 <mem_trim+0x1e4>)
 800c322:	4865      	ldr	r0, [pc, #404]	; (800c4b8 <mem_trim+0x1e8>)
 800c324:	f00a f9aa 	bl	801667c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c328:	4b5f      	ldr	r3, [pc, #380]	; (800c4a8 <mem_trim+0x1d8>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	687a      	ldr	r2, [r7, #4]
 800c32e:	429a      	cmp	r2, r3
 800c330:	d304      	bcc.n	800c33c <mem_trim+0x6c>
 800c332:	4b5e      	ldr	r3, [pc, #376]	; (800c4ac <mem_trim+0x1dc>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	687a      	ldr	r2, [r7, #4]
 800c338:	429a      	cmp	r2, r3
 800c33a:	d301      	bcc.n	800c340 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	e0af      	b.n	800c4a0 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	3b08      	subs	r3, #8
 800c344:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800c346:	69b8      	ldr	r0, [r7, #24]
 800c348:	f7ff fe2c 	bl	800bfa4 <mem_to_ptr>
 800c34c:	4603      	mov	r3, r0
 800c34e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800c350:	69bb      	ldr	r3, [r7, #24]
 800c352:	881a      	ldrh	r2, [r3, #0]
 800c354:	8afb      	ldrh	r3, [r7, #22]
 800c356:	1ad3      	subs	r3, r2, r3
 800c358:	b29b      	uxth	r3, r3
 800c35a:	3b08      	subs	r3, #8
 800c35c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c35e:	8bfa      	ldrh	r2, [r7, #30]
 800c360:	8abb      	ldrh	r3, [r7, #20]
 800c362:	429a      	cmp	r2, r3
 800c364:	d906      	bls.n	800c374 <mem_trim+0xa4>
 800c366:	4b52      	ldr	r3, [pc, #328]	; (800c4b0 <mem_trim+0x1e0>)
 800c368:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800c36c:	4953      	ldr	r1, [pc, #332]	; (800c4bc <mem_trim+0x1ec>)
 800c36e:	4852      	ldr	r0, [pc, #328]	; (800c4b8 <mem_trim+0x1e8>)
 800c370:	f00a f984 	bl	801667c <iprintf>
  if (newsize > size) {
 800c374:	8bfa      	ldrh	r2, [r7, #30]
 800c376:	8abb      	ldrh	r3, [r7, #20]
 800c378:	429a      	cmp	r2, r3
 800c37a:	d901      	bls.n	800c380 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800c37c:	2300      	movs	r3, #0
 800c37e:	e08f      	b.n	800c4a0 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800c380:	8bfa      	ldrh	r2, [r7, #30]
 800c382:	8abb      	ldrh	r3, [r7, #20]
 800c384:	429a      	cmp	r2, r3
 800c386:	d101      	bne.n	800c38c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	e089      	b.n	800c4a0 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800c38c:	69bb      	ldr	r3, [r7, #24]
 800c38e:	881b      	ldrh	r3, [r3, #0]
 800c390:	4618      	mov	r0, r3
 800c392:	f7ff fdf5 	bl	800bf80 <ptr_to_mem>
 800c396:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800c398:	693b      	ldr	r3, [r7, #16]
 800c39a:	791b      	ldrb	r3, [r3, #4]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d13f      	bne.n	800c420 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c3a0:	69bb      	ldr	r3, [r7, #24]
 800c3a2:	881b      	ldrh	r3, [r3, #0]
 800c3a4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c3a8:	d106      	bne.n	800c3b8 <mem_trim+0xe8>
 800c3aa:	4b41      	ldr	r3, [pc, #260]	; (800c4b0 <mem_trim+0x1e0>)
 800c3ac:	f240 22f5 	movw	r2, #757	; 0x2f5
 800c3b0:	4943      	ldr	r1, [pc, #268]	; (800c4c0 <mem_trim+0x1f0>)
 800c3b2:	4841      	ldr	r0, [pc, #260]	; (800c4b8 <mem_trim+0x1e8>)
 800c3b4:	f00a f962 	bl	801667c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800c3b8:	693b      	ldr	r3, [r7, #16]
 800c3ba:	881b      	ldrh	r3, [r3, #0]
 800c3bc:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c3be:	8afa      	ldrh	r2, [r7, #22]
 800c3c0:	8bfb      	ldrh	r3, [r7, #30]
 800c3c2:	4413      	add	r3, r2
 800c3c4:	b29b      	uxth	r3, r3
 800c3c6:	3308      	adds	r3, #8
 800c3c8:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800c3ca:	4b3e      	ldr	r3, [pc, #248]	; (800c4c4 <mem_trim+0x1f4>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	693a      	ldr	r2, [r7, #16]
 800c3d0:	429a      	cmp	r2, r3
 800c3d2:	d106      	bne.n	800c3e2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800c3d4:	89fb      	ldrh	r3, [r7, #14]
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f7ff fdd2 	bl	800bf80 <ptr_to_mem>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	4a39      	ldr	r2, [pc, #228]	; (800c4c4 <mem_trim+0x1f4>)
 800c3e0:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c3e2:	89fb      	ldrh	r3, [r7, #14]
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f7ff fdcb 	bl	800bf80 <ptr_to_mem>
 800c3ea:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c3ec:	693b      	ldr	r3, [r7, #16]
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c3f2:	693b      	ldr	r3, [r7, #16]
 800c3f4:	89ba      	ldrh	r2, [r7, #12]
 800c3f6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c3f8:	693b      	ldr	r3, [r7, #16]
 800c3fa:	8afa      	ldrh	r2, [r7, #22]
 800c3fc:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c3fe:	69bb      	ldr	r3, [r7, #24]
 800c400:	89fa      	ldrh	r2, [r7, #14]
 800c402:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	881b      	ldrh	r3, [r3, #0]
 800c408:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c40c:	d047      	beq.n	800c49e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c40e:	693b      	ldr	r3, [r7, #16]
 800c410:	881b      	ldrh	r3, [r3, #0]
 800c412:	4618      	mov	r0, r3
 800c414:	f7ff fdb4 	bl	800bf80 <ptr_to_mem>
 800c418:	4602      	mov	r2, r0
 800c41a:	89fb      	ldrh	r3, [r7, #14]
 800c41c:	8053      	strh	r3, [r2, #2]
 800c41e:	e03e      	b.n	800c49e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c420:	8bfb      	ldrh	r3, [r7, #30]
 800c422:	f103 0214 	add.w	r2, r3, #20
 800c426:	8abb      	ldrh	r3, [r7, #20]
 800c428:	429a      	cmp	r2, r3
 800c42a:	d838      	bhi.n	800c49e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c42c:	8afa      	ldrh	r2, [r7, #22]
 800c42e:	8bfb      	ldrh	r3, [r7, #30]
 800c430:	4413      	add	r3, r2
 800c432:	b29b      	uxth	r3, r3
 800c434:	3308      	adds	r3, #8
 800c436:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c438:	69bb      	ldr	r3, [r7, #24]
 800c43a:	881b      	ldrh	r3, [r3, #0]
 800c43c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c440:	d106      	bne.n	800c450 <mem_trim+0x180>
 800c442:	4b1b      	ldr	r3, [pc, #108]	; (800c4b0 <mem_trim+0x1e0>)
 800c444:	f240 3216 	movw	r2, #790	; 0x316
 800c448:	491d      	ldr	r1, [pc, #116]	; (800c4c0 <mem_trim+0x1f0>)
 800c44a:	481b      	ldr	r0, [pc, #108]	; (800c4b8 <mem_trim+0x1e8>)
 800c44c:	f00a f916 	bl	801667c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c450:	89fb      	ldrh	r3, [r7, #14]
 800c452:	4618      	mov	r0, r3
 800c454:	f7ff fd94 	bl	800bf80 <ptr_to_mem>
 800c458:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c45a:	4b1a      	ldr	r3, [pc, #104]	; (800c4c4 <mem_trim+0x1f4>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	693a      	ldr	r2, [r7, #16]
 800c460:	429a      	cmp	r2, r3
 800c462:	d202      	bcs.n	800c46a <mem_trim+0x19a>
      lfree = mem2;
 800c464:	4a17      	ldr	r2, [pc, #92]	; (800c4c4 <mem_trim+0x1f4>)
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c46a:	693b      	ldr	r3, [r7, #16]
 800c46c:	2200      	movs	r2, #0
 800c46e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c470:	69bb      	ldr	r3, [r7, #24]
 800c472:	881a      	ldrh	r2, [r3, #0]
 800c474:	693b      	ldr	r3, [r7, #16]
 800c476:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c478:	693b      	ldr	r3, [r7, #16]
 800c47a:	8afa      	ldrh	r2, [r7, #22]
 800c47c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c47e:	69bb      	ldr	r3, [r7, #24]
 800c480:	89fa      	ldrh	r2, [r7, #14]
 800c482:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c484:	693b      	ldr	r3, [r7, #16]
 800c486:	881b      	ldrh	r3, [r3, #0]
 800c488:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c48c:	d007      	beq.n	800c49e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c48e:	693b      	ldr	r3, [r7, #16]
 800c490:	881b      	ldrh	r3, [r3, #0]
 800c492:	4618      	mov	r0, r3
 800c494:	f7ff fd74 	bl	800bf80 <ptr_to_mem>
 800c498:	4602      	mov	r2, r0
 800c49a:	89fb      	ldrh	r3, [r7, #14]
 800c49c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800c49e:	687b      	ldr	r3, [r7, #4]
}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	3720      	adds	r7, #32
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd80      	pop	{r7, pc}
 800c4a8:	20001554 	.word	0x20001554
 800c4ac:	20001558 	.word	0x20001558
 800c4b0:	08018e14 	.word	0x08018e14
 800c4b4:	08018f84 	.word	0x08018f84
 800c4b8:	08018e5c 	.word	0x08018e5c
 800c4bc:	08018f9c 	.word	0x08018f9c
 800c4c0:	08018fbc 	.word	0x08018fbc
 800c4c4:	2000155c 	.word	0x2000155c

0800c4c8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b088      	sub	sp, #32
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c4d2:	88fb      	ldrh	r3, [r7, #6]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d101      	bne.n	800c4dc <mem_malloc+0x14>
    return NULL;
 800c4d8:	2300      	movs	r3, #0
 800c4da:	e0d9      	b.n	800c690 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c4dc:	88fb      	ldrh	r3, [r7, #6]
 800c4de:	3303      	adds	r3, #3
 800c4e0:	b29b      	uxth	r3, r3
 800c4e2:	f023 0303 	bic.w	r3, r3, #3
 800c4e6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c4e8:	8bbb      	ldrh	r3, [r7, #28]
 800c4ea:	2b0b      	cmp	r3, #11
 800c4ec:	d801      	bhi.n	800c4f2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c4ee:	230c      	movs	r3, #12
 800c4f0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c4f2:	8bbb      	ldrh	r3, [r7, #28]
 800c4f4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c4f8:	d803      	bhi.n	800c502 <mem_malloc+0x3a>
 800c4fa:	8bba      	ldrh	r2, [r7, #28]
 800c4fc:	88fb      	ldrh	r3, [r7, #6]
 800c4fe:	429a      	cmp	r2, r3
 800c500:	d201      	bcs.n	800c506 <mem_malloc+0x3e>
    return NULL;
 800c502:	2300      	movs	r3, #0
 800c504:	e0c4      	b.n	800c690 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c506:	4b64      	ldr	r3, [pc, #400]	; (800c698 <mem_malloc+0x1d0>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	4618      	mov	r0, r3
 800c50c:	f7ff fd4a 	bl	800bfa4 <mem_to_ptr>
 800c510:	4603      	mov	r3, r0
 800c512:	83fb      	strh	r3, [r7, #30]
 800c514:	e0b4      	b.n	800c680 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c516:	8bfb      	ldrh	r3, [r7, #30]
 800c518:	4618      	mov	r0, r3
 800c51a:	f7ff fd31 	bl	800bf80 <ptr_to_mem>
 800c51e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c520:	697b      	ldr	r3, [r7, #20]
 800c522:	791b      	ldrb	r3, [r3, #4]
 800c524:	2b00      	cmp	r3, #0
 800c526:	f040 80a4 	bne.w	800c672 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c52a:	697b      	ldr	r3, [r7, #20]
 800c52c:	881b      	ldrh	r3, [r3, #0]
 800c52e:	461a      	mov	r2, r3
 800c530:	8bfb      	ldrh	r3, [r7, #30]
 800c532:	1ad3      	subs	r3, r2, r3
 800c534:	f1a3 0208 	sub.w	r2, r3, #8
 800c538:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800c53a:	429a      	cmp	r2, r3
 800c53c:	f0c0 8099 	bcc.w	800c672 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c540:	697b      	ldr	r3, [r7, #20]
 800c542:	881b      	ldrh	r3, [r3, #0]
 800c544:	461a      	mov	r2, r3
 800c546:	8bfb      	ldrh	r3, [r7, #30]
 800c548:	1ad3      	subs	r3, r2, r3
 800c54a:	f1a3 0208 	sub.w	r2, r3, #8
 800c54e:	8bbb      	ldrh	r3, [r7, #28]
 800c550:	3314      	adds	r3, #20
 800c552:	429a      	cmp	r2, r3
 800c554:	d333      	bcc.n	800c5be <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c556:	8bfa      	ldrh	r2, [r7, #30]
 800c558:	8bbb      	ldrh	r3, [r7, #28]
 800c55a:	4413      	add	r3, r2
 800c55c:	b29b      	uxth	r3, r3
 800c55e:	3308      	adds	r3, #8
 800c560:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c562:	8a7b      	ldrh	r3, [r7, #18]
 800c564:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c568:	d106      	bne.n	800c578 <mem_malloc+0xb0>
 800c56a:	4b4c      	ldr	r3, [pc, #304]	; (800c69c <mem_malloc+0x1d4>)
 800c56c:	f240 3287 	movw	r2, #903	; 0x387
 800c570:	494b      	ldr	r1, [pc, #300]	; (800c6a0 <mem_malloc+0x1d8>)
 800c572:	484c      	ldr	r0, [pc, #304]	; (800c6a4 <mem_malloc+0x1dc>)
 800c574:	f00a f882 	bl	801667c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800c578:	8a7b      	ldrh	r3, [r7, #18]
 800c57a:	4618      	mov	r0, r3
 800c57c:	f7ff fd00 	bl	800bf80 <ptr_to_mem>
 800c580:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	2200      	movs	r2, #0
 800c586:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	881a      	ldrh	r2, [r3, #0]
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	8bfa      	ldrh	r2, [r7, #30]
 800c594:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	8a7a      	ldrh	r2, [r7, #18]
 800c59a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c59c:	697b      	ldr	r3, [r7, #20]
 800c59e:	2201      	movs	r2, #1
 800c5a0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	881b      	ldrh	r3, [r3, #0]
 800c5a6:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c5aa:	d00b      	beq.n	800c5c4 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	881b      	ldrh	r3, [r3, #0]
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f7ff fce5 	bl	800bf80 <ptr_to_mem>
 800c5b6:	4602      	mov	r2, r0
 800c5b8:	8a7b      	ldrh	r3, [r7, #18]
 800c5ba:	8053      	strh	r3, [r2, #2]
 800c5bc:	e002      	b.n	800c5c4 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c5be:	697b      	ldr	r3, [r7, #20]
 800c5c0:	2201      	movs	r2, #1
 800c5c2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c5c4:	4b34      	ldr	r3, [pc, #208]	; (800c698 <mem_malloc+0x1d0>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	697a      	ldr	r2, [r7, #20]
 800c5ca:	429a      	cmp	r2, r3
 800c5cc:	d127      	bne.n	800c61e <mem_malloc+0x156>
          struct mem *cur = lfree;
 800c5ce:	4b32      	ldr	r3, [pc, #200]	; (800c698 <mem_malloc+0x1d0>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c5d4:	e005      	b.n	800c5e2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c5d6:	69bb      	ldr	r3, [r7, #24]
 800c5d8:	881b      	ldrh	r3, [r3, #0]
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f7ff fcd0 	bl	800bf80 <ptr_to_mem>
 800c5e0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c5e2:	69bb      	ldr	r3, [r7, #24]
 800c5e4:	791b      	ldrb	r3, [r3, #4]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d004      	beq.n	800c5f4 <mem_malloc+0x12c>
 800c5ea:	4b2f      	ldr	r3, [pc, #188]	; (800c6a8 <mem_malloc+0x1e0>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	69ba      	ldr	r2, [r7, #24]
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	d1f0      	bne.n	800c5d6 <mem_malloc+0x10e>
          }
          lfree = cur;
 800c5f4:	4a28      	ldr	r2, [pc, #160]	; (800c698 <mem_malloc+0x1d0>)
 800c5f6:	69bb      	ldr	r3, [r7, #24]
 800c5f8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c5fa:	4b27      	ldr	r3, [pc, #156]	; (800c698 <mem_malloc+0x1d0>)
 800c5fc:	681a      	ldr	r2, [r3, #0]
 800c5fe:	4b2a      	ldr	r3, [pc, #168]	; (800c6a8 <mem_malloc+0x1e0>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	429a      	cmp	r2, r3
 800c604:	d00b      	beq.n	800c61e <mem_malloc+0x156>
 800c606:	4b24      	ldr	r3, [pc, #144]	; (800c698 <mem_malloc+0x1d0>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	791b      	ldrb	r3, [r3, #4]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d006      	beq.n	800c61e <mem_malloc+0x156>
 800c610:	4b22      	ldr	r3, [pc, #136]	; (800c69c <mem_malloc+0x1d4>)
 800c612:	f240 32b5 	movw	r2, #949	; 0x3b5
 800c616:	4925      	ldr	r1, [pc, #148]	; (800c6ac <mem_malloc+0x1e4>)
 800c618:	4822      	ldr	r0, [pc, #136]	; (800c6a4 <mem_malloc+0x1dc>)
 800c61a:	f00a f82f 	bl	801667c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c61e:	8bba      	ldrh	r2, [r7, #28]
 800c620:	697b      	ldr	r3, [r7, #20]
 800c622:	4413      	add	r3, r2
 800c624:	3308      	adds	r3, #8
 800c626:	4a20      	ldr	r2, [pc, #128]	; (800c6a8 <mem_malloc+0x1e0>)
 800c628:	6812      	ldr	r2, [r2, #0]
 800c62a:	4293      	cmp	r3, r2
 800c62c:	d906      	bls.n	800c63c <mem_malloc+0x174>
 800c62e:	4b1b      	ldr	r3, [pc, #108]	; (800c69c <mem_malloc+0x1d4>)
 800c630:	f240 32b9 	movw	r2, #953	; 0x3b9
 800c634:	491e      	ldr	r1, [pc, #120]	; (800c6b0 <mem_malloc+0x1e8>)
 800c636:	481b      	ldr	r0, [pc, #108]	; (800c6a4 <mem_malloc+0x1dc>)
 800c638:	f00a f820 	bl	801667c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	f003 0303 	and.w	r3, r3, #3
 800c642:	2b00      	cmp	r3, #0
 800c644:	d006      	beq.n	800c654 <mem_malloc+0x18c>
 800c646:	4b15      	ldr	r3, [pc, #84]	; (800c69c <mem_malloc+0x1d4>)
 800c648:	f240 32bb 	movw	r2, #955	; 0x3bb
 800c64c:	4919      	ldr	r1, [pc, #100]	; (800c6b4 <mem_malloc+0x1ec>)
 800c64e:	4815      	ldr	r0, [pc, #84]	; (800c6a4 <mem_malloc+0x1dc>)
 800c650:	f00a f814 	bl	801667c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c654:	697b      	ldr	r3, [r7, #20]
 800c656:	f003 0303 	and.w	r3, r3, #3
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d006      	beq.n	800c66c <mem_malloc+0x1a4>
 800c65e:	4b0f      	ldr	r3, [pc, #60]	; (800c69c <mem_malloc+0x1d4>)
 800c660:	f240 32bd 	movw	r2, #957	; 0x3bd
 800c664:	4914      	ldr	r1, [pc, #80]	; (800c6b8 <mem_malloc+0x1f0>)
 800c666:	480f      	ldr	r0, [pc, #60]	; (800c6a4 <mem_malloc+0x1dc>)
 800c668:	f00a f808 	bl	801667c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c66c:	697b      	ldr	r3, [r7, #20]
 800c66e:	3308      	adds	r3, #8
 800c670:	e00e      	b.n	800c690 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800c672:	8bfb      	ldrh	r3, [r7, #30]
 800c674:	4618      	mov	r0, r3
 800c676:	f7ff fc83 	bl	800bf80 <ptr_to_mem>
 800c67a:	4603      	mov	r3, r0
 800c67c:	881b      	ldrh	r3, [r3, #0]
 800c67e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c680:	8bfa      	ldrh	r2, [r7, #30]
 800c682:	8bbb      	ldrh	r3, [r7, #28]
 800c684:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 800c688:	429a      	cmp	r2, r3
 800c68a:	f4ff af44 	bcc.w	800c516 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c68e:	2300      	movs	r3, #0
}
 800c690:	4618      	mov	r0, r3
 800c692:	3720      	adds	r7, #32
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}
 800c698:	2000155c 	.word	0x2000155c
 800c69c:	08018e14 	.word	0x08018e14
 800c6a0:	08018fbc 	.word	0x08018fbc
 800c6a4:	08018e5c 	.word	0x08018e5c
 800c6a8:	20001558 	.word	0x20001558
 800c6ac:	08018fd0 	.word	0x08018fd0
 800c6b0:	08018fec 	.word	0x08018fec
 800c6b4:	0801901c 	.word	0x0801901c
 800c6b8:	0801904c 	.word	0x0801904c

0800c6bc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b085      	sub	sp, #20
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	689b      	ldr	r3, [r3, #8]
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	685b      	ldr	r3, [r3, #4]
 800c6d0:	3303      	adds	r3, #3
 800c6d2:	f023 0303 	bic.w	r3, r3, #3
 800c6d6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c6d8:	2300      	movs	r3, #0
 800c6da:	60fb      	str	r3, [r7, #12]
 800c6dc:	e011      	b.n	800c702 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	689b      	ldr	r3, [r3, #8]
 800c6e2:	681a      	ldr	r2, [r3, #0]
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	689b      	ldr	r3, [r3, #8]
 800c6ec:	68ba      	ldr	r2, [r7, #8]
 800c6ee:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	881b      	ldrh	r3, [r3, #0]
 800c6f4:	461a      	mov	r2, r3
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	4413      	add	r3, r2
 800c6fa:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	3301      	adds	r3, #1
 800c700:	60fb      	str	r3, [r7, #12]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	885b      	ldrh	r3, [r3, #2]
 800c706:	461a      	mov	r2, r3
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	4293      	cmp	r3, r2
 800c70c:	dbe7      	blt.n	800c6de <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c70e:	bf00      	nop
 800c710:	bf00      	nop
 800c712:	3714      	adds	r7, #20
 800c714:	46bd      	mov	sp, r7
 800c716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71a:	4770      	bx	lr

0800c71c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b082      	sub	sp, #8
 800c720:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c722:	2300      	movs	r3, #0
 800c724:	80fb      	strh	r3, [r7, #6]
 800c726:	e009      	b.n	800c73c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c728:	88fb      	ldrh	r3, [r7, #6]
 800c72a:	4a08      	ldr	r2, [pc, #32]	; (800c74c <memp_init+0x30>)
 800c72c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c730:	4618      	mov	r0, r3
 800c732:	f7ff ffc3 	bl	800c6bc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c736:	88fb      	ldrh	r3, [r7, #6]
 800c738:	3301      	adds	r3, #1
 800c73a:	80fb      	strh	r3, [r7, #6]
 800c73c:	88fb      	ldrh	r3, [r7, #6]
 800c73e:	2b08      	cmp	r3, #8
 800c740:	d9f2      	bls.n	800c728 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c742:	bf00      	nop
 800c744:	bf00      	nop
 800c746:	3708      	adds	r7, #8
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}
 800c74c:	0801f828 	.word	0x0801f828

0800c750 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b084      	sub	sp, #16
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	689b      	ldr	r3, [r3, #8]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d012      	beq.n	800c78c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	689b      	ldr	r3, [r3, #8]
 800c76a:	68fa      	ldr	r2, [r7, #12]
 800c76c:	6812      	ldr	r2, [r2, #0]
 800c76e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	f003 0303 	and.w	r3, r3, #3
 800c776:	2b00      	cmp	r3, #0
 800c778:	d006      	beq.n	800c788 <do_memp_malloc_pool+0x38>
 800c77a:	4b07      	ldr	r3, [pc, #28]	; (800c798 <do_memp_malloc_pool+0x48>)
 800c77c:	f44f 728c 	mov.w	r2, #280	; 0x118
 800c780:	4906      	ldr	r1, [pc, #24]	; (800c79c <do_memp_malloc_pool+0x4c>)
 800c782:	4807      	ldr	r0, [pc, #28]	; (800c7a0 <do_memp_malloc_pool+0x50>)
 800c784:	f009 ff7a 	bl	801667c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	e000      	b.n	800c78e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c78c:	2300      	movs	r3, #0
}
 800c78e:	4618      	mov	r0, r3
 800c790:	3710      	adds	r7, #16
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}
 800c796:	bf00      	nop
 800c798:	08019070 	.word	0x08019070
 800c79c:	080190a0 	.word	0x080190a0
 800c7a0:	080190c4 	.word	0x080190c4

0800c7a4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b084      	sub	sp, #16
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c7ae:	79fb      	ldrb	r3, [r7, #7]
 800c7b0:	2b08      	cmp	r3, #8
 800c7b2:	d908      	bls.n	800c7c6 <memp_malloc+0x22>
 800c7b4:	4b0a      	ldr	r3, [pc, #40]	; (800c7e0 <memp_malloc+0x3c>)
 800c7b6:	f240 1257 	movw	r2, #343	; 0x157
 800c7ba:	490a      	ldr	r1, [pc, #40]	; (800c7e4 <memp_malloc+0x40>)
 800c7bc:	480a      	ldr	r0, [pc, #40]	; (800c7e8 <memp_malloc+0x44>)
 800c7be:	f009 ff5d 	bl	801667c <iprintf>
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	e008      	b.n	800c7d8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c7c6:	79fb      	ldrb	r3, [r7, #7]
 800c7c8:	4a08      	ldr	r2, [pc, #32]	; (800c7ec <memp_malloc+0x48>)
 800c7ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f7ff ffbe 	bl	800c750 <do_memp_malloc_pool>
 800c7d4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
}
 800c7d8:	4618      	mov	r0, r3
 800c7da:	3710      	adds	r7, #16
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bd80      	pop	{r7, pc}
 800c7e0:	08019070 	.word	0x08019070
 800c7e4:	08019100 	.word	0x08019100
 800c7e8:	080190c4 	.word	0x080190c4
 800c7ec:	0801f828 	.word	0x0801f828

0800c7f0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b084      	sub	sp, #16
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	f003 0303 	and.w	r3, r3, #3
 800c800:	2b00      	cmp	r3, #0
 800c802:	d006      	beq.n	800c812 <do_memp_free_pool+0x22>
 800c804:	4b0a      	ldr	r3, [pc, #40]	; (800c830 <do_memp_free_pool+0x40>)
 800c806:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800c80a:	490a      	ldr	r1, [pc, #40]	; (800c834 <do_memp_free_pool+0x44>)
 800c80c:	480a      	ldr	r0, [pc, #40]	; (800c838 <do_memp_free_pool+0x48>)
 800c80e:	f009 ff35 	bl	801667c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	689b      	ldr	r3, [r3, #8]
 800c81a:	681a      	ldr	r2, [r3, #0]
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	689b      	ldr	r3, [r3, #8]
 800c824:	68fa      	ldr	r2, [r7, #12]
 800c826:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800c828:	bf00      	nop
 800c82a:	3710      	adds	r7, #16
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bd80      	pop	{r7, pc}
 800c830:	08019070 	.word	0x08019070
 800c834:	08019120 	.word	0x08019120
 800c838:	080190c4 	.word	0x080190c4

0800c83c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b082      	sub	sp, #8
 800c840:	af00      	add	r7, sp, #0
 800c842:	4603      	mov	r3, r0
 800c844:	6039      	str	r1, [r7, #0]
 800c846:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c848:	79fb      	ldrb	r3, [r7, #7]
 800c84a:	2b08      	cmp	r3, #8
 800c84c:	d907      	bls.n	800c85e <memp_free+0x22>
 800c84e:	4b0c      	ldr	r3, [pc, #48]	; (800c880 <memp_free+0x44>)
 800c850:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c854:	490b      	ldr	r1, [pc, #44]	; (800c884 <memp_free+0x48>)
 800c856:	480c      	ldr	r0, [pc, #48]	; (800c888 <memp_free+0x4c>)
 800c858:	f009 ff10 	bl	801667c <iprintf>
 800c85c:	e00c      	b.n	800c878 <memp_free+0x3c>

  if (mem == NULL) {
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d008      	beq.n	800c876 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c864:	79fb      	ldrb	r3, [r7, #7]
 800c866:	4a09      	ldr	r2, [pc, #36]	; (800c88c <memp_free+0x50>)
 800c868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c86c:	6839      	ldr	r1, [r7, #0]
 800c86e:	4618      	mov	r0, r3
 800c870:	f7ff ffbe 	bl	800c7f0 <do_memp_free_pool>
 800c874:	e000      	b.n	800c878 <memp_free+0x3c>
    return;
 800c876:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c878:	3708      	adds	r7, #8
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}
 800c87e:	bf00      	nop
 800c880:	08019070 	.word	0x08019070
 800c884:	08019140 	.word	0x08019140
 800c888:	080190c4 	.word	0x080190c4
 800c88c:	0801f828 	.word	0x0801f828

0800c890 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c890:	b480      	push	{r7}
 800c892:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c894:	bf00      	nop
 800c896:	46bd      	mov	sp, r7
 800c898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89c:	4770      	bx	lr
	...

0800c8a0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b086      	sub	sp, #24
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	60f8      	str	r0, [r7, #12]
 800c8a8:	60b9      	str	r1, [r7, #8]
 800c8aa:	607a      	str	r2, [r7, #4]
 800c8ac:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d108      	bne.n	800c8c6 <netif_add+0x26>
 800c8b4:	4b57      	ldr	r3, [pc, #348]	; (800ca14 <netif_add+0x174>)
 800c8b6:	f240 1227 	movw	r2, #295	; 0x127
 800c8ba:	4957      	ldr	r1, [pc, #348]	; (800ca18 <netif_add+0x178>)
 800c8bc:	4857      	ldr	r0, [pc, #348]	; (800ca1c <netif_add+0x17c>)
 800c8be:	f009 fedd 	bl	801667c <iprintf>
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	e0a2      	b.n	800ca0c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d108      	bne.n	800c8de <netif_add+0x3e>
 800c8cc:	4b51      	ldr	r3, [pc, #324]	; (800ca14 <netif_add+0x174>)
 800c8ce:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c8d2:	4953      	ldr	r1, [pc, #332]	; (800ca20 <netif_add+0x180>)
 800c8d4:	4851      	ldr	r0, [pc, #324]	; (800ca1c <netif_add+0x17c>)
 800c8d6:	f009 fed1 	bl	801667c <iprintf>
 800c8da:	2300      	movs	r3, #0
 800c8dc:	e096      	b.n	800ca0c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c8de:	68bb      	ldr	r3, [r7, #8]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d101      	bne.n	800c8e8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c8e4:	4b4f      	ldr	r3, [pc, #316]	; (800ca24 <netif_add+0x184>)
 800c8e6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d101      	bne.n	800c8f2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c8ee:	4b4d      	ldr	r3, [pc, #308]	; (800ca24 <netif_add+0x184>)
 800c8f0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d101      	bne.n	800c8fc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c8f8:	4b4a      	ldr	r3, [pc, #296]	; (800ca24 <netif_add+0x184>)
 800c8fa:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	2200      	movs	r2, #0
 800c900:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	2200      	movs	r2, #0
 800c906:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	2200      	movs	r2, #0
 800c90c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	4a45      	ldr	r2, [pc, #276]	; (800ca28 <netif_add+0x188>)
 800c912:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	2200      	movs	r2, #0
 800c918:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	2200      	movs	r2, #0
 800c91e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	2200      	movs	r2, #0
 800c926:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	6a3a      	ldr	r2, [r7, #32]
 800c92c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c92e:	4b3f      	ldr	r3, [pc, #252]	; (800ca2c <netif_add+0x18c>)
 800c930:	781a      	ldrb	r2, [r3, #0]
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c93c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	687a      	ldr	r2, [r7, #4]
 800c942:	68b9      	ldr	r1, [r7, #8]
 800c944:	68f8      	ldr	r0, [r7, #12]
 800c946:	f000 f913 	bl	800cb70 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c94c:	68f8      	ldr	r0, [r7, #12]
 800c94e:	4798      	blx	r3
 800c950:	4603      	mov	r3, r0
 800c952:	2b00      	cmp	r3, #0
 800c954:	d001      	beq.n	800c95a <netif_add+0xba>
    return NULL;
 800c956:	2300      	movs	r3, #0
 800c958:	e058      	b.n	800ca0c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c960:	2bff      	cmp	r3, #255	; 0xff
 800c962:	d103      	bne.n	800c96c <netif_add+0xcc>
        netif->num = 0;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	2200      	movs	r2, #0
 800c968:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800c96c:	2300      	movs	r3, #0
 800c96e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c970:	4b2f      	ldr	r3, [pc, #188]	; (800ca30 <netif_add+0x190>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	617b      	str	r3, [r7, #20]
 800c976:	e02b      	b.n	800c9d0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c978:	697a      	ldr	r2, [r7, #20]
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	429a      	cmp	r2, r3
 800c97e:	d106      	bne.n	800c98e <netif_add+0xee>
 800c980:	4b24      	ldr	r3, [pc, #144]	; (800ca14 <netif_add+0x174>)
 800c982:	f240 128b 	movw	r2, #395	; 0x18b
 800c986:	492b      	ldr	r1, [pc, #172]	; (800ca34 <netif_add+0x194>)
 800c988:	4824      	ldr	r0, [pc, #144]	; (800ca1c <netif_add+0x17c>)
 800c98a:	f009 fe77 	bl	801667c <iprintf>
        num_netifs++;
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	3301      	adds	r3, #1
 800c992:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c994:	693b      	ldr	r3, [r7, #16]
 800c996:	2bff      	cmp	r3, #255	; 0xff
 800c998:	dd06      	ble.n	800c9a8 <netif_add+0x108>
 800c99a:	4b1e      	ldr	r3, [pc, #120]	; (800ca14 <netif_add+0x174>)
 800c99c:	f240 128d 	movw	r2, #397	; 0x18d
 800c9a0:	4925      	ldr	r1, [pc, #148]	; (800ca38 <netif_add+0x198>)
 800c9a2:	481e      	ldr	r0, [pc, #120]	; (800ca1c <netif_add+0x17c>)
 800c9a4:	f009 fe6a 	bl	801667c <iprintf>
        if (netif2->num == netif->num) {
 800c9a8:	697b      	ldr	r3, [r7, #20]
 800c9aa:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c9b4:	429a      	cmp	r2, r3
 800c9b6:	d108      	bne.n	800c9ca <netif_add+0x12a>
          netif->num++;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c9be:	3301      	adds	r3, #1
 800c9c0:	b2da      	uxtb	r2, r3
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800c9c8:	e005      	b.n	800c9d6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	617b      	str	r3, [r7, #20]
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d1d0      	bne.n	800c978 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800c9d6:	697b      	ldr	r3, [r7, #20]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d1be      	bne.n	800c95a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c9e2:	2bfe      	cmp	r3, #254	; 0xfe
 800c9e4:	d103      	bne.n	800c9ee <netif_add+0x14e>
    netif_num = 0;
 800c9e6:	4b11      	ldr	r3, [pc, #68]	; (800ca2c <netif_add+0x18c>)
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	701a      	strb	r2, [r3, #0]
 800c9ec:	e006      	b.n	800c9fc <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c9f4:	3301      	adds	r3, #1
 800c9f6:	b2da      	uxtb	r2, r3
 800c9f8:	4b0c      	ldr	r3, [pc, #48]	; (800ca2c <netif_add+0x18c>)
 800c9fa:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c9fc:	4b0c      	ldr	r3, [pc, #48]	; (800ca30 <netif_add+0x190>)
 800c9fe:	681a      	ldr	r2, [r3, #0]
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800ca04:	4a0a      	ldr	r2, [pc, #40]	; (800ca30 <netif_add+0x190>)
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
}
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	3718      	adds	r7, #24
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bd80      	pop	{r7, pc}
 800ca14:	0801915c 	.word	0x0801915c
 800ca18:	080191f0 	.word	0x080191f0
 800ca1c:	080191ac 	.word	0x080191ac
 800ca20:	0801920c 	.word	0x0801920c
 800ca24:	0801f88c 	.word	0x0801f88c
 800ca28:	0800cd83 	.word	0x0800cd83
 800ca2c:	20001584 	.word	0x20001584
 800ca30:	200179e8 	.word	0x200179e8
 800ca34:	08019230 	.word	0x08019230
 800ca38:	08019244 	.word	0x08019244

0800ca3c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b082      	sub	sp, #8
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
 800ca44:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800ca46:	6839      	ldr	r1, [r7, #0]
 800ca48:	6878      	ldr	r0, [r7, #4]
 800ca4a:	f002 fd85 	bl	800f558 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800ca4e:	6839      	ldr	r1, [r7, #0]
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f007 fabd 	bl	8013fd0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800ca56:	bf00      	nop
 800ca58:	3708      	adds	r7, #8
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}
	...

0800ca60 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b086      	sub	sp, #24
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	60f8      	str	r0, [r7, #12]
 800ca68:	60b9      	str	r1, [r7, #8]
 800ca6a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d106      	bne.n	800ca80 <netif_do_set_ipaddr+0x20>
 800ca72:	4b1d      	ldr	r3, [pc, #116]	; (800cae8 <netif_do_set_ipaddr+0x88>)
 800ca74:	f240 12cb 	movw	r2, #459	; 0x1cb
 800ca78:	491c      	ldr	r1, [pc, #112]	; (800caec <netif_do_set_ipaddr+0x8c>)
 800ca7a:	481d      	ldr	r0, [pc, #116]	; (800caf0 <netif_do_set_ipaddr+0x90>)
 800ca7c:	f009 fdfe 	bl	801667c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d106      	bne.n	800ca94 <netif_do_set_ipaddr+0x34>
 800ca86:	4b18      	ldr	r3, [pc, #96]	; (800cae8 <netif_do_set_ipaddr+0x88>)
 800ca88:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800ca8c:	4917      	ldr	r1, [pc, #92]	; (800caec <netif_do_set_ipaddr+0x8c>)
 800ca8e:	4818      	ldr	r0, [pc, #96]	; (800caf0 <netif_do_set_ipaddr+0x90>)
 800ca90:	f009 fdf4 	bl	801667c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	681a      	ldr	r2, [r3, #0]
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	3304      	adds	r3, #4
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	429a      	cmp	r2, r3
 800caa0:	d01c      	beq.n	800cadc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800caa2:	68bb      	ldr	r3, [r7, #8]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	3304      	adds	r3, #4
 800caac:	681a      	ldr	r2, [r3, #0]
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800cab2:	f107 0314 	add.w	r3, r7, #20
 800cab6:	4619      	mov	r1, r3
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f7ff ffbf 	bl	800ca3c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d002      	beq.n	800caca <netif_do_set_ipaddr+0x6a>
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	e000      	b.n	800cacc <netif_do_set_ipaddr+0x6c>
 800caca:	2300      	movs	r3, #0
 800cacc:	68fa      	ldr	r2, [r7, #12]
 800cace:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800cad0:	2101      	movs	r1, #1
 800cad2:	68f8      	ldr	r0, [r7, #12]
 800cad4:	f000 f8d2 	bl	800cc7c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800cad8:	2301      	movs	r3, #1
 800cada:	e000      	b.n	800cade <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800cadc:	2300      	movs	r3, #0
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3718      	adds	r7, #24
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}
 800cae6:	bf00      	nop
 800cae8:	0801915c 	.word	0x0801915c
 800caec:	08019274 	.word	0x08019274
 800caf0:	080191ac 	.word	0x080191ac

0800caf4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800caf4:	b480      	push	{r7}
 800caf6:	b085      	sub	sp, #20
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	60f8      	str	r0, [r7, #12]
 800cafc:	60b9      	str	r1, [r7, #8]
 800cafe:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800cb00:	68bb      	ldr	r3, [r7, #8]
 800cb02:	681a      	ldr	r2, [r3, #0]
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	3308      	adds	r3, #8
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	429a      	cmp	r2, r3
 800cb0c:	d00a      	beq.n	800cb24 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800cb0e:	68bb      	ldr	r3, [r7, #8]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d002      	beq.n	800cb1a <netif_do_set_netmask+0x26>
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	e000      	b.n	800cb1c <netif_do_set_netmask+0x28>
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	68fa      	ldr	r2, [r7, #12]
 800cb1e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800cb20:	2301      	movs	r3, #1
 800cb22:	e000      	b.n	800cb26 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800cb24:	2300      	movs	r3, #0
}
 800cb26:	4618      	mov	r0, r3
 800cb28:	3714      	adds	r7, #20
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb30:	4770      	bx	lr

0800cb32 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800cb32:	b480      	push	{r7}
 800cb34:	b085      	sub	sp, #20
 800cb36:	af00      	add	r7, sp, #0
 800cb38:	60f8      	str	r0, [r7, #12]
 800cb3a:	60b9      	str	r1, [r7, #8]
 800cb3c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800cb3e:	68bb      	ldr	r3, [r7, #8]
 800cb40:	681a      	ldr	r2, [r3, #0]
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	330c      	adds	r3, #12
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	d00a      	beq.n	800cb62 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800cb4c:	68bb      	ldr	r3, [r7, #8]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d002      	beq.n	800cb58 <netif_do_set_gw+0x26>
 800cb52:	68bb      	ldr	r3, [r7, #8]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	e000      	b.n	800cb5a <netif_do_set_gw+0x28>
 800cb58:	2300      	movs	r3, #0
 800cb5a:	68fa      	ldr	r2, [r7, #12]
 800cb5c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800cb5e:	2301      	movs	r3, #1
 800cb60:	e000      	b.n	800cb64 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800cb62:	2300      	movs	r3, #0
}
 800cb64:	4618      	mov	r0, r3
 800cb66:	3714      	adds	r7, #20
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6e:	4770      	bx	lr

0800cb70 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b088      	sub	sp, #32
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	60f8      	str	r0, [r7, #12]
 800cb78:	60b9      	str	r1, [r7, #8]
 800cb7a:	607a      	str	r2, [r7, #4]
 800cb7c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800cb82:	2300      	movs	r3, #0
 800cb84:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800cb86:	68bb      	ldr	r3, [r7, #8]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d101      	bne.n	800cb90 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800cb8c:	4b1c      	ldr	r3, [pc, #112]	; (800cc00 <netif_set_addr+0x90>)
 800cb8e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d101      	bne.n	800cb9a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800cb96:	4b1a      	ldr	r3, [pc, #104]	; (800cc00 <netif_set_addr+0x90>)
 800cb98:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d101      	bne.n	800cba4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800cba0:	4b17      	ldr	r3, [pc, #92]	; (800cc00 <netif_set_addr+0x90>)
 800cba2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d003      	beq.n	800cbb2 <netif_set_addr+0x42>
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d101      	bne.n	800cbb6 <netif_set_addr+0x46>
 800cbb2:	2301      	movs	r3, #1
 800cbb4:	e000      	b.n	800cbb8 <netif_set_addr+0x48>
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	617b      	str	r3, [r7, #20]
  if (remove) {
 800cbba:	697b      	ldr	r3, [r7, #20]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d006      	beq.n	800cbce <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800cbc0:	f107 0310 	add.w	r3, r7, #16
 800cbc4:	461a      	mov	r2, r3
 800cbc6:	68b9      	ldr	r1, [r7, #8]
 800cbc8:	68f8      	ldr	r0, [r7, #12]
 800cbca:	f7ff ff49 	bl	800ca60 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800cbce:	69fa      	ldr	r2, [r7, #28]
 800cbd0:	6879      	ldr	r1, [r7, #4]
 800cbd2:	68f8      	ldr	r0, [r7, #12]
 800cbd4:	f7ff ff8e 	bl	800caf4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800cbd8:	69ba      	ldr	r2, [r7, #24]
 800cbda:	6839      	ldr	r1, [r7, #0]
 800cbdc:	68f8      	ldr	r0, [r7, #12]
 800cbde:	f7ff ffa8 	bl	800cb32 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800cbe2:	697b      	ldr	r3, [r7, #20]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d106      	bne.n	800cbf6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800cbe8:	f107 0310 	add.w	r3, r7, #16
 800cbec:	461a      	mov	r2, r3
 800cbee:	68b9      	ldr	r1, [r7, #8]
 800cbf0:	68f8      	ldr	r0, [r7, #12]
 800cbf2:	f7ff ff35 	bl	800ca60 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800cbf6:	bf00      	nop
 800cbf8:	3720      	adds	r7, #32
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}
 800cbfe:	bf00      	nop
 800cc00:	0801f88c 	.word	0x0801f88c

0800cc04 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800cc04:	b480      	push	{r7}
 800cc06:	b083      	sub	sp, #12
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800cc0c:	4a04      	ldr	r2, [pc, #16]	; (800cc20 <netif_set_default+0x1c>)
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800cc12:	bf00      	nop
 800cc14:	370c      	adds	r7, #12
 800cc16:	46bd      	mov	sp, r7
 800cc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1c:	4770      	bx	lr
 800cc1e:	bf00      	nop
 800cc20:	200179ec 	.word	0x200179ec

0800cc24 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b082      	sub	sp, #8
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d107      	bne.n	800cc42 <netif_set_up+0x1e>
 800cc32:	4b0f      	ldr	r3, [pc, #60]	; (800cc70 <netif_set_up+0x4c>)
 800cc34:	f44f 7254 	mov.w	r2, #848	; 0x350
 800cc38:	490e      	ldr	r1, [pc, #56]	; (800cc74 <netif_set_up+0x50>)
 800cc3a:	480f      	ldr	r0, [pc, #60]	; (800cc78 <netif_set_up+0x54>)
 800cc3c:	f009 fd1e 	bl	801667c <iprintf>
 800cc40:	e013      	b.n	800cc6a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cc48:	f003 0301 	and.w	r3, r3, #1
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d10c      	bne.n	800cc6a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cc56:	f043 0301 	orr.w	r3, r3, #1
 800cc5a:	b2da      	uxtb	r2, r3
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800cc62:	2103      	movs	r1, #3
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f000 f809 	bl	800cc7c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800cc6a:	3708      	adds	r7, #8
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}
 800cc70:	0801915c 	.word	0x0801915c
 800cc74:	080192e4 	.word	0x080192e4
 800cc78:	080191ac 	.word	0x080191ac

0800cc7c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b082      	sub	sp, #8
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
 800cc84:	460b      	mov	r3, r1
 800cc86:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d106      	bne.n	800cc9c <netif_issue_reports+0x20>
 800cc8e:	4b18      	ldr	r3, [pc, #96]	; (800ccf0 <netif_issue_reports+0x74>)
 800cc90:	f240 326d 	movw	r2, #877	; 0x36d
 800cc94:	4917      	ldr	r1, [pc, #92]	; (800ccf4 <netif_issue_reports+0x78>)
 800cc96:	4818      	ldr	r0, [pc, #96]	; (800ccf8 <netif_issue_reports+0x7c>)
 800cc98:	f009 fcf0 	bl	801667c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cca2:	f003 0304 	and.w	r3, r3, #4
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d01e      	beq.n	800cce8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ccb0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d017      	beq.n	800cce8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ccb8:	78fb      	ldrb	r3, [r7, #3]
 800ccba:	f003 0301 	and.w	r3, r3, #1
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d013      	beq.n	800ccea <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	3304      	adds	r3, #4
 800ccc6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d00e      	beq.n	800ccea <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ccd2:	f003 0308 	and.w	r3, r3, #8
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d007      	beq.n	800ccea <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	3304      	adds	r3, #4
 800ccde:	4619      	mov	r1, r3
 800cce0:	6878      	ldr	r0, [r7, #4]
 800cce2:	f008 f8df 	bl	8014ea4 <etharp_request>
 800cce6:	e000      	b.n	800ccea <netif_issue_reports+0x6e>
    return;
 800cce8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800ccea:	3708      	adds	r7, #8
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bd80      	pop	{r7, pc}
 800ccf0:	0801915c 	.word	0x0801915c
 800ccf4:	08019300 	.word	0x08019300
 800ccf8:	080191ac 	.word	0x080191ac

0800ccfc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b082      	sub	sp, #8
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d107      	bne.n	800cd1a <netif_set_down+0x1e>
 800cd0a:	4b12      	ldr	r3, [pc, #72]	; (800cd54 <netif_set_down+0x58>)
 800cd0c:	f240 329b 	movw	r2, #923	; 0x39b
 800cd10:	4911      	ldr	r1, [pc, #68]	; (800cd58 <netif_set_down+0x5c>)
 800cd12:	4812      	ldr	r0, [pc, #72]	; (800cd5c <netif_set_down+0x60>)
 800cd14:	f009 fcb2 	bl	801667c <iprintf>
 800cd18:	e019      	b.n	800cd4e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cd20:	f003 0301 	and.w	r3, r3, #1
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d012      	beq.n	800cd4e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cd2e:	f023 0301 	bic.w	r3, r3, #1
 800cd32:	b2da      	uxtb	r2, r3
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cd40:	f003 0308 	and.w	r3, r3, #8
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d002      	beq.n	800cd4e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f007 fc69 	bl	8014620 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800cd4e:	3708      	adds	r7, #8
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}
 800cd54:	0801915c 	.word	0x0801915c
 800cd58:	08019324 	.word	0x08019324
 800cd5c:	080191ac 	.word	0x080191ac

0800cd60 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800cd60:	b480      	push	{r7}
 800cd62:	b083      	sub	sp, #12
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
 800cd68:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d002      	beq.n	800cd76 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	683a      	ldr	r2, [r7, #0]
 800cd74:	61da      	str	r2, [r3, #28]
  }
}
 800cd76:	bf00      	nop
 800cd78:	370c      	adds	r7, #12
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd80:	4770      	bx	lr

0800cd82 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800cd82:	b480      	push	{r7}
 800cd84:	b085      	sub	sp, #20
 800cd86:	af00      	add	r7, sp, #0
 800cd88:	60f8      	str	r0, [r7, #12]
 800cd8a:	60b9      	str	r1, [r7, #8]
 800cd8c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800cd8e:	f06f 030b 	mvn.w	r3, #11
}
 800cd92:	4618      	mov	r0, r3
 800cd94:	3714      	adds	r7, #20
 800cd96:	46bd      	mov	sp, r7
 800cd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9c:	4770      	bx	lr
	...

0800cda0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800cda0:	b480      	push	{r7}
 800cda2:	b085      	sub	sp, #20
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	4603      	mov	r3, r0
 800cda8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800cdaa:	79fb      	ldrb	r3, [r7, #7]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d013      	beq.n	800cdd8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800cdb0:	4b0d      	ldr	r3, [pc, #52]	; (800cde8 <netif_get_by_index+0x48>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	60fb      	str	r3, [r7, #12]
 800cdb6:	e00c      	b.n	800cdd2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cdbe:	3301      	adds	r3, #1
 800cdc0:	b2db      	uxtb	r3, r3
 800cdc2:	79fa      	ldrb	r2, [r7, #7]
 800cdc4:	429a      	cmp	r2, r3
 800cdc6:	d101      	bne.n	800cdcc <netif_get_by_index+0x2c>
        return netif; /* found! */
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	e006      	b.n	800cdda <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	60fb      	str	r3, [r7, #12]
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d1ef      	bne.n	800cdb8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800cdd8:	2300      	movs	r3, #0
}
 800cdda:	4618      	mov	r0, r3
 800cddc:	3714      	adds	r7, #20
 800cdde:	46bd      	mov	sp, r7
 800cde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde4:	4770      	bx	lr
 800cde6:	bf00      	nop
 800cde8:	200179e8 	.word	0x200179e8

0800cdec <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b082      	sub	sp, #8
 800cdf0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800cdf2:	4b0c      	ldr	r3, [pc, #48]	; (800ce24 <pbuf_free_ooseq+0x38>)
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cdf8:	4b0b      	ldr	r3, [pc, #44]	; (800ce28 <pbuf_free_ooseq+0x3c>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	607b      	str	r3, [r7, #4]
 800cdfe:	e00a      	b.n	800ce16 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d003      	beq.n	800ce10 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f002 fbe3 	bl	800f5d4 <tcp_free_ooseq>
      return;
 800ce0e:	e005      	b.n	800ce1c <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	68db      	ldr	r3, [r3, #12]
 800ce14:	607b      	str	r3, [r7, #4]
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d1f1      	bne.n	800ce00 <pbuf_free_ooseq+0x14>
    }
  }
}
 800ce1c:	3708      	adds	r7, #8
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	bd80      	pop	{r7, pc}
 800ce22:	bf00      	nop
 800ce24:	200179f0 	.word	0x200179f0
 800ce28:	200179f8 	.word	0x200179f8

0800ce2c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800ce2c:	b480      	push	{r7}
 800ce2e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800ce30:	4b03      	ldr	r3, [pc, #12]	; (800ce40 <pbuf_pool_is_empty+0x14>)
 800ce32:	2201      	movs	r2, #1
 800ce34:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800ce36:	bf00      	nop
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3e:	4770      	bx	lr
 800ce40:	200179f0 	.word	0x200179f0

0800ce44 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800ce44:	b480      	push	{r7}
 800ce46:	b085      	sub	sp, #20
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	60f8      	str	r0, [r7, #12]
 800ce4c:	60b9      	str	r1, [r7, #8]
 800ce4e:	4611      	mov	r1, r2
 800ce50:	461a      	mov	r2, r3
 800ce52:	460b      	mov	r3, r1
 800ce54:	80fb      	strh	r3, [r7, #6]
 800ce56:	4613      	mov	r3, r2
 800ce58:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	68ba      	ldr	r2, [r7, #8]
 800ce64:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	88fa      	ldrh	r2, [r7, #6]
 800ce6a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	88ba      	ldrh	r2, [r7, #4]
 800ce70:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800ce72:	8b3b      	ldrh	r3, [r7, #24]
 800ce74:	b2da      	uxtb	r2, r3
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	7f3a      	ldrb	r2, [r7, #28]
 800ce7e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	2201      	movs	r2, #1
 800ce84:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	2200      	movs	r2, #0
 800ce8a:	73da      	strb	r2, [r3, #15]
}
 800ce8c:	bf00      	nop
 800ce8e:	3714      	adds	r7, #20
 800ce90:	46bd      	mov	sp, r7
 800ce92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce96:	4770      	bx	lr

0800ce98 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b08c      	sub	sp, #48	; 0x30
 800ce9c:	af02      	add	r7, sp, #8
 800ce9e:	4603      	mov	r3, r0
 800cea0:	71fb      	strb	r3, [r7, #7]
 800cea2:	460b      	mov	r3, r1
 800cea4:	80bb      	strh	r3, [r7, #4]
 800cea6:	4613      	mov	r3, r2
 800cea8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800ceaa:	79fb      	ldrb	r3, [r7, #7]
 800ceac:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800ceae:	887b      	ldrh	r3, [r7, #2]
 800ceb0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ceb4:	d07f      	beq.n	800cfb6 <pbuf_alloc+0x11e>
 800ceb6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ceba:	f300 80c8 	bgt.w	800d04e <pbuf_alloc+0x1b6>
 800cebe:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800cec2:	d010      	beq.n	800cee6 <pbuf_alloc+0x4e>
 800cec4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800cec8:	f300 80c1 	bgt.w	800d04e <pbuf_alloc+0x1b6>
 800cecc:	2b01      	cmp	r3, #1
 800cece:	d002      	beq.n	800ced6 <pbuf_alloc+0x3e>
 800ced0:	2b41      	cmp	r3, #65	; 0x41
 800ced2:	f040 80bc 	bne.w	800d04e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800ced6:	887a      	ldrh	r2, [r7, #2]
 800ced8:	88bb      	ldrh	r3, [r7, #4]
 800ceda:	4619      	mov	r1, r3
 800cedc:	2000      	movs	r0, #0
 800cede:	f000 f8d1 	bl	800d084 <pbuf_alloc_reference>
 800cee2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800cee4:	e0bd      	b.n	800d062 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800cee6:	2300      	movs	r3, #0
 800cee8:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800ceea:	2300      	movs	r3, #0
 800ceec:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800ceee:	88bb      	ldrh	r3, [r7, #4]
 800cef0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800cef2:	2008      	movs	r0, #8
 800cef4:	f7ff fc56 	bl	800c7a4 <memp_malloc>
 800cef8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800cefa:	693b      	ldr	r3, [r7, #16]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d109      	bne.n	800cf14 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800cf00:	f7ff ff94 	bl	800ce2c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800cf04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d002      	beq.n	800cf10 <pbuf_alloc+0x78>
            pbuf_free(p);
 800cf0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cf0c:	f000 faa8 	bl	800d460 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800cf10:	2300      	movs	r3, #0
 800cf12:	e0a7      	b.n	800d064 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800cf14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cf16:	3303      	adds	r3, #3
 800cf18:	b29b      	uxth	r3, r3
 800cf1a:	f023 0303 	bic.w	r3, r3, #3
 800cf1e:	b29b      	uxth	r3, r3
 800cf20:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800cf24:	b29b      	uxth	r3, r3
 800cf26:	8b7a      	ldrh	r2, [r7, #26]
 800cf28:	4293      	cmp	r3, r2
 800cf2a:	bf28      	it	cs
 800cf2c:	4613      	movcs	r3, r2
 800cf2e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800cf30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cf32:	3310      	adds	r3, #16
 800cf34:	693a      	ldr	r2, [r7, #16]
 800cf36:	4413      	add	r3, r2
 800cf38:	3303      	adds	r3, #3
 800cf3a:	f023 0303 	bic.w	r3, r3, #3
 800cf3e:	4618      	mov	r0, r3
 800cf40:	89f9      	ldrh	r1, [r7, #14]
 800cf42:	8b7a      	ldrh	r2, [r7, #26]
 800cf44:	2300      	movs	r3, #0
 800cf46:	9301      	str	r3, [sp, #4]
 800cf48:	887b      	ldrh	r3, [r7, #2]
 800cf4a:	9300      	str	r3, [sp, #0]
 800cf4c:	460b      	mov	r3, r1
 800cf4e:	4601      	mov	r1, r0
 800cf50:	6938      	ldr	r0, [r7, #16]
 800cf52:	f7ff ff77 	bl	800ce44 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800cf56:	693b      	ldr	r3, [r7, #16]
 800cf58:	685b      	ldr	r3, [r3, #4]
 800cf5a:	f003 0303 	and.w	r3, r3, #3
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d006      	beq.n	800cf70 <pbuf_alloc+0xd8>
 800cf62:	4b42      	ldr	r3, [pc, #264]	; (800d06c <pbuf_alloc+0x1d4>)
 800cf64:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cf68:	4941      	ldr	r1, [pc, #260]	; (800d070 <pbuf_alloc+0x1d8>)
 800cf6a:	4842      	ldr	r0, [pc, #264]	; (800d074 <pbuf_alloc+0x1dc>)
 800cf6c:	f009 fb86 	bl	801667c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800cf70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cf72:	3303      	adds	r3, #3
 800cf74:	f023 0303 	bic.w	r3, r3, #3
 800cf78:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cf7c:	d106      	bne.n	800cf8c <pbuf_alloc+0xf4>
 800cf7e:	4b3b      	ldr	r3, [pc, #236]	; (800d06c <pbuf_alloc+0x1d4>)
 800cf80:	f44f 7281 	mov.w	r2, #258	; 0x102
 800cf84:	493c      	ldr	r1, [pc, #240]	; (800d078 <pbuf_alloc+0x1e0>)
 800cf86:	483b      	ldr	r0, [pc, #236]	; (800d074 <pbuf_alloc+0x1dc>)
 800cf88:	f009 fb78 	bl	801667c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800cf8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d102      	bne.n	800cf98 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800cf92:	693b      	ldr	r3, [r7, #16]
 800cf94:	627b      	str	r3, [r7, #36]	; 0x24
 800cf96:	e002      	b.n	800cf9e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800cf98:	69fb      	ldr	r3, [r7, #28]
 800cf9a:	693a      	ldr	r2, [r7, #16]
 800cf9c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800cfa2:	8b7a      	ldrh	r2, [r7, #26]
 800cfa4:	89fb      	ldrh	r3, [r7, #14]
 800cfa6:	1ad3      	subs	r3, r2, r3
 800cfa8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800cfaa:	2300      	movs	r3, #0
 800cfac:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800cfae:	8b7b      	ldrh	r3, [r7, #26]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d19e      	bne.n	800cef2 <pbuf_alloc+0x5a>
      break;
 800cfb4:	e055      	b.n	800d062 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800cfb6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cfb8:	3303      	adds	r3, #3
 800cfba:	b29b      	uxth	r3, r3
 800cfbc:	f023 0303 	bic.w	r3, r3, #3
 800cfc0:	b29a      	uxth	r2, r3
 800cfc2:	88bb      	ldrh	r3, [r7, #4]
 800cfc4:	3303      	adds	r3, #3
 800cfc6:	b29b      	uxth	r3, r3
 800cfc8:	f023 0303 	bic.w	r3, r3, #3
 800cfcc:	b29b      	uxth	r3, r3
 800cfce:	4413      	add	r3, r2
 800cfd0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800cfd2:	8b3b      	ldrh	r3, [r7, #24]
 800cfd4:	3310      	adds	r3, #16
 800cfd6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cfd8:	8b3a      	ldrh	r2, [r7, #24]
 800cfda:	88bb      	ldrh	r3, [r7, #4]
 800cfdc:	3303      	adds	r3, #3
 800cfde:	f023 0303 	bic.w	r3, r3, #3
 800cfe2:	429a      	cmp	r2, r3
 800cfe4:	d306      	bcc.n	800cff4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800cfe6:	8afa      	ldrh	r2, [r7, #22]
 800cfe8:	88bb      	ldrh	r3, [r7, #4]
 800cfea:	3303      	adds	r3, #3
 800cfec:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cff0:	429a      	cmp	r2, r3
 800cff2:	d201      	bcs.n	800cff8 <pbuf_alloc+0x160>
        return NULL;
 800cff4:	2300      	movs	r3, #0
 800cff6:	e035      	b.n	800d064 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800cff8:	8afb      	ldrh	r3, [r7, #22]
 800cffa:	4618      	mov	r0, r3
 800cffc:	f7ff fa64 	bl	800c4c8 <mem_malloc>
 800d000:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800d002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d004:	2b00      	cmp	r3, #0
 800d006:	d101      	bne.n	800d00c <pbuf_alloc+0x174>
        return NULL;
 800d008:	2300      	movs	r3, #0
 800d00a:	e02b      	b.n	800d064 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d00c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d00e:	3310      	adds	r3, #16
 800d010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d012:	4413      	add	r3, r2
 800d014:	3303      	adds	r3, #3
 800d016:	f023 0303 	bic.w	r3, r3, #3
 800d01a:	4618      	mov	r0, r3
 800d01c:	88b9      	ldrh	r1, [r7, #4]
 800d01e:	88ba      	ldrh	r2, [r7, #4]
 800d020:	2300      	movs	r3, #0
 800d022:	9301      	str	r3, [sp, #4]
 800d024:	887b      	ldrh	r3, [r7, #2]
 800d026:	9300      	str	r3, [sp, #0]
 800d028:	460b      	mov	r3, r1
 800d02a:	4601      	mov	r1, r0
 800d02c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d02e:	f7ff ff09 	bl	800ce44 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d034:	685b      	ldr	r3, [r3, #4]
 800d036:	f003 0303 	and.w	r3, r3, #3
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d010      	beq.n	800d060 <pbuf_alloc+0x1c8>
 800d03e:	4b0b      	ldr	r3, [pc, #44]	; (800d06c <pbuf_alloc+0x1d4>)
 800d040:	f44f 7291 	mov.w	r2, #290	; 0x122
 800d044:	490d      	ldr	r1, [pc, #52]	; (800d07c <pbuf_alloc+0x1e4>)
 800d046:	480b      	ldr	r0, [pc, #44]	; (800d074 <pbuf_alloc+0x1dc>)
 800d048:	f009 fb18 	bl	801667c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d04c:	e008      	b.n	800d060 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d04e:	4b07      	ldr	r3, [pc, #28]	; (800d06c <pbuf_alloc+0x1d4>)
 800d050:	f240 1227 	movw	r2, #295	; 0x127
 800d054:	490a      	ldr	r1, [pc, #40]	; (800d080 <pbuf_alloc+0x1e8>)
 800d056:	4807      	ldr	r0, [pc, #28]	; (800d074 <pbuf_alloc+0x1dc>)
 800d058:	f009 fb10 	bl	801667c <iprintf>
      return NULL;
 800d05c:	2300      	movs	r3, #0
 800d05e:	e001      	b.n	800d064 <pbuf_alloc+0x1cc>
      break;
 800d060:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d064:	4618      	mov	r0, r3
 800d066:	3728      	adds	r7, #40	; 0x28
 800d068:	46bd      	mov	sp, r7
 800d06a:	bd80      	pop	{r7, pc}
 800d06c:	0801938c 	.word	0x0801938c
 800d070:	080193bc 	.word	0x080193bc
 800d074:	080193ec 	.word	0x080193ec
 800d078:	08019414 	.word	0x08019414
 800d07c:	08019448 	.word	0x08019448
 800d080:	08019474 	.word	0x08019474

0800d084 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b086      	sub	sp, #24
 800d088:	af02      	add	r7, sp, #8
 800d08a:	6078      	str	r0, [r7, #4]
 800d08c:	460b      	mov	r3, r1
 800d08e:	807b      	strh	r3, [r7, #2]
 800d090:	4613      	mov	r3, r2
 800d092:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d094:	883b      	ldrh	r3, [r7, #0]
 800d096:	2b41      	cmp	r3, #65	; 0x41
 800d098:	d009      	beq.n	800d0ae <pbuf_alloc_reference+0x2a>
 800d09a:	883b      	ldrh	r3, [r7, #0]
 800d09c:	2b01      	cmp	r3, #1
 800d09e:	d006      	beq.n	800d0ae <pbuf_alloc_reference+0x2a>
 800d0a0:	4b0f      	ldr	r3, [pc, #60]	; (800d0e0 <pbuf_alloc_reference+0x5c>)
 800d0a2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800d0a6:	490f      	ldr	r1, [pc, #60]	; (800d0e4 <pbuf_alloc_reference+0x60>)
 800d0a8:	480f      	ldr	r0, [pc, #60]	; (800d0e8 <pbuf_alloc_reference+0x64>)
 800d0aa:	f009 fae7 	bl	801667c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d0ae:	2007      	movs	r0, #7
 800d0b0:	f7ff fb78 	bl	800c7a4 <memp_malloc>
 800d0b4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d101      	bne.n	800d0c0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800d0bc:	2300      	movs	r3, #0
 800d0be:	e00b      	b.n	800d0d8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800d0c0:	8879      	ldrh	r1, [r7, #2]
 800d0c2:	887a      	ldrh	r2, [r7, #2]
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	9301      	str	r3, [sp, #4]
 800d0c8:	883b      	ldrh	r3, [r7, #0]
 800d0ca:	9300      	str	r3, [sp, #0]
 800d0cc:	460b      	mov	r3, r1
 800d0ce:	6879      	ldr	r1, [r7, #4]
 800d0d0:	68f8      	ldr	r0, [r7, #12]
 800d0d2:	f7ff feb7 	bl	800ce44 <pbuf_init_alloced_pbuf>
  return p;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
}
 800d0d8:	4618      	mov	r0, r3
 800d0da:	3710      	adds	r7, #16
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd80      	pop	{r7, pc}
 800d0e0:	0801938c 	.word	0x0801938c
 800d0e4:	08019490 	.word	0x08019490
 800d0e8:	080193ec 	.word	0x080193ec

0800d0ec <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b088      	sub	sp, #32
 800d0f0:	af02      	add	r7, sp, #8
 800d0f2:	607b      	str	r3, [r7, #4]
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	73fb      	strb	r3, [r7, #15]
 800d0f8:	460b      	mov	r3, r1
 800d0fa:	81bb      	strh	r3, [r7, #12]
 800d0fc:	4613      	mov	r3, r2
 800d0fe:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800d100:	7bfb      	ldrb	r3, [r7, #15]
 800d102:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d104:	8a7b      	ldrh	r3, [r7, #18]
 800d106:	3303      	adds	r3, #3
 800d108:	f023 0203 	bic.w	r2, r3, #3
 800d10c:	89bb      	ldrh	r3, [r7, #12]
 800d10e:	441a      	add	r2, r3
 800d110:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d112:	429a      	cmp	r2, r3
 800d114:	d901      	bls.n	800d11a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d116:	2300      	movs	r3, #0
 800d118:	e018      	b.n	800d14c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800d11a:	6a3b      	ldr	r3, [r7, #32]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d007      	beq.n	800d130 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d120:	8a7b      	ldrh	r3, [r7, #18]
 800d122:	3303      	adds	r3, #3
 800d124:	f023 0303 	bic.w	r3, r3, #3
 800d128:	6a3a      	ldr	r2, [r7, #32]
 800d12a:	4413      	add	r3, r2
 800d12c:	617b      	str	r3, [r7, #20]
 800d12e:	e001      	b.n	800d134 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800d130:	2300      	movs	r3, #0
 800d132:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800d134:	6878      	ldr	r0, [r7, #4]
 800d136:	89b9      	ldrh	r1, [r7, #12]
 800d138:	89ba      	ldrh	r2, [r7, #12]
 800d13a:	2302      	movs	r3, #2
 800d13c:	9301      	str	r3, [sp, #4]
 800d13e:	897b      	ldrh	r3, [r7, #10]
 800d140:	9300      	str	r3, [sp, #0]
 800d142:	460b      	mov	r3, r1
 800d144:	6979      	ldr	r1, [r7, #20]
 800d146:	f7ff fe7d 	bl	800ce44 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800d14a:	687b      	ldr	r3, [r7, #4]
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3718      	adds	r7, #24
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}

0800d154 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b084      	sub	sp, #16
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
 800d15c:	460b      	mov	r3, r1
 800d15e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d106      	bne.n	800d174 <pbuf_realloc+0x20>
 800d166:	4b3a      	ldr	r3, [pc, #232]	; (800d250 <pbuf_realloc+0xfc>)
 800d168:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800d16c:	4939      	ldr	r1, [pc, #228]	; (800d254 <pbuf_realloc+0x100>)
 800d16e:	483a      	ldr	r0, [pc, #232]	; (800d258 <pbuf_realloc+0x104>)
 800d170:	f009 fa84 	bl	801667c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	891b      	ldrh	r3, [r3, #8]
 800d178:	887a      	ldrh	r2, [r7, #2]
 800d17a:	429a      	cmp	r2, r3
 800d17c:	d263      	bcs.n	800d246 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	891a      	ldrh	r2, [r3, #8]
 800d182:	887b      	ldrh	r3, [r7, #2]
 800d184:	1ad3      	subs	r3, r2, r3
 800d186:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d188:	887b      	ldrh	r3, [r7, #2]
 800d18a:	817b      	strh	r3, [r7, #10]
  q = p;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d190:	e018      	b.n	800d1c4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	895b      	ldrh	r3, [r3, #10]
 800d196:	897a      	ldrh	r2, [r7, #10]
 800d198:	1ad3      	subs	r3, r2, r3
 800d19a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	891a      	ldrh	r2, [r3, #8]
 800d1a0:	893b      	ldrh	r3, [r7, #8]
 800d1a2:	1ad3      	subs	r3, r2, r3
 800d1a4:	b29a      	uxth	r2, r3
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d106      	bne.n	800d1c4 <pbuf_realloc+0x70>
 800d1b6:	4b26      	ldr	r3, [pc, #152]	; (800d250 <pbuf_realloc+0xfc>)
 800d1b8:	f240 12af 	movw	r2, #431	; 0x1af
 800d1bc:	4927      	ldr	r1, [pc, #156]	; (800d25c <pbuf_realloc+0x108>)
 800d1be:	4826      	ldr	r0, [pc, #152]	; (800d258 <pbuf_realloc+0x104>)
 800d1c0:	f009 fa5c 	bl	801667c <iprintf>
  while (rem_len > q->len) {
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	895b      	ldrh	r3, [r3, #10]
 800d1c8:	897a      	ldrh	r2, [r7, #10]
 800d1ca:	429a      	cmp	r2, r3
 800d1cc:	d8e1      	bhi.n	800d192 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	7b1b      	ldrb	r3, [r3, #12]
 800d1d2:	f003 030f 	and.w	r3, r3, #15
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d121      	bne.n	800d21e <pbuf_realloc+0xca>
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	895b      	ldrh	r3, [r3, #10]
 800d1de:	897a      	ldrh	r2, [r7, #10]
 800d1e0:	429a      	cmp	r2, r3
 800d1e2:	d01c      	beq.n	800d21e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	7b5b      	ldrb	r3, [r3, #13]
 800d1e8:	f003 0302 	and.w	r3, r3, #2
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d116      	bne.n	800d21e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	685a      	ldr	r2, [r3, #4]
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	1ad3      	subs	r3, r2, r3
 800d1f8:	b29a      	uxth	r2, r3
 800d1fa:	897b      	ldrh	r3, [r7, #10]
 800d1fc:	4413      	add	r3, r2
 800d1fe:	b29b      	uxth	r3, r3
 800d200:	4619      	mov	r1, r3
 800d202:	68f8      	ldr	r0, [r7, #12]
 800d204:	f7ff f864 	bl	800c2d0 <mem_trim>
 800d208:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d106      	bne.n	800d21e <pbuf_realloc+0xca>
 800d210:	4b0f      	ldr	r3, [pc, #60]	; (800d250 <pbuf_realloc+0xfc>)
 800d212:	f240 12bd 	movw	r2, #445	; 0x1bd
 800d216:	4912      	ldr	r1, [pc, #72]	; (800d260 <pbuf_realloc+0x10c>)
 800d218:	480f      	ldr	r0, [pc, #60]	; (800d258 <pbuf_realloc+0x104>)
 800d21a:	f009 fa2f 	bl	801667c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	897a      	ldrh	r2, [r7, #10]
 800d222:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	895a      	ldrh	r2, [r3, #10]
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d004      	beq.n	800d23e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	4618      	mov	r0, r3
 800d23a:	f000 f911 	bl	800d460 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	2200      	movs	r2, #0
 800d242:	601a      	str	r2, [r3, #0]
 800d244:	e000      	b.n	800d248 <pbuf_realloc+0xf4>
    return;
 800d246:	bf00      	nop

}
 800d248:	3710      	adds	r7, #16
 800d24a:	46bd      	mov	sp, r7
 800d24c:	bd80      	pop	{r7, pc}
 800d24e:	bf00      	nop
 800d250:	0801938c 	.word	0x0801938c
 800d254:	080194a4 	.word	0x080194a4
 800d258:	080193ec 	.word	0x080193ec
 800d25c:	080194bc 	.word	0x080194bc
 800d260:	080194d4 	.word	0x080194d4

0800d264 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b086      	sub	sp, #24
 800d268:	af00      	add	r7, sp, #0
 800d26a:	60f8      	str	r0, [r7, #12]
 800d26c:	60b9      	str	r1, [r7, #8]
 800d26e:	4613      	mov	r3, r2
 800d270:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d106      	bne.n	800d286 <pbuf_add_header_impl+0x22>
 800d278:	4b2b      	ldr	r3, [pc, #172]	; (800d328 <pbuf_add_header_impl+0xc4>)
 800d27a:	f240 12df 	movw	r2, #479	; 0x1df
 800d27e:	492b      	ldr	r1, [pc, #172]	; (800d32c <pbuf_add_header_impl+0xc8>)
 800d280:	482b      	ldr	r0, [pc, #172]	; (800d330 <pbuf_add_header_impl+0xcc>)
 800d282:	f009 f9fb 	bl	801667c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d003      	beq.n	800d294 <pbuf_add_header_impl+0x30>
 800d28c:	68bb      	ldr	r3, [r7, #8]
 800d28e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d292:	d301      	bcc.n	800d298 <pbuf_add_header_impl+0x34>
    return 1;
 800d294:	2301      	movs	r3, #1
 800d296:	e043      	b.n	800d320 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800d298:	68bb      	ldr	r3, [r7, #8]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d101      	bne.n	800d2a2 <pbuf_add_header_impl+0x3e>
    return 0;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	e03e      	b.n	800d320 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	891a      	ldrh	r2, [r3, #8]
 800d2aa:	8a7b      	ldrh	r3, [r7, #18]
 800d2ac:	4413      	add	r3, r2
 800d2ae:	b29b      	uxth	r3, r3
 800d2b0:	8a7a      	ldrh	r2, [r7, #18]
 800d2b2:	429a      	cmp	r2, r3
 800d2b4:	d901      	bls.n	800d2ba <pbuf_add_header_impl+0x56>
    return 1;
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	e032      	b.n	800d320 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	7b1b      	ldrb	r3, [r3, #12]
 800d2be:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d2c0:	8a3b      	ldrh	r3, [r7, #16]
 800d2c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d00c      	beq.n	800d2e4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	685a      	ldr	r2, [r3, #4]
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	425b      	negs	r3, r3
 800d2d2:	4413      	add	r3, r2
 800d2d4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	3310      	adds	r3, #16
 800d2da:	697a      	ldr	r2, [r7, #20]
 800d2dc:	429a      	cmp	r2, r3
 800d2de:	d20d      	bcs.n	800d2fc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	e01d      	b.n	800d320 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d2e4:	79fb      	ldrb	r3, [r7, #7]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d006      	beq.n	800d2f8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	685a      	ldr	r2, [r3, #4]
 800d2ee:	68bb      	ldr	r3, [r7, #8]
 800d2f0:	425b      	negs	r3, r3
 800d2f2:	4413      	add	r3, r2
 800d2f4:	617b      	str	r3, [r7, #20]
 800d2f6:	e001      	b.n	800d2fc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d2f8:	2301      	movs	r3, #1
 800d2fa:	e011      	b.n	800d320 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	697a      	ldr	r2, [r7, #20]
 800d300:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	895a      	ldrh	r2, [r3, #10]
 800d306:	8a7b      	ldrh	r3, [r7, #18]
 800d308:	4413      	add	r3, r2
 800d30a:	b29a      	uxth	r2, r3
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	891a      	ldrh	r2, [r3, #8]
 800d314:	8a7b      	ldrh	r3, [r7, #18]
 800d316:	4413      	add	r3, r2
 800d318:	b29a      	uxth	r2, r3
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	811a      	strh	r2, [r3, #8]


  return 0;
 800d31e:	2300      	movs	r3, #0
}
 800d320:	4618      	mov	r0, r3
 800d322:	3718      	adds	r7, #24
 800d324:	46bd      	mov	sp, r7
 800d326:	bd80      	pop	{r7, pc}
 800d328:	0801938c 	.word	0x0801938c
 800d32c:	080194f0 	.word	0x080194f0
 800d330:	080193ec 	.word	0x080193ec

0800d334 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b082      	sub	sp, #8
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
 800d33c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d33e:	2200      	movs	r2, #0
 800d340:	6839      	ldr	r1, [r7, #0]
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	f7ff ff8e 	bl	800d264 <pbuf_add_header_impl>
 800d348:	4603      	mov	r3, r0
}
 800d34a:	4618      	mov	r0, r3
 800d34c:	3708      	adds	r7, #8
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}
	...

0800d354 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b084      	sub	sp, #16
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
 800d35c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d106      	bne.n	800d372 <pbuf_remove_header+0x1e>
 800d364:	4b20      	ldr	r3, [pc, #128]	; (800d3e8 <pbuf_remove_header+0x94>)
 800d366:	f240 224b 	movw	r2, #587	; 0x24b
 800d36a:	4920      	ldr	r1, [pc, #128]	; (800d3ec <pbuf_remove_header+0x98>)
 800d36c:	4820      	ldr	r0, [pc, #128]	; (800d3f0 <pbuf_remove_header+0x9c>)
 800d36e:	f009 f985 	bl	801667c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d003      	beq.n	800d380 <pbuf_remove_header+0x2c>
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d37e:	d301      	bcc.n	800d384 <pbuf_remove_header+0x30>
    return 1;
 800d380:	2301      	movs	r3, #1
 800d382:	e02c      	b.n	800d3de <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d101      	bne.n	800d38e <pbuf_remove_header+0x3a>
    return 0;
 800d38a:	2300      	movs	r3, #0
 800d38c:	e027      	b.n	800d3de <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	895b      	ldrh	r3, [r3, #10]
 800d396:	89fa      	ldrh	r2, [r7, #14]
 800d398:	429a      	cmp	r2, r3
 800d39a:	d908      	bls.n	800d3ae <pbuf_remove_header+0x5a>
 800d39c:	4b12      	ldr	r3, [pc, #72]	; (800d3e8 <pbuf_remove_header+0x94>)
 800d39e:	f240 2255 	movw	r2, #597	; 0x255
 800d3a2:	4914      	ldr	r1, [pc, #80]	; (800d3f4 <pbuf_remove_header+0xa0>)
 800d3a4:	4812      	ldr	r0, [pc, #72]	; (800d3f0 <pbuf_remove_header+0x9c>)
 800d3a6:	f009 f969 	bl	801667c <iprintf>
 800d3aa:	2301      	movs	r3, #1
 800d3ac:	e017      	b.n	800d3de <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	685b      	ldr	r3, [r3, #4]
 800d3b2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	685a      	ldr	r2, [r3, #4]
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	441a      	add	r2, r3
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	895a      	ldrh	r2, [r3, #10]
 800d3c4:	89fb      	ldrh	r3, [r7, #14]
 800d3c6:	1ad3      	subs	r3, r2, r3
 800d3c8:	b29a      	uxth	r2, r3
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	891a      	ldrh	r2, [r3, #8]
 800d3d2:	89fb      	ldrh	r3, [r7, #14]
 800d3d4:	1ad3      	subs	r3, r2, r3
 800d3d6:	b29a      	uxth	r2, r3
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d3dc:	2300      	movs	r3, #0
}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	3710      	adds	r7, #16
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}
 800d3e6:	bf00      	nop
 800d3e8:	0801938c 	.word	0x0801938c
 800d3ec:	080194f0 	.word	0x080194f0
 800d3f0:	080193ec 	.word	0x080193ec
 800d3f4:	080194fc 	.word	0x080194fc

0800d3f8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b082      	sub	sp, #8
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
 800d400:	460b      	mov	r3, r1
 800d402:	807b      	strh	r3, [r7, #2]
 800d404:	4613      	mov	r3, r2
 800d406:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d408:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	da08      	bge.n	800d422 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d410:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d414:	425b      	negs	r3, r3
 800d416:	4619      	mov	r1, r3
 800d418:	6878      	ldr	r0, [r7, #4]
 800d41a:	f7ff ff9b 	bl	800d354 <pbuf_remove_header>
 800d41e:	4603      	mov	r3, r0
 800d420:	e007      	b.n	800d432 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d422:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d426:	787a      	ldrb	r2, [r7, #1]
 800d428:	4619      	mov	r1, r3
 800d42a:	6878      	ldr	r0, [r7, #4]
 800d42c:	f7ff ff1a 	bl	800d264 <pbuf_add_header_impl>
 800d430:	4603      	mov	r3, r0
  }
}
 800d432:	4618      	mov	r0, r3
 800d434:	3708      	adds	r7, #8
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}

0800d43a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d43a:	b580      	push	{r7, lr}
 800d43c:	b082      	sub	sp, #8
 800d43e:	af00      	add	r7, sp, #0
 800d440:	6078      	str	r0, [r7, #4]
 800d442:	460b      	mov	r3, r1
 800d444:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d446:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d44a:	2201      	movs	r2, #1
 800d44c:	4619      	mov	r1, r3
 800d44e:	6878      	ldr	r0, [r7, #4]
 800d450:	f7ff ffd2 	bl	800d3f8 <pbuf_header_impl>
 800d454:	4603      	mov	r3, r0
}
 800d456:	4618      	mov	r0, r3
 800d458:	3708      	adds	r7, #8
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}
	...

0800d460 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b086      	sub	sp, #24
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d10b      	bne.n	800d486 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d106      	bne.n	800d482 <pbuf_free+0x22>
 800d474:	4b38      	ldr	r3, [pc, #224]	; (800d558 <pbuf_free+0xf8>)
 800d476:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800d47a:	4938      	ldr	r1, [pc, #224]	; (800d55c <pbuf_free+0xfc>)
 800d47c:	4838      	ldr	r0, [pc, #224]	; (800d560 <pbuf_free+0x100>)
 800d47e:	f009 f8fd 	bl	801667c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d482:	2300      	movs	r3, #0
 800d484:	e063      	b.n	800d54e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d486:	2300      	movs	r3, #0
 800d488:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d48a:	e05c      	b.n	800d546 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	7b9b      	ldrb	r3, [r3, #14]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d106      	bne.n	800d4a2 <pbuf_free+0x42>
 800d494:	4b30      	ldr	r3, [pc, #192]	; (800d558 <pbuf_free+0xf8>)
 800d496:	f240 22f1 	movw	r2, #753	; 0x2f1
 800d49a:	4932      	ldr	r1, [pc, #200]	; (800d564 <pbuf_free+0x104>)
 800d49c:	4830      	ldr	r0, [pc, #192]	; (800d560 <pbuf_free+0x100>)
 800d49e:	f009 f8ed 	bl	801667c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	7b9b      	ldrb	r3, [r3, #14]
 800d4a6:	3b01      	subs	r3, #1
 800d4a8:	b2da      	uxtb	r2, r3
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	739a      	strb	r2, [r3, #14]
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	7b9b      	ldrb	r3, [r3, #14]
 800d4b2:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d4b4:	7dbb      	ldrb	r3, [r7, #22]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d143      	bne.n	800d542 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	7b1b      	ldrb	r3, [r3, #12]
 800d4c4:	f003 030f 	and.w	r3, r3, #15
 800d4c8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	7b5b      	ldrb	r3, [r3, #13]
 800d4ce:	f003 0302 	and.w	r3, r3, #2
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d011      	beq.n	800d4fa <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d4da:	68bb      	ldr	r3, [r7, #8]
 800d4dc:	691b      	ldr	r3, [r3, #16]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d106      	bne.n	800d4f0 <pbuf_free+0x90>
 800d4e2:	4b1d      	ldr	r3, [pc, #116]	; (800d558 <pbuf_free+0xf8>)
 800d4e4:	f240 22ff 	movw	r2, #767	; 0x2ff
 800d4e8:	491f      	ldr	r1, [pc, #124]	; (800d568 <pbuf_free+0x108>)
 800d4ea:	481d      	ldr	r0, [pc, #116]	; (800d560 <pbuf_free+0x100>)
 800d4ec:	f009 f8c6 	bl	801667c <iprintf>
        pc->custom_free_function(p);
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	691b      	ldr	r3, [r3, #16]
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	4798      	blx	r3
 800d4f8:	e01d      	b.n	800d536 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d4fa:	7bfb      	ldrb	r3, [r7, #15]
 800d4fc:	2b02      	cmp	r3, #2
 800d4fe:	d104      	bne.n	800d50a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800d500:	6879      	ldr	r1, [r7, #4]
 800d502:	2008      	movs	r0, #8
 800d504:	f7ff f99a 	bl	800c83c <memp_free>
 800d508:	e015      	b.n	800d536 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d50a:	7bfb      	ldrb	r3, [r7, #15]
 800d50c:	2b01      	cmp	r3, #1
 800d50e:	d104      	bne.n	800d51a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800d510:	6879      	ldr	r1, [r7, #4]
 800d512:	2007      	movs	r0, #7
 800d514:	f7ff f992 	bl	800c83c <memp_free>
 800d518:	e00d      	b.n	800d536 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d51a:	7bfb      	ldrb	r3, [r7, #15]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d103      	bne.n	800d528 <pbuf_free+0xc8>
          mem_free(p);
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	f7fe fe6b 	bl	800c1fc <mem_free>
 800d526:	e006      	b.n	800d536 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d528:	4b0b      	ldr	r3, [pc, #44]	; (800d558 <pbuf_free+0xf8>)
 800d52a:	f240 320f 	movw	r2, #783	; 0x30f
 800d52e:	490f      	ldr	r1, [pc, #60]	; (800d56c <pbuf_free+0x10c>)
 800d530:	480b      	ldr	r0, [pc, #44]	; (800d560 <pbuf_free+0x100>)
 800d532:	f009 f8a3 	bl	801667c <iprintf>
        }
      }
      count++;
 800d536:	7dfb      	ldrb	r3, [r7, #23]
 800d538:	3301      	adds	r3, #1
 800d53a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800d53c:	693b      	ldr	r3, [r7, #16]
 800d53e:	607b      	str	r3, [r7, #4]
 800d540:	e001      	b.n	800d546 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d542:	2300      	movs	r3, #0
 800d544:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d19f      	bne.n	800d48c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d54c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d54e:	4618      	mov	r0, r3
 800d550:	3718      	adds	r7, #24
 800d552:	46bd      	mov	sp, r7
 800d554:	bd80      	pop	{r7, pc}
 800d556:	bf00      	nop
 800d558:	0801938c 	.word	0x0801938c
 800d55c:	080194f0 	.word	0x080194f0
 800d560:	080193ec 	.word	0x080193ec
 800d564:	0801951c 	.word	0x0801951c
 800d568:	08019534 	.word	0x08019534
 800d56c:	08019558 	.word	0x08019558

0800d570 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d570:	b480      	push	{r7}
 800d572:	b085      	sub	sp, #20
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d578:	2300      	movs	r3, #0
 800d57a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d57c:	e005      	b.n	800d58a <pbuf_clen+0x1a>
    ++len;
 800d57e:	89fb      	ldrh	r3, [r7, #14]
 800d580:	3301      	adds	r3, #1
 800d582:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d1f6      	bne.n	800d57e <pbuf_clen+0xe>
  }
  return len;
 800d590:	89fb      	ldrh	r3, [r7, #14]
}
 800d592:	4618      	mov	r0, r3
 800d594:	3714      	adds	r7, #20
 800d596:	46bd      	mov	sp, r7
 800d598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59c:	4770      	bx	lr
	...

0800d5a0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b082      	sub	sp, #8
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d010      	beq.n	800d5d0 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	7b9b      	ldrb	r3, [r3, #14]
 800d5b2:	3301      	adds	r3, #1
 800d5b4:	b2da      	uxtb	r2, r3
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	7b9b      	ldrb	r3, [r3, #14]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d106      	bne.n	800d5d0 <pbuf_ref+0x30>
 800d5c2:	4b05      	ldr	r3, [pc, #20]	; (800d5d8 <pbuf_ref+0x38>)
 800d5c4:	f240 3242 	movw	r2, #834	; 0x342
 800d5c8:	4904      	ldr	r1, [pc, #16]	; (800d5dc <pbuf_ref+0x3c>)
 800d5ca:	4805      	ldr	r0, [pc, #20]	; (800d5e0 <pbuf_ref+0x40>)
 800d5cc:	f009 f856 	bl	801667c <iprintf>
  }
}
 800d5d0:	bf00      	nop
 800d5d2:	3708      	adds	r7, #8
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd80      	pop	{r7, pc}
 800d5d8:	0801938c 	.word	0x0801938c
 800d5dc:	0801956c 	.word	0x0801956c
 800d5e0:	080193ec 	.word	0x080193ec

0800d5e4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b084      	sub	sp, #16
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
 800d5ec:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d002      	beq.n	800d5fa <pbuf_cat+0x16>
 800d5f4:	683b      	ldr	r3, [r7, #0]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d107      	bne.n	800d60a <pbuf_cat+0x26>
 800d5fa:	4b20      	ldr	r3, [pc, #128]	; (800d67c <pbuf_cat+0x98>)
 800d5fc:	f240 3259 	movw	r2, #857	; 0x359
 800d600:	491f      	ldr	r1, [pc, #124]	; (800d680 <pbuf_cat+0x9c>)
 800d602:	4820      	ldr	r0, [pc, #128]	; (800d684 <pbuf_cat+0xa0>)
 800d604:	f009 f83a 	bl	801667c <iprintf>
 800d608:	e034      	b.n	800d674 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	60fb      	str	r3, [r7, #12]
 800d60e:	e00a      	b.n	800d626 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	891a      	ldrh	r2, [r3, #8]
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	891b      	ldrh	r3, [r3, #8]
 800d618:	4413      	add	r3, r2
 800d61a:	b29a      	uxth	r2, r3
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	60fb      	str	r3, [r7, #12]
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d1f0      	bne.n	800d610 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	891a      	ldrh	r2, [r3, #8]
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	895b      	ldrh	r3, [r3, #10]
 800d636:	429a      	cmp	r2, r3
 800d638:	d006      	beq.n	800d648 <pbuf_cat+0x64>
 800d63a:	4b10      	ldr	r3, [pc, #64]	; (800d67c <pbuf_cat+0x98>)
 800d63c:	f240 3262 	movw	r2, #866	; 0x362
 800d640:	4911      	ldr	r1, [pc, #68]	; (800d688 <pbuf_cat+0xa4>)
 800d642:	4810      	ldr	r0, [pc, #64]	; (800d684 <pbuf_cat+0xa0>)
 800d644:	f009 f81a 	bl	801667c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d006      	beq.n	800d65e <pbuf_cat+0x7a>
 800d650:	4b0a      	ldr	r3, [pc, #40]	; (800d67c <pbuf_cat+0x98>)
 800d652:	f240 3263 	movw	r2, #867	; 0x363
 800d656:	490d      	ldr	r1, [pc, #52]	; (800d68c <pbuf_cat+0xa8>)
 800d658:	480a      	ldr	r0, [pc, #40]	; (800d684 <pbuf_cat+0xa0>)
 800d65a:	f009 f80f 	bl	801667c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	891a      	ldrh	r2, [r3, #8]
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	891b      	ldrh	r3, [r3, #8]
 800d666:	4413      	add	r3, r2
 800d668:	b29a      	uxth	r2, r3
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	683a      	ldr	r2, [r7, #0]
 800d672:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d674:	3710      	adds	r7, #16
 800d676:	46bd      	mov	sp, r7
 800d678:	bd80      	pop	{r7, pc}
 800d67a:	bf00      	nop
 800d67c:	0801938c 	.word	0x0801938c
 800d680:	08019580 	.word	0x08019580
 800d684:	080193ec 	.word	0x080193ec
 800d688:	080195b8 	.word	0x080195b8
 800d68c:	080195e8 	.word	0x080195e8

0800d690 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b086      	sub	sp, #24
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
 800d698:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d69a:	2300      	movs	r3, #0
 800d69c:	617b      	str	r3, [r7, #20]
 800d69e:	2300      	movs	r3, #0
 800d6a0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d008      	beq.n	800d6ba <pbuf_copy+0x2a>
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d005      	beq.n	800d6ba <pbuf_copy+0x2a>
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	891a      	ldrh	r2, [r3, #8]
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	891b      	ldrh	r3, [r3, #8]
 800d6b6:	429a      	cmp	r2, r3
 800d6b8:	d209      	bcs.n	800d6ce <pbuf_copy+0x3e>
 800d6ba:	4b57      	ldr	r3, [pc, #348]	; (800d818 <pbuf_copy+0x188>)
 800d6bc:	f240 32c9 	movw	r2, #969	; 0x3c9
 800d6c0:	4956      	ldr	r1, [pc, #344]	; (800d81c <pbuf_copy+0x18c>)
 800d6c2:	4857      	ldr	r0, [pc, #348]	; (800d820 <pbuf_copy+0x190>)
 800d6c4:	f008 ffda 	bl	801667c <iprintf>
 800d6c8:	f06f 030f 	mvn.w	r3, #15
 800d6cc:	e09f      	b.n	800d80e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	895b      	ldrh	r3, [r3, #10]
 800d6d2:	461a      	mov	r2, r3
 800d6d4:	697b      	ldr	r3, [r7, #20]
 800d6d6:	1ad2      	subs	r2, r2, r3
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	895b      	ldrh	r3, [r3, #10]
 800d6dc:	4619      	mov	r1, r3
 800d6de:	693b      	ldr	r3, [r7, #16]
 800d6e0:	1acb      	subs	r3, r1, r3
 800d6e2:	429a      	cmp	r2, r3
 800d6e4:	d306      	bcc.n	800d6f4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	895b      	ldrh	r3, [r3, #10]
 800d6ea:	461a      	mov	r2, r3
 800d6ec:	693b      	ldr	r3, [r7, #16]
 800d6ee:	1ad3      	subs	r3, r2, r3
 800d6f0:	60fb      	str	r3, [r7, #12]
 800d6f2:	e005      	b.n	800d700 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	895b      	ldrh	r3, [r3, #10]
 800d6f8:	461a      	mov	r2, r3
 800d6fa:	697b      	ldr	r3, [r7, #20]
 800d6fc:	1ad3      	subs	r3, r2, r3
 800d6fe:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	685a      	ldr	r2, [r3, #4]
 800d704:	697b      	ldr	r3, [r7, #20]
 800d706:	18d0      	adds	r0, r2, r3
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	685a      	ldr	r2, [r3, #4]
 800d70c:	693b      	ldr	r3, [r7, #16]
 800d70e:	4413      	add	r3, r2
 800d710:	68fa      	ldr	r2, [r7, #12]
 800d712:	4619      	mov	r1, r3
 800d714:	f008 ff82 	bl	801661c <memcpy>
    offset_to += len;
 800d718:	697a      	ldr	r2, [r7, #20]
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	4413      	add	r3, r2
 800d71e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d720:	693a      	ldr	r2, [r7, #16]
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	4413      	add	r3, r2
 800d726:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	895b      	ldrh	r3, [r3, #10]
 800d72c:	461a      	mov	r2, r3
 800d72e:	697b      	ldr	r3, [r7, #20]
 800d730:	4293      	cmp	r3, r2
 800d732:	d906      	bls.n	800d742 <pbuf_copy+0xb2>
 800d734:	4b38      	ldr	r3, [pc, #224]	; (800d818 <pbuf_copy+0x188>)
 800d736:	f240 32d9 	movw	r2, #985	; 0x3d9
 800d73a:	493a      	ldr	r1, [pc, #232]	; (800d824 <pbuf_copy+0x194>)
 800d73c:	4838      	ldr	r0, [pc, #224]	; (800d820 <pbuf_copy+0x190>)
 800d73e:	f008 ff9d 	bl	801667c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	895b      	ldrh	r3, [r3, #10]
 800d746:	461a      	mov	r2, r3
 800d748:	693b      	ldr	r3, [r7, #16]
 800d74a:	4293      	cmp	r3, r2
 800d74c:	d906      	bls.n	800d75c <pbuf_copy+0xcc>
 800d74e:	4b32      	ldr	r3, [pc, #200]	; (800d818 <pbuf_copy+0x188>)
 800d750:	f240 32da 	movw	r2, #986	; 0x3da
 800d754:	4934      	ldr	r1, [pc, #208]	; (800d828 <pbuf_copy+0x198>)
 800d756:	4832      	ldr	r0, [pc, #200]	; (800d820 <pbuf_copy+0x190>)
 800d758:	f008 ff90 	bl	801667c <iprintf>
    if (offset_from >= p_from->len) {
 800d75c:	683b      	ldr	r3, [r7, #0]
 800d75e:	895b      	ldrh	r3, [r3, #10]
 800d760:	461a      	mov	r2, r3
 800d762:	693b      	ldr	r3, [r7, #16]
 800d764:	4293      	cmp	r3, r2
 800d766:	d304      	bcc.n	800d772 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d768:	2300      	movs	r3, #0
 800d76a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	895b      	ldrh	r3, [r3, #10]
 800d776:	461a      	mov	r2, r3
 800d778:	697b      	ldr	r3, [r7, #20]
 800d77a:	4293      	cmp	r3, r2
 800d77c:	d114      	bne.n	800d7a8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d77e:	2300      	movs	r3, #0
 800d780:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d10c      	bne.n	800d7a8 <pbuf_copy+0x118>
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d009      	beq.n	800d7a8 <pbuf_copy+0x118>
 800d794:	4b20      	ldr	r3, [pc, #128]	; (800d818 <pbuf_copy+0x188>)
 800d796:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d79a:	4924      	ldr	r1, [pc, #144]	; (800d82c <pbuf_copy+0x19c>)
 800d79c:	4820      	ldr	r0, [pc, #128]	; (800d820 <pbuf_copy+0x190>)
 800d79e:	f008 ff6d 	bl	801667c <iprintf>
 800d7a2:	f06f 030f 	mvn.w	r3, #15
 800d7a6:	e032      	b.n	800d80e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d013      	beq.n	800d7d6 <pbuf_copy+0x146>
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	895a      	ldrh	r2, [r3, #10]
 800d7b2:	683b      	ldr	r3, [r7, #0]
 800d7b4:	891b      	ldrh	r3, [r3, #8]
 800d7b6:	429a      	cmp	r2, r3
 800d7b8:	d10d      	bne.n	800d7d6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d7ba:	683b      	ldr	r3, [r7, #0]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d009      	beq.n	800d7d6 <pbuf_copy+0x146>
 800d7c2:	4b15      	ldr	r3, [pc, #84]	; (800d818 <pbuf_copy+0x188>)
 800d7c4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800d7c8:	4919      	ldr	r1, [pc, #100]	; (800d830 <pbuf_copy+0x1a0>)
 800d7ca:	4815      	ldr	r0, [pc, #84]	; (800d820 <pbuf_copy+0x190>)
 800d7cc:	f008 ff56 	bl	801667c <iprintf>
 800d7d0:	f06f 0305 	mvn.w	r3, #5
 800d7d4:	e01b      	b.n	800d80e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d013      	beq.n	800d804 <pbuf_copy+0x174>
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	895a      	ldrh	r2, [r3, #10]
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	891b      	ldrh	r3, [r3, #8]
 800d7e4:	429a      	cmp	r2, r3
 800d7e6:	d10d      	bne.n	800d804 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d009      	beq.n	800d804 <pbuf_copy+0x174>
 800d7f0:	4b09      	ldr	r3, [pc, #36]	; (800d818 <pbuf_copy+0x188>)
 800d7f2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800d7f6:	490e      	ldr	r1, [pc, #56]	; (800d830 <pbuf_copy+0x1a0>)
 800d7f8:	4809      	ldr	r0, [pc, #36]	; (800d820 <pbuf_copy+0x190>)
 800d7fa:	f008 ff3f 	bl	801667c <iprintf>
 800d7fe:	f06f 0305 	mvn.w	r3, #5
 800d802:	e004      	b.n	800d80e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	2b00      	cmp	r3, #0
 800d808:	f47f af61 	bne.w	800d6ce <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d80c:	2300      	movs	r3, #0
}
 800d80e:	4618      	mov	r0, r3
 800d810:	3718      	adds	r7, #24
 800d812:	46bd      	mov	sp, r7
 800d814:	bd80      	pop	{r7, pc}
 800d816:	bf00      	nop
 800d818:	0801938c 	.word	0x0801938c
 800d81c:	08019634 	.word	0x08019634
 800d820:	080193ec 	.word	0x080193ec
 800d824:	08019664 	.word	0x08019664
 800d828:	0801967c 	.word	0x0801967c
 800d82c:	08019698 	.word	0x08019698
 800d830:	080196a8 	.word	0x080196a8

0800d834 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b088      	sub	sp, #32
 800d838:	af00      	add	r7, sp, #0
 800d83a:	60f8      	str	r0, [r7, #12]
 800d83c:	60b9      	str	r1, [r7, #8]
 800d83e:	4611      	mov	r1, r2
 800d840:	461a      	mov	r2, r3
 800d842:	460b      	mov	r3, r1
 800d844:	80fb      	strh	r3, [r7, #6]
 800d846:	4613      	mov	r3, r2
 800d848:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d84a:	2300      	movs	r3, #0
 800d84c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d84e:	2300      	movs	r3, #0
 800d850:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d108      	bne.n	800d86a <pbuf_copy_partial+0x36>
 800d858:	4b2b      	ldr	r3, [pc, #172]	; (800d908 <pbuf_copy_partial+0xd4>)
 800d85a:	f240 420a 	movw	r2, #1034	; 0x40a
 800d85e:	492b      	ldr	r1, [pc, #172]	; (800d90c <pbuf_copy_partial+0xd8>)
 800d860:	482b      	ldr	r0, [pc, #172]	; (800d910 <pbuf_copy_partial+0xdc>)
 800d862:	f008 ff0b 	bl	801667c <iprintf>
 800d866:	2300      	movs	r3, #0
 800d868:	e04a      	b.n	800d900 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d86a:	68bb      	ldr	r3, [r7, #8]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d108      	bne.n	800d882 <pbuf_copy_partial+0x4e>
 800d870:	4b25      	ldr	r3, [pc, #148]	; (800d908 <pbuf_copy_partial+0xd4>)
 800d872:	f240 420b 	movw	r2, #1035	; 0x40b
 800d876:	4927      	ldr	r1, [pc, #156]	; (800d914 <pbuf_copy_partial+0xe0>)
 800d878:	4825      	ldr	r0, [pc, #148]	; (800d910 <pbuf_copy_partial+0xdc>)
 800d87a:	f008 feff 	bl	801667c <iprintf>
 800d87e:	2300      	movs	r3, #0
 800d880:	e03e      	b.n	800d900 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	61fb      	str	r3, [r7, #28]
 800d886:	e034      	b.n	800d8f2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d888:	88bb      	ldrh	r3, [r7, #4]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d00a      	beq.n	800d8a4 <pbuf_copy_partial+0x70>
 800d88e:	69fb      	ldr	r3, [r7, #28]
 800d890:	895b      	ldrh	r3, [r3, #10]
 800d892:	88ba      	ldrh	r2, [r7, #4]
 800d894:	429a      	cmp	r2, r3
 800d896:	d305      	bcc.n	800d8a4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d898:	69fb      	ldr	r3, [r7, #28]
 800d89a:	895b      	ldrh	r3, [r3, #10]
 800d89c:	88ba      	ldrh	r2, [r7, #4]
 800d89e:	1ad3      	subs	r3, r2, r3
 800d8a0:	80bb      	strh	r3, [r7, #4]
 800d8a2:	e023      	b.n	800d8ec <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d8a4:	69fb      	ldr	r3, [r7, #28]
 800d8a6:	895a      	ldrh	r2, [r3, #10]
 800d8a8:	88bb      	ldrh	r3, [r7, #4]
 800d8aa:	1ad3      	subs	r3, r2, r3
 800d8ac:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d8ae:	8b3a      	ldrh	r2, [r7, #24]
 800d8b0:	88fb      	ldrh	r3, [r7, #6]
 800d8b2:	429a      	cmp	r2, r3
 800d8b4:	d901      	bls.n	800d8ba <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d8b6:	88fb      	ldrh	r3, [r7, #6]
 800d8b8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d8ba:	8b7b      	ldrh	r3, [r7, #26]
 800d8bc:	68ba      	ldr	r2, [r7, #8]
 800d8be:	18d0      	adds	r0, r2, r3
 800d8c0:	69fb      	ldr	r3, [r7, #28]
 800d8c2:	685a      	ldr	r2, [r3, #4]
 800d8c4:	88bb      	ldrh	r3, [r7, #4]
 800d8c6:	4413      	add	r3, r2
 800d8c8:	8b3a      	ldrh	r2, [r7, #24]
 800d8ca:	4619      	mov	r1, r3
 800d8cc:	f008 fea6 	bl	801661c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d8d0:	8afa      	ldrh	r2, [r7, #22]
 800d8d2:	8b3b      	ldrh	r3, [r7, #24]
 800d8d4:	4413      	add	r3, r2
 800d8d6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d8d8:	8b7a      	ldrh	r2, [r7, #26]
 800d8da:	8b3b      	ldrh	r3, [r7, #24]
 800d8dc:	4413      	add	r3, r2
 800d8de:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d8e0:	88fa      	ldrh	r2, [r7, #6]
 800d8e2:	8b3b      	ldrh	r3, [r7, #24]
 800d8e4:	1ad3      	subs	r3, r2, r3
 800d8e6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d8ec:	69fb      	ldr	r3, [r7, #28]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	61fb      	str	r3, [r7, #28]
 800d8f2:	88fb      	ldrh	r3, [r7, #6]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d002      	beq.n	800d8fe <pbuf_copy_partial+0xca>
 800d8f8:	69fb      	ldr	r3, [r7, #28]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d1c4      	bne.n	800d888 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d8fe:	8afb      	ldrh	r3, [r7, #22]
}
 800d900:	4618      	mov	r0, r3
 800d902:	3720      	adds	r7, #32
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}
 800d908:	0801938c 	.word	0x0801938c
 800d90c:	080196d4 	.word	0x080196d4
 800d910:	080193ec 	.word	0x080193ec
 800d914:	080196f4 	.word	0x080196f4

0800d918 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b084      	sub	sp, #16
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	4603      	mov	r3, r0
 800d920:	603a      	str	r2, [r7, #0]
 800d922:	71fb      	strb	r3, [r7, #7]
 800d924:	460b      	mov	r3, r1
 800d926:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	8919      	ldrh	r1, [r3, #8]
 800d92c:	88ba      	ldrh	r2, [r7, #4]
 800d92e:	79fb      	ldrb	r3, [r7, #7]
 800d930:	4618      	mov	r0, r3
 800d932:	f7ff fab1 	bl	800ce98 <pbuf_alloc>
 800d936:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d101      	bne.n	800d942 <pbuf_clone+0x2a>
    return NULL;
 800d93e:	2300      	movs	r3, #0
 800d940:	e011      	b.n	800d966 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d942:	6839      	ldr	r1, [r7, #0]
 800d944:	68f8      	ldr	r0, [r7, #12]
 800d946:	f7ff fea3 	bl	800d690 <pbuf_copy>
 800d94a:	4603      	mov	r3, r0
 800d94c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d94e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d006      	beq.n	800d964 <pbuf_clone+0x4c>
 800d956:	4b06      	ldr	r3, [pc, #24]	; (800d970 <pbuf_clone+0x58>)
 800d958:	f240 5224 	movw	r2, #1316	; 0x524
 800d95c:	4905      	ldr	r1, [pc, #20]	; (800d974 <pbuf_clone+0x5c>)
 800d95e:	4806      	ldr	r0, [pc, #24]	; (800d978 <pbuf_clone+0x60>)
 800d960:	f008 fe8c 	bl	801667c <iprintf>
  return q;
 800d964:	68fb      	ldr	r3, [r7, #12]
}
 800d966:	4618      	mov	r0, r3
 800d968:	3710      	adds	r7, #16
 800d96a:	46bd      	mov	sp, r7
 800d96c:	bd80      	pop	{r7, pc}
 800d96e:	bf00      	nop
 800d970:	0801938c 	.word	0x0801938c
 800d974:	08019800 	.word	0x08019800
 800d978:	080193ec 	.word	0x080193ec

0800d97c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d980:	f008 ff0a 	bl	8016798 <rand>
 800d984:	4603      	mov	r3, r0
 800d986:	b29b      	uxth	r3, r3
 800d988:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d98c:	b29b      	uxth	r3, r3
 800d98e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d992:	b29a      	uxth	r2, r3
 800d994:	4b01      	ldr	r3, [pc, #4]	; (800d99c <tcp_init+0x20>)
 800d996:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d998:	bf00      	nop
 800d99a:	bd80      	pop	{r7, pc}
 800d99c:	20000022 	.word	0x20000022

0800d9a0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b082      	sub	sp, #8
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	7d1b      	ldrb	r3, [r3, #20]
 800d9ac:	2b01      	cmp	r3, #1
 800d9ae:	d105      	bne.n	800d9bc <tcp_free+0x1c>
 800d9b0:	4b06      	ldr	r3, [pc, #24]	; (800d9cc <tcp_free+0x2c>)
 800d9b2:	22d4      	movs	r2, #212	; 0xd4
 800d9b4:	4906      	ldr	r1, [pc, #24]	; (800d9d0 <tcp_free+0x30>)
 800d9b6:	4807      	ldr	r0, [pc, #28]	; (800d9d4 <tcp_free+0x34>)
 800d9b8:	f008 fe60 	bl	801667c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d9bc:	6879      	ldr	r1, [r7, #4]
 800d9be:	2001      	movs	r0, #1
 800d9c0:	f7fe ff3c 	bl	800c83c <memp_free>
}
 800d9c4:	bf00      	nop
 800d9c6:	3708      	adds	r7, #8
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	bd80      	pop	{r7, pc}
 800d9cc:	0801988c 	.word	0x0801988c
 800d9d0:	080198bc 	.word	0x080198bc
 800d9d4:	080198d0 	.word	0x080198d0

0800d9d8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b082      	sub	sp, #8
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	7d1b      	ldrb	r3, [r3, #20]
 800d9e4:	2b01      	cmp	r3, #1
 800d9e6:	d105      	bne.n	800d9f4 <tcp_free_listen+0x1c>
 800d9e8:	4b06      	ldr	r3, [pc, #24]	; (800da04 <tcp_free_listen+0x2c>)
 800d9ea:	22df      	movs	r2, #223	; 0xdf
 800d9ec:	4906      	ldr	r1, [pc, #24]	; (800da08 <tcp_free_listen+0x30>)
 800d9ee:	4807      	ldr	r0, [pc, #28]	; (800da0c <tcp_free_listen+0x34>)
 800d9f0:	f008 fe44 	bl	801667c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d9f4:	6879      	ldr	r1, [r7, #4]
 800d9f6:	2002      	movs	r0, #2
 800d9f8:	f7fe ff20 	bl	800c83c <memp_free>
}
 800d9fc:	bf00      	nop
 800d9fe:	3708      	adds	r7, #8
 800da00:	46bd      	mov	sp, r7
 800da02:	bd80      	pop	{r7, pc}
 800da04:	0801988c 	.word	0x0801988c
 800da08:	080198f8 	.word	0x080198f8
 800da0c:	080198d0 	.word	0x080198d0

0800da10 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800da10:	b580      	push	{r7, lr}
 800da12:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800da14:	f001 f85c 	bl	800ead0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800da18:	4b07      	ldr	r3, [pc, #28]	; (800da38 <tcp_tmr+0x28>)
 800da1a:	781b      	ldrb	r3, [r3, #0]
 800da1c:	3301      	adds	r3, #1
 800da1e:	b2da      	uxtb	r2, r3
 800da20:	4b05      	ldr	r3, [pc, #20]	; (800da38 <tcp_tmr+0x28>)
 800da22:	701a      	strb	r2, [r3, #0]
 800da24:	4b04      	ldr	r3, [pc, #16]	; (800da38 <tcp_tmr+0x28>)
 800da26:	781b      	ldrb	r3, [r3, #0]
 800da28:	f003 0301 	and.w	r3, r3, #1
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d001      	beq.n	800da34 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800da30:	f000 fd0e 	bl	800e450 <tcp_slowtmr>
  }
}
 800da34:	bf00      	nop
 800da36:	bd80      	pop	{r7, pc}
 800da38:	20001585 	.word	0x20001585

0800da3c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b084      	sub	sp, #16
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
 800da44:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d105      	bne.n	800da58 <tcp_remove_listener+0x1c>
 800da4c:	4b0d      	ldr	r3, [pc, #52]	; (800da84 <tcp_remove_listener+0x48>)
 800da4e:	22ff      	movs	r2, #255	; 0xff
 800da50:	490d      	ldr	r1, [pc, #52]	; (800da88 <tcp_remove_listener+0x4c>)
 800da52:	480e      	ldr	r0, [pc, #56]	; (800da8c <tcp_remove_listener+0x50>)
 800da54:	f008 fe12 	bl	801667c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	60fb      	str	r3, [r7, #12]
 800da5c:	e00a      	b.n	800da74 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da62:	683a      	ldr	r2, [r7, #0]
 800da64:	429a      	cmp	r2, r3
 800da66:	d102      	bne.n	800da6e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	2200      	movs	r2, #0
 800da6c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	68db      	ldr	r3, [r3, #12]
 800da72:	60fb      	str	r3, [r7, #12]
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d1f1      	bne.n	800da5e <tcp_remove_listener+0x22>
    }
  }
}
 800da7a:	bf00      	nop
 800da7c:	bf00      	nop
 800da7e:	3710      	adds	r7, #16
 800da80:	46bd      	mov	sp, r7
 800da82:	bd80      	pop	{r7, pc}
 800da84:	0801988c 	.word	0x0801988c
 800da88:	08019914 	.word	0x08019914
 800da8c:	080198d0 	.word	0x080198d0

0800da90 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b084      	sub	sp, #16
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d106      	bne.n	800daac <tcp_listen_closed+0x1c>
 800da9e:	4b14      	ldr	r3, [pc, #80]	; (800daf0 <tcp_listen_closed+0x60>)
 800daa0:	f240 1211 	movw	r2, #273	; 0x111
 800daa4:	4913      	ldr	r1, [pc, #76]	; (800daf4 <tcp_listen_closed+0x64>)
 800daa6:	4814      	ldr	r0, [pc, #80]	; (800daf8 <tcp_listen_closed+0x68>)
 800daa8:	f008 fde8 	bl	801667c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	7d1b      	ldrb	r3, [r3, #20]
 800dab0:	2b01      	cmp	r3, #1
 800dab2:	d006      	beq.n	800dac2 <tcp_listen_closed+0x32>
 800dab4:	4b0e      	ldr	r3, [pc, #56]	; (800daf0 <tcp_listen_closed+0x60>)
 800dab6:	f44f 7289 	mov.w	r2, #274	; 0x112
 800daba:	4910      	ldr	r1, [pc, #64]	; (800dafc <tcp_listen_closed+0x6c>)
 800dabc:	480e      	ldr	r0, [pc, #56]	; (800daf8 <tcp_listen_closed+0x68>)
 800dabe:	f008 fddd 	bl	801667c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800dac2:	2301      	movs	r3, #1
 800dac4:	60fb      	str	r3, [r7, #12]
 800dac6:	e00b      	b.n	800dae0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800dac8:	4a0d      	ldr	r2, [pc, #52]	; (800db00 <tcp_listen_closed+0x70>)
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	6879      	ldr	r1, [r7, #4]
 800dad4:	4618      	mov	r0, r3
 800dad6:	f7ff ffb1 	bl	800da3c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	3301      	adds	r3, #1
 800dade:	60fb      	str	r3, [r7, #12]
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	2b03      	cmp	r3, #3
 800dae4:	d9f0      	bls.n	800dac8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800dae6:	bf00      	nop
 800dae8:	bf00      	nop
 800daea:	3710      	adds	r7, #16
 800daec:	46bd      	mov	sp, r7
 800daee:	bd80      	pop	{r7, pc}
 800daf0:	0801988c 	.word	0x0801988c
 800daf4:	0801993c 	.word	0x0801993c
 800daf8:	080198d0 	.word	0x080198d0
 800dafc:	08019948 	.word	0x08019948
 800db00:	0801f864 	.word	0x0801f864

0800db04 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800db04:	b5b0      	push	{r4, r5, r7, lr}
 800db06:	b088      	sub	sp, #32
 800db08:	af04      	add	r7, sp, #16
 800db0a:	6078      	str	r0, [r7, #4]
 800db0c:	460b      	mov	r3, r1
 800db0e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d106      	bne.n	800db24 <tcp_close_shutdown+0x20>
 800db16:	4b63      	ldr	r3, [pc, #396]	; (800dca4 <tcp_close_shutdown+0x1a0>)
 800db18:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800db1c:	4962      	ldr	r1, [pc, #392]	; (800dca8 <tcp_close_shutdown+0x1a4>)
 800db1e:	4863      	ldr	r0, [pc, #396]	; (800dcac <tcp_close_shutdown+0x1a8>)
 800db20:	f008 fdac 	bl	801667c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800db24:	78fb      	ldrb	r3, [r7, #3]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d066      	beq.n	800dbf8 <tcp_close_shutdown+0xf4>
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	7d1b      	ldrb	r3, [r3, #20]
 800db2e:	2b04      	cmp	r3, #4
 800db30:	d003      	beq.n	800db3a <tcp_close_shutdown+0x36>
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	7d1b      	ldrb	r3, [r3, #20]
 800db36:	2b07      	cmp	r3, #7
 800db38:	d15e      	bne.n	800dbf8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d104      	bne.n	800db4c <tcp_close_shutdown+0x48>
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db46:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800db4a:	d055      	beq.n	800dbf8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	8b5b      	ldrh	r3, [r3, #26]
 800db50:	f003 0310 	and.w	r3, r3, #16
 800db54:	2b00      	cmp	r3, #0
 800db56:	d106      	bne.n	800db66 <tcp_close_shutdown+0x62>
 800db58:	4b52      	ldr	r3, [pc, #328]	; (800dca4 <tcp_close_shutdown+0x1a0>)
 800db5a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800db5e:	4954      	ldr	r1, [pc, #336]	; (800dcb0 <tcp_close_shutdown+0x1ac>)
 800db60:	4852      	ldr	r0, [pc, #328]	; (800dcac <tcp_close_shutdown+0x1a8>)
 800db62:	f008 fd8b 	bl	801667c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800db6e:	687d      	ldr	r5, [r7, #4]
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	3304      	adds	r3, #4
 800db74:	687a      	ldr	r2, [r7, #4]
 800db76:	8ad2      	ldrh	r2, [r2, #22]
 800db78:	6879      	ldr	r1, [r7, #4]
 800db7a:	8b09      	ldrh	r1, [r1, #24]
 800db7c:	9102      	str	r1, [sp, #8]
 800db7e:	9201      	str	r2, [sp, #4]
 800db80:	9300      	str	r3, [sp, #0]
 800db82:	462b      	mov	r3, r5
 800db84:	4622      	mov	r2, r4
 800db86:	4601      	mov	r1, r0
 800db88:	6878      	ldr	r0, [r7, #4]
 800db8a:	f005 fd8b 	bl	80136a4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	f001 fb6c 	bl	800f26c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800db94:	4b47      	ldr	r3, [pc, #284]	; (800dcb4 <tcp_close_shutdown+0x1b0>)
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	687a      	ldr	r2, [r7, #4]
 800db9a:	429a      	cmp	r2, r3
 800db9c:	d105      	bne.n	800dbaa <tcp_close_shutdown+0xa6>
 800db9e:	4b45      	ldr	r3, [pc, #276]	; (800dcb4 <tcp_close_shutdown+0x1b0>)
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	68db      	ldr	r3, [r3, #12]
 800dba4:	4a43      	ldr	r2, [pc, #268]	; (800dcb4 <tcp_close_shutdown+0x1b0>)
 800dba6:	6013      	str	r3, [r2, #0]
 800dba8:	e013      	b.n	800dbd2 <tcp_close_shutdown+0xce>
 800dbaa:	4b42      	ldr	r3, [pc, #264]	; (800dcb4 <tcp_close_shutdown+0x1b0>)
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	60fb      	str	r3, [r7, #12]
 800dbb0:	e00c      	b.n	800dbcc <tcp_close_shutdown+0xc8>
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	68db      	ldr	r3, [r3, #12]
 800dbb6:	687a      	ldr	r2, [r7, #4]
 800dbb8:	429a      	cmp	r2, r3
 800dbba:	d104      	bne.n	800dbc6 <tcp_close_shutdown+0xc2>
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	68da      	ldr	r2, [r3, #12]
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	60da      	str	r2, [r3, #12]
 800dbc4:	e005      	b.n	800dbd2 <tcp_close_shutdown+0xce>
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	68db      	ldr	r3, [r3, #12]
 800dbca:	60fb      	str	r3, [r7, #12]
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d1ef      	bne.n	800dbb2 <tcp_close_shutdown+0xae>
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	60da      	str	r2, [r3, #12]
 800dbd8:	4b37      	ldr	r3, [pc, #220]	; (800dcb8 <tcp_close_shutdown+0x1b4>)
 800dbda:	2201      	movs	r2, #1
 800dbdc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800dbde:	4b37      	ldr	r3, [pc, #220]	; (800dcbc <tcp_close_shutdown+0x1b8>)
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	687a      	ldr	r2, [r7, #4]
 800dbe4:	429a      	cmp	r2, r3
 800dbe6:	d102      	bne.n	800dbee <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800dbe8:	f004 f800 	bl	8011bec <tcp_trigger_input_pcb_close>
 800dbec:	e002      	b.n	800dbf4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f7ff fed6 	bl	800d9a0 <tcp_free>
      }
      return ERR_OK;
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	e050      	b.n	800dc9a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	7d1b      	ldrb	r3, [r3, #20]
 800dbfc:	2b02      	cmp	r3, #2
 800dbfe:	d03b      	beq.n	800dc78 <tcp_close_shutdown+0x174>
 800dc00:	2b02      	cmp	r3, #2
 800dc02:	dc44      	bgt.n	800dc8e <tcp_close_shutdown+0x18a>
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d002      	beq.n	800dc0e <tcp_close_shutdown+0x10a>
 800dc08:	2b01      	cmp	r3, #1
 800dc0a:	d02a      	beq.n	800dc62 <tcp_close_shutdown+0x15e>
 800dc0c:	e03f      	b.n	800dc8e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	8adb      	ldrh	r3, [r3, #22]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d021      	beq.n	800dc5a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800dc16:	4b2a      	ldr	r3, [pc, #168]	; (800dcc0 <tcp_close_shutdown+0x1bc>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	687a      	ldr	r2, [r7, #4]
 800dc1c:	429a      	cmp	r2, r3
 800dc1e:	d105      	bne.n	800dc2c <tcp_close_shutdown+0x128>
 800dc20:	4b27      	ldr	r3, [pc, #156]	; (800dcc0 <tcp_close_shutdown+0x1bc>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	68db      	ldr	r3, [r3, #12]
 800dc26:	4a26      	ldr	r2, [pc, #152]	; (800dcc0 <tcp_close_shutdown+0x1bc>)
 800dc28:	6013      	str	r3, [r2, #0]
 800dc2a:	e013      	b.n	800dc54 <tcp_close_shutdown+0x150>
 800dc2c:	4b24      	ldr	r3, [pc, #144]	; (800dcc0 <tcp_close_shutdown+0x1bc>)
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	60bb      	str	r3, [r7, #8]
 800dc32:	e00c      	b.n	800dc4e <tcp_close_shutdown+0x14a>
 800dc34:	68bb      	ldr	r3, [r7, #8]
 800dc36:	68db      	ldr	r3, [r3, #12]
 800dc38:	687a      	ldr	r2, [r7, #4]
 800dc3a:	429a      	cmp	r2, r3
 800dc3c:	d104      	bne.n	800dc48 <tcp_close_shutdown+0x144>
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	68da      	ldr	r2, [r3, #12]
 800dc42:	68bb      	ldr	r3, [r7, #8]
 800dc44:	60da      	str	r2, [r3, #12]
 800dc46:	e005      	b.n	800dc54 <tcp_close_shutdown+0x150>
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	68db      	ldr	r3, [r3, #12]
 800dc4c:	60bb      	str	r3, [r7, #8]
 800dc4e:	68bb      	ldr	r3, [r7, #8]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d1ef      	bne.n	800dc34 <tcp_close_shutdown+0x130>
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	2200      	movs	r2, #0
 800dc58:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	f7ff fea0 	bl	800d9a0 <tcp_free>
      break;
 800dc60:	e01a      	b.n	800dc98 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800dc62:	6878      	ldr	r0, [r7, #4]
 800dc64:	f7ff ff14 	bl	800da90 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800dc68:	6879      	ldr	r1, [r7, #4]
 800dc6a:	4816      	ldr	r0, [pc, #88]	; (800dcc4 <tcp_close_shutdown+0x1c0>)
 800dc6c:	f001 fb4e 	bl	800f30c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	f7ff feb1 	bl	800d9d8 <tcp_free_listen>
      break;
 800dc76:	e00f      	b.n	800dc98 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800dc78:	6879      	ldr	r1, [r7, #4]
 800dc7a:	480e      	ldr	r0, [pc, #56]	; (800dcb4 <tcp_close_shutdown+0x1b0>)
 800dc7c:	f001 fb46 	bl	800f30c <tcp_pcb_remove>
 800dc80:	4b0d      	ldr	r3, [pc, #52]	; (800dcb8 <tcp_close_shutdown+0x1b4>)
 800dc82:	2201      	movs	r2, #1
 800dc84:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800dc86:	6878      	ldr	r0, [r7, #4]
 800dc88:	f7ff fe8a 	bl	800d9a0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800dc8c:	e004      	b.n	800dc98 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f000 f81a 	bl	800dcc8 <tcp_close_shutdown_fin>
 800dc94:	4603      	mov	r3, r0
 800dc96:	e000      	b.n	800dc9a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800dc98:	2300      	movs	r3, #0
}
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	3710      	adds	r7, #16
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	bdb0      	pop	{r4, r5, r7, pc}
 800dca2:	bf00      	nop
 800dca4:	0801988c 	.word	0x0801988c
 800dca8:	08019960 	.word	0x08019960
 800dcac:	080198d0 	.word	0x080198d0
 800dcb0:	08019980 	.word	0x08019980
 800dcb4:	200179f8 	.word	0x200179f8
 800dcb8:	200179f4 	.word	0x200179f4
 800dcbc:	20017a0c 	.word	0x20017a0c
 800dcc0:	20017a04 	.word	0x20017a04
 800dcc4:	20017a00 	.word	0x20017a00

0800dcc8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b084      	sub	sp, #16
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d106      	bne.n	800dce4 <tcp_close_shutdown_fin+0x1c>
 800dcd6:	4b2e      	ldr	r3, [pc, #184]	; (800dd90 <tcp_close_shutdown_fin+0xc8>)
 800dcd8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800dcdc:	492d      	ldr	r1, [pc, #180]	; (800dd94 <tcp_close_shutdown_fin+0xcc>)
 800dcde:	482e      	ldr	r0, [pc, #184]	; (800dd98 <tcp_close_shutdown_fin+0xd0>)
 800dce0:	f008 fccc 	bl	801667c <iprintf>

  switch (pcb->state) {
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	7d1b      	ldrb	r3, [r3, #20]
 800dce8:	2b07      	cmp	r3, #7
 800dcea:	d020      	beq.n	800dd2e <tcp_close_shutdown_fin+0x66>
 800dcec:	2b07      	cmp	r3, #7
 800dcee:	dc2b      	bgt.n	800dd48 <tcp_close_shutdown_fin+0x80>
 800dcf0:	2b03      	cmp	r3, #3
 800dcf2:	d002      	beq.n	800dcfa <tcp_close_shutdown_fin+0x32>
 800dcf4:	2b04      	cmp	r3, #4
 800dcf6:	d00d      	beq.n	800dd14 <tcp_close_shutdown_fin+0x4c>
 800dcf8:	e026      	b.n	800dd48 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800dcfa:	6878      	ldr	r0, [r7, #4]
 800dcfc:	f004 fde0 	bl	80128c0 <tcp_send_fin>
 800dd00:	4603      	mov	r3, r0
 800dd02:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dd04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d11f      	bne.n	800dd4c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	2205      	movs	r2, #5
 800dd10:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dd12:	e01b      	b.n	800dd4c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800dd14:	6878      	ldr	r0, [r7, #4]
 800dd16:	f004 fdd3 	bl	80128c0 <tcp_send_fin>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dd1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d114      	bne.n	800dd50 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	2205      	movs	r2, #5
 800dd2a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dd2c:	e010      	b.n	800dd50 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800dd2e:	6878      	ldr	r0, [r7, #4]
 800dd30:	f004 fdc6 	bl	80128c0 <tcp_send_fin>
 800dd34:	4603      	mov	r3, r0
 800dd36:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dd38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d109      	bne.n	800dd54 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	2209      	movs	r2, #9
 800dd44:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dd46:	e005      	b.n	800dd54 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800dd48:	2300      	movs	r3, #0
 800dd4a:	e01c      	b.n	800dd86 <tcp_close_shutdown_fin+0xbe>
      break;
 800dd4c:	bf00      	nop
 800dd4e:	e002      	b.n	800dd56 <tcp_close_shutdown_fin+0x8e>
      break;
 800dd50:	bf00      	nop
 800dd52:	e000      	b.n	800dd56 <tcp_close_shutdown_fin+0x8e>
      break;
 800dd54:	bf00      	nop
  }

  if (err == ERR_OK) {
 800dd56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d103      	bne.n	800dd66 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f004 feec 	bl	8012b3c <tcp_output>
 800dd64:	e00d      	b.n	800dd82 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800dd66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dd6e:	d108      	bne.n	800dd82 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	8b5b      	ldrh	r3, [r3, #26]
 800dd74:	f043 0308 	orr.w	r3, r3, #8
 800dd78:	b29a      	uxth	r2, r3
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800dd7e:	2300      	movs	r3, #0
 800dd80:	e001      	b.n	800dd86 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800dd82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dd86:	4618      	mov	r0, r3
 800dd88:	3710      	adds	r7, #16
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	bd80      	pop	{r7, pc}
 800dd8e:	bf00      	nop
 800dd90:	0801988c 	.word	0x0801988c
 800dd94:	0801993c 	.word	0x0801993c
 800dd98:	080198d0 	.word	0x080198d0

0800dd9c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b082      	sub	sp, #8
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d109      	bne.n	800ddbe <tcp_close+0x22>
 800ddaa:	4b0f      	ldr	r3, [pc, #60]	; (800dde8 <tcp_close+0x4c>)
 800ddac:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800ddb0:	490e      	ldr	r1, [pc, #56]	; (800ddec <tcp_close+0x50>)
 800ddb2:	480f      	ldr	r0, [pc, #60]	; (800ddf0 <tcp_close+0x54>)
 800ddb4:	f008 fc62 	bl	801667c <iprintf>
 800ddb8:	f06f 030f 	mvn.w	r3, #15
 800ddbc:	e00f      	b.n	800ddde <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	7d1b      	ldrb	r3, [r3, #20]
 800ddc2:	2b01      	cmp	r3, #1
 800ddc4:	d006      	beq.n	800ddd4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	8b5b      	ldrh	r3, [r3, #26]
 800ddca:	f043 0310 	orr.w	r3, r3, #16
 800ddce:	b29a      	uxth	r2, r3
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ddd4:	2101      	movs	r1, #1
 800ddd6:	6878      	ldr	r0, [r7, #4]
 800ddd8:	f7ff fe94 	bl	800db04 <tcp_close_shutdown>
 800dddc:	4603      	mov	r3, r0
}
 800ddde:	4618      	mov	r0, r3
 800dde0:	3708      	adds	r7, #8
 800dde2:	46bd      	mov	sp, r7
 800dde4:	bd80      	pop	{r7, pc}
 800dde6:	bf00      	nop
 800dde8:	0801988c 	.word	0x0801988c
 800ddec:	0801999c 	.word	0x0801999c
 800ddf0:	080198d0 	.word	0x080198d0

0800ddf4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b08e      	sub	sp, #56	; 0x38
 800ddf8:	af04      	add	r7, sp, #16
 800ddfa:	6078      	str	r0, [r7, #4]
 800ddfc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d107      	bne.n	800de14 <tcp_abandon+0x20>
 800de04:	4b52      	ldr	r3, [pc, #328]	; (800df50 <tcp_abandon+0x15c>)
 800de06:	f240 223d 	movw	r2, #573	; 0x23d
 800de0a:	4952      	ldr	r1, [pc, #328]	; (800df54 <tcp_abandon+0x160>)
 800de0c:	4852      	ldr	r0, [pc, #328]	; (800df58 <tcp_abandon+0x164>)
 800de0e:	f008 fc35 	bl	801667c <iprintf>
 800de12:	e099      	b.n	800df48 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	7d1b      	ldrb	r3, [r3, #20]
 800de18:	2b01      	cmp	r3, #1
 800de1a:	d106      	bne.n	800de2a <tcp_abandon+0x36>
 800de1c:	4b4c      	ldr	r3, [pc, #304]	; (800df50 <tcp_abandon+0x15c>)
 800de1e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800de22:	494e      	ldr	r1, [pc, #312]	; (800df5c <tcp_abandon+0x168>)
 800de24:	484c      	ldr	r0, [pc, #304]	; (800df58 <tcp_abandon+0x164>)
 800de26:	f008 fc29 	bl	801667c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	7d1b      	ldrb	r3, [r3, #20]
 800de2e:	2b0a      	cmp	r3, #10
 800de30:	d107      	bne.n	800de42 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800de32:	6879      	ldr	r1, [r7, #4]
 800de34:	484a      	ldr	r0, [pc, #296]	; (800df60 <tcp_abandon+0x16c>)
 800de36:	f001 fa69 	bl	800f30c <tcp_pcb_remove>
    tcp_free(pcb);
 800de3a:	6878      	ldr	r0, [r7, #4]
 800de3c:	f7ff fdb0 	bl	800d9a0 <tcp_free>
 800de40:	e082      	b.n	800df48 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800de42:	2300      	movs	r3, #0
 800de44:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800de46:	2300      	movs	r3, #0
 800de48:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de4e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de54:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de5c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	691b      	ldr	r3, [r3, #16]
 800de62:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	7d1b      	ldrb	r3, [r3, #20]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d126      	bne.n	800deba <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	8adb      	ldrh	r3, [r3, #22]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d02e      	beq.n	800ded2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800de74:	4b3b      	ldr	r3, [pc, #236]	; (800df64 <tcp_abandon+0x170>)
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	687a      	ldr	r2, [r7, #4]
 800de7a:	429a      	cmp	r2, r3
 800de7c:	d105      	bne.n	800de8a <tcp_abandon+0x96>
 800de7e:	4b39      	ldr	r3, [pc, #228]	; (800df64 <tcp_abandon+0x170>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	68db      	ldr	r3, [r3, #12]
 800de84:	4a37      	ldr	r2, [pc, #220]	; (800df64 <tcp_abandon+0x170>)
 800de86:	6013      	str	r3, [r2, #0]
 800de88:	e013      	b.n	800deb2 <tcp_abandon+0xbe>
 800de8a:	4b36      	ldr	r3, [pc, #216]	; (800df64 <tcp_abandon+0x170>)
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	61fb      	str	r3, [r7, #28]
 800de90:	e00c      	b.n	800deac <tcp_abandon+0xb8>
 800de92:	69fb      	ldr	r3, [r7, #28]
 800de94:	68db      	ldr	r3, [r3, #12]
 800de96:	687a      	ldr	r2, [r7, #4]
 800de98:	429a      	cmp	r2, r3
 800de9a:	d104      	bne.n	800dea6 <tcp_abandon+0xb2>
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	68da      	ldr	r2, [r3, #12]
 800dea0:	69fb      	ldr	r3, [r7, #28]
 800dea2:	60da      	str	r2, [r3, #12]
 800dea4:	e005      	b.n	800deb2 <tcp_abandon+0xbe>
 800dea6:	69fb      	ldr	r3, [r7, #28]
 800dea8:	68db      	ldr	r3, [r3, #12]
 800deaa:	61fb      	str	r3, [r7, #28]
 800deac:	69fb      	ldr	r3, [r7, #28]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d1ef      	bne.n	800de92 <tcp_abandon+0x9e>
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	2200      	movs	r2, #0
 800deb6:	60da      	str	r2, [r3, #12]
 800deb8:	e00b      	b.n	800ded2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	8adb      	ldrh	r3, [r3, #22]
 800dec2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800dec4:	6879      	ldr	r1, [r7, #4]
 800dec6:	4828      	ldr	r0, [pc, #160]	; (800df68 <tcp_abandon+0x174>)
 800dec8:	f001 fa20 	bl	800f30c <tcp_pcb_remove>
 800decc:	4b27      	ldr	r3, [pc, #156]	; (800df6c <tcp_abandon+0x178>)
 800dece:	2201      	movs	r2, #1
 800ded0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d004      	beq.n	800dee4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dede:	4618      	mov	r0, r3
 800dee0:	f000 fed6 	bl	800ec90 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d004      	beq.n	800def6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800def0:	4618      	mov	r0, r3
 800def2:	f000 fecd 	bl	800ec90 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800defa:	2b00      	cmp	r3, #0
 800defc:	d004      	beq.n	800df08 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df02:	4618      	mov	r0, r3
 800df04:	f000 fec4 	bl	800ec90 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800df08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d00e      	beq.n	800df2c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800df0e:	6879      	ldr	r1, [r7, #4]
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	3304      	adds	r3, #4
 800df14:	687a      	ldr	r2, [r7, #4]
 800df16:	8b12      	ldrh	r2, [r2, #24]
 800df18:	9202      	str	r2, [sp, #8]
 800df1a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800df1c:	9201      	str	r2, [sp, #4]
 800df1e:	9300      	str	r3, [sp, #0]
 800df20:	460b      	mov	r3, r1
 800df22:	697a      	ldr	r2, [r7, #20]
 800df24:	69b9      	ldr	r1, [r7, #24]
 800df26:	6878      	ldr	r0, [r7, #4]
 800df28:	f005 fbbc 	bl	80136a4 <tcp_rst>
    }
    last_state = pcb->state;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	7d1b      	ldrb	r3, [r3, #20]
 800df30:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800df32:	6878      	ldr	r0, [r7, #4]
 800df34:	f7ff fd34 	bl	800d9a0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800df38:	693b      	ldr	r3, [r7, #16]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d004      	beq.n	800df48 <tcp_abandon+0x154>
 800df3e:	693b      	ldr	r3, [r7, #16]
 800df40:	f06f 010c 	mvn.w	r1, #12
 800df44:	68f8      	ldr	r0, [r7, #12]
 800df46:	4798      	blx	r3
  }
}
 800df48:	3728      	adds	r7, #40	; 0x28
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}
 800df4e:	bf00      	nop
 800df50:	0801988c 	.word	0x0801988c
 800df54:	080199d0 	.word	0x080199d0
 800df58:	080198d0 	.word	0x080198d0
 800df5c:	080199ec 	.word	0x080199ec
 800df60:	20017a08 	.word	0x20017a08
 800df64:	20017a04 	.word	0x20017a04
 800df68:	200179f8 	.word	0x200179f8
 800df6c:	200179f4 	.word	0x200179f4

0800df70 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b082      	sub	sp, #8
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800df78:	2101      	movs	r1, #1
 800df7a:	6878      	ldr	r0, [r7, #4]
 800df7c:	f7ff ff3a 	bl	800ddf4 <tcp_abandon>
}
 800df80:	bf00      	nop
 800df82:	3708      	adds	r7, #8
 800df84:	46bd      	mov	sp, r7
 800df86:	bd80      	pop	{r7, pc}

0800df88 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b088      	sub	sp, #32
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	60f8      	str	r0, [r7, #12]
 800df90:	60b9      	str	r1, [r7, #8]
 800df92:	4613      	mov	r3, r2
 800df94:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800df96:	2304      	movs	r3, #4
 800df98:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d101      	bne.n	800dfa4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800dfa0:	4b3e      	ldr	r3, [pc, #248]	; (800e09c <tcp_bind+0x114>)
 800dfa2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d109      	bne.n	800dfbe <tcp_bind+0x36>
 800dfaa:	4b3d      	ldr	r3, [pc, #244]	; (800e0a0 <tcp_bind+0x118>)
 800dfac:	f240 22a9 	movw	r2, #681	; 0x2a9
 800dfb0:	493c      	ldr	r1, [pc, #240]	; (800e0a4 <tcp_bind+0x11c>)
 800dfb2:	483d      	ldr	r0, [pc, #244]	; (800e0a8 <tcp_bind+0x120>)
 800dfb4:	f008 fb62 	bl	801667c <iprintf>
 800dfb8:	f06f 030f 	mvn.w	r3, #15
 800dfbc:	e06a      	b.n	800e094 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	7d1b      	ldrb	r3, [r3, #20]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d009      	beq.n	800dfda <tcp_bind+0x52>
 800dfc6:	4b36      	ldr	r3, [pc, #216]	; (800e0a0 <tcp_bind+0x118>)
 800dfc8:	f240 22ab 	movw	r2, #683	; 0x2ab
 800dfcc:	4937      	ldr	r1, [pc, #220]	; (800e0ac <tcp_bind+0x124>)
 800dfce:	4836      	ldr	r0, [pc, #216]	; (800e0a8 <tcp_bind+0x120>)
 800dfd0:	f008 fb54 	bl	801667c <iprintf>
 800dfd4:	f06f 0305 	mvn.w	r3, #5
 800dfd8:	e05c      	b.n	800e094 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800dfda:	88fb      	ldrh	r3, [r7, #6]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d109      	bne.n	800dff4 <tcp_bind+0x6c>
    port = tcp_new_port();
 800dfe0:	f000 f9f0 	bl	800e3c4 <tcp_new_port>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800dfe8:	88fb      	ldrh	r3, [r7, #6]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d135      	bne.n	800e05a <tcp_bind+0xd2>
      return ERR_BUF;
 800dfee:	f06f 0301 	mvn.w	r3, #1
 800dff2:	e04f      	b.n	800e094 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800dff4:	2300      	movs	r3, #0
 800dff6:	61fb      	str	r3, [r7, #28]
 800dff8:	e02b      	b.n	800e052 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800dffa:	4a2d      	ldr	r2, [pc, #180]	; (800e0b0 <tcp_bind+0x128>)
 800dffc:	69fb      	ldr	r3, [r7, #28]
 800dffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	61bb      	str	r3, [r7, #24]
 800e006:	e01e      	b.n	800e046 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800e008:	69bb      	ldr	r3, [r7, #24]
 800e00a:	8adb      	ldrh	r3, [r3, #22]
 800e00c:	88fa      	ldrh	r2, [r7, #6]
 800e00e:	429a      	cmp	r2, r3
 800e010:	d116      	bne.n	800e040 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800e012:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e014:	2b00      	cmp	r3, #0
 800e016:	d010      	beq.n	800e03a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800e018:	69bb      	ldr	r3, [r7, #24]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d00c      	beq.n	800e03a <tcp_bind+0xb2>
 800e020:	68bb      	ldr	r3, [r7, #8]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d009      	beq.n	800e03a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d005      	beq.n	800e03a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800e02e:	69bb      	ldr	r3, [r7, #24]
 800e030:	681a      	ldr	r2, [r3, #0]
 800e032:	68bb      	ldr	r3, [r7, #8]
 800e034:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e036:	429a      	cmp	r2, r3
 800e038:	d102      	bne.n	800e040 <tcp_bind+0xb8>
              return ERR_USE;
 800e03a:	f06f 0307 	mvn.w	r3, #7
 800e03e:	e029      	b.n	800e094 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e040:	69bb      	ldr	r3, [r7, #24]
 800e042:	68db      	ldr	r3, [r3, #12]
 800e044:	61bb      	str	r3, [r7, #24]
 800e046:	69bb      	ldr	r3, [r7, #24]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d1dd      	bne.n	800e008 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800e04c:	69fb      	ldr	r3, [r7, #28]
 800e04e:	3301      	adds	r3, #1
 800e050:	61fb      	str	r3, [r7, #28]
 800e052:	69fa      	ldr	r2, [r7, #28]
 800e054:	697b      	ldr	r3, [r7, #20]
 800e056:	429a      	cmp	r2, r3
 800e058:	dbcf      	blt.n	800dffa <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800e05a:	68bb      	ldr	r3, [r7, #8]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d00c      	beq.n	800e07a <tcp_bind+0xf2>
 800e060:	68bb      	ldr	r3, [r7, #8]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d008      	beq.n	800e07a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800e068:	68bb      	ldr	r3, [r7, #8]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d002      	beq.n	800e074 <tcp_bind+0xec>
 800e06e:	68bb      	ldr	r3, [r7, #8]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	e000      	b.n	800e076 <tcp_bind+0xee>
 800e074:	2300      	movs	r3, #0
 800e076:	68fa      	ldr	r2, [r7, #12]
 800e078:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	88fa      	ldrh	r2, [r7, #6]
 800e07e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800e080:	4b0c      	ldr	r3, [pc, #48]	; (800e0b4 <tcp_bind+0x12c>)
 800e082:	681a      	ldr	r2, [r3, #0]
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	60da      	str	r2, [r3, #12]
 800e088:	4a0a      	ldr	r2, [pc, #40]	; (800e0b4 <tcp_bind+0x12c>)
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	6013      	str	r3, [r2, #0]
 800e08e:	f005 fccb 	bl	8013a28 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800e092:	2300      	movs	r3, #0
}
 800e094:	4618      	mov	r0, r3
 800e096:	3720      	adds	r7, #32
 800e098:	46bd      	mov	sp, r7
 800e09a:	bd80      	pop	{r7, pc}
 800e09c:	0801f88c 	.word	0x0801f88c
 800e0a0:	0801988c 	.word	0x0801988c
 800e0a4:	08019a20 	.word	0x08019a20
 800e0a8:	080198d0 	.word	0x080198d0
 800e0ac:	08019a38 	.word	0x08019a38
 800e0b0:	0801f864 	.word	0x0801f864
 800e0b4:	20017a04 	.word	0x20017a04

0800e0b8 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b084      	sub	sp, #16
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	60f8      	str	r0, [r7, #12]
 800e0c0:	60b9      	str	r1, [r7, #8]
 800e0c2:	4613      	mov	r3, r2
 800e0c4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800e0c6:	68bb      	ldr	r3, [r7, #8]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d106      	bne.n	800e0da <tcp_accept_null+0x22>
 800e0cc:	4b07      	ldr	r3, [pc, #28]	; (800e0ec <tcp_accept_null+0x34>)
 800e0ce:	f240 320f 	movw	r2, #783	; 0x30f
 800e0d2:	4907      	ldr	r1, [pc, #28]	; (800e0f0 <tcp_accept_null+0x38>)
 800e0d4:	4807      	ldr	r0, [pc, #28]	; (800e0f4 <tcp_accept_null+0x3c>)
 800e0d6:	f008 fad1 	bl	801667c <iprintf>

  tcp_abort(pcb);
 800e0da:	68b8      	ldr	r0, [r7, #8]
 800e0dc:	f7ff ff48 	bl	800df70 <tcp_abort>

  return ERR_ABRT;
 800e0e0:	f06f 030c 	mvn.w	r3, #12
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3710      	adds	r7, #16
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}
 800e0ec:	0801988c 	.word	0x0801988c
 800e0f0:	08019a60 	.word	0x08019a60
 800e0f4:	080198d0 	.word	0x080198d0

0800e0f8 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b082      	sub	sp, #8
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
 800e100:	460b      	mov	r3, r1
 800e102:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800e104:	78fb      	ldrb	r3, [r7, #3]
 800e106:	2200      	movs	r2, #0
 800e108:	4619      	mov	r1, r3
 800e10a:	6878      	ldr	r0, [r7, #4]
 800e10c:	f000 f806 	bl	800e11c <tcp_listen_with_backlog_and_err>
 800e110:	4603      	mov	r3, r0
}
 800e112:	4618      	mov	r0, r3
 800e114:	3708      	adds	r7, #8
 800e116:	46bd      	mov	sp, r7
 800e118:	bd80      	pop	{r7, pc}
	...

0800e11c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b088      	sub	sp, #32
 800e120:	af00      	add	r7, sp, #0
 800e122:	60f8      	str	r0, [r7, #12]
 800e124:	460b      	mov	r3, r1
 800e126:	607a      	str	r2, [r7, #4]
 800e128:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800e12a:	2300      	movs	r3, #0
 800e12c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d109      	bne.n	800e148 <tcp_listen_with_backlog_and_err+0x2c>
 800e134:	4b47      	ldr	r3, [pc, #284]	; (800e254 <tcp_listen_with_backlog_and_err+0x138>)
 800e136:	f240 3259 	movw	r2, #857	; 0x359
 800e13a:	4947      	ldr	r1, [pc, #284]	; (800e258 <tcp_listen_with_backlog_and_err+0x13c>)
 800e13c:	4847      	ldr	r0, [pc, #284]	; (800e25c <tcp_listen_with_backlog_and_err+0x140>)
 800e13e:	f008 fa9d 	bl	801667c <iprintf>
 800e142:	23f0      	movs	r3, #240	; 0xf0
 800e144:	76fb      	strb	r3, [r7, #27]
 800e146:	e079      	b.n	800e23c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	7d1b      	ldrb	r3, [r3, #20]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d009      	beq.n	800e164 <tcp_listen_with_backlog_and_err+0x48>
 800e150:	4b40      	ldr	r3, [pc, #256]	; (800e254 <tcp_listen_with_backlog_and_err+0x138>)
 800e152:	f240 325a 	movw	r2, #858	; 0x35a
 800e156:	4942      	ldr	r1, [pc, #264]	; (800e260 <tcp_listen_with_backlog_and_err+0x144>)
 800e158:	4840      	ldr	r0, [pc, #256]	; (800e25c <tcp_listen_with_backlog_and_err+0x140>)
 800e15a:	f008 fa8f 	bl	801667c <iprintf>
 800e15e:	23f1      	movs	r3, #241	; 0xf1
 800e160:	76fb      	strb	r3, [r7, #27]
 800e162:	e06b      	b.n	800e23c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	7d1b      	ldrb	r3, [r3, #20]
 800e168:	2b01      	cmp	r3, #1
 800e16a:	d104      	bne.n	800e176 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800e170:	23f7      	movs	r3, #247	; 0xf7
 800e172:	76fb      	strb	r3, [r7, #27]
    goto done;
 800e174:	e062      	b.n	800e23c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800e176:	2002      	movs	r0, #2
 800e178:	f7fe fb14 	bl	800c7a4 <memp_malloc>
 800e17c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800e17e:	69fb      	ldr	r3, [r7, #28]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d102      	bne.n	800e18a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800e184:	23ff      	movs	r3, #255	; 0xff
 800e186:	76fb      	strb	r3, [r7, #27]
    goto done;
 800e188:	e058      	b.n	800e23c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	691a      	ldr	r2, [r3, #16]
 800e18e:	69fb      	ldr	r3, [r7, #28]
 800e190:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	8ada      	ldrh	r2, [r3, #22]
 800e196:	69fb      	ldr	r3, [r7, #28]
 800e198:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800e19a:	69fb      	ldr	r3, [r7, #28]
 800e19c:	2201      	movs	r2, #1
 800e19e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	7d5a      	ldrb	r2, [r3, #21]
 800e1a4:	69fb      	ldr	r3, [r7, #28]
 800e1a6:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	7a5a      	ldrb	r2, [r3, #9]
 800e1ac:	69fb      	ldr	r3, [r7, #28]
 800e1ae:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800e1b0:	69fb      	ldr	r3, [r7, #28]
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	7ada      	ldrb	r2, [r3, #11]
 800e1ba:	69fb      	ldr	r3, [r7, #28]
 800e1bc:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	7a9a      	ldrb	r2, [r3, #10]
 800e1c2:	69fb      	ldr	r3, [r7, #28]
 800e1c4:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	681a      	ldr	r2, [r3, #0]
 800e1ca:	69fb      	ldr	r3, [r7, #28]
 800e1cc:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	8adb      	ldrh	r3, [r3, #22]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d021      	beq.n	800e21a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800e1d6:	4b23      	ldr	r3, [pc, #140]	; (800e264 <tcp_listen_with_backlog_and_err+0x148>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	68fa      	ldr	r2, [r7, #12]
 800e1dc:	429a      	cmp	r2, r3
 800e1de:	d105      	bne.n	800e1ec <tcp_listen_with_backlog_and_err+0xd0>
 800e1e0:	4b20      	ldr	r3, [pc, #128]	; (800e264 <tcp_listen_with_backlog_and_err+0x148>)
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	68db      	ldr	r3, [r3, #12]
 800e1e6:	4a1f      	ldr	r2, [pc, #124]	; (800e264 <tcp_listen_with_backlog_and_err+0x148>)
 800e1e8:	6013      	str	r3, [r2, #0]
 800e1ea:	e013      	b.n	800e214 <tcp_listen_with_backlog_and_err+0xf8>
 800e1ec:	4b1d      	ldr	r3, [pc, #116]	; (800e264 <tcp_listen_with_backlog_and_err+0x148>)
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	617b      	str	r3, [r7, #20]
 800e1f2:	e00c      	b.n	800e20e <tcp_listen_with_backlog_and_err+0xf2>
 800e1f4:	697b      	ldr	r3, [r7, #20]
 800e1f6:	68db      	ldr	r3, [r3, #12]
 800e1f8:	68fa      	ldr	r2, [r7, #12]
 800e1fa:	429a      	cmp	r2, r3
 800e1fc:	d104      	bne.n	800e208 <tcp_listen_with_backlog_and_err+0xec>
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	68da      	ldr	r2, [r3, #12]
 800e202:	697b      	ldr	r3, [r7, #20]
 800e204:	60da      	str	r2, [r3, #12]
 800e206:	e005      	b.n	800e214 <tcp_listen_with_backlog_and_err+0xf8>
 800e208:	697b      	ldr	r3, [r7, #20]
 800e20a:	68db      	ldr	r3, [r3, #12]
 800e20c:	617b      	str	r3, [r7, #20]
 800e20e:	697b      	ldr	r3, [r7, #20]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d1ef      	bne.n	800e1f4 <tcp_listen_with_backlog_and_err+0xd8>
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	2200      	movs	r2, #0
 800e218:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800e21a:	68f8      	ldr	r0, [r7, #12]
 800e21c:	f7ff fbc0 	bl	800d9a0 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800e220:	69fb      	ldr	r3, [r7, #28]
 800e222:	4a11      	ldr	r2, [pc, #68]	; (800e268 <tcp_listen_with_backlog_and_err+0x14c>)
 800e224:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800e226:	4b11      	ldr	r3, [pc, #68]	; (800e26c <tcp_listen_with_backlog_and_err+0x150>)
 800e228:	681a      	ldr	r2, [r3, #0]
 800e22a:	69fb      	ldr	r3, [r7, #28]
 800e22c:	60da      	str	r2, [r3, #12]
 800e22e:	4a0f      	ldr	r2, [pc, #60]	; (800e26c <tcp_listen_with_backlog_and_err+0x150>)
 800e230:	69fb      	ldr	r3, [r7, #28]
 800e232:	6013      	str	r3, [r2, #0]
 800e234:	f005 fbf8 	bl	8013a28 <tcp_timer_needed>
  res = ERR_OK;
 800e238:	2300      	movs	r3, #0
 800e23a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d002      	beq.n	800e248 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	7efa      	ldrb	r2, [r7, #27]
 800e246:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800e248:	69fb      	ldr	r3, [r7, #28]
}
 800e24a:	4618      	mov	r0, r3
 800e24c:	3720      	adds	r7, #32
 800e24e:	46bd      	mov	sp, r7
 800e250:	bd80      	pop	{r7, pc}
 800e252:	bf00      	nop
 800e254:	0801988c 	.word	0x0801988c
 800e258:	08019a80 	.word	0x08019a80
 800e25c:	080198d0 	.word	0x080198d0
 800e260:	08019ab0 	.word	0x08019ab0
 800e264:	20017a04 	.word	0x20017a04
 800e268:	0800e0b9 	.word	0x0800e0b9
 800e26c:	20017a00 	.word	0x20017a00

0800e270 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e270:	b580      	push	{r7, lr}
 800e272:	b084      	sub	sp, #16
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d106      	bne.n	800e28c <tcp_update_rcv_ann_wnd+0x1c>
 800e27e:	4b25      	ldr	r3, [pc, #148]	; (800e314 <tcp_update_rcv_ann_wnd+0xa4>)
 800e280:	f240 32a6 	movw	r2, #934	; 0x3a6
 800e284:	4924      	ldr	r1, [pc, #144]	; (800e318 <tcp_update_rcv_ann_wnd+0xa8>)
 800e286:	4825      	ldr	r0, [pc, #148]	; (800e31c <tcp_update_rcv_ann_wnd+0xac>)
 800e288:	f008 f9f8 	bl	801667c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e290:	687a      	ldr	r2, [r7, #4]
 800e292:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e294:	4413      	add	r3, r2
 800e296:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e29c:	687a      	ldr	r2, [r7, #4]
 800e29e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800e2a0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800e2a4:	bf28      	it	cs
 800e2a6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800e2aa:	b292      	uxth	r2, r2
 800e2ac:	4413      	add	r3, r2
 800e2ae:	68fa      	ldr	r2, [r7, #12]
 800e2b0:	1ad3      	subs	r3, r2, r3
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	db08      	blt.n	800e2c8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2c2:	68fa      	ldr	r2, [r7, #12]
 800e2c4:	1ad3      	subs	r3, r2, r3
 800e2c6:	e020      	b.n	800e30a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2d0:	1ad3      	subs	r3, r2, r3
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	dd03      	ble.n	800e2de <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	2200      	movs	r2, #0
 800e2da:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e2dc:	e014      	b.n	800e308 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2e6:	1ad3      	subs	r3, r2, r3
 800e2e8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e2f0:	d306      	bcc.n	800e300 <tcp_update_rcv_ann_wnd+0x90>
 800e2f2:	4b08      	ldr	r3, [pc, #32]	; (800e314 <tcp_update_rcv_ann_wnd+0xa4>)
 800e2f4:	f240 32b6 	movw	r2, #950	; 0x3b6
 800e2f8:	4909      	ldr	r1, [pc, #36]	; (800e320 <tcp_update_rcv_ann_wnd+0xb0>)
 800e2fa:	4808      	ldr	r0, [pc, #32]	; (800e31c <tcp_update_rcv_ann_wnd+0xac>)
 800e2fc:	f008 f9be 	bl	801667c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e300:	68bb      	ldr	r3, [r7, #8]
 800e302:	b29a      	uxth	r2, r3
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800e308:	2300      	movs	r3, #0
  }
}
 800e30a:	4618      	mov	r0, r3
 800e30c:	3710      	adds	r7, #16
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}
 800e312:	bf00      	nop
 800e314:	0801988c 	.word	0x0801988c
 800e318:	08019ae8 	.word	0x08019ae8
 800e31c:	080198d0 	.word	0x080198d0
 800e320:	08019b0c 	.word	0x08019b0c

0800e324 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b084      	sub	sp, #16
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
 800e32c:	460b      	mov	r3, r1
 800e32e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d107      	bne.n	800e346 <tcp_recved+0x22>
 800e336:	4b1f      	ldr	r3, [pc, #124]	; (800e3b4 <tcp_recved+0x90>)
 800e338:	f240 32cf 	movw	r2, #975	; 0x3cf
 800e33c:	491e      	ldr	r1, [pc, #120]	; (800e3b8 <tcp_recved+0x94>)
 800e33e:	481f      	ldr	r0, [pc, #124]	; (800e3bc <tcp_recved+0x98>)
 800e340:	f008 f99c 	bl	801667c <iprintf>
 800e344:	e032      	b.n	800e3ac <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	7d1b      	ldrb	r3, [r3, #20]
 800e34a:	2b01      	cmp	r3, #1
 800e34c:	d106      	bne.n	800e35c <tcp_recved+0x38>
 800e34e:	4b19      	ldr	r3, [pc, #100]	; (800e3b4 <tcp_recved+0x90>)
 800e350:	f240 32d2 	movw	r2, #978	; 0x3d2
 800e354:	491a      	ldr	r1, [pc, #104]	; (800e3c0 <tcp_recved+0x9c>)
 800e356:	4819      	ldr	r0, [pc, #100]	; (800e3bc <tcp_recved+0x98>)
 800e358:	f008 f990 	bl	801667c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e360:	887b      	ldrh	r3, [r7, #2]
 800e362:	4413      	add	r3, r2
 800e364:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e366:	89fb      	ldrh	r3, [r7, #14]
 800e368:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e36c:	d804      	bhi.n	800e378 <tcp_recved+0x54>
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e372:	89fa      	ldrh	r2, [r7, #14]
 800e374:	429a      	cmp	r2, r3
 800e376:	d204      	bcs.n	800e382 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e37e:	851a      	strh	r2, [r3, #40]	; 0x28
 800e380:	e002      	b.n	800e388 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	89fa      	ldrh	r2, [r7, #14]
 800e386:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e388:	6878      	ldr	r0, [r7, #4]
 800e38a:	f7ff ff71 	bl	800e270 <tcp_update_rcv_ann_wnd>
 800e38e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e390:	68bb      	ldr	r3, [r7, #8]
 800e392:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e396:	d309      	bcc.n	800e3ac <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	8b5b      	ldrh	r3, [r3, #26]
 800e39c:	f043 0302 	orr.w	r3, r3, #2
 800e3a0:	b29a      	uxth	r2, r3
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e3a6:	6878      	ldr	r0, [r7, #4]
 800e3a8:	f004 fbc8 	bl	8012b3c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e3ac:	3710      	adds	r7, #16
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	bd80      	pop	{r7, pc}
 800e3b2:	bf00      	nop
 800e3b4:	0801988c 	.word	0x0801988c
 800e3b8:	08019b28 	.word	0x08019b28
 800e3bc:	080198d0 	.word	0x080198d0
 800e3c0:	08019b40 	.word	0x08019b40

0800e3c4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800e3c4:	b480      	push	{r7}
 800e3c6:	b083      	sub	sp, #12
 800e3c8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800e3ce:	4b1e      	ldr	r3, [pc, #120]	; (800e448 <tcp_new_port+0x84>)
 800e3d0:	881b      	ldrh	r3, [r3, #0]
 800e3d2:	3301      	adds	r3, #1
 800e3d4:	b29a      	uxth	r2, r3
 800e3d6:	4b1c      	ldr	r3, [pc, #112]	; (800e448 <tcp_new_port+0x84>)
 800e3d8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800e3da:	4b1b      	ldr	r3, [pc, #108]	; (800e448 <tcp_new_port+0x84>)
 800e3dc:	881b      	ldrh	r3, [r3, #0]
 800e3de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e3e2:	4293      	cmp	r3, r2
 800e3e4:	d103      	bne.n	800e3ee <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800e3e6:	4b18      	ldr	r3, [pc, #96]	; (800e448 <tcp_new_port+0x84>)
 800e3e8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e3ec:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	71fb      	strb	r3, [r7, #7]
 800e3f2:	e01e      	b.n	800e432 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e3f4:	79fb      	ldrb	r3, [r7, #7]
 800e3f6:	4a15      	ldr	r2, [pc, #84]	; (800e44c <tcp_new_port+0x88>)
 800e3f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	603b      	str	r3, [r7, #0]
 800e400:	e011      	b.n	800e426 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800e402:	683b      	ldr	r3, [r7, #0]
 800e404:	8ada      	ldrh	r2, [r3, #22]
 800e406:	4b10      	ldr	r3, [pc, #64]	; (800e448 <tcp_new_port+0x84>)
 800e408:	881b      	ldrh	r3, [r3, #0]
 800e40a:	429a      	cmp	r2, r3
 800e40c:	d108      	bne.n	800e420 <tcp_new_port+0x5c>
        n++;
 800e40e:	88bb      	ldrh	r3, [r7, #4]
 800e410:	3301      	adds	r3, #1
 800e412:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800e414:	88bb      	ldrh	r3, [r7, #4]
 800e416:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e41a:	d3d8      	bcc.n	800e3ce <tcp_new_port+0xa>
          return 0;
 800e41c:	2300      	movs	r3, #0
 800e41e:	e00d      	b.n	800e43c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	68db      	ldr	r3, [r3, #12]
 800e424:	603b      	str	r3, [r7, #0]
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d1ea      	bne.n	800e402 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e42c:	79fb      	ldrb	r3, [r7, #7]
 800e42e:	3301      	adds	r3, #1
 800e430:	71fb      	strb	r3, [r7, #7]
 800e432:	79fb      	ldrb	r3, [r7, #7]
 800e434:	2b03      	cmp	r3, #3
 800e436:	d9dd      	bls.n	800e3f4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800e438:	4b03      	ldr	r3, [pc, #12]	; (800e448 <tcp_new_port+0x84>)
 800e43a:	881b      	ldrh	r3, [r3, #0]
}
 800e43c:	4618      	mov	r0, r3
 800e43e:	370c      	adds	r7, #12
 800e440:	46bd      	mov	sp, r7
 800e442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e446:	4770      	bx	lr
 800e448:	20000022 	.word	0x20000022
 800e44c:	0801f864 	.word	0x0801f864

0800e450 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e450:	b5b0      	push	{r4, r5, r7, lr}
 800e452:	b090      	sub	sp, #64	; 0x40
 800e454:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e456:	2300      	movs	r3, #0
 800e458:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800e45c:	4b94      	ldr	r3, [pc, #592]	; (800e6b0 <tcp_slowtmr+0x260>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	3301      	adds	r3, #1
 800e462:	4a93      	ldr	r2, [pc, #588]	; (800e6b0 <tcp_slowtmr+0x260>)
 800e464:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e466:	4b93      	ldr	r3, [pc, #588]	; (800e6b4 <tcp_slowtmr+0x264>)
 800e468:	781b      	ldrb	r3, [r3, #0]
 800e46a:	3301      	adds	r3, #1
 800e46c:	b2da      	uxtb	r2, r3
 800e46e:	4b91      	ldr	r3, [pc, #580]	; (800e6b4 <tcp_slowtmr+0x264>)
 800e470:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e472:	2300      	movs	r3, #0
 800e474:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800e476:	4b90      	ldr	r3, [pc, #576]	; (800e6b8 <tcp_slowtmr+0x268>)
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e47c:	e29f      	b.n	800e9be <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e480:	7d1b      	ldrb	r3, [r3, #20]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d106      	bne.n	800e494 <tcp_slowtmr+0x44>
 800e486:	4b8d      	ldr	r3, [pc, #564]	; (800e6bc <tcp_slowtmr+0x26c>)
 800e488:	f240 42be 	movw	r2, #1214	; 0x4be
 800e48c:	498c      	ldr	r1, [pc, #560]	; (800e6c0 <tcp_slowtmr+0x270>)
 800e48e:	488d      	ldr	r0, [pc, #564]	; (800e6c4 <tcp_slowtmr+0x274>)
 800e490:	f008 f8f4 	bl	801667c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e496:	7d1b      	ldrb	r3, [r3, #20]
 800e498:	2b01      	cmp	r3, #1
 800e49a:	d106      	bne.n	800e4aa <tcp_slowtmr+0x5a>
 800e49c:	4b87      	ldr	r3, [pc, #540]	; (800e6bc <tcp_slowtmr+0x26c>)
 800e49e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800e4a2:	4989      	ldr	r1, [pc, #548]	; (800e6c8 <tcp_slowtmr+0x278>)
 800e4a4:	4887      	ldr	r0, [pc, #540]	; (800e6c4 <tcp_slowtmr+0x274>)
 800e4a6:	f008 f8e9 	bl	801667c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e4aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ac:	7d1b      	ldrb	r3, [r3, #20]
 800e4ae:	2b0a      	cmp	r3, #10
 800e4b0:	d106      	bne.n	800e4c0 <tcp_slowtmr+0x70>
 800e4b2:	4b82      	ldr	r3, [pc, #520]	; (800e6bc <tcp_slowtmr+0x26c>)
 800e4b4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800e4b8:	4984      	ldr	r1, [pc, #528]	; (800e6cc <tcp_slowtmr+0x27c>)
 800e4ba:	4882      	ldr	r0, [pc, #520]	; (800e6c4 <tcp_slowtmr+0x274>)
 800e4bc:	f008 f8de 	bl	801667c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4c2:	7f9a      	ldrb	r2, [r3, #30]
 800e4c4:	4b7b      	ldr	r3, [pc, #492]	; (800e6b4 <tcp_slowtmr+0x264>)
 800e4c6:	781b      	ldrb	r3, [r3, #0]
 800e4c8:	429a      	cmp	r2, r3
 800e4ca:	d105      	bne.n	800e4d8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800e4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ce:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4d2:	68db      	ldr	r3, [r3, #12]
 800e4d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800e4d6:	e272      	b.n	800e9be <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e4d8:	4b76      	ldr	r3, [pc, #472]	; (800e6b4 <tcp_slowtmr+0x264>)
 800e4da:	781a      	ldrb	r2, [r3, #0]
 800e4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4de:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ee:	7d1b      	ldrb	r3, [r3, #20]
 800e4f0:	2b02      	cmp	r3, #2
 800e4f2:	d10a      	bne.n	800e50a <tcp_slowtmr+0xba>
 800e4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e4fa:	2b05      	cmp	r3, #5
 800e4fc:	d905      	bls.n	800e50a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800e4fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e502:	3301      	adds	r3, #1
 800e504:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e508:	e11e      	b.n	800e748 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e50c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e510:	2b0b      	cmp	r3, #11
 800e512:	d905      	bls.n	800e520 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800e514:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e518:	3301      	adds	r3, #1
 800e51a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e51e:	e113      	b.n	800e748 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e522:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e526:	2b00      	cmp	r3, #0
 800e528:	d075      	beq.n	800e616 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e52c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d006      	beq.n	800e540 <tcp_slowtmr+0xf0>
 800e532:	4b62      	ldr	r3, [pc, #392]	; (800e6bc <tcp_slowtmr+0x26c>)
 800e534:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800e538:	4965      	ldr	r1, [pc, #404]	; (800e6d0 <tcp_slowtmr+0x280>)
 800e53a:	4862      	ldr	r0, [pc, #392]	; (800e6c4 <tcp_slowtmr+0x274>)
 800e53c:	f008 f89e 	bl	801667c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e542:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e544:	2b00      	cmp	r3, #0
 800e546:	d106      	bne.n	800e556 <tcp_slowtmr+0x106>
 800e548:	4b5c      	ldr	r3, [pc, #368]	; (800e6bc <tcp_slowtmr+0x26c>)
 800e54a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e54e:	4961      	ldr	r1, [pc, #388]	; (800e6d4 <tcp_slowtmr+0x284>)
 800e550:	485c      	ldr	r0, [pc, #368]	; (800e6c4 <tcp_slowtmr+0x274>)
 800e552:	f008 f893 	bl	801667c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e558:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e55c:	2b0b      	cmp	r3, #11
 800e55e:	d905      	bls.n	800e56c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800e560:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e564:	3301      	adds	r3, #1
 800e566:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e56a:	e0ed      	b.n	800e748 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e56e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e572:	3b01      	subs	r3, #1
 800e574:	4a58      	ldr	r2, [pc, #352]	; (800e6d8 <tcp_slowtmr+0x288>)
 800e576:	5cd3      	ldrb	r3, [r2, r3]
 800e578:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e57c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e580:	7c7a      	ldrb	r2, [r7, #17]
 800e582:	429a      	cmp	r2, r3
 800e584:	d907      	bls.n	800e596 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800e586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e588:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e58c:	3301      	adds	r3, #1
 800e58e:	b2da      	uxtb	r2, r3
 800e590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e592:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800e596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e598:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e59c:	7c7a      	ldrb	r2, [r7, #17]
 800e59e:	429a      	cmp	r2, r3
 800e5a0:	f200 80d2 	bhi.w	800e748 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e5a4:	2301      	movs	r3, #1
 800e5a6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d108      	bne.n	800e5c4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e5b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e5b4:	f005 f96a 	bl	801388c <tcp_zero_window_probe>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d014      	beq.n	800e5e8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e5be:	2300      	movs	r3, #0
 800e5c0:	623b      	str	r3, [r7, #32]
 800e5c2:	e011      	b.n	800e5e8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e5ca:	4619      	mov	r1, r3
 800e5cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e5ce:	f004 f82f 	bl	8012630 <tcp_split_unsent_seg>
 800e5d2:	4603      	mov	r3, r0
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d107      	bne.n	800e5e8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e5d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e5da:	f004 faaf 	bl	8012b3c <tcp_output>
 800e5de:	4603      	mov	r3, r0
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d101      	bne.n	800e5e8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e5e8:	6a3b      	ldr	r3, [r7, #32]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	f000 80ac 	beq.w	800e748 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e5f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5fa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e5fe:	2b06      	cmp	r3, #6
 800e600:	f200 80a2 	bhi.w	800e748 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e606:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e60a:	3301      	adds	r3, #1
 800e60c:	b2da      	uxtb	r2, r3
 800e60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e610:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e614:	e098      	b.n	800e748 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e618:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	db0f      	blt.n	800e640 <tcp_slowtmr+0x1f0>
 800e620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e622:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e626:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e62a:	4293      	cmp	r3, r2
 800e62c:	d008      	beq.n	800e640 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800e62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e630:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e634:	b29b      	uxth	r3, r3
 800e636:	3301      	adds	r3, #1
 800e638:	b29b      	uxth	r3, r3
 800e63a:	b21a      	sxth	r2, r3
 800e63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e63e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800e640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e642:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e648:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e64c:	429a      	cmp	r2, r3
 800e64e:	db7b      	blt.n	800e748 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e650:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e652:	f004 fd65 	bl	8013120 <tcp_rexmit_rto_prepare>
 800e656:	4603      	mov	r3, r0
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d007      	beq.n	800e66c <tcp_slowtmr+0x21c>
 800e65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e65e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e660:	2b00      	cmp	r3, #0
 800e662:	d171      	bne.n	800e748 <tcp_slowtmr+0x2f8>
 800e664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d06d      	beq.n	800e748 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800e66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e66e:	7d1b      	ldrb	r3, [r3, #20]
 800e670:	2b02      	cmp	r3, #2
 800e672:	d03a      	beq.n	800e6ea <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e676:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e67a:	2b0c      	cmp	r3, #12
 800e67c:	bf28      	it	cs
 800e67e:	230c      	movcs	r3, #12
 800e680:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e684:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e688:	10db      	asrs	r3, r3, #3
 800e68a:	b21b      	sxth	r3, r3
 800e68c:	461a      	mov	r2, r3
 800e68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e690:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e694:	4413      	add	r3, r2
 800e696:	7efa      	ldrb	r2, [r7, #27]
 800e698:	4910      	ldr	r1, [pc, #64]	; (800e6dc <tcp_slowtmr+0x28c>)
 800e69a:	5c8a      	ldrb	r2, [r1, r2]
 800e69c:	4093      	lsls	r3, r2
 800e69e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e6a0:	697b      	ldr	r3, [r7, #20]
 800e6a2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800e6a6:	4293      	cmp	r3, r2
 800e6a8:	dc1a      	bgt.n	800e6e0 <tcp_slowtmr+0x290>
 800e6aa:	697b      	ldr	r3, [r7, #20]
 800e6ac:	b21a      	sxth	r2, r3
 800e6ae:	e019      	b.n	800e6e4 <tcp_slowtmr+0x294>
 800e6b0:	200179fc 	.word	0x200179fc
 800e6b4:	20001586 	.word	0x20001586
 800e6b8:	200179f8 	.word	0x200179f8
 800e6bc:	0801988c 	.word	0x0801988c
 800e6c0:	08019bd0 	.word	0x08019bd0
 800e6c4:	080198d0 	.word	0x080198d0
 800e6c8:	08019bfc 	.word	0x08019bfc
 800e6cc:	08019c28 	.word	0x08019c28
 800e6d0:	08019c58 	.word	0x08019c58
 800e6d4:	08019c8c 	.word	0x08019c8c
 800e6d8:	0801f85c 	.word	0x0801f85c
 800e6dc:	0801f84c 	.word	0x0801f84c
 800e6e0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800e6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e6f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6f8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e6fc:	4293      	cmp	r3, r2
 800e6fe:	bf28      	it	cs
 800e700:	4613      	movcs	r3, r2
 800e702:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e704:	8a7b      	ldrh	r3, [r7, #18]
 800e706:	085b      	lsrs	r3, r3, #1
 800e708:	b29a      	uxth	r2, r3
 800e70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e70c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e712:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e718:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e71a:	005b      	lsls	r3, r3, #1
 800e71c:	b29b      	uxth	r3, r3
 800e71e:	429a      	cmp	r2, r3
 800e720:	d206      	bcs.n	800e730 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e724:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e726:	005b      	lsls	r3, r3, #1
 800e728:	b29a      	uxth	r2, r3
 800e72a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e72c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800e730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e732:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e736:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800e73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e73c:	2200      	movs	r2, #0
 800e73e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800e742:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e744:	f004 fd5c 	bl	8013200 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e74a:	7d1b      	ldrb	r3, [r3, #20]
 800e74c:	2b06      	cmp	r3, #6
 800e74e:	d111      	bne.n	800e774 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e752:	8b5b      	ldrh	r3, [r3, #26]
 800e754:	f003 0310 	and.w	r3, r3, #16
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d00b      	beq.n	800e774 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e75c:	4b9d      	ldr	r3, [pc, #628]	; (800e9d4 <tcp_slowtmr+0x584>)
 800e75e:	681a      	ldr	r2, [r3, #0]
 800e760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e762:	6a1b      	ldr	r3, [r3, #32]
 800e764:	1ad3      	subs	r3, r2, r3
 800e766:	2b28      	cmp	r3, #40	; 0x28
 800e768:	d904      	bls.n	800e774 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e76a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e76e:	3301      	adds	r3, #1
 800e770:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e776:	7a5b      	ldrb	r3, [r3, #9]
 800e778:	f003 0308 	and.w	r3, r3, #8
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d04c      	beq.n	800e81a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800e780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e782:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e784:	2b04      	cmp	r3, #4
 800e786:	d003      	beq.n	800e790 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800e788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e78a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e78c:	2b07      	cmp	r3, #7
 800e78e:	d144      	bne.n	800e81a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e790:	4b90      	ldr	r3, [pc, #576]	; (800e9d4 <tcp_slowtmr+0x584>)
 800e792:	681a      	ldr	r2, [r3, #0]
 800e794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e796:	6a1b      	ldr	r3, [r3, #32]
 800e798:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e79c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e7a0:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800e7a4:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800e7a8:	498b      	ldr	r1, [pc, #556]	; (800e9d8 <tcp_slowtmr+0x588>)
 800e7aa:	fba1 1303 	umull	r1, r3, r1, r3
 800e7ae:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e7b0:	429a      	cmp	r2, r3
 800e7b2:	d90a      	bls.n	800e7ca <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e7b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7b8:	3301      	adds	r3, #1
 800e7ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800e7be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e7c2:	3301      	adds	r3, #1
 800e7c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e7c8:	e027      	b.n	800e81a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e7ca:	4b82      	ldr	r3, [pc, #520]	; (800e9d4 <tcp_slowtmr+0x584>)
 800e7cc:	681a      	ldr	r2, [r3, #0]
 800e7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7d0:	6a1b      	ldr	r3, [r3, #32]
 800e7d2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7d6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7dc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	4b7e      	ldr	r3, [pc, #504]	; (800e9dc <tcp_slowtmr+0x58c>)
 800e7e4:	fb03 f300 	mul.w	r3, r3, r0
 800e7e8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e7ea:	497b      	ldr	r1, [pc, #492]	; (800e9d8 <tcp_slowtmr+0x588>)
 800e7ec:	fba1 1303 	umull	r1, r3, r1, r3
 800e7f0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e7f2:	429a      	cmp	r2, r3
 800e7f4:	d911      	bls.n	800e81a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800e7f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e7f8:	f005 f808 	bl	801380c <tcp_keepalive>
 800e7fc:	4603      	mov	r3, r0
 800e7fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800e802:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e806:	2b00      	cmp	r3, #0
 800e808:	d107      	bne.n	800e81a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800e80a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e80c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e810:	3301      	adds	r3, #1
 800e812:	b2da      	uxtb	r2, r3
 800e814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e816:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e81c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d011      	beq.n	800e846 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e822:	4b6c      	ldr	r3, [pc, #432]	; (800e9d4 <tcp_slowtmr+0x584>)
 800e824:	681a      	ldr	r2, [r3, #0]
 800e826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e828:	6a1b      	ldr	r3, [r3, #32]
 800e82a:	1ad2      	subs	r2, r2, r3
 800e82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e82e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e832:	4619      	mov	r1, r3
 800e834:	460b      	mov	r3, r1
 800e836:	005b      	lsls	r3, r3, #1
 800e838:	440b      	add	r3, r1
 800e83a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e83c:	429a      	cmp	r2, r3
 800e83e:	d302      	bcc.n	800e846 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800e840:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e842:	f000 fec7 	bl	800f5d4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e848:	7d1b      	ldrb	r3, [r3, #20]
 800e84a:	2b03      	cmp	r3, #3
 800e84c:	d10b      	bne.n	800e866 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e84e:	4b61      	ldr	r3, [pc, #388]	; (800e9d4 <tcp_slowtmr+0x584>)
 800e850:	681a      	ldr	r2, [r3, #0]
 800e852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e854:	6a1b      	ldr	r3, [r3, #32]
 800e856:	1ad3      	subs	r3, r2, r3
 800e858:	2b28      	cmp	r3, #40	; 0x28
 800e85a:	d904      	bls.n	800e866 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e85c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e860:	3301      	adds	r3, #1
 800e862:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e868:	7d1b      	ldrb	r3, [r3, #20]
 800e86a:	2b09      	cmp	r3, #9
 800e86c:	d10b      	bne.n	800e886 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e86e:	4b59      	ldr	r3, [pc, #356]	; (800e9d4 <tcp_slowtmr+0x584>)
 800e870:	681a      	ldr	r2, [r3, #0]
 800e872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e874:	6a1b      	ldr	r3, [r3, #32]
 800e876:	1ad3      	subs	r3, r2, r3
 800e878:	2bf0      	cmp	r3, #240	; 0xf0
 800e87a:	d904      	bls.n	800e886 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800e87c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e880:	3301      	adds	r3, #1
 800e882:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e886:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d060      	beq.n	800e950 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e894:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e896:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e898:	f000 fce8 	bl	800f26c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d010      	beq.n	800e8c4 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e8a2:	4b4f      	ldr	r3, [pc, #316]	; (800e9e0 <tcp_slowtmr+0x590>)
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e8a8:	429a      	cmp	r2, r3
 800e8aa:	d106      	bne.n	800e8ba <tcp_slowtmr+0x46a>
 800e8ac:	4b4d      	ldr	r3, [pc, #308]	; (800e9e4 <tcp_slowtmr+0x594>)
 800e8ae:	f240 526d 	movw	r2, #1389	; 0x56d
 800e8b2:	494d      	ldr	r1, [pc, #308]	; (800e9e8 <tcp_slowtmr+0x598>)
 800e8b4:	484d      	ldr	r0, [pc, #308]	; (800e9ec <tcp_slowtmr+0x59c>)
 800e8b6:	f007 fee1 	bl	801667c <iprintf>
        prev->next = pcb->next;
 800e8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8bc:	68da      	ldr	r2, [r3, #12]
 800e8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8c0:	60da      	str	r2, [r3, #12]
 800e8c2:	e00f      	b.n	800e8e4 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e8c4:	4b46      	ldr	r3, [pc, #280]	; (800e9e0 <tcp_slowtmr+0x590>)
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e8ca:	429a      	cmp	r2, r3
 800e8cc:	d006      	beq.n	800e8dc <tcp_slowtmr+0x48c>
 800e8ce:	4b45      	ldr	r3, [pc, #276]	; (800e9e4 <tcp_slowtmr+0x594>)
 800e8d0:	f240 5271 	movw	r2, #1393	; 0x571
 800e8d4:	4946      	ldr	r1, [pc, #280]	; (800e9f0 <tcp_slowtmr+0x5a0>)
 800e8d6:	4845      	ldr	r0, [pc, #276]	; (800e9ec <tcp_slowtmr+0x59c>)
 800e8d8:	f007 fed0 	bl	801667c <iprintf>
        tcp_active_pcbs = pcb->next;
 800e8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8de:	68db      	ldr	r3, [r3, #12]
 800e8e0:	4a3f      	ldr	r2, [pc, #252]	; (800e9e0 <tcp_slowtmr+0x590>)
 800e8e2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e8e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d013      	beq.n	800e914 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ee:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e8f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8f2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e8f4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800e8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8f8:	3304      	adds	r3, #4
 800e8fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e8fc:	8ad2      	ldrh	r2, [r2, #22]
 800e8fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e900:	8b09      	ldrh	r1, [r1, #24]
 800e902:	9102      	str	r1, [sp, #8]
 800e904:	9201      	str	r2, [sp, #4]
 800e906:	9300      	str	r3, [sp, #0]
 800e908:	462b      	mov	r3, r5
 800e90a:	4622      	mov	r2, r4
 800e90c:	4601      	mov	r1, r0
 800e90e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e910:	f004 fec8 	bl	80136a4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e916:	691b      	ldr	r3, [r3, #16]
 800e918:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e91c:	7d1b      	ldrb	r3, [r3, #20]
 800e91e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e922:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e926:	68db      	ldr	r3, [r3, #12]
 800e928:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e92a:	6838      	ldr	r0, [r7, #0]
 800e92c:	f7ff f838 	bl	800d9a0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800e930:	4b30      	ldr	r3, [pc, #192]	; (800e9f4 <tcp_slowtmr+0x5a4>)
 800e932:	2200      	movs	r2, #0
 800e934:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d004      	beq.n	800e946 <tcp_slowtmr+0x4f6>
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	f06f 010c 	mvn.w	r1, #12
 800e942:	68b8      	ldr	r0, [r7, #8]
 800e944:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e946:	4b2b      	ldr	r3, [pc, #172]	; (800e9f4 <tcp_slowtmr+0x5a4>)
 800e948:	781b      	ldrb	r3, [r3, #0]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d037      	beq.n	800e9be <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800e94e:	e590      	b.n	800e472 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e952:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e956:	68db      	ldr	r3, [r3, #12]
 800e958:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e95a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e95c:	7f1b      	ldrb	r3, [r3, #28]
 800e95e:	3301      	adds	r3, #1
 800e960:	b2da      	uxtb	r2, r3
 800e962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e964:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e968:	7f1a      	ldrb	r2, [r3, #28]
 800e96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e96c:	7f5b      	ldrb	r3, [r3, #29]
 800e96e:	429a      	cmp	r2, r3
 800e970:	d325      	bcc.n	800e9be <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800e972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e974:	2200      	movs	r2, #0
 800e976:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e978:	4b1e      	ldr	r3, [pc, #120]	; (800e9f4 <tcp_slowtmr+0x5a4>)
 800e97a:	2200      	movs	r2, #0
 800e97c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e980:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e984:	2b00      	cmp	r3, #0
 800e986:	d00b      	beq.n	800e9a0 <tcp_slowtmr+0x550>
 800e988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e98a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e98e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e990:	6912      	ldr	r2, [r2, #16]
 800e992:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e994:	4610      	mov	r0, r2
 800e996:	4798      	blx	r3
 800e998:	4603      	mov	r3, r0
 800e99a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e99e:	e002      	b.n	800e9a6 <tcp_slowtmr+0x556>
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800e9a6:	4b13      	ldr	r3, [pc, #76]	; (800e9f4 <tcp_slowtmr+0x5a4>)
 800e9a8:	781b      	ldrb	r3, [r3, #0]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d000      	beq.n	800e9b0 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800e9ae:	e560      	b.n	800e472 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e9b0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d102      	bne.n	800e9be <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800e9b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9ba:	f004 f8bf 	bl	8012b3c <tcp_output>
  while (pcb != NULL) {
 800e9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	f47f ad5c 	bne.w	800e47e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800e9ca:	4b0b      	ldr	r3, [pc, #44]	; (800e9f8 <tcp_slowtmr+0x5a8>)
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e9d0:	e067      	b.n	800eaa2 <tcp_slowtmr+0x652>
 800e9d2:	bf00      	nop
 800e9d4:	200179fc 	.word	0x200179fc
 800e9d8:	10624dd3 	.word	0x10624dd3
 800e9dc:	000124f8 	.word	0x000124f8
 800e9e0:	200179f8 	.word	0x200179f8
 800e9e4:	0801988c 	.word	0x0801988c
 800e9e8:	08019cc4 	.word	0x08019cc4
 800e9ec:	080198d0 	.word	0x080198d0
 800e9f0:	08019cf0 	.word	0x08019cf0
 800e9f4:	200179f4 	.word	0x200179f4
 800e9f8:	20017a08 	.word	0x20017a08
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9fe:	7d1b      	ldrb	r3, [r3, #20]
 800ea00:	2b0a      	cmp	r3, #10
 800ea02:	d006      	beq.n	800ea12 <tcp_slowtmr+0x5c2>
 800ea04:	4b2b      	ldr	r3, [pc, #172]	; (800eab4 <tcp_slowtmr+0x664>)
 800ea06:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800ea0a:	492b      	ldr	r1, [pc, #172]	; (800eab8 <tcp_slowtmr+0x668>)
 800ea0c:	482b      	ldr	r0, [pc, #172]	; (800eabc <tcp_slowtmr+0x66c>)
 800ea0e:	f007 fe35 	bl	801667c <iprintf>
    pcb_remove = 0;
 800ea12:	2300      	movs	r3, #0
 800ea14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ea18:	4b29      	ldr	r3, [pc, #164]	; (800eac0 <tcp_slowtmr+0x670>)
 800ea1a:	681a      	ldr	r2, [r3, #0]
 800ea1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea1e:	6a1b      	ldr	r3, [r3, #32]
 800ea20:	1ad3      	subs	r3, r2, r3
 800ea22:	2bf0      	cmp	r3, #240	; 0xf0
 800ea24:	d904      	bls.n	800ea30 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800ea26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea2a:	3301      	adds	r3, #1
 800ea2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ea30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d02f      	beq.n	800ea98 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ea38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ea3a:	f000 fc17 	bl	800f26c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ea3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d010      	beq.n	800ea66 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ea44:	4b1f      	ldr	r3, [pc, #124]	; (800eac4 <tcp_slowtmr+0x674>)
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea4a:	429a      	cmp	r2, r3
 800ea4c:	d106      	bne.n	800ea5c <tcp_slowtmr+0x60c>
 800ea4e:	4b19      	ldr	r3, [pc, #100]	; (800eab4 <tcp_slowtmr+0x664>)
 800ea50:	f240 52af 	movw	r2, #1455	; 0x5af
 800ea54:	491c      	ldr	r1, [pc, #112]	; (800eac8 <tcp_slowtmr+0x678>)
 800ea56:	4819      	ldr	r0, [pc, #100]	; (800eabc <tcp_slowtmr+0x66c>)
 800ea58:	f007 fe10 	bl	801667c <iprintf>
        prev->next = pcb->next;
 800ea5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea5e:	68da      	ldr	r2, [r3, #12]
 800ea60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea62:	60da      	str	r2, [r3, #12]
 800ea64:	e00f      	b.n	800ea86 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ea66:	4b17      	ldr	r3, [pc, #92]	; (800eac4 <tcp_slowtmr+0x674>)
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea6c:	429a      	cmp	r2, r3
 800ea6e:	d006      	beq.n	800ea7e <tcp_slowtmr+0x62e>
 800ea70:	4b10      	ldr	r3, [pc, #64]	; (800eab4 <tcp_slowtmr+0x664>)
 800ea72:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800ea76:	4915      	ldr	r1, [pc, #84]	; (800eacc <tcp_slowtmr+0x67c>)
 800ea78:	4810      	ldr	r0, [pc, #64]	; (800eabc <tcp_slowtmr+0x66c>)
 800ea7a:	f007 fdff 	bl	801667c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ea7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea80:	68db      	ldr	r3, [r3, #12]
 800ea82:	4a10      	ldr	r2, [pc, #64]	; (800eac4 <tcp_slowtmr+0x674>)
 800ea84:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ea86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea88:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800ea8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea8c:	68db      	ldr	r3, [r3, #12]
 800ea8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ea90:	69f8      	ldr	r0, [r7, #28]
 800ea92:	f7fe ff85 	bl	800d9a0 <tcp_free>
 800ea96:	e004      	b.n	800eaa2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800ea98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea9a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ea9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea9e:	68db      	ldr	r3, [r3, #12]
 800eaa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800eaa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d1a9      	bne.n	800e9fc <tcp_slowtmr+0x5ac>
    }
  }
}
 800eaa8:	bf00      	nop
 800eaaa:	bf00      	nop
 800eaac:	3730      	adds	r7, #48	; 0x30
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bdb0      	pop	{r4, r5, r7, pc}
 800eab2:	bf00      	nop
 800eab4:	0801988c 	.word	0x0801988c
 800eab8:	08019d1c 	.word	0x08019d1c
 800eabc:	080198d0 	.word	0x080198d0
 800eac0:	200179fc 	.word	0x200179fc
 800eac4:	20017a08 	.word	0x20017a08
 800eac8:	08019d4c 	.word	0x08019d4c
 800eacc:	08019d74 	.word	0x08019d74

0800ead0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b082      	sub	sp, #8
 800ead4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ead6:	4b2d      	ldr	r3, [pc, #180]	; (800eb8c <tcp_fasttmr+0xbc>)
 800ead8:	781b      	ldrb	r3, [r3, #0]
 800eada:	3301      	adds	r3, #1
 800eadc:	b2da      	uxtb	r2, r3
 800eade:	4b2b      	ldr	r3, [pc, #172]	; (800eb8c <tcp_fasttmr+0xbc>)
 800eae0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800eae2:	4b2b      	ldr	r3, [pc, #172]	; (800eb90 <tcp_fasttmr+0xc0>)
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800eae8:	e048      	b.n	800eb7c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	7f9a      	ldrb	r2, [r3, #30]
 800eaee:	4b27      	ldr	r3, [pc, #156]	; (800eb8c <tcp_fasttmr+0xbc>)
 800eaf0:	781b      	ldrb	r3, [r3, #0]
 800eaf2:	429a      	cmp	r2, r3
 800eaf4:	d03f      	beq.n	800eb76 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800eaf6:	4b25      	ldr	r3, [pc, #148]	; (800eb8c <tcp_fasttmr+0xbc>)
 800eaf8:	781a      	ldrb	r2, [r3, #0]
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	8b5b      	ldrh	r3, [r3, #26]
 800eb02:	f003 0301 	and.w	r3, r3, #1
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d010      	beq.n	800eb2c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	8b5b      	ldrh	r3, [r3, #26]
 800eb0e:	f043 0302 	orr.w	r3, r3, #2
 800eb12:	b29a      	uxth	r2, r3
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800eb18:	6878      	ldr	r0, [r7, #4]
 800eb1a:	f004 f80f 	bl	8012b3c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	8b5b      	ldrh	r3, [r3, #26]
 800eb22:	f023 0303 	bic.w	r3, r3, #3
 800eb26:	b29a      	uxth	r2, r3
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	8b5b      	ldrh	r3, [r3, #26]
 800eb30:	f003 0308 	and.w	r3, r3, #8
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d009      	beq.n	800eb4c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	8b5b      	ldrh	r3, [r3, #26]
 800eb3c:	f023 0308 	bic.w	r3, r3, #8
 800eb40:	b29a      	uxth	r2, r3
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800eb46:	6878      	ldr	r0, [r7, #4]
 800eb48:	f7ff f8be 	bl	800dcc8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	68db      	ldr	r3, [r3, #12]
 800eb50:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d00a      	beq.n	800eb70 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800eb5a:	4b0e      	ldr	r3, [pc, #56]	; (800eb94 <tcp_fasttmr+0xc4>)
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800eb60:	6878      	ldr	r0, [r7, #4]
 800eb62:	f000 f819 	bl	800eb98 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800eb66:	4b0b      	ldr	r3, [pc, #44]	; (800eb94 <tcp_fasttmr+0xc4>)
 800eb68:	781b      	ldrb	r3, [r3, #0]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d000      	beq.n	800eb70 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800eb6e:	e7b8      	b.n	800eae2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	607b      	str	r3, [r7, #4]
 800eb74:	e002      	b.n	800eb7c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	68db      	ldr	r3, [r3, #12]
 800eb7a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d1b3      	bne.n	800eaea <tcp_fasttmr+0x1a>
    }
  }
}
 800eb82:	bf00      	nop
 800eb84:	bf00      	nop
 800eb86:	3708      	adds	r7, #8
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bd80      	pop	{r7, pc}
 800eb8c:	20001586 	.word	0x20001586
 800eb90:	200179f8 	.word	0x200179f8
 800eb94:	200179f4 	.word	0x200179f4

0800eb98 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800eb98:	b590      	push	{r4, r7, lr}
 800eb9a:	b085      	sub	sp, #20
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d109      	bne.n	800ebba <tcp_process_refused_data+0x22>
 800eba6:	4b37      	ldr	r3, [pc, #220]	; (800ec84 <tcp_process_refused_data+0xec>)
 800eba8:	f240 6209 	movw	r2, #1545	; 0x609
 800ebac:	4936      	ldr	r1, [pc, #216]	; (800ec88 <tcp_process_refused_data+0xf0>)
 800ebae:	4837      	ldr	r0, [pc, #220]	; (800ec8c <tcp_process_refused_data+0xf4>)
 800ebb0:	f007 fd64 	bl	801667c <iprintf>
 800ebb4:	f06f 030f 	mvn.w	r3, #15
 800ebb8:	e060      	b.n	800ec7c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ebbe:	7b5b      	ldrb	r3, [r3, #13]
 800ebc0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ebc6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	2200      	movs	r2, #0
 800ebcc:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d00b      	beq.n	800ebf0 <tcp_process_refused_data+0x58>
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	6918      	ldr	r0, [r3, #16]
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	68ba      	ldr	r2, [r7, #8]
 800ebe6:	6879      	ldr	r1, [r7, #4]
 800ebe8:	47a0      	blx	r4
 800ebea:	4603      	mov	r3, r0
 800ebec:	73fb      	strb	r3, [r7, #15]
 800ebee:	e007      	b.n	800ec00 <tcp_process_refused_data+0x68>
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	68ba      	ldr	r2, [r7, #8]
 800ebf4:	6879      	ldr	r1, [r7, #4]
 800ebf6:	2000      	movs	r0, #0
 800ebf8:	f000 f8c2 	bl	800ed80 <tcp_recv_null>
 800ebfc:	4603      	mov	r3, r0
 800ebfe:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ec00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d12a      	bne.n	800ec5e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ec08:	7bbb      	ldrb	r3, [r7, #14]
 800ec0a:	f003 0320 	and.w	r3, r3, #32
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d033      	beq.n	800ec7a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ec16:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ec1a:	d005      	beq.n	800ec28 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ec20:	3301      	adds	r3, #1
 800ec22:	b29a      	uxth	r2, r3
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d00b      	beq.n	800ec4a <tcp_process_refused_data+0xb2>
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	6918      	ldr	r0, [r3, #16]
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	2200      	movs	r2, #0
 800ec40:	6879      	ldr	r1, [r7, #4]
 800ec42:	47a0      	blx	r4
 800ec44:	4603      	mov	r3, r0
 800ec46:	73fb      	strb	r3, [r7, #15]
 800ec48:	e001      	b.n	800ec4e <tcp_process_refused_data+0xb6>
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ec4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec52:	f113 0f0d 	cmn.w	r3, #13
 800ec56:	d110      	bne.n	800ec7a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ec58:	f06f 030c 	mvn.w	r3, #12
 800ec5c:	e00e      	b.n	800ec7c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ec5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec62:	f113 0f0d 	cmn.w	r3, #13
 800ec66:	d102      	bne.n	800ec6e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ec68:	f06f 030c 	mvn.w	r3, #12
 800ec6c:	e006      	b.n	800ec7c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	68ba      	ldr	r2, [r7, #8]
 800ec72:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ec74:	f06f 0304 	mvn.w	r3, #4
 800ec78:	e000      	b.n	800ec7c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ec7a:	2300      	movs	r3, #0
}
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	3714      	adds	r7, #20
 800ec80:	46bd      	mov	sp, r7
 800ec82:	bd90      	pop	{r4, r7, pc}
 800ec84:	0801988c 	.word	0x0801988c
 800ec88:	08019d9c 	.word	0x08019d9c
 800ec8c:	080198d0 	.word	0x080198d0

0800ec90 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b084      	sub	sp, #16
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ec98:	e007      	b.n	800ecaa <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800eca0:	6878      	ldr	r0, [r7, #4]
 800eca2:	f000 f80a 	bl	800ecba <tcp_seg_free>
    seg = next;
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d1f4      	bne.n	800ec9a <tcp_segs_free+0xa>
  }
}
 800ecb0:	bf00      	nop
 800ecb2:	bf00      	nop
 800ecb4:	3710      	adds	r7, #16
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	bd80      	pop	{r7, pc}

0800ecba <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ecba:	b580      	push	{r7, lr}
 800ecbc:	b082      	sub	sp, #8
 800ecbe:	af00      	add	r7, sp, #0
 800ecc0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d00c      	beq.n	800ece2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	685b      	ldr	r3, [r3, #4]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d004      	beq.n	800ecda <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	685b      	ldr	r3, [r3, #4]
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	f7fe fbc3 	bl	800d460 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ecda:	6879      	ldr	r1, [r7, #4]
 800ecdc:	2003      	movs	r0, #3
 800ecde:	f7fd fdad 	bl	800c83c <memp_free>
  }
}
 800ece2:	bf00      	nop
 800ece4:	3708      	adds	r7, #8
 800ece6:	46bd      	mov	sp, r7
 800ece8:	bd80      	pop	{r7, pc}
	...

0800ecec <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b082      	sub	sp, #8
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
 800ecf4:	460b      	mov	r3, r1
 800ecf6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d107      	bne.n	800ed0e <tcp_setprio+0x22>
 800ecfe:	4b07      	ldr	r3, [pc, #28]	; (800ed1c <tcp_setprio+0x30>)
 800ed00:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800ed04:	4906      	ldr	r1, [pc, #24]	; (800ed20 <tcp_setprio+0x34>)
 800ed06:	4807      	ldr	r0, [pc, #28]	; (800ed24 <tcp_setprio+0x38>)
 800ed08:	f007 fcb8 	bl	801667c <iprintf>
 800ed0c:	e002      	b.n	800ed14 <tcp_setprio+0x28>

  pcb->prio = prio;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	78fa      	ldrb	r2, [r7, #3]
 800ed12:	755a      	strb	r2, [r3, #21]
}
 800ed14:	3708      	adds	r7, #8
 800ed16:	46bd      	mov	sp, r7
 800ed18:	bd80      	pop	{r7, pc}
 800ed1a:	bf00      	nop
 800ed1c:	0801988c 	.word	0x0801988c
 800ed20:	08019dc4 	.word	0x08019dc4
 800ed24:	080198d0 	.word	0x080198d0

0800ed28 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b084      	sub	sp, #16
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d106      	bne.n	800ed44 <tcp_seg_copy+0x1c>
 800ed36:	4b0f      	ldr	r3, [pc, #60]	; (800ed74 <tcp_seg_copy+0x4c>)
 800ed38:	f240 6282 	movw	r2, #1666	; 0x682
 800ed3c:	490e      	ldr	r1, [pc, #56]	; (800ed78 <tcp_seg_copy+0x50>)
 800ed3e:	480f      	ldr	r0, [pc, #60]	; (800ed7c <tcp_seg_copy+0x54>)
 800ed40:	f007 fc9c 	bl	801667c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800ed44:	2003      	movs	r0, #3
 800ed46:	f7fd fd2d 	bl	800c7a4 <memp_malloc>
 800ed4a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d101      	bne.n	800ed56 <tcp_seg_copy+0x2e>
    return NULL;
 800ed52:	2300      	movs	r3, #0
 800ed54:	e00a      	b.n	800ed6c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ed56:	2210      	movs	r2, #16
 800ed58:	6879      	ldr	r1, [r7, #4]
 800ed5a:	68f8      	ldr	r0, [r7, #12]
 800ed5c:	f007 fc5e 	bl	801661c <memcpy>
  pbuf_ref(cseg->p);
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	685b      	ldr	r3, [r3, #4]
 800ed64:	4618      	mov	r0, r3
 800ed66:	f7fe fc1b 	bl	800d5a0 <pbuf_ref>
  return cseg;
 800ed6a:	68fb      	ldr	r3, [r7, #12]
}
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	3710      	adds	r7, #16
 800ed70:	46bd      	mov	sp, r7
 800ed72:	bd80      	pop	{r7, pc}
 800ed74:	0801988c 	.word	0x0801988c
 800ed78:	08019de0 	.word	0x08019de0
 800ed7c:	080198d0 	.word	0x080198d0

0800ed80 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b084      	sub	sp, #16
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	60f8      	str	r0, [r7, #12]
 800ed88:	60b9      	str	r1, [r7, #8]
 800ed8a:	607a      	str	r2, [r7, #4]
 800ed8c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ed8e:	68bb      	ldr	r3, [r7, #8]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d109      	bne.n	800eda8 <tcp_recv_null+0x28>
 800ed94:	4b12      	ldr	r3, [pc, #72]	; (800ede0 <tcp_recv_null+0x60>)
 800ed96:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ed9a:	4912      	ldr	r1, [pc, #72]	; (800ede4 <tcp_recv_null+0x64>)
 800ed9c:	4812      	ldr	r0, [pc, #72]	; (800ede8 <tcp_recv_null+0x68>)
 800ed9e:	f007 fc6d 	bl	801667c <iprintf>
 800eda2:	f06f 030f 	mvn.w	r3, #15
 800eda6:	e016      	b.n	800edd6 <tcp_recv_null+0x56>

  if (p != NULL) {
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d009      	beq.n	800edc2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	891b      	ldrh	r3, [r3, #8]
 800edb2:	4619      	mov	r1, r3
 800edb4:	68b8      	ldr	r0, [r7, #8]
 800edb6:	f7ff fab5 	bl	800e324 <tcp_recved>
    pbuf_free(p);
 800edba:	6878      	ldr	r0, [r7, #4]
 800edbc:	f7fe fb50 	bl	800d460 <pbuf_free>
 800edc0:	e008      	b.n	800edd4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800edc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d104      	bne.n	800edd4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800edca:	68b8      	ldr	r0, [r7, #8]
 800edcc:	f7fe ffe6 	bl	800dd9c <tcp_close>
 800edd0:	4603      	mov	r3, r0
 800edd2:	e000      	b.n	800edd6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800edd4:	2300      	movs	r3, #0
}
 800edd6:	4618      	mov	r0, r3
 800edd8:	3710      	adds	r7, #16
 800edda:	46bd      	mov	sp, r7
 800eddc:	bd80      	pop	{r7, pc}
 800edde:	bf00      	nop
 800ede0:	0801988c 	.word	0x0801988c
 800ede4:	08019dfc 	.word	0x08019dfc
 800ede8:	080198d0 	.word	0x080198d0

0800edec <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b086      	sub	sp, #24
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	4603      	mov	r3, r0
 800edf4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800edf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	db01      	blt.n	800ee02 <tcp_kill_prio+0x16>
 800edfe:	79fb      	ldrb	r3, [r7, #7]
 800ee00:	e000      	b.n	800ee04 <tcp_kill_prio+0x18>
 800ee02:	237f      	movs	r3, #127	; 0x7f
 800ee04:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ee06:	7afb      	ldrb	r3, [r7, #11]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d034      	beq.n	800ee76 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ee0c:	7afb      	ldrb	r3, [r7, #11]
 800ee0e:	3b01      	subs	r3, #1
 800ee10:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ee12:	2300      	movs	r3, #0
 800ee14:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ee16:	2300      	movs	r3, #0
 800ee18:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee1a:	4b19      	ldr	r3, [pc, #100]	; (800ee80 <tcp_kill_prio+0x94>)
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	617b      	str	r3, [r7, #20]
 800ee20:	e01f      	b.n	800ee62 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ee22:	697b      	ldr	r3, [r7, #20]
 800ee24:	7d5b      	ldrb	r3, [r3, #21]
 800ee26:	7afa      	ldrb	r2, [r7, #11]
 800ee28:	429a      	cmp	r2, r3
 800ee2a:	d80c      	bhi.n	800ee46 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ee2c:	697b      	ldr	r3, [r7, #20]
 800ee2e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ee30:	7afa      	ldrb	r2, [r7, #11]
 800ee32:	429a      	cmp	r2, r3
 800ee34:	d112      	bne.n	800ee5c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ee36:	4b13      	ldr	r3, [pc, #76]	; (800ee84 <tcp_kill_prio+0x98>)
 800ee38:	681a      	ldr	r2, [r3, #0]
 800ee3a:	697b      	ldr	r3, [r7, #20]
 800ee3c:	6a1b      	ldr	r3, [r3, #32]
 800ee3e:	1ad3      	subs	r3, r2, r3
 800ee40:	68fa      	ldr	r2, [r7, #12]
 800ee42:	429a      	cmp	r2, r3
 800ee44:	d80a      	bhi.n	800ee5c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ee46:	4b0f      	ldr	r3, [pc, #60]	; (800ee84 <tcp_kill_prio+0x98>)
 800ee48:	681a      	ldr	r2, [r3, #0]
 800ee4a:	697b      	ldr	r3, [r7, #20]
 800ee4c:	6a1b      	ldr	r3, [r3, #32]
 800ee4e:	1ad3      	subs	r3, r2, r3
 800ee50:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ee52:	697b      	ldr	r3, [r7, #20]
 800ee54:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ee56:	697b      	ldr	r3, [r7, #20]
 800ee58:	7d5b      	ldrb	r3, [r3, #21]
 800ee5a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee5c:	697b      	ldr	r3, [r7, #20]
 800ee5e:	68db      	ldr	r3, [r3, #12]
 800ee60:	617b      	str	r3, [r7, #20]
 800ee62:	697b      	ldr	r3, [r7, #20]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d1dc      	bne.n	800ee22 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ee68:	693b      	ldr	r3, [r7, #16]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d004      	beq.n	800ee78 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ee6e:	6938      	ldr	r0, [r7, #16]
 800ee70:	f7ff f87e 	bl	800df70 <tcp_abort>
 800ee74:	e000      	b.n	800ee78 <tcp_kill_prio+0x8c>
    return;
 800ee76:	bf00      	nop
  }
}
 800ee78:	3718      	adds	r7, #24
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	bd80      	pop	{r7, pc}
 800ee7e:	bf00      	nop
 800ee80:	200179f8 	.word	0x200179f8
 800ee84:	200179fc 	.word	0x200179fc

0800ee88 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b086      	sub	sp, #24
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	4603      	mov	r3, r0
 800ee90:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ee92:	79fb      	ldrb	r3, [r7, #7]
 800ee94:	2b08      	cmp	r3, #8
 800ee96:	d009      	beq.n	800eeac <tcp_kill_state+0x24>
 800ee98:	79fb      	ldrb	r3, [r7, #7]
 800ee9a:	2b09      	cmp	r3, #9
 800ee9c:	d006      	beq.n	800eeac <tcp_kill_state+0x24>
 800ee9e:	4b1a      	ldr	r3, [pc, #104]	; (800ef08 <tcp_kill_state+0x80>)
 800eea0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800eea4:	4919      	ldr	r1, [pc, #100]	; (800ef0c <tcp_kill_state+0x84>)
 800eea6:	481a      	ldr	r0, [pc, #104]	; (800ef10 <tcp_kill_state+0x88>)
 800eea8:	f007 fbe8 	bl	801667c <iprintf>

  inactivity = 0;
 800eeac:	2300      	movs	r3, #0
 800eeae:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eeb4:	4b17      	ldr	r3, [pc, #92]	; (800ef14 <tcp_kill_state+0x8c>)
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	617b      	str	r3, [r7, #20]
 800eeba:	e017      	b.n	800eeec <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800eebc:	697b      	ldr	r3, [r7, #20]
 800eebe:	7d1b      	ldrb	r3, [r3, #20]
 800eec0:	79fa      	ldrb	r2, [r7, #7]
 800eec2:	429a      	cmp	r2, r3
 800eec4:	d10f      	bne.n	800eee6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800eec6:	4b14      	ldr	r3, [pc, #80]	; (800ef18 <tcp_kill_state+0x90>)
 800eec8:	681a      	ldr	r2, [r3, #0]
 800eeca:	697b      	ldr	r3, [r7, #20]
 800eecc:	6a1b      	ldr	r3, [r3, #32]
 800eece:	1ad3      	subs	r3, r2, r3
 800eed0:	68fa      	ldr	r2, [r7, #12]
 800eed2:	429a      	cmp	r2, r3
 800eed4:	d807      	bhi.n	800eee6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800eed6:	4b10      	ldr	r3, [pc, #64]	; (800ef18 <tcp_kill_state+0x90>)
 800eed8:	681a      	ldr	r2, [r3, #0]
 800eeda:	697b      	ldr	r3, [r7, #20]
 800eedc:	6a1b      	ldr	r3, [r3, #32]
 800eede:	1ad3      	subs	r3, r2, r3
 800eee0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800eee2:	697b      	ldr	r3, [r7, #20]
 800eee4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eee6:	697b      	ldr	r3, [r7, #20]
 800eee8:	68db      	ldr	r3, [r3, #12]
 800eeea:	617b      	str	r3, [r7, #20]
 800eeec:	697b      	ldr	r3, [r7, #20]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d1e4      	bne.n	800eebc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800eef2:	693b      	ldr	r3, [r7, #16]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d003      	beq.n	800ef00 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800eef8:	2100      	movs	r1, #0
 800eefa:	6938      	ldr	r0, [r7, #16]
 800eefc:	f7fe ff7a 	bl	800ddf4 <tcp_abandon>
  }
}
 800ef00:	bf00      	nop
 800ef02:	3718      	adds	r7, #24
 800ef04:	46bd      	mov	sp, r7
 800ef06:	bd80      	pop	{r7, pc}
 800ef08:	0801988c 	.word	0x0801988c
 800ef0c:	08019e18 	.word	0x08019e18
 800ef10:	080198d0 	.word	0x080198d0
 800ef14:	200179f8 	.word	0x200179f8
 800ef18:	200179fc 	.word	0x200179fc

0800ef1c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b084      	sub	sp, #16
 800ef20:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ef22:	2300      	movs	r3, #0
 800ef24:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800ef26:	2300      	movs	r3, #0
 800ef28:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef2a:	4b12      	ldr	r3, [pc, #72]	; (800ef74 <tcp_kill_timewait+0x58>)
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	60fb      	str	r3, [r7, #12]
 800ef30:	e012      	b.n	800ef58 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ef32:	4b11      	ldr	r3, [pc, #68]	; (800ef78 <tcp_kill_timewait+0x5c>)
 800ef34:	681a      	ldr	r2, [r3, #0]
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	6a1b      	ldr	r3, [r3, #32]
 800ef3a:	1ad3      	subs	r3, r2, r3
 800ef3c:	687a      	ldr	r2, [r7, #4]
 800ef3e:	429a      	cmp	r2, r3
 800ef40:	d807      	bhi.n	800ef52 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ef42:	4b0d      	ldr	r3, [pc, #52]	; (800ef78 <tcp_kill_timewait+0x5c>)
 800ef44:	681a      	ldr	r2, [r3, #0]
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	6a1b      	ldr	r3, [r3, #32]
 800ef4a:	1ad3      	subs	r3, r2, r3
 800ef4c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	68db      	ldr	r3, [r3, #12]
 800ef56:	60fb      	str	r3, [r7, #12]
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d1e9      	bne.n	800ef32 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ef5e:	68bb      	ldr	r3, [r7, #8]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d002      	beq.n	800ef6a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ef64:	68b8      	ldr	r0, [r7, #8]
 800ef66:	f7ff f803 	bl	800df70 <tcp_abort>
  }
}
 800ef6a:	bf00      	nop
 800ef6c:	3710      	adds	r7, #16
 800ef6e:	46bd      	mov	sp, r7
 800ef70:	bd80      	pop	{r7, pc}
 800ef72:	bf00      	nop
 800ef74:	20017a08 	.word	0x20017a08
 800ef78:	200179fc 	.word	0x200179fc

0800ef7c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b082      	sub	sp, #8
 800ef80:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800ef82:	4b10      	ldr	r3, [pc, #64]	; (800efc4 <tcp_handle_closepend+0x48>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ef88:	e014      	b.n	800efb4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	68db      	ldr	r3, [r3, #12]
 800ef8e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	8b5b      	ldrh	r3, [r3, #26]
 800ef94:	f003 0308 	and.w	r3, r3, #8
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d009      	beq.n	800efb0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	8b5b      	ldrh	r3, [r3, #26]
 800efa0:	f023 0308 	bic.w	r3, r3, #8
 800efa4:	b29a      	uxth	r2, r3
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800efaa:	6878      	ldr	r0, [r7, #4]
 800efac:	f7fe fe8c 	bl	800dcc8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800efb0:	683b      	ldr	r3, [r7, #0]
 800efb2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d1e7      	bne.n	800ef8a <tcp_handle_closepend+0xe>
  }
}
 800efba:	bf00      	nop
 800efbc:	bf00      	nop
 800efbe:	3708      	adds	r7, #8
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}
 800efc4:	200179f8 	.word	0x200179f8

0800efc8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b084      	sub	sp, #16
 800efcc:	af00      	add	r7, sp, #0
 800efce:	4603      	mov	r3, r0
 800efd0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800efd2:	2001      	movs	r0, #1
 800efd4:	f7fd fbe6 	bl	800c7a4 <memp_malloc>
 800efd8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d126      	bne.n	800f02e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800efe0:	f7ff ffcc 	bl	800ef7c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800efe4:	f7ff ff9a 	bl	800ef1c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800efe8:	2001      	movs	r0, #1
 800efea:	f7fd fbdb 	bl	800c7a4 <memp_malloc>
 800efee:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d11b      	bne.n	800f02e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800eff6:	2009      	movs	r0, #9
 800eff8:	f7ff ff46 	bl	800ee88 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800effc:	2001      	movs	r0, #1
 800effe:	f7fd fbd1 	bl	800c7a4 <memp_malloc>
 800f002:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d111      	bne.n	800f02e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f00a:	2008      	movs	r0, #8
 800f00c:	f7ff ff3c 	bl	800ee88 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f010:	2001      	movs	r0, #1
 800f012:	f7fd fbc7 	bl	800c7a4 <memp_malloc>
 800f016:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d107      	bne.n	800f02e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f01e:	79fb      	ldrb	r3, [r7, #7]
 800f020:	4618      	mov	r0, r3
 800f022:	f7ff fee3 	bl	800edec <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f026:	2001      	movs	r0, #1
 800f028:	f7fd fbbc 	bl	800c7a4 <memp_malloc>
 800f02c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d03f      	beq.n	800f0b4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f034:	229c      	movs	r2, #156	; 0x9c
 800f036:	2100      	movs	r1, #0
 800f038:	68f8      	ldr	r0, [r7, #12]
 800f03a:	f007 fb17 	bl	801666c <memset>
    pcb->prio = prio;
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	79fa      	ldrb	r2, [r7, #7]
 800f042:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f04a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f054:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	22ff      	movs	r2, #255	; 0xff
 800f062:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f06a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	2206      	movs	r2, #6
 800f070:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	2206      	movs	r2, #6
 800f078:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f080:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	2201      	movs	r2, #1
 800f086:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800f08a:	4b0d      	ldr	r3, [pc, #52]	; (800f0c0 <tcp_alloc+0xf8>)
 800f08c:	681a      	ldr	r2, [r3, #0]
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f092:	4b0c      	ldr	r3, [pc, #48]	; (800f0c4 <tcp_alloc+0xfc>)
 800f094:	781a      	ldrb	r2, [r3, #0]
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f0a0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	4a08      	ldr	r2, [pc, #32]	; (800f0c8 <tcp_alloc+0x100>)
 800f0a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	4a07      	ldr	r2, [pc, #28]	; (800f0cc <tcp_alloc+0x104>)
 800f0b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f0b4:	68fb      	ldr	r3, [r7, #12]
}
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	3710      	adds	r7, #16
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	bd80      	pop	{r7, pc}
 800f0be:	bf00      	nop
 800f0c0:	200179fc 	.word	0x200179fc
 800f0c4:	20001586 	.word	0x20001586
 800f0c8:	0800ed81 	.word	0x0800ed81
 800f0cc:	006ddd00 	.word	0x006ddd00

0800f0d0 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b084      	sub	sp, #16
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	4603      	mov	r3, r0
 800f0d8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800f0da:	2040      	movs	r0, #64	; 0x40
 800f0dc:	f7ff ff74 	bl	800efc8 <tcp_alloc>
 800f0e0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800f0e2:	68fb      	ldr	r3, [r7, #12]
}
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	3710      	adds	r7, #16
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	bd80      	pop	{r7, pc}

0800f0ec <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800f0ec:	b480      	push	{r7}
 800f0ee:	b083      	sub	sp, #12
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
 800f0f4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d002      	beq.n	800f102 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	683a      	ldr	r2, [r7, #0]
 800f100:	611a      	str	r2, [r3, #16]
  }
}
 800f102:	bf00      	nop
 800f104:	370c      	adds	r7, #12
 800f106:	46bd      	mov	sp, r7
 800f108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10c:	4770      	bx	lr
	...

0800f110 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800f110:	b580      	push	{r7, lr}
 800f112:	b082      	sub	sp, #8
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
 800f118:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d00e      	beq.n	800f13e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	7d1b      	ldrb	r3, [r3, #20]
 800f124:	2b01      	cmp	r3, #1
 800f126:	d106      	bne.n	800f136 <tcp_recv+0x26>
 800f128:	4b07      	ldr	r3, [pc, #28]	; (800f148 <tcp_recv+0x38>)
 800f12a:	f240 72df 	movw	r2, #2015	; 0x7df
 800f12e:	4907      	ldr	r1, [pc, #28]	; (800f14c <tcp_recv+0x3c>)
 800f130:	4807      	ldr	r0, [pc, #28]	; (800f150 <tcp_recv+0x40>)
 800f132:	f007 faa3 	bl	801667c <iprintf>
    pcb->recv = recv;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	683a      	ldr	r2, [r7, #0]
 800f13a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800f13e:	bf00      	nop
 800f140:	3708      	adds	r7, #8
 800f142:	46bd      	mov	sp, r7
 800f144:	bd80      	pop	{r7, pc}
 800f146:	bf00      	nop
 800f148:	0801988c 	.word	0x0801988c
 800f14c:	08019e28 	.word	0x08019e28
 800f150:	080198d0 	.word	0x080198d0

0800f154 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b082      	sub	sp, #8
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
 800f15c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d00e      	beq.n	800f182 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	7d1b      	ldrb	r3, [r3, #20]
 800f168:	2b01      	cmp	r3, #1
 800f16a:	d106      	bne.n	800f17a <tcp_sent+0x26>
 800f16c:	4b07      	ldr	r3, [pc, #28]	; (800f18c <tcp_sent+0x38>)
 800f16e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800f172:	4907      	ldr	r1, [pc, #28]	; (800f190 <tcp_sent+0x3c>)
 800f174:	4807      	ldr	r0, [pc, #28]	; (800f194 <tcp_sent+0x40>)
 800f176:	f007 fa81 	bl	801667c <iprintf>
    pcb->sent = sent;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	683a      	ldr	r2, [r7, #0]
 800f17e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800f182:	bf00      	nop
 800f184:	3708      	adds	r7, #8
 800f186:	46bd      	mov	sp, r7
 800f188:	bd80      	pop	{r7, pc}
 800f18a:	bf00      	nop
 800f18c:	0801988c 	.word	0x0801988c
 800f190:	08019e50 	.word	0x08019e50
 800f194:	080198d0 	.word	0x080198d0

0800f198 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b082      	sub	sp, #8
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
 800f1a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d00e      	beq.n	800f1c6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	7d1b      	ldrb	r3, [r3, #20]
 800f1ac:	2b01      	cmp	r3, #1
 800f1ae:	d106      	bne.n	800f1be <tcp_err+0x26>
 800f1b0:	4b07      	ldr	r3, [pc, #28]	; (800f1d0 <tcp_err+0x38>)
 800f1b2:	f640 020d 	movw	r2, #2061	; 0x80d
 800f1b6:	4907      	ldr	r1, [pc, #28]	; (800f1d4 <tcp_err+0x3c>)
 800f1b8:	4807      	ldr	r0, [pc, #28]	; (800f1d8 <tcp_err+0x40>)
 800f1ba:	f007 fa5f 	bl	801667c <iprintf>
    pcb->errf = err;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	683a      	ldr	r2, [r7, #0]
 800f1c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800f1c6:	bf00      	nop
 800f1c8:	3708      	adds	r7, #8
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	bd80      	pop	{r7, pc}
 800f1ce:	bf00      	nop
 800f1d0:	0801988c 	.word	0x0801988c
 800f1d4:	08019e78 	.word	0x08019e78
 800f1d8:	080198d0 	.word	0x080198d0

0800f1dc <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800f1dc:	b480      	push	{r7}
 800f1de:	b085      	sub	sp, #20
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
 800f1e4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d008      	beq.n	800f1fe <tcp_accept+0x22>
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	7d1b      	ldrb	r3, [r3, #20]
 800f1f0:	2b01      	cmp	r3, #1
 800f1f2:	d104      	bne.n	800f1fe <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	683a      	ldr	r2, [r7, #0]
 800f1fc:	619a      	str	r2, [r3, #24]
  }
}
 800f1fe:	bf00      	nop
 800f200:	3714      	adds	r7, #20
 800f202:	46bd      	mov	sp, r7
 800f204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f208:	4770      	bx	lr
	...

0800f20c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b084      	sub	sp, #16
 800f210:	af00      	add	r7, sp, #0
 800f212:	60f8      	str	r0, [r7, #12]
 800f214:	60b9      	str	r1, [r7, #8]
 800f216:	4613      	mov	r3, r2
 800f218:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d107      	bne.n	800f230 <tcp_poll+0x24>
 800f220:	4b0e      	ldr	r3, [pc, #56]	; (800f25c <tcp_poll+0x50>)
 800f222:	f640 023d 	movw	r2, #2109	; 0x83d
 800f226:	490e      	ldr	r1, [pc, #56]	; (800f260 <tcp_poll+0x54>)
 800f228:	480e      	ldr	r0, [pc, #56]	; (800f264 <tcp_poll+0x58>)
 800f22a:	f007 fa27 	bl	801667c <iprintf>
 800f22e:	e011      	b.n	800f254 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	7d1b      	ldrb	r3, [r3, #20]
 800f234:	2b01      	cmp	r3, #1
 800f236:	d106      	bne.n	800f246 <tcp_poll+0x3a>
 800f238:	4b08      	ldr	r3, [pc, #32]	; (800f25c <tcp_poll+0x50>)
 800f23a:	f640 023e 	movw	r2, #2110	; 0x83e
 800f23e:	490a      	ldr	r1, [pc, #40]	; (800f268 <tcp_poll+0x5c>)
 800f240:	4808      	ldr	r0, [pc, #32]	; (800f264 <tcp_poll+0x58>)
 800f242:	f007 fa1b 	bl	801667c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	68ba      	ldr	r2, [r7, #8]
 800f24a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	79fa      	ldrb	r2, [r7, #7]
 800f252:	775a      	strb	r2, [r3, #29]
}
 800f254:	3710      	adds	r7, #16
 800f256:	46bd      	mov	sp, r7
 800f258:	bd80      	pop	{r7, pc}
 800f25a:	bf00      	nop
 800f25c:	0801988c 	.word	0x0801988c
 800f260:	08019ea0 	.word	0x08019ea0
 800f264:	080198d0 	.word	0x080198d0
 800f268:	08019eb8 	.word	0x08019eb8

0800f26c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b082      	sub	sp, #8
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d107      	bne.n	800f28a <tcp_pcb_purge+0x1e>
 800f27a:	4b21      	ldr	r3, [pc, #132]	; (800f300 <tcp_pcb_purge+0x94>)
 800f27c:	f640 0251 	movw	r2, #2129	; 0x851
 800f280:	4920      	ldr	r1, [pc, #128]	; (800f304 <tcp_pcb_purge+0x98>)
 800f282:	4821      	ldr	r0, [pc, #132]	; (800f308 <tcp_pcb_purge+0x9c>)
 800f284:	f007 f9fa 	bl	801667c <iprintf>
 800f288:	e037      	b.n	800f2fa <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	7d1b      	ldrb	r3, [r3, #20]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d033      	beq.n	800f2fa <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f296:	2b0a      	cmp	r3, #10
 800f298:	d02f      	beq.n	800f2fa <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f29e:	2b01      	cmp	r3, #1
 800f2a0:	d02b      	beq.n	800f2fa <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d007      	beq.n	800f2ba <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	f7fe f8d6 	bl	800d460 <pbuf_free>
      pcb->refused_data = NULL;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d002      	beq.n	800f2c8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f2c2:	6878      	ldr	r0, [r7, #4]
 800f2c4:	f000 f986 	bl	800f5d4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f2ce:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	f7ff fcdb 	bl	800ec90 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f2de:	4618      	mov	r0, r3
 800f2e0:	f7ff fcd6 	bl	800ec90 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	66da      	str	r2, [r3, #108]	; 0x6c
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	2200      	movs	r2, #0
 800f2f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f2fa:	3708      	adds	r7, #8
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	bd80      	pop	{r7, pc}
 800f300:	0801988c 	.word	0x0801988c
 800f304:	08019ed8 	.word	0x08019ed8
 800f308:	080198d0 	.word	0x080198d0

0800f30c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b084      	sub	sp, #16
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
 800f314:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f316:	683b      	ldr	r3, [r7, #0]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d106      	bne.n	800f32a <tcp_pcb_remove+0x1e>
 800f31c:	4b3e      	ldr	r3, [pc, #248]	; (800f418 <tcp_pcb_remove+0x10c>)
 800f31e:	f640 0283 	movw	r2, #2179	; 0x883
 800f322:	493e      	ldr	r1, [pc, #248]	; (800f41c <tcp_pcb_remove+0x110>)
 800f324:	483e      	ldr	r0, [pc, #248]	; (800f420 <tcp_pcb_remove+0x114>)
 800f326:	f007 f9a9 	bl	801667c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d106      	bne.n	800f33e <tcp_pcb_remove+0x32>
 800f330:	4b39      	ldr	r3, [pc, #228]	; (800f418 <tcp_pcb_remove+0x10c>)
 800f332:	f640 0284 	movw	r2, #2180	; 0x884
 800f336:	493b      	ldr	r1, [pc, #236]	; (800f424 <tcp_pcb_remove+0x118>)
 800f338:	4839      	ldr	r0, [pc, #228]	; (800f420 <tcp_pcb_remove+0x114>)
 800f33a:	f007 f99f 	bl	801667c <iprintf>

  TCP_RMV(pcblist, pcb);
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	683a      	ldr	r2, [r7, #0]
 800f344:	429a      	cmp	r2, r3
 800f346:	d105      	bne.n	800f354 <tcp_pcb_remove+0x48>
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	68da      	ldr	r2, [r3, #12]
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	601a      	str	r2, [r3, #0]
 800f352:	e013      	b.n	800f37c <tcp_pcb_remove+0x70>
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	60fb      	str	r3, [r7, #12]
 800f35a:	e00c      	b.n	800f376 <tcp_pcb_remove+0x6a>
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	68db      	ldr	r3, [r3, #12]
 800f360:	683a      	ldr	r2, [r7, #0]
 800f362:	429a      	cmp	r2, r3
 800f364:	d104      	bne.n	800f370 <tcp_pcb_remove+0x64>
 800f366:	683b      	ldr	r3, [r7, #0]
 800f368:	68da      	ldr	r2, [r3, #12]
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	60da      	str	r2, [r3, #12]
 800f36e:	e005      	b.n	800f37c <tcp_pcb_remove+0x70>
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	68db      	ldr	r3, [r3, #12]
 800f374:	60fb      	str	r3, [r7, #12]
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d1ef      	bne.n	800f35c <tcp_pcb_remove+0x50>
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	2200      	movs	r2, #0
 800f380:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f382:	6838      	ldr	r0, [r7, #0]
 800f384:	f7ff ff72 	bl	800f26c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f388:	683b      	ldr	r3, [r7, #0]
 800f38a:	7d1b      	ldrb	r3, [r3, #20]
 800f38c:	2b0a      	cmp	r3, #10
 800f38e:	d013      	beq.n	800f3b8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f390:	683b      	ldr	r3, [r7, #0]
 800f392:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f394:	2b01      	cmp	r3, #1
 800f396:	d00f      	beq.n	800f3b8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f398:	683b      	ldr	r3, [r7, #0]
 800f39a:	8b5b      	ldrh	r3, [r3, #26]
 800f39c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d009      	beq.n	800f3b8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	8b5b      	ldrh	r3, [r3, #26]
 800f3a8:	f043 0302 	orr.w	r3, r3, #2
 800f3ac:	b29a      	uxth	r2, r3
 800f3ae:	683b      	ldr	r3, [r7, #0]
 800f3b0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f3b2:	6838      	ldr	r0, [r7, #0]
 800f3b4:	f003 fbc2 	bl	8012b3c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f3b8:	683b      	ldr	r3, [r7, #0]
 800f3ba:	7d1b      	ldrb	r3, [r3, #20]
 800f3bc:	2b01      	cmp	r3, #1
 800f3be:	d020      	beq.n	800f402 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f3c0:	683b      	ldr	r3, [r7, #0]
 800f3c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d006      	beq.n	800f3d6 <tcp_pcb_remove+0xca>
 800f3c8:	4b13      	ldr	r3, [pc, #76]	; (800f418 <tcp_pcb_remove+0x10c>)
 800f3ca:	f640 0293 	movw	r2, #2195	; 0x893
 800f3ce:	4916      	ldr	r1, [pc, #88]	; (800f428 <tcp_pcb_remove+0x11c>)
 800f3d0:	4813      	ldr	r0, [pc, #76]	; (800f420 <tcp_pcb_remove+0x114>)
 800f3d2:	f007 f953 	bl	801667c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f3d6:	683b      	ldr	r3, [r7, #0]
 800f3d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d006      	beq.n	800f3ec <tcp_pcb_remove+0xe0>
 800f3de:	4b0e      	ldr	r3, [pc, #56]	; (800f418 <tcp_pcb_remove+0x10c>)
 800f3e0:	f640 0294 	movw	r2, #2196	; 0x894
 800f3e4:	4911      	ldr	r1, [pc, #68]	; (800f42c <tcp_pcb_remove+0x120>)
 800f3e6:	480e      	ldr	r0, [pc, #56]	; (800f420 <tcp_pcb_remove+0x114>)
 800f3e8:	f007 f948 	bl	801667c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f3ec:	683b      	ldr	r3, [r7, #0]
 800f3ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d006      	beq.n	800f402 <tcp_pcb_remove+0xf6>
 800f3f4:	4b08      	ldr	r3, [pc, #32]	; (800f418 <tcp_pcb_remove+0x10c>)
 800f3f6:	f640 0296 	movw	r2, #2198	; 0x896
 800f3fa:	490d      	ldr	r1, [pc, #52]	; (800f430 <tcp_pcb_remove+0x124>)
 800f3fc:	4808      	ldr	r0, [pc, #32]	; (800f420 <tcp_pcb_remove+0x114>)
 800f3fe:	f007 f93d 	bl	801667c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f402:	683b      	ldr	r3, [r7, #0]
 800f404:	2200      	movs	r2, #0
 800f406:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f408:	683b      	ldr	r3, [r7, #0]
 800f40a:	2200      	movs	r2, #0
 800f40c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f40e:	bf00      	nop
 800f410:	3710      	adds	r7, #16
 800f412:	46bd      	mov	sp, r7
 800f414:	bd80      	pop	{r7, pc}
 800f416:	bf00      	nop
 800f418:	0801988c 	.word	0x0801988c
 800f41c:	08019ef4 	.word	0x08019ef4
 800f420:	080198d0 	.word	0x080198d0
 800f424:	08019f10 	.word	0x08019f10
 800f428:	08019f30 	.word	0x08019f30
 800f42c:	08019f48 	.word	0x08019f48
 800f430:	08019f64 	.word	0x08019f64

0800f434 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f434:	b580      	push	{r7, lr}
 800f436:	b082      	sub	sp, #8
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d106      	bne.n	800f450 <tcp_next_iss+0x1c>
 800f442:	4b0a      	ldr	r3, [pc, #40]	; (800f46c <tcp_next_iss+0x38>)
 800f444:	f640 02af 	movw	r2, #2223	; 0x8af
 800f448:	4909      	ldr	r1, [pc, #36]	; (800f470 <tcp_next_iss+0x3c>)
 800f44a:	480a      	ldr	r0, [pc, #40]	; (800f474 <tcp_next_iss+0x40>)
 800f44c:	f007 f916 	bl	801667c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f450:	4b09      	ldr	r3, [pc, #36]	; (800f478 <tcp_next_iss+0x44>)
 800f452:	681a      	ldr	r2, [r3, #0]
 800f454:	4b09      	ldr	r3, [pc, #36]	; (800f47c <tcp_next_iss+0x48>)
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	4413      	add	r3, r2
 800f45a:	4a07      	ldr	r2, [pc, #28]	; (800f478 <tcp_next_iss+0x44>)
 800f45c:	6013      	str	r3, [r2, #0]
  return iss;
 800f45e:	4b06      	ldr	r3, [pc, #24]	; (800f478 <tcp_next_iss+0x44>)
 800f460:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f462:	4618      	mov	r0, r3
 800f464:	3708      	adds	r7, #8
 800f466:	46bd      	mov	sp, r7
 800f468:	bd80      	pop	{r7, pc}
 800f46a:	bf00      	nop
 800f46c:	0801988c 	.word	0x0801988c
 800f470:	08019f7c 	.word	0x08019f7c
 800f474:	080198d0 	.word	0x080198d0
 800f478:	20000024 	.word	0x20000024
 800f47c:	200179fc 	.word	0x200179fc

0800f480 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b086      	sub	sp, #24
 800f484:	af00      	add	r7, sp, #0
 800f486:	4603      	mov	r3, r0
 800f488:	60b9      	str	r1, [r7, #8]
 800f48a:	607a      	str	r2, [r7, #4]
 800f48c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d106      	bne.n	800f4a2 <tcp_eff_send_mss_netif+0x22>
 800f494:	4b14      	ldr	r3, [pc, #80]	; (800f4e8 <tcp_eff_send_mss_netif+0x68>)
 800f496:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800f49a:	4914      	ldr	r1, [pc, #80]	; (800f4ec <tcp_eff_send_mss_netif+0x6c>)
 800f49c:	4814      	ldr	r0, [pc, #80]	; (800f4f0 <tcp_eff_send_mss_netif+0x70>)
 800f49e:	f007 f8ed 	bl	801667c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f4a2:	68bb      	ldr	r3, [r7, #8]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d101      	bne.n	800f4ac <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f4a8:	89fb      	ldrh	r3, [r7, #14]
 800f4aa:	e019      	b.n	800f4e0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f4ac:	68bb      	ldr	r3, [r7, #8]
 800f4ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f4b0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f4b2:	8afb      	ldrh	r3, [r7, #22]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d012      	beq.n	800f4de <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f4b8:	2328      	movs	r3, #40	; 0x28
 800f4ba:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f4bc:	8afa      	ldrh	r2, [r7, #22]
 800f4be:	8abb      	ldrh	r3, [r7, #20]
 800f4c0:	429a      	cmp	r2, r3
 800f4c2:	d904      	bls.n	800f4ce <tcp_eff_send_mss_netif+0x4e>
 800f4c4:	8afa      	ldrh	r2, [r7, #22]
 800f4c6:	8abb      	ldrh	r3, [r7, #20]
 800f4c8:	1ad3      	subs	r3, r2, r3
 800f4ca:	b29b      	uxth	r3, r3
 800f4cc:	e000      	b.n	800f4d0 <tcp_eff_send_mss_netif+0x50>
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f4d2:	8a7a      	ldrh	r2, [r7, #18]
 800f4d4:	89fb      	ldrh	r3, [r7, #14]
 800f4d6:	4293      	cmp	r3, r2
 800f4d8:	bf28      	it	cs
 800f4da:	4613      	movcs	r3, r2
 800f4dc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f4de:	89fb      	ldrh	r3, [r7, #14]
}
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	3718      	adds	r7, #24
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	bd80      	pop	{r7, pc}
 800f4e8:	0801988c 	.word	0x0801988c
 800f4ec:	08019f98 	.word	0x08019f98
 800f4f0:	080198d0 	.word	0x080198d0

0800f4f4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b084      	sub	sp, #16
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]
 800f4fc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f4fe:	683b      	ldr	r3, [r7, #0]
 800f500:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d119      	bne.n	800f53c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f508:	4b10      	ldr	r3, [pc, #64]	; (800f54c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f50a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800f50e:	4910      	ldr	r1, [pc, #64]	; (800f550 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f510:	4810      	ldr	r0, [pc, #64]	; (800f554 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f512:	f007 f8b3 	bl	801667c <iprintf>

  while (pcb != NULL) {
 800f516:	e011      	b.n	800f53c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	681a      	ldr	r2, [r3, #0]
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	429a      	cmp	r2, r3
 800f522:	d108      	bne.n	800f536 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	68db      	ldr	r3, [r3, #12]
 800f528:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f52a:	68f8      	ldr	r0, [r7, #12]
 800f52c:	f7fe fd20 	bl	800df70 <tcp_abort>
      pcb = next;
 800f530:	68bb      	ldr	r3, [r7, #8]
 800f532:	60fb      	str	r3, [r7, #12]
 800f534:	e002      	b.n	800f53c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	68db      	ldr	r3, [r3, #12]
 800f53a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d1ea      	bne.n	800f518 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f542:	bf00      	nop
 800f544:	bf00      	nop
 800f546:	3710      	adds	r7, #16
 800f548:	46bd      	mov	sp, r7
 800f54a:	bd80      	pop	{r7, pc}
 800f54c:	0801988c 	.word	0x0801988c
 800f550:	08019fc0 	.word	0x08019fc0
 800f554:	080198d0 	.word	0x080198d0

0800f558 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b084      	sub	sp, #16
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	6078      	str	r0, [r7, #4]
 800f560:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d02a      	beq.n	800f5be <tcp_netif_ip_addr_changed+0x66>
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d026      	beq.n	800f5be <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f570:	4b15      	ldr	r3, [pc, #84]	; (800f5c8 <tcp_netif_ip_addr_changed+0x70>)
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	4619      	mov	r1, r3
 800f576:	6878      	ldr	r0, [r7, #4]
 800f578:	f7ff ffbc 	bl	800f4f4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f57c:	4b13      	ldr	r3, [pc, #76]	; (800f5cc <tcp_netif_ip_addr_changed+0x74>)
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	4619      	mov	r1, r3
 800f582:	6878      	ldr	r0, [r7, #4]
 800f584:	f7ff ffb6 	bl	800f4f4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f588:	683b      	ldr	r3, [r7, #0]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d017      	beq.n	800f5be <tcp_netif_ip_addr_changed+0x66>
 800f58e:	683b      	ldr	r3, [r7, #0]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d013      	beq.n	800f5be <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f596:	4b0e      	ldr	r3, [pc, #56]	; (800f5d0 <tcp_netif_ip_addr_changed+0x78>)
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	60fb      	str	r3, [r7, #12]
 800f59c:	e00c      	b.n	800f5b8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	681a      	ldr	r2, [r3, #0]
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	d103      	bne.n	800f5b2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f5aa:	683b      	ldr	r3, [r7, #0]
 800f5ac:	681a      	ldr	r2, [r3, #0]
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	68db      	ldr	r3, [r3, #12]
 800f5b6:	60fb      	str	r3, [r7, #12]
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d1ef      	bne.n	800f59e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f5be:	bf00      	nop
 800f5c0:	3710      	adds	r7, #16
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd80      	pop	{r7, pc}
 800f5c6:	bf00      	nop
 800f5c8:	200179f8 	.word	0x200179f8
 800f5cc:	20017a04 	.word	0x20017a04
 800f5d0:	20017a00 	.word	0x20017a00

0800f5d4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b082      	sub	sp, #8
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d007      	beq.n	800f5f4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	f7ff fb51 	bl	800ec90 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	2200      	movs	r2, #0
 800f5f2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f5f4:	bf00      	nop
 800f5f6:	3708      	adds	r7, #8
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	bd80      	pop	{r7, pc}

0800f5fc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f5fc:	b590      	push	{r4, r7, lr}
 800f5fe:	b08d      	sub	sp, #52	; 0x34
 800f600:	af04      	add	r7, sp, #16
 800f602:	6078      	str	r0, [r7, #4]
 800f604:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d105      	bne.n	800f618 <tcp_input+0x1c>
 800f60c:	4b9b      	ldr	r3, [pc, #620]	; (800f87c <tcp_input+0x280>)
 800f60e:	2283      	movs	r2, #131	; 0x83
 800f610:	499b      	ldr	r1, [pc, #620]	; (800f880 <tcp_input+0x284>)
 800f612:	489c      	ldr	r0, [pc, #624]	; (800f884 <tcp_input+0x288>)
 800f614:	f007 f832 	bl	801667c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	685b      	ldr	r3, [r3, #4]
 800f61c:	4a9a      	ldr	r2, [pc, #616]	; (800f888 <tcp_input+0x28c>)
 800f61e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	895b      	ldrh	r3, [r3, #10]
 800f624:	2b13      	cmp	r3, #19
 800f626:	f240 83c4 	bls.w	800fdb2 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f62a:	4b98      	ldr	r3, [pc, #608]	; (800f88c <tcp_input+0x290>)
 800f62c:	695b      	ldr	r3, [r3, #20]
 800f62e:	4a97      	ldr	r2, [pc, #604]	; (800f88c <tcp_input+0x290>)
 800f630:	6812      	ldr	r2, [r2, #0]
 800f632:	4611      	mov	r1, r2
 800f634:	4618      	mov	r0, r3
 800f636:	f006 f86b 	bl	8015710 <ip4_addr_isbroadcast_u32>
 800f63a:	4603      	mov	r3, r0
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	f040 83ba 	bne.w	800fdb6 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f642:	4b92      	ldr	r3, [pc, #584]	; (800f88c <tcp_input+0x290>)
 800f644:	695b      	ldr	r3, [r3, #20]
 800f646:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f64a:	2be0      	cmp	r3, #224	; 0xe0
 800f64c:	f000 83b3 	beq.w	800fdb6 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f650:	4b8d      	ldr	r3, [pc, #564]	; (800f888 <tcp_input+0x28c>)
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	899b      	ldrh	r3, [r3, #12]
 800f656:	b29b      	uxth	r3, r3
 800f658:	4618      	mov	r0, r3
 800f65a:	f7fc fb6f 	bl	800bd3c <lwip_htons>
 800f65e:	4603      	mov	r3, r0
 800f660:	0b1b      	lsrs	r3, r3, #12
 800f662:	b29b      	uxth	r3, r3
 800f664:	b2db      	uxtb	r3, r3
 800f666:	009b      	lsls	r3, r3, #2
 800f668:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f66a:	7cbb      	ldrb	r3, [r7, #18]
 800f66c:	2b13      	cmp	r3, #19
 800f66e:	f240 83a4 	bls.w	800fdba <tcp_input+0x7be>
 800f672:	7cbb      	ldrb	r3, [r7, #18]
 800f674:	b29a      	uxth	r2, r3
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	891b      	ldrh	r3, [r3, #8]
 800f67a:	429a      	cmp	r2, r3
 800f67c:	f200 839d 	bhi.w	800fdba <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f680:	7cbb      	ldrb	r3, [r7, #18]
 800f682:	b29b      	uxth	r3, r3
 800f684:	3b14      	subs	r3, #20
 800f686:	b29a      	uxth	r2, r3
 800f688:	4b81      	ldr	r3, [pc, #516]	; (800f890 <tcp_input+0x294>)
 800f68a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f68c:	4b81      	ldr	r3, [pc, #516]	; (800f894 <tcp_input+0x298>)
 800f68e:	2200      	movs	r2, #0
 800f690:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	895a      	ldrh	r2, [r3, #10]
 800f696:	7cbb      	ldrb	r3, [r7, #18]
 800f698:	b29b      	uxth	r3, r3
 800f69a:	429a      	cmp	r2, r3
 800f69c:	d309      	bcc.n	800f6b2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f69e:	4b7c      	ldr	r3, [pc, #496]	; (800f890 <tcp_input+0x294>)
 800f6a0:	881a      	ldrh	r2, [r3, #0]
 800f6a2:	4b7d      	ldr	r3, [pc, #500]	; (800f898 <tcp_input+0x29c>)
 800f6a4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f6a6:	7cbb      	ldrb	r3, [r7, #18]
 800f6a8:	4619      	mov	r1, r3
 800f6aa:	6878      	ldr	r0, [r7, #4]
 800f6ac:	f7fd fe52 	bl	800d354 <pbuf_remove_header>
 800f6b0:	e04e      	b.n	800f750 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d105      	bne.n	800f6c6 <tcp_input+0xca>
 800f6ba:	4b70      	ldr	r3, [pc, #448]	; (800f87c <tcp_input+0x280>)
 800f6bc:	22c2      	movs	r2, #194	; 0xc2
 800f6be:	4977      	ldr	r1, [pc, #476]	; (800f89c <tcp_input+0x2a0>)
 800f6c0:	4870      	ldr	r0, [pc, #448]	; (800f884 <tcp_input+0x288>)
 800f6c2:	f006 ffdb 	bl	801667c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f6c6:	2114      	movs	r1, #20
 800f6c8:	6878      	ldr	r0, [r7, #4]
 800f6ca:	f7fd fe43 	bl	800d354 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	895a      	ldrh	r2, [r3, #10]
 800f6d2:	4b71      	ldr	r3, [pc, #452]	; (800f898 <tcp_input+0x29c>)
 800f6d4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f6d6:	4b6e      	ldr	r3, [pc, #440]	; (800f890 <tcp_input+0x294>)
 800f6d8:	881a      	ldrh	r2, [r3, #0]
 800f6da:	4b6f      	ldr	r3, [pc, #444]	; (800f898 <tcp_input+0x29c>)
 800f6dc:	881b      	ldrh	r3, [r3, #0]
 800f6de:	1ad3      	subs	r3, r2, r3
 800f6e0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f6e2:	4b6d      	ldr	r3, [pc, #436]	; (800f898 <tcp_input+0x29c>)
 800f6e4:	881b      	ldrh	r3, [r3, #0]
 800f6e6:	4619      	mov	r1, r3
 800f6e8:	6878      	ldr	r0, [r7, #4]
 800f6ea:	f7fd fe33 	bl	800d354 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	895b      	ldrh	r3, [r3, #10]
 800f6f4:	8a3a      	ldrh	r2, [r7, #16]
 800f6f6:	429a      	cmp	r2, r3
 800f6f8:	f200 8361 	bhi.w	800fdbe <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	685b      	ldr	r3, [r3, #4]
 800f702:	4a64      	ldr	r2, [pc, #400]	; (800f894 <tcp_input+0x298>)
 800f704:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	8a3a      	ldrh	r2, [r7, #16]
 800f70c:	4611      	mov	r1, r2
 800f70e:	4618      	mov	r0, r3
 800f710:	f7fd fe20 	bl	800d354 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	891a      	ldrh	r2, [r3, #8]
 800f718:	8a3b      	ldrh	r3, [r7, #16]
 800f71a:	1ad3      	subs	r3, r2, r3
 800f71c:	b29a      	uxth	r2, r3
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	895b      	ldrh	r3, [r3, #10]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d005      	beq.n	800f736 <tcp_input+0x13a>
 800f72a:	4b54      	ldr	r3, [pc, #336]	; (800f87c <tcp_input+0x280>)
 800f72c:	22df      	movs	r2, #223	; 0xdf
 800f72e:	495c      	ldr	r1, [pc, #368]	; (800f8a0 <tcp_input+0x2a4>)
 800f730:	4854      	ldr	r0, [pc, #336]	; (800f884 <tcp_input+0x288>)
 800f732:	f006 ffa3 	bl	801667c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	891a      	ldrh	r2, [r3, #8]
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	891b      	ldrh	r3, [r3, #8]
 800f740:	429a      	cmp	r2, r3
 800f742:	d005      	beq.n	800f750 <tcp_input+0x154>
 800f744:	4b4d      	ldr	r3, [pc, #308]	; (800f87c <tcp_input+0x280>)
 800f746:	22e0      	movs	r2, #224	; 0xe0
 800f748:	4956      	ldr	r1, [pc, #344]	; (800f8a4 <tcp_input+0x2a8>)
 800f74a:	484e      	ldr	r0, [pc, #312]	; (800f884 <tcp_input+0x288>)
 800f74c:	f006 ff96 	bl	801667c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f750:	4b4d      	ldr	r3, [pc, #308]	; (800f888 <tcp_input+0x28c>)
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	881b      	ldrh	r3, [r3, #0]
 800f756:	b29b      	uxth	r3, r3
 800f758:	4a4b      	ldr	r2, [pc, #300]	; (800f888 <tcp_input+0x28c>)
 800f75a:	6814      	ldr	r4, [r2, #0]
 800f75c:	4618      	mov	r0, r3
 800f75e:	f7fc faed 	bl	800bd3c <lwip_htons>
 800f762:	4603      	mov	r3, r0
 800f764:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f766:	4b48      	ldr	r3, [pc, #288]	; (800f888 <tcp_input+0x28c>)
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	885b      	ldrh	r3, [r3, #2]
 800f76c:	b29b      	uxth	r3, r3
 800f76e:	4a46      	ldr	r2, [pc, #280]	; (800f888 <tcp_input+0x28c>)
 800f770:	6814      	ldr	r4, [r2, #0]
 800f772:	4618      	mov	r0, r3
 800f774:	f7fc fae2 	bl	800bd3c <lwip_htons>
 800f778:	4603      	mov	r3, r0
 800f77a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f77c:	4b42      	ldr	r3, [pc, #264]	; (800f888 <tcp_input+0x28c>)
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	685b      	ldr	r3, [r3, #4]
 800f782:	4a41      	ldr	r2, [pc, #260]	; (800f888 <tcp_input+0x28c>)
 800f784:	6814      	ldr	r4, [r2, #0]
 800f786:	4618      	mov	r0, r3
 800f788:	f7fc faed 	bl	800bd66 <lwip_htonl>
 800f78c:	4603      	mov	r3, r0
 800f78e:	6063      	str	r3, [r4, #4]
 800f790:	6863      	ldr	r3, [r4, #4]
 800f792:	4a45      	ldr	r2, [pc, #276]	; (800f8a8 <tcp_input+0x2ac>)
 800f794:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f796:	4b3c      	ldr	r3, [pc, #240]	; (800f888 <tcp_input+0x28c>)
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	689b      	ldr	r3, [r3, #8]
 800f79c:	4a3a      	ldr	r2, [pc, #232]	; (800f888 <tcp_input+0x28c>)
 800f79e:	6814      	ldr	r4, [r2, #0]
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	f7fc fae0 	bl	800bd66 <lwip_htonl>
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	60a3      	str	r3, [r4, #8]
 800f7aa:	68a3      	ldr	r3, [r4, #8]
 800f7ac:	4a3f      	ldr	r2, [pc, #252]	; (800f8ac <tcp_input+0x2b0>)
 800f7ae:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f7b0:	4b35      	ldr	r3, [pc, #212]	; (800f888 <tcp_input+0x28c>)
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	89db      	ldrh	r3, [r3, #14]
 800f7b6:	b29b      	uxth	r3, r3
 800f7b8:	4a33      	ldr	r2, [pc, #204]	; (800f888 <tcp_input+0x28c>)
 800f7ba:	6814      	ldr	r4, [r2, #0]
 800f7bc:	4618      	mov	r0, r3
 800f7be:	f7fc fabd 	bl	800bd3c <lwip_htons>
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f7c6:	4b30      	ldr	r3, [pc, #192]	; (800f888 <tcp_input+0x28c>)
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	899b      	ldrh	r3, [r3, #12]
 800f7cc:	b29b      	uxth	r3, r3
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	f7fc fab4 	bl	800bd3c <lwip_htons>
 800f7d4:	4603      	mov	r3, r0
 800f7d6:	b2db      	uxtb	r3, r3
 800f7d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f7dc:	b2da      	uxtb	r2, r3
 800f7de:	4b34      	ldr	r3, [pc, #208]	; (800f8b0 <tcp_input+0x2b4>)
 800f7e0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	891a      	ldrh	r2, [r3, #8]
 800f7e6:	4b33      	ldr	r3, [pc, #204]	; (800f8b4 <tcp_input+0x2b8>)
 800f7e8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f7ea:	4b31      	ldr	r3, [pc, #196]	; (800f8b0 <tcp_input+0x2b4>)
 800f7ec:	781b      	ldrb	r3, [r3, #0]
 800f7ee:	f003 0303 	and.w	r3, r3, #3
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d00c      	beq.n	800f810 <tcp_input+0x214>
    tcplen++;
 800f7f6:	4b2f      	ldr	r3, [pc, #188]	; (800f8b4 <tcp_input+0x2b8>)
 800f7f8:	881b      	ldrh	r3, [r3, #0]
 800f7fa:	3301      	adds	r3, #1
 800f7fc:	b29a      	uxth	r2, r3
 800f7fe:	4b2d      	ldr	r3, [pc, #180]	; (800f8b4 <tcp_input+0x2b8>)
 800f800:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	891a      	ldrh	r2, [r3, #8]
 800f806:	4b2b      	ldr	r3, [pc, #172]	; (800f8b4 <tcp_input+0x2b8>)
 800f808:	881b      	ldrh	r3, [r3, #0]
 800f80a:	429a      	cmp	r2, r3
 800f80c:	f200 82d9 	bhi.w	800fdc2 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f810:	2300      	movs	r3, #0
 800f812:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f814:	4b28      	ldr	r3, [pc, #160]	; (800f8b8 <tcp_input+0x2bc>)
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	61fb      	str	r3, [r7, #28]
 800f81a:	e09d      	b.n	800f958 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f81c:	69fb      	ldr	r3, [r7, #28]
 800f81e:	7d1b      	ldrb	r3, [r3, #20]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d105      	bne.n	800f830 <tcp_input+0x234>
 800f824:	4b15      	ldr	r3, [pc, #84]	; (800f87c <tcp_input+0x280>)
 800f826:	22fb      	movs	r2, #251	; 0xfb
 800f828:	4924      	ldr	r1, [pc, #144]	; (800f8bc <tcp_input+0x2c0>)
 800f82a:	4816      	ldr	r0, [pc, #88]	; (800f884 <tcp_input+0x288>)
 800f82c:	f006 ff26 	bl	801667c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f830:	69fb      	ldr	r3, [r7, #28]
 800f832:	7d1b      	ldrb	r3, [r3, #20]
 800f834:	2b0a      	cmp	r3, #10
 800f836:	d105      	bne.n	800f844 <tcp_input+0x248>
 800f838:	4b10      	ldr	r3, [pc, #64]	; (800f87c <tcp_input+0x280>)
 800f83a:	22fc      	movs	r2, #252	; 0xfc
 800f83c:	4920      	ldr	r1, [pc, #128]	; (800f8c0 <tcp_input+0x2c4>)
 800f83e:	4811      	ldr	r0, [pc, #68]	; (800f884 <tcp_input+0x288>)
 800f840:	f006 ff1c 	bl	801667c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f844:	69fb      	ldr	r3, [r7, #28]
 800f846:	7d1b      	ldrb	r3, [r3, #20]
 800f848:	2b01      	cmp	r3, #1
 800f84a:	d105      	bne.n	800f858 <tcp_input+0x25c>
 800f84c:	4b0b      	ldr	r3, [pc, #44]	; (800f87c <tcp_input+0x280>)
 800f84e:	22fd      	movs	r2, #253	; 0xfd
 800f850:	491c      	ldr	r1, [pc, #112]	; (800f8c4 <tcp_input+0x2c8>)
 800f852:	480c      	ldr	r0, [pc, #48]	; (800f884 <tcp_input+0x288>)
 800f854:	f006 ff12 	bl	801667c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f858:	69fb      	ldr	r3, [r7, #28]
 800f85a:	7a1b      	ldrb	r3, [r3, #8]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d033      	beq.n	800f8c8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f860:	69fb      	ldr	r3, [r7, #28]
 800f862:	7a1a      	ldrb	r2, [r3, #8]
 800f864:	4b09      	ldr	r3, [pc, #36]	; (800f88c <tcp_input+0x290>)
 800f866:	685b      	ldr	r3, [r3, #4]
 800f868:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f86c:	3301      	adds	r3, #1
 800f86e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f870:	429a      	cmp	r2, r3
 800f872:	d029      	beq.n	800f8c8 <tcp_input+0x2cc>
      prev = pcb;
 800f874:	69fb      	ldr	r3, [r7, #28]
 800f876:	61bb      	str	r3, [r7, #24]
      continue;
 800f878:	e06b      	b.n	800f952 <tcp_input+0x356>
 800f87a:	bf00      	nop
 800f87c:	08019ff4 	.word	0x08019ff4
 800f880:	0801a028 	.word	0x0801a028
 800f884:	0801a040 	.word	0x0801a040
 800f888:	20001598 	.word	0x20001598
 800f88c:	2000e3f4 	.word	0x2000e3f4
 800f890:	2000159c 	.word	0x2000159c
 800f894:	200015a0 	.word	0x200015a0
 800f898:	2000159e 	.word	0x2000159e
 800f89c:	0801a068 	.word	0x0801a068
 800f8a0:	0801a078 	.word	0x0801a078
 800f8a4:	0801a084 	.word	0x0801a084
 800f8a8:	200015a8 	.word	0x200015a8
 800f8ac:	200015ac 	.word	0x200015ac
 800f8b0:	200015b4 	.word	0x200015b4
 800f8b4:	200015b2 	.word	0x200015b2
 800f8b8:	200179f8 	.word	0x200179f8
 800f8bc:	0801a0a4 	.word	0x0801a0a4
 800f8c0:	0801a0cc 	.word	0x0801a0cc
 800f8c4:	0801a0f8 	.word	0x0801a0f8
    }

    if (pcb->remote_port == tcphdr->src &&
 800f8c8:	69fb      	ldr	r3, [r7, #28]
 800f8ca:	8b1a      	ldrh	r2, [r3, #24]
 800f8cc:	4b94      	ldr	r3, [pc, #592]	; (800fb20 <tcp_input+0x524>)
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	881b      	ldrh	r3, [r3, #0]
 800f8d2:	b29b      	uxth	r3, r3
 800f8d4:	429a      	cmp	r2, r3
 800f8d6:	d13a      	bne.n	800f94e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f8d8:	69fb      	ldr	r3, [r7, #28]
 800f8da:	8ada      	ldrh	r2, [r3, #22]
 800f8dc:	4b90      	ldr	r3, [pc, #576]	; (800fb20 <tcp_input+0x524>)
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	885b      	ldrh	r3, [r3, #2]
 800f8e2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f8e4:	429a      	cmp	r2, r3
 800f8e6:	d132      	bne.n	800f94e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f8e8:	69fb      	ldr	r3, [r7, #28]
 800f8ea:	685a      	ldr	r2, [r3, #4]
 800f8ec:	4b8d      	ldr	r3, [pc, #564]	; (800fb24 <tcp_input+0x528>)
 800f8ee:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f8f0:	429a      	cmp	r2, r3
 800f8f2:	d12c      	bne.n	800f94e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f8f4:	69fb      	ldr	r3, [r7, #28]
 800f8f6:	681a      	ldr	r2, [r3, #0]
 800f8f8:	4b8a      	ldr	r3, [pc, #552]	; (800fb24 <tcp_input+0x528>)
 800f8fa:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f8fc:	429a      	cmp	r2, r3
 800f8fe:	d126      	bne.n	800f94e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f900:	69fb      	ldr	r3, [r7, #28]
 800f902:	68db      	ldr	r3, [r3, #12]
 800f904:	69fa      	ldr	r2, [r7, #28]
 800f906:	429a      	cmp	r2, r3
 800f908:	d106      	bne.n	800f918 <tcp_input+0x31c>
 800f90a:	4b87      	ldr	r3, [pc, #540]	; (800fb28 <tcp_input+0x52c>)
 800f90c:	f240 120d 	movw	r2, #269	; 0x10d
 800f910:	4986      	ldr	r1, [pc, #536]	; (800fb2c <tcp_input+0x530>)
 800f912:	4887      	ldr	r0, [pc, #540]	; (800fb30 <tcp_input+0x534>)
 800f914:	f006 feb2 	bl	801667c <iprintf>
      if (prev != NULL) {
 800f918:	69bb      	ldr	r3, [r7, #24]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d00a      	beq.n	800f934 <tcp_input+0x338>
        prev->next = pcb->next;
 800f91e:	69fb      	ldr	r3, [r7, #28]
 800f920:	68da      	ldr	r2, [r3, #12]
 800f922:	69bb      	ldr	r3, [r7, #24]
 800f924:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f926:	4b83      	ldr	r3, [pc, #524]	; (800fb34 <tcp_input+0x538>)
 800f928:	681a      	ldr	r2, [r3, #0]
 800f92a:	69fb      	ldr	r3, [r7, #28]
 800f92c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f92e:	4a81      	ldr	r2, [pc, #516]	; (800fb34 <tcp_input+0x538>)
 800f930:	69fb      	ldr	r3, [r7, #28]
 800f932:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f934:	69fb      	ldr	r3, [r7, #28]
 800f936:	68db      	ldr	r3, [r3, #12]
 800f938:	69fa      	ldr	r2, [r7, #28]
 800f93a:	429a      	cmp	r2, r3
 800f93c:	d111      	bne.n	800f962 <tcp_input+0x366>
 800f93e:	4b7a      	ldr	r3, [pc, #488]	; (800fb28 <tcp_input+0x52c>)
 800f940:	f240 1215 	movw	r2, #277	; 0x115
 800f944:	497c      	ldr	r1, [pc, #496]	; (800fb38 <tcp_input+0x53c>)
 800f946:	487a      	ldr	r0, [pc, #488]	; (800fb30 <tcp_input+0x534>)
 800f948:	f006 fe98 	bl	801667c <iprintf>
      break;
 800f94c:	e009      	b.n	800f962 <tcp_input+0x366>
    }
    prev = pcb;
 800f94e:	69fb      	ldr	r3, [r7, #28]
 800f950:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f952:	69fb      	ldr	r3, [r7, #28]
 800f954:	68db      	ldr	r3, [r3, #12]
 800f956:	61fb      	str	r3, [r7, #28]
 800f958:	69fb      	ldr	r3, [r7, #28]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	f47f af5e 	bne.w	800f81c <tcp_input+0x220>
 800f960:	e000      	b.n	800f964 <tcp_input+0x368>
      break;
 800f962:	bf00      	nop
  }

  if (pcb == NULL) {
 800f964:	69fb      	ldr	r3, [r7, #28]
 800f966:	2b00      	cmp	r3, #0
 800f968:	f040 8095 	bne.w	800fa96 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f96c:	4b73      	ldr	r3, [pc, #460]	; (800fb3c <tcp_input+0x540>)
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	61fb      	str	r3, [r7, #28]
 800f972:	e03f      	b.n	800f9f4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f974:	69fb      	ldr	r3, [r7, #28]
 800f976:	7d1b      	ldrb	r3, [r3, #20]
 800f978:	2b0a      	cmp	r3, #10
 800f97a:	d006      	beq.n	800f98a <tcp_input+0x38e>
 800f97c:	4b6a      	ldr	r3, [pc, #424]	; (800fb28 <tcp_input+0x52c>)
 800f97e:	f240 121f 	movw	r2, #287	; 0x11f
 800f982:	496f      	ldr	r1, [pc, #444]	; (800fb40 <tcp_input+0x544>)
 800f984:	486a      	ldr	r0, [pc, #424]	; (800fb30 <tcp_input+0x534>)
 800f986:	f006 fe79 	bl	801667c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f98a:	69fb      	ldr	r3, [r7, #28]
 800f98c:	7a1b      	ldrb	r3, [r3, #8]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d009      	beq.n	800f9a6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f992:	69fb      	ldr	r3, [r7, #28]
 800f994:	7a1a      	ldrb	r2, [r3, #8]
 800f996:	4b63      	ldr	r3, [pc, #396]	; (800fb24 <tcp_input+0x528>)
 800f998:	685b      	ldr	r3, [r3, #4]
 800f99a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f99e:	3301      	adds	r3, #1
 800f9a0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f9a2:	429a      	cmp	r2, r3
 800f9a4:	d122      	bne.n	800f9ec <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f9a6:	69fb      	ldr	r3, [r7, #28]
 800f9a8:	8b1a      	ldrh	r2, [r3, #24]
 800f9aa:	4b5d      	ldr	r3, [pc, #372]	; (800fb20 <tcp_input+0x524>)
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	881b      	ldrh	r3, [r3, #0]
 800f9b0:	b29b      	uxth	r3, r3
 800f9b2:	429a      	cmp	r2, r3
 800f9b4:	d11b      	bne.n	800f9ee <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f9b6:	69fb      	ldr	r3, [r7, #28]
 800f9b8:	8ada      	ldrh	r2, [r3, #22]
 800f9ba:	4b59      	ldr	r3, [pc, #356]	; (800fb20 <tcp_input+0x524>)
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	885b      	ldrh	r3, [r3, #2]
 800f9c0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f9c2:	429a      	cmp	r2, r3
 800f9c4:	d113      	bne.n	800f9ee <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f9c6:	69fb      	ldr	r3, [r7, #28]
 800f9c8:	685a      	ldr	r2, [r3, #4]
 800f9ca:	4b56      	ldr	r3, [pc, #344]	; (800fb24 <tcp_input+0x528>)
 800f9cc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f9ce:	429a      	cmp	r2, r3
 800f9d0:	d10d      	bne.n	800f9ee <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f9d2:	69fb      	ldr	r3, [r7, #28]
 800f9d4:	681a      	ldr	r2, [r3, #0]
 800f9d6:	4b53      	ldr	r3, [pc, #332]	; (800fb24 <tcp_input+0x528>)
 800f9d8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f9da:	429a      	cmp	r2, r3
 800f9dc:	d107      	bne.n	800f9ee <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f9de:	69f8      	ldr	r0, [r7, #28]
 800f9e0:	f000 fb54 	bl	801008c <tcp_timewait_input>
        }
        pbuf_free(p);
 800f9e4:	6878      	ldr	r0, [r7, #4]
 800f9e6:	f7fd fd3b 	bl	800d460 <pbuf_free>
        return;
 800f9ea:	e1f0      	b.n	800fdce <tcp_input+0x7d2>
        continue;
 800f9ec:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f9ee:	69fb      	ldr	r3, [r7, #28]
 800f9f0:	68db      	ldr	r3, [r3, #12]
 800f9f2:	61fb      	str	r3, [r7, #28]
 800f9f4:	69fb      	ldr	r3, [r7, #28]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d1bc      	bne.n	800f974 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f9fe:	4b51      	ldr	r3, [pc, #324]	; (800fb44 <tcp_input+0x548>)
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	617b      	str	r3, [r7, #20]
 800fa04:	e02a      	b.n	800fa5c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fa06:	697b      	ldr	r3, [r7, #20]
 800fa08:	7a1b      	ldrb	r3, [r3, #8]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d00c      	beq.n	800fa28 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fa0e:	697b      	ldr	r3, [r7, #20]
 800fa10:	7a1a      	ldrb	r2, [r3, #8]
 800fa12:	4b44      	ldr	r3, [pc, #272]	; (800fb24 <tcp_input+0x528>)
 800fa14:	685b      	ldr	r3, [r3, #4]
 800fa16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fa1a:	3301      	adds	r3, #1
 800fa1c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fa1e:	429a      	cmp	r2, r3
 800fa20:	d002      	beq.n	800fa28 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800fa22:	697b      	ldr	r3, [r7, #20]
 800fa24:	61bb      	str	r3, [r7, #24]
        continue;
 800fa26:	e016      	b.n	800fa56 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800fa28:	697b      	ldr	r3, [r7, #20]
 800fa2a:	8ada      	ldrh	r2, [r3, #22]
 800fa2c:	4b3c      	ldr	r3, [pc, #240]	; (800fb20 <tcp_input+0x524>)
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	885b      	ldrh	r3, [r3, #2]
 800fa32:	b29b      	uxth	r3, r3
 800fa34:	429a      	cmp	r2, r3
 800fa36:	d10c      	bne.n	800fa52 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800fa38:	697b      	ldr	r3, [r7, #20]
 800fa3a:	681a      	ldr	r2, [r3, #0]
 800fa3c:	4b39      	ldr	r3, [pc, #228]	; (800fb24 <tcp_input+0x528>)
 800fa3e:	695b      	ldr	r3, [r3, #20]
 800fa40:	429a      	cmp	r2, r3
 800fa42:	d00f      	beq.n	800fa64 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800fa44:	697b      	ldr	r3, [r7, #20]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d00d      	beq.n	800fa66 <tcp_input+0x46a>
 800fa4a:	697b      	ldr	r3, [r7, #20]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d009      	beq.n	800fa66 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800fa52:	697b      	ldr	r3, [r7, #20]
 800fa54:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fa56:	697b      	ldr	r3, [r7, #20]
 800fa58:	68db      	ldr	r3, [r3, #12]
 800fa5a:	617b      	str	r3, [r7, #20]
 800fa5c:	697b      	ldr	r3, [r7, #20]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d1d1      	bne.n	800fa06 <tcp_input+0x40a>
 800fa62:	e000      	b.n	800fa66 <tcp_input+0x46a>
            break;
 800fa64:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800fa66:	697b      	ldr	r3, [r7, #20]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d014      	beq.n	800fa96 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800fa6c:	69bb      	ldr	r3, [r7, #24]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d00a      	beq.n	800fa88 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800fa72:	697b      	ldr	r3, [r7, #20]
 800fa74:	68da      	ldr	r2, [r3, #12]
 800fa76:	69bb      	ldr	r3, [r7, #24]
 800fa78:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800fa7a:	4b32      	ldr	r3, [pc, #200]	; (800fb44 <tcp_input+0x548>)
 800fa7c:	681a      	ldr	r2, [r3, #0]
 800fa7e:	697b      	ldr	r3, [r7, #20]
 800fa80:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800fa82:	4a30      	ldr	r2, [pc, #192]	; (800fb44 <tcp_input+0x548>)
 800fa84:	697b      	ldr	r3, [r7, #20]
 800fa86:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800fa88:	6978      	ldr	r0, [r7, #20]
 800fa8a:	f000 fa01 	bl	800fe90 <tcp_listen_input>
      }
      pbuf_free(p);
 800fa8e:	6878      	ldr	r0, [r7, #4]
 800fa90:	f7fd fce6 	bl	800d460 <pbuf_free>
      return;
 800fa94:	e19b      	b.n	800fdce <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800fa96:	69fb      	ldr	r3, [r7, #28]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	f000 8160 	beq.w	800fd5e <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800fa9e:	4b2a      	ldr	r3, [pc, #168]	; (800fb48 <tcp_input+0x54c>)
 800faa0:	2200      	movs	r2, #0
 800faa2:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	891a      	ldrh	r2, [r3, #8]
 800faa8:	4b27      	ldr	r3, [pc, #156]	; (800fb48 <tcp_input+0x54c>)
 800faaa:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800faac:	4a26      	ldr	r2, [pc, #152]	; (800fb48 <tcp_input+0x54c>)
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800fab2:	4b1b      	ldr	r3, [pc, #108]	; (800fb20 <tcp_input+0x524>)
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	4a24      	ldr	r2, [pc, #144]	; (800fb48 <tcp_input+0x54c>)
 800fab8:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800faba:	4b24      	ldr	r3, [pc, #144]	; (800fb4c <tcp_input+0x550>)
 800fabc:	2200      	movs	r2, #0
 800fabe:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800fac0:	4b23      	ldr	r3, [pc, #140]	; (800fb50 <tcp_input+0x554>)
 800fac2:	2200      	movs	r2, #0
 800fac4:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800fac6:	4b23      	ldr	r3, [pc, #140]	; (800fb54 <tcp_input+0x558>)
 800fac8:	2200      	movs	r2, #0
 800faca:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800facc:	4b22      	ldr	r3, [pc, #136]	; (800fb58 <tcp_input+0x55c>)
 800face:	781b      	ldrb	r3, [r3, #0]
 800fad0:	f003 0308 	and.w	r3, r3, #8
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d006      	beq.n	800fae6 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	7b5b      	ldrb	r3, [r3, #13]
 800fadc:	f043 0301 	orr.w	r3, r3, #1
 800fae0:	b2da      	uxtb	r2, r3
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800fae6:	69fb      	ldr	r3, [r7, #28]
 800fae8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800faea:	2b00      	cmp	r3, #0
 800faec:	d038      	beq.n	800fb60 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800faee:	69f8      	ldr	r0, [r7, #28]
 800faf0:	f7ff f852 	bl	800eb98 <tcp_process_refused_data>
 800faf4:	4603      	mov	r3, r0
 800faf6:	f113 0f0d 	cmn.w	r3, #13
 800fafa:	d007      	beq.n	800fb0c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fafc:	69fb      	ldr	r3, [r7, #28]
 800fafe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d02d      	beq.n	800fb60 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fb04:	4b15      	ldr	r3, [pc, #84]	; (800fb5c <tcp_input+0x560>)
 800fb06:	881b      	ldrh	r3, [r3, #0]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d029      	beq.n	800fb60 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800fb0c:	69fb      	ldr	r3, [r7, #28]
 800fb0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	f040 8104 	bne.w	800fd1e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800fb16:	69f8      	ldr	r0, [r7, #28]
 800fb18:	f003 fe16 	bl	8013748 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800fb1c:	e0ff      	b.n	800fd1e <tcp_input+0x722>
 800fb1e:	bf00      	nop
 800fb20:	20001598 	.word	0x20001598
 800fb24:	2000e3f4 	.word	0x2000e3f4
 800fb28:	08019ff4 	.word	0x08019ff4
 800fb2c:	0801a120 	.word	0x0801a120
 800fb30:	0801a040 	.word	0x0801a040
 800fb34:	200179f8 	.word	0x200179f8
 800fb38:	0801a14c 	.word	0x0801a14c
 800fb3c:	20017a08 	.word	0x20017a08
 800fb40:	0801a178 	.word	0x0801a178
 800fb44:	20017a00 	.word	0x20017a00
 800fb48:	20001588 	.word	0x20001588
 800fb4c:	200015b8 	.word	0x200015b8
 800fb50:	200015b5 	.word	0x200015b5
 800fb54:	200015b0 	.word	0x200015b0
 800fb58:	200015b4 	.word	0x200015b4
 800fb5c:	200015b2 	.word	0x200015b2
      }
    }
    tcp_input_pcb = pcb;
 800fb60:	4a9c      	ldr	r2, [pc, #624]	; (800fdd4 <tcp_input+0x7d8>)
 800fb62:	69fb      	ldr	r3, [r7, #28]
 800fb64:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800fb66:	69f8      	ldr	r0, [r7, #28]
 800fb68:	f000 fb0a 	bl	8010180 <tcp_process>
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800fb70:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fb74:	f113 0f0d 	cmn.w	r3, #13
 800fb78:	f000 80d3 	beq.w	800fd22 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800fb7c:	4b96      	ldr	r3, [pc, #600]	; (800fdd8 <tcp_input+0x7dc>)
 800fb7e:	781b      	ldrb	r3, [r3, #0]
 800fb80:	f003 0308 	and.w	r3, r3, #8
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d015      	beq.n	800fbb4 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800fb88:	69fb      	ldr	r3, [r7, #28]
 800fb8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d008      	beq.n	800fba4 <tcp_input+0x5a8>
 800fb92:	69fb      	ldr	r3, [r7, #28]
 800fb94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb98:	69fa      	ldr	r2, [r7, #28]
 800fb9a:	6912      	ldr	r2, [r2, #16]
 800fb9c:	f06f 010d 	mvn.w	r1, #13
 800fba0:	4610      	mov	r0, r2
 800fba2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fba4:	69f9      	ldr	r1, [r7, #28]
 800fba6:	488d      	ldr	r0, [pc, #564]	; (800fddc <tcp_input+0x7e0>)
 800fba8:	f7ff fbb0 	bl	800f30c <tcp_pcb_remove>
        tcp_free(pcb);
 800fbac:	69f8      	ldr	r0, [r7, #28]
 800fbae:	f7fd fef7 	bl	800d9a0 <tcp_free>
 800fbb2:	e0c1      	b.n	800fd38 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800fbb8:	4b89      	ldr	r3, [pc, #548]	; (800fde0 <tcp_input+0x7e4>)
 800fbba:	881b      	ldrh	r3, [r3, #0]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d01d      	beq.n	800fbfc <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800fbc0:	4b87      	ldr	r3, [pc, #540]	; (800fde0 <tcp_input+0x7e4>)
 800fbc2:	881b      	ldrh	r3, [r3, #0]
 800fbc4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800fbc6:	69fb      	ldr	r3, [r7, #28]
 800fbc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d00a      	beq.n	800fbe6 <tcp_input+0x5ea>
 800fbd0:	69fb      	ldr	r3, [r7, #28]
 800fbd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fbd6:	69fa      	ldr	r2, [r7, #28]
 800fbd8:	6910      	ldr	r0, [r2, #16]
 800fbda:	89fa      	ldrh	r2, [r7, #14]
 800fbdc:	69f9      	ldr	r1, [r7, #28]
 800fbde:	4798      	blx	r3
 800fbe0:	4603      	mov	r3, r0
 800fbe2:	74fb      	strb	r3, [r7, #19]
 800fbe4:	e001      	b.n	800fbea <tcp_input+0x5ee>
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fbea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fbee:	f113 0f0d 	cmn.w	r3, #13
 800fbf2:	f000 8098 	beq.w	800fd26 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800fbf6:	4b7a      	ldr	r3, [pc, #488]	; (800fde0 <tcp_input+0x7e4>)
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800fbfc:	69f8      	ldr	r0, [r7, #28]
 800fbfe:	f000 f907 	bl	800fe10 <tcp_input_delayed_close>
 800fc02:	4603      	mov	r3, r0
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	f040 8090 	bne.w	800fd2a <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800fc0a:	4b76      	ldr	r3, [pc, #472]	; (800fde4 <tcp_input+0x7e8>)
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d041      	beq.n	800fc96 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800fc12:	69fb      	ldr	r3, [r7, #28]
 800fc14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d006      	beq.n	800fc28 <tcp_input+0x62c>
 800fc1a:	4b73      	ldr	r3, [pc, #460]	; (800fde8 <tcp_input+0x7ec>)
 800fc1c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800fc20:	4972      	ldr	r1, [pc, #456]	; (800fdec <tcp_input+0x7f0>)
 800fc22:	4873      	ldr	r0, [pc, #460]	; (800fdf0 <tcp_input+0x7f4>)
 800fc24:	f006 fd2a 	bl	801667c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800fc28:	69fb      	ldr	r3, [r7, #28]
 800fc2a:	8b5b      	ldrh	r3, [r3, #26]
 800fc2c:	f003 0310 	and.w	r3, r3, #16
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d008      	beq.n	800fc46 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800fc34:	4b6b      	ldr	r3, [pc, #428]	; (800fde4 <tcp_input+0x7e8>)
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	4618      	mov	r0, r3
 800fc3a:	f7fd fc11 	bl	800d460 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800fc3e:	69f8      	ldr	r0, [r7, #28]
 800fc40:	f7fe f996 	bl	800df70 <tcp_abort>
            goto aborted;
 800fc44:	e078      	b.n	800fd38 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800fc46:	69fb      	ldr	r3, [r7, #28]
 800fc48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d00c      	beq.n	800fc6a <tcp_input+0x66e>
 800fc50:	69fb      	ldr	r3, [r7, #28]
 800fc52:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fc56:	69fb      	ldr	r3, [r7, #28]
 800fc58:	6918      	ldr	r0, [r3, #16]
 800fc5a:	4b62      	ldr	r3, [pc, #392]	; (800fde4 <tcp_input+0x7e8>)
 800fc5c:	681a      	ldr	r2, [r3, #0]
 800fc5e:	2300      	movs	r3, #0
 800fc60:	69f9      	ldr	r1, [r7, #28]
 800fc62:	47a0      	blx	r4
 800fc64:	4603      	mov	r3, r0
 800fc66:	74fb      	strb	r3, [r7, #19]
 800fc68:	e008      	b.n	800fc7c <tcp_input+0x680>
 800fc6a:	4b5e      	ldr	r3, [pc, #376]	; (800fde4 <tcp_input+0x7e8>)
 800fc6c:	681a      	ldr	r2, [r3, #0]
 800fc6e:	2300      	movs	r3, #0
 800fc70:	69f9      	ldr	r1, [r7, #28]
 800fc72:	2000      	movs	r0, #0
 800fc74:	f7ff f884 	bl	800ed80 <tcp_recv_null>
 800fc78:	4603      	mov	r3, r0
 800fc7a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800fc7c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fc80:	f113 0f0d 	cmn.w	r3, #13
 800fc84:	d053      	beq.n	800fd2e <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800fc86:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d003      	beq.n	800fc96 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800fc8e:	4b55      	ldr	r3, [pc, #340]	; (800fde4 <tcp_input+0x7e8>)
 800fc90:	681a      	ldr	r2, [r3, #0]
 800fc92:	69fb      	ldr	r3, [r7, #28]
 800fc94:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800fc96:	4b50      	ldr	r3, [pc, #320]	; (800fdd8 <tcp_input+0x7dc>)
 800fc98:	781b      	ldrb	r3, [r3, #0]
 800fc9a:	f003 0320 	and.w	r3, r3, #32
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d030      	beq.n	800fd04 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800fca2:	69fb      	ldr	r3, [r7, #28]
 800fca4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d009      	beq.n	800fcbe <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800fcaa:	69fb      	ldr	r3, [r7, #28]
 800fcac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fcae:	7b5a      	ldrb	r2, [r3, #13]
 800fcb0:	69fb      	ldr	r3, [r7, #28]
 800fcb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fcb4:	f042 0220 	orr.w	r2, r2, #32
 800fcb8:	b2d2      	uxtb	r2, r2
 800fcba:	735a      	strb	r2, [r3, #13]
 800fcbc:	e022      	b.n	800fd04 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fcbe:	69fb      	ldr	r3, [r7, #28]
 800fcc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fcc2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fcc6:	d005      	beq.n	800fcd4 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800fcc8:	69fb      	ldr	r3, [r7, #28]
 800fcca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fccc:	3301      	adds	r3, #1
 800fcce:	b29a      	uxth	r2, r3
 800fcd0:	69fb      	ldr	r3, [r7, #28]
 800fcd2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800fcd4:	69fb      	ldr	r3, [r7, #28]
 800fcd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d00b      	beq.n	800fcf6 <tcp_input+0x6fa>
 800fcde:	69fb      	ldr	r3, [r7, #28]
 800fce0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fce4:	69fb      	ldr	r3, [r7, #28]
 800fce6:	6918      	ldr	r0, [r3, #16]
 800fce8:	2300      	movs	r3, #0
 800fcea:	2200      	movs	r2, #0
 800fcec:	69f9      	ldr	r1, [r7, #28]
 800fcee:	47a0      	blx	r4
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	74fb      	strb	r3, [r7, #19]
 800fcf4:	e001      	b.n	800fcfa <tcp_input+0x6fe>
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fcfa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fcfe:	f113 0f0d 	cmn.w	r3, #13
 800fd02:	d016      	beq.n	800fd32 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800fd04:	4b33      	ldr	r3, [pc, #204]	; (800fdd4 <tcp_input+0x7d8>)
 800fd06:	2200      	movs	r2, #0
 800fd08:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800fd0a:	69f8      	ldr	r0, [r7, #28]
 800fd0c:	f000 f880 	bl	800fe10 <tcp_input_delayed_close>
 800fd10:	4603      	mov	r3, r0
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d10f      	bne.n	800fd36 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800fd16:	69f8      	ldr	r0, [r7, #28]
 800fd18:	f002 ff10 	bl	8012b3c <tcp_output>
 800fd1c:	e00c      	b.n	800fd38 <tcp_input+0x73c>
        goto aborted;
 800fd1e:	bf00      	nop
 800fd20:	e00a      	b.n	800fd38 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800fd22:	bf00      	nop
 800fd24:	e008      	b.n	800fd38 <tcp_input+0x73c>
              goto aborted;
 800fd26:	bf00      	nop
 800fd28:	e006      	b.n	800fd38 <tcp_input+0x73c>
          goto aborted;
 800fd2a:	bf00      	nop
 800fd2c:	e004      	b.n	800fd38 <tcp_input+0x73c>
            goto aborted;
 800fd2e:	bf00      	nop
 800fd30:	e002      	b.n	800fd38 <tcp_input+0x73c>
              goto aborted;
 800fd32:	bf00      	nop
 800fd34:	e000      	b.n	800fd38 <tcp_input+0x73c>
          goto aborted;
 800fd36:	bf00      	nop
    tcp_input_pcb = NULL;
 800fd38:	4b26      	ldr	r3, [pc, #152]	; (800fdd4 <tcp_input+0x7d8>)
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800fd3e:	4b29      	ldr	r3, [pc, #164]	; (800fde4 <tcp_input+0x7e8>)
 800fd40:	2200      	movs	r2, #0
 800fd42:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800fd44:	4b2b      	ldr	r3, [pc, #172]	; (800fdf4 <tcp_input+0x7f8>)
 800fd46:	685b      	ldr	r3, [r3, #4]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d03f      	beq.n	800fdcc <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800fd4c:	4b29      	ldr	r3, [pc, #164]	; (800fdf4 <tcp_input+0x7f8>)
 800fd4e:	685b      	ldr	r3, [r3, #4]
 800fd50:	4618      	mov	r0, r3
 800fd52:	f7fd fb85 	bl	800d460 <pbuf_free>
      inseg.p = NULL;
 800fd56:	4b27      	ldr	r3, [pc, #156]	; (800fdf4 <tcp_input+0x7f8>)
 800fd58:	2200      	movs	r2, #0
 800fd5a:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800fd5c:	e036      	b.n	800fdcc <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800fd5e:	4b26      	ldr	r3, [pc, #152]	; (800fdf8 <tcp_input+0x7fc>)
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	899b      	ldrh	r3, [r3, #12]
 800fd64:	b29b      	uxth	r3, r3
 800fd66:	4618      	mov	r0, r3
 800fd68:	f7fb ffe8 	bl	800bd3c <lwip_htons>
 800fd6c:	4603      	mov	r3, r0
 800fd6e:	b2db      	uxtb	r3, r3
 800fd70:	f003 0304 	and.w	r3, r3, #4
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d118      	bne.n	800fdaa <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd78:	4b20      	ldr	r3, [pc, #128]	; (800fdfc <tcp_input+0x800>)
 800fd7a:	6819      	ldr	r1, [r3, #0]
 800fd7c:	4b20      	ldr	r3, [pc, #128]	; (800fe00 <tcp_input+0x804>)
 800fd7e:	881b      	ldrh	r3, [r3, #0]
 800fd80:	461a      	mov	r2, r3
 800fd82:	4b20      	ldr	r3, [pc, #128]	; (800fe04 <tcp_input+0x808>)
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd88:	4b1b      	ldr	r3, [pc, #108]	; (800fdf8 <tcp_input+0x7fc>)
 800fd8a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd8c:	885b      	ldrh	r3, [r3, #2]
 800fd8e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd90:	4a19      	ldr	r2, [pc, #100]	; (800fdf8 <tcp_input+0x7fc>)
 800fd92:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd94:	8812      	ldrh	r2, [r2, #0]
 800fd96:	b292      	uxth	r2, r2
 800fd98:	9202      	str	r2, [sp, #8]
 800fd9a:	9301      	str	r3, [sp, #4]
 800fd9c:	4b1a      	ldr	r3, [pc, #104]	; (800fe08 <tcp_input+0x80c>)
 800fd9e:	9300      	str	r3, [sp, #0]
 800fda0:	4b1a      	ldr	r3, [pc, #104]	; (800fe0c <tcp_input+0x810>)
 800fda2:	4602      	mov	r2, r0
 800fda4:	2000      	movs	r0, #0
 800fda6:	f003 fc7d 	bl	80136a4 <tcp_rst>
    pbuf_free(p);
 800fdaa:	6878      	ldr	r0, [r7, #4]
 800fdac:	f7fd fb58 	bl	800d460 <pbuf_free>
  return;
 800fdb0:	e00c      	b.n	800fdcc <tcp_input+0x7d0>
    goto dropped;
 800fdb2:	bf00      	nop
 800fdb4:	e006      	b.n	800fdc4 <tcp_input+0x7c8>
    goto dropped;
 800fdb6:	bf00      	nop
 800fdb8:	e004      	b.n	800fdc4 <tcp_input+0x7c8>
    goto dropped;
 800fdba:	bf00      	nop
 800fdbc:	e002      	b.n	800fdc4 <tcp_input+0x7c8>
      goto dropped;
 800fdbe:	bf00      	nop
 800fdc0:	e000      	b.n	800fdc4 <tcp_input+0x7c8>
      goto dropped;
 800fdc2:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800fdc4:	6878      	ldr	r0, [r7, #4]
 800fdc6:	f7fd fb4b 	bl	800d460 <pbuf_free>
 800fdca:	e000      	b.n	800fdce <tcp_input+0x7d2>
  return;
 800fdcc:	bf00      	nop
}
 800fdce:	3724      	adds	r7, #36	; 0x24
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	bd90      	pop	{r4, r7, pc}
 800fdd4:	20017a0c 	.word	0x20017a0c
 800fdd8:	200015b5 	.word	0x200015b5
 800fddc:	200179f8 	.word	0x200179f8
 800fde0:	200015b0 	.word	0x200015b0
 800fde4:	200015b8 	.word	0x200015b8
 800fde8:	08019ff4 	.word	0x08019ff4
 800fdec:	0801a1a8 	.word	0x0801a1a8
 800fdf0:	0801a040 	.word	0x0801a040
 800fdf4:	20001588 	.word	0x20001588
 800fdf8:	20001598 	.word	0x20001598
 800fdfc:	200015ac 	.word	0x200015ac
 800fe00:	200015b2 	.word	0x200015b2
 800fe04:	200015a8 	.word	0x200015a8
 800fe08:	2000e404 	.word	0x2000e404
 800fe0c:	2000e408 	.word	0x2000e408

0800fe10 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b082      	sub	sp, #8
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d106      	bne.n	800fe2c <tcp_input_delayed_close+0x1c>
 800fe1e:	4b17      	ldr	r3, [pc, #92]	; (800fe7c <tcp_input_delayed_close+0x6c>)
 800fe20:	f240 225a 	movw	r2, #602	; 0x25a
 800fe24:	4916      	ldr	r1, [pc, #88]	; (800fe80 <tcp_input_delayed_close+0x70>)
 800fe26:	4817      	ldr	r0, [pc, #92]	; (800fe84 <tcp_input_delayed_close+0x74>)
 800fe28:	f006 fc28 	bl	801667c <iprintf>

  if (recv_flags & TF_CLOSED) {
 800fe2c:	4b16      	ldr	r3, [pc, #88]	; (800fe88 <tcp_input_delayed_close+0x78>)
 800fe2e:	781b      	ldrb	r3, [r3, #0]
 800fe30:	f003 0310 	and.w	r3, r3, #16
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d01c      	beq.n	800fe72 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	8b5b      	ldrh	r3, [r3, #26]
 800fe3c:	f003 0310 	and.w	r3, r3, #16
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d10d      	bne.n	800fe60 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d008      	beq.n	800fe60 <tcp_input_delayed_close+0x50>
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fe54:	687a      	ldr	r2, [r7, #4]
 800fe56:	6912      	ldr	r2, [r2, #16]
 800fe58:	f06f 010e 	mvn.w	r1, #14
 800fe5c:	4610      	mov	r0, r2
 800fe5e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fe60:	6879      	ldr	r1, [r7, #4]
 800fe62:	480a      	ldr	r0, [pc, #40]	; (800fe8c <tcp_input_delayed_close+0x7c>)
 800fe64:	f7ff fa52 	bl	800f30c <tcp_pcb_remove>
    tcp_free(pcb);
 800fe68:	6878      	ldr	r0, [r7, #4]
 800fe6a:	f7fd fd99 	bl	800d9a0 <tcp_free>
    return 1;
 800fe6e:	2301      	movs	r3, #1
 800fe70:	e000      	b.n	800fe74 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800fe72:	2300      	movs	r3, #0
}
 800fe74:	4618      	mov	r0, r3
 800fe76:	3708      	adds	r7, #8
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	bd80      	pop	{r7, pc}
 800fe7c:	08019ff4 	.word	0x08019ff4
 800fe80:	0801a1c4 	.word	0x0801a1c4
 800fe84:	0801a040 	.word	0x0801a040
 800fe88:	200015b5 	.word	0x200015b5
 800fe8c:	200179f8 	.word	0x200179f8

0800fe90 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800fe90:	b590      	push	{r4, r7, lr}
 800fe92:	b08b      	sub	sp, #44	; 0x2c
 800fe94:	af04      	add	r7, sp, #16
 800fe96:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800fe98:	4b6f      	ldr	r3, [pc, #444]	; (8010058 <tcp_listen_input+0x1c8>)
 800fe9a:	781b      	ldrb	r3, [r3, #0]
 800fe9c:	f003 0304 	and.w	r3, r3, #4
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	f040 80d2 	bne.w	801004a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d106      	bne.n	800feba <tcp_listen_input+0x2a>
 800feac:	4b6b      	ldr	r3, [pc, #428]	; (801005c <tcp_listen_input+0x1cc>)
 800feae:	f240 2281 	movw	r2, #641	; 0x281
 800feb2:	496b      	ldr	r1, [pc, #428]	; (8010060 <tcp_listen_input+0x1d0>)
 800feb4:	486b      	ldr	r0, [pc, #428]	; (8010064 <tcp_listen_input+0x1d4>)
 800feb6:	f006 fbe1 	bl	801667c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800feba:	4b67      	ldr	r3, [pc, #412]	; (8010058 <tcp_listen_input+0x1c8>)
 800febc:	781b      	ldrb	r3, [r3, #0]
 800febe:	f003 0310 	and.w	r3, r3, #16
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d019      	beq.n	800fefa <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fec6:	4b68      	ldr	r3, [pc, #416]	; (8010068 <tcp_listen_input+0x1d8>)
 800fec8:	6819      	ldr	r1, [r3, #0]
 800feca:	4b68      	ldr	r3, [pc, #416]	; (801006c <tcp_listen_input+0x1dc>)
 800fecc:	881b      	ldrh	r3, [r3, #0]
 800fece:	461a      	mov	r2, r3
 800fed0:	4b67      	ldr	r3, [pc, #412]	; (8010070 <tcp_listen_input+0x1e0>)
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fed6:	4b67      	ldr	r3, [pc, #412]	; (8010074 <tcp_listen_input+0x1e4>)
 800fed8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800feda:	885b      	ldrh	r3, [r3, #2]
 800fedc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fede:	4a65      	ldr	r2, [pc, #404]	; (8010074 <tcp_listen_input+0x1e4>)
 800fee0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fee2:	8812      	ldrh	r2, [r2, #0]
 800fee4:	b292      	uxth	r2, r2
 800fee6:	9202      	str	r2, [sp, #8]
 800fee8:	9301      	str	r3, [sp, #4]
 800feea:	4b63      	ldr	r3, [pc, #396]	; (8010078 <tcp_listen_input+0x1e8>)
 800feec:	9300      	str	r3, [sp, #0]
 800feee:	4b63      	ldr	r3, [pc, #396]	; (801007c <tcp_listen_input+0x1ec>)
 800fef0:	4602      	mov	r2, r0
 800fef2:	6878      	ldr	r0, [r7, #4]
 800fef4:	f003 fbd6 	bl	80136a4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800fef8:	e0a9      	b.n	801004e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800fefa:	4b57      	ldr	r3, [pc, #348]	; (8010058 <tcp_listen_input+0x1c8>)
 800fefc:	781b      	ldrb	r3, [r3, #0]
 800fefe:	f003 0302 	and.w	r3, r3, #2
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	f000 80a3 	beq.w	801004e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	7d5b      	ldrb	r3, [r3, #21]
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	f7ff f85b 	bl	800efc8 <tcp_alloc>
 800ff12:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800ff14:	697b      	ldr	r3, [r7, #20]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d111      	bne.n	800ff3e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	699b      	ldr	r3, [r3, #24]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d00a      	beq.n	800ff38 <tcp_listen_input+0xa8>
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	699b      	ldr	r3, [r3, #24]
 800ff26:	687a      	ldr	r2, [r7, #4]
 800ff28:	6910      	ldr	r0, [r2, #16]
 800ff2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ff2e:	2100      	movs	r1, #0
 800ff30:	4798      	blx	r3
 800ff32:	4603      	mov	r3, r0
 800ff34:	73bb      	strb	r3, [r7, #14]
      return;
 800ff36:	e08b      	b.n	8010050 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ff38:	23f0      	movs	r3, #240	; 0xf0
 800ff3a:	73bb      	strb	r3, [r7, #14]
      return;
 800ff3c:	e088      	b.n	8010050 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ff3e:	4b50      	ldr	r3, [pc, #320]	; (8010080 <tcp_listen_input+0x1f0>)
 800ff40:	695a      	ldr	r2, [r3, #20]
 800ff42:	697b      	ldr	r3, [r7, #20]
 800ff44:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ff46:	4b4e      	ldr	r3, [pc, #312]	; (8010080 <tcp_listen_input+0x1f0>)
 800ff48:	691a      	ldr	r2, [r3, #16]
 800ff4a:	697b      	ldr	r3, [r7, #20]
 800ff4c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	8ada      	ldrh	r2, [r3, #22]
 800ff52:	697b      	ldr	r3, [r7, #20]
 800ff54:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ff56:	4b47      	ldr	r3, [pc, #284]	; (8010074 <tcp_listen_input+0x1e4>)
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	881b      	ldrh	r3, [r3, #0]
 800ff5c:	b29a      	uxth	r2, r3
 800ff5e:	697b      	ldr	r3, [r7, #20]
 800ff60:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ff62:	697b      	ldr	r3, [r7, #20]
 800ff64:	2203      	movs	r2, #3
 800ff66:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ff68:	4b41      	ldr	r3, [pc, #260]	; (8010070 <tcp_listen_input+0x1e0>)
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	1c5a      	adds	r2, r3, #1
 800ff6e:	697b      	ldr	r3, [r7, #20]
 800ff70:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ff72:	697b      	ldr	r3, [r7, #20]
 800ff74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ff76:	697b      	ldr	r3, [r7, #20]
 800ff78:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800ff7a:	6978      	ldr	r0, [r7, #20]
 800ff7c:	f7ff fa5a 	bl	800f434 <tcp_next_iss>
 800ff80:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ff82:	697b      	ldr	r3, [r7, #20]
 800ff84:	693a      	ldr	r2, [r7, #16]
 800ff86:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800ff88:	697b      	ldr	r3, [r7, #20]
 800ff8a:	693a      	ldr	r2, [r7, #16]
 800ff8c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800ff8e:	697b      	ldr	r3, [r7, #20]
 800ff90:	693a      	ldr	r2, [r7, #16]
 800ff92:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800ff94:	697b      	ldr	r3, [r7, #20]
 800ff96:	693a      	ldr	r2, [r7, #16]
 800ff98:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ff9a:	4b35      	ldr	r3, [pc, #212]	; (8010070 <tcp_listen_input+0x1e0>)
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	1e5a      	subs	r2, r3, #1
 800ffa0:	697b      	ldr	r3, [r7, #20]
 800ffa2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	691a      	ldr	r2, [r3, #16]
 800ffa8:	697b      	ldr	r3, [r7, #20]
 800ffaa:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ffac:	697b      	ldr	r3, [r7, #20]
 800ffae:	687a      	ldr	r2, [r7, #4]
 800ffb0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	7a5b      	ldrb	r3, [r3, #9]
 800ffb6:	f003 030c 	and.w	r3, r3, #12
 800ffba:	b2da      	uxtb	r2, r3
 800ffbc:	697b      	ldr	r3, [r7, #20]
 800ffbe:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	7a1a      	ldrb	r2, [r3, #8]
 800ffc4:	697b      	ldr	r3, [r7, #20]
 800ffc6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ffc8:	4b2e      	ldr	r3, [pc, #184]	; (8010084 <tcp_listen_input+0x1f4>)
 800ffca:	681a      	ldr	r2, [r3, #0]
 800ffcc:	697b      	ldr	r3, [r7, #20]
 800ffce:	60da      	str	r2, [r3, #12]
 800ffd0:	4a2c      	ldr	r2, [pc, #176]	; (8010084 <tcp_listen_input+0x1f4>)
 800ffd2:	697b      	ldr	r3, [r7, #20]
 800ffd4:	6013      	str	r3, [r2, #0]
 800ffd6:	f003 fd27 	bl	8013a28 <tcp_timer_needed>
 800ffda:	4b2b      	ldr	r3, [pc, #172]	; (8010088 <tcp_listen_input+0x1f8>)
 800ffdc:	2201      	movs	r2, #1
 800ffde:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ffe0:	6978      	ldr	r0, [r7, #20]
 800ffe2:	f001 fd8d 	bl	8011b00 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ffe6:	4b23      	ldr	r3, [pc, #140]	; (8010074 <tcp_listen_input+0x1e4>)
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	89db      	ldrh	r3, [r3, #14]
 800ffec:	b29a      	uxth	r2, r3
 800ffee:	697b      	ldr	r3, [r7, #20]
 800fff0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800fff4:	697b      	ldr	r3, [r7, #20]
 800fff6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fffa:	697b      	ldr	r3, [r7, #20]
 800fffc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010000:	697b      	ldr	r3, [r7, #20]
 8010002:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010004:	697b      	ldr	r3, [r7, #20]
 8010006:	3304      	adds	r3, #4
 8010008:	4618      	mov	r0, r3
 801000a:	f005 f8eb 	bl	80151e4 <ip4_route>
 801000e:	4601      	mov	r1, r0
 8010010:	697b      	ldr	r3, [r7, #20]
 8010012:	3304      	adds	r3, #4
 8010014:	461a      	mov	r2, r3
 8010016:	4620      	mov	r0, r4
 8010018:	f7ff fa32 	bl	800f480 <tcp_eff_send_mss_netif>
 801001c:	4603      	mov	r3, r0
 801001e:	461a      	mov	r2, r3
 8010020:	697b      	ldr	r3, [r7, #20]
 8010022:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010024:	2112      	movs	r1, #18
 8010026:	6978      	ldr	r0, [r7, #20]
 8010028:	f002 fc9a 	bl	8012960 <tcp_enqueue_flags>
 801002c:	4603      	mov	r3, r0
 801002e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8010030:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d004      	beq.n	8010042 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8010038:	2100      	movs	r1, #0
 801003a:	6978      	ldr	r0, [r7, #20]
 801003c:	f7fd feda 	bl	800ddf4 <tcp_abandon>
      return;
 8010040:	e006      	b.n	8010050 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8010042:	6978      	ldr	r0, [r7, #20]
 8010044:	f002 fd7a 	bl	8012b3c <tcp_output>
  return;
 8010048:	e001      	b.n	801004e <tcp_listen_input+0x1be>
    return;
 801004a:	bf00      	nop
 801004c:	e000      	b.n	8010050 <tcp_listen_input+0x1c0>
  return;
 801004e:	bf00      	nop
}
 8010050:	371c      	adds	r7, #28
 8010052:	46bd      	mov	sp, r7
 8010054:	bd90      	pop	{r4, r7, pc}
 8010056:	bf00      	nop
 8010058:	200015b4 	.word	0x200015b4
 801005c:	08019ff4 	.word	0x08019ff4
 8010060:	0801a1ec 	.word	0x0801a1ec
 8010064:	0801a040 	.word	0x0801a040
 8010068:	200015ac 	.word	0x200015ac
 801006c:	200015b2 	.word	0x200015b2
 8010070:	200015a8 	.word	0x200015a8
 8010074:	20001598 	.word	0x20001598
 8010078:	2000e404 	.word	0x2000e404
 801007c:	2000e408 	.word	0x2000e408
 8010080:	2000e3f4 	.word	0x2000e3f4
 8010084:	200179f8 	.word	0x200179f8
 8010088:	200179f4 	.word	0x200179f4

0801008c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b086      	sub	sp, #24
 8010090:	af04      	add	r7, sp, #16
 8010092:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010094:	4b2f      	ldr	r3, [pc, #188]	; (8010154 <tcp_timewait_input+0xc8>)
 8010096:	781b      	ldrb	r3, [r3, #0]
 8010098:	f003 0304 	and.w	r3, r3, #4
 801009c:	2b00      	cmp	r3, #0
 801009e:	d153      	bne.n	8010148 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d106      	bne.n	80100b4 <tcp_timewait_input+0x28>
 80100a6:	4b2c      	ldr	r3, [pc, #176]	; (8010158 <tcp_timewait_input+0xcc>)
 80100a8:	f240 22ee 	movw	r2, #750	; 0x2ee
 80100ac:	492b      	ldr	r1, [pc, #172]	; (801015c <tcp_timewait_input+0xd0>)
 80100ae:	482c      	ldr	r0, [pc, #176]	; (8010160 <tcp_timewait_input+0xd4>)
 80100b0:	f006 fae4 	bl	801667c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80100b4:	4b27      	ldr	r3, [pc, #156]	; (8010154 <tcp_timewait_input+0xc8>)
 80100b6:	781b      	ldrb	r3, [r3, #0]
 80100b8:	f003 0302 	and.w	r3, r3, #2
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d02a      	beq.n	8010116 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80100c0:	4b28      	ldr	r3, [pc, #160]	; (8010164 <tcp_timewait_input+0xd8>)
 80100c2:	681a      	ldr	r2, [r3, #0]
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100c8:	1ad3      	subs	r3, r2, r3
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	db2d      	blt.n	801012a <tcp_timewait_input+0x9e>
 80100ce:	4b25      	ldr	r3, [pc, #148]	; (8010164 <tcp_timewait_input+0xd8>)
 80100d0:	681a      	ldr	r2, [r3, #0]
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100d6:	6879      	ldr	r1, [r7, #4]
 80100d8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80100da:	440b      	add	r3, r1
 80100dc:	1ad3      	subs	r3, r2, r3
 80100de:	2b00      	cmp	r3, #0
 80100e0:	dc23      	bgt.n	801012a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80100e2:	4b21      	ldr	r3, [pc, #132]	; (8010168 <tcp_timewait_input+0xdc>)
 80100e4:	6819      	ldr	r1, [r3, #0]
 80100e6:	4b21      	ldr	r3, [pc, #132]	; (801016c <tcp_timewait_input+0xe0>)
 80100e8:	881b      	ldrh	r3, [r3, #0]
 80100ea:	461a      	mov	r2, r3
 80100ec:	4b1d      	ldr	r3, [pc, #116]	; (8010164 <tcp_timewait_input+0xd8>)
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80100f2:	4b1f      	ldr	r3, [pc, #124]	; (8010170 <tcp_timewait_input+0xe4>)
 80100f4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80100f6:	885b      	ldrh	r3, [r3, #2]
 80100f8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80100fa:	4a1d      	ldr	r2, [pc, #116]	; (8010170 <tcp_timewait_input+0xe4>)
 80100fc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80100fe:	8812      	ldrh	r2, [r2, #0]
 8010100:	b292      	uxth	r2, r2
 8010102:	9202      	str	r2, [sp, #8]
 8010104:	9301      	str	r3, [sp, #4]
 8010106:	4b1b      	ldr	r3, [pc, #108]	; (8010174 <tcp_timewait_input+0xe8>)
 8010108:	9300      	str	r3, [sp, #0]
 801010a:	4b1b      	ldr	r3, [pc, #108]	; (8010178 <tcp_timewait_input+0xec>)
 801010c:	4602      	mov	r2, r0
 801010e:	6878      	ldr	r0, [r7, #4]
 8010110:	f003 fac8 	bl	80136a4 <tcp_rst>
      return;
 8010114:	e01b      	b.n	801014e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8010116:	4b0f      	ldr	r3, [pc, #60]	; (8010154 <tcp_timewait_input+0xc8>)
 8010118:	781b      	ldrb	r3, [r3, #0]
 801011a:	f003 0301 	and.w	r3, r3, #1
 801011e:	2b00      	cmp	r3, #0
 8010120:	d003      	beq.n	801012a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010122:	4b16      	ldr	r3, [pc, #88]	; (801017c <tcp_timewait_input+0xf0>)
 8010124:	681a      	ldr	r2, [r3, #0]
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801012a:	4b10      	ldr	r3, [pc, #64]	; (801016c <tcp_timewait_input+0xe0>)
 801012c:	881b      	ldrh	r3, [r3, #0]
 801012e:	2b00      	cmp	r3, #0
 8010130:	d00c      	beq.n	801014c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	8b5b      	ldrh	r3, [r3, #26]
 8010136:	f043 0302 	orr.w	r3, r3, #2
 801013a:	b29a      	uxth	r2, r3
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010140:	6878      	ldr	r0, [r7, #4]
 8010142:	f002 fcfb 	bl	8012b3c <tcp_output>
  }
  return;
 8010146:	e001      	b.n	801014c <tcp_timewait_input+0xc0>
    return;
 8010148:	bf00      	nop
 801014a:	e000      	b.n	801014e <tcp_timewait_input+0xc2>
  return;
 801014c:	bf00      	nop
}
 801014e:	3708      	adds	r7, #8
 8010150:	46bd      	mov	sp, r7
 8010152:	bd80      	pop	{r7, pc}
 8010154:	200015b4 	.word	0x200015b4
 8010158:	08019ff4 	.word	0x08019ff4
 801015c:	0801a20c 	.word	0x0801a20c
 8010160:	0801a040 	.word	0x0801a040
 8010164:	200015a8 	.word	0x200015a8
 8010168:	200015ac 	.word	0x200015ac
 801016c:	200015b2 	.word	0x200015b2
 8010170:	20001598 	.word	0x20001598
 8010174:	2000e404 	.word	0x2000e404
 8010178:	2000e408 	.word	0x2000e408
 801017c:	200179fc 	.word	0x200179fc

08010180 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010180:	b590      	push	{r4, r7, lr}
 8010182:	b08d      	sub	sp, #52	; 0x34
 8010184:	af04      	add	r7, sp, #16
 8010186:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010188:	2300      	movs	r3, #0
 801018a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801018c:	2300      	movs	r3, #0
 801018e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d106      	bne.n	80101a4 <tcp_process+0x24>
 8010196:	4ba5      	ldr	r3, [pc, #660]	; (801042c <tcp_process+0x2ac>)
 8010198:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801019c:	49a4      	ldr	r1, [pc, #656]	; (8010430 <tcp_process+0x2b0>)
 801019e:	48a5      	ldr	r0, [pc, #660]	; (8010434 <tcp_process+0x2b4>)
 80101a0:	f006 fa6c 	bl	801667c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80101a4:	4ba4      	ldr	r3, [pc, #656]	; (8010438 <tcp_process+0x2b8>)
 80101a6:	781b      	ldrb	r3, [r3, #0]
 80101a8:	f003 0304 	and.w	r3, r3, #4
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d04e      	beq.n	801024e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	7d1b      	ldrb	r3, [r3, #20]
 80101b4:	2b02      	cmp	r3, #2
 80101b6:	d108      	bne.n	80101ca <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80101bc:	4b9f      	ldr	r3, [pc, #636]	; (801043c <tcp_process+0x2bc>)
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	429a      	cmp	r2, r3
 80101c2:	d123      	bne.n	801020c <tcp_process+0x8c>
        acceptable = 1;
 80101c4:	2301      	movs	r3, #1
 80101c6:	76fb      	strb	r3, [r7, #27]
 80101c8:	e020      	b.n	801020c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80101ce:	4b9c      	ldr	r3, [pc, #624]	; (8010440 <tcp_process+0x2c0>)
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	429a      	cmp	r2, r3
 80101d4:	d102      	bne.n	80101dc <tcp_process+0x5c>
        acceptable = 1;
 80101d6:	2301      	movs	r3, #1
 80101d8:	76fb      	strb	r3, [r7, #27]
 80101da:	e017      	b.n	801020c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80101dc:	4b98      	ldr	r3, [pc, #608]	; (8010440 <tcp_process+0x2c0>)
 80101de:	681a      	ldr	r2, [r3, #0]
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101e4:	1ad3      	subs	r3, r2, r3
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	db10      	blt.n	801020c <tcp_process+0x8c>
 80101ea:	4b95      	ldr	r3, [pc, #596]	; (8010440 <tcp_process+0x2c0>)
 80101ec:	681a      	ldr	r2, [r3, #0]
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101f2:	6879      	ldr	r1, [r7, #4]
 80101f4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80101f6:	440b      	add	r3, r1
 80101f8:	1ad3      	subs	r3, r2, r3
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	dc06      	bgt.n	801020c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	8b5b      	ldrh	r3, [r3, #26]
 8010202:	f043 0302 	orr.w	r3, r3, #2
 8010206:	b29a      	uxth	r2, r3
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801020c:	7efb      	ldrb	r3, [r7, #27]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d01b      	beq.n	801024a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	7d1b      	ldrb	r3, [r3, #20]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d106      	bne.n	8010228 <tcp_process+0xa8>
 801021a:	4b84      	ldr	r3, [pc, #528]	; (801042c <tcp_process+0x2ac>)
 801021c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8010220:	4988      	ldr	r1, [pc, #544]	; (8010444 <tcp_process+0x2c4>)
 8010222:	4884      	ldr	r0, [pc, #528]	; (8010434 <tcp_process+0x2b4>)
 8010224:	f006 fa2a 	bl	801667c <iprintf>
      recv_flags |= TF_RESET;
 8010228:	4b87      	ldr	r3, [pc, #540]	; (8010448 <tcp_process+0x2c8>)
 801022a:	781b      	ldrb	r3, [r3, #0]
 801022c:	f043 0308 	orr.w	r3, r3, #8
 8010230:	b2da      	uxtb	r2, r3
 8010232:	4b85      	ldr	r3, [pc, #532]	; (8010448 <tcp_process+0x2c8>)
 8010234:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	8b5b      	ldrh	r3, [r3, #26]
 801023a:	f023 0301 	bic.w	r3, r3, #1
 801023e:	b29a      	uxth	r2, r3
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010244:	f06f 030d 	mvn.w	r3, #13
 8010248:	e37a      	b.n	8010940 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801024a:	2300      	movs	r3, #0
 801024c:	e378      	b.n	8010940 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801024e:	4b7a      	ldr	r3, [pc, #488]	; (8010438 <tcp_process+0x2b8>)
 8010250:	781b      	ldrb	r3, [r3, #0]
 8010252:	f003 0302 	and.w	r3, r3, #2
 8010256:	2b00      	cmp	r3, #0
 8010258:	d010      	beq.n	801027c <tcp_process+0xfc>
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	7d1b      	ldrb	r3, [r3, #20]
 801025e:	2b02      	cmp	r3, #2
 8010260:	d00c      	beq.n	801027c <tcp_process+0xfc>
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	7d1b      	ldrb	r3, [r3, #20]
 8010266:	2b03      	cmp	r3, #3
 8010268:	d008      	beq.n	801027c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	8b5b      	ldrh	r3, [r3, #26]
 801026e:	f043 0302 	orr.w	r3, r3, #2
 8010272:	b29a      	uxth	r2, r3
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010278:	2300      	movs	r3, #0
 801027a:	e361      	b.n	8010940 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	8b5b      	ldrh	r3, [r3, #26]
 8010280:	f003 0310 	and.w	r3, r3, #16
 8010284:	2b00      	cmp	r3, #0
 8010286:	d103      	bne.n	8010290 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010288:	4b70      	ldr	r3, [pc, #448]	; (801044c <tcp_process+0x2cc>)
 801028a:	681a      	ldr	r2, [r3, #0]
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	2200      	movs	r2, #0
 8010294:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	2200      	movs	r2, #0
 801029c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80102a0:	6878      	ldr	r0, [r7, #4]
 80102a2:	f001 fc2d 	bl	8011b00 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	7d1b      	ldrb	r3, [r3, #20]
 80102aa:	3b02      	subs	r3, #2
 80102ac:	2b07      	cmp	r3, #7
 80102ae:	f200 8337 	bhi.w	8010920 <tcp_process+0x7a0>
 80102b2:	a201      	add	r2, pc, #4	; (adr r2, 80102b8 <tcp_process+0x138>)
 80102b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102b8:	080102d9 	.word	0x080102d9
 80102bc:	08010509 	.word	0x08010509
 80102c0:	08010681 	.word	0x08010681
 80102c4:	080106ab 	.word	0x080106ab
 80102c8:	080107cf 	.word	0x080107cf
 80102cc:	08010681 	.word	0x08010681
 80102d0:	0801085b 	.word	0x0801085b
 80102d4:	080108eb 	.word	0x080108eb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80102d8:	4b57      	ldr	r3, [pc, #348]	; (8010438 <tcp_process+0x2b8>)
 80102da:	781b      	ldrb	r3, [r3, #0]
 80102dc:	f003 0310 	and.w	r3, r3, #16
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	f000 80e4 	beq.w	80104ae <tcp_process+0x32e>
 80102e6:	4b54      	ldr	r3, [pc, #336]	; (8010438 <tcp_process+0x2b8>)
 80102e8:	781b      	ldrb	r3, [r3, #0]
 80102ea:	f003 0302 	and.w	r3, r3, #2
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	f000 80dd 	beq.w	80104ae <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102f8:	1c5a      	adds	r2, r3, #1
 80102fa:	4b50      	ldr	r3, [pc, #320]	; (801043c <tcp_process+0x2bc>)
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	429a      	cmp	r2, r3
 8010300:	f040 80d5 	bne.w	80104ae <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010304:	4b4e      	ldr	r3, [pc, #312]	; (8010440 <tcp_process+0x2c0>)
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	1c5a      	adds	r2, r3, #1
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8010316:	4b49      	ldr	r3, [pc, #292]	; (801043c <tcp_process+0x2bc>)
 8010318:	681a      	ldr	r2, [r3, #0]
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801031e:	4b4c      	ldr	r3, [pc, #304]	; (8010450 <tcp_process+0x2d0>)
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	89db      	ldrh	r3, [r3, #14]
 8010324:	b29a      	uxth	r2, r3
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010338:	4b41      	ldr	r3, [pc, #260]	; (8010440 <tcp_process+0x2c0>)
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	1e5a      	subs	r2, r3, #1
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	2204      	movs	r2, #4
 8010346:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	3304      	adds	r3, #4
 8010350:	4618      	mov	r0, r3
 8010352:	f004 ff47 	bl	80151e4 <ip4_route>
 8010356:	4601      	mov	r1, r0
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	3304      	adds	r3, #4
 801035c:	461a      	mov	r2, r3
 801035e:	4620      	mov	r0, r4
 8010360:	f7ff f88e 	bl	800f480 <tcp_eff_send_mss_netif>
 8010364:	4603      	mov	r3, r0
 8010366:	461a      	mov	r2, r3
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010370:	009a      	lsls	r2, r3, #2
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010376:	005b      	lsls	r3, r3, #1
 8010378:	f241 111c 	movw	r1, #4380	; 0x111c
 801037c:	428b      	cmp	r3, r1
 801037e:	bf38      	it	cc
 8010380:	460b      	movcc	r3, r1
 8010382:	429a      	cmp	r2, r3
 8010384:	d204      	bcs.n	8010390 <tcp_process+0x210>
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801038a:	009b      	lsls	r3, r3, #2
 801038c:	b29b      	uxth	r3, r3
 801038e:	e00d      	b.n	80103ac <tcp_process+0x22c>
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010394:	005b      	lsls	r3, r3, #1
 8010396:	f241 121c 	movw	r2, #4380	; 0x111c
 801039a:	4293      	cmp	r3, r2
 801039c:	d904      	bls.n	80103a8 <tcp_process+0x228>
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80103a2:	005b      	lsls	r3, r3, #1
 80103a4:	b29b      	uxth	r3, r3
 80103a6:	e001      	b.n	80103ac <tcp_process+0x22c>
 80103a8:	f241 131c 	movw	r3, #4380	; 0x111c
 80103ac:	687a      	ldr	r2, [r7, #4]
 80103ae:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d106      	bne.n	80103ca <tcp_process+0x24a>
 80103bc:	4b1b      	ldr	r3, [pc, #108]	; (801042c <tcp_process+0x2ac>)
 80103be:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80103c2:	4924      	ldr	r1, [pc, #144]	; (8010454 <tcp_process+0x2d4>)
 80103c4:	481b      	ldr	r0, [pc, #108]	; (8010434 <tcp_process+0x2b4>)
 80103c6:	f006 f959 	bl	801667c <iprintf>
        --pcb->snd_queuelen;
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80103d0:	3b01      	subs	r3, #1
 80103d2:	b29a      	uxth	r2, r3
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103de:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80103e0:	69fb      	ldr	r3, [r7, #28]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d111      	bne.n	801040a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80103ea:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80103ec:	69fb      	ldr	r3, [r7, #28]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d106      	bne.n	8010400 <tcp_process+0x280>
 80103f2:	4b0e      	ldr	r3, [pc, #56]	; (801042c <tcp_process+0x2ac>)
 80103f4:	f44f 725d 	mov.w	r2, #884	; 0x374
 80103f8:	4917      	ldr	r1, [pc, #92]	; (8010458 <tcp_process+0x2d8>)
 80103fa:	480e      	ldr	r0, [pc, #56]	; (8010434 <tcp_process+0x2b4>)
 80103fc:	f006 f93e 	bl	801667c <iprintf>
          pcb->unsent = rseg->next;
 8010400:	69fb      	ldr	r3, [r7, #28]
 8010402:	681a      	ldr	r2, [r3, #0]
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	66da      	str	r2, [r3, #108]	; 0x6c
 8010408:	e003      	b.n	8010412 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 801040a:	69fb      	ldr	r3, [r7, #28]
 801040c:	681a      	ldr	r2, [r3, #0]
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8010412:	69f8      	ldr	r0, [r7, #28]
 8010414:	f7fe fc51 	bl	800ecba <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801041c:	2b00      	cmp	r3, #0
 801041e:	d11d      	bne.n	801045c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010426:	861a      	strh	r2, [r3, #48]	; 0x30
 8010428:	e01f      	b.n	801046a <tcp_process+0x2ea>
 801042a:	bf00      	nop
 801042c:	08019ff4 	.word	0x08019ff4
 8010430:	0801a22c 	.word	0x0801a22c
 8010434:	0801a040 	.word	0x0801a040
 8010438:	200015b4 	.word	0x200015b4
 801043c:	200015ac 	.word	0x200015ac
 8010440:	200015a8 	.word	0x200015a8
 8010444:	0801a248 	.word	0x0801a248
 8010448:	200015b5 	.word	0x200015b5
 801044c:	200179fc 	.word	0x200179fc
 8010450:	20001598 	.word	0x20001598
 8010454:	0801a268 	.word	0x0801a268
 8010458:	0801a280 	.word	0x0801a280
        } else {
          pcb->rtime = 0;
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	2200      	movs	r2, #0
 8010460:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	2200      	movs	r2, #0
 8010466:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010470:	2b00      	cmp	r3, #0
 8010472:	d00a      	beq.n	801048a <tcp_process+0x30a>
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801047a:	687a      	ldr	r2, [r7, #4]
 801047c:	6910      	ldr	r0, [r2, #16]
 801047e:	2200      	movs	r2, #0
 8010480:	6879      	ldr	r1, [r7, #4]
 8010482:	4798      	blx	r3
 8010484:	4603      	mov	r3, r0
 8010486:	76bb      	strb	r3, [r7, #26]
 8010488:	e001      	b.n	801048e <tcp_process+0x30e>
 801048a:	2300      	movs	r3, #0
 801048c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801048e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010492:	f113 0f0d 	cmn.w	r3, #13
 8010496:	d102      	bne.n	801049e <tcp_process+0x31e>
          return ERR_ABRT;
 8010498:	f06f 030c 	mvn.w	r3, #12
 801049c:	e250      	b.n	8010940 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	8b5b      	ldrh	r3, [r3, #26]
 80104a2:	f043 0302 	orr.w	r3, r3, #2
 80104a6:	b29a      	uxth	r2, r3
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80104ac:	e23a      	b.n	8010924 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80104ae:	4b9d      	ldr	r3, [pc, #628]	; (8010724 <tcp_process+0x5a4>)
 80104b0:	781b      	ldrb	r3, [r3, #0]
 80104b2:	f003 0310 	and.w	r3, r3, #16
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	f000 8234 	beq.w	8010924 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80104bc:	4b9a      	ldr	r3, [pc, #616]	; (8010728 <tcp_process+0x5a8>)
 80104be:	6819      	ldr	r1, [r3, #0]
 80104c0:	4b9a      	ldr	r3, [pc, #616]	; (801072c <tcp_process+0x5ac>)
 80104c2:	881b      	ldrh	r3, [r3, #0]
 80104c4:	461a      	mov	r2, r3
 80104c6:	4b9a      	ldr	r3, [pc, #616]	; (8010730 <tcp_process+0x5b0>)
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80104cc:	4b99      	ldr	r3, [pc, #612]	; (8010734 <tcp_process+0x5b4>)
 80104ce:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80104d0:	885b      	ldrh	r3, [r3, #2]
 80104d2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80104d4:	4a97      	ldr	r2, [pc, #604]	; (8010734 <tcp_process+0x5b4>)
 80104d6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80104d8:	8812      	ldrh	r2, [r2, #0]
 80104da:	b292      	uxth	r2, r2
 80104dc:	9202      	str	r2, [sp, #8]
 80104de:	9301      	str	r3, [sp, #4]
 80104e0:	4b95      	ldr	r3, [pc, #596]	; (8010738 <tcp_process+0x5b8>)
 80104e2:	9300      	str	r3, [sp, #0]
 80104e4:	4b95      	ldr	r3, [pc, #596]	; (801073c <tcp_process+0x5bc>)
 80104e6:	4602      	mov	r2, r0
 80104e8:	6878      	ldr	r0, [r7, #4]
 80104ea:	f003 f8db 	bl	80136a4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80104f4:	2b05      	cmp	r3, #5
 80104f6:	f200 8215 	bhi.w	8010924 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	2200      	movs	r2, #0
 80104fe:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8010500:	6878      	ldr	r0, [r7, #4]
 8010502:	f002 fea5 	bl	8013250 <tcp_rexmit_rto>
      break;
 8010506:	e20d      	b.n	8010924 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010508:	4b86      	ldr	r3, [pc, #536]	; (8010724 <tcp_process+0x5a4>)
 801050a:	781b      	ldrb	r3, [r3, #0]
 801050c:	f003 0310 	and.w	r3, r3, #16
 8010510:	2b00      	cmp	r3, #0
 8010512:	f000 80a1 	beq.w	8010658 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010516:	4b84      	ldr	r3, [pc, #528]	; (8010728 <tcp_process+0x5a8>)
 8010518:	681a      	ldr	r2, [r3, #0]
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801051e:	1ad3      	subs	r3, r2, r3
 8010520:	3b01      	subs	r3, #1
 8010522:	2b00      	cmp	r3, #0
 8010524:	db7e      	blt.n	8010624 <tcp_process+0x4a4>
 8010526:	4b80      	ldr	r3, [pc, #512]	; (8010728 <tcp_process+0x5a8>)
 8010528:	681a      	ldr	r2, [r3, #0]
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801052e:	1ad3      	subs	r3, r2, r3
 8010530:	2b00      	cmp	r3, #0
 8010532:	dc77      	bgt.n	8010624 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	2204      	movs	r2, #4
 8010538:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801053e:	2b00      	cmp	r3, #0
 8010540:	d102      	bne.n	8010548 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010542:	23fa      	movs	r3, #250	; 0xfa
 8010544:	76bb      	strb	r3, [r7, #26]
 8010546:	e01d      	b.n	8010584 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801054c:	699b      	ldr	r3, [r3, #24]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d106      	bne.n	8010560 <tcp_process+0x3e0>
 8010552:	4b7b      	ldr	r3, [pc, #492]	; (8010740 <tcp_process+0x5c0>)
 8010554:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8010558:	497a      	ldr	r1, [pc, #488]	; (8010744 <tcp_process+0x5c4>)
 801055a:	487b      	ldr	r0, [pc, #492]	; (8010748 <tcp_process+0x5c8>)
 801055c:	f006 f88e 	bl	801667c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010564:	699b      	ldr	r3, [r3, #24]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d00a      	beq.n	8010580 <tcp_process+0x400>
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801056e:	699b      	ldr	r3, [r3, #24]
 8010570:	687a      	ldr	r2, [r7, #4]
 8010572:	6910      	ldr	r0, [r2, #16]
 8010574:	2200      	movs	r2, #0
 8010576:	6879      	ldr	r1, [r7, #4]
 8010578:	4798      	blx	r3
 801057a:	4603      	mov	r3, r0
 801057c:	76bb      	strb	r3, [r7, #26]
 801057e:	e001      	b.n	8010584 <tcp_process+0x404>
 8010580:	23f0      	movs	r3, #240	; 0xf0
 8010582:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010584:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d00a      	beq.n	80105a2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801058c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010590:	f113 0f0d 	cmn.w	r3, #13
 8010594:	d002      	beq.n	801059c <tcp_process+0x41c>
              tcp_abort(pcb);
 8010596:	6878      	ldr	r0, [r7, #4]
 8010598:	f7fd fcea 	bl	800df70 <tcp_abort>
            }
            return ERR_ABRT;
 801059c:	f06f 030c 	mvn.w	r3, #12
 80105a0:	e1ce      	b.n	8010940 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80105a2:	6878      	ldr	r0, [r7, #4]
 80105a4:	f000 fae0 	bl	8010b68 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80105a8:	4b68      	ldr	r3, [pc, #416]	; (801074c <tcp_process+0x5cc>)
 80105aa:	881b      	ldrh	r3, [r3, #0]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d005      	beq.n	80105bc <tcp_process+0x43c>
            recv_acked--;
 80105b0:	4b66      	ldr	r3, [pc, #408]	; (801074c <tcp_process+0x5cc>)
 80105b2:	881b      	ldrh	r3, [r3, #0]
 80105b4:	3b01      	subs	r3, #1
 80105b6:	b29a      	uxth	r2, r3
 80105b8:	4b64      	ldr	r3, [pc, #400]	; (801074c <tcp_process+0x5cc>)
 80105ba:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80105c0:	009a      	lsls	r2, r3, #2
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80105c6:	005b      	lsls	r3, r3, #1
 80105c8:	f241 111c 	movw	r1, #4380	; 0x111c
 80105cc:	428b      	cmp	r3, r1
 80105ce:	bf38      	it	cc
 80105d0:	460b      	movcc	r3, r1
 80105d2:	429a      	cmp	r2, r3
 80105d4:	d204      	bcs.n	80105e0 <tcp_process+0x460>
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80105da:	009b      	lsls	r3, r3, #2
 80105dc:	b29b      	uxth	r3, r3
 80105de:	e00d      	b.n	80105fc <tcp_process+0x47c>
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80105e4:	005b      	lsls	r3, r3, #1
 80105e6:	f241 121c 	movw	r2, #4380	; 0x111c
 80105ea:	4293      	cmp	r3, r2
 80105ec:	d904      	bls.n	80105f8 <tcp_process+0x478>
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80105f2:	005b      	lsls	r3, r3, #1
 80105f4:	b29b      	uxth	r3, r3
 80105f6:	e001      	b.n	80105fc <tcp_process+0x47c>
 80105f8:	f241 131c 	movw	r3, #4380	; 0x111c
 80105fc:	687a      	ldr	r2, [r7, #4]
 80105fe:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8010602:	4b53      	ldr	r3, [pc, #332]	; (8010750 <tcp_process+0x5d0>)
 8010604:	781b      	ldrb	r3, [r3, #0]
 8010606:	f003 0320 	and.w	r3, r3, #32
 801060a:	2b00      	cmp	r3, #0
 801060c:	d037      	beq.n	801067e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	8b5b      	ldrh	r3, [r3, #26]
 8010612:	f043 0302 	orr.w	r3, r3, #2
 8010616:	b29a      	uxth	r2, r3
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	2207      	movs	r2, #7
 8010620:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8010622:	e02c      	b.n	801067e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010624:	4b40      	ldr	r3, [pc, #256]	; (8010728 <tcp_process+0x5a8>)
 8010626:	6819      	ldr	r1, [r3, #0]
 8010628:	4b40      	ldr	r3, [pc, #256]	; (801072c <tcp_process+0x5ac>)
 801062a:	881b      	ldrh	r3, [r3, #0]
 801062c:	461a      	mov	r2, r3
 801062e:	4b40      	ldr	r3, [pc, #256]	; (8010730 <tcp_process+0x5b0>)
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010634:	4b3f      	ldr	r3, [pc, #252]	; (8010734 <tcp_process+0x5b4>)
 8010636:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010638:	885b      	ldrh	r3, [r3, #2]
 801063a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801063c:	4a3d      	ldr	r2, [pc, #244]	; (8010734 <tcp_process+0x5b4>)
 801063e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010640:	8812      	ldrh	r2, [r2, #0]
 8010642:	b292      	uxth	r2, r2
 8010644:	9202      	str	r2, [sp, #8]
 8010646:	9301      	str	r3, [sp, #4]
 8010648:	4b3b      	ldr	r3, [pc, #236]	; (8010738 <tcp_process+0x5b8>)
 801064a:	9300      	str	r3, [sp, #0]
 801064c:	4b3b      	ldr	r3, [pc, #236]	; (801073c <tcp_process+0x5bc>)
 801064e:	4602      	mov	r2, r0
 8010650:	6878      	ldr	r0, [r7, #4]
 8010652:	f003 f827 	bl	80136a4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8010656:	e167      	b.n	8010928 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010658:	4b32      	ldr	r3, [pc, #200]	; (8010724 <tcp_process+0x5a4>)
 801065a:	781b      	ldrb	r3, [r3, #0]
 801065c:	f003 0302 	and.w	r3, r3, #2
 8010660:	2b00      	cmp	r3, #0
 8010662:	f000 8161 	beq.w	8010928 <tcp_process+0x7a8>
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801066a:	1e5a      	subs	r2, r3, #1
 801066c:	4b30      	ldr	r3, [pc, #192]	; (8010730 <tcp_process+0x5b0>)
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	429a      	cmp	r2, r3
 8010672:	f040 8159 	bne.w	8010928 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8010676:	6878      	ldr	r0, [r7, #4]
 8010678:	f002 fe0c 	bl	8013294 <tcp_rexmit>
      break;
 801067c:	e154      	b.n	8010928 <tcp_process+0x7a8>
 801067e:	e153      	b.n	8010928 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010680:	6878      	ldr	r0, [r7, #4]
 8010682:	f000 fa71 	bl	8010b68 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8010686:	4b32      	ldr	r3, [pc, #200]	; (8010750 <tcp_process+0x5d0>)
 8010688:	781b      	ldrb	r3, [r3, #0]
 801068a:	f003 0320 	and.w	r3, r3, #32
 801068e:	2b00      	cmp	r3, #0
 8010690:	f000 814c 	beq.w	801092c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	8b5b      	ldrh	r3, [r3, #26]
 8010698:	f043 0302 	orr.w	r3, r3, #2
 801069c:	b29a      	uxth	r2, r3
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	2207      	movs	r2, #7
 80106a6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80106a8:	e140      	b.n	801092c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80106aa:	6878      	ldr	r0, [r7, #4]
 80106ac:	f000 fa5c 	bl	8010b68 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80106b0:	4b27      	ldr	r3, [pc, #156]	; (8010750 <tcp_process+0x5d0>)
 80106b2:	781b      	ldrb	r3, [r3, #0]
 80106b4:	f003 0320 	and.w	r3, r3, #32
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d071      	beq.n	80107a0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80106bc:	4b19      	ldr	r3, [pc, #100]	; (8010724 <tcp_process+0x5a4>)
 80106be:	781b      	ldrb	r3, [r3, #0]
 80106c0:	f003 0310 	and.w	r3, r3, #16
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d060      	beq.n	801078a <tcp_process+0x60a>
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80106cc:	4b16      	ldr	r3, [pc, #88]	; (8010728 <tcp_process+0x5a8>)
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	429a      	cmp	r2, r3
 80106d2:	d15a      	bne.n	801078a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d156      	bne.n	801078a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	8b5b      	ldrh	r3, [r3, #26]
 80106e0:	f043 0302 	orr.w	r3, r3, #2
 80106e4:	b29a      	uxth	r2, r3
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80106ea:	6878      	ldr	r0, [r7, #4]
 80106ec:	f7fe fdbe 	bl	800f26c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80106f0:	4b18      	ldr	r3, [pc, #96]	; (8010754 <tcp_process+0x5d4>)
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	687a      	ldr	r2, [r7, #4]
 80106f6:	429a      	cmp	r2, r3
 80106f8:	d105      	bne.n	8010706 <tcp_process+0x586>
 80106fa:	4b16      	ldr	r3, [pc, #88]	; (8010754 <tcp_process+0x5d4>)
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	68db      	ldr	r3, [r3, #12]
 8010700:	4a14      	ldr	r2, [pc, #80]	; (8010754 <tcp_process+0x5d4>)
 8010702:	6013      	str	r3, [r2, #0]
 8010704:	e02e      	b.n	8010764 <tcp_process+0x5e4>
 8010706:	4b13      	ldr	r3, [pc, #76]	; (8010754 <tcp_process+0x5d4>)
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	617b      	str	r3, [r7, #20]
 801070c:	e027      	b.n	801075e <tcp_process+0x5de>
 801070e:	697b      	ldr	r3, [r7, #20]
 8010710:	68db      	ldr	r3, [r3, #12]
 8010712:	687a      	ldr	r2, [r7, #4]
 8010714:	429a      	cmp	r2, r3
 8010716:	d11f      	bne.n	8010758 <tcp_process+0x5d8>
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	68da      	ldr	r2, [r3, #12]
 801071c:	697b      	ldr	r3, [r7, #20]
 801071e:	60da      	str	r2, [r3, #12]
 8010720:	e020      	b.n	8010764 <tcp_process+0x5e4>
 8010722:	bf00      	nop
 8010724:	200015b4 	.word	0x200015b4
 8010728:	200015ac 	.word	0x200015ac
 801072c:	200015b2 	.word	0x200015b2
 8010730:	200015a8 	.word	0x200015a8
 8010734:	20001598 	.word	0x20001598
 8010738:	2000e404 	.word	0x2000e404
 801073c:	2000e408 	.word	0x2000e408
 8010740:	08019ff4 	.word	0x08019ff4
 8010744:	0801a294 	.word	0x0801a294
 8010748:	0801a040 	.word	0x0801a040
 801074c:	200015b0 	.word	0x200015b0
 8010750:	200015b5 	.word	0x200015b5
 8010754:	200179f8 	.word	0x200179f8
 8010758:	697b      	ldr	r3, [r7, #20]
 801075a:	68db      	ldr	r3, [r3, #12]
 801075c:	617b      	str	r3, [r7, #20]
 801075e:	697b      	ldr	r3, [r7, #20]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d1d4      	bne.n	801070e <tcp_process+0x58e>
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	2200      	movs	r2, #0
 8010768:	60da      	str	r2, [r3, #12]
 801076a:	4b77      	ldr	r3, [pc, #476]	; (8010948 <tcp_process+0x7c8>)
 801076c:	2201      	movs	r2, #1
 801076e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	220a      	movs	r2, #10
 8010774:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8010776:	4b75      	ldr	r3, [pc, #468]	; (801094c <tcp_process+0x7cc>)
 8010778:	681a      	ldr	r2, [r3, #0]
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	60da      	str	r2, [r3, #12]
 801077e:	4a73      	ldr	r2, [pc, #460]	; (801094c <tcp_process+0x7cc>)
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	6013      	str	r3, [r2, #0]
 8010784:	f003 f950 	bl	8013a28 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010788:	e0d2      	b.n	8010930 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	8b5b      	ldrh	r3, [r3, #26]
 801078e:	f043 0302 	orr.w	r3, r3, #2
 8010792:	b29a      	uxth	r2, r3
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	2208      	movs	r2, #8
 801079c:	751a      	strb	r2, [r3, #20]
      break;
 801079e:	e0c7      	b.n	8010930 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80107a0:	4b6b      	ldr	r3, [pc, #428]	; (8010950 <tcp_process+0x7d0>)
 80107a2:	781b      	ldrb	r3, [r3, #0]
 80107a4:	f003 0310 	and.w	r3, r3, #16
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	f000 80c1 	beq.w	8010930 <tcp_process+0x7b0>
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80107b2:	4b68      	ldr	r3, [pc, #416]	; (8010954 <tcp_process+0x7d4>)
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	429a      	cmp	r2, r3
 80107b8:	f040 80ba 	bne.w	8010930 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	f040 80b5 	bne.w	8010930 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	2206      	movs	r2, #6
 80107ca:	751a      	strb	r2, [r3, #20]
      break;
 80107cc:	e0b0      	b.n	8010930 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80107ce:	6878      	ldr	r0, [r7, #4]
 80107d0:	f000 f9ca 	bl	8010b68 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80107d4:	4b60      	ldr	r3, [pc, #384]	; (8010958 <tcp_process+0x7d8>)
 80107d6:	781b      	ldrb	r3, [r3, #0]
 80107d8:	f003 0320 	and.w	r3, r3, #32
 80107dc:	2b00      	cmp	r3, #0
 80107de:	f000 80a9 	beq.w	8010934 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	8b5b      	ldrh	r3, [r3, #26]
 80107e6:	f043 0302 	orr.w	r3, r3, #2
 80107ea:	b29a      	uxth	r2, r3
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80107f0:	6878      	ldr	r0, [r7, #4]
 80107f2:	f7fe fd3b 	bl	800f26c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80107f6:	4b59      	ldr	r3, [pc, #356]	; (801095c <tcp_process+0x7dc>)
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	687a      	ldr	r2, [r7, #4]
 80107fc:	429a      	cmp	r2, r3
 80107fe:	d105      	bne.n	801080c <tcp_process+0x68c>
 8010800:	4b56      	ldr	r3, [pc, #344]	; (801095c <tcp_process+0x7dc>)
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	68db      	ldr	r3, [r3, #12]
 8010806:	4a55      	ldr	r2, [pc, #340]	; (801095c <tcp_process+0x7dc>)
 8010808:	6013      	str	r3, [r2, #0]
 801080a:	e013      	b.n	8010834 <tcp_process+0x6b4>
 801080c:	4b53      	ldr	r3, [pc, #332]	; (801095c <tcp_process+0x7dc>)
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	613b      	str	r3, [r7, #16]
 8010812:	e00c      	b.n	801082e <tcp_process+0x6ae>
 8010814:	693b      	ldr	r3, [r7, #16]
 8010816:	68db      	ldr	r3, [r3, #12]
 8010818:	687a      	ldr	r2, [r7, #4]
 801081a:	429a      	cmp	r2, r3
 801081c:	d104      	bne.n	8010828 <tcp_process+0x6a8>
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	68da      	ldr	r2, [r3, #12]
 8010822:	693b      	ldr	r3, [r7, #16]
 8010824:	60da      	str	r2, [r3, #12]
 8010826:	e005      	b.n	8010834 <tcp_process+0x6b4>
 8010828:	693b      	ldr	r3, [r7, #16]
 801082a:	68db      	ldr	r3, [r3, #12]
 801082c:	613b      	str	r3, [r7, #16]
 801082e:	693b      	ldr	r3, [r7, #16]
 8010830:	2b00      	cmp	r3, #0
 8010832:	d1ef      	bne.n	8010814 <tcp_process+0x694>
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	2200      	movs	r2, #0
 8010838:	60da      	str	r2, [r3, #12]
 801083a:	4b43      	ldr	r3, [pc, #268]	; (8010948 <tcp_process+0x7c8>)
 801083c:	2201      	movs	r2, #1
 801083e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	220a      	movs	r2, #10
 8010844:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010846:	4b41      	ldr	r3, [pc, #260]	; (801094c <tcp_process+0x7cc>)
 8010848:	681a      	ldr	r2, [r3, #0]
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	60da      	str	r2, [r3, #12]
 801084e:	4a3f      	ldr	r2, [pc, #252]	; (801094c <tcp_process+0x7cc>)
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	6013      	str	r3, [r2, #0]
 8010854:	f003 f8e8 	bl	8013a28 <tcp_timer_needed>
      }
      break;
 8010858:	e06c      	b.n	8010934 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801085a:	6878      	ldr	r0, [r7, #4]
 801085c:	f000 f984 	bl	8010b68 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010860:	4b3b      	ldr	r3, [pc, #236]	; (8010950 <tcp_process+0x7d0>)
 8010862:	781b      	ldrb	r3, [r3, #0]
 8010864:	f003 0310 	and.w	r3, r3, #16
 8010868:	2b00      	cmp	r3, #0
 801086a:	d065      	beq.n	8010938 <tcp_process+0x7b8>
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010870:	4b38      	ldr	r3, [pc, #224]	; (8010954 <tcp_process+0x7d4>)
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	429a      	cmp	r2, r3
 8010876:	d15f      	bne.n	8010938 <tcp_process+0x7b8>
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801087c:	2b00      	cmp	r3, #0
 801087e:	d15b      	bne.n	8010938 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010880:	6878      	ldr	r0, [r7, #4]
 8010882:	f7fe fcf3 	bl	800f26c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010886:	4b35      	ldr	r3, [pc, #212]	; (801095c <tcp_process+0x7dc>)
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	687a      	ldr	r2, [r7, #4]
 801088c:	429a      	cmp	r2, r3
 801088e:	d105      	bne.n	801089c <tcp_process+0x71c>
 8010890:	4b32      	ldr	r3, [pc, #200]	; (801095c <tcp_process+0x7dc>)
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	68db      	ldr	r3, [r3, #12]
 8010896:	4a31      	ldr	r2, [pc, #196]	; (801095c <tcp_process+0x7dc>)
 8010898:	6013      	str	r3, [r2, #0]
 801089a:	e013      	b.n	80108c4 <tcp_process+0x744>
 801089c:	4b2f      	ldr	r3, [pc, #188]	; (801095c <tcp_process+0x7dc>)
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	60fb      	str	r3, [r7, #12]
 80108a2:	e00c      	b.n	80108be <tcp_process+0x73e>
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	68db      	ldr	r3, [r3, #12]
 80108a8:	687a      	ldr	r2, [r7, #4]
 80108aa:	429a      	cmp	r2, r3
 80108ac:	d104      	bne.n	80108b8 <tcp_process+0x738>
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	68da      	ldr	r2, [r3, #12]
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	60da      	str	r2, [r3, #12]
 80108b6:	e005      	b.n	80108c4 <tcp_process+0x744>
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	68db      	ldr	r3, [r3, #12]
 80108bc:	60fb      	str	r3, [r7, #12]
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d1ef      	bne.n	80108a4 <tcp_process+0x724>
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	2200      	movs	r2, #0
 80108c8:	60da      	str	r2, [r3, #12]
 80108ca:	4b1f      	ldr	r3, [pc, #124]	; (8010948 <tcp_process+0x7c8>)
 80108cc:	2201      	movs	r2, #1
 80108ce:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	220a      	movs	r2, #10
 80108d4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80108d6:	4b1d      	ldr	r3, [pc, #116]	; (801094c <tcp_process+0x7cc>)
 80108d8:	681a      	ldr	r2, [r3, #0]
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	60da      	str	r2, [r3, #12]
 80108de:	4a1b      	ldr	r2, [pc, #108]	; (801094c <tcp_process+0x7cc>)
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	6013      	str	r3, [r2, #0]
 80108e4:	f003 f8a0 	bl	8013a28 <tcp_timer_needed>
      }
      break;
 80108e8:	e026      	b.n	8010938 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80108ea:	6878      	ldr	r0, [r7, #4]
 80108ec:	f000 f93c 	bl	8010b68 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80108f0:	4b17      	ldr	r3, [pc, #92]	; (8010950 <tcp_process+0x7d0>)
 80108f2:	781b      	ldrb	r3, [r3, #0]
 80108f4:	f003 0310 	and.w	r3, r3, #16
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d01f      	beq.n	801093c <tcp_process+0x7bc>
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010900:	4b14      	ldr	r3, [pc, #80]	; (8010954 <tcp_process+0x7d4>)
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	429a      	cmp	r2, r3
 8010906:	d119      	bne.n	801093c <tcp_process+0x7bc>
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801090c:	2b00      	cmp	r3, #0
 801090e:	d115      	bne.n	801093c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010910:	4b11      	ldr	r3, [pc, #68]	; (8010958 <tcp_process+0x7d8>)
 8010912:	781b      	ldrb	r3, [r3, #0]
 8010914:	f043 0310 	orr.w	r3, r3, #16
 8010918:	b2da      	uxtb	r2, r3
 801091a:	4b0f      	ldr	r3, [pc, #60]	; (8010958 <tcp_process+0x7d8>)
 801091c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801091e:	e00d      	b.n	801093c <tcp_process+0x7bc>
    default:
      break;
 8010920:	bf00      	nop
 8010922:	e00c      	b.n	801093e <tcp_process+0x7be>
      break;
 8010924:	bf00      	nop
 8010926:	e00a      	b.n	801093e <tcp_process+0x7be>
      break;
 8010928:	bf00      	nop
 801092a:	e008      	b.n	801093e <tcp_process+0x7be>
      break;
 801092c:	bf00      	nop
 801092e:	e006      	b.n	801093e <tcp_process+0x7be>
      break;
 8010930:	bf00      	nop
 8010932:	e004      	b.n	801093e <tcp_process+0x7be>
      break;
 8010934:	bf00      	nop
 8010936:	e002      	b.n	801093e <tcp_process+0x7be>
      break;
 8010938:	bf00      	nop
 801093a:	e000      	b.n	801093e <tcp_process+0x7be>
      break;
 801093c:	bf00      	nop
  }
  return ERR_OK;
 801093e:	2300      	movs	r3, #0
}
 8010940:	4618      	mov	r0, r3
 8010942:	3724      	adds	r7, #36	; 0x24
 8010944:	46bd      	mov	sp, r7
 8010946:	bd90      	pop	{r4, r7, pc}
 8010948:	200179f4 	.word	0x200179f4
 801094c:	20017a08 	.word	0x20017a08
 8010950:	200015b4 	.word	0x200015b4
 8010954:	200015ac 	.word	0x200015ac
 8010958:	200015b5 	.word	0x200015b5
 801095c:	200179f8 	.word	0x200179f8

08010960 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010960:	b590      	push	{r4, r7, lr}
 8010962:	b085      	sub	sp, #20
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
 8010968:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d106      	bne.n	801097e <tcp_oos_insert_segment+0x1e>
 8010970:	4b3b      	ldr	r3, [pc, #236]	; (8010a60 <tcp_oos_insert_segment+0x100>)
 8010972:	f240 421f 	movw	r2, #1055	; 0x41f
 8010976:	493b      	ldr	r1, [pc, #236]	; (8010a64 <tcp_oos_insert_segment+0x104>)
 8010978:	483b      	ldr	r0, [pc, #236]	; (8010a68 <tcp_oos_insert_segment+0x108>)
 801097a:	f005 fe7f 	bl	801667c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	68db      	ldr	r3, [r3, #12]
 8010982:	899b      	ldrh	r3, [r3, #12]
 8010984:	b29b      	uxth	r3, r3
 8010986:	4618      	mov	r0, r3
 8010988:	f7fb f9d8 	bl	800bd3c <lwip_htons>
 801098c:	4603      	mov	r3, r0
 801098e:	b2db      	uxtb	r3, r3
 8010990:	f003 0301 	and.w	r3, r3, #1
 8010994:	2b00      	cmp	r3, #0
 8010996:	d028      	beq.n	80109ea <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010998:	6838      	ldr	r0, [r7, #0]
 801099a:	f7fe f979 	bl	800ec90 <tcp_segs_free>
    next = NULL;
 801099e:	2300      	movs	r3, #0
 80109a0:	603b      	str	r3, [r7, #0]
 80109a2:	e056      	b.n	8010a52 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80109a4:	683b      	ldr	r3, [r7, #0]
 80109a6:	68db      	ldr	r3, [r3, #12]
 80109a8:	899b      	ldrh	r3, [r3, #12]
 80109aa:	b29b      	uxth	r3, r3
 80109ac:	4618      	mov	r0, r3
 80109ae:	f7fb f9c5 	bl	800bd3c <lwip_htons>
 80109b2:	4603      	mov	r3, r0
 80109b4:	b2db      	uxtb	r3, r3
 80109b6:	f003 0301 	and.w	r3, r3, #1
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d00d      	beq.n	80109da <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	68db      	ldr	r3, [r3, #12]
 80109c2:	899b      	ldrh	r3, [r3, #12]
 80109c4:	b29c      	uxth	r4, r3
 80109c6:	2001      	movs	r0, #1
 80109c8:	f7fb f9b8 	bl	800bd3c <lwip_htons>
 80109cc:	4603      	mov	r3, r0
 80109ce:	461a      	mov	r2, r3
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	68db      	ldr	r3, [r3, #12]
 80109d4:	4322      	orrs	r2, r4
 80109d6:	b292      	uxth	r2, r2
 80109d8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80109da:	683b      	ldr	r3, [r7, #0]
 80109dc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80109de:	683b      	ldr	r3, [r7, #0]
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80109e4:	68f8      	ldr	r0, [r7, #12]
 80109e6:	f7fe f968 	bl	800ecba <tcp_seg_free>
    while (next &&
 80109ea:	683b      	ldr	r3, [r7, #0]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d00e      	beq.n	8010a0e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	891b      	ldrh	r3, [r3, #8]
 80109f4:	461a      	mov	r2, r3
 80109f6:	4b1d      	ldr	r3, [pc, #116]	; (8010a6c <tcp_oos_insert_segment+0x10c>)
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	441a      	add	r2, r3
 80109fc:	683b      	ldr	r3, [r7, #0]
 80109fe:	68db      	ldr	r3, [r3, #12]
 8010a00:	685b      	ldr	r3, [r3, #4]
 8010a02:	6839      	ldr	r1, [r7, #0]
 8010a04:	8909      	ldrh	r1, [r1, #8]
 8010a06:	440b      	add	r3, r1
 8010a08:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	daca      	bge.n	80109a4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8010a0e:	683b      	ldr	r3, [r7, #0]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d01e      	beq.n	8010a52 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	891b      	ldrh	r3, [r3, #8]
 8010a18:	461a      	mov	r2, r3
 8010a1a:	4b14      	ldr	r3, [pc, #80]	; (8010a6c <tcp_oos_insert_segment+0x10c>)
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	441a      	add	r2, r3
 8010a20:	683b      	ldr	r3, [r7, #0]
 8010a22:	68db      	ldr	r3, [r3, #12]
 8010a24:	685b      	ldr	r3, [r3, #4]
 8010a26:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	dd12      	ble.n	8010a52 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010a2c:	683b      	ldr	r3, [r7, #0]
 8010a2e:	68db      	ldr	r3, [r3, #12]
 8010a30:	685b      	ldr	r3, [r3, #4]
 8010a32:	b29a      	uxth	r2, r3
 8010a34:	4b0d      	ldr	r3, [pc, #52]	; (8010a6c <tcp_oos_insert_segment+0x10c>)
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	b29b      	uxth	r3, r3
 8010a3a:	1ad3      	subs	r3, r2, r3
 8010a3c:	b29a      	uxth	r2, r3
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	685a      	ldr	r2, [r3, #4]
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	891b      	ldrh	r3, [r3, #8]
 8010a4a:	4619      	mov	r1, r3
 8010a4c:	4610      	mov	r0, r2
 8010a4e:	f7fc fb81 	bl	800d154 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	683a      	ldr	r2, [r7, #0]
 8010a56:	601a      	str	r2, [r3, #0]
}
 8010a58:	bf00      	nop
 8010a5a:	3714      	adds	r7, #20
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	bd90      	pop	{r4, r7, pc}
 8010a60:	08019ff4 	.word	0x08019ff4
 8010a64:	0801a2b4 	.word	0x0801a2b4
 8010a68:	0801a040 	.word	0x0801a040
 8010a6c:	200015a8 	.word	0x200015a8

08010a70 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010a70:	b5b0      	push	{r4, r5, r7, lr}
 8010a72:	b086      	sub	sp, #24
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	60f8      	str	r0, [r7, #12]
 8010a78:	60b9      	str	r1, [r7, #8]
 8010a7a:	607a      	str	r2, [r7, #4]
 8010a7c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010a7e:	e03e      	b.n	8010afe <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010a80:	68bb      	ldr	r3, [r7, #8]
 8010a82:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010a84:	68bb      	ldr	r3, [r7, #8]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010a8a:	697b      	ldr	r3, [r7, #20]
 8010a8c:	685b      	ldr	r3, [r3, #4]
 8010a8e:	4618      	mov	r0, r3
 8010a90:	f7fc fd6e 	bl	800d570 <pbuf_clen>
 8010a94:	4603      	mov	r3, r0
 8010a96:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010a9e:	8a7a      	ldrh	r2, [r7, #18]
 8010aa0:	429a      	cmp	r2, r3
 8010aa2:	d906      	bls.n	8010ab2 <tcp_free_acked_segments+0x42>
 8010aa4:	4b2a      	ldr	r3, [pc, #168]	; (8010b50 <tcp_free_acked_segments+0xe0>)
 8010aa6:	f240 4257 	movw	r2, #1111	; 0x457
 8010aaa:	492a      	ldr	r1, [pc, #168]	; (8010b54 <tcp_free_acked_segments+0xe4>)
 8010aac:	482a      	ldr	r0, [pc, #168]	; (8010b58 <tcp_free_acked_segments+0xe8>)
 8010aae:	f005 fde5 	bl	801667c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8010ab8:	8a7b      	ldrh	r3, [r7, #18]
 8010aba:	1ad3      	subs	r3, r2, r3
 8010abc:	b29a      	uxth	r2, r3
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010ac4:	697b      	ldr	r3, [r7, #20]
 8010ac6:	891a      	ldrh	r2, [r3, #8]
 8010ac8:	4b24      	ldr	r3, [pc, #144]	; (8010b5c <tcp_free_acked_segments+0xec>)
 8010aca:	881b      	ldrh	r3, [r3, #0]
 8010acc:	4413      	add	r3, r2
 8010ace:	b29a      	uxth	r2, r3
 8010ad0:	4b22      	ldr	r3, [pc, #136]	; (8010b5c <tcp_free_acked_segments+0xec>)
 8010ad2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010ad4:	6978      	ldr	r0, [r7, #20]
 8010ad6:	f7fe f8f0 	bl	800ecba <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d00c      	beq.n	8010afe <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010ae4:	68bb      	ldr	r3, [r7, #8]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d109      	bne.n	8010afe <tcp_free_acked_segments+0x8e>
 8010aea:	683b      	ldr	r3, [r7, #0]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d106      	bne.n	8010afe <tcp_free_acked_segments+0x8e>
 8010af0:	4b17      	ldr	r3, [pc, #92]	; (8010b50 <tcp_free_acked_segments+0xe0>)
 8010af2:	f240 4261 	movw	r2, #1121	; 0x461
 8010af6:	491a      	ldr	r1, [pc, #104]	; (8010b60 <tcp_free_acked_segments+0xf0>)
 8010af8:	4817      	ldr	r0, [pc, #92]	; (8010b58 <tcp_free_acked_segments+0xe8>)
 8010afa:	f005 fdbf 	bl	801667c <iprintf>
  while (seg_list != NULL &&
 8010afe:	68bb      	ldr	r3, [r7, #8]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d020      	beq.n	8010b46 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010b04:	68bb      	ldr	r3, [r7, #8]
 8010b06:	68db      	ldr	r3, [r3, #12]
 8010b08:	685b      	ldr	r3, [r3, #4]
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	f7fb f92b 	bl	800bd66 <lwip_htonl>
 8010b10:	4604      	mov	r4, r0
 8010b12:	68bb      	ldr	r3, [r7, #8]
 8010b14:	891b      	ldrh	r3, [r3, #8]
 8010b16:	461d      	mov	r5, r3
 8010b18:	68bb      	ldr	r3, [r7, #8]
 8010b1a:	68db      	ldr	r3, [r3, #12]
 8010b1c:	899b      	ldrh	r3, [r3, #12]
 8010b1e:	b29b      	uxth	r3, r3
 8010b20:	4618      	mov	r0, r3
 8010b22:	f7fb f90b 	bl	800bd3c <lwip_htons>
 8010b26:	4603      	mov	r3, r0
 8010b28:	b2db      	uxtb	r3, r3
 8010b2a:	f003 0303 	and.w	r3, r3, #3
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d001      	beq.n	8010b36 <tcp_free_acked_segments+0xc6>
 8010b32:	2301      	movs	r3, #1
 8010b34:	e000      	b.n	8010b38 <tcp_free_acked_segments+0xc8>
 8010b36:	2300      	movs	r3, #0
 8010b38:	442b      	add	r3, r5
 8010b3a:	18e2      	adds	r2, r4, r3
 8010b3c:	4b09      	ldr	r3, [pc, #36]	; (8010b64 <tcp_free_acked_segments+0xf4>)
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	dd9c      	ble.n	8010a80 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010b46:	68bb      	ldr	r3, [r7, #8]
}
 8010b48:	4618      	mov	r0, r3
 8010b4a:	3718      	adds	r7, #24
 8010b4c:	46bd      	mov	sp, r7
 8010b4e:	bdb0      	pop	{r4, r5, r7, pc}
 8010b50:	08019ff4 	.word	0x08019ff4
 8010b54:	0801a2dc 	.word	0x0801a2dc
 8010b58:	0801a040 	.word	0x0801a040
 8010b5c:	200015b0 	.word	0x200015b0
 8010b60:	0801a304 	.word	0x0801a304
 8010b64:	200015ac 	.word	0x200015ac

08010b68 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010b68:	b5b0      	push	{r4, r5, r7, lr}
 8010b6a:	b094      	sub	sp, #80	; 0x50
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010b70:	2300      	movs	r3, #0
 8010b72:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d106      	bne.n	8010b88 <tcp_receive+0x20>
 8010b7a:	4ba6      	ldr	r3, [pc, #664]	; (8010e14 <tcp_receive+0x2ac>)
 8010b7c:	f240 427b 	movw	r2, #1147	; 0x47b
 8010b80:	49a5      	ldr	r1, [pc, #660]	; (8010e18 <tcp_receive+0x2b0>)
 8010b82:	48a6      	ldr	r0, [pc, #664]	; (8010e1c <tcp_receive+0x2b4>)
 8010b84:	f005 fd7a 	bl	801667c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	7d1b      	ldrb	r3, [r3, #20]
 8010b8c:	2b03      	cmp	r3, #3
 8010b8e:	d806      	bhi.n	8010b9e <tcp_receive+0x36>
 8010b90:	4ba0      	ldr	r3, [pc, #640]	; (8010e14 <tcp_receive+0x2ac>)
 8010b92:	f240 427c 	movw	r2, #1148	; 0x47c
 8010b96:	49a2      	ldr	r1, [pc, #648]	; (8010e20 <tcp_receive+0x2b8>)
 8010b98:	48a0      	ldr	r0, [pc, #640]	; (8010e1c <tcp_receive+0x2b4>)
 8010b9a:	f005 fd6f 	bl	801667c <iprintf>

  if (flags & TCP_ACK) {
 8010b9e:	4ba1      	ldr	r3, [pc, #644]	; (8010e24 <tcp_receive+0x2bc>)
 8010ba0:	781b      	ldrb	r3, [r3, #0]
 8010ba2:	f003 0310 	and.w	r3, r3, #16
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	f000 8263 	beq.w	8011072 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010bb2:	461a      	mov	r2, r3
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010bb8:	4413      	add	r3, r2
 8010bba:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010bc0:	4b99      	ldr	r3, [pc, #612]	; (8010e28 <tcp_receive+0x2c0>)
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	1ad3      	subs	r3, r2, r3
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	db1b      	blt.n	8010c02 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010bce:	4b96      	ldr	r3, [pc, #600]	; (8010e28 <tcp_receive+0x2c0>)
 8010bd0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010bd2:	429a      	cmp	r2, r3
 8010bd4:	d106      	bne.n	8010be4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010bda:	4b94      	ldr	r3, [pc, #592]	; (8010e2c <tcp_receive+0x2c4>)
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	1ad3      	subs	r3, r2, r3
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	db0e      	blt.n	8010c02 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010be8:	4b90      	ldr	r3, [pc, #576]	; (8010e2c <tcp_receive+0x2c4>)
 8010bea:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010bec:	429a      	cmp	r2, r3
 8010bee:	d125      	bne.n	8010c3c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010bf0:	4b8f      	ldr	r3, [pc, #572]	; (8010e30 <tcp_receive+0x2c8>)
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	89db      	ldrh	r3, [r3, #14]
 8010bf6:	b29a      	uxth	r2, r3
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010bfe:	429a      	cmp	r2, r3
 8010c00:	d91c      	bls.n	8010c3c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010c02:	4b8b      	ldr	r3, [pc, #556]	; (8010e30 <tcp_receive+0x2c8>)
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	89db      	ldrh	r3, [r3, #14]
 8010c08:	b29a      	uxth	r2, r3
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010c1c:	429a      	cmp	r2, r3
 8010c1e:	d205      	bcs.n	8010c2c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8010c2c:	4b7e      	ldr	r3, [pc, #504]	; (8010e28 <tcp_receive+0x2c0>)
 8010c2e:	681a      	ldr	r2, [r3, #0]
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8010c34:	4b7d      	ldr	r3, [pc, #500]	; (8010e2c <tcp_receive+0x2c4>)
 8010c36:	681a      	ldr	r2, [r3, #0]
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010c3c:	4b7b      	ldr	r3, [pc, #492]	; (8010e2c <tcp_receive+0x2c4>)
 8010c3e:	681a      	ldr	r2, [r3, #0]
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c44:	1ad3      	subs	r3, r2, r3
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	dc58      	bgt.n	8010cfc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010c4a:	4b7a      	ldr	r3, [pc, #488]	; (8010e34 <tcp_receive+0x2cc>)
 8010c4c:	881b      	ldrh	r3, [r3, #0]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d14b      	bne.n	8010cea <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c56:	687a      	ldr	r2, [r7, #4]
 8010c58:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010c5c:	4413      	add	r3, r2
 8010c5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c60:	429a      	cmp	r2, r3
 8010c62:	d142      	bne.n	8010cea <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	db3d      	blt.n	8010cea <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010c72:	4b6e      	ldr	r3, [pc, #440]	; (8010e2c <tcp_receive+0x2c4>)
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	429a      	cmp	r2, r3
 8010c78:	d137      	bne.n	8010cea <tcp_receive+0x182>
              found_dupack = 1;
 8010c7a:	2301      	movs	r3, #1
 8010c7c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010c84:	2bff      	cmp	r3, #255	; 0xff
 8010c86:	d007      	beq.n	8010c98 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010c8e:	3301      	adds	r3, #1
 8010c90:	b2da      	uxtb	r2, r3
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010c9e:	2b03      	cmp	r3, #3
 8010ca0:	d91b      	bls.n	8010cda <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010cac:	4413      	add	r3, r2
 8010cae:	b29a      	uxth	r2, r3
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010cb6:	429a      	cmp	r2, r3
 8010cb8:	d30a      	bcc.n	8010cd0 <tcp_receive+0x168>
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010cc4:	4413      	add	r3, r2
 8010cc6:	b29a      	uxth	r2, r3
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010cce:	e004      	b.n	8010cda <tcp_receive+0x172>
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010cd6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010ce0:	2b02      	cmp	r3, #2
 8010ce2:	d902      	bls.n	8010cea <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010ce4:	6878      	ldr	r0, [r7, #4]
 8010ce6:	f002 fb41 	bl	801336c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010cea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	f040 8160 	bne.w	8010fb2 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	2200      	movs	r2, #0
 8010cf6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010cfa:	e15a      	b.n	8010fb2 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010cfc:	4b4b      	ldr	r3, [pc, #300]	; (8010e2c <tcp_receive+0x2c4>)
 8010cfe:	681a      	ldr	r2, [r3, #0]
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d04:	1ad3      	subs	r3, r2, r3
 8010d06:	3b01      	subs	r3, #1
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	f2c0 814d 	blt.w	8010fa8 <tcp_receive+0x440>
 8010d0e:	4b47      	ldr	r3, [pc, #284]	; (8010e2c <tcp_receive+0x2c4>)
 8010d10:	681a      	ldr	r2, [r3, #0]
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010d16:	1ad3      	subs	r3, r2, r3
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	f300 8145 	bgt.w	8010fa8 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	8b5b      	ldrh	r3, [r3, #26]
 8010d22:	f003 0304 	and.w	r3, r3, #4
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d010      	beq.n	8010d4c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	8b5b      	ldrh	r3, [r3, #26]
 8010d2e:	f023 0304 	bic.w	r3, r3, #4
 8010d32:	b29a      	uxth	r2, r3
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	2200      	movs	r2, #0
 8010d48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	2200      	movs	r2, #0
 8010d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010d5a:	10db      	asrs	r3, r3, #3
 8010d5c:	b21b      	sxth	r3, r3
 8010d5e:	b29a      	uxth	r2, r3
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010d66:	b29b      	uxth	r3, r3
 8010d68:	4413      	add	r3, r2
 8010d6a:	b29b      	uxth	r3, r3
 8010d6c:	b21a      	sxth	r2, r3
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010d74:	4b2d      	ldr	r3, [pc, #180]	; (8010e2c <tcp_receive+0x2c4>)
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	b29a      	uxth	r2, r3
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d7e:	b29b      	uxth	r3, r3
 8010d80:	1ad3      	subs	r3, r2, r3
 8010d82:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	2200      	movs	r2, #0
 8010d88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010d8c:	4b27      	ldr	r3, [pc, #156]	; (8010e2c <tcp_receive+0x2c4>)
 8010d8e:	681a      	ldr	r2, [r3, #0]
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	7d1b      	ldrb	r3, [r3, #20]
 8010d98:	2b03      	cmp	r3, #3
 8010d9a:	f240 8096 	bls.w	8010eca <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010daa:	429a      	cmp	r2, r3
 8010dac:	d244      	bcs.n	8010e38 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	8b5b      	ldrh	r3, [r3, #26]
 8010db2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d001      	beq.n	8010dbe <tcp_receive+0x256>
 8010dba:	2301      	movs	r3, #1
 8010dbc:	e000      	b.n	8010dc0 <tcp_receive+0x258>
 8010dbe:	2302      	movs	r3, #2
 8010dc0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010dc4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010dc8:	b29a      	uxth	r2, r3
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010dce:	fb12 f303 	smulbb	r3, r2, r3
 8010dd2:	b29b      	uxth	r3, r3
 8010dd4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010dd6:	4293      	cmp	r3, r2
 8010dd8:	bf28      	it	cs
 8010dda:	4613      	movcs	r3, r2
 8010ddc:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010de4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010de6:	4413      	add	r3, r2
 8010de8:	b29a      	uxth	r2, r3
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010df0:	429a      	cmp	r2, r3
 8010df2:	d309      	bcc.n	8010e08 <tcp_receive+0x2a0>
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010dfa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010dfc:	4413      	add	r3, r2
 8010dfe:	b29a      	uxth	r2, r3
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010e06:	e060      	b.n	8010eca <tcp_receive+0x362>
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010e0e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010e12:	e05a      	b.n	8010eca <tcp_receive+0x362>
 8010e14:	08019ff4 	.word	0x08019ff4
 8010e18:	0801a324 	.word	0x0801a324
 8010e1c:	0801a040 	.word	0x0801a040
 8010e20:	0801a340 	.word	0x0801a340
 8010e24:	200015b4 	.word	0x200015b4
 8010e28:	200015a8 	.word	0x200015a8
 8010e2c:	200015ac 	.word	0x200015ac
 8010e30:	20001598 	.word	0x20001598
 8010e34:	200015b2 	.word	0x200015b2
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010e3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010e40:	4413      	add	r3, r2
 8010e42:	b29a      	uxth	r2, r3
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010e4a:	429a      	cmp	r2, r3
 8010e4c:	d309      	bcc.n	8010e62 <tcp_receive+0x2fa>
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010e54:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010e56:	4413      	add	r3, r2
 8010e58:	b29a      	uxth	r2, r3
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010e60:	e004      	b.n	8010e6c <tcp_receive+0x304>
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010e68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010e78:	429a      	cmp	r2, r3
 8010e7a:	d326      	bcc.n	8010eca <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010e88:	1ad3      	subs	r3, r2, r3
 8010e8a:	b29a      	uxth	r2, r3
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e9c:	4413      	add	r3, r2
 8010e9e:	b29a      	uxth	r2, r3
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010ea6:	429a      	cmp	r2, r3
 8010ea8:	d30a      	bcc.n	8010ec0 <tcp_receive+0x358>
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010eb4:	4413      	add	r3, r2
 8010eb6:	b29a      	uxth	r2, r3
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010ebe:	e004      	b.n	8010eca <tcp_receive+0x362>
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010ec6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ed2:	4a98      	ldr	r2, [pc, #608]	; (8011134 <tcp_receive+0x5cc>)
 8010ed4:	6878      	ldr	r0, [r7, #4]
 8010ed6:	f7ff fdcb 	bl	8010a70 <tcp_free_acked_segments>
 8010eda:	4602      	mov	r2, r0
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ee8:	4a93      	ldr	r2, [pc, #588]	; (8011138 <tcp_receive+0x5d0>)
 8010eea:	6878      	ldr	r0, [r7, #4]
 8010eec:	f7ff fdc0 	bl	8010a70 <tcp_free_acked_segments>
 8010ef0:	4602      	mov	r2, r0
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d104      	bne.n	8010f08 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f04:	861a      	strh	r2, [r3, #48]	; 0x30
 8010f06:	e002      	b.n	8010f0e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	2200      	movs	r2, #0
 8010f0c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	2200      	movs	r2, #0
 8010f12:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d103      	bne.n	8010f24 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	2200      	movs	r2, #0
 8010f20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010f2a:	4b84      	ldr	r3, [pc, #528]	; (801113c <tcp_receive+0x5d4>)
 8010f2c:	881b      	ldrh	r3, [r3, #0]
 8010f2e:	4413      	add	r3, r2
 8010f30:	b29a      	uxth	r2, r3
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	8b5b      	ldrh	r3, [r3, #26]
 8010f3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d035      	beq.n	8010fb0 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d118      	bne.n	8010f7e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d00c      	beq.n	8010f6e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f5c:	68db      	ldr	r3, [r3, #12]
 8010f5e:	685b      	ldr	r3, [r3, #4]
 8010f60:	4618      	mov	r0, r3
 8010f62:	f7fa ff00 	bl	800bd66 <lwip_htonl>
 8010f66:	4603      	mov	r3, r0
 8010f68:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	dc20      	bgt.n	8010fb0 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	8b5b      	ldrh	r3, [r3, #26]
 8010f72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010f76:	b29a      	uxth	r2, r3
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010f7c:	e018      	b.n	8010fb0 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f86:	68db      	ldr	r3, [r3, #12]
 8010f88:	685b      	ldr	r3, [r3, #4]
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	f7fa feeb 	bl	800bd66 <lwip_htonl>
 8010f90:	4603      	mov	r3, r0
 8010f92:	1ae3      	subs	r3, r4, r3
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	dc0b      	bgt.n	8010fb0 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	8b5b      	ldrh	r3, [r3, #26]
 8010f9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010fa0:	b29a      	uxth	r2, r3
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010fa6:	e003      	b.n	8010fb0 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010fa8:	6878      	ldr	r0, [r7, #4]
 8010faa:	f002 fbcd 	bl	8013748 <tcp_send_empty_ack>
 8010fae:	e000      	b.n	8010fb2 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010fb0:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d05b      	beq.n	8011072 <tcp_receive+0x50a>
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010fbe:	4b60      	ldr	r3, [pc, #384]	; (8011140 <tcp_receive+0x5d8>)
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	1ad3      	subs	r3, r2, r3
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	da54      	bge.n	8011072 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010fc8:	4b5e      	ldr	r3, [pc, #376]	; (8011144 <tcp_receive+0x5dc>)
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	b29a      	uxth	r2, r3
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fd2:	b29b      	uxth	r3, r3
 8010fd4:	1ad3      	subs	r3, r2, r3
 8010fd6:	b29b      	uxth	r3, r3
 8010fd8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010fdc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010fe6:	10db      	asrs	r3, r3, #3
 8010fe8:	b21b      	sxth	r3, r3
 8010fea:	b29b      	uxth	r3, r3
 8010fec:	1ad3      	subs	r3, r2, r3
 8010fee:	b29b      	uxth	r3, r3
 8010ff0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010ffa:	b29a      	uxth	r2, r3
 8010ffc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011000:	4413      	add	r3, r2
 8011002:	b29b      	uxth	r3, r3
 8011004:	b21a      	sxth	r2, r3
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801100a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801100e:	2b00      	cmp	r3, #0
 8011010:	da05      	bge.n	801101e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8011012:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011016:	425b      	negs	r3, r3
 8011018:	b29b      	uxth	r3, r3
 801101a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801101e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011028:	109b      	asrs	r3, r3, #2
 801102a:	b21b      	sxth	r3, r3
 801102c:	b29b      	uxth	r3, r3
 801102e:	1ad3      	subs	r3, r2, r3
 8011030:	b29b      	uxth	r3, r3
 8011032:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801103c:	b29a      	uxth	r2, r3
 801103e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011042:	4413      	add	r3, r2
 8011044:	b29b      	uxth	r3, r3
 8011046:	b21a      	sxth	r2, r3
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011052:	10db      	asrs	r3, r3, #3
 8011054:	b21b      	sxth	r3, r3
 8011056:	b29a      	uxth	r2, r3
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801105e:	b29b      	uxth	r3, r3
 8011060:	4413      	add	r3, r2
 8011062:	b29b      	uxth	r3, r3
 8011064:	b21a      	sxth	r2, r3
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	2200      	movs	r2, #0
 8011070:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8011072:	4b35      	ldr	r3, [pc, #212]	; (8011148 <tcp_receive+0x5e0>)
 8011074:	881b      	ldrh	r3, [r3, #0]
 8011076:	2b00      	cmp	r3, #0
 8011078:	f000 84e1 	beq.w	8011a3e <tcp_receive+0xed6>
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	7d1b      	ldrb	r3, [r3, #20]
 8011080:	2b06      	cmp	r3, #6
 8011082:	f200 84dc 	bhi.w	8011a3e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801108a:	4b30      	ldr	r3, [pc, #192]	; (801114c <tcp_receive+0x5e4>)
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	1ad3      	subs	r3, r2, r3
 8011090:	3b01      	subs	r3, #1
 8011092:	2b00      	cmp	r3, #0
 8011094:	f2c0 808e 	blt.w	80111b4 <tcp_receive+0x64c>
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801109c:	4b2a      	ldr	r3, [pc, #168]	; (8011148 <tcp_receive+0x5e0>)
 801109e:	881b      	ldrh	r3, [r3, #0]
 80110a0:	4619      	mov	r1, r3
 80110a2:	4b2a      	ldr	r3, [pc, #168]	; (801114c <tcp_receive+0x5e4>)
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	440b      	add	r3, r1
 80110a8:	1ad3      	subs	r3, r2, r3
 80110aa:	3301      	adds	r3, #1
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	f300 8081 	bgt.w	80111b4 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80110b2:	4b27      	ldr	r3, [pc, #156]	; (8011150 <tcp_receive+0x5e8>)
 80110b4:	685b      	ldr	r3, [r3, #4]
 80110b6:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80110bc:	4b23      	ldr	r3, [pc, #140]	; (801114c <tcp_receive+0x5e4>)
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	1ad3      	subs	r3, r2, r3
 80110c2:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80110c4:	4b22      	ldr	r3, [pc, #136]	; (8011150 <tcp_receive+0x5e8>)
 80110c6:	685b      	ldr	r3, [r3, #4]
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d106      	bne.n	80110da <tcp_receive+0x572>
 80110cc:	4b21      	ldr	r3, [pc, #132]	; (8011154 <tcp_receive+0x5ec>)
 80110ce:	f240 5294 	movw	r2, #1428	; 0x594
 80110d2:	4921      	ldr	r1, [pc, #132]	; (8011158 <tcp_receive+0x5f0>)
 80110d4:	4821      	ldr	r0, [pc, #132]	; (801115c <tcp_receive+0x5f4>)
 80110d6:	f005 fad1 	bl	801667c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80110da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110dc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80110e0:	4293      	cmp	r3, r2
 80110e2:	d906      	bls.n	80110f2 <tcp_receive+0x58a>
 80110e4:	4b1b      	ldr	r3, [pc, #108]	; (8011154 <tcp_receive+0x5ec>)
 80110e6:	f240 5295 	movw	r2, #1429	; 0x595
 80110ea:	491d      	ldr	r1, [pc, #116]	; (8011160 <tcp_receive+0x5f8>)
 80110ec:	481b      	ldr	r0, [pc, #108]	; (801115c <tcp_receive+0x5f4>)
 80110ee:	f005 fac5 	bl	801667c <iprintf>
      off = (u16_t)off32;
 80110f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110f4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80110f8:	4b15      	ldr	r3, [pc, #84]	; (8011150 <tcp_receive+0x5e8>)
 80110fa:	685b      	ldr	r3, [r3, #4]
 80110fc:	891b      	ldrh	r3, [r3, #8]
 80110fe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011102:	429a      	cmp	r2, r3
 8011104:	d906      	bls.n	8011114 <tcp_receive+0x5ac>
 8011106:	4b13      	ldr	r3, [pc, #76]	; (8011154 <tcp_receive+0x5ec>)
 8011108:	f240 5297 	movw	r2, #1431	; 0x597
 801110c:	4915      	ldr	r1, [pc, #84]	; (8011164 <tcp_receive+0x5fc>)
 801110e:	4813      	ldr	r0, [pc, #76]	; (801115c <tcp_receive+0x5f4>)
 8011110:	f005 fab4 	bl	801667c <iprintf>
      inseg.len -= off;
 8011114:	4b0e      	ldr	r3, [pc, #56]	; (8011150 <tcp_receive+0x5e8>)
 8011116:	891a      	ldrh	r2, [r3, #8]
 8011118:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801111c:	1ad3      	subs	r3, r2, r3
 801111e:	b29a      	uxth	r2, r3
 8011120:	4b0b      	ldr	r3, [pc, #44]	; (8011150 <tcp_receive+0x5e8>)
 8011122:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011124:	4b0a      	ldr	r3, [pc, #40]	; (8011150 <tcp_receive+0x5e8>)
 8011126:	685b      	ldr	r3, [r3, #4]
 8011128:	891a      	ldrh	r2, [r3, #8]
 801112a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801112e:	1ad3      	subs	r3, r2, r3
 8011130:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8011132:	e029      	b.n	8011188 <tcp_receive+0x620>
 8011134:	0801a35c 	.word	0x0801a35c
 8011138:	0801a364 	.word	0x0801a364
 801113c:	200015b0 	.word	0x200015b0
 8011140:	200015ac 	.word	0x200015ac
 8011144:	200179fc 	.word	0x200179fc
 8011148:	200015b2 	.word	0x200015b2
 801114c:	200015a8 	.word	0x200015a8
 8011150:	20001588 	.word	0x20001588
 8011154:	08019ff4 	.word	0x08019ff4
 8011158:	0801a36c 	.word	0x0801a36c
 801115c:	0801a040 	.word	0x0801a040
 8011160:	0801a37c 	.word	0x0801a37c
 8011164:	0801a38c 	.word	0x0801a38c
        off -= p->len;
 8011168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801116a:	895b      	ldrh	r3, [r3, #10]
 801116c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011170:	1ad3      	subs	r3, r2, r3
 8011172:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8011176:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011178:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801117a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801117c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801117e:	2200      	movs	r2, #0
 8011180:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8011182:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8011188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801118a:	895b      	ldrh	r3, [r3, #10]
 801118c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011190:	429a      	cmp	r2, r3
 8011192:	d8e9      	bhi.n	8011168 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011194:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011198:	4619      	mov	r1, r3
 801119a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801119c:	f7fc f8da 	bl	800d354 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111a4:	4a91      	ldr	r2, [pc, #580]	; (80113ec <tcp_receive+0x884>)
 80111a6:	6013      	str	r3, [r2, #0]
 80111a8:	4b91      	ldr	r3, [pc, #580]	; (80113f0 <tcp_receive+0x888>)
 80111aa:	68db      	ldr	r3, [r3, #12]
 80111ac:	4a8f      	ldr	r2, [pc, #572]	; (80113ec <tcp_receive+0x884>)
 80111ae:	6812      	ldr	r2, [r2, #0]
 80111b0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80111b2:	e00d      	b.n	80111d0 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80111b4:	4b8d      	ldr	r3, [pc, #564]	; (80113ec <tcp_receive+0x884>)
 80111b6:	681a      	ldr	r2, [r3, #0]
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111bc:	1ad3      	subs	r3, r2, r3
 80111be:	2b00      	cmp	r3, #0
 80111c0:	da06      	bge.n	80111d0 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	8b5b      	ldrh	r3, [r3, #26]
 80111c6:	f043 0302 	orr.w	r3, r3, #2
 80111ca:	b29a      	uxth	r2, r3
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80111d0:	4b86      	ldr	r3, [pc, #536]	; (80113ec <tcp_receive+0x884>)
 80111d2:	681a      	ldr	r2, [r3, #0]
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111d8:	1ad3      	subs	r3, r2, r3
 80111da:	2b00      	cmp	r3, #0
 80111dc:	f2c0 842a 	blt.w	8011a34 <tcp_receive+0xecc>
 80111e0:	4b82      	ldr	r3, [pc, #520]	; (80113ec <tcp_receive+0x884>)
 80111e2:	681a      	ldr	r2, [r3, #0]
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111e8:	6879      	ldr	r1, [r7, #4]
 80111ea:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80111ec:	440b      	add	r3, r1
 80111ee:	1ad3      	subs	r3, r2, r3
 80111f0:	3301      	adds	r3, #1
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	f300 841e 	bgt.w	8011a34 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80111fc:	4b7b      	ldr	r3, [pc, #492]	; (80113ec <tcp_receive+0x884>)
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	429a      	cmp	r2, r3
 8011202:	f040 829a 	bne.w	801173a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011206:	4b7a      	ldr	r3, [pc, #488]	; (80113f0 <tcp_receive+0x888>)
 8011208:	891c      	ldrh	r4, [r3, #8]
 801120a:	4b79      	ldr	r3, [pc, #484]	; (80113f0 <tcp_receive+0x888>)
 801120c:	68db      	ldr	r3, [r3, #12]
 801120e:	899b      	ldrh	r3, [r3, #12]
 8011210:	b29b      	uxth	r3, r3
 8011212:	4618      	mov	r0, r3
 8011214:	f7fa fd92 	bl	800bd3c <lwip_htons>
 8011218:	4603      	mov	r3, r0
 801121a:	b2db      	uxtb	r3, r3
 801121c:	f003 0303 	and.w	r3, r3, #3
 8011220:	2b00      	cmp	r3, #0
 8011222:	d001      	beq.n	8011228 <tcp_receive+0x6c0>
 8011224:	2301      	movs	r3, #1
 8011226:	e000      	b.n	801122a <tcp_receive+0x6c2>
 8011228:	2300      	movs	r3, #0
 801122a:	4423      	add	r3, r4
 801122c:	b29a      	uxth	r2, r3
 801122e:	4b71      	ldr	r3, [pc, #452]	; (80113f4 <tcp_receive+0x88c>)
 8011230:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011236:	4b6f      	ldr	r3, [pc, #444]	; (80113f4 <tcp_receive+0x88c>)
 8011238:	881b      	ldrh	r3, [r3, #0]
 801123a:	429a      	cmp	r2, r3
 801123c:	d275      	bcs.n	801132a <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801123e:	4b6c      	ldr	r3, [pc, #432]	; (80113f0 <tcp_receive+0x888>)
 8011240:	68db      	ldr	r3, [r3, #12]
 8011242:	899b      	ldrh	r3, [r3, #12]
 8011244:	b29b      	uxth	r3, r3
 8011246:	4618      	mov	r0, r3
 8011248:	f7fa fd78 	bl	800bd3c <lwip_htons>
 801124c:	4603      	mov	r3, r0
 801124e:	b2db      	uxtb	r3, r3
 8011250:	f003 0301 	and.w	r3, r3, #1
 8011254:	2b00      	cmp	r3, #0
 8011256:	d01f      	beq.n	8011298 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011258:	4b65      	ldr	r3, [pc, #404]	; (80113f0 <tcp_receive+0x888>)
 801125a:	68db      	ldr	r3, [r3, #12]
 801125c:	899b      	ldrh	r3, [r3, #12]
 801125e:	b29b      	uxth	r3, r3
 8011260:	b21b      	sxth	r3, r3
 8011262:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011266:	b21c      	sxth	r4, r3
 8011268:	4b61      	ldr	r3, [pc, #388]	; (80113f0 <tcp_receive+0x888>)
 801126a:	68db      	ldr	r3, [r3, #12]
 801126c:	899b      	ldrh	r3, [r3, #12]
 801126e:	b29b      	uxth	r3, r3
 8011270:	4618      	mov	r0, r3
 8011272:	f7fa fd63 	bl	800bd3c <lwip_htons>
 8011276:	4603      	mov	r3, r0
 8011278:	b2db      	uxtb	r3, r3
 801127a:	b29b      	uxth	r3, r3
 801127c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011280:	b29b      	uxth	r3, r3
 8011282:	4618      	mov	r0, r3
 8011284:	f7fa fd5a 	bl	800bd3c <lwip_htons>
 8011288:	4603      	mov	r3, r0
 801128a:	b21b      	sxth	r3, r3
 801128c:	4323      	orrs	r3, r4
 801128e:	b21a      	sxth	r2, r3
 8011290:	4b57      	ldr	r3, [pc, #348]	; (80113f0 <tcp_receive+0x888>)
 8011292:	68db      	ldr	r3, [r3, #12]
 8011294:	b292      	uxth	r2, r2
 8011296:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801129c:	4b54      	ldr	r3, [pc, #336]	; (80113f0 <tcp_receive+0x888>)
 801129e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80112a0:	4b53      	ldr	r3, [pc, #332]	; (80113f0 <tcp_receive+0x888>)
 80112a2:	68db      	ldr	r3, [r3, #12]
 80112a4:	899b      	ldrh	r3, [r3, #12]
 80112a6:	b29b      	uxth	r3, r3
 80112a8:	4618      	mov	r0, r3
 80112aa:	f7fa fd47 	bl	800bd3c <lwip_htons>
 80112ae:	4603      	mov	r3, r0
 80112b0:	b2db      	uxtb	r3, r3
 80112b2:	f003 0302 	and.w	r3, r3, #2
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d005      	beq.n	80112c6 <tcp_receive+0x75e>
            inseg.len -= 1;
 80112ba:	4b4d      	ldr	r3, [pc, #308]	; (80113f0 <tcp_receive+0x888>)
 80112bc:	891b      	ldrh	r3, [r3, #8]
 80112be:	3b01      	subs	r3, #1
 80112c0:	b29a      	uxth	r2, r3
 80112c2:	4b4b      	ldr	r3, [pc, #300]	; (80113f0 <tcp_receive+0x888>)
 80112c4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80112c6:	4b4a      	ldr	r3, [pc, #296]	; (80113f0 <tcp_receive+0x888>)
 80112c8:	685b      	ldr	r3, [r3, #4]
 80112ca:	4a49      	ldr	r2, [pc, #292]	; (80113f0 <tcp_receive+0x888>)
 80112cc:	8912      	ldrh	r2, [r2, #8]
 80112ce:	4611      	mov	r1, r2
 80112d0:	4618      	mov	r0, r3
 80112d2:	f7fb ff3f 	bl	800d154 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80112d6:	4b46      	ldr	r3, [pc, #280]	; (80113f0 <tcp_receive+0x888>)
 80112d8:	891c      	ldrh	r4, [r3, #8]
 80112da:	4b45      	ldr	r3, [pc, #276]	; (80113f0 <tcp_receive+0x888>)
 80112dc:	68db      	ldr	r3, [r3, #12]
 80112de:	899b      	ldrh	r3, [r3, #12]
 80112e0:	b29b      	uxth	r3, r3
 80112e2:	4618      	mov	r0, r3
 80112e4:	f7fa fd2a 	bl	800bd3c <lwip_htons>
 80112e8:	4603      	mov	r3, r0
 80112ea:	b2db      	uxtb	r3, r3
 80112ec:	f003 0303 	and.w	r3, r3, #3
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d001      	beq.n	80112f8 <tcp_receive+0x790>
 80112f4:	2301      	movs	r3, #1
 80112f6:	e000      	b.n	80112fa <tcp_receive+0x792>
 80112f8:	2300      	movs	r3, #0
 80112fa:	4423      	add	r3, r4
 80112fc:	b29a      	uxth	r2, r3
 80112fe:	4b3d      	ldr	r3, [pc, #244]	; (80113f4 <tcp_receive+0x88c>)
 8011300:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011302:	4b3c      	ldr	r3, [pc, #240]	; (80113f4 <tcp_receive+0x88c>)
 8011304:	881b      	ldrh	r3, [r3, #0]
 8011306:	461a      	mov	r2, r3
 8011308:	4b38      	ldr	r3, [pc, #224]	; (80113ec <tcp_receive+0x884>)
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	441a      	add	r2, r3
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011312:	6879      	ldr	r1, [r7, #4]
 8011314:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011316:	440b      	add	r3, r1
 8011318:	429a      	cmp	r2, r3
 801131a:	d006      	beq.n	801132a <tcp_receive+0x7c2>
 801131c:	4b36      	ldr	r3, [pc, #216]	; (80113f8 <tcp_receive+0x890>)
 801131e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8011322:	4936      	ldr	r1, [pc, #216]	; (80113fc <tcp_receive+0x894>)
 8011324:	4836      	ldr	r0, [pc, #216]	; (8011400 <tcp_receive+0x898>)
 8011326:	f005 f9a9 	bl	801667c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801132e:	2b00      	cmp	r3, #0
 8011330:	f000 80e7 	beq.w	8011502 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011334:	4b2e      	ldr	r3, [pc, #184]	; (80113f0 <tcp_receive+0x888>)
 8011336:	68db      	ldr	r3, [r3, #12]
 8011338:	899b      	ldrh	r3, [r3, #12]
 801133a:	b29b      	uxth	r3, r3
 801133c:	4618      	mov	r0, r3
 801133e:	f7fa fcfd 	bl	800bd3c <lwip_htons>
 8011342:	4603      	mov	r3, r0
 8011344:	b2db      	uxtb	r3, r3
 8011346:	f003 0301 	and.w	r3, r3, #1
 801134a:	2b00      	cmp	r3, #0
 801134c:	d010      	beq.n	8011370 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801134e:	e00a      	b.n	8011366 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011354:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801135a:	681a      	ldr	r2, [r3, #0]
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8011360:	68f8      	ldr	r0, [r7, #12]
 8011362:	f7fd fcaa 	bl	800ecba <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801136a:	2b00      	cmp	r3, #0
 801136c:	d1f0      	bne.n	8011350 <tcp_receive+0x7e8>
 801136e:	e0c8      	b.n	8011502 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011374:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011376:	e052      	b.n	801141e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801137a:	68db      	ldr	r3, [r3, #12]
 801137c:	899b      	ldrh	r3, [r3, #12]
 801137e:	b29b      	uxth	r3, r3
 8011380:	4618      	mov	r0, r3
 8011382:	f7fa fcdb 	bl	800bd3c <lwip_htons>
 8011386:	4603      	mov	r3, r0
 8011388:	b2db      	uxtb	r3, r3
 801138a:	f003 0301 	and.w	r3, r3, #1
 801138e:	2b00      	cmp	r3, #0
 8011390:	d03d      	beq.n	801140e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011392:	4b17      	ldr	r3, [pc, #92]	; (80113f0 <tcp_receive+0x888>)
 8011394:	68db      	ldr	r3, [r3, #12]
 8011396:	899b      	ldrh	r3, [r3, #12]
 8011398:	b29b      	uxth	r3, r3
 801139a:	4618      	mov	r0, r3
 801139c:	f7fa fcce 	bl	800bd3c <lwip_htons>
 80113a0:	4603      	mov	r3, r0
 80113a2:	b2db      	uxtb	r3, r3
 80113a4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d130      	bne.n	801140e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80113ac:	4b10      	ldr	r3, [pc, #64]	; (80113f0 <tcp_receive+0x888>)
 80113ae:	68db      	ldr	r3, [r3, #12]
 80113b0:	899b      	ldrh	r3, [r3, #12]
 80113b2:	b29c      	uxth	r4, r3
 80113b4:	2001      	movs	r0, #1
 80113b6:	f7fa fcc1 	bl	800bd3c <lwip_htons>
 80113ba:	4603      	mov	r3, r0
 80113bc:	461a      	mov	r2, r3
 80113be:	4b0c      	ldr	r3, [pc, #48]	; (80113f0 <tcp_receive+0x888>)
 80113c0:	68db      	ldr	r3, [r3, #12]
 80113c2:	4322      	orrs	r2, r4
 80113c4:	b292      	uxth	r2, r2
 80113c6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80113c8:	4b09      	ldr	r3, [pc, #36]	; (80113f0 <tcp_receive+0x888>)
 80113ca:	891c      	ldrh	r4, [r3, #8]
 80113cc:	4b08      	ldr	r3, [pc, #32]	; (80113f0 <tcp_receive+0x888>)
 80113ce:	68db      	ldr	r3, [r3, #12]
 80113d0:	899b      	ldrh	r3, [r3, #12]
 80113d2:	b29b      	uxth	r3, r3
 80113d4:	4618      	mov	r0, r3
 80113d6:	f7fa fcb1 	bl	800bd3c <lwip_htons>
 80113da:	4603      	mov	r3, r0
 80113dc:	b2db      	uxtb	r3, r3
 80113de:	f003 0303 	and.w	r3, r3, #3
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d00e      	beq.n	8011404 <tcp_receive+0x89c>
 80113e6:	2301      	movs	r3, #1
 80113e8:	e00d      	b.n	8011406 <tcp_receive+0x89e>
 80113ea:	bf00      	nop
 80113ec:	200015a8 	.word	0x200015a8
 80113f0:	20001588 	.word	0x20001588
 80113f4:	200015b2 	.word	0x200015b2
 80113f8:	08019ff4 	.word	0x08019ff4
 80113fc:	0801a39c 	.word	0x0801a39c
 8011400:	0801a040 	.word	0x0801a040
 8011404:	2300      	movs	r3, #0
 8011406:	4423      	add	r3, r4
 8011408:	b29a      	uxth	r2, r3
 801140a:	4b98      	ldr	r3, [pc, #608]	; (801166c <tcp_receive+0xb04>)
 801140c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801140e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011410:	613b      	str	r3, [r7, #16]
              next = next->next;
 8011412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8011418:	6938      	ldr	r0, [r7, #16]
 801141a:	f7fd fc4e 	bl	800ecba <tcp_seg_free>
            while (next &&
 801141e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011420:	2b00      	cmp	r3, #0
 8011422:	d00e      	beq.n	8011442 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011424:	4b91      	ldr	r3, [pc, #580]	; (801166c <tcp_receive+0xb04>)
 8011426:	881b      	ldrh	r3, [r3, #0]
 8011428:	461a      	mov	r2, r3
 801142a:	4b91      	ldr	r3, [pc, #580]	; (8011670 <tcp_receive+0xb08>)
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	441a      	add	r2, r3
 8011430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011432:	68db      	ldr	r3, [r3, #12]
 8011434:	685b      	ldr	r3, [r3, #4]
 8011436:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011438:	8909      	ldrh	r1, [r1, #8]
 801143a:	440b      	add	r3, r1
 801143c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801143e:	2b00      	cmp	r3, #0
 8011440:	da9a      	bge.n	8011378 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011444:	2b00      	cmp	r3, #0
 8011446:	d059      	beq.n	80114fc <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8011448:	4b88      	ldr	r3, [pc, #544]	; (801166c <tcp_receive+0xb04>)
 801144a:	881b      	ldrh	r3, [r3, #0]
 801144c:	461a      	mov	r2, r3
 801144e:	4b88      	ldr	r3, [pc, #544]	; (8011670 <tcp_receive+0xb08>)
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	441a      	add	r2, r3
 8011454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011456:	68db      	ldr	r3, [r3, #12]
 8011458:	685b      	ldr	r3, [r3, #4]
 801145a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801145c:	2b00      	cmp	r3, #0
 801145e:	dd4d      	ble.n	80114fc <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011462:	68db      	ldr	r3, [r3, #12]
 8011464:	685b      	ldr	r3, [r3, #4]
 8011466:	b29a      	uxth	r2, r3
 8011468:	4b81      	ldr	r3, [pc, #516]	; (8011670 <tcp_receive+0xb08>)
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	b29b      	uxth	r3, r3
 801146e:	1ad3      	subs	r3, r2, r3
 8011470:	b29a      	uxth	r2, r3
 8011472:	4b80      	ldr	r3, [pc, #512]	; (8011674 <tcp_receive+0xb0c>)
 8011474:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011476:	4b7f      	ldr	r3, [pc, #508]	; (8011674 <tcp_receive+0xb0c>)
 8011478:	68db      	ldr	r3, [r3, #12]
 801147a:	899b      	ldrh	r3, [r3, #12]
 801147c:	b29b      	uxth	r3, r3
 801147e:	4618      	mov	r0, r3
 8011480:	f7fa fc5c 	bl	800bd3c <lwip_htons>
 8011484:	4603      	mov	r3, r0
 8011486:	b2db      	uxtb	r3, r3
 8011488:	f003 0302 	and.w	r3, r3, #2
 801148c:	2b00      	cmp	r3, #0
 801148e:	d005      	beq.n	801149c <tcp_receive+0x934>
                inseg.len -= 1;
 8011490:	4b78      	ldr	r3, [pc, #480]	; (8011674 <tcp_receive+0xb0c>)
 8011492:	891b      	ldrh	r3, [r3, #8]
 8011494:	3b01      	subs	r3, #1
 8011496:	b29a      	uxth	r2, r3
 8011498:	4b76      	ldr	r3, [pc, #472]	; (8011674 <tcp_receive+0xb0c>)
 801149a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801149c:	4b75      	ldr	r3, [pc, #468]	; (8011674 <tcp_receive+0xb0c>)
 801149e:	685b      	ldr	r3, [r3, #4]
 80114a0:	4a74      	ldr	r2, [pc, #464]	; (8011674 <tcp_receive+0xb0c>)
 80114a2:	8912      	ldrh	r2, [r2, #8]
 80114a4:	4611      	mov	r1, r2
 80114a6:	4618      	mov	r0, r3
 80114a8:	f7fb fe54 	bl	800d154 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80114ac:	4b71      	ldr	r3, [pc, #452]	; (8011674 <tcp_receive+0xb0c>)
 80114ae:	891c      	ldrh	r4, [r3, #8]
 80114b0:	4b70      	ldr	r3, [pc, #448]	; (8011674 <tcp_receive+0xb0c>)
 80114b2:	68db      	ldr	r3, [r3, #12]
 80114b4:	899b      	ldrh	r3, [r3, #12]
 80114b6:	b29b      	uxth	r3, r3
 80114b8:	4618      	mov	r0, r3
 80114ba:	f7fa fc3f 	bl	800bd3c <lwip_htons>
 80114be:	4603      	mov	r3, r0
 80114c0:	b2db      	uxtb	r3, r3
 80114c2:	f003 0303 	and.w	r3, r3, #3
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d001      	beq.n	80114ce <tcp_receive+0x966>
 80114ca:	2301      	movs	r3, #1
 80114cc:	e000      	b.n	80114d0 <tcp_receive+0x968>
 80114ce:	2300      	movs	r3, #0
 80114d0:	4423      	add	r3, r4
 80114d2:	b29a      	uxth	r2, r3
 80114d4:	4b65      	ldr	r3, [pc, #404]	; (801166c <tcp_receive+0xb04>)
 80114d6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80114d8:	4b64      	ldr	r3, [pc, #400]	; (801166c <tcp_receive+0xb04>)
 80114da:	881b      	ldrh	r3, [r3, #0]
 80114dc:	461a      	mov	r2, r3
 80114de:	4b64      	ldr	r3, [pc, #400]	; (8011670 <tcp_receive+0xb08>)
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	441a      	add	r2, r3
 80114e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114e6:	68db      	ldr	r3, [r3, #12]
 80114e8:	685b      	ldr	r3, [r3, #4]
 80114ea:	429a      	cmp	r2, r3
 80114ec:	d006      	beq.n	80114fc <tcp_receive+0x994>
 80114ee:	4b62      	ldr	r3, [pc, #392]	; (8011678 <tcp_receive+0xb10>)
 80114f0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80114f4:	4961      	ldr	r1, [pc, #388]	; (801167c <tcp_receive+0xb14>)
 80114f6:	4862      	ldr	r0, [pc, #392]	; (8011680 <tcp_receive+0xb18>)
 80114f8:	f005 f8c0 	bl	801667c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011500:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011502:	4b5a      	ldr	r3, [pc, #360]	; (801166c <tcp_receive+0xb04>)
 8011504:	881b      	ldrh	r3, [r3, #0]
 8011506:	461a      	mov	r2, r3
 8011508:	4b59      	ldr	r3, [pc, #356]	; (8011670 <tcp_receive+0xb08>)
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	441a      	add	r2, r3
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011516:	4b55      	ldr	r3, [pc, #340]	; (801166c <tcp_receive+0xb04>)
 8011518:	881b      	ldrh	r3, [r3, #0]
 801151a:	429a      	cmp	r2, r3
 801151c:	d206      	bcs.n	801152c <tcp_receive+0x9c4>
 801151e:	4b56      	ldr	r3, [pc, #344]	; (8011678 <tcp_receive+0xb10>)
 8011520:	f240 6207 	movw	r2, #1543	; 0x607
 8011524:	4957      	ldr	r1, [pc, #348]	; (8011684 <tcp_receive+0xb1c>)
 8011526:	4856      	ldr	r0, [pc, #344]	; (8011680 <tcp_receive+0xb18>)
 8011528:	f005 f8a8 	bl	801667c <iprintf>
        pcb->rcv_wnd -= tcplen;
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011530:	4b4e      	ldr	r3, [pc, #312]	; (801166c <tcp_receive+0xb04>)
 8011532:	881b      	ldrh	r3, [r3, #0]
 8011534:	1ad3      	subs	r3, r2, r3
 8011536:	b29a      	uxth	r2, r3
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801153c:	6878      	ldr	r0, [r7, #4]
 801153e:	f7fc fe97 	bl	800e270 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011542:	4b4c      	ldr	r3, [pc, #304]	; (8011674 <tcp_receive+0xb0c>)
 8011544:	685b      	ldr	r3, [r3, #4]
 8011546:	891b      	ldrh	r3, [r3, #8]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d006      	beq.n	801155a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801154c:	4b49      	ldr	r3, [pc, #292]	; (8011674 <tcp_receive+0xb0c>)
 801154e:	685b      	ldr	r3, [r3, #4]
 8011550:	4a4d      	ldr	r2, [pc, #308]	; (8011688 <tcp_receive+0xb20>)
 8011552:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011554:	4b47      	ldr	r3, [pc, #284]	; (8011674 <tcp_receive+0xb0c>)
 8011556:	2200      	movs	r2, #0
 8011558:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801155a:	4b46      	ldr	r3, [pc, #280]	; (8011674 <tcp_receive+0xb0c>)
 801155c:	68db      	ldr	r3, [r3, #12]
 801155e:	899b      	ldrh	r3, [r3, #12]
 8011560:	b29b      	uxth	r3, r3
 8011562:	4618      	mov	r0, r3
 8011564:	f7fa fbea 	bl	800bd3c <lwip_htons>
 8011568:	4603      	mov	r3, r0
 801156a:	b2db      	uxtb	r3, r3
 801156c:	f003 0301 	and.w	r3, r3, #1
 8011570:	2b00      	cmp	r3, #0
 8011572:	f000 80b8 	beq.w	80116e6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011576:	4b45      	ldr	r3, [pc, #276]	; (801168c <tcp_receive+0xb24>)
 8011578:	781b      	ldrb	r3, [r3, #0]
 801157a:	f043 0320 	orr.w	r3, r3, #32
 801157e:	b2da      	uxtb	r2, r3
 8011580:	4b42      	ldr	r3, [pc, #264]	; (801168c <tcp_receive+0xb24>)
 8011582:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011584:	e0af      	b.n	80116e6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801158a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011590:	68db      	ldr	r3, [r3, #12]
 8011592:	685b      	ldr	r3, [r3, #4]
 8011594:	4a36      	ldr	r2, [pc, #216]	; (8011670 <tcp_receive+0xb08>)
 8011596:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011598:	68bb      	ldr	r3, [r7, #8]
 801159a:	891b      	ldrh	r3, [r3, #8]
 801159c:	461c      	mov	r4, r3
 801159e:	68bb      	ldr	r3, [r7, #8]
 80115a0:	68db      	ldr	r3, [r3, #12]
 80115a2:	899b      	ldrh	r3, [r3, #12]
 80115a4:	b29b      	uxth	r3, r3
 80115a6:	4618      	mov	r0, r3
 80115a8:	f7fa fbc8 	bl	800bd3c <lwip_htons>
 80115ac:	4603      	mov	r3, r0
 80115ae:	b2db      	uxtb	r3, r3
 80115b0:	f003 0303 	and.w	r3, r3, #3
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d001      	beq.n	80115bc <tcp_receive+0xa54>
 80115b8:	2301      	movs	r3, #1
 80115ba:	e000      	b.n	80115be <tcp_receive+0xa56>
 80115bc:	2300      	movs	r3, #0
 80115be:	191a      	adds	r2, r3, r4
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115c4:	441a      	add	r2, r3
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80115ce:	461c      	mov	r4, r3
 80115d0:	68bb      	ldr	r3, [r7, #8]
 80115d2:	891b      	ldrh	r3, [r3, #8]
 80115d4:	461d      	mov	r5, r3
 80115d6:	68bb      	ldr	r3, [r7, #8]
 80115d8:	68db      	ldr	r3, [r3, #12]
 80115da:	899b      	ldrh	r3, [r3, #12]
 80115dc:	b29b      	uxth	r3, r3
 80115de:	4618      	mov	r0, r3
 80115e0:	f7fa fbac 	bl	800bd3c <lwip_htons>
 80115e4:	4603      	mov	r3, r0
 80115e6:	b2db      	uxtb	r3, r3
 80115e8:	f003 0303 	and.w	r3, r3, #3
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d001      	beq.n	80115f4 <tcp_receive+0xa8c>
 80115f0:	2301      	movs	r3, #1
 80115f2:	e000      	b.n	80115f6 <tcp_receive+0xa8e>
 80115f4:	2300      	movs	r3, #0
 80115f6:	442b      	add	r3, r5
 80115f8:	429c      	cmp	r4, r3
 80115fa:	d206      	bcs.n	801160a <tcp_receive+0xaa2>
 80115fc:	4b1e      	ldr	r3, [pc, #120]	; (8011678 <tcp_receive+0xb10>)
 80115fe:	f240 622b 	movw	r2, #1579	; 0x62b
 8011602:	4923      	ldr	r1, [pc, #140]	; (8011690 <tcp_receive+0xb28>)
 8011604:	481e      	ldr	r0, [pc, #120]	; (8011680 <tcp_receive+0xb18>)
 8011606:	f005 f839 	bl	801667c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801160a:	68bb      	ldr	r3, [r7, #8]
 801160c:	891b      	ldrh	r3, [r3, #8]
 801160e:	461c      	mov	r4, r3
 8011610:	68bb      	ldr	r3, [r7, #8]
 8011612:	68db      	ldr	r3, [r3, #12]
 8011614:	899b      	ldrh	r3, [r3, #12]
 8011616:	b29b      	uxth	r3, r3
 8011618:	4618      	mov	r0, r3
 801161a:	f7fa fb8f 	bl	800bd3c <lwip_htons>
 801161e:	4603      	mov	r3, r0
 8011620:	b2db      	uxtb	r3, r3
 8011622:	f003 0303 	and.w	r3, r3, #3
 8011626:	2b00      	cmp	r3, #0
 8011628:	d001      	beq.n	801162e <tcp_receive+0xac6>
 801162a:	2301      	movs	r3, #1
 801162c:	e000      	b.n	8011630 <tcp_receive+0xac8>
 801162e:	2300      	movs	r3, #0
 8011630:	1919      	adds	r1, r3, r4
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011636:	b28b      	uxth	r3, r1
 8011638:	1ad3      	subs	r3, r2, r3
 801163a:	b29a      	uxth	r2, r3
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011640:	6878      	ldr	r0, [r7, #4]
 8011642:	f7fc fe15 	bl	800e270 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011646:	68bb      	ldr	r3, [r7, #8]
 8011648:	685b      	ldr	r3, [r3, #4]
 801164a:	891b      	ldrh	r3, [r3, #8]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d028      	beq.n	80116a2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011650:	4b0d      	ldr	r3, [pc, #52]	; (8011688 <tcp_receive+0xb20>)
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	2b00      	cmp	r3, #0
 8011656:	d01d      	beq.n	8011694 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8011658:	4b0b      	ldr	r3, [pc, #44]	; (8011688 <tcp_receive+0xb20>)
 801165a:	681a      	ldr	r2, [r3, #0]
 801165c:	68bb      	ldr	r3, [r7, #8]
 801165e:	685b      	ldr	r3, [r3, #4]
 8011660:	4619      	mov	r1, r3
 8011662:	4610      	mov	r0, r2
 8011664:	f7fb ffbe 	bl	800d5e4 <pbuf_cat>
 8011668:	e018      	b.n	801169c <tcp_receive+0xb34>
 801166a:	bf00      	nop
 801166c:	200015b2 	.word	0x200015b2
 8011670:	200015a8 	.word	0x200015a8
 8011674:	20001588 	.word	0x20001588
 8011678:	08019ff4 	.word	0x08019ff4
 801167c:	0801a3d4 	.word	0x0801a3d4
 8011680:	0801a040 	.word	0x0801a040
 8011684:	0801a410 	.word	0x0801a410
 8011688:	200015b8 	.word	0x200015b8
 801168c:	200015b5 	.word	0x200015b5
 8011690:	0801a430 	.word	0x0801a430
            } else {
              recv_data = cseg->p;
 8011694:	68bb      	ldr	r3, [r7, #8]
 8011696:	685b      	ldr	r3, [r3, #4]
 8011698:	4a70      	ldr	r2, [pc, #448]	; (801185c <tcp_receive+0xcf4>)
 801169a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801169c:	68bb      	ldr	r3, [r7, #8]
 801169e:	2200      	movs	r2, #0
 80116a0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80116a2:	68bb      	ldr	r3, [r7, #8]
 80116a4:	68db      	ldr	r3, [r3, #12]
 80116a6:	899b      	ldrh	r3, [r3, #12]
 80116a8:	b29b      	uxth	r3, r3
 80116aa:	4618      	mov	r0, r3
 80116ac:	f7fa fb46 	bl	800bd3c <lwip_htons>
 80116b0:	4603      	mov	r3, r0
 80116b2:	b2db      	uxtb	r3, r3
 80116b4:	f003 0301 	and.w	r3, r3, #1
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d00d      	beq.n	80116d8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80116bc:	4b68      	ldr	r3, [pc, #416]	; (8011860 <tcp_receive+0xcf8>)
 80116be:	781b      	ldrb	r3, [r3, #0]
 80116c0:	f043 0320 	orr.w	r3, r3, #32
 80116c4:	b2da      	uxtb	r2, r3
 80116c6:	4b66      	ldr	r3, [pc, #408]	; (8011860 <tcp_receive+0xcf8>)
 80116c8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	7d1b      	ldrb	r3, [r3, #20]
 80116ce:	2b04      	cmp	r3, #4
 80116d0:	d102      	bne.n	80116d8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	2207      	movs	r2, #7
 80116d6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80116d8:	68bb      	ldr	r3, [r7, #8]
 80116da:	681a      	ldr	r2, [r3, #0]
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80116e0:	68b8      	ldr	r0, [r7, #8]
 80116e2:	f7fd faea 	bl	800ecba <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d008      	beq.n	8011700 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80116f2:	68db      	ldr	r3, [r3, #12]
 80116f4:	685a      	ldr	r2, [r3, #4]
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80116fa:	429a      	cmp	r2, r3
 80116fc:	f43f af43 	beq.w	8011586 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	8b5b      	ldrh	r3, [r3, #26]
 8011704:	f003 0301 	and.w	r3, r3, #1
 8011708:	2b00      	cmp	r3, #0
 801170a:	d00e      	beq.n	801172a <tcp_receive+0xbc2>
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	8b5b      	ldrh	r3, [r3, #26]
 8011710:	f023 0301 	bic.w	r3, r3, #1
 8011714:	b29a      	uxth	r2, r3
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	835a      	strh	r2, [r3, #26]
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	8b5b      	ldrh	r3, [r3, #26]
 801171e:	f043 0302 	orr.w	r3, r3, #2
 8011722:	b29a      	uxth	r2, r3
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011728:	e188      	b.n	8011a3c <tcp_receive+0xed4>
        tcp_ack(pcb);
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	8b5b      	ldrh	r3, [r3, #26]
 801172e:	f043 0301 	orr.w	r3, r3, #1
 8011732:	b29a      	uxth	r2, r3
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011738:	e180      	b.n	8011a3c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801173e:	2b00      	cmp	r3, #0
 8011740:	d106      	bne.n	8011750 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8011742:	4848      	ldr	r0, [pc, #288]	; (8011864 <tcp_receive+0xcfc>)
 8011744:	f7fd faf0 	bl	800ed28 <tcp_seg_copy>
 8011748:	4602      	mov	r2, r0
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	675a      	str	r2, [r3, #116]	; 0x74
 801174e:	e16d      	b.n	8011a2c <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011750:	2300      	movs	r3, #0
 8011752:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011758:	63bb      	str	r3, [r7, #56]	; 0x38
 801175a:	e157      	b.n	8011a0c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 801175c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801175e:	68db      	ldr	r3, [r3, #12]
 8011760:	685a      	ldr	r2, [r3, #4]
 8011762:	4b41      	ldr	r3, [pc, #260]	; (8011868 <tcp_receive+0xd00>)
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	429a      	cmp	r2, r3
 8011768:	d11d      	bne.n	80117a6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801176a:	4b3e      	ldr	r3, [pc, #248]	; (8011864 <tcp_receive+0xcfc>)
 801176c:	891a      	ldrh	r2, [r3, #8]
 801176e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011770:	891b      	ldrh	r3, [r3, #8]
 8011772:	429a      	cmp	r2, r3
 8011774:	f240 814f 	bls.w	8011a16 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011778:	483a      	ldr	r0, [pc, #232]	; (8011864 <tcp_receive+0xcfc>)
 801177a:	f7fd fad5 	bl	800ed28 <tcp_seg_copy>
 801177e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011780:	697b      	ldr	r3, [r7, #20]
 8011782:	2b00      	cmp	r3, #0
 8011784:	f000 8149 	beq.w	8011a1a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8011788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801178a:	2b00      	cmp	r3, #0
 801178c:	d003      	beq.n	8011796 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801178e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011790:	697a      	ldr	r2, [r7, #20]
 8011792:	601a      	str	r2, [r3, #0]
 8011794:	e002      	b.n	801179c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	697a      	ldr	r2, [r7, #20]
 801179a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801179c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801179e:	6978      	ldr	r0, [r7, #20]
 80117a0:	f7ff f8de 	bl	8010960 <tcp_oos_insert_segment>
                }
                break;
 80117a4:	e139      	b.n	8011a1a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80117a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d117      	bne.n	80117dc <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80117ac:	4b2e      	ldr	r3, [pc, #184]	; (8011868 <tcp_receive+0xd00>)
 80117ae:	681a      	ldr	r2, [r3, #0]
 80117b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117b2:	68db      	ldr	r3, [r3, #12]
 80117b4:	685b      	ldr	r3, [r3, #4]
 80117b6:	1ad3      	subs	r3, r2, r3
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	da57      	bge.n	801186c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80117bc:	4829      	ldr	r0, [pc, #164]	; (8011864 <tcp_receive+0xcfc>)
 80117be:	f7fd fab3 	bl	800ed28 <tcp_seg_copy>
 80117c2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80117c4:	69bb      	ldr	r3, [r7, #24]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	f000 8129 	beq.w	8011a1e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	69ba      	ldr	r2, [r7, #24]
 80117d0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80117d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80117d4:	69b8      	ldr	r0, [r7, #24]
 80117d6:	f7ff f8c3 	bl	8010960 <tcp_oos_insert_segment>
                  }
                  break;
 80117da:	e120      	b.n	8011a1e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80117dc:	4b22      	ldr	r3, [pc, #136]	; (8011868 <tcp_receive+0xd00>)
 80117de:	681a      	ldr	r2, [r3, #0]
 80117e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117e2:	68db      	ldr	r3, [r3, #12]
 80117e4:	685b      	ldr	r3, [r3, #4]
 80117e6:	1ad3      	subs	r3, r2, r3
 80117e8:	3b01      	subs	r3, #1
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	db3e      	blt.n	801186c <tcp_receive+0xd04>
 80117ee:	4b1e      	ldr	r3, [pc, #120]	; (8011868 <tcp_receive+0xd00>)
 80117f0:	681a      	ldr	r2, [r3, #0]
 80117f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117f4:	68db      	ldr	r3, [r3, #12]
 80117f6:	685b      	ldr	r3, [r3, #4]
 80117f8:	1ad3      	subs	r3, r2, r3
 80117fa:	3301      	adds	r3, #1
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	dc35      	bgt.n	801186c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011800:	4818      	ldr	r0, [pc, #96]	; (8011864 <tcp_receive+0xcfc>)
 8011802:	f7fd fa91 	bl	800ed28 <tcp_seg_copy>
 8011806:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011808:	69fb      	ldr	r3, [r7, #28]
 801180a:	2b00      	cmp	r3, #0
 801180c:	f000 8109 	beq.w	8011a22 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011812:	68db      	ldr	r3, [r3, #12]
 8011814:	685b      	ldr	r3, [r3, #4]
 8011816:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011818:	8912      	ldrh	r2, [r2, #8]
 801181a:	441a      	add	r2, r3
 801181c:	4b12      	ldr	r3, [pc, #72]	; (8011868 <tcp_receive+0xd00>)
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	1ad3      	subs	r3, r2, r3
 8011822:	2b00      	cmp	r3, #0
 8011824:	dd12      	ble.n	801184c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011826:	4b10      	ldr	r3, [pc, #64]	; (8011868 <tcp_receive+0xd00>)
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	b29a      	uxth	r2, r3
 801182c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801182e:	68db      	ldr	r3, [r3, #12]
 8011830:	685b      	ldr	r3, [r3, #4]
 8011832:	b29b      	uxth	r3, r3
 8011834:	1ad3      	subs	r3, r2, r3
 8011836:	b29a      	uxth	r2, r3
 8011838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801183a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801183c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801183e:	685a      	ldr	r2, [r3, #4]
 8011840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011842:	891b      	ldrh	r3, [r3, #8]
 8011844:	4619      	mov	r1, r3
 8011846:	4610      	mov	r0, r2
 8011848:	f7fb fc84 	bl	800d154 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801184c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801184e:	69fa      	ldr	r2, [r7, #28]
 8011850:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8011852:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011854:	69f8      	ldr	r0, [r7, #28]
 8011856:	f7ff f883 	bl	8010960 <tcp_oos_insert_segment>
                  }
                  break;
 801185a:	e0e2      	b.n	8011a22 <tcp_receive+0xeba>
 801185c:	200015b8 	.word	0x200015b8
 8011860:	200015b5 	.word	0x200015b5
 8011864:	20001588 	.word	0x20001588
 8011868:	200015a8 	.word	0x200015a8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801186c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801186e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	2b00      	cmp	r3, #0
 8011876:	f040 80c6 	bne.w	8011a06 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801187a:	4b80      	ldr	r3, [pc, #512]	; (8011a7c <tcp_receive+0xf14>)
 801187c:	681a      	ldr	r2, [r3, #0]
 801187e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011880:	68db      	ldr	r3, [r3, #12]
 8011882:	685b      	ldr	r3, [r3, #4]
 8011884:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8011886:	2b00      	cmp	r3, #0
 8011888:	f340 80bd 	ble.w	8011a06 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801188c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801188e:	68db      	ldr	r3, [r3, #12]
 8011890:	899b      	ldrh	r3, [r3, #12]
 8011892:	b29b      	uxth	r3, r3
 8011894:	4618      	mov	r0, r3
 8011896:	f7fa fa51 	bl	800bd3c <lwip_htons>
 801189a:	4603      	mov	r3, r0
 801189c:	b2db      	uxtb	r3, r3
 801189e:	f003 0301 	and.w	r3, r3, #1
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	f040 80bf 	bne.w	8011a26 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80118a8:	4875      	ldr	r0, [pc, #468]	; (8011a80 <tcp_receive+0xf18>)
 80118aa:	f7fd fa3d 	bl	800ed28 <tcp_seg_copy>
 80118ae:	4602      	mov	r2, r0
 80118b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118b2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80118b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	f000 80b6 	beq.w	8011a2a <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80118be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118c0:	68db      	ldr	r3, [r3, #12]
 80118c2:	685b      	ldr	r3, [r3, #4]
 80118c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80118c6:	8912      	ldrh	r2, [r2, #8]
 80118c8:	441a      	add	r2, r3
 80118ca:	4b6c      	ldr	r3, [pc, #432]	; (8011a7c <tcp_receive+0xf14>)
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	1ad3      	subs	r3, r2, r3
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	dd12      	ble.n	80118fa <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80118d4:	4b69      	ldr	r3, [pc, #420]	; (8011a7c <tcp_receive+0xf14>)
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	b29a      	uxth	r2, r3
 80118da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118dc:	68db      	ldr	r3, [r3, #12]
 80118de:	685b      	ldr	r3, [r3, #4]
 80118e0:	b29b      	uxth	r3, r3
 80118e2:	1ad3      	subs	r3, r2, r3
 80118e4:	b29a      	uxth	r2, r3
 80118e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118e8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80118ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118ec:	685a      	ldr	r2, [r3, #4]
 80118ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118f0:	891b      	ldrh	r3, [r3, #8]
 80118f2:	4619      	mov	r1, r3
 80118f4:	4610      	mov	r0, r2
 80118f6:	f7fb fc2d 	bl	800d154 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80118fa:	4b62      	ldr	r3, [pc, #392]	; (8011a84 <tcp_receive+0xf1c>)
 80118fc:	881b      	ldrh	r3, [r3, #0]
 80118fe:	461a      	mov	r2, r3
 8011900:	4b5e      	ldr	r3, [pc, #376]	; (8011a7c <tcp_receive+0xf14>)
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	441a      	add	r2, r3
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801190a:	6879      	ldr	r1, [r7, #4]
 801190c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801190e:	440b      	add	r3, r1
 8011910:	1ad3      	subs	r3, r2, r3
 8011912:	2b00      	cmp	r3, #0
 8011914:	f340 8089 	ble.w	8011a2a <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	68db      	ldr	r3, [r3, #12]
 801191e:	899b      	ldrh	r3, [r3, #12]
 8011920:	b29b      	uxth	r3, r3
 8011922:	4618      	mov	r0, r3
 8011924:	f7fa fa0a 	bl	800bd3c <lwip_htons>
 8011928:	4603      	mov	r3, r0
 801192a:	b2db      	uxtb	r3, r3
 801192c:	f003 0301 	and.w	r3, r3, #1
 8011930:	2b00      	cmp	r3, #0
 8011932:	d022      	beq.n	801197a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	68db      	ldr	r3, [r3, #12]
 801193a:	899b      	ldrh	r3, [r3, #12]
 801193c:	b29b      	uxth	r3, r3
 801193e:	b21b      	sxth	r3, r3
 8011940:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011944:	b21c      	sxth	r4, r3
 8011946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	68db      	ldr	r3, [r3, #12]
 801194c:	899b      	ldrh	r3, [r3, #12]
 801194e:	b29b      	uxth	r3, r3
 8011950:	4618      	mov	r0, r3
 8011952:	f7fa f9f3 	bl	800bd3c <lwip_htons>
 8011956:	4603      	mov	r3, r0
 8011958:	b2db      	uxtb	r3, r3
 801195a:	b29b      	uxth	r3, r3
 801195c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011960:	b29b      	uxth	r3, r3
 8011962:	4618      	mov	r0, r3
 8011964:	f7fa f9ea 	bl	800bd3c <lwip_htons>
 8011968:	4603      	mov	r3, r0
 801196a:	b21b      	sxth	r3, r3
 801196c:	4323      	orrs	r3, r4
 801196e:	b21a      	sxth	r2, r3
 8011970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	68db      	ldr	r3, [r3, #12]
 8011976:	b292      	uxth	r2, r2
 8011978:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801197e:	b29a      	uxth	r2, r3
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011984:	4413      	add	r3, r2
 8011986:	b299      	uxth	r1, r3
 8011988:	4b3c      	ldr	r3, [pc, #240]	; (8011a7c <tcp_receive+0xf14>)
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	b29a      	uxth	r2, r3
 801198e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	1a8a      	subs	r2, r1, r2
 8011994:	b292      	uxth	r2, r2
 8011996:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	685a      	ldr	r2, [r3, #4]
 801199e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	891b      	ldrh	r3, [r3, #8]
 80119a4:	4619      	mov	r1, r3
 80119a6:	4610      	mov	r0, r2
 80119a8:	f7fb fbd4 	bl	800d154 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80119ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	891c      	ldrh	r4, [r3, #8]
 80119b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	68db      	ldr	r3, [r3, #12]
 80119b8:	899b      	ldrh	r3, [r3, #12]
 80119ba:	b29b      	uxth	r3, r3
 80119bc:	4618      	mov	r0, r3
 80119be:	f7fa f9bd 	bl	800bd3c <lwip_htons>
 80119c2:	4603      	mov	r3, r0
 80119c4:	b2db      	uxtb	r3, r3
 80119c6:	f003 0303 	and.w	r3, r3, #3
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d001      	beq.n	80119d2 <tcp_receive+0xe6a>
 80119ce:	2301      	movs	r3, #1
 80119d0:	e000      	b.n	80119d4 <tcp_receive+0xe6c>
 80119d2:	2300      	movs	r3, #0
 80119d4:	4423      	add	r3, r4
 80119d6:	b29a      	uxth	r2, r3
 80119d8:	4b2a      	ldr	r3, [pc, #168]	; (8011a84 <tcp_receive+0xf1c>)
 80119da:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80119dc:	4b29      	ldr	r3, [pc, #164]	; (8011a84 <tcp_receive+0xf1c>)
 80119de:	881b      	ldrh	r3, [r3, #0]
 80119e0:	461a      	mov	r2, r3
 80119e2:	4b26      	ldr	r3, [pc, #152]	; (8011a7c <tcp_receive+0xf14>)
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	441a      	add	r2, r3
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119ec:	6879      	ldr	r1, [r7, #4]
 80119ee:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80119f0:	440b      	add	r3, r1
 80119f2:	429a      	cmp	r2, r3
 80119f4:	d019      	beq.n	8011a2a <tcp_receive+0xec2>
 80119f6:	4b24      	ldr	r3, [pc, #144]	; (8011a88 <tcp_receive+0xf20>)
 80119f8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80119fc:	4923      	ldr	r1, [pc, #140]	; (8011a8c <tcp_receive+0xf24>)
 80119fe:	4824      	ldr	r0, [pc, #144]	; (8011a90 <tcp_receive+0xf28>)
 8011a00:	f004 fe3c 	bl	801667c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011a04:	e011      	b.n	8011a2a <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8011a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	f47f aea4 	bne.w	801175c <tcp_receive+0xbf4>
 8011a14:	e00a      	b.n	8011a2c <tcp_receive+0xec4>
                break;
 8011a16:	bf00      	nop
 8011a18:	e008      	b.n	8011a2c <tcp_receive+0xec4>
                break;
 8011a1a:	bf00      	nop
 8011a1c:	e006      	b.n	8011a2c <tcp_receive+0xec4>
                  break;
 8011a1e:	bf00      	nop
 8011a20:	e004      	b.n	8011a2c <tcp_receive+0xec4>
                  break;
 8011a22:	bf00      	nop
 8011a24:	e002      	b.n	8011a2c <tcp_receive+0xec4>
                  break;
 8011a26:	bf00      	nop
 8011a28:	e000      	b.n	8011a2c <tcp_receive+0xec4>
                break;
 8011a2a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011a2c:	6878      	ldr	r0, [r7, #4]
 8011a2e:	f001 fe8b 	bl	8013748 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011a32:	e003      	b.n	8011a3c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011a34:	6878      	ldr	r0, [r7, #4]
 8011a36:	f001 fe87 	bl	8013748 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011a3a:	e01a      	b.n	8011a72 <tcp_receive+0xf0a>
 8011a3c:	e019      	b.n	8011a72 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011a3e:	4b0f      	ldr	r3, [pc, #60]	; (8011a7c <tcp_receive+0xf14>)
 8011a40:	681a      	ldr	r2, [r3, #0]
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a46:	1ad3      	subs	r3, r2, r3
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	db0a      	blt.n	8011a62 <tcp_receive+0xefa>
 8011a4c:	4b0b      	ldr	r3, [pc, #44]	; (8011a7c <tcp_receive+0xf14>)
 8011a4e:	681a      	ldr	r2, [r3, #0]
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a54:	6879      	ldr	r1, [r7, #4]
 8011a56:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011a58:	440b      	add	r3, r1
 8011a5a:	1ad3      	subs	r3, r2, r3
 8011a5c:	3301      	adds	r3, #1
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	dd07      	ble.n	8011a72 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	8b5b      	ldrh	r3, [r3, #26]
 8011a66:	f043 0302 	orr.w	r3, r3, #2
 8011a6a:	b29a      	uxth	r2, r3
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011a70:	e7ff      	b.n	8011a72 <tcp_receive+0xf0a>
 8011a72:	bf00      	nop
 8011a74:	3750      	adds	r7, #80	; 0x50
 8011a76:	46bd      	mov	sp, r7
 8011a78:	bdb0      	pop	{r4, r5, r7, pc}
 8011a7a:	bf00      	nop
 8011a7c:	200015a8 	.word	0x200015a8
 8011a80:	20001588 	.word	0x20001588
 8011a84:	200015b2 	.word	0x200015b2
 8011a88:	08019ff4 	.word	0x08019ff4
 8011a8c:	0801a39c 	.word	0x0801a39c
 8011a90:	0801a040 	.word	0x0801a040

08011a94 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011a94:	b480      	push	{r7}
 8011a96:	b083      	sub	sp, #12
 8011a98:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8011a9a:	4b15      	ldr	r3, [pc, #84]	; (8011af0 <tcp_get_next_optbyte+0x5c>)
 8011a9c:	881b      	ldrh	r3, [r3, #0]
 8011a9e:	1c5a      	adds	r2, r3, #1
 8011aa0:	b291      	uxth	r1, r2
 8011aa2:	4a13      	ldr	r2, [pc, #76]	; (8011af0 <tcp_get_next_optbyte+0x5c>)
 8011aa4:	8011      	strh	r1, [r2, #0]
 8011aa6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011aa8:	4b12      	ldr	r3, [pc, #72]	; (8011af4 <tcp_get_next_optbyte+0x60>)
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d004      	beq.n	8011aba <tcp_get_next_optbyte+0x26>
 8011ab0:	4b11      	ldr	r3, [pc, #68]	; (8011af8 <tcp_get_next_optbyte+0x64>)
 8011ab2:	881b      	ldrh	r3, [r3, #0]
 8011ab4:	88fa      	ldrh	r2, [r7, #6]
 8011ab6:	429a      	cmp	r2, r3
 8011ab8:	d208      	bcs.n	8011acc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8011aba:	4b10      	ldr	r3, [pc, #64]	; (8011afc <tcp_get_next_optbyte+0x68>)
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	3314      	adds	r3, #20
 8011ac0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8011ac2:	88fb      	ldrh	r3, [r7, #6]
 8011ac4:	683a      	ldr	r2, [r7, #0]
 8011ac6:	4413      	add	r3, r2
 8011ac8:	781b      	ldrb	r3, [r3, #0]
 8011aca:	e00b      	b.n	8011ae4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011acc:	88fb      	ldrh	r3, [r7, #6]
 8011ace:	b2da      	uxtb	r2, r3
 8011ad0:	4b09      	ldr	r3, [pc, #36]	; (8011af8 <tcp_get_next_optbyte+0x64>)
 8011ad2:	881b      	ldrh	r3, [r3, #0]
 8011ad4:	b2db      	uxtb	r3, r3
 8011ad6:	1ad3      	subs	r3, r2, r3
 8011ad8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011ada:	4b06      	ldr	r3, [pc, #24]	; (8011af4 <tcp_get_next_optbyte+0x60>)
 8011adc:	681a      	ldr	r2, [r3, #0]
 8011ade:	797b      	ldrb	r3, [r7, #5]
 8011ae0:	4413      	add	r3, r2
 8011ae2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	370c      	adds	r7, #12
 8011ae8:	46bd      	mov	sp, r7
 8011aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aee:	4770      	bx	lr
 8011af0:	200015a4 	.word	0x200015a4
 8011af4:	200015a0 	.word	0x200015a0
 8011af8:	2000159e 	.word	0x2000159e
 8011afc:	20001598 	.word	0x20001598

08011b00 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011b00:	b580      	push	{r7, lr}
 8011b02:	b084      	sub	sp, #16
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d106      	bne.n	8011b1c <tcp_parseopt+0x1c>
 8011b0e:	4b32      	ldr	r3, [pc, #200]	; (8011bd8 <tcp_parseopt+0xd8>)
 8011b10:	f240 727d 	movw	r2, #1917	; 0x77d
 8011b14:	4931      	ldr	r1, [pc, #196]	; (8011bdc <tcp_parseopt+0xdc>)
 8011b16:	4832      	ldr	r0, [pc, #200]	; (8011be0 <tcp_parseopt+0xe0>)
 8011b18:	f004 fdb0 	bl	801667c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011b1c:	4b31      	ldr	r3, [pc, #196]	; (8011be4 <tcp_parseopt+0xe4>)
 8011b1e:	881b      	ldrh	r3, [r3, #0]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d055      	beq.n	8011bd0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011b24:	4b30      	ldr	r3, [pc, #192]	; (8011be8 <tcp_parseopt+0xe8>)
 8011b26:	2200      	movs	r2, #0
 8011b28:	801a      	strh	r2, [r3, #0]
 8011b2a:	e045      	b.n	8011bb8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8011b2c:	f7ff ffb2 	bl	8011a94 <tcp_get_next_optbyte>
 8011b30:	4603      	mov	r3, r0
 8011b32:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011b34:	7bfb      	ldrb	r3, [r7, #15]
 8011b36:	2b02      	cmp	r3, #2
 8011b38:	d006      	beq.n	8011b48 <tcp_parseopt+0x48>
 8011b3a:	2b02      	cmp	r3, #2
 8011b3c:	dc2b      	bgt.n	8011b96 <tcp_parseopt+0x96>
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d041      	beq.n	8011bc6 <tcp_parseopt+0xc6>
 8011b42:	2b01      	cmp	r3, #1
 8011b44:	d127      	bne.n	8011b96 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8011b46:	e037      	b.n	8011bb8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011b48:	f7ff ffa4 	bl	8011a94 <tcp_get_next_optbyte>
 8011b4c:	4603      	mov	r3, r0
 8011b4e:	2b04      	cmp	r3, #4
 8011b50:	d13b      	bne.n	8011bca <tcp_parseopt+0xca>
 8011b52:	4b25      	ldr	r3, [pc, #148]	; (8011be8 <tcp_parseopt+0xe8>)
 8011b54:	881b      	ldrh	r3, [r3, #0]
 8011b56:	3301      	adds	r3, #1
 8011b58:	4a22      	ldr	r2, [pc, #136]	; (8011be4 <tcp_parseopt+0xe4>)
 8011b5a:	8812      	ldrh	r2, [r2, #0]
 8011b5c:	4293      	cmp	r3, r2
 8011b5e:	da34      	bge.n	8011bca <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011b60:	f7ff ff98 	bl	8011a94 <tcp_get_next_optbyte>
 8011b64:	4603      	mov	r3, r0
 8011b66:	b29b      	uxth	r3, r3
 8011b68:	021b      	lsls	r3, r3, #8
 8011b6a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011b6c:	f7ff ff92 	bl	8011a94 <tcp_get_next_optbyte>
 8011b70:	4603      	mov	r3, r0
 8011b72:	b29a      	uxth	r2, r3
 8011b74:	89bb      	ldrh	r3, [r7, #12]
 8011b76:	4313      	orrs	r3, r2
 8011b78:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011b7a:	89bb      	ldrh	r3, [r7, #12]
 8011b7c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011b80:	d804      	bhi.n	8011b8c <tcp_parseopt+0x8c>
 8011b82:	89bb      	ldrh	r3, [r7, #12]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d001      	beq.n	8011b8c <tcp_parseopt+0x8c>
 8011b88:	89ba      	ldrh	r2, [r7, #12]
 8011b8a:	e001      	b.n	8011b90 <tcp_parseopt+0x90>
 8011b8c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011b94:	e010      	b.n	8011bb8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011b96:	f7ff ff7d 	bl	8011a94 <tcp_get_next_optbyte>
 8011b9a:	4603      	mov	r3, r0
 8011b9c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011b9e:	7afb      	ldrb	r3, [r7, #11]
 8011ba0:	2b01      	cmp	r3, #1
 8011ba2:	d914      	bls.n	8011bce <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011ba4:	7afb      	ldrb	r3, [r7, #11]
 8011ba6:	b29a      	uxth	r2, r3
 8011ba8:	4b0f      	ldr	r3, [pc, #60]	; (8011be8 <tcp_parseopt+0xe8>)
 8011baa:	881b      	ldrh	r3, [r3, #0]
 8011bac:	4413      	add	r3, r2
 8011bae:	b29b      	uxth	r3, r3
 8011bb0:	3b02      	subs	r3, #2
 8011bb2:	b29a      	uxth	r2, r3
 8011bb4:	4b0c      	ldr	r3, [pc, #48]	; (8011be8 <tcp_parseopt+0xe8>)
 8011bb6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011bb8:	4b0b      	ldr	r3, [pc, #44]	; (8011be8 <tcp_parseopt+0xe8>)
 8011bba:	881a      	ldrh	r2, [r3, #0]
 8011bbc:	4b09      	ldr	r3, [pc, #36]	; (8011be4 <tcp_parseopt+0xe4>)
 8011bbe:	881b      	ldrh	r3, [r3, #0]
 8011bc0:	429a      	cmp	r2, r3
 8011bc2:	d3b3      	bcc.n	8011b2c <tcp_parseopt+0x2c>
 8011bc4:	e004      	b.n	8011bd0 <tcp_parseopt+0xd0>
          return;
 8011bc6:	bf00      	nop
 8011bc8:	e002      	b.n	8011bd0 <tcp_parseopt+0xd0>
            return;
 8011bca:	bf00      	nop
 8011bcc:	e000      	b.n	8011bd0 <tcp_parseopt+0xd0>
            return;
 8011bce:	bf00      	nop
      }
    }
  }
}
 8011bd0:	3710      	adds	r7, #16
 8011bd2:	46bd      	mov	sp, r7
 8011bd4:	bd80      	pop	{r7, pc}
 8011bd6:	bf00      	nop
 8011bd8:	08019ff4 	.word	0x08019ff4
 8011bdc:	0801a458 	.word	0x0801a458
 8011be0:	0801a040 	.word	0x0801a040
 8011be4:	2000159c 	.word	0x2000159c
 8011be8:	200015a4 	.word	0x200015a4

08011bec <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011bec:	b480      	push	{r7}
 8011bee:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011bf0:	4b05      	ldr	r3, [pc, #20]	; (8011c08 <tcp_trigger_input_pcb_close+0x1c>)
 8011bf2:	781b      	ldrb	r3, [r3, #0]
 8011bf4:	f043 0310 	orr.w	r3, r3, #16
 8011bf8:	b2da      	uxtb	r2, r3
 8011bfa:	4b03      	ldr	r3, [pc, #12]	; (8011c08 <tcp_trigger_input_pcb_close+0x1c>)
 8011bfc:	701a      	strb	r2, [r3, #0]
}
 8011bfe:	bf00      	nop
 8011c00:	46bd      	mov	sp, r7
 8011c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c06:	4770      	bx	lr
 8011c08:	200015b5 	.word	0x200015b5

08011c0c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011c0c:	b580      	push	{r7, lr}
 8011c0e:	b084      	sub	sp, #16
 8011c10:	af00      	add	r7, sp, #0
 8011c12:	60f8      	str	r0, [r7, #12]
 8011c14:	60b9      	str	r1, [r7, #8]
 8011c16:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d00a      	beq.n	8011c34 <tcp_route+0x28>
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	7a1b      	ldrb	r3, [r3, #8]
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d006      	beq.n	8011c34 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	7a1b      	ldrb	r3, [r3, #8]
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	f7fb f8b8 	bl	800cda0 <netif_get_by_index>
 8011c30:	4603      	mov	r3, r0
 8011c32:	e003      	b.n	8011c3c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011c34:	6878      	ldr	r0, [r7, #4]
 8011c36:	f003 fad5 	bl	80151e4 <ip4_route>
 8011c3a:	4603      	mov	r3, r0
  }
}
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	3710      	adds	r7, #16
 8011c40:	46bd      	mov	sp, r7
 8011c42:	bd80      	pop	{r7, pc}

08011c44 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011c44:	b590      	push	{r4, r7, lr}
 8011c46:	b087      	sub	sp, #28
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	60f8      	str	r0, [r7, #12]
 8011c4c:	60b9      	str	r1, [r7, #8]
 8011c4e:	603b      	str	r3, [r7, #0]
 8011c50:	4613      	mov	r3, r2
 8011c52:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d105      	bne.n	8011c66 <tcp_create_segment+0x22>
 8011c5a:	4b44      	ldr	r3, [pc, #272]	; (8011d6c <tcp_create_segment+0x128>)
 8011c5c:	22a3      	movs	r2, #163	; 0xa3
 8011c5e:	4944      	ldr	r1, [pc, #272]	; (8011d70 <tcp_create_segment+0x12c>)
 8011c60:	4844      	ldr	r0, [pc, #272]	; (8011d74 <tcp_create_segment+0x130>)
 8011c62:	f004 fd0b 	bl	801667c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011c66:	68bb      	ldr	r3, [r7, #8]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d105      	bne.n	8011c78 <tcp_create_segment+0x34>
 8011c6c:	4b3f      	ldr	r3, [pc, #252]	; (8011d6c <tcp_create_segment+0x128>)
 8011c6e:	22a4      	movs	r2, #164	; 0xa4
 8011c70:	4941      	ldr	r1, [pc, #260]	; (8011d78 <tcp_create_segment+0x134>)
 8011c72:	4840      	ldr	r0, [pc, #256]	; (8011d74 <tcp_create_segment+0x130>)
 8011c74:	f004 fd02 	bl	801667c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011c78:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011c7c:	009b      	lsls	r3, r3, #2
 8011c7e:	b2db      	uxtb	r3, r3
 8011c80:	f003 0304 	and.w	r3, r3, #4
 8011c84:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011c86:	2003      	movs	r0, #3
 8011c88:	f7fa fd8c 	bl	800c7a4 <memp_malloc>
 8011c8c:	6138      	str	r0, [r7, #16]
 8011c8e:	693b      	ldr	r3, [r7, #16]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d104      	bne.n	8011c9e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011c94:	68b8      	ldr	r0, [r7, #8]
 8011c96:	f7fb fbe3 	bl	800d460 <pbuf_free>
    return NULL;
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	e061      	b.n	8011d62 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8011c9e:	693b      	ldr	r3, [r7, #16]
 8011ca0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011ca4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011ca6:	693b      	ldr	r3, [r7, #16]
 8011ca8:	2200      	movs	r2, #0
 8011caa:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011cac:	693b      	ldr	r3, [r7, #16]
 8011cae:	68ba      	ldr	r2, [r7, #8]
 8011cb0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011cb2:	68bb      	ldr	r3, [r7, #8]
 8011cb4:	891a      	ldrh	r2, [r3, #8]
 8011cb6:	7dfb      	ldrb	r3, [r7, #23]
 8011cb8:	b29b      	uxth	r3, r3
 8011cba:	429a      	cmp	r2, r3
 8011cbc:	d205      	bcs.n	8011cca <tcp_create_segment+0x86>
 8011cbe:	4b2b      	ldr	r3, [pc, #172]	; (8011d6c <tcp_create_segment+0x128>)
 8011cc0:	22b0      	movs	r2, #176	; 0xb0
 8011cc2:	492e      	ldr	r1, [pc, #184]	; (8011d7c <tcp_create_segment+0x138>)
 8011cc4:	482b      	ldr	r0, [pc, #172]	; (8011d74 <tcp_create_segment+0x130>)
 8011cc6:	f004 fcd9 	bl	801667c <iprintf>
  seg->len = p->tot_len - optlen;
 8011cca:	68bb      	ldr	r3, [r7, #8]
 8011ccc:	891a      	ldrh	r2, [r3, #8]
 8011cce:	7dfb      	ldrb	r3, [r7, #23]
 8011cd0:	b29b      	uxth	r3, r3
 8011cd2:	1ad3      	subs	r3, r2, r3
 8011cd4:	b29a      	uxth	r2, r3
 8011cd6:	693b      	ldr	r3, [r7, #16]
 8011cd8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011cda:	2114      	movs	r1, #20
 8011cdc:	68b8      	ldr	r0, [r7, #8]
 8011cde:	f7fb fb29 	bl	800d334 <pbuf_add_header>
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d004      	beq.n	8011cf2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011ce8:	6938      	ldr	r0, [r7, #16]
 8011cea:	f7fc ffe6 	bl	800ecba <tcp_seg_free>
    return NULL;
 8011cee:	2300      	movs	r3, #0
 8011cf0:	e037      	b.n	8011d62 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011cf2:	693b      	ldr	r3, [r7, #16]
 8011cf4:	685b      	ldr	r3, [r3, #4]
 8011cf6:	685a      	ldr	r2, [r3, #4]
 8011cf8:	693b      	ldr	r3, [r7, #16]
 8011cfa:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	8ada      	ldrh	r2, [r3, #22]
 8011d00:	693b      	ldr	r3, [r7, #16]
 8011d02:	68dc      	ldr	r4, [r3, #12]
 8011d04:	4610      	mov	r0, r2
 8011d06:	f7fa f819 	bl	800bd3c <lwip_htons>
 8011d0a:	4603      	mov	r3, r0
 8011d0c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	8b1a      	ldrh	r2, [r3, #24]
 8011d12:	693b      	ldr	r3, [r7, #16]
 8011d14:	68dc      	ldr	r4, [r3, #12]
 8011d16:	4610      	mov	r0, r2
 8011d18:	f7fa f810 	bl	800bd3c <lwip_htons>
 8011d1c:	4603      	mov	r3, r0
 8011d1e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011d20:	693b      	ldr	r3, [r7, #16]
 8011d22:	68dc      	ldr	r4, [r3, #12]
 8011d24:	6838      	ldr	r0, [r7, #0]
 8011d26:	f7fa f81e 	bl	800bd66 <lwip_htonl>
 8011d2a:	4603      	mov	r3, r0
 8011d2c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011d2e:	7dfb      	ldrb	r3, [r7, #23]
 8011d30:	089b      	lsrs	r3, r3, #2
 8011d32:	b2db      	uxtb	r3, r3
 8011d34:	b29b      	uxth	r3, r3
 8011d36:	3305      	adds	r3, #5
 8011d38:	b29b      	uxth	r3, r3
 8011d3a:	031b      	lsls	r3, r3, #12
 8011d3c:	b29a      	uxth	r2, r3
 8011d3e:	79fb      	ldrb	r3, [r7, #7]
 8011d40:	b29b      	uxth	r3, r3
 8011d42:	4313      	orrs	r3, r2
 8011d44:	b29a      	uxth	r2, r3
 8011d46:	693b      	ldr	r3, [r7, #16]
 8011d48:	68dc      	ldr	r4, [r3, #12]
 8011d4a:	4610      	mov	r0, r2
 8011d4c:	f7f9 fff6 	bl	800bd3c <lwip_htons>
 8011d50:	4603      	mov	r3, r0
 8011d52:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011d54:	693b      	ldr	r3, [r7, #16]
 8011d56:	68db      	ldr	r3, [r3, #12]
 8011d58:	2200      	movs	r2, #0
 8011d5a:	749a      	strb	r2, [r3, #18]
 8011d5c:	2200      	movs	r2, #0
 8011d5e:	74da      	strb	r2, [r3, #19]
  return seg;
 8011d60:	693b      	ldr	r3, [r7, #16]
}
 8011d62:	4618      	mov	r0, r3
 8011d64:	371c      	adds	r7, #28
 8011d66:	46bd      	mov	sp, r7
 8011d68:	bd90      	pop	{r4, r7, pc}
 8011d6a:	bf00      	nop
 8011d6c:	0801a474 	.word	0x0801a474
 8011d70:	0801a4a8 	.word	0x0801a4a8
 8011d74:	0801a4c8 	.word	0x0801a4c8
 8011d78:	0801a4f0 	.word	0x0801a4f0
 8011d7c:	0801a514 	.word	0x0801a514

08011d80 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011d80:	b580      	push	{r7, lr}
 8011d82:	b086      	sub	sp, #24
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	607b      	str	r3, [r7, #4]
 8011d88:	4603      	mov	r3, r0
 8011d8a:	73fb      	strb	r3, [r7, #15]
 8011d8c:	460b      	mov	r3, r1
 8011d8e:	81bb      	strh	r3, [r7, #12]
 8011d90:	4613      	mov	r3, r2
 8011d92:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011d94:	89bb      	ldrh	r3, [r7, #12]
 8011d96:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d105      	bne.n	8011daa <tcp_pbuf_prealloc+0x2a>
 8011d9e:	4b30      	ldr	r3, [pc, #192]	; (8011e60 <tcp_pbuf_prealloc+0xe0>)
 8011da0:	22e8      	movs	r2, #232	; 0xe8
 8011da2:	4930      	ldr	r1, [pc, #192]	; (8011e64 <tcp_pbuf_prealloc+0xe4>)
 8011da4:	4830      	ldr	r0, [pc, #192]	; (8011e68 <tcp_pbuf_prealloc+0xe8>)
 8011da6:	f004 fc69 	bl	801667c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8011daa:	6a3b      	ldr	r3, [r7, #32]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d105      	bne.n	8011dbc <tcp_pbuf_prealloc+0x3c>
 8011db0:	4b2b      	ldr	r3, [pc, #172]	; (8011e60 <tcp_pbuf_prealloc+0xe0>)
 8011db2:	22e9      	movs	r2, #233	; 0xe9
 8011db4:	492d      	ldr	r1, [pc, #180]	; (8011e6c <tcp_pbuf_prealloc+0xec>)
 8011db6:	482c      	ldr	r0, [pc, #176]	; (8011e68 <tcp_pbuf_prealloc+0xe8>)
 8011db8:	f004 fc60 	bl	801667c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8011dbc:	89ba      	ldrh	r2, [r7, #12]
 8011dbe:	897b      	ldrh	r3, [r7, #10]
 8011dc0:	429a      	cmp	r2, r3
 8011dc2:	d221      	bcs.n	8011e08 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011dc4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011dc8:	f003 0302 	and.w	r3, r3, #2
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d111      	bne.n	8011df4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8011dd0:	6a3b      	ldr	r3, [r7, #32]
 8011dd2:	8b5b      	ldrh	r3, [r3, #26]
 8011dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d115      	bne.n	8011e08 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8011ddc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d007      	beq.n	8011df4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8011de4:	6a3b      	ldr	r3, [r7, #32]
 8011de6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d103      	bne.n	8011df4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8011dec:	6a3b      	ldr	r3, [r7, #32]
 8011dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d009      	beq.n	8011e08 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8011df4:	89bb      	ldrh	r3, [r7, #12]
 8011df6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8011dfa:	f023 0203 	bic.w	r2, r3, #3
 8011dfe:	897b      	ldrh	r3, [r7, #10]
 8011e00:	4293      	cmp	r3, r2
 8011e02:	bf28      	it	cs
 8011e04:	4613      	movcs	r3, r2
 8011e06:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8011e08:	8af9      	ldrh	r1, [r7, #22]
 8011e0a:	7bfb      	ldrb	r3, [r7, #15]
 8011e0c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011e10:	4618      	mov	r0, r3
 8011e12:	f7fb f841 	bl	800ce98 <pbuf_alloc>
 8011e16:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011e18:	693b      	ldr	r3, [r7, #16]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d101      	bne.n	8011e22 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8011e1e:	2300      	movs	r3, #0
 8011e20:	e019      	b.n	8011e56 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8011e22:	693b      	ldr	r3, [r7, #16]
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d006      	beq.n	8011e38 <tcp_pbuf_prealloc+0xb8>
 8011e2a:	4b0d      	ldr	r3, [pc, #52]	; (8011e60 <tcp_pbuf_prealloc+0xe0>)
 8011e2c:	f240 120b 	movw	r2, #267	; 0x10b
 8011e30:	490f      	ldr	r1, [pc, #60]	; (8011e70 <tcp_pbuf_prealloc+0xf0>)
 8011e32:	480d      	ldr	r0, [pc, #52]	; (8011e68 <tcp_pbuf_prealloc+0xe8>)
 8011e34:	f004 fc22 	bl	801667c <iprintf>
  *oversize = p->len - length;
 8011e38:	693b      	ldr	r3, [r7, #16]
 8011e3a:	895a      	ldrh	r2, [r3, #10]
 8011e3c:	89bb      	ldrh	r3, [r7, #12]
 8011e3e:	1ad3      	subs	r3, r2, r3
 8011e40:	b29a      	uxth	r2, r3
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8011e46:	693b      	ldr	r3, [r7, #16]
 8011e48:	89ba      	ldrh	r2, [r7, #12]
 8011e4a:	811a      	strh	r2, [r3, #8]
 8011e4c:	693b      	ldr	r3, [r7, #16]
 8011e4e:	891a      	ldrh	r2, [r3, #8]
 8011e50:	693b      	ldr	r3, [r7, #16]
 8011e52:	815a      	strh	r2, [r3, #10]
  return p;
 8011e54:	693b      	ldr	r3, [r7, #16]
}
 8011e56:	4618      	mov	r0, r3
 8011e58:	3718      	adds	r7, #24
 8011e5a:	46bd      	mov	sp, r7
 8011e5c:	bd80      	pop	{r7, pc}
 8011e5e:	bf00      	nop
 8011e60:	0801a474 	.word	0x0801a474
 8011e64:	0801a52c 	.word	0x0801a52c
 8011e68:	0801a4c8 	.word	0x0801a4c8
 8011e6c:	0801a550 	.word	0x0801a550
 8011e70:	0801a570 	.word	0x0801a570

08011e74 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011e74:	b580      	push	{r7, lr}
 8011e76:	b082      	sub	sp, #8
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	6078      	str	r0, [r7, #4]
 8011e7c:	460b      	mov	r3, r1
 8011e7e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d106      	bne.n	8011e94 <tcp_write_checks+0x20>
 8011e86:	4b33      	ldr	r3, [pc, #204]	; (8011f54 <tcp_write_checks+0xe0>)
 8011e88:	f240 1233 	movw	r2, #307	; 0x133
 8011e8c:	4932      	ldr	r1, [pc, #200]	; (8011f58 <tcp_write_checks+0xe4>)
 8011e8e:	4833      	ldr	r0, [pc, #204]	; (8011f5c <tcp_write_checks+0xe8>)
 8011e90:	f004 fbf4 	bl	801667c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	7d1b      	ldrb	r3, [r3, #20]
 8011e98:	2b04      	cmp	r3, #4
 8011e9a:	d00e      	beq.n	8011eba <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011ea0:	2b07      	cmp	r3, #7
 8011ea2:	d00a      	beq.n	8011eba <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8011ea8:	2b02      	cmp	r3, #2
 8011eaa:	d006      	beq.n	8011eba <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011eb0:	2b03      	cmp	r3, #3
 8011eb2:	d002      	beq.n	8011eba <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011eb4:	f06f 030a 	mvn.w	r3, #10
 8011eb8:	e048      	b.n	8011f4c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8011eba:	887b      	ldrh	r3, [r7, #2]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d101      	bne.n	8011ec4 <tcp_write_checks+0x50>
    return ERR_OK;
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	e043      	b.n	8011f4c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011eca:	887a      	ldrh	r2, [r7, #2]
 8011ecc:	429a      	cmp	r2, r3
 8011ece:	d909      	bls.n	8011ee4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	8b5b      	ldrh	r3, [r3, #26]
 8011ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ed8:	b29a      	uxth	r2, r3
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011ede:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011ee2:	e033      	b.n	8011f4c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011eea:	2b08      	cmp	r3, #8
 8011eec:	d909      	bls.n	8011f02 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	8b5b      	ldrh	r3, [r3, #26]
 8011ef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ef6:	b29a      	uxth	r2, r3
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011efc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011f00:	e024      	b.n	8011f4c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d00f      	beq.n	8011f2c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d11a      	bne.n	8011f4a <tcp_write_checks+0xd6>
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d116      	bne.n	8011f4a <tcp_write_checks+0xd6>
 8011f1c:	4b0d      	ldr	r3, [pc, #52]	; (8011f54 <tcp_write_checks+0xe0>)
 8011f1e:	f240 1255 	movw	r2, #341	; 0x155
 8011f22:	490f      	ldr	r1, [pc, #60]	; (8011f60 <tcp_write_checks+0xec>)
 8011f24:	480d      	ldr	r0, [pc, #52]	; (8011f5c <tcp_write_checks+0xe8>)
 8011f26:	f004 fba9 	bl	801667c <iprintf>
 8011f2a:	e00e      	b.n	8011f4a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d103      	bne.n	8011f3c <tcp_write_checks+0xc8>
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d006      	beq.n	8011f4a <tcp_write_checks+0xd6>
 8011f3c:	4b05      	ldr	r3, [pc, #20]	; (8011f54 <tcp_write_checks+0xe0>)
 8011f3e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8011f42:	4908      	ldr	r1, [pc, #32]	; (8011f64 <tcp_write_checks+0xf0>)
 8011f44:	4805      	ldr	r0, [pc, #20]	; (8011f5c <tcp_write_checks+0xe8>)
 8011f46:	f004 fb99 	bl	801667c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8011f4a:	2300      	movs	r3, #0
}
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	3708      	adds	r7, #8
 8011f50:	46bd      	mov	sp, r7
 8011f52:	bd80      	pop	{r7, pc}
 8011f54:	0801a474 	.word	0x0801a474
 8011f58:	0801a584 	.word	0x0801a584
 8011f5c:	0801a4c8 	.word	0x0801a4c8
 8011f60:	0801a5a4 	.word	0x0801a5a4
 8011f64:	0801a5e0 	.word	0x0801a5e0

08011f68 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8011f68:	b590      	push	{r4, r7, lr}
 8011f6a:	b09b      	sub	sp, #108	; 0x6c
 8011f6c:	af04      	add	r7, sp, #16
 8011f6e:	60f8      	str	r0, [r7, #12]
 8011f70:	60b9      	str	r1, [r7, #8]
 8011f72:	4611      	mov	r1, r2
 8011f74:	461a      	mov	r2, r3
 8011f76:	460b      	mov	r3, r1
 8011f78:	80fb      	strh	r3, [r7, #6]
 8011f7a:	4613      	mov	r3, r2
 8011f7c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8011f7e:	2300      	movs	r3, #0
 8011f80:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011f82:	2300      	movs	r3, #0
 8011f84:	653b      	str	r3, [r7, #80]	; 0x50
 8011f86:	2300      	movs	r3, #0
 8011f88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011f8a:	2300      	movs	r3, #0
 8011f8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8011f8e:	2300      	movs	r3, #0
 8011f90:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011f92:	2300      	movs	r3, #0
 8011f94:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8011f98:	2300      	movs	r3, #0
 8011f9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011fa2:	2300      	movs	r3, #0
 8011fa4:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8011fa6:	2300      	movs	r3, #0
 8011fa8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d109      	bne.n	8011fc4 <tcp_write+0x5c>
 8011fb0:	4ba4      	ldr	r3, [pc, #656]	; (8012244 <tcp_write+0x2dc>)
 8011fb2:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8011fb6:	49a4      	ldr	r1, [pc, #656]	; (8012248 <tcp_write+0x2e0>)
 8011fb8:	48a4      	ldr	r0, [pc, #656]	; (801224c <tcp_write+0x2e4>)
 8011fba:	f004 fb5f 	bl	801667c <iprintf>
 8011fbe:	f06f 030f 	mvn.w	r3, #15
 8011fc2:	e32a      	b.n	801261a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011fca:	085b      	lsrs	r3, r3, #1
 8011fcc:	b29a      	uxth	r2, r3
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011fd2:	4293      	cmp	r3, r2
 8011fd4:	bf28      	it	cs
 8011fd6:	4613      	movcs	r3, r2
 8011fd8:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8011fda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d102      	bne.n	8011fe6 <tcp_write+0x7e>
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011fe4:	e000      	b.n	8011fe8 <tcp_write+0x80>
 8011fe6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011fe8:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8011fea:	68bb      	ldr	r3, [r7, #8]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d109      	bne.n	8012004 <tcp_write+0x9c>
 8011ff0:	4b94      	ldr	r3, [pc, #592]	; (8012244 <tcp_write+0x2dc>)
 8011ff2:	f240 12ad 	movw	r2, #429	; 0x1ad
 8011ff6:	4996      	ldr	r1, [pc, #600]	; (8012250 <tcp_write+0x2e8>)
 8011ff8:	4894      	ldr	r0, [pc, #592]	; (801224c <tcp_write+0x2e4>)
 8011ffa:	f004 fb3f 	bl	801667c <iprintf>
 8011ffe:	f06f 030f 	mvn.w	r3, #15
 8012002:	e30a      	b.n	801261a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8012004:	88fb      	ldrh	r3, [r7, #6]
 8012006:	4619      	mov	r1, r3
 8012008:	68f8      	ldr	r0, [r7, #12]
 801200a:	f7ff ff33 	bl	8011e74 <tcp_write_checks>
 801200e:	4603      	mov	r3, r0
 8012010:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8012014:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012018:	2b00      	cmp	r3, #0
 801201a:	d002      	beq.n	8012022 <tcp_write+0xba>
    return err;
 801201c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012020:	e2fb      	b.n	801261a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012028:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801202c:	2300      	movs	r3, #0
 801202e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012036:	2b00      	cmp	r3, #0
 8012038:	f000 80f6 	beq.w	8012228 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012040:	653b      	str	r3, [r7, #80]	; 0x50
 8012042:	e002      	b.n	801204a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8012044:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801204a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	2b00      	cmp	r3, #0
 8012050:	d1f8      	bne.n	8012044 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8012052:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012054:	7a9b      	ldrb	r3, [r3, #10]
 8012056:	009b      	lsls	r3, r3, #2
 8012058:	b29b      	uxth	r3, r3
 801205a:	f003 0304 	and.w	r3, r3, #4
 801205e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8012060:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012064:	891b      	ldrh	r3, [r3, #8]
 8012066:	4619      	mov	r1, r3
 8012068:	8c3b      	ldrh	r3, [r7, #32]
 801206a:	440b      	add	r3, r1
 801206c:	429a      	cmp	r2, r3
 801206e:	da06      	bge.n	801207e <tcp_write+0x116>
 8012070:	4b74      	ldr	r3, [pc, #464]	; (8012244 <tcp_write+0x2dc>)
 8012072:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012076:	4977      	ldr	r1, [pc, #476]	; (8012254 <tcp_write+0x2ec>)
 8012078:	4874      	ldr	r0, [pc, #464]	; (801224c <tcp_write+0x2e4>)
 801207a:	f004 faff 	bl	801667c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801207e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012080:	891a      	ldrh	r2, [r3, #8]
 8012082:	8c3b      	ldrh	r3, [r7, #32]
 8012084:	4413      	add	r3, r2
 8012086:	b29b      	uxth	r3, r3
 8012088:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801208a:	1ad3      	subs	r3, r2, r3
 801208c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012094:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8012096:	8a7b      	ldrh	r3, [r7, #18]
 8012098:	2b00      	cmp	r3, #0
 801209a:	d026      	beq.n	80120ea <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801209c:	8a7b      	ldrh	r3, [r7, #18]
 801209e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80120a0:	429a      	cmp	r2, r3
 80120a2:	d206      	bcs.n	80120b2 <tcp_write+0x14a>
 80120a4:	4b67      	ldr	r3, [pc, #412]	; (8012244 <tcp_write+0x2dc>)
 80120a6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80120aa:	496b      	ldr	r1, [pc, #428]	; (8012258 <tcp_write+0x2f0>)
 80120ac:	4867      	ldr	r0, [pc, #412]	; (801224c <tcp_write+0x2e4>)
 80120ae:	f004 fae5 	bl	801667c <iprintf>
      seg = last_unsent;
 80120b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120b4:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80120b6:	8a7b      	ldrh	r3, [r7, #18]
 80120b8:	88fa      	ldrh	r2, [r7, #6]
 80120ba:	4293      	cmp	r3, r2
 80120bc:	bf28      	it	cs
 80120be:	4613      	movcs	r3, r2
 80120c0:	b29b      	uxth	r3, r3
 80120c2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80120c4:	4293      	cmp	r3, r2
 80120c6:	bf28      	it	cs
 80120c8:	4613      	movcs	r3, r2
 80120ca:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80120cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80120d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80120d2:	4413      	add	r3, r2
 80120d4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80120d8:	8a7a      	ldrh	r2, [r7, #18]
 80120da:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80120dc:	1ad3      	subs	r3, r2, r3
 80120de:	b29b      	uxth	r3, r3
 80120e0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80120e2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80120e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80120e6:	1ad3      	subs	r3, r2, r3
 80120e8:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80120ea:	8a7b      	ldrh	r3, [r7, #18]
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d00b      	beq.n	8012108 <tcp_write+0x1a0>
 80120f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80120f4:	88fb      	ldrh	r3, [r7, #6]
 80120f6:	429a      	cmp	r2, r3
 80120f8:	d006      	beq.n	8012108 <tcp_write+0x1a0>
 80120fa:	4b52      	ldr	r3, [pc, #328]	; (8012244 <tcp_write+0x2dc>)
 80120fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012100:	4956      	ldr	r1, [pc, #344]	; (801225c <tcp_write+0x2f4>)
 8012102:	4852      	ldr	r0, [pc, #328]	; (801224c <tcp_write+0x2e4>)
 8012104:	f004 faba 	bl	801667c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8012108:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801210c:	88fb      	ldrh	r3, [r7, #6]
 801210e:	429a      	cmp	r2, r3
 8012110:	f080 8167 	bcs.w	80123e2 <tcp_write+0x47a>
 8012114:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012116:	2b00      	cmp	r3, #0
 8012118:	f000 8163 	beq.w	80123e2 <tcp_write+0x47a>
 801211c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801211e:	891b      	ldrh	r3, [r3, #8]
 8012120:	2b00      	cmp	r3, #0
 8012122:	f000 815e 	beq.w	80123e2 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8012126:	88fa      	ldrh	r2, [r7, #6]
 8012128:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801212c:	1ad2      	subs	r2, r2, r3
 801212e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012130:	4293      	cmp	r3, r2
 8012132:	bfa8      	it	ge
 8012134:	4613      	movge	r3, r2
 8012136:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8012138:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801213a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801213c:	797b      	ldrb	r3, [r7, #5]
 801213e:	f003 0301 	and.w	r3, r3, #1
 8012142:	2b00      	cmp	r3, #0
 8012144:	d027      	beq.n	8012196 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8012146:	f107 0012 	add.w	r0, r7, #18
 801214a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801214c:	8bf9      	ldrh	r1, [r7, #30]
 801214e:	2301      	movs	r3, #1
 8012150:	9302      	str	r3, [sp, #8]
 8012152:	797b      	ldrb	r3, [r7, #5]
 8012154:	9301      	str	r3, [sp, #4]
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	9300      	str	r3, [sp, #0]
 801215a:	4603      	mov	r3, r0
 801215c:	2000      	movs	r0, #0
 801215e:	f7ff fe0f 	bl	8011d80 <tcp_pbuf_prealloc>
 8012162:	6578      	str	r0, [r7, #84]	; 0x54
 8012164:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012166:	2b00      	cmp	r3, #0
 8012168:	f000 8225 	beq.w	80125b6 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801216c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801216e:	6858      	ldr	r0, [r3, #4]
 8012170:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012174:	68ba      	ldr	r2, [r7, #8]
 8012176:	4413      	add	r3, r2
 8012178:	8bfa      	ldrh	r2, [r7, #30]
 801217a:	4619      	mov	r1, r3
 801217c:	f004 fa4e 	bl	801661c <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8012180:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012182:	f7fb f9f5 	bl	800d570 <pbuf_clen>
 8012186:	4603      	mov	r3, r0
 8012188:	461a      	mov	r2, r3
 801218a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801218e:	4413      	add	r3, r2
 8012190:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8012194:	e041      	b.n	801221a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8012196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012198:	685b      	ldr	r3, [r3, #4]
 801219a:	637b      	str	r3, [r7, #52]	; 0x34
 801219c:	e002      	b.n	80121a4 <tcp_write+0x23c>
 801219e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	637b      	str	r3, [r7, #52]	; 0x34
 80121a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d1f8      	bne.n	801219e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80121ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121ae:	7b1b      	ldrb	r3, [r3, #12]
 80121b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d115      	bne.n	80121e4 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80121b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121ba:	685b      	ldr	r3, [r3, #4]
 80121bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80121be:	8952      	ldrh	r2, [r2, #10]
 80121c0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80121c2:	68ba      	ldr	r2, [r7, #8]
 80121c4:	429a      	cmp	r2, r3
 80121c6:	d10d      	bne.n	80121e4 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80121c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d006      	beq.n	80121de <tcp_write+0x276>
 80121d0:	4b1c      	ldr	r3, [pc, #112]	; (8012244 <tcp_write+0x2dc>)
 80121d2:	f240 2231 	movw	r2, #561	; 0x231
 80121d6:	4922      	ldr	r1, [pc, #136]	; (8012260 <tcp_write+0x2f8>)
 80121d8:	481c      	ldr	r0, [pc, #112]	; (801224c <tcp_write+0x2e4>)
 80121da:	f004 fa4f 	bl	801667c <iprintf>
          extendlen = seglen;
 80121de:	8bfb      	ldrh	r3, [r7, #30]
 80121e0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80121e2:	e01a      	b.n	801221a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80121e4:	8bfb      	ldrh	r3, [r7, #30]
 80121e6:	2201      	movs	r2, #1
 80121e8:	4619      	mov	r1, r3
 80121ea:	2000      	movs	r0, #0
 80121ec:	f7fa fe54 	bl	800ce98 <pbuf_alloc>
 80121f0:	6578      	str	r0, [r7, #84]	; 0x54
 80121f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	f000 81e0 	beq.w	80125ba <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80121fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80121fe:	68ba      	ldr	r2, [r7, #8]
 8012200:	441a      	add	r2, r3
 8012202:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012204:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8012206:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012208:	f7fb f9b2 	bl	800d570 <pbuf_clen>
 801220c:	4603      	mov	r3, r0
 801220e:	461a      	mov	r2, r3
 8012210:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012214:	4413      	add	r3, r2
 8012216:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801221a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801221e:	8bfb      	ldrh	r3, [r7, #30]
 8012220:	4413      	add	r3, r2
 8012222:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8012226:	e0dc      	b.n	80123e2 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801222e:	2b00      	cmp	r3, #0
 8012230:	f000 80d7 	beq.w	80123e2 <tcp_write+0x47a>
 8012234:	4b03      	ldr	r3, [pc, #12]	; (8012244 <tcp_write+0x2dc>)
 8012236:	f240 224a 	movw	r2, #586	; 0x24a
 801223a:	490a      	ldr	r1, [pc, #40]	; (8012264 <tcp_write+0x2fc>)
 801223c:	4803      	ldr	r0, [pc, #12]	; (801224c <tcp_write+0x2e4>)
 801223e:	f004 fa1d 	bl	801667c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8012242:	e0ce      	b.n	80123e2 <tcp_write+0x47a>
 8012244:	0801a474 	.word	0x0801a474
 8012248:	0801a614 	.word	0x0801a614
 801224c:	0801a4c8 	.word	0x0801a4c8
 8012250:	0801a62c 	.word	0x0801a62c
 8012254:	0801a660 	.word	0x0801a660
 8012258:	0801a678 	.word	0x0801a678
 801225c:	0801a698 	.word	0x0801a698
 8012260:	0801a6b8 	.word	0x0801a6b8
 8012264:	0801a6e4 	.word	0x0801a6e4
    struct pbuf *p;
    u16_t left = len - pos;
 8012268:	88fa      	ldrh	r2, [r7, #6]
 801226a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801226e:	1ad3      	subs	r3, r2, r3
 8012270:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8012272:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012276:	b29b      	uxth	r3, r3
 8012278:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801227a:	1ad3      	subs	r3, r2, r3
 801227c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801227e:	8b7a      	ldrh	r2, [r7, #26]
 8012280:	8bbb      	ldrh	r3, [r7, #28]
 8012282:	4293      	cmp	r3, r2
 8012284:	bf28      	it	cs
 8012286:	4613      	movcs	r3, r2
 8012288:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801228a:	797b      	ldrb	r3, [r7, #5]
 801228c:	f003 0301 	and.w	r3, r3, #1
 8012290:	2b00      	cmp	r3, #0
 8012292:	d036      	beq.n	8012302 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8012294:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012298:	b29a      	uxth	r2, r3
 801229a:	8b3b      	ldrh	r3, [r7, #24]
 801229c:	4413      	add	r3, r2
 801229e:	b299      	uxth	r1, r3
 80122a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	bf0c      	ite	eq
 80122a6:	2301      	moveq	r3, #1
 80122a8:	2300      	movne	r3, #0
 80122aa:	b2db      	uxtb	r3, r3
 80122ac:	f107 0012 	add.w	r0, r7, #18
 80122b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80122b2:	9302      	str	r3, [sp, #8]
 80122b4:	797b      	ldrb	r3, [r7, #5]
 80122b6:	9301      	str	r3, [sp, #4]
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	9300      	str	r3, [sp, #0]
 80122bc:	4603      	mov	r3, r0
 80122be:	2036      	movs	r0, #54	; 0x36
 80122c0:	f7ff fd5e 	bl	8011d80 <tcp_pbuf_prealloc>
 80122c4:	6338      	str	r0, [r7, #48]	; 0x30
 80122c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	f000 8178 	beq.w	80125be <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80122ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122d0:	895b      	ldrh	r3, [r3, #10]
 80122d2:	8b3a      	ldrh	r2, [r7, #24]
 80122d4:	429a      	cmp	r2, r3
 80122d6:	d906      	bls.n	80122e6 <tcp_write+0x37e>
 80122d8:	4b8c      	ldr	r3, [pc, #560]	; (801250c <tcp_write+0x5a4>)
 80122da:	f240 2266 	movw	r2, #614	; 0x266
 80122de:	498c      	ldr	r1, [pc, #560]	; (8012510 <tcp_write+0x5a8>)
 80122e0:	488c      	ldr	r0, [pc, #560]	; (8012514 <tcp_write+0x5ac>)
 80122e2:	f004 f9cb 	bl	801667c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80122e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122e8:	685a      	ldr	r2, [r3, #4]
 80122ea:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80122ee:	18d0      	adds	r0, r2, r3
 80122f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80122f4:	68ba      	ldr	r2, [r7, #8]
 80122f6:	4413      	add	r3, r2
 80122f8:	8b3a      	ldrh	r2, [r7, #24]
 80122fa:	4619      	mov	r1, r3
 80122fc:	f004 f98e 	bl	801661c <memcpy>
 8012300:	e02f      	b.n	8012362 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8012302:	8a7b      	ldrh	r3, [r7, #18]
 8012304:	2b00      	cmp	r3, #0
 8012306:	d006      	beq.n	8012316 <tcp_write+0x3ae>
 8012308:	4b80      	ldr	r3, [pc, #512]	; (801250c <tcp_write+0x5a4>)
 801230a:	f240 2271 	movw	r2, #625	; 0x271
 801230e:	4982      	ldr	r1, [pc, #520]	; (8012518 <tcp_write+0x5b0>)
 8012310:	4880      	ldr	r0, [pc, #512]	; (8012514 <tcp_write+0x5ac>)
 8012312:	f004 f9b3 	bl	801667c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8012316:	8b3b      	ldrh	r3, [r7, #24]
 8012318:	2201      	movs	r2, #1
 801231a:	4619      	mov	r1, r3
 801231c:	2036      	movs	r0, #54	; 0x36
 801231e:	f7fa fdbb 	bl	800ce98 <pbuf_alloc>
 8012322:	6178      	str	r0, [r7, #20]
 8012324:	697b      	ldr	r3, [r7, #20]
 8012326:	2b00      	cmp	r3, #0
 8012328:	f000 814b 	beq.w	80125c2 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801232c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012330:	68ba      	ldr	r2, [r7, #8]
 8012332:	441a      	add	r2, r3
 8012334:	697b      	ldr	r3, [r7, #20]
 8012336:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012338:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801233c:	b29b      	uxth	r3, r3
 801233e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012342:	4619      	mov	r1, r3
 8012344:	2036      	movs	r0, #54	; 0x36
 8012346:	f7fa fda7 	bl	800ce98 <pbuf_alloc>
 801234a:	6338      	str	r0, [r7, #48]	; 0x30
 801234c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801234e:	2b00      	cmp	r3, #0
 8012350:	d103      	bne.n	801235a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8012352:	6978      	ldr	r0, [r7, #20]
 8012354:	f7fb f884 	bl	800d460 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8012358:	e136      	b.n	80125c8 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801235a:	6979      	ldr	r1, [r7, #20]
 801235c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801235e:	f7fb f941 	bl	800d5e4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8012362:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012364:	f7fb f904 	bl	800d570 <pbuf_clen>
 8012368:	4603      	mov	r3, r0
 801236a:	461a      	mov	r2, r3
 801236c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012370:	4413      	add	r3, r2
 8012372:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8012376:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801237a:	2b09      	cmp	r3, #9
 801237c:	d903      	bls.n	8012386 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801237e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012380:	f7fb f86e 	bl	800d460 <pbuf_free>
      goto memerr;
 8012384:	e120      	b.n	80125c8 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801238a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801238e:	441a      	add	r2, r3
 8012390:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012394:	9300      	str	r3, [sp, #0]
 8012396:	4613      	mov	r3, r2
 8012398:	2200      	movs	r2, #0
 801239a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801239c:	68f8      	ldr	r0, [r7, #12]
 801239e:	f7ff fc51 	bl	8011c44 <tcp_create_segment>
 80123a2:	64f8      	str	r0, [r7, #76]	; 0x4c
 80123a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	f000 810d 	beq.w	80125c6 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80123ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d102      	bne.n	80123b8 <tcp_write+0x450>
      queue = seg;
 80123b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123b4:	647b      	str	r3, [r7, #68]	; 0x44
 80123b6:	e00c      	b.n	80123d2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80123b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d106      	bne.n	80123cc <tcp_write+0x464>
 80123be:	4b53      	ldr	r3, [pc, #332]	; (801250c <tcp_write+0x5a4>)
 80123c0:	f240 22ab 	movw	r2, #683	; 0x2ab
 80123c4:	4955      	ldr	r1, [pc, #340]	; (801251c <tcp_write+0x5b4>)
 80123c6:	4853      	ldr	r0, [pc, #332]	; (8012514 <tcp_write+0x5ac>)
 80123c8:	f004 f958 	bl	801667c <iprintf>
      prev_seg->next = seg;
 80123cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80123ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80123d0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80123d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123d4:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80123d6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80123da:	8b3b      	ldrh	r3, [r7, #24]
 80123dc:	4413      	add	r3, r2
 80123de:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80123e2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80123e6:	88fb      	ldrh	r3, [r7, #6]
 80123e8:	429a      	cmp	r2, r3
 80123ea:	f4ff af3d 	bcc.w	8012268 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80123ee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d02c      	beq.n	801244e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80123f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123f6:	685b      	ldr	r3, [r3, #4]
 80123f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80123fa:	e01e      	b.n	801243a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80123fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123fe:	891a      	ldrh	r2, [r3, #8]
 8012400:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012402:	4413      	add	r3, r2
 8012404:	b29a      	uxth	r2, r3
 8012406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012408:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801240a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	2b00      	cmp	r3, #0
 8012410:	d110      	bne.n	8012434 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8012412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012414:	685b      	ldr	r3, [r3, #4]
 8012416:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012418:	8952      	ldrh	r2, [r2, #10]
 801241a:	4413      	add	r3, r2
 801241c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801241e:	68b9      	ldr	r1, [r7, #8]
 8012420:	4618      	mov	r0, r3
 8012422:	f004 f8fb 	bl	801661c <memcpy>
        p->len += oversize_used;
 8012426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012428:	895a      	ldrh	r2, [r3, #10]
 801242a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801242c:	4413      	add	r3, r2
 801242e:	b29a      	uxth	r2, r3
 8012430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012432:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8012434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	62fb      	str	r3, [r7, #44]	; 0x2c
 801243a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801243c:	2b00      	cmp	r3, #0
 801243e:	d1dd      	bne.n	80123fc <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8012440:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012442:	891a      	ldrh	r2, [r3, #8]
 8012444:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012446:	4413      	add	r3, r2
 8012448:	b29a      	uxth	r2, r3
 801244a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801244c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801244e:	8a7a      	ldrh	r2, [r7, #18]
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8012456:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012458:	2b00      	cmp	r3, #0
 801245a:	d018      	beq.n	801248e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801245c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801245e:	2b00      	cmp	r3, #0
 8012460:	d106      	bne.n	8012470 <tcp_write+0x508>
 8012462:	4b2a      	ldr	r3, [pc, #168]	; (801250c <tcp_write+0x5a4>)
 8012464:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8012468:	492d      	ldr	r1, [pc, #180]	; (8012520 <tcp_write+0x5b8>)
 801246a:	482a      	ldr	r0, [pc, #168]	; (8012514 <tcp_write+0x5ac>)
 801246c:	f004 f906 	bl	801667c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8012470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012472:	685b      	ldr	r3, [r3, #4]
 8012474:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012476:	4618      	mov	r0, r3
 8012478:	f7fb f8b4 	bl	800d5e4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801247c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801247e:	891a      	ldrh	r2, [r3, #8]
 8012480:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012482:	891b      	ldrh	r3, [r3, #8]
 8012484:	4413      	add	r3, r2
 8012486:	b29a      	uxth	r2, r3
 8012488:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801248a:	811a      	strh	r2, [r3, #8]
 801248c:	e037      	b.n	80124fe <tcp_write+0x596>
  } else if (extendlen > 0) {
 801248e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012490:	2b00      	cmp	r3, #0
 8012492:	d034      	beq.n	80124fe <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012494:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012496:	2b00      	cmp	r3, #0
 8012498:	d003      	beq.n	80124a2 <tcp_write+0x53a>
 801249a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801249c:	685b      	ldr	r3, [r3, #4]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d106      	bne.n	80124b0 <tcp_write+0x548>
 80124a2:	4b1a      	ldr	r3, [pc, #104]	; (801250c <tcp_write+0x5a4>)
 80124a4:	f240 22e6 	movw	r2, #742	; 0x2e6
 80124a8:	491e      	ldr	r1, [pc, #120]	; (8012524 <tcp_write+0x5bc>)
 80124aa:	481a      	ldr	r0, [pc, #104]	; (8012514 <tcp_write+0x5ac>)
 80124ac:	f004 f8e6 	bl	801667c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80124b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80124b2:	685b      	ldr	r3, [r3, #4]
 80124b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80124b6:	e009      	b.n	80124cc <tcp_write+0x564>
      p->tot_len += extendlen;
 80124b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124ba:	891a      	ldrh	r2, [r3, #8]
 80124bc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80124be:	4413      	add	r3, r2
 80124c0:	b29a      	uxth	r2, r3
 80124c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124c4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80124c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80124cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d1f1      	bne.n	80124b8 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80124d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124d6:	891a      	ldrh	r2, [r3, #8]
 80124d8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80124da:	4413      	add	r3, r2
 80124dc:	b29a      	uxth	r2, r3
 80124de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124e0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80124e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124e4:	895a      	ldrh	r2, [r3, #10]
 80124e6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80124e8:	4413      	add	r3, r2
 80124ea:	b29a      	uxth	r2, r3
 80124ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124ee:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80124f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80124f2:	891a      	ldrh	r2, [r3, #8]
 80124f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80124f6:	4413      	add	r3, r2
 80124f8:	b29a      	uxth	r2, r3
 80124fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80124fc:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80124fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012500:	2b00      	cmp	r3, #0
 8012502:	d111      	bne.n	8012528 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012508:	66da      	str	r2, [r3, #108]	; 0x6c
 801250a:	e010      	b.n	801252e <tcp_write+0x5c6>
 801250c:	0801a474 	.word	0x0801a474
 8012510:	0801a714 	.word	0x0801a714
 8012514:	0801a4c8 	.word	0x0801a4c8
 8012518:	0801a754 	.word	0x0801a754
 801251c:	0801a764 	.word	0x0801a764
 8012520:	0801a778 	.word	0x0801a778
 8012524:	0801a7b0 	.word	0x0801a7b0
  } else {
    last_unsent->next = queue;
 8012528:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801252a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801252c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012532:	88fb      	ldrh	r3, [r7, #6]
 8012534:	441a      	add	r2, r3
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012540:	88fb      	ldrh	r3, [r7, #6]
 8012542:	1ad3      	subs	r3, r2, r3
 8012544:	b29a      	uxth	r2, r3
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012552:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801255c:	2b00      	cmp	r3, #0
 801255e:	d00e      	beq.n	801257e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012564:	2b00      	cmp	r3, #0
 8012566:	d10a      	bne.n	801257e <tcp_write+0x616>
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801256c:	2b00      	cmp	r3, #0
 801256e:	d106      	bne.n	801257e <tcp_write+0x616>
 8012570:	4b2c      	ldr	r3, [pc, #176]	; (8012624 <tcp_write+0x6bc>)
 8012572:	f240 3212 	movw	r2, #786	; 0x312
 8012576:	492c      	ldr	r1, [pc, #176]	; (8012628 <tcp_write+0x6c0>)
 8012578:	482c      	ldr	r0, [pc, #176]	; (801262c <tcp_write+0x6c4>)
 801257a:	f004 f87f 	bl	801667c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801257e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012580:	2b00      	cmp	r3, #0
 8012582:	d016      	beq.n	80125b2 <tcp_write+0x64a>
 8012584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012586:	68db      	ldr	r3, [r3, #12]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d012      	beq.n	80125b2 <tcp_write+0x64a>
 801258c:	797b      	ldrb	r3, [r7, #5]
 801258e:	f003 0302 	and.w	r3, r3, #2
 8012592:	2b00      	cmp	r3, #0
 8012594:	d10d      	bne.n	80125b2 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8012596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012598:	68db      	ldr	r3, [r3, #12]
 801259a:	899b      	ldrh	r3, [r3, #12]
 801259c:	b29c      	uxth	r4, r3
 801259e:	2008      	movs	r0, #8
 80125a0:	f7f9 fbcc 	bl	800bd3c <lwip_htons>
 80125a4:	4603      	mov	r3, r0
 80125a6:	461a      	mov	r2, r3
 80125a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125aa:	68db      	ldr	r3, [r3, #12]
 80125ac:	4322      	orrs	r2, r4
 80125ae:	b292      	uxth	r2, r2
 80125b0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80125b2:	2300      	movs	r3, #0
 80125b4:	e031      	b.n	801261a <tcp_write+0x6b2>
          goto memerr;
 80125b6:	bf00      	nop
 80125b8:	e006      	b.n	80125c8 <tcp_write+0x660>
            goto memerr;
 80125ba:	bf00      	nop
 80125bc:	e004      	b.n	80125c8 <tcp_write+0x660>
        goto memerr;
 80125be:	bf00      	nop
 80125c0:	e002      	b.n	80125c8 <tcp_write+0x660>
        goto memerr;
 80125c2:	bf00      	nop
 80125c4:	e000      	b.n	80125c8 <tcp_write+0x660>
      goto memerr;
 80125c6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	8b5b      	ldrh	r3, [r3, #26]
 80125cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80125d0:	b29a      	uxth	r2, r3
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80125d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d002      	beq.n	80125e2 <tcp_write+0x67a>
    pbuf_free(concat_p);
 80125dc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80125de:	f7fa ff3f 	bl	800d460 <pbuf_free>
  }
  if (queue != NULL) {
 80125e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d002      	beq.n	80125ee <tcp_write+0x686>
    tcp_segs_free(queue);
 80125e8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80125ea:	f7fc fb51 	bl	800ec90 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d00e      	beq.n	8012616 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d10a      	bne.n	8012616 <tcp_write+0x6ae>
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012604:	2b00      	cmp	r3, #0
 8012606:	d106      	bne.n	8012616 <tcp_write+0x6ae>
 8012608:	4b06      	ldr	r3, [pc, #24]	; (8012624 <tcp_write+0x6bc>)
 801260a:	f240 3227 	movw	r2, #807	; 0x327
 801260e:	4906      	ldr	r1, [pc, #24]	; (8012628 <tcp_write+0x6c0>)
 8012610:	4806      	ldr	r0, [pc, #24]	; (801262c <tcp_write+0x6c4>)
 8012612:	f004 f833 	bl	801667c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8012616:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801261a:	4618      	mov	r0, r3
 801261c:	375c      	adds	r7, #92	; 0x5c
 801261e:	46bd      	mov	sp, r7
 8012620:	bd90      	pop	{r4, r7, pc}
 8012622:	bf00      	nop
 8012624:	0801a474 	.word	0x0801a474
 8012628:	0801a7e8 	.word	0x0801a7e8
 801262c:	0801a4c8 	.word	0x0801a4c8

08012630 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012630:	b590      	push	{r4, r7, lr}
 8012632:	b08b      	sub	sp, #44	; 0x2c
 8012634:	af02      	add	r7, sp, #8
 8012636:	6078      	str	r0, [r7, #4]
 8012638:	460b      	mov	r3, r1
 801263a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801263c:	2300      	movs	r3, #0
 801263e:	61fb      	str	r3, [r7, #28]
 8012640:	2300      	movs	r3, #0
 8012642:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012644:	2300      	movs	r3, #0
 8012646:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d106      	bne.n	801265c <tcp_split_unsent_seg+0x2c>
 801264e:	4b95      	ldr	r3, [pc, #596]	; (80128a4 <tcp_split_unsent_seg+0x274>)
 8012650:	f240 324b 	movw	r2, #843	; 0x34b
 8012654:	4994      	ldr	r1, [pc, #592]	; (80128a8 <tcp_split_unsent_seg+0x278>)
 8012656:	4895      	ldr	r0, [pc, #596]	; (80128ac <tcp_split_unsent_seg+0x27c>)
 8012658:	f004 f810 	bl	801667c <iprintf>

  useg = pcb->unsent;
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012660:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8012662:	697b      	ldr	r3, [r7, #20]
 8012664:	2b00      	cmp	r3, #0
 8012666:	d102      	bne.n	801266e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8012668:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801266c:	e116      	b.n	801289c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801266e:	887b      	ldrh	r3, [r7, #2]
 8012670:	2b00      	cmp	r3, #0
 8012672:	d109      	bne.n	8012688 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012674:	4b8b      	ldr	r3, [pc, #556]	; (80128a4 <tcp_split_unsent_seg+0x274>)
 8012676:	f240 3253 	movw	r2, #851	; 0x353
 801267a:	498d      	ldr	r1, [pc, #564]	; (80128b0 <tcp_split_unsent_seg+0x280>)
 801267c:	488b      	ldr	r0, [pc, #556]	; (80128ac <tcp_split_unsent_seg+0x27c>)
 801267e:	f003 fffd 	bl	801667c <iprintf>
    return ERR_VAL;
 8012682:	f06f 0305 	mvn.w	r3, #5
 8012686:	e109      	b.n	801289c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8012688:	697b      	ldr	r3, [r7, #20]
 801268a:	891b      	ldrh	r3, [r3, #8]
 801268c:	887a      	ldrh	r2, [r7, #2]
 801268e:	429a      	cmp	r2, r3
 8012690:	d301      	bcc.n	8012696 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8012692:	2300      	movs	r3, #0
 8012694:	e102      	b.n	801289c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801269a:	887a      	ldrh	r2, [r7, #2]
 801269c:	429a      	cmp	r2, r3
 801269e:	d906      	bls.n	80126ae <tcp_split_unsent_seg+0x7e>
 80126a0:	4b80      	ldr	r3, [pc, #512]	; (80128a4 <tcp_split_unsent_seg+0x274>)
 80126a2:	f240 325b 	movw	r2, #859	; 0x35b
 80126a6:	4983      	ldr	r1, [pc, #524]	; (80128b4 <tcp_split_unsent_seg+0x284>)
 80126a8:	4880      	ldr	r0, [pc, #512]	; (80128ac <tcp_split_unsent_seg+0x27c>)
 80126aa:	f003 ffe7 	bl	801667c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80126ae:	697b      	ldr	r3, [r7, #20]
 80126b0:	891b      	ldrh	r3, [r3, #8]
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d106      	bne.n	80126c4 <tcp_split_unsent_seg+0x94>
 80126b6:	4b7b      	ldr	r3, [pc, #492]	; (80128a4 <tcp_split_unsent_seg+0x274>)
 80126b8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80126bc:	497e      	ldr	r1, [pc, #504]	; (80128b8 <tcp_split_unsent_seg+0x288>)
 80126be:	487b      	ldr	r0, [pc, #492]	; (80128ac <tcp_split_unsent_seg+0x27c>)
 80126c0:	f003 ffdc 	bl	801667c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80126c4:	697b      	ldr	r3, [r7, #20]
 80126c6:	7a9b      	ldrb	r3, [r3, #10]
 80126c8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80126ca:	7bfb      	ldrb	r3, [r7, #15]
 80126cc:	009b      	lsls	r3, r3, #2
 80126ce:	b2db      	uxtb	r3, r3
 80126d0:	f003 0304 	and.w	r3, r3, #4
 80126d4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80126d6:	697b      	ldr	r3, [r7, #20]
 80126d8:	891a      	ldrh	r2, [r3, #8]
 80126da:	887b      	ldrh	r3, [r7, #2]
 80126dc:	1ad3      	subs	r3, r2, r3
 80126de:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80126e0:	7bbb      	ldrb	r3, [r7, #14]
 80126e2:	b29a      	uxth	r2, r3
 80126e4:	89bb      	ldrh	r3, [r7, #12]
 80126e6:	4413      	add	r3, r2
 80126e8:	b29b      	uxth	r3, r3
 80126ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 80126ee:	4619      	mov	r1, r3
 80126f0:	2036      	movs	r0, #54	; 0x36
 80126f2:	f7fa fbd1 	bl	800ce98 <pbuf_alloc>
 80126f6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80126f8:	693b      	ldr	r3, [r7, #16]
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	f000 80b7 	beq.w	801286e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8012700:	697b      	ldr	r3, [r7, #20]
 8012702:	685b      	ldr	r3, [r3, #4]
 8012704:	891a      	ldrh	r2, [r3, #8]
 8012706:	697b      	ldr	r3, [r7, #20]
 8012708:	891b      	ldrh	r3, [r3, #8]
 801270a:	1ad3      	subs	r3, r2, r3
 801270c:	b29a      	uxth	r2, r3
 801270e:	887b      	ldrh	r3, [r7, #2]
 8012710:	4413      	add	r3, r2
 8012712:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012714:	697b      	ldr	r3, [r7, #20]
 8012716:	6858      	ldr	r0, [r3, #4]
 8012718:	693b      	ldr	r3, [r7, #16]
 801271a:	685a      	ldr	r2, [r3, #4]
 801271c:	7bbb      	ldrb	r3, [r7, #14]
 801271e:	18d1      	adds	r1, r2, r3
 8012720:	897b      	ldrh	r3, [r7, #10]
 8012722:	89ba      	ldrh	r2, [r7, #12]
 8012724:	f7fb f886 	bl	800d834 <pbuf_copy_partial>
 8012728:	4603      	mov	r3, r0
 801272a:	461a      	mov	r2, r3
 801272c:	89bb      	ldrh	r3, [r7, #12]
 801272e:	4293      	cmp	r3, r2
 8012730:	f040 809f 	bne.w	8012872 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012734:	697b      	ldr	r3, [r7, #20]
 8012736:	68db      	ldr	r3, [r3, #12]
 8012738:	899b      	ldrh	r3, [r3, #12]
 801273a:	b29b      	uxth	r3, r3
 801273c:	4618      	mov	r0, r3
 801273e:	f7f9 fafd 	bl	800bd3c <lwip_htons>
 8012742:	4603      	mov	r3, r0
 8012744:	b2db      	uxtb	r3, r3
 8012746:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801274a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801274c:	2300      	movs	r3, #0
 801274e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012750:	7efb      	ldrb	r3, [r7, #27]
 8012752:	f003 0308 	and.w	r3, r3, #8
 8012756:	2b00      	cmp	r3, #0
 8012758:	d007      	beq.n	801276a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801275a:	7efb      	ldrb	r3, [r7, #27]
 801275c:	f023 0308 	bic.w	r3, r3, #8
 8012760:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8012762:	7ebb      	ldrb	r3, [r7, #26]
 8012764:	f043 0308 	orr.w	r3, r3, #8
 8012768:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801276a:	7efb      	ldrb	r3, [r7, #27]
 801276c:	f003 0301 	and.w	r3, r3, #1
 8012770:	2b00      	cmp	r3, #0
 8012772:	d007      	beq.n	8012784 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012774:	7efb      	ldrb	r3, [r7, #27]
 8012776:	f023 0301 	bic.w	r3, r3, #1
 801277a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801277c:	7ebb      	ldrb	r3, [r7, #26]
 801277e:	f043 0301 	orr.w	r3, r3, #1
 8012782:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012784:	697b      	ldr	r3, [r7, #20]
 8012786:	68db      	ldr	r3, [r3, #12]
 8012788:	685b      	ldr	r3, [r3, #4]
 801278a:	4618      	mov	r0, r3
 801278c:	f7f9 faeb 	bl	800bd66 <lwip_htonl>
 8012790:	4602      	mov	r2, r0
 8012792:	887b      	ldrh	r3, [r7, #2]
 8012794:	18d1      	adds	r1, r2, r3
 8012796:	7eba      	ldrb	r2, [r7, #26]
 8012798:	7bfb      	ldrb	r3, [r7, #15]
 801279a:	9300      	str	r3, [sp, #0]
 801279c:	460b      	mov	r3, r1
 801279e:	6939      	ldr	r1, [r7, #16]
 80127a0:	6878      	ldr	r0, [r7, #4]
 80127a2:	f7ff fa4f 	bl	8011c44 <tcp_create_segment>
 80127a6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80127a8:	69fb      	ldr	r3, [r7, #28]
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d063      	beq.n	8012876 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80127ae:	697b      	ldr	r3, [r7, #20]
 80127b0:	685b      	ldr	r3, [r3, #4]
 80127b2:	4618      	mov	r0, r3
 80127b4:	f7fa fedc 	bl	800d570 <pbuf_clen>
 80127b8:	4603      	mov	r3, r0
 80127ba:	461a      	mov	r2, r3
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80127c2:	1a9b      	subs	r3, r3, r2
 80127c4:	b29a      	uxth	r2, r3
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80127cc:	697b      	ldr	r3, [r7, #20]
 80127ce:	6858      	ldr	r0, [r3, #4]
 80127d0:	697b      	ldr	r3, [r7, #20]
 80127d2:	685b      	ldr	r3, [r3, #4]
 80127d4:	891a      	ldrh	r2, [r3, #8]
 80127d6:	89bb      	ldrh	r3, [r7, #12]
 80127d8:	1ad3      	subs	r3, r2, r3
 80127da:	b29b      	uxth	r3, r3
 80127dc:	4619      	mov	r1, r3
 80127de:	f7fa fcb9 	bl	800d154 <pbuf_realloc>
  useg->len -= remainder;
 80127e2:	697b      	ldr	r3, [r7, #20]
 80127e4:	891a      	ldrh	r2, [r3, #8]
 80127e6:	89bb      	ldrh	r3, [r7, #12]
 80127e8:	1ad3      	subs	r3, r2, r3
 80127ea:	b29a      	uxth	r2, r3
 80127ec:	697b      	ldr	r3, [r7, #20]
 80127ee:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80127f0:	697b      	ldr	r3, [r7, #20]
 80127f2:	68db      	ldr	r3, [r3, #12]
 80127f4:	899b      	ldrh	r3, [r3, #12]
 80127f6:	b29c      	uxth	r4, r3
 80127f8:	7efb      	ldrb	r3, [r7, #27]
 80127fa:	b29b      	uxth	r3, r3
 80127fc:	4618      	mov	r0, r3
 80127fe:	f7f9 fa9d 	bl	800bd3c <lwip_htons>
 8012802:	4603      	mov	r3, r0
 8012804:	461a      	mov	r2, r3
 8012806:	697b      	ldr	r3, [r7, #20]
 8012808:	68db      	ldr	r3, [r3, #12]
 801280a:	4322      	orrs	r2, r4
 801280c:	b292      	uxth	r2, r2
 801280e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8012810:	697b      	ldr	r3, [r7, #20]
 8012812:	685b      	ldr	r3, [r3, #4]
 8012814:	4618      	mov	r0, r3
 8012816:	f7fa feab 	bl	800d570 <pbuf_clen>
 801281a:	4603      	mov	r3, r0
 801281c:	461a      	mov	r2, r3
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012824:	4413      	add	r3, r2
 8012826:	b29a      	uxth	r2, r3
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801282e:	69fb      	ldr	r3, [r7, #28]
 8012830:	685b      	ldr	r3, [r3, #4]
 8012832:	4618      	mov	r0, r3
 8012834:	f7fa fe9c 	bl	800d570 <pbuf_clen>
 8012838:	4603      	mov	r3, r0
 801283a:	461a      	mov	r2, r3
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012842:	4413      	add	r3, r2
 8012844:	b29a      	uxth	r2, r3
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801284c:	697b      	ldr	r3, [r7, #20]
 801284e:	681a      	ldr	r2, [r3, #0]
 8012850:	69fb      	ldr	r3, [r7, #28]
 8012852:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012854:	697b      	ldr	r3, [r7, #20]
 8012856:	69fa      	ldr	r2, [r7, #28]
 8012858:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801285a:	69fb      	ldr	r3, [r7, #28]
 801285c:	681b      	ldr	r3, [r3, #0]
 801285e:	2b00      	cmp	r3, #0
 8012860:	d103      	bne.n	801286a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	2200      	movs	r2, #0
 8012866:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801286a:	2300      	movs	r3, #0
 801286c:	e016      	b.n	801289c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801286e:	bf00      	nop
 8012870:	e002      	b.n	8012878 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012872:	bf00      	nop
 8012874:	e000      	b.n	8012878 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012876:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012878:	69fb      	ldr	r3, [r7, #28]
 801287a:	2b00      	cmp	r3, #0
 801287c:	d006      	beq.n	801288c <tcp_split_unsent_seg+0x25c>
 801287e:	4b09      	ldr	r3, [pc, #36]	; (80128a4 <tcp_split_unsent_seg+0x274>)
 8012880:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8012884:	490d      	ldr	r1, [pc, #52]	; (80128bc <tcp_split_unsent_seg+0x28c>)
 8012886:	4809      	ldr	r0, [pc, #36]	; (80128ac <tcp_split_unsent_seg+0x27c>)
 8012888:	f003 fef8 	bl	801667c <iprintf>
  if (p != NULL) {
 801288c:	693b      	ldr	r3, [r7, #16]
 801288e:	2b00      	cmp	r3, #0
 8012890:	d002      	beq.n	8012898 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8012892:	6938      	ldr	r0, [r7, #16]
 8012894:	f7fa fde4 	bl	800d460 <pbuf_free>
  }

  return ERR_MEM;
 8012898:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801289c:	4618      	mov	r0, r3
 801289e:	3724      	adds	r7, #36	; 0x24
 80128a0:	46bd      	mov	sp, r7
 80128a2:	bd90      	pop	{r4, r7, pc}
 80128a4:	0801a474 	.word	0x0801a474
 80128a8:	0801a808 	.word	0x0801a808
 80128ac:	0801a4c8 	.word	0x0801a4c8
 80128b0:	0801a82c 	.word	0x0801a82c
 80128b4:	0801a850 	.word	0x0801a850
 80128b8:	0801a860 	.word	0x0801a860
 80128bc:	0801a870 	.word	0x0801a870

080128c0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80128c0:	b590      	push	{r4, r7, lr}
 80128c2:	b085      	sub	sp, #20
 80128c4:	af00      	add	r7, sp, #0
 80128c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d106      	bne.n	80128dc <tcp_send_fin+0x1c>
 80128ce:	4b21      	ldr	r3, [pc, #132]	; (8012954 <tcp_send_fin+0x94>)
 80128d0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80128d4:	4920      	ldr	r1, [pc, #128]	; (8012958 <tcp_send_fin+0x98>)
 80128d6:	4821      	ldr	r0, [pc, #132]	; (801295c <tcp_send_fin+0x9c>)
 80128d8:	f003 fed0 	bl	801667c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d02e      	beq.n	8012942 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128e8:	60fb      	str	r3, [r7, #12]
 80128ea:	e002      	b.n	80128f2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80128f2:	68fb      	ldr	r3, [r7, #12]
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d1f8      	bne.n	80128ec <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	68db      	ldr	r3, [r3, #12]
 80128fe:	899b      	ldrh	r3, [r3, #12]
 8012900:	b29b      	uxth	r3, r3
 8012902:	4618      	mov	r0, r3
 8012904:	f7f9 fa1a 	bl	800bd3c <lwip_htons>
 8012908:	4603      	mov	r3, r0
 801290a:	b2db      	uxtb	r3, r3
 801290c:	f003 0307 	and.w	r3, r3, #7
 8012910:	2b00      	cmp	r3, #0
 8012912:	d116      	bne.n	8012942 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	68db      	ldr	r3, [r3, #12]
 8012918:	899b      	ldrh	r3, [r3, #12]
 801291a:	b29c      	uxth	r4, r3
 801291c:	2001      	movs	r0, #1
 801291e:	f7f9 fa0d 	bl	800bd3c <lwip_htons>
 8012922:	4603      	mov	r3, r0
 8012924:	461a      	mov	r2, r3
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	68db      	ldr	r3, [r3, #12]
 801292a:	4322      	orrs	r2, r4
 801292c:	b292      	uxth	r2, r2
 801292e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	8b5b      	ldrh	r3, [r3, #26]
 8012934:	f043 0320 	orr.w	r3, r3, #32
 8012938:	b29a      	uxth	r2, r3
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801293e:	2300      	movs	r3, #0
 8012940:	e004      	b.n	801294c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012942:	2101      	movs	r1, #1
 8012944:	6878      	ldr	r0, [r7, #4]
 8012946:	f000 f80b 	bl	8012960 <tcp_enqueue_flags>
 801294a:	4603      	mov	r3, r0
}
 801294c:	4618      	mov	r0, r3
 801294e:	3714      	adds	r7, #20
 8012950:	46bd      	mov	sp, r7
 8012952:	bd90      	pop	{r4, r7, pc}
 8012954:	0801a474 	.word	0x0801a474
 8012958:	0801a87c 	.word	0x0801a87c
 801295c:	0801a4c8 	.word	0x0801a4c8

08012960 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012960:	b580      	push	{r7, lr}
 8012962:	b08a      	sub	sp, #40	; 0x28
 8012964:	af02      	add	r7, sp, #8
 8012966:	6078      	str	r0, [r7, #4]
 8012968:	460b      	mov	r3, r1
 801296a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801296c:	2300      	movs	r3, #0
 801296e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012970:	2300      	movs	r3, #0
 8012972:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012974:	78fb      	ldrb	r3, [r7, #3]
 8012976:	f003 0303 	and.w	r3, r3, #3
 801297a:	2b00      	cmp	r3, #0
 801297c:	d106      	bne.n	801298c <tcp_enqueue_flags+0x2c>
 801297e:	4b67      	ldr	r3, [pc, #412]	; (8012b1c <tcp_enqueue_flags+0x1bc>)
 8012980:	f240 4211 	movw	r2, #1041	; 0x411
 8012984:	4966      	ldr	r1, [pc, #408]	; (8012b20 <tcp_enqueue_flags+0x1c0>)
 8012986:	4867      	ldr	r0, [pc, #412]	; (8012b24 <tcp_enqueue_flags+0x1c4>)
 8012988:	f003 fe78 	bl	801667c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d106      	bne.n	80129a0 <tcp_enqueue_flags+0x40>
 8012992:	4b62      	ldr	r3, [pc, #392]	; (8012b1c <tcp_enqueue_flags+0x1bc>)
 8012994:	f240 4213 	movw	r2, #1043	; 0x413
 8012998:	4963      	ldr	r1, [pc, #396]	; (8012b28 <tcp_enqueue_flags+0x1c8>)
 801299a:	4862      	ldr	r0, [pc, #392]	; (8012b24 <tcp_enqueue_flags+0x1c4>)
 801299c:	f003 fe6e 	bl	801667c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80129a0:	78fb      	ldrb	r3, [r7, #3]
 80129a2:	f003 0302 	and.w	r3, r3, #2
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d001      	beq.n	80129ae <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80129aa:	2301      	movs	r3, #1
 80129ac:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80129ae:	7ffb      	ldrb	r3, [r7, #31]
 80129b0:	009b      	lsls	r3, r3, #2
 80129b2:	b2db      	uxtb	r3, r3
 80129b4:	f003 0304 	and.w	r3, r3, #4
 80129b8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80129ba:	7dfb      	ldrb	r3, [r7, #23]
 80129bc:	b29b      	uxth	r3, r3
 80129be:	f44f 7220 	mov.w	r2, #640	; 0x280
 80129c2:	4619      	mov	r1, r3
 80129c4:	2036      	movs	r0, #54	; 0x36
 80129c6:	f7fa fa67 	bl	800ce98 <pbuf_alloc>
 80129ca:	6138      	str	r0, [r7, #16]
 80129cc:	693b      	ldr	r3, [r7, #16]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d109      	bne.n	80129e6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	8b5b      	ldrh	r3, [r3, #26]
 80129d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80129da:	b29a      	uxth	r2, r3
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80129e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80129e4:	e095      	b.n	8012b12 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80129e6:	693b      	ldr	r3, [r7, #16]
 80129e8:	895a      	ldrh	r2, [r3, #10]
 80129ea:	7dfb      	ldrb	r3, [r7, #23]
 80129ec:	b29b      	uxth	r3, r3
 80129ee:	429a      	cmp	r2, r3
 80129f0:	d206      	bcs.n	8012a00 <tcp_enqueue_flags+0xa0>
 80129f2:	4b4a      	ldr	r3, [pc, #296]	; (8012b1c <tcp_enqueue_flags+0x1bc>)
 80129f4:	f240 4239 	movw	r2, #1081	; 0x439
 80129f8:	494c      	ldr	r1, [pc, #304]	; (8012b2c <tcp_enqueue_flags+0x1cc>)
 80129fa:	484a      	ldr	r0, [pc, #296]	; (8012b24 <tcp_enqueue_flags+0x1c4>)
 80129fc:	f003 fe3e 	bl	801667c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012a04:	78fa      	ldrb	r2, [r7, #3]
 8012a06:	7ffb      	ldrb	r3, [r7, #31]
 8012a08:	9300      	str	r3, [sp, #0]
 8012a0a:	460b      	mov	r3, r1
 8012a0c:	6939      	ldr	r1, [r7, #16]
 8012a0e:	6878      	ldr	r0, [r7, #4]
 8012a10:	f7ff f918 	bl	8011c44 <tcp_create_segment>
 8012a14:	60f8      	str	r0, [r7, #12]
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d109      	bne.n	8012a30 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	8b5b      	ldrh	r3, [r3, #26]
 8012a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012a24:	b29a      	uxth	r2, r3
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012a2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012a2e:	e070      	b.n	8012b12 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	68db      	ldr	r3, [r3, #12]
 8012a34:	f003 0303 	and.w	r3, r3, #3
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d006      	beq.n	8012a4a <tcp_enqueue_flags+0xea>
 8012a3c:	4b37      	ldr	r3, [pc, #220]	; (8012b1c <tcp_enqueue_flags+0x1bc>)
 8012a3e:	f240 4242 	movw	r2, #1090	; 0x442
 8012a42:	493b      	ldr	r1, [pc, #236]	; (8012b30 <tcp_enqueue_flags+0x1d0>)
 8012a44:	4837      	ldr	r0, [pc, #220]	; (8012b24 <tcp_enqueue_flags+0x1c4>)
 8012a46:	f003 fe19 	bl	801667c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	891b      	ldrh	r3, [r3, #8]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d006      	beq.n	8012a60 <tcp_enqueue_flags+0x100>
 8012a52:	4b32      	ldr	r3, [pc, #200]	; (8012b1c <tcp_enqueue_flags+0x1bc>)
 8012a54:	f240 4243 	movw	r2, #1091	; 0x443
 8012a58:	4936      	ldr	r1, [pc, #216]	; (8012b34 <tcp_enqueue_flags+0x1d4>)
 8012a5a:	4832      	ldr	r0, [pc, #200]	; (8012b24 <tcp_enqueue_flags+0x1c4>)
 8012a5c:	f003 fe0e 	bl	801667c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d103      	bne.n	8012a70 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	68fa      	ldr	r2, [r7, #12]
 8012a6c:	66da      	str	r2, [r3, #108]	; 0x6c
 8012a6e:	e00d      	b.n	8012a8c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a74:	61bb      	str	r3, [r7, #24]
 8012a76:	e002      	b.n	8012a7e <tcp_enqueue_flags+0x11e>
 8012a78:	69bb      	ldr	r3, [r7, #24]
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	61bb      	str	r3, [r7, #24]
 8012a7e:	69bb      	ldr	r3, [r7, #24]
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d1f8      	bne.n	8012a78 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012a86:	69bb      	ldr	r3, [r7, #24]
 8012a88:	68fa      	ldr	r2, [r7, #12]
 8012a8a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	2200      	movs	r2, #0
 8012a90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012a94:	78fb      	ldrb	r3, [r7, #3]
 8012a96:	f003 0302 	and.w	r3, r3, #2
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d104      	bne.n	8012aa8 <tcp_enqueue_flags+0x148>
 8012a9e:	78fb      	ldrb	r3, [r7, #3]
 8012aa0:	f003 0301 	and.w	r3, r3, #1
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d004      	beq.n	8012ab2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012aac:	1c5a      	adds	r2, r3, #1
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012ab2:	78fb      	ldrb	r3, [r7, #3]
 8012ab4:	f003 0301 	and.w	r3, r3, #1
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d006      	beq.n	8012aca <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	8b5b      	ldrh	r3, [r3, #26]
 8012ac0:	f043 0320 	orr.w	r3, r3, #32
 8012ac4:	b29a      	uxth	r2, r3
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	685b      	ldr	r3, [r3, #4]
 8012ace:	4618      	mov	r0, r3
 8012ad0:	f7fa fd4e 	bl	800d570 <pbuf_clen>
 8012ad4:	4603      	mov	r3, r0
 8012ad6:	461a      	mov	r2, r3
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012ade:	4413      	add	r3, r2
 8012ae0:	b29a      	uxth	r2, r3
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d00e      	beq.n	8012b10 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d10a      	bne.n	8012b10 <tcp_enqueue_flags+0x1b0>
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d106      	bne.n	8012b10 <tcp_enqueue_flags+0x1b0>
 8012b02:	4b06      	ldr	r3, [pc, #24]	; (8012b1c <tcp_enqueue_flags+0x1bc>)
 8012b04:	f240 4265 	movw	r2, #1125	; 0x465
 8012b08:	490b      	ldr	r1, [pc, #44]	; (8012b38 <tcp_enqueue_flags+0x1d8>)
 8012b0a:	4806      	ldr	r0, [pc, #24]	; (8012b24 <tcp_enqueue_flags+0x1c4>)
 8012b0c:	f003 fdb6 	bl	801667c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012b10:	2300      	movs	r3, #0
}
 8012b12:	4618      	mov	r0, r3
 8012b14:	3720      	adds	r7, #32
 8012b16:	46bd      	mov	sp, r7
 8012b18:	bd80      	pop	{r7, pc}
 8012b1a:	bf00      	nop
 8012b1c:	0801a474 	.word	0x0801a474
 8012b20:	0801a898 	.word	0x0801a898
 8012b24:	0801a4c8 	.word	0x0801a4c8
 8012b28:	0801a8f0 	.word	0x0801a8f0
 8012b2c:	0801a910 	.word	0x0801a910
 8012b30:	0801a94c 	.word	0x0801a94c
 8012b34:	0801a964 	.word	0x0801a964
 8012b38:	0801a990 	.word	0x0801a990

08012b3c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012b3c:	b5b0      	push	{r4, r5, r7, lr}
 8012b3e:	b08a      	sub	sp, #40	; 0x28
 8012b40:	af00      	add	r7, sp, #0
 8012b42:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d106      	bne.n	8012b58 <tcp_output+0x1c>
 8012b4a:	4b9e      	ldr	r3, [pc, #632]	; (8012dc4 <tcp_output+0x288>)
 8012b4c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8012b50:	499d      	ldr	r1, [pc, #628]	; (8012dc8 <tcp_output+0x28c>)
 8012b52:	489e      	ldr	r0, [pc, #632]	; (8012dcc <tcp_output+0x290>)
 8012b54:	f003 fd92 	bl	801667c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	7d1b      	ldrb	r3, [r3, #20]
 8012b5c:	2b01      	cmp	r3, #1
 8012b5e:	d106      	bne.n	8012b6e <tcp_output+0x32>
 8012b60:	4b98      	ldr	r3, [pc, #608]	; (8012dc4 <tcp_output+0x288>)
 8012b62:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8012b66:	499a      	ldr	r1, [pc, #616]	; (8012dd0 <tcp_output+0x294>)
 8012b68:	4898      	ldr	r0, [pc, #608]	; (8012dcc <tcp_output+0x290>)
 8012b6a:	f003 fd87 	bl	801667c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012b6e:	4b99      	ldr	r3, [pc, #612]	; (8012dd4 <tcp_output+0x298>)
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	687a      	ldr	r2, [r7, #4]
 8012b74:	429a      	cmp	r2, r3
 8012b76:	d101      	bne.n	8012b7c <tcp_output+0x40>
    return ERR_OK;
 8012b78:	2300      	movs	r3, #0
 8012b7a:	e1ce      	b.n	8012f1a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012b88:	4293      	cmp	r3, r2
 8012b8a:	bf28      	it	cs
 8012b8c:	4613      	movcs	r3, r2
 8012b8e:	b29b      	uxth	r3, r3
 8012b90:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b96:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8012b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d10b      	bne.n	8012bb6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	8b5b      	ldrh	r3, [r3, #26]
 8012ba2:	f003 0302 	and.w	r3, r3, #2
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	f000 81aa 	beq.w	8012f00 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8012bac:	6878      	ldr	r0, [r7, #4]
 8012bae:	f000 fdcb 	bl	8013748 <tcp_send_empty_ack>
 8012bb2:	4603      	mov	r3, r0
 8012bb4:	e1b1      	b.n	8012f1a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012bb6:	6879      	ldr	r1, [r7, #4]
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	3304      	adds	r3, #4
 8012bbc:	461a      	mov	r2, r3
 8012bbe:	6878      	ldr	r0, [r7, #4]
 8012bc0:	f7ff f824 	bl	8011c0c <tcp_route>
 8012bc4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012bc6:	697b      	ldr	r3, [r7, #20]
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d102      	bne.n	8012bd2 <tcp_output+0x96>
    return ERR_RTE;
 8012bcc:	f06f 0303 	mvn.w	r3, #3
 8012bd0:	e1a3      	b.n	8012f1a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d003      	beq.n	8012be0 <tcp_output+0xa4>
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d111      	bne.n	8012c04 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012be0:	697b      	ldr	r3, [r7, #20]
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d002      	beq.n	8012bec <tcp_output+0xb0>
 8012be6:	697b      	ldr	r3, [r7, #20]
 8012be8:	3304      	adds	r3, #4
 8012bea:	e000      	b.n	8012bee <tcp_output+0xb2>
 8012bec:	2300      	movs	r3, #0
 8012bee:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012bf0:	693b      	ldr	r3, [r7, #16]
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d102      	bne.n	8012bfc <tcp_output+0xc0>
      return ERR_RTE;
 8012bf6:	f06f 0303 	mvn.w	r3, #3
 8012bfa:	e18e      	b.n	8012f1a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012bfc:	693b      	ldr	r3, [r7, #16]
 8012bfe:	681a      	ldr	r2, [r3, #0]
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c06:	68db      	ldr	r3, [r3, #12]
 8012c08:	685b      	ldr	r3, [r3, #4]
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	f7f9 f8ab 	bl	800bd66 <lwip_htonl>
 8012c10:	4602      	mov	r2, r0
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012c16:	1ad3      	subs	r3, r2, r3
 8012c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012c1a:	8912      	ldrh	r2, [r2, #8]
 8012c1c:	4413      	add	r3, r2
 8012c1e:	69ba      	ldr	r2, [r7, #24]
 8012c20:	429a      	cmp	r2, r3
 8012c22:	d227      	bcs.n	8012c74 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012c2a:	461a      	mov	r2, r3
 8012c2c:	69bb      	ldr	r3, [r7, #24]
 8012c2e:	4293      	cmp	r3, r2
 8012c30:	d114      	bne.n	8012c5c <tcp_output+0x120>
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d110      	bne.n	8012c5c <tcp_output+0x120>
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d10b      	bne.n	8012c5c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	2200      	movs	r2, #0
 8012c48:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	2201      	movs	r2, #1
 8012c50:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	2200      	movs	r2, #0
 8012c58:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	8b5b      	ldrh	r3, [r3, #26]
 8012c60:	f003 0302 	and.w	r3, r3, #2
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	f000 814d 	beq.w	8012f04 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8012c6a:	6878      	ldr	r0, [r7, #4]
 8012c6c:	f000 fd6c 	bl	8013748 <tcp_send_empty_ack>
 8012c70:	4603      	mov	r3, r0
 8012c72:	e152      	b.n	8012f1a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	2200      	movs	r2, #0
 8012c78:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c80:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012c82:	6a3b      	ldr	r3, [r7, #32]
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	f000 811c 	beq.w	8012ec2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8012c8a:	e002      	b.n	8012c92 <tcp_output+0x156>
 8012c8c:	6a3b      	ldr	r3, [r7, #32]
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	623b      	str	r3, [r7, #32]
 8012c92:	6a3b      	ldr	r3, [r7, #32]
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d1f8      	bne.n	8012c8c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012c9a:	e112      	b.n	8012ec2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c9e:	68db      	ldr	r3, [r3, #12]
 8012ca0:	899b      	ldrh	r3, [r3, #12]
 8012ca2:	b29b      	uxth	r3, r3
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	f7f9 f849 	bl	800bd3c <lwip_htons>
 8012caa:	4603      	mov	r3, r0
 8012cac:	b2db      	uxtb	r3, r3
 8012cae:	f003 0304 	and.w	r3, r3, #4
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d006      	beq.n	8012cc4 <tcp_output+0x188>
 8012cb6:	4b43      	ldr	r3, [pc, #268]	; (8012dc4 <tcp_output+0x288>)
 8012cb8:	f240 5236 	movw	r2, #1334	; 0x536
 8012cbc:	4946      	ldr	r1, [pc, #280]	; (8012dd8 <tcp_output+0x29c>)
 8012cbe:	4843      	ldr	r0, [pc, #268]	; (8012dcc <tcp_output+0x290>)
 8012cc0:	f003 fcdc 	bl	801667c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d01f      	beq.n	8012d0c <tcp_output+0x1d0>
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	8b5b      	ldrh	r3, [r3, #26]
 8012cd0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d119      	bne.n	8012d0c <tcp_output+0x1d0>
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d00b      	beq.n	8012cf8 <tcp_output+0x1bc>
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d110      	bne.n	8012d0c <tcp_output+0x1d0>
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012cee:	891a      	ldrh	r2, [r3, #8]
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012cf4:	429a      	cmp	r2, r3
 8012cf6:	d209      	bcs.n	8012d0c <tcp_output+0x1d0>
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d004      	beq.n	8012d0c <tcp_output+0x1d0>
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012d08:	2b08      	cmp	r3, #8
 8012d0a:	d901      	bls.n	8012d10 <tcp_output+0x1d4>
 8012d0c:	2301      	movs	r3, #1
 8012d0e:	e000      	b.n	8012d12 <tcp_output+0x1d6>
 8012d10:	2300      	movs	r3, #0
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d106      	bne.n	8012d24 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	8b5b      	ldrh	r3, [r3, #26]
 8012d1a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	f000 80e4 	beq.w	8012eec <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	7d1b      	ldrb	r3, [r3, #20]
 8012d28:	2b02      	cmp	r3, #2
 8012d2a:	d00d      	beq.n	8012d48 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d2e:	68db      	ldr	r3, [r3, #12]
 8012d30:	899b      	ldrh	r3, [r3, #12]
 8012d32:	b29c      	uxth	r4, r3
 8012d34:	2010      	movs	r0, #16
 8012d36:	f7f9 f801 	bl	800bd3c <lwip_htons>
 8012d3a:	4603      	mov	r3, r0
 8012d3c:	461a      	mov	r2, r3
 8012d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d40:	68db      	ldr	r3, [r3, #12]
 8012d42:	4322      	orrs	r2, r4
 8012d44:	b292      	uxth	r2, r2
 8012d46:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012d48:	697a      	ldr	r2, [r7, #20]
 8012d4a:	6879      	ldr	r1, [r7, #4]
 8012d4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012d4e:	f000 f909 	bl	8012f64 <tcp_output_segment>
 8012d52:	4603      	mov	r3, r0
 8012d54:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d009      	beq.n	8012d72 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	8b5b      	ldrh	r3, [r3, #26]
 8012d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d66:	b29a      	uxth	r2, r3
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	835a      	strh	r2, [r3, #26]
      return err;
 8012d6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d70:	e0d3      	b.n	8012f1a <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d74:	681a      	ldr	r2, [r3, #0]
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	7d1b      	ldrb	r3, [r3, #20]
 8012d7e:	2b02      	cmp	r3, #2
 8012d80:	d006      	beq.n	8012d90 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	8b5b      	ldrh	r3, [r3, #26]
 8012d86:	f023 0303 	bic.w	r3, r3, #3
 8012d8a:	b29a      	uxth	r2, r3
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d92:	68db      	ldr	r3, [r3, #12]
 8012d94:	685b      	ldr	r3, [r3, #4]
 8012d96:	4618      	mov	r0, r3
 8012d98:	f7f8 ffe5 	bl	800bd66 <lwip_htonl>
 8012d9c:	4604      	mov	r4, r0
 8012d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012da0:	891b      	ldrh	r3, [r3, #8]
 8012da2:	461d      	mov	r5, r3
 8012da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012da6:	68db      	ldr	r3, [r3, #12]
 8012da8:	899b      	ldrh	r3, [r3, #12]
 8012daa:	b29b      	uxth	r3, r3
 8012dac:	4618      	mov	r0, r3
 8012dae:	f7f8 ffc5 	bl	800bd3c <lwip_htons>
 8012db2:	4603      	mov	r3, r0
 8012db4:	b2db      	uxtb	r3, r3
 8012db6:	f003 0303 	and.w	r3, r3, #3
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d00e      	beq.n	8012ddc <tcp_output+0x2a0>
 8012dbe:	2301      	movs	r3, #1
 8012dc0:	e00d      	b.n	8012dde <tcp_output+0x2a2>
 8012dc2:	bf00      	nop
 8012dc4:	0801a474 	.word	0x0801a474
 8012dc8:	0801a9b8 	.word	0x0801a9b8
 8012dcc:	0801a4c8 	.word	0x0801a4c8
 8012dd0:	0801a9d0 	.word	0x0801a9d0
 8012dd4:	20017a0c 	.word	0x20017a0c
 8012dd8:	0801a9f8 	.word	0x0801a9f8
 8012ddc:	2300      	movs	r3, #0
 8012dde:	442b      	add	r3, r5
 8012de0:	4423      	add	r3, r4
 8012de2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012de8:	68bb      	ldr	r3, [r7, #8]
 8012dea:	1ad3      	subs	r3, r2, r3
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	da02      	bge.n	8012df6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	68ba      	ldr	r2, [r7, #8]
 8012df4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012df8:	891b      	ldrh	r3, [r3, #8]
 8012dfa:	461c      	mov	r4, r3
 8012dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dfe:	68db      	ldr	r3, [r3, #12]
 8012e00:	899b      	ldrh	r3, [r3, #12]
 8012e02:	b29b      	uxth	r3, r3
 8012e04:	4618      	mov	r0, r3
 8012e06:	f7f8 ff99 	bl	800bd3c <lwip_htons>
 8012e0a:	4603      	mov	r3, r0
 8012e0c:	b2db      	uxtb	r3, r3
 8012e0e:	f003 0303 	and.w	r3, r3, #3
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d001      	beq.n	8012e1a <tcp_output+0x2de>
 8012e16:	2301      	movs	r3, #1
 8012e18:	e000      	b.n	8012e1c <tcp_output+0x2e0>
 8012e1a:	2300      	movs	r3, #0
 8012e1c:	4423      	add	r3, r4
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d049      	beq.n	8012eb6 <tcp_output+0x37a>
      seg->next = NULL;
 8012e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e24:	2200      	movs	r2, #0
 8012e26:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d105      	bne.n	8012e3c <tcp_output+0x300>
        pcb->unacked = seg;
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e34:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8012e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e38:	623b      	str	r3, [r7, #32]
 8012e3a:	e03f      	b.n	8012ebc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e3e:	68db      	ldr	r3, [r3, #12]
 8012e40:	685b      	ldr	r3, [r3, #4]
 8012e42:	4618      	mov	r0, r3
 8012e44:	f7f8 ff8f 	bl	800bd66 <lwip_htonl>
 8012e48:	4604      	mov	r4, r0
 8012e4a:	6a3b      	ldr	r3, [r7, #32]
 8012e4c:	68db      	ldr	r3, [r3, #12]
 8012e4e:	685b      	ldr	r3, [r3, #4]
 8012e50:	4618      	mov	r0, r3
 8012e52:	f7f8 ff88 	bl	800bd66 <lwip_htonl>
 8012e56:	4603      	mov	r3, r0
 8012e58:	1ae3      	subs	r3, r4, r3
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	da24      	bge.n	8012ea8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	3370      	adds	r3, #112	; 0x70
 8012e62:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012e64:	e002      	b.n	8012e6c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012e66:	69fb      	ldr	r3, [r7, #28]
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012e6c:	69fb      	ldr	r3, [r7, #28]
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d011      	beq.n	8012e98 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012e74:	69fb      	ldr	r3, [r7, #28]
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	68db      	ldr	r3, [r3, #12]
 8012e7a:	685b      	ldr	r3, [r3, #4]
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	f7f8 ff72 	bl	800bd66 <lwip_htonl>
 8012e82:	4604      	mov	r4, r0
 8012e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e86:	68db      	ldr	r3, [r3, #12]
 8012e88:	685b      	ldr	r3, [r3, #4]
 8012e8a:	4618      	mov	r0, r3
 8012e8c:	f7f8 ff6b 	bl	800bd66 <lwip_htonl>
 8012e90:	4603      	mov	r3, r0
 8012e92:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	dbe6      	blt.n	8012e66 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012e98:	69fb      	ldr	r3, [r7, #28]
 8012e9a:	681a      	ldr	r2, [r3, #0]
 8012e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e9e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012ea0:	69fb      	ldr	r3, [r7, #28]
 8012ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ea4:	601a      	str	r2, [r3, #0]
 8012ea6:	e009      	b.n	8012ebc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012ea8:	6a3b      	ldr	r3, [r7, #32]
 8012eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012eac:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012eae:	6a3b      	ldr	r3, [r7, #32]
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	623b      	str	r3, [r7, #32]
 8012eb4:	e002      	b.n	8012ebc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012eb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012eb8:	f7fb feff 	bl	800ecba <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ec0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d012      	beq.n	8012eee <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eca:	68db      	ldr	r3, [r3, #12]
 8012ecc:	685b      	ldr	r3, [r3, #4]
 8012ece:	4618      	mov	r0, r3
 8012ed0:	f7f8 ff49 	bl	800bd66 <lwip_htonl>
 8012ed4:	4602      	mov	r2, r0
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012eda:	1ad3      	subs	r3, r2, r3
 8012edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ede:	8912      	ldrh	r2, [r2, #8]
 8012ee0:	4413      	add	r3, r2
  while (seg != NULL &&
 8012ee2:	69ba      	ldr	r2, [r7, #24]
 8012ee4:	429a      	cmp	r2, r3
 8012ee6:	f4bf aed9 	bcs.w	8012c9c <tcp_output+0x160>
 8012eea:	e000      	b.n	8012eee <tcp_output+0x3b2>
      break;
 8012eec:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d108      	bne.n	8012f08 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	2200      	movs	r2, #0
 8012efa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8012efe:	e004      	b.n	8012f0a <tcp_output+0x3ce>
    goto output_done;
 8012f00:	bf00      	nop
 8012f02:	e002      	b.n	8012f0a <tcp_output+0x3ce>
    goto output_done;
 8012f04:	bf00      	nop
 8012f06:	e000      	b.n	8012f0a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012f08:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	8b5b      	ldrh	r3, [r3, #26]
 8012f0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012f12:	b29a      	uxth	r2, r3
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012f18:	2300      	movs	r3, #0
}
 8012f1a:	4618      	mov	r0, r3
 8012f1c:	3728      	adds	r7, #40	; 0x28
 8012f1e:	46bd      	mov	sp, r7
 8012f20:	bdb0      	pop	{r4, r5, r7, pc}
 8012f22:	bf00      	nop

08012f24 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012f24:	b580      	push	{r7, lr}
 8012f26:	b082      	sub	sp, #8
 8012f28:	af00      	add	r7, sp, #0
 8012f2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d106      	bne.n	8012f40 <tcp_output_segment_busy+0x1c>
 8012f32:	4b09      	ldr	r3, [pc, #36]	; (8012f58 <tcp_output_segment_busy+0x34>)
 8012f34:	f240 529a 	movw	r2, #1434	; 0x59a
 8012f38:	4908      	ldr	r1, [pc, #32]	; (8012f5c <tcp_output_segment_busy+0x38>)
 8012f3a:	4809      	ldr	r0, [pc, #36]	; (8012f60 <tcp_output_segment_busy+0x3c>)
 8012f3c:	f003 fb9e 	bl	801667c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	685b      	ldr	r3, [r3, #4]
 8012f44:	7b9b      	ldrb	r3, [r3, #14]
 8012f46:	2b01      	cmp	r3, #1
 8012f48:	d001      	beq.n	8012f4e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8012f4a:	2301      	movs	r3, #1
 8012f4c:	e000      	b.n	8012f50 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012f4e:	2300      	movs	r3, #0
}
 8012f50:	4618      	mov	r0, r3
 8012f52:	3708      	adds	r7, #8
 8012f54:	46bd      	mov	sp, r7
 8012f56:	bd80      	pop	{r7, pc}
 8012f58:	0801a474 	.word	0x0801a474
 8012f5c:	0801aa10 	.word	0x0801aa10
 8012f60:	0801a4c8 	.word	0x0801a4c8

08012f64 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012f64:	b5b0      	push	{r4, r5, r7, lr}
 8012f66:	b08c      	sub	sp, #48	; 0x30
 8012f68:	af04      	add	r7, sp, #16
 8012f6a:	60f8      	str	r0, [r7, #12]
 8012f6c:	60b9      	str	r1, [r7, #8]
 8012f6e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d106      	bne.n	8012f84 <tcp_output_segment+0x20>
 8012f76:	4b63      	ldr	r3, [pc, #396]	; (8013104 <tcp_output_segment+0x1a0>)
 8012f78:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8012f7c:	4962      	ldr	r1, [pc, #392]	; (8013108 <tcp_output_segment+0x1a4>)
 8012f7e:	4863      	ldr	r0, [pc, #396]	; (801310c <tcp_output_segment+0x1a8>)
 8012f80:	f003 fb7c 	bl	801667c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012f84:	68bb      	ldr	r3, [r7, #8]
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d106      	bne.n	8012f98 <tcp_output_segment+0x34>
 8012f8a:	4b5e      	ldr	r3, [pc, #376]	; (8013104 <tcp_output_segment+0x1a0>)
 8012f8c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8012f90:	495f      	ldr	r1, [pc, #380]	; (8013110 <tcp_output_segment+0x1ac>)
 8012f92:	485e      	ldr	r0, [pc, #376]	; (801310c <tcp_output_segment+0x1a8>)
 8012f94:	f003 fb72 	bl	801667c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d106      	bne.n	8012fac <tcp_output_segment+0x48>
 8012f9e:	4b59      	ldr	r3, [pc, #356]	; (8013104 <tcp_output_segment+0x1a0>)
 8012fa0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012fa4:	495b      	ldr	r1, [pc, #364]	; (8013114 <tcp_output_segment+0x1b0>)
 8012fa6:	4859      	ldr	r0, [pc, #356]	; (801310c <tcp_output_segment+0x1a8>)
 8012fa8:	f003 fb68 	bl	801667c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012fac:	68f8      	ldr	r0, [r7, #12]
 8012fae:	f7ff ffb9 	bl	8012f24 <tcp_output_segment_busy>
 8012fb2:	4603      	mov	r3, r0
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d001      	beq.n	8012fbc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012fb8:	2300      	movs	r3, #0
 8012fba:	e09f      	b.n	80130fc <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012fbc:	68bb      	ldr	r3, [r7, #8]
 8012fbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	68dc      	ldr	r4, [r3, #12]
 8012fc4:	4610      	mov	r0, r2
 8012fc6:	f7f8 fece 	bl	800bd66 <lwip_htonl>
 8012fca:	4603      	mov	r3, r0
 8012fcc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012fce:	68bb      	ldr	r3, [r7, #8]
 8012fd0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012fd2:	68fb      	ldr	r3, [r7, #12]
 8012fd4:	68dc      	ldr	r4, [r3, #12]
 8012fd6:	4610      	mov	r0, r2
 8012fd8:	f7f8 feb0 	bl	800bd3c <lwip_htons>
 8012fdc:	4603      	mov	r3, r0
 8012fde:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012fe0:	68bb      	ldr	r3, [r7, #8]
 8012fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fe4:	68ba      	ldr	r2, [r7, #8]
 8012fe6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012fe8:	441a      	add	r2, r3
 8012fea:	68bb      	ldr	r3, [r7, #8]
 8012fec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	68db      	ldr	r3, [r3, #12]
 8012ff2:	3314      	adds	r3, #20
 8012ff4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	7a9b      	ldrb	r3, [r3, #10]
 8012ffa:	f003 0301 	and.w	r3, r3, #1
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d015      	beq.n	801302e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8013002:	68bb      	ldr	r3, [r7, #8]
 8013004:	3304      	adds	r3, #4
 8013006:	461a      	mov	r2, r3
 8013008:	6879      	ldr	r1, [r7, #4]
 801300a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801300e:	f7fc fa37 	bl	800f480 <tcp_eff_send_mss_netif>
 8013012:	4603      	mov	r3, r0
 8013014:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8013016:	8b7b      	ldrh	r3, [r7, #26]
 8013018:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801301c:	4618      	mov	r0, r3
 801301e:	f7f8 fea2 	bl	800bd66 <lwip_htonl>
 8013022:	4602      	mov	r2, r0
 8013024:	69fb      	ldr	r3, [r7, #28]
 8013026:	601a      	str	r2, [r3, #0]
    opts += 1;
 8013028:	69fb      	ldr	r3, [r7, #28]
 801302a:	3304      	adds	r3, #4
 801302c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801302e:	68bb      	ldr	r3, [r7, #8]
 8013030:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013034:	2b00      	cmp	r3, #0
 8013036:	da02      	bge.n	801303e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8013038:	68bb      	ldr	r3, [r7, #8]
 801303a:	2200      	movs	r2, #0
 801303c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801303e:	68bb      	ldr	r3, [r7, #8]
 8013040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013042:	2b00      	cmp	r3, #0
 8013044:	d10c      	bne.n	8013060 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8013046:	4b34      	ldr	r3, [pc, #208]	; (8013118 <tcp_output_segment+0x1b4>)
 8013048:	681a      	ldr	r2, [r3, #0]
 801304a:	68bb      	ldr	r3, [r7, #8]
 801304c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	68db      	ldr	r3, [r3, #12]
 8013052:	685b      	ldr	r3, [r3, #4]
 8013054:	4618      	mov	r0, r3
 8013056:	f7f8 fe86 	bl	800bd66 <lwip_htonl>
 801305a:	4602      	mov	r2, r0
 801305c:	68bb      	ldr	r3, [r7, #8]
 801305e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	68da      	ldr	r2, [r3, #12]
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	685b      	ldr	r3, [r3, #4]
 8013068:	685b      	ldr	r3, [r3, #4]
 801306a:	1ad3      	subs	r3, r2, r3
 801306c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	685b      	ldr	r3, [r3, #4]
 8013072:	8959      	ldrh	r1, [r3, #10]
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	685b      	ldr	r3, [r3, #4]
 8013078:	8b3a      	ldrh	r2, [r7, #24]
 801307a:	1a8a      	subs	r2, r1, r2
 801307c:	b292      	uxth	r2, r2
 801307e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	685b      	ldr	r3, [r3, #4]
 8013084:	8919      	ldrh	r1, [r3, #8]
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	685b      	ldr	r3, [r3, #4]
 801308a:	8b3a      	ldrh	r2, [r7, #24]
 801308c:	1a8a      	subs	r2, r1, r2
 801308e:	b292      	uxth	r2, r2
 8013090:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	685b      	ldr	r3, [r3, #4]
 8013096:	68fa      	ldr	r2, [r7, #12]
 8013098:	68d2      	ldr	r2, [r2, #12]
 801309a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	68db      	ldr	r3, [r3, #12]
 80130a0:	2200      	movs	r2, #0
 80130a2:	741a      	strb	r2, [r3, #16]
 80130a4:	2200      	movs	r2, #0
 80130a6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	68db      	ldr	r3, [r3, #12]
 80130ac:	f103 0214 	add.w	r2, r3, #20
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	7a9b      	ldrb	r3, [r3, #10]
 80130b4:	009b      	lsls	r3, r3, #2
 80130b6:	f003 0304 	and.w	r3, r3, #4
 80130ba:	4413      	add	r3, r2
 80130bc:	69fa      	ldr	r2, [r7, #28]
 80130be:	429a      	cmp	r2, r3
 80130c0:	d006      	beq.n	80130d0 <tcp_output_segment+0x16c>
 80130c2:	4b10      	ldr	r3, [pc, #64]	; (8013104 <tcp_output_segment+0x1a0>)
 80130c4:	f240 621c 	movw	r2, #1564	; 0x61c
 80130c8:	4914      	ldr	r1, [pc, #80]	; (801311c <tcp_output_segment+0x1b8>)
 80130ca:	4810      	ldr	r0, [pc, #64]	; (801310c <tcp_output_segment+0x1a8>)
 80130cc:	f003 fad6 	bl	801667c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	6858      	ldr	r0, [r3, #4]
 80130d4:	68b9      	ldr	r1, [r7, #8]
 80130d6:	68bb      	ldr	r3, [r7, #8]
 80130d8:	1d1c      	adds	r4, r3, #4
 80130da:	68bb      	ldr	r3, [r7, #8]
 80130dc:	7add      	ldrb	r5, [r3, #11]
 80130de:	68bb      	ldr	r3, [r7, #8]
 80130e0:	7a9b      	ldrb	r3, [r3, #10]
 80130e2:	687a      	ldr	r2, [r7, #4]
 80130e4:	9202      	str	r2, [sp, #8]
 80130e6:	2206      	movs	r2, #6
 80130e8:	9201      	str	r2, [sp, #4]
 80130ea:	9300      	str	r3, [sp, #0]
 80130ec:	462b      	mov	r3, r5
 80130ee:	4622      	mov	r2, r4
 80130f0:	f002 fa36 	bl	8015560 <ip4_output_if>
 80130f4:	4603      	mov	r3, r0
 80130f6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80130f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80130fc:	4618      	mov	r0, r3
 80130fe:	3720      	adds	r7, #32
 8013100:	46bd      	mov	sp, r7
 8013102:	bdb0      	pop	{r4, r5, r7, pc}
 8013104:	0801a474 	.word	0x0801a474
 8013108:	0801aa38 	.word	0x0801aa38
 801310c:	0801a4c8 	.word	0x0801a4c8
 8013110:	0801aa58 	.word	0x0801aa58
 8013114:	0801aa78 	.word	0x0801aa78
 8013118:	200179fc 	.word	0x200179fc
 801311c:	0801aa9c 	.word	0x0801aa9c

08013120 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013120:	b5b0      	push	{r4, r5, r7, lr}
 8013122:	b084      	sub	sp, #16
 8013124:	af00      	add	r7, sp, #0
 8013126:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	2b00      	cmp	r3, #0
 801312c:	d106      	bne.n	801313c <tcp_rexmit_rto_prepare+0x1c>
 801312e:	4b31      	ldr	r3, [pc, #196]	; (80131f4 <tcp_rexmit_rto_prepare+0xd4>)
 8013130:	f240 6263 	movw	r2, #1635	; 0x663
 8013134:	4930      	ldr	r1, [pc, #192]	; (80131f8 <tcp_rexmit_rto_prepare+0xd8>)
 8013136:	4831      	ldr	r0, [pc, #196]	; (80131fc <tcp_rexmit_rto_prepare+0xdc>)
 8013138:	f003 faa0 	bl	801667c <iprintf>

  if (pcb->unacked == NULL) {
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013140:	2b00      	cmp	r3, #0
 8013142:	d102      	bne.n	801314a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013144:	f06f 0305 	mvn.w	r3, #5
 8013148:	e050      	b.n	80131ec <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801314e:	60fb      	str	r3, [r7, #12]
 8013150:	e00b      	b.n	801316a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8013152:	68f8      	ldr	r0, [r7, #12]
 8013154:	f7ff fee6 	bl	8012f24 <tcp_output_segment_busy>
 8013158:	4603      	mov	r3, r0
 801315a:	2b00      	cmp	r3, #0
 801315c:	d002      	beq.n	8013164 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801315e:	f06f 0305 	mvn.w	r3, #5
 8013162:	e043      	b.n	80131ec <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	60fb      	str	r3, [r7, #12]
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	2b00      	cmp	r3, #0
 8013170:	d1ef      	bne.n	8013152 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8013172:	68f8      	ldr	r0, [r7, #12]
 8013174:	f7ff fed6 	bl	8012f24 <tcp_output_segment_busy>
 8013178:	4603      	mov	r3, r0
 801317a:	2b00      	cmp	r3, #0
 801317c:	d002      	beq.n	8013184 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801317e:	f06f 0305 	mvn.w	r3, #5
 8013182:	e033      	b.n	80131ec <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	2200      	movs	r2, #0
 8013198:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	8b5b      	ldrh	r3, [r3, #26]
 801319e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80131a2:	b29a      	uxth	r2, r3
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	68db      	ldr	r3, [r3, #12]
 80131ac:	685b      	ldr	r3, [r3, #4]
 80131ae:	4618      	mov	r0, r3
 80131b0:	f7f8 fdd9 	bl	800bd66 <lwip_htonl>
 80131b4:	4604      	mov	r4, r0
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	891b      	ldrh	r3, [r3, #8]
 80131ba:	461d      	mov	r5, r3
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	68db      	ldr	r3, [r3, #12]
 80131c0:	899b      	ldrh	r3, [r3, #12]
 80131c2:	b29b      	uxth	r3, r3
 80131c4:	4618      	mov	r0, r3
 80131c6:	f7f8 fdb9 	bl	800bd3c <lwip_htons>
 80131ca:	4603      	mov	r3, r0
 80131cc:	b2db      	uxtb	r3, r3
 80131ce:	f003 0303 	and.w	r3, r3, #3
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d001      	beq.n	80131da <tcp_rexmit_rto_prepare+0xba>
 80131d6:	2301      	movs	r3, #1
 80131d8:	e000      	b.n	80131dc <tcp_rexmit_rto_prepare+0xbc>
 80131da:	2300      	movs	r3, #0
 80131dc:	442b      	add	r3, r5
 80131de:	18e2      	adds	r2, r4, r3
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	2200      	movs	r2, #0
 80131e8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80131ea:	2300      	movs	r3, #0
}
 80131ec:	4618      	mov	r0, r3
 80131ee:	3710      	adds	r7, #16
 80131f0:	46bd      	mov	sp, r7
 80131f2:	bdb0      	pop	{r4, r5, r7, pc}
 80131f4:	0801a474 	.word	0x0801a474
 80131f8:	0801aab0 	.word	0x0801aab0
 80131fc:	0801a4c8 	.word	0x0801a4c8

08013200 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013200:	b580      	push	{r7, lr}
 8013202:	b082      	sub	sp, #8
 8013204:	af00      	add	r7, sp, #0
 8013206:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	2b00      	cmp	r3, #0
 801320c:	d106      	bne.n	801321c <tcp_rexmit_rto_commit+0x1c>
 801320e:	4b0d      	ldr	r3, [pc, #52]	; (8013244 <tcp_rexmit_rto_commit+0x44>)
 8013210:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013214:	490c      	ldr	r1, [pc, #48]	; (8013248 <tcp_rexmit_rto_commit+0x48>)
 8013216:	480d      	ldr	r0, [pc, #52]	; (801324c <tcp_rexmit_rto_commit+0x4c>)
 8013218:	f003 fa30 	bl	801667c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013222:	2bff      	cmp	r3, #255	; 0xff
 8013224:	d007      	beq.n	8013236 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801322c:	3301      	adds	r3, #1
 801322e:	b2da      	uxtb	r2, r3
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8013236:	6878      	ldr	r0, [r7, #4]
 8013238:	f7ff fc80 	bl	8012b3c <tcp_output>
}
 801323c:	bf00      	nop
 801323e:	3708      	adds	r7, #8
 8013240:	46bd      	mov	sp, r7
 8013242:	bd80      	pop	{r7, pc}
 8013244:	0801a474 	.word	0x0801a474
 8013248:	0801aad4 	.word	0x0801aad4
 801324c:	0801a4c8 	.word	0x0801a4c8

08013250 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8013250:	b580      	push	{r7, lr}
 8013252:	b082      	sub	sp, #8
 8013254:	af00      	add	r7, sp, #0
 8013256:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	2b00      	cmp	r3, #0
 801325c:	d106      	bne.n	801326c <tcp_rexmit_rto+0x1c>
 801325e:	4b0a      	ldr	r3, [pc, #40]	; (8013288 <tcp_rexmit_rto+0x38>)
 8013260:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8013264:	4909      	ldr	r1, [pc, #36]	; (801328c <tcp_rexmit_rto+0x3c>)
 8013266:	480a      	ldr	r0, [pc, #40]	; (8013290 <tcp_rexmit_rto+0x40>)
 8013268:	f003 fa08 	bl	801667c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801326c:	6878      	ldr	r0, [r7, #4]
 801326e:	f7ff ff57 	bl	8013120 <tcp_rexmit_rto_prepare>
 8013272:	4603      	mov	r3, r0
 8013274:	2b00      	cmp	r3, #0
 8013276:	d102      	bne.n	801327e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8013278:	6878      	ldr	r0, [r7, #4]
 801327a:	f7ff ffc1 	bl	8013200 <tcp_rexmit_rto_commit>
  }
}
 801327e:	bf00      	nop
 8013280:	3708      	adds	r7, #8
 8013282:	46bd      	mov	sp, r7
 8013284:	bd80      	pop	{r7, pc}
 8013286:	bf00      	nop
 8013288:	0801a474 	.word	0x0801a474
 801328c:	0801aaf8 	.word	0x0801aaf8
 8013290:	0801a4c8 	.word	0x0801a4c8

08013294 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013294:	b590      	push	{r4, r7, lr}
 8013296:	b085      	sub	sp, #20
 8013298:	af00      	add	r7, sp, #0
 801329a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d106      	bne.n	80132b0 <tcp_rexmit+0x1c>
 80132a2:	4b2f      	ldr	r3, [pc, #188]	; (8013360 <tcp_rexmit+0xcc>)
 80132a4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80132a8:	492e      	ldr	r1, [pc, #184]	; (8013364 <tcp_rexmit+0xd0>)
 80132aa:	482f      	ldr	r0, [pc, #188]	; (8013368 <tcp_rexmit+0xd4>)
 80132ac:	f003 f9e6 	bl	801667c <iprintf>

  if (pcb->unacked == NULL) {
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d102      	bne.n	80132be <tcp_rexmit+0x2a>
    return ERR_VAL;
 80132b8:	f06f 0305 	mvn.w	r3, #5
 80132bc:	e04c      	b.n	8013358 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80132c2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80132c4:	68b8      	ldr	r0, [r7, #8]
 80132c6:	f7ff fe2d 	bl	8012f24 <tcp_output_segment_busy>
 80132ca:	4603      	mov	r3, r0
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d002      	beq.n	80132d6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80132d0:	f06f 0305 	mvn.w	r3, #5
 80132d4:	e040      	b.n	8013358 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80132d6:	68bb      	ldr	r3, [r7, #8]
 80132d8:	681a      	ldr	r2, [r3, #0]
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	336c      	adds	r3, #108	; 0x6c
 80132e2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80132e4:	e002      	b.n	80132ec <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	681b      	ldr	r3, [r3, #0]
 80132ea:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d011      	beq.n	8013318 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	68db      	ldr	r3, [r3, #12]
 80132fa:	685b      	ldr	r3, [r3, #4]
 80132fc:	4618      	mov	r0, r3
 80132fe:	f7f8 fd32 	bl	800bd66 <lwip_htonl>
 8013302:	4604      	mov	r4, r0
 8013304:	68bb      	ldr	r3, [r7, #8]
 8013306:	68db      	ldr	r3, [r3, #12]
 8013308:	685b      	ldr	r3, [r3, #4]
 801330a:	4618      	mov	r0, r3
 801330c:	f7f8 fd2b 	bl	800bd66 <lwip_htonl>
 8013310:	4603      	mov	r3, r0
 8013312:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013314:	2b00      	cmp	r3, #0
 8013316:	dbe6      	blt.n	80132e6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	681a      	ldr	r2, [r3, #0]
 801331c:	68bb      	ldr	r3, [r7, #8]
 801331e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	68ba      	ldr	r2, [r7, #8]
 8013324:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8013326:	68bb      	ldr	r3, [r7, #8]
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d103      	bne.n	8013336 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	2200      	movs	r2, #0
 8013332:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801333c:	2bff      	cmp	r3, #255	; 0xff
 801333e:	d007      	beq.n	8013350 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013346:	3301      	adds	r3, #1
 8013348:	b2da      	uxtb	r2, r3
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	2200      	movs	r2, #0
 8013354:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013356:	2300      	movs	r3, #0
}
 8013358:	4618      	mov	r0, r3
 801335a:	3714      	adds	r7, #20
 801335c:	46bd      	mov	sp, r7
 801335e:	bd90      	pop	{r4, r7, pc}
 8013360:	0801a474 	.word	0x0801a474
 8013364:	0801ab14 	.word	0x0801ab14
 8013368:	0801a4c8 	.word	0x0801a4c8

0801336c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801336c:	b580      	push	{r7, lr}
 801336e:	b082      	sub	sp, #8
 8013370:	af00      	add	r7, sp, #0
 8013372:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	2b00      	cmp	r3, #0
 8013378:	d106      	bne.n	8013388 <tcp_rexmit_fast+0x1c>
 801337a:	4b2a      	ldr	r3, [pc, #168]	; (8013424 <tcp_rexmit_fast+0xb8>)
 801337c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8013380:	4929      	ldr	r1, [pc, #164]	; (8013428 <tcp_rexmit_fast+0xbc>)
 8013382:	482a      	ldr	r0, [pc, #168]	; (801342c <tcp_rexmit_fast+0xc0>)
 8013384:	f003 f97a 	bl	801667c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801338c:	2b00      	cmp	r3, #0
 801338e:	d044      	beq.n	801341a <tcp_rexmit_fast+0xae>
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	8b5b      	ldrh	r3, [r3, #26]
 8013394:	f003 0304 	and.w	r3, r3, #4
 8013398:	2b00      	cmp	r3, #0
 801339a:	d13e      	bne.n	801341a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801339c:	6878      	ldr	r0, [r7, #4]
 801339e:	f7ff ff79 	bl	8013294 <tcp_rexmit>
 80133a2:	4603      	mov	r3, r0
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d138      	bne.n	801341a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80133b4:	4293      	cmp	r3, r2
 80133b6:	bf28      	it	cs
 80133b8:	4613      	movcs	r3, r2
 80133ba:	b29b      	uxth	r3, r3
 80133bc:	0fda      	lsrs	r2, r3, #31
 80133be:	4413      	add	r3, r2
 80133c0:	105b      	asrs	r3, r3, #1
 80133c2:	b29a      	uxth	r2, r3
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80133d0:	461a      	mov	r2, r3
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80133d6:	005b      	lsls	r3, r3, #1
 80133d8:	429a      	cmp	r2, r3
 80133da:	d206      	bcs.n	80133ea <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80133e0:	005b      	lsls	r3, r3, #1
 80133e2:	b29a      	uxth	r2, r3
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80133f4:	4619      	mov	r1, r3
 80133f6:	0049      	lsls	r1, r1, #1
 80133f8:	440b      	add	r3, r1
 80133fa:	b29b      	uxth	r3, r3
 80133fc:	4413      	add	r3, r2
 80133fe:	b29a      	uxth	r2, r3
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	8b5b      	ldrh	r3, [r3, #26]
 801340a:	f043 0304 	orr.w	r3, r3, #4
 801340e:	b29a      	uxth	r2, r3
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	2200      	movs	r2, #0
 8013418:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801341a:	bf00      	nop
 801341c:	3708      	adds	r7, #8
 801341e:	46bd      	mov	sp, r7
 8013420:	bd80      	pop	{r7, pc}
 8013422:	bf00      	nop
 8013424:	0801a474 	.word	0x0801a474
 8013428:	0801ab2c 	.word	0x0801ab2c
 801342c:	0801a4c8 	.word	0x0801a4c8

08013430 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013430:	b580      	push	{r7, lr}
 8013432:	b086      	sub	sp, #24
 8013434:	af00      	add	r7, sp, #0
 8013436:	60f8      	str	r0, [r7, #12]
 8013438:	607b      	str	r3, [r7, #4]
 801343a:	460b      	mov	r3, r1
 801343c:	817b      	strh	r3, [r7, #10]
 801343e:	4613      	mov	r3, r2
 8013440:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013442:	897a      	ldrh	r2, [r7, #10]
 8013444:	893b      	ldrh	r3, [r7, #8]
 8013446:	4413      	add	r3, r2
 8013448:	b29b      	uxth	r3, r3
 801344a:	3314      	adds	r3, #20
 801344c:	b29b      	uxth	r3, r3
 801344e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013452:	4619      	mov	r1, r3
 8013454:	2022      	movs	r0, #34	; 0x22
 8013456:	f7f9 fd1f 	bl	800ce98 <pbuf_alloc>
 801345a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801345c:	697b      	ldr	r3, [r7, #20]
 801345e:	2b00      	cmp	r3, #0
 8013460:	d04d      	beq.n	80134fe <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013462:	897b      	ldrh	r3, [r7, #10]
 8013464:	3313      	adds	r3, #19
 8013466:	697a      	ldr	r2, [r7, #20]
 8013468:	8952      	ldrh	r2, [r2, #10]
 801346a:	4293      	cmp	r3, r2
 801346c:	db06      	blt.n	801347c <tcp_output_alloc_header_common+0x4c>
 801346e:	4b26      	ldr	r3, [pc, #152]	; (8013508 <tcp_output_alloc_header_common+0xd8>)
 8013470:	f240 7223 	movw	r2, #1827	; 0x723
 8013474:	4925      	ldr	r1, [pc, #148]	; (801350c <tcp_output_alloc_header_common+0xdc>)
 8013476:	4826      	ldr	r0, [pc, #152]	; (8013510 <tcp_output_alloc_header_common+0xe0>)
 8013478:	f003 f900 	bl	801667c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801347c:	697b      	ldr	r3, [r7, #20]
 801347e:	685b      	ldr	r3, [r3, #4]
 8013480:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013482:	8c3b      	ldrh	r3, [r7, #32]
 8013484:	4618      	mov	r0, r3
 8013486:	f7f8 fc59 	bl	800bd3c <lwip_htons>
 801348a:	4603      	mov	r3, r0
 801348c:	461a      	mov	r2, r3
 801348e:	693b      	ldr	r3, [r7, #16]
 8013490:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013492:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013494:	4618      	mov	r0, r3
 8013496:	f7f8 fc51 	bl	800bd3c <lwip_htons>
 801349a:	4603      	mov	r3, r0
 801349c:	461a      	mov	r2, r3
 801349e:	693b      	ldr	r3, [r7, #16]
 80134a0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80134a2:	693b      	ldr	r3, [r7, #16]
 80134a4:	687a      	ldr	r2, [r7, #4]
 80134a6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80134a8:	68f8      	ldr	r0, [r7, #12]
 80134aa:	f7f8 fc5c 	bl	800bd66 <lwip_htonl>
 80134ae:	4602      	mov	r2, r0
 80134b0:	693b      	ldr	r3, [r7, #16]
 80134b2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80134b4:	897b      	ldrh	r3, [r7, #10]
 80134b6:	089b      	lsrs	r3, r3, #2
 80134b8:	b29b      	uxth	r3, r3
 80134ba:	3305      	adds	r3, #5
 80134bc:	b29b      	uxth	r3, r3
 80134be:	031b      	lsls	r3, r3, #12
 80134c0:	b29a      	uxth	r2, r3
 80134c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80134c6:	b29b      	uxth	r3, r3
 80134c8:	4313      	orrs	r3, r2
 80134ca:	b29b      	uxth	r3, r3
 80134cc:	4618      	mov	r0, r3
 80134ce:	f7f8 fc35 	bl	800bd3c <lwip_htons>
 80134d2:	4603      	mov	r3, r0
 80134d4:	461a      	mov	r2, r3
 80134d6:	693b      	ldr	r3, [r7, #16]
 80134d8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80134da:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80134dc:	4618      	mov	r0, r3
 80134de:	f7f8 fc2d 	bl	800bd3c <lwip_htons>
 80134e2:	4603      	mov	r3, r0
 80134e4:	461a      	mov	r2, r3
 80134e6:	693b      	ldr	r3, [r7, #16]
 80134e8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80134ea:	693b      	ldr	r3, [r7, #16]
 80134ec:	2200      	movs	r2, #0
 80134ee:	741a      	strb	r2, [r3, #16]
 80134f0:	2200      	movs	r2, #0
 80134f2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80134f4:	693b      	ldr	r3, [r7, #16]
 80134f6:	2200      	movs	r2, #0
 80134f8:	749a      	strb	r2, [r3, #18]
 80134fa:	2200      	movs	r2, #0
 80134fc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80134fe:	697b      	ldr	r3, [r7, #20]
}
 8013500:	4618      	mov	r0, r3
 8013502:	3718      	adds	r7, #24
 8013504:	46bd      	mov	sp, r7
 8013506:	bd80      	pop	{r7, pc}
 8013508:	0801a474 	.word	0x0801a474
 801350c:	0801ab4c 	.word	0x0801ab4c
 8013510:	0801a4c8 	.word	0x0801a4c8

08013514 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013514:	b5b0      	push	{r4, r5, r7, lr}
 8013516:	b08a      	sub	sp, #40	; 0x28
 8013518:	af04      	add	r7, sp, #16
 801351a:	60f8      	str	r0, [r7, #12]
 801351c:	607b      	str	r3, [r7, #4]
 801351e:	460b      	mov	r3, r1
 8013520:	817b      	strh	r3, [r7, #10]
 8013522:	4613      	mov	r3, r2
 8013524:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	2b00      	cmp	r3, #0
 801352a:	d106      	bne.n	801353a <tcp_output_alloc_header+0x26>
 801352c:	4b15      	ldr	r3, [pc, #84]	; (8013584 <tcp_output_alloc_header+0x70>)
 801352e:	f240 7242 	movw	r2, #1858	; 0x742
 8013532:	4915      	ldr	r1, [pc, #84]	; (8013588 <tcp_output_alloc_header+0x74>)
 8013534:	4815      	ldr	r0, [pc, #84]	; (801358c <tcp_output_alloc_header+0x78>)
 8013536:	f003 f8a1 	bl	801667c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	8adb      	ldrh	r3, [r3, #22]
 8013542:	68fa      	ldr	r2, [r7, #12]
 8013544:	8b12      	ldrh	r2, [r2, #24]
 8013546:	68f9      	ldr	r1, [r7, #12]
 8013548:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801354a:	893d      	ldrh	r5, [r7, #8]
 801354c:	897c      	ldrh	r4, [r7, #10]
 801354e:	9103      	str	r1, [sp, #12]
 8013550:	2110      	movs	r1, #16
 8013552:	9102      	str	r1, [sp, #8]
 8013554:	9201      	str	r2, [sp, #4]
 8013556:	9300      	str	r3, [sp, #0]
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	462a      	mov	r2, r5
 801355c:	4621      	mov	r1, r4
 801355e:	f7ff ff67 	bl	8013430 <tcp_output_alloc_header_common>
 8013562:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013564:	697b      	ldr	r3, [r7, #20]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d006      	beq.n	8013578 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801356e:	68fa      	ldr	r2, [r7, #12]
 8013570:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013572:	441a      	add	r2, r3
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8013578:	697b      	ldr	r3, [r7, #20]
}
 801357a:	4618      	mov	r0, r3
 801357c:	3718      	adds	r7, #24
 801357e:	46bd      	mov	sp, r7
 8013580:	bdb0      	pop	{r4, r5, r7, pc}
 8013582:	bf00      	nop
 8013584:	0801a474 	.word	0x0801a474
 8013588:	0801ab7c 	.word	0x0801ab7c
 801358c:	0801a4c8 	.word	0x0801a4c8

08013590 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013590:	b580      	push	{r7, lr}
 8013592:	b088      	sub	sp, #32
 8013594:	af00      	add	r7, sp, #0
 8013596:	60f8      	str	r0, [r7, #12]
 8013598:	60b9      	str	r1, [r7, #8]
 801359a:	4611      	mov	r1, r2
 801359c:	461a      	mov	r2, r3
 801359e:	460b      	mov	r3, r1
 80135a0:	71fb      	strb	r3, [r7, #7]
 80135a2:	4613      	mov	r3, r2
 80135a4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80135a6:	2300      	movs	r3, #0
 80135a8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80135aa:	68bb      	ldr	r3, [r7, #8]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d106      	bne.n	80135be <tcp_output_fill_options+0x2e>
 80135b0:	4b13      	ldr	r3, [pc, #76]	; (8013600 <tcp_output_fill_options+0x70>)
 80135b2:	f240 7256 	movw	r2, #1878	; 0x756
 80135b6:	4913      	ldr	r1, [pc, #76]	; (8013604 <tcp_output_fill_options+0x74>)
 80135b8:	4813      	ldr	r0, [pc, #76]	; (8013608 <tcp_output_fill_options+0x78>)
 80135ba:	f003 f85f 	bl	801667c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80135be:	68bb      	ldr	r3, [r7, #8]
 80135c0:	685b      	ldr	r3, [r3, #4]
 80135c2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80135c4:	69bb      	ldr	r3, [r7, #24]
 80135c6:	3314      	adds	r3, #20
 80135c8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80135ca:	69bb      	ldr	r3, [r7, #24]
 80135cc:	f103 0214 	add.w	r2, r3, #20
 80135d0:	8bfb      	ldrh	r3, [r7, #30]
 80135d2:	009b      	lsls	r3, r3, #2
 80135d4:	4619      	mov	r1, r3
 80135d6:	79fb      	ldrb	r3, [r7, #7]
 80135d8:	009b      	lsls	r3, r3, #2
 80135da:	f003 0304 	and.w	r3, r3, #4
 80135de:	440b      	add	r3, r1
 80135e0:	4413      	add	r3, r2
 80135e2:	697a      	ldr	r2, [r7, #20]
 80135e4:	429a      	cmp	r2, r3
 80135e6:	d006      	beq.n	80135f6 <tcp_output_fill_options+0x66>
 80135e8:	4b05      	ldr	r3, [pc, #20]	; (8013600 <tcp_output_fill_options+0x70>)
 80135ea:	f240 7275 	movw	r2, #1909	; 0x775
 80135ee:	4907      	ldr	r1, [pc, #28]	; (801360c <tcp_output_fill_options+0x7c>)
 80135f0:	4805      	ldr	r0, [pc, #20]	; (8013608 <tcp_output_fill_options+0x78>)
 80135f2:	f003 f843 	bl	801667c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80135f6:	bf00      	nop
 80135f8:	3720      	adds	r7, #32
 80135fa:	46bd      	mov	sp, r7
 80135fc:	bd80      	pop	{r7, pc}
 80135fe:	bf00      	nop
 8013600:	0801a474 	.word	0x0801a474
 8013604:	0801aba4 	.word	0x0801aba4
 8013608:	0801a4c8 	.word	0x0801a4c8
 801360c:	0801aa9c 	.word	0x0801aa9c

08013610 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8013610:	b580      	push	{r7, lr}
 8013612:	b08a      	sub	sp, #40	; 0x28
 8013614:	af04      	add	r7, sp, #16
 8013616:	60f8      	str	r0, [r7, #12]
 8013618:	60b9      	str	r1, [r7, #8]
 801361a:	607a      	str	r2, [r7, #4]
 801361c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801361e:	68bb      	ldr	r3, [r7, #8]
 8013620:	2b00      	cmp	r3, #0
 8013622:	d106      	bne.n	8013632 <tcp_output_control_segment+0x22>
 8013624:	4b1c      	ldr	r3, [pc, #112]	; (8013698 <tcp_output_control_segment+0x88>)
 8013626:	f240 7287 	movw	r2, #1927	; 0x787
 801362a:	491c      	ldr	r1, [pc, #112]	; (801369c <tcp_output_control_segment+0x8c>)
 801362c:	481c      	ldr	r0, [pc, #112]	; (80136a0 <tcp_output_control_segment+0x90>)
 801362e:	f003 f825 	bl	801667c <iprintf>

  netif = tcp_route(pcb, src, dst);
 8013632:	683a      	ldr	r2, [r7, #0]
 8013634:	6879      	ldr	r1, [r7, #4]
 8013636:	68f8      	ldr	r0, [r7, #12]
 8013638:	f7fe fae8 	bl	8011c0c <tcp_route>
 801363c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801363e:	693b      	ldr	r3, [r7, #16]
 8013640:	2b00      	cmp	r3, #0
 8013642:	d102      	bne.n	801364a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013644:	23fc      	movs	r3, #252	; 0xfc
 8013646:	75fb      	strb	r3, [r7, #23]
 8013648:	e01c      	b.n	8013684 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	2b00      	cmp	r3, #0
 801364e:	d006      	beq.n	801365e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	7adb      	ldrb	r3, [r3, #11]
 8013654:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	7a9b      	ldrb	r3, [r3, #10]
 801365a:	757b      	strb	r3, [r7, #21]
 801365c:	e003      	b.n	8013666 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801365e:	23ff      	movs	r3, #255	; 0xff
 8013660:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8013662:	2300      	movs	r3, #0
 8013664:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8013666:	7dba      	ldrb	r2, [r7, #22]
 8013668:	693b      	ldr	r3, [r7, #16]
 801366a:	9302      	str	r3, [sp, #8]
 801366c:	2306      	movs	r3, #6
 801366e:	9301      	str	r3, [sp, #4]
 8013670:	7d7b      	ldrb	r3, [r7, #21]
 8013672:	9300      	str	r3, [sp, #0]
 8013674:	4613      	mov	r3, r2
 8013676:	683a      	ldr	r2, [r7, #0]
 8013678:	6879      	ldr	r1, [r7, #4]
 801367a:	68b8      	ldr	r0, [r7, #8]
 801367c:	f001 ff70 	bl	8015560 <ip4_output_if>
 8013680:	4603      	mov	r3, r0
 8013682:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013684:	68b8      	ldr	r0, [r7, #8]
 8013686:	f7f9 feeb 	bl	800d460 <pbuf_free>
  return err;
 801368a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801368e:	4618      	mov	r0, r3
 8013690:	3718      	adds	r7, #24
 8013692:	46bd      	mov	sp, r7
 8013694:	bd80      	pop	{r7, pc}
 8013696:	bf00      	nop
 8013698:	0801a474 	.word	0x0801a474
 801369c:	0801abcc 	.word	0x0801abcc
 80136a0:	0801a4c8 	.word	0x0801a4c8

080136a4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80136a4:	b590      	push	{r4, r7, lr}
 80136a6:	b08b      	sub	sp, #44	; 0x2c
 80136a8:	af04      	add	r7, sp, #16
 80136aa:	60f8      	str	r0, [r7, #12]
 80136ac:	60b9      	str	r1, [r7, #8]
 80136ae:	607a      	str	r2, [r7, #4]
 80136b0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80136b2:	683b      	ldr	r3, [r7, #0]
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d106      	bne.n	80136c6 <tcp_rst+0x22>
 80136b8:	4b1f      	ldr	r3, [pc, #124]	; (8013738 <tcp_rst+0x94>)
 80136ba:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80136be:	491f      	ldr	r1, [pc, #124]	; (801373c <tcp_rst+0x98>)
 80136c0:	481f      	ldr	r0, [pc, #124]	; (8013740 <tcp_rst+0x9c>)
 80136c2:	f002 ffdb 	bl	801667c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80136c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d106      	bne.n	80136da <tcp_rst+0x36>
 80136cc:	4b1a      	ldr	r3, [pc, #104]	; (8013738 <tcp_rst+0x94>)
 80136ce:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80136d2:	491c      	ldr	r1, [pc, #112]	; (8013744 <tcp_rst+0xa0>)
 80136d4:	481a      	ldr	r0, [pc, #104]	; (8013740 <tcp_rst+0x9c>)
 80136d6:	f002 ffd1 	bl	801667c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80136da:	2300      	movs	r3, #0
 80136dc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80136de:	f246 0308 	movw	r3, #24584	; 0x6008
 80136e2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80136e4:	7dfb      	ldrb	r3, [r7, #23]
 80136e6:	b29c      	uxth	r4, r3
 80136e8:	68b8      	ldr	r0, [r7, #8]
 80136ea:	f7f8 fb3c 	bl	800bd66 <lwip_htonl>
 80136ee:	4602      	mov	r2, r0
 80136f0:	8abb      	ldrh	r3, [r7, #20]
 80136f2:	9303      	str	r3, [sp, #12]
 80136f4:	2314      	movs	r3, #20
 80136f6:	9302      	str	r3, [sp, #8]
 80136f8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80136fa:	9301      	str	r3, [sp, #4]
 80136fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80136fe:	9300      	str	r3, [sp, #0]
 8013700:	4613      	mov	r3, r2
 8013702:	2200      	movs	r2, #0
 8013704:	4621      	mov	r1, r4
 8013706:	6878      	ldr	r0, [r7, #4]
 8013708:	f7ff fe92 	bl	8013430 <tcp_output_alloc_header_common>
 801370c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801370e:	693b      	ldr	r3, [r7, #16]
 8013710:	2b00      	cmp	r3, #0
 8013712:	d00c      	beq.n	801372e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013714:	7dfb      	ldrb	r3, [r7, #23]
 8013716:	2200      	movs	r2, #0
 8013718:	6939      	ldr	r1, [r7, #16]
 801371a:	68f8      	ldr	r0, [r7, #12]
 801371c:	f7ff ff38 	bl	8013590 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8013720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013722:	683a      	ldr	r2, [r7, #0]
 8013724:	6939      	ldr	r1, [r7, #16]
 8013726:	68f8      	ldr	r0, [r7, #12]
 8013728:	f7ff ff72 	bl	8013610 <tcp_output_control_segment>
 801372c:	e000      	b.n	8013730 <tcp_rst+0x8c>
    return;
 801372e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8013730:	371c      	adds	r7, #28
 8013732:	46bd      	mov	sp, r7
 8013734:	bd90      	pop	{r4, r7, pc}
 8013736:	bf00      	nop
 8013738:	0801a474 	.word	0x0801a474
 801373c:	0801abf8 	.word	0x0801abf8
 8013740:	0801a4c8 	.word	0x0801a4c8
 8013744:	0801ac14 	.word	0x0801ac14

08013748 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013748:	b590      	push	{r4, r7, lr}
 801374a:	b087      	sub	sp, #28
 801374c:	af00      	add	r7, sp, #0
 801374e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013750:	2300      	movs	r3, #0
 8013752:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013754:	2300      	movs	r3, #0
 8013756:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	2b00      	cmp	r3, #0
 801375c:	d106      	bne.n	801376c <tcp_send_empty_ack+0x24>
 801375e:	4b28      	ldr	r3, [pc, #160]	; (8013800 <tcp_send_empty_ack+0xb8>)
 8013760:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8013764:	4927      	ldr	r1, [pc, #156]	; (8013804 <tcp_send_empty_ack+0xbc>)
 8013766:	4828      	ldr	r0, [pc, #160]	; (8013808 <tcp_send_empty_ack+0xc0>)
 8013768:	f002 ff88 	bl	801667c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801376c:	7dfb      	ldrb	r3, [r7, #23]
 801376e:	009b      	lsls	r3, r3, #2
 8013770:	b2db      	uxtb	r3, r3
 8013772:	f003 0304 	and.w	r3, r3, #4
 8013776:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013778:	7d7b      	ldrb	r3, [r7, #21]
 801377a:	b29c      	uxth	r4, r3
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013780:	4618      	mov	r0, r3
 8013782:	f7f8 faf0 	bl	800bd66 <lwip_htonl>
 8013786:	4603      	mov	r3, r0
 8013788:	2200      	movs	r2, #0
 801378a:	4621      	mov	r1, r4
 801378c:	6878      	ldr	r0, [r7, #4]
 801378e:	f7ff fec1 	bl	8013514 <tcp_output_alloc_header>
 8013792:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013794:	693b      	ldr	r3, [r7, #16]
 8013796:	2b00      	cmp	r3, #0
 8013798:	d109      	bne.n	80137ae <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	8b5b      	ldrh	r3, [r3, #26]
 801379e:	f043 0303 	orr.w	r3, r3, #3
 80137a2:	b29a      	uxth	r2, r3
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80137a8:	f06f 0301 	mvn.w	r3, #1
 80137ac:	e023      	b.n	80137f6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80137ae:	7dbb      	ldrb	r3, [r7, #22]
 80137b0:	7dfa      	ldrb	r2, [r7, #23]
 80137b2:	6939      	ldr	r1, [r7, #16]
 80137b4:	6878      	ldr	r0, [r7, #4]
 80137b6:	f7ff feeb 	bl	8013590 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80137ba:	687a      	ldr	r2, [r7, #4]
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	3304      	adds	r3, #4
 80137c0:	6939      	ldr	r1, [r7, #16]
 80137c2:	6878      	ldr	r0, [r7, #4]
 80137c4:	f7ff ff24 	bl	8013610 <tcp_output_control_segment>
 80137c8:	4603      	mov	r3, r0
 80137ca:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80137cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d007      	beq.n	80137e4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	8b5b      	ldrh	r3, [r3, #26]
 80137d8:	f043 0303 	orr.w	r3, r3, #3
 80137dc:	b29a      	uxth	r2, r3
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	835a      	strh	r2, [r3, #26]
 80137e2:	e006      	b.n	80137f2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	8b5b      	ldrh	r3, [r3, #26]
 80137e8:	f023 0303 	bic.w	r3, r3, #3
 80137ec:	b29a      	uxth	r2, r3
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80137f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80137f6:	4618      	mov	r0, r3
 80137f8:	371c      	adds	r7, #28
 80137fa:	46bd      	mov	sp, r7
 80137fc:	bd90      	pop	{r4, r7, pc}
 80137fe:	bf00      	nop
 8013800:	0801a474 	.word	0x0801a474
 8013804:	0801ac30 	.word	0x0801ac30
 8013808:	0801a4c8 	.word	0x0801a4c8

0801380c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801380c:	b590      	push	{r4, r7, lr}
 801380e:	b087      	sub	sp, #28
 8013810:	af00      	add	r7, sp, #0
 8013812:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013814:	2300      	movs	r3, #0
 8013816:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	2b00      	cmp	r3, #0
 801381c:	d106      	bne.n	801382c <tcp_keepalive+0x20>
 801381e:	4b18      	ldr	r3, [pc, #96]	; (8013880 <tcp_keepalive+0x74>)
 8013820:	f640 0224 	movw	r2, #2084	; 0x824
 8013824:	4917      	ldr	r1, [pc, #92]	; (8013884 <tcp_keepalive+0x78>)
 8013826:	4818      	ldr	r0, [pc, #96]	; (8013888 <tcp_keepalive+0x7c>)
 8013828:	f002 ff28 	bl	801667c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801382c:	7dfb      	ldrb	r3, [r7, #23]
 801382e:	b29c      	uxth	r4, r3
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013834:	3b01      	subs	r3, #1
 8013836:	4618      	mov	r0, r3
 8013838:	f7f8 fa95 	bl	800bd66 <lwip_htonl>
 801383c:	4603      	mov	r3, r0
 801383e:	2200      	movs	r2, #0
 8013840:	4621      	mov	r1, r4
 8013842:	6878      	ldr	r0, [r7, #4]
 8013844:	f7ff fe66 	bl	8013514 <tcp_output_alloc_header>
 8013848:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801384a:	693b      	ldr	r3, [r7, #16]
 801384c:	2b00      	cmp	r3, #0
 801384e:	d102      	bne.n	8013856 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013850:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013854:	e010      	b.n	8013878 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013856:	7dfb      	ldrb	r3, [r7, #23]
 8013858:	2200      	movs	r2, #0
 801385a:	6939      	ldr	r1, [r7, #16]
 801385c:	6878      	ldr	r0, [r7, #4]
 801385e:	f7ff fe97 	bl	8013590 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013862:	687a      	ldr	r2, [r7, #4]
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	3304      	adds	r3, #4
 8013868:	6939      	ldr	r1, [r7, #16]
 801386a:	6878      	ldr	r0, [r7, #4]
 801386c:	f7ff fed0 	bl	8013610 <tcp_output_control_segment>
 8013870:	4603      	mov	r3, r0
 8013872:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013874:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013878:	4618      	mov	r0, r3
 801387a:	371c      	adds	r7, #28
 801387c:	46bd      	mov	sp, r7
 801387e:	bd90      	pop	{r4, r7, pc}
 8013880:	0801a474 	.word	0x0801a474
 8013884:	0801ac50 	.word	0x0801ac50
 8013888:	0801a4c8 	.word	0x0801a4c8

0801388c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801388c:	b590      	push	{r4, r7, lr}
 801388e:	b08b      	sub	sp, #44	; 0x2c
 8013890:	af00      	add	r7, sp, #0
 8013892:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013894:	2300      	movs	r3, #0
 8013896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	2b00      	cmp	r3, #0
 801389e:	d106      	bne.n	80138ae <tcp_zero_window_probe+0x22>
 80138a0:	4b4c      	ldr	r3, [pc, #304]	; (80139d4 <tcp_zero_window_probe+0x148>)
 80138a2:	f640 024f 	movw	r2, #2127	; 0x84f
 80138a6:	494c      	ldr	r1, [pc, #304]	; (80139d8 <tcp_zero_window_probe+0x14c>)
 80138a8:	484c      	ldr	r0, [pc, #304]	; (80139dc <tcp_zero_window_probe+0x150>)
 80138aa:	f002 fee7 	bl	801667c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80138b2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80138b4:	6a3b      	ldr	r3, [r7, #32]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d101      	bne.n	80138be <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80138ba:	2300      	movs	r3, #0
 80138bc:	e086      	b.n	80139cc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80138c4:	2bff      	cmp	r3, #255	; 0xff
 80138c6:	d007      	beq.n	80138d8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80138ce:	3301      	adds	r3, #1
 80138d0:	b2da      	uxtb	r2, r3
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80138d8:	6a3b      	ldr	r3, [r7, #32]
 80138da:	68db      	ldr	r3, [r3, #12]
 80138dc:	899b      	ldrh	r3, [r3, #12]
 80138de:	b29b      	uxth	r3, r3
 80138e0:	4618      	mov	r0, r3
 80138e2:	f7f8 fa2b 	bl	800bd3c <lwip_htons>
 80138e6:	4603      	mov	r3, r0
 80138e8:	b2db      	uxtb	r3, r3
 80138ea:	f003 0301 	and.w	r3, r3, #1
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d005      	beq.n	80138fe <tcp_zero_window_probe+0x72>
 80138f2:	6a3b      	ldr	r3, [r7, #32]
 80138f4:	891b      	ldrh	r3, [r3, #8]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d101      	bne.n	80138fe <tcp_zero_window_probe+0x72>
 80138fa:	2301      	movs	r3, #1
 80138fc:	e000      	b.n	8013900 <tcp_zero_window_probe+0x74>
 80138fe:	2300      	movs	r3, #0
 8013900:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8013902:	7ffb      	ldrb	r3, [r7, #31]
 8013904:	2b00      	cmp	r3, #0
 8013906:	bf0c      	ite	eq
 8013908:	2301      	moveq	r3, #1
 801390a:	2300      	movne	r3, #0
 801390c:	b2db      	uxtb	r3, r3
 801390e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8013910:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013914:	b299      	uxth	r1, r3
 8013916:	6a3b      	ldr	r3, [r7, #32]
 8013918:	68db      	ldr	r3, [r3, #12]
 801391a:	685b      	ldr	r3, [r3, #4]
 801391c:	8bba      	ldrh	r2, [r7, #28]
 801391e:	6878      	ldr	r0, [r7, #4]
 8013920:	f7ff fdf8 	bl	8013514 <tcp_output_alloc_header>
 8013924:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8013926:	69bb      	ldr	r3, [r7, #24]
 8013928:	2b00      	cmp	r3, #0
 801392a:	d102      	bne.n	8013932 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801392c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013930:	e04c      	b.n	80139cc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8013932:	69bb      	ldr	r3, [r7, #24]
 8013934:	685b      	ldr	r3, [r3, #4]
 8013936:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8013938:	7ffb      	ldrb	r3, [r7, #31]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d011      	beq.n	8013962 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801393e:	697b      	ldr	r3, [r7, #20]
 8013940:	899b      	ldrh	r3, [r3, #12]
 8013942:	b29b      	uxth	r3, r3
 8013944:	b21b      	sxth	r3, r3
 8013946:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801394a:	b21c      	sxth	r4, r3
 801394c:	2011      	movs	r0, #17
 801394e:	f7f8 f9f5 	bl	800bd3c <lwip_htons>
 8013952:	4603      	mov	r3, r0
 8013954:	b21b      	sxth	r3, r3
 8013956:	4323      	orrs	r3, r4
 8013958:	b21b      	sxth	r3, r3
 801395a:	b29a      	uxth	r2, r3
 801395c:	697b      	ldr	r3, [r7, #20]
 801395e:	819a      	strh	r2, [r3, #12]
 8013960:	e010      	b.n	8013984 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8013962:	69bb      	ldr	r3, [r7, #24]
 8013964:	685b      	ldr	r3, [r3, #4]
 8013966:	3314      	adds	r3, #20
 8013968:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801396a:	6a3b      	ldr	r3, [r7, #32]
 801396c:	6858      	ldr	r0, [r3, #4]
 801396e:	6a3b      	ldr	r3, [r7, #32]
 8013970:	685b      	ldr	r3, [r3, #4]
 8013972:	891a      	ldrh	r2, [r3, #8]
 8013974:	6a3b      	ldr	r3, [r7, #32]
 8013976:	891b      	ldrh	r3, [r3, #8]
 8013978:	1ad3      	subs	r3, r2, r3
 801397a:	b29b      	uxth	r3, r3
 801397c:	2201      	movs	r2, #1
 801397e:	6939      	ldr	r1, [r7, #16]
 8013980:	f7f9 ff58 	bl	800d834 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013984:	6a3b      	ldr	r3, [r7, #32]
 8013986:	68db      	ldr	r3, [r3, #12]
 8013988:	685b      	ldr	r3, [r3, #4]
 801398a:	4618      	mov	r0, r3
 801398c:	f7f8 f9eb 	bl	800bd66 <lwip_htonl>
 8013990:	4603      	mov	r3, r0
 8013992:	3301      	adds	r3, #1
 8013994:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	1ad3      	subs	r3, r2, r3
 801399e:	2b00      	cmp	r3, #0
 80139a0:	da02      	bge.n	80139a8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	68fa      	ldr	r2, [r7, #12]
 80139a6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80139a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80139ac:	2200      	movs	r2, #0
 80139ae:	69b9      	ldr	r1, [r7, #24]
 80139b0:	6878      	ldr	r0, [r7, #4]
 80139b2:	f7ff fded 	bl	8013590 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80139b6:	687a      	ldr	r2, [r7, #4]
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	3304      	adds	r3, #4
 80139bc:	69b9      	ldr	r1, [r7, #24]
 80139be:	6878      	ldr	r0, [r7, #4]
 80139c0:	f7ff fe26 	bl	8013610 <tcp_output_control_segment>
 80139c4:	4603      	mov	r3, r0
 80139c6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80139c8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80139cc:	4618      	mov	r0, r3
 80139ce:	372c      	adds	r7, #44	; 0x2c
 80139d0:	46bd      	mov	sp, r7
 80139d2:	bd90      	pop	{r4, r7, pc}
 80139d4:	0801a474 	.word	0x0801a474
 80139d8:	0801ac6c 	.word	0x0801ac6c
 80139dc:	0801a4c8 	.word	0x0801a4c8

080139e0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80139e0:	b580      	push	{r7, lr}
 80139e2:	b082      	sub	sp, #8
 80139e4:	af00      	add	r7, sp, #0
 80139e6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80139e8:	f7fa f812 	bl	800da10 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80139ec:	4b0a      	ldr	r3, [pc, #40]	; (8013a18 <tcpip_tcp_timer+0x38>)
 80139ee:	681b      	ldr	r3, [r3, #0]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d103      	bne.n	80139fc <tcpip_tcp_timer+0x1c>
 80139f4:	4b09      	ldr	r3, [pc, #36]	; (8013a1c <tcpip_tcp_timer+0x3c>)
 80139f6:	681b      	ldr	r3, [r3, #0]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d005      	beq.n	8013a08 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80139fc:	2200      	movs	r2, #0
 80139fe:	4908      	ldr	r1, [pc, #32]	; (8013a20 <tcpip_tcp_timer+0x40>)
 8013a00:	20fa      	movs	r0, #250	; 0xfa
 8013a02:	f000 f8f3 	bl	8013bec <sys_timeout>
 8013a06:	e003      	b.n	8013a10 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013a08:	4b06      	ldr	r3, [pc, #24]	; (8013a24 <tcpip_tcp_timer+0x44>)
 8013a0a:	2200      	movs	r2, #0
 8013a0c:	601a      	str	r2, [r3, #0]
  }
}
 8013a0e:	bf00      	nop
 8013a10:	bf00      	nop
 8013a12:	3708      	adds	r7, #8
 8013a14:	46bd      	mov	sp, r7
 8013a16:	bd80      	pop	{r7, pc}
 8013a18:	200179f8 	.word	0x200179f8
 8013a1c:	20017a08 	.word	0x20017a08
 8013a20:	080139e1 	.word	0x080139e1
 8013a24:	200015c4 	.word	0x200015c4

08013a28 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8013a28:	b580      	push	{r7, lr}
 8013a2a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013a2c:	4b0a      	ldr	r3, [pc, #40]	; (8013a58 <tcp_timer_needed+0x30>)
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d10f      	bne.n	8013a54 <tcp_timer_needed+0x2c>
 8013a34:	4b09      	ldr	r3, [pc, #36]	; (8013a5c <tcp_timer_needed+0x34>)
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d103      	bne.n	8013a44 <tcp_timer_needed+0x1c>
 8013a3c:	4b08      	ldr	r3, [pc, #32]	; (8013a60 <tcp_timer_needed+0x38>)
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d007      	beq.n	8013a54 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013a44:	4b04      	ldr	r3, [pc, #16]	; (8013a58 <tcp_timer_needed+0x30>)
 8013a46:	2201      	movs	r2, #1
 8013a48:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013a4a:	2200      	movs	r2, #0
 8013a4c:	4905      	ldr	r1, [pc, #20]	; (8013a64 <tcp_timer_needed+0x3c>)
 8013a4e:	20fa      	movs	r0, #250	; 0xfa
 8013a50:	f000 f8cc 	bl	8013bec <sys_timeout>
  }
}
 8013a54:	bf00      	nop
 8013a56:	bd80      	pop	{r7, pc}
 8013a58:	200015c4 	.word	0x200015c4
 8013a5c:	200179f8 	.word	0x200179f8
 8013a60:	20017a08 	.word	0x20017a08
 8013a64:	080139e1 	.word	0x080139e1

08013a68 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013a68:	b580      	push	{r7, lr}
 8013a6a:	b086      	sub	sp, #24
 8013a6c:	af00      	add	r7, sp, #0
 8013a6e:	60f8      	str	r0, [r7, #12]
 8013a70:	60b9      	str	r1, [r7, #8]
 8013a72:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013a74:	2006      	movs	r0, #6
 8013a76:	f7f8 fe95 	bl	800c7a4 <memp_malloc>
 8013a7a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013a7c:	693b      	ldr	r3, [r7, #16]
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d109      	bne.n	8013a96 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013a82:	693b      	ldr	r3, [r7, #16]
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d151      	bne.n	8013b2c <sys_timeout_abs+0xc4>
 8013a88:	4b2a      	ldr	r3, [pc, #168]	; (8013b34 <sys_timeout_abs+0xcc>)
 8013a8a:	22be      	movs	r2, #190	; 0xbe
 8013a8c:	492a      	ldr	r1, [pc, #168]	; (8013b38 <sys_timeout_abs+0xd0>)
 8013a8e:	482b      	ldr	r0, [pc, #172]	; (8013b3c <sys_timeout_abs+0xd4>)
 8013a90:	f002 fdf4 	bl	801667c <iprintf>
    return;
 8013a94:	e04a      	b.n	8013b2c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013a96:	693b      	ldr	r3, [r7, #16]
 8013a98:	2200      	movs	r2, #0
 8013a9a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013a9c:	693b      	ldr	r3, [r7, #16]
 8013a9e:	68ba      	ldr	r2, [r7, #8]
 8013aa0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013aa2:	693b      	ldr	r3, [r7, #16]
 8013aa4:	687a      	ldr	r2, [r7, #4]
 8013aa6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013aa8:	693b      	ldr	r3, [r7, #16]
 8013aaa:	68fa      	ldr	r2, [r7, #12]
 8013aac:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8013aae:	4b24      	ldr	r3, [pc, #144]	; (8013b40 <sys_timeout_abs+0xd8>)
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d103      	bne.n	8013abe <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013ab6:	4a22      	ldr	r2, [pc, #136]	; (8013b40 <sys_timeout_abs+0xd8>)
 8013ab8:	693b      	ldr	r3, [r7, #16]
 8013aba:	6013      	str	r3, [r2, #0]
    return;
 8013abc:	e037      	b.n	8013b2e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8013abe:	693b      	ldr	r3, [r7, #16]
 8013ac0:	685a      	ldr	r2, [r3, #4]
 8013ac2:	4b1f      	ldr	r3, [pc, #124]	; (8013b40 <sys_timeout_abs+0xd8>)
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	685b      	ldr	r3, [r3, #4]
 8013ac8:	1ad3      	subs	r3, r2, r3
 8013aca:	0fdb      	lsrs	r3, r3, #31
 8013acc:	f003 0301 	and.w	r3, r3, #1
 8013ad0:	b2db      	uxtb	r3, r3
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d007      	beq.n	8013ae6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013ad6:	4b1a      	ldr	r3, [pc, #104]	; (8013b40 <sys_timeout_abs+0xd8>)
 8013ad8:	681a      	ldr	r2, [r3, #0]
 8013ada:	693b      	ldr	r3, [r7, #16]
 8013adc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013ade:	4a18      	ldr	r2, [pc, #96]	; (8013b40 <sys_timeout_abs+0xd8>)
 8013ae0:	693b      	ldr	r3, [r7, #16]
 8013ae2:	6013      	str	r3, [r2, #0]
 8013ae4:	e023      	b.n	8013b2e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013ae6:	4b16      	ldr	r3, [pc, #88]	; (8013b40 <sys_timeout_abs+0xd8>)
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	617b      	str	r3, [r7, #20]
 8013aec:	e01a      	b.n	8013b24 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8013aee:	697b      	ldr	r3, [r7, #20]
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d00b      	beq.n	8013b0e <sys_timeout_abs+0xa6>
 8013af6:	693b      	ldr	r3, [r7, #16]
 8013af8:	685a      	ldr	r2, [r3, #4]
 8013afa:	697b      	ldr	r3, [r7, #20]
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	685b      	ldr	r3, [r3, #4]
 8013b00:	1ad3      	subs	r3, r2, r3
 8013b02:	0fdb      	lsrs	r3, r3, #31
 8013b04:	f003 0301 	and.w	r3, r3, #1
 8013b08:	b2db      	uxtb	r3, r3
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d007      	beq.n	8013b1e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8013b0e:	697b      	ldr	r3, [r7, #20]
 8013b10:	681a      	ldr	r2, [r3, #0]
 8013b12:	693b      	ldr	r3, [r7, #16]
 8013b14:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013b16:	697b      	ldr	r3, [r7, #20]
 8013b18:	693a      	ldr	r2, [r7, #16]
 8013b1a:	601a      	str	r2, [r3, #0]
        break;
 8013b1c:	e007      	b.n	8013b2e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013b1e:	697b      	ldr	r3, [r7, #20]
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	617b      	str	r3, [r7, #20]
 8013b24:	697b      	ldr	r3, [r7, #20]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d1e1      	bne.n	8013aee <sys_timeout_abs+0x86>
 8013b2a:	e000      	b.n	8013b2e <sys_timeout_abs+0xc6>
    return;
 8013b2c:	bf00      	nop
      }
    }
  }
}
 8013b2e:	3718      	adds	r7, #24
 8013b30:	46bd      	mov	sp, r7
 8013b32:	bd80      	pop	{r7, pc}
 8013b34:	0801ac90 	.word	0x0801ac90
 8013b38:	0801acc4 	.word	0x0801acc4
 8013b3c:	0801ad04 	.word	0x0801ad04
 8013b40:	200015bc 	.word	0x200015bc

08013b44 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013b44:	b580      	push	{r7, lr}
 8013b46:	b086      	sub	sp, #24
 8013b48:	af00      	add	r7, sp, #0
 8013b4a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013b50:	697b      	ldr	r3, [r7, #20]
 8013b52:	685b      	ldr	r3, [r3, #4]
 8013b54:	4798      	blx	r3

  now = sys_now();
 8013b56:	f7f3 fe0f 	bl	8007778 <sys_now>
 8013b5a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013b5c:	697b      	ldr	r3, [r7, #20]
 8013b5e:	681a      	ldr	r2, [r3, #0]
 8013b60:	4b0f      	ldr	r3, [pc, #60]	; (8013ba0 <lwip_cyclic_timer+0x5c>)
 8013b62:	681b      	ldr	r3, [r3, #0]
 8013b64:	4413      	add	r3, r2
 8013b66:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013b68:	68fa      	ldr	r2, [r7, #12]
 8013b6a:	693b      	ldr	r3, [r7, #16]
 8013b6c:	1ad3      	subs	r3, r2, r3
 8013b6e:	0fdb      	lsrs	r3, r3, #31
 8013b70:	f003 0301 	and.w	r3, r3, #1
 8013b74:	b2db      	uxtb	r3, r3
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d009      	beq.n	8013b8e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013b7a:	697b      	ldr	r3, [r7, #20]
 8013b7c:	681a      	ldr	r2, [r3, #0]
 8013b7e:	693b      	ldr	r3, [r7, #16]
 8013b80:	4413      	add	r3, r2
 8013b82:	687a      	ldr	r2, [r7, #4]
 8013b84:	4907      	ldr	r1, [pc, #28]	; (8013ba4 <lwip_cyclic_timer+0x60>)
 8013b86:	4618      	mov	r0, r3
 8013b88:	f7ff ff6e 	bl	8013a68 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013b8c:	e004      	b.n	8013b98 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8013b8e:	687a      	ldr	r2, [r7, #4]
 8013b90:	4904      	ldr	r1, [pc, #16]	; (8013ba4 <lwip_cyclic_timer+0x60>)
 8013b92:	68f8      	ldr	r0, [r7, #12]
 8013b94:	f7ff ff68 	bl	8013a68 <sys_timeout_abs>
}
 8013b98:	bf00      	nop
 8013b9a:	3718      	adds	r7, #24
 8013b9c:	46bd      	mov	sp, r7
 8013b9e:	bd80      	pop	{r7, pc}
 8013ba0:	200015c0 	.word	0x200015c0
 8013ba4:	08013b45 	.word	0x08013b45

08013ba8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013ba8:	b580      	push	{r7, lr}
 8013baa:	b082      	sub	sp, #8
 8013bac:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013bae:	2301      	movs	r3, #1
 8013bb0:	607b      	str	r3, [r7, #4]
 8013bb2:	e00e      	b.n	8013bd2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013bb4:	4a0b      	ldr	r2, [pc, #44]	; (8013be4 <sys_timeouts_init+0x3c>)
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	00db      	lsls	r3, r3, #3
 8013bc0:	4a08      	ldr	r2, [pc, #32]	; (8013be4 <sys_timeouts_init+0x3c>)
 8013bc2:	4413      	add	r3, r2
 8013bc4:	461a      	mov	r2, r3
 8013bc6:	4908      	ldr	r1, [pc, #32]	; (8013be8 <sys_timeouts_init+0x40>)
 8013bc8:	f000 f810 	bl	8013bec <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	3301      	adds	r3, #1
 8013bd0:	607b      	str	r3, [r7, #4]
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	2b02      	cmp	r3, #2
 8013bd6:	d9ed      	bls.n	8013bb4 <sys_timeouts_init+0xc>
  }
}
 8013bd8:	bf00      	nop
 8013bda:	bf00      	nop
 8013bdc:	3708      	adds	r7, #8
 8013bde:	46bd      	mov	sp, r7
 8013be0:	bd80      	pop	{r7, pc}
 8013be2:	bf00      	nop
 8013be4:	0801f874 	.word	0x0801f874
 8013be8:	08013b45 	.word	0x08013b45

08013bec <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013bec:	b580      	push	{r7, lr}
 8013bee:	b086      	sub	sp, #24
 8013bf0:	af00      	add	r7, sp, #0
 8013bf2:	60f8      	str	r0, [r7, #12]
 8013bf4:	60b9      	str	r1, [r7, #8]
 8013bf6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013bfe:	d306      	bcc.n	8013c0e <sys_timeout+0x22>
 8013c00:	4b0a      	ldr	r3, [pc, #40]	; (8013c2c <sys_timeout+0x40>)
 8013c02:	f240 1229 	movw	r2, #297	; 0x129
 8013c06:	490a      	ldr	r1, [pc, #40]	; (8013c30 <sys_timeout+0x44>)
 8013c08:	480a      	ldr	r0, [pc, #40]	; (8013c34 <sys_timeout+0x48>)
 8013c0a:	f002 fd37 	bl	801667c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8013c0e:	f7f3 fdb3 	bl	8007778 <sys_now>
 8013c12:	4602      	mov	r2, r0
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	4413      	add	r3, r2
 8013c18:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8013c1a:	687a      	ldr	r2, [r7, #4]
 8013c1c:	68b9      	ldr	r1, [r7, #8]
 8013c1e:	6978      	ldr	r0, [r7, #20]
 8013c20:	f7ff ff22 	bl	8013a68 <sys_timeout_abs>
#endif
}
 8013c24:	bf00      	nop
 8013c26:	3718      	adds	r7, #24
 8013c28:	46bd      	mov	sp, r7
 8013c2a:	bd80      	pop	{r7, pc}
 8013c2c:	0801ac90 	.word	0x0801ac90
 8013c30:	0801ad2c 	.word	0x0801ad2c
 8013c34:	0801ad04 	.word	0x0801ad04

08013c38 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013c38:	b580      	push	{r7, lr}
 8013c3a:	b084      	sub	sp, #16
 8013c3c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013c3e:	f7f3 fd9b 	bl	8007778 <sys_now>
 8013c42:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8013c44:	4b1a      	ldr	r3, [pc, #104]	; (8013cb0 <sys_check_timeouts+0x78>)
 8013c46:	781b      	ldrb	r3, [r3, #0]
 8013c48:	b2db      	uxtb	r3, r3
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d001      	beq.n	8013c52 <sys_check_timeouts+0x1a>
 8013c4e:	f7f9 f8cd 	bl	800cdec <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8013c52:	4b18      	ldr	r3, [pc, #96]	; (8013cb4 <sys_check_timeouts+0x7c>)
 8013c54:	681b      	ldr	r3, [r3, #0]
 8013c56:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8013c58:	68bb      	ldr	r3, [r7, #8]
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d022      	beq.n	8013ca4 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013c5e:	68bb      	ldr	r3, [r7, #8]
 8013c60:	685b      	ldr	r3, [r3, #4]
 8013c62:	68fa      	ldr	r2, [r7, #12]
 8013c64:	1ad3      	subs	r3, r2, r3
 8013c66:	0fdb      	lsrs	r3, r3, #31
 8013c68:	f003 0301 	and.w	r3, r3, #1
 8013c6c:	b2db      	uxtb	r3, r3
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d11a      	bne.n	8013ca8 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013c72:	68bb      	ldr	r3, [r7, #8]
 8013c74:	681b      	ldr	r3, [r3, #0]
 8013c76:	4a0f      	ldr	r2, [pc, #60]	; (8013cb4 <sys_check_timeouts+0x7c>)
 8013c78:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013c7a:	68bb      	ldr	r3, [r7, #8]
 8013c7c:	689b      	ldr	r3, [r3, #8]
 8013c7e:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013c80:	68bb      	ldr	r3, [r7, #8]
 8013c82:	68db      	ldr	r3, [r3, #12]
 8013c84:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013c86:	68bb      	ldr	r3, [r7, #8]
 8013c88:	685b      	ldr	r3, [r3, #4]
 8013c8a:	4a0b      	ldr	r2, [pc, #44]	; (8013cb8 <sys_check_timeouts+0x80>)
 8013c8c:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013c8e:	68b9      	ldr	r1, [r7, #8]
 8013c90:	2006      	movs	r0, #6
 8013c92:	f7f8 fdd3 	bl	800c83c <memp_free>
    if (handler != NULL) {
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d0d3      	beq.n	8013c44 <sys_check_timeouts+0xc>
      handler(arg);
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	6838      	ldr	r0, [r7, #0]
 8013ca0:	4798      	blx	r3
  do {
 8013ca2:	e7cf      	b.n	8013c44 <sys_check_timeouts+0xc>
      return;
 8013ca4:	bf00      	nop
 8013ca6:	e000      	b.n	8013caa <sys_check_timeouts+0x72>
      return;
 8013ca8:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013caa:	3710      	adds	r7, #16
 8013cac:	46bd      	mov	sp, r7
 8013cae:	bd80      	pop	{r7, pc}
 8013cb0:	200179f0 	.word	0x200179f0
 8013cb4:	200015bc 	.word	0x200015bc
 8013cb8:	200015c0 	.word	0x200015c0

08013cbc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013cbc:	b580      	push	{r7, lr}
 8013cbe:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013cc0:	f002 fd6a 	bl	8016798 <rand>
 8013cc4:	4603      	mov	r3, r0
 8013cc6:	b29b      	uxth	r3, r3
 8013cc8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013ccc:	b29b      	uxth	r3, r3
 8013cce:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8013cd2:	b29a      	uxth	r2, r3
 8013cd4:	4b01      	ldr	r3, [pc, #4]	; (8013cdc <udp_init+0x20>)
 8013cd6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013cd8:	bf00      	nop
 8013cda:	bd80      	pop	{r7, pc}
 8013cdc:	20000028 	.word	0x20000028

08013ce0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013ce0:	b580      	push	{r7, lr}
 8013ce2:	b084      	sub	sp, #16
 8013ce4:	af00      	add	r7, sp, #0
 8013ce6:	60f8      	str	r0, [r7, #12]
 8013ce8:	60b9      	str	r1, [r7, #8]
 8013cea:	4613      	mov	r3, r2
 8013cec:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d105      	bne.n	8013d00 <udp_input_local_match+0x20>
 8013cf4:	4b27      	ldr	r3, [pc, #156]	; (8013d94 <udp_input_local_match+0xb4>)
 8013cf6:	2287      	movs	r2, #135	; 0x87
 8013cf8:	4927      	ldr	r1, [pc, #156]	; (8013d98 <udp_input_local_match+0xb8>)
 8013cfa:	4828      	ldr	r0, [pc, #160]	; (8013d9c <udp_input_local_match+0xbc>)
 8013cfc:	f002 fcbe 	bl	801667c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013d00:	68bb      	ldr	r3, [r7, #8]
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d105      	bne.n	8013d12 <udp_input_local_match+0x32>
 8013d06:	4b23      	ldr	r3, [pc, #140]	; (8013d94 <udp_input_local_match+0xb4>)
 8013d08:	2288      	movs	r2, #136	; 0x88
 8013d0a:	4925      	ldr	r1, [pc, #148]	; (8013da0 <udp_input_local_match+0xc0>)
 8013d0c:	4823      	ldr	r0, [pc, #140]	; (8013d9c <udp_input_local_match+0xbc>)
 8013d0e:	f002 fcb5 	bl	801667c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	7a1b      	ldrb	r3, [r3, #8]
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d00b      	beq.n	8013d32 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013d1a:	68fb      	ldr	r3, [r7, #12]
 8013d1c:	7a1a      	ldrb	r2, [r3, #8]
 8013d1e:	4b21      	ldr	r3, [pc, #132]	; (8013da4 <udp_input_local_match+0xc4>)
 8013d20:	685b      	ldr	r3, [r3, #4]
 8013d22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013d26:	3301      	adds	r3, #1
 8013d28:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013d2a:	429a      	cmp	r2, r3
 8013d2c:	d001      	beq.n	8013d32 <udp_input_local_match+0x52>
    return 0;
 8013d2e:	2300      	movs	r3, #0
 8013d30:	e02b      	b.n	8013d8a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013d32:	79fb      	ldrb	r3, [r7, #7]
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d018      	beq.n	8013d6a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d013      	beq.n	8013d66 <udp_input_local_match+0x86>
 8013d3e:	68fb      	ldr	r3, [r7, #12]
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d00f      	beq.n	8013d66 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013d46:	4b17      	ldr	r3, [pc, #92]	; (8013da4 <udp_input_local_match+0xc4>)
 8013d48:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013d4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013d4e:	d00a      	beq.n	8013d66 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	681a      	ldr	r2, [r3, #0]
 8013d54:	4b13      	ldr	r3, [pc, #76]	; (8013da4 <udp_input_local_match+0xc4>)
 8013d56:	695b      	ldr	r3, [r3, #20]
 8013d58:	405a      	eors	r2, r3
 8013d5a:	68bb      	ldr	r3, [r7, #8]
 8013d5c:	3308      	adds	r3, #8
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d110      	bne.n	8013d88 <udp_input_local_match+0xa8>
          return 1;
 8013d66:	2301      	movs	r3, #1
 8013d68:	e00f      	b.n	8013d8a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013d6a:	68fb      	ldr	r3, [r7, #12]
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d009      	beq.n	8013d84 <udp_input_local_match+0xa4>
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	681b      	ldr	r3, [r3, #0]
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d005      	beq.n	8013d84 <udp_input_local_match+0xa4>
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	681a      	ldr	r2, [r3, #0]
 8013d7c:	4b09      	ldr	r3, [pc, #36]	; (8013da4 <udp_input_local_match+0xc4>)
 8013d7e:	695b      	ldr	r3, [r3, #20]
 8013d80:	429a      	cmp	r2, r3
 8013d82:	d101      	bne.n	8013d88 <udp_input_local_match+0xa8>
        return 1;
 8013d84:	2301      	movs	r3, #1
 8013d86:	e000      	b.n	8013d8a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013d88:	2300      	movs	r3, #0
}
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	3710      	adds	r7, #16
 8013d8e:	46bd      	mov	sp, r7
 8013d90:	bd80      	pop	{r7, pc}
 8013d92:	bf00      	nop
 8013d94:	0801ad78 	.word	0x0801ad78
 8013d98:	0801ada8 	.word	0x0801ada8
 8013d9c:	0801adcc 	.word	0x0801adcc
 8013da0:	0801adf4 	.word	0x0801adf4
 8013da4:	2000e3f4 	.word	0x2000e3f4

08013da8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013da8:	b590      	push	{r4, r7, lr}
 8013daa:	b08d      	sub	sp, #52	; 0x34
 8013dac:	af02      	add	r7, sp, #8
 8013dae:	6078      	str	r0, [r7, #4]
 8013db0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013db2:	2300      	movs	r3, #0
 8013db4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d105      	bne.n	8013dc8 <udp_input+0x20>
 8013dbc:	4b7c      	ldr	r3, [pc, #496]	; (8013fb0 <udp_input+0x208>)
 8013dbe:	22cf      	movs	r2, #207	; 0xcf
 8013dc0:	497c      	ldr	r1, [pc, #496]	; (8013fb4 <udp_input+0x20c>)
 8013dc2:	487d      	ldr	r0, [pc, #500]	; (8013fb8 <udp_input+0x210>)
 8013dc4:	f002 fc5a 	bl	801667c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013dc8:	683b      	ldr	r3, [r7, #0]
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d105      	bne.n	8013dda <udp_input+0x32>
 8013dce:	4b78      	ldr	r3, [pc, #480]	; (8013fb0 <udp_input+0x208>)
 8013dd0:	22d0      	movs	r2, #208	; 0xd0
 8013dd2:	497a      	ldr	r1, [pc, #488]	; (8013fbc <udp_input+0x214>)
 8013dd4:	4878      	ldr	r0, [pc, #480]	; (8013fb8 <udp_input+0x210>)
 8013dd6:	f002 fc51 	bl	801667c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	895b      	ldrh	r3, [r3, #10]
 8013dde:	2b07      	cmp	r3, #7
 8013de0:	d803      	bhi.n	8013dea <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013de2:	6878      	ldr	r0, [r7, #4]
 8013de4:	f7f9 fb3c 	bl	800d460 <pbuf_free>
    goto end;
 8013de8:	e0de      	b.n	8013fa8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	685b      	ldr	r3, [r3, #4]
 8013dee:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013df0:	4b73      	ldr	r3, [pc, #460]	; (8013fc0 <udp_input+0x218>)
 8013df2:	695b      	ldr	r3, [r3, #20]
 8013df4:	4a72      	ldr	r2, [pc, #456]	; (8013fc0 <udp_input+0x218>)
 8013df6:	6812      	ldr	r2, [r2, #0]
 8013df8:	4611      	mov	r1, r2
 8013dfa:	4618      	mov	r0, r3
 8013dfc:	f001 fc88 	bl	8015710 <ip4_addr_isbroadcast_u32>
 8013e00:	4603      	mov	r3, r0
 8013e02:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013e04:	697b      	ldr	r3, [r7, #20]
 8013e06:	881b      	ldrh	r3, [r3, #0]
 8013e08:	b29b      	uxth	r3, r3
 8013e0a:	4618      	mov	r0, r3
 8013e0c:	f7f7 ff96 	bl	800bd3c <lwip_htons>
 8013e10:	4603      	mov	r3, r0
 8013e12:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013e14:	697b      	ldr	r3, [r7, #20]
 8013e16:	885b      	ldrh	r3, [r3, #2]
 8013e18:	b29b      	uxth	r3, r3
 8013e1a:	4618      	mov	r0, r3
 8013e1c:	f7f7 ff8e 	bl	800bd3c <lwip_htons>
 8013e20:	4603      	mov	r3, r0
 8013e22:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013e24:	2300      	movs	r3, #0
 8013e26:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8013e28:	2300      	movs	r3, #0
 8013e2a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013e2c:	2300      	movs	r3, #0
 8013e2e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013e30:	4b64      	ldr	r3, [pc, #400]	; (8013fc4 <udp_input+0x21c>)
 8013e32:	681b      	ldr	r3, [r3, #0]
 8013e34:	627b      	str	r3, [r7, #36]	; 0x24
 8013e36:	e054      	b.n	8013ee2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e3a:	8a5b      	ldrh	r3, [r3, #18]
 8013e3c:	89fa      	ldrh	r2, [r7, #14]
 8013e3e:	429a      	cmp	r2, r3
 8013e40:	d14a      	bne.n	8013ed8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013e42:	7cfb      	ldrb	r3, [r7, #19]
 8013e44:	461a      	mov	r2, r3
 8013e46:	6839      	ldr	r1, [r7, #0]
 8013e48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013e4a:	f7ff ff49 	bl	8013ce0 <udp_input_local_match>
 8013e4e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d041      	beq.n	8013ed8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e56:	7c1b      	ldrb	r3, [r3, #16]
 8013e58:	f003 0304 	and.w	r3, r3, #4
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d11d      	bne.n	8013e9c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013e60:	69fb      	ldr	r3, [r7, #28]
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d102      	bne.n	8013e6c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e68:	61fb      	str	r3, [r7, #28]
 8013e6a:	e017      	b.n	8013e9c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013e6c:	7cfb      	ldrb	r3, [r7, #19]
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d014      	beq.n	8013e9c <udp_input+0xf4>
 8013e72:	4b53      	ldr	r3, [pc, #332]	; (8013fc0 <udp_input+0x218>)
 8013e74:	695b      	ldr	r3, [r3, #20]
 8013e76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013e7a:	d10f      	bne.n	8013e9c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013e7c:	69fb      	ldr	r3, [r7, #28]
 8013e7e:	681a      	ldr	r2, [r3, #0]
 8013e80:	683b      	ldr	r3, [r7, #0]
 8013e82:	3304      	adds	r3, #4
 8013e84:	681b      	ldr	r3, [r3, #0]
 8013e86:	429a      	cmp	r2, r3
 8013e88:	d008      	beq.n	8013e9c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e8c:	681a      	ldr	r2, [r3, #0]
 8013e8e:	683b      	ldr	r3, [r7, #0]
 8013e90:	3304      	adds	r3, #4
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	429a      	cmp	r2, r3
 8013e96:	d101      	bne.n	8013e9c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e9a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e9e:	8a9b      	ldrh	r3, [r3, #20]
 8013ea0:	8a3a      	ldrh	r2, [r7, #16]
 8013ea2:	429a      	cmp	r2, r3
 8013ea4:	d118      	bne.n	8013ed8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ea8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d005      	beq.n	8013eba <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eb0:	685a      	ldr	r2, [r3, #4]
 8013eb2:	4b43      	ldr	r3, [pc, #268]	; (8013fc0 <udp_input+0x218>)
 8013eb4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013eb6:	429a      	cmp	r2, r3
 8013eb8:	d10e      	bne.n	8013ed8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013eba:	6a3b      	ldr	r3, [r7, #32]
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d014      	beq.n	8013eea <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ec2:	68da      	ldr	r2, [r3, #12]
 8013ec4:	6a3b      	ldr	r3, [r7, #32]
 8013ec6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013ec8:	4b3e      	ldr	r3, [pc, #248]	; (8013fc4 <udp_input+0x21c>)
 8013eca:	681a      	ldr	r2, [r3, #0]
 8013ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ece:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013ed0:	4a3c      	ldr	r2, [pc, #240]	; (8013fc4 <udp_input+0x21c>)
 8013ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ed4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013ed6:	e008      	b.n	8013eea <udp_input+0x142>
      }
    }

    prev = pcb;
 8013ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eda:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ede:	68db      	ldr	r3, [r3, #12]
 8013ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8013ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d1a7      	bne.n	8013e38 <udp_input+0x90>
 8013ee8:	e000      	b.n	8013eec <udp_input+0x144>
        break;
 8013eea:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d101      	bne.n	8013ef6 <udp_input+0x14e>
    pcb = uncon_pcb;
 8013ef2:	69fb      	ldr	r3, [r7, #28]
 8013ef4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d002      	beq.n	8013f02 <udp_input+0x15a>
    for_us = 1;
 8013efc:	2301      	movs	r3, #1
 8013efe:	76fb      	strb	r3, [r7, #27]
 8013f00:	e00a      	b.n	8013f18 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013f02:	683b      	ldr	r3, [r7, #0]
 8013f04:	3304      	adds	r3, #4
 8013f06:	681a      	ldr	r2, [r3, #0]
 8013f08:	4b2d      	ldr	r3, [pc, #180]	; (8013fc0 <udp_input+0x218>)
 8013f0a:	695b      	ldr	r3, [r3, #20]
 8013f0c:	429a      	cmp	r2, r3
 8013f0e:	bf0c      	ite	eq
 8013f10:	2301      	moveq	r3, #1
 8013f12:	2300      	movne	r3, #0
 8013f14:	b2db      	uxtb	r3, r3
 8013f16:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013f18:	7efb      	ldrb	r3, [r7, #27]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d041      	beq.n	8013fa2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013f1e:	2108      	movs	r1, #8
 8013f20:	6878      	ldr	r0, [r7, #4]
 8013f22:	f7f9 fa17 	bl	800d354 <pbuf_remove_header>
 8013f26:	4603      	mov	r3, r0
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d00a      	beq.n	8013f42 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013f2c:	4b20      	ldr	r3, [pc, #128]	; (8013fb0 <udp_input+0x208>)
 8013f2e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8013f32:	4925      	ldr	r1, [pc, #148]	; (8013fc8 <udp_input+0x220>)
 8013f34:	4820      	ldr	r0, [pc, #128]	; (8013fb8 <udp_input+0x210>)
 8013f36:	f002 fba1 	bl	801667c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013f3a:	6878      	ldr	r0, [r7, #4]
 8013f3c:	f7f9 fa90 	bl	800d460 <pbuf_free>
      goto end;
 8013f40:	e032      	b.n	8013fa8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d012      	beq.n	8013f6e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f4a:	699b      	ldr	r3, [r3, #24]
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d00a      	beq.n	8013f66 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f52:	699c      	ldr	r4, [r3, #24]
 8013f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f56:	69d8      	ldr	r0, [r3, #28]
 8013f58:	8a3b      	ldrh	r3, [r7, #16]
 8013f5a:	9300      	str	r3, [sp, #0]
 8013f5c:	4b1b      	ldr	r3, [pc, #108]	; (8013fcc <udp_input+0x224>)
 8013f5e:	687a      	ldr	r2, [r7, #4]
 8013f60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013f62:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013f64:	e021      	b.n	8013faa <udp_input+0x202>
        pbuf_free(p);
 8013f66:	6878      	ldr	r0, [r7, #4]
 8013f68:	f7f9 fa7a 	bl	800d460 <pbuf_free>
        goto end;
 8013f6c:	e01c      	b.n	8013fa8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013f6e:	7cfb      	ldrb	r3, [r7, #19]
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d112      	bne.n	8013f9a <udp_input+0x1f2>
 8013f74:	4b12      	ldr	r3, [pc, #72]	; (8013fc0 <udp_input+0x218>)
 8013f76:	695b      	ldr	r3, [r3, #20]
 8013f78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013f7c:	2be0      	cmp	r3, #224	; 0xe0
 8013f7e:	d00c      	beq.n	8013f9a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013f80:	4b0f      	ldr	r3, [pc, #60]	; (8013fc0 <udp_input+0x218>)
 8013f82:	899b      	ldrh	r3, [r3, #12]
 8013f84:	3308      	adds	r3, #8
 8013f86:	b29b      	uxth	r3, r3
 8013f88:	b21b      	sxth	r3, r3
 8013f8a:	4619      	mov	r1, r3
 8013f8c:	6878      	ldr	r0, [r7, #4]
 8013f8e:	f7f9 fa54 	bl	800d43a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013f92:	2103      	movs	r1, #3
 8013f94:	6878      	ldr	r0, [r7, #4]
 8013f96:	f001 f89b 	bl	80150d0 <icmp_dest_unreach>
      pbuf_free(p);
 8013f9a:	6878      	ldr	r0, [r7, #4]
 8013f9c:	f7f9 fa60 	bl	800d460 <pbuf_free>
  return;
 8013fa0:	e003      	b.n	8013faa <udp_input+0x202>
    pbuf_free(p);
 8013fa2:	6878      	ldr	r0, [r7, #4]
 8013fa4:	f7f9 fa5c 	bl	800d460 <pbuf_free>
  return;
 8013fa8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013faa:	372c      	adds	r7, #44	; 0x2c
 8013fac:	46bd      	mov	sp, r7
 8013fae:	bd90      	pop	{r4, r7, pc}
 8013fb0:	0801ad78 	.word	0x0801ad78
 8013fb4:	0801ae1c 	.word	0x0801ae1c
 8013fb8:	0801adcc 	.word	0x0801adcc
 8013fbc:	0801ae34 	.word	0x0801ae34
 8013fc0:	2000e3f4 	.word	0x2000e3f4
 8013fc4:	20017a10 	.word	0x20017a10
 8013fc8:	0801ae50 	.word	0x0801ae50
 8013fcc:	2000e404 	.word	0x2000e404

08013fd0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013fd0:	b480      	push	{r7}
 8013fd2:	b085      	sub	sp, #20
 8013fd4:	af00      	add	r7, sp, #0
 8013fd6:	6078      	str	r0, [r7, #4]
 8013fd8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d01e      	beq.n	801401e <udp_netif_ip_addr_changed+0x4e>
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d01a      	beq.n	801401e <udp_netif_ip_addr_changed+0x4e>
 8013fe8:	683b      	ldr	r3, [r7, #0]
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d017      	beq.n	801401e <udp_netif_ip_addr_changed+0x4e>
 8013fee:	683b      	ldr	r3, [r7, #0]
 8013ff0:	681b      	ldr	r3, [r3, #0]
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d013      	beq.n	801401e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013ff6:	4b0d      	ldr	r3, [pc, #52]	; (801402c <udp_netif_ip_addr_changed+0x5c>)
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	60fb      	str	r3, [r7, #12]
 8013ffc:	e00c      	b.n	8014018 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013ffe:	68fb      	ldr	r3, [r7, #12]
 8014000:	681a      	ldr	r2, [r3, #0]
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	681b      	ldr	r3, [r3, #0]
 8014006:	429a      	cmp	r2, r3
 8014008:	d103      	bne.n	8014012 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801400a:	683b      	ldr	r3, [r7, #0]
 801400c:	681a      	ldr	r2, [r3, #0]
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	68db      	ldr	r3, [r3, #12]
 8014016:	60fb      	str	r3, [r7, #12]
 8014018:	68fb      	ldr	r3, [r7, #12]
 801401a:	2b00      	cmp	r3, #0
 801401c:	d1ef      	bne.n	8013ffe <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801401e:	bf00      	nop
 8014020:	3714      	adds	r7, #20
 8014022:	46bd      	mov	sp, r7
 8014024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014028:	4770      	bx	lr
 801402a:	bf00      	nop
 801402c:	20017a10 	.word	0x20017a10

08014030 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014030:	b580      	push	{r7, lr}
 8014032:	b082      	sub	sp, #8
 8014034:	af00      	add	r7, sp, #0
 8014036:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014038:	4915      	ldr	r1, [pc, #84]	; (8014090 <etharp_free_entry+0x60>)
 801403a:	687a      	ldr	r2, [r7, #4]
 801403c:	4613      	mov	r3, r2
 801403e:	005b      	lsls	r3, r3, #1
 8014040:	4413      	add	r3, r2
 8014042:	00db      	lsls	r3, r3, #3
 8014044:	440b      	add	r3, r1
 8014046:	681b      	ldr	r3, [r3, #0]
 8014048:	2b00      	cmp	r3, #0
 801404a:	d013      	beq.n	8014074 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801404c:	4910      	ldr	r1, [pc, #64]	; (8014090 <etharp_free_entry+0x60>)
 801404e:	687a      	ldr	r2, [r7, #4]
 8014050:	4613      	mov	r3, r2
 8014052:	005b      	lsls	r3, r3, #1
 8014054:	4413      	add	r3, r2
 8014056:	00db      	lsls	r3, r3, #3
 8014058:	440b      	add	r3, r1
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	4618      	mov	r0, r3
 801405e:	f7f9 f9ff 	bl	800d460 <pbuf_free>
    arp_table[i].q = NULL;
 8014062:	490b      	ldr	r1, [pc, #44]	; (8014090 <etharp_free_entry+0x60>)
 8014064:	687a      	ldr	r2, [r7, #4]
 8014066:	4613      	mov	r3, r2
 8014068:	005b      	lsls	r3, r3, #1
 801406a:	4413      	add	r3, r2
 801406c:	00db      	lsls	r3, r3, #3
 801406e:	440b      	add	r3, r1
 8014070:	2200      	movs	r2, #0
 8014072:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8014074:	4906      	ldr	r1, [pc, #24]	; (8014090 <etharp_free_entry+0x60>)
 8014076:	687a      	ldr	r2, [r7, #4]
 8014078:	4613      	mov	r3, r2
 801407a:	005b      	lsls	r3, r3, #1
 801407c:	4413      	add	r3, r2
 801407e:	00db      	lsls	r3, r3, #3
 8014080:	440b      	add	r3, r1
 8014082:	3314      	adds	r3, #20
 8014084:	2200      	movs	r2, #0
 8014086:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8014088:	bf00      	nop
 801408a:	3708      	adds	r7, #8
 801408c:	46bd      	mov	sp, r7
 801408e:	bd80      	pop	{r7, pc}
 8014090:	200015c8 	.word	0x200015c8

08014094 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014094:	b580      	push	{r7, lr}
 8014096:	b082      	sub	sp, #8
 8014098:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801409a:	2300      	movs	r3, #0
 801409c:	607b      	str	r3, [r7, #4]
 801409e:	e096      	b.n	80141ce <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80140a0:	494f      	ldr	r1, [pc, #316]	; (80141e0 <etharp_tmr+0x14c>)
 80140a2:	687a      	ldr	r2, [r7, #4]
 80140a4:	4613      	mov	r3, r2
 80140a6:	005b      	lsls	r3, r3, #1
 80140a8:	4413      	add	r3, r2
 80140aa:	00db      	lsls	r3, r3, #3
 80140ac:	440b      	add	r3, r1
 80140ae:	3314      	adds	r3, #20
 80140b0:	781b      	ldrb	r3, [r3, #0]
 80140b2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80140b4:	78fb      	ldrb	r3, [r7, #3]
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	f000 8086 	beq.w	80141c8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80140bc:	4948      	ldr	r1, [pc, #288]	; (80141e0 <etharp_tmr+0x14c>)
 80140be:	687a      	ldr	r2, [r7, #4]
 80140c0:	4613      	mov	r3, r2
 80140c2:	005b      	lsls	r3, r3, #1
 80140c4:	4413      	add	r3, r2
 80140c6:	00db      	lsls	r3, r3, #3
 80140c8:	440b      	add	r3, r1
 80140ca:	3312      	adds	r3, #18
 80140cc:	881b      	ldrh	r3, [r3, #0]
 80140ce:	3301      	adds	r3, #1
 80140d0:	b298      	uxth	r0, r3
 80140d2:	4943      	ldr	r1, [pc, #268]	; (80141e0 <etharp_tmr+0x14c>)
 80140d4:	687a      	ldr	r2, [r7, #4]
 80140d6:	4613      	mov	r3, r2
 80140d8:	005b      	lsls	r3, r3, #1
 80140da:	4413      	add	r3, r2
 80140dc:	00db      	lsls	r3, r3, #3
 80140de:	440b      	add	r3, r1
 80140e0:	3312      	adds	r3, #18
 80140e2:	4602      	mov	r2, r0
 80140e4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80140e6:	493e      	ldr	r1, [pc, #248]	; (80141e0 <etharp_tmr+0x14c>)
 80140e8:	687a      	ldr	r2, [r7, #4]
 80140ea:	4613      	mov	r3, r2
 80140ec:	005b      	lsls	r3, r3, #1
 80140ee:	4413      	add	r3, r2
 80140f0:	00db      	lsls	r3, r3, #3
 80140f2:	440b      	add	r3, r1
 80140f4:	3312      	adds	r3, #18
 80140f6:	881b      	ldrh	r3, [r3, #0]
 80140f8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80140fc:	d215      	bcs.n	801412a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80140fe:	4938      	ldr	r1, [pc, #224]	; (80141e0 <etharp_tmr+0x14c>)
 8014100:	687a      	ldr	r2, [r7, #4]
 8014102:	4613      	mov	r3, r2
 8014104:	005b      	lsls	r3, r3, #1
 8014106:	4413      	add	r3, r2
 8014108:	00db      	lsls	r3, r3, #3
 801410a:	440b      	add	r3, r1
 801410c:	3314      	adds	r3, #20
 801410e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014110:	2b01      	cmp	r3, #1
 8014112:	d10e      	bne.n	8014132 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014114:	4932      	ldr	r1, [pc, #200]	; (80141e0 <etharp_tmr+0x14c>)
 8014116:	687a      	ldr	r2, [r7, #4]
 8014118:	4613      	mov	r3, r2
 801411a:	005b      	lsls	r3, r3, #1
 801411c:	4413      	add	r3, r2
 801411e:	00db      	lsls	r3, r3, #3
 8014120:	440b      	add	r3, r1
 8014122:	3312      	adds	r3, #18
 8014124:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014126:	2b04      	cmp	r3, #4
 8014128:	d903      	bls.n	8014132 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801412a:	6878      	ldr	r0, [r7, #4]
 801412c:	f7ff ff80 	bl	8014030 <etharp_free_entry>
 8014130:	e04a      	b.n	80141c8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8014132:	492b      	ldr	r1, [pc, #172]	; (80141e0 <etharp_tmr+0x14c>)
 8014134:	687a      	ldr	r2, [r7, #4]
 8014136:	4613      	mov	r3, r2
 8014138:	005b      	lsls	r3, r3, #1
 801413a:	4413      	add	r3, r2
 801413c:	00db      	lsls	r3, r3, #3
 801413e:	440b      	add	r3, r1
 8014140:	3314      	adds	r3, #20
 8014142:	781b      	ldrb	r3, [r3, #0]
 8014144:	2b03      	cmp	r3, #3
 8014146:	d10a      	bne.n	801415e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014148:	4925      	ldr	r1, [pc, #148]	; (80141e0 <etharp_tmr+0x14c>)
 801414a:	687a      	ldr	r2, [r7, #4]
 801414c:	4613      	mov	r3, r2
 801414e:	005b      	lsls	r3, r3, #1
 8014150:	4413      	add	r3, r2
 8014152:	00db      	lsls	r3, r3, #3
 8014154:	440b      	add	r3, r1
 8014156:	3314      	adds	r3, #20
 8014158:	2204      	movs	r2, #4
 801415a:	701a      	strb	r2, [r3, #0]
 801415c:	e034      	b.n	80141c8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801415e:	4920      	ldr	r1, [pc, #128]	; (80141e0 <etharp_tmr+0x14c>)
 8014160:	687a      	ldr	r2, [r7, #4]
 8014162:	4613      	mov	r3, r2
 8014164:	005b      	lsls	r3, r3, #1
 8014166:	4413      	add	r3, r2
 8014168:	00db      	lsls	r3, r3, #3
 801416a:	440b      	add	r3, r1
 801416c:	3314      	adds	r3, #20
 801416e:	781b      	ldrb	r3, [r3, #0]
 8014170:	2b04      	cmp	r3, #4
 8014172:	d10a      	bne.n	801418a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014174:	491a      	ldr	r1, [pc, #104]	; (80141e0 <etharp_tmr+0x14c>)
 8014176:	687a      	ldr	r2, [r7, #4]
 8014178:	4613      	mov	r3, r2
 801417a:	005b      	lsls	r3, r3, #1
 801417c:	4413      	add	r3, r2
 801417e:	00db      	lsls	r3, r3, #3
 8014180:	440b      	add	r3, r1
 8014182:	3314      	adds	r3, #20
 8014184:	2202      	movs	r2, #2
 8014186:	701a      	strb	r2, [r3, #0]
 8014188:	e01e      	b.n	80141c8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801418a:	4915      	ldr	r1, [pc, #84]	; (80141e0 <etharp_tmr+0x14c>)
 801418c:	687a      	ldr	r2, [r7, #4]
 801418e:	4613      	mov	r3, r2
 8014190:	005b      	lsls	r3, r3, #1
 8014192:	4413      	add	r3, r2
 8014194:	00db      	lsls	r3, r3, #3
 8014196:	440b      	add	r3, r1
 8014198:	3314      	adds	r3, #20
 801419a:	781b      	ldrb	r3, [r3, #0]
 801419c:	2b01      	cmp	r3, #1
 801419e:	d113      	bne.n	80141c8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80141a0:	490f      	ldr	r1, [pc, #60]	; (80141e0 <etharp_tmr+0x14c>)
 80141a2:	687a      	ldr	r2, [r7, #4]
 80141a4:	4613      	mov	r3, r2
 80141a6:	005b      	lsls	r3, r3, #1
 80141a8:	4413      	add	r3, r2
 80141aa:	00db      	lsls	r3, r3, #3
 80141ac:	440b      	add	r3, r1
 80141ae:	3308      	adds	r3, #8
 80141b0:	6818      	ldr	r0, [r3, #0]
 80141b2:	687a      	ldr	r2, [r7, #4]
 80141b4:	4613      	mov	r3, r2
 80141b6:	005b      	lsls	r3, r3, #1
 80141b8:	4413      	add	r3, r2
 80141ba:	00db      	lsls	r3, r3, #3
 80141bc:	4a08      	ldr	r2, [pc, #32]	; (80141e0 <etharp_tmr+0x14c>)
 80141be:	4413      	add	r3, r2
 80141c0:	3304      	adds	r3, #4
 80141c2:	4619      	mov	r1, r3
 80141c4:	f000 fe6e 	bl	8014ea4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	3301      	adds	r3, #1
 80141cc:	607b      	str	r3, [r7, #4]
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	2b09      	cmp	r3, #9
 80141d2:	f77f af65 	ble.w	80140a0 <etharp_tmr+0xc>
      }
    }
  }
}
 80141d6:	bf00      	nop
 80141d8:	bf00      	nop
 80141da:	3708      	adds	r7, #8
 80141dc:	46bd      	mov	sp, r7
 80141de:	bd80      	pop	{r7, pc}
 80141e0:	200015c8 	.word	0x200015c8

080141e4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80141e4:	b580      	push	{r7, lr}
 80141e6:	b08a      	sub	sp, #40	; 0x28
 80141e8:	af00      	add	r7, sp, #0
 80141ea:	60f8      	str	r0, [r7, #12]
 80141ec:	460b      	mov	r3, r1
 80141ee:	607a      	str	r2, [r7, #4]
 80141f0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80141f2:	230a      	movs	r3, #10
 80141f4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80141f6:	230a      	movs	r3, #10
 80141f8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80141fa:	230a      	movs	r3, #10
 80141fc:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80141fe:	2300      	movs	r3, #0
 8014200:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8014202:	230a      	movs	r3, #10
 8014204:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8014206:	2300      	movs	r3, #0
 8014208:	83bb      	strh	r3, [r7, #28]
 801420a:	2300      	movs	r3, #0
 801420c:	837b      	strh	r3, [r7, #26]
 801420e:	2300      	movs	r3, #0
 8014210:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014212:	2300      	movs	r3, #0
 8014214:	843b      	strh	r3, [r7, #32]
 8014216:	e0ae      	b.n	8014376 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014218:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801421c:	49a6      	ldr	r1, [pc, #664]	; (80144b8 <etharp_find_entry+0x2d4>)
 801421e:	4613      	mov	r3, r2
 8014220:	005b      	lsls	r3, r3, #1
 8014222:	4413      	add	r3, r2
 8014224:	00db      	lsls	r3, r3, #3
 8014226:	440b      	add	r3, r1
 8014228:	3314      	adds	r3, #20
 801422a:	781b      	ldrb	r3, [r3, #0]
 801422c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801422e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014232:	2b0a      	cmp	r3, #10
 8014234:	d105      	bne.n	8014242 <etharp_find_entry+0x5e>
 8014236:	7dfb      	ldrb	r3, [r7, #23]
 8014238:	2b00      	cmp	r3, #0
 801423a:	d102      	bne.n	8014242 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801423c:	8c3b      	ldrh	r3, [r7, #32]
 801423e:	847b      	strh	r3, [r7, #34]	; 0x22
 8014240:	e095      	b.n	801436e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8014242:	7dfb      	ldrb	r3, [r7, #23]
 8014244:	2b00      	cmp	r3, #0
 8014246:	f000 8092 	beq.w	801436e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801424a:	7dfb      	ldrb	r3, [r7, #23]
 801424c:	2b01      	cmp	r3, #1
 801424e:	d009      	beq.n	8014264 <etharp_find_entry+0x80>
 8014250:	7dfb      	ldrb	r3, [r7, #23]
 8014252:	2b01      	cmp	r3, #1
 8014254:	d806      	bhi.n	8014264 <etharp_find_entry+0x80>
 8014256:	4b99      	ldr	r3, [pc, #612]	; (80144bc <etharp_find_entry+0x2d8>)
 8014258:	f240 1223 	movw	r2, #291	; 0x123
 801425c:	4998      	ldr	r1, [pc, #608]	; (80144c0 <etharp_find_entry+0x2dc>)
 801425e:	4899      	ldr	r0, [pc, #612]	; (80144c4 <etharp_find_entry+0x2e0>)
 8014260:	f002 fa0c 	bl	801667c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014264:	68fb      	ldr	r3, [r7, #12]
 8014266:	2b00      	cmp	r3, #0
 8014268:	d020      	beq.n	80142ac <etharp_find_entry+0xc8>
 801426a:	68fb      	ldr	r3, [r7, #12]
 801426c:	6819      	ldr	r1, [r3, #0]
 801426e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014272:	4891      	ldr	r0, [pc, #580]	; (80144b8 <etharp_find_entry+0x2d4>)
 8014274:	4613      	mov	r3, r2
 8014276:	005b      	lsls	r3, r3, #1
 8014278:	4413      	add	r3, r2
 801427a:	00db      	lsls	r3, r3, #3
 801427c:	4403      	add	r3, r0
 801427e:	3304      	adds	r3, #4
 8014280:	681b      	ldr	r3, [r3, #0]
 8014282:	4299      	cmp	r1, r3
 8014284:	d112      	bne.n	80142ac <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	2b00      	cmp	r3, #0
 801428a:	d00c      	beq.n	80142a6 <etharp_find_entry+0xc2>
 801428c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014290:	4989      	ldr	r1, [pc, #548]	; (80144b8 <etharp_find_entry+0x2d4>)
 8014292:	4613      	mov	r3, r2
 8014294:	005b      	lsls	r3, r3, #1
 8014296:	4413      	add	r3, r2
 8014298:	00db      	lsls	r3, r3, #3
 801429a:	440b      	add	r3, r1
 801429c:	3308      	adds	r3, #8
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	687a      	ldr	r2, [r7, #4]
 80142a2:	429a      	cmp	r2, r3
 80142a4:	d102      	bne.n	80142ac <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80142a6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80142aa:	e100      	b.n	80144ae <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80142ac:	7dfb      	ldrb	r3, [r7, #23]
 80142ae:	2b01      	cmp	r3, #1
 80142b0:	d140      	bne.n	8014334 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80142b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80142b6:	4980      	ldr	r1, [pc, #512]	; (80144b8 <etharp_find_entry+0x2d4>)
 80142b8:	4613      	mov	r3, r2
 80142ba:	005b      	lsls	r3, r3, #1
 80142bc:	4413      	add	r3, r2
 80142be:	00db      	lsls	r3, r3, #3
 80142c0:	440b      	add	r3, r1
 80142c2:	681b      	ldr	r3, [r3, #0]
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d01a      	beq.n	80142fe <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80142c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80142cc:	497a      	ldr	r1, [pc, #488]	; (80144b8 <etharp_find_entry+0x2d4>)
 80142ce:	4613      	mov	r3, r2
 80142d0:	005b      	lsls	r3, r3, #1
 80142d2:	4413      	add	r3, r2
 80142d4:	00db      	lsls	r3, r3, #3
 80142d6:	440b      	add	r3, r1
 80142d8:	3312      	adds	r3, #18
 80142da:	881b      	ldrh	r3, [r3, #0]
 80142dc:	8bba      	ldrh	r2, [r7, #28]
 80142de:	429a      	cmp	r2, r3
 80142e0:	d845      	bhi.n	801436e <etharp_find_entry+0x18a>
            old_queue = i;
 80142e2:	8c3b      	ldrh	r3, [r7, #32]
 80142e4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80142e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80142ea:	4973      	ldr	r1, [pc, #460]	; (80144b8 <etharp_find_entry+0x2d4>)
 80142ec:	4613      	mov	r3, r2
 80142ee:	005b      	lsls	r3, r3, #1
 80142f0:	4413      	add	r3, r2
 80142f2:	00db      	lsls	r3, r3, #3
 80142f4:	440b      	add	r3, r1
 80142f6:	3312      	adds	r3, #18
 80142f8:	881b      	ldrh	r3, [r3, #0]
 80142fa:	83bb      	strh	r3, [r7, #28]
 80142fc:	e037      	b.n	801436e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80142fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014302:	496d      	ldr	r1, [pc, #436]	; (80144b8 <etharp_find_entry+0x2d4>)
 8014304:	4613      	mov	r3, r2
 8014306:	005b      	lsls	r3, r3, #1
 8014308:	4413      	add	r3, r2
 801430a:	00db      	lsls	r3, r3, #3
 801430c:	440b      	add	r3, r1
 801430e:	3312      	adds	r3, #18
 8014310:	881b      	ldrh	r3, [r3, #0]
 8014312:	8b7a      	ldrh	r2, [r7, #26]
 8014314:	429a      	cmp	r2, r3
 8014316:	d82a      	bhi.n	801436e <etharp_find_entry+0x18a>
            old_pending = i;
 8014318:	8c3b      	ldrh	r3, [r7, #32]
 801431a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801431c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014320:	4965      	ldr	r1, [pc, #404]	; (80144b8 <etharp_find_entry+0x2d4>)
 8014322:	4613      	mov	r3, r2
 8014324:	005b      	lsls	r3, r3, #1
 8014326:	4413      	add	r3, r2
 8014328:	00db      	lsls	r3, r3, #3
 801432a:	440b      	add	r3, r1
 801432c:	3312      	adds	r3, #18
 801432e:	881b      	ldrh	r3, [r3, #0]
 8014330:	837b      	strh	r3, [r7, #26]
 8014332:	e01c      	b.n	801436e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014334:	7dfb      	ldrb	r3, [r7, #23]
 8014336:	2b01      	cmp	r3, #1
 8014338:	d919      	bls.n	801436e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801433a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801433e:	495e      	ldr	r1, [pc, #376]	; (80144b8 <etharp_find_entry+0x2d4>)
 8014340:	4613      	mov	r3, r2
 8014342:	005b      	lsls	r3, r3, #1
 8014344:	4413      	add	r3, r2
 8014346:	00db      	lsls	r3, r3, #3
 8014348:	440b      	add	r3, r1
 801434a:	3312      	adds	r3, #18
 801434c:	881b      	ldrh	r3, [r3, #0]
 801434e:	8b3a      	ldrh	r2, [r7, #24]
 8014350:	429a      	cmp	r2, r3
 8014352:	d80c      	bhi.n	801436e <etharp_find_entry+0x18a>
            old_stable = i;
 8014354:	8c3b      	ldrh	r3, [r7, #32]
 8014356:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8014358:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801435c:	4956      	ldr	r1, [pc, #344]	; (80144b8 <etharp_find_entry+0x2d4>)
 801435e:	4613      	mov	r3, r2
 8014360:	005b      	lsls	r3, r3, #1
 8014362:	4413      	add	r3, r2
 8014364:	00db      	lsls	r3, r3, #3
 8014366:	440b      	add	r3, r1
 8014368:	3312      	adds	r3, #18
 801436a:	881b      	ldrh	r3, [r3, #0]
 801436c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801436e:	8c3b      	ldrh	r3, [r7, #32]
 8014370:	3301      	adds	r3, #1
 8014372:	b29b      	uxth	r3, r3
 8014374:	843b      	strh	r3, [r7, #32]
 8014376:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801437a:	2b09      	cmp	r3, #9
 801437c:	f77f af4c 	ble.w	8014218 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014380:	7afb      	ldrb	r3, [r7, #11]
 8014382:	f003 0302 	and.w	r3, r3, #2
 8014386:	2b00      	cmp	r3, #0
 8014388:	d108      	bne.n	801439c <etharp_find_entry+0x1b8>
 801438a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801438e:	2b0a      	cmp	r3, #10
 8014390:	d107      	bne.n	80143a2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8014392:	7afb      	ldrb	r3, [r7, #11]
 8014394:	f003 0301 	and.w	r3, r3, #1
 8014398:	2b00      	cmp	r3, #0
 801439a:	d102      	bne.n	80143a2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801439c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80143a0:	e085      	b.n	80144ae <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80143a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80143a6:	2b09      	cmp	r3, #9
 80143a8:	dc02      	bgt.n	80143b0 <etharp_find_entry+0x1cc>
    i = empty;
 80143aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80143ac:	843b      	strh	r3, [r7, #32]
 80143ae:	e039      	b.n	8014424 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80143b0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80143b4:	2b09      	cmp	r3, #9
 80143b6:	dc14      	bgt.n	80143e2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80143b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80143ba:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80143bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80143c0:	493d      	ldr	r1, [pc, #244]	; (80144b8 <etharp_find_entry+0x2d4>)
 80143c2:	4613      	mov	r3, r2
 80143c4:	005b      	lsls	r3, r3, #1
 80143c6:	4413      	add	r3, r2
 80143c8:	00db      	lsls	r3, r3, #3
 80143ca:	440b      	add	r3, r1
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d018      	beq.n	8014404 <etharp_find_entry+0x220>
 80143d2:	4b3a      	ldr	r3, [pc, #232]	; (80144bc <etharp_find_entry+0x2d8>)
 80143d4:	f240 126d 	movw	r2, #365	; 0x16d
 80143d8:	493b      	ldr	r1, [pc, #236]	; (80144c8 <etharp_find_entry+0x2e4>)
 80143da:	483a      	ldr	r0, [pc, #232]	; (80144c4 <etharp_find_entry+0x2e0>)
 80143dc:	f002 f94e 	bl	801667c <iprintf>
 80143e0:	e010      	b.n	8014404 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80143e2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80143e6:	2b09      	cmp	r3, #9
 80143e8:	dc02      	bgt.n	80143f0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80143ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80143ec:	843b      	strh	r3, [r7, #32]
 80143ee:	e009      	b.n	8014404 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80143f0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80143f4:	2b09      	cmp	r3, #9
 80143f6:	dc02      	bgt.n	80143fe <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80143f8:	8bfb      	ldrh	r3, [r7, #30]
 80143fa:	843b      	strh	r3, [r7, #32]
 80143fc:	e002      	b.n	8014404 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80143fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014402:	e054      	b.n	80144ae <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014404:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014408:	2b09      	cmp	r3, #9
 801440a:	dd06      	ble.n	801441a <etharp_find_entry+0x236>
 801440c:	4b2b      	ldr	r3, [pc, #172]	; (80144bc <etharp_find_entry+0x2d8>)
 801440e:	f240 127f 	movw	r2, #383	; 0x17f
 8014412:	492e      	ldr	r1, [pc, #184]	; (80144cc <etharp_find_entry+0x2e8>)
 8014414:	482b      	ldr	r0, [pc, #172]	; (80144c4 <etharp_find_entry+0x2e0>)
 8014416:	f002 f931 	bl	801667c <iprintf>
    etharp_free_entry(i);
 801441a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801441e:	4618      	mov	r0, r3
 8014420:	f7ff fe06 	bl	8014030 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014424:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014428:	2b09      	cmp	r3, #9
 801442a:	dd06      	ble.n	801443a <etharp_find_entry+0x256>
 801442c:	4b23      	ldr	r3, [pc, #140]	; (80144bc <etharp_find_entry+0x2d8>)
 801442e:	f240 1283 	movw	r2, #387	; 0x183
 8014432:	4926      	ldr	r1, [pc, #152]	; (80144cc <etharp_find_entry+0x2e8>)
 8014434:	4823      	ldr	r0, [pc, #140]	; (80144c4 <etharp_find_entry+0x2e0>)
 8014436:	f002 f921 	bl	801667c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801443a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801443e:	491e      	ldr	r1, [pc, #120]	; (80144b8 <etharp_find_entry+0x2d4>)
 8014440:	4613      	mov	r3, r2
 8014442:	005b      	lsls	r3, r3, #1
 8014444:	4413      	add	r3, r2
 8014446:	00db      	lsls	r3, r3, #3
 8014448:	440b      	add	r3, r1
 801444a:	3314      	adds	r3, #20
 801444c:	781b      	ldrb	r3, [r3, #0]
 801444e:	2b00      	cmp	r3, #0
 8014450:	d006      	beq.n	8014460 <etharp_find_entry+0x27c>
 8014452:	4b1a      	ldr	r3, [pc, #104]	; (80144bc <etharp_find_entry+0x2d8>)
 8014454:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8014458:	491d      	ldr	r1, [pc, #116]	; (80144d0 <etharp_find_entry+0x2ec>)
 801445a:	481a      	ldr	r0, [pc, #104]	; (80144c4 <etharp_find_entry+0x2e0>)
 801445c:	f002 f90e 	bl	801667c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014460:	68fb      	ldr	r3, [r7, #12]
 8014462:	2b00      	cmp	r3, #0
 8014464:	d00b      	beq.n	801447e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8014466:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801446a:	68fb      	ldr	r3, [r7, #12]
 801446c:	6819      	ldr	r1, [r3, #0]
 801446e:	4812      	ldr	r0, [pc, #72]	; (80144b8 <etharp_find_entry+0x2d4>)
 8014470:	4613      	mov	r3, r2
 8014472:	005b      	lsls	r3, r3, #1
 8014474:	4413      	add	r3, r2
 8014476:	00db      	lsls	r3, r3, #3
 8014478:	4403      	add	r3, r0
 801447a:	3304      	adds	r3, #4
 801447c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801447e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014482:	490d      	ldr	r1, [pc, #52]	; (80144b8 <etharp_find_entry+0x2d4>)
 8014484:	4613      	mov	r3, r2
 8014486:	005b      	lsls	r3, r3, #1
 8014488:	4413      	add	r3, r2
 801448a:	00db      	lsls	r3, r3, #3
 801448c:	440b      	add	r3, r1
 801448e:	3312      	adds	r3, #18
 8014490:	2200      	movs	r2, #0
 8014492:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014494:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014498:	4907      	ldr	r1, [pc, #28]	; (80144b8 <etharp_find_entry+0x2d4>)
 801449a:	4613      	mov	r3, r2
 801449c:	005b      	lsls	r3, r3, #1
 801449e:	4413      	add	r3, r2
 80144a0:	00db      	lsls	r3, r3, #3
 80144a2:	440b      	add	r3, r1
 80144a4:	3308      	adds	r3, #8
 80144a6:	687a      	ldr	r2, [r7, #4]
 80144a8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80144aa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80144ae:	4618      	mov	r0, r3
 80144b0:	3728      	adds	r7, #40	; 0x28
 80144b2:	46bd      	mov	sp, r7
 80144b4:	bd80      	pop	{r7, pc}
 80144b6:	bf00      	nop
 80144b8:	200015c8 	.word	0x200015c8
 80144bc:	0801b0dc 	.word	0x0801b0dc
 80144c0:	0801b114 	.word	0x0801b114
 80144c4:	0801b154 	.word	0x0801b154
 80144c8:	0801b17c 	.word	0x0801b17c
 80144cc:	0801b194 	.word	0x0801b194
 80144d0:	0801b1a8 	.word	0x0801b1a8

080144d4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80144d4:	b580      	push	{r7, lr}
 80144d6:	b088      	sub	sp, #32
 80144d8:	af02      	add	r7, sp, #8
 80144da:	60f8      	str	r0, [r7, #12]
 80144dc:	60b9      	str	r1, [r7, #8]
 80144de:	607a      	str	r2, [r7, #4]
 80144e0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80144e2:	68fb      	ldr	r3, [r7, #12]
 80144e4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80144e8:	2b06      	cmp	r3, #6
 80144ea:	d006      	beq.n	80144fa <etharp_update_arp_entry+0x26>
 80144ec:	4b48      	ldr	r3, [pc, #288]	; (8014610 <etharp_update_arp_entry+0x13c>)
 80144ee:	f240 12a9 	movw	r2, #425	; 0x1a9
 80144f2:	4948      	ldr	r1, [pc, #288]	; (8014614 <etharp_update_arp_entry+0x140>)
 80144f4:	4848      	ldr	r0, [pc, #288]	; (8014618 <etharp_update_arp_entry+0x144>)
 80144f6:	f002 f8c1 	bl	801667c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80144fa:	68bb      	ldr	r3, [r7, #8]
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d012      	beq.n	8014526 <etharp_update_arp_entry+0x52>
 8014500:	68bb      	ldr	r3, [r7, #8]
 8014502:	681b      	ldr	r3, [r3, #0]
 8014504:	2b00      	cmp	r3, #0
 8014506:	d00e      	beq.n	8014526 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014508:	68bb      	ldr	r3, [r7, #8]
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	68f9      	ldr	r1, [r7, #12]
 801450e:	4618      	mov	r0, r3
 8014510:	f001 f8fe 	bl	8015710 <ip4_addr_isbroadcast_u32>
 8014514:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014516:	2b00      	cmp	r3, #0
 8014518:	d105      	bne.n	8014526 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801451a:	68bb      	ldr	r3, [r7, #8]
 801451c:	681b      	ldr	r3, [r3, #0]
 801451e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014522:	2be0      	cmp	r3, #224	; 0xe0
 8014524:	d102      	bne.n	801452c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014526:	f06f 030f 	mvn.w	r3, #15
 801452a:	e06c      	b.n	8014606 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801452c:	78fb      	ldrb	r3, [r7, #3]
 801452e:	68fa      	ldr	r2, [r7, #12]
 8014530:	4619      	mov	r1, r3
 8014532:	68b8      	ldr	r0, [r7, #8]
 8014534:	f7ff fe56 	bl	80141e4 <etharp_find_entry>
 8014538:	4603      	mov	r3, r0
 801453a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801453c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014540:	2b00      	cmp	r3, #0
 8014542:	da02      	bge.n	801454a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014544:	8afb      	ldrh	r3, [r7, #22]
 8014546:	b25b      	sxtb	r3, r3
 8014548:	e05d      	b.n	8014606 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801454a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801454e:	4933      	ldr	r1, [pc, #204]	; (801461c <etharp_update_arp_entry+0x148>)
 8014550:	4613      	mov	r3, r2
 8014552:	005b      	lsls	r3, r3, #1
 8014554:	4413      	add	r3, r2
 8014556:	00db      	lsls	r3, r3, #3
 8014558:	440b      	add	r3, r1
 801455a:	3314      	adds	r3, #20
 801455c:	2202      	movs	r2, #2
 801455e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014560:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014564:	492d      	ldr	r1, [pc, #180]	; (801461c <etharp_update_arp_entry+0x148>)
 8014566:	4613      	mov	r3, r2
 8014568:	005b      	lsls	r3, r3, #1
 801456a:	4413      	add	r3, r2
 801456c:	00db      	lsls	r3, r3, #3
 801456e:	440b      	add	r3, r1
 8014570:	3308      	adds	r3, #8
 8014572:	68fa      	ldr	r2, [r7, #12]
 8014574:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8014576:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801457a:	4613      	mov	r3, r2
 801457c:	005b      	lsls	r3, r3, #1
 801457e:	4413      	add	r3, r2
 8014580:	00db      	lsls	r3, r3, #3
 8014582:	3308      	adds	r3, #8
 8014584:	4a25      	ldr	r2, [pc, #148]	; (801461c <etharp_update_arp_entry+0x148>)
 8014586:	4413      	add	r3, r2
 8014588:	3304      	adds	r3, #4
 801458a:	2206      	movs	r2, #6
 801458c:	6879      	ldr	r1, [r7, #4]
 801458e:	4618      	mov	r0, r3
 8014590:	f002 f844 	bl	801661c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014594:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014598:	4920      	ldr	r1, [pc, #128]	; (801461c <etharp_update_arp_entry+0x148>)
 801459a:	4613      	mov	r3, r2
 801459c:	005b      	lsls	r3, r3, #1
 801459e:	4413      	add	r3, r2
 80145a0:	00db      	lsls	r3, r3, #3
 80145a2:	440b      	add	r3, r1
 80145a4:	3312      	adds	r3, #18
 80145a6:	2200      	movs	r2, #0
 80145a8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80145aa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80145ae:	491b      	ldr	r1, [pc, #108]	; (801461c <etharp_update_arp_entry+0x148>)
 80145b0:	4613      	mov	r3, r2
 80145b2:	005b      	lsls	r3, r3, #1
 80145b4:	4413      	add	r3, r2
 80145b6:	00db      	lsls	r3, r3, #3
 80145b8:	440b      	add	r3, r1
 80145ba:	681b      	ldr	r3, [r3, #0]
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d021      	beq.n	8014604 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80145c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80145c4:	4915      	ldr	r1, [pc, #84]	; (801461c <etharp_update_arp_entry+0x148>)
 80145c6:	4613      	mov	r3, r2
 80145c8:	005b      	lsls	r3, r3, #1
 80145ca:	4413      	add	r3, r2
 80145cc:	00db      	lsls	r3, r3, #3
 80145ce:	440b      	add	r3, r1
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80145d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80145d8:	4910      	ldr	r1, [pc, #64]	; (801461c <etharp_update_arp_entry+0x148>)
 80145da:	4613      	mov	r3, r2
 80145dc:	005b      	lsls	r3, r3, #1
 80145de:	4413      	add	r3, r2
 80145e0:	00db      	lsls	r3, r3, #3
 80145e2:	440b      	add	r3, r1
 80145e4:	2200      	movs	r2, #0
 80145e6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80145ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80145f2:	9300      	str	r3, [sp, #0]
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	6939      	ldr	r1, [r7, #16]
 80145f8:	68f8      	ldr	r0, [r7, #12]
 80145fa:	f001 ff91 	bl	8016520 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80145fe:	6938      	ldr	r0, [r7, #16]
 8014600:	f7f8 ff2e 	bl	800d460 <pbuf_free>
  }
  return ERR_OK;
 8014604:	2300      	movs	r3, #0
}
 8014606:	4618      	mov	r0, r3
 8014608:	3718      	adds	r7, #24
 801460a:	46bd      	mov	sp, r7
 801460c:	bd80      	pop	{r7, pc}
 801460e:	bf00      	nop
 8014610:	0801b0dc 	.word	0x0801b0dc
 8014614:	0801b1d4 	.word	0x0801b1d4
 8014618:	0801b154 	.word	0x0801b154
 801461c:	200015c8 	.word	0x200015c8

08014620 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014620:	b580      	push	{r7, lr}
 8014622:	b084      	sub	sp, #16
 8014624:	af00      	add	r7, sp, #0
 8014626:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014628:	2300      	movs	r3, #0
 801462a:	60fb      	str	r3, [r7, #12]
 801462c:	e01e      	b.n	801466c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801462e:	4913      	ldr	r1, [pc, #76]	; (801467c <etharp_cleanup_netif+0x5c>)
 8014630:	68fa      	ldr	r2, [r7, #12]
 8014632:	4613      	mov	r3, r2
 8014634:	005b      	lsls	r3, r3, #1
 8014636:	4413      	add	r3, r2
 8014638:	00db      	lsls	r3, r3, #3
 801463a:	440b      	add	r3, r1
 801463c:	3314      	adds	r3, #20
 801463e:	781b      	ldrb	r3, [r3, #0]
 8014640:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8014642:	7afb      	ldrb	r3, [r7, #11]
 8014644:	2b00      	cmp	r3, #0
 8014646:	d00e      	beq.n	8014666 <etharp_cleanup_netif+0x46>
 8014648:	490c      	ldr	r1, [pc, #48]	; (801467c <etharp_cleanup_netif+0x5c>)
 801464a:	68fa      	ldr	r2, [r7, #12]
 801464c:	4613      	mov	r3, r2
 801464e:	005b      	lsls	r3, r3, #1
 8014650:	4413      	add	r3, r2
 8014652:	00db      	lsls	r3, r3, #3
 8014654:	440b      	add	r3, r1
 8014656:	3308      	adds	r3, #8
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	687a      	ldr	r2, [r7, #4]
 801465c:	429a      	cmp	r2, r3
 801465e:	d102      	bne.n	8014666 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014660:	68f8      	ldr	r0, [r7, #12]
 8014662:	f7ff fce5 	bl	8014030 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	3301      	adds	r3, #1
 801466a:	60fb      	str	r3, [r7, #12]
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	2b09      	cmp	r3, #9
 8014670:	dddd      	ble.n	801462e <etharp_cleanup_netif+0xe>
    }
  }
}
 8014672:	bf00      	nop
 8014674:	bf00      	nop
 8014676:	3710      	adds	r7, #16
 8014678:	46bd      	mov	sp, r7
 801467a:	bd80      	pop	{r7, pc}
 801467c:	200015c8 	.word	0x200015c8

08014680 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014680:	b5b0      	push	{r4, r5, r7, lr}
 8014682:	b08a      	sub	sp, #40	; 0x28
 8014684:	af04      	add	r7, sp, #16
 8014686:	6078      	str	r0, [r7, #4]
 8014688:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801468a:	683b      	ldr	r3, [r7, #0]
 801468c:	2b00      	cmp	r3, #0
 801468e:	d107      	bne.n	80146a0 <etharp_input+0x20>
 8014690:	4b3d      	ldr	r3, [pc, #244]	; (8014788 <etharp_input+0x108>)
 8014692:	f240 228a 	movw	r2, #650	; 0x28a
 8014696:	493d      	ldr	r1, [pc, #244]	; (801478c <etharp_input+0x10c>)
 8014698:	483d      	ldr	r0, [pc, #244]	; (8014790 <etharp_input+0x110>)
 801469a:	f001 ffef 	bl	801667c <iprintf>
 801469e:	e06f      	b.n	8014780 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	685b      	ldr	r3, [r3, #4]
 80146a4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80146a6:	693b      	ldr	r3, [r7, #16]
 80146a8:	881b      	ldrh	r3, [r3, #0]
 80146aa:	b29b      	uxth	r3, r3
 80146ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80146b0:	d10c      	bne.n	80146cc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80146b2:	693b      	ldr	r3, [r7, #16]
 80146b4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80146b6:	2b06      	cmp	r3, #6
 80146b8:	d108      	bne.n	80146cc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80146ba:	693b      	ldr	r3, [r7, #16]
 80146bc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80146be:	2b04      	cmp	r3, #4
 80146c0:	d104      	bne.n	80146cc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80146c2:	693b      	ldr	r3, [r7, #16]
 80146c4:	885b      	ldrh	r3, [r3, #2]
 80146c6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80146c8:	2b08      	cmp	r3, #8
 80146ca:	d003      	beq.n	80146d4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80146cc:	6878      	ldr	r0, [r7, #4]
 80146ce:	f7f8 fec7 	bl	800d460 <pbuf_free>
    return;
 80146d2:	e055      	b.n	8014780 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80146d4:	693b      	ldr	r3, [r7, #16]
 80146d6:	330e      	adds	r3, #14
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80146dc:	693b      	ldr	r3, [r7, #16]
 80146de:	3318      	adds	r3, #24
 80146e0:	681b      	ldr	r3, [r3, #0]
 80146e2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80146e4:	683b      	ldr	r3, [r7, #0]
 80146e6:	3304      	adds	r3, #4
 80146e8:	681b      	ldr	r3, [r3, #0]
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d102      	bne.n	80146f4 <etharp_input+0x74>
    for_us = 0;
 80146ee:	2300      	movs	r3, #0
 80146f0:	75fb      	strb	r3, [r7, #23]
 80146f2:	e009      	b.n	8014708 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80146f4:	68ba      	ldr	r2, [r7, #8]
 80146f6:	683b      	ldr	r3, [r7, #0]
 80146f8:	3304      	adds	r3, #4
 80146fa:	681b      	ldr	r3, [r3, #0]
 80146fc:	429a      	cmp	r2, r3
 80146fe:	bf0c      	ite	eq
 8014700:	2301      	moveq	r3, #1
 8014702:	2300      	movne	r3, #0
 8014704:	b2db      	uxtb	r3, r3
 8014706:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014708:	693b      	ldr	r3, [r7, #16]
 801470a:	f103 0208 	add.w	r2, r3, #8
 801470e:	7dfb      	ldrb	r3, [r7, #23]
 8014710:	2b00      	cmp	r3, #0
 8014712:	d001      	beq.n	8014718 <etharp_input+0x98>
 8014714:	2301      	movs	r3, #1
 8014716:	e000      	b.n	801471a <etharp_input+0x9a>
 8014718:	2302      	movs	r3, #2
 801471a:	f107 010c 	add.w	r1, r7, #12
 801471e:	6838      	ldr	r0, [r7, #0]
 8014720:	f7ff fed8 	bl	80144d4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014724:	693b      	ldr	r3, [r7, #16]
 8014726:	88db      	ldrh	r3, [r3, #6]
 8014728:	b29b      	uxth	r3, r3
 801472a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801472e:	d003      	beq.n	8014738 <etharp_input+0xb8>
 8014730:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014734:	d01e      	beq.n	8014774 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8014736:	e020      	b.n	801477a <etharp_input+0xfa>
      if (for_us) {
 8014738:	7dfb      	ldrb	r3, [r7, #23]
 801473a:	2b00      	cmp	r3, #0
 801473c:	d01c      	beq.n	8014778 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801473e:	683b      	ldr	r3, [r7, #0]
 8014740:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014744:	693b      	ldr	r3, [r7, #16]
 8014746:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801474a:	683b      	ldr	r3, [r7, #0]
 801474c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8014750:	683b      	ldr	r3, [r7, #0]
 8014752:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014754:	693a      	ldr	r2, [r7, #16]
 8014756:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014758:	2102      	movs	r1, #2
 801475a:	9103      	str	r1, [sp, #12]
 801475c:	f107 010c 	add.w	r1, r7, #12
 8014760:	9102      	str	r1, [sp, #8]
 8014762:	9201      	str	r2, [sp, #4]
 8014764:	9300      	str	r3, [sp, #0]
 8014766:	462b      	mov	r3, r5
 8014768:	4622      	mov	r2, r4
 801476a:	4601      	mov	r1, r0
 801476c:	6838      	ldr	r0, [r7, #0]
 801476e:	f000 faeb 	bl	8014d48 <etharp_raw>
      break;
 8014772:	e001      	b.n	8014778 <etharp_input+0xf8>
      break;
 8014774:	bf00      	nop
 8014776:	e000      	b.n	801477a <etharp_input+0xfa>
      break;
 8014778:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801477a:	6878      	ldr	r0, [r7, #4]
 801477c:	f7f8 fe70 	bl	800d460 <pbuf_free>
}
 8014780:	3718      	adds	r7, #24
 8014782:	46bd      	mov	sp, r7
 8014784:	bdb0      	pop	{r4, r5, r7, pc}
 8014786:	bf00      	nop
 8014788:	0801b0dc 	.word	0x0801b0dc
 801478c:	0801b22c 	.word	0x0801b22c
 8014790:	0801b154 	.word	0x0801b154

08014794 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014794:	b580      	push	{r7, lr}
 8014796:	b086      	sub	sp, #24
 8014798:	af02      	add	r7, sp, #8
 801479a:	60f8      	str	r0, [r7, #12]
 801479c:	60b9      	str	r1, [r7, #8]
 801479e:	4613      	mov	r3, r2
 80147a0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80147a2:	79fa      	ldrb	r2, [r7, #7]
 80147a4:	4944      	ldr	r1, [pc, #272]	; (80148b8 <etharp_output_to_arp_index+0x124>)
 80147a6:	4613      	mov	r3, r2
 80147a8:	005b      	lsls	r3, r3, #1
 80147aa:	4413      	add	r3, r2
 80147ac:	00db      	lsls	r3, r3, #3
 80147ae:	440b      	add	r3, r1
 80147b0:	3314      	adds	r3, #20
 80147b2:	781b      	ldrb	r3, [r3, #0]
 80147b4:	2b01      	cmp	r3, #1
 80147b6:	d806      	bhi.n	80147c6 <etharp_output_to_arp_index+0x32>
 80147b8:	4b40      	ldr	r3, [pc, #256]	; (80148bc <etharp_output_to_arp_index+0x128>)
 80147ba:	f240 22ee 	movw	r2, #750	; 0x2ee
 80147be:	4940      	ldr	r1, [pc, #256]	; (80148c0 <etharp_output_to_arp_index+0x12c>)
 80147c0:	4840      	ldr	r0, [pc, #256]	; (80148c4 <etharp_output_to_arp_index+0x130>)
 80147c2:	f001 ff5b 	bl	801667c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80147c6:	79fa      	ldrb	r2, [r7, #7]
 80147c8:	493b      	ldr	r1, [pc, #236]	; (80148b8 <etharp_output_to_arp_index+0x124>)
 80147ca:	4613      	mov	r3, r2
 80147cc:	005b      	lsls	r3, r3, #1
 80147ce:	4413      	add	r3, r2
 80147d0:	00db      	lsls	r3, r3, #3
 80147d2:	440b      	add	r3, r1
 80147d4:	3314      	adds	r3, #20
 80147d6:	781b      	ldrb	r3, [r3, #0]
 80147d8:	2b02      	cmp	r3, #2
 80147da:	d153      	bne.n	8014884 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80147dc:	79fa      	ldrb	r2, [r7, #7]
 80147de:	4936      	ldr	r1, [pc, #216]	; (80148b8 <etharp_output_to_arp_index+0x124>)
 80147e0:	4613      	mov	r3, r2
 80147e2:	005b      	lsls	r3, r3, #1
 80147e4:	4413      	add	r3, r2
 80147e6:	00db      	lsls	r3, r3, #3
 80147e8:	440b      	add	r3, r1
 80147ea:	3312      	adds	r3, #18
 80147ec:	881b      	ldrh	r3, [r3, #0]
 80147ee:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80147f2:	d919      	bls.n	8014828 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80147f4:	79fa      	ldrb	r2, [r7, #7]
 80147f6:	4613      	mov	r3, r2
 80147f8:	005b      	lsls	r3, r3, #1
 80147fa:	4413      	add	r3, r2
 80147fc:	00db      	lsls	r3, r3, #3
 80147fe:	4a2e      	ldr	r2, [pc, #184]	; (80148b8 <etharp_output_to_arp_index+0x124>)
 8014800:	4413      	add	r3, r2
 8014802:	3304      	adds	r3, #4
 8014804:	4619      	mov	r1, r3
 8014806:	68f8      	ldr	r0, [r7, #12]
 8014808:	f000 fb4c 	bl	8014ea4 <etharp_request>
 801480c:	4603      	mov	r3, r0
 801480e:	2b00      	cmp	r3, #0
 8014810:	d138      	bne.n	8014884 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014812:	79fa      	ldrb	r2, [r7, #7]
 8014814:	4928      	ldr	r1, [pc, #160]	; (80148b8 <etharp_output_to_arp_index+0x124>)
 8014816:	4613      	mov	r3, r2
 8014818:	005b      	lsls	r3, r3, #1
 801481a:	4413      	add	r3, r2
 801481c:	00db      	lsls	r3, r3, #3
 801481e:	440b      	add	r3, r1
 8014820:	3314      	adds	r3, #20
 8014822:	2203      	movs	r2, #3
 8014824:	701a      	strb	r2, [r3, #0]
 8014826:	e02d      	b.n	8014884 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014828:	79fa      	ldrb	r2, [r7, #7]
 801482a:	4923      	ldr	r1, [pc, #140]	; (80148b8 <etharp_output_to_arp_index+0x124>)
 801482c:	4613      	mov	r3, r2
 801482e:	005b      	lsls	r3, r3, #1
 8014830:	4413      	add	r3, r2
 8014832:	00db      	lsls	r3, r3, #3
 8014834:	440b      	add	r3, r1
 8014836:	3312      	adds	r3, #18
 8014838:	881b      	ldrh	r3, [r3, #0]
 801483a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801483e:	d321      	bcc.n	8014884 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014840:	79fa      	ldrb	r2, [r7, #7]
 8014842:	4613      	mov	r3, r2
 8014844:	005b      	lsls	r3, r3, #1
 8014846:	4413      	add	r3, r2
 8014848:	00db      	lsls	r3, r3, #3
 801484a:	4a1b      	ldr	r2, [pc, #108]	; (80148b8 <etharp_output_to_arp_index+0x124>)
 801484c:	4413      	add	r3, r2
 801484e:	1d19      	adds	r1, r3, #4
 8014850:	79fa      	ldrb	r2, [r7, #7]
 8014852:	4613      	mov	r3, r2
 8014854:	005b      	lsls	r3, r3, #1
 8014856:	4413      	add	r3, r2
 8014858:	00db      	lsls	r3, r3, #3
 801485a:	3308      	adds	r3, #8
 801485c:	4a16      	ldr	r2, [pc, #88]	; (80148b8 <etharp_output_to_arp_index+0x124>)
 801485e:	4413      	add	r3, r2
 8014860:	3304      	adds	r3, #4
 8014862:	461a      	mov	r2, r3
 8014864:	68f8      	ldr	r0, [r7, #12]
 8014866:	f000 fafb 	bl	8014e60 <etharp_request_dst>
 801486a:	4603      	mov	r3, r0
 801486c:	2b00      	cmp	r3, #0
 801486e:	d109      	bne.n	8014884 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014870:	79fa      	ldrb	r2, [r7, #7]
 8014872:	4911      	ldr	r1, [pc, #68]	; (80148b8 <etharp_output_to_arp_index+0x124>)
 8014874:	4613      	mov	r3, r2
 8014876:	005b      	lsls	r3, r3, #1
 8014878:	4413      	add	r3, r2
 801487a:	00db      	lsls	r3, r3, #3
 801487c:	440b      	add	r3, r1
 801487e:	3314      	adds	r3, #20
 8014880:	2203      	movs	r2, #3
 8014882:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014884:	68fb      	ldr	r3, [r7, #12]
 8014886:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801488a:	79fa      	ldrb	r2, [r7, #7]
 801488c:	4613      	mov	r3, r2
 801488e:	005b      	lsls	r3, r3, #1
 8014890:	4413      	add	r3, r2
 8014892:	00db      	lsls	r3, r3, #3
 8014894:	3308      	adds	r3, #8
 8014896:	4a08      	ldr	r2, [pc, #32]	; (80148b8 <etharp_output_to_arp_index+0x124>)
 8014898:	4413      	add	r3, r2
 801489a:	3304      	adds	r3, #4
 801489c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80148a0:	9200      	str	r2, [sp, #0]
 80148a2:	460a      	mov	r2, r1
 80148a4:	68b9      	ldr	r1, [r7, #8]
 80148a6:	68f8      	ldr	r0, [r7, #12]
 80148a8:	f001 fe3a 	bl	8016520 <ethernet_output>
 80148ac:	4603      	mov	r3, r0
}
 80148ae:	4618      	mov	r0, r3
 80148b0:	3710      	adds	r7, #16
 80148b2:	46bd      	mov	sp, r7
 80148b4:	bd80      	pop	{r7, pc}
 80148b6:	bf00      	nop
 80148b8:	200015c8 	.word	0x200015c8
 80148bc:	0801b0dc 	.word	0x0801b0dc
 80148c0:	0801b24c 	.word	0x0801b24c
 80148c4:	0801b154 	.word	0x0801b154

080148c8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80148c8:	b580      	push	{r7, lr}
 80148ca:	b08a      	sub	sp, #40	; 0x28
 80148cc:	af02      	add	r7, sp, #8
 80148ce:	60f8      	str	r0, [r7, #12]
 80148d0:	60b9      	str	r1, [r7, #8]
 80148d2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d106      	bne.n	80148ec <etharp_output+0x24>
 80148de:	4b73      	ldr	r3, [pc, #460]	; (8014aac <etharp_output+0x1e4>)
 80148e0:	f240 321e 	movw	r2, #798	; 0x31e
 80148e4:	4972      	ldr	r1, [pc, #456]	; (8014ab0 <etharp_output+0x1e8>)
 80148e6:	4873      	ldr	r0, [pc, #460]	; (8014ab4 <etharp_output+0x1ec>)
 80148e8:	f001 fec8 	bl	801667c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80148ec:	68bb      	ldr	r3, [r7, #8]
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d106      	bne.n	8014900 <etharp_output+0x38>
 80148f2:	4b6e      	ldr	r3, [pc, #440]	; (8014aac <etharp_output+0x1e4>)
 80148f4:	f240 321f 	movw	r2, #799	; 0x31f
 80148f8:	496f      	ldr	r1, [pc, #444]	; (8014ab8 <etharp_output+0x1f0>)
 80148fa:	486e      	ldr	r0, [pc, #440]	; (8014ab4 <etharp_output+0x1ec>)
 80148fc:	f001 febe 	bl	801667c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	2b00      	cmp	r3, #0
 8014904:	d106      	bne.n	8014914 <etharp_output+0x4c>
 8014906:	4b69      	ldr	r3, [pc, #420]	; (8014aac <etharp_output+0x1e4>)
 8014908:	f44f 7248 	mov.w	r2, #800	; 0x320
 801490c:	496b      	ldr	r1, [pc, #428]	; (8014abc <etharp_output+0x1f4>)
 801490e:	4869      	ldr	r0, [pc, #420]	; (8014ab4 <etharp_output+0x1ec>)
 8014910:	f001 feb4 	bl	801667c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	681b      	ldr	r3, [r3, #0]
 8014918:	68f9      	ldr	r1, [r7, #12]
 801491a:	4618      	mov	r0, r3
 801491c:	f000 fef8 	bl	8015710 <ip4_addr_isbroadcast_u32>
 8014920:	4603      	mov	r3, r0
 8014922:	2b00      	cmp	r3, #0
 8014924:	d002      	beq.n	801492c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014926:	4b66      	ldr	r3, [pc, #408]	; (8014ac0 <etharp_output+0x1f8>)
 8014928:	61fb      	str	r3, [r7, #28]
 801492a:	e0af      	b.n	8014a8c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	681b      	ldr	r3, [r3, #0]
 8014930:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014934:	2be0      	cmp	r3, #224	; 0xe0
 8014936:	d118      	bne.n	801496a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014938:	2301      	movs	r3, #1
 801493a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801493c:	2300      	movs	r3, #0
 801493e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014940:	235e      	movs	r3, #94	; 0x5e
 8014942:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	3301      	adds	r3, #1
 8014948:	781b      	ldrb	r3, [r3, #0]
 801494a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801494e:	b2db      	uxtb	r3, r3
 8014950:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	3302      	adds	r3, #2
 8014956:	781b      	ldrb	r3, [r3, #0]
 8014958:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	3303      	adds	r3, #3
 801495e:	781b      	ldrb	r3, [r3, #0]
 8014960:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014962:	f107 0310 	add.w	r3, r7, #16
 8014966:	61fb      	str	r3, [r7, #28]
 8014968:	e090      	b.n	8014a8c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	681a      	ldr	r2, [r3, #0]
 801496e:	68fb      	ldr	r3, [r7, #12]
 8014970:	3304      	adds	r3, #4
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	405a      	eors	r2, r3
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	3308      	adds	r3, #8
 801497a:	681b      	ldr	r3, [r3, #0]
 801497c:	4013      	ands	r3, r2
 801497e:	2b00      	cmp	r3, #0
 8014980:	d012      	beq.n	80149a8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	681b      	ldr	r3, [r3, #0]
 8014986:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014988:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801498c:	4293      	cmp	r3, r2
 801498e:	d00b      	beq.n	80149a8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	330c      	adds	r3, #12
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	2b00      	cmp	r3, #0
 8014998:	d003      	beq.n	80149a2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801499a:	68fb      	ldr	r3, [r7, #12]
 801499c:	330c      	adds	r3, #12
 801499e:	61bb      	str	r3, [r7, #24]
 80149a0:	e002      	b.n	80149a8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80149a2:	f06f 0303 	mvn.w	r3, #3
 80149a6:	e07d      	b.n	8014aa4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80149a8:	4b46      	ldr	r3, [pc, #280]	; (8014ac4 <etharp_output+0x1fc>)
 80149aa:	781b      	ldrb	r3, [r3, #0]
 80149ac:	4619      	mov	r1, r3
 80149ae:	4a46      	ldr	r2, [pc, #280]	; (8014ac8 <etharp_output+0x200>)
 80149b0:	460b      	mov	r3, r1
 80149b2:	005b      	lsls	r3, r3, #1
 80149b4:	440b      	add	r3, r1
 80149b6:	00db      	lsls	r3, r3, #3
 80149b8:	4413      	add	r3, r2
 80149ba:	3314      	adds	r3, #20
 80149bc:	781b      	ldrb	r3, [r3, #0]
 80149be:	2b01      	cmp	r3, #1
 80149c0:	d925      	bls.n	8014a0e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80149c2:	4b40      	ldr	r3, [pc, #256]	; (8014ac4 <etharp_output+0x1fc>)
 80149c4:	781b      	ldrb	r3, [r3, #0]
 80149c6:	4619      	mov	r1, r3
 80149c8:	4a3f      	ldr	r2, [pc, #252]	; (8014ac8 <etharp_output+0x200>)
 80149ca:	460b      	mov	r3, r1
 80149cc:	005b      	lsls	r3, r3, #1
 80149ce:	440b      	add	r3, r1
 80149d0:	00db      	lsls	r3, r3, #3
 80149d2:	4413      	add	r3, r2
 80149d4:	3308      	adds	r3, #8
 80149d6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80149d8:	68fa      	ldr	r2, [r7, #12]
 80149da:	429a      	cmp	r2, r3
 80149dc:	d117      	bne.n	8014a0e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80149de:	69bb      	ldr	r3, [r7, #24]
 80149e0:	681a      	ldr	r2, [r3, #0]
 80149e2:	4b38      	ldr	r3, [pc, #224]	; (8014ac4 <etharp_output+0x1fc>)
 80149e4:	781b      	ldrb	r3, [r3, #0]
 80149e6:	4618      	mov	r0, r3
 80149e8:	4937      	ldr	r1, [pc, #220]	; (8014ac8 <etharp_output+0x200>)
 80149ea:	4603      	mov	r3, r0
 80149ec:	005b      	lsls	r3, r3, #1
 80149ee:	4403      	add	r3, r0
 80149f0:	00db      	lsls	r3, r3, #3
 80149f2:	440b      	add	r3, r1
 80149f4:	3304      	adds	r3, #4
 80149f6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80149f8:	429a      	cmp	r2, r3
 80149fa:	d108      	bne.n	8014a0e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80149fc:	4b31      	ldr	r3, [pc, #196]	; (8014ac4 <etharp_output+0x1fc>)
 80149fe:	781b      	ldrb	r3, [r3, #0]
 8014a00:	461a      	mov	r2, r3
 8014a02:	68b9      	ldr	r1, [r7, #8]
 8014a04:	68f8      	ldr	r0, [r7, #12]
 8014a06:	f7ff fec5 	bl	8014794 <etharp_output_to_arp_index>
 8014a0a:	4603      	mov	r3, r0
 8014a0c:	e04a      	b.n	8014aa4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014a0e:	2300      	movs	r3, #0
 8014a10:	75fb      	strb	r3, [r7, #23]
 8014a12:	e031      	b.n	8014a78 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014a14:	7dfa      	ldrb	r2, [r7, #23]
 8014a16:	492c      	ldr	r1, [pc, #176]	; (8014ac8 <etharp_output+0x200>)
 8014a18:	4613      	mov	r3, r2
 8014a1a:	005b      	lsls	r3, r3, #1
 8014a1c:	4413      	add	r3, r2
 8014a1e:	00db      	lsls	r3, r3, #3
 8014a20:	440b      	add	r3, r1
 8014a22:	3314      	adds	r3, #20
 8014a24:	781b      	ldrb	r3, [r3, #0]
 8014a26:	2b01      	cmp	r3, #1
 8014a28:	d923      	bls.n	8014a72 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8014a2a:	7dfa      	ldrb	r2, [r7, #23]
 8014a2c:	4926      	ldr	r1, [pc, #152]	; (8014ac8 <etharp_output+0x200>)
 8014a2e:	4613      	mov	r3, r2
 8014a30:	005b      	lsls	r3, r3, #1
 8014a32:	4413      	add	r3, r2
 8014a34:	00db      	lsls	r3, r3, #3
 8014a36:	440b      	add	r3, r1
 8014a38:	3308      	adds	r3, #8
 8014a3a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014a3c:	68fa      	ldr	r2, [r7, #12]
 8014a3e:	429a      	cmp	r2, r3
 8014a40:	d117      	bne.n	8014a72 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014a42:	69bb      	ldr	r3, [r7, #24]
 8014a44:	6819      	ldr	r1, [r3, #0]
 8014a46:	7dfa      	ldrb	r2, [r7, #23]
 8014a48:	481f      	ldr	r0, [pc, #124]	; (8014ac8 <etharp_output+0x200>)
 8014a4a:	4613      	mov	r3, r2
 8014a4c:	005b      	lsls	r3, r3, #1
 8014a4e:	4413      	add	r3, r2
 8014a50:	00db      	lsls	r3, r3, #3
 8014a52:	4403      	add	r3, r0
 8014a54:	3304      	adds	r3, #4
 8014a56:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014a58:	4299      	cmp	r1, r3
 8014a5a:	d10a      	bne.n	8014a72 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014a5c:	4a19      	ldr	r2, [pc, #100]	; (8014ac4 <etharp_output+0x1fc>)
 8014a5e:	7dfb      	ldrb	r3, [r7, #23]
 8014a60:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014a62:	7dfb      	ldrb	r3, [r7, #23]
 8014a64:	461a      	mov	r2, r3
 8014a66:	68b9      	ldr	r1, [r7, #8]
 8014a68:	68f8      	ldr	r0, [r7, #12]
 8014a6a:	f7ff fe93 	bl	8014794 <etharp_output_to_arp_index>
 8014a6e:	4603      	mov	r3, r0
 8014a70:	e018      	b.n	8014aa4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014a72:	7dfb      	ldrb	r3, [r7, #23]
 8014a74:	3301      	adds	r3, #1
 8014a76:	75fb      	strb	r3, [r7, #23]
 8014a78:	7dfb      	ldrb	r3, [r7, #23]
 8014a7a:	2b09      	cmp	r3, #9
 8014a7c:	d9ca      	bls.n	8014a14 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014a7e:	68ba      	ldr	r2, [r7, #8]
 8014a80:	69b9      	ldr	r1, [r7, #24]
 8014a82:	68f8      	ldr	r0, [r7, #12]
 8014a84:	f000 f822 	bl	8014acc <etharp_query>
 8014a88:	4603      	mov	r3, r0
 8014a8a:	e00b      	b.n	8014aa4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8014a8c:	68fb      	ldr	r3, [r7, #12]
 8014a8e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8014a92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014a96:	9300      	str	r3, [sp, #0]
 8014a98:	69fb      	ldr	r3, [r7, #28]
 8014a9a:	68b9      	ldr	r1, [r7, #8]
 8014a9c:	68f8      	ldr	r0, [r7, #12]
 8014a9e:	f001 fd3f 	bl	8016520 <ethernet_output>
 8014aa2:	4603      	mov	r3, r0
}
 8014aa4:	4618      	mov	r0, r3
 8014aa6:	3720      	adds	r7, #32
 8014aa8:	46bd      	mov	sp, r7
 8014aaa:	bd80      	pop	{r7, pc}
 8014aac:	0801b0dc 	.word	0x0801b0dc
 8014ab0:	0801b22c 	.word	0x0801b22c
 8014ab4:	0801b154 	.word	0x0801b154
 8014ab8:	0801b27c 	.word	0x0801b27c
 8014abc:	0801b21c 	.word	0x0801b21c
 8014ac0:	0801f890 	.word	0x0801f890
 8014ac4:	200016b8 	.word	0x200016b8
 8014ac8:	200015c8 	.word	0x200015c8

08014acc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014acc:	b580      	push	{r7, lr}
 8014ace:	b08c      	sub	sp, #48	; 0x30
 8014ad0:	af02      	add	r7, sp, #8
 8014ad2:	60f8      	str	r0, [r7, #12]
 8014ad4:	60b9      	str	r1, [r7, #8]
 8014ad6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014ad8:	68fb      	ldr	r3, [r7, #12]
 8014ada:	3326      	adds	r3, #38	; 0x26
 8014adc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014ade:	23ff      	movs	r3, #255	; 0xff
 8014ae0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8014ae4:	2300      	movs	r3, #0
 8014ae6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014ae8:	68bb      	ldr	r3, [r7, #8]
 8014aea:	681b      	ldr	r3, [r3, #0]
 8014aec:	68f9      	ldr	r1, [r7, #12]
 8014aee:	4618      	mov	r0, r3
 8014af0:	f000 fe0e 	bl	8015710 <ip4_addr_isbroadcast_u32>
 8014af4:	4603      	mov	r3, r0
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d10c      	bne.n	8014b14 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014afa:	68bb      	ldr	r3, [r7, #8]
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014b02:	2be0      	cmp	r3, #224	; 0xe0
 8014b04:	d006      	beq.n	8014b14 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014b06:	68bb      	ldr	r3, [r7, #8]
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d003      	beq.n	8014b14 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014b0c:	68bb      	ldr	r3, [r7, #8]
 8014b0e:	681b      	ldr	r3, [r3, #0]
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d102      	bne.n	8014b1a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014b14:	f06f 030f 	mvn.w	r3, #15
 8014b18:	e101      	b.n	8014d1e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014b1a:	68fa      	ldr	r2, [r7, #12]
 8014b1c:	2101      	movs	r1, #1
 8014b1e:	68b8      	ldr	r0, [r7, #8]
 8014b20:	f7ff fb60 	bl	80141e4 <etharp_find_entry>
 8014b24:	4603      	mov	r3, r0
 8014b26:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014b28:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	da02      	bge.n	8014b36 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014b30:	8a7b      	ldrh	r3, [r7, #18]
 8014b32:	b25b      	sxtb	r3, r3
 8014b34:	e0f3      	b.n	8014d1e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8014b36:	8a7b      	ldrh	r3, [r7, #18]
 8014b38:	2b7e      	cmp	r3, #126	; 0x7e
 8014b3a:	d906      	bls.n	8014b4a <etharp_query+0x7e>
 8014b3c:	4b7a      	ldr	r3, [pc, #488]	; (8014d28 <etharp_query+0x25c>)
 8014b3e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8014b42:	497a      	ldr	r1, [pc, #488]	; (8014d2c <etharp_query+0x260>)
 8014b44:	487a      	ldr	r0, [pc, #488]	; (8014d30 <etharp_query+0x264>)
 8014b46:	f001 fd99 	bl	801667c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8014b4a:	8a7b      	ldrh	r3, [r7, #18]
 8014b4c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014b4e:	7c7a      	ldrb	r2, [r7, #17]
 8014b50:	4978      	ldr	r1, [pc, #480]	; (8014d34 <etharp_query+0x268>)
 8014b52:	4613      	mov	r3, r2
 8014b54:	005b      	lsls	r3, r3, #1
 8014b56:	4413      	add	r3, r2
 8014b58:	00db      	lsls	r3, r3, #3
 8014b5a:	440b      	add	r3, r1
 8014b5c:	3314      	adds	r3, #20
 8014b5e:	781b      	ldrb	r3, [r3, #0]
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d115      	bne.n	8014b90 <etharp_query+0xc4>
    is_new_entry = 1;
 8014b64:	2301      	movs	r3, #1
 8014b66:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014b68:	7c7a      	ldrb	r2, [r7, #17]
 8014b6a:	4972      	ldr	r1, [pc, #456]	; (8014d34 <etharp_query+0x268>)
 8014b6c:	4613      	mov	r3, r2
 8014b6e:	005b      	lsls	r3, r3, #1
 8014b70:	4413      	add	r3, r2
 8014b72:	00db      	lsls	r3, r3, #3
 8014b74:	440b      	add	r3, r1
 8014b76:	3314      	adds	r3, #20
 8014b78:	2201      	movs	r2, #1
 8014b7a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014b7c:	7c7a      	ldrb	r2, [r7, #17]
 8014b7e:	496d      	ldr	r1, [pc, #436]	; (8014d34 <etharp_query+0x268>)
 8014b80:	4613      	mov	r3, r2
 8014b82:	005b      	lsls	r3, r3, #1
 8014b84:	4413      	add	r3, r2
 8014b86:	00db      	lsls	r3, r3, #3
 8014b88:	440b      	add	r3, r1
 8014b8a:	3308      	adds	r3, #8
 8014b8c:	68fa      	ldr	r2, [r7, #12]
 8014b8e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014b90:	7c7a      	ldrb	r2, [r7, #17]
 8014b92:	4968      	ldr	r1, [pc, #416]	; (8014d34 <etharp_query+0x268>)
 8014b94:	4613      	mov	r3, r2
 8014b96:	005b      	lsls	r3, r3, #1
 8014b98:	4413      	add	r3, r2
 8014b9a:	00db      	lsls	r3, r3, #3
 8014b9c:	440b      	add	r3, r1
 8014b9e:	3314      	adds	r3, #20
 8014ba0:	781b      	ldrb	r3, [r3, #0]
 8014ba2:	2b01      	cmp	r3, #1
 8014ba4:	d011      	beq.n	8014bca <etharp_query+0xfe>
 8014ba6:	7c7a      	ldrb	r2, [r7, #17]
 8014ba8:	4962      	ldr	r1, [pc, #392]	; (8014d34 <etharp_query+0x268>)
 8014baa:	4613      	mov	r3, r2
 8014bac:	005b      	lsls	r3, r3, #1
 8014bae:	4413      	add	r3, r2
 8014bb0:	00db      	lsls	r3, r3, #3
 8014bb2:	440b      	add	r3, r1
 8014bb4:	3314      	adds	r3, #20
 8014bb6:	781b      	ldrb	r3, [r3, #0]
 8014bb8:	2b01      	cmp	r3, #1
 8014bba:	d806      	bhi.n	8014bca <etharp_query+0xfe>
 8014bbc:	4b5a      	ldr	r3, [pc, #360]	; (8014d28 <etharp_query+0x25c>)
 8014bbe:	f240 32cd 	movw	r2, #973	; 0x3cd
 8014bc2:	495d      	ldr	r1, [pc, #372]	; (8014d38 <etharp_query+0x26c>)
 8014bc4:	485a      	ldr	r0, [pc, #360]	; (8014d30 <etharp_query+0x264>)
 8014bc6:	f001 fd59 	bl	801667c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8014bca:	6a3b      	ldr	r3, [r7, #32]
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d102      	bne.n	8014bd6 <etharp_query+0x10a>
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d10c      	bne.n	8014bf0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014bd6:	68b9      	ldr	r1, [r7, #8]
 8014bd8:	68f8      	ldr	r0, [r7, #12]
 8014bda:	f000 f963 	bl	8014ea4 <etharp_request>
 8014bde:	4603      	mov	r3, r0
 8014be0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d102      	bne.n	8014bf0 <etharp_query+0x124>
      return result;
 8014bea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014bee:	e096      	b.n	8014d1e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d106      	bne.n	8014c04 <etharp_query+0x138>
 8014bf6:	4b4c      	ldr	r3, [pc, #304]	; (8014d28 <etharp_query+0x25c>)
 8014bf8:	f240 32e1 	movw	r2, #993	; 0x3e1
 8014bfc:	494f      	ldr	r1, [pc, #316]	; (8014d3c <etharp_query+0x270>)
 8014bfe:	484c      	ldr	r0, [pc, #304]	; (8014d30 <etharp_query+0x264>)
 8014c00:	f001 fd3c 	bl	801667c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014c04:	7c7a      	ldrb	r2, [r7, #17]
 8014c06:	494b      	ldr	r1, [pc, #300]	; (8014d34 <etharp_query+0x268>)
 8014c08:	4613      	mov	r3, r2
 8014c0a:	005b      	lsls	r3, r3, #1
 8014c0c:	4413      	add	r3, r2
 8014c0e:	00db      	lsls	r3, r3, #3
 8014c10:	440b      	add	r3, r1
 8014c12:	3314      	adds	r3, #20
 8014c14:	781b      	ldrb	r3, [r3, #0]
 8014c16:	2b01      	cmp	r3, #1
 8014c18:	d917      	bls.n	8014c4a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014c1a:	4a49      	ldr	r2, [pc, #292]	; (8014d40 <etharp_query+0x274>)
 8014c1c:	7c7b      	ldrb	r3, [r7, #17]
 8014c1e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014c20:	7c7a      	ldrb	r2, [r7, #17]
 8014c22:	4613      	mov	r3, r2
 8014c24:	005b      	lsls	r3, r3, #1
 8014c26:	4413      	add	r3, r2
 8014c28:	00db      	lsls	r3, r3, #3
 8014c2a:	3308      	adds	r3, #8
 8014c2c:	4a41      	ldr	r2, [pc, #260]	; (8014d34 <etharp_query+0x268>)
 8014c2e:	4413      	add	r3, r2
 8014c30:	3304      	adds	r3, #4
 8014c32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014c36:	9200      	str	r2, [sp, #0]
 8014c38:	697a      	ldr	r2, [r7, #20]
 8014c3a:	6879      	ldr	r1, [r7, #4]
 8014c3c:	68f8      	ldr	r0, [r7, #12]
 8014c3e:	f001 fc6f 	bl	8016520 <ethernet_output>
 8014c42:	4603      	mov	r3, r0
 8014c44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014c48:	e067      	b.n	8014d1a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014c4a:	7c7a      	ldrb	r2, [r7, #17]
 8014c4c:	4939      	ldr	r1, [pc, #228]	; (8014d34 <etharp_query+0x268>)
 8014c4e:	4613      	mov	r3, r2
 8014c50:	005b      	lsls	r3, r3, #1
 8014c52:	4413      	add	r3, r2
 8014c54:	00db      	lsls	r3, r3, #3
 8014c56:	440b      	add	r3, r1
 8014c58:	3314      	adds	r3, #20
 8014c5a:	781b      	ldrb	r3, [r3, #0]
 8014c5c:	2b01      	cmp	r3, #1
 8014c5e:	d15c      	bne.n	8014d1a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014c60:	2300      	movs	r3, #0
 8014c62:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014c68:	e01c      	b.n	8014ca4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014c6a:	69fb      	ldr	r3, [r7, #28]
 8014c6c:	895a      	ldrh	r2, [r3, #10]
 8014c6e:	69fb      	ldr	r3, [r7, #28]
 8014c70:	891b      	ldrh	r3, [r3, #8]
 8014c72:	429a      	cmp	r2, r3
 8014c74:	d10a      	bne.n	8014c8c <etharp_query+0x1c0>
 8014c76:	69fb      	ldr	r3, [r7, #28]
 8014c78:	681b      	ldr	r3, [r3, #0]
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d006      	beq.n	8014c8c <etharp_query+0x1c0>
 8014c7e:	4b2a      	ldr	r3, [pc, #168]	; (8014d28 <etharp_query+0x25c>)
 8014c80:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8014c84:	492f      	ldr	r1, [pc, #188]	; (8014d44 <etharp_query+0x278>)
 8014c86:	482a      	ldr	r0, [pc, #168]	; (8014d30 <etharp_query+0x264>)
 8014c88:	f001 fcf8 	bl	801667c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014c8c:	69fb      	ldr	r3, [r7, #28]
 8014c8e:	7b1b      	ldrb	r3, [r3, #12]
 8014c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d002      	beq.n	8014c9e <etharp_query+0x1d2>
        copy_needed = 1;
 8014c98:	2301      	movs	r3, #1
 8014c9a:	61bb      	str	r3, [r7, #24]
        break;
 8014c9c:	e005      	b.n	8014caa <etharp_query+0x1de>
      }
      p = p->next;
 8014c9e:	69fb      	ldr	r3, [r7, #28]
 8014ca0:	681b      	ldr	r3, [r3, #0]
 8014ca2:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014ca4:	69fb      	ldr	r3, [r7, #28]
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d1df      	bne.n	8014c6a <etharp_query+0x19e>
    }
    if (copy_needed) {
 8014caa:	69bb      	ldr	r3, [r7, #24]
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d007      	beq.n	8014cc0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014cb0:	687a      	ldr	r2, [r7, #4]
 8014cb2:	f44f 7120 	mov.w	r1, #640	; 0x280
 8014cb6:	200e      	movs	r0, #14
 8014cb8:	f7f8 fe2e 	bl	800d918 <pbuf_clone>
 8014cbc:	61f8      	str	r0, [r7, #28]
 8014cbe:	e004      	b.n	8014cca <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014cc4:	69f8      	ldr	r0, [r7, #28]
 8014cc6:	f7f8 fc6b 	bl	800d5a0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014cca:	69fb      	ldr	r3, [r7, #28]
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d021      	beq.n	8014d14 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014cd0:	7c7a      	ldrb	r2, [r7, #17]
 8014cd2:	4918      	ldr	r1, [pc, #96]	; (8014d34 <etharp_query+0x268>)
 8014cd4:	4613      	mov	r3, r2
 8014cd6:	005b      	lsls	r3, r3, #1
 8014cd8:	4413      	add	r3, r2
 8014cda:	00db      	lsls	r3, r3, #3
 8014cdc:	440b      	add	r3, r1
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d00a      	beq.n	8014cfa <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014ce4:	7c7a      	ldrb	r2, [r7, #17]
 8014ce6:	4913      	ldr	r1, [pc, #76]	; (8014d34 <etharp_query+0x268>)
 8014ce8:	4613      	mov	r3, r2
 8014cea:	005b      	lsls	r3, r3, #1
 8014cec:	4413      	add	r3, r2
 8014cee:	00db      	lsls	r3, r3, #3
 8014cf0:	440b      	add	r3, r1
 8014cf2:	681b      	ldr	r3, [r3, #0]
 8014cf4:	4618      	mov	r0, r3
 8014cf6:	f7f8 fbb3 	bl	800d460 <pbuf_free>
      }
      arp_table[i].q = p;
 8014cfa:	7c7a      	ldrb	r2, [r7, #17]
 8014cfc:	490d      	ldr	r1, [pc, #52]	; (8014d34 <etharp_query+0x268>)
 8014cfe:	4613      	mov	r3, r2
 8014d00:	005b      	lsls	r3, r3, #1
 8014d02:	4413      	add	r3, r2
 8014d04:	00db      	lsls	r3, r3, #3
 8014d06:	440b      	add	r3, r1
 8014d08:	69fa      	ldr	r2, [r7, #28]
 8014d0a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014d0c:	2300      	movs	r3, #0
 8014d0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014d12:	e002      	b.n	8014d1a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014d14:	23ff      	movs	r3, #255	; 0xff
 8014d16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8014d1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014d1e:	4618      	mov	r0, r3
 8014d20:	3728      	adds	r7, #40	; 0x28
 8014d22:	46bd      	mov	sp, r7
 8014d24:	bd80      	pop	{r7, pc}
 8014d26:	bf00      	nop
 8014d28:	0801b0dc 	.word	0x0801b0dc
 8014d2c:	0801b288 	.word	0x0801b288
 8014d30:	0801b154 	.word	0x0801b154
 8014d34:	200015c8 	.word	0x200015c8
 8014d38:	0801b298 	.word	0x0801b298
 8014d3c:	0801b27c 	.word	0x0801b27c
 8014d40:	200016b8 	.word	0x200016b8
 8014d44:	0801b2c0 	.word	0x0801b2c0

08014d48 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014d48:	b580      	push	{r7, lr}
 8014d4a:	b08a      	sub	sp, #40	; 0x28
 8014d4c:	af02      	add	r7, sp, #8
 8014d4e:	60f8      	str	r0, [r7, #12]
 8014d50:	60b9      	str	r1, [r7, #8]
 8014d52:	607a      	str	r2, [r7, #4]
 8014d54:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014d56:	2300      	movs	r3, #0
 8014d58:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014d5a:	68fb      	ldr	r3, [r7, #12]
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d106      	bne.n	8014d6e <etharp_raw+0x26>
 8014d60:	4b3a      	ldr	r3, [pc, #232]	; (8014e4c <etharp_raw+0x104>)
 8014d62:	f240 4257 	movw	r2, #1111	; 0x457
 8014d66:	493a      	ldr	r1, [pc, #232]	; (8014e50 <etharp_raw+0x108>)
 8014d68:	483a      	ldr	r0, [pc, #232]	; (8014e54 <etharp_raw+0x10c>)
 8014d6a:	f001 fc87 	bl	801667c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014d6e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014d72:	211c      	movs	r1, #28
 8014d74:	200e      	movs	r0, #14
 8014d76:	f7f8 f88f 	bl	800ce98 <pbuf_alloc>
 8014d7a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014d7c:	69bb      	ldr	r3, [r7, #24]
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d102      	bne.n	8014d88 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014d82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014d86:	e05d      	b.n	8014e44 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014d88:	69bb      	ldr	r3, [r7, #24]
 8014d8a:	895b      	ldrh	r3, [r3, #10]
 8014d8c:	2b1b      	cmp	r3, #27
 8014d8e:	d806      	bhi.n	8014d9e <etharp_raw+0x56>
 8014d90:	4b2e      	ldr	r3, [pc, #184]	; (8014e4c <etharp_raw+0x104>)
 8014d92:	f240 4262 	movw	r2, #1122	; 0x462
 8014d96:	4930      	ldr	r1, [pc, #192]	; (8014e58 <etharp_raw+0x110>)
 8014d98:	482e      	ldr	r0, [pc, #184]	; (8014e54 <etharp_raw+0x10c>)
 8014d9a:	f001 fc6f 	bl	801667c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014d9e:	69bb      	ldr	r3, [r7, #24]
 8014da0:	685b      	ldr	r3, [r3, #4]
 8014da2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014da4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014da6:	4618      	mov	r0, r3
 8014da8:	f7f6 ffc8 	bl	800bd3c <lwip_htons>
 8014dac:	4603      	mov	r3, r0
 8014dae:	461a      	mov	r2, r3
 8014db0:	697b      	ldr	r3, [r7, #20]
 8014db2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014db4:	68fb      	ldr	r3, [r7, #12]
 8014db6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014dba:	2b06      	cmp	r3, #6
 8014dbc:	d006      	beq.n	8014dcc <etharp_raw+0x84>
 8014dbe:	4b23      	ldr	r3, [pc, #140]	; (8014e4c <etharp_raw+0x104>)
 8014dc0:	f240 4269 	movw	r2, #1129	; 0x469
 8014dc4:	4925      	ldr	r1, [pc, #148]	; (8014e5c <etharp_raw+0x114>)
 8014dc6:	4823      	ldr	r0, [pc, #140]	; (8014e54 <etharp_raw+0x10c>)
 8014dc8:	f001 fc58 	bl	801667c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014dcc:	697b      	ldr	r3, [r7, #20]
 8014dce:	3308      	adds	r3, #8
 8014dd0:	2206      	movs	r2, #6
 8014dd2:	6839      	ldr	r1, [r7, #0]
 8014dd4:	4618      	mov	r0, r3
 8014dd6:	f001 fc21 	bl	801661c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014dda:	697b      	ldr	r3, [r7, #20]
 8014ddc:	3312      	adds	r3, #18
 8014dde:	2206      	movs	r2, #6
 8014de0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014de2:	4618      	mov	r0, r3
 8014de4:	f001 fc1a 	bl	801661c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014de8:	697b      	ldr	r3, [r7, #20]
 8014dea:	330e      	adds	r3, #14
 8014dec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014dee:	6812      	ldr	r2, [r2, #0]
 8014df0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014df2:	697b      	ldr	r3, [r7, #20]
 8014df4:	3318      	adds	r3, #24
 8014df6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014df8:	6812      	ldr	r2, [r2, #0]
 8014dfa:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014dfc:	697b      	ldr	r3, [r7, #20]
 8014dfe:	2200      	movs	r2, #0
 8014e00:	701a      	strb	r2, [r3, #0]
 8014e02:	2200      	movs	r2, #0
 8014e04:	f042 0201 	orr.w	r2, r2, #1
 8014e08:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014e0a:	697b      	ldr	r3, [r7, #20]
 8014e0c:	2200      	movs	r2, #0
 8014e0e:	f042 0208 	orr.w	r2, r2, #8
 8014e12:	709a      	strb	r2, [r3, #2]
 8014e14:	2200      	movs	r2, #0
 8014e16:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014e18:	697b      	ldr	r3, [r7, #20]
 8014e1a:	2206      	movs	r2, #6
 8014e1c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014e1e:	697b      	ldr	r3, [r7, #20]
 8014e20:	2204      	movs	r2, #4
 8014e22:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014e24:	f640 0306 	movw	r3, #2054	; 0x806
 8014e28:	9300      	str	r3, [sp, #0]
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	68ba      	ldr	r2, [r7, #8]
 8014e2e:	69b9      	ldr	r1, [r7, #24]
 8014e30:	68f8      	ldr	r0, [r7, #12]
 8014e32:	f001 fb75 	bl	8016520 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014e36:	69b8      	ldr	r0, [r7, #24]
 8014e38:	f7f8 fb12 	bl	800d460 <pbuf_free>
  p = NULL;
 8014e3c:	2300      	movs	r3, #0
 8014e3e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014e40:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014e44:	4618      	mov	r0, r3
 8014e46:	3720      	adds	r7, #32
 8014e48:	46bd      	mov	sp, r7
 8014e4a:	bd80      	pop	{r7, pc}
 8014e4c:	0801b0dc 	.word	0x0801b0dc
 8014e50:	0801b22c 	.word	0x0801b22c
 8014e54:	0801b154 	.word	0x0801b154
 8014e58:	0801b2dc 	.word	0x0801b2dc
 8014e5c:	0801b310 	.word	0x0801b310

08014e60 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014e60:	b580      	push	{r7, lr}
 8014e62:	b088      	sub	sp, #32
 8014e64:	af04      	add	r7, sp, #16
 8014e66:	60f8      	str	r0, [r7, #12]
 8014e68:	60b9      	str	r1, [r7, #8]
 8014e6a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014e6c:	68fb      	ldr	r3, [r7, #12]
 8014e6e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014e72:	68fb      	ldr	r3, [r7, #12]
 8014e74:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014e7c:	2201      	movs	r2, #1
 8014e7e:	9203      	str	r2, [sp, #12]
 8014e80:	68ba      	ldr	r2, [r7, #8]
 8014e82:	9202      	str	r2, [sp, #8]
 8014e84:	4a06      	ldr	r2, [pc, #24]	; (8014ea0 <etharp_request_dst+0x40>)
 8014e86:	9201      	str	r2, [sp, #4]
 8014e88:	9300      	str	r3, [sp, #0]
 8014e8a:	4603      	mov	r3, r0
 8014e8c:	687a      	ldr	r2, [r7, #4]
 8014e8e:	68f8      	ldr	r0, [r7, #12]
 8014e90:	f7ff ff5a 	bl	8014d48 <etharp_raw>
 8014e94:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014e96:	4618      	mov	r0, r3
 8014e98:	3710      	adds	r7, #16
 8014e9a:	46bd      	mov	sp, r7
 8014e9c:	bd80      	pop	{r7, pc}
 8014e9e:	bf00      	nop
 8014ea0:	0801f898 	.word	0x0801f898

08014ea4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014ea4:	b580      	push	{r7, lr}
 8014ea6:	b082      	sub	sp, #8
 8014ea8:	af00      	add	r7, sp, #0
 8014eaa:	6078      	str	r0, [r7, #4]
 8014eac:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014eae:	4a05      	ldr	r2, [pc, #20]	; (8014ec4 <etharp_request+0x20>)
 8014eb0:	6839      	ldr	r1, [r7, #0]
 8014eb2:	6878      	ldr	r0, [r7, #4]
 8014eb4:	f7ff ffd4 	bl	8014e60 <etharp_request_dst>
 8014eb8:	4603      	mov	r3, r0
}
 8014eba:	4618      	mov	r0, r3
 8014ebc:	3708      	adds	r7, #8
 8014ebe:	46bd      	mov	sp, r7
 8014ec0:	bd80      	pop	{r7, pc}
 8014ec2:	bf00      	nop
 8014ec4:	0801f890 	.word	0x0801f890

08014ec8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014ec8:	b580      	push	{r7, lr}
 8014eca:	b08e      	sub	sp, #56	; 0x38
 8014ecc:	af04      	add	r7, sp, #16
 8014ece:	6078      	str	r0, [r7, #4]
 8014ed0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014ed2:	4b79      	ldr	r3, [pc, #484]	; (80150b8 <icmp_input+0x1f0>)
 8014ed4:	689b      	ldr	r3, [r3, #8]
 8014ed6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014eda:	781b      	ldrb	r3, [r3, #0]
 8014edc:	f003 030f 	and.w	r3, r3, #15
 8014ee0:	b2db      	uxtb	r3, r3
 8014ee2:	009b      	lsls	r3, r3, #2
 8014ee4:	b2db      	uxtb	r3, r3
 8014ee6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8014ee8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014eea:	2b13      	cmp	r3, #19
 8014eec:	f240 80cd 	bls.w	801508a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	895b      	ldrh	r3, [r3, #10]
 8014ef4:	2b03      	cmp	r3, #3
 8014ef6:	f240 80ca 	bls.w	801508e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	685b      	ldr	r3, [r3, #4]
 8014efe:	781b      	ldrb	r3, [r3, #0]
 8014f00:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014f04:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	f000 80b7 	beq.w	801507c <icmp_input+0x1b4>
 8014f0e:	2b08      	cmp	r3, #8
 8014f10:	f040 80b7 	bne.w	8015082 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014f14:	4b69      	ldr	r3, [pc, #420]	; (80150bc <icmp_input+0x1f4>)
 8014f16:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014f18:	4b67      	ldr	r3, [pc, #412]	; (80150b8 <icmp_input+0x1f0>)
 8014f1a:	695b      	ldr	r3, [r3, #20]
 8014f1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014f20:	2be0      	cmp	r3, #224	; 0xe0
 8014f22:	f000 80bb 	beq.w	801509c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014f26:	4b64      	ldr	r3, [pc, #400]	; (80150b8 <icmp_input+0x1f0>)
 8014f28:	695b      	ldr	r3, [r3, #20]
 8014f2a:	4a63      	ldr	r2, [pc, #396]	; (80150b8 <icmp_input+0x1f0>)
 8014f2c:	6812      	ldr	r2, [r2, #0]
 8014f2e:	4611      	mov	r1, r2
 8014f30:	4618      	mov	r0, r3
 8014f32:	f000 fbed 	bl	8015710 <ip4_addr_isbroadcast_u32>
 8014f36:	4603      	mov	r3, r0
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	f040 80b1 	bne.w	80150a0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	891b      	ldrh	r3, [r3, #8]
 8014f42:	2b07      	cmp	r3, #7
 8014f44:	f240 80a5 	bls.w	8015092 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014f48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014f4a:	330e      	adds	r3, #14
 8014f4c:	4619      	mov	r1, r3
 8014f4e:	6878      	ldr	r0, [r7, #4]
 8014f50:	f7f8 f9f0 	bl	800d334 <pbuf_add_header>
 8014f54:	4603      	mov	r3, r0
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d04b      	beq.n	8014ff2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	891a      	ldrh	r2, [r3, #8]
 8014f5e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014f60:	4413      	add	r3, r2
 8014f62:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	891b      	ldrh	r3, [r3, #8]
 8014f68:	8b7a      	ldrh	r2, [r7, #26]
 8014f6a:	429a      	cmp	r2, r3
 8014f6c:	f0c0 809a 	bcc.w	80150a4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014f70:	8b7b      	ldrh	r3, [r7, #26]
 8014f72:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014f76:	4619      	mov	r1, r3
 8014f78:	200e      	movs	r0, #14
 8014f7a:	f7f7 ff8d 	bl	800ce98 <pbuf_alloc>
 8014f7e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014f80:	697b      	ldr	r3, [r7, #20]
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	f000 8090 	beq.w	80150a8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014f88:	697b      	ldr	r3, [r7, #20]
 8014f8a:	895b      	ldrh	r3, [r3, #10]
 8014f8c:	461a      	mov	r2, r3
 8014f8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014f90:	3308      	adds	r3, #8
 8014f92:	429a      	cmp	r2, r3
 8014f94:	d203      	bcs.n	8014f9e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8014f96:	6978      	ldr	r0, [r7, #20]
 8014f98:	f7f8 fa62 	bl	800d460 <pbuf_free>
          goto icmperr;
 8014f9c:	e085      	b.n	80150aa <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014f9e:	697b      	ldr	r3, [r7, #20]
 8014fa0:	685b      	ldr	r3, [r3, #4]
 8014fa2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014fa4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014fa6:	4618      	mov	r0, r3
 8014fa8:	f001 fb38 	bl	801661c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014fac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014fae:	4619      	mov	r1, r3
 8014fb0:	6978      	ldr	r0, [r7, #20]
 8014fb2:	f7f8 f9cf 	bl	800d354 <pbuf_remove_header>
 8014fb6:	4603      	mov	r3, r0
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d009      	beq.n	8014fd0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014fbc:	4b40      	ldr	r3, [pc, #256]	; (80150c0 <icmp_input+0x1f8>)
 8014fbe:	22b6      	movs	r2, #182	; 0xb6
 8014fc0:	4940      	ldr	r1, [pc, #256]	; (80150c4 <icmp_input+0x1fc>)
 8014fc2:	4841      	ldr	r0, [pc, #260]	; (80150c8 <icmp_input+0x200>)
 8014fc4:	f001 fb5a 	bl	801667c <iprintf>
          pbuf_free(r);
 8014fc8:	6978      	ldr	r0, [r7, #20]
 8014fca:	f7f8 fa49 	bl	800d460 <pbuf_free>
          goto icmperr;
 8014fce:	e06c      	b.n	80150aa <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014fd0:	6879      	ldr	r1, [r7, #4]
 8014fd2:	6978      	ldr	r0, [r7, #20]
 8014fd4:	f7f8 fb5c 	bl	800d690 <pbuf_copy>
 8014fd8:	4603      	mov	r3, r0
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d003      	beq.n	8014fe6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014fde:	6978      	ldr	r0, [r7, #20]
 8014fe0:	f7f8 fa3e 	bl	800d460 <pbuf_free>
          goto icmperr;
 8014fe4:	e061      	b.n	80150aa <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8014fe6:	6878      	ldr	r0, [r7, #4]
 8014fe8:	f7f8 fa3a 	bl	800d460 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014fec:	697b      	ldr	r3, [r7, #20]
 8014fee:	607b      	str	r3, [r7, #4]
 8014ff0:	e00f      	b.n	8015012 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014ff2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014ff4:	330e      	adds	r3, #14
 8014ff6:	4619      	mov	r1, r3
 8014ff8:	6878      	ldr	r0, [r7, #4]
 8014ffa:	f7f8 f9ab 	bl	800d354 <pbuf_remove_header>
 8014ffe:	4603      	mov	r3, r0
 8015000:	2b00      	cmp	r3, #0
 8015002:	d006      	beq.n	8015012 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8015004:	4b2e      	ldr	r3, [pc, #184]	; (80150c0 <icmp_input+0x1f8>)
 8015006:	22c7      	movs	r2, #199	; 0xc7
 8015008:	4930      	ldr	r1, [pc, #192]	; (80150cc <icmp_input+0x204>)
 801500a:	482f      	ldr	r0, [pc, #188]	; (80150c8 <icmp_input+0x200>)
 801500c:	f001 fb36 	bl	801667c <iprintf>
          goto icmperr;
 8015010:	e04b      	b.n	80150aa <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	685b      	ldr	r3, [r3, #4]
 8015016:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015018:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801501a:	4619      	mov	r1, r3
 801501c:	6878      	ldr	r0, [r7, #4]
 801501e:	f7f8 f989 	bl	800d334 <pbuf_add_header>
 8015022:	4603      	mov	r3, r0
 8015024:	2b00      	cmp	r3, #0
 8015026:	d12b      	bne.n	8015080 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	685b      	ldr	r3, [r3, #4]
 801502c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801502e:	69fb      	ldr	r3, [r7, #28]
 8015030:	681a      	ldr	r2, [r3, #0]
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8015036:	4b20      	ldr	r3, [pc, #128]	; (80150b8 <icmp_input+0x1f0>)
 8015038:	691a      	ldr	r2, [r3, #16]
 801503a:	68fb      	ldr	r3, [r7, #12]
 801503c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801503e:	693b      	ldr	r3, [r7, #16]
 8015040:	2200      	movs	r2, #0
 8015042:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8015044:	693b      	ldr	r3, [r7, #16]
 8015046:	2200      	movs	r2, #0
 8015048:	709a      	strb	r2, [r3, #2]
 801504a:	2200      	movs	r2, #0
 801504c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801504e:	68fb      	ldr	r3, [r7, #12]
 8015050:	22ff      	movs	r2, #255	; 0xff
 8015052:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8015054:	68fb      	ldr	r3, [r7, #12]
 8015056:	2200      	movs	r2, #0
 8015058:	729a      	strb	r2, [r3, #10]
 801505a:	2200      	movs	r2, #0
 801505c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801505e:	683b      	ldr	r3, [r7, #0]
 8015060:	9302      	str	r3, [sp, #8]
 8015062:	2301      	movs	r3, #1
 8015064:	9301      	str	r3, [sp, #4]
 8015066:	2300      	movs	r3, #0
 8015068:	9300      	str	r3, [sp, #0]
 801506a:	23ff      	movs	r3, #255	; 0xff
 801506c:	2200      	movs	r2, #0
 801506e:	69f9      	ldr	r1, [r7, #28]
 8015070:	6878      	ldr	r0, [r7, #4]
 8015072:	f000 fa75 	bl	8015560 <ip4_output_if>
 8015076:	4603      	mov	r3, r0
 8015078:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801507a:	e001      	b.n	8015080 <icmp_input+0x1b8>
      break;
 801507c:	bf00      	nop
 801507e:	e000      	b.n	8015082 <icmp_input+0x1ba>
      break;
 8015080:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8015082:	6878      	ldr	r0, [r7, #4]
 8015084:	f7f8 f9ec 	bl	800d460 <pbuf_free>
  return;
 8015088:	e013      	b.n	80150b2 <icmp_input+0x1ea>
    goto lenerr;
 801508a:	bf00      	nop
 801508c:	e002      	b.n	8015094 <icmp_input+0x1cc>
    goto lenerr;
 801508e:	bf00      	nop
 8015090:	e000      	b.n	8015094 <icmp_input+0x1cc>
        goto lenerr;
 8015092:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015094:	6878      	ldr	r0, [r7, #4]
 8015096:	f7f8 f9e3 	bl	800d460 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801509a:	e00a      	b.n	80150b2 <icmp_input+0x1ea>
        goto icmperr;
 801509c:	bf00      	nop
 801509e:	e004      	b.n	80150aa <icmp_input+0x1e2>
        goto icmperr;
 80150a0:	bf00      	nop
 80150a2:	e002      	b.n	80150aa <icmp_input+0x1e2>
          goto icmperr;
 80150a4:	bf00      	nop
 80150a6:	e000      	b.n	80150aa <icmp_input+0x1e2>
          goto icmperr;
 80150a8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80150aa:	6878      	ldr	r0, [r7, #4]
 80150ac:	f7f8 f9d8 	bl	800d460 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80150b0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80150b2:	3728      	adds	r7, #40	; 0x28
 80150b4:	46bd      	mov	sp, r7
 80150b6:	bd80      	pop	{r7, pc}
 80150b8:	2000e3f4 	.word	0x2000e3f4
 80150bc:	2000e408 	.word	0x2000e408
 80150c0:	0801b354 	.word	0x0801b354
 80150c4:	0801b38c 	.word	0x0801b38c
 80150c8:	0801b3c4 	.word	0x0801b3c4
 80150cc:	0801b3ec 	.word	0x0801b3ec

080150d0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80150d0:	b580      	push	{r7, lr}
 80150d2:	b082      	sub	sp, #8
 80150d4:	af00      	add	r7, sp, #0
 80150d6:	6078      	str	r0, [r7, #4]
 80150d8:	460b      	mov	r3, r1
 80150da:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80150dc:	78fb      	ldrb	r3, [r7, #3]
 80150de:	461a      	mov	r2, r3
 80150e0:	2103      	movs	r1, #3
 80150e2:	6878      	ldr	r0, [r7, #4]
 80150e4:	f000 f814 	bl	8015110 <icmp_send_response>
}
 80150e8:	bf00      	nop
 80150ea:	3708      	adds	r7, #8
 80150ec:	46bd      	mov	sp, r7
 80150ee:	bd80      	pop	{r7, pc}

080150f0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80150f0:	b580      	push	{r7, lr}
 80150f2:	b082      	sub	sp, #8
 80150f4:	af00      	add	r7, sp, #0
 80150f6:	6078      	str	r0, [r7, #4]
 80150f8:	460b      	mov	r3, r1
 80150fa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80150fc:	78fb      	ldrb	r3, [r7, #3]
 80150fe:	461a      	mov	r2, r3
 8015100:	210b      	movs	r1, #11
 8015102:	6878      	ldr	r0, [r7, #4]
 8015104:	f000 f804 	bl	8015110 <icmp_send_response>
}
 8015108:	bf00      	nop
 801510a:	3708      	adds	r7, #8
 801510c:	46bd      	mov	sp, r7
 801510e:	bd80      	pop	{r7, pc}

08015110 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015110:	b580      	push	{r7, lr}
 8015112:	b08c      	sub	sp, #48	; 0x30
 8015114:	af04      	add	r7, sp, #16
 8015116:	6078      	str	r0, [r7, #4]
 8015118:	460b      	mov	r3, r1
 801511a:	70fb      	strb	r3, [r7, #3]
 801511c:	4613      	mov	r3, r2
 801511e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015120:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015124:	2124      	movs	r1, #36	; 0x24
 8015126:	2022      	movs	r0, #34	; 0x22
 8015128:	f7f7 feb6 	bl	800ce98 <pbuf_alloc>
 801512c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801512e:	69fb      	ldr	r3, [r7, #28]
 8015130:	2b00      	cmp	r3, #0
 8015132:	d04c      	beq.n	80151ce <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015134:	69fb      	ldr	r3, [r7, #28]
 8015136:	895b      	ldrh	r3, [r3, #10]
 8015138:	2b23      	cmp	r3, #35	; 0x23
 801513a:	d806      	bhi.n	801514a <icmp_send_response+0x3a>
 801513c:	4b26      	ldr	r3, [pc, #152]	; (80151d8 <icmp_send_response+0xc8>)
 801513e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8015142:	4926      	ldr	r1, [pc, #152]	; (80151dc <icmp_send_response+0xcc>)
 8015144:	4826      	ldr	r0, [pc, #152]	; (80151e0 <icmp_send_response+0xd0>)
 8015146:	f001 fa99 	bl	801667c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	685b      	ldr	r3, [r3, #4]
 801514e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015150:	69fb      	ldr	r3, [r7, #28]
 8015152:	685b      	ldr	r3, [r3, #4]
 8015154:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8015156:	697b      	ldr	r3, [r7, #20]
 8015158:	78fa      	ldrb	r2, [r7, #3]
 801515a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801515c:	697b      	ldr	r3, [r7, #20]
 801515e:	78ba      	ldrb	r2, [r7, #2]
 8015160:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8015162:	697b      	ldr	r3, [r7, #20]
 8015164:	2200      	movs	r2, #0
 8015166:	711a      	strb	r2, [r3, #4]
 8015168:	2200      	movs	r2, #0
 801516a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801516c:	697b      	ldr	r3, [r7, #20]
 801516e:	2200      	movs	r2, #0
 8015170:	719a      	strb	r2, [r3, #6]
 8015172:	2200      	movs	r2, #0
 8015174:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8015176:	69fb      	ldr	r3, [r7, #28]
 8015178:	685b      	ldr	r3, [r3, #4]
 801517a:	f103 0008 	add.w	r0, r3, #8
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	685b      	ldr	r3, [r3, #4]
 8015182:	221c      	movs	r2, #28
 8015184:	4619      	mov	r1, r3
 8015186:	f001 fa49 	bl	801661c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801518a:	69bb      	ldr	r3, [r7, #24]
 801518c:	68db      	ldr	r3, [r3, #12]
 801518e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8015190:	f107 030c 	add.w	r3, r7, #12
 8015194:	4618      	mov	r0, r3
 8015196:	f000 f825 	bl	80151e4 <ip4_route>
 801519a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801519c:	693b      	ldr	r3, [r7, #16]
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d011      	beq.n	80151c6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80151a2:	697b      	ldr	r3, [r7, #20]
 80151a4:	2200      	movs	r2, #0
 80151a6:	709a      	strb	r2, [r3, #2]
 80151a8:	2200      	movs	r2, #0
 80151aa:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80151ac:	f107 020c 	add.w	r2, r7, #12
 80151b0:	693b      	ldr	r3, [r7, #16]
 80151b2:	9302      	str	r3, [sp, #8]
 80151b4:	2301      	movs	r3, #1
 80151b6:	9301      	str	r3, [sp, #4]
 80151b8:	2300      	movs	r3, #0
 80151ba:	9300      	str	r3, [sp, #0]
 80151bc:	23ff      	movs	r3, #255	; 0xff
 80151be:	2100      	movs	r1, #0
 80151c0:	69f8      	ldr	r0, [r7, #28]
 80151c2:	f000 f9cd 	bl	8015560 <ip4_output_if>
  }
  pbuf_free(q);
 80151c6:	69f8      	ldr	r0, [r7, #28]
 80151c8:	f7f8 f94a 	bl	800d460 <pbuf_free>
 80151cc:	e000      	b.n	80151d0 <icmp_send_response+0xc0>
    return;
 80151ce:	bf00      	nop
}
 80151d0:	3720      	adds	r7, #32
 80151d2:	46bd      	mov	sp, r7
 80151d4:	bd80      	pop	{r7, pc}
 80151d6:	bf00      	nop
 80151d8:	0801b354 	.word	0x0801b354
 80151dc:	0801b420 	.word	0x0801b420
 80151e0:	0801b3c4 	.word	0x0801b3c4

080151e4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80151e4:	b480      	push	{r7}
 80151e6:	b085      	sub	sp, #20
 80151e8:	af00      	add	r7, sp, #0
 80151ea:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80151ec:	4b33      	ldr	r3, [pc, #204]	; (80152bc <ip4_route+0xd8>)
 80151ee:	681b      	ldr	r3, [r3, #0]
 80151f0:	60fb      	str	r3, [r7, #12]
 80151f2:	e036      	b.n	8015262 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80151fa:	f003 0301 	and.w	r3, r3, #1
 80151fe:	b2db      	uxtb	r3, r3
 8015200:	2b00      	cmp	r3, #0
 8015202:	d02b      	beq.n	801525c <ip4_route+0x78>
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801520a:	089b      	lsrs	r3, r3, #2
 801520c:	f003 0301 	and.w	r3, r3, #1
 8015210:	b2db      	uxtb	r3, r3
 8015212:	2b00      	cmp	r3, #0
 8015214:	d022      	beq.n	801525c <ip4_route+0x78>
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	3304      	adds	r3, #4
 801521a:	681b      	ldr	r3, [r3, #0]
 801521c:	2b00      	cmp	r3, #0
 801521e:	d01d      	beq.n	801525c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	681a      	ldr	r2, [r3, #0]
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	3304      	adds	r3, #4
 8015228:	681b      	ldr	r3, [r3, #0]
 801522a:	405a      	eors	r2, r3
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	3308      	adds	r3, #8
 8015230:	681b      	ldr	r3, [r3, #0]
 8015232:	4013      	ands	r3, r2
 8015234:	2b00      	cmp	r3, #0
 8015236:	d101      	bne.n	801523c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	e038      	b.n	80152ae <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801523c:	68fb      	ldr	r3, [r7, #12]
 801523e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015242:	f003 0302 	and.w	r3, r3, #2
 8015246:	2b00      	cmp	r3, #0
 8015248:	d108      	bne.n	801525c <ip4_route+0x78>
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	681a      	ldr	r2, [r3, #0]
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	330c      	adds	r3, #12
 8015252:	681b      	ldr	r3, [r3, #0]
 8015254:	429a      	cmp	r2, r3
 8015256:	d101      	bne.n	801525c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015258:	68fb      	ldr	r3, [r7, #12]
 801525a:	e028      	b.n	80152ae <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	681b      	ldr	r3, [r3, #0]
 8015260:	60fb      	str	r3, [r7, #12]
 8015262:	68fb      	ldr	r3, [r7, #12]
 8015264:	2b00      	cmp	r3, #0
 8015266:	d1c5      	bne.n	80151f4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015268:	4b15      	ldr	r3, [pc, #84]	; (80152c0 <ip4_route+0xdc>)
 801526a:	681b      	ldr	r3, [r3, #0]
 801526c:	2b00      	cmp	r3, #0
 801526e:	d01a      	beq.n	80152a6 <ip4_route+0xc2>
 8015270:	4b13      	ldr	r3, [pc, #76]	; (80152c0 <ip4_route+0xdc>)
 8015272:	681b      	ldr	r3, [r3, #0]
 8015274:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015278:	f003 0301 	and.w	r3, r3, #1
 801527c:	2b00      	cmp	r3, #0
 801527e:	d012      	beq.n	80152a6 <ip4_route+0xc2>
 8015280:	4b0f      	ldr	r3, [pc, #60]	; (80152c0 <ip4_route+0xdc>)
 8015282:	681b      	ldr	r3, [r3, #0]
 8015284:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015288:	f003 0304 	and.w	r3, r3, #4
 801528c:	2b00      	cmp	r3, #0
 801528e:	d00a      	beq.n	80152a6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015290:	4b0b      	ldr	r3, [pc, #44]	; (80152c0 <ip4_route+0xdc>)
 8015292:	681b      	ldr	r3, [r3, #0]
 8015294:	3304      	adds	r3, #4
 8015296:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015298:	2b00      	cmp	r3, #0
 801529a:	d004      	beq.n	80152a6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	b2db      	uxtb	r3, r3
 80152a2:	2b7f      	cmp	r3, #127	; 0x7f
 80152a4:	d101      	bne.n	80152aa <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80152a6:	2300      	movs	r3, #0
 80152a8:	e001      	b.n	80152ae <ip4_route+0xca>
  }

  return netif_default;
 80152aa:	4b05      	ldr	r3, [pc, #20]	; (80152c0 <ip4_route+0xdc>)
 80152ac:	681b      	ldr	r3, [r3, #0]
}
 80152ae:	4618      	mov	r0, r3
 80152b0:	3714      	adds	r7, #20
 80152b2:	46bd      	mov	sp, r7
 80152b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152b8:	4770      	bx	lr
 80152ba:	bf00      	nop
 80152bc:	200179e8 	.word	0x200179e8
 80152c0:	200179ec 	.word	0x200179ec

080152c4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80152c4:	b580      	push	{r7, lr}
 80152c6:	b082      	sub	sp, #8
 80152c8:	af00      	add	r7, sp, #0
 80152ca:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80152d2:	f003 0301 	and.w	r3, r3, #1
 80152d6:	b2db      	uxtb	r3, r3
 80152d8:	2b00      	cmp	r3, #0
 80152da:	d016      	beq.n	801530a <ip4_input_accept+0x46>
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	3304      	adds	r3, #4
 80152e0:	681b      	ldr	r3, [r3, #0]
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d011      	beq.n	801530a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80152e6:	4b0b      	ldr	r3, [pc, #44]	; (8015314 <ip4_input_accept+0x50>)
 80152e8:	695a      	ldr	r2, [r3, #20]
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	3304      	adds	r3, #4
 80152ee:	681b      	ldr	r3, [r3, #0]
 80152f0:	429a      	cmp	r2, r3
 80152f2:	d008      	beq.n	8015306 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80152f4:	4b07      	ldr	r3, [pc, #28]	; (8015314 <ip4_input_accept+0x50>)
 80152f6:	695b      	ldr	r3, [r3, #20]
 80152f8:	6879      	ldr	r1, [r7, #4]
 80152fa:	4618      	mov	r0, r3
 80152fc:	f000 fa08 	bl	8015710 <ip4_addr_isbroadcast_u32>
 8015300:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015302:	2b00      	cmp	r3, #0
 8015304:	d001      	beq.n	801530a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8015306:	2301      	movs	r3, #1
 8015308:	e000      	b.n	801530c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801530a:	2300      	movs	r3, #0
}
 801530c:	4618      	mov	r0, r3
 801530e:	3708      	adds	r7, #8
 8015310:	46bd      	mov	sp, r7
 8015312:	bd80      	pop	{r7, pc}
 8015314:	2000e3f4 	.word	0x2000e3f4

08015318 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015318:	b580      	push	{r7, lr}
 801531a:	b086      	sub	sp, #24
 801531c:	af00      	add	r7, sp, #0
 801531e:	6078      	str	r0, [r7, #4]
 8015320:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	685b      	ldr	r3, [r3, #4]
 8015326:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8015328:	697b      	ldr	r3, [r7, #20]
 801532a:	781b      	ldrb	r3, [r3, #0]
 801532c:	091b      	lsrs	r3, r3, #4
 801532e:	b2db      	uxtb	r3, r3
 8015330:	2b04      	cmp	r3, #4
 8015332:	d004      	beq.n	801533e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015334:	6878      	ldr	r0, [r7, #4]
 8015336:	f7f8 f893 	bl	800d460 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801533a:	2300      	movs	r3, #0
 801533c:	e107      	b.n	801554e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801533e:	697b      	ldr	r3, [r7, #20]
 8015340:	781b      	ldrb	r3, [r3, #0]
 8015342:	f003 030f 	and.w	r3, r3, #15
 8015346:	b2db      	uxtb	r3, r3
 8015348:	009b      	lsls	r3, r3, #2
 801534a:	b2db      	uxtb	r3, r3
 801534c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801534e:	697b      	ldr	r3, [r7, #20]
 8015350:	885b      	ldrh	r3, [r3, #2]
 8015352:	b29b      	uxth	r3, r3
 8015354:	4618      	mov	r0, r3
 8015356:	f7f6 fcf1 	bl	800bd3c <lwip_htons>
 801535a:	4603      	mov	r3, r0
 801535c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	891b      	ldrh	r3, [r3, #8]
 8015362:	89ba      	ldrh	r2, [r7, #12]
 8015364:	429a      	cmp	r2, r3
 8015366:	d204      	bcs.n	8015372 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8015368:	89bb      	ldrh	r3, [r7, #12]
 801536a:	4619      	mov	r1, r3
 801536c:	6878      	ldr	r0, [r7, #4]
 801536e:	f7f7 fef1 	bl	800d154 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	895b      	ldrh	r3, [r3, #10]
 8015376:	89fa      	ldrh	r2, [r7, #14]
 8015378:	429a      	cmp	r2, r3
 801537a:	d807      	bhi.n	801538c <ip4_input+0x74>
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	891b      	ldrh	r3, [r3, #8]
 8015380:	89ba      	ldrh	r2, [r7, #12]
 8015382:	429a      	cmp	r2, r3
 8015384:	d802      	bhi.n	801538c <ip4_input+0x74>
 8015386:	89fb      	ldrh	r3, [r7, #14]
 8015388:	2b13      	cmp	r3, #19
 801538a:	d804      	bhi.n	8015396 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801538c:	6878      	ldr	r0, [r7, #4]
 801538e:	f7f8 f867 	bl	800d460 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8015392:	2300      	movs	r3, #0
 8015394:	e0db      	b.n	801554e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015396:	697b      	ldr	r3, [r7, #20]
 8015398:	691b      	ldr	r3, [r3, #16]
 801539a:	4a6f      	ldr	r2, [pc, #444]	; (8015558 <ip4_input+0x240>)
 801539c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801539e:	697b      	ldr	r3, [r7, #20]
 80153a0:	68db      	ldr	r3, [r3, #12]
 80153a2:	4a6d      	ldr	r2, [pc, #436]	; (8015558 <ip4_input+0x240>)
 80153a4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80153a6:	4b6c      	ldr	r3, [pc, #432]	; (8015558 <ip4_input+0x240>)
 80153a8:	695b      	ldr	r3, [r3, #20]
 80153aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80153ae:	2be0      	cmp	r3, #224	; 0xe0
 80153b0:	d112      	bne.n	80153d8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80153b2:	683b      	ldr	r3, [r7, #0]
 80153b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80153b8:	f003 0301 	and.w	r3, r3, #1
 80153bc:	b2db      	uxtb	r3, r3
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d007      	beq.n	80153d2 <ip4_input+0xba>
 80153c2:	683b      	ldr	r3, [r7, #0]
 80153c4:	3304      	adds	r3, #4
 80153c6:	681b      	ldr	r3, [r3, #0]
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	d002      	beq.n	80153d2 <ip4_input+0xba>
      netif = inp;
 80153cc:	683b      	ldr	r3, [r7, #0]
 80153ce:	613b      	str	r3, [r7, #16]
 80153d0:	e02a      	b.n	8015428 <ip4_input+0x110>
    } else {
      netif = NULL;
 80153d2:	2300      	movs	r3, #0
 80153d4:	613b      	str	r3, [r7, #16]
 80153d6:	e027      	b.n	8015428 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80153d8:	6838      	ldr	r0, [r7, #0]
 80153da:	f7ff ff73 	bl	80152c4 <ip4_input_accept>
 80153de:	4603      	mov	r3, r0
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d002      	beq.n	80153ea <ip4_input+0xd2>
      netif = inp;
 80153e4:	683b      	ldr	r3, [r7, #0]
 80153e6:	613b      	str	r3, [r7, #16]
 80153e8:	e01e      	b.n	8015428 <ip4_input+0x110>
    } else {
      netif = NULL;
 80153ea:	2300      	movs	r3, #0
 80153ec:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80153ee:	4b5a      	ldr	r3, [pc, #360]	; (8015558 <ip4_input+0x240>)
 80153f0:	695b      	ldr	r3, [r3, #20]
 80153f2:	b2db      	uxtb	r3, r3
 80153f4:	2b7f      	cmp	r3, #127	; 0x7f
 80153f6:	d017      	beq.n	8015428 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80153f8:	4b58      	ldr	r3, [pc, #352]	; (801555c <ip4_input+0x244>)
 80153fa:	681b      	ldr	r3, [r3, #0]
 80153fc:	613b      	str	r3, [r7, #16]
 80153fe:	e00e      	b.n	801541e <ip4_input+0x106>
          if (netif == inp) {
 8015400:	693a      	ldr	r2, [r7, #16]
 8015402:	683b      	ldr	r3, [r7, #0]
 8015404:	429a      	cmp	r2, r3
 8015406:	d006      	beq.n	8015416 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015408:	6938      	ldr	r0, [r7, #16]
 801540a:	f7ff ff5b 	bl	80152c4 <ip4_input_accept>
 801540e:	4603      	mov	r3, r0
 8015410:	2b00      	cmp	r3, #0
 8015412:	d108      	bne.n	8015426 <ip4_input+0x10e>
 8015414:	e000      	b.n	8015418 <ip4_input+0x100>
            continue;
 8015416:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015418:	693b      	ldr	r3, [r7, #16]
 801541a:	681b      	ldr	r3, [r3, #0]
 801541c:	613b      	str	r3, [r7, #16]
 801541e:	693b      	ldr	r3, [r7, #16]
 8015420:	2b00      	cmp	r3, #0
 8015422:	d1ed      	bne.n	8015400 <ip4_input+0xe8>
 8015424:	e000      	b.n	8015428 <ip4_input+0x110>
            break;
 8015426:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015428:	4b4b      	ldr	r3, [pc, #300]	; (8015558 <ip4_input+0x240>)
 801542a:	691b      	ldr	r3, [r3, #16]
 801542c:	6839      	ldr	r1, [r7, #0]
 801542e:	4618      	mov	r0, r3
 8015430:	f000 f96e 	bl	8015710 <ip4_addr_isbroadcast_u32>
 8015434:	4603      	mov	r3, r0
 8015436:	2b00      	cmp	r3, #0
 8015438:	d105      	bne.n	8015446 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801543a:	4b47      	ldr	r3, [pc, #284]	; (8015558 <ip4_input+0x240>)
 801543c:	691b      	ldr	r3, [r3, #16]
 801543e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015442:	2be0      	cmp	r3, #224	; 0xe0
 8015444:	d104      	bne.n	8015450 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015446:	6878      	ldr	r0, [r7, #4]
 8015448:	f7f8 f80a 	bl	800d460 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801544c:	2300      	movs	r3, #0
 801544e:	e07e      	b.n	801554e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015450:	693b      	ldr	r3, [r7, #16]
 8015452:	2b00      	cmp	r3, #0
 8015454:	d104      	bne.n	8015460 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015456:	6878      	ldr	r0, [r7, #4]
 8015458:	f7f8 f802 	bl	800d460 <pbuf_free>
    return ERR_OK;
 801545c:	2300      	movs	r3, #0
 801545e:	e076      	b.n	801554e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015460:	697b      	ldr	r3, [r7, #20]
 8015462:	88db      	ldrh	r3, [r3, #6]
 8015464:	b29b      	uxth	r3, r3
 8015466:	461a      	mov	r2, r3
 8015468:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801546c:	4013      	ands	r3, r2
 801546e:	2b00      	cmp	r3, #0
 8015470:	d00b      	beq.n	801548a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8015472:	6878      	ldr	r0, [r7, #4]
 8015474:	f000 fc92 	bl	8015d9c <ip4_reass>
 8015478:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	2b00      	cmp	r3, #0
 801547e:	d101      	bne.n	8015484 <ip4_input+0x16c>
      return ERR_OK;
 8015480:	2300      	movs	r3, #0
 8015482:	e064      	b.n	801554e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	685b      	ldr	r3, [r3, #4]
 8015488:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801548a:	4a33      	ldr	r2, [pc, #204]	; (8015558 <ip4_input+0x240>)
 801548c:	693b      	ldr	r3, [r7, #16]
 801548e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015490:	4a31      	ldr	r2, [pc, #196]	; (8015558 <ip4_input+0x240>)
 8015492:	683b      	ldr	r3, [r7, #0]
 8015494:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8015496:	4a30      	ldr	r2, [pc, #192]	; (8015558 <ip4_input+0x240>)
 8015498:	697b      	ldr	r3, [r7, #20]
 801549a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801549c:	697b      	ldr	r3, [r7, #20]
 801549e:	781b      	ldrb	r3, [r3, #0]
 80154a0:	f003 030f 	and.w	r3, r3, #15
 80154a4:	b2db      	uxtb	r3, r3
 80154a6:	009b      	lsls	r3, r3, #2
 80154a8:	b2db      	uxtb	r3, r3
 80154aa:	b29a      	uxth	r2, r3
 80154ac:	4b2a      	ldr	r3, [pc, #168]	; (8015558 <ip4_input+0x240>)
 80154ae:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80154b0:	89fb      	ldrh	r3, [r7, #14]
 80154b2:	4619      	mov	r1, r3
 80154b4:	6878      	ldr	r0, [r7, #4]
 80154b6:	f7f7 ff4d 	bl	800d354 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80154ba:	697b      	ldr	r3, [r7, #20]
 80154bc:	7a5b      	ldrb	r3, [r3, #9]
 80154be:	2b11      	cmp	r3, #17
 80154c0:	d006      	beq.n	80154d0 <ip4_input+0x1b8>
 80154c2:	2b11      	cmp	r3, #17
 80154c4:	dc13      	bgt.n	80154ee <ip4_input+0x1d6>
 80154c6:	2b01      	cmp	r3, #1
 80154c8:	d00c      	beq.n	80154e4 <ip4_input+0x1cc>
 80154ca:	2b06      	cmp	r3, #6
 80154cc:	d005      	beq.n	80154da <ip4_input+0x1c2>
 80154ce:	e00e      	b.n	80154ee <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80154d0:	6839      	ldr	r1, [r7, #0]
 80154d2:	6878      	ldr	r0, [r7, #4]
 80154d4:	f7fe fc68 	bl	8013da8 <udp_input>
        break;
 80154d8:	e026      	b.n	8015528 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80154da:	6839      	ldr	r1, [r7, #0]
 80154dc:	6878      	ldr	r0, [r7, #4]
 80154de:	f7fa f88d 	bl	800f5fc <tcp_input>
        break;
 80154e2:	e021      	b.n	8015528 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80154e4:	6839      	ldr	r1, [r7, #0]
 80154e6:	6878      	ldr	r0, [r7, #4]
 80154e8:	f7ff fcee 	bl	8014ec8 <icmp_input>
        break;
 80154ec:	e01c      	b.n	8015528 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80154ee:	4b1a      	ldr	r3, [pc, #104]	; (8015558 <ip4_input+0x240>)
 80154f0:	695b      	ldr	r3, [r3, #20]
 80154f2:	6939      	ldr	r1, [r7, #16]
 80154f4:	4618      	mov	r0, r3
 80154f6:	f000 f90b 	bl	8015710 <ip4_addr_isbroadcast_u32>
 80154fa:	4603      	mov	r3, r0
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	d10f      	bne.n	8015520 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015500:	4b15      	ldr	r3, [pc, #84]	; (8015558 <ip4_input+0x240>)
 8015502:	695b      	ldr	r3, [r3, #20]
 8015504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015508:	2be0      	cmp	r3, #224	; 0xe0
 801550a:	d009      	beq.n	8015520 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801550c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015510:	4619      	mov	r1, r3
 8015512:	6878      	ldr	r0, [r7, #4]
 8015514:	f7f7 ff91 	bl	800d43a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015518:	2102      	movs	r1, #2
 801551a:	6878      	ldr	r0, [r7, #4]
 801551c:	f7ff fdd8 	bl	80150d0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015520:	6878      	ldr	r0, [r7, #4]
 8015522:	f7f7 ff9d 	bl	800d460 <pbuf_free>
        break;
 8015526:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015528:	4b0b      	ldr	r3, [pc, #44]	; (8015558 <ip4_input+0x240>)
 801552a:	2200      	movs	r2, #0
 801552c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801552e:	4b0a      	ldr	r3, [pc, #40]	; (8015558 <ip4_input+0x240>)
 8015530:	2200      	movs	r2, #0
 8015532:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015534:	4b08      	ldr	r3, [pc, #32]	; (8015558 <ip4_input+0x240>)
 8015536:	2200      	movs	r2, #0
 8015538:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801553a:	4b07      	ldr	r3, [pc, #28]	; (8015558 <ip4_input+0x240>)
 801553c:	2200      	movs	r2, #0
 801553e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015540:	4b05      	ldr	r3, [pc, #20]	; (8015558 <ip4_input+0x240>)
 8015542:	2200      	movs	r2, #0
 8015544:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015546:	4b04      	ldr	r3, [pc, #16]	; (8015558 <ip4_input+0x240>)
 8015548:	2200      	movs	r2, #0
 801554a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801554c:	2300      	movs	r3, #0
}
 801554e:	4618      	mov	r0, r3
 8015550:	3718      	adds	r7, #24
 8015552:	46bd      	mov	sp, r7
 8015554:	bd80      	pop	{r7, pc}
 8015556:	bf00      	nop
 8015558:	2000e3f4 	.word	0x2000e3f4
 801555c:	200179e8 	.word	0x200179e8

08015560 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015560:	b580      	push	{r7, lr}
 8015562:	b08a      	sub	sp, #40	; 0x28
 8015564:	af04      	add	r7, sp, #16
 8015566:	60f8      	str	r0, [r7, #12]
 8015568:	60b9      	str	r1, [r7, #8]
 801556a:	607a      	str	r2, [r7, #4]
 801556c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801556e:	68bb      	ldr	r3, [r7, #8]
 8015570:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	2b00      	cmp	r3, #0
 8015576:	d009      	beq.n	801558c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015578:	68bb      	ldr	r3, [r7, #8]
 801557a:	2b00      	cmp	r3, #0
 801557c:	d003      	beq.n	8015586 <ip4_output_if+0x26>
 801557e:	68bb      	ldr	r3, [r7, #8]
 8015580:	681b      	ldr	r3, [r3, #0]
 8015582:	2b00      	cmp	r3, #0
 8015584:	d102      	bne.n	801558c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8015586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015588:	3304      	adds	r3, #4
 801558a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801558c:	78fa      	ldrb	r2, [r7, #3]
 801558e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015590:	9302      	str	r3, [sp, #8]
 8015592:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015596:	9301      	str	r3, [sp, #4]
 8015598:	f897 3020 	ldrb.w	r3, [r7, #32]
 801559c:	9300      	str	r3, [sp, #0]
 801559e:	4613      	mov	r3, r2
 80155a0:	687a      	ldr	r2, [r7, #4]
 80155a2:	6979      	ldr	r1, [r7, #20]
 80155a4:	68f8      	ldr	r0, [r7, #12]
 80155a6:	f000 f805 	bl	80155b4 <ip4_output_if_src>
 80155aa:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80155ac:	4618      	mov	r0, r3
 80155ae:	3718      	adds	r7, #24
 80155b0:	46bd      	mov	sp, r7
 80155b2:	bd80      	pop	{r7, pc}

080155b4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80155b4:	b580      	push	{r7, lr}
 80155b6:	b088      	sub	sp, #32
 80155b8:	af00      	add	r7, sp, #0
 80155ba:	60f8      	str	r0, [r7, #12]
 80155bc:	60b9      	str	r1, [r7, #8]
 80155be:	607a      	str	r2, [r7, #4]
 80155c0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80155c2:	68fb      	ldr	r3, [r7, #12]
 80155c4:	7b9b      	ldrb	r3, [r3, #14]
 80155c6:	2b01      	cmp	r3, #1
 80155c8:	d006      	beq.n	80155d8 <ip4_output_if_src+0x24>
 80155ca:	4b4b      	ldr	r3, [pc, #300]	; (80156f8 <ip4_output_if_src+0x144>)
 80155cc:	f44f 7255 	mov.w	r2, #852	; 0x354
 80155d0:	494a      	ldr	r1, [pc, #296]	; (80156fc <ip4_output_if_src+0x148>)
 80155d2:	484b      	ldr	r0, [pc, #300]	; (8015700 <ip4_output_if_src+0x14c>)
 80155d4:	f001 f852 	bl	801667c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	2b00      	cmp	r3, #0
 80155dc:	d060      	beq.n	80156a0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80155de:	2314      	movs	r3, #20
 80155e0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80155e2:	2114      	movs	r1, #20
 80155e4:	68f8      	ldr	r0, [r7, #12]
 80155e6:	f7f7 fea5 	bl	800d334 <pbuf_add_header>
 80155ea:	4603      	mov	r3, r0
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d002      	beq.n	80155f6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80155f0:	f06f 0301 	mvn.w	r3, #1
 80155f4:	e07c      	b.n	80156f0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80155f6:	68fb      	ldr	r3, [r7, #12]
 80155f8:	685b      	ldr	r3, [r3, #4]
 80155fa:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80155fc:	68fb      	ldr	r3, [r7, #12]
 80155fe:	895b      	ldrh	r3, [r3, #10]
 8015600:	2b13      	cmp	r3, #19
 8015602:	d806      	bhi.n	8015612 <ip4_output_if_src+0x5e>
 8015604:	4b3c      	ldr	r3, [pc, #240]	; (80156f8 <ip4_output_if_src+0x144>)
 8015606:	f44f 7262 	mov.w	r2, #904	; 0x388
 801560a:	493e      	ldr	r1, [pc, #248]	; (8015704 <ip4_output_if_src+0x150>)
 801560c:	483c      	ldr	r0, [pc, #240]	; (8015700 <ip4_output_if_src+0x14c>)
 801560e:	f001 f835 	bl	801667c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015612:	69fb      	ldr	r3, [r7, #28]
 8015614:	78fa      	ldrb	r2, [r7, #3]
 8015616:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015618:	69fb      	ldr	r3, [r7, #28]
 801561a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801561e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	681a      	ldr	r2, [r3, #0]
 8015624:	69fb      	ldr	r3, [r7, #28]
 8015626:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015628:	8b7b      	ldrh	r3, [r7, #26]
 801562a:	089b      	lsrs	r3, r3, #2
 801562c:	b29b      	uxth	r3, r3
 801562e:	b2db      	uxtb	r3, r3
 8015630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015634:	b2da      	uxtb	r2, r3
 8015636:	69fb      	ldr	r3, [r7, #28]
 8015638:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801563a:	69fb      	ldr	r3, [r7, #28]
 801563c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015640:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015642:	68fb      	ldr	r3, [r7, #12]
 8015644:	891b      	ldrh	r3, [r3, #8]
 8015646:	4618      	mov	r0, r3
 8015648:	f7f6 fb78 	bl	800bd3c <lwip_htons>
 801564c:	4603      	mov	r3, r0
 801564e:	461a      	mov	r2, r3
 8015650:	69fb      	ldr	r3, [r7, #28]
 8015652:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015654:	69fb      	ldr	r3, [r7, #28]
 8015656:	2200      	movs	r2, #0
 8015658:	719a      	strb	r2, [r3, #6]
 801565a:	2200      	movs	r2, #0
 801565c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801565e:	4b2a      	ldr	r3, [pc, #168]	; (8015708 <ip4_output_if_src+0x154>)
 8015660:	881b      	ldrh	r3, [r3, #0]
 8015662:	4618      	mov	r0, r3
 8015664:	f7f6 fb6a 	bl	800bd3c <lwip_htons>
 8015668:	4603      	mov	r3, r0
 801566a:	461a      	mov	r2, r3
 801566c:	69fb      	ldr	r3, [r7, #28]
 801566e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015670:	4b25      	ldr	r3, [pc, #148]	; (8015708 <ip4_output_if_src+0x154>)
 8015672:	881b      	ldrh	r3, [r3, #0]
 8015674:	3301      	adds	r3, #1
 8015676:	b29a      	uxth	r2, r3
 8015678:	4b23      	ldr	r3, [pc, #140]	; (8015708 <ip4_output_if_src+0x154>)
 801567a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801567c:	68bb      	ldr	r3, [r7, #8]
 801567e:	2b00      	cmp	r3, #0
 8015680:	d104      	bne.n	801568c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015682:	4b22      	ldr	r3, [pc, #136]	; (801570c <ip4_output_if_src+0x158>)
 8015684:	681a      	ldr	r2, [r3, #0]
 8015686:	69fb      	ldr	r3, [r7, #28]
 8015688:	60da      	str	r2, [r3, #12]
 801568a:	e003      	b.n	8015694 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801568c:	68bb      	ldr	r3, [r7, #8]
 801568e:	681a      	ldr	r2, [r3, #0]
 8015690:	69fb      	ldr	r3, [r7, #28]
 8015692:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015694:	69fb      	ldr	r3, [r7, #28]
 8015696:	2200      	movs	r2, #0
 8015698:	729a      	strb	r2, [r3, #10]
 801569a:	2200      	movs	r2, #0
 801569c:	72da      	strb	r2, [r3, #11]
 801569e:	e00f      	b.n	80156c0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80156a0:	68fb      	ldr	r3, [r7, #12]
 80156a2:	895b      	ldrh	r3, [r3, #10]
 80156a4:	2b13      	cmp	r3, #19
 80156a6:	d802      	bhi.n	80156ae <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80156a8:	f06f 0301 	mvn.w	r3, #1
 80156ac:	e020      	b.n	80156f0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80156ae:	68fb      	ldr	r3, [r7, #12]
 80156b0:	685b      	ldr	r3, [r3, #4]
 80156b2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80156b4:	69fb      	ldr	r3, [r7, #28]
 80156b6:	691b      	ldr	r3, [r3, #16]
 80156b8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80156ba:	f107 0314 	add.w	r3, r7, #20
 80156be:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80156c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d00c      	beq.n	80156e2 <ip4_output_if_src+0x12e>
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	891a      	ldrh	r2, [r3, #8]
 80156cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80156d0:	429a      	cmp	r2, r3
 80156d2:	d906      	bls.n	80156e2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80156d4:	687a      	ldr	r2, [r7, #4]
 80156d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80156d8:	68f8      	ldr	r0, [r7, #12]
 80156da:	f000 fd4d 	bl	8016178 <ip4_frag>
 80156de:	4603      	mov	r3, r0
 80156e0:	e006      	b.n	80156f0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80156e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156e4:	695b      	ldr	r3, [r3, #20]
 80156e6:	687a      	ldr	r2, [r7, #4]
 80156e8:	68f9      	ldr	r1, [r7, #12]
 80156ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80156ec:	4798      	blx	r3
 80156ee:	4603      	mov	r3, r0
}
 80156f0:	4618      	mov	r0, r3
 80156f2:	3720      	adds	r7, #32
 80156f4:	46bd      	mov	sp, r7
 80156f6:	bd80      	pop	{r7, pc}
 80156f8:	0801b44c 	.word	0x0801b44c
 80156fc:	0801b480 	.word	0x0801b480
 8015700:	0801b48c 	.word	0x0801b48c
 8015704:	0801b4b4 	.word	0x0801b4b4
 8015708:	200016ba 	.word	0x200016ba
 801570c:	0801f88c 	.word	0x0801f88c

08015710 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015710:	b480      	push	{r7}
 8015712:	b085      	sub	sp, #20
 8015714:	af00      	add	r7, sp, #0
 8015716:	6078      	str	r0, [r7, #4]
 8015718:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015724:	d002      	beq.n	801572c <ip4_addr_isbroadcast_u32+0x1c>
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	2b00      	cmp	r3, #0
 801572a:	d101      	bne.n	8015730 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801572c:	2301      	movs	r3, #1
 801572e:	e02a      	b.n	8015786 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015730:	683b      	ldr	r3, [r7, #0]
 8015732:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015736:	f003 0302 	and.w	r3, r3, #2
 801573a:	2b00      	cmp	r3, #0
 801573c:	d101      	bne.n	8015742 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801573e:	2300      	movs	r3, #0
 8015740:	e021      	b.n	8015786 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015742:	683b      	ldr	r3, [r7, #0]
 8015744:	3304      	adds	r3, #4
 8015746:	681b      	ldr	r3, [r3, #0]
 8015748:	687a      	ldr	r2, [r7, #4]
 801574a:	429a      	cmp	r2, r3
 801574c:	d101      	bne.n	8015752 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801574e:	2300      	movs	r3, #0
 8015750:	e019      	b.n	8015786 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015752:	68fa      	ldr	r2, [r7, #12]
 8015754:	683b      	ldr	r3, [r7, #0]
 8015756:	3304      	adds	r3, #4
 8015758:	681b      	ldr	r3, [r3, #0]
 801575a:	405a      	eors	r2, r3
 801575c:	683b      	ldr	r3, [r7, #0]
 801575e:	3308      	adds	r3, #8
 8015760:	681b      	ldr	r3, [r3, #0]
 8015762:	4013      	ands	r3, r2
 8015764:	2b00      	cmp	r3, #0
 8015766:	d10d      	bne.n	8015784 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015768:	683b      	ldr	r3, [r7, #0]
 801576a:	3308      	adds	r3, #8
 801576c:	681b      	ldr	r3, [r3, #0]
 801576e:	43da      	mvns	r2, r3
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015774:	683b      	ldr	r3, [r7, #0]
 8015776:	3308      	adds	r3, #8
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801577c:	429a      	cmp	r2, r3
 801577e:	d101      	bne.n	8015784 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015780:	2301      	movs	r3, #1
 8015782:	e000      	b.n	8015786 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015784:	2300      	movs	r3, #0
  }
}
 8015786:	4618      	mov	r0, r3
 8015788:	3714      	adds	r7, #20
 801578a:	46bd      	mov	sp, r7
 801578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015790:	4770      	bx	lr
	...

08015794 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015794:	b580      	push	{r7, lr}
 8015796:	b084      	sub	sp, #16
 8015798:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801579a:	2300      	movs	r3, #0
 801579c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801579e:	4b12      	ldr	r3, [pc, #72]	; (80157e8 <ip_reass_tmr+0x54>)
 80157a0:	681b      	ldr	r3, [r3, #0]
 80157a2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80157a4:	e018      	b.n	80157d8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80157a6:	68fb      	ldr	r3, [r7, #12]
 80157a8:	7fdb      	ldrb	r3, [r3, #31]
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d00b      	beq.n	80157c6 <ip_reass_tmr+0x32>
      r->timer--;
 80157ae:	68fb      	ldr	r3, [r7, #12]
 80157b0:	7fdb      	ldrb	r3, [r3, #31]
 80157b2:	3b01      	subs	r3, #1
 80157b4:	b2da      	uxtb	r2, r3
 80157b6:	68fb      	ldr	r3, [r7, #12]
 80157b8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80157ba:	68fb      	ldr	r3, [r7, #12]
 80157bc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80157be:	68fb      	ldr	r3, [r7, #12]
 80157c0:	681b      	ldr	r3, [r3, #0]
 80157c2:	60fb      	str	r3, [r7, #12]
 80157c4:	e008      	b.n	80157d8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80157c6:	68fb      	ldr	r3, [r7, #12]
 80157c8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80157ca:	68fb      	ldr	r3, [r7, #12]
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80157d0:	68b9      	ldr	r1, [r7, #8]
 80157d2:	6878      	ldr	r0, [r7, #4]
 80157d4:	f000 f80a 	bl	80157ec <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80157d8:	68fb      	ldr	r3, [r7, #12]
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d1e3      	bne.n	80157a6 <ip_reass_tmr+0x12>
    }
  }
}
 80157de:	bf00      	nop
 80157e0:	bf00      	nop
 80157e2:	3710      	adds	r7, #16
 80157e4:	46bd      	mov	sp, r7
 80157e6:	bd80      	pop	{r7, pc}
 80157e8:	200016bc 	.word	0x200016bc

080157ec <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80157ec:	b580      	push	{r7, lr}
 80157ee:	b088      	sub	sp, #32
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	6078      	str	r0, [r7, #4]
 80157f4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80157f6:	2300      	movs	r3, #0
 80157f8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80157fa:	683a      	ldr	r2, [r7, #0]
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	429a      	cmp	r2, r3
 8015800:	d105      	bne.n	801580e <ip_reass_free_complete_datagram+0x22>
 8015802:	4b45      	ldr	r3, [pc, #276]	; (8015918 <ip_reass_free_complete_datagram+0x12c>)
 8015804:	22ab      	movs	r2, #171	; 0xab
 8015806:	4945      	ldr	r1, [pc, #276]	; (801591c <ip_reass_free_complete_datagram+0x130>)
 8015808:	4845      	ldr	r0, [pc, #276]	; (8015920 <ip_reass_free_complete_datagram+0x134>)
 801580a:	f000 ff37 	bl	801667c <iprintf>
  if (prev != NULL) {
 801580e:	683b      	ldr	r3, [r7, #0]
 8015810:	2b00      	cmp	r3, #0
 8015812:	d00a      	beq.n	801582a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015814:	683b      	ldr	r3, [r7, #0]
 8015816:	681b      	ldr	r3, [r3, #0]
 8015818:	687a      	ldr	r2, [r7, #4]
 801581a:	429a      	cmp	r2, r3
 801581c:	d005      	beq.n	801582a <ip_reass_free_complete_datagram+0x3e>
 801581e:	4b3e      	ldr	r3, [pc, #248]	; (8015918 <ip_reass_free_complete_datagram+0x12c>)
 8015820:	22ad      	movs	r2, #173	; 0xad
 8015822:	4940      	ldr	r1, [pc, #256]	; (8015924 <ip_reass_free_complete_datagram+0x138>)
 8015824:	483e      	ldr	r0, [pc, #248]	; (8015920 <ip_reass_free_complete_datagram+0x134>)
 8015826:	f000 ff29 	bl	801667c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	685b      	ldr	r3, [r3, #4]
 801582e:	685b      	ldr	r3, [r3, #4]
 8015830:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015832:	697b      	ldr	r3, [r7, #20]
 8015834:	889b      	ldrh	r3, [r3, #4]
 8015836:	b29b      	uxth	r3, r3
 8015838:	2b00      	cmp	r3, #0
 801583a:	d12a      	bne.n	8015892 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	685b      	ldr	r3, [r3, #4]
 8015840:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015842:	697b      	ldr	r3, [r7, #20]
 8015844:	681a      	ldr	r2, [r3, #0]
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801584a:	69bb      	ldr	r3, [r7, #24]
 801584c:	6858      	ldr	r0, [r3, #4]
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	3308      	adds	r3, #8
 8015852:	2214      	movs	r2, #20
 8015854:	4619      	mov	r1, r3
 8015856:	f000 fee1 	bl	801661c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801585a:	2101      	movs	r1, #1
 801585c:	69b8      	ldr	r0, [r7, #24]
 801585e:	f7ff fc47 	bl	80150f0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015862:	69b8      	ldr	r0, [r7, #24]
 8015864:	f7f7 fe84 	bl	800d570 <pbuf_clen>
 8015868:	4603      	mov	r3, r0
 801586a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801586c:	8bfa      	ldrh	r2, [r7, #30]
 801586e:	8a7b      	ldrh	r3, [r7, #18]
 8015870:	4413      	add	r3, r2
 8015872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015876:	db05      	blt.n	8015884 <ip_reass_free_complete_datagram+0x98>
 8015878:	4b27      	ldr	r3, [pc, #156]	; (8015918 <ip_reass_free_complete_datagram+0x12c>)
 801587a:	22bc      	movs	r2, #188	; 0xbc
 801587c:	492a      	ldr	r1, [pc, #168]	; (8015928 <ip_reass_free_complete_datagram+0x13c>)
 801587e:	4828      	ldr	r0, [pc, #160]	; (8015920 <ip_reass_free_complete_datagram+0x134>)
 8015880:	f000 fefc 	bl	801667c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015884:	8bfa      	ldrh	r2, [r7, #30]
 8015886:	8a7b      	ldrh	r3, [r7, #18]
 8015888:	4413      	add	r3, r2
 801588a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801588c:	69b8      	ldr	r0, [r7, #24]
 801588e:	f7f7 fde7 	bl	800d460 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	685b      	ldr	r3, [r3, #4]
 8015896:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015898:	e01f      	b.n	80158da <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801589a:	69bb      	ldr	r3, [r7, #24]
 801589c:	685b      	ldr	r3, [r3, #4]
 801589e:	617b      	str	r3, [r7, #20]
    pcur = p;
 80158a0:	69bb      	ldr	r3, [r7, #24]
 80158a2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80158a4:	697b      	ldr	r3, [r7, #20]
 80158a6:	681b      	ldr	r3, [r3, #0]
 80158a8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80158aa:	68f8      	ldr	r0, [r7, #12]
 80158ac:	f7f7 fe60 	bl	800d570 <pbuf_clen>
 80158b0:	4603      	mov	r3, r0
 80158b2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80158b4:	8bfa      	ldrh	r2, [r7, #30]
 80158b6:	8a7b      	ldrh	r3, [r7, #18]
 80158b8:	4413      	add	r3, r2
 80158ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80158be:	db05      	blt.n	80158cc <ip_reass_free_complete_datagram+0xe0>
 80158c0:	4b15      	ldr	r3, [pc, #84]	; (8015918 <ip_reass_free_complete_datagram+0x12c>)
 80158c2:	22cc      	movs	r2, #204	; 0xcc
 80158c4:	4918      	ldr	r1, [pc, #96]	; (8015928 <ip_reass_free_complete_datagram+0x13c>)
 80158c6:	4816      	ldr	r0, [pc, #88]	; (8015920 <ip_reass_free_complete_datagram+0x134>)
 80158c8:	f000 fed8 	bl	801667c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80158cc:	8bfa      	ldrh	r2, [r7, #30]
 80158ce:	8a7b      	ldrh	r3, [r7, #18]
 80158d0:	4413      	add	r3, r2
 80158d2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80158d4:	68f8      	ldr	r0, [r7, #12]
 80158d6:	f7f7 fdc3 	bl	800d460 <pbuf_free>
  while (p != NULL) {
 80158da:	69bb      	ldr	r3, [r7, #24]
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d1dc      	bne.n	801589a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80158e0:	6839      	ldr	r1, [r7, #0]
 80158e2:	6878      	ldr	r0, [r7, #4]
 80158e4:	f000 f8c2 	bl	8015a6c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80158e8:	4b10      	ldr	r3, [pc, #64]	; (801592c <ip_reass_free_complete_datagram+0x140>)
 80158ea:	881b      	ldrh	r3, [r3, #0]
 80158ec:	8bfa      	ldrh	r2, [r7, #30]
 80158ee:	429a      	cmp	r2, r3
 80158f0:	d905      	bls.n	80158fe <ip_reass_free_complete_datagram+0x112>
 80158f2:	4b09      	ldr	r3, [pc, #36]	; (8015918 <ip_reass_free_complete_datagram+0x12c>)
 80158f4:	22d2      	movs	r2, #210	; 0xd2
 80158f6:	490e      	ldr	r1, [pc, #56]	; (8015930 <ip_reass_free_complete_datagram+0x144>)
 80158f8:	4809      	ldr	r0, [pc, #36]	; (8015920 <ip_reass_free_complete_datagram+0x134>)
 80158fa:	f000 febf 	bl	801667c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80158fe:	4b0b      	ldr	r3, [pc, #44]	; (801592c <ip_reass_free_complete_datagram+0x140>)
 8015900:	881a      	ldrh	r2, [r3, #0]
 8015902:	8bfb      	ldrh	r3, [r7, #30]
 8015904:	1ad3      	subs	r3, r2, r3
 8015906:	b29a      	uxth	r2, r3
 8015908:	4b08      	ldr	r3, [pc, #32]	; (801592c <ip_reass_free_complete_datagram+0x140>)
 801590a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801590c:	8bfb      	ldrh	r3, [r7, #30]
}
 801590e:	4618      	mov	r0, r3
 8015910:	3720      	adds	r7, #32
 8015912:	46bd      	mov	sp, r7
 8015914:	bd80      	pop	{r7, pc}
 8015916:	bf00      	nop
 8015918:	0801b4e4 	.word	0x0801b4e4
 801591c:	0801b520 	.word	0x0801b520
 8015920:	0801b52c 	.word	0x0801b52c
 8015924:	0801b554 	.word	0x0801b554
 8015928:	0801b568 	.word	0x0801b568
 801592c:	200016c0 	.word	0x200016c0
 8015930:	0801b588 	.word	0x0801b588

08015934 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015934:	b580      	push	{r7, lr}
 8015936:	b08a      	sub	sp, #40	; 0x28
 8015938:	af00      	add	r7, sp, #0
 801593a:	6078      	str	r0, [r7, #4]
 801593c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801593e:	2300      	movs	r3, #0
 8015940:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015942:	2300      	movs	r3, #0
 8015944:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015946:	2300      	movs	r3, #0
 8015948:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801594a:	2300      	movs	r3, #0
 801594c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801594e:	2300      	movs	r3, #0
 8015950:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015952:	4b28      	ldr	r3, [pc, #160]	; (80159f4 <ip_reass_remove_oldest_datagram+0xc0>)
 8015954:	681b      	ldr	r3, [r3, #0]
 8015956:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015958:	e030      	b.n	80159bc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801595a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801595c:	695a      	ldr	r2, [r3, #20]
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	68db      	ldr	r3, [r3, #12]
 8015962:	429a      	cmp	r2, r3
 8015964:	d10c      	bne.n	8015980 <ip_reass_remove_oldest_datagram+0x4c>
 8015966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015968:	699a      	ldr	r2, [r3, #24]
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	691b      	ldr	r3, [r3, #16]
 801596e:	429a      	cmp	r2, r3
 8015970:	d106      	bne.n	8015980 <ip_reass_remove_oldest_datagram+0x4c>
 8015972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015974:	899a      	ldrh	r2, [r3, #12]
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	889b      	ldrh	r3, [r3, #4]
 801597a:	b29b      	uxth	r3, r3
 801597c:	429a      	cmp	r2, r3
 801597e:	d014      	beq.n	80159aa <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015980:	693b      	ldr	r3, [r7, #16]
 8015982:	3301      	adds	r3, #1
 8015984:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015986:	6a3b      	ldr	r3, [r7, #32]
 8015988:	2b00      	cmp	r3, #0
 801598a:	d104      	bne.n	8015996 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801598c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801598e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015990:	69fb      	ldr	r3, [r7, #28]
 8015992:	61bb      	str	r3, [r7, #24]
 8015994:	e009      	b.n	80159aa <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015998:	7fda      	ldrb	r2, [r3, #31]
 801599a:	6a3b      	ldr	r3, [r7, #32]
 801599c:	7fdb      	ldrb	r3, [r3, #31]
 801599e:	429a      	cmp	r2, r3
 80159a0:	d803      	bhi.n	80159aa <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80159a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159a4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80159a6:	69fb      	ldr	r3, [r7, #28]
 80159a8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80159aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159ac:	681b      	ldr	r3, [r3, #0]
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d001      	beq.n	80159b6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80159b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159b4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80159b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159b8:	681b      	ldr	r3, [r3, #0]
 80159ba:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80159bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d1cb      	bne.n	801595a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80159c2:	6a3b      	ldr	r3, [r7, #32]
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	d008      	beq.n	80159da <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80159c8:	69b9      	ldr	r1, [r7, #24]
 80159ca:	6a38      	ldr	r0, [r7, #32]
 80159cc:	f7ff ff0e 	bl	80157ec <ip_reass_free_complete_datagram>
 80159d0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80159d2:	697a      	ldr	r2, [r7, #20]
 80159d4:	68fb      	ldr	r3, [r7, #12]
 80159d6:	4413      	add	r3, r2
 80159d8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80159da:	697a      	ldr	r2, [r7, #20]
 80159dc:	683b      	ldr	r3, [r7, #0]
 80159de:	429a      	cmp	r2, r3
 80159e0:	da02      	bge.n	80159e8 <ip_reass_remove_oldest_datagram+0xb4>
 80159e2:	693b      	ldr	r3, [r7, #16]
 80159e4:	2b01      	cmp	r3, #1
 80159e6:	dcac      	bgt.n	8015942 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80159e8:	697b      	ldr	r3, [r7, #20]
}
 80159ea:	4618      	mov	r0, r3
 80159ec:	3728      	adds	r7, #40	; 0x28
 80159ee:	46bd      	mov	sp, r7
 80159f0:	bd80      	pop	{r7, pc}
 80159f2:	bf00      	nop
 80159f4:	200016bc 	.word	0x200016bc

080159f8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80159f8:	b580      	push	{r7, lr}
 80159fa:	b084      	sub	sp, #16
 80159fc:	af00      	add	r7, sp, #0
 80159fe:	6078      	str	r0, [r7, #4]
 8015a00:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015a02:	2004      	movs	r0, #4
 8015a04:	f7f6 fece 	bl	800c7a4 <memp_malloc>
 8015a08:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015a0a:	68fb      	ldr	r3, [r7, #12]
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d110      	bne.n	8015a32 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015a10:	6839      	ldr	r1, [r7, #0]
 8015a12:	6878      	ldr	r0, [r7, #4]
 8015a14:	f7ff ff8e 	bl	8015934 <ip_reass_remove_oldest_datagram>
 8015a18:	4602      	mov	r2, r0
 8015a1a:	683b      	ldr	r3, [r7, #0]
 8015a1c:	4293      	cmp	r3, r2
 8015a1e:	dc03      	bgt.n	8015a28 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015a20:	2004      	movs	r0, #4
 8015a22:	f7f6 febf 	bl	800c7a4 <memp_malloc>
 8015a26:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015a28:	68fb      	ldr	r3, [r7, #12]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d101      	bne.n	8015a32 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015a2e:	2300      	movs	r3, #0
 8015a30:	e016      	b.n	8015a60 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015a32:	2220      	movs	r2, #32
 8015a34:	2100      	movs	r1, #0
 8015a36:	68f8      	ldr	r0, [r7, #12]
 8015a38:	f000 fe18 	bl	801666c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015a3c:	68fb      	ldr	r3, [r7, #12]
 8015a3e:	220f      	movs	r2, #15
 8015a40:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015a42:	4b09      	ldr	r3, [pc, #36]	; (8015a68 <ip_reass_enqueue_new_datagram+0x70>)
 8015a44:	681a      	ldr	r2, [r3, #0]
 8015a46:	68fb      	ldr	r3, [r7, #12]
 8015a48:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015a4a:	4a07      	ldr	r2, [pc, #28]	; (8015a68 <ip_reass_enqueue_new_datagram+0x70>)
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015a50:	68fb      	ldr	r3, [r7, #12]
 8015a52:	3308      	adds	r3, #8
 8015a54:	2214      	movs	r2, #20
 8015a56:	6879      	ldr	r1, [r7, #4]
 8015a58:	4618      	mov	r0, r3
 8015a5a:	f000 fddf 	bl	801661c <memcpy>
  return ipr;
 8015a5e:	68fb      	ldr	r3, [r7, #12]
}
 8015a60:	4618      	mov	r0, r3
 8015a62:	3710      	adds	r7, #16
 8015a64:	46bd      	mov	sp, r7
 8015a66:	bd80      	pop	{r7, pc}
 8015a68:	200016bc 	.word	0x200016bc

08015a6c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015a6c:	b580      	push	{r7, lr}
 8015a6e:	b082      	sub	sp, #8
 8015a70:	af00      	add	r7, sp, #0
 8015a72:	6078      	str	r0, [r7, #4]
 8015a74:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015a76:	4b10      	ldr	r3, [pc, #64]	; (8015ab8 <ip_reass_dequeue_datagram+0x4c>)
 8015a78:	681b      	ldr	r3, [r3, #0]
 8015a7a:	687a      	ldr	r2, [r7, #4]
 8015a7c:	429a      	cmp	r2, r3
 8015a7e:	d104      	bne.n	8015a8a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	681b      	ldr	r3, [r3, #0]
 8015a84:	4a0c      	ldr	r2, [pc, #48]	; (8015ab8 <ip_reass_dequeue_datagram+0x4c>)
 8015a86:	6013      	str	r3, [r2, #0]
 8015a88:	e00d      	b.n	8015aa6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015a8a:	683b      	ldr	r3, [r7, #0]
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	d106      	bne.n	8015a9e <ip_reass_dequeue_datagram+0x32>
 8015a90:	4b0a      	ldr	r3, [pc, #40]	; (8015abc <ip_reass_dequeue_datagram+0x50>)
 8015a92:	f240 1245 	movw	r2, #325	; 0x145
 8015a96:	490a      	ldr	r1, [pc, #40]	; (8015ac0 <ip_reass_dequeue_datagram+0x54>)
 8015a98:	480a      	ldr	r0, [pc, #40]	; (8015ac4 <ip_reass_dequeue_datagram+0x58>)
 8015a9a:	f000 fdef 	bl	801667c <iprintf>
    prev->next = ipr->next;
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	681a      	ldr	r2, [r3, #0]
 8015aa2:	683b      	ldr	r3, [r7, #0]
 8015aa4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015aa6:	6879      	ldr	r1, [r7, #4]
 8015aa8:	2004      	movs	r0, #4
 8015aaa:	f7f6 fec7 	bl	800c83c <memp_free>
}
 8015aae:	bf00      	nop
 8015ab0:	3708      	adds	r7, #8
 8015ab2:	46bd      	mov	sp, r7
 8015ab4:	bd80      	pop	{r7, pc}
 8015ab6:	bf00      	nop
 8015ab8:	200016bc 	.word	0x200016bc
 8015abc:	0801b4e4 	.word	0x0801b4e4
 8015ac0:	0801b5ac 	.word	0x0801b5ac
 8015ac4:	0801b52c 	.word	0x0801b52c

08015ac8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015ac8:	b580      	push	{r7, lr}
 8015aca:	b08c      	sub	sp, #48	; 0x30
 8015acc:	af00      	add	r7, sp, #0
 8015ace:	60f8      	str	r0, [r7, #12]
 8015ad0:	60b9      	str	r1, [r7, #8]
 8015ad2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015ad4:	2300      	movs	r3, #0
 8015ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015ad8:	2301      	movs	r3, #1
 8015ada:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015adc:	68bb      	ldr	r3, [r7, #8]
 8015ade:	685b      	ldr	r3, [r3, #4]
 8015ae0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015ae2:	69fb      	ldr	r3, [r7, #28]
 8015ae4:	885b      	ldrh	r3, [r3, #2]
 8015ae6:	b29b      	uxth	r3, r3
 8015ae8:	4618      	mov	r0, r3
 8015aea:	f7f6 f927 	bl	800bd3c <lwip_htons>
 8015aee:	4603      	mov	r3, r0
 8015af0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015af2:	69fb      	ldr	r3, [r7, #28]
 8015af4:	781b      	ldrb	r3, [r3, #0]
 8015af6:	f003 030f 	and.w	r3, r3, #15
 8015afa:	b2db      	uxtb	r3, r3
 8015afc:	009b      	lsls	r3, r3, #2
 8015afe:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015b00:	7e7b      	ldrb	r3, [r7, #25]
 8015b02:	b29b      	uxth	r3, r3
 8015b04:	8b7a      	ldrh	r2, [r7, #26]
 8015b06:	429a      	cmp	r2, r3
 8015b08:	d202      	bcs.n	8015b10 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015b0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015b0e:	e135      	b.n	8015d7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015b10:	7e7b      	ldrb	r3, [r7, #25]
 8015b12:	b29b      	uxth	r3, r3
 8015b14:	8b7a      	ldrh	r2, [r7, #26]
 8015b16:	1ad3      	subs	r3, r2, r3
 8015b18:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8015b1a:	69fb      	ldr	r3, [r7, #28]
 8015b1c:	88db      	ldrh	r3, [r3, #6]
 8015b1e:	b29b      	uxth	r3, r3
 8015b20:	4618      	mov	r0, r3
 8015b22:	f7f6 f90b 	bl	800bd3c <lwip_htons>
 8015b26:	4603      	mov	r3, r0
 8015b28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015b2c:	b29b      	uxth	r3, r3
 8015b2e:	00db      	lsls	r3, r3, #3
 8015b30:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015b32:	68bb      	ldr	r3, [r7, #8]
 8015b34:	685b      	ldr	r3, [r3, #4]
 8015b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8015b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b3a:	2200      	movs	r2, #0
 8015b3c:	701a      	strb	r2, [r3, #0]
 8015b3e:	2200      	movs	r2, #0
 8015b40:	705a      	strb	r2, [r3, #1]
 8015b42:	2200      	movs	r2, #0
 8015b44:	709a      	strb	r2, [r3, #2]
 8015b46:	2200      	movs	r2, #0
 8015b48:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b4c:	8afa      	ldrh	r2, [r7, #22]
 8015b4e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015b50:	8afa      	ldrh	r2, [r7, #22]
 8015b52:	8b7b      	ldrh	r3, [r7, #26]
 8015b54:	4413      	add	r3, r2
 8015b56:	b29a      	uxth	r2, r3
 8015b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b5a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b5e:	88db      	ldrh	r3, [r3, #6]
 8015b60:	b29b      	uxth	r3, r3
 8015b62:	8afa      	ldrh	r2, [r7, #22]
 8015b64:	429a      	cmp	r2, r3
 8015b66:	d902      	bls.n	8015b6e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015b68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015b6c:	e106      	b.n	8015d7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015b6e:	68fb      	ldr	r3, [r7, #12]
 8015b70:	685b      	ldr	r3, [r3, #4]
 8015b72:	627b      	str	r3, [r7, #36]	; 0x24
 8015b74:	e068      	b.n	8015c48 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8015b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b78:	685b      	ldr	r3, [r3, #4]
 8015b7a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b7e:	889b      	ldrh	r3, [r3, #4]
 8015b80:	b29a      	uxth	r2, r3
 8015b82:	693b      	ldr	r3, [r7, #16]
 8015b84:	889b      	ldrh	r3, [r3, #4]
 8015b86:	b29b      	uxth	r3, r3
 8015b88:	429a      	cmp	r2, r3
 8015b8a:	d235      	bcs.n	8015bf8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015b90:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	d020      	beq.n	8015bda <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b9a:	889b      	ldrh	r3, [r3, #4]
 8015b9c:	b29a      	uxth	r2, r3
 8015b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ba0:	88db      	ldrh	r3, [r3, #6]
 8015ba2:	b29b      	uxth	r3, r3
 8015ba4:	429a      	cmp	r2, r3
 8015ba6:	d307      	bcc.n	8015bb8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015baa:	88db      	ldrh	r3, [r3, #6]
 8015bac:	b29a      	uxth	r2, r3
 8015bae:	693b      	ldr	r3, [r7, #16]
 8015bb0:	889b      	ldrh	r3, [r3, #4]
 8015bb2:	b29b      	uxth	r3, r3
 8015bb4:	429a      	cmp	r2, r3
 8015bb6:	d902      	bls.n	8015bbe <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015bb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015bbc:	e0de      	b.n	8015d7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bc0:	68ba      	ldr	r2, [r7, #8]
 8015bc2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bc6:	88db      	ldrh	r3, [r3, #6]
 8015bc8:	b29a      	uxth	r2, r3
 8015bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bcc:	889b      	ldrh	r3, [r3, #4]
 8015bce:	b29b      	uxth	r3, r3
 8015bd0:	429a      	cmp	r2, r3
 8015bd2:	d03d      	beq.n	8015c50 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015bd4:	2300      	movs	r3, #0
 8015bd6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015bd8:	e03a      	b.n	8015c50 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8015bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bdc:	88db      	ldrh	r3, [r3, #6]
 8015bde:	b29a      	uxth	r2, r3
 8015be0:	693b      	ldr	r3, [r7, #16]
 8015be2:	889b      	ldrh	r3, [r3, #4]
 8015be4:	b29b      	uxth	r3, r3
 8015be6:	429a      	cmp	r2, r3
 8015be8:	d902      	bls.n	8015bf0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015bea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015bee:	e0c5      	b.n	8015d7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015bf0:	68fb      	ldr	r3, [r7, #12]
 8015bf2:	68ba      	ldr	r2, [r7, #8]
 8015bf4:	605a      	str	r2, [r3, #4]
      break;
 8015bf6:	e02b      	b.n	8015c50 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bfa:	889b      	ldrh	r3, [r3, #4]
 8015bfc:	b29a      	uxth	r2, r3
 8015bfe:	693b      	ldr	r3, [r7, #16]
 8015c00:	889b      	ldrh	r3, [r3, #4]
 8015c02:	b29b      	uxth	r3, r3
 8015c04:	429a      	cmp	r2, r3
 8015c06:	d102      	bne.n	8015c0e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015c08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015c0c:	e0b6      	b.n	8015d7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c10:	889b      	ldrh	r3, [r3, #4]
 8015c12:	b29a      	uxth	r2, r3
 8015c14:	693b      	ldr	r3, [r7, #16]
 8015c16:	88db      	ldrh	r3, [r3, #6]
 8015c18:	b29b      	uxth	r3, r3
 8015c1a:	429a      	cmp	r2, r3
 8015c1c:	d202      	bcs.n	8015c24 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015c1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015c22:	e0ab      	b.n	8015d7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d009      	beq.n	8015c3e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8015c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c2c:	88db      	ldrh	r3, [r3, #6]
 8015c2e:	b29a      	uxth	r2, r3
 8015c30:	693b      	ldr	r3, [r7, #16]
 8015c32:	889b      	ldrh	r3, [r3, #4]
 8015c34:	b29b      	uxth	r3, r3
 8015c36:	429a      	cmp	r2, r3
 8015c38:	d001      	beq.n	8015c3e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015c3a:	2300      	movs	r3, #0
 8015c3c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015c3e:	693b      	ldr	r3, [r7, #16]
 8015c40:	681b      	ldr	r3, [r3, #0]
 8015c42:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8015c44:	693b      	ldr	r3, [r7, #16]
 8015c46:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8015c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d193      	bne.n	8015b76 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015c4e:	e000      	b.n	8015c52 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015c50:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	d12d      	bne.n	8015cb4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	d01c      	beq.n	8015c98 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c60:	88db      	ldrh	r3, [r3, #6]
 8015c62:	b29a      	uxth	r2, r3
 8015c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c66:	889b      	ldrh	r3, [r3, #4]
 8015c68:	b29b      	uxth	r3, r3
 8015c6a:	429a      	cmp	r2, r3
 8015c6c:	d906      	bls.n	8015c7c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015c6e:	4b45      	ldr	r3, [pc, #276]	; (8015d84 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015c70:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8015c74:	4944      	ldr	r1, [pc, #272]	; (8015d88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015c76:	4845      	ldr	r0, [pc, #276]	; (8015d8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015c78:	f000 fd00 	bl	801667c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c7e:	68ba      	ldr	r2, [r7, #8]
 8015c80:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c84:	88db      	ldrh	r3, [r3, #6]
 8015c86:	b29a      	uxth	r2, r3
 8015c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c8a:	889b      	ldrh	r3, [r3, #4]
 8015c8c:	b29b      	uxth	r3, r3
 8015c8e:	429a      	cmp	r2, r3
 8015c90:	d010      	beq.n	8015cb4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015c92:	2300      	movs	r3, #0
 8015c94:	623b      	str	r3, [r7, #32]
 8015c96:	e00d      	b.n	8015cb4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015c98:	68fb      	ldr	r3, [r7, #12]
 8015c9a:	685b      	ldr	r3, [r3, #4]
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d006      	beq.n	8015cae <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015ca0:	4b38      	ldr	r3, [pc, #224]	; (8015d84 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015ca2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8015ca6:	493a      	ldr	r1, [pc, #232]	; (8015d90 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015ca8:	4838      	ldr	r0, [pc, #224]	; (8015d8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015caa:	f000 fce7 	bl	801667c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015cae:	68fb      	ldr	r3, [r7, #12]
 8015cb0:	68ba      	ldr	r2, [r7, #8]
 8015cb2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	d105      	bne.n	8015cc6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8015cba:	68fb      	ldr	r3, [r7, #12]
 8015cbc:	7f9b      	ldrb	r3, [r3, #30]
 8015cbe:	f003 0301 	and.w	r3, r3, #1
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d059      	beq.n	8015d7a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015cc6:	6a3b      	ldr	r3, [r7, #32]
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	d04f      	beq.n	8015d6c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015ccc:	68fb      	ldr	r3, [r7, #12]
 8015cce:	685b      	ldr	r3, [r3, #4]
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	d006      	beq.n	8015ce2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015cd4:	68fb      	ldr	r3, [r7, #12]
 8015cd6:	685b      	ldr	r3, [r3, #4]
 8015cd8:	685b      	ldr	r3, [r3, #4]
 8015cda:	889b      	ldrh	r3, [r3, #4]
 8015cdc:	b29b      	uxth	r3, r3
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d002      	beq.n	8015ce8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015ce2:	2300      	movs	r3, #0
 8015ce4:	623b      	str	r3, [r7, #32]
 8015ce6:	e041      	b.n	8015d6c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cea:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8015cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cee:	681b      	ldr	r3, [r3, #0]
 8015cf0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015cf2:	e012      	b.n	8015d1a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cf6:	685b      	ldr	r3, [r3, #4]
 8015cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8015cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cfc:	88db      	ldrh	r3, [r3, #6]
 8015cfe:	b29a      	uxth	r2, r3
 8015d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d02:	889b      	ldrh	r3, [r3, #4]
 8015d04:	b29b      	uxth	r3, r3
 8015d06:	429a      	cmp	r2, r3
 8015d08:	d002      	beq.n	8015d10 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8015d0a:	2300      	movs	r3, #0
 8015d0c:	623b      	str	r3, [r7, #32]
            break;
 8015d0e:	e007      	b.n	8015d20 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d12:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8015d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d16:	681b      	ldr	r3, [r3, #0]
 8015d18:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d1e9      	bne.n	8015cf4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015d20:	6a3b      	ldr	r3, [r7, #32]
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d022      	beq.n	8015d6c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015d26:	68fb      	ldr	r3, [r7, #12]
 8015d28:	685b      	ldr	r3, [r3, #4]
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d106      	bne.n	8015d3c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015d2e:	4b15      	ldr	r3, [pc, #84]	; (8015d84 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015d30:	f240 12df 	movw	r2, #479	; 0x1df
 8015d34:	4917      	ldr	r1, [pc, #92]	; (8015d94 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015d36:	4815      	ldr	r0, [pc, #84]	; (8015d8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015d38:	f000 fca0 	bl	801667c <iprintf>
          LWIP_ASSERT("sanity check",
 8015d3c:	68fb      	ldr	r3, [r7, #12]
 8015d3e:	685b      	ldr	r3, [r3, #4]
 8015d40:	685b      	ldr	r3, [r3, #4]
 8015d42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015d44:	429a      	cmp	r2, r3
 8015d46:	d106      	bne.n	8015d56 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015d48:	4b0e      	ldr	r3, [pc, #56]	; (8015d84 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015d4a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8015d4e:	4911      	ldr	r1, [pc, #68]	; (8015d94 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015d50:	480e      	ldr	r0, [pc, #56]	; (8015d8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015d52:	f000 fc93 	bl	801667c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d58:	681b      	ldr	r3, [r3, #0]
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d006      	beq.n	8015d6c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015d5e:	4b09      	ldr	r3, [pc, #36]	; (8015d84 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015d60:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8015d64:	490c      	ldr	r1, [pc, #48]	; (8015d98 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015d66:	4809      	ldr	r0, [pc, #36]	; (8015d8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015d68:	f000 fc88 	bl	801667c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015d6c:	6a3b      	ldr	r3, [r7, #32]
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	bf14      	ite	ne
 8015d72:	2301      	movne	r3, #1
 8015d74:	2300      	moveq	r3, #0
 8015d76:	b2db      	uxtb	r3, r3
 8015d78:	e000      	b.n	8015d7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015d7a:	2300      	movs	r3, #0
}
 8015d7c:	4618      	mov	r0, r3
 8015d7e:	3730      	adds	r7, #48	; 0x30
 8015d80:	46bd      	mov	sp, r7
 8015d82:	bd80      	pop	{r7, pc}
 8015d84:	0801b4e4 	.word	0x0801b4e4
 8015d88:	0801b5c8 	.word	0x0801b5c8
 8015d8c:	0801b52c 	.word	0x0801b52c
 8015d90:	0801b5e8 	.word	0x0801b5e8
 8015d94:	0801b620 	.word	0x0801b620
 8015d98:	0801b630 	.word	0x0801b630

08015d9c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015d9c:	b580      	push	{r7, lr}
 8015d9e:	b08e      	sub	sp, #56	; 0x38
 8015da0:	af00      	add	r7, sp, #0
 8015da2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	685b      	ldr	r3, [r3, #4]
 8015da8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8015daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dac:	781b      	ldrb	r3, [r3, #0]
 8015dae:	f003 030f 	and.w	r3, r3, #15
 8015db2:	b2db      	uxtb	r3, r3
 8015db4:	009b      	lsls	r3, r3, #2
 8015db6:	b2db      	uxtb	r3, r3
 8015db8:	2b14      	cmp	r3, #20
 8015dba:	f040 8167 	bne.w	801608c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dc0:	88db      	ldrh	r3, [r3, #6]
 8015dc2:	b29b      	uxth	r3, r3
 8015dc4:	4618      	mov	r0, r3
 8015dc6:	f7f5 ffb9 	bl	800bd3c <lwip_htons>
 8015dca:	4603      	mov	r3, r0
 8015dcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015dd0:	b29b      	uxth	r3, r3
 8015dd2:	00db      	lsls	r3, r3, #3
 8015dd4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dd8:	885b      	ldrh	r3, [r3, #2]
 8015dda:	b29b      	uxth	r3, r3
 8015ddc:	4618      	mov	r0, r3
 8015dde:	f7f5 ffad 	bl	800bd3c <lwip_htons>
 8015de2:	4603      	mov	r3, r0
 8015de4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015de8:	781b      	ldrb	r3, [r3, #0]
 8015dea:	f003 030f 	and.w	r3, r3, #15
 8015dee:	b2db      	uxtb	r3, r3
 8015df0:	009b      	lsls	r3, r3, #2
 8015df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8015df6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015dfa:	b29b      	uxth	r3, r3
 8015dfc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015dfe:	429a      	cmp	r2, r3
 8015e00:	f0c0 8146 	bcc.w	8016090 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015e04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015e08:	b29b      	uxth	r3, r3
 8015e0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015e0c:	1ad3      	subs	r3, r2, r3
 8015e0e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015e10:	6878      	ldr	r0, [r7, #4]
 8015e12:	f7f7 fbad 	bl	800d570 <pbuf_clen>
 8015e16:	4603      	mov	r3, r0
 8015e18:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015e1a:	4b9f      	ldr	r3, [pc, #636]	; (8016098 <ip4_reass+0x2fc>)
 8015e1c:	881b      	ldrh	r3, [r3, #0]
 8015e1e:	461a      	mov	r2, r3
 8015e20:	8c3b      	ldrh	r3, [r7, #32]
 8015e22:	4413      	add	r3, r2
 8015e24:	2b0a      	cmp	r3, #10
 8015e26:	dd10      	ble.n	8015e4a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015e28:	8c3b      	ldrh	r3, [r7, #32]
 8015e2a:	4619      	mov	r1, r3
 8015e2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015e2e:	f7ff fd81 	bl	8015934 <ip_reass_remove_oldest_datagram>
 8015e32:	4603      	mov	r3, r0
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	f000 812d 	beq.w	8016094 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015e3a:	4b97      	ldr	r3, [pc, #604]	; (8016098 <ip4_reass+0x2fc>)
 8015e3c:	881b      	ldrh	r3, [r3, #0]
 8015e3e:	461a      	mov	r2, r3
 8015e40:	8c3b      	ldrh	r3, [r7, #32]
 8015e42:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015e44:	2b0a      	cmp	r3, #10
 8015e46:	f300 8125 	bgt.w	8016094 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015e4a:	4b94      	ldr	r3, [pc, #592]	; (801609c <ip4_reass+0x300>)
 8015e4c:	681b      	ldr	r3, [r3, #0]
 8015e4e:	633b      	str	r3, [r7, #48]	; 0x30
 8015e50:	e015      	b.n	8015e7e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e54:	695a      	ldr	r2, [r3, #20]
 8015e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e58:	68db      	ldr	r3, [r3, #12]
 8015e5a:	429a      	cmp	r2, r3
 8015e5c:	d10c      	bne.n	8015e78 <ip4_reass+0xdc>
 8015e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e60:	699a      	ldr	r2, [r3, #24]
 8015e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e64:	691b      	ldr	r3, [r3, #16]
 8015e66:	429a      	cmp	r2, r3
 8015e68:	d106      	bne.n	8015e78 <ip4_reass+0xdc>
 8015e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e6c:	899a      	ldrh	r2, [r3, #12]
 8015e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e70:	889b      	ldrh	r3, [r3, #4]
 8015e72:	b29b      	uxth	r3, r3
 8015e74:	429a      	cmp	r2, r3
 8015e76:	d006      	beq.n	8015e86 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e7a:	681b      	ldr	r3, [r3, #0]
 8015e7c:	633b      	str	r3, [r7, #48]	; 0x30
 8015e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d1e6      	bne.n	8015e52 <ip4_reass+0xb6>
 8015e84:	e000      	b.n	8015e88 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015e86:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d109      	bne.n	8015ea2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015e8e:	8c3b      	ldrh	r3, [r7, #32]
 8015e90:	4619      	mov	r1, r3
 8015e92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015e94:	f7ff fdb0 	bl	80159f8 <ip_reass_enqueue_new_datagram>
 8015e98:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8015e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d11c      	bne.n	8015eda <ip4_reass+0x13e>
      goto nullreturn;
 8015ea0:	e109      	b.n	80160b6 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ea4:	88db      	ldrh	r3, [r3, #6]
 8015ea6:	b29b      	uxth	r3, r3
 8015ea8:	4618      	mov	r0, r3
 8015eaa:	f7f5 ff47 	bl	800bd3c <lwip_htons>
 8015eae:	4603      	mov	r3, r0
 8015eb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d110      	bne.n	8015eda <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015eba:	89db      	ldrh	r3, [r3, #14]
 8015ebc:	4618      	mov	r0, r3
 8015ebe:	f7f5 ff3d 	bl	800bd3c <lwip_htons>
 8015ec2:	4603      	mov	r3, r0
 8015ec4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d006      	beq.n	8015eda <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ece:	3308      	adds	r3, #8
 8015ed0:	2214      	movs	r2, #20
 8015ed2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015ed4:	4618      	mov	r0, r3
 8015ed6:	f000 fba1 	bl	801661c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8015eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015edc:	88db      	ldrh	r3, [r3, #6]
 8015ede:	b29b      	uxth	r3, r3
 8015ee0:	f003 0320 	and.w	r3, r3, #32
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	bf0c      	ite	eq
 8015ee8:	2301      	moveq	r3, #1
 8015eea:	2300      	movne	r3, #0
 8015eec:	b2db      	uxtb	r3, r3
 8015eee:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015ef0:	69fb      	ldr	r3, [r7, #28]
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	d00e      	beq.n	8015f14 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015ef6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015ef8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015efa:	4413      	add	r3, r2
 8015efc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015efe:	8b7a      	ldrh	r2, [r7, #26]
 8015f00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015f02:	429a      	cmp	r2, r3
 8015f04:	f0c0 80a0 	bcc.w	8016048 <ip4_reass+0x2ac>
 8015f08:	8b7b      	ldrh	r3, [r7, #26]
 8015f0a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8015f0e:	4293      	cmp	r3, r2
 8015f10:	f200 809a 	bhi.w	8016048 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015f14:	69fa      	ldr	r2, [r7, #28]
 8015f16:	6879      	ldr	r1, [r7, #4]
 8015f18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f1a:	f7ff fdd5 	bl	8015ac8 <ip_reass_chain_frag_into_datagram_and_validate>
 8015f1e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015f20:	697b      	ldr	r3, [r7, #20]
 8015f22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015f26:	f000 8091 	beq.w	801604c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8015f2a:	4b5b      	ldr	r3, [pc, #364]	; (8016098 <ip4_reass+0x2fc>)
 8015f2c:	881a      	ldrh	r2, [r3, #0]
 8015f2e:	8c3b      	ldrh	r3, [r7, #32]
 8015f30:	4413      	add	r3, r2
 8015f32:	b29a      	uxth	r2, r3
 8015f34:	4b58      	ldr	r3, [pc, #352]	; (8016098 <ip4_reass+0x2fc>)
 8015f36:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8015f38:	69fb      	ldr	r3, [r7, #28]
 8015f3a:	2b00      	cmp	r3, #0
 8015f3c:	d00d      	beq.n	8015f5a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8015f3e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015f40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015f42:	4413      	add	r3, r2
 8015f44:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8015f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f48:	8a7a      	ldrh	r2, [r7, #18]
 8015f4a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f4e:	7f9b      	ldrb	r3, [r3, #30]
 8015f50:	f043 0301 	orr.w	r3, r3, #1
 8015f54:	b2da      	uxtb	r2, r3
 8015f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f58:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8015f5a:	697b      	ldr	r3, [r7, #20]
 8015f5c:	2b01      	cmp	r3, #1
 8015f5e:	d171      	bne.n	8016044 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8015f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f62:	8b9b      	ldrh	r3, [r3, #28]
 8015f64:	3314      	adds	r3, #20
 8015f66:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8015f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f6a:	685b      	ldr	r3, [r3, #4]
 8015f6c:	685b      	ldr	r3, [r3, #4]
 8015f6e:	681b      	ldr	r3, [r3, #0]
 8015f70:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8015f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f74:	685b      	ldr	r3, [r3, #4]
 8015f76:	685b      	ldr	r3, [r3, #4]
 8015f78:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8015f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f7c:	3308      	adds	r3, #8
 8015f7e:	2214      	movs	r2, #20
 8015f80:	4619      	mov	r1, r3
 8015f82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015f84:	f000 fb4a 	bl	801661c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8015f88:	8a3b      	ldrh	r3, [r7, #16]
 8015f8a:	4618      	mov	r0, r3
 8015f8c:	f7f5 fed6 	bl	800bd3c <lwip_htons>
 8015f90:	4603      	mov	r3, r0
 8015f92:	461a      	mov	r2, r3
 8015f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f96:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f9a:	2200      	movs	r2, #0
 8015f9c:	719a      	strb	r2, [r3, #6]
 8015f9e:	2200      	movs	r2, #0
 8015fa0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8015fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fa4:	2200      	movs	r2, #0
 8015fa6:	729a      	strb	r2, [r3, #10]
 8015fa8:	2200      	movs	r2, #0
 8015faa:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fae:	685b      	ldr	r3, [r3, #4]
 8015fb0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8015fb2:	e00d      	b.n	8015fd0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8015fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015fb6:	685b      	ldr	r3, [r3, #4]
 8015fb8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8015fba:	2114      	movs	r1, #20
 8015fbc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015fbe:	f7f7 f9c9 	bl	800d354 <pbuf_remove_header>
      pbuf_cat(p, r);
 8015fc2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015fc4:	6878      	ldr	r0, [r7, #4]
 8015fc6:	f7f7 fb0d 	bl	800d5e4 <pbuf_cat>
      r = iprh->next_pbuf;
 8015fca:	68fb      	ldr	r3, [r7, #12]
 8015fcc:	681b      	ldr	r3, [r3, #0]
 8015fce:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8015fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d1ee      	bne.n	8015fb4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8015fd6:	4b31      	ldr	r3, [pc, #196]	; (801609c <ip4_reass+0x300>)
 8015fd8:	681b      	ldr	r3, [r3, #0]
 8015fda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015fdc:	429a      	cmp	r2, r3
 8015fde:	d102      	bne.n	8015fe6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015fe0:	2300      	movs	r3, #0
 8015fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015fe4:	e010      	b.n	8016008 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015fe6:	4b2d      	ldr	r3, [pc, #180]	; (801609c <ip4_reass+0x300>)
 8015fe8:	681b      	ldr	r3, [r3, #0]
 8015fea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015fec:	e007      	b.n	8015ffe <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8015fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ff0:	681b      	ldr	r3, [r3, #0]
 8015ff2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015ff4:	429a      	cmp	r2, r3
 8015ff6:	d006      	beq.n	8016006 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ffa:	681b      	ldr	r3, [r3, #0]
 8015ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016000:	2b00      	cmp	r3, #0
 8016002:	d1f4      	bne.n	8015fee <ip4_reass+0x252>
 8016004:	e000      	b.n	8016008 <ip4_reass+0x26c>
          break;
 8016006:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016008:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801600a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801600c:	f7ff fd2e 	bl	8015a6c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8016010:	6878      	ldr	r0, [r7, #4]
 8016012:	f7f7 faad 	bl	800d570 <pbuf_clen>
 8016016:	4603      	mov	r3, r0
 8016018:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801601a:	4b1f      	ldr	r3, [pc, #124]	; (8016098 <ip4_reass+0x2fc>)
 801601c:	881b      	ldrh	r3, [r3, #0]
 801601e:	8c3a      	ldrh	r2, [r7, #32]
 8016020:	429a      	cmp	r2, r3
 8016022:	d906      	bls.n	8016032 <ip4_reass+0x296>
 8016024:	4b1e      	ldr	r3, [pc, #120]	; (80160a0 <ip4_reass+0x304>)
 8016026:	f240 229b 	movw	r2, #667	; 0x29b
 801602a:	491e      	ldr	r1, [pc, #120]	; (80160a4 <ip4_reass+0x308>)
 801602c:	481e      	ldr	r0, [pc, #120]	; (80160a8 <ip4_reass+0x30c>)
 801602e:	f000 fb25 	bl	801667c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8016032:	4b19      	ldr	r3, [pc, #100]	; (8016098 <ip4_reass+0x2fc>)
 8016034:	881a      	ldrh	r2, [r3, #0]
 8016036:	8c3b      	ldrh	r3, [r7, #32]
 8016038:	1ad3      	subs	r3, r2, r3
 801603a:	b29a      	uxth	r2, r3
 801603c:	4b16      	ldr	r3, [pc, #88]	; (8016098 <ip4_reass+0x2fc>)
 801603e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	e03c      	b.n	80160be <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8016044:	2300      	movs	r3, #0
 8016046:	e03a      	b.n	80160be <ip4_reass+0x322>
      goto nullreturn_ipr;
 8016048:	bf00      	nop
 801604a:	e000      	b.n	801604e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801604c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801604e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016050:	2b00      	cmp	r3, #0
 8016052:	d106      	bne.n	8016062 <ip4_reass+0x2c6>
 8016054:	4b12      	ldr	r3, [pc, #72]	; (80160a0 <ip4_reass+0x304>)
 8016056:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801605a:	4914      	ldr	r1, [pc, #80]	; (80160ac <ip4_reass+0x310>)
 801605c:	4812      	ldr	r0, [pc, #72]	; (80160a8 <ip4_reass+0x30c>)
 801605e:	f000 fb0d 	bl	801667c <iprintf>
  if (ipr->p == NULL) {
 8016062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016064:	685b      	ldr	r3, [r3, #4]
 8016066:	2b00      	cmp	r3, #0
 8016068:	d124      	bne.n	80160b4 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801606a:	4b0c      	ldr	r3, [pc, #48]	; (801609c <ip4_reass+0x300>)
 801606c:	681b      	ldr	r3, [r3, #0]
 801606e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016070:	429a      	cmp	r2, r3
 8016072:	d006      	beq.n	8016082 <ip4_reass+0x2e6>
 8016074:	4b0a      	ldr	r3, [pc, #40]	; (80160a0 <ip4_reass+0x304>)
 8016076:	f240 22ab 	movw	r2, #683	; 0x2ab
 801607a:	490d      	ldr	r1, [pc, #52]	; (80160b0 <ip4_reass+0x314>)
 801607c:	480a      	ldr	r0, [pc, #40]	; (80160a8 <ip4_reass+0x30c>)
 801607e:	f000 fafd 	bl	801667c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8016082:	2100      	movs	r1, #0
 8016084:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016086:	f7ff fcf1 	bl	8015a6c <ip_reass_dequeue_datagram>
 801608a:	e014      	b.n	80160b6 <ip4_reass+0x31a>
    goto nullreturn;
 801608c:	bf00      	nop
 801608e:	e012      	b.n	80160b6 <ip4_reass+0x31a>
    goto nullreturn;
 8016090:	bf00      	nop
 8016092:	e010      	b.n	80160b6 <ip4_reass+0x31a>
      goto nullreturn;
 8016094:	bf00      	nop
 8016096:	e00e      	b.n	80160b6 <ip4_reass+0x31a>
 8016098:	200016c0 	.word	0x200016c0
 801609c:	200016bc 	.word	0x200016bc
 80160a0:	0801b4e4 	.word	0x0801b4e4
 80160a4:	0801b654 	.word	0x0801b654
 80160a8:	0801b52c 	.word	0x0801b52c
 80160ac:	0801b670 	.word	0x0801b670
 80160b0:	0801b67c 	.word	0x0801b67c
  }

nullreturn:
 80160b4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80160b6:	6878      	ldr	r0, [r7, #4]
 80160b8:	f7f7 f9d2 	bl	800d460 <pbuf_free>
  return NULL;
 80160bc:	2300      	movs	r3, #0
}
 80160be:	4618      	mov	r0, r3
 80160c0:	3738      	adds	r7, #56	; 0x38
 80160c2:	46bd      	mov	sp, r7
 80160c4:	bd80      	pop	{r7, pc}
 80160c6:	bf00      	nop

080160c8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80160c8:	b580      	push	{r7, lr}
 80160ca:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80160cc:	2005      	movs	r0, #5
 80160ce:	f7f6 fb69 	bl	800c7a4 <memp_malloc>
 80160d2:	4603      	mov	r3, r0
}
 80160d4:	4618      	mov	r0, r3
 80160d6:	bd80      	pop	{r7, pc}

080160d8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80160d8:	b580      	push	{r7, lr}
 80160da:	b082      	sub	sp, #8
 80160dc:	af00      	add	r7, sp, #0
 80160de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d106      	bne.n	80160f4 <ip_frag_free_pbuf_custom_ref+0x1c>
 80160e6:	4b07      	ldr	r3, [pc, #28]	; (8016104 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80160e8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80160ec:	4906      	ldr	r1, [pc, #24]	; (8016108 <ip_frag_free_pbuf_custom_ref+0x30>)
 80160ee:	4807      	ldr	r0, [pc, #28]	; (801610c <ip_frag_free_pbuf_custom_ref+0x34>)
 80160f0:	f000 fac4 	bl	801667c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80160f4:	6879      	ldr	r1, [r7, #4]
 80160f6:	2005      	movs	r0, #5
 80160f8:	f7f6 fba0 	bl	800c83c <memp_free>
}
 80160fc:	bf00      	nop
 80160fe:	3708      	adds	r7, #8
 8016100:	46bd      	mov	sp, r7
 8016102:	bd80      	pop	{r7, pc}
 8016104:	0801b4e4 	.word	0x0801b4e4
 8016108:	0801b69c 	.word	0x0801b69c
 801610c:	0801b52c 	.word	0x0801b52c

08016110 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016110:	b580      	push	{r7, lr}
 8016112:	b084      	sub	sp, #16
 8016114:	af00      	add	r7, sp, #0
 8016116:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801611c:	68fb      	ldr	r3, [r7, #12]
 801611e:	2b00      	cmp	r3, #0
 8016120:	d106      	bne.n	8016130 <ipfrag_free_pbuf_custom+0x20>
 8016122:	4b11      	ldr	r3, [pc, #68]	; (8016168 <ipfrag_free_pbuf_custom+0x58>)
 8016124:	f240 22ce 	movw	r2, #718	; 0x2ce
 8016128:	4910      	ldr	r1, [pc, #64]	; (801616c <ipfrag_free_pbuf_custom+0x5c>)
 801612a:	4811      	ldr	r0, [pc, #68]	; (8016170 <ipfrag_free_pbuf_custom+0x60>)
 801612c:	f000 faa6 	bl	801667c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016130:	68fa      	ldr	r2, [r7, #12]
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	429a      	cmp	r2, r3
 8016136:	d006      	beq.n	8016146 <ipfrag_free_pbuf_custom+0x36>
 8016138:	4b0b      	ldr	r3, [pc, #44]	; (8016168 <ipfrag_free_pbuf_custom+0x58>)
 801613a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801613e:	490d      	ldr	r1, [pc, #52]	; (8016174 <ipfrag_free_pbuf_custom+0x64>)
 8016140:	480b      	ldr	r0, [pc, #44]	; (8016170 <ipfrag_free_pbuf_custom+0x60>)
 8016142:	f000 fa9b 	bl	801667c <iprintf>
  if (pcr->original != NULL) {
 8016146:	68fb      	ldr	r3, [r7, #12]
 8016148:	695b      	ldr	r3, [r3, #20]
 801614a:	2b00      	cmp	r3, #0
 801614c:	d004      	beq.n	8016158 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801614e:	68fb      	ldr	r3, [r7, #12]
 8016150:	695b      	ldr	r3, [r3, #20]
 8016152:	4618      	mov	r0, r3
 8016154:	f7f7 f984 	bl	800d460 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016158:	68f8      	ldr	r0, [r7, #12]
 801615a:	f7ff ffbd 	bl	80160d8 <ip_frag_free_pbuf_custom_ref>
}
 801615e:	bf00      	nop
 8016160:	3710      	adds	r7, #16
 8016162:	46bd      	mov	sp, r7
 8016164:	bd80      	pop	{r7, pc}
 8016166:	bf00      	nop
 8016168:	0801b4e4 	.word	0x0801b4e4
 801616c:	0801b6a8 	.word	0x0801b6a8
 8016170:	0801b52c 	.word	0x0801b52c
 8016174:	0801b6b4 	.word	0x0801b6b4

08016178 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016178:	b580      	push	{r7, lr}
 801617a:	b094      	sub	sp, #80	; 0x50
 801617c:	af02      	add	r7, sp, #8
 801617e:	60f8      	str	r0, [r7, #12]
 8016180:	60b9      	str	r1, [r7, #8]
 8016182:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016184:	2300      	movs	r3, #0
 8016186:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801618a:	68bb      	ldr	r3, [r7, #8]
 801618c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801618e:	3b14      	subs	r3, #20
 8016190:	2b00      	cmp	r3, #0
 8016192:	da00      	bge.n	8016196 <ip4_frag+0x1e>
 8016194:	3307      	adds	r3, #7
 8016196:	10db      	asrs	r3, r3, #3
 8016198:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801619a:	2314      	movs	r3, #20
 801619c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	685b      	ldr	r3, [r3, #4]
 80161a2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80161a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161a6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80161a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161aa:	781b      	ldrb	r3, [r3, #0]
 80161ac:	f003 030f 	and.w	r3, r3, #15
 80161b0:	b2db      	uxtb	r3, r3
 80161b2:	009b      	lsls	r3, r3, #2
 80161b4:	b2db      	uxtb	r3, r3
 80161b6:	2b14      	cmp	r3, #20
 80161b8:	d002      	beq.n	80161c0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80161ba:	f06f 0305 	mvn.w	r3, #5
 80161be:	e110      	b.n	80163e2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80161c0:	68fb      	ldr	r3, [r7, #12]
 80161c2:	895b      	ldrh	r3, [r3, #10]
 80161c4:	2b13      	cmp	r3, #19
 80161c6:	d809      	bhi.n	80161dc <ip4_frag+0x64>
 80161c8:	4b88      	ldr	r3, [pc, #544]	; (80163ec <ip4_frag+0x274>)
 80161ca:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80161ce:	4988      	ldr	r1, [pc, #544]	; (80163f0 <ip4_frag+0x278>)
 80161d0:	4888      	ldr	r0, [pc, #544]	; (80163f4 <ip4_frag+0x27c>)
 80161d2:	f000 fa53 	bl	801667c <iprintf>
 80161d6:	f06f 0305 	mvn.w	r3, #5
 80161da:	e102      	b.n	80163e2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80161dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161de:	88db      	ldrh	r3, [r3, #6]
 80161e0:	b29b      	uxth	r3, r3
 80161e2:	4618      	mov	r0, r3
 80161e4:	f7f5 fdaa 	bl	800bd3c <lwip_htons>
 80161e8:	4603      	mov	r3, r0
 80161ea:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80161ec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80161ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80161f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80161f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80161f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80161fc:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80161fe:	68fb      	ldr	r3, [r7, #12]
 8016200:	891b      	ldrh	r3, [r3, #8]
 8016202:	3b14      	subs	r3, #20
 8016204:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8016208:	e0e1      	b.n	80163ce <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801620a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801620c:	00db      	lsls	r3, r3, #3
 801620e:	b29b      	uxth	r3, r3
 8016210:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016214:	4293      	cmp	r3, r2
 8016216:	bf28      	it	cs
 8016218:	4613      	movcs	r3, r2
 801621a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801621c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016220:	2114      	movs	r1, #20
 8016222:	200e      	movs	r0, #14
 8016224:	f7f6 fe38 	bl	800ce98 <pbuf_alloc>
 8016228:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801622a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801622c:	2b00      	cmp	r3, #0
 801622e:	f000 80d5 	beq.w	80163dc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016234:	895b      	ldrh	r3, [r3, #10]
 8016236:	2b13      	cmp	r3, #19
 8016238:	d806      	bhi.n	8016248 <ip4_frag+0xd0>
 801623a:	4b6c      	ldr	r3, [pc, #432]	; (80163ec <ip4_frag+0x274>)
 801623c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8016240:	496d      	ldr	r1, [pc, #436]	; (80163f8 <ip4_frag+0x280>)
 8016242:	486c      	ldr	r0, [pc, #432]	; (80163f4 <ip4_frag+0x27c>)
 8016244:	f000 fa1a 	bl	801667c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801624a:	685b      	ldr	r3, [r3, #4]
 801624c:	2214      	movs	r2, #20
 801624e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016250:	4618      	mov	r0, r3
 8016252:	f000 f9e3 	bl	801661c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8016256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016258:	685b      	ldr	r3, [r3, #4]
 801625a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801625c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801625e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8016262:	e064      	b.n	801632e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016264:	68fb      	ldr	r3, [r7, #12]
 8016266:	895a      	ldrh	r2, [r3, #10]
 8016268:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801626a:	1ad3      	subs	r3, r2, r3
 801626c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801626e:	68fb      	ldr	r3, [r7, #12]
 8016270:	895b      	ldrh	r3, [r3, #10]
 8016272:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016274:	429a      	cmp	r2, r3
 8016276:	d906      	bls.n	8016286 <ip4_frag+0x10e>
 8016278:	4b5c      	ldr	r3, [pc, #368]	; (80163ec <ip4_frag+0x274>)
 801627a:	f240 322d 	movw	r2, #813	; 0x32d
 801627e:	495f      	ldr	r1, [pc, #380]	; (80163fc <ip4_frag+0x284>)
 8016280:	485c      	ldr	r0, [pc, #368]	; (80163f4 <ip4_frag+0x27c>)
 8016282:	f000 f9fb 	bl	801667c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8016286:	8bfa      	ldrh	r2, [r7, #30]
 8016288:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801628c:	4293      	cmp	r3, r2
 801628e:	bf28      	it	cs
 8016290:	4613      	movcs	r3, r2
 8016292:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8016296:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801629a:	2b00      	cmp	r3, #0
 801629c:	d105      	bne.n	80162aa <ip4_frag+0x132>
        poff = 0;
 801629e:	2300      	movs	r3, #0
 80162a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80162a2:	68fb      	ldr	r3, [r7, #12]
 80162a4:	681b      	ldr	r3, [r3, #0]
 80162a6:	60fb      	str	r3, [r7, #12]
        continue;
 80162a8:	e041      	b.n	801632e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80162aa:	f7ff ff0d 	bl	80160c8 <ip_frag_alloc_pbuf_custom_ref>
 80162ae:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80162b0:	69bb      	ldr	r3, [r7, #24]
 80162b2:	2b00      	cmp	r3, #0
 80162b4:	d103      	bne.n	80162be <ip4_frag+0x146>
        pbuf_free(rambuf);
 80162b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80162b8:	f7f7 f8d2 	bl	800d460 <pbuf_free>
        goto memerr;
 80162bc:	e08f      	b.n	80163de <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80162be:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80162c0:	68fb      	ldr	r3, [r7, #12]
 80162c2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80162c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80162c6:	4413      	add	r3, r2
 80162c8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80162cc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80162d0:	9201      	str	r2, [sp, #4]
 80162d2:	9300      	str	r3, [sp, #0]
 80162d4:	4603      	mov	r3, r0
 80162d6:	2241      	movs	r2, #65	; 0x41
 80162d8:	2000      	movs	r0, #0
 80162da:	f7f6 ff07 	bl	800d0ec <pbuf_alloced_custom>
 80162de:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80162e0:	697b      	ldr	r3, [r7, #20]
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d106      	bne.n	80162f4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80162e6:	69b8      	ldr	r0, [r7, #24]
 80162e8:	f7ff fef6 	bl	80160d8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80162ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80162ee:	f7f7 f8b7 	bl	800d460 <pbuf_free>
        goto memerr;
 80162f2:	e074      	b.n	80163de <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80162f4:	68f8      	ldr	r0, [r7, #12]
 80162f6:	f7f7 f953 	bl	800d5a0 <pbuf_ref>
      pcr->original = p;
 80162fa:	69bb      	ldr	r3, [r7, #24]
 80162fc:	68fa      	ldr	r2, [r7, #12]
 80162fe:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016300:	69bb      	ldr	r3, [r7, #24]
 8016302:	4a3f      	ldr	r2, [pc, #252]	; (8016400 <ip4_frag+0x288>)
 8016304:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8016306:	6979      	ldr	r1, [r7, #20]
 8016308:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801630a:	f7f7 f96b 	bl	800d5e4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801630e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8016312:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016316:	1ad3      	subs	r3, r2, r3
 8016318:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801631c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016320:	2b00      	cmp	r3, #0
 8016322:	d004      	beq.n	801632e <ip4_frag+0x1b6>
        poff = 0;
 8016324:	2300      	movs	r3, #0
 8016326:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016328:	68fb      	ldr	r3, [r7, #12]
 801632a:	681b      	ldr	r3, [r3, #0]
 801632c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801632e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016332:	2b00      	cmp	r3, #0
 8016334:	d196      	bne.n	8016264 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8016336:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016338:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801633c:	4413      	add	r3, r2
 801633e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016340:	68bb      	ldr	r3, [r7, #8]
 8016342:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016344:	f1a3 0213 	sub.w	r2, r3, #19
 8016348:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801634c:	429a      	cmp	r2, r3
 801634e:	bfcc      	ite	gt
 8016350:	2301      	movgt	r3, #1
 8016352:	2300      	movle	r3, #0
 8016354:	b2db      	uxtb	r3, r3
 8016356:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016358:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801635c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016360:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8016362:	6a3b      	ldr	r3, [r7, #32]
 8016364:	2b00      	cmp	r3, #0
 8016366:	d002      	beq.n	801636e <ip4_frag+0x1f6>
 8016368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801636a:	2b00      	cmp	r3, #0
 801636c:	d003      	beq.n	8016376 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801636e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016370:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016374:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8016376:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016378:	4618      	mov	r0, r3
 801637a:	f7f5 fcdf 	bl	800bd3c <lwip_htons>
 801637e:	4603      	mov	r3, r0
 8016380:	461a      	mov	r2, r3
 8016382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016384:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8016386:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016388:	3314      	adds	r3, #20
 801638a:	b29b      	uxth	r3, r3
 801638c:	4618      	mov	r0, r3
 801638e:	f7f5 fcd5 	bl	800bd3c <lwip_htons>
 8016392:	4603      	mov	r3, r0
 8016394:	461a      	mov	r2, r3
 8016396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016398:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801639a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801639c:	2200      	movs	r2, #0
 801639e:	729a      	strb	r2, [r3, #10]
 80163a0:	2200      	movs	r2, #0
 80163a2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80163a4:	68bb      	ldr	r3, [r7, #8]
 80163a6:	695b      	ldr	r3, [r3, #20]
 80163a8:	687a      	ldr	r2, [r7, #4]
 80163aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80163ac:	68b8      	ldr	r0, [r7, #8]
 80163ae:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80163b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80163b2:	f7f7 f855 	bl	800d460 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80163b6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80163ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80163bc:	1ad3      	subs	r3, r2, r3
 80163be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80163c2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80163c6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80163c8:	4413      	add	r3, r2
 80163ca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80163ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	f47f af19 	bne.w	801620a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80163d8:	2300      	movs	r3, #0
 80163da:	e002      	b.n	80163e2 <ip4_frag+0x26a>
      goto memerr;
 80163dc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80163de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80163e2:	4618      	mov	r0, r3
 80163e4:	3748      	adds	r7, #72	; 0x48
 80163e6:	46bd      	mov	sp, r7
 80163e8:	bd80      	pop	{r7, pc}
 80163ea:	bf00      	nop
 80163ec:	0801b4e4 	.word	0x0801b4e4
 80163f0:	0801b6c0 	.word	0x0801b6c0
 80163f4:	0801b52c 	.word	0x0801b52c
 80163f8:	0801b6dc 	.word	0x0801b6dc
 80163fc:	0801b6fc 	.word	0x0801b6fc
 8016400:	08016111 	.word	0x08016111

08016404 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016404:	b580      	push	{r7, lr}
 8016406:	b086      	sub	sp, #24
 8016408:	af00      	add	r7, sp, #0
 801640a:	6078      	str	r0, [r7, #4]
 801640c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801640e:	230e      	movs	r3, #14
 8016410:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	895b      	ldrh	r3, [r3, #10]
 8016416:	2b0e      	cmp	r3, #14
 8016418:	d96e      	bls.n	80164f8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	7bdb      	ldrb	r3, [r3, #15]
 801641e:	2b00      	cmp	r3, #0
 8016420:	d106      	bne.n	8016430 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8016422:	683b      	ldr	r3, [r7, #0]
 8016424:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016428:	3301      	adds	r3, #1
 801642a:	b2da      	uxtb	r2, r3
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	685b      	ldr	r3, [r3, #4]
 8016434:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016436:	693b      	ldr	r3, [r7, #16]
 8016438:	7b1a      	ldrb	r2, [r3, #12]
 801643a:	7b5b      	ldrb	r3, [r3, #13]
 801643c:	021b      	lsls	r3, r3, #8
 801643e:	4313      	orrs	r3, r2
 8016440:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016442:	693b      	ldr	r3, [r7, #16]
 8016444:	781b      	ldrb	r3, [r3, #0]
 8016446:	f003 0301 	and.w	r3, r3, #1
 801644a:	2b00      	cmp	r3, #0
 801644c:	d023      	beq.n	8016496 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801644e:	693b      	ldr	r3, [r7, #16]
 8016450:	781b      	ldrb	r3, [r3, #0]
 8016452:	2b01      	cmp	r3, #1
 8016454:	d10f      	bne.n	8016476 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016456:	693b      	ldr	r3, [r7, #16]
 8016458:	785b      	ldrb	r3, [r3, #1]
 801645a:	2b00      	cmp	r3, #0
 801645c:	d11b      	bne.n	8016496 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801645e:	693b      	ldr	r3, [r7, #16]
 8016460:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016462:	2b5e      	cmp	r3, #94	; 0x5e
 8016464:	d117      	bne.n	8016496 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	7b5b      	ldrb	r3, [r3, #13]
 801646a:	f043 0310 	orr.w	r3, r3, #16
 801646e:	b2da      	uxtb	r2, r3
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	735a      	strb	r2, [r3, #13]
 8016474:	e00f      	b.n	8016496 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8016476:	693b      	ldr	r3, [r7, #16]
 8016478:	2206      	movs	r2, #6
 801647a:	4928      	ldr	r1, [pc, #160]	; (801651c <ethernet_input+0x118>)
 801647c:	4618      	mov	r0, r3
 801647e:	f000 f8bf 	bl	8016600 <memcmp>
 8016482:	4603      	mov	r3, r0
 8016484:	2b00      	cmp	r3, #0
 8016486:	d106      	bne.n	8016496 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	7b5b      	ldrb	r3, [r3, #13]
 801648c:	f043 0308 	orr.w	r3, r3, #8
 8016490:	b2da      	uxtb	r2, r3
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016496:	89fb      	ldrh	r3, [r7, #14]
 8016498:	2b08      	cmp	r3, #8
 801649a:	d003      	beq.n	80164a4 <ethernet_input+0xa0>
 801649c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80164a0:	d014      	beq.n	80164cc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80164a2:	e032      	b.n	801650a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80164a4:	683b      	ldr	r3, [r7, #0]
 80164a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80164aa:	f003 0308 	and.w	r3, r3, #8
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	d024      	beq.n	80164fc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80164b2:	8afb      	ldrh	r3, [r7, #22]
 80164b4:	4619      	mov	r1, r3
 80164b6:	6878      	ldr	r0, [r7, #4]
 80164b8:	f7f6 ff4c 	bl	800d354 <pbuf_remove_header>
 80164bc:	4603      	mov	r3, r0
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d11e      	bne.n	8016500 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80164c2:	6839      	ldr	r1, [r7, #0]
 80164c4:	6878      	ldr	r0, [r7, #4]
 80164c6:	f7fe ff27 	bl	8015318 <ip4_input>
      break;
 80164ca:	e013      	b.n	80164f4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80164cc:	683b      	ldr	r3, [r7, #0]
 80164ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80164d2:	f003 0308 	and.w	r3, r3, #8
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d014      	beq.n	8016504 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80164da:	8afb      	ldrh	r3, [r7, #22]
 80164dc:	4619      	mov	r1, r3
 80164de:	6878      	ldr	r0, [r7, #4]
 80164e0:	f7f6 ff38 	bl	800d354 <pbuf_remove_header>
 80164e4:	4603      	mov	r3, r0
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d10e      	bne.n	8016508 <ethernet_input+0x104>
        etharp_input(p, netif);
 80164ea:	6839      	ldr	r1, [r7, #0]
 80164ec:	6878      	ldr	r0, [r7, #4]
 80164ee:	f7fe f8c7 	bl	8014680 <etharp_input>
      break;
 80164f2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80164f4:	2300      	movs	r3, #0
 80164f6:	e00c      	b.n	8016512 <ethernet_input+0x10e>
    goto free_and_return;
 80164f8:	bf00      	nop
 80164fa:	e006      	b.n	801650a <ethernet_input+0x106>
        goto free_and_return;
 80164fc:	bf00      	nop
 80164fe:	e004      	b.n	801650a <ethernet_input+0x106>
        goto free_and_return;
 8016500:	bf00      	nop
 8016502:	e002      	b.n	801650a <ethernet_input+0x106>
        goto free_and_return;
 8016504:	bf00      	nop
 8016506:	e000      	b.n	801650a <ethernet_input+0x106>
        goto free_and_return;
 8016508:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801650a:	6878      	ldr	r0, [r7, #4]
 801650c:	f7f6 ffa8 	bl	800d460 <pbuf_free>
  return ERR_OK;
 8016510:	2300      	movs	r3, #0
}
 8016512:	4618      	mov	r0, r3
 8016514:	3718      	adds	r7, #24
 8016516:	46bd      	mov	sp, r7
 8016518:	bd80      	pop	{r7, pc}
 801651a:	bf00      	nop
 801651c:	0801f890 	.word	0x0801f890

08016520 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016520:	b580      	push	{r7, lr}
 8016522:	b086      	sub	sp, #24
 8016524:	af00      	add	r7, sp, #0
 8016526:	60f8      	str	r0, [r7, #12]
 8016528:	60b9      	str	r1, [r7, #8]
 801652a:	607a      	str	r2, [r7, #4]
 801652c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801652e:	8c3b      	ldrh	r3, [r7, #32]
 8016530:	4618      	mov	r0, r3
 8016532:	f7f5 fc03 	bl	800bd3c <lwip_htons>
 8016536:	4603      	mov	r3, r0
 8016538:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801653a:	210e      	movs	r1, #14
 801653c:	68b8      	ldr	r0, [r7, #8]
 801653e:	f7f6 fef9 	bl	800d334 <pbuf_add_header>
 8016542:	4603      	mov	r3, r0
 8016544:	2b00      	cmp	r3, #0
 8016546:	d125      	bne.n	8016594 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016548:	68bb      	ldr	r3, [r7, #8]
 801654a:	685b      	ldr	r3, [r3, #4]
 801654c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801654e:	693b      	ldr	r3, [r7, #16]
 8016550:	8afa      	ldrh	r2, [r7, #22]
 8016552:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016554:	693b      	ldr	r3, [r7, #16]
 8016556:	2206      	movs	r2, #6
 8016558:	6839      	ldr	r1, [r7, #0]
 801655a:	4618      	mov	r0, r3
 801655c:	f000 f85e 	bl	801661c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016560:	693b      	ldr	r3, [r7, #16]
 8016562:	3306      	adds	r3, #6
 8016564:	2206      	movs	r2, #6
 8016566:	6879      	ldr	r1, [r7, #4]
 8016568:	4618      	mov	r0, r3
 801656a:	f000 f857 	bl	801661c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801656e:	68fb      	ldr	r3, [r7, #12]
 8016570:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016574:	2b06      	cmp	r3, #6
 8016576:	d006      	beq.n	8016586 <ethernet_output+0x66>
 8016578:	4b0a      	ldr	r3, [pc, #40]	; (80165a4 <ethernet_output+0x84>)
 801657a:	f44f 7299 	mov.w	r2, #306	; 0x132
 801657e:	490a      	ldr	r1, [pc, #40]	; (80165a8 <ethernet_output+0x88>)
 8016580:	480a      	ldr	r0, [pc, #40]	; (80165ac <ethernet_output+0x8c>)
 8016582:	f000 f87b 	bl	801667c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016586:	68fb      	ldr	r3, [r7, #12]
 8016588:	699b      	ldr	r3, [r3, #24]
 801658a:	68b9      	ldr	r1, [r7, #8]
 801658c:	68f8      	ldr	r0, [r7, #12]
 801658e:	4798      	blx	r3
 8016590:	4603      	mov	r3, r0
 8016592:	e002      	b.n	801659a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016594:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016596:	f06f 0301 	mvn.w	r3, #1
}
 801659a:	4618      	mov	r0, r3
 801659c:	3718      	adds	r7, #24
 801659e:	46bd      	mov	sp, r7
 80165a0:	bd80      	pop	{r7, pc}
 80165a2:	bf00      	nop
 80165a4:	0801b70c 	.word	0x0801b70c
 80165a8:	0801b744 	.word	0x0801b744
 80165ac:	0801b778 	.word	0x0801b778

080165b0 <atoi>:
 80165b0:	220a      	movs	r2, #10
 80165b2:	2100      	movs	r1, #0
 80165b4:	f000 ba94 	b.w	8016ae0 <strtol>

080165b8 <__libc_init_array>:
 80165b8:	b570      	push	{r4, r5, r6, lr}
 80165ba:	4d0d      	ldr	r5, [pc, #52]	; (80165f0 <__libc_init_array+0x38>)
 80165bc:	4c0d      	ldr	r4, [pc, #52]	; (80165f4 <__libc_init_array+0x3c>)
 80165be:	1b64      	subs	r4, r4, r5
 80165c0:	10a4      	asrs	r4, r4, #2
 80165c2:	2600      	movs	r6, #0
 80165c4:	42a6      	cmp	r6, r4
 80165c6:	d109      	bne.n	80165dc <__libc_init_array+0x24>
 80165c8:	4d0b      	ldr	r5, [pc, #44]	; (80165f8 <__libc_init_array+0x40>)
 80165ca:	4c0c      	ldr	r4, [pc, #48]	; (80165fc <__libc_init_array+0x44>)
 80165cc:	f001 fbe4 	bl	8017d98 <_init>
 80165d0:	1b64      	subs	r4, r4, r5
 80165d2:	10a4      	asrs	r4, r4, #2
 80165d4:	2600      	movs	r6, #0
 80165d6:	42a6      	cmp	r6, r4
 80165d8:	d105      	bne.n	80165e6 <__libc_init_array+0x2e>
 80165da:	bd70      	pop	{r4, r5, r6, pc}
 80165dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80165e0:	4798      	blx	r3
 80165e2:	3601      	adds	r6, #1
 80165e4:	e7ee      	b.n	80165c4 <__libc_init_array+0xc>
 80165e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80165ea:	4798      	blx	r3
 80165ec:	3601      	adds	r6, #1
 80165ee:	e7f2      	b.n	80165d6 <__libc_init_array+0x1e>
 80165f0:	0801faf4 	.word	0x0801faf4
 80165f4:	0801faf4 	.word	0x0801faf4
 80165f8:	0801faf4 	.word	0x0801faf4
 80165fc:	0801faf8 	.word	0x0801faf8

08016600 <memcmp>:
 8016600:	b530      	push	{r4, r5, lr}
 8016602:	3901      	subs	r1, #1
 8016604:	2400      	movs	r4, #0
 8016606:	42a2      	cmp	r2, r4
 8016608:	d101      	bne.n	801660e <memcmp+0xe>
 801660a:	2000      	movs	r0, #0
 801660c:	e005      	b.n	801661a <memcmp+0x1a>
 801660e:	5d03      	ldrb	r3, [r0, r4]
 8016610:	3401      	adds	r4, #1
 8016612:	5d0d      	ldrb	r5, [r1, r4]
 8016614:	42ab      	cmp	r3, r5
 8016616:	d0f6      	beq.n	8016606 <memcmp+0x6>
 8016618:	1b58      	subs	r0, r3, r5
 801661a:	bd30      	pop	{r4, r5, pc}

0801661c <memcpy>:
 801661c:	440a      	add	r2, r1
 801661e:	4291      	cmp	r1, r2
 8016620:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016624:	d100      	bne.n	8016628 <memcpy+0xc>
 8016626:	4770      	bx	lr
 8016628:	b510      	push	{r4, lr}
 801662a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801662e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016632:	4291      	cmp	r1, r2
 8016634:	d1f9      	bne.n	801662a <memcpy+0xe>
 8016636:	bd10      	pop	{r4, pc}

08016638 <memmove>:
 8016638:	4288      	cmp	r0, r1
 801663a:	b510      	push	{r4, lr}
 801663c:	eb01 0402 	add.w	r4, r1, r2
 8016640:	d902      	bls.n	8016648 <memmove+0x10>
 8016642:	4284      	cmp	r4, r0
 8016644:	4623      	mov	r3, r4
 8016646:	d807      	bhi.n	8016658 <memmove+0x20>
 8016648:	1e43      	subs	r3, r0, #1
 801664a:	42a1      	cmp	r1, r4
 801664c:	d008      	beq.n	8016660 <memmove+0x28>
 801664e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016652:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016656:	e7f8      	b.n	801664a <memmove+0x12>
 8016658:	4402      	add	r2, r0
 801665a:	4601      	mov	r1, r0
 801665c:	428a      	cmp	r2, r1
 801665e:	d100      	bne.n	8016662 <memmove+0x2a>
 8016660:	bd10      	pop	{r4, pc}
 8016662:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016666:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801666a:	e7f7      	b.n	801665c <memmove+0x24>

0801666c <memset>:
 801666c:	4402      	add	r2, r0
 801666e:	4603      	mov	r3, r0
 8016670:	4293      	cmp	r3, r2
 8016672:	d100      	bne.n	8016676 <memset+0xa>
 8016674:	4770      	bx	lr
 8016676:	f803 1b01 	strb.w	r1, [r3], #1
 801667a:	e7f9      	b.n	8016670 <memset+0x4>

0801667c <iprintf>:
 801667c:	b40f      	push	{r0, r1, r2, r3}
 801667e:	4b0a      	ldr	r3, [pc, #40]	; (80166a8 <iprintf+0x2c>)
 8016680:	b513      	push	{r0, r1, r4, lr}
 8016682:	681c      	ldr	r4, [r3, #0]
 8016684:	b124      	cbz	r4, 8016690 <iprintf+0x14>
 8016686:	69a3      	ldr	r3, [r4, #24]
 8016688:	b913      	cbnz	r3, 8016690 <iprintf+0x14>
 801668a:	4620      	mov	r0, r4
 801668c:	f000 fc30 	bl	8016ef0 <__sinit>
 8016690:	ab05      	add	r3, sp, #20
 8016692:	9a04      	ldr	r2, [sp, #16]
 8016694:	68a1      	ldr	r1, [r4, #8]
 8016696:	9301      	str	r3, [sp, #4]
 8016698:	4620      	mov	r0, r4
 801669a:	f000 ff77 	bl	801758c <_vfiprintf_r>
 801669e:	b002      	add	sp, #8
 80166a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80166a4:	b004      	add	sp, #16
 80166a6:	4770      	bx	lr
 80166a8:	2000002c 	.word	0x2000002c

080166ac <_puts_r>:
 80166ac:	b570      	push	{r4, r5, r6, lr}
 80166ae:	460e      	mov	r6, r1
 80166b0:	4605      	mov	r5, r0
 80166b2:	b118      	cbz	r0, 80166bc <_puts_r+0x10>
 80166b4:	6983      	ldr	r3, [r0, #24]
 80166b6:	b90b      	cbnz	r3, 80166bc <_puts_r+0x10>
 80166b8:	f000 fc1a 	bl	8016ef0 <__sinit>
 80166bc:	69ab      	ldr	r3, [r5, #24]
 80166be:	68ac      	ldr	r4, [r5, #8]
 80166c0:	b913      	cbnz	r3, 80166c8 <_puts_r+0x1c>
 80166c2:	4628      	mov	r0, r5
 80166c4:	f000 fc14 	bl	8016ef0 <__sinit>
 80166c8:	4b2c      	ldr	r3, [pc, #176]	; (801677c <_puts_r+0xd0>)
 80166ca:	429c      	cmp	r4, r3
 80166cc:	d120      	bne.n	8016710 <_puts_r+0x64>
 80166ce:	686c      	ldr	r4, [r5, #4]
 80166d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80166d2:	07db      	lsls	r3, r3, #31
 80166d4:	d405      	bmi.n	80166e2 <_puts_r+0x36>
 80166d6:	89a3      	ldrh	r3, [r4, #12]
 80166d8:	0598      	lsls	r0, r3, #22
 80166da:	d402      	bmi.n	80166e2 <_puts_r+0x36>
 80166dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80166de:	f000 fcb7 	bl	8017050 <__retarget_lock_acquire_recursive>
 80166e2:	89a3      	ldrh	r3, [r4, #12]
 80166e4:	0719      	lsls	r1, r3, #28
 80166e6:	d51d      	bpl.n	8016724 <_puts_r+0x78>
 80166e8:	6923      	ldr	r3, [r4, #16]
 80166ea:	b1db      	cbz	r3, 8016724 <_puts_r+0x78>
 80166ec:	3e01      	subs	r6, #1
 80166ee:	68a3      	ldr	r3, [r4, #8]
 80166f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80166f4:	3b01      	subs	r3, #1
 80166f6:	60a3      	str	r3, [r4, #8]
 80166f8:	bb39      	cbnz	r1, 801674a <_puts_r+0x9e>
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	da38      	bge.n	8016770 <_puts_r+0xc4>
 80166fe:	4622      	mov	r2, r4
 8016700:	210a      	movs	r1, #10
 8016702:	4628      	mov	r0, r5
 8016704:	f000 f9f6 	bl	8016af4 <__swbuf_r>
 8016708:	3001      	adds	r0, #1
 801670a:	d011      	beq.n	8016730 <_puts_r+0x84>
 801670c:	250a      	movs	r5, #10
 801670e:	e011      	b.n	8016734 <_puts_r+0x88>
 8016710:	4b1b      	ldr	r3, [pc, #108]	; (8016780 <_puts_r+0xd4>)
 8016712:	429c      	cmp	r4, r3
 8016714:	d101      	bne.n	801671a <_puts_r+0x6e>
 8016716:	68ac      	ldr	r4, [r5, #8]
 8016718:	e7da      	b.n	80166d0 <_puts_r+0x24>
 801671a:	4b1a      	ldr	r3, [pc, #104]	; (8016784 <_puts_r+0xd8>)
 801671c:	429c      	cmp	r4, r3
 801671e:	bf08      	it	eq
 8016720:	68ec      	ldreq	r4, [r5, #12]
 8016722:	e7d5      	b.n	80166d0 <_puts_r+0x24>
 8016724:	4621      	mov	r1, r4
 8016726:	4628      	mov	r0, r5
 8016728:	f000 fa36 	bl	8016b98 <__swsetup_r>
 801672c:	2800      	cmp	r0, #0
 801672e:	d0dd      	beq.n	80166ec <_puts_r+0x40>
 8016730:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8016734:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016736:	07da      	lsls	r2, r3, #31
 8016738:	d405      	bmi.n	8016746 <_puts_r+0x9a>
 801673a:	89a3      	ldrh	r3, [r4, #12]
 801673c:	059b      	lsls	r3, r3, #22
 801673e:	d402      	bmi.n	8016746 <_puts_r+0x9a>
 8016740:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016742:	f000 fc86 	bl	8017052 <__retarget_lock_release_recursive>
 8016746:	4628      	mov	r0, r5
 8016748:	bd70      	pop	{r4, r5, r6, pc}
 801674a:	2b00      	cmp	r3, #0
 801674c:	da04      	bge.n	8016758 <_puts_r+0xac>
 801674e:	69a2      	ldr	r2, [r4, #24]
 8016750:	429a      	cmp	r2, r3
 8016752:	dc06      	bgt.n	8016762 <_puts_r+0xb6>
 8016754:	290a      	cmp	r1, #10
 8016756:	d004      	beq.n	8016762 <_puts_r+0xb6>
 8016758:	6823      	ldr	r3, [r4, #0]
 801675a:	1c5a      	adds	r2, r3, #1
 801675c:	6022      	str	r2, [r4, #0]
 801675e:	7019      	strb	r1, [r3, #0]
 8016760:	e7c5      	b.n	80166ee <_puts_r+0x42>
 8016762:	4622      	mov	r2, r4
 8016764:	4628      	mov	r0, r5
 8016766:	f000 f9c5 	bl	8016af4 <__swbuf_r>
 801676a:	3001      	adds	r0, #1
 801676c:	d1bf      	bne.n	80166ee <_puts_r+0x42>
 801676e:	e7df      	b.n	8016730 <_puts_r+0x84>
 8016770:	6823      	ldr	r3, [r4, #0]
 8016772:	250a      	movs	r5, #10
 8016774:	1c5a      	adds	r2, r3, #1
 8016776:	6022      	str	r2, [r4, #0]
 8016778:	701d      	strb	r5, [r3, #0]
 801677a:	e7db      	b.n	8016734 <_puts_r+0x88>
 801677c:	0801fa78 	.word	0x0801fa78
 8016780:	0801fa98 	.word	0x0801fa98
 8016784:	0801fa58 	.word	0x0801fa58

08016788 <puts>:
 8016788:	4b02      	ldr	r3, [pc, #8]	; (8016794 <puts+0xc>)
 801678a:	4601      	mov	r1, r0
 801678c:	6818      	ldr	r0, [r3, #0]
 801678e:	f7ff bf8d 	b.w	80166ac <_puts_r>
 8016792:	bf00      	nop
 8016794:	2000002c 	.word	0x2000002c

08016798 <rand>:
 8016798:	4b17      	ldr	r3, [pc, #92]	; (80167f8 <rand+0x60>)
 801679a:	b510      	push	{r4, lr}
 801679c:	681c      	ldr	r4, [r3, #0]
 801679e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80167a0:	b9b3      	cbnz	r3, 80167d0 <rand+0x38>
 80167a2:	2018      	movs	r0, #24
 80167a4:	f000 fcba 	bl	801711c <malloc>
 80167a8:	63a0      	str	r0, [r4, #56]	; 0x38
 80167aa:	b928      	cbnz	r0, 80167b8 <rand+0x20>
 80167ac:	4602      	mov	r2, r0
 80167ae:	4b13      	ldr	r3, [pc, #76]	; (80167fc <rand+0x64>)
 80167b0:	4813      	ldr	r0, [pc, #76]	; (8016800 <rand+0x68>)
 80167b2:	214e      	movs	r1, #78	; 0x4e
 80167b4:	f000 fa5e 	bl	8016c74 <__assert_func>
 80167b8:	4a12      	ldr	r2, [pc, #72]	; (8016804 <rand+0x6c>)
 80167ba:	4b13      	ldr	r3, [pc, #76]	; (8016808 <rand+0x70>)
 80167bc:	e9c0 2300 	strd	r2, r3, [r0]
 80167c0:	4b12      	ldr	r3, [pc, #72]	; (801680c <rand+0x74>)
 80167c2:	6083      	str	r3, [r0, #8]
 80167c4:	230b      	movs	r3, #11
 80167c6:	8183      	strh	r3, [r0, #12]
 80167c8:	2201      	movs	r2, #1
 80167ca:	2300      	movs	r3, #0
 80167cc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80167d0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80167d2:	480f      	ldr	r0, [pc, #60]	; (8016810 <rand+0x78>)
 80167d4:	690a      	ldr	r2, [r1, #16]
 80167d6:	694b      	ldr	r3, [r1, #20]
 80167d8:	4c0e      	ldr	r4, [pc, #56]	; (8016814 <rand+0x7c>)
 80167da:	4350      	muls	r0, r2
 80167dc:	fb04 0003 	mla	r0, r4, r3, r0
 80167e0:	fba2 3404 	umull	r3, r4, r2, r4
 80167e4:	1c5a      	adds	r2, r3, #1
 80167e6:	4404      	add	r4, r0
 80167e8:	f144 0000 	adc.w	r0, r4, #0
 80167ec:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80167f0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80167f4:	bd10      	pop	{r4, pc}
 80167f6:	bf00      	nop
 80167f8:	2000002c 	.word	0x2000002c
 80167fc:	0801f9a4 	.word	0x0801f9a4
 8016800:	0801f9bb 	.word	0x0801f9bb
 8016804:	abcd330e 	.word	0xabcd330e
 8016808:	e66d1234 	.word	0xe66d1234
 801680c:	0005deec 	.word	0x0005deec
 8016810:	5851f42d 	.word	0x5851f42d
 8016814:	4c957f2d 	.word	0x4c957f2d

08016818 <sniprintf>:
 8016818:	b40c      	push	{r2, r3}
 801681a:	b530      	push	{r4, r5, lr}
 801681c:	4b17      	ldr	r3, [pc, #92]	; (801687c <sniprintf+0x64>)
 801681e:	1e0c      	subs	r4, r1, #0
 8016820:	681d      	ldr	r5, [r3, #0]
 8016822:	b09d      	sub	sp, #116	; 0x74
 8016824:	da08      	bge.n	8016838 <sniprintf+0x20>
 8016826:	238b      	movs	r3, #139	; 0x8b
 8016828:	602b      	str	r3, [r5, #0]
 801682a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801682e:	b01d      	add	sp, #116	; 0x74
 8016830:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016834:	b002      	add	sp, #8
 8016836:	4770      	bx	lr
 8016838:	f44f 7302 	mov.w	r3, #520	; 0x208
 801683c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016840:	bf14      	ite	ne
 8016842:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8016846:	4623      	moveq	r3, r4
 8016848:	9304      	str	r3, [sp, #16]
 801684a:	9307      	str	r3, [sp, #28]
 801684c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016850:	9002      	str	r0, [sp, #8]
 8016852:	9006      	str	r0, [sp, #24]
 8016854:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016858:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801685a:	ab21      	add	r3, sp, #132	; 0x84
 801685c:	a902      	add	r1, sp, #8
 801685e:	4628      	mov	r0, r5
 8016860:	9301      	str	r3, [sp, #4]
 8016862:	f000 fd69 	bl	8017338 <_svfiprintf_r>
 8016866:	1c43      	adds	r3, r0, #1
 8016868:	bfbc      	itt	lt
 801686a:	238b      	movlt	r3, #139	; 0x8b
 801686c:	602b      	strlt	r3, [r5, #0]
 801686e:	2c00      	cmp	r4, #0
 8016870:	d0dd      	beq.n	801682e <sniprintf+0x16>
 8016872:	9b02      	ldr	r3, [sp, #8]
 8016874:	2200      	movs	r2, #0
 8016876:	701a      	strb	r2, [r3, #0]
 8016878:	e7d9      	b.n	801682e <sniprintf+0x16>
 801687a:	bf00      	nop
 801687c:	2000002c 	.word	0x2000002c

08016880 <siprintf>:
 8016880:	b40e      	push	{r1, r2, r3}
 8016882:	b500      	push	{lr}
 8016884:	b09c      	sub	sp, #112	; 0x70
 8016886:	ab1d      	add	r3, sp, #116	; 0x74
 8016888:	9002      	str	r0, [sp, #8]
 801688a:	9006      	str	r0, [sp, #24]
 801688c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016890:	4809      	ldr	r0, [pc, #36]	; (80168b8 <siprintf+0x38>)
 8016892:	9107      	str	r1, [sp, #28]
 8016894:	9104      	str	r1, [sp, #16]
 8016896:	4909      	ldr	r1, [pc, #36]	; (80168bc <siprintf+0x3c>)
 8016898:	f853 2b04 	ldr.w	r2, [r3], #4
 801689c:	9105      	str	r1, [sp, #20]
 801689e:	6800      	ldr	r0, [r0, #0]
 80168a0:	9301      	str	r3, [sp, #4]
 80168a2:	a902      	add	r1, sp, #8
 80168a4:	f000 fd48 	bl	8017338 <_svfiprintf_r>
 80168a8:	9b02      	ldr	r3, [sp, #8]
 80168aa:	2200      	movs	r2, #0
 80168ac:	701a      	strb	r2, [r3, #0]
 80168ae:	b01c      	add	sp, #112	; 0x70
 80168b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80168b4:	b003      	add	sp, #12
 80168b6:	4770      	bx	lr
 80168b8:	2000002c 	.word	0x2000002c
 80168bc:	ffff0208 	.word	0xffff0208

080168c0 <strcat>:
 80168c0:	b510      	push	{r4, lr}
 80168c2:	4602      	mov	r2, r0
 80168c4:	7814      	ldrb	r4, [r2, #0]
 80168c6:	4613      	mov	r3, r2
 80168c8:	3201      	adds	r2, #1
 80168ca:	2c00      	cmp	r4, #0
 80168cc:	d1fa      	bne.n	80168c4 <strcat+0x4>
 80168ce:	3b01      	subs	r3, #1
 80168d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80168d4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80168d8:	2a00      	cmp	r2, #0
 80168da:	d1f9      	bne.n	80168d0 <strcat+0x10>
 80168dc:	bd10      	pop	{r4, pc}

080168de <strchr>:
 80168de:	b2c9      	uxtb	r1, r1
 80168e0:	4603      	mov	r3, r0
 80168e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80168e6:	b11a      	cbz	r2, 80168f0 <strchr+0x12>
 80168e8:	428a      	cmp	r2, r1
 80168ea:	d1f9      	bne.n	80168e0 <strchr+0x2>
 80168ec:	4618      	mov	r0, r3
 80168ee:	4770      	bx	lr
 80168f0:	2900      	cmp	r1, #0
 80168f2:	bf18      	it	ne
 80168f4:	2300      	movne	r3, #0
 80168f6:	e7f9      	b.n	80168ec <strchr+0xe>

080168f8 <strcpy>:
 80168f8:	4603      	mov	r3, r0
 80168fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80168fe:	f803 2b01 	strb.w	r2, [r3], #1
 8016902:	2a00      	cmp	r2, #0
 8016904:	d1f9      	bne.n	80168fa <strcpy+0x2>
 8016906:	4770      	bx	lr

08016908 <strncmp>:
 8016908:	b510      	push	{r4, lr}
 801690a:	b16a      	cbz	r2, 8016928 <strncmp+0x20>
 801690c:	3901      	subs	r1, #1
 801690e:	1884      	adds	r4, r0, r2
 8016910:	f810 3b01 	ldrb.w	r3, [r0], #1
 8016914:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016918:	4293      	cmp	r3, r2
 801691a:	d103      	bne.n	8016924 <strncmp+0x1c>
 801691c:	42a0      	cmp	r0, r4
 801691e:	d001      	beq.n	8016924 <strncmp+0x1c>
 8016920:	2b00      	cmp	r3, #0
 8016922:	d1f5      	bne.n	8016910 <strncmp+0x8>
 8016924:	1a98      	subs	r0, r3, r2
 8016926:	bd10      	pop	{r4, pc}
 8016928:	4610      	mov	r0, r2
 801692a:	e7fc      	b.n	8016926 <strncmp+0x1e>

0801692c <strncpy>:
 801692c:	b510      	push	{r4, lr}
 801692e:	3901      	subs	r1, #1
 8016930:	4603      	mov	r3, r0
 8016932:	b132      	cbz	r2, 8016942 <strncpy+0x16>
 8016934:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016938:	f803 4b01 	strb.w	r4, [r3], #1
 801693c:	3a01      	subs	r2, #1
 801693e:	2c00      	cmp	r4, #0
 8016940:	d1f7      	bne.n	8016932 <strncpy+0x6>
 8016942:	441a      	add	r2, r3
 8016944:	2100      	movs	r1, #0
 8016946:	4293      	cmp	r3, r2
 8016948:	d100      	bne.n	801694c <strncpy+0x20>
 801694a:	bd10      	pop	{r4, pc}
 801694c:	f803 1b01 	strb.w	r1, [r3], #1
 8016950:	e7f9      	b.n	8016946 <strncpy+0x1a>

08016952 <strstr>:
 8016952:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016954:	780c      	ldrb	r4, [r1, #0]
 8016956:	b164      	cbz	r4, 8016972 <strstr+0x20>
 8016958:	4603      	mov	r3, r0
 801695a:	781a      	ldrb	r2, [r3, #0]
 801695c:	4618      	mov	r0, r3
 801695e:	1c5e      	adds	r6, r3, #1
 8016960:	b90a      	cbnz	r2, 8016966 <strstr+0x14>
 8016962:	4610      	mov	r0, r2
 8016964:	e005      	b.n	8016972 <strstr+0x20>
 8016966:	4294      	cmp	r4, r2
 8016968:	d108      	bne.n	801697c <strstr+0x2a>
 801696a:	460d      	mov	r5, r1
 801696c:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8016970:	b902      	cbnz	r2, 8016974 <strstr+0x22>
 8016972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016974:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8016978:	4297      	cmp	r7, r2
 801697a:	d0f7      	beq.n	801696c <strstr+0x1a>
 801697c:	4633      	mov	r3, r6
 801697e:	e7ec      	b.n	801695a <strstr+0x8>

08016980 <__strtok_r>:
 8016980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016982:	b908      	cbnz	r0, 8016988 <__strtok_r+0x8>
 8016984:	6810      	ldr	r0, [r2, #0]
 8016986:	b188      	cbz	r0, 80169ac <__strtok_r+0x2c>
 8016988:	4604      	mov	r4, r0
 801698a:	4620      	mov	r0, r4
 801698c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8016990:	460f      	mov	r7, r1
 8016992:	f817 6b01 	ldrb.w	r6, [r7], #1
 8016996:	b91e      	cbnz	r6, 80169a0 <__strtok_r+0x20>
 8016998:	b965      	cbnz	r5, 80169b4 <__strtok_r+0x34>
 801699a:	6015      	str	r5, [r2, #0]
 801699c:	4628      	mov	r0, r5
 801699e:	e005      	b.n	80169ac <__strtok_r+0x2c>
 80169a0:	42b5      	cmp	r5, r6
 80169a2:	d1f6      	bne.n	8016992 <__strtok_r+0x12>
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	d1f0      	bne.n	801698a <__strtok_r+0xa>
 80169a8:	6014      	str	r4, [r2, #0]
 80169aa:	7003      	strb	r3, [r0, #0]
 80169ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80169ae:	461c      	mov	r4, r3
 80169b0:	e00c      	b.n	80169cc <__strtok_r+0x4c>
 80169b2:	b915      	cbnz	r5, 80169ba <__strtok_r+0x3a>
 80169b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80169b8:	460e      	mov	r6, r1
 80169ba:	f816 5b01 	ldrb.w	r5, [r6], #1
 80169be:	42ab      	cmp	r3, r5
 80169c0:	d1f7      	bne.n	80169b2 <__strtok_r+0x32>
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	d0f3      	beq.n	80169ae <__strtok_r+0x2e>
 80169c6:	2300      	movs	r3, #0
 80169c8:	f804 3c01 	strb.w	r3, [r4, #-1]
 80169cc:	6014      	str	r4, [r2, #0]
 80169ce:	e7ed      	b.n	80169ac <__strtok_r+0x2c>

080169d0 <strtok_r>:
 80169d0:	2301      	movs	r3, #1
 80169d2:	f7ff bfd5 	b.w	8016980 <__strtok_r>
	...

080169d8 <_strtol_l.isra.0>:
 80169d8:	2b01      	cmp	r3, #1
 80169da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80169de:	d001      	beq.n	80169e4 <_strtol_l.isra.0+0xc>
 80169e0:	2b24      	cmp	r3, #36	; 0x24
 80169e2:	d906      	bls.n	80169f2 <_strtol_l.isra.0+0x1a>
 80169e4:	f000 f964 	bl	8016cb0 <__errno>
 80169e8:	2316      	movs	r3, #22
 80169ea:	6003      	str	r3, [r0, #0]
 80169ec:	2000      	movs	r0, #0
 80169ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80169f2:	4f3a      	ldr	r7, [pc, #232]	; (8016adc <_strtol_l.isra.0+0x104>)
 80169f4:	468e      	mov	lr, r1
 80169f6:	4676      	mov	r6, lr
 80169f8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80169fc:	5de5      	ldrb	r5, [r4, r7]
 80169fe:	f015 0508 	ands.w	r5, r5, #8
 8016a02:	d1f8      	bne.n	80169f6 <_strtol_l.isra.0+0x1e>
 8016a04:	2c2d      	cmp	r4, #45	; 0x2d
 8016a06:	d134      	bne.n	8016a72 <_strtol_l.isra.0+0x9a>
 8016a08:	f89e 4000 	ldrb.w	r4, [lr]
 8016a0c:	f04f 0801 	mov.w	r8, #1
 8016a10:	f106 0e02 	add.w	lr, r6, #2
 8016a14:	2b00      	cmp	r3, #0
 8016a16:	d05c      	beq.n	8016ad2 <_strtol_l.isra.0+0xfa>
 8016a18:	2b10      	cmp	r3, #16
 8016a1a:	d10c      	bne.n	8016a36 <_strtol_l.isra.0+0x5e>
 8016a1c:	2c30      	cmp	r4, #48	; 0x30
 8016a1e:	d10a      	bne.n	8016a36 <_strtol_l.isra.0+0x5e>
 8016a20:	f89e 4000 	ldrb.w	r4, [lr]
 8016a24:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8016a28:	2c58      	cmp	r4, #88	; 0x58
 8016a2a:	d14d      	bne.n	8016ac8 <_strtol_l.isra.0+0xf0>
 8016a2c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8016a30:	2310      	movs	r3, #16
 8016a32:	f10e 0e02 	add.w	lr, lr, #2
 8016a36:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8016a3a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8016a3e:	2600      	movs	r6, #0
 8016a40:	fbbc f9f3 	udiv	r9, ip, r3
 8016a44:	4635      	mov	r5, r6
 8016a46:	fb03 ca19 	mls	sl, r3, r9, ip
 8016a4a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8016a4e:	2f09      	cmp	r7, #9
 8016a50:	d818      	bhi.n	8016a84 <_strtol_l.isra.0+0xac>
 8016a52:	463c      	mov	r4, r7
 8016a54:	42a3      	cmp	r3, r4
 8016a56:	dd24      	ble.n	8016aa2 <_strtol_l.isra.0+0xca>
 8016a58:	2e00      	cmp	r6, #0
 8016a5a:	db1f      	blt.n	8016a9c <_strtol_l.isra.0+0xc4>
 8016a5c:	45a9      	cmp	r9, r5
 8016a5e:	d31d      	bcc.n	8016a9c <_strtol_l.isra.0+0xc4>
 8016a60:	d101      	bne.n	8016a66 <_strtol_l.isra.0+0x8e>
 8016a62:	45a2      	cmp	sl, r4
 8016a64:	db1a      	blt.n	8016a9c <_strtol_l.isra.0+0xc4>
 8016a66:	fb05 4503 	mla	r5, r5, r3, r4
 8016a6a:	2601      	movs	r6, #1
 8016a6c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8016a70:	e7eb      	b.n	8016a4a <_strtol_l.isra.0+0x72>
 8016a72:	2c2b      	cmp	r4, #43	; 0x2b
 8016a74:	bf08      	it	eq
 8016a76:	f89e 4000 	ldrbeq.w	r4, [lr]
 8016a7a:	46a8      	mov	r8, r5
 8016a7c:	bf08      	it	eq
 8016a7e:	f106 0e02 	addeq.w	lr, r6, #2
 8016a82:	e7c7      	b.n	8016a14 <_strtol_l.isra.0+0x3c>
 8016a84:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8016a88:	2f19      	cmp	r7, #25
 8016a8a:	d801      	bhi.n	8016a90 <_strtol_l.isra.0+0xb8>
 8016a8c:	3c37      	subs	r4, #55	; 0x37
 8016a8e:	e7e1      	b.n	8016a54 <_strtol_l.isra.0+0x7c>
 8016a90:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8016a94:	2f19      	cmp	r7, #25
 8016a96:	d804      	bhi.n	8016aa2 <_strtol_l.isra.0+0xca>
 8016a98:	3c57      	subs	r4, #87	; 0x57
 8016a9a:	e7db      	b.n	8016a54 <_strtol_l.isra.0+0x7c>
 8016a9c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8016aa0:	e7e4      	b.n	8016a6c <_strtol_l.isra.0+0x94>
 8016aa2:	2e00      	cmp	r6, #0
 8016aa4:	da05      	bge.n	8016ab2 <_strtol_l.isra.0+0xda>
 8016aa6:	2322      	movs	r3, #34	; 0x22
 8016aa8:	6003      	str	r3, [r0, #0]
 8016aaa:	4665      	mov	r5, ip
 8016aac:	b942      	cbnz	r2, 8016ac0 <_strtol_l.isra.0+0xe8>
 8016aae:	4628      	mov	r0, r5
 8016ab0:	e79d      	b.n	80169ee <_strtol_l.isra.0+0x16>
 8016ab2:	f1b8 0f00 	cmp.w	r8, #0
 8016ab6:	d000      	beq.n	8016aba <_strtol_l.isra.0+0xe2>
 8016ab8:	426d      	negs	r5, r5
 8016aba:	2a00      	cmp	r2, #0
 8016abc:	d0f7      	beq.n	8016aae <_strtol_l.isra.0+0xd6>
 8016abe:	b10e      	cbz	r6, 8016ac4 <_strtol_l.isra.0+0xec>
 8016ac0:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8016ac4:	6011      	str	r1, [r2, #0]
 8016ac6:	e7f2      	b.n	8016aae <_strtol_l.isra.0+0xd6>
 8016ac8:	2430      	movs	r4, #48	; 0x30
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d1b3      	bne.n	8016a36 <_strtol_l.isra.0+0x5e>
 8016ace:	2308      	movs	r3, #8
 8016ad0:	e7b1      	b.n	8016a36 <_strtol_l.isra.0+0x5e>
 8016ad2:	2c30      	cmp	r4, #48	; 0x30
 8016ad4:	d0a4      	beq.n	8016a20 <_strtol_l.isra.0+0x48>
 8016ad6:	230a      	movs	r3, #10
 8016ad8:	e7ad      	b.n	8016a36 <_strtol_l.isra.0+0x5e>
 8016ada:	bf00      	nop
 8016adc:	0801f89f 	.word	0x0801f89f

08016ae0 <strtol>:
 8016ae0:	4613      	mov	r3, r2
 8016ae2:	460a      	mov	r2, r1
 8016ae4:	4601      	mov	r1, r0
 8016ae6:	4802      	ldr	r0, [pc, #8]	; (8016af0 <strtol+0x10>)
 8016ae8:	6800      	ldr	r0, [r0, #0]
 8016aea:	f7ff bf75 	b.w	80169d8 <_strtol_l.isra.0>
 8016aee:	bf00      	nop
 8016af0:	2000002c 	.word	0x2000002c

08016af4 <__swbuf_r>:
 8016af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016af6:	460e      	mov	r6, r1
 8016af8:	4614      	mov	r4, r2
 8016afa:	4605      	mov	r5, r0
 8016afc:	b118      	cbz	r0, 8016b06 <__swbuf_r+0x12>
 8016afe:	6983      	ldr	r3, [r0, #24]
 8016b00:	b90b      	cbnz	r3, 8016b06 <__swbuf_r+0x12>
 8016b02:	f000 f9f5 	bl	8016ef0 <__sinit>
 8016b06:	4b21      	ldr	r3, [pc, #132]	; (8016b8c <__swbuf_r+0x98>)
 8016b08:	429c      	cmp	r4, r3
 8016b0a:	d12b      	bne.n	8016b64 <__swbuf_r+0x70>
 8016b0c:	686c      	ldr	r4, [r5, #4]
 8016b0e:	69a3      	ldr	r3, [r4, #24]
 8016b10:	60a3      	str	r3, [r4, #8]
 8016b12:	89a3      	ldrh	r3, [r4, #12]
 8016b14:	071a      	lsls	r2, r3, #28
 8016b16:	d52f      	bpl.n	8016b78 <__swbuf_r+0x84>
 8016b18:	6923      	ldr	r3, [r4, #16]
 8016b1a:	b36b      	cbz	r3, 8016b78 <__swbuf_r+0x84>
 8016b1c:	6923      	ldr	r3, [r4, #16]
 8016b1e:	6820      	ldr	r0, [r4, #0]
 8016b20:	1ac0      	subs	r0, r0, r3
 8016b22:	6963      	ldr	r3, [r4, #20]
 8016b24:	b2f6      	uxtb	r6, r6
 8016b26:	4283      	cmp	r3, r0
 8016b28:	4637      	mov	r7, r6
 8016b2a:	dc04      	bgt.n	8016b36 <__swbuf_r+0x42>
 8016b2c:	4621      	mov	r1, r4
 8016b2e:	4628      	mov	r0, r5
 8016b30:	f000 f94a 	bl	8016dc8 <_fflush_r>
 8016b34:	bb30      	cbnz	r0, 8016b84 <__swbuf_r+0x90>
 8016b36:	68a3      	ldr	r3, [r4, #8]
 8016b38:	3b01      	subs	r3, #1
 8016b3a:	60a3      	str	r3, [r4, #8]
 8016b3c:	6823      	ldr	r3, [r4, #0]
 8016b3e:	1c5a      	adds	r2, r3, #1
 8016b40:	6022      	str	r2, [r4, #0]
 8016b42:	701e      	strb	r6, [r3, #0]
 8016b44:	6963      	ldr	r3, [r4, #20]
 8016b46:	3001      	adds	r0, #1
 8016b48:	4283      	cmp	r3, r0
 8016b4a:	d004      	beq.n	8016b56 <__swbuf_r+0x62>
 8016b4c:	89a3      	ldrh	r3, [r4, #12]
 8016b4e:	07db      	lsls	r3, r3, #31
 8016b50:	d506      	bpl.n	8016b60 <__swbuf_r+0x6c>
 8016b52:	2e0a      	cmp	r6, #10
 8016b54:	d104      	bne.n	8016b60 <__swbuf_r+0x6c>
 8016b56:	4621      	mov	r1, r4
 8016b58:	4628      	mov	r0, r5
 8016b5a:	f000 f935 	bl	8016dc8 <_fflush_r>
 8016b5e:	b988      	cbnz	r0, 8016b84 <__swbuf_r+0x90>
 8016b60:	4638      	mov	r0, r7
 8016b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016b64:	4b0a      	ldr	r3, [pc, #40]	; (8016b90 <__swbuf_r+0x9c>)
 8016b66:	429c      	cmp	r4, r3
 8016b68:	d101      	bne.n	8016b6e <__swbuf_r+0x7a>
 8016b6a:	68ac      	ldr	r4, [r5, #8]
 8016b6c:	e7cf      	b.n	8016b0e <__swbuf_r+0x1a>
 8016b6e:	4b09      	ldr	r3, [pc, #36]	; (8016b94 <__swbuf_r+0xa0>)
 8016b70:	429c      	cmp	r4, r3
 8016b72:	bf08      	it	eq
 8016b74:	68ec      	ldreq	r4, [r5, #12]
 8016b76:	e7ca      	b.n	8016b0e <__swbuf_r+0x1a>
 8016b78:	4621      	mov	r1, r4
 8016b7a:	4628      	mov	r0, r5
 8016b7c:	f000 f80c 	bl	8016b98 <__swsetup_r>
 8016b80:	2800      	cmp	r0, #0
 8016b82:	d0cb      	beq.n	8016b1c <__swbuf_r+0x28>
 8016b84:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016b88:	e7ea      	b.n	8016b60 <__swbuf_r+0x6c>
 8016b8a:	bf00      	nop
 8016b8c:	0801fa78 	.word	0x0801fa78
 8016b90:	0801fa98 	.word	0x0801fa98
 8016b94:	0801fa58 	.word	0x0801fa58

08016b98 <__swsetup_r>:
 8016b98:	4b32      	ldr	r3, [pc, #200]	; (8016c64 <__swsetup_r+0xcc>)
 8016b9a:	b570      	push	{r4, r5, r6, lr}
 8016b9c:	681d      	ldr	r5, [r3, #0]
 8016b9e:	4606      	mov	r6, r0
 8016ba0:	460c      	mov	r4, r1
 8016ba2:	b125      	cbz	r5, 8016bae <__swsetup_r+0x16>
 8016ba4:	69ab      	ldr	r3, [r5, #24]
 8016ba6:	b913      	cbnz	r3, 8016bae <__swsetup_r+0x16>
 8016ba8:	4628      	mov	r0, r5
 8016baa:	f000 f9a1 	bl	8016ef0 <__sinit>
 8016bae:	4b2e      	ldr	r3, [pc, #184]	; (8016c68 <__swsetup_r+0xd0>)
 8016bb0:	429c      	cmp	r4, r3
 8016bb2:	d10f      	bne.n	8016bd4 <__swsetup_r+0x3c>
 8016bb4:	686c      	ldr	r4, [r5, #4]
 8016bb6:	89a3      	ldrh	r3, [r4, #12]
 8016bb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016bbc:	0719      	lsls	r1, r3, #28
 8016bbe:	d42c      	bmi.n	8016c1a <__swsetup_r+0x82>
 8016bc0:	06dd      	lsls	r5, r3, #27
 8016bc2:	d411      	bmi.n	8016be8 <__swsetup_r+0x50>
 8016bc4:	2309      	movs	r3, #9
 8016bc6:	6033      	str	r3, [r6, #0]
 8016bc8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016bcc:	81a3      	strh	r3, [r4, #12]
 8016bce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016bd2:	e03e      	b.n	8016c52 <__swsetup_r+0xba>
 8016bd4:	4b25      	ldr	r3, [pc, #148]	; (8016c6c <__swsetup_r+0xd4>)
 8016bd6:	429c      	cmp	r4, r3
 8016bd8:	d101      	bne.n	8016bde <__swsetup_r+0x46>
 8016bda:	68ac      	ldr	r4, [r5, #8]
 8016bdc:	e7eb      	b.n	8016bb6 <__swsetup_r+0x1e>
 8016bde:	4b24      	ldr	r3, [pc, #144]	; (8016c70 <__swsetup_r+0xd8>)
 8016be0:	429c      	cmp	r4, r3
 8016be2:	bf08      	it	eq
 8016be4:	68ec      	ldreq	r4, [r5, #12]
 8016be6:	e7e6      	b.n	8016bb6 <__swsetup_r+0x1e>
 8016be8:	0758      	lsls	r0, r3, #29
 8016bea:	d512      	bpl.n	8016c12 <__swsetup_r+0x7a>
 8016bec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016bee:	b141      	cbz	r1, 8016c02 <__swsetup_r+0x6a>
 8016bf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016bf4:	4299      	cmp	r1, r3
 8016bf6:	d002      	beq.n	8016bfe <__swsetup_r+0x66>
 8016bf8:	4630      	mov	r0, r6
 8016bfa:	f000 fa97 	bl	801712c <_free_r>
 8016bfe:	2300      	movs	r3, #0
 8016c00:	6363      	str	r3, [r4, #52]	; 0x34
 8016c02:	89a3      	ldrh	r3, [r4, #12]
 8016c04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016c08:	81a3      	strh	r3, [r4, #12]
 8016c0a:	2300      	movs	r3, #0
 8016c0c:	6063      	str	r3, [r4, #4]
 8016c0e:	6923      	ldr	r3, [r4, #16]
 8016c10:	6023      	str	r3, [r4, #0]
 8016c12:	89a3      	ldrh	r3, [r4, #12]
 8016c14:	f043 0308 	orr.w	r3, r3, #8
 8016c18:	81a3      	strh	r3, [r4, #12]
 8016c1a:	6923      	ldr	r3, [r4, #16]
 8016c1c:	b94b      	cbnz	r3, 8016c32 <__swsetup_r+0x9a>
 8016c1e:	89a3      	ldrh	r3, [r4, #12]
 8016c20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016c28:	d003      	beq.n	8016c32 <__swsetup_r+0x9a>
 8016c2a:	4621      	mov	r1, r4
 8016c2c:	4630      	mov	r0, r6
 8016c2e:	f000 fa35 	bl	801709c <__smakebuf_r>
 8016c32:	89a0      	ldrh	r0, [r4, #12]
 8016c34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016c38:	f010 0301 	ands.w	r3, r0, #1
 8016c3c:	d00a      	beq.n	8016c54 <__swsetup_r+0xbc>
 8016c3e:	2300      	movs	r3, #0
 8016c40:	60a3      	str	r3, [r4, #8]
 8016c42:	6963      	ldr	r3, [r4, #20]
 8016c44:	425b      	negs	r3, r3
 8016c46:	61a3      	str	r3, [r4, #24]
 8016c48:	6923      	ldr	r3, [r4, #16]
 8016c4a:	b943      	cbnz	r3, 8016c5e <__swsetup_r+0xc6>
 8016c4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016c50:	d1ba      	bne.n	8016bc8 <__swsetup_r+0x30>
 8016c52:	bd70      	pop	{r4, r5, r6, pc}
 8016c54:	0781      	lsls	r1, r0, #30
 8016c56:	bf58      	it	pl
 8016c58:	6963      	ldrpl	r3, [r4, #20]
 8016c5a:	60a3      	str	r3, [r4, #8]
 8016c5c:	e7f4      	b.n	8016c48 <__swsetup_r+0xb0>
 8016c5e:	2000      	movs	r0, #0
 8016c60:	e7f7      	b.n	8016c52 <__swsetup_r+0xba>
 8016c62:	bf00      	nop
 8016c64:	2000002c 	.word	0x2000002c
 8016c68:	0801fa78 	.word	0x0801fa78
 8016c6c:	0801fa98 	.word	0x0801fa98
 8016c70:	0801fa58 	.word	0x0801fa58

08016c74 <__assert_func>:
 8016c74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016c76:	4614      	mov	r4, r2
 8016c78:	461a      	mov	r2, r3
 8016c7a:	4b09      	ldr	r3, [pc, #36]	; (8016ca0 <__assert_func+0x2c>)
 8016c7c:	681b      	ldr	r3, [r3, #0]
 8016c7e:	4605      	mov	r5, r0
 8016c80:	68d8      	ldr	r0, [r3, #12]
 8016c82:	b14c      	cbz	r4, 8016c98 <__assert_func+0x24>
 8016c84:	4b07      	ldr	r3, [pc, #28]	; (8016ca4 <__assert_func+0x30>)
 8016c86:	9100      	str	r1, [sp, #0]
 8016c88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016c8c:	4906      	ldr	r1, [pc, #24]	; (8016ca8 <__assert_func+0x34>)
 8016c8e:	462b      	mov	r3, r5
 8016c90:	f000 f9ac 	bl	8016fec <fiprintf>
 8016c94:	f000 ffa4 	bl	8017be0 <abort>
 8016c98:	4b04      	ldr	r3, [pc, #16]	; (8016cac <__assert_func+0x38>)
 8016c9a:	461c      	mov	r4, r3
 8016c9c:	e7f3      	b.n	8016c86 <__assert_func+0x12>
 8016c9e:	bf00      	nop
 8016ca0:	2000002c 	.word	0x2000002c
 8016ca4:	0801fa1a 	.word	0x0801fa1a
 8016ca8:	0801fa27 	.word	0x0801fa27
 8016cac:	0801fa55 	.word	0x0801fa55

08016cb0 <__errno>:
 8016cb0:	4b01      	ldr	r3, [pc, #4]	; (8016cb8 <__errno+0x8>)
 8016cb2:	6818      	ldr	r0, [r3, #0]
 8016cb4:	4770      	bx	lr
 8016cb6:	bf00      	nop
 8016cb8:	2000002c 	.word	0x2000002c

08016cbc <__sflush_r>:
 8016cbc:	898a      	ldrh	r2, [r1, #12]
 8016cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cc2:	4605      	mov	r5, r0
 8016cc4:	0710      	lsls	r0, r2, #28
 8016cc6:	460c      	mov	r4, r1
 8016cc8:	d458      	bmi.n	8016d7c <__sflush_r+0xc0>
 8016cca:	684b      	ldr	r3, [r1, #4]
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	dc05      	bgt.n	8016cdc <__sflush_r+0x20>
 8016cd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	dc02      	bgt.n	8016cdc <__sflush_r+0x20>
 8016cd6:	2000      	movs	r0, #0
 8016cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016cdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016cde:	2e00      	cmp	r6, #0
 8016ce0:	d0f9      	beq.n	8016cd6 <__sflush_r+0x1a>
 8016ce2:	2300      	movs	r3, #0
 8016ce4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016ce8:	682f      	ldr	r7, [r5, #0]
 8016cea:	602b      	str	r3, [r5, #0]
 8016cec:	d032      	beq.n	8016d54 <__sflush_r+0x98>
 8016cee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016cf0:	89a3      	ldrh	r3, [r4, #12]
 8016cf2:	075a      	lsls	r2, r3, #29
 8016cf4:	d505      	bpl.n	8016d02 <__sflush_r+0x46>
 8016cf6:	6863      	ldr	r3, [r4, #4]
 8016cf8:	1ac0      	subs	r0, r0, r3
 8016cfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016cfc:	b10b      	cbz	r3, 8016d02 <__sflush_r+0x46>
 8016cfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016d00:	1ac0      	subs	r0, r0, r3
 8016d02:	2300      	movs	r3, #0
 8016d04:	4602      	mov	r2, r0
 8016d06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016d08:	6a21      	ldr	r1, [r4, #32]
 8016d0a:	4628      	mov	r0, r5
 8016d0c:	47b0      	blx	r6
 8016d0e:	1c43      	adds	r3, r0, #1
 8016d10:	89a3      	ldrh	r3, [r4, #12]
 8016d12:	d106      	bne.n	8016d22 <__sflush_r+0x66>
 8016d14:	6829      	ldr	r1, [r5, #0]
 8016d16:	291d      	cmp	r1, #29
 8016d18:	d82c      	bhi.n	8016d74 <__sflush_r+0xb8>
 8016d1a:	4a2a      	ldr	r2, [pc, #168]	; (8016dc4 <__sflush_r+0x108>)
 8016d1c:	40ca      	lsrs	r2, r1
 8016d1e:	07d6      	lsls	r6, r2, #31
 8016d20:	d528      	bpl.n	8016d74 <__sflush_r+0xb8>
 8016d22:	2200      	movs	r2, #0
 8016d24:	6062      	str	r2, [r4, #4]
 8016d26:	04d9      	lsls	r1, r3, #19
 8016d28:	6922      	ldr	r2, [r4, #16]
 8016d2a:	6022      	str	r2, [r4, #0]
 8016d2c:	d504      	bpl.n	8016d38 <__sflush_r+0x7c>
 8016d2e:	1c42      	adds	r2, r0, #1
 8016d30:	d101      	bne.n	8016d36 <__sflush_r+0x7a>
 8016d32:	682b      	ldr	r3, [r5, #0]
 8016d34:	b903      	cbnz	r3, 8016d38 <__sflush_r+0x7c>
 8016d36:	6560      	str	r0, [r4, #84]	; 0x54
 8016d38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016d3a:	602f      	str	r7, [r5, #0]
 8016d3c:	2900      	cmp	r1, #0
 8016d3e:	d0ca      	beq.n	8016cd6 <__sflush_r+0x1a>
 8016d40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016d44:	4299      	cmp	r1, r3
 8016d46:	d002      	beq.n	8016d4e <__sflush_r+0x92>
 8016d48:	4628      	mov	r0, r5
 8016d4a:	f000 f9ef 	bl	801712c <_free_r>
 8016d4e:	2000      	movs	r0, #0
 8016d50:	6360      	str	r0, [r4, #52]	; 0x34
 8016d52:	e7c1      	b.n	8016cd8 <__sflush_r+0x1c>
 8016d54:	6a21      	ldr	r1, [r4, #32]
 8016d56:	2301      	movs	r3, #1
 8016d58:	4628      	mov	r0, r5
 8016d5a:	47b0      	blx	r6
 8016d5c:	1c41      	adds	r1, r0, #1
 8016d5e:	d1c7      	bne.n	8016cf0 <__sflush_r+0x34>
 8016d60:	682b      	ldr	r3, [r5, #0]
 8016d62:	2b00      	cmp	r3, #0
 8016d64:	d0c4      	beq.n	8016cf0 <__sflush_r+0x34>
 8016d66:	2b1d      	cmp	r3, #29
 8016d68:	d001      	beq.n	8016d6e <__sflush_r+0xb2>
 8016d6a:	2b16      	cmp	r3, #22
 8016d6c:	d101      	bne.n	8016d72 <__sflush_r+0xb6>
 8016d6e:	602f      	str	r7, [r5, #0]
 8016d70:	e7b1      	b.n	8016cd6 <__sflush_r+0x1a>
 8016d72:	89a3      	ldrh	r3, [r4, #12]
 8016d74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016d78:	81a3      	strh	r3, [r4, #12]
 8016d7a:	e7ad      	b.n	8016cd8 <__sflush_r+0x1c>
 8016d7c:	690f      	ldr	r7, [r1, #16]
 8016d7e:	2f00      	cmp	r7, #0
 8016d80:	d0a9      	beq.n	8016cd6 <__sflush_r+0x1a>
 8016d82:	0793      	lsls	r3, r2, #30
 8016d84:	680e      	ldr	r6, [r1, #0]
 8016d86:	bf08      	it	eq
 8016d88:	694b      	ldreq	r3, [r1, #20]
 8016d8a:	600f      	str	r7, [r1, #0]
 8016d8c:	bf18      	it	ne
 8016d8e:	2300      	movne	r3, #0
 8016d90:	eba6 0807 	sub.w	r8, r6, r7
 8016d94:	608b      	str	r3, [r1, #8]
 8016d96:	f1b8 0f00 	cmp.w	r8, #0
 8016d9a:	dd9c      	ble.n	8016cd6 <__sflush_r+0x1a>
 8016d9c:	6a21      	ldr	r1, [r4, #32]
 8016d9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016da0:	4643      	mov	r3, r8
 8016da2:	463a      	mov	r2, r7
 8016da4:	4628      	mov	r0, r5
 8016da6:	47b0      	blx	r6
 8016da8:	2800      	cmp	r0, #0
 8016daa:	dc06      	bgt.n	8016dba <__sflush_r+0xfe>
 8016dac:	89a3      	ldrh	r3, [r4, #12]
 8016dae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016db2:	81a3      	strh	r3, [r4, #12]
 8016db4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016db8:	e78e      	b.n	8016cd8 <__sflush_r+0x1c>
 8016dba:	4407      	add	r7, r0
 8016dbc:	eba8 0800 	sub.w	r8, r8, r0
 8016dc0:	e7e9      	b.n	8016d96 <__sflush_r+0xda>
 8016dc2:	bf00      	nop
 8016dc4:	20400001 	.word	0x20400001

08016dc8 <_fflush_r>:
 8016dc8:	b538      	push	{r3, r4, r5, lr}
 8016dca:	690b      	ldr	r3, [r1, #16]
 8016dcc:	4605      	mov	r5, r0
 8016dce:	460c      	mov	r4, r1
 8016dd0:	b913      	cbnz	r3, 8016dd8 <_fflush_r+0x10>
 8016dd2:	2500      	movs	r5, #0
 8016dd4:	4628      	mov	r0, r5
 8016dd6:	bd38      	pop	{r3, r4, r5, pc}
 8016dd8:	b118      	cbz	r0, 8016de2 <_fflush_r+0x1a>
 8016dda:	6983      	ldr	r3, [r0, #24]
 8016ddc:	b90b      	cbnz	r3, 8016de2 <_fflush_r+0x1a>
 8016dde:	f000 f887 	bl	8016ef0 <__sinit>
 8016de2:	4b14      	ldr	r3, [pc, #80]	; (8016e34 <_fflush_r+0x6c>)
 8016de4:	429c      	cmp	r4, r3
 8016de6:	d11b      	bne.n	8016e20 <_fflush_r+0x58>
 8016de8:	686c      	ldr	r4, [r5, #4]
 8016dea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d0ef      	beq.n	8016dd2 <_fflush_r+0xa>
 8016df2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016df4:	07d0      	lsls	r0, r2, #31
 8016df6:	d404      	bmi.n	8016e02 <_fflush_r+0x3a>
 8016df8:	0599      	lsls	r1, r3, #22
 8016dfa:	d402      	bmi.n	8016e02 <_fflush_r+0x3a>
 8016dfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016dfe:	f000 f927 	bl	8017050 <__retarget_lock_acquire_recursive>
 8016e02:	4628      	mov	r0, r5
 8016e04:	4621      	mov	r1, r4
 8016e06:	f7ff ff59 	bl	8016cbc <__sflush_r>
 8016e0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016e0c:	07da      	lsls	r2, r3, #31
 8016e0e:	4605      	mov	r5, r0
 8016e10:	d4e0      	bmi.n	8016dd4 <_fflush_r+0xc>
 8016e12:	89a3      	ldrh	r3, [r4, #12]
 8016e14:	059b      	lsls	r3, r3, #22
 8016e16:	d4dd      	bmi.n	8016dd4 <_fflush_r+0xc>
 8016e18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016e1a:	f000 f91a 	bl	8017052 <__retarget_lock_release_recursive>
 8016e1e:	e7d9      	b.n	8016dd4 <_fflush_r+0xc>
 8016e20:	4b05      	ldr	r3, [pc, #20]	; (8016e38 <_fflush_r+0x70>)
 8016e22:	429c      	cmp	r4, r3
 8016e24:	d101      	bne.n	8016e2a <_fflush_r+0x62>
 8016e26:	68ac      	ldr	r4, [r5, #8]
 8016e28:	e7df      	b.n	8016dea <_fflush_r+0x22>
 8016e2a:	4b04      	ldr	r3, [pc, #16]	; (8016e3c <_fflush_r+0x74>)
 8016e2c:	429c      	cmp	r4, r3
 8016e2e:	bf08      	it	eq
 8016e30:	68ec      	ldreq	r4, [r5, #12]
 8016e32:	e7da      	b.n	8016dea <_fflush_r+0x22>
 8016e34:	0801fa78 	.word	0x0801fa78
 8016e38:	0801fa98 	.word	0x0801fa98
 8016e3c:	0801fa58 	.word	0x0801fa58

08016e40 <std>:
 8016e40:	2300      	movs	r3, #0
 8016e42:	b510      	push	{r4, lr}
 8016e44:	4604      	mov	r4, r0
 8016e46:	e9c0 3300 	strd	r3, r3, [r0]
 8016e4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016e4e:	6083      	str	r3, [r0, #8]
 8016e50:	8181      	strh	r1, [r0, #12]
 8016e52:	6643      	str	r3, [r0, #100]	; 0x64
 8016e54:	81c2      	strh	r2, [r0, #14]
 8016e56:	6183      	str	r3, [r0, #24]
 8016e58:	4619      	mov	r1, r3
 8016e5a:	2208      	movs	r2, #8
 8016e5c:	305c      	adds	r0, #92	; 0x5c
 8016e5e:	f7ff fc05 	bl	801666c <memset>
 8016e62:	4b05      	ldr	r3, [pc, #20]	; (8016e78 <std+0x38>)
 8016e64:	6263      	str	r3, [r4, #36]	; 0x24
 8016e66:	4b05      	ldr	r3, [pc, #20]	; (8016e7c <std+0x3c>)
 8016e68:	62a3      	str	r3, [r4, #40]	; 0x28
 8016e6a:	4b05      	ldr	r3, [pc, #20]	; (8016e80 <std+0x40>)
 8016e6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016e6e:	4b05      	ldr	r3, [pc, #20]	; (8016e84 <std+0x44>)
 8016e70:	6224      	str	r4, [r4, #32]
 8016e72:	6323      	str	r3, [r4, #48]	; 0x30
 8016e74:	bd10      	pop	{r4, pc}
 8016e76:	bf00      	nop
 8016e78:	08017b35 	.word	0x08017b35
 8016e7c:	08017b57 	.word	0x08017b57
 8016e80:	08017b8f 	.word	0x08017b8f
 8016e84:	08017bb3 	.word	0x08017bb3

08016e88 <_cleanup_r>:
 8016e88:	4901      	ldr	r1, [pc, #4]	; (8016e90 <_cleanup_r+0x8>)
 8016e8a:	f000 b8c1 	b.w	8017010 <_fwalk_reent>
 8016e8e:	bf00      	nop
 8016e90:	08016dc9 	.word	0x08016dc9

08016e94 <__sfmoreglue>:
 8016e94:	b570      	push	{r4, r5, r6, lr}
 8016e96:	1e4a      	subs	r2, r1, #1
 8016e98:	2568      	movs	r5, #104	; 0x68
 8016e9a:	4355      	muls	r5, r2
 8016e9c:	460e      	mov	r6, r1
 8016e9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016ea2:	f000 f993 	bl	80171cc <_malloc_r>
 8016ea6:	4604      	mov	r4, r0
 8016ea8:	b140      	cbz	r0, 8016ebc <__sfmoreglue+0x28>
 8016eaa:	2100      	movs	r1, #0
 8016eac:	e9c0 1600 	strd	r1, r6, [r0]
 8016eb0:	300c      	adds	r0, #12
 8016eb2:	60a0      	str	r0, [r4, #8]
 8016eb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016eb8:	f7ff fbd8 	bl	801666c <memset>
 8016ebc:	4620      	mov	r0, r4
 8016ebe:	bd70      	pop	{r4, r5, r6, pc}

08016ec0 <__sfp_lock_acquire>:
 8016ec0:	4801      	ldr	r0, [pc, #4]	; (8016ec8 <__sfp_lock_acquire+0x8>)
 8016ec2:	f000 b8c5 	b.w	8017050 <__retarget_lock_acquire_recursive>
 8016ec6:	bf00      	nop
 8016ec8:	20017a20 	.word	0x20017a20

08016ecc <__sfp_lock_release>:
 8016ecc:	4801      	ldr	r0, [pc, #4]	; (8016ed4 <__sfp_lock_release+0x8>)
 8016ece:	f000 b8c0 	b.w	8017052 <__retarget_lock_release_recursive>
 8016ed2:	bf00      	nop
 8016ed4:	20017a20 	.word	0x20017a20

08016ed8 <__sinit_lock_acquire>:
 8016ed8:	4801      	ldr	r0, [pc, #4]	; (8016ee0 <__sinit_lock_acquire+0x8>)
 8016eda:	f000 b8b9 	b.w	8017050 <__retarget_lock_acquire_recursive>
 8016ede:	bf00      	nop
 8016ee0:	20017a1b 	.word	0x20017a1b

08016ee4 <__sinit_lock_release>:
 8016ee4:	4801      	ldr	r0, [pc, #4]	; (8016eec <__sinit_lock_release+0x8>)
 8016ee6:	f000 b8b4 	b.w	8017052 <__retarget_lock_release_recursive>
 8016eea:	bf00      	nop
 8016eec:	20017a1b 	.word	0x20017a1b

08016ef0 <__sinit>:
 8016ef0:	b510      	push	{r4, lr}
 8016ef2:	4604      	mov	r4, r0
 8016ef4:	f7ff fff0 	bl	8016ed8 <__sinit_lock_acquire>
 8016ef8:	69a3      	ldr	r3, [r4, #24]
 8016efa:	b11b      	cbz	r3, 8016f04 <__sinit+0x14>
 8016efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016f00:	f7ff bff0 	b.w	8016ee4 <__sinit_lock_release>
 8016f04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016f08:	6523      	str	r3, [r4, #80]	; 0x50
 8016f0a:	4b13      	ldr	r3, [pc, #76]	; (8016f58 <__sinit+0x68>)
 8016f0c:	4a13      	ldr	r2, [pc, #76]	; (8016f5c <__sinit+0x6c>)
 8016f0e:	681b      	ldr	r3, [r3, #0]
 8016f10:	62a2      	str	r2, [r4, #40]	; 0x28
 8016f12:	42a3      	cmp	r3, r4
 8016f14:	bf04      	itt	eq
 8016f16:	2301      	moveq	r3, #1
 8016f18:	61a3      	streq	r3, [r4, #24]
 8016f1a:	4620      	mov	r0, r4
 8016f1c:	f000 f820 	bl	8016f60 <__sfp>
 8016f20:	6060      	str	r0, [r4, #4]
 8016f22:	4620      	mov	r0, r4
 8016f24:	f000 f81c 	bl	8016f60 <__sfp>
 8016f28:	60a0      	str	r0, [r4, #8]
 8016f2a:	4620      	mov	r0, r4
 8016f2c:	f000 f818 	bl	8016f60 <__sfp>
 8016f30:	2200      	movs	r2, #0
 8016f32:	60e0      	str	r0, [r4, #12]
 8016f34:	2104      	movs	r1, #4
 8016f36:	6860      	ldr	r0, [r4, #4]
 8016f38:	f7ff ff82 	bl	8016e40 <std>
 8016f3c:	68a0      	ldr	r0, [r4, #8]
 8016f3e:	2201      	movs	r2, #1
 8016f40:	2109      	movs	r1, #9
 8016f42:	f7ff ff7d 	bl	8016e40 <std>
 8016f46:	68e0      	ldr	r0, [r4, #12]
 8016f48:	2202      	movs	r2, #2
 8016f4a:	2112      	movs	r1, #18
 8016f4c:	f7ff ff78 	bl	8016e40 <std>
 8016f50:	2301      	movs	r3, #1
 8016f52:	61a3      	str	r3, [r4, #24]
 8016f54:	e7d2      	b.n	8016efc <__sinit+0xc>
 8016f56:	bf00      	nop
 8016f58:	0801f9a0 	.word	0x0801f9a0
 8016f5c:	08016e89 	.word	0x08016e89

08016f60 <__sfp>:
 8016f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f62:	4607      	mov	r7, r0
 8016f64:	f7ff ffac 	bl	8016ec0 <__sfp_lock_acquire>
 8016f68:	4b1e      	ldr	r3, [pc, #120]	; (8016fe4 <__sfp+0x84>)
 8016f6a:	681e      	ldr	r6, [r3, #0]
 8016f6c:	69b3      	ldr	r3, [r6, #24]
 8016f6e:	b913      	cbnz	r3, 8016f76 <__sfp+0x16>
 8016f70:	4630      	mov	r0, r6
 8016f72:	f7ff ffbd 	bl	8016ef0 <__sinit>
 8016f76:	3648      	adds	r6, #72	; 0x48
 8016f78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016f7c:	3b01      	subs	r3, #1
 8016f7e:	d503      	bpl.n	8016f88 <__sfp+0x28>
 8016f80:	6833      	ldr	r3, [r6, #0]
 8016f82:	b30b      	cbz	r3, 8016fc8 <__sfp+0x68>
 8016f84:	6836      	ldr	r6, [r6, #0]
 8016f86:	e7f7      	b.n	8016f78 <__sfp+0x18>
 8016f88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016f8c:	b9d5      	cbnz	r5, 8016fc4 <__sfp+0x64>
 8016f8e:	4b16      	ldr	r3, [pc, #88]	; (8016fe8 <__sfp+0x88>)
 8016f90:	60e3      	str	r3, [r4, #12]
 8016f92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016f96:	6665      	str	r5, [r4, #100]	; 0x64
 8016f98:	f000 f859 	bl	801704e <__retarget_lock_init_recursive>
 8016f9c:	f7ff ff96 	bl	8016ecc <__sfp_lock_release>
 8016fa0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016fa4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016fa8:	6025      	str	r5, [r4, #0]
 8016faa:	61a5      	str	r5, [r4, #24]
 8016fac:	2208      	movs	r2, #8
 8016fae:	4629      	mov	r1, r5
 8016fb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016fb4:	f7ff fb5a 	bl	801666c <memset>
 8016fb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016fbc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016fc0:	4620      	mov	r0, r4
 8016fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016fc4:	3468      	adds	r4, #104	; 0x68
 8016fc6:	e7d9      	b.n	8016f7c <__sfp+0x1c>
 8016fc8:	2104      	movs	r1, #4
 8016fca:	4638      	mov	r0, r7
 8016fcc:	f7ff ff62 	bl	8016e94 <__sfmoreglue>
 8016fd0:	4604      	mov	r4, r0
 8016fd2:	6030      	str	r0, [r6, #0]
 8016fd4:	2800      	cmp	r0, #0
 8016fd6:	d1d5      	bne.n	8016f84 <__sfp+0x24>
 8016fd8:	f7ff ff78 	bl	8016ecc <__sfp_lock_release>
 8016fdc:	230c      	movs	r3, #12
 8016fde:	603b      	str	r3, [r7, #0]
 8016fe0:	e7ee      	b.n	8016fc0 <__sfp+0x60>
 8016fe2:	bf00      	nop
 8016fe4:	0801f9a0 	.word	0x0801f9a0
 8016fe8:	ffff0001 	.word	0xffff0001

08016fec <fiprintf>:
 8016fec:	b40e      	push	{r1, r2, r3}
 8016fee:	b503      	push	{r0, r1, lr}
 8016ff0:	4601      	mov	r1, r0
 8016ff2:	ab03      	add	r3, sp, #12
 8016ff4:	4805      	ldr	r0, [pc, #20]	; (801700c <fiprintf+0x20>)
 8016ff6:	f853 2b04 	ldr.w	r2, [r3], #4
 8016ffa:	6800      	ldr	r0, [r0, #0]
 8016ffc:	9301      	str	r3, [sp, #4]
 8016ffe:	f000 fac5 	bl	801758c <_vfiprintf_r>
 8017002:	b002      	add	sp, #8
 8017004:	f85d eb04 	ldr.w	lr, [sp], #4
 8017008:	b003      	add	sp, #12
 801700a:	4770      	bx	lr
 801700c:	2000002c 	.word	0x2000002c

08017010 <_fwalk_reent>:
 8017010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017014:	4606      	mov	r6, r0
 8017016:	4688      	mov	r8, r1
 8017018:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801701c:	2700      	movs	r7, #0
 801701e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017022:	f1b9 0901 	subs.w	r9, r9, #1
 8017026:	d505      	bpl.n	8017034 <_fwalk_reent+0x24>
 8017028:	6824      	ldr	r4, [r4, #0]
 801702a:	2c00      	cmp	r4, #0
 801702c:	d1f7      	bne.n	801701e <_fwalk_reent+0xe>
 801702e:	4638      	mov	r0, r7
 8017030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017034:	89ab      	ldrh	r3, [r5, #12]
 8017036:	2b01      	cmp	r3, #1
 8017038:	d907      	bls.n	801704a <_fwalk_reent+0x3a>
 801703a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801703e:	3301      	adds	r3, #1
 8017040:	d003      	beq.n	801704a <_fwalk_reent+0x3a>
 8017042:	4629      	mov	r1, r5
 8017044:	4630      	mov	r0, r6
 8017046:	47c0      	blx	r8
 8017048:	4307      	orrs	r7, r0
 801704a:	3568      	adds	r5, #104	; 0x68
 801704c:	e7e9      	b.n	8017022 <_fwalk_reent+0x12>

0801704e <__retarget_lock_init_recursive>:
 801704e:	4770      	bx	lr

08017050 <__retarget_lock_acquire_recursive>:
 8017050:	4770      	bx	lr

08017052 <__retarget_lock_release_recursive>:
 8017052:	4770      	bx	lr

08017054 <__swhatbuf_r>:
 8017054:	b570      	push	{r4, r5, r6, lr}
 8017056:	460e      	mov	r6, r1
 8017058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801705c:	2900      	cmp	r1, #0
 801705e:	b096      	sub	sp, #88	; 0x58
 8017060:	4614      	mov	r4, r2
 8017062:	461d      	mov	r5, r3
 8017064:	da07      	bge.n	8017076 <__swhatbuf_r+0x22>
 8017066:	2300      	movs	r3, #0
 8017068:	602b      	str	r3, [r5, #0]
 801706a:	89b3      	ldrh	r3, [r6, #12]
 801706c:	061a      	lsls	r2, r3, #24
 801706e:	d410      	bmi.n	8017092 <__swhatbuf_r+0x3e>
 8017070:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017074:	e00e      	b.n	8017094 <__swhatbuf_r+0x40>
 8017076:	466a      	mov	r2, sp
 8017078:	f000 fdca 	bl	8017c10 <_fstat_r>
 801707c:	2800      	cmp	r0, #0
 801707e:	dbf2      	blt.n	8017066 <__swhatbuf_r+0x12>
 8017080:	9a01      	ldr	r2, [sp, #4]
 8017082:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017086:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801708a:	425a      	negs	r2, r3
 801708c:	415a      	adcs	r2, r3
 801708e:	602a      	str	r2, [r5, #0]
 8017090:	e7ee      	b.n	8017070 <__swhatbuf_r+0x1c>
 8017092:	2340      	movs	r3, #64	; 0x40
 8017094:	2000      	movs	r0, #0
 8017096:	6023      	str	r3, [r4, #0]
 8017098:	b016      	add	sp, #88	; 0x58
 801709a:	bd70      	pop	{r4, r5, r6, pc}

0801709c <__smakebuf_r>:
 801709c:	898b      	ldrh	r3, [r1, #12]
 801709e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80170a0:	079d      	lsls	r5, r3, #30
 80170a2:	4606      	mov	r6, r0
 80170a4:	460c      	mov	r4, r1
 80170a6:	d507      	bpl.n	80170b8 <__smakebuf_r+0x1c>
 80170a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80170ac:	6023      	str	r3, [r4, #0]
 80170ae:	6123      	str	r3, [r4, #16]
 80170b0:	2301      	movs	r3, #1
 80170b2:	6163      	str	r3, [r4, #20]
 80170b4:	b002      	add	sp, #8
 80170b6:	bd70      	pop	{r4, r5, r6, pc}
 80170b8:	ab01      	add	r3, sp, #4
 80170ba:	466a      	mov	r2, sp
 80170bc:	f7ff ffca 	bl	8017054 <__swhatbuf_r>
 80170c0:	9900      	ldr	r1, [sp, #0]
 80170c2:	4605      	mov	r5, r0
 80170c4:	4630      	mov	r0, r6
 80170c6:	f000 f881 	bl	80171cc <_malloc_r>
 80170ca:	b948      	cbnz	r0, 80170e0 <__smakebuf_r+0x44>
 80170cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80170d0:	059a      	lsls	r2, r3, #22
 80170d2:	d4ef      	bmi.n	80170b4 <__smakebuf_r+0x18>
 80170d4:	f023 0303 	bic.w	r3, r3, #3
 80170d8:	f043 0302 	orr.w	r3, r3, #2
 80170dc:	81a3      	strh	r3, [r4, #12]
 80170de:	e7e3      	b.n	80170a8 <__smakebuf_r+0xc>
 80170e0:	4b0d      	ldr	r3, [pc, #52]	; (8017118 <__smakebuf_r+0x7c>)
 80170e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80170e4:	89a3      	ldrh	r3, [r4, #12]
 80170e6:	6020      	str	r0, [r4, #0]
 80170e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80170ec:	81a3      	strh	r3, [r4, #12]
 80170ee:	9b00      	ldr	r3, [sp, #0]
 80170f0:	6163      	str	r3, [r4, #20]
 80170f2:	9b01      	ldr	r3, [sp, #4]
 80170f4:	6120      	str	r0, [r4, #16]
 80170f6:	b15b      	cbz	r3, 8017110 <__smakebuf_r+0x74>
 80170f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80170fc:	4630      	mov	r0, r6
 80170fe:	f000 fd99 	bl	8017c34 <_isatty_r>
 8017102:	b128      	cbz	r0, 8017110 <__smakebuf_r+0x74>
 8017104:	89a3      	ldrh	r3, [r4, #12]
 8017106:	f023 0303 	bic.w	r3, r3, #3
 801710a:	f043 0301 	orr.w	r3, r3, #1
 801710e:	81a3      	strh	r3, [r4, #12]
 8017110:	89a0      	ldrh	r0, [r4, #12]
 8017112:	4305      	orrs	r5, r0
 8017114:	81a5      	strh	r5, [r4, #12]
 8017116:	e7cd      	b.n	80170b4 <__smakebuf_r+0x18>
 8017118:	08016e89 	.word	0x08016e89

0801711c <malloc>:
 801711c:	4b02      	ldr	r3, [pc, #8]	; (8017128 <malloc+0xc>)
 801711e:	4601      	mov	r1, r0
 8017120:	6818      	ldr	r0, [r3, #0]
 8017122:	f000 b853 	b.w	80171cc <_malloc_r>
 8017126:	bf00      	nop
 8017128:	2000002c 	.word	0x2000002c

0801712c <_free_r>:
 801712c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801712e:	2900      	cmp	r1, #0
 8017130:	d048      	beq.n	80171c4 <_free_r+0x98>
 8017132:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017136:	9001      	str	r0, [sp, #4]
 8017138:	2b00      	cmp	r3, #0
 801713a:	f1a1 0404 	sub.w	r4, r1, #4
 801713e:	bfb8      	it	lt
 8017140:	18e4      	addlt	r4, r4, r3
 8017142:	f000 fd99 	bl	8017c78 <__malloc_lock>
 8017146:	4a20      	ldr	r2, [pc, #128]	; (80171c8 <_free_r+0x9c>)
 8017148:	9801      	ldr	r0, [sp, #4]
 801714a:	6813      	ldr	r3, [r2, #0]
 801714c:	4615      	mov	r5, r2
 801714e:	b933      	cbnz	r3, 801715e <_free_r+0x32>
 8017150:	6063      	str	r3, [r4, #4]
 8017152:	6014      	str	r4, [r2, #0]
 8017154:	b003      	add	sp, #12
 8017156:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801715a:	f000 bd93 	b.w	8017c84 <__malloc_unlock>
 801715e:	42a3      	cmp	r3, r4
 8017160:	d90b      	bls.n	801717a <_free_r+0x4e>
 8017162:	6821      	ldr	r1, [r4, #0]
 8017164:	1862      	adds	r2, r4, r1
 8017166:	4293      	cmp	r3, r2
 8017168:	bf04      	itt	eq
 801716a:	681a      	ldreq	r2, [r3, #0]
 801716c:	685b      	ldreq	r3, [r3, #4]
 801716e:	6063      	str	r3, [r4, #4]
 8017170:	bf04      	itt	eq
 8017172:	1852      	addeq	r2, r2, r1
 8017174:	6022      	streq	r2, [r4, #0]
 8017176:	602c      	str	r4, [r5, #0]
 8017178:	e7ec      	b.n	8017154 <_free_r+0x28>
 801717a:	461a      	mov	r2, r3
 801717c:	685b      	ldr	r3, [r3, #4]
 801717e:	b10b      	cbz	r3, 8017184 <_free_r+0x58>
 8017180:	42a3      	cmp	r3, r4
 8017182:	d9fa      	bls.n	801717a <_free_r+0x4e>
 8017184:	6811      	ldr	r1, [r2, #0]
 8017186:	1855      	adds	r5, r2, r1
 8017188:	42a5      	cmp	r5, r4
 801718a:	d10b      	bne.n	80171a4 <_free_r+0x78>
 801718c:	6824      	ldr	r4, [r4, #0]
 801718e:	4421      	add	r1, r4
 8017190:	1854      	adds	r4, r2, r1
 8017192:	42a3      	cmp	r3, r4
 8017194:	6011      	str	r1, [r2, #0]
 8017196:	d1dd      	bne.n	8017154 <_free_r+0x28>
 8017198:	681c      	ldr	r4, [r3, #0]
 801719a:	685b      	ldr	r3, [r3, #4]
 801719c:	6053      	str	r3, [r2, #4]
 801719e:	4421      	add	r1, r4
 80171a0:	6011      	str	r1, [r2, #0]
 80171a2:	e7d7      	b.n	8017154 <_free_r+0x28>
 80171a4:	d902      	bls.n	80171ac <_free_r+0x80>
 80171a6:	230c      	movs	r3, #12
 80171a8:	6003      	str	r3, [r0, #0]
 80171aa:	e7d3      	b.n	8017154 <_free_r+0x28>
 80171ac:	6825      	ldr	r5, [r4, #0]
 80171ae:	1961      	adds	r1, r4, r5
 80171b0:	428b      	cmp	r3, r1
 80171b2:	bf04      	itt	eq
 80171b4:	6819      	ldreq	r1, [r3, #0]
 80171b6:	685b      	ldreq	r3, [r3, #4]
 80171b8:	6063      	str	r3, [r4, #4]
 80171ba:	bf04      	itt	eq
 80171bc:	1949      	addeq	r1, r1, r5
 80171be:	6021      	streq	r1, [r4, #0]
 80171c0:	6054      	str	r4, [r2, #4]
 80171c2:	e7c7      	b.n	8017154 <_free_r+0x28>
 80171c4:	b003      	add	sp, #12
 80171c6:	bd30      	pop	{r4, r5, pc}
 80171c8:	200016c4 	.word	0x200016c4

080171cc <_malloc_r>:
 80171cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171ce:	1ccd      	adds	r5, r1, #3
 80171d0:	f025 0503 	bic.w	r5, r5, #3
 80171d4:	3508      	adds	r5, #8
 80171d6:	2d0c      	cmp	r5, #12
 80171d8:	bf38      	it	cc
 80171da:	250c      	movcc	r5, #12
 80171dc:	2d00      	cmp	r5, #0
 80171de:	4606      	mov	r6, r0
 80171e0:	db01      	blt.n	80171e6 <_malloc_r+0x1a>
 80171e2:	42a9      	cmp	r1, r5
 80171e4:	d903      	bls.n	80171ee <_malloc_r+0x22>
 80171e6:	230c      	movs	r3, #12
 80171e8:	6033      	str	r3, [r6, #0]
 80171ea:	2000      	movs	r0, #0
 80171ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80171ee:	f000 fd43 	bl	8017c78 <__malloc_lock>
 80171f2:	4921      	ldr	r1, [pc, #132]	; (8017278 <_malloc_r+0xac>)
 80171f4:	680a      	ldr	r2, [r1, #0]
 80171f6:	4614      	mov	r4, r2
 80171f8:	b99c      	cbnz	r4, 8017222 <_malloc_r+0x56>
 80171fa:	4f20      	ldr	r7, [pc, #128]	; (801727c <_malloc_r+0xb0>)
 80171fc:	683b      	ldr	r3, [r7, #0]
 80171fe:	b923      	cbnz	r3, 801720a <_malloc_r+0x3e>
 8017200:	4621      	mov	r1, r4
 8017202:	4630      	mov	r0, r6
 8017204:	f000 fc86 	bl	8017b14 <_sbrk_r>
 8017208:	6038      	str	r0, [r7, #0]
 801720a:	4629      	mov	r1, r5
 801720c:	4630      	mov	r0, r6
 801720e:	f000 fc81 	bl	8017b14 <_sbrk_r>
 8017212:	1c43      	adds	r3, r0, #1
 8017214:	d123      	bne.n	801725e <_malloc_r+0x92>
 8017216:	230c      	movs	r3, #12
 8017218:	6033      	str	r3, [r6, #0]
 801721a:	4630      	mov	r0, r6
 801721c:	f000 fd32 	bl	8017c84 <__malloc_unlock>
 8017220:	e7e3      	b.n	80171ea <_malloc_r+0x1e>
 8017222:	6823      	ldr	r3, [r4, #0]
 8017224:	1b5b      	subs	r3, r3, r5
 8017226:	d417      	bmi.n	8017258 <_malloc_r+0x8c>
 8017228:	2b0b      	cmp	r3, #11
 801722a:	d903      	bls.n	8017234 <_malloc_r+0x68>
 801722c:	6023      	str	r3, [r4, #0]
 801722e:	441c      	add	r4, r3
 8017230:	6025      	str	r5, [r4, #0]
 8017232:	e004      	b.n	801723e <_malloc_r+0x72>
 8017234:	6863      	ldr	r3, [r4, #4]
 8017236:	42a2      	cmp	r2, r4
 8017238:	bf0c      	ite	eq
 801723a:	600b      	streq	r3, [r1, #0]
 801723c:	6053      	strne	r3, [r2, #4]
 801723e:	4630      	mov	r0, r6
 8017240:	f000 fd20 	bl	8017c84 <__malloc_unlock>
 8017244:	f104 000b 	add.w	r0, r4, #11
 8017248:	1d23      	adds	r3, r4, #4
 801724a:	f020 0007 	bic.w	r0, r0, #7
 801724e:	1ac2      	subs	r2, r0, r3
 8017250:	d0cc      	beq.n	80171ec <_malloc_r+0x20>
 8017252:	1a1b      	subs	r3, r3, r0
 8017254:	50a3      	str	r3, [r4, r2]
 8017256:	e7c9      	b.n	80171ec <_malloc_r+0x20>
 8017258:	4622      	mov	r2, r4
 801725a:	6864      	ldr	r4, [r4, #4]
 801725c:	e7cc      	b.n	80171f8 <_malloc_r+0x2c>
 801725e:	1cc4      	adds	r4, r0, #3
 8017260:	f024 0403 	bic.w	r4, r4, #3
 8017264:	42a0      	cmp	r0, r4
 8017266:	d0e3      	beq.n	8017230 <_malloc_r+0x64>
 8017268:	1a21      	subs	r1, r4, r0
 801726a:	4630      	mov	r0, r6
 801726c:	f000 fc52 	bl	8017b14 <_sbrk_r>
 8017270:	3001      	adds	r0, #1
 8017272:	d1dd      	bne.n	8017230 <_malloc_r+0x64>
 8017274:	e7cf      	b.n	8017216 <_malloc_r+0x4a>
 8017276:	bf00      	nop
 8017278:	200016c4 	.word	0x200016c4
 801727c:	200016c8 	.word	0x200016c8

08017280 <__ssputs_r>:
 8017280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017284:	688e      	ldr	r6, [r1, #8]
 8017286:	429e      	cmp	r6, r3
 8017288:	4682      	mov	sl, r0
 801728a:	460c      	mov	r4, r1
 801728c:	4690      	mov	r8, r2
 801728e:	461f      	mov	r7, r3
 8017290:	d838      	bhi.n	8017304 <__ssputs_r+0x84>
 8017292:	898a      	ldrh	r2, [r1, #12]
 8017294:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017298:	d032      	beq.n	8017300 <__ssputs_r+0x80>
 801729a:	6825      	ldr	r5, [r4, #0]
 801729c:	6909      	ldr	r1, [r1, #16]
 801729e:	eba5 0901 	sub.w	r9, r5, r1
 80172a2:	6965      	ldr	r5, [r4, #20]
 80172a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80172a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80172ac:	3301      	adds	r3, #1
 80172ae:	444b      	add	r3, r9
 80172b0:	106d      	asrs	r5, r5, #1
 80172b2:	429d      	cmp	r5, r3
 80172b4:	bf38      	it	cc
 80172b6:	461d      	movcc	r5, r3
 80172b8:	0553      	lsls	r3, r2, #21
 80172ba:	d531      	bpl.n	8017320 <__ssputs_r+0xa0>
 80172bc:	4629      	mov	r1, r5
 80172be:	f7ff ff85 	bl	80171cc <_malloc_r>
 80172c2:	4606      	mov	r6, r0
 80172c4:	b950      	cbnz	r0, 80172dc <__ssputs_r+0x5c>
 80172c6:	230c      	movs	r3, #12
 80172c8:	f8ca 3000 	str.w	r3, [sl]
 80172cc:	89a3      	ldrh	r3, [r4, #12]
 80172ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80172d2:	81a3      	strh	r3, [r4, #12]
 80172d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80172d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80172dc:	6921      	ldr	r1, [r4, #16]
 80172de:	464a      	mov	r2, r9
 80172e0:	f7ff f99c 	bl	801661c <memcpy>
 80172e4:	89a3      	ldrh	r3, [r4, #12]
 80172e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80172ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80172ee:	81a3      	strh	r3, [r4, #12]
 80172f0:	6126      	str	r6, [r4, #16]
 80172f2:	6165      	str	r5, [r4, #20]
 80172f4:	444e      	add	r6, r9
 80172f6:	eba5 0509 	sub.w	r5, r5, r9
 80172fa:	6026      	str	r6, [r4, #0]
 80172fc:	60a5      	str	r5, [r4, #8]
 80172fe:	463e      	mov	r6, r7
 8017300:	42be      	cmp	r6, r7
 8017302:	d900      	bls.n	8017306 <__ssputs_r+0x86>
 8017304:	463e      	mov	r6, r7
 8017306:	4632      	mov	r2, r6
 8017308:	6820      	ldr	r0, [r4, #0]
 801730a:	4641      	mov	r1, r8
 801730c:	f7ff f994 	bl	8016638 <memmove>
 8017310:	68a3      	ldr	r3, [r4, #8]
 8017312:	6822      	ldr	r2, [r4, #0]
 8017314:	1b9b      	subs	r3, r3, r6
 8017316:	4432      	add	r2, r6
 8017318:	60a3      	str	r3, [r4, #8]
 801731a:	6022      	str	r2, [r4, #0]
 801731c:	2000      	movs	r0, #0
 801731e:	e7db      	b.n	80172d8 <__ssputs_r+0x58>
 8017320:	462a      	mov	r2, r5
 8017322:	f000 fcb5 	bl	8017c90 <_realloc_r>
 8017326:	4606      	mov	r6, r0
 8017328:	2800      	cmp	r0, #0
 801732a:	d1e1      	bne.n	80172f0 <__ssputs_r+0x70>
 801732c:	6921      	ldr	r1, [r4, #16]
 801732e:	4650      	mov	r0, sl
 8017330:	f7ff fefc 	bl	801712c <_free_r>
 8017334:	e7c7      	b.n	80172c6 <__ssputs_r+0x46>
	...

08017338 <_svfiprintf_r>:
 8017338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801733c:	4698      	mov	r8, r3
 801733e:	898b      	ldrh	r3, [r1, #12]
 8017340:	061b      	lsls	r3, r3, #24
 8017342:	b09d      	sub	sp, #116	; 0x74
 8017344:	4607      	mov	r7, r0
 8017346:	460d      	mov	r5, r1
 8017348:	4614      	mov	r4, r2
 801734a:	d50e      	bpl.n	801736a <_svfiprintf_r+0x32>
 801734c:	690b      	ldr	r3, [r1, #16]
 801734e:	b963      	cbnz	r3, 801736a <_svfiprintf_r+0x32>
 8017350:	2140      	movs	r1, #64	; 0x40
 8017352:	f7ff ff3b 	bl	80171cc <_malloc_r>
 8017356:	6028      	str	r0, [r5, #0]
 8017358:	6128      	str	r0, [r5, #16]
 801735a:	b920      	cbnz	r0, 8017366 <_svfiprintf_r+0x2e>
 801735c:	230c      	movs	r3, #12
 801735e:	603b      	str	r3, [r7, #0]
 8017360:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017364:	e0d1      	b.n	801750a <_svfiprintf_r+0x1d2>
 8017366:	2340      	movs	r3, #64	; 0x40
 8017368:	616b      	str	r3, [r5, #20]
 801736a:	2300      	movs	r3, #0
 801736c:	9309      	str	r3, [sp, #36]	; 0x24
 801736e:	2320      	movs	r3, #32
 8017370:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017374:	f8cd 800c 	str.w	r8, [sp, #12]
 8017378:	2330      	movs	r3, #48	; 0x30
 801737a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8017524 <_svfiprintf_r+0x1ec>
 801737e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017382:	f04f 0901 	mov.w	r9, #1
 8017386:	4623      	mov	r3, r4
 8017388:	469a      	mov	sl, r3
 801738a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801738e:	b10a      	cbz	r2, 8017394 <_svfiprintf_r+0x5c>
 8017390:	2a25      	cmp	r2, #37	; 0x25
 8017392:	d1f9      	bne.n	8017388 <_svfiprintf_r+0x50>
 8017394:	ebba 0b04 	subs.w	fp, sl, r4
 8017398:	d00b      	beq.n	80173b2 <_svfiprintf_r+0x7a>
 801739a:	465b      	mov	r3, fp
 801739c:	4622      	mov	r2, r4
 801739e:	4629      	mov	r1, r5
 80173a0:	4638      	mov	r0, r7
 80173a2:	f7ff ff6d 	bl	8017280 <__ssputs_r>
 80173a6:	3001      	adds	r0, #1
 80173a8:	f000 80aa 	beq.w	8017500 <_svfiprintf_r+0x1c8>
 80173ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80173ae:	445a      	add	r2, fp
 80173b0:	9209      	str	r2, [sp, #36]	; 0x24
 80173b2:	f89a 3000 	ldrb.w	r3, [sl]
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	f000 80a2 	beq.w	8017500 <_svfiprintf_r+0x1c8>
 80173bc:	2300      	movs	r3, #0
 80173be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80173c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80173c6:	f10a 0a01 	add.w	sl, sl, #1
 80173ca:	9304      	str	r3, [sp, #16]
 80173cc:	9307      	str	r3, [sp, #28]
 80173ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80173d2:	931a      	str	r3, [sp, #104]	; 0x68
 80173d4:	4654      	mov	r4, sl
 80173d6:	2205      	movs	r2, #5
 80173d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80173dc:	4851      	ldr	r0, [pc, #324]	; (8017524 <_svfiprintf_r+0x1ec>)
 80173de:	f7e8 ff0f 	bl	8000200 <memchr>
 80173e2:	9a04      	ldr	r2, [sp, #16]
 80173e4:	b9d8      	cbnz	r0, 801741e <_svfiprintf_r+0xe6>
 80173e6:	06d0      	lsls	r0, r2, #27
 80173e8:	bf44      	itt	mi
 80173ea:	2320      	movmi	r3, #32
 80173ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80173f0:	0711      	lsls	r1, r2, #28
 80173f2:	bf44      	itt	mi
 80173f4:	232b      	movmi	r3, #43	; 0x2b
 80173f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80173fa:	f89a 3000 	ldrb.w	r3, [sl]
 80173fe:	2b2a      	cmp	r3, #42	; 0x2a
 8017400:	d015      	beq.n	801742e <_svfiprintf_r+0xf6>
 8017402:	9a07      	ldr	r2, [sp, #28]
 8017404:	4654      	mov	r4, sl
 8017406:	2000      	movs	r0, #0
 8017408:	f04f 0c0a 	mov.w	ip, #10
 801740c:	4621      	mov	r1, r4
 801740e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017412:	3b30      	subs	r3, #48	; 0x30
 8017414:	2b09      	cmp	r3, #9
 8017416:	d94e      	bls.n	80174b6 <_svfiprintf_r+0x17e>
 8017418:	b1b0      	cbz	r0, 8017448 <_svfiprintf_r+0x110>
 801741a:	9207      	str	r2, [sp, #28]
 801741c:	e014      	b.n	8017448 <_svfiprintf_r+0x110>
 801741e:	eba0 0308 	sub.w	r3, r0, r8
 8017422:	fa09 f303 	lsl.w	r3, r9, r3
 8017426:	4313      	orrs	r3, r2
 8017428:	9304      	str	r3, [sp, #16]
 801742a:	46a2      	mov	sl, r4
 801742c:	e7d2      	b.n	80173d4 <_svfiprintf_r+0x9c>
 801742e:	9b03      	ldr	r3, [sp, #12]
 8017430:	1d19      	adds	r1, r3, #4
 8017432:	681b      	ldr	r3, [r3, #0]
 8017434:	9103      	str	r1, [sp, #12]
 8017436:	2b00      	cmp	r3, #0
 8017438:	bfbb      	ittet	lt
 801743a:	425b      	neglt	r3, r3
 801743c:	f042 0202 	orrlt.w	r2, r2, #2
 8017440:	9307      	strge	r3, [sp, #28]
 8017442:	9307      	strlt	r3, [sp, #28]
 8017444:	bfb8      	it	lt
 8017446:	9204      	strlt	r2, [sp, #16]
 8017448:	7823      	ldrb	r3, [r4, #0]
 801744a:	2b2e      	cmp	r3, #46	; 0x2e
 801744c:	d10c      	bne.n	8017468 <_svfiprintf_r+0x130>
 801744e:	7863      	ldrb	r3, [r4, #1]
 8017450:	2b2a      	cmp	r3, #42	; 0x2a
 8017452:	d135      	bne.n	80174c0 <_svfiprintf_r+0x188>
 8017454:	9b03      	ldr	r3, [sp, #12]
 8017456:	1d1a      	adds	r2, r3, #4
 8017458:	681b      	ldr	r3, [r3, #0]
 801745a:	9203      	str	r2, [sp, #12]
 801745c:	2b00      	cmp	r3, #0
 801745e:	bfb8      	it	lt
 8017460:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8017464:	3402      	adds	r4, #2
 8017466:	9305      	str	r3, [sp, #20]
 8017468:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8017534 <_svfiprintf_r+0x1fc>
 801746c:	7821      	ldrb	r1, [r4, #0]
 801746e:	2203      	movs	r2, #3
 8017470:	4650      	mov	r0, sl
 8017472:	f7e8 fec5 	bl	8000200 <memchr>
 8017476:	b140      	cbz	r0, 801748a <_svfiprintf_r+0x152>
 8017478:	2340      	movs	r3, #64	; 0x40
 801747a:	eba0 000a 	sub.w	r0, r0, sl
 801747e:	fa03 f000 	lsl.w	r0, r3, r0
 8017482:	9b04      	ldr	r3, [sp, #16]
 8017484:	4303      	orrs	r3, r0
 8017486:	3401      	adds	r4, #1
 8017488:	9304      	str	r3, [sp, #16]
 801748a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801748e:	4826      	ldr	r0, [pc, #152]	; (8017528 <_svfiprintf_r+0x1f0>)
 8017490:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017494:	2206      	movs	r2, #6
 8017496:	f7e8 feb3 	bl	8000200 <memchr>
 801749a:	2800      	cmp	r0, #0
 801749c:	d038      	beq.n	8017510 <_svfiprintf_r+0x1d8>
 801749e:	4b23      	ldr	r3, [pc, #140]	; (801752c <_svfiprintf_r+0x1f4>)
 80174a0:	bb1b      	cbnz	r3, 80174ea <_svfiprintf_r+0x1b2>
 80174a2:	9b03      	ldr	r3, [sp, #12]
 80174a4:	3307      	adds	r3, #7
 80174a6:	f023 0307 	bic.w	r3, r3, #7
 80174aa:	3308      	adds	r3, #8
 80174ac:	9303      	str	r3, [sp, #12]
 80174ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174b0:	4433      	add	r3, r6
 80174b2:	9309      	str	r3, [sp, #36]	; 0x24
 80174b4:	e767      	b.n	8017386 <_svfiprintf_r+0x4e>
 80174b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80174ba:	460c      	mov	r4, r1
 80174bc:	2001      	movs	r0, #1
 80174be:	e7a5      	b.n	801740c <_svfiprintf_r+0xd4>
 80174c0:	2300      	movs	r3, #0
 80174c2:	3401      	adds	r4, #1
 80174c4:	9305      	str	r3, [sp, #20]
 80174c6:	4619      	mov	r1, r3
 80174c8:	f04f 0c0a 	mov.w	ip, #10
 80174cc:	4620      	mov	r0, r4
 80174ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80174d2:	3a30      	subs	r2, #48	; 0x30
 80174d4:	2a09      	cmp	r2, #9
 80174d6:	d903      	bls.n	80174e0 <_svfiprintf_r+0x1a8>
 80174d8:	2b00      	cmp	r3, #0
 80174da:	d0c5      	beq.n	8017468 <_svfiprintf_r+0x130>
 80174dc:	9105      	str	r1, [sp, #20]
 80174de:	e7c3      	b.n	8017468 <_svfiprintf_r+0x130>
 80174e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80174e4:	4604      	mov	r4, r0
 80174e6:	2301      	movs	r3, #1
 80174e8:	e7f0      	b.n	80174cc <_svfiprintf_r+0x194>
 80174ea:	ab03      	add	r3, sp, #12
 80174ec:	9300      	str	r3, [sp, #0]
 80174ee:	462a      	mov	r2, r5
 80174f0:	4b0f      	ldr	r3, [pc, #60]	; (8017530 <_svfiprintf_r+0x1f8>)
 80174f2:	a904      	add	r1, sp, #16
 80174f4:	4638      	mov	r0, r7
 80174f6:	f3af 8000 	nop.w
 80174fa:	1c42      	adds	r2, r0, #1
 80174fc:	4606      	mov	r6, r0
 80174fe:	d1d6      	bne.n	80174ae <_svfiprintf_r+0x176>
 8017500:	89ab      	ldrh	r3, [r5, #12]
 8017502:	065b      	lsls	r3, r3, #25
 8017504:	f53f af2c 	bmi.w	8017360 <_svfiprintf_r+0x28>
 8017508:	9809      	ldr	r0, [sp, #36]	; 0x24
 801750a:	b01d      	add	sp, #116	; 0x74
 801750c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017510:	ab03      	add	r3, sp, #12
 8017512:	9300      	str	r3, [sp, #0]
 8017514:	462a      	mov	r2, r5
 8017516:	4b06      	ldr	r3, [pc, #24]	; (8017530 <_svfiprintf_r+0x1f8>)
 8017518:	a904      	add	r1, sp, #16
 801751a:	4638      	mov	r0, r7
 801751c:	f000 f9d4 	bl	80178c8 <_printf_i>
 8017520:	e7eb      	b.n	80174fa <_svfiprintf_r+0x1c2>
 8017522:	bf00      	nop
 8017524:	0801fab8 	.word	0x0801fab8
 8017528:	0801fac2 	.word	0x0801fac2
 801752c:	00000000 	.word	0x00000000
 8017530:	08017281 	.word	0x08017281
 8017534:	0801fabe 	.word	0x0801fabe

08017538 <__sfputc_r>:
 8017538:	6893      	ldr	r3, [r2, #8]
 801753a:	3b01      	subs	r3, #1
 801753c:	2b00      	cmp	r3, #0
 801753e:	b410      	push	{r4}
 8017540:	6093      	str	r3, [r2, #8]
 8017542:	da08      	bge.n	8017556 <__sfputc_r+0x1e>
 8017544:	6994      	ldr	r4, [r2, #24]
 8017546:	42a3      	cmp	r3, r4
 8017548:	db01      	blt.n	801754e <__sfputc_r+0x16>
 801754a:	290a      	cmp	r1, #10
 801754c:	d103      	bne.n	8017556 <__sfputc_r+0x1e>
 801754e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017552:	f7ff bacf 	b.w	8016af4 <__swbuf_r>
 8017556:	6813      	ldr	r3, [r2, #0]
 8017558:	1c58      	adds	r0, r3, #1
 801755a:	6010      	str	r0, [r2, #0]
 801755c:	7019      	strb	r1, [r3, #0]
 801755e:	4608      	mov	r0, r1
 8017560:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017564:	4770      	bx	lr

08017566 <__sfputs_r>:
 8017566:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017568:	4606      	mov	r6, r0
 801756a:	460f      	mov	r7, r1
 801756c:	4614      	mov	r4, r2
 801756e:	18d5      	adds	r5, r2, r3
 8017570:	42ac      	cmp	r4, r5
 8017572:	d101      	bne.n	8017578 <__sfputs_r+0x12>
 8017574:	2000      	movs	r0, #0
 8017576:	e007      	b.n	8017588 <__sfputs_r+0x22>
 8017578:	f814 1b01 	ldrb.w	r1, [r4], #1
 801757c:	463a      	mov	r2, r7
 801757e:	4630      	mov	r0, r6
 8017580:	f7ff ffda 	bl	8017538 <__sfputc_r>
 8017584:	1c43      	adds	r3, r0, #1
 8017586:	d1f3      	bne.n	8017570 <__sfputs_r+0xa>
 8017588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801758c <_vfiprintf_r>:
 801758c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017590:	460d      	mov	r5, r1
 8017592:	b09d      	sub	sp, #116	; 0x74
 8017594:	4614      	mov	r4, r2
 8017596:	4698      	mov	r8, r3
 8017598:	4606      	mov	r6, r0
 801759a:	b118      	cbz	r0, 80175a4 <_vfiprintf_r+0x18>
 801759c:	6983      	ldr	r3, [r0, #24]
 801759e:	b90b      	cbnz	r3, 80175a4 <_vfiprintf_r+0x18>
 80175a0:	f7ff fca6 	bl	8016ef0 <__sinit>
 80175a4:	4b89      	ldr	r3, [pc, #548]	; (80177cc <_vfiprintf_r+0x240>)
 80175a6:	429d      	cmp	r5, r3
 80175a8:	d11b      	bne.n	80175e2 <_vfiprintf_r+0x56>
 80175aa:	6875      	ldr	r5, [r6, #4]
 80175ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80175ae:	07d9      	lsls	r1, r3, #31
 80175b0:	d405      	bmi.n	80175be <_vfiprintf_r+0x32>
 80175b2:	89ab      	ldrh	r3, [r5, #12]
 80175b4:	059a      	lsls	r2, r3, #22
 80175b6:	d402      	bmi.n	80175be <_vfiprintf_r+0x32>
 80175b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80175ba:	f7ff fd49 	bl	8017050 <__retarget_lock_acquire_recursive>
 80175be:	89ab      	ldrh	r3, [r5, #12]
 80175c0:	071b      	lsls	r3, r3, #28
 80175c2:	d501      	bpl.n	80175c8 <_vfiprintf_r+0x3c>
 80175c4:	692b      	ldr	r3, [r5, #16]
 80175c6:	b9eb      	cbnz	r3, 8017604 <_vfiprintf_r+0x78>
 80175c8:	4629      	mov	r1, r5
 80175ca:	4630      	mov	r0, r6
 80175cc:	f7ff fae4 	bl	8016b98 <__swsetup_r>
 80175d0:	b1c0      	cbz	r0, 8017604 <_vfiprintf_r+0x78>
 80175d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80175d4:	07dc      	lsls	r4, r3, #31
 80175d6:	d50e      	bpl.n	80175f6 <_vfiprintf_r+0x6a>
 80175d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80175dc:	b01d      	add	sp, #116	; 0x74
 80175de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175e2:	4b7b      	ldr	r3, [pc, #492]	; (80177d0 <_vfiprintf_r+0x244>)
 80175e4:	429d      	cmp	r5, r3
 80175e6:	d101      	bne.n	80175ec <_vfiprintf_r+0x60>
 80175e8:	68b5      	ldr	r5, [r6, #8]
 80175ea:	e7df      	b.n	80175ac <_vfiprintf_r+0x20>
 80175ec:	4b79      	ldr	r3, [pc, #484]	; (80177d4 <_vfiprintf_r+0x248>)
 80175ee:	429d      	cmp	r5, r3
 80175f0:	bf08      	it	eq
 80175f2:	68f5      	ldreq	r5, [r6, #12]
 80175f4:	e7da      	b.n	80175ac <_vfiprintf_r+0x20>
 80175f6:	89ab      	ldrh	r3, [r5, #12]
 80175f8:	0598      	lsls	r0, r3, #22
 80175fa:	d4ed      	bmi.n	80175d8 <_vfiprintf_r+0x4c>
 80175fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80175fe:	f7ff fd28 	bl	8017052 <__retarget_lock_release_recursive>
 8017602:	e7e9      	b.n	80175d8 <_vfiprintf_r+0x4c>
 8017604:	2300      	movs	r3, #0
 8017606:	9309      	str	r3, [sp, #36]	; 0x24
 8017608:	2320      	movs	r3, #32
 801760a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801760e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017612:	2330      	movs	r3, #48	; 0x30
 8017614:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80177d8 <_vfiprintf_r+0x24c>
 8017618:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801761c:	f04f 0901 	mov.w	r9, #1
 8017620:	4623      	mov	r3, r4
 8017622:	469a      	mov	sl, r3
 8017624:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017628:	b10a      	cbz	r2, 801762e <_vfiprintf_r+0xa2>
 801762a:	2a25      	cmp	r2, #37	; 0x25
 801762c:	d1f9      	bne.n	8017622 <_vfiprintf_r+0x96>
 801762e:	ebba 0b04 	subs.w	fp, sl, r4
 8017632:	d00b      	beq.n	801764c <_vfiprintf_r+0xc0>
 8017634:	465b      	mov	r3, fp
 8017636:	4622      	mov	r2, r4
 8017638:	4629      	mov	r1, r5
 801763a:	4630      	mov	r0, r6
 801763c:	f7ff ff93 	bl	8017566 <__sfputs_r>
 8017640:	3001      	adds	r0, #1
 8017642:	f000 80aa 	beq.w	801779a <_vfiprintf_r+0x20e>
 8017646:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017648:	445a      	add	r2, fp
 801764a:	9209      	str	r2, [sp, #36]	; 0x24
 801764c:	f89a 3000 	ldrb.w	r3, [sl]
 8017650:	2b00      	cmp	r3, #0
 8017652:	f000 80a2 	beq.w	801779a <_vfiprintf_r+0x20e>
 8017656:	2300      	movs	r3, #0
 8017658:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801765c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017660:	f10a 0a01 	add.w	sl, sl, #1
 8017664:	9304      	str	r3, [sp, #16]
 8017666:	9307      	str	r3, [sp, #28]
 8017668:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801766c:	931a      	str	r3, [sp, #104]	; 0x68
 801766e:	4654      	mov	r4, sl
 8017670:	2205      	movs	r2, #5
 8017672:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017676:	4858      	ldr	r0, [pc, #352]	; (80177d8 <_vfiprintf_r+0x24c>)
 8017678:	f7e8 fdc2 	bl	8000200 <memchr>
 801767c:	9a04      	ldr	r2, [sp, #16]
 801767e:	b9d8      	cbnz	r0, 80176b8 <_vfiprintf_r+0x12c>
 8017680:	06d1      	lsls	r1, r2, #27
 8017682:	bf44      	itt	mi
 8017684:	2320      	movmi	r3, #32
 8017686:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801768a:	0713      	lsls	r3, r2, #28
 801768c:	bf44      	itt	mi
 801768e:	232b      	movmi	r3, #43	; 0x2b
 8017690:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017694:	f89a 3000 	ldrb.w	r3, [sl]
 8017698:	2b2a      	cmp	r3, #42	; 0x2a
 801769a:	d015      	beq.n	80176c8 <_vfiprintf_r+0x13c>
 801769c:	9a07      	ldr	r2, [sp, #28]
 801769e:	4654      	mov	r4, sl
 80176a0:	2000      	movs	r0, #0
 80176a2:	f04f 0c0a 	mov.w	ip, #10
 80176a6:	4621      	mov	r1, r4
 80176a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80176ac:	3b30      	subs	r3, #48	; 0x30
 80176ae:	2b09      	cmp	r3, #9
 80176b0:	d94e      	bls.n	8017750 <_vfiprintf_r+0x1c4>
 80176b2:	b1b0      	cbz	r0, 80176e2 <_vfiprintf_r+0x156>
 80176b4:	9207      	str	r2, [sp, #28]
 80176b6:	e014      	b.n	80176e2 <_vfiprintf_r+0x156>
 80176b8:	eba0 0308 	sub.w	r3, r0, r8
 80176bc:	fa09 f303 	lsl.w	r3, r9, r3
 80176c0:	4313      	orrs	r3, r2
 80176c2:	9304      	str	r3, [sp, #16]
 80176c4:	46a2      	mov	sl, r4
 80176c6:	e7d2      	b.n	801766e <_vfiprintf_r+0xe2>
 80176c8:	9b03      	ldr	r3, [sp, #12]
 80176ca:	1d19      	adds	r1, r3, #4
 80176cc:	681b      	ldr	r3, [r3, #0]
 80176ce:	9103      	str	r1, [sp, #12]
 80176d0:	2b00      	cmp	r3, #0
 80176d2:	bfbb      	ittet	lt
 80176d4:	425b      	neglt	r3, r3
 80176d6:	f042 0202 	orrlt.w	r2, r2, #2
 80176da:	9307      	strge	r3, [sp, #28]
 80176dc:	9307      	strlt	r3, [sp, #28]
 80176de:	bfb8      	it	lt
 80176e0:	9204      	strlt	r2, [sp, #16]
 80176e2:	7823      	ldrb	r3, [r4, #0]
 80176e4:	2b2e      	cmp	r3, #46	; 0x2e
 80176e6:	d10c      	bne.n	8017702 <_vfiprintf_r+0x176>
 80176e8:	7863      	ldrb	r3, [r4, #1]
 80176ea:	2b2a      	cmp	r3, #42	; 0x2a
 80176ec:	d135      	bne.n	801775a <_vfiprintf_r+0x1ce>
 80176ee:	9b03      	ldr	r3, [sp, #12]
 80176f0:	1d1a      	adds	r2, r3, #4
 80176f2:	681b      	ldr	r3, [r3, #0]
 80176f4:	9203      	str	r2, [sp, #12]
 80176f6:	2b00      	cmp	r3, #0
 80176f8:	bfb8      	it	lt
 80176fa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80176fe:	3402      	adds	r4, #2
 8017700:	9305      	str	r3, [sp, #20]
 8017702:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80177e8 <_vfiprintf_r+0x25c>
 8017706:	7821      	ldrb	r1, [r4, #0]
 8017708:	2203      	movs	r2, #3
 801770a:	4650      	mov	r0, sl
 801770c:	f7e8 fd78 	bl	8000200 <memchr>
 8017710:	b140      	cbz	r0, 8017724 <_vfiprintf_r+0x198>
 8017712:	2340      	movs	r3, #64	; 0x40
 8017714:	eba0 000a 	sub.w	r0, r0, sl
 8017718:	fa03 f000 	lsl.w	r0, r3, r0
 801771c:	9b04      	ldr	r3, [sp, #16]
 801771e:	4303      	orrs	r3, r0
 8017720:	3401      	adds	r4, #1
 8017722:	9304      	str	r3, [sp, #16]
 8017724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017728:	482c      	ldr	r0, [pc, #176]	; (80177dc <_vfiprintf_r+0x250>)
 801772a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801772e:	2206      	movs	r2, #6
 8017730:	f7e8 fd66 	bl	8000200 <memchr>
 8017734:	2800      	cmp	r0, #0
 8017736:	d03f      	beq.n	80177b8 <_vfiprintf_r+0x22c>
 8017738:	4b29      	ldr	r3, [pc, #164]	; (80177e0 <_vfiprintf_r+0x254>)
 801773a:	bb1b      	cbnz	r3, 8017784 <_vfiprintf_r+0x1f8>
 801773c:	9b03      	ldr	r3, [sp, #12]
 801773e:	3307      	adds	r3, #7
 8017740:	f023 0307 	bic.w	r3, r3, #7
 8017744:	3308      	adds	r3, #8
 8017746:	9303      	str	r3, [sp, #12]
 8017748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801774a:	443b      	add	r3, r7
 801774c:	9309      	str	r3, [sp, #36]	; 0x24
 801774e:	e767      	b.n	8017620 <_vfiprintf_r+0x94>
 8017750:	fb0c 3202 	mla	r2, ip, r2, r3
 8017754:	460c      	mov	r4, r1
 8017756:	2001      	movs	r0, #1
 8017758:	e7a5      	b.n	80176a6 <_vfiprintf_r+0x11a>
 801775a:	2300      	movs	r3, #0
 801775c:	3401      	adds	r4, #1
 801775e:	9305      	str	r3, [sp, #20]
 8017760:	4619      	mov	r1, r3
 8017762:	f04f 0c0a 	mov.w	ip, #10
 8017766:	4620      	mov	r0, r4
 8017768:	f810 2b01 	ldrb.w	r2, [r0], #1
 801776c:	3a30      	subs	r2, #48	; 0x30
 801776e:	2a09      	cmp	r2, #9
 8017770:	d903      	bls.n	801777a <_vfiprintf_r+0x1ee>
 8017772:	2b00      	cmp	r3, #0
 8017774:	d0c5      	beq.n	8017702 <_vfiprintf_r+0x176>
 8017776:	9105      	str	r1, [sp, #20]
 8017778:	e7c3      	b.n	8017702 <_vfiprintf_r+0x176>
 801777a:	fb0c 2101 	mla	r1, ip, r1, r2
 801777e:	4604      	mov	r4, r0
 8017780:	2301      	movs	r3, #1
 8017782:	e7f0      	b.n	8017766 <_vfiprintf_r+0x1da>
 8017784:	ab03      	add	r3, sp, #12
 8017786:	9300      	str	r3, [sp, #0]
 8017788:	462a      	mov	r2, r5
 801778a:	4b16      	ldr	r3, [pc, #88]	; (80177e4 <_vfiprintf_r+0x258>)
 801778c:	a904      	add	r1, sp, #16
 801778e:	4630      	mov	r0, r6
 8017790:	f3af 8000 	nop.w
 8017794:	4607      	mov	r7, r0
 8017796:	1c78      	adds	r0, r7, #1
 8017798:	d1d6      	bne.n	8017748 <_vfiprintf_r+0x1bc>
 801779a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801779c:	07d9      	lsls	r1, r3, #31
 801779e:	d405      	bmi.n	80177ac <_vfiprintf_r+0x220>
 80177a0:	89ab      	ldrh	r3, [r5, #12]
 80177a2:	059a      	lsls	r2, r3, #22
 80177a4:	d402      	bmi.n	80177ac <_vfiprintf_r+0x220>
 80177a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80177a8:	f7ff fc53 	bl	8017052 <__retarget_lock_release_recursive>
 80177ac:	89ab      	ldrh	r3, [r5, #12]
 80177ae:	065b      	lsls	r3, r3, #25
 80177b0:	f53f af12 	bmi.w	80175d8 <_vfiprintf_r+0x4c>
 80177b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80177b6:	e711      	b.n	80175dc <_vfiprintf_r+0x50>
 80177b8:	ab03      	add	r3, sp, #12
 80177ba:	9300      	str	r3, [sp, #0]
 80177bc:	462a      	mov	r2, r5
 80177be:	4b09      	ldr	r3, [pc, #36]	; (80177e4 <_vfiprintf_r+0x258>)
 80177c0:	a904      	add	r1, sp, #16
 80177c2:	4630      	mov	r0, r6
 80177c4:	f000 f880 	bl	80178c8 <_printf_i>
 80177c8:	e7e4      	b.n	8017794 <_vfiprintf_r+0x208>
 80177ca:	bf00      	nop
 80177cc:	0801fa78 	.word	0x0801fa78
 80177d0:	0801fa98 	.word	0x0801fa98
 80177d4:	0801fa58 	.word	0x0801fa58
 80177d8:	0801fab8 	.word	0x0801fab8
 80177dc:	0801fac2 	.word	0x0801fac2
 80177e0:	00000000 	.word	0x00000000
 80177e4:	08017567 	.word	0x08017567
 80177e8:	0801fabe 	.word	0x0801fabe

080177ec <_printf_common>:
 80177ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80177f0:	4616      	mov	r6, r2
 80177f2:	4699      	mov	r9, r3
 80177f4:	688a      	ldr	r2, [r1, #8]
 80177f6:	690b      	ldr	r3, [r1, #16]
 80177f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80177fc:	4293      	cmp	r3, r2
 80177fe:	bfb8      	it	lt
 8017800:	4613      	movlt	r3, r2
 8017802:	6033      	str	r3, [r6, #0]
 8017804:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017808:	4607      	mov	r7, r0
 801780a:	460c      	mov	r4, r1
 801780c:	b10a      	cbz	r2, 8017812 <_printf_common+0x26>
 801780e:	3301      	adds	r3, #1
 8017810:	6033      	str	r3, [r6, #0]
 8017812:	6823      	ldr	r3, [r4, #0]
 8017814:	0699      	lsls	r1, r3, #26
 8017816:	bf42      	ittt	mi
 8017818:	6833      	ldrmi	r3, [r6, #0]
 801781a:	3302      	addmi	r3, #2
 801781c:	6033      	strmi	r3, [r6, #0]
 801781e:	6825      	ldr	r5, [r4, #0]
 8017820:	f015 0506 	ands.w	r5, r5, #6
 8017824:	d106      	bne.n	8017834 <_printf_common+0x48>
 8017826:	f104 0a19 	add.w	sl, r4, #25
 801782a:	68e3      	ldr	r3, [r4, #12]
 801782c:	6832      	ldr	r2, [r6, #0]
 801782e:	1a9b      	subs	r3, r3, r2
 8017830:	42ab      	cmp	r3, r5
 8017832:	dc26      	bgt.n	8017882 <_printf_common+0x96>
 8017834:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017838:	1e13      	subs	r3, r2, #0
 801783a:	6822      	ldr	r2, [r4, #0]
 801783c:	bf18      	it	ne
 801783e:	2301      	movne	r3, #1
 8017840:	0692      	lsls	r2, r2, #26
 8017842:	d42b      	bmi.n	801789c <_printf_common+0xb0>
 8017844:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017848:	4649      	mov	r1, r9
 801784a:	4638      	mov	r0, r7
 801784c:	47c0      	blx	r8
 801784e:	3001      	adds	r0, #1
 8017850:	d01e      	beq.n	8017890 <_printf_common+0xa4>
 8017852:	6823      	ldr	r3, [r4, #0]
 8017854:	68e5      	ldr	r5, [r4, #12]
 8017856:	6832      	ldr	r2, [r6, #0]
 8017858:	f003 0306 	and.w	r3, r3, #6
 801785c:	2b04      	cmp	r3, #4
 801785e:	bf08      	it	eq
 8017860:	1aad      	subeq	r5, r5, r2
 8017862:	68a3      	ldr	r3, [r4, #8]
 8017864:	6922      	ldr	r2, [r4, #16]
 8017866:	bf0c      	ite	eq
 8017868:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801786c:	2500      	movne	r5, #0
 801786e:	4293      	cmp	r3, r2
 8017870:	bfc4      	itt	gt
 8017872:	1a9b      	subgt	r3, r3, r2
 8017874:	18ed      	addgt	r5, r5, r3
 8017876:	2600      	movs	r6, #0
 8017878:	341a      	adds	r4, #26
 801787a:	42b5      	cmp	r5, r6
 801787c:	d11a      	bne.n	80178b4 <_printf_common+0xc8>
 801787e:	2000      	movs	r0, #0
 8017880:	e008      	b.n	8017894 <_printf_common+0xa8>
 8017882:	2301      	movs	r3, #1
 8017884:	4652      	mov	r2, sl
 8017886:	4649      	mov	r1, r9
 8017888:	4638      	mov	r0, r7
 801788a:	47c0      	blx	r8
 801788c:	3001      	adds	r0, #1
 801788e:	d103      	bne.n	8017898 <_printf_common+0xac>
 8017890:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017898:	3501      	adds	r5, #1
 801789a:	e7c6      	b.n	801782a <_printf_common+0x3e>
 801789c:	18e1      	adds	r1, r4, r3
 801789e:	1c5a      	adds	r2, r3, #1
 80178a0:	2030      	movs	r0, #48	; 0x30
 80178a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80178a6:	4422      	add	r2, r4
 80178a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80178ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80178b0:	3302      	adds	r3, #2
 80178b2:	e7c7      	b.n	8017844 <_printf_common+0x58>
 80178b4:	2301      	movs	r3, #1
 80178b6:	4622      	mov	r2, r4
 80178b8:	4649      	mov	r1, r9
 80178ba:	4638      	mov	r0, r7
 80178bc:	47c0      	blx	r8
 80178be:	3001      	adds	r0, #1
 80178c0:	d0e6      	beq.n	8017890 <_printf_common+0xa4>
 80178c2:	3601      	adds	r6, #1
 80178c4:	e7d9      	b.n	801787a <_printf_common+0x8e>
	...

080178c8 <_printf_i>:
 80178c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80178cc:	460c      	mov	r4, r1
 80178ce:	4691      	mov	r9, r2
 80178d0:	7e27      	ldrb	r7, [r4, #24]
 80178d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80178d4:	2f78      	cmp	r7, #120	; 0x78
 80178d6:	4680      	mov	r8, r0
 80178d8:	469a      	mov	sl, r3
 80178da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80178de:	d807      	bhi.n	80178f0 <_printf_i+0x28>
 80178e0:	2f62      	cmp	r7, #98	; 0x62
 80178e2:	d80a      	bhi.n	80178fa <_printf_i+0x32>
 80178e4:	2f00      	cmp	r7, #0
 80178e6:	f000 80d8 	beq.w	8017a9a <_printf_i+0x1d2>
 80178ea:	2f58      	cmp	r7, #88	; 0x58
 80178ec:	f000 80a3 	beq.w	8017a36 <_printf_i+0x16e>
 80178f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80178f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80178f8:	e03a      	b.n	8017970 <_printf_i+0xa8>
 80178fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80178fe:	2b15      	cmp	r3, #21
 8017900:	d8f6      	bhi.n	80178f0 <_printf_i+0x28>
 8017902:	a001      	add	r0, pc, #4	; (adr r0, 8017908 <_printf_i+0x40>)
 8017904:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8017908:	08017961 	.word	0x08017961
 801790c:	08017975 	.word	0x08017975
 8017910:	080178f1 	.word	0x080178f1
 8017914:	080178f1 	.word	0x080178f1
 8017918:	080178f1 	.word	0x080178f1
 801791c:	080178f1 	.word	0x080178f1
 8017920:	08017975 	.word	0x08017975
 8017924:	080178f1 	.word	0x080178f1
 8017928:	080178f1 	.word	0x080178f1
 801792c:	080178f1 	.word	0x080178f1
 8017930:	080178f1 	.word	0x080178f1
 8017934:	08017a81 	.word	0x08017a81
 8017938:	080179a5 	.word	0x080179a5
 801793c:	08017a63 	.word	0x08017a63
 8017940:	080178f1 	.word	0x080178f1
 8017944:	080178f1 	.word	0x080178f1
 8017948:	08017aa3 	.word	0x08017aa3
 801794c:	080178f1 	.word	0x080178f1
 8017950:	080179a5 	.word	0x080179a5
 8017954:	080178f1 	.word	0x080178f1
 8017958:	080178f1 	.word	0x080178f1
 801795c:	08017a6b 	.word	0x08017a6b
 8017960:	680b      	ldr	r3, [r1, #0]
 8017962:	1d1a      	adds	r2, r3, #4
 8017964:	681b      	ldr	r3, [r3, #0]
 8017966:	600a      	str	r2, [r1, #0]
 8017968:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801796c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017970:	2301      	movs	r3, #1
 8017972:	e0a3      	b.n	8017abc <_printf_i+0x1f4>
 8017974:	6825      	ldr	r5, [r4, #0]
 8017976:	6808      	ldr	r0, [r1, #0]
 8017978:	062e      	lsls	r6, r5, #24
 801797a:	f100 0304 	add.w	r3, r0, #4
 801797e:	d50a      	bpl.n	8017996 <_printf_i+0xce>
 8017980:	6805      	ldr	r5, [r0, #0]
 8017982:	600b      	str	r3, [r1, #0]
 8017984:	2d00      	cmp	r5, #0
 8017986:	da03      	bge.n	8017990 <_printf_i+0xc8>
 8017988:	232d      	movs	r3, #45	; 0x2d
 801798a:	426d      	negs	r5, r5
 801798c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017990:	485e      	ldr	r0, [pc, #376]	; (8017b0c <_printf_i+0x244>)
 8017992:	230a      	movs	r3, #10
 8017994:	e019      	b.n	80179ca <_printf_i+0x102>
 8017996:	f015 0f40 	tst.w	r5, #64	; 0x40
 801799a:	6805      	ldr	r5, [r0, #0]
 801799c:	600b      	str	r3, [r1, #0]
 801799e:	bf18      	it	ne
 80179a0:	b22d      	sxthne	r5, r5
 80179a2:	e7ef      	b.n	8017984 <_printf_i+0xbc>
 80179a4:	680b      	ldr	r3, [r1, #0]
 80179a6:	6825      	ldr	r5, [r4, #0]
 80179a8:	1d18      	adds	r0, r3, #4
 80179aa:	6008      	str	r0, [r1, #0]
 80179ac:	0628      	lsls	r0, r5, #24
 80179ae:	d501      	bpl.n	80179b4 <_printf_i+0xec>
 80179b0:	681d      	ldr	r5, [r3, #0]
 80179b2:	e002      	b.n	80179ba <_printf_i+0xf2>
 80179b4:	0669      	lsls	r1, r5, #25
 80179b6:	d5fb      	bpl.n	80179b0 <_printf_i+0xe8>
 80179b8:	881d      	ldrh	r5, [r3, #0]
 80179ba:	4854      	ldr	r0, [pc, #336]	; (8017b0c <_printf_i+0x244>)
 80179bc:	2f6f      	cmp	r7, #111	; 0x6f
 80179be:	bf0c      	ite	eq
 80179c0:	2308      	moveq	r3, #8
 80179c2:	230a      	movne	r3, #10
 80179c4:	2100      	movs	r1, #0
 80179c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80179ca:	6866      	ldr	r6, [r4, #4]
 80179cc:	60a6      	str	r6, [r4, #8]
 80179ce:	2e00      	cmp	r6, #0
 80179d0:	bfa2      	ittt	ge
 80179d2:	6821      	ldrge	r1, [r4, #0]
 80179d4:	f021 0104 	bicge.w	r1, r1, #4
 80179d8:	6021      	strge	r1, [r4, #0]
 80179da:	b90d      	cbnz	r5, 80179e0 <_printf_i+0x118>
 80179dc:	2e00      	cmp	r6, #0
 80179de:	d04d      	beq.n	8017a7c <_printf_i+0x1b4>
 80179e0:	4616      	mov	r6, r2
 80179e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80179e6:	fb03 5711 	mls	r7, r3, r1, r5
 80179ea:	5dc7      	ldrb	r7, [r0, r7]
 80179ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80179f0:	462f      	mov	r7, r5
 80179f2:	42bb      	cmp	r3, r7
 80179f4:	460d      	mov	r5, r1
 80179f6:	d9f4      	bls.n	80179e2 <_printf_i+0x11a>
 80179f8:	2b08      	cmp	r3, #8
 80179fa:	d10b      	bne.n	8017a14 <_printf_i+0x14c>
 80179fc:	6823      	ldr	r3, [r4, #0]
 80179fe:	07df      	lsls	r7, r3, #31
 8017a00:	d508      	bpl.n	8017a14 <_printf_i+0x14c>
 8017a02:	6923      	ldr	r3, [r4, #16]
 8017a04:	6861      	ldr	r1, [r4, #4]
 8017a06:	4299      	cmp	r1, r3
 8017a08:	bfde      	ittt	le
 8017a0a:	2330      	movle	r3, #48	; 0x30
 8017a0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017a10:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8017a14:	1b92      	subs	r2, r2, r6
 8017a16:	6122      	str	r2, [r4, #16]
 8017a18:	f8cd a000 	str.w	sl, [sp]
 8017a1c:	464b      	mov	r3, r9
 8017a1e:	aa03      	add	r2, sp, #12
 8017a20:	4621      	mov	r1, r4
 8017a22:	4640      	mov	r0, r8
 8017a24:	f7ff fee2 	bl	80177ec <_printf_common>
 8017a28:	3001      	adds	r0, #1
 8017a2a:	d14c      	bne.n	8017ac6 <_printf_i+0x1fe>
 8017a2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017a30:	b004      	add	sp, #16
 8017a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a36:	4835      	ldr	r0, [pc, #212]	; (8017b0c <_printf_i+0x244>)
 8017a38:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017a3c:	6823      	ldr	r3, [r4, #0]
 8017a3e:	680e      	ldr	r6, [r1, #0]
 8017a40:	061f      	lsls	r7, r3, #24
 8017a42:	f856 5b04 	ldr.w	r5, [r6], #4
 8017a46:	600e      	str	r6, [r1, #0]
 8017a48:	d514      	bpl.n	8017a74 <_printf_i+0x1ac>
 8017a4a:	07d9      	lsls	r1, r3, #31
 8017a4c:	bf44      	itt	mi
 8017a4e:	f043 0320 	orrmi.w	r3, r3, #32
 8017a52:	6023      	strmi	r3, [r4, #0]
 8017a54:	b91d      	cbnz	r5, 8017a5e <_printf_i+0x196>
 8017a56:	6823      	ldr	r3, [r4, #0]
 8017a58:	f023 0320 	bic.w	r3, r3, #32
 8017a5c:	6023      	str	r3, [r4, #0]
 8017a5e:	2310      	movs	r3, #16
 8017a60:	e7b0      	b.n	80179c4 <_printf_i+0xfc>
 8017a62:	6823      	ldr	r3, [r4, #0]
 8017a64:	f043 0320 	orr.w	r3, r3, #32
 8017a68:	6023      	str	r3, [r4, #0]
 8017a6a:	2378      	movs	r3, #120	; 0x78
 8017a6c:	4828      	ldr	r0, [pc, #160]	; (8017b10 <_printf_i+0x248>)
 8017a6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017a72:	e7e3      	b.n	8017a3c <_printf_i+0x174>
 8017a74:	065e      	lsls	r6, r3, #25
 8017a76:	bf48      	it	mi
 8017a78:	b2ad      	uxthmi	r5, r5
 8017a7a:	e7e6      	b.n	8017a4a <_printf_i+0x182>
 8017a7c:	4616      	mov	r6, r2
 8017a7e:	e7bb      	b.n	80179f8 <_printf_i+0x130>
 8017a80:	680b      	ldr	r3, [r1, #0]
 8017a82:	6826      	ldr	r6, [r4, #0]
 8017a84:	6960      	ldr	r0, [r4, #20]
 8017a86:	1d1d      	adds	r5, r3, #4
 8017a88:	600d      	str	r5, [r1, #0]
 8017a8a:	0635      	lsls	r5, r6, #24
 8017a8c:	681b      	ldr	r3, [r3, #0]
 8017a8e:	d501      	bpl.n	8017a94 <_printf_i+0x1cc>
 8017a90:	6018      	str	r0, [r3, #0]
 8017a92:	e002      	b.n	8017a9a <_printf_i+0x1d2>
 8017a94:	0671      	lsls	r1, r6, #25
 8017a96:	d5fb      	bpl.n	8017a90 <_printf_i+0x1c8>
 8017a98:	8018      	strh	r0, [r3, #0]
 8017a9a:	2300      	movs	r3, #0
 8017a9c:	6123      	str	r3, [r4, #16]
 8017a9e:	4616      	mov	r6, r2
 8017aa0:	e7ba      	b.n	8017a18 <_printf_i+0x150>
 8017aa2:	680b      	ldr	r3, [r1, #0]
 8017aa4:	1d1a      	adds	r2, r3, #4
 8017aa6:	600a      	str	r2, [r1, #0]
 8017aa8:	681e      	ldr	r6, [r3, #0]
 8017aaa:	6862      	ldr	r2, [r4, #4]
 8017aac:	2100      	movs	r1, #0
 8017aae:	4630      	mov	r0, r6
 8017ab0:	f7e8 fba6 	bl	8000200 <memchr>
 8017ab4:	b108      	cbz	r0, 8017aba <_printf_i+0x1f2>
 8017ab6:	1b80      	subs	r0, r0, r6
 8017ab8:	6060      	str	r0, [r4, #4]
 8017aba:	6863      	ldr	r3, [r4, #4]
 8017abc:	6123      	str	r3, [r4, #16]
 8017abe:	2300      	movs	r3, #0
 8017ac0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017ac4:	e7a8      	b.n	8017a18 <_printf_i+0x150>
 8017ac6:	6923      	ldr	r3, [r4, #16]
 8017ac8:	4632      	mov	r2, r6
 8017aca:	4649      	mov	r1, r9
 8017acc:	4640      	mov	r0, r8
 8017ace:	47d0      	blx	sl
 8017ad0:	3001      	adds	r0, #1
 8017ad2:	d0ab      	beq.n	8017a2c <_printf_i+0x164>
 8017ad4:	6823      	ldr	r3, [r4, #0]
 8017ad6:	079b      	lsls	r3, r3, #30
 8017ad8:	d413      	bmi.n	8017b02 <_printf_i+0x23a>
 8017ada:	68e0      	ldr	r0, [r4, #12]
 8017adc:	9b03      	ldr	r3, [sp, #12]
 8017ade:	4298      	cmp	r0, r3
 8017ae0:	bfb8      	it	lt
 8017ae2:	4618      	movlt	r0, r3
 8017ae4:	e7a4      	b.n	8017a30 <_printf_i+0x168>
 8017ae6:	2301      	movs	r3, #1
 8017ae8:	4632      	mov	r2, r6
 8017aea:	4649      	mov	r1, r9
 8017aec:	4640      	mov	r0, r8
 8017aee:	47d0      	blx	sl
 8017af0:	3001      	adds	r0, #1
 8017af2:	d09b      	beq.n	8017a2c <_printf_i+0x164>
 8017af4:	3501      	adds	r5, #1
 8017af6:	68e3      	ldr	r3, [r4, #12]
 8017af8:	9903      	ldr	r1, [sp, #12]
 8017afa:	1a5b      	subs	r3, r3, r1
 8017afc:	42ab      	cmp	r3, r5
 8017afe:	dcf2      	bgt.n	8017ae6 <_printf_i+0x21e>
 8017b00:	e7eb      	b.n	8017ada <_printf_i+0x212>
 8017b02:	2500      	movs	r5, #0
 8017b04:	f104 0619 	add.w	r6, r4, #25
 8017b08:	e7f5      	b.n	8017af6 <_printf_i+0x22e>
 8017b0a:	bf00      	nop
 8017b0c:	0801fac9 	.word	0x0801fac9
 8017b10:	0801fada 	.word	0x0801fada

08017b14 <_sbrk_r>:
 8017b14:	b538      	push	{r3, r4, r5, lr}
 8017b16:	4d06      	ldr	r5, [pc, #24]	; (8017b30 <_sbrk_r+0x1c>)
 8017b18:	2300      	movs	r3, #0
 8017b1a:	4604      	mov	r4, r0
 8017b1c:	4608      	mov	r0, r1
 8017b1e:	602b      	str	r3, [r5, #0]
 8017b20:	f7e9 fe1e 	bl	8001760 <_sbrk>
 8017b24:	1c43      	adds	r3, r0, #1
 8017b26:	d102      	bne.n	8017b2e <_sbrk_r+0x1a>
 8017b28:	682b      	ldr	r3, [r5, #0]
 8017b2a:	b103      	cbz	r3, 8017b2e <_sbrk_r+0x1a>
 8017b2c:	6023      	str	r3, [r4, #0]
 8017b2e:	bd38      	pop	{r3, r4, r5, pc}
 8017b30:	20017a14 	.word	0x20017a14

08017b34 <__sread>:
 8017b34:	b510      	push	{r4, lr}
 8017b36:	460c      	mov	r4, r1
 8017b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b3c:	f000 f8ce 	bl	8017cdc <_read_r>
 8017b40:	2800      	cmp	r0, #0
 8017b42:	bfab      	itete	ge
 8017b44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017b46:	89a3      	ldrhlt	r3, [r4, #12]
 8017b48:	181b      	addge	r3, r3, r0
 8017b4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017b4e:	bfac      	ite	ge
 8017b50:	6563      	strge	r3, [r4, #84]	; 0x54
 8017b52:	81a3      	strhlt	r3, [r4, #12]
 8017b54:	bd10      	pop	{r4, pc}

08017b56 <__swrite>:
 8017b56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b5a:	461f      	mov	r7, r3
 8017b5c:	898b      	ldrh	r3, [r1, #12]
 8017b5e:	05db      	lsls	r3, r3, #23
 8017b60:	4605      	mov	r5, r0
 8017b62:	460c      	mov	r4, r1
 8017b64:	4616      	mov	r6, r2
 8017b66:	d505      	bpl.n	8017b74 <__swrite+0x1e>
 8017b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b6c:	2302      	movs	r3, #2
 8017b6e:	2200      	movs	r2, #0
 8017b70:	f000 f870 	bl	8017c54 <_lseek_r>
 8017b74:	89a3      	ldrh	r3, [r4, #12]
 8017b76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017b7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017b7e:	81a3      	strh	r3, [r4, #12]
 8017b80:	4632      	mov	r2, r6
 8017b82:	463b      	mov	r3, r7
 8017b84:	4628      	mov	r0, r5
 8017b86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017b8a:	f000 b817 	b.w	8017bbc <_write_r>

08017b8e <__sseek>:
 8017b8e:	b510      	push	{r4, lr}
 8017b90:	460c      	mov	r4, r1
 8017b92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b96:	f000 f85d 	bl	8017c54 <_lseek_r>
 8017b9a:	1c43      	adds	r3, r0, #1
 8017b9c:	89a3      	ldrh	r3, [r4, #12]
 8017b9e:	bf15      	itete	ne
 8017ba0:	6560      	strne	r0, [r4, #84]	; 0x54
 8017ba2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017ba6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017baa:	81a3      	strheq	r3, [r4, #12]
 8017bac:	bf18      	it	ne
 8017bae:	81a3      	strhne	r3, [r4, #12]
 8017bb0:	bd10      	pop	{r4, pc}

08017bb2 <__sclose>:
 8017bb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017bb6:	f000 b81b 	b.w	8017bf0 <_close_r>
	...

08017bbc <_write_r>:
 8017bbc:	b538      	push	{r3, r4, r5, lr}
 8017bbe:	4d07      	ldr	r5, [pc, #28]	; (8017bdc <_write_r+0x20>)
 8017bc0:	4604      	mov	r4, r0
 8017bc2:	4608      	mov	r0, r1
 8017bc4:	4611      	mov	r1, r2
 8017bc6:	2200      	movs	r2, #0
 8017bc8:	602a      	str	r2, [r5, #0]
 8017bca:	461a      	mov	r2, r3
 8017bcc:	f7e9 fa06 	bl	8000fdc <_write>
 8017bd0:	1c43      	adds	r3, r0, #1
 8017bd2:	d102      	bne.n	8017bda <_write_r+0x1e>
 8017bd4:	682b      	ldr	r3, [r5, #0]
 8017bd6:	b103      	cbz	r3, 8017bda <_write_r+0x1e>
 8017bd8:	6023      	str	r3, [r4, #0]
 8017bda:	bd38      	pop	{r3, r4, r5, pc}
 8017bdc:	20017a14 	.word	0x20017a14

08017be0 <abort>:
 8017be0:	b508      	push	{r3, lr}
 8017be2:	2006      	movs	r0, #6
 8017be4:	f000 f8b4 	bl	8017d50 <raise>
 8017be8:	2001      	movs	r0, #1
 8017bea:	f7e9 fd5d 	bl	80016a8 <_exit>
	...

08017bf0 <_close_r>:
 8017bf0:	b538      	push	{r3, r4, r5, lr}
 8017bf2:	4d06      	ldr	r5, [pc, #24]	; (8017c0c <_close_r+0x1c>)
 8017bf4:	2300      	movs	r3, #0
 8017bf6:	4604      	mov	r4, r0
 8017bf8:	4608      	mov	r0, r1
 8017bfa:	602b      	str	r3, [r5, #0]
 8017bfc:	f7e9 fd7b 	bl	80016f6 <_close>
 8017c00:	1c43      	adds	r3, r0, #1
 8017c02:	d102      	bne.n	8017c0a <_close_r+0x1a>
 8017c04:	682b      	ldr	r3, [r5, #0]
 8017c06:	b103      	cbz	r3, 8017c0a <_close_r+0x1a>
 8017c08:	6023      	str	r3, [r4, #0]
 8017c0a:	bd38      	pop	{r3, r4, r5, pc}
 8017c0c:	20017a14 	.word	0x20017a14

08017c10 <_fstat_r>:
 8017c10:	b538      	push	{r3, r4, r5, lr}
 8017c12:	4d07      	ldr	r5, [pc, #28]	; (8017c30 <_fstat_r+0x20>)
 8017c14:	2300      	movs	r3, #0
 8017c16:	4604      	mov	r4, r0
 8017c18:	4608      	mov	r0, r1
 8017c1a:	4611      	mov	r1, r2
 8017c1c:	602b      	str	r3, [r5, #0]
 8017c1e:	f7e9 fd76 	bl	800170e <_fstat>
 8017c22:	1c43      	adds	r3, r0, #1
 8017c24:	d102      	bne.n	8017c2c <_fstat_r+0x1c>
 8017c26:	682b      	ldr	r3, [r5, #0]
 8017c28:	b103      	cbz	r3, 8017c2c <_fstat_r+0x1c>
 8017c2a:	6023      	str	r3, [r4, #0]
 8017c2c:	bd38      	pop	{r3, r4, r5, pc}
 8017c2e:	bf00      	nop
 8017c30:	20017a14 	.word	0x20017a14

08017c34 <_isatty_r>:
 8017c34:	b538      	push	{r3, r4, r5, lr}
 8017c36:	4d06      	ldr	r5, [pc, #24]	; (8017c50 <_isatty_r+0x1c>)
 8017c38:	2300      	movs	r3, #0
 8017c3a:	4604      	mov	r4, r0
 8017c3c:	4608      	mov	r0, r1
 8017c3e:	602b      	str	r3, [r5, #0]
 8017c40:	f7e9 fd75 	bl	800172e <_isatty>
 8017c44:	1c43      	adds	r3, r0, #1
 8017c46:	d102      	bne.n	8017c4e <_isatty_r+0x1a>
 8017c48:	682b      	ldr	r3, [r5, #0]
 8017c4a:	b103      	cbz	r3, 8017c4e <_isatty_r+0x1a>
 8017c4c:	6023      	str	r3, [r4, #0]
 8017c4e:	bd38      	pop	{r3, r4, r5, pc}
 8017c50:	20017a14 	.word	0x20017a14

08017c54 <_lseek_r>:
 8017c54:	b538      	push	{r3, r4, r5, lr}
 8017c56:	4d07      	ldr	r5, [pc, #28]	; (8017c74 <_lseek_r+0x20>)
 8017c58:	4604      	mov	r4, r0
 8017c5a:	4608      	mov	r0, r1
 8017c5c:	4611      	mov	r1, r2
 8017c5e:	2200      	movs	r2, #0
 8017c60:	602a      	str	r2, [r5, #0]
 8017c62:	461a      	mov	r2, r3
 8017c64:	f7e9 fd6e 	bl	8001744 <_lseek>
 8017c68:	1c43      	adds	r3, r0, #1
 8017c6a:	d102      	bne.n	8017c72 <_lseek_r+0x1e>
 8017c6c:	682b      	ldr	r3, [r5, #0]
 8017c6e:	b103      	cbz	r3, 8017c72 <_lseek_r+0x1e>
 8017c70:	6023      	str	r3, [r4, #0]
 8017c72:	bd38      	pop	{r3, r4, r5, pc}
 8017c74:	20017a14 	.word	0x20017a14

08017c78 <__malloc_lock>:
 8017c78:	4801      	ldr	r0, [pc, #4]	; (8017c80 <__malloc_lock+0x8>)
 8017c7a:	f7ff b9e9 	b.w	8017050 <__retarget_lock_acquire_recursive>
 8017c7e:	bf00      	nop
 8017c80:	20017a1c 	.word	0x20017a1c

08017c84 <__malloc_unlock>:
 8017c84:	4801      	ldr	r0, [pc, #4]	; (8017c8c <__malloc_unlock+0x8>)
 8017c86:	f7ff b9e4 	b.w	8017052 <__retarget_lock_release_recursive>
 8017c8a:	bf00      	nop
 8017c8c:	20017a1c 	.word	0x20017a1c

08017c90 <_realloc_r>:
 8017c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c92:	4607      	mov	r7, r0
 8017c94:	4614      	mov	r4, r2
 8017c96:	460e      	mov	r6, r1
 8017c98:	b921      	cbnz	r1, 8017ca4 <_realloc_r+0x14>
 8017c9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017c9e:	4611      	mov	r1, r2
 8017ca0:	f7ff ba94 	b.w	80171cc <_malloc_r>
 8017ca4:	b922      	cbnz	r2, 8017cb0 <_realloc_r+0x20>
 8017ca6:	f7ff fa41 	bl	801712c <_free_r>
 8017caa:	4625      	mov	r5, r4
 8017cac:	4628      	mov	r0, r5
 8017cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017cb0:	f000 f86a 	bl	8017d88 <_malloc_usable_size_r>
 8017cb4:	42a0      	cmp	r0, r4
 8017cb6:	d20f      	bcs.n	8017cd8 <_realloc_r+0x48>
 8017cb8:	4621      	mov	r1, r4
 8017cba:	4638      	mov	r0, r7
 8017cbc:	f7ff fa86 	bl	80171cc <_malloc_r>
 8017cc0:	4605      	mov	r5, r0
 8017cc2:	2800      	cmp	r0, #0
 8017cc4:	d0f2      	beq.n	8017cac <_realloc_r+0x1c>
 8017cc6:	4631      	mov	r1, r6
 8017cc8:	4622      	mov	r2, r4
 8017cca:	f7fe fca7 	bl	801661c <memcpy>
 8017cce:	4631      	mov	r1, r6
 8017cd0:	4638      	mov	r0, r7
 8017cd2:	f7ff fa2b 	bl	801712c <_free_r>
 8017cd6:	e7e9      	b.n	8017cac <_realloc_r+0x1c>
 8017cd8:	4635      	mov	r5, r6
 8017cda:	e7e7      	b.n	8017cac <_realloc_r+0x1c>

08017cdc <_read_r>:
 8017cdc:	b538      	push	{r3, r4, r5, lr}
 8017cde:	4d07      	ldr	r5, [pc, #28]	; (8017cfc <_read_r+0x20>)
 8017ce0:	4604      	mov	r4, r0
 8017ce2:	4608      	mov	r0, r1
 8017ce4:	4611      	mov	r1, r2
 8017ce6:	2200      	movs	r2, #0
 8017ce8:	602a      	str	r2, [r5, #0]
 8017cea:	461a      	mov	r2, r3
 8017cec:	f7e9 fce6 	bl	80016bc <_read>
 8017cf0:	1c43      	adds	r3, r0, #1
 8017cf2:	d102      	bne.n	8017cfa <_read_r+0x1e>
 8017cf4:	682b      	ldr	r3, [r5, #0]
 8017cf6:	b103      	cbz	r3, 8017cfa <_read_r+0x1e>
 8017cf8:	6023      	str	r3, [r4, #0]
 8017cfa:	bd38      	pop	{r3, r4, r5, pc}
 8017cfc:	20017a14 	.word	0x20017a14

08017d00 <_raise_r>:
 8017d00:	291f      	cmp	r1, #31
 8017d02:	b538      	push	{r3, r4, r5, lr}
 8017d04:	4604      	mov	r4, r0
 8017d06:	460d      	mov	r5, r1
 8017d08:	d904      	bls.n	8017d14 <_raise_r+0x14>
 8017d0a:	2316      	movs	r3, #22
 8017d0c:	6003      	str	r3, [r0, #0]
 8017d0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017d12:	bd38      	pop	{r3, r4, r5, pc}
 8017d14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017d16:	b112      	cbz	r2, 8017d1e <_raise_r+0x1e>
 8017d18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017d1c:	b94b      	cbnz	r3, 8017d32 <_raise_r+0x32>
 8017d1e:	4620      	mov	r0, r4
 8017d20:	f000 f830 	bl	8017d84 <_getpid_r>
 8017d24:	462a      	mov	r2, r5
 8017d26:	4601      	mov	r1, r0
 8017d28:	4620      	mov	r0, r4
 8017d2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017d2e:	f000 b817 	b.w	8017d60 <_kill_r>
 8017d32:	2b01      	cmp	r3, #1
 8017d34:	d00a      	beq.n	8017d4c <_raise_r+0x4c>
 8017d36:	1c59      	adds	r1, r3, #1
 8017d38:	d103      	bne.n	8017d42 <_raise_r+0x42>
 8017d3a:	2316      	movs	r3, #22
 8017d3c:	6003      	str	r3, [r0, #0]
 8017d3e:	2001      	movs	r0, #1
 8017d40:	e7e7      	b.n	8017d12 <_raise_r+0x12>
 8017d42:	2400      	movs	r4, #0
 8017d44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017d48:	4628      	mov	r0, r5
 8017d4a:	4798      	blx	r3
 8017d4c:	2000      	movs	r0, #0
 8017d4e:	e7e0      	b.n	8017d12 <_raise_r+0x12>

08017d50 <raise>:
 8017d50:	4b02      	ldr	r3, [pc, #8]	; (8017d5c <raise+0xc>)
 8017d52:	4601      	mov	r1, r0
 8017d54:	6818      	ldr	r0, [r3, #0]
 8017d56:	f7ff bfd3 	b.w	8017d00 <_raise_r>
 8017d5a:	bf00      	nop
 8017d5c:	2000002c 	.word	0x2000002c

08017d60 <_kill_r>:
 8017d60:	b538      	push	{r3, r4, r5, lr}
 8017d62:	4d07      	ldr	r5, [pc, #28]	; (8017d80 <_kill_r+0x20>)
 8017d64:	2300      	movs	r3, #0
 8017d66:	4604      	mov	r4, r0
 8017d68:	4608      	mov	r0, r1
 8017d6a:	4611      	mov	r1, r2
 8017d6c:	602b      	str	r3, [r5, #0]
 8017d6e:	f7e9 fc89 	bl	8001684 <_kill>
 8017d72:	1c43      	adds	r3, r0, #1
 8017d74:	d102      	bne.n	8017d7c <_kill_r+0x1c>
 8017d76:	682b      	ldr	r3, [r5, #0]
 8017d78:	b103      	cbz	r3, 8017d7c <_kill_r+0x1c>
 8017d7a:	6023      	str	r3, [r4, #0]
 8017d7c:	bd38      	pop	{r3, r4, r5, pc}
 8017d7e:	bf00      	nop
 8017d80:	20017a14 	.word	0x20017a14

08017d84 <_getpid_r>:
 8017d84:	f7e9 bc76 	b.w	8001674 <_getpid>

08017d88 <_malloc_usable_size_r>:
 8017d88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017d8c:	1f18      	subs	r0, r3, #4
 8017d8e:	2b00      	cmp	r3, #0
 8017d90:	bfbc      	itt	lt
 8017d92:	580b      	ldrlt	r3, [r1, r0]
 8017d94:	18c0      	addlt	r0, r0, r3
 8017d96:	4770      	bx	lr

08017d98 <_init>:
 8017d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d9a:	bf00      	nop
 8017d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017d9e:	bc08      	pop	{r3}
 8017da0:	469e      	mov	lr, r3
 8017da2:	4770      	bx	lr

08017da4 <_fini>:
 8017da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017da6:	bf00      	nop
 8017da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017daa:	bc08      	pop	{r3}
 8017dac:	469e      	mov	lr, r3
 8017dae:	4770      	bx	lr
