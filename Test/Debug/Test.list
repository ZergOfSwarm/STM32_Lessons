
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018598  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007e8c  08018728  08018728  00028728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080205b4  080205b4  000401b0  2**0
                  CONTENTS
  4 .ARM          00000008  080205b4  080205b4  000305b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080205bc  080205bc  000401b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080205bc  080205bc  000305bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080205c0  080205c0  000305c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b0  20000000  080205c4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000401b0  2**0
                  CONTENTS
 10 .bss          00016c38  200001b0  200001b0  000401b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20016de8  20016de8  000401b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000401b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003e535  00000000  00000000  000401e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000076e6  00000000  00000000  0007e715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b80  00000000  00000000  00085e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a98  00000000  00000000  00087980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030b13  00000000  00000000  00089418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002fdc9  00000000  00000000  000b9f2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4c4b  00000000  00000000  000e9cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001ce93f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007c30  00000000  00000000  001ce994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001b0 	.word	0x200001b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08018710 	.word	0x08018710

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001b4 	.word	0x200001b4
 80001cc:	08018710 	.word	0x08018710

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <ssi_handler>:
		"PD3", "PD4", "PD5", "PD6", "PD7", "PD8", "PD9", "PD10", "PD11", "PD12",
		"PD13", "PD14", "PD15", "PE0", "PE1", "PE2", "PE3", "PE4", "PE5", "PE6",
		"PE7", "PE8", "PE9", "PE10", "PE11", "PE12", "PE13", "PE14", "PE15" };

uint16_t ssi_handler(int iIndex, char *pcInsert, int iInsertLen,
		u16_t current_tag_part, u16_t *next_tag_part) {
 8000598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800059a:	b091      	sub	sp, #68	; 0x44
 800059c:	af08      	add	r7, sp, #32
 800059e:	6178      	str	r0, [r7, #20]
 80005a0:	6139      	str	r1, [r7, #16]
 80005a2:	60fa      	str	r2, [r7, #12]
 80005a4:	817b      	strh	r3, [r7, #10]
	//char *info[30] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL};
	char *info;
	switch (iIndex) {
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	2b02      	cmp	r3, #2
 80005aa:	f000 81c5 	beq.w	8000938 <ssi_handler+0x3a0>
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	2b02      	cmp	r3, #2
 80005b2:	f300 81c3 	bgt.w	800093c <ssi_handler+0x3a4>
 80005b6:	697b      	ldr	r3, [r7, #20]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d004      	beq.n	80005c6 <ssi_handler+0x2e>
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	f000 81a8 	beq.w	8000914 <ssi_handler+0x37c>
//		memset(json, '\0', sizeof(json));
//		memset(arrline, '\0', sizeof(arrline));
//		return strlen(pcInsert);
		break;
	default:
		break;
 80005c4:	e1ba      	b.n	800093c <ssi_handler+0x3a4>
		if (variable == num_lines) {
 80005c6:	4b8f      	ldr	r3, [pc, #572]	; (8000804 <ssi_handler+0x26c>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	2b3a      	cmp	r3, #58	; 0x3a
 80005cc:	d103      	bne.n	80005d6 <ssi_handler+0x3e>
			variable = 0;
 80005ce:	4b8d      	ldr	r3, [pc, #564]	; (8000804 <ssi_handler+0x26c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
			break;
 80005d4:	e1b3      	b.n	800093e <ssi_handler+0x3a6>
			if (isalpha(T[variable].infofield[0])) {
 80005d6:	4b8b      	ldr	r3, [pc, #556]	; (8000804 <ssi_handler+0x26c>)
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	498b      	ldr	r1, [pc, #556]	; (8000808 <ssi_handler+0x270>)
 80005dc:	4613      	mov	r3, r2
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	4413      	add	r3, r2
 80005e2:	011b      	lsls	r3, r3, #4
 80005e4:	440b      	add	r3, r1
 80005e6:	332c      	adds	r3, #44	; 0x2c
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	3301      	adds	r3, #1
 80005ec:	4a87      	ldr	r2, [pc, #540]	; (800080c <ssi_handler+0x274>)
 80005ee:	4413      	add	r3, r2
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	f003 0303 	and.w	r3, r3, #3
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d00b      	beq.n	8000612 <ssi_handler+0x7a>
				info = T[variable].infofield;
 80005fa:	4b82      	ldr	r3, [pc, #520]	; (8000804 <ssi_handler+0x26c>)
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	4613      	mov	r3, r2
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	4413      	add	r3, r2
 8000604:	011b      	lsls	r3, r3, #4
 8000606:	3328      	adds	r3, #40	; 0x28
 8000608:	4a7f      	ldr	r2, [pc, #508]	; (8000808 <ssi_handler+0x270>)
 800060a:	4413      	add	r3, r2
 800060c:	3304      	adds	r3, #4
 800060e:	61fb      	str	r3, [r7, #28]
 8000610:	e016      	b.n	8000640 <ssi_handler+0xa8>
			} else if (isdigit(T[variable].infofield[0])) {
 8000612:	4b7c      	ldr	r3, [pc, #496]	; (8000804 <ssi_handler+0x26c>)
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	497c      	ldr	r1, [pc, #496]	; (8000808 <ssi_handler+0x270>)
 8000618:	4613      	mov	r3, r2
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	4413      	add	r3, r2
 800061e:	011b      	lsls	r3, r3, #4
 8000620:	440b      	add	r3, r1
 8000622:	332c      	adds	r3, #44	; 0x2c
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	3301      	adds	r3, #1
 8000628:	4a78      	ldr	r2, [pc, #480]	; (800080c <ssi_handler+0x274>)
 800062a:	4413      	add	r3, r2
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	f003 0304 	and.w	r3, r3, #4
 8000632:	2b00      	cmp	r3, #0
 8000634:	d002      	beq.n	800063c <ssi_handler+0xa4>
				info = NULL;
 8000636:	2300      	movs	r3, #0
 8000638:	61fb      	str	r3, [r7, #28]
 800063a:	e001      	b.n	8000640 <ssi_handler+0xa8>
				info = NULL;
 800063c:	2300      	movs	r3, #0
 800063e:	61fb      	str	r3, [r7, #28]
			if (variable == 0) {
 8000640:	4b70      	ldr	r3, [pc, #448]	; (8000804 <ssi_handler+0x26c>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d16c      	bne.n	8000722 <ssi_handler+0x18a>
						tp[variable].pins, T[variable].pulluptype,
 8000648:	4b6e      	ldr	r3, [pc, #440]	; (8000804 <ssi_handler+0x26c>)
 800064a:	681a      	ldr	r2, [r3, #0]
 800064c:	4613      	mov	r3, r2
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	4413      	add	r3, r2
 8000652:	4a6f      	ldr	r2, [pc, #444]	; (8000810 <ssi_handler+0x278>)
 8000654:	eb03 0c02 	add.w	ip, r3, r2
 8000658:	4b6a      	ldr	r3, [pc, #424]	; (8000804 <ssi_handler+0x26c>)
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	4613      	mov	r3, r2
 800065e:	009b      	lsls	r3, r3, #2
 8000660:	4413      	add	r3, r2
 8000662:	011b      	lsls	r3, r3, #4
 8000664:	4a68      	ldr	r2, [pc, #416]	; (8000808 <ssi_handler+0x270>)
 8000666:	eb03 0e02 	add.w	lr, r3, r2
				sprintf(pcInsert,
 800066a:	4b66      	ldr	r3, [pc, #408]	; (8000804 <ssi_handler+0x26c>)
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	4966      	ldr	r1, [pc, #408]	; (8000808 <ssi_handler+0x270>)
 8000670:	4613      	mov	r3, r2
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	4413      	add	r3, r2
 8000676:	011b      	lsls	r3, r3, #4
 8000678:	440b      	add	r3, r1
 800067a:	3314      	adds	r3, #20
 800067c:	6819      	ldr	r1, [r3, #0]
 800067e:	4b61      	ldr	r3, [pc, #388]	; (8000804 <ssi_handler+0x26c>)
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	4861      	ldr	r0, [pc, #388]	; (8000808 <ssi_handler+0x270>)
 8000684:	4613      	mov	r3, r2
 8000686:	009b      	lsls	r3, r3, #2
 8000688:	4413      	add	r3, r2
 800068a:	011b      	lsls	r3, r3, #4
 800068c:	4403      	add	r3, r0
 800068e:	3318      	adds	r3, #24
 8000690:	6818      	ldr	r0, [r3, #0]
 8000692:	4b5c      	ldr	r3, [pc, #368]	; (8000804 <ssi_handler+0x26c>)
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	4c5c      	ldr	r4, [pc, #368]	; (8000808 <ssi_handler+0x270>)
 8000698:	4613      	mov	r3, r2
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	4413      	add	r3, r2
 800069e:	011b      	lsls	r3, r3, #4
 80006a0:	4423      	add	r3, r4
 80006a2:	331c      	adds	r3, #28
 80006a4:	681c      	ldr	r4, [r3, #0]
 80006a6:	4b57      	ldr	r3, [pc, #348]	; (8000804 <ssi_handler+0x26c>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4d57      	ldr	r5, [pc, #348]	; (8000808 <ssi_handler+0x270>)
 80006ac:	4613      	mov	r3, r2
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	4413      	add	r3, r2
 80006b2:	011b      	lsls	r3, r3, #4
 80006b4:	442b      	add	r3, r5
 80006b6:	3320      	adds	r3, #32
 80006b8:	681d      	ldr	r5, [r3, #0]
 80006ba:	4b52      	ldr	r3, [pc, #328]	; (8000804 <ssi_handler+0x26c>)
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	4e52      	ldr	r6, [pc, #328]	; (8000808 <ssi_handler+0x270>)
 80006c0:	4613      	mov	r3, r2
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	4413      	add	r3, r2
 80006c6:	011b      	lsls	r3, r3, #4
 80006c8:	4433      	add	r3, r6
 80006ca:	3324      	adds	r3, #36	; 0x24
 80006cc:	681e      	ldr	r6, [r3, #0]
 80006ce:	4b4d      	ldr	r3, [pc, #308]	; (8000804 <ssi_handler+0x26c>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	4b4d      	ldr	r3, [pc, #308]	; (8000808 <ssi_handler+0x270>)
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	4613      	mov	r3, r2
 80006d8:	009b      	lsls	r3, r3, #2
 80006da:	4413      	add	r3, r2
 80006dc:	011b      	lsls	r3, r3, #4
 80006de:	687a      	ldr	r2, [r7, #4]
 80006e0:	4413      	add	r3, r2
 80006e2:	3328      	adds	r3, #40	; 0x28
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	4b46      	ldr	r3, [pc, #280]	; (8000804 <ssi_handler+0x26c>)
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	4b46      	ldr	r3, [pc, #280]	; (8000808 <ssi_handler+0x270>)
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	4613      	mov	r3, r2
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	4413      	add	r3, r2
 80006f6:	011b      	lsls	r3, r3, #4
 80006f8:	683a      	ldr	r2, [r7, #0]
 80006fa:	4413      	add	r3, r2
 80006fc:	334c      	adds	r3, #76	; 0x4c
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	9307      	str	r3, [sp, #28]
 8000702:	69fb      	ldr	r3, [r7, #28]
 8000704:	9306      	str	r3, [sp, #24]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	9305      	str	r3, [sp, #20]
 800070a:	9604      	str	r6, [sp, #16]
 800070c:	9503      	str	r5, [sp, #12]
 800070e:	9402      	str	r4, [sp, #8]
 8000710:	9001      	str	r0, [sp, #4]
 8000712:	9100      	str	r1, [sp, #0]
 8000714:	4673      	mov	r3, lr
 8000716:	4662      	mov	r2, ip
 8000718:	493e      	ldr	r1, [pc, #248]	; (8000814 <ssi_handler+0x27c>)
 800071a:	6938      	ldr	r0, [r7, #16]
 800071c:	f016 fd6c 	bl	80171f8 <siprintf>
 8000720:	e0e8      	b.n	80008f4 <ssi_handler+0x35c>
			} else if (variable == num_lines - 1) {
 8000722:	4b38      	ldr	r3, [pc, #224]	; (8000804 <ssi_handler+0x26c>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2b39      	cmp	r3, #57	; 0x39
 8000728:	d178      	bne.n	800081c <ssi_handler+0x284>
						tp[variable].pins, T[variable].pulluptype,
 800072a:	4b36      	ldr	r3, [pc, #216]	; (8000804 <ssi_handler+0x26c>)
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	4613      	mov	r3, r2
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	4413      	add	r3, r2
 8000734:	4a36      	ldr	r2, [pc, #216]	; (8000810 <ssi_handler+0x278>)
 8000736:	eb03 0c02 	add.w	ip, r3, r2
 800073a:	4b32      	ldr	r3, [pc, #200]	; (8000804 <ssi_handler+0x26c>)
 800073c:	681a      	ldr	r2, [r3, #0]
 800073e:	4613      	mov	r3, r2
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	4413      	add	r3, r2
 8000744:	011b      	lsls	r3, r3, #4
 8000746:	4a30      	ldr	r2, [pc, #192]	; (8000808 <ssi_handler+0x270>)
 8000748:	eb03 0e02 	add.w	lr, r3, r2
				sprintf(pcInsert,
 800074c:	4b2d      	ldr	r3, [pc, #180]	; (8000804 <ssi_handler+0x26c>)
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	492d      	ldr	r1, [pc, #180]	; (8000808 <ssi_handler+0x270>)
 8000752:	4613      	mov	r3, r2
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	4413      	add	r3, r2
 8000758:	011b      	lsls	r3, r3, #4
 800075a:	440b      	add	r3, r1
 800075c:	3314      	adds	r3, #20
 800075e:	6819      	ldr	r1, [r3, #0]
 8000760:	4b28      	ldr	r3, [pc, #160]	; (8000804 <ssi_handler+0x26c>)
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	4828      	ldr	r0, [pc, #160]	; (8000808 <ssi_handler+0x270>)
 8000766:	4613      	mov	r3, r2
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	4413      	add	r3, r2
 800076c:	011b      	lsls	r3, r3, #4
 800076e:	4403      	add	r3, r0
 8000770:	3318      	adds	r3, #24
 8000772:	6818      	ldr	r0, [r3, #0]
 8000774:	4b23      	ldr	r3, [pc, #140]	; (8000804 <ssi_handler+0x26c>)
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	4c23      	ldr	r4, [pc, #140]	; (8000808 <ssi_handler+0x270>)
 800077a:	4613      	mov	r3, r2
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	4413      	add	r3, r2
 8000780:	011b      	lsls	r3, r3, #4
 8000782:	4423      	add	r3, r4
 8000784:	331c      	adds	r3, #28
 8000786:	681c      	ldr	r4, [r3, #0]
 8000788:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <ssi_handler+0x26c>)
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	4d1e      	ldr	r5, [pc, #120]	; (8000808 <ssi_handler+0x270>)
 800078e:	4613      	mov	r3, r2
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	4413      	add	r3, r2
 8000794:	011b      	lsls	r3, r3, #4
 8000796:	442b      	add	r3, r5
 8000798:	3320      	adds	r3, #32
 800079a:	681d      	ldr	r5, [r3, #0]
 800079c:	4b19      	ldr	r3, [pc, #100]	; (8000804 <ssi_handler+0x26c>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	4e19      	ldr	r6, [pc, #100]	; (8000808 <ssi_handler+0x270>)
 80007a2:	4613      	mov	r3, r2
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	4413      	add	r3, r2
 80007a8:	011b      	lsls	r3, r3, #4
 80007aa:	4433      	add	r3, r6
 80007ac:	3324      	adds	r3, #36	; 0x24
 80007ae:	681e      	ldr	r6, [r3, #0]
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <ssi_handler+0x26c>)
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	4b14      	ldr	r3, [pc, #80]	; (8000808 <ssi_handler+0x270>)
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	4613      	mov	r3, r2
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	4413      	add	r3, r2
 80007be:	011b      	lsls	r3, r3, #4
 80007c0:	687a      	ldr	r2, [r7, #4]
 80007c2:	4413      	add	r3, r2
 80007c4:	3328      	adds	r3, #40	; 0x28
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <ssi_handler+0x26c>)
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <ssi_handler+0x270>)
 80007d0:	603b      	str	r3, [r7, #0]
 80007d2:	4613      	mov	r3, r2
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	4413      	add	r3, r2
 80007d8:	011b      	lsls	r3, r3, #4
 80007da:	683a      	ldr	r2, [r7, #0]
 80007dc:	4413      	add	r3, r2
 80007de:	334c      	adds	r3, #76	; 0x4c
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	9307      	str	r3, [sp, #28]
 80007e4:	69fb      	ldr	r3, [r7, #28]
 80007e6:	9306      	str	r3, [sp, #24]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	9305      	str	r3, [sp, #20]
 80007ec:	9604      	str	r6, [sp, #16]
 80007ee:	9503      	str	r5, [sp, #12]
 80007f0:	9402      	str	r4, [sp, #8]
 80007f2:	9001      	str	r0, [sp, #4]
 80007f4:	9100      	str	r1, [sp, #0]
 80007f6:	4673      	mov	r3, lr
 80007f8:	4662      	mov	r2, ip
 80007fa:	4907      	ldr	r1, [pc, #28]	; (8000818 <ssi_handler+0x280>)
 80007fc:	6938      	ldr	r0, [r7, #16]
 80007fe:	f016 fcfb 	bl	80171f8 <siprintf>
 8000802:	e077      	b.n	80008f4 <ssi_handler+0x35c>
 8000804:	200001d0 	.word	0x200001d0
 8000808:	200017f0 	.word	0x200017f0
 800080c:	08020366 	.word	0x08020366
 8000810:	20000010 	.word	0x20000010
 8000814:	08018740 	.word	0x08018740
 8000818:	080187f0 	.word	0x080187f0
						tp[variable].pins, T[variable].pulluptype,
 800081c:	4b4a      	ldr	r3, [pc, #296]	; (8000948 <ssi_handler+0x3b0>)
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	4613      	mov	r3, r2
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	4413      	add	r3, r2
 8000826:	4a49      	ldr	r2, [pc, #292]	; (800094c <ssi_handler+0x3b4>)
 8000828:	eb03 0c02 	add.w	ip, r3, r2
 800082c:	4b46      	ldr	r3, [pc, #280]	; (8000948 <ssi_handler+0x3b0>)
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	4613      	mov	r3, r2
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	4413      	add	r3, r2
 8000836:	011b      	lsls	r3, r3, #4
 8000838:	4a45      	ldr	r2, [pc, #276]	; (8000950 <ssi_handler+0x3b8>)
 800083a:	eb03 0e02 	add.w	lr, r3, r2
				sprintf(pcInsert,
 800083e:	4b42      	ldr	r3, [pc, #264]	; (8000948 <ssi_handler+0x3b0>)
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	4943      	ldr	r1, [pc, #268]	; (8000950 <ssi_handler+0x3b8>)
 8000844:	4613      	mov	r3, r2
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	4413      	add	r3, r2
 800084a:	011b      	lsls	r3, r3, #4
 800084c:	440b      	add	r3, r1
 800084e:	3314      	adds	r3, #20
 8000850:	6819      	ldr	r1, [r3, #0]
 8000852:	4b3d      	ldr	r3, [pc, #244]	; (8000948 <ssi_handler+0x3b0>)
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	483e      	ldr	r0, [pc, #248]	; (8000950 <ssi_handler+0x3b8>)
 8000858:	4613      	mov	r3, r2
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	4413      	add	r3, r2
 800085e:	011b      	lsls	r3, r3, #4
 8000860:	4403      	add	r3, r0
 8000862:	3318      	adds	r3, #24
 8000864:	6818      	ldr	r0, [r3, #0]
 8000866:	4b38      	ldr	r3, [pc, #224]	; (8000948 <ssi_handler+0x3b0>)
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	4c39      	ldr	r4, [pc, #228]	; (8000950 <ssi_handler+0x3b8>)
 800086c:	4613      	mov	r3, r2
 800086e:	009b      	lsls	r3, r3, #2
 8000870:	4413      	add	r3, r2
 8000872:	011b      	lsls	r3, r3, #4
 8000874:	4423      	add	r3, r4
 8000876:	331c      	adds	r3, #28
 8000878:	681c      	ldr	r4, [r3, #0]
 800087a:	4b33      	ldr	r3, [pc, #204]	; (8000948 <ssi_handler+0x3b0>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	4d34      	ldr	r5, [pc, #208]	; (8000950 <ssi_handler+0x3b8>)
 8000880:	4613      	mov	r3, r2
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	4413      	add	r3, r2
 8000886:	011b      	lsls	r3, r3, #4
 8000888:	442b      	add	r3, r5
 800088a:	3320      	adds	r3, #32
 800088c:	681d      	ldr	r5, [r3, #0]
 800088e:	4b2e      	ldr	r3, [pc, #184]	; (8000948 <ssi_handler+0x3b0>)
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	4e2f      	ldr	r6, [pc, #188]	; (8000950 <ssi_handler+0x3b8>)
 8000894:	4613      	mov	r3, r2
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	4413      	add	r3, r2
 800089a:	011b      	lsls	r3, r3, #4
 800089c:	4433      	add	r3, r6
 800089e:	3324      	adds	r3, #36	; 0x24
 80008a0:	681e      	ldr	r6, [r3, #0]
 80008a2:	4b29      	ldr	r3, [pc, #164]	; (8000948 <ssi_handler+0x3b0>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	4b2a      	ldr	r3, [pc, #168]	; (8000950 <ssi_handler+0x3b8>)
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	4613      	mov	r3, r2
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	4413      	add	r3, r2
 80008b0:	011b      	lsls	r3, r3, #4
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	4413      	add	r3, r2
 80008b6:	3328      	adds	r3, #40	; 0x28
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	4b22      	ldr	r3, [pc, #136]	; (8000948 <ssi_handler+0x3b0>)
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	4b23      	ldr	r3, [pc, #140]	; (8000950 <ssi_handler+0x3b8>)
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	4613      	mov	r3, r2
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	4413      	add	r3, r2
 80008ca:	011b      	lsls	r3, r3, #4
 80008cc:	683a      	ldr	r2, [r7, #0]
 80008ce:	4413      	add	r3, r2
 80008d0:	334c      	adds	r3, #76	; 0x4c
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	9307      	str	r3, [sp, #28]
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	9306      	str	r3, [sp, #24]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	9305      	str	r3, [sp, #20]
 80008de:	9604      	str	r6, [sp, #16]
 80008e0:	9503      	str	r5, [sp, #12]
 80008e2:	9402      	str	r4, [sp, #8]
 80008e4:	9001      	str	r0, [sp, #4]
 80008e6:	9100      	str	r1, [sp, #0]
 80008e8:	4673      	mov	r3, lr
 80008ea:	4662      	mov	r2, ip
 80008ec:	4919      	ldr	r1, [pc, #100]	; (8000954 <ssi_handler+0x3bc>)
 80008ee:	6938      	ldr	r0, [r7, #16]
 80008f0:	f016 fc82 	bl	80171f8 <siprintf>
			*next_tag_part = variable;
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <ssi_handler+0x3b0>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	b29a      	uxth	r2, r3
 80008fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008fc:	801a      	strh	r2, [r3, #0]
			variable++;
 80008fe:	4b12      	ldr	r3, [pc, #72]	; (8000948 <ssi_handler+0x3b0>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	3301      	adds	r3, #1
 8000904:	4a10      	ldr	r2, [pc, #64]	; (8000948 <ssi_handler+0x3b0>)
 8000906:	6013      	str	r3, [r2, #0]
			return strlen(pcInsert);
 8000908:	6938      	ldr	r0, [r7, #16]
 800090a:	f7ff fc6b 	bl	80001e4 <strlen>
 800090e:	4603      	mov	r3, r0
 8000910:	b29b      	uxth	r3, r3
 8000912:	e015      	b.n	8000940 <ssi_handler+0x3a8>
		indx1 += 1;
 8000914:	4b10      	ldr	r3, [pc, #64]	; (8000958 <ssi_handler+0x3c0>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	3301      	adds	r3, #1
 800091a:	4a0f      	ldr	r2, [pc, #60]	; (8000958 <ssi_handler+0x3c0>)
 800091c:	6013      	str	r3, [r2, #0]
		sprintf(pcInsert, "%d", indx1);
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <ssi_handler+0x3c0>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	461a      	mov	r2, r3
 8000924:	490d      	ldr	r1, [pc, #52]	; (800095c <ssi_handler+0x3c4>)
 8000926:	6938      	ldr	r0, [r7, #16]
 8000928:	f016 fc66 	bl	80171f8 <siprintf>
		return strlen(pcInsert);
 800092c:	6938      	ldr	r0, [r7, #16]
 800092e:	f7ff fc59 	bl	80001e4 <strlen>
 8000932:	4603      	mov	r3, r0
 8000934:	b29b      	uxth	r3, r3
 8000936:	e003      	b.n	8000940 <ssi_handler+0x3a8>
		break;
 8000938:	bf00      	nop
 800093a:	e000      	b.n	800093e <ssi_handler+0x3a6>
		break;
 800093c:	bf00      	nop
	}

	return 0;
 800093e:	2300      	movs	r3, #0
}
 8000940:	4618      	mov	r0, r3
 8000942:	3724      	adds	r7, #36	; 0x24
 8000944:	46bd      	mov	sp, r7
 8000946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000948:	200001d0 	.word	0x200001d0
 800094c:	20000010 	.word	0x20000010
 8000950:	200017f0 	.word	0x200017f0
 8000954:	080188a0 	.word	0x080188a0
 8000958:	200001cc 	.word	0x200001cc
 800095c:	08018950 	.word	0x08018950

08000960 <CGIForm_Handler>:
char name[30];

tCGI CGI_TAB[2]; // 3. For form создадим массив для form CGI

const char* CGIForm_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
 800096c:	603b      	str	r3, [r7, #0]
	printf("OK GET \r\n");
 800096e:	4828      	ldr	r0, [pc, #160]	; (8000a10 <CGIForm_Handler+0xb0>)
 8000970:	f016 fbc6 	bl	8017100 <puts>
	if (iIndex == 0) {
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d145      	bne.n	8000a06 <CGIForm_Handler+0xa6>
		for (int i = 0; i < iNumParams; i++) {
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
 800097e:	e03e      	b.n	80009fe <CGIForm_Handler+0x9e>
			if (strcmp(pcParam[i], "fname") == 0) // if the fname string is found
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	687a      	ldr	r2, [r7, #4]
 8000986:	4413      	add	r3, r2
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4922      	ldr	r1, [pc, #136]	; (8000a14 <CGIForm_Handler+0xb4>)
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fc1f 	bl	80001d0 <strcmp>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d10e      	bne.n	80009b6 <CGIForm_Handler+0x56>
					{
				memset(name, '\0', 30); // Очищаем массив перед записью новых данных.
 8000998:	221e      	movs	r2, #30
 800099a:	2100      	movs	r1, #0
 800099c:	481e      	ldr	r0, [pc, #120]	; (8000a18 <CGIForm_Handler+0xb8>)
 800099e:	f016 fb21 	bl	8016fe4 <memset>
				strcpy(name, pcValue[i]); // Сохраняем значение в переменную.
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	683a      	ldr	r2, [r7, #0]
 80009a8:	4413      	add	r3, r2
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4619      	mov	r1, r3
 80009ae:	481a      	ldr	r0, [pc, #104]	; (8000a18 <CGIForm_Handler+0xb8>)
 80009b0:	f016 fc5e 	bl	8017270 <strcpy>
 80009b4:	e020      	b.n	80009f8 <CGIForm_Handler+0x98>
			}

			else if (strcmp(pcParam[i], "lname") == 0) // if the lname string is found
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	687a      	ldr	r2, [r7, #4]
 80009bc:	4413      	add	r3, r2
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4916      	ldr	r1, [pc, #88]	; (8000a1c <CGIForm_Handler+0xbc>)
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff fc04 	bl	80001d0 <strcmp>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d114      	bne.n	80009f8 <CGIForm_Handler+0x98>
					{
				strcat(name, " "); // Сконкатенируем fname с lname разделяя пробелом.
 80009ce:	4812      	ldr	r0, [pc, #72]	; (8000a18 <CGIForm_Handler+0xb8>)
 80009d0:	f7ff fc08 	bl	80001e4 <strlen>
 80009d4:	4603      	mov	r3, r0
 80009d6:	461a      	mov	r2, r3
 80009d8:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <CGIForm_Handler+0xb8>)
 80009da:	4413      	add	r3, r2
 80009dc:	4910      	ldr	r1, [pc, #64]	; (8000a20 <CGIForm_Handler+0xc0>)
 80009de:	461a      	mov	r2, r3
 80009e0:	460b      	mov	r3, r1
 80009e2:	881b      	ldrh	r3, [r3, #0]
 80009e4:	8013      	strh	r3, [r2, #0]
				strcat(name, pcValue[i]); // Сохраняем значение в переменную.
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	683a      	ldr	r2, [r7, #0]
 80009ec:	4413      	add	r3, r2
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4619      	mov	r1, r3
 80009f2:	4809      	ldr	r0, [pc, #36]	; (8000a18 <CGIForm_Handler+0xb8>)
 80009f4:	f016 fc20 	bl	8017238 <strcat>
		for (int i = 0; i < iNumParams; i++) {
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	3301      	adds	r3, #1
 80009fc:	617b      	str	r3, [r7, #20]
 80009fe:	697a      	ldr	r2, [r7, #20]
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	429a      	cmp	r2, r3
 8000a04:	dbbc      	blt.n	8000980 <CGIForm_Handler+0x20>
			}
		}
	}

	return "/1.shtml"; // Здесь пропишем имя файла из которого берем переменные.
 8000a06:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <CGIForm_Handler+0xc4>)
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3718      	adds	r7, #24
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	08018960 	.word	0x08018960
 8000a14:	0801896c 	.word	0x0801896c
 8000a18:	200058f4 	.word	0x200058f4
 8000a1c:	08018974 	.word	0x08018974
 8000a20:	0801897c 	.word	0x0801897c
 8000a24:	08018980 	.word	0x08018980

08000a28 <httpd_post_begin>:
static void *valid_connection;
int http_post_content_len;

err_t httpd_post_begin(void *connection, const char *uri,
		const char *http_request, uint16_t http_request_len, int content_len,
		char *response_uri, uint16_t response_uri_len, uint8_t *post_auto_wnd) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
 8000a34:	807b      	strh	r3, [r7, #2]

	printf("OK POST 1 \r\n");
 8000a36:	480f      	ldr	r0, [pc, #60]	; (8000a74 <httpd_post_begin+0x4c>)
 8000a38:	f016 fb62 	bl	8017100 <puts>
//LWIP_UNUSED_ARG(connection);
//LWIP_UNUSED_ARG(http_request);
//LWIP_UNUSED_ARG(http_request_len);
//LWIP_UNUSED_ARG(content_len);
//LWIP_UNUSED_ARG(post_auto_wnd);
	http_post_content_len = content_len;
 8000a3c:	4a0e      	ldr	r2, [pc, #56]	; (8000a78 <httpd_post_begin+0x50>)
 8000a3e:	69bb      	ldr	r3, [r7, #24]
 8000a40:	6013      	str	r3, [r2, #0]

//printf("httpd_post_begin: Post Content: %s\n",  http_request);
//printf("%d \r\n",  http_post_content_len);

	if (current_connection != connection) {
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <httpd_post_begin+0x54>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	68fa      	ldr	r2, [r7, #12]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d00d      	beq.n	8000a68 <httpd_post_begin+0x40>

		current_connection = connection;
 8000a4c:	4a0b      	ldr	r2, [pc, #44]	; (8000a7c <httpd_post_begin+0x54>)
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	6013      	str	r3, [r2, #0]
		valid_connection = NULL;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <httpd_post_begin+0x58>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]

		/* default page is "login failed" */
		snprintf(response_uri, response_uri_len, "/cgi_leds.html");
 8000a58:	8c3b      	ldrh	r3, [r7, #32]
 8000a5a:	4a0a      	ldr	r2, [pc, #40]	; (8000a84 <httpd_post_begin+0x5c>)
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	69f8      	ldr	r0, [r7, #28]
 8000a60:	f016 fb96 	bl	8017190 <sniprintf>
		/* e.g. for large uploads to slow flash over a fast connection, you should
		 manually update the rx window. That way, a sender can only send a full
		 tcp window at a time. If this is required, set 'post_aut_wnd' to 0.
		 We do not need to throttle upload speed here, so: */
		return ERR_OK;
 8000a64:	2300      	movs	r3, #0
 8000a66:	e001      	b.n	8000a6c <httpd_post_begin+0x44>
	}

	return ERR_VAL;
 8000a68:	f06f 0305 	mvn.w	r3, #5
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3710      	adds	r7, #16
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	0801898c 	.word	0x0801898c
 8000a78:	200017ec 	.word	0x200017ec
 8000a7c:	200001d4 	.word	0x200001d4
 8000a80:	200001d8 	.word	0x200001d8
 8000a84:	08018998 	.word	0x08018998

08000a88 <httpd_post_receive_data>:

err_t httpd_post_receive_data(void *connection, struct pbuf *p) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]

	printf("OK POST 2 \r\n");
 8000a92:	4818      	ldr	r0, [pc, #96]	; (8000af4 <httpd_post_receive_data+0x6c>)
 8000a94:	f016 fb34 	bl	8017100 <puts>
	char *data;

	if (current_connection == connection && p != NULL) {
 8000a98:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <httpd_post_receive_data+0x70>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	d119      	bne.n	8000ad6 <httpd_post_receive_data+0x4e>
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d016      	beq.n	8000ad6 <httpd_post_receive_data+0x4e>

		data = p->payload;
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	60fb      	str	r3, [r7, #12]
		printf("DATA %s \r\n", data);
 8000aae:	68f9      	ldr	r1, [r7, #12]
 8000ab0:	4812      	ldr	r0, [pc, #72]	; (8000afc <httpd_post_receive_data+0x74>)
 8000ab2:	f016 fa9f 	bl	8016ff4 <iprintf>
		strcat(bufervar, p->payload);
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	4619      	mov	r1, r3
 8000abc:	4810      	ldr	r0, [pc, #64]	; (8000b00 <httpd_post_receive_data+0x78>)
 8000abe:	f016 fbbb 	bl	8017238 <strcat>
		pbuf_free(p);
 8000ac2:	6838      	ldr	r0, [r7, #0]
 8000ac4:	f00d f988 	bl	800ddd8 <pbuf_free>
		memset(data, '\0', sizeof(*data));
 8000ac8:	2201      	movs	r2, #1
 8000aca:	2100      	movs	r1, #0
 8000acc:	68f8      	ldr	r0, [r7, #12]
 8000ace:	f016 fa89 	bl	8016fe4 <memset>
		return ERR_OK;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	e00a      	b.n	8000aec <httpd_post_receive_data+0x64>
	}
	if (p != NULL) {
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d005      	beq.n	8000ae8 <httpd_post_receive_data+0x60>
		printf("END \r\n");
 8000adc:	4809      	ldr	r0, [pc, #36]	; (8000b04 <httpd_post_receive_data+0x7c>)
 8000ade:	f016 fb0f 	bl	8017100 <puts>
		pbuf_free(p);
 8000ae2:	6838      	ldr	r0, [r7, #0]
 8000ae4:	f00d f978 	bl	800ddd8 <pbuf_free>
	}
	return ERR_VAL;
 8000ae8:	f06f 0305 	mvn.w	r3, #5
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	080189a8 	.word	0x080189a8
 8000af8:	200001d4 	.word	0x200001d4
 8000afc:	080189b4 	.word	0x080189b4
 8000b00:	20002a10 	.word	0x20002a10
 8000b04:	080189c0 	.word	0x080189c0

08000b08 <httpd_post_finished>:

void httpd_post_finished(void *connection, char *response_uri,
		u16_t response_uri_len) {
 8000b08:	b5b0      	push	{r4, r5, r7, lr}
 8000b0a:	b0aa      	sub	sp, #168	; 0xa8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	4613      	mov	r3, r2
 8000b14:	80fb      	strh	r3, [r7, #6]
 8000b16:	466b      	mov	r3, sp
 8000b18:	461d      	mov	r5, r3
	printf("OK POST 3 \r\n");
 8000b1a:	48b3      	ldr	r0, [pc, #716]	; (8000de8 <httpd_post_finished+0x2e0>)
 8000b1c:	f016 faf0 	bl	8017100 <puts>
	char nametoken[50];
	char *token;
	char *token1;
	char *token2;
	char *name1;
	int z = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	int id;
	char urlline[http_post_content_len];
 8000b26:	4bb1      	ldr	r3, [pc, #708]	; (8000dec <httpd_post_finished+0x2e4>)
 8000b28:	681c      	ldr	r4, [r3, #0]
 8000b2a:	1e63      	subs	r3, r4, #1
 8000b2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000b30:	4623      	mov	r3, r4
 8000b32:	4618      	mov	r0, r3
 8000b34:	f04f 0100 	mov.w	r1, #0
 8000b38:	f04f 0200 	mov.w	r2, #0
 8000b3c:	f04f 0300 	mov.w	r3, #0
 8000b40:	00cb      	lsls	r3, r1, #3
 8000b42:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000b46:	00c2      	lsls	r2, r0, #3
 8000b48:	4623      	mov	r3, r4
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f04f 0100 	mov.w	r1, #0
 8000b50:	f04f 0200 	mov.w	r2, #0
 8000b54:	f04f 0300 	mov.w	r3, #0
 8000b58:	00cb      	lsls	r3, r1, #3
 8000b5a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000b5e:	00c2      	lsls	r2, r0, #3
 8000b60:	4623      	mov	r3, r4
 8000b62:	3307      	adds	r3, #7
 8000b64:	08db      	lsrs	r3, r3, #3
 8000b66:	00db      	lsls	r3, r3, #3
 8000b68:	ebad 0d03 	sub.w	sp, sp, r3
 8000b6c:	466b      	mov	r3, sp
 8000b6e:	3300      	adds	r3, #0
 8000b70:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	strncpy(urlline, bufervar, http_post_content_len);
 8000b74:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000b78:	4a9c      	ldr	r2, [pc, #624]	; (8000dec <httpd_post_finished+0x2e4>)
 8000b7a:	6812      	ldr	r2, [r2, #0]
 8000b7c:	499c      	ldr	r1, [pc, #624]	; (8000df0 <httpd_post_finished+0x2e8>)
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f016 fb90 	bl	80172a4 <strncpy>

	printf("%s \r\n", urlline);
 8000b84:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000b88:	4619      	mov	r1, r3
 8000b8a:	489a      	ldr	r0, [pc, #616]	; (8000df4 <httpd_post_finished+0x2ec>)
 8000b8c:	f016 fa32 	bl	8016ff4 <iprintf>
	printf("COUNT %d \r\n", http_post_content_len);
 8000b90:	4b96      	ldr	r3, [pc, #600]	; (8000dec <httpd_post_finished+0x2e4>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4619      	mov	r1, r3
 8000b96:	4898      	ldr	r0, [pc, #608]	; (8000df8 <httpd_post_finished+0x2f0>)
 8000b98:	f016 fa2c 	bl	8016ff4 <iprintf>

	char *rest = urlline;
 8000b9c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000ba0:	61fb      	str	r3, [r7, #28]

	while ((token = strtok_r(rest, "&", &rest))) {
 8000ba2:	e182      	b.n	8000eaa <httpd_post_finished+0x3a2>
		//printf("TOKEN - %s\n", token);
		char *rest1 = token;
 8000ba4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000ba8:	61bb      	str	r3, [r7, #24]
//		char *name0 = token;
		strcat(name0, token);
 8000baa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f016 fb40 	bl	8017238 <strcat>
		y = 0;
 8000bb8:	4b90      	ldr	r3, [pc, #576]	; (8000dfc <httpd_post_finished+0x2f4>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
		while ((token1 = strtok_r(rest1, "=", &rest1))) {
 8000bbe:	e153      	b.n	8000e68 <httpd_post_finished+0x360>
			z = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			if (y == 0) {
 8000bc6:	4b8d      	ldr	r3, [pc, #564]	; (8000dfc <httpd_post_finished+0x2f4>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d149      	bne.n	8000c62 <httpd_post_finished+0x15a>
				//printf("---NAME %s\n", token1);
				//name0 = token1; // имя переменной
				// получение id
				char *rest2 = token1;
 8000bce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000bd2:	617b      	str	r3, [r7, #20]
				while ((token2 = strtok_r(rest2, "_", &rest2))) {
 8000bd4:	e038      	b.n	8000c48 <httpd_post_finished+0x140>
					if (z == 0) {
 8000bd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d103      	bne.n	8000be6 <httpd_post_finished+0xde>
						name1 = token2;
 8000bde:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000be2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
					}
					if (z == 1) {
 8000be6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d105      	bne.n	8000bfa <httpd_post_finished+0xf2>
						id = atoi(token2);
 8000bee:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8000bf2:	f016 f999 	bl	8016f28 <atoi>
 8000bf6:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
						//printf("ID %d\n", id);
					}
					sprintf(nametoken, "infofield_%d=", id);
 8000bfa:	f107 0320 	add.w	r3, r7, #32
 8000bfe:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000c02:	497f      	ldr	r1, [pc, #508]	; (8000e00 <httpd_post_finished+0x2f8>)
 8000c04:	4618      	mov	r0, r3
 8000c06:	f016 faf7 	bl	80171f8 <siprintf>
					if (strcmp(name0, nametoken) == 0) {
 8000c0a:	f107 0220 	add.w	r2, r7, #32
 8000c0e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c12:	4611      	mov	r1, r2
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fadb 	bl	80001d0 <strcmp>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d10e      	bne.n	8000c3e <httpd_post_finished+0x136>
						strcpy(T[id].infofield, "null");
 8000c20:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000c24:	4613      	mov	r3, r2
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	4413      	add	r3, r2
 8000c2a:	011b      	lsls	r3, r3, #4
 8000c2c:	3328      	adds	r3, #40	; 0x28
 8000c2e:	4a75      	ldr	r2, [pc, #468]	; (8000e04 <httpd_post_finished+0x2fc>)
 8000c30:	4413      	add	r3, r2
 8000c32:	3304      	adds	r3, #4
 8000c34:	4a74      	ldr	r2, [pc, #464]	; (8000e08 <httpd_post_finished+0x300>)
 8000c36:	6810      	ldr	r0, [r2, #0]
 8000c38:	6018      	str	r0, [r3, #0]
 8000c3a:	7912      	ldrb	r2, [r2, #4]
 8000c3c:	711a      	strb	r2, [r3, #4]
						//printf("Yes \n");
					}
					z++;
 8000c3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000c42:	3301      	adds	r3, #1
 8000c44:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
				while ((token2 = strtok_r(rest2, "_", &rest2))) {
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	f107 0214 	add.w	r2, r7, #20
 8000c4e:	496f      	ldr	r1, [pc, #444]	; (8000e0c <httpd_post_finished+0x304>)
 8000c50:	4618      	mov	r0, r3
 8000c52:	f016 fb79 	bl	8017348 <strtok_r>
 8000c56:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
 8000c5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d1b9      	bne.n	8000bd6 <httpd_post_finished+0xce>
				}
			}
			if (y == 1) {
 8000c62:	4b66      	ldr	r3, [pc, #408]	; (8000dfc <httpd_post_finished+0x2f4>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	f040 80f9 	bne.w	8000e5e <httpd_post_finished+0x356>
				//printf("VAL-222 \n");
				//printf("VAL %s\n", token1);
				// записывае в структуру
				//printf("---NAME-1 %s\n", name1);
				/************************************************/
				if (strcmp(name1, "pulluptype") == 0) {
 8000c6c:	4968      	ldr	r1, [pc, #416]	; (8000e10 <httpd_post_finished+0x308>)
 8000c6e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8000c72:	f7ff faad 	bl	80001d0 <strcmp>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d10d      	bne.n	8000c98 <httpd_post_finished+0x190>
					strcpy(T[id].pulluptype, token1);
 8000c7c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000c80:	4613      	mov	r3, r2
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	4413      	add	r3, r2
 8000c86:	011b      	lsls	r3, r3, #4
 8000c88:	4a5e      	ldr	r2, [pc, #376]	; (8000e04 <httpd_post_finished+0x2fc>)
 8000c8a:	4413      	add	r3, r2
 8000c8c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8000c90:	4618      	mov	r0, r3
 8000c92:	f016 faed 	bl	8017270 <strcpy>
 8000c96:	e0e2      	b.n	8000e5e <httpd_post_finished+0x356>
				} else if (strcmp(name1, "bounceinterval") == 0) {
 8000c98:	495e      	ldr	r1, [pc, #376]	; (8000e14 <httpd_post_finished+0x30c>)
 8000c9a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8000c9e:	f7ff fa97 	bl	80001d0 <strcmp>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d10f      	bne.n	8000cc8 <httpd_post_finished+0x1c0>
					T[id].bounceinterval = atoi(token1);
 8000ca8:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000cac:	f016 f93c 	bl	8016f28 <atoi>
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	4854      	ldr	r0, [pc, #336]	; (8000e04 <httpd_post_finished+0x2fc>)
 8000cb4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000cb8:	4613      	mov	r3, r2
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	4413      	add	r3, r2
 8000cbe:	011b      	lsls	r3, r3, #4
 8000cc0:	4403      	add	r3, r0
 8000cc2:	3314      	adds	r3, #20
 8000cc4:	6019      	str	r1, [r3, #0]
 8000cc6:	e0ca      	b.n	8000e5e <httpd_post_finished+0x356>
				} else if (strcmp(name1, "holdinterval") == 0) {
 8000cc8:	4953      	ldr	r1, [pc, #332]	; (8000e18 <httpd_post_finished+0x310>)
 8000cca:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8000cce:	f7ff fa7f 	bl	80001d0 <strcmp>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d10f      	bne.n	8000cf8 <httpd_post_finished+0x1f0>
					T[id].holdinterval = atoi(token1);
 8000cd8:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000cdc:	f016 f924 	bl	8016f28 <atoi>
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	4848      	ldr	r0, [pc, #288]	; (8000e04 <httpd_post_finished+0x2fc>)
 8000ce4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000ce8:	4613      	mov	r3, r2
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	4413      	add	r3, r2
 8000cee:	011b      	lsls	r3, r3, #4
 8000cf0:	4403      	add	r3, r0
 8000cf2:	3318      	adds	r3, #24
 8000cf4:	6019      	str	r1, [r3, #0]
 8000cf6:	e0b2      	b.n	8000e5e <httpd_post_finished+0x356>
				} else if (strcmp(name1, "repeat") == 0) {
 8000cf8:	4948      	ldr	r1, [pc, #288]	; (8000e1c <httpd_post_finished+0x314>)
 8000cfa:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8000cfe:	f7ff fa67 	bl	80001d0 <strcmp>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d10f      	bne.n	8000d28 <httpd_post_finished+0x220>
					T[id].repeat = atoi(token1);
 8000d08:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000d0c:	f016 f90c 	bl	8016f28 <atoi>
 8000d10:	4601      	mov	r1, r0
 8000d12:	483c      	ldr	r0, [pc, #240]	; (8000e04 <httpd_post_finished+0x2fc>)
 8000d14:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000d18:	4613      	mov	r3, r2
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	4413      	add	r3, r2
 8000d1e:	011b      	lsls	r3, r3, #4
 8000d20:	4403      	add	r3, r0
 8000d22:	331c      	adds	r3, #28
 8000d24:	6019      	str	r1, [r3, #0]
 8000d26:	e09a      	b.n	8000e5e <httpd_post_finished+0x356>
				} else if (strcmp(name1, "repeatinterval") == 0) {
 8000d28:	493d      	ldr	r1, [pc, #244]	; (8000e20 <httpd_post_finished+0x318>)
 8000d2a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8000d2e:	f7ff fa4f 	bl	80001d0 <strcmp>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d10f      	bne.n	8000d58 <httpd_post_finished+0x250>
					T[id].repeatinterval = atoi(token1);
 8000d38:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000d3c:	f016 f8f4 	bl	8016f28 <atoi>
 8000d40:	4601      	mov	r1, r0
 8000d42:	4830      	ldr	r0, [pc, #192]	; (8000e04 <httpd_post_finished+0x2fc>)
 8000d44:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000d48:	4613      	mov	r3, r2
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	4413      	add	r3, r2
 8000d4e:	011b      	lsls	r3, r3, #4
 8000d50:	4403      	add	r3, r0
 8000d52:	3320      	adds	r3, #32
 8000d54:	6019      	str	r1, [r3, #0]
 8000d56:	e082      	b.n	8000e5e <httpd_post_finished+0x356>
				} else if (strcmp(name1, "doubleclickinterval") == 0) {
 8000d58:	4932      	ldr	r1, [pc, #200]	; (8000e24 <httpd_post_finished+0x31c>)
 8000d5a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8000d5e:	f7ff fa37 	bl	80001d0 <strcmp>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d10f      	bne.n	8000d88 <httpd_post_finished+0x280>
					T[id].doubleclickinterval = atoi(token1);
 8000d68:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000d6c:	f016 f8dc 	bl	8016f28 <atoi>
 8000d70:	4601      	mov	r1, r0
 8000d72:	4824      	ldr	r0, [pc, #144]	; (8000e04 <httpd_post_finished+0x2fc>)
 8000d74:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000d78:	4613      	mov	r3, r2
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	4413      	add	r3, r2
 8000d7e:	011b      	lsls	r3, r3, #4
 8000d80:	4403      	add	r3, r0
 8000d82:	3324      	adds	r3, #36	; 0x24
 8000d84:	6019      	str	r1, [r3, #0]
 8000d86:	e06a      	b.n	8000e5e <httpd_post_finished+0x356>
				} else if (strcmp(name1, "preventclick") == 0) {
 8000d88:	4927      	ldr	r1, [pc, #156]	; (8000e28 <httpd_post_finished+0x320>)
 8000d8a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8000d8e:	f7ff fa1f 	bl	80001d0 <strcmp>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d10f      	bne.n	8000db8 <httpd_post_finished+0x2b0>
					T[id].preventclick = atoi(token1);
 8000d98:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000d9c:	f016 f8c4 	bl	8016f28 <atoi>
 8000da0:	4601      	mov	r1, r0
 8000da2:	4818      	ldr	r0, [pc, #96]	; (8000e04 <httpd_post_finished+0x2fc>)
 8000da4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000da8:	4613      	mov	r3, r2
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	4413      	add	r3, r2
 8000dae:	011b      	lsls	r3, r3, #4
 8000db0:	4403      	add	r3, r0
 8000db2:	3328      	adds	r3, #40	; 0x28
 8000db4:	6019      	str	r1, [r3, #0]
 8000db6:	e052      	b.n	8000e5e <httpd_post_finished+0x356>
				} else if (strcmp(name1, "infofield") == 0) {
 8000db8:	491c      	ldr	r1, [pc, #112]	; (8000e2c <httpd_post_finished+0x324>)
 8000dba:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8000dbe:	f7ff fa07 	bl	80001d0 <strcmp>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d133      	bne.n	8000e30 <httpd_post_finished+0x328>
					strcpy(T[id].infofield, token1);
 8000dc8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000dcc:	4613      	mov	r3, r2
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	4413      	add	r3, r2
 8000dd2:	011b      	lsls	r3, r3, #4
 8000dd4:	3328      	adds	r3, #40	; 0x28
 8000dd6:	4a0b      	ldr	r2, [pc, #44]	; (8000e04 <httpd_post_finished+0x2fc>)
 8000dd8:	4413      	add	r3, r2
 8000dda:	3304      	adds	r3, #4
 8000ddc:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8000de0:	4618      	mov	r0, r3
 8000de2:	f016 fa45 	bl	8017270 <strcpy>
 8000de6:	e03a      	b.n	8000e5e <httpd_post_finished+0x356>
 8000de8:	080189c8 	.word	0x080189c8
 8000dec:	200017ec 	.word	0x200017ec
 8000df0:	20002a10 	.word	0x20002a10
 8000df4:	080189d4 	.word	0x080189d4
 8000df8:	080189dc 	.word	0x080189dc
 8000dfc:	200058f0 	.word	0x200058f0
 8000e00:	080189e8 	.word	0x080189e8
 8000e04:	200017f0 	.word	0x200017f0
 8000e08:	080189f8 	.word	0x080189f8
 8000e0c:	08018a00 	.word	0x08018a00
 8000e10:	08018a04 	.word	0x08018a04
 8000e14:	08018a10 	.word	0x08018a10
 8000e18:	08018a20 	.word	0x08018a20
 8000e1c:	08018a30 	.word	0x08018a30
 8000e20:	08018a38 	.word	0x08018a38
 8000e24:	08018a48 	.word	0x08018a48
 8000e28:	08018a5c 	.word	0x08018a5c
 8000e2c:	08018a6c 	.word	0x08018a6c
				} else if (strcmp(name1, "onoff") == 0) {
 8000e30:	493e      	ldr	r1, [pc, #248]	; (8000f2c <httpd_post_finished+0x424>)
 8000e32:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8000e36:	f7ff f9cb 	bl	80001d0 <strcmp>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d10e      	bne.n	8000e5e <httpd_post_finished+0x356>
					T[id].onoff = atoi(token1);
 8000e40:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000e44:	f016 f870 	bl	8016f28 <atoi>
 8000e48:	4601      	mov	r1, r0
 8000e4a:	4839      	ldr	r0, [pc, #228]	; (8000f30 <httpd_post_finished+0x428>)
 8000e4c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000e50:	4613      	mov	r3, r2
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	4413      	add	r3, r2
 8000e56:	011b      	lsls	r3, r3, #4
 8000e58:	4403      	add	r3, r0
 8000e5a:	334c      	adds	r3, #76	; 0x4c
 8000e5c:	6019      	str	r1, [r3, #0]
				}
				/************************************************/
			}
			y++;
 8000e5e:	4b35      	ldr	r3, [pc, #212]	; (8000f34 <httpd_post_finished+0x42c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	3301      	adds	r3, #1
 8000e64:	4a33      	ldr	r2, [pc, #204]	; (8000f34 <httpd_post_finished+0x42c>)
 8000e66:	6013      	str	r3, [r2, #0]
		while ((token1 = strtok_r(rest1, "=", &rest1))) {
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	f107 0218 	add.w	r2, r7, #24
 8000e6e:	4932      	ldr	r1, [pc, #200]	; (8000f38 <httpd_post_finished+0x430>)
 8000e70:	4618      	mov	r0, r3
 8000e72:	f016 fa69 	bl	8017348 <strtok_r>
 8000e76:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8000e7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	f47f ae9e 	bne.w	8000bc0 <httpd_post_finished+0xb8>
		}
		z++;
 8000e84:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000e88:	3301      	adds	r3, #1
 8000e8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		memset(name0, '\0', sizeof(name0));
 8000e8e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e92:	2232      	movs	r2, #50	; 0x32
 8000e94:	2100      	movs	r1, #0
 8000e96:	4618      	mov	r0, r3
 8000e98:	f016 f8a4 	bl	8016fe4 <memset>
		memset(nametoken, '\0', sizeof(nametoken));
 8000e9c:	f107 0320 	add.w	r3, r7, #32
 8000ea0:	2232      	movs	r2, #50	; 0x32
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f016 f89d 	bl	8016fe4 <memset>
	while ((token = strtok_r(rest, "&", &rest))) {
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	f107 021c 	add.w	r2, r7, #28
 8000eb0:	4922      	ldr	r1, [pc, #136]	; (8000f3c <httpd_post_finished+0x434>)
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f016 fa48 	bl	8017348 <strtok_r>
 8000eb8:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
 8000ebc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f47f ae6f 	bne.w	8000ba4 <httpd_post_finished+0x9c>
	}
	memset(urlline, '\0', sizeof(urlline));
 8000ec6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000eca:	4622      	mov	r2, r4
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f016 f888 	bl	8016fe4 <memset>
	memset(bufervar, '\0', sizeof(bufervar));
 8000ed4:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4819      	ldr	r0, [pc, #100]	; (8000f40 <httpd_post_finished+0x438>)
 8000edc:	f016 f882 	bl	8016fe4 <memset>
//memset(json, '\0', sizeof(json));
//printf("httpd_post_finished! \r\n");
	/* default page is "login failed" */

	zerg_write_data_to_sd(num_lines - 1);	//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 8000ee0:	2039      	movs	r0, #57	; 0x39
 8000ee2:	f000 fed1 	bl	8001c88 <zerg_write_data_to_sd>

	snprintf(response_uri, response_uri_len, "/tab.shtml");
 8000ee6:	88fb      	ldrh	r3, [r7, #6]
 8000ee8:	4a16      	ldr	r2, [pc, #88]	; (8000f44 <httpd_post_finished+0x43c>)
 8000eea:	4619      	mov	r1, r3
 8000eec:	68b8      	ldr	r0, [r7, #8]
 8000eee:	f016 f94f 	bl	8017190 <sniprintf>
	if (current_connection == connection) {
 8000ef2:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <httpd_post_finished+0x440>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d110      	bne.n	8000f1e <httpd_post_finished+0x416>
		if (valid_connection == connection) {
 8000efc:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <httpd_post_finished+0x444>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	68fa      	ldr	r2, [r7, #12]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d105      	bne.n	8000f12 <httpd_post_finished+0x40a>
			/* login succeeded */
			snprintf(response_uri, response_uri_len, "/tab.shtml");
 8000f06:	88fb      	ldrh	r3, [r7, #6]
 8000f08:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <httpd_post_finished+0x43c>)
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	68b8      	ldr	r0, [r7, #8]
 8000f0e:	f016 f93f 	bl	8017190 <sniprintf>
		}
		current_connection = NULL;
 8000f12:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <httpd_post_finished+0x440>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
		valid_connection = NULL;
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <httpd_post_finished+0x444>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
	}
	connection = NULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	46ad      	mov	sp, r5
}
 8000f24:	bf00      	nop
 8000f26:	37a8      	adds	r7, #168	; 0xa8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bdb0      	pop	{r4, r5, r7, pc}
 8000f2c:	08018a78 	.word	0x08018a78
 8000f30:	200017f0 	.word	0x200017f0
 8000f34:	200058f0 	.word	0x200058f0
 8000f38:	08018a80 	.word	0x08018a80
 8000f3c:	08018a84 	.word	0x08018a84
 8000f40:	20002a10 	.word	0x20002a10
 8000f44:	08018a88 	.word	0x08018a88
 8000f48:	200001d4 	.word	0x200001d4
 8000f4c:	200001d8 	.word	0x200001d8

08000f50 <http_server_init>:
//////////////////// POST  END ////////////////////////

void http_server_init(void) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
	httpd_init();
 8000f54:	f00b fb1c 	bl	800c590 <httpd_init>

	http_set_ssi_handler(ssi_handler, (char const**) TAGS, 3);
 8000f58:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <http_server_init+0x30>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4808      	ldr	r0, [pc, #32]	; (8000f84 <http_server_init+0x34>)
 8000f62:	f00b fb35 	bl	800c5d0 <http_set_ssi_handler>
// 4. For LED Перед созданиме CGI_handle нам нужно назначить
	CGI_TAB[0] = FORM_CGI; // CGI структуру
 8000f66:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <http_server_init+0x38>)
 8000f68:	4a08      	ldr	r2, [pc, #32]	; (8000f8c <http_server_init+0x3c>)
 8000f6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f6e:	e883 0003 	stmia.w	r3, {r0, r1}

//http_set_cgi_handlers (&FORM_CGI, 1); // Это пример когда у нас всего один "Handler" пример из видео.
	http_set_cgi_handlers(CGI_TAB, 1); // 5. И теперь мы передадим структуру массива в CGI_handle!
 8000f72:	2101      	movs	r1, #1
 8000f74:	4804      	ldr	r0, [pc, #16]	; (8000f88 <http_server_init+0x38>)
 8000f76:	f00b fb6d 	bl	800c654 <http_set_cgi_handlers>
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	2000000c 	.word	0x2000000c
 8000f84:	08000599 	.word	0x08000599
 8000f88:	20005914 	.word	0x20005914
 8000f8c:	0801c260 	.word	0x0801c260

08000f90 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f98:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f9c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000fa0:	f003 0301 	and.w	r3, r3, #1
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d013      	beq.n	8000fd0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000fa8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fac:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000fb0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d00b      	beq.n	8000fd0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000fb8:	e000      	b.n	8000fbc <ITM_SendChar+0x2c>
    {
      __NOP();
 8000fba:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000fbc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d0f9      	beq.n	8000fba <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000fc6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000fd0:	687b      	ldr	r3, [r7, #4]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
	...

08000fe0 <_write>:
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_SDIO_SD_Init(void);
static void MX_USART6_UART_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart6, (uint8_t*) ptr, len, 50);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	b29a      	uxth	r2, r3
 8000ff0:	2332      	movs	r3, #50	; 0x32
 8000ff2:	68b9      	ldr	r1, [r7, #8]
 8000ff4:	480c      	ldr	r0, [pc, #48]	; (8001028 <_write+0x48>)
 8000ff6:	f005 f83f 	bl	8006078 <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
 8000ffe:	e009      	b.n	8001014 <_write+0x34>
		ITM_SendChar(*ptr++);
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	1c5a      	adds	r2, r3, #1
 8001004:	60ba      	str	r2, [r7, #8]
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ffc1 	bl	8000f90 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	3301      	adds	r3, #1
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	697a      	ldr	r2, [r7, #20]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	429a      	cmp	r2, r3
 800101a:	dbf1      	blt.n	8001000 <_write+0x20>
	}
	return len;
 800101c:	687b      	ldr	r3, [r7, #4]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20005a9c 	.word	0x20005a9c

0800102c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001030:	f001 f810 	bl	8002054 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001034:	f000 f818 	bl	8001068 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001038:	f000 f8f2 	bl	8001220 <MX_GPIO_Init>
  MX_DMA_Init();
 800103c:	f000 f8c8 	bl	80011d0 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8001040:	f000 f87c 	bl	800113c <MX_SDIO_SD_Init>
  MX_USART6_UART_Init();
 8001044:	f000 f89a 	bl	800117c <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8001048:	f006 f852 	bl	80070f0 <MX_FATFS_Init>
  MX_LWIP_Init();
 800104c:	f006 fa96 	bl	800757c <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  http_server_init();
 8001050:	f7ff ff7e 	bl	8000f50 <http_server_init>
  //zerg_format();
  //zerg_creat_folder(folder_name);
  //zerg_open();
  //zerg_write();
  //zerg_read();
  zerg_get_data_from_sd();
 8001054:	f000 fc24 	bl	80018a0 <zerg_get_data_from_sd>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      ethernetif_input(&gnetif);
 8001058:	4802      	ldr	r0, [pc, #8]	; (8001064 <main+0x38>)
 800105a:	f006 fe67 	bl	8007d2c <ethernetif_input>
      sys_check_timeouts();
 800105e:	f013 faa7 	bl	80145b0 <sys_check_timeouts>
      ethernetif_input(&gnetif);
 8001062:	e7f9      	b.n	8001058 <main+0x2c>
 8001064:	20005984 	.word	0x20005984

08001068 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b094      	sub	sp, #80	; 0x50
 800106c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800106e:	f107 0320 	add.w	r3, r7, #32
 8001072:	2230      	movs	r2, #48	; 0x30
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f015 ffb4 	bl	8016fe4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800108c:	2300      	movs	r3, #0
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	4b28      	ldr	r3, [pc, #160]	; (8001134 <SystemClock_Config+0xcc>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	4a27      	ldr	r2, [pc, #156]	; (8001134 <SystemClock_Config+0xcc>)
 8001096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800109a:	6413      	str	r3, [r2, #64]	; 0x40
 800109c:	4b25      	ldr	r3, [pc, #148]	; (8001134 <SystemClock_Config+0xcc>)
 800109e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a8:	2300      	movs	r3, #0
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	4b22      	ldr	r3, [pc, #136]	; (8001138 <SystemClock_Config+0xd0>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a21      	ldr	r2, [pc, #132]	; (8001138 <SystemClock_Config+0xd0>)
 80010b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	4b1f      	ldr	r3, [pc, #124]	; (8001138 <SystemClock_Config+0xd0>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010c4:	2301      	movs	r3, #1
 80010c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ce:	2302      	movs	r3, #2
 80010d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010d8:	2304      	movs	r3, #4
 80010da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010dc:	23a8      	movs	r3, #168	; 0xa8
 80010de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010e0:	2302      	movs	r3, #2
 80010e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010e4:	2307      	movs	r3, #7
 80010e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e8:	f107 0320 	add.w	r3, r7, #32
 80010ec:	4618      	mov	r0, r3
 80010ee:	f002 ffd3 	bl	8004098 <HAL_RCC_OscConfig>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010f8:	f000 f8fe 	bl	80012f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fc:	230f      	movs	r3, #15
 80010fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001100:	2302      	movs	r3, #2
 8001102:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001108:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800110c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800110e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001112:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001114:	f107 030c 	add.w	r3, r7, #12
 8001118:	2105      	movs	r1, #5
 800111a:	4618      	mov	r0, r3
 800111c:	f003 fa34 	bl	8004588 <HAL_RCC_ClockConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001126:	f000 f8e7 	bl	80012f8 <Error_Handler>
  }
}
 800112a:	bf00      	nop
 800112c:	3750      	adds	r7, #80	; 0x50
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40023800 	.word	0x40023800
 8001138:	40007000 	.word	0x40007000

0800113c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <MX_SDIO_SD_Init+0x38>)
 8001142:	4a0d      	ldr	r2, [pc, #52]	; (8001178 <MX_SDIO_SD_Init+0x3c>)
 8001144:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001146:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <MX_SDIO_SD_Init+0x38>)
 8001148:	2200      	movs	r2, #0
 800114a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800114c:	4b09      	ldr	r3, [pc, #36]	; (8001174 <MX_SDIO_SD_Init+0x38>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001152:	4b08      	ldr	r3, [pc, #32]	; (8001174 <MX_SDIO_SD_Init+0x38>)
 8001154:	2200      	movs	r2, #0
 8001156:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <MX_SDIO_SD_Init+0x38>)
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800115e:	4b05      	ldr	r3, [pc, #20]	; (8001174 <MX_SDIO_SD_Init+0x38>)
 8001160:	2200      	movs	r2, #0
 8001162:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001164:	4b03      	ldr	r3, [pc, #12]	; (8001174 <MX_SDIO_SD_Init+0x38>)
 8001166:	2200      	movs	r2, #0
 8001168:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	20005a18 	.word	0x20005a18
 8001178:	40012c00 	.word	0x40012c00

0800117c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001180:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <MX_USART6_UART_Init+0x4c>)
 8001182:	4a12      	ldr	r2, [pc, #72]	; (80011cc <MX_USART6_UART_Init+0x50>)
 8001184:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001186:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <MX_USART6_UART_Init+0x4c>)
 8001188:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800118c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <MX_USART6_UART_Init+0x4c>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <MX_USART6_UART_Init+0x4c>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800119a:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <MX_USART6_UART_Init+0x4c>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80011a0:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <MX_USART6_UART_Init+0x4c>)
 80011a2:	220c      	movs	r2, #12
 80011a4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011a6:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <MX_USART6_UART_Init+0x4c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <MX_USART6_UART_Init+0x4c>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80011b2:	4805      	ldr	r0, [pc, #20]	; (80011c8 <MX_USART6_UART_Init+0x4c>)
 80011b4:	f004 ff13 	bl	8005fde <HAL_UART_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80011be:	f000 f89b 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20005a9c 	.word	0x20005a9c
 80011cc:	40011400 	.word	0x40011400

080011d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	4b10      	ldr	r3, [pc, #64]	; (800121c <MX_DMA_Init+0x4c>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a0f      	ldr	r2, [pc, #60]	; (800121c <MX_DMA_Init+0x4c>)
 80011e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b0d      	ldr	r3, [pc, #52]	; (800121c <MX_DMA_Init+0x4c>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2100      	movs	r1, #0
 80011f6:	203b      	movs	r0, #59	; 0x3b
 80011f8:	f001 f89d 	bl	8002336 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80011fc:	203b      	movs	r0, #59	; 0x3b
 80011fe:	f001 f8b6 	bl	800236e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	2045      	movs	r0, #69	; 0x45
 8001208:	f001 f895 	bl	8002336 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800120c:	2045      	movs	r0, #69	; 0x45
 800120e:	f001 f8ae 	bl	800236e <HAL_NVIC_EnableIRQ>

}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40023800 	.word	0x40023800

08001220 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	; 0x28
 8001224:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
 8001234:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	613b      	str	r3, [r7, #16]
 800123a:	4b2d      	ldr	r3, [pc, #180]	; (80012f0 <MX_GPIO_Init+0xd0>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a2c      	ldr	r2, [pc, #176]	; (80012f0 <MX_GPIO_Init+0xd0>)
 8001240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b2a      	ldr	r3, [pc, #168]	; (80012f0 <MX_GPIO_Init+0xd0>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800124e:	613b      	str	r3, [r7, #16]
 8001250:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	4b26      	ldr	r3, [pc, #152]	; (80012f0 <MX_GPIO_Init+0xd0>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a25      	ldr	r2, [pc, #148]	; (80012f0 <MX_GPIO_Init+0xd0>)
 800125c:	f043 0304 	orr.w	r3, r3, #4
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b23      	ldr	r3, [pc, #140]	; (80012f0 <MX_GPIO_Init+0xd0>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	4b1f      	ldr	r3, [pc, #124]	; (80012f0 <MX_GPIO_Init+0xd0>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a1e      	ldr	r2, [pc, #120]	; (80012f0 <MX_GPIO_Init+0xd0>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b1c      	ldr	r3, [pc, #112]	; (80012f0 <MX_GPIO_Init+0xd0>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <MX_GPIO_Init+0xd0>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a17      	ldr	r2, [pc, #92]	; (80012f0 <MX_GPIO_Init+0xd0>)
 8001294:	f043 0302 	orr.w	r3, r3, #2
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <MX_GPIO_Init+0xd0>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	603b      	str	r3, [r7, #0]
 80012aa:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <MX_GPIO_Init+0xd0>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a10      	ldr	r2, [pc, #64]	; (80012f0 <MX_GPIO_Init+0xd0>)
 80012b0:	f043 0308 	orr.w	r3, r3, #8
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <MX_GPIO_Init+0xd0>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0308 	and.w	r3, r3, #8
 80012be:	603b      	str	r3, [r7, #0]
 80012c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2101      	movs	r1, #1
 80012c6:	480b      	ldr	r0, [pc, #44]	; (80012f4 <MX_GPIO_Init+0xd4>)
 80012c8:	f002 fecc 	bl	8004064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012cc:	2301      	movs	r3, #1
 80012ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d0:	2301      	movs	r3, #1
 80012d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	4619      	mov	r1, r3
 80012e2:	4804      	ldr	r0, [pc, #16]	; (80012f4 <MX_GPIO_Init+0xd4>)
 80012e4:	f002 fd22 	bl	8003d2c <HAL_GPIO_Init>

}
 80012e8:	bf00      	nop
 80012ea:	3728      	adds	r7, #40	; 0x28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40020000 	.word	0x40020000

080012f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012fc:	b672      	cpsid	i
}
 80012fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001300:	e7fe      	b.n	8001300 <Error_Handler+0x8>
	...

08001304 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	607b      	str	r3, [r7, #4]
 800130e:	4b10      	ldr	r3, [pc, #64]	; (8001350 <HAL_MspInit+0x4c>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	4a0f      	ldr	r2, [pc, #60]	; (8001350 <HAL_MspInit+0x4c>)
 8001314:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001318:	6453      	str	r3, [r2, #68]	; 0x44
 800131a:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <HAL_MspInit+0x4c>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	603b      	str	r3, [r7, #0]
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <HAL_MspInit+0x4c>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	4a08      	ldr	r2, [pc, #32]	; (8001350 <HAL_MspInit+0x4c>)
 8001330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001334:	6413      	str	r3, [r2, #64]	; 0x40
 8001336:	4b06      	ldr	r3, [pc, #24]	; (8001350 <HAL_MspInit+0x4c>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133e:	603b      	str	r3, [r7, #0]
 8001340:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	40023800 	.word	0x40023800

08001354 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08a      	sub	sp, #40	; 0x28
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a70      	ldr	r2, [pc, #448]	; (8001534 <HAL_SD_MspInit+0x1e0>)
 8001372:	4293      	cmp	r3, r2
 8001374:	f040 80da 	bne.w	800152c <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001378:	2300      	movs	r3, #0
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	4b6e      	ldr	r3, [pc, #440]	; (8001538 <HAL_SD_MspInit+0x1e4>)
 800137e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001380:	4a6d      	ldr	r2, [pc, #436]	; (8001538 <HAL_SD_MspInit+0x1e4>)
 8001382:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001386:	6453      	str	r3, [r2, #68]	; 0x44
 8001388:	4b6b      	ldr	r3, [pc, #428]	; (8001538 <HAL_SD_MspInit+0x1e4>)
 800138a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	4b67      	ldr	r3, [pc, #412]	; (8001538 <HAL_SD_MspInit+0x1e4>)
 800139a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139c:	4a66      	ldr	r2, [pc, #408]	; (8001538 <HAL_SD_MspInit+0x1e4>)
 800139e:	f043 0304 	orr.w	r3, r3, #4
 80013a2:	6313      	str	r3, [r2, #48]	; 0x30
 80013a4:	4b64      	ldr	r3, [pc, #400]	; (8001538 <HAL_SD_MspInit+0x1e4>)
 80013a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b0:	2300      	movs	r3, #0
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	4b60      	ldr	r3, [pc, #384]	; (8001538 <HAL_SD_MspInit+0x1e4>)
 80013b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b8:	4a5f      	ldr	r2, [pc, #380]	; (8001538 <HAL_SD_MspInit+0x1e4>)
 80013ba:	f043 0308 	orr.w	r3, r3, #8
 80013be:	6313      	str	r3, [r2, #48]	; 0x30
 80013c0:	4b5d      	ldr	r3, [pc, #372]	; (8001538 <HAL_SD_MspInit+0x1e4>)
 80013c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c4:	f003 0308 	and.w	r3, r3, #8
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80013cc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80013d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d2:	2302      	movs	r3, #2
 80013d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d6:	2301      	movs	r3, #1
 80013d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013da:	2303      	movs	r3, #3
 80013dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80013de:	230c      	movs	r3, #12
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	4619      	mov	r1, r3
 80013e8:	4854      	ldr	r0, [pc, #336]	; (800153c <HAL_SD_MspInit+0x1e8>)
 80013ea:	f002 fc9f 	bl	8003d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f4:	2302      	movs	r3, #2
 80013f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fc:	2303      	movs	r3, #3
 80013fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001400:	230c      	movs	r3, #12
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	4619      	mov	r1, r3
 800140a:	484c      	ldr	r0, [pc, #304]	; (800153c <HAL_SD_MspInit+0x1e8>)
 800140c:	f002 fc8e 	bl	8003d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001410:	2304      	movs	r3, #4
 8001412:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001414:	2302      	movs	r3, #2
 8001416:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001418:	2301      	movs	r3, #1
 800141a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141c:	2303      	movs	r3, #3
 800141e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001420:	230c      	movs	r3, #12
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	4619      	mov	r1, r3
 800142a:	4845      	ldr	r0, [pc, #276]	; (8001540 <HAL_SD_MspInit+0x1ec>)
 800142c:	f002 fc7e 	bl	8003d2c <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001430:	4b44      	ldr	r3, [pc, #272]	; (8001544 <HAL_SD_MspInit+0x1f0>)
 8001432:	4a45      	ldr	r2, [pc, #276]	; (8001548 <HAL_SD_MspInit+0x1f4>)
 8001434:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001436:	4b43      	ldr	r3, [pc, #268]	; (8001544 <HAL_SD_MspInit+0x1f0>)
 8001438:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800143c:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800143e:	4b41      	ldr	r3, [pc, #260]	; (8001544 <HAL_SD_MspInit+0x1f0>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001444:	4b3f      	ldr	r3, [pc, #252]	; (8001544 <HAL_SD_MspInit+0x1f0>)
 8001446:	2200      	movs	r2, #0
 8001448:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800144a:	4b3e      	ldr	r3, [pc, #248]	; (8001544 <HAL_SD_MspInit+0x1f0>)
 800144c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001450:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001452:	4b3c      	ldr	r3, [pc, #240]	; (8001544 <HAL_SD_MspInit+0x1f0>)
 8001454:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001458:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800145a:	4b3a      	ldr	r3, [pc, #232]	; (8001544 <HAL_SD_MspInit+0x1f0>)
 800145c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001460:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001462:	4b38      	ldr	r3, [pc, #224]	; (8001544 <HAL_SD_MspInit+0x1f0>)
 8001464:	2220      	movs	r2, #32
 8001466:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001468:	4b36      	ldr	r3, [pc, #216]	; (8001544 <HAL_SD_MspInit+0x1f0>)
 800146a:	2200      	movs	r2, #0
 800146c:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800146e:	4b35      	ldr	r3, [pc, #212]	; (8001544 <HAL_SD_MspInit+0x1f0>)
 8001470:	2204      	movs	r2, #4
 8001472:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001474:	4b33      	ldr	r3, [pc, #204]	; (8001544 <HAL_SD_MspInit+0x1f0>)
 8001476:	2203      	movs	r2, #3
 8001478:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800147a:	4b32      	ldr	r3, [pc, #200]	; (8001544 <HAL_SD_MspInit+0x1f0>)
 800147c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001480:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001482:	4b30      	ldr	r3, [pc, #192]	; (8001544 <HAL_SD_MspInit+0x1f0>)
 8001484:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001488:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800148a:	482e      	ldr	r0, [pc, #184]	; (8001544 <HAL_SD_MspInit+0x1f0>)
 800148c:	f000 ff8a 	bl	80023a4 <HAL_DMA_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8001496:	f7ff ff2f 	bl	80012f8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a29      	ldr	r2, [pc, #164]	; (8001544 <HAL_SD_MspInit+0x1f0>)
 800149e:	641a      	str	r2, [r3, #64]	; 0x40
 80014a0:	4a28      	ldr	r2, [pc, #160]	; (8001544 <HAL_SD_MspInit+0x1f0>)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80014a6:	4b29      	ldr	r3, [pc, #164]	; (800154c <HAL_SD_MspInit+0x1f8>)
 80014a8:	4a29      	ldr	r2, [pc, #164]	; (8001550 <HAL_SD_MspInit+0x1fc>)
 80014aa:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80014ac:	4b27      	ldr	r3, [pc, #156]	; (800154c <HAL_SD_MspInit+0x1f8>)
 80014ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014b2:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014b4:	4b25      	ldr	r3, [pc, #148]	; (800154c <HAL_SD_MspInit+0x1f8>)
 80014b6:	2240      	movs	r2, #64	; 0x40
 80014b8:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ba:	4b24      	ldr	r3, [pc, #144]	; (800154c <HAL_SD_MspInit+0x1f8>)
 80014bc:	2200      	movs	r2, #0
 80014be:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014c0:	4b22      	ldr	r3, [pc, #136]	; (800154c <HAL_SD_MspInit+0x1f8>)
 80014c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014c6:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014c8:	4b20      	ldr	r3, [pc, #128]	; (800154c <HAL_SD_MspInit+0x1f8>)
 80014ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014ce:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014d0:	4b1e      	ldr	r3, [pc, #120]	; (800154c <HAL_SD_MspInit+0x1f8>)
 80014d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014d6:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80014d8:	4b1c      	ldr	r3, [pc, #112]	; (800154c <HAL_SD_MspInit+0x1f8>)
 80014da:	2220      	movs	r2, #32
 80014dc:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014de:	4b1b      	ldr	r3, [pc, #108]	; (800154c <HAL_SD_MspInit+0x1f8>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80014e4:	4b19      	ldr	r3, [pc, #100]	; (800154c <HAL_SD_MspInit+0x1f8>)
 80014e6:	2204      	movs	r2, #4
 80014e8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80014ea:	4b18      	ldr	r3, [pc, #96]	; (800154c <HAL_SD_MspInit+0x1f8>)
 80014ec:	2203      	movs	r2, #3
 80014ee:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80014f0:	4b16      	ldr	r3, [pc, #88]	; (800154c <HAL_SD_MspInit+0x1f8>)
 80014f2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80014f6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80014f8:	4b14      	ldr	r3, [pc, #80]	; (800154c <HAL_SD_MspInit+0x1f8>)
 80014fa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80014fe:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001500:	4812      	ldr	r0, [pc, #72]	; (800154c <HAL_SD_MspInit+0x1f8>)
 8001502:	f000 ff4f 	bl	80023a4 <HAL_DMA_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 800150c:	f7ff fef4 	bl	80012f8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4a0e      	ldr	r2, [pc, #56]	; (800154c <HAL_SD_MspInit+0x1f8>)
 8001514:	63da      	str	r2, [r3, #60]	; 0x3c
 8001516:	4a0d      	ldr	r2, [pc, #52]	; (800154c <HAL_SD_MspInit+0x1f8>)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800151c:	2200      	movs	r2, #0
 800151e:	2100      	movs	r1, #0
 8001520:	2031      	movs	r0, #49	; 0x31
 8001522:	f000 ff08 	bl	8002336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001526:	2031      	movs	r0, #49	; 0x31
 8001528:	f000 ff21 	bl	800236e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800152c:	bf00      	nop
 800152e:	3728      	adds	r7, #40	; 0x28
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40012c00 	.word	0x40012c00
 8001538:	40023800 	.word	0x40023800
 800153c:	40020800 	.word	0x40020800
 8001540:	40020c00 	.word	0x40020c00
 8001544:	20005924 	.word	0x20005924
 8001548:	40026458 	.word	0x40026458
 800154c:	200059b8 	.word	0x200059b8
 8001550:	400264a0 	.word	0x400264a0

08001554 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	; 0x28
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	f107 0314 	add.w	r3, r7, #20
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a19      	ldr	r2, [pc, #100]	; (80015d8 <HAL_UART_MspInit+0x84>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d12b      	bne.n	80015ce <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
 800157a:	4b18      	ldr	r3, [pc, #96]	; (80015dc <HAL_UART_MspInit+0x88>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	4a17      	ldr	r2, [pc, #92]	; (80015dc <HAL_UART_MspInit+0x88>)
 8001580:	f043 0320 	orr.w	r3, r3, #32
 8001584:	6453      	str	r3, [r2, #68]	; 0x44
 8001586:	4b15      	ldr	r3, [pc, #84]	; (80015dc <HAL_UART_MspInit+0x88>)
 8001588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158a:	f003 0320 	and.w	r3, r3, #32
 800158e:	613b      	str	r3, [r7, #16]
 8001590:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	4b11      	ldr	r3, [pc, #68]	; (80015dc <HAL_UART_MspInit+0x88>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a10      	ldr	r2, [pc, #64]	; (80015dc <HAL_UART_MspInit+0x88>)
 800159c:	f043 0304 	orr.w	r3, r3, #4
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <HAL_UART_MspInit+0x88>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015ae:	23c0      	movs	r3, #192	; 0xc0
 80015b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b2:	2302      	movs	r3, #2
 80015b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ba:	2303      	movs	r3, #3
 80015bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80015be:	2308      	movs	r3, #8
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	4619      	mov	r1, r3
 80015c8:	4805      	ldr	r0, [pc, #20]	; (80015e0 <HAL_UART_MspInit+0x8c>)
 80015ca:	f002 fbaf 	bl	8003d2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80015ce:	bf00      	nop
 80015d0:	3728      	adds	r7, #40	; 0x28
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40011400 	.word	0x40011400
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40020800 	.word	0x40020800

080015e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <NMI_Handler+0x4>

080015ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ee:	e7fe      	b.n	80015ee <HardFault_Handler+0x4>

080015f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <MemManage_Handler+0x4>

080015f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015fa:	e7fe      	b.n	80015fa <BusFault_Handler+0x4>

080015fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <UsageFault_Handler+0x4>

08001602 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001630:	f000 fd62 	bl	80020f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}

08001638 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800163c:	4802      	ldr	r0, [pc, #8]	; (8001648 <SDIO_IRQHandler+0x10>)
 800163e:	f003 fc15 	bl	8004e6c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20005a18 	.word	0x20005a18

0800164c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001650:	4802      	ldr	r0, [pc, #8]	; (800165c <DMA2_Stream3_IRQHandler+0x10>)
 8001652:	f000 ffcf 	bl	80025f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20005924 	.word	0x20005924

08001660 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001664:	4802      	ldr	r0, [pc, #8]	; (8001670 <DMA2_Stream6_IRQHandler+0x10>)
 8001666:	f000 ffc5 	bl	80025f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	200059b8 	.word	0x200059b8

08001674 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
	return 1;
 8001678:	2301      	movs	r3, #1
}
 800167a:	4618      	mov	r0, r3
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <_kill>:

int _kill(int pid, int sig)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800168e:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <_kill+0x20>)
 8001690:	2216      	movs	r2, #22
 8001692:	601a      	str	r2, [r3, #0]
	return -1;
 8001694:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001698:	4618      	mov	r0, r3
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	20016dd8 	.word	0x20016dd8

080016a8 <_exit>:

void _exit (int status)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80016b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff ffe5 	bl	8001684 <_kill>
	while (1) {}		/* Make sure we hang here */
 80016ba:	e7fe      	b.n	80016ba <_exit+0x12>

080016bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	e00a      	b.n	80016e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016ce:	f3af 8000 	nop.w
 80016d2:	4601      	mov	r1, r0
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	1c5a      	adds	r2, r3, #1
 80016d8:	60ba      	str	r2, [r7, #8]
 80016da:	b2ca      	uxtb	r2, r1
 80016dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	3301      	adds	r3, #1
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	697a      	ldr	r2, [r7, #20]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	dbf0      	blt.n	80016ce <_read+0x12>
	}

return len;
 80016ec:	687b      	ldr	r3, [r7, #4]
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b083      	sub	sp, #12
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
	return -1;
 80016fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001702:	4618      	mov	r0, r3
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800170e:	b480      	push	{r7}
 8001710:	b083      	sub	sp, #12
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
 8001716:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800171e:	605a      	str	r2, [r3, #4]
	return 0;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <_isatty>:

int _isatty(int file)
{
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
	return 1;
 8001736:	2301      	movs	r3, #1
}
 8001738:	4618      	mov	r0, r3
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
	return 0;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
	...

08001760 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001760:	b480      	push	{r7}
 8001762:	b087      	sub	sp, #28
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001768:	4a14      	ldr	r2, [pc, #80]	; (80017bc <_sbrk+0x5c>)
 800176a:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <_sbrk+0x60>)
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001774:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <_sbrk+0x64>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d102      	bne.n	8001782 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800177c:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <_sbrk+0x64>)
 800177e:	4a12      	ldr	r2, [pc, #72]	; (80017c8 <_sbrk+0x68>)
 8001780:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <_sbrk+0x64>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	429a      	cmp	r2, r3
 800178e:	d205      	bcs.n	800179c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001790:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <_sbrk+0x6c>)
 8001792:	220c      	movs	r2, #12
 8001794:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001796:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800179a:	e009      	b.n	80017b0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800179c:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <_sbrk+0x64>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017a2:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <_sbrk+0x64>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4413      	add	r3, r2
 80017aa:	4a06      	ldr	r2, [pc, #24]	; (80017c4 <_sbrk+0x64>)
 80017ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ae:	68fb      	ldr	r3, [r7, #12]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	371c      	adds	r7, #28
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	20020000 	.word	0x20020000
 80017c0:	00000400 	.word	0x00000400
 80017c4:	200001dc 	.word	0x200001dc
 80017c8:	20016de8 	.word	0x20016de8
 80017cc:	20016dd8 	.word	0x20016dd8

080017d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <SystemInit+0x20>)
 80017d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017da:	4a05      	ldr	r2, [pc, #20]	; (80017f0 <SystemInit+0x20>)
 80017dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <clear_buffer>:
uint32_t total, free_space;

extern struct table T[num_lines];		   // доступ из вне к 'struct table'.
/*--------------------------------------------------------------------------------------------------------------*/
// Очищаем буфер. / Clear buffer
void clear_buffer(void) {
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
	for (int i = 0; i < 100; i++)
 80017fa:	2300      	movs	r3, #0
 80017fc:	607b      	str	r3, [r7, #4]
 80017fe:	e007      	b.n	8001810 <clear_buffer+0x1c>
		buffer[i] = '\0'; // BUFFER_SIZE
 8001800:	4a08      	ldr	r2, [pc, #32]	; (8001824 <clear_buffer+0x30>)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4413      	add	r3, r2
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 100; i++)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	3301      	adds	r3, #1
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b63      	cmp	r3, #99	; 0x63
 8001814:	ddf4      	ble.n	8001800 <clear_buffer+0xc>
}
 8001816:	bf00      	nop
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	200001e0 	.word	0x200001e0

08001828 <zerg_mount>:
/*--------------------------------------------------------------------------------------------------------------*/
// Монтируем SD-карту / Mount SD card
void zerg_mount(void) {
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
	if (f_mount(&SDFatFS, (TCHAR const*) SDPath, 0) != FR_OK) {
 800182c:	2200      	movs	r2, #0
 800182e:	4908      	ldr	r1, [pc, #32]	; (8001850 <zerg_mount+0x28>)
 8001830:	4808      	ldr	r0, [pc, #32]	; (8001854 <zerg_mount+0x2c>)
 8001832:	f008 f951 	bl	8009ad8 <f_mount>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <zerg_mount+0x1c>
		printf("Error Mounting SD Card\r\n");
 800183c:	4806      	ldr	r0, [pc, #24]	; (8001858 <zerg_mount+0x30>)
 800183e:	f015 fc5f 	bl	8017100 <puts>
	} else {
		printf("SD card mounted successfully!\r\n");
	}
}
 8001842:	e002      	b.n	800184a <zerg_mount+0x22>
		printf("SD card mounted successfully!\r\n");
 8001844:	4805      	ldr	r0, [pc, #20]	; (800185c <zerg_mount+0x34>)
 8001846:	f015 fc5b 	bl	8017100 <puts>
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20008650 	.word	0x20008650
 8001854:	20009684 	.word	0x20009684
 8001858:	08018aac 	.word	0x08018aac
 800185c:	08018ac4 	.word	0x08018ac4

08001860 <zerg_open>:
		printf("SD-card formated successfully!\r\n");
	}
}
/*--------------------------------------------------------------------------------------------------------------*/
// Создаем файл для записи если не существует то, создаем его! / Open file for writing (Create)
void zerg_open(void) {
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
	if (f_open(&SDFile, (char*) name_sd, FA_CREATE_ALWAYS | FA_WRITE)
 8001864:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <zerg_open+0x30>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	220a      	movs	r2, #10
 800186a:	4619      	mov	r1, r3
 800186c:	4809      	ldr	r0, [pc, #36]	; (8001894 <zerg_open+0x34>)
 800186e:	f008 f979 	bl	8009b64 <f_open>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d003      	beq.n	8001880 <zerg_open+0x20>
	//if (f_open(&SDFile, (char*) "0:name_sd", FA_CREATE_ALWAYS | FA_WRITE) //Create destination file on the drive 0
			!= FR_OK) {
		printf("Error openning file\r\n");
 8001878:	4807      	ldr	r0, [pc, #28]	; (8001898 <zerg_open+0x38>)
 800187a:	f015 fc41 	bl	8017100 <puts>
	} else {
		printf("File %s Openned Successfully!\r\n", name_sd);
	}
}
 800187e:	e005      	b.n	800188c <zerg_open+0x2c>
		printf("File %s Openned Successfully!\r\n", name_sd);
 8001880:	4b03      	ldr	r3, [pc, #12]	; (8001890 <zerg_open+0x30>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4619      	mov	r1, r3
 8001886:	4805      	ldr	r0, [pc, #20]	; (800189c <zerg_open+0x3c>)
 8001888:	f015 fbb4 	bl	8016ff4 <iprintf>
}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20000134 	.word	0x20000134
 8001894:	20008654 	.word	0x20008654
 8001898:	08018b20 	.word	0x08018b20
 800189c:	08018b38 	.word	0x08018b38

080018a0 <zerg_get_data_from_sd>:
	}
	f_close(&SDFile);
	clear_buffer();
}

int zerg_get_data_from_sd(void) {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08a      	sub	sp, #40	; 0x28
 80018a4:	af00      	add	r7, sp, #0
	zerg_mount();
 80018a6:	f7ff ffbf 	bl	8001828 <zerg_mount>
	f_open(&SDFile, (char*) name_sd, FA_READ);
 80018aa:	4ba3      	ldr	r3, [pc, #652]	; (8001b38 <zerg_get_data_from_sd+0x298>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2201      	movs	r2, #1
 80018b0:	4619      	mov	r1, r3
 80018b2:	48a2      	ldr	r0, [pc, #648]	; (8001b3c <zerg_get_data_from_sd+0x29c>)
 80018b4:	f008 f956 	bl	8009b64 <f_open>
	memset(rtext, 0, sizeof(rtext));
 80018b8:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80018bc:	2100      	movs	r1, #0
 80018be:	48a0      	ldr	r0, [pc, #640]	; (8001b40 <zerg_get_data_from_sd+0x2a0>)
 80018c0:	f015 fb90 	bl	8016fe4 <memset>
	res = f_read(&SDFile, rtext, sizeof(rtext), (UINT*) &bytesread);
 80018c4:	4b9f      	ldr	r3, [pc, #636]	; (8001b44 <zerg_get_data_from_sd+0x2a4>)
 80018c6:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80018ca:	499d      	ldr	r1, [pc, #628]	; (8001b40 <zerg_get_data_from_sd+0x2a0>)
 80018cc:	489b      	ldr	r0, [pc, #620]	; (8001b3c <zerg_get_data_from_sd+0x29c>)
 80018ce:	f008 fb15 	bl	8009efc <f_read>
 80018d2:	4603      	mov	r3, r0
 80018d4:	461a      	mov	r2, r3
 80018d6:	4b9c      	ldr	r3, [pc, #624]	; (8001b48 <zerg_get_data_from_sd+0x2a8>)
 80018d8:	701a      	strb	r2, [r3, #0]
	if ((bytesread == 0) || (res != FR_OK)) {
 80018da:	4b9a      	ldr	r3, [pc, #616]	; (8001b44 <zerg_get_data_from_sd+0x2a4>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d003      	beq.n	80018ea <zerg_get_data_from_sd+0x4a>
 80018e2:	4b99      	ldr	r3, [pc, #612]	; (8001b48 <zerg_get_data_from_sd+0x2a8>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d004      	beq.n	80018f4 <zerg_get_data_from_sd+0x54>
		printf("Failed to read file!\r\n");
 80018ea:	4898      	ldr	r0, [pc, #608]	; (8001b4c <zerg_get_data_from_sd+0x2ac>)
 80018ec:	f015 fc08 	bl	8017100 <puts>
		return 0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	e1b5      	b.n	8001c60 <zerg_get_data_from_sd+0x3c0>
		//printf("File *%s* readed successfully! \n", name);
		//printf("File *%s* has content it is; %s\r\n",name_sd, (char *)rtext);
		//printf("Data from SD card:\r\n");
		//printf("%s\r\n", rtext);
		char *token1, *token2, *token3;
		char *rest = rtext;
 80018f4:	4b92      	ldr	r3, [pc, #584]	; (8001b40 <zerg_get_data_from_sd+0x2a0>)
 80018f6:	60bb      	str	r3, [r7, #8]
		char *name1; // для записи в структуру
		int id;
		int z = 0;
 80018f8:	2300      	movs	r3, #0
 80018fa:	61fb      	str	r3, [r7, #28]
		int y = 0;
 80018fc:	2300      	movs	r3, #0
 80018fe:	61bb      	str	r3, [r7, #24]

		while ((token1 = strtok_r(rest, "\n", &rest))) {
 8001900:	e19c      	b.n	8001c3c <zerg_get_data_from_sd+0x39c>
			//printf("token - %s\n", token1);
			char *rest1 = token1;
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	607b      	str	r3, [r7, #4]
			y = 0;
 8001906:	2300      	movs	r3, #0
 8001908:	61bb      	str	r3, [r7, #24]
			while ((token2 = strtok_r(rest1, "=", &rest1))) {
 800190a:	e189      	b.n	8001c20 <zerg_get_data_from_sd+0x380>
				//printf("NAME - %s\n", token2);
				z = 0;
 800190c:	2300      	movs	r3, #0
 800190e:	61fb      	str	r3, [r7, #28]
				if (y == 0) {
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d11b      	bne.n	800194e <zerg_get_data_from_sd+0xae>
					// получение id
					char *rest2 = token2;
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	603b      	str	r3, [r7, #0]
					while ((token3 = strtok_r(rest2, "_", &rest2))) {
 800191a:	e00e      	b.n	800193a <zerg_get_data_from_sd+0x9a>
						if (z == 0) {
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <zerg_get_data_from_sd+0x86>
							name1 = token2;
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
						}
						if (z == 1) {
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d103      	bne.n	8001934 <zerg_get_data_from_sd+0x94>
							id = atoi(token3);
 800192c:	68f8      	ldr	r0, [r7, #12]
 800192e:	f015 fafb 	bl	8016f28 <atoi>
 8001932:	6238      	str	r0, [r7, #32]
							//printf("ID %d\n", id);
						}
						z++;
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	3301      	adds	r3, #1
 8001938:	61fb      	str	r3, [r7, #28]
					while ((token3 = strtok_r(rest2, "_", &rest2))) {
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	463a      	mov	r2, r7
 800193e:	4984      	ldr	r1, [pc, #528]	; (8001b50 <zerg_get_data_from_sd+0x2b0>)
 8001940:	4618      	mov	r0, r3
 8001942:	f015 fd01 	bl	8017348 <strtok_r>
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1e6      	bne.n	800191c <zerg_get_data_from_sd+0x7c>
					}
				}
				if (y == 1) {
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	2b01      	cmp	r3, #1
 8001952:	f040 8162 	bne.w	8001c1a <zerg_get_data_from_sd+0x37a>
					//printf("VAL = %s\n", token2);
					// записываем в структуру
					/************************************************/
					if (strcmp(name1, "pulluptype") == 0) {
 8001956:	497f      	ldr	r1, [pc, #508]	; (8001b54 <zerg_get_data_from_sd+0x2b4>)
 8001958:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800195a:	f7fe fc39 	bl	80001d0 <strcmp>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d117      	bne.n	8001994 <zerg_get_data_from_sd+0xf4>
						strcpy(T[id].pulluptype, token2);
 8001964:	6a3a      	ldr	r2, [r7, #32]
 8001966:	4613      	mov	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	011b      	lsls	r3, r3, #4
 800196e:	4a7a      	ldr	r2, [pc, #488]	; (8001b58 <zerg_get_data_from_sd+0x2b8>)
 8001970:	4413      	add	r3, r2
 8001972:	6939      	ldr	r1, [r7, #16]
 8001974:	4618      	mov	r0, r3
 8001976:	f015 fc7b 	bl	8017270 <strcpy>
						printf(" pulluptype_%d is: %s \n", id,
								T[id].pulluptype);
 800197a:	6a3a      	ldr	r2, [r7, #32]
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	011b      	lsls	r3, r3, #4
 8001984:	4a74      	ldr	r2, [pc, #464]	; (8001b58 <zerg_get_data_from_sd+0x2b8>)
 8001986:	4413      	add	r3, r2
						printf(" pulluptype_%d is: %s \n", id,
 8001988:	461a      	mov	r2, r3
 800198a:	6a39      	ldr	r1, [r7, #32]
 800198c:	4873      	ldr	r0, [pc, #460]	; (8001b5c <zerg_get_data_from_sd+0x2bc>)
 800198e:	f015 fb31 	bl	8016ff4 <iprintf>
 8001992:	e142      	b.n	8001c1a <zerg_get_data_from_sd+0x37a>
					} else if (strcmp(name1, "bounceinterval") == 0) {
 8001994:	4972      	ldr	r1, [pc, #456]	; (8001b60 <zerg_get_data_from_sd+0x2c0>)
 8001996:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001998:	f7fe fc1a 	bl	80001d0 <strcmp>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d11b      	bne.n	80019da <zerg_get_data_from_sd+0x13a>
						T[id].bounceinterval = atoi(token2);
 80019a2:	6938      	ldr	r0, [r7, #16]
 80019a4:	f015 fac0 	bl	8016f28 <atoi>
 80019a8:	4601      	mov	r1, r0
 80019aa:	486b      	ldr	r0, [pc, #428]	; (8001b58 <zerg_get_data_from_sd+0x2b8>)
 80019ac:	6a3a      	ldr	r2, [r7, #32]
 80019ae:	4613      	mov	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4413      	add	r3, r2
 80019b4:	011b      	lsls	r3, r3, #4
 80019b6:	4403      	add	r3, r0
 80019b8:	3314      	adds	r3, #20
 80019ba:	6019      	str	r1, [r3, #0]
						printf(" bounceinterval_%d is: %d \n", id,
 80019bc:	4966      	ldr	r1, [pc, #408]	; (8001b58 <zerg_get_data_from_sd+0x2b8>)
 80019be:	6a3a      	ldr	r2, [r7, #32]
 80019c0:	4613      	mov	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4413      	add	r3, r2
 80019c6:	011b      	lsls	r3, r3, #4
 80019c8:	440b      	add	r3, r1
 80019ca:	3314      	adds	r3, #20
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	461a      	mov	r2, r3
 80019d0:	6a39      	ldr	r1, [r7, #32]
 80019d2:	4864      	ldr	r0, [pc, #400]	; (8001b64 <zerg_get_data_from_sd+0x2c4>)
 80019d4:	f015 fb0e 	bl	8016ff4 <iprintf>
 80019d8:	e11f      	b.n	8001c1a <zerg_get_data_from_sd+0x37a>
								T[id].bounceinterval);
					} else if (strcmp(name1, "holdinterval") == 0) {
 80019da:	4963      	ldr	r1, [pc, #396]	; (8001b68 <zerg_get_data_from_sd+0x2c8>)
 80019dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80019de:	f7fe fbf7 	bl	80001d0 <strcmp>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d11b      	bne.n	8001a20 <zerg_get_data_from_sd+0x180>
						T[id].holdinterval = atoi(token2);
 80019e8:	6938      	ldr	r0, [r7, #16]
 80019ea:	f015 fa9d 	bl	8016f28 <atoi>
 80019ee:	4601      	mov	r1, r0
 80019f0:	4859      	ldr	r0, [pc, #356]	; (8001b58 <zerg_get_data_from_sd+0x2b8>)
 80019f2:	6a3a      	ldr	r2, [r7, #32]
 80019f4:	4613      	mov	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4413      	add	r3, r2
 80019fa:	011b      	lsls	r3, r3, #4
 80019fc:	4403      	add	r3, r0
 80019fe:	3318      	adds	r3, #24
 8001a00:	6019      	str	r1, [r3, #0]
						printf(" holdinterval_%d is: %d \n", id,
 8001a02:	4955      	ldr	r1, [pc, #340]	; (8001b58 <zerg_get_data_from_sd+0x2b8>)
 8001a04:	6a3a      	ldr	r2, [r7, #32]
 8001a06:	4613      	mov	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	011b      	lsls	r3, r3, #4
 8001a0e:	440b      	add	r3, r1
 8001a10:	3318      	adds	r3, #24
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	6a39      	ldr	r1, [r7, #32]
 8001a18:	4854      	ldr	r0, [pc, #336]	; (8001b6c <zerg_get_data_from_sd+0x2cc>)
 8001a1a:	f015 faeb 	bl	8016ff4 <iprintf>
 8001a1e:	e0fc      	b.n	8001c1a <zerg_get_data_from_sd+0x37a>
								T[id].holdinterval);
					} else if (strcmp(name1, "repeat") == 0) {
 8001a20:	4953      	ldr	r1, [pc, #332]	; (8001b70 <zerg_get_data_from_sd+0x2d0>)
 8001a22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a24:	f7fe fbd4 	bl	80001d0 <strcmp>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d11b      	bne.n	8001a66 <zerg_get_data_from_sd+0x1c6>
						T[id].repeat = atoi(token2);
 8001a2e:	6938      	ldr	r0, [r7, #16]
 8001a30:	f015 fa7a 	bl	8016f28 <atoi>
 8001a34:	4601      	mov	r1, r0
 8001a36:	4848      	ldr	r0, [pc, #288]	; (8001b58 <zerg_get_data_from_sd+0x2b8>)
 8001a38:	6a3a      	ldr	r2, [r7, #32]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	4413      	add	r3, r2
 8001a40:	011b      	lsls	r3, r3, #4
 8001a42:	4403      	add	r3, r0
 8001a44:	331c      	adds	r3, #28
 8001a46:	6019      	str	r1, [r3, #0]
						printf(" repeat_%d is: %d \n", id, T[id].repeat);
 8001a48:	4943      	ldr	r1, [pc, #268]	; (8001b58 <zerg_get_data_from_sd+0x2b8>)
 8001a4a:	6a3a      	ldr	r2, [r7, #32]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	011b      	lsls	r3, r3, #4
 8001a54:	440b      	add	r3, r1
 8001a56:	331c      	adds	r3, #28
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	6a39      	ldr	r1, [r7, #32]
 8001a5e:	4845      	ldr	r0, [pc, #276]	; (8001b74 <zerg_get_data_from_sd+0x2d4>)
 8001a60:	f015 fac8 	bl	8016ff4 <iprintf>
 8001a64:	e0d9      	b.n	8001c1a <zerg_get_data_from_sd+0x37a>
					} else if (strcmp(name1, "repeatinterval") == 0) {
 8001a66:	4944      	ldr	r1, [pc, #272]	; (8001b78 <zerg_get_data_from_sd+0x2d8>)
 8001a68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a6a:	f7fe fbb1 	bl	80001d0 <strcmp>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d11b      	bne.n	8001aac <zerg_get_data_from_sd+0x20c>
						T[id].repeatinterval = atoi(token2);
 8001a74:	6938      	ldr	r0, [r7, #16]
 8001a76:	f015 fa57 	bl	8016f28 <atoi>
 8001a7a:	4601      	mov	r1, r0
 8001a7c:	4836      	ldr	r0, [pc, #216]	; (8001b58 <zerg_get_data_from_sd+0x2b8>)
 8001a7e:	6a3a      	ldr	r2, [r7, #32]
 8001a80:	4613      	mov	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	011b      	lsls	r3, r3, #4
 8001a88:	4403      	add	r3, r0
 8001a8a:	3320      	adds	r3, #32
 8001a8c:	6019      	str	r1, [r3, #0]
						printf(" repeatinterval_%d is: %d \n", id,
 8001a8e:	4932      	ldr	r1, [pc, #200]	; (8001b58 <zerg_get_data_from_sd+0x2b8>)
 8001a90:	6a3a      	ldr	r2, [r7, #32]
 8001a92:	4613      	mov	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	011b      	lsls	r3, r3, #4
 8001a9a:	440b      	add	r3, r1
 8001a9c:	3320      	adds	r3, #32
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	6a39      	ldr	r1, [r7, #32]
 8001aa4:	4835      	ldr	r0, [pc, #212]	; (8001b7c <zerg_get_data_from_sd+0x2dc>)
 8001aa6:	f015 faa5 	bl	8016ff4 <iprintf>
 8001aaa:	e0b6      	b.n	8001c1a <zerg_get_data_from_sd+0x37a>
								T[id].repeatinterval);
					} else if (strcmp(name1, "doubleclickinterval") == 0) {
 8001aac:	4934      	ldr	r1, [pc, #208]	; (8001b80 <zerg_get_data_from_sd+0x2e0>)
 8001aae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ab0:	f7fe fb8e 	bl	80001d0 <strcmp>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d11b      	bne.n	8001af2 <zerg_get_data_from_sd+0x252>
						T[id].doubleclickinterval = atoi(token2);
 8001aba:	6938      	ldr	r0, [r7, #16]
 8001abc:	f015 fa34 	bl	8016f28 <atoi>
 8001ac0:	4601      	mov	r1, r0
 8001ac2:	4825      	ldr	r0, [pc, #148]	; (8001b58 <zerg_get_data_from_sd+0x2b8>)
 8001ac4:	6a3a      	ldr	r2, [r7, #32]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	011b      	lsls	r3, r3, #4
 8001ace:	4403      	add	r3, r0
 8001ad0:	3324      	adds	r3, #36	; 0x24
 8001ad2:	6019      	str	r1, [r3, #0]
						printf(" doubleclickinterval_%d is: %d \n", id,
 8001ad4:	4920      	ldr	r1, [pc, #128]	; (8001b58 <zerg_get_data_from_sd+0x2b8>)
 8001ad6:	6a3a      	ldr	r2, [r7, #32]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	011b      	lsls	r3, r3, #4
 8001ae0:	440b      	add	r3, r1
 8001ae2:	3324      	adds	r3, #36	; 0x24
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	6a39      	ldr	r1, [r7, #32]
 8001aea:	4826      	ldr	r0, [pc, #152]	; (8001b84 <zerg_get_data_from_sd+0x2e4>)
 8001aec:	f015 fa82 	bl	8016ff4 <iprintf>
 8001af0:	e093      	b.n	8001c1a <zerg_get_data_from_sd+0x37a>
								T[id].doubleclickinterval);
					} else if (strcmp(name1, "preventclick") == 0) {
 8001af2:	4925      	ldr	r1, [pc, #148]	; (8001b88 <zerg_get_data_from_sd+0x2e8>)
 8001af4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001af6:	f7fe fb6b 	bl	80001d0 <strcmp>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d147      	bne.n	8001b90 <zerg_get_data_from_sd+0x2f0>
						T[id].preventclick = atoi(token2);
 8001b00:	6938      	ldr	r0, [r7, #16]
 8001b02:	f015 fa11 	bl	8016f28 <atoi>
 8001b06:	4601      	mov	r1, r0
 8001b08:	4813      	ldr	r0, [pc, #76]	; (8001b58 <zerg_get_data_from_sd+0x2b8>)
 8001b0a:	6a3a      	ldr	r2, [r7, #32]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	011b      	lsls	r3, r3, #4
 8001b14:	4403      	add	r3, r0
 8001b16:	3328      	adds	r3, #40	; 0x28
 8001b18:	6019      	str	r1, [r3, #0]
						printf(" preventclick_%d is: %d \n", id,
 8001b1a:	490f      	ldr	r1, [pc, #60]	; (8001b58 <zerg_get_data_from_sd+0x2b8>)
 8001b1c:	6a3a      	ldr	r2, [r7, #32]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	4413      	add	r3, r2
 8001b24:	011b      	lsls	r3, r3, #4
 8001b26:	440b      	add	r3, r1
 8001b28:	3328      	adds	r3, #40	; 0x28
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	6a39      	ldr	r1, [r7, #32]
 8001b30:	4816      	ldr	r0, [pc, #88]	; (8001b8c <zerg_get_data_from_sd+0x2ec>)
 8001b32:	f015 fa5f 	bl	8016ff4 <iprintf>
 8001b36:	e070      	b.n	8001c1a <zerg_get_data_from_sd+0x37a>
 8001b38:	20000134 	.word	0x20000134
 8001b3c:	20008654 	.word	0x20008654
 8001b40:	20005b10 	.word	0x20005b10
 8001b44:	20005aec 	.word	0x20005aec
 8001b48:	20008644 	.word	0x20008644
 8001b4c:	08018b8c 	.word	0x08018b8c
 8001b50:	08018bc0 	.word	0x08018bc0
 8001b54:	08018bc4 	.word	0x08018bc4
 8001b58:	200017f0 	.word	0x200017f0
 8001b5c:	08018bd0 	.word	0x08018bd0
 8001b60:	08018be8 	.word	0x08018be8
 8001b64:	08018bf8 	.word	0x08018bf8
 8001b68:	08018c14 	.word	0x08018c14
 8001b6c:	08018c24 	.word	0x08018c24
 8001b70:	08018c40 	.word	0x08018c40
 8001b74:	08018c48 	.word	0x08018c48
 8001b78:	08018c5c 	.word	0x08018c5c
 8001b7c:	08018c6c 	.word	0x08018c6c
 8001b80:	08018c88 	.word	0x08018c88
 8001b84:	08018c9c 	.word	0x08018c9c
 8001b88:	08018cc0 	.word	0x08018cc0
 8001b8c:	08018cd0 	.word	0x08018cd0
								T[id].preventclick);
					} else if (strcmp(name1, "infofield") == 0) {
 8001b90:	4935      	ldr	r1, [pc, #212]	; (8001c68 <zerg_get_data_from_sd+0x3c8>)
 8001b92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b94:	f7fe fb1c 	bl	80001d0 <strcmp>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d11b      	bne.n	8001bd6 <zerg_get_data_from_sd+0x336>
						strcpy(T[id].infofield, token2);
 8001b9e:	6a3a      	ldr	r2, [r7, #32]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	011b      	lsls	r3, r3, #4
 8001ba8:	3328      	adds	r3, #40	; 0x28
 8001baa:	4a30      	ldr	r2, [pc, #192]	; (8001c6c <zerg_get_data_from_sd+0x3cc>)
 8001bac:	4413      	add	r3, r2
 8001bae:	3304      	adds	r3, #4
 8001bb0:	6939      	ldr	r1, [r7, #16]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f015 fb5c 	bl	8017270 <strcpy>
						printf(" infofield_%d is: %s \n", id, T[id].infofield);
 8001bb8:	6a3a      	ldr	r2, [r7, #32]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	011b      	lsls	r3, r3, #4
 8001bc2:	3328      	adds	r3, #40	; 0x28
 8001bc4:	4a29      	ldr	r2, [pc, #164]	; (8001c6c <zerg_get_data_from_sd+0x3cc>)
 8001bc6:	4413      	add	r3, r2
 8001bc8:	3304      	adds	r3, #4
 8001bca:	461a      	mov	r2, r3
 8001bcc:	6a39      	ldr	r1, [r7, #32]
 8001bce:	4828      	ldr	r0, [pc, #160]	; (8001c70 <zerg_get_data_from_sd+0x3d0>)
 8001bd0:	f015 fa10 	bl	8016ff4 <iprintf>
 8001bd4:	e021      	b.n	8001c1a <zerg_get_data_from_sd+0x37a>
					} else if (strcmp(name1, "onoff") == 0) {
 8001bd6:	4927      	ldr	r1, [pc, #156]	; (8001c74 <zerg_get_data_from_sd+0x3d4>)
 8001bd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001bda:	f7fe faf9 	bl	80001d0 <strcmp>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d11a      	bne.n	8001c1a <zerg_get_data_from_sd+0x37a>
						T[id].onoff = atoi(token2);
 8001be4:	6938      	ldr	r0, [r7, #16]
 8001be6:	f015 f99f 	bl	8016f28 <atoi>
 8001bea:	4601      	mov	r1, r0
 8001bec:	481f      	ldr	r0, [pc, #124]	; (8001c6c <zerg_get_data_from_sd+0x3cc>)
 8001bee:	6a3a      	ldr	r2, [r7, #32]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	011b      	lsls	r3, r3, #4
 8001bf8:	4403      	add	r3, r0
 8001bfa:	334c      	adds	r3, #76	; 0x4c
 8001bfc:	6019      	str	r1, [r3, #0]
						printf(" onoff_%d is: %d \n", id, T[id].onoff);
 8001bfe:	491b      	ldr	r1, [pc, #108]	; (8001c6c <zerg_get_data_from_sd+0x3cc>)
 8001c00:	6a3a      	ldr	r2, [r7, #32]
 8001c02:	4613      	mov	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	011b      	lsls	r3, r3, #4
 8001c0a:	440b      	add	r3, r1
 8001c0c:	334c      	adds	r3, #76	; 0x4c
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	461a      	mov	r2, r3
 8001c12:	6a39      	ldr	r1, [r7, #32]
 8001c14:	4818      	ldr	r0, [pc, #96]	; (8001c78 <zerg_get_data_from_sd+0x3d8>)
 8001c16:	f015 f9ed 	bl	8016ff4 <iprintf>
					}
					/************************************************/
				}
				y++;
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	61bb      	str	r3, [r7, #24]
			while ((token2 = strtok_r(rest1, "=", &rest1))) {
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	1d3a      	adds	r2, r7, #4
 8001c24:	4915      	ldr	r1, [pc, #84]	; (8001c7c <zerg_get_data_from_sd+0x3dc>)
 8001c26:	4618      	mov	r0, r3
 8001c28:	f015 fb8e 	bl	8017348 <strtok_r>
 8001c2c:	6138      	str	r0, [r7, #16]
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f47f ae6b 	bne.w	800190c <zerg_get_data_from_sd+0x6c>
			}
			z++;
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	61fb      	str	r3, [r7, #28]
		while ((token1 = strtok_r(rest, "\n", &rest))) {
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	f107 0208 	add.w	r2, r7, #8
 8001c42:	490f      	ldr	r1, [pc, #60]	; (8001c80 <zerg_get_data_from_sd+0x3e0>)
 8001c44:	4618      	mov	r0, r3
 8001c46:	f015 fb7f 	bl	8017348 <strtok_r>
 8001c4a:	6178      	str	r0, [r7, #20]
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f47f ae57 	bne.w	8001902 <zerg_get_data_from_sd+0x62>
		}
	}
	f_close(&SDFile);
 8001c54:	480b      	ldr	r0, [pc, #44]	; (8001c84 <zerg_get_data_from_sd+0x3e4>)
 8001c56:	f008 fcc2 	bl	800a5de <f_close>
	clear_buffer();
 8001c5a:	f7ff fdcb 	bl	80017f4 <clear_buffer>
	return 0;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3728      	adds	r7, #40	; 0x28
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	08018cec 	.word	0x08018cec
 8001c6c:	200017f0 	.word	0x200017f0
 8001c70:	08018cf8 	.word	0x08018cf8
 8001c74:	08018d10 	.word	0x08018d10
 8001c78:	08018d18 	.word	0x08018d18
 8001c7c:	08018d2c 	.word	0x08018d2c
 8001c80:	08018d30 	.word	0x08018d30
 8001c84:	20008654 	.word	0x20008654

08001c88 <zerg_write_data_to_sd>:

// Запись структуры на SD-card / Write our struct to the SD-card
void zerg_write_data_to_sd(int num) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	f5ad 5d6d 	sub.w	sp, sp, #15168	; 0x3b40
 8001c8e:	b08c      	sub	sp, #48	; 0x30
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c96:	3b2c      	subs	r3, #44	; 0x2c
 8001c98:	6018      	str	r0, [r3, #0]
	  zerg_mount();
 8001c9a:	f7ff fdc5 	bl	8001828 <zerg_mount>
	  zerg_open();
 8001c9e:	f7ff fddf 	bl	8001860 <zerg_open>
	char full_data[15000];
	char line[200];

	for (int id = 0; id <= num; id++) {
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 8001ca8:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	e13a      	b.n	8001f26 <zerg_write_data_to_sd+0x29e>
//		printf(" doubleclickinterval is: %d \n", T[id].doubleclickinterval);
//		printf(" preventclick is: %d \n", T[id].preventclick);
//		printf(" infofield is: %s \n", T[id].infofield);
//		printf(" onoff is: %d \n", T[id].onoff);

		sprintf(line,"pulluptype_%d=%s\n",id,T[id].pulluptype);
 8001cb0:	f507 536d 	add.w	r3, r7, #15168	; 0x3b40
 8001cb4:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4413      	add	r3, r2
 8001cc0:	011b      	lsls	r3, r3, #4
 8001cc2:	4ac0      	ldr	r2, [pc, #768]	; (8001fc4 <zerg_write_data_to_sd+0x33c>)
 8001cc4:	4413      	add	r3, r2
 8001cc6:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001cca:	3824      	subs	r0, #36	; 0x24
 8001ccc:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 8001cd0:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001cd4:	6812      	ldr	r2, [r2, #0]
 8001cd6:	49bc      	ldr	r1, [pc, #752]	; (8001fc8 <zerg_write_data_to_sd+0x340>)
 8001cd8:	f015 fa8e 	bl	80171f8 <siprintf>
		strcat(full_data, line); // объеденяем строки
 8001cdc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001ce0:	3a24      	subs	r2, #36	; 0x24
 8001ce2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001ce6:	3b1c      	subs	r3, #28
 8001ce8:	4611      	mov	r1, r2
 8001cea:	4618      	mov	r0, r3
 8001cec:	f015 faa4 	bl	8017238 <strcat>
		sprintf(line,"bounceinterval_%d=%d\n",id,T[id].bounceinterval);
 8001cf0:	49b4      	ldr	r1, [pc, #720]	; (8001fc4 <zerg_write_data_to_sd+0x33c>)
 8001cf2:	f507 536d 	add.w	r3, r7, #15168	; 0x3b40
 8001cf6:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	011b      	lsls	r3, r3, #4
 8001d04:	440b      	add	r3, r1
 8001d06:	3314      	adds	r3, #20
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001d0e:	3824      	subs	r0, #36	; 0x24
 8001d10:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 8001d14:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001d18:	6812      	ldr	r2, [r2, #0]
 8001d1a:	49ac      	ldr	r1, [pc, #688]	; (8001fcc <zerg_write_data_to_sd+0x344>)
 8001d1c:	f015 fa6c 	bl	80171f8 <siprintf>
		strcat(full_data, line); // объеденяем строки
 8001d20:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001d24:	3a24      	subs	r2, #36	; 0x24
 8001d26:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001d2a:	3b1c      	subs	r3, #28
 8001d2c:	4611      	mov	r1, r2
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f015 fa82 	bl	8017238 <strcat>
		sprintf(line,"holdinterval_%d=%d\n",id,T[id].holdinterval);
 8001d34:	49a3      	ldr	r1, [pc, #652]	; (8001fc4 <zerg_write_data_to_sd+0x33c>)
 8001d36:	f507 536d 	add.w	r3, r7, #15168	; 0x3b40
 8001d3a:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	011b      	lsls	r3, r3, #4
 8001d48:	440b      	add	r3, r1
 8001d4a:	3318      	adds	r3, #24
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001d52:	3824      	subs	r0, #36	; 0x24
 8001d54:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 8001d58:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001d5c:	6812      	ldr	r2, [r2, #0]
 8001d5e:	499c      	ldr	r1, [pc, #624]	; (8001fd0 <zerg_write_data_to_sd+0x348>)
 8001d60:	f015 fa4a 	bl	80171f8 <siprintf>
		strcat(full_data, line); // объеденяем строки
 8001d64:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001d68:	3a24      	subs	r2, #36	; 0x24
 8001d6a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001d6e:	3b1c      	subs	r3, #28
 8001d70:	4611      	mov	r1, r2
 8001d72:	4618      	mov	r0, r3
 8001d74:	f015 fa60 	bl	8017238 <strcat>
		sprintf(line,"repeat_%d=%d\n",id,T[id].repeat);
 8001d78:	4992      	ldr	r1, [pc, #584]	; (8001fc4 <zerg_write_data_to_sd+0x33c>)
 8001d7a:	f507 536d 	add.w	r3, r7, #15168	; 0x3b40
 8001d7e:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	4613      	mov	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	011b      	lsls	r3, r3, #4
 8001d8c:	440b      	add	r3, r1
 8001d8e:	331c      	adds	r3, #28
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001d96:	3824      	subs	r0, #36	; 0x24
 8001d98:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 8001d9c:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001da0:	6812      	ldr	r2, [r2, #0]
 8001da2:	498c      	ldr	r1, [pc, #560]	; (8001fd4 <zerg_write_data_to_sd+0x34c>)
 8001da4:	f015 fa28 	bl	80171f8 <siprintf>
		strcat(full_data, line); // объеденяем строки
 8001da8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001dac:	3a24      	subs	r2, #36	; 0x24
 8001dae:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001db2:	3b1c      	subs	r3, #28
 8001db4:	4611      	mov	r1, r2
 8001db6:	4618      	mov	r0, r3
 8001db8:	f015 fa3e 	bl	8017238 <strcat>
		sprintf(line,"repeatinterval_%d=%d\n",id,T[id].repeatinterval);
 8001dbc:	4981      	ldr	r1, [pc, #516]	; (8001fc4 <zerg_write_data_to_sd+0x33c>)
 8001dbe:	f507 536d 	add.w	r3, r7, #15168	; 0x3b40
 8001dc2:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	011b      	lsls	r3, r3, #4
 8001dd0:	440b      	add	r3, r1
 8001dd2:	3320      	adds	r3, #32
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001dda:	3824      	subs	r0, #36	; 0x24
 8001ddc:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 8001de0:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001de4:	6812      	ldr	r2, [r2, #0]
 8001de6:	497c      	ldr	r1, [pc, #496]	; (8001fd8 <zerg_write_data_to_sd+0x350>)
 8001de8:	f015 fa06 	bl	80171f8 <siprintf>
		strcat(full_data, line); // объеденяем строки
 8001dec:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001df0:	3a24      	subs	r2, #36	; 0x24
 8001df2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001df6:	3b1c      	subs	r3, #28
 8001df8:	4611      	mov	r1, r2
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f015 fa1c 	bl	8017238 <strcat>
		sprintf(line,"doubleclickinterval_%d=%d\n",id,T[id].doubleclickinterval);
 8001e00:	4970      	ldr	r1, [pc, #448]	; (8001fc4 <zerg_write_data_to_sd+0x33c>)
 8001e02:	f507 536d 	add.w	r3, r7, #15168	; 0x3b40
 8001e06:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	4413      	add	r3, r2
 8001e12:	011b      	lsls	r3, r3, #4
 8001e14:	440b      	add	r3, r1
 8001e16:	3324      	adds	r3, #36	; 0x24
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001e1e:	3824      	subs	r0, #36	; 0x24
 8001e20:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 8001e24:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001e28:	6812      	ldr	r2, [r2, #0]
 8001e2a:	496c      	ldr	r1, [pc, #432]	; (8001fdc <zerg_write_data_to_sd+0x354>)
 8001e2c:	f015 f9e4 	bl	80171f8 <siprintf>
		strcat(full_data, line); // объеденяем строки
 8001e30:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001e34:	3a24      	subs	r2, #36	; 0x24
 8001e36:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001e3a:	3b1c      	subs	r3, #28
 8001e3c:	4611      	mov	r1, r2
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f015 f9fa 	bl	8017238 <strcat>
		sprintf(line,"preventclick_%d=%d\n",id,T[id].doubleclickinterval);
 8001e44:	495f      	ldr	r1, [pc, #380]	; (8001fc4 <zerg_write_data_to_sd+0x33c>)
 8001e46:	f507 536d 	add.w	r3, r7, #15168	; 0x3b40
 8001e4a:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4613      	mov	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	011b      	lsls	r3, r3, #4
 8001e58:	440b      	add	r3, r1
 8001e5a:	3324      	adds	r3, #36	; 0x24
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001e62:	3824      	subs	r0, #36	; 0x24
 8001e64:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 8001e68:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001e6c:	6812      	ldr	r2, [r2, #0]
 8001e6e:	495c      	ldr	r1, [pc, #368]	; (8001fe0 <zerg_write_data_to_sd+0x358>)
 8001e70:	f015 f9c2 	bl	80171f8 <siprintf>
		strcat(full_data, line); // объеденяем строки
 8001e74:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001e78:	3a24      	subs	r2, #36	; 0x24
 8001e7a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001e7e:	3b1c      	subs	r3, #28
 8001e80:	4611      	mov	r1, r2
 8001e82:	4618      	mov	r0, r3
 8001e84:	f015 f9d8 	bl	8017238 <strcat>
		sprintf(line,"infofield_%d=%s\n",id,T[id].infofield);
 8001e88:	f507 536d 	add.w	r3, r7, #15168	; 0x3b40
 8001e8c:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	4613      	mov	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	011b      	lsls	r3, r3, #4
 8001e9a:	3328      	adds	r3, #40	; 0x28
 8001e9c:	4a49      	ldr	r2, [pc, #292]	; (8001fc4 <zerg_write_data_to_sd+0x33c>)
 8001e9e:	4413      	add	r3, r2
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001ea6:	3824      	subs	r0, #36	; 0x24
 8001ea8:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 8001eac:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001eb0:	6812      	ldr	r2, [r2, #0]
 8001eb2:	494c      	ldr	r1, [pc, #304]	; (8001fe4 <zerg_write_data_to_sd+0x35c>)
 8001eb4:	f015 f9a0 	bl	80171f8 <siprintf>
		strcat(full_data, line); // объеденяем строки
 8001eb8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001ebc:	3a24      	subs	r2, #36	; 0x24
 8001ebe:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001ec2:	3b1c      	subs	r3, #28
 8001ec4:	4611      	mov	r1, r2
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f015 f9b6 	bl	8017238 <strcat>
		sprintf(line,"onoff_%d=%d\n",id,T[id].onoff);
 8001ecc:	493d      	ldr	r1, [pc, #244]	; (8001fc4 <zerg_write_data_to_sd+0x33c>)
 8001ece:	f507 536d 	add.w	r3, r7, #15168	; 0x3b40
 8001ed2:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4413      	add	r3, r2
 8001ede:	011b      	lsls	r3, r3, #4
 8001ee0:	440b      	add	r3, r1
 8001ee2:	334c      	adds	r3, #76	; 0x4c
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001eea:	3824      	subs	r0, #36	; 0x24
 8001eec:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 8001ef0:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001ef4:	6812      	ldr	r2, [r2, #0]
 8001ef6:	493c      	ldr	r1, [pc, #240]	; (8001fe8 <zerg_write_data_to_sd+0x360>)
 8001ef8:	f015 f97e 	bl	80171f8 <siprintf>
		strcat(full_data, line); // объеденяем строки
 8001efc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001f00:	3a24      	subs	r2, #36	; 0x24
 8001f02:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001f06:	3b1c      	subs	r3, #28
 8001f08:	4611      	mov	r1, r2
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f015 f994 	bl	8017238 <strcat>
	for (int id = 0; id <= num; id++) {
 8001f10:	f507 536d 	add.w	r3, r7, #15168	; 0x3b40
 8001f14:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 8001f20:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001f24:	6013      	str	r3, [r2, #0]
 8001f26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f2a:	3b2c      	subs	r3, #44	; 0x2c
 8001f2c:	f507 526d 	add.w	r2, r7, #15168	; 0x3b40
 8001f30:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001f34:	6812      	ldr	r2, [r2, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	f77f aeb9 	ble.w	8001cb0 <zerg_write_data_to_sd+0x28>
	}
		res = f_write(&SDFile, full_data, strlen((char*) full_data), (void*) &byteswritten);
 8001f3e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001f42:	3b1c      	subs	r3, #28
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7fe f94d 	bl	80001e4 <strlen>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8001f50:	391c      	subs	r1, #28
 8001f52:	4b26      	ldr	r3, [pc, #152]	; (8001fec <zerg_write_data_to_sd+0x364>)
 8001f54:	4826      	ldr	r0, [pc, #152]	; (8001ff0 <zerg_write_data_to_sd+0x368>)
 8001f56:	f008 f930 	bl	800a1ba <f_write>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4b25      	ldr	r3, [pc, #148]	; (8001ff4 <zerg_write_data_to_sd+0x36c>)
 8001f60:	701a      	strb	r2, [r3, #0]
		if ((byteswritten == 0) || (res != FR_OK)) {
 8001f62:	4b22      	ldr	r3, [pc, #136]	; (8001fec <zerg_write_data_to_sd+0x364>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <zerg_write_data_to_sd+0x2ea>
 8001f6a:	4b22      	ldr	r3, [pc, #136]	; (8001ff4 <zerg_write_data_to_sd+0x36c>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d008      	beq.n	8001f84 <zerg_write_data_to_sd+0x2fc>
			printf("Failed to write file!\r\n");
 8001f72:	4821      	ldr	r0, [pc, #132]	; (8001ff8 <zerg_write_data_to_sd+0x370>)
 8001f74:	f015 f8c4 	bl	8017100 <puts>
			f_close(&SDFile);
 8001f78:	481d      	ldr	r0, [pc, #116]	; (8001ff0 <zerg_write_data_to_sd+0x368>)
 8001f7a:	f008 fb30 	bl	800a5de <f_close>
			clear_buffer();
 8001f7e:	f7ff fc39 	bl	80017f4 <clear_buffer>
 8001f82:	e007      	b.n	8001f94 <zerg_write_data_to_sd+0x30c>
		} else {
			printf("File written successfully\r\n");
 8001f84:	481d      	ldr	r0, [pc, #116]	; (8001ffc <zerg_write_data_to_sd+0x374>)
 8001f86:	f015 f8bb 	bl	8017100 <puts>
			f_close(&SDFile);
 8001f8a:	4819      	ldr	r0, [pc, #100]	; (8001ff0 <zerg_write_data_to_sd+0x368>)
 8001f8c:	f008 fb27 	bl	800a5de <f_close>
			clear_buffer();
 8001f90:	f7ff fc30 	bl	80017f4 <clear_buffer>
		}
		memset(full_data, 0, sizeof(full_data));
 8001f94:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001f98:	3b1c      	subs	r3, #28
 8001f9a:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f015 f81f 	bl	8016fe4 <memset>
		memset(line, 0, sizeof(line));
 8001fa6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001faa:	3b24      	subs	r3, #36	; 0x24
 8001fac:	22c8      	movs	r2, #200	; 0xc8
 8001fae:	2100      	movs	r1, #0
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f015 f817 	bl	8016fe4 <memset>
		//zerg_read();
		}
 8001fb6:	bf00      	nop
 8001fb8:	f507 576d 	add.w	r7, r7, #15168	; 0x3b40
 8001fbc:	3730      	adds	r7, #48	; 0x30
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	200017f0 	.word	0x200017f0
 8001fc8:	08018d34 	.word	0x08018d34
 8001fcc:	08018d48 	.word	0x08018d48
 8001fd0:	08018d60 	.word	0x08018d60
 8001fd4:	08018d74 	.word	0x08018d74
 8001fd8:	08018d84 	.word	0x08018d84
 8001fdc:	08018d9c 	.word	0x08018d9c
 8001fe0:	08018db8 	.word	0x08018db8
 8001fe4:	08018dcc 	.word	0x08018dcc
 8001fe8:	08018de0 	.word	0x08018de0
 8001fec:	20005ae4 	.word	0x20005ae4
 8001ff0:	20008654 	.word	0x20008654
 8001ff4:	20008644 	.word	0x20008644
 8001ff8:	08018b58 	.word	0x08018b58
 8001ffc:	08018b70 	.word	0x08018b70

08002000 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002000:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002038 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002004:	480d      	ldr	r0, [pc, #52]	; (800203c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002006:	490e      	ldr	r1, [pc, #56]	; (8002040 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002008:	4a0e      	ldr	r2, [pc, #56]	; (8002044 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800200a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800200c:	e002      	b.n	8002014 <LoopCopyDataInit>

0800200e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800200e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002012:	3304      	adds	r3, #4

08002014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002018:	d3f9      	bcc.n	800200e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800201a:	4a0b      	ldr	r2, [pc, #44]	; (8002048 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800201c:	4c0b      	ldr	r4, [pc, #44]	; (800204c <LoopFillZerobss+0x26>)
  movs r3, #0
 800201e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002020:	e001      	b.n	8002026 <LoopFillZerobss>

08002022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002024:	3204      	adds	r2, #4

08002026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002028:	d3fb      	bcc.n	8002022 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800202a:	f7ff fbd1 	bl	80017d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800202e:	f014 ff7f 	bl	8016f30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002032:	f7fe fffb 	bl	800102c <main>
  bx  lr    
 8002036:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002038:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800203c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002040:	200001b0 	.word	0x200001b0
  ldr r2, =_sidata
 8002044:	080205c4 	.word	0x080205c4
  ldr r2, =_sbss
 8002048:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 800204c:	20016de8 	.word	0x20016de8

08002050 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002050:	e7fe      	b.n	8002050 <ADC_IRQHandler>
	...

08002054 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002058:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <HAL_Init+0x40>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a0d      	ldr	r2, [pc, #52]	; (8002094 <HAL_Init+0x40>)
 800205e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002062:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002064:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <HAL_Init+0x40>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a0a      	ldr	r2, [pc, #40]	; (8002094 <HAL_Init+0x40>)
 800206a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800206e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002070:	4b08      	ldr	r3, [pc, #32]	; (8002094 <HAL_Init+0x40>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a07      	ldr	r2, [pc, #28]	; (8002094 <HAL_Init+0x40>)
 8002076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800207a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800207c:	2003      	movs	r0, #3
 800207e:	f000 f94f 	bl	8002320 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002082:	200f      	movs	r0, #15
 8002084:	f000 f808 	bl	8002098 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002088:	f7ff f93c 	bl	8001304 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40023c00 	.word	0x40023c00

08002098 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020a0:	4b12      	ldr	r3, [pc, #72]	; (80020ec <HAL_InitTick+0x54>)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	4b12      	ldr	r3, [pc, #72]	; (80020f0 <HAL_InitTick+0x58>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	4619      	mov	r1, r3
 80020aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80020b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b6:	4618      	mov	r0, r3
 80020b8:	f000 f967 	bl	800238a <HAL_SYSTICK_Config>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e00e      	b.n	80020e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b0f      	cmp	r3, #15
 80020ca:	d80a      	bhi.n	80020e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020cc:	2200      	movs	r2, #0
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020d4:	f000 f92f 	bl	8002336 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020d8:	4a06      	ldr	r2, [pc, #24]	; (80020f4 <HAL_InitTick+0x5c>)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020de:	2300      	movs	r3, #0
 80020e0:	e000      	b.n	80020e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	20000138 	.word	0x20000138
 80020f0:	20000140 	.word	0x20000140
 80020f4:	2000013c 	.word	0x2000013c

080020f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020fc:	4b06      	ldr	r3, [pc, #24]	; (8002118 <HAL_IncTick+0x20>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	461a      	mov	r2, r3
 8002102:	4b06      	ldr	r3, [pc, #24]	; (800211c <HAL_IncTick+0x24>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4413      	add	r3, r2
 8002108:	4a04      	ldr	r2, [pc, #16]	; (800211c <HAL_IncTick+0x24>)
 800210a:	6013      	str	r3, [r2, #0]
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	20000140 	.word	0x20000140
 800211c:	20008648 	.word	0x20008648

08002120 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  return uwTick;
 8002124:	4b03      	ldr	r3, [pc, #12]	; (8002134 <HAL_GetTick+0x14>)
 8002126:	681b      	ldr	r3, [r3, #0]
}
 8002128:	4618      	mov	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	20008648 	.word	0x20008648

08002138 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002140:	f7ff ffee 	bl	8002120 <HAL_GetTick>
 8002144:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002150:	d005      	beq.n	800215e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002152:	4b0a      	ldr	r3, [pc, #40]	; (800217c <HAL_Delay+0x44>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	461a      	mov	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4413      	add	r3, r2
 800215c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800215e:	bf00      	nop
 8002160:	f7ff ffde 	bl	8002120 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	429a      	cmp	r2, r3
 800216e:	d8f7      	bhi.n	8002160 <HAL_Delay+0x28>
  {
  }
}
 8002170:	bf00      	nop
 8002172:	bf00      	nop
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	20000140 	.word	0x20000140

08002180 <__NVIC_SetPriorityGrouping>:
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002190:	4b0c      	ldr	r3, [pc, #48]	; (80021c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800219c:	4013      	ands	r3, r2
 800219e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021b2:	4a04      	ldr	r2, [pc, #16]	; (80021c4 <__NVIC_SetPriorityGrouping+0x44>)
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	60d3      	str	r3, [r2, #12]
}
 80021b8:	bf00      	nop
 80021ba:	3714      	adds	r7, #20
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <__NVIC_GetPriorityGrouping>:
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021cc:	4b04      	ldr	r3, [pc, #16]	; (80021e0 <__NVIC_GetPriorityGrouping+0x18>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	0a1b      	lsrs	r3, r3, #8
 80021d2:	f003 0307 	and.w	r3, r3, #7
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	e000ed00 	.word	0xe000ed00

080021e4 <__NVIC_EnableIRQ>:
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	db0b      	blt.n	800220e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021f6:	79fb      	ldrb	r3, [r7, #7]
 80021f8:	f003 021f 	and.w	r2, r3, #31
 80021fc:	4907      	ldr	r1, [pc, #28]	; (800221c <__NVIC_EnableIRQ+0x38>)
 80021fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002202:	095b      	lsrs	r3, r3, #5
 8002204:	2001      	movs	r0, #1
 8002206:	fa00 f202 	lsl.w	r2, r0, r2
 800220a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	e000e100 	.word	0xe000e100

08002220 <__NVIC_SetPriority>:
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	6039      	str	r1, [r7, #0]
 800222a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800222c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002230:	2b00      	cmp	r3, #0
 8002232:	db0a      	blt.n	800224a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	b2da      	uxtb	r2, r3
 8002238:	490c      	ldr	r1, [pc, #48]	; (800226c <__NVIC_SetPriority+0x4c>)
 800223a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223e:	0112      	lsls	r2, r2, #4
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	440b      	add	r3, r1
 8002244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002248:	e00a      	b.n	8002260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	b2da      	uxtb	r2, r3
 800224e:	4908      	ldr	r1, [pc, #32]	; (8002270 <__NVIC_SetPriority+0x50>)
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	3b04      	subs	r3, #4
 8002258:	0112      	lsls	r2, r2, #4
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	440b      	add	r3, r1
 800225e:	761a      	strb	r2, [r3, #24]
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	e000e100 	.word	0xe000e100
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <NVIC_EncodePriority>:
{
 8002274:	b480      	push	{r7}
 8002276:	b089      	sub	sp, #36	; 0x24
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	f1c3 0307 	rsb	r3, r3, #7
 800228e:	2b04      	cmp	r3, #4
 8002290:	bf28      	it	cs
 8002292:	2304      	movcs	r3, #4
 8002294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	3304      	adds	r3, #4
 800229a:	2b06      	cmp	r3, #6
 800229c:	d902      	bls.n	80022a4 <NVIC_EncodePriority+0x30>
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	3b03      	subs	r3, #3
 80022a2:	e000      	b.n	80022a6 <NVIC_EncodePriority+0x32>
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43da      	mvns	r2, r3
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	401a      	ands	r2, r3
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	fa01 f303 	lsl.w	r3, r1, r3
 80022c6:	43d9      	mvns	r1, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022cc:	4313      	orrs	r3, r2
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3724      	adds	r7, #36	; 0x24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
	...

080022dc <SysTick_Config>:
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3b01      	subs	r3, #1
 80022e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022ec:	d301      	bcc.n	80022f2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80022ee:	2301      	movs	r3, #1
 80022f0:	e00f      	b.n	8002312 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022f2:	4a0a      	ldr	r2, [pc, #40]	; (800231c <SysTick_Config+0x40>)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3b01      	subs	r3, #1
 80022f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022fa:	210f      	movs	r1, #15
 80022fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002300:	f7ff ff8e 	bl	8002220 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002304:	4b05      	ldr	r3, [pc, #20]	; (800231c <SysTick_Config+0x40>)
 8002306:	2200      	movs	r2, #0
 8002308:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800230a:	4b04      	ldr	r3, [pc, #16]	; (800231c <SysTick_Config+0x40>)
 800230c:	2207      	movs	r2, #7
 800230e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	e000e010 	.word	0xe000e010

08002320 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f7ff ff29 	bl	8002180 <__NVIC_SetPriorityGrouping>
}
 800232e:	bf00      	nop
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002336:	b580      	push	{r7, lr}
 8002338:	b086      	sub	sp, #24
 800233a:	af00      	add	r7, sp, #0
 800233c:	4603      	mov	r3, r0
 800233e:	60b9      	str	r1, [r7, #8]
 8002340:	607a      	str	r2, [r7, #4]
 8002342:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002348:	f7ff ff3e 	bl	80021c8 <__NVIC_GetPriorityGrouping>
 800234c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	68b9      	ldr	r1, [r7, #8]
 8002352:	6978      	ldr	r0, [r7, #20]
 8002354:	f7ff ff8e 	bl	8002274 <NVIC_EncodePriority>
 8002358:	4602      	mov	r2, r0
 800235a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800235e:	4611      	mov	r1, r2
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff ff5d 	bl	8002220 <__NVIC_SetPriority>
}
 8002366:	bf00      	nop
 8002368:	3718      	adds	r7, #24
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b082      	sub	sp, #8
 8002372:	af00      	add	r7, sp, #0
 8002374:	4603      	mov	r3, r0
 8002376:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff ff31 	bl	80021e4 <__NVIC_EnableIRQ>
}
 8002382:	bf00      	nop
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b082      	sub	sp, #8
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7ff ffa2 	bl	80022dc <SysTick_Config>
 8002398:	4603      	mov	r3, r0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
	...

080023a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023ac:	2300      	movs	r3, #0
 80023ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023b0:	f7ff feb6 	bl	8002120 <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e099      	b.n	80024f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2202      	movs	r2, #2
 80023c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 0201 	bic.w	r2, r2, #1
 80023de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023e0:	e00f      	b.n	8002402 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023e2:	f7ff fe9d 	bl	8002120 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b05      	cmp	r3, #5
 80023ee:	d908      	bls.n	8002402 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2220      	movs	r2, #32
 80023f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2203      	movs	r2, #3
 80023fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e078      	b.n	80024f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1e8      	bne.n	80023e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	4b38      	ldr	r3, [pc, #224]	; (80024fc <HAL_DMA_Init+0x158>)
 800241c:	4013      	ands	r3, r2
 800241e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685a      	ldr	r2, [r3, #4]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800242e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800243a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002446:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	4313      	orrs	r3, r2
 8002452:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002458:	2b04      	cmp	r3, #4
 800245a:	d107      	bne.n	800246c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002464:	4313      	orrs	r3, r2
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	4313      	orrs	r3, r2
 800246a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	f023 0307 	bic.w	r3, r3, #7
 8002482:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	4313      	orrs	r3, r2
 800248c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002492:	2b04      	cmp	r3, #4
 8002494:	d117      	bne.n	80024c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	4313      	orrs	r3, r2
 800249e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00e      	beq.n	80024c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 fa9d 	bl	80029e8 <DMA_CheckFifoParam>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d008      	beq.n	80024c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2240      	movs	r2, #64	; 0x40
 80024b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80024c2:	2301      	movs	r3, #1
 80024c4:	e016      	b.n	80024f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 fa54 	bl	800297c <DMA_CalcBaseAndBitshift>
 80024d4:	4603      	mov	r3, r0
 80024d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024dc:	223f      	movs	r2, #63	; 0x3f
 80024de:	409a      	lsls	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3718      	adds	r7, #24
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	f010803f 	.word	0xf010803f

08002500 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
 800250c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800250e:	2300      	movs	r3, #0
 8002510:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002516:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800251e:	2b01      	cmp	r3, #1
 8002520:	d101      	bne.n	8002526 <HAL_DMA_Start_IT+0x26>
 8002522:	2302      	movs	r3, #2
 8002524:	e040      	b.n	80025a8 <HAL_DMA_Start_IT+0xa8>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b01      	cmp	r3, #1
 8002538:	d12f      	bne.n	800259a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2202      	movs	r2, #2
 800253e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	68b9      	ldr	r1, [r7, #8]
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f000 f9e6 	bl	8002920 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002558:	223f      	movs	r2, #63	; 0x3f
 800255a:	409a      	lsls	r2, r3
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 0216 	orr.w	r2, r2, #22
 800256e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002574:	2b00      	cmp	r3, #0
 8002576:	d007      	beq.n	8002588 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f042 0208 	orr.w	r2, r2, #8
 8002586:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 0201 	orr.w	r2, r2, #1
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	e005      	b.n	80025a6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025a2:	2302      	movs	r3, #2
 80025a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d004      	beq.n	80025ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2280      	movs	r2, #128	; 0x80
 80025c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e00c      	b.n	80025e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2205      	movs	r2, #5
 80025d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 0201 	bic.w	r2, r2, #1
 80025e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80025fc:	2300      	movs	r3, #0
 80025fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002600:	4b92      	ldr	r3, [pc, #584]	; (800284c <HAL_DMA_IRQHandler+0x258>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a92      	ldr	r2, [pc, #584]	; (8002850 <HAL_DMA_IRQHandler+0x25c>)
 8002606:	fba2 2303 	umull	r2, r3, r2, r3
 800260a:	0a9b      	lsrs	r3, r3, #10
 800260c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002612:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261e:	2208      	movs	r2, #8
 8002620:	409a      	lsls	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	4013      	ands	r3, r2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d01a      	beq.n	8002660 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0304 	and.w	r3, r3, #4
 8002634:	2b00      	cmp	r3, #0
 8002636:	d013      	beq.n	8002660 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 0204 	bic.w	r2, r2, #4
 8002646:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264c:	2208      	movs	r2, #8
 800264e:	409a      	lsls	r2, r3
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002658:	f043 0201 	orr.w	r2, r3, #1
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002664:	2201      	movs	r2, #1
 8002666:	409a      	lsls	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	4013      	ands	r3, r2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d012      	beq.n	8002696 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00b      	beq.n	8002696 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002682:	2201      	movs	r2, #1
 8002684:	409a      	lsls	r2, r3
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268e:	f043 0202 	orr.w	r2, r3, #2
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800269a:	2204      	movs	r2, #4
 800269c:	409a      	lsls	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	4013      	ands	r3, r2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d012      	beq.n	80026cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00b      	beq.n	80026cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b8:	2204      	movs	r2, #4
 80026ba:	409a      	lsls	r2, r3
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c4:	f043 0204 	orr.w	r2, r3, #4
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d0:	2210      	movs	r2, #16
 80026d2:	409a      	lsls	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4013      	ands	r3, r2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d043      	beq.n	8002764 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0308 	and.w	r3, r3, #8
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d03c      	beq.n	8002764 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ee:	2210      	movs	r2, #16
 80026f0:	409a      	lsls	r2, r3
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d018      	beq.n	8002736 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d108      	bne.n	8002724 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	2b00      	cmp	r3, #0
 8002718:	d024      	beq.n	8002764 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	4798      	blx	r3
 8002722:	e01f      	b.n	8002764 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002728:	2b00      	cmp	r3, #0
 800272a:	d01b      	beq.n	8002764 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	4798      	blx	r3
 8002734:	e016      	b.n	8002764 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002740:	2b00      	cmp	r3, #0
 8002742:	d107      	bne.n	8002754 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 0208 	bic.w	r2, r2, #8
 8002752:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002768:	2220      	movs	r2, #32
 800276a:	409a      	lsls	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4013      	ands	r3, r2
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 808e 	beq.w	8002892 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0310 	and.w	r3, r3, #16
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 8086 	beq.w	8002892 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800278a:	2220      	movs	r2, #32
 800278c:	409a      	lsls	r2, r3
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b05      	cmp	r3, #5
 800279c:	d136      	bne.n	800280c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 0216 	bic.w	r2, r2, #22
 80027ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	695a      	ldr	r2, [r3, #20]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d103      	bne.n	80027ce <HAL_DMA_IRQHandler+0x1da>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d007      	beq.n	80027de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0208 	bic.w	r2, r2, #8
 80027dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e2:	223f      	movs	r2, #63	; 0x3f
 80027e4:	409a      	lsls	r2, r3
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d07d      	beq.n	80028fe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	4798      	blx	r3
        }
        return;
 800280a:	e078      	b.n	80028fe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d01c      	beq.n	8002854 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d108      	bne.n	800283a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282c:	2b00      	cmp	r3, #0
 800282e:	d030      	beq.n	8002892 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	4798      	blx	r3
 8002838:	e02b      	b.n	8002892 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800283e:	2b00      	cmp	r3, #0
 8002840:	d027      	beq.n	8002892 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	4798      	blx	r3
 800284a:	e022      	b.n	8002892 <HAL_DMA_IRQHandler+0x29e>
 800284c:	20000138 	.word	0x20000138
 8002850:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10f      	bne.n	8002882 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 0210 	bic.w	r2, r2, #16
 8002870:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002896:	2b00      	cmp	r3, #0
 8002898:	d032      	beq.n	8002900 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d022      	beq.n	80028ec <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2205      	movs	r2, #5
 80028aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 0201 	bic.w	r2, r2, #1
 80028bc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	3301      	adds	r3, #1
 80028c2:	60bb      	str	r3, [r7, #8]
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d307      	bcc.n	80028da <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1f2      	bne.n	80028be <HAL_DMA_IRQHandler+0x2ca>
 80028d8:	e000      	b.n	80028dc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80028da:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d005      	beq.n	8002900 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	4798      	blx	r3
 80028fc:	e000      	b.n	8002900 <HAL_DMA_IRQHandler+0x30c>
        return;
 80028fe:	bf00      	nop
    }
  }
}
 8002900:	3718      	adds	r7, #24
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop

08002908 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002914:	4618      	mov	r0, r3
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
 800292c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800293c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	2b40      	cmp	r3, #64	; 0x40
 800294c:	d108      	bne.n	8002960 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800295e:	e007      	b.n	8002970 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68ba      	ldr	r2, [r7, #8]
 8002966:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	60da      	str	r2, [r3, #12]
}
 8002970:	bf00      	nop
 8002972:	3714      	adds	r7, #20
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	b2db      	uxtb	r3, r3
 800298a:	3b10      	subs	r3, #16
 800298c:	4a14      	ldr	r2, [pc, #80]	; (80029e0 <DMA_CalcBaseAndBitshift+0x64>)
 800298e:	fba2 2303 	umull	r2, r3, r2, r3
 8002992:	091b      	lsrs	r3, r3, #4
 8002994:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002996:	4a13      	ldr	r2, [pc, #76]	; (80029e4 <DMA_CalcBaseAndBitshift+0x68>)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4413      	add	r3, r2
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	461a      	mov	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2b03      	cmp	r3, #3
 80029a8:	d909      	bls.n	80029be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029b2:	f023 0303 	bic.w	r3, r3, #3
 80029b6:	1d1a      	adds	r2, r3, #4
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	659a      	str	r2, [r3, #88]	; 0x58
 80029bc:	e007      	b.n	80029ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029c6:	f023 0303 	bic.w	r3, r3, #3
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	aaaaaaab 	.word	0xaaaaaaab
 80029e4:	0801c280 	.word	0x0801c280

080029e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029f0:	2300      	movs	r3, #0
 80029f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d11f      	bne.n	8002a42 <DMA_CheckFifoParam+0x5a>
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	2b03      	cmp	r3, #3
 8002a06:	d856      	bhi.n	8002ab6 <DMA_CheckFifoParam+0xce>
 8002a08:	a201      	add	r2, pc, #4	; (adr r2, 8002a10 <DMA_CheckFifoParam+0x28>)
 8002a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a0e:	bf00      	nop
 8002a10:	08002a21 	.word	0x08002a21
 8002a14:	08002a33 	.word	0x08002a33
 8002a18:	08002a21 	.word	0x08002a21
 8002a1c:	08002ab7 	.word	0x08002ab7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d046      	beq.n	8002aba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a30:	e043      	b.n	8002aba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a36:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a3a:	d140      	bne.n	8002abe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a40:	e03d      	b.n	8002abe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a4a:	d121      	bne.n	8002a90 <DMA_CheckFifoParam+0xa8>
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	d837      	bhi.n	8002ac2 <DMA_CheckFifoParam+0xda>
 8002a52:	a201      	add	r2, pc, #4	; (adr r2, 8002a58 <DMA_CheckFifoParam+0x70>)
 8002a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a58:	08002a69 	.word	0x08002a69
 8002a5c:	08002a6f 	.word	0x08002a6f
 8002a60:	08002a69 	.word	0x08002a69
 8002a64:	08002a81 	.word	0x08002a81
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a6c:	e030      	b.n	8002ad0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d025      	beq.n	8002ac6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a7e:	e022      	b.n	8002ac6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a84:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a88:	d11f      	bne.n	8002aca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a8e:	e01c      	b.n	8002aca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d903      	bls.n	8002a9e <DMA_CheckFifoParam+0xb6>
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2b03      	cmp	r3, #3
 8002a9a:	d003      	beq.n	8002aa4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a9c:	e018      	b.n	8002ad0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	73fb      	strb	r3, [r7, #15]
      break;
 8002aa2:	e015      	b.n	8002ad0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00e      	beq.n	8002ace <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ab4:	e00b      	b.n	8002ace <DMA_CheckFifoParam+0xe6>
      break;
 8002ab6:	bf00      	nop
 8002ab8:	e00a      	b.n	8002ad0 <DMA_CheckFifoParam+0xe8>
      break;
 8002aba:	bf00      	nop
 8002abc:	e008      	b.n	8002ad0 <DMA_CheckFifoParam+0xe8>
      break;
 8002abe:	bf00      	nop
 8002ac0:	e006      	b.n	8002ad0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ac2:	bf00      	nop
 8002ac4:	e004      	b.n	8002ad0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ac6:	bf00      	nop
 8002ac8:	e002      	b.n	8002ad0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002aca:	bf00      	nop
 8002acc:	e000      	b.n	8002ad0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ace:	bf00      	nop
    }
  } 
  
  return status; 
 8002ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop

08002ae0 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b088      	sub	sp, #32
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	61fb      	str	r3, [r7, #28]
 8002aec:	2300      	movs	r3, #0
 8002aee:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8002af0:	4baa      	ldr	r3, [pc, #680]	; (8002d9c <HAL_ETH_Init+0x2bc>)
 8002af2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8002af4:	2300      	movs	r3, #0
 8002af6:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002af8:	2300      	movs	r3, #0
 8002afa:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e183      	b.n	8002e0e <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d106      	bne.n	8002b20 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f004 fe60 	bl	80077e0 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b20:	2300      	movs	r3, #0
 8002b22:	60bb      	str	r3, [r7, #8]
 8002b24:	4b9e      	ldr	r3, [pc, #632]	; (8002da0 <HAL_ETH_Init+0x2c0>)
 8002b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b28:	4a9d      	ldr	r2, [pc, #628]	; (8002da0 <HAL_ETH_Init+0x2c0>)
 8002b2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b2e:	6453      	str	r3, [r2, #68]	; 0x44
 8002b30:	4b9b      	ldr	r3, [pc, #620]	; (8002da0 <HAL_ETH_Init+0x2c0>)
 8002b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b38:	60bb      	str	r3, [r7, #8]
 8002b3a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002b3c:	4b99      	ldr	r3, [pc, #612]	; (8002da4 <HAL_ETH_Init+0x2c4>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	4a98      	ldr	r2, [pc, #608]	; (8002da4 <HAL_ETH_Init+0x2c4>)
 8002b42:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002b46:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002b48:	4b96      	ldr	r3, [pc, #600]	; (8002da4 <HAL_ETH_Init+0x2c4>)
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	4994      	ldr	r1, [pc, #592]	; (8002da4 <HAL_ETH_Init+0x2c4>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f042 0201 	orr.w	r2, r2, #1
 8002b68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b6c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002b6e:	f7ff fad7 	bl	8002120 <HAL_GetTick>
 8002b72:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002b74:	e011      	b.n	8002b9a <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8002b76:	f7ff fad3 	bl	8002120 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b84:	d909      	bls.n	8002b9a <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2203      	movs	r2, #3
 8002b8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e139      	b.n	8002e0e <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1e4      	bne.n	8002b76 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	f023 031c 	bic.w	r3, r3, #28
 8002bba:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002bbc:	f001 feac 	bl	8004918 <HAL_RCC_GetHCLKFreq>
 8002bc0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	4a78      	ldr	r2, [pc, #480]	; (8002da8 <HAL_ETH_Init+0x2c8>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d908      	bls.n	8002bdc <HAL_ETH_Init+0xfc>
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	4a77      	ldr	r2, [pc, #476]	; (8002dac <HAL_ETH_Init+0x2cc>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d804      	bhi.n	8002bdc <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	f043 0308 	orr.w	r3, r3, #8
 8002bd8:	61fb      	str	r3, [r7, #28]
 8002bda:	e027      	b.n	8002c2c <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	4a73      	ldr	r2, [pc, #460]	; (8002dac <HAL_ETH_Init+0x2cc>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d908      	bls.n	8002bf6 <HAL_ETH_Init+0x116>
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	4a6d      	ldr	r2, [pc, #436]	; (8002d9c <HAL_ETH_Init+0x2bc>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d204      	bcs.n	8002bf6 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f043 030c 	orr.w	r3, r3, #12
 8002bf2:	61fb      	str	r3, [r7, #28]
 8002bf4:	e01a      	b.n	8002c2c <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	4a68      	ldr	r2, [pc, #416]	; (8002d9c <HAL_ETH_Init+0x2bc>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d303      	bcc.n	8002c06 <HAL_ETH_Init+0x126>
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	4a6b      	ldr	r2, [pc, #428]	; (8002db0 <HAL_ETH_Init+0x2d0>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d911      	bls.n	8002c2a <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	4a69      	ldr	r2, [pc, #420]	; (8002db0 <HAL_ETH_Init+0x2d0>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d908      	bls.n	8002c20 <HAL_ETH_Init+0x140>
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	4a68      	ldr	r2, [pc, #416]	; (8002db4 <HAL_ETH_Init+0x2d4>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d804      	bhi.n	8002c20 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	f043 0304 	orr.w	r3, r3, #4
 8002c1c:	61fb      	str	r3, [r7, #28]
 8002c1e:	e005      	b.n	8002c2c <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	f043 0310 	orr.w	r3, r3, #16
 8002c26:	61fb      	str	r3, [r7, #28]
 8002c28:	e000      	b.n	8002c2c <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002c2a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	69fa      	ldr	r2, [r7, #28]
 8002c32:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002c34:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002c38:	2100      	movs	r1, #0
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 fb98 	bl	8003370 <HAL_ETH_WritePHYRegister>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00b      	beq.n	8002c5e <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8002c4a:	6939      	ldr	r1, [r7, #16]
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 fd4d 	bl	80036ec <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e0d7      	b.n	8002e0e <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8002c5e:	20ff      	movs	r0, #255	; 0xff
 8002c60:	f7ff fa6a 	bl	8002138 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 80a5 	beq.w	8002db8 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c6e:	f7ff fa57 	bl	8002120 <HAL_GetTick>
 8002c72:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002c74:	f107 030c 	add.w	r3, r7, #12
 8002c78:	461a      	mov	r2, r3
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 fb0f 	bl	80032a0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8002c82:	f7ff fa4d 	bl	8002120 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d90f      	bls.n	8002cb4 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002c98:	6939      	ldr	r1, [r7, #16]
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 fd26 	bl	80036ec <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e0ac      	b.n	8002e0e <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f003 0304 	and.w	r3, r3, #4
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0da      	beq.n	8002c74 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002cbe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 fb53 	bl	8003370 <HAL_ETH_WritePHYRegister>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00b      	beq.n	8002ce8 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002cd4:	6939      	ldr	r1, [r7, #16]
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 fd08 	bl	80036ec <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e092      	b.n	8002e0e <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ce8:	f7ff fa1a 	bl	8002120 <HAL_GetTick>
 8002cec:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002cee:	f107 030c 	add.w	r3, r7, #12
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 fad2 	bl	80032a0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002cfc:	f7ff fa10 	bl	8002120 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d90f      	bls.n	8002d2e <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002d12:	6939      	ldr	r1, [r7, #16]
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 fce9 	bl	80036ec <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e06f      	b.n	8002e0e <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f003 0320 	and.w	r3, r3, #32
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0da      	beq.n	8002cee <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002d38:	f107 030c 	add.w	r3, r7, #12
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	2110      	movs	r1, #16
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 faad 	bl	80032a0 <HAL_ETH_ReadPHYRegister>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00b      	beq.n	8002d64 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002d50:	6939      	ldr	r1, [r7, #16]
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 fcca 	bl	80036ec <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002d60:	2301      	movs	r3, #1
 8002d62:	e054      	b.n	8002e0e <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f003 0304 	and.w	r3, r3, #4
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d004      	beq.n	8002d78 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d74:	60da      	str	r2, [r3, #12]
 8002d76:	e002      	b.n	8002d7e <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d003      	beq.n	8002d90 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	609a      	str	r2, [r3, #8]
 8002d8e:	e035      	b.n	8002dfc <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d96:	609a      	str	r2, [r3, #8]
 8002d98:	e030      	b.n	8002dfc <HAL_ETH_Init+0x31c>
 8002d9a:	bf00      	nop
 8002d9c:	03938700 	.word	0x03938700
 8002da0:	40023800 	.word	0x40023800
 8002da4:	40013800 	.word	0x40013800
 8002da8:	01312cff 	.word	0x01312cff
 8002dac:	02160ebf 	.word	0x02160ebf
 8002db0:	05f5e0ff 	.word	0x05f5e0ff
 8002db4:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	08db      	lsrs	r3, r3, #3
 8002dbe:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	085b      	lsrs	r3, r3, #1
 8002dc6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	461a      	mov	r2, r3
 8002dce:	2100      	movs	r1, #0
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 facd 	bl	8003370 <HAL_ETH_WritePHYRegister>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00b      	beq.n	8002df4 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002de0:	6939      	ldr	r1, [r7, #16]
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 fc82 	bl	80036ec <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e00c      	b.n	8002e0e <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8002df4:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002df8:	f7ff f99e 	bl	8002138 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002dfc:	6939      	ldr	r1, [r7, #16]
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 fc74 	bl	80036ec <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3720      	adds	r7, #32
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop

08002e18 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b087      	sub	sp, #28
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
 8002e24:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d101      	bne.n	8002e38 <HAL_ETH_DMATxDescListInit+0x20>
 8002e34:	2302      	movs	r3, #2
 8002e36:	e052      	b.n	8002ede <HAL_ETH_DMATxDescListInit+0xc6>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2202      	movs	r2, #2
 8002e44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8002e4e:	2300      	movs	r3, #0
 8002e50:	617b      	str	r3, [r7, #20]
 8002e52:	e030      	b.n	8002eb6 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	015b      	lsls	r3, r3, #5
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e64:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002e6c:	fb02 f303 	mul.w	r3, r2, r3
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	4413      	add	r3, r2
 8002e74:	461a      	mov	r2, r3
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d105      	bne.n	8002e8e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	3b01      	subs	r3, #1
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d208      	bcs.n	8002eaa <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	015b      	lsls	r3, r3, #5
 8002e9e:	68ba      	ldr	r2, [r7, #8]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	60da      	str	r2, [r3, #12]
 8002ea8:	e002      	b.n	8002eb0 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8002eaa:	68ba      	ldr	r2, [r7, #8]
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	617b      	str	r3, [r7, #20]
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d3ca      	bcc.n	8002e54 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68ba      	ldr	r2, [r7, #8]
 8002ec4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ec8:	3310      	adds	r3, #16
 8002eca:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	371c      	adds	r7, #28
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8002eea:	b480      	push	{r7}
 8002eec:	b087      	sub	sp, #28
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	60f8      	str	r0, [r7, #12]
 8002ef2:	60b9      	str	r1, [r7, #8]
 8002ef4:	607a      	str	r2, [r7, #4]
 8002ef6:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d101      	bne.n	8002f0a <HAL_ETH_DMARxDescListInit+0x20>
 8002f06:	2302      	movs	r3, #2
 8002f08:	e056      	b.n	8002fb8 <HAL_ETH_DMARxDescListInit+0xce>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2202      	movs	r2, #2
 8002f16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8002f20:	2300      	movs	r3, #0
 8002f22:	617b      	str	r3, [r7, #20]
 8002f24:	e034      	b.n	8002f90 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	015b      	lsls	r3, r3, #5
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002f36:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002f3e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002f46:	fb02 f303 	mul.w	r3, r2, r3
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	461a      	mov	r2, r3
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d105      	bne.n	8002f68 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d208      	bcs.n	8002f84 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	3301      	adds	r3, #1
 8002f76:	015b      	lsls	r3, r3, #5
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	60da      	str	r2, [r3, #12]
 8002f82:	e002      	b.n	8002f8a <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	617b      	str	r3, [r7, #20]
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d3c6      	bcc.n	8002f26 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68ba      	ldr	r2, [r7, #8]
 8002f9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fa2:	330c      	adds	r3, #12
 8002fa4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	371c      	adds	r7, #28
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b087      	sub	sp, #28
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	617b      	str	r3, [r7, #20]
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60fb      	str	r3, [r7, #12]
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d101      	bne.n	8002fe8 <HAL_ETH_TransmitFrame+0x24>
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	e0cd      	b.n	8003184 <HAL_ETH_TransmitFrame+0x1c0>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d109      	bne.n	8003012 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800300e:	2301      	movs	r3, #1
 8003010:	e0b8      	b.n	8003184 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	da09      	bge.n	8003030 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2212      	movs	r2, #18
 8003020:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e0a9      	b.n	8003184 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003036:	4293      	cmp	r3, r2
 8003038:	d915      	bls.n	8003066 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	4a54      	ldr	r2, [pc, #336]	; (8003190 <HAL_ETH_TransmitFrame+0x1cc>)
 800303e:	fba2 2303 	umull	r2, r3, r2, r3
 8003042:	0a9b      	lsrs	r3, r3, #10
 8003044:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	4b51      	ldr	r3, [pc, #324]	; (8003190 <HAL_ETH_TransmitFrame+0x1cc>)
 800304a:	fba3 1302 	umull	r1, r3, r3, r2
 800304e:	0a9b      	lsrs	r3, r3, #10
 8003050:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8003054:	fb01 f303 	mul.w	r3, r1, r3
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d005      	beq.n	800306a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	3301      	adds	r3, #1
 8003062:	617b      	str	r3, [r7, #20]
 8003064:	e001      	b.n	800306a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8003066:	2301      	movs	r3, #1
 8003068:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d11c      	bne.n	80030aa <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800307e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800308a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003096:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800309a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	461a      	mov	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80030a8:	e04b      	b.n	8003142 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80030aa:	2300      	movs	r3, #0
 80030ac:	613b      	str	r3, [r7, #16]
 80030ae:	e044      	b.n	800313a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ba:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030be:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d107      	bne.n	80030d6 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80030d4:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030da:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80030de:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	3b01      	subs	r3, #1
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d116      	bne.n	8003118 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80030f8:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	4a25      	ldr	r2, [pc, #148]	; (8003194 <HAL_ETH_TransmitFrame+0x1d0>)
 80030fe:	fb02 f203 	mul.w	r2, r2, r3
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	4413      	add	r3, r2
 8003106:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800310a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003116:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003122:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003126:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	461a      	mov	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	3301      	adds	r3, #1
 8003138:	613b      	str	r3, [r7, #16]
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	429a      	cmp	r2, r3
 8003140:	d3b6      	bcc.n	80030b0 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800314a:	3314      	adds	r3, #20
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0304 	and.w	r3, r3, #4
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00d      	beq.n	8003172 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800315e:	3314      	adds	r3, #20
 8003160:	2204      	movs	r2, #4
 8003162:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800316c:	3304      	adds	r3, #4
 800316e:	2200      	movs	r2, #0
 8003170:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	371c      	adds	r7, #28
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	ac02b00b 	.word	0xac02b00b
 8003194:	fffffa0c 	.word	0xfffffa0c

08003198 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d101      	bne.n	80031b2 <HAL_ETH_GetReceivedFrame+0x1a>
 80031ae:	2302      	movs	r3, #2
 80031b0:	e070      	b.n	8003294 <HAL_ETH_GetReceivedFrame+0xfc>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2202      	movs	r2, #2
 80031be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	db5a      	blt.n	8003282 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d030      	beq.n	800323c <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031de:	1c5a      	adds	r2, r3, #1
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d103      	bne.n	80031f4 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	0c1b      	lsrs	r3, r3, #16
 8003204:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003208:	3b04      	subs	r3, #4
 800320a:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	461a      	mov	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8003238:	2300      	movs	r3, #0
 800323a:	e02b      	b.n	8003294 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003246:	2b00      	cmp	r3, #0
 8003248:	d010      	beq.n	800326c <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	461a      	mov	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	629a      	str	r2, [r3, #40]	; 0x28
 800326a:	e00a      	b.n	8003282 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003270:	1c5a      	adds	r2, r3, #1
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	461a      	mov	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
}
 8003294:	4618      	mov	r0, r3
 8003296:	3714      	adds	r7, #20
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	460b      	mov	r3, r1
 80032aa:	607a      	str	r2, [r7, #4]
 80032ac:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80032ae:	2300      	movs	r3, #0
 80032b0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80032b2:	2300      	movs	r3, #0
 80032b4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b82      	cmp	r3, #130	; 0x82
 80032c0:	d101      	bne.n	80032c6 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80032c2:	2302      	movs	r3, #2
 80032c4:	e050      	b.n	8003368 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2282      	movs	r2, #130	; 0x82
 80032ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f003 031c 	and.w	r3, r3, #28
 80032dc:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8a1b      	ldrh	r3, [r3, #16]
 80032e2:	02db      	lsls	r3, r3, #11
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80032ec:	897b      	ldrh	r3, [r7, #10]
 80032ee:	019b      	lsls	r3, r3, #6
 80032f0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f023 0302 	bic.w	r3, r3, #2
 8003300:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	f043 0301 	orr.w	r3, r3, #1
 8003308:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003312:	f7fe ff05 	bl	8002120 <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003318:	e015      	b.n	8003346 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800331a:	f7fe ff01 	bl	8002120 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003328:	d309      	bcc.n	800333e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e014      	b.n	8003368 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1e4      	bne.n	800331a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	b29b      	uxth	r3, r3
 8003358:	461a      	mov	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	460b      	mov	r3, r1
 800337a:	607a      	str	r2, [r7, #4]
 800337c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800337e:	2300      	movs	r3, #0
 8003380:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003382:	2300      	movs	r3, #0
 8003384:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b42      	cmp	r3, #66	; 0x42
 8003390:	d101      	bne.n	8003396 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8003392:	2302      	movs	r3, #2
 8003394:	e04e      	b.n	8003434 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2242      	movs	r2, #66	; 0x42
 800339a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f003 031c 	and.w	r3, r3, #28
 80033ac:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8a1b      	ldrh	r3, [r3, #16]
 80033b2:	02db      	lsls	r3, r3, #11
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80033bc:	897b      	ldrh	r3, [r7, #10]
 80033be:	019b      	lsls	r3, r3, #6
 80033c0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f043 0302 	orr.w	r3, r3, #2
 80033d0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f043 0301 	orr.w	r3, r3, #1
 80033d8:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	b29a      	uxth	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80033ec:	f7fe fe98 	bl	8002120 <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80033f2:	e015      	b.n	8003420 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80033f4:	f7fe fe94 	bl	8002120 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003402:	d309      	bcc.n	8003418 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e00d      	b.n	8003434 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1e4      	bne.n	80033f4 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3718      	adds	r7, #24
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800344a:	2b01      	cmp	r3, #1
 800344c:	d101      	bne.n	8003452 <HAL_ETH_Start+0x16>
 800344e:	2302      	movs	r3, #2
 8003450:	e01f      	b.n	8003492 <HAL_ETH_Start+0x56>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2202      	movs	r2, #2
 800345e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 fb44 	bl	8003af0 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 fb7b 	bl	8003b64 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 fc12 	bl	8003c98 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 fbaf 	bl	8003bd8 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 fbdc 	bl	8003c38 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800349a:	b580      	push	{r7, lr}
 800349c:	b082      	sub	sp, #8
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d101      	bne.n	80034b0 <HAL_ETH_Stop+0x16>
 80034ac:	2302      	movs	r3, #2
 80034ae:	e01f      	b.n	80034f0 <HAL_ETH_Stop+0x56>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 fba1 	bl	8003c08 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 fbce 	bl	8003c68 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 fb66 	bl	8003b9e <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 fbe0 	bl	8003c98 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 fb26 	bl	8003b2a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8003502:	2300      	movs	r3, #0
 8003504:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800350c:	2b01      	cmp	r3, #1
 800350e:	d101      	bne.n	8003514 <HAL_ETH_ConfigMAC+0x1c>
 8003510:	2302      	movs	r3, #2
 8003512:	e0e4      	b.n	80036de <HAL_ETH_ConfigMAC+0x1e6>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2202      	movs	r2, #2
 8003520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	2b00      	cmp	r3, #0
 8003528:	f000 80b1 	beq.w	800368e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	4b6c      	ldr	r3, [pc, #432]	; (80036e8 <HAL_ETH_ConfigMAC+0x1f0>)
 8003538:	4013      	ands	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8003544:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800354a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8003550:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8003556:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 800355c:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8003562:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8003568:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800356e:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8003574:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800357a:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8003580:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8003586:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	4313      	orrs	r3, r2
 800358c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800359e:	2001      	movs	r0, #1
 80035a0:	f7fe fdca 	bl	8002138 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80035b4:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80035ba:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80035c0:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80035c6:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80035cc:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80035d2:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80035de:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80035e0:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80035ea:	2001      	movs	r0, #1
 80035ec:	f7fe fda4 	bl	8002138 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003600:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	683a      	ldr	r2, [r7, #0]
 8003608:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800360a:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	f64f 7341 	movw	r3, #65345	; 0xff41
 800361a:	4013      	ands	r3, r2
 800361c:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003622:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8003628:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800362e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8003634:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800363a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8003640:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	4313      	orrs	r3, r2
 8003646:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003658:	2001      	movs	r0, #1
 800365a:	f7fe fd6d 	bl	8002138 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	69db      	ldr	r3, [r3, #28]
 800367c:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800367e:	2001      	movs	r0, #1
 8003680:	f7fe fd5a 	bl	8002138 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	61da      	str	r2, [r3, #28]
 800368c:	e01e      	b.n	80036cc <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800369c:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	689a      	ldr	r2, [r3, #8]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80036be:	2001      	movs	r0, #1
 80036c0:	f7fe fd3a 	bl	8002138 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	ff20810f 	.word	0xff20810f

080036ec <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b0b0      	sub	sp, #192	; 0xc0
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80036f6:	2300      	movs	r3, #0
 80036f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d007      	beq.n	8003712 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003708:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003710:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8003712:	2300      	movs	r3, #0
 8003714:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8003716:	2300      	movs	r3, #0
 8003718:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800371a:	2300      	movs	r3, #0
 800371c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800371e:	2300      	movs	r3, #0
 8003720:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8003722:	2300      	movs	r3, #0
 8003724:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8003726:	2300      	movs	r3, #0
 8003728:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d103      	bne.n	800373a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8003732:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003736:	663b      	str	r3, [r7, #96]	; 0x60
 8003738:	e001      	b.n	800373e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800373a:	2300      	movs	r3, #0
 800373c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800373e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003742:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8003744:	2300      	movs	r3, #0
 8003746:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003748:	2300      	movs	r3, #0
 800374a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800374c:	2300      	movs	r3, #0
 800374e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8003750:	2300      	movs	r3, #0
 8003752:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8003754:	2300      	movs	r3, #0
 8003756:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8003758:	2340      	movs	r3, #64	; 0x40
 800375a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800375c:	2300      	movs	r3, #0
 800375e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8003762:	2300      	movs	r3, #0
 8003764:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8003768:	2300      	movs	r3, #0
 800376a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800376e:	2300      	movs	r3, #0
 8003770:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8003774:	2300      	movs	r3, #0
 8003776:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800377a:	2300      	movs	r3, #0
 800377c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8003780:	2300      	movs	r3, #0
 8003782:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8003786:	2300      	movs	r3, #0
 8003788:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800378c:	2380      	movs	r3, #128	; 0x80
 800378e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003792:	2300      	movs	r3, #0
 8003794:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8003798:	2300      	movs	r3, #0
 800379a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800379e:	2300      	movs	r3, #0
 80037a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80037a4:	2300      	movs	r3, #0
 80037a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80037aa:	2300      	movs	r3, #0
 80037ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80037b0:	2300      	movs	r3, #0
 80037b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80037c0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80037c4:	4bac      	ldr	r3, [pc, #688]	; (8003a78 <ETH_MACDMAConfig+0x38c>)
 80037c6:	4013      	ands	r3, r2
 80037c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80037cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80037ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80037d0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80037d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80037d4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80037d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80037d8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80037de:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80037e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80037e2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80037e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80037e6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80037ec:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80037ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80037f0:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80037f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80037f4:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80037f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80037f8:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80037fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80037fc:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80037fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8003800:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003802:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003806:	4313      	orrs	r3, r2
 8003808:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003814:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003820:	2001      	movs	r0, #1
 8003822:	f7fe fc89 	bl	8002138 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800382e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003830:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8003832:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003834:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8003836:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8003838:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800383a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800383e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8003840:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8003844:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8003846:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800384a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800384c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8003850:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003854:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800385c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800385e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800386a:	2001      	movs	r0, #1
 800386c:	f7fe fc64 	bl	8002138 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003878:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003882:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800388c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003898:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800389c:	f64f 7341 	movw	r3, #65345	; 0xff41
 80038a0:	4013      	ands	r3, r2
 80038a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80038a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80038aa:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80038ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80038b0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80038b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80038b6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80038b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80038bc:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80038be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80038c2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80038c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80038c8:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80038ca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80038ce:	4313      	orrs	r3, r2
 80038d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80038dc:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80038e8:	2001      	movs	r0, #1
 80038ea:	f7fe fc25 	bl	8002138 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80038f6:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80038f8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80038fc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003912:	2001      	movs	r0, #1
 8003914:	f7fe fc10 	bl	8002138 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003920:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8003922:	2300      	movs	r3, #0
 8003924:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8003926:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800392a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800392c:	2300      	movs	r3, #0
 800392e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8003930:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003934:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003936:	2300      	movs	r3, #0
 8003938:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800393a:	2300      	movs	r3, #0
 800393c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800393e:	2300      	movs	r3, #0
 8003940:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003942:	2300      	movs	r3, #0
 8003944:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8003946:	2304      	movs	r3, #4
 8003948:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800394a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800394e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8003950:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003954:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003956:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800395a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800395c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003960:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8003962:	2380      	movs	r3, #128	; 0x80
 8003964:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8003966:	2300      	movs	r3, #0
 8003968:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800396a:	2300      	movs	r3, #0
 800396c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003976:	3318      	adds	r3, #24
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800397e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003982:	4b3e      	ldr	r3, [pc, #248]	; (8003a7c <ETH_MACDMAConfig+0x390>)
 8003984:	4013      	ands	r3, r2
 8003986:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800398a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800398c:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800398e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8003990:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8003992:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8003994:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8003996:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8003998:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800399a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800399c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800399e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80039a0:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80039a2:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80039a6:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80039a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80039aa:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80039ac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80039b0:	4313      	orrs	r3, r2
 80039b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039be:	3318      	adds	r3, #24
 80039c0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80039c4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039ce:	3318      	adds	r3, #24
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80039d6:	2001      	movs	r0, #1
 80039d8:	f7fe fbae 	bl	8002138 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039e4:	3318      	adds	r3, #24
 80039e6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80039ea:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80039ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80039ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80039f0:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80039f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80039f4:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80039f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80039f8:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80039fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80039fc:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80039fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a00:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8003a02:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8003a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8003a06:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003a10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a14:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a24:	2001      	movs	r0, #1
 8003a26:	f7fe fb87 	bl	8002138 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a32:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003a36:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d10f      	bne.n	8003a60 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a48:	331c      	adds	r3, #28
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003a54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a5c:	331c      	adds	r3, #28
 8003a5e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	461a      	mov	r2, r3
 8003a66:	2100      	movs	r1, #0
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 f809 	bl	8003a80 <ETH_MACAddressConfig>
}
 8003a6e:	bf00      	nop
 8003a70:	37c0      	adds	r7, #192	; 0xc0
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	ff20810f 	.word	0xff20810f
 8003a7c:	f8de3f23 	.word	0xf8de3f23

08003a80 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b087      	sub	sp, #28
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3305      	adds	r3, #5
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	021b      	lsls	r3, r3, #8
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	3204      	adds	r2, #4
 8003a98:	7812      	ldrb	r2, [r2, #0]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	4b11      	ldr	r3, [pc, #68]	; (8003ae8 <ETH_MACAddressConfig+0x68>)
 8003aa2:	4413      	add	r3, r2
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	3303      	adds	r3, #3
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	061a      	lsls	r2, r3, #24
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	3302      	adds	r3, #2
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	041b      	lsls	r3, r3, #16
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	021b      	lsls	r3, r3, #8
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	7812      	ldrb	r2, [r2, #0]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	4b06      	ldr	r3, [pc, #24]	; (8003aec <ETH_MACAddressConfig+0x6c>)
 8003ad2:	4413      	add	r3, r2
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	6013      	str	r3, [r2, #0]
}
 8003ada:	bf00      	nop
 8003adc:	371c      	adds	r7, #28
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	40028040 	.word	0x40028040
 8003aec:	40028044 	.word	0x40028044

08003af0 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003af8:	2300      	movs	r3, #0
 8003afa:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 0208 	orr.w	r2, r2, #8
 8003b0a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003b14:	2001      	movs	r0, #1
 8003b16:	f000 f8e9 	bl	8003cec <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	601a      	str	r2, [r3, #0]
}
 8003b22:	bf00      	nop
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b084      	sub	sp, #16
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003b32:	2300      	movs	r3, #0
 8003b34:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 0208 	bic.w	r2, r2, #8
 8003b44:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003b4e:	2001      	movs	r0, #1
 8003b50:	f000 f8cc 	bl	8003cec <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	601a      	str	r2, [r3, #0]
}
 8003b5c:	bf00      	nop
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f042 0204 	orr.w	r2, r2, #4
 8003b7e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003b88:	2001      	movs	r0, #1
 8003b8a:	f000 f8af 	bl	8003cec <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	601a      	str	r2, [r3, #0]
}
 8003b96:	bf00      	nop
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b084      	sub	sp, #16
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0204 	bic.w	r2, r2, #4
 8003bb8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003bc2:	2001      	movs	r0, #1
 8003bc4:	f000 f892 	bl	8003cec <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	601a      	str	r2, [r3, #0]
}
 8003bd0:	bf00      	nop
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003be8:	3318      	adds	r3, #24
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bf8:	3318      	adds	r3, #24
 8003bfa:	601a      	str	r2, [r3, #0]
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c18:	3318      	adds	r3, #24
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c28:	3318      	adds	r3, #24
 8003c2a:	601a      	str	r2, [r3, #0]
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c48:	3318      	adds	r3, #24
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f042 0202 	orr.w	r2, r2, #2
 8003c54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c58:	3318      	adds	r3, #24
 8003c5a:	601a      	str	r2, [r3, #0]
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c78:	3318      	adds	r3, #24
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f022 0202 	bic.w	r2, r2, #2
 8003c84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c88:	3318      	adds	r3, #24
 8003c8a:	601a      	str	r2, [r3, #0]
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cac:	3318      	adds	r3, #24
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003cb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cbc:	3318      	adds	r3, #24
 8003cbe:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cc8:	3318      	adds	r3, #24
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003cce:	2001      	movs	r0, #1
 8003cd0:	f000 f80c 	bl	8003cec <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cde:	3318      	adds	r3, #24
 8003ce0:	601a      	str	r2, [r3, #0]
}
 8003ce2:	bf00      	nop
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
	...

08003cec <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003cf4:	4b0b      	ldr	r3, [pc, #44]	; (8003d24 <ETH_Delay+0x38>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a0b      	ldr	r2, [pc, #44]	; (8003d28 <ETH_Delay+0x3c>)
 8003cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfe:	0a5b      	lsrs	r3, r3, #9
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	fb02 f303 	mul.w	r3, r2, r3
 8003d06:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8003d08:	bf00      	nop
  } 
  while (Delay --);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	1e5a      	subs	r2, r3, #1
 8003d0e:	60fa      	str	r2, [r7, #12]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1f9      	bne.n	8003d08 <ETH_Delay+0x1c>
}
 8003d14:	bf00      	nop
 8003d16:	bf00      	nop
 8003d18:	3714      	adds	r7, #20
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	20000138 	.word	0x20000138
 8003d28:	10624dd3 	.word	0x10624dd3

08003d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b089      	sub	sp, #36	; 0x24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d36:	2300      	movs	r3, #0
 8003d38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d42:	2300      	movs	r3, #0
 8003d44:	61fb      	str	r3, [r7, #28]
 8003d46:	e16b      	b.n	8004020 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d48:	2201      	movs	r2, #1
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	f040 815a 	bne.w	800401a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f003 0303 	and.w	r3, r3, #3
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d005      	beq.n	8003d7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d130      	bne.n	8003de0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	005b      	lsls	r3, r3, #1
 8003d88:	2203      	movs	r2, #3
 8003d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8e:	43db      	mvns	r3, r3
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	4013      	ands	r3, r2
 8003d94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	68da      	ldr	r2, [r3, #12]
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003db4:	2201      	movs	r2, #1
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbc:	43db      	mvns	r3, r3
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	091b      	lsrs	r3, r3, #4
 8003dca:	f003 0201 	and.w	r2, r3, #1
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f003 0303 	and.w	r3, r3, #3
 8003de8:	2b03      	cmp	r3, #3
 8003dea:	d017      	beq.n	8003e1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	2203      	movs	r2, #3
 8003df8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfc:	43db      	mvns	r3, r3
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	4013      	ands	r3, r2
 8003e02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	689a      	ldr	r2, [r3, #8]
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f003 0303 	and.w	r3, r3, #3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d123      	bne.n	8003e70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	08da      	lsrs	r2, r3, #3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	3208      	adds	r2, #8
 8003e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	f003 0307 	and.w	r3, r3, #7
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	220f      	movs	r2, #15
 8003e40:	fa02 f303 	lsl.w	r3, r2, r3
 8003e44:	43db      	mvns	r3, r3
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	691a      	ldr	r2, [r3, #16]
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	f003 0307 	and.w	r3, r3, #7
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	08da      	lsrs	r2, r3, #3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	3208      	adds	r2, #8
 8003e6a:	69b9      	ldr	r1, [r7, #24]
 8003e6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	2203      	movs	r2, #3
 8003e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e80:	43db      	mvns	r3, r3
 8003e82:	69ba      	ldr	r2, [r7, #24]
 8003e84:	4013      	ands	r3, r2
 8003e86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f003 0203 	and.w	r2, r3, #3
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 80b4 	beq.w	800401a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	60fb      	str	r3, [r7, #12]
 8003eb6:	4b60      	ldr	r3, [pc, #384]	; (8004038 <HAL_GPIO_Init+0x30c>)
 8003eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eba:	4a5f      	ldr	r2, [pc, #380]	; (8004038 <HAL_GPIO_Init+0x30c>)
 8003ebc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ec2:	4b5d      	ldr	r3, [pc, #372]	; (8004038 <HAL_GPIO_Init+0x30c>)
 8003ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eca:	60fb      	str	r3, [r7, #12]
 8003ecc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ece:	4a5b      	ldr	r2, [pc, #364]	; (800403c <HAL_GPIO_Init+0x310>)
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	089b      	lsrs	r3, r3, #2
 8003ed4:	3302      	adds	r3, #2
 8003ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	f003 0303 	and.w	r3, r3, #3
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	220f      	movs	r2, #15
 8003ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eea:	43db      	mvns	r3, r3
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	4013      	ands	r3, r2
 8003ef0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a52      	ldr	r2, [pc, #328]	; (8004040 <HAL_GPIO_Init+0x314>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d02b      	beq.n	8003f52 <HAL_GPIO_Init+0x226>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a51      	ldr	r2, [pc, #324]	; (8004044 <HAL_GPIO_Init+0x318>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d025      	beq.n	8003f4e <HAL_GPIO_Init+0x222>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a50      	ldr	r2, [pc, #320]	; (8004048 <HAL_GPIO_Init+0x31c>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d01f      	beq.n	8003f4a <HAL_GPIO_Init+0x21e>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a4f      	ldr	r2, [pc, #316]	; (800404c <HAL_GPIO_Init+0x320>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d019      	beq.n	8003f46 <HAL_GPIO_Init+0x21a>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a4e      	ldr	r2, [pc, #312]	; (8004050 <HAL_GPIO_Init+0x324>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d013      	beq.n	8003f42 <HAL_GPIO_Init+0x216>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a4d      	ldr	r2, [pc, #308]	; (8004054 <HAL_GPIO_Init+0x328>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d00d      	beq.n	8003f3e <HAL_GPIO_Init+0x212>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a4c      	ldr	r2, [pc, #304]	; (8004058 <HAL_GPIO_Init+0x32c>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d007      	beq.n	8003f3a <HAL_GPIO_Init+0x20e>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a4b      	ldr	r2, [pc, #300]	; (800405c <HAL_GPIO_Init+0x330>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d101      	bne.n	8003f36 <HAL_GPIO_Init+0x20a>
 8003f32:	2307      	movs	r3, #7
 8003f34:	e00e      	b.n	8003f54 <HAL_GPIO_Init+0x228>
 8003f36:	2308      	movs	r3, #8
 8003f38:	e00c      	b.n	8003f54 <HAL_GPIO_Init+0x228>
 8003f3a:	2306      	movs	r3, #6
 8003f3c:	e00a      	b.n	8003f54 <HAL_GPIO_Init+0x228>
 8003f3e:	2305      	movs	r3, #5
 8003f40:	e008      	b.n	8003f54 <HAL_GPIO_Init+0x228>
 8003f42:	2304      	movs	r3, #4
 8003f44:	e006      	b.n	8003f54 <HAL_GPIO_Init+0x228>
 8003f46:	2303      	movs	r3, #3
 8003f48:	e004      	b.n	8003f54 <HAL_GPIO_Init+0x228>
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	e002      	b.n	8003f54 <HAL_GPIO_Init+0x228>
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e000      	b.n	8003f54 <HAL_GPIO_Init+0x228>
 8003f52:	2300      	movs	r3, #0
 8003f54:	69fa      	ldr	r2, [r7, #28]
 8003f56:	f002 0203 	and.w	r2, r2, #3
 8003f5a:	0092      	lsls	r2, r2, #2
 8003f5c:	4093      	lsls	r3, r2
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f64:	4935      	ldr	r1, [pc, #212]	; (800403c <HAL_GPIO_Init+0x310>)
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	089b      	lsrs	r3, r3, #2
 8003f6a:	3302      	adds	r3, #2
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f72:	4b3b      	ldr	r3, [pc, #236]	; (8004060 <HAL_GPIO_Init+0x334>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	43db      	mvns	r3, r3
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	4013      	ands	r3, r2
 8003f80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d003      	beq.n	8003f96 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f96:	4a32      	ldr	r2, [pc, #200]	; (8004060 <HAL_GPIO_Init+0x334>)
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003f9c:	4b30      	ldr	r3, [pc, #192]	; (8004060 <HAL_GPIO_Init+0x334>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	43db      	mvns	r3, r3
 8003fa6:	69ba      	ldr	r2, [r7, #24]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d003      	beq.n	8003fc0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fc0:	4a27      	ldr	r2, [pc, #156]	; (8004060 <HAL_GPIO_Init+0x334>)
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003fc6:	4b26      	ldr	r3, [pc, #152]	; (8004060 <HAL_GPIO_Init+0x334>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	43db      	mvns	r3, r3
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003fea:	4a1d      	ldr	r2, [pc, #116]	; (8004060 <HAL_GPIO_Init+0x334>)
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ff0:	4b1b      	ldr	r3, [pc, #108]	; (8004060 <HAL_GPIO_Init+0x334>)
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	43db      	mvns	r3, r3
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d003      	beq.n	8004014 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	4313      	orrs	r3, r2
 8004012:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004014:	4a12      	ldr	r2, [pc, #72]	; (8004060 <HAL_GPIO_Init+0x334>)
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	3301      	adds	r3, #1
 800401e:	61fb      	str	r3, [r7, #28]
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	2b0f      	cmp	r3, #15
 8004024:	f67f ae90 	bls.w	8003d48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004028:	bf00      	nop
 800402a:	bf00      	nop
 800402c:	3724      	adds	r7, #36	; 0x24
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	40023800 	.word	0x40023800
 800403c:	40013800 	.word	0x40013800
 8004040:	40020000 	.word	0x40020000
 8004044:	40020400 	.word	0x40020400
 8004048:	40020800 	.word	0x40020800
 800404c:	40020c00 	.word	0x40020c00
 8004050:	40021000 	.word	0x40021000
 8004054:	40021400 	.word	0x40021400
 8004058:	40021800 	.word	0x40021800
 800405c:	40021c00 	.word	0x40021c00
 8004060:	40013c00 	.word	0x40013c00

08004064 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	460b      	mov	r3, r1
 800406e:	807b      	strh	r3, [r7, #2]
 8004070:	4613      	mov	r3, r2
 8004072:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004074:	787b      	ldrb	r3, [r7, #1]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800407a:	887a      	ldrh	r2, [r7, #2]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004080:	e003      	b.n	800408a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004082:	887b      	ldrh	r3, [r7, #2]
 8004084:	041a      	lsls	r2, r3, #16
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	619a      	str	r2, [r3, #24]
}
 800408a:	bf00      	nop
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
	...

08004098 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e264      	b.n	8004574 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d075      	beq.n	80041a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040b6:	4ba3      	ldr	r3, [pc, #652]	; (8004344 <HAL_RCC_OscConfig+0x2ac>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f003 030c 	and.w	r3, r3, #12
 80040be:	2b04      	cmp	r3, #4
 80040c0:	d00c      	beq.n	80040dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040c2:	4ba0      	ldr	r3, [pc, #640]	; (8004344 <HAL_RCC_OscConfig+0x2ac>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040ca:	2b08      	cmp	r3, #8
 80040cc:	d112      	bne.n	80040f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040ce:	4b9d      	ldr	r3, [pc, #628]	; (8004344 <HAL_RCC_OscConfig+0x2ac>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040da:	d10b      	bne.n	80040f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040dc:	4b99      	ldr	r3, [pc, #612]	; (8004344 <HAL_RCC_OscConfig+0x2ac>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d05b      	beq.n	80041a0 <HAL_RCC_OscConfig+0x108>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d157      	bne.n	80041a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e23f      	b.n	8004574 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040fc:	d106      	bne.n	800410c <HAL_RCC_OscConfig+0x74>
 80040fe:	4b91      	ldr	r3, [pc, #580]	; (8004344 <HAL_RCC_OscConfig+0x2ac>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a90      	ldr	r2, [pc, #576]	; (8004344 <HAL_RCC_OscConfig+0x2ac>)
 8004104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004108:	6013      	str	r3, [r2, #0]
 800410a:	e01d      	b.n	8004148 <HAL_RCC_OscConfig+0xb0>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004114:	d10c      	bne.n	8004130 <HAL_RCC_OscConfig+0x98>
 8004116:	4b8b      	ldr	r3, [pc, #556]	; (8004344 <HAL_RCC_OscConfig+0x2ac>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a8a      	ldr	r2, [pc, #552]	; (8004344 <HAL_RCC_OscConfig+0x2ac>)
 800411c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004120:	6013      	str	r3, [r2, #0]
 8004122:	4b88      	ldr	r3, [pc, #544]	; (8004344 <HAL_RCC_OscConfig+0x2ac>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a87      	ldr	r2, [pc, #540]	; (8004344 <HAL_RCC_OscConfig+0x2ac>)
 8004128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800412c:	6013      	str	r3, [r2, #0]
 800412e:	e00b      	b.n	8004148 <HAL_RCC_OscConfig+0xb0>
 8004130:	4b84      	ldr	r3, [pc, #528]	; (8004344 <HAL_RCC_OscConfig+0x2ac>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a83      	ldr	r2, [pc, #524]	; (8004344 <HAL_RCC_OscConfig+0x2ac>)
 8004136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800413a:	6013      	str	r3, [r2, #0]
 800413c:	4b81      	ldr	r3, [pc, #516]	; (8004344 <HAL_RCC_OscConfig+0x2ac>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a80      	ldr	r2, [pc, #512]	; (8004344 <HAL_RCC_OscConfig+0x2ac>)
 8004142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004146:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d013      	beq.n	8004178 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004150:	f7fd ffe6 	bl	8002120 <HAL_GetTick>
 8004154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004156:	e008      	b.n	800416a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004158:	f7fd ffe2 	bl	8002120 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b64      	cmp	r3, #100	; 0x64
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e204      	b.n	8004574 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800416a:	4b76      	ldr	r3, [pc, #472]	; (8004344 <HAL_RCC_OscConfig+0x2ac>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d0f0      	beq.n	8004158 <HAL_RCC_OscConfig+0xc0>
 8004176:	e014      	b.n	80041a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004178:	f7fd ffd2 	bl	8002120 <HAL_GetTick>
 800417c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004180:	f7fd ffce 	bl	8002120 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b64      	cmp	r3, #100	; 0x64
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e1f0      	b.n	8004574 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004192:	4b6c      	ldr	r3, [pc, #432]	; (8004344 <HAL_RCC_OscConfig+0x2ac>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1f0      	bne.n	8004180 <HAL_RCC_OscConfig+0xe8>
 800419e:	e000      	b.n	80041a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d063      	beq.n	8004276 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041ae:	4b65      	ldr	r3, [pc, #404]	; (8004344 <HAL_RCC_OscConfig+0x2ac>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f003 030c 	and.w	r3, r3, #12
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00b      	beq.n	80041d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ba:	4b62      	ldr	r3, [pc, #392]	; (8004344 <HAL_RCC_OscConfig+0x2ac>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041c2:	2b08      	cmp	r3, #8
 80041c4:	d11c      	bne.n	8004200 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041c6:	4b5f      	ldr	r3, [pc, #380]	; (8004344 <HAL_RCC_OscConfig+0x2ac>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d116      	bne.n	8004200 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041d2:	4b5c      	ldr	r3, [pc, #368]	; (8004344 <HAL_RCC_OscConfig+0x2ac>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d005      	beq.n	80041ea <HAL_RCC_OscConfig+0x152>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d001      	beq.n	80041ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e1c4      	b.n	8004574 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ea:	4b56      	ldr	r3, [pc, #344]	; (8004344 <HAL_RCC_OscConfig+0x2ac>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	00db      	lsls	r3, r3, #3
 80041f8:	4952      	ldr	r1, [pc, #328]	; (8004344 <HAL_RCC_OscConfig+0x2ac>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041fe:	e03a      	b.n	8004276 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d020      	beq.n	800424a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004208:	4b4f      	ldr	r3, [pc, #316]	; (8004348 <HAL_RCC_OscConfig+0x2b0>)
 800420a:	2201      	movs	r2, #1
 800420c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800420e:	f7fd ff87 	bl	8002120 <HAL_GetTick>
 8004212:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004214:	e008      	b.n	8004228 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004216:	f7fd ff83 	bl	8002120 <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	2b02      	cmp	r3, #2
 8004222:	d901      	bls.n	8004228 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e1a5      	b.n	8004574 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004228:	4b46      	ldr	r3, [pc, #280]	; (8004344 <HAL_RCC_OscConfig+0x2ac>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0302 	and.w	r3, r3, #2
 8004230:	2b00      	cmp	r3, #0
 8004232:	d0f0      	beq.n	8004216 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004234:	4b43      	ldr	r3, [pc, #268]	; (8004344 <HAL_RCC_OscConfig+0x2ac>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	00db      	lsls	r3, r3, #3
 8004242:	4940      	ldr	r1, [pc, #256]	; (8004344 <HAL_RCC_OscConfig+0x2ac>)
 8004244:	4313      	orrs	r3, r2
 8004246:	600b      	str	r3, [r1, #0]
 8004248:	e015      	b.n	8004276 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800424a:	4b3f      	ldr	r3, [pc, #252]	; (8004348 <HAL_RCC_OscConfig+0x2b0>)
 800424c:	2200      	movs	r2, #0
 800424e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004250:	f7fd ff66 	bl	8002120 <HAL_GetTick>
 8004254:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004256:	e008      	b.n	800426a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004258:	f7fd ff62 	bl	8002120 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b02      	cmp	r3, #2
 8004264:	d901      	bls.n	800426a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e184      	b.n	8004574 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800426a:	4b36      	ldr	r3, [pc, #216]	; (8004344 <HAL_RCC_OscConfig+0x2ac>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1f0      	bne.n	8004258 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0308 	and.w	r3, r3, #8
 800427e:	2b00      	cmp	r3, #0
 8004280:	d030      	beq.n	80042e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d016      	beq.n	80042b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800428a:	4b30      	ldr	r3, [pc, #192]	; (800434c <HAL_RCC_OscConfig+0x2b4>)
 800428c:	2201      	movs	r2, #1
 800428e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004290:	f7fd ff46 	bl	8002120 <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004296:	e008      	b.n	80042aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004298:	f7fd ff42 	bl	8002120 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e164      	b.n	8004574 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042aa:	4b26      	ldr	r3, [pc, #152]	; (8004344 <HAL_RCC_OscConfig+0x2ac>)
 80042ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d0f0      	beq.n	8004298 <HAL_RCC_OscConfig+0x200>
 80042b6:	e015      	b.n	80042e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042b8:	4b24      	ldr	r3, [pc, #144]	; (800434c <HAL_RCC_OscConfig+0x2b4>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042be:	f7fd ff2f 	bl	8002120 <HAL_GetTick>
 80042c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042c4:	e008      	b.n	80042d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042c6:	f7fd ff2b 	bl	8002120 <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d901      	bls.n	80042d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e14d      	b.n	8004574 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042d8:	4b1a      	ldr	r3, [pc, #104]	; (8004344 <HAL_RCC_OscConfig+0x2ac>)
 80042da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1f0      	bne.n	80042c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0304 	and.w	r3, r3, #4
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 80a0 	beq.w	8004432 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042f2:	2300      	movs	r3, #0
 80042f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042f6:	4b13      	ldr	r3, [pc, #76]	; (8004344 <HAL_RCC_OscConfig+0x2ac>)
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10f      	bne.n	8004322 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004302:	2300      	movs	r3, #0
 8004304:	60bb      	str	r3, [r7, #8]
 8004306:	4b0f      	ldr	r3, [pc, #60]	; (8004344 <HAL_RCC_OscConfig+0x2ac>)
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	4a0e      	ldr	r2, [pc, #56]	; (8004344 <HAL_RCC_OscConfig+0x2ac>)
 800430c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004310:	6413      	str	r3, [r2, #64]	; 0x40
 8004312:	4b0c      	ldr	r3, [pc, #48]	; (8004344 <HAL_RCC_OscConfig+0x2ac>)
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800431a:	60bb      	str	r3, [r7, #8]
 800431c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800431e:	2301      	movs	r3, #1
 8004320:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004322:	4b0b      	ldr	r3, [pc, #44]	; (8004350 <HAL_RCC_OscConfig+0x2b8>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800432a:	2b00      	cmp	r3, #0
 800432c:	d121      	bne.n	8004372 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800432e:	4b08      	ldr	r3, [pc, #32]	; (8004350 <HAL_RCC_OscConfig+0x2b8>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a07      	ldr	r2, [pc, #28]	; (8004350 <HAL_RCC_OscConfig+0x2b8>)
 8004334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004338:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800433a:	f7fd fef1 	bl	8002120 <HAL_GetTick>
 800433e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004340:	e011      	b.n	8004366 <HAL_RCC_OscConfig+0x2ce>
 8004342:	bf00      	nop
 8004344:	40023800 	.word	0x40023800
 8004348:	42470000 	.word	0x42470000
 800434c:	42470e80 	.word	0x42470e80
 8004350:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004354:	f7fd fee4 	bl	8002120 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b02      	cmp	r3, #2
 8004360:	d901      	bls.n	8004366 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e106      	b.n	8004574 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004366:	4b85      	ldr	r3, [pc, #532]	; (800457c <HAL_RCC_OscConfig+0x4e4>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436e:	2b00      	cmp	r3, #0
 8004370:	d0f0      	beq.n	8004354 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d106      	bne.n	8004388 <HAL_RCC_OscConfig+0x2f0>
 800437a:	4b81      	ldr	r3, [pc, #516]	; (8004580 <HAL_RCC_OscConfig+0x4e8>)
 800437c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437e:	4a80      	ldr	r2, [pc, #512]	; (8004580 <HAL_RCC_OscConfig+0x4e8>)
 8004380:	f043 0301 	orr.w	r3, r3, #1
 8004384:	6713      	str	r3, [r2, #112]	; 0x70
 8004386:	e01c      	b.n	80043c2 <HAL_RCC_OscConfig+0x32a>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	2b05      	cmp	r3, #5
 800438e:	d10c      	bne.n	80043aa <HAL_RCC_OscConfig+0x312>
 8004390:	4b7b      	ldr	r3, [pc, #492]	; (8004580 <HAL_RCC_OscConfig+0x4e8>)
 8004392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004394:	4a7a      	ldr	r2, [pc, #488]	; (8004580 <HAL_RCC_OscConfig+0x4e8>)
 8004396:	f043 0304 	orr.w	r3, r3, #4
 800439a:	6713      	str	r3, [r2, #112]	; 0x70
 800439c:	4b78      	ldr	r3, [pc, #480]	; (8004580 <HAL_RCC_OscConfig+0x4e8>)
 800439e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a0:	4a77      	ldr	r2, [pc, #476]	; (8004580 <HAL_RCC_OscConfig+0x4e8>)
 80043a2:	f043 0301 	orr.w	r3, r3, #1
 80043a6:	6713      	str	r3, [r2, #112]	; 0x70
 80043a8:	e00b      	b.n	80043c2 <HAL_RCC_OscConfig+0x32a>
 80043aa:	4b75      	ldr	r3, [pc, #468]	; (8004580 <HAL_RCC_OscConfig+0x4e8>)
 80043ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ae:	4a74      	ldr	r2, [pc, #464]	; (8004580 <HAL_RCC_OscConfig+0x4e8>)
 80043b0:	f023 0301 	bic.w	r3, r3, #1
 80043b4:	6713      	str	r3, [r2, #112]	; 0x70
 80043b6:	4b72      	ldr	r3, [pc, #456]	; (8004580 <HAL_RCC_OscConfig+0x4e8>)
 80043b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ba:	4a71      	ldr	r2, [pc, #452]	; (8004580 <HAL_RCC_OscConfig+0x4e8>)
 80043bc:	f023 0304 	bic.w	r3, r3, #4
 80043c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d015      	beq.n	80043f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ca:	f7fd fea9 	bl	8002120 <HAL_GetTick>
 80043ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d0:	e00a      	b.n	80043e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043d2:	f7fd fea5 	bl	8002120 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d901      	bls.n	80043e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e0c5      	b.n	8004574 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043e8:	4b65      	ldr	r3, [pc, #404]	; (8004580 <HAL_RCC_OscConfig+0x4e8>)
 80043ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d0ee      	beq.n	80043d2 <HAL_RCC_OscConfig+0x33a>
 80043f4:	e014      	b.n	8004420 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043f6:	f7fd fe93 	bl	8002120 <HAL_GetTick>
 80043fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043fc:	e00a      	b.n	8004414 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043fe:	f7fd fe8f 	bl	8002120 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	f241 3288 	movw	r2, #5000	; 0x1388
 800440c:	4293      	cmp	r3, r2
 800440e:	d901      	bls.n	8004414 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e0af      	b.n	8004574 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004414:	4b5a      	ldr	r3, [pc, #360]	; (8004580 <HAL_RCC_OscConfig+0x4e8>)
 8004416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1ee      	bne.n	80043fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004420:	7dfb      	ldrb	r3, [r7, #23]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d105      	bne.n	8004432 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004426:	4b56      	ldr	r3, [pc, #344]	; (8004580 <HAL_RCC_OscConfig+0x4e8>)
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	4a55      	ldr	r2, [pc, #340]	; (8004580 <HAL_RCC_OscConfig+0x4e8>)
 800442c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004430:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	2b00      	cmp	r3, #0
 8004438:	f000 809b 	beq.w	8004572 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800443c:	4b50      	ldr	r3, [pc, #320]	; (8004580 <HAL_RCC_OscConfig+0x4e8>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f003 030c 	and.w	r3, r3, #12
 8004444:	2b08      	cmp	r3, #8
 8004446:	d05c      	beq.n	8004502 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	2b02      	cmp	r3, #2
 800444e:	d141      	bne.n	80044d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004450:	4b4c      	ldr	r3, [pc, #304]	; (8004584 <HAL_RCC_OscConfig+0x4ec>)
 8004452:	2200      	movs	r2, #0
 8004454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004456:	f7fd fe63 	bl	8002120 <HAL_GetTick>
 800445a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800445c:	e008      	b.n	8004470 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800445e:	f7fd fe5f 	bl	8002120 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d901      	bls.n	8004470 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e081      	b.n	8004574 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004470:	4b43      	ldr	r3, [pc, #268]	; (8004580 <HAL_RCC_OscConfig+0x4e8>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1f0      	bne.n	800445e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	69da      	ldr	r2, [r3, #28]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a1b      	ldr	r3, [r3, #32]
 8004484:	431a      	orrs	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448a:	019b      	lsls	r3, r3, #6
 800448c:	431a      	orrs	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004492:	085b      	lsrs	r3, r3, #1
 8004494:	3b01      	subs	r3, #1
 8004496:	041b      	lsls	r3, r3, #16
 8004498:	431a      	orrs	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449e:	061b      	lsls	r3, r3, #24
 80044a0:	4937      	ldr	r1, [pc, #220]	; (8004580 <HAL_RCC_OscConfig+0x4e8>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044a6:	4b37      	ldr	r3, [pc, #220]	; (8004584 <HAL_RCC_OscConfig+0x4ec>)
 80044a8:	2201      	movs	r2, #1
 80044aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ac:	f7fd fe38 	bl	8002120 <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044b4:	f7fd fe34 	bl	8002120 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e056      	b.n	8004574 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044c6:	4b2e      	ldr	r3, [pc, #184]	; (8004580 <HAL_RCC_OscConfig+0x4e8>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d0f0      	beq.n	80044b4 <HAL_RCC_OscConfig+0x41c>
 80044d2:	e04e      	b.n	8004572 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044d4:	4b2b      	ldr	r3, [pc, #172]	; (8004584 <HAL_RCC_OscConfig+0x4ec>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044da:	f7fd fe21 	bl	8002120 <HAL_GetTick>
 80044de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044e0:	e008      	b.n	80044f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044e2:	f7fd fe1d 	bl	8002120 <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d901      	bls.n	80044f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e03f      	b.n	8004574 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044f4:	4b22      	ldr	r3, [pc, #136]	; (8004580 <HAL_RCC_OscConfig+0x4e8>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1f0      	bne.n	80044e2 <HAL_RCC_OscConfig+0x44a>
 8004500:	e037      	b.n	8004572 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d101      	bne.n	800450e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e032      	b.n	8004574 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800450e:	4b1c      	ldr	r3, [pc, #112]	; (8004580 <HAL_RCC_OscConfig+0x4e8>)
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d028      	beq.n	800456e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004526:	429a      	cmp	r2, r3
 8004528:	d121      	bne.n	800456e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004534:	429a      	cmp	r2, r3
 8004536:	d11a      	bne.n	800456e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800453e:	4013      	ands	r3, r2
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004544:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004546:	4293      	cmp	r3, r2
 8004548:	d111      	bne.n	800456e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004554:	085b      	lsrs	r3, r3, #1
 8004556:	3b01      	subs	r3, #1
 8004558:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800455a:	429a      	cmp	r2, r3
 800455c:	d107      	bne.n	800456e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004568:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800456a:	429a      	cmp	r2, r3
 800456c:	d001      	beq.n	8004572 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e000      	b.n	8004574 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3718      	adds	r7, #24
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	40007000 	.word	0x40007000
 8004580:	40023800 	.word	0x40023800
 8004584:	42470060 	.word	0x42470060

08004588 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d101      	bne.n	800459c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e0cc      	b.n	8004736 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800459c:	4b68      	ldr	r3, [pc, #416]	; (8004740 <HAL_RCC_ClockConfig+0x1b8>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0307 	and.w	r3, r3, #7
 80045a4:	683a      	ldr	r2, [r7, #0]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d90c      	bls.n	80045c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045aa:	4b65      	ldr	r3, [pc, #404]	; (8004740 <HAL_RCC_ClockConfig+0x1b8>)
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	b2d2      	uxtb	r2, r2
 80045b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045b2:	4b63      	ldr	r3, [pc, #396]	; (8004740 <HAL_RCC_ClockConfig+0x1b8>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0307 	and.w	r3, r3, #7
 80045ba:	683a      	ldr	r2, [r7, #0]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d001      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e0b8      	b.n	8004736 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d020      	beq.n	8004612 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0304 	and.w	r3, r3, #4
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d005      	beq.n	80045e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045dc:	4b59      	ldr	r3, [pc, #356]	; (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	4a58      	ldr	r2, [pc, #352]	; (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 80045e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0308 	and.w	r3, r3, #8
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d005      	beq.n	8004600 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045f4:	4b53      	ldr	r3, [pc, #332]	; (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	4a52      	ldr	r2, [pc, #328]	; (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 80045fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004600:	4b50      	ldr	r3, [pc, #320]	; (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	494d      	ldr	r1, [pc, #308]	; (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 800460e:	4313      	orrs	r3, r2
 8004610:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b00      	cmp	r3, #0
 800461c:	d044      	beq.n	80046a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d107      	bne.n	8004636 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004626:	4b47      	ldr	r3, [pc, #284]	; (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d119      	bne.n	8004666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e07f      	b.n	8004736 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	2b02      	cmp	r3, #2
 800463c:	d003      	beq.n	8004646 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004642:	2b03      	cmp	r3, #3
 8004644:	d107      	bne.n	8004656 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004646:	4b3f      	ldr	r3, [pc, #252]	; (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d109      	bne.n	8004666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e06f      	b.n	8004736 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004656:	4b3b      	ldr	r3, [pc, #236]	; (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0302 	and.w	r3, r3, #2
 800465e:	2b00      	cmp	r3, #0
 8004660:	d101      	bne.n	8004666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e067      	b.n	8004736 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004666:	4b37      	ldr	r3, [pc, #220]	; (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f023 0203 	bic.w	r2, r3, #3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	4934      	ldr	r1, [pc, #208]	; (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 8004674:	4313      	orrs	r3, r2
 8004676:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004678:	f7fd fd52 	bl	8002120 <HAL_GetTick>
 800467c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800467e:	e00a      	b.n	8004696 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004680:	f7fd fd4e 	bl	8002120 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	f241 3288 	movw	r2, #5000	; 0x1388
 800468e:	4293      	cmp	r3, r2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e04f      	b.n	8004736 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004696:	4b2b      	ldr	r3, [pc, #172]	; (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f003 020c 	and.w	r2, r3, #12
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d1eb      	bne.n	8004680 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046a8:	4b25      	ldr	r3, [pc, #148]	; (8004740 <HAL_RCC_ClockConfig+0x1b8>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0307 	and.w	r3, r3, #7
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d20c      	bcs.n	80046d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046b6:	4b22      	ldr	r3, [pc, #136]	; (8004740 <HAL_RCC_ClockConfig+0x1b8>)
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	b2d2      	uxtb	r2, r2
 80046bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046be:	4b20      	ldr	r3, [pc, #128]	; (8004740 <HAL_RCC_ClockConfig+0x1b8>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0307 	and.w	r3, r3, #7
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d001      	beq.n	80046d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e032      	b.n	8004736 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d008      	beq.n	80046ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046dc:	4b19      	ldr	r3, [pc, #100]	; (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	4916      	ldr	r1, [pc, #88]	; (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0308 	and.w	r3, r3, #8
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d009      	beq.n	800470e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046fa:	4b12      	ldr	r3, [pc, #72]	; (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	490e      	ldr	r1, [pc, #56]	; (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 800470a:	4313      	orrs	r3, r2
 800470c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800470e:	f000 f821 	bl	8004754 <HAL_RCC_GetSysClockFreq>
 8004712:	4602      	mov	r2, r0
 8004714:	4b0b      	ldr	r3, [pc, #44]	; (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	091b      	lsrs	r3, r3, #4
 800471a:	f003 030f 	and.w	r3, r3, #15
 800471e:	490a      	ldr	r1, [pc, #40]	; (8004748 <HAL_RCC_ClockConfig+0x1c0>)
 8004720:	5ccb      	ldrb	r3, [r1, r3]
 8004722:	fa22 f303 	lsr.w	r3, r2, r3
 8004726:	4a09      	ldr	r2, [pc, #36]	; (800474c <HAL_RCC_ClockConfig+0x1c4>)
 8004728:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800472a:	4b09      	ldr	r3, [pc, #36]	; (8004750 <HAL_RCC_ClockConfig+0x1c8>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4618      	mov	r0, r3
 8004730:	f7fd fcb2 	bl	8002098 <HAL_InitTick>

  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	40023c00 	.word	0x40023c00
 8004744:	40023800 	.word	0x40023800
 8004748:	0801c268 	.word	0x0801c268
 800474c:	20000138 	.word	0x20000138
 8004750:	2000013c 	.word	0x2000013c

08004754 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004754:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004758:	b084      	sub	sp, #16
 800475a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800475c:	2300      	movs	r3, #0
 800475e:	607b      	str	r3, [r7, #4]
 8004760:	2300      	movs	r3, #0
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	2300      	movs	r3, #0
 8004766:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004768:	2300      	movs	r3, #0
 800476a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800476c:	4b67      	ldr	r3, [pc, #412]	; (800490c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f003 030c 	and.w	r3, r3, #12
 8004774:	2b08      	cmp	r3, #8
 8004776:	d00d      	beq.n	8004794 <HAL_RCC_GetSysClockFreq+0x40>
 8004778:	2b08      	cmp	r3, #8
 800477a:	f200 80bd 	bhi.w	80048f8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <HAL_RCC_GetSysClockFreq+0x34>
 8004782:	2b04      	cmp	r3, #4
 8004784:	d003      	beq.n	800478e <HAL_RCC_GetSysClockFreq+0x3a>
 8004786:	e0b7      	b.n	80048f8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004788:	4b61      	ldr	r3, [pc, #388]	; (8004910 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800478a:	60bb      	str	r3, [r7, #8]
       break;
 800478c:	e0b7      	b.n	80048fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800478e:	4b61      	ldr	r3, [pc, #388]	; (8004914 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004790:	60bb      	str	r3, [r7, #8]
      break;
 8004792:	e0b4      	b.n	80048fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004794:	4b5d      	ldr	r3, [pc, #372]	; (800490c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800479c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800479e:	4b5b      	ldr	r3, [pc, #364]	; (800490c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d04d      	beq.n	8004846 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047aa:	4b58      	ldr	r3, [pc, #352]	; (800490c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	099b      	lsrs	r3, r3, #6
 80047b0:	461a      	mov	r2, r3
 80047b2:	f04f 0300 	mov.w	r3, #0
 80047b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80047ba:	f04f 0100 	mov.w	r1, #0
 80047be:	ea02 0800 	and.w	r8, r2, r0
 80047c2:	ea03 0901 	and.w	r9, r3, r1
 80047c6:	4640      	mov	r0, r8
 80047c8:	4649      	mov	r1, r9
 80047ca:	f04f 0200 	mov.w	r2, #0
 80047ce:	f04f 0300 	mov.w	r3, #0
 80047d2:	014b      	lsls	r3, r1, #5
 80047d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80047d8:	0142      	lsls	r2, r0, #5
 80047da:	4610      	mov	r0, r2
 80047dc:	4619      	mov	r1, r3
 80047de:	ebb0 0008 	subs.w	r0, r0, r8
 80047e2:	eb61 0109 	sbc.w	r1, r1, r9
 80047e6:	f04f 0200 	mov.w	r2, #0
 80047ea:	f04f 0300 	mov.w	r3, #0
 80047ee:	018b      	lsls	r3, r1, #6
 80047f0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80047f4:	0182      	lsls	r2, r0, #6
 80047f6:	1a12      	subs	r2, r2, r0
 80047f8:	eb63 0301 	sbc.w	r3, r3, r1
 80047fc:	f04f 0000 	mov.w	r0, #0
 8004800:	f04f 0100 	mov.w	r1, #0
 8004804:	00d9      	lsls	r1, r3, #3
 8004806:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800480a:	00d0      	lsls	r0, r2, #3
 800480c:	4602      	mov	r2, r0
 800480e:	460b      	mov	r3, r1
 8004810:	eb12 0208 	adds.w	r2, r2, r8
 8004814:	eb43 0309 	adc.w	r3, r3, r9
 8004818:	f04f 0000 	mov.w	r0, #0
 800481c:	f04f 0100 	mov.w	r1, #0
 8004820:	0259      	lsls	r1, r3, #9
 8004822:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004826:	0250      	lsls	r0, r2, #9
 8004828:	4602      	mov	r2, r0
 800482a:	460b      	mov	r3, r1
 800482c:	4610      	mov	r0, r2
 800482e:	4619      	mov	r1, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	461a      	mov	r2, r3
 8004834:	f04f 0300 	mov.w	r3, #0
 8004838:	f7fb fd32 	bl	80002a0 <__aeabi_uldivmod>
 800483c:	4602      	mov	r2, r0
 800483e:	460b      	mov	r3, r1
 8004840:	4613      	mov	r3, r2
 8004842:	60fb      	str	r3, [r7, #12]
 8004844:	e04a      	b.n	80048dc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004846:	4b31      	ldr	r3, [pc, #196]	; (800490c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	099b      	lsrs	r3, r3, #6
 800484c:	461a      	mov	r2, r3
 800484e:	f04f 0300 	mov.w	r3, #0
 8004852:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004856:	f04f 0100 	mov.w	r1, #0
 800485a:	ea02 0400 	and.w	r4, r2, r0
 800485e:	ea03 0501 	and.w	r5, r3, r1
 8004862:	4620      	mov	r0, r4
 8004864:	4629      	mov	r1, r5
 8004866:	f04f 0200 	mov.w	r2, #0
 800486a:	f04f 0300 	mov.w	r3, #0
 800486e:	014b      	lsls	r3, r1, #5
 8004870:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004874:	0142      	lsls	r2, r0, #5
 8004876:	4610      	mov	r0, r2
 8004878:	4619      	mov	r1, r3
 800487a:	1b00      	subs	r0, r0, r4
 800487c:	eb61 0105 	sbc.w	r1, r1, r5
 8004880:	f04f 0200 	mov.w	r2, #0
 8004884:	f04f 0300 	mov.w	r3, #0
 8004888:	018b      	lsls	r3, r1, #6
 800488a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800488e:	0182      	lsls	r2, r0, #6
 8004890:	1a12      	subs	r2, r2, r0
 8004892:	eb63 0301 	sbc.w	r3, r3, r1
 8004896:	f04f 0000 	mov.w	r0, #0
 800489a:	f04f 0100 	mov.w	r1, #0
 800489e:	00d9      	lsls	r1, r3, #3
 80048a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048a4:	00d0      	lsls	r0, r2, #3
 80048a6:	4602      	mov	r2, r0
 80048a8:	460b      	mov	r3, r1
 80048aa:	1912      	adds	r2, r2, r4
 80048ac:	eb45 0303 	adc.w	r3, r5, r3
 80048b0:	f04f 0000 	mov.w	r0, #0
 80048b4:	f04f 0100 	mov.w	r1, #0
 80048b8:	0299      	lsls	r1, r3, #10
 80048ba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80048be:	0290      	lsls	r0, r2, #10
 80048c0:	4602      	mov	r2, r0
 80048c2:	460b      	mov	r3, r1
 80048c4:	4610      	mov	r0, r2
 80048c6:	4619      	mov	r1, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	461a      	mov	r2, r3
 80048cc:	f04f 0300 	mov.w	r3, #0
 80048d0:	f7fb fce6 	bl	80002a0 <__aeabi_uldivmod>
 80048d4:	4602      	mov	r2, r0
 80048d6:	460b      	mov	r3, r1
 80048d8:	4613      	mov	r3, r2
 80048da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048dc:	4b0b      	ldr	r3, [pc, #44]	; (800490c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	0c1b      	lsrs	r3, r3, #16
 80048e2:	f003 0303 	and.w	r3, r3, #3
 80048e6:	3301      	adds	r3, #1
 80048e8:	005b      	lsls	r3, r3, #1
 80048ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f4:	60bb      	str	r3, [r7, #8]
      break;
 80048f6:	e002      	b.n	80048fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048f8:	4b05      	ldr	r3, [pc, #20]	; (8004910 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80048fa:	60bb      	str	r3, [r7, #8]
      break;
 80048fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048fe:	68bb      	ldr	r3, [r7, #8]
}
 8004900:	4618      	mov	r0, r3
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800490a:	bf00      	nop
 800490c:	40023800 	.word	0x40023800
 8004910:	00f42400 	.word	0x00f42400
 8004914:	007a1200 	.word	0x007a1200

08004918 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004918:	b480      	push	{r7}
 800491a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800491c:	4b03      	ldr	r3, [pc, #12]	; (800492c <HAL_RCC_GetHCLKFreq+0x14>)
 800491e:	681b      	ldr	r3, [r3, #0]
}
 8004920:	4618      	mov	r0, r3
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	20000138 	.word	0x20000138

08004930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004934:	f7ff fff0 	bl	8004918 <HAL_RCC_GetHCLKFreq>
 8004938:	4602      	mov	r2, r0
 800493a:	4b05      	ldr	r3, [pc, #20]	; (8004950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	0a9b      	lsrs	r3, r3, #10
 8004940:	f003 0307 	and.w	r3, r3, #7
 8004944:	4903      	ldr	r1, [pc, #12]	; (8004954 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004946:	5ccb      	ldrb	r3, [r1, r3]
 8004948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800494c:	4618      	mov	r0, r3
 800494e:	bd80      	pop	{r7, pc}
 8004950:	40023800 	.word	0x40023800
 8004954:	0801c278 	.word	0x0801c278

08004958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800495c:	f7ff ffdc 	bl	8004918 <HAL_RCC_GetHCLKFreq>
 8004960:	4602      	mov	r2, r0
 8004962:	4b05      	ldr	r3, [pc, #20]	; (8004978 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	0b5b      	lsrs	r3, r3, #13
 8004968:	f003 0307 	and.w	r3, r3, #7
 800496c:	4903      	ldr	r1, [pc, #12]	; (800497c <HAL_RCC_GetPCLK2Freq+0x24>)
 800496e:	5ccb      	ldrb	r3, [r1, r3]
 8004970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004974:	4618      	mov	r0, r3
 8004976:	bd80      	pop	{r7, pc}
 8004978:	40023800 	.word	0x40023800
 800497c:	0801c278 	.word	0x0801c278

08004980 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e022      	b.n	80049d8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d105      	bne.n	80049aa <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f7fc fcd5 	bl	8001354 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2203      	movs	r2, #3
 80049ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f814 	bl	80049e0 <HAL_SD_InitCard>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e00a      	b.n	80049d8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3708      	adds	r7, #8
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80049e0:	b5b0      	push	{r4, r5, r7, lr}
 80049e2:	b08e      	sub	sp, #56	; 0x38
 80049e4:	af04      	add	r7, sp, #16
 80049e6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80049e8:	2300      	movs	r3, #0
 80049ea:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80049ec:	2300      	movs	r3, #0
 80049ee:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80049f0:	2300      	movs	r3, #0
 80049f2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80049f4:	2300      	movs	r3, #0
 80049f6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80049f8:	2300      	movs	r3, #0
 80049fa:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80049fc:	2376      	movs	r3, #118	; 0x76
 80049fe:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681d      	ldr	r5, [r3, #0]
 8004a04:	466c      	mov	r4, sp
 8004a06:	f107 0314 	add.w	r3, r7, #20
 8004a0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004a0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004a12:	f107 0308 	add.w	r3, r7, #8
 8004a16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a18:	4628      	mov	r0, r5
 8004a1a:	f001 fdf5 	bl	8006608 <SDIO_Init>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004a24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d001      	beq.n	8004a30 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e04c      	b.n	8004aca <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004a30:	4b28      	ldr	r3, [pc, #160]	; (8004ad4 <HAL_SD_InitCard+0xf4>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f001 fe2d 	bl	800669a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004a40:	4b24      	ldr	r3, [pc, #144]	; (8004ad4 <HAL_SD_InitCard+0xf4>)
 8004a42:	2201      	movs	r2, #1
 8004a44:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f001 f804 	bl	8005a54 <SD_PowerON>
 8004a4c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00b      	beq.n	8004a6c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a60:	6a3b      	ldr	r3, [r7, #32]
 8004a62:	431a      	orrs	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e02e      	b.n	8004aca <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 ff25 	bl	80058bc <SD_InitCard>
 8004a72:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a74:	6a3b      	ldr	r3, [r7, #32]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00b      	beq.n	8004a92 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a86:	6a3b      	ldr	r3, [r7, #32]
 8004a88:	431a      	orrs	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e01b      	b.n	8004aca <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f001 fe90 	bl	80067c0 <SDMMC_CmdBlockLength>
 8004aa0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004aa2:	6a3b      	ldr	r3, [r7, #32]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00f      	beq.n	8004ac8 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a0a      	ldr	r2, [pc, #40]	; (8004ad8 <HAL_SD_InitCard+0xf8>)
 8004aae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ab4:	6a3b      	ldr	r3, [r7, #32]
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e000      	b.n	8004aca <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3728      	adds	r7, #40	; 0x28
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bdb0      	pop	{r4, r5, r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	422580a0 	.word	0x422580a0
 8004ad8:	004005ff 	.word	0x004005ff

08004adc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b08c      	sub	sp, #48	; 0x30
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
 8004ae8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d107      	bne.n	8004b04 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e0c0      	b.n	8004c86 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	f040 80b9 	bne.w	8004c84 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004b18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	441a      	add	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d907      	bls.n	8004b36 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e0a7      	b.n	8004c86 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2203      	movs	r2, #3
 8004b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2200      	movs	r2, #0
 8004b44:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	6812      	ldr	r2, [r2, #0]
 8004b50:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8004b54:	f043 0302 	orr.w	r3, r3, #2
 8004b58:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5e:	4a4c      	ldr	r2, [pc, #304]	; (8004c90 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8004b60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b66:	4a4b      	ldr	r2, [pc, #300]	; (8004c94 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8004b68:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6e:	2200      	movs	r2, #0
 8004b70:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b76:	2200      	movs	r2, #0
 8004b78:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	430a      	orrs	r2, r1
 8004b94:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	3380      	adds	r3, #128	; 0x80
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	025b      	lsls	r3, r3, #9
 8004ba8:	089b      	lsrs	r3, r3, #2
 8004baa:	f7fd fca9 	bl	8002500 <HAL_DMA_Start_IT>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d017      	beq.n	8004be4 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8004bc2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a33      	ldr	r2, [pc, #204]	; (8004c98 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8004bca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e050      	b.n	8004c86 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8004be4:	4b2d      	ldr	r3, [pc, #180]	; (8004c9c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8004be6:	2201      	movs	r2, #1
 8004be8:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d002      	beq.n	8004bf8 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8004bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf4:	025b      	lsls	r3, r3, #9
 8004bf6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004bf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bfc:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	025b      	lsls	r3, r3, #9
 8004c02:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004c04:	2390      	movs	r3, #144	; 0x90
 8004c06:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004c08:	2302      	movs	r3, #2
 8004c0a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004c10:	2301      	movs	r3, #1
 8004c12:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f107 0210 	add.w	r2, r7, #16
 8004c1c:	4611      	mov	r1, r2
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f001 fda2 	bl	8006768 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d90a      	bls.n	8004c40 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2282      	movs	r2, #130	; 0x82
 8004c2e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c36:	4618      	mov	r0, r3
 8004c38:	f001 fe06 	bl	8006848 <SDMMC_CmdReadMultiBlock>
 8004c3c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004c3e:	e009      	b.n	8004c54 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2281      	movs	r2, #129	; 0x81
 8004c44:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f001 fdd9 	bl	8006804 <SDMMC_CmdReadSingleBlock>
 8004c52:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8004c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d012      	beq.n	8004c80 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a0e      	ldr	r2, [pc, #56]	; (8004c98 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8004c60:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c68:	431a      	orrs	r2, r3
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e002      	b.n	8004c86 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8004c80:	2300      	movs	r3, #0
 8004c82:	e000      	b.n	8004c86 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8004c84:	2302      	movs	r3, #2
  }
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3730      	adds	r7, #48	; 0x30
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	080056cb 	.word	0x080056cb
 8004c94:	0800573d 	.word	0x0800573d
 8004c98:	004005ff 	.word	0x004005ff
 8004c9c:	4225858c 	.word	0x4225858c

08004ca0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b08c      	sub	sp, #48	; 0x30
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
 8004cac:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d107      	bne.n	8004cc8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cbc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e0c5      	b.n	8004e54 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	f040 80be 	bne.w	8004e52 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004cdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	441a      	add	r2, r3
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d907      	bls.n	8004cfa <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cee:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e0ac      	b.n	8004e54 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2203      	movs	r2, #3
 8004cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2200      	movs	r2, #0
 8004d08:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	6812      	ldr	r2, [r2, #0]
 8004d14:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8004d18:	f043 0302 	orr.w	r3, r3, #2
 8004d1c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d22:	4a4e      	ldr	r2, [pc, #312]	; (8004e5c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8004d24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d2a:	4a4d      	ldr	r2, [pc, #308]	; (8004e60 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8004d2c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d32:	2200      	movs	r2, #0
 8004d34:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d002      	beq.n	8004d44 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8004d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d40:	025b      	lsls	r3, r3, #9
 8004d42:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d90a      	bls.n	8004d60 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	22a0      	movs	r2, #160	; 0xa0
 8004d4e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d56:	4618      	mov	r0, r3
 8004d58:	f001 fdba 	bl	80068d0 <SDMMC_CmdWriteMultiBlock>
 8004d5c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004d5e:	e009      	b.n	8004d74 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2290      	movs	r2, #144	; 0x90
 8004d64:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f001 fd8d 	bl	800688c <SDMMC_CmdWriteSingleBlock>
 8004d72:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d012      	beq.n	8004da0 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a39      	ldr	r2, [pc, #228]	; (8004e64 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004d80:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d88:	431a      	orrs	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e059      	b.n	8004e54 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004da0:	4b31      	ldr	r3, [pc, #196]	; (8004e68 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8004da2:	2201      	movs	r2, #1
 8004da4:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004daa:	2240      	movs	r2, #64	; 0x40
 8004dac:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dbe:	689a      	ldr	r2, [r3, #8]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004dce:	68b9      	ldr	r1, [r7, #8]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	3380      	adds	r3, #128	; 0x80
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	025b      	lsls	r3, r3, #9
 8004ddc:	089b      	lsrs	r3, r3, #2
 8004dde:	f7fd fb8f 	bl	8002500 <HAL_DMA_Start_IT>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d01c      	beq.n	8004e22 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	6812      	ldr	r2, [r2, #0]
 8004df2:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8004df6:	f023 0302 	bic.w	r3, r3, #2
 8004dfa:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a18      	ldr	r2, [pc, #96]	; (8004e64 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004e02:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e08:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e018      	b.n	8004e54 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004e22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e26:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	025b      	lsls	r3, r3, #9
 8004e2c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004e2e:	2390      	movs	r3, #144	; 0x90
 8004e30:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004e32:	2300      	movs	r3, #0
 8004e34:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004e36:	2300      	movs	r3, #0
 8004e38:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f107 0210 	add.w	r2, r7, #16
 8004e46:	4611      	mov	r1, r2
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f001 fc8d 	bl	8006768 <SDIO_ConfigData>

      return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	e000      	b.n	8004e54 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8004e52:	2302      	movs	r3, #2
  }
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3730      	adds	r7, #48	; 0x30
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	080056a1 	.word	0x080056a1
 8004e60:	0800573d 	.word	0x0800573d
 8004e64:	004005ff 	.word	0x004005ff
 8004e68:	4225858c 	.word	0x4225858c

08004e6c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e78:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d008      	beq.n	8004e9a <HAL_SD_IRQHandler+0x2e>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f003 0308 	and.w	r3, r3, #8
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d003      	beq.n	8004e9a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 fffd 	bl	8005e92 <SD_Read_IT>
 8004e98:	e165      	b.n	8005166 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f000 808f 	beq.w	8004fc8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004eb2:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	6812      	ldr	r2, [r2, #0]
 8004ebe:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8004ec2:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8004ec6:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f022 0201 	bic.w	r2, r2, #1
 8004ed6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f003 0308 	and.w	r3, r3, #8
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d039      	beq.n	8004f56 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d104      	bne.n	8004ef6 <HAL_SD_IRQHandler+0x8a>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f003 0320 	and.w	r3, r3, #32
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d011      	beq.n	8004f1a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f001 fd0a 	bl	8006914 <SDMMC_CmdStopTransfer>
 8004f00:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d008      	beq.n	8004f1a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	431a      	orrs	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 f92f 	bl	8005178 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f240 523a 	movw	r2, #1338	; 0x53a
 8004f22:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d104      	bne.n	8004f46 <HAL_SD_IRQHandler+0xda>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d003      	beq.n	8004f4e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f002 f978 	bl	800723c <HAL_SD_RxCpltCallback>
 8004f4c:	e10b      	b.n	8005166 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f002 f96a 	bl	8007228 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004f54:	e107      	b.n	8005166 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f000 8102 	beq.w	8005166 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f003 0320 	and.w	r3, r3, #32
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d011      	beq.n	8004f90 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4618      	mov	r0, r3
 8004f72:	f001 fccf 	bl	8006914 <SDMMC_CmdStopTransfer>
 8004f76:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d008      	beq.n	8004f90 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	431a      	orrs	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f8f4 	bl	8005178 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f040 80e5 	bne.w	8005166 <HAL_SD_IRQHandler+0x2fa>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f040 80df 	bne.w	8005166 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f022 0208 	bic.w	r2, r2, #8
 8004fb6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f002 f931 	bl	8007228 <HAL_SD_TxCpltCallback>
}
 8004fc6:	e0ce      	b.n	8005166 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d008      	beq.n	8004fe8 <HAL_SD_IRQHandler+0x17c>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f003 0308 	and.w	r3, r3, #8
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d003      	beq.n	8004fe8 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 ffa7 	bl	8005f34 <SD_Write_IT>
 8004fe6:	e0be      	b.n	8005166 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fee:	f240 233a 	movw	r3, #570	; 0x23a
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 80b6 	beq.w	8005166 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005000:	f003 0302 	and.w	r3, r3, #2
 8005004:	2b00      	cmp	r3, #0
 8005006:	d005      	beq.n	8005014 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500c:	f043 0202 	orr.w	r2, r3, #2
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800501a:	f003 0308 	and.w	r3, r3, #8
 800501e:	2b00      	cmp	r3, #0
 8005020:	d005      	beq.n	800502e <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005026:	f043 0208 	orr.w	r2, r3, #8
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005034:	f003 0320 	and.w	r3, r3, #32
 8005038:	2b00      	cmp	r3, #0
 800503a:	d005      	beq.n	8005048 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005040:	f043 0220 	orr.w	r2, r3, #32
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800504e:	f003 0310 	and.w	r3, r3, #16
 8005052:	2b00      	cmp	r3, #0
 8005054:	d005      	beq.n	8005062 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505a:	f043 0210 	orr.w	r2, r3, #16
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005068:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800506c:	2b00      	cmp	r3, #0
 800506e:	d005      	beq.n	800507c <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005074:	f043 0208 	orr.w	r2, r3, #8
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f240 723a 	movw	r2, #1850	; 0x73a
 8005084:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	6812      	ldr	r2, [r2, #0]
 8005090:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8005094:	f023 0302 	bic.w	r3, r3, #2
 8005098:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4618      	mov	r0, r3
 80050a0:	f001 fc38 	bl	8006914 <SDMMC_CmdStopTransfer>
 80050a4:	4602      	mov	r2, r0
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050aa:	431a      	orrs	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f003 0308 	and.w	r3, r3, #8
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00a      	beq.n	80050d0 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 f855 	bl	8005178 <HAL_SD_ErrorCallback>
}
 80050ce:	e04a      	b.n	8005166 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d045      	beq.n	8005166 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f003 0310 	and.w	r3, r3, #16
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d104      	bne.n	80050ee <HAL_SD_IRQHandler+0x282>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f003 0320 	and.w	r3, r3, #32
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d011      	beq.n	8005112 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f2:	4a1f      	ldr	r2, [pc, #124]	; (8005170 <HAL_SD_IRQHandler+0x304>)
 80050f4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7fd fa58 	bl	80025b0 <HAL_DMA_Abort_IT>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d02f      	beq.n	8005166 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800510a:	4618      	mov	r0, r3
 800510c:	f000 fb68 	bl	80057e0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005110:	e029      	b.n	8005166 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f003 0301 	and.w	r3, r3, #1
 8005118:	2b00      	cmp	r3, #0
 800511a:	d104      	bne.n	8005126 <HAL_SD_IRQHandler+0x2ba>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d011      	beq.n	800514a <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512a:	4a12      	ldr	r2, [pc, #72]	; (8005174 <HAL_SD_IRQHandler+0x308>)
 800512c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005132:	4618      	mov	r0, r3
 8005134:	f7fd fa3c 	bl	80025b0 <HAL_DMA_Abort_IT>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d013      	beq.n	8005166 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005142:	4618      	mov	r0, r3
 8005144:	f000 fb83 	bl	800584e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005148:	e00d      	b.n	8005166 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f002 f858 	bl	8007214 <HAL_SD_AbortCallback>
}
 8005164:	e7ff      	b.n	8005166 <HAL_SD_IRQHandler+0x2fa>
 8005166:	bf00      	nop
 8005168:	3710      	adds	r7, #16
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	080057e1 	.word	0x080057e1
 8005174:	0800584f 	.word	0x0800584f

08005178 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800519a:	0f9b      	lsrs	r3, r3, #30
 800519c:	b2da      	uxtb	r2, r3
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051a6:	0e9b      	lsrs	r3, r3, #26
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	f003 030f 	and.w	r3, r3, #15
 80051ae:	b2da      	uxtb	r2, r3
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051b8:	0e1b      	lsrs	r3, r3, #24
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	f003 0303 	and.w	r3, r3, #3
 80051c0:	b2da      	uxtb	r2, r3
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051ca:	0c1b      	lsrs	r3, r3, #16
 80051cc:	b2da      	uxtb	r2, r3
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051d6:	0a1b      	lsrs	r3, r3, #8
 80051d8:	b2da      	uxtb	r2, r3
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051e2:	b2da      	uxtb	r2, r3
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051ec:	0d1b      	lsrs	r3, r3, #20
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051f8:	0c1b      	lsrs	r3, r3, #16
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	f003 030f 	and.w	r3, r3, #15
 8005200:	b2da      	uxtb	r2, r3
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800520a:	0bdb      	lsrs	r3, r3, #15
 800520c:	b2db      	uxtb	r3, r3
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	b2da      	uxtb	r2, r3
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800521c:	0b9b      	lsrs	r3, r3, #14
 800521e:	b2db      	uxtb	r3, r3
 8005220:	f003 0301 	and.w	r3, r3, #1
 8005224:	b2da      	uxtb	r2, r3
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800522e:	0b5b      	lsrs	r3, r3, #13
 8005230:	b2db      	uxtb	r3, r3
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	b2da      	uxtb	r2, r3
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005240:	0b1b      	lsrs	r3, r3, #12
 8005242:	b2db      	uxtb	r3, r3
 8005244:	f003 0301 	and.w	r3, r3, #1
 8005248:	b2da      	uxtb	r2, r3
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	2200      	movs	r2, #0
 8005252:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005258:	2b00      	cmp	r3, #0
 800525a:	d163      	bne.n	8005324 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005260:	009a      	lsls	r2, r3, #2
 8005262:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005266:	4013      	ands	r3, r2
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800526c:	0f92      	lsrs	r2, r2, #30
 800526e:	431a      	orrs	r2, r3
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005278:	0edb      	lsrs	r3, r3, #27
 800527a:	b2db      	uxtb	r3, r3
 800527c:	f003 0307 	and.w	r3, r3, #7
 8005280:	b2da      	uxtb	r2, r3
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800528a:	0e1b      	lsrs	r3, r3, #24
 800528c:	b2db      	uxtb	r3, r3
 800528e:	f003 0307 	and.w	r3, r3, #7
 8005292:	b2da      	uxtb	r2, r3
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800529c:	0d5b      	lsrs	r3, r3, #21
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	f003 0307 	and.w	r3, r3, #7
 80052a4:	b2da      	uxtb	r2, r3
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052ae:	0c9b      	lsrs	r3, r3, #18
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	f003 0307 	and.w	r3, r3, #7
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052c0:	0bdb      	lsrs	r3, r3, #15
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	f003 0307 	and.w	r3, r3, #7
 80052c8:	b2da      	uxtb	r2, r3
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	1c5a      	adds	r2, r3, #1
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	7e1b      	ldrb	r3, [r3, #24]
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	f003 0307 	and.w	r3, r3, #7
 80052e2:	3302      	adds	r3, #2
 80052e4:	2201      	movs	r2, #1
 80052e6:	fa02 f303 	lsl.w	r3, r2, r3
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80052ee:	fb02 f203 	mul.w	r2, r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	7a1b      	ldrb	r3, [r3, #8]
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	f003 030f 	and.w	r3, r3, #15
 8005300:	2201      	movs	r2, #1
 8005302:	409a      	lsls	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005310:	0a52      	lsrs	r2, r2, #9
 8005312:	fb02 f203 	mul.w	r2, r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005320:	661a      	str	r2, [r3, #96]	; 0x60
 8005322:	e031      	b.n	8005388 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005328:	2b01      	cmp	r3, #1
 800532a:	d11d      	bne.n	8005368 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005330:	041b      	lsls	r3, r3, #16
 8005332:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800533a:	0c1b      	lsrs	r3, r3, #16
 800533c:	431a      	orrs	r2, r3
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	3301      	adds	r3, #1
 8005348:	029a      	lsls	r2, r3, #10
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f44f 7200 	mov.w	r2, #512	; 0x200
 800535c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	661a      	str	r2, [r3, #96]	; 0x60
 8005366:	e00f      	b.n	8005388 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a58      	ldr	r2, [pc, #352]	; (80054d0 <HAL_SD_GetCardCSD+0x344>)
 800536e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005374:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e09d      	b.n	80054c4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800538c:	0b9b      	lsrs	r3, r3, #14
 800538e:	b2db      	uxtb	r3, r3
 8005390:	f003 0301 	and.w	r3, r3, #1
 8005394:	b2da      	uxtb	r2, r3
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800539e:	09db      	lsrs	r3, r3, #7
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053a6:	b2da      	uxtb	r2, r3
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053b6:	b2da      	uxtb	r2, r3
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c0:	0fdb      	lsrs	r3, r3, #31
 80053c2:	b2da      	uxtb	r2, r3
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053cc:	0f5b      	lsrs	r3, r3, #29
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	f003 0303 	and.w	r3, r3, #3
 80053d4:	b2da      	uxtb	r2, r3
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053de:	0e9b      	lsrs	r3, r3, #26
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	f003 0307 	and.w	r3, r3, #7
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f0:	0d9b      	lsrs	r3, r3, #22
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	f003 030f 	and.w	r3, r3, #15
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005402:	0d5b      	lsrs	r3, r3, #21
 8005404:	b2db      	uxtb	r3, r3
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	b2da      	uxtb	r2, r3
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800541e:	0c1b      	lsrs	r3, r3, #16
 8005420:	b2db      	uxtb	r3, r3
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	b2da      	uxtb	r2, r3
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005432:	0bdb      	lsrs	r3, r3, #15
 8005434:	b2db      	uxtb	r3, r3
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	b2da      	uxtb	r2, r3
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005446:	0b9b      	lsrs	r3, r3, #14
 8005448:	b2db      	uxtb	r3, r3
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	b2da      	uxtb	r2, r3
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800545a:	0b5b      	lsrs	r3, r3, #13
 800545c:	b2db      	uxtb	r3, r3
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	b2da      	uxtb	r2, r3
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800546e:	0b1b      	lsrs	r3, r3, #12
 8005470:	b2db      	uxtb	r3, r3
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	b2da      	uxtb	r2, r3
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005482:	0a9b      	lsrs	r3, r3, #10
 8005484:	b2db      	uxtb	r3, r3
 8005486:	f003 0303 	and.w	r3, r3, #3
 800548a:	b2da      	uxtb	r2, r3
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005496:	0a1b      	lsrs	r3, r3, #8
 8005498:	b2db      	uxtb	r3, r3
 800549a:	f003 0303 	and.w	r3, r3, #3
 800549e:	b2da      	uxtb	r2, r3
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054aa:	085b      	lsrs	r3, r3, #1
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054b2:	b2da      	uxtb	r2, r3
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr
 80054d0:	004005ff 	.word	0x004005ff

080054d4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800552c:	b5b0      	push	{r4, r5, r7, lr}
 800552e:	b08e      	sub	sp, #56	; 0x38
 8005530:	af04      	add	r7, sp, #16
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005536:	2300      	movs	r3, #0
 8005538:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2203      	movs	r2, #3
 8005540:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005548:	2b03      	cmp	r3, #3
 800554a:	d02e      	beq.n	80055aa <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005552:	d106      	bne.n	8005562 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005558:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	639a      	str	r2, [r3, #56]	; 0x38
 8005560:	e029      	b.n	80055b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005568:	d10a      	bne.n	8005580 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 fb28 	bl	8005bc0 <SD_WideBus_Enable>
 8005570:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005576:	6a3b      	ldr	r3, [r7, #32]
 8005578:	431a      	orrs	r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	639a      	str	r2, [r3, #56]	; 0x38
 800557e:	e01a      	b.n	80055b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10a      	bne.n	800559c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 fb65 	bl	8005c56 <SD_WideBus_Disable>
 800558c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005592:	6a3b      	ldr	r3, [r7, #32]
 8005594:	431a      	orrs	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	639a      	str	r2, [r3, #56]	; 0x38
 800559a:	e00c      	b.n	80055b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	639a      	str	r2, [r3, #56]	; 0x38
 80055a8:	e005      	b.n	80055b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ae:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00b      	beq.n	80055d6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a26      	ldr	r2, [pc, #152]	; (800565c <HAL_SD_ConfigWideBusOperation+0x130>)
 80055c4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80055d4:	e01f      	b.n	8005616 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	695b      	ldr	r3, [r3, #20]
 80055f0:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681d      	ldr	r5, [r3, #0]
 80055fc:	466c      	mov	r4, sp
 80055fe:	f107 0314 	add.w	r3, r7, #20
 8005602:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005606:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800560a:	f107 0308 	add.w	r3, r7, #8
 800560e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005610:	4628      	mov	r0, r5
 8005612:	f000 fff9 	bl	8006608 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800561e:	4618      	mov	r0, r3
 8005620:	f001 f8ce 	bl	80067c0 <SDMMC_CmdBlockLength>
 8005624:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005626:	6a3b      	ldr	r3, [r7, #32]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00c      	beq.n	8005646 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a0a      	ldr	r2, [pc, #40]	; (800565c <HAL_SD_ConfigWideBusOperation+0x130>)
 8005632:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005638:	6a3b      	ldr	r3, [r7, #32]
 800563a:	431a      	orrs	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800564e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005652:	4618      	mov	r0, r3
 8005654:	3728      	adds	r7, #40	; 0x28
 8005656:	46bd      	mov	sp, r7
 8005658:	bdb0      	pop	{r4, r5, r7, pc}
 800565a:	bf00      	nop
 800565c:	004005ff 	.word	0x004005ff

08005660 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005668:	2300      	movs	r3, #0
 800566a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800566c:	f107 030c 	add.w	r3, r7, #12
 8005670:	4619      	mov	r1, r3
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 fa7c 	bl	8005b70 <SD_SendStatus>
 8005678:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d005      	beq.n	800568c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	431a      	orrs	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	0a5b      	lsrs	r3, r3, #9
 8005690:	f003 030f 	and.w	r3, r3, #15
 8005694:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005696:	693b      	ldr	r3, [r7, #16]
}
 8005698:	4618      	mov	r0, r3
 800569a:	3718      	adds	r7, #24
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ac:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056bc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80056be:	bf00      	nop
 80056c0:	3714      	adds	r7, #20
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b084      	sub	sp, #16
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056dc:	2b82      	cmp	r3, #130	; 0x82
 80056de:	d111      	bne.n	8005704 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4618      	mov	r0, r3
 80056e6:	f001 f915 	bl	8006914 <SDMMC_CmdStopTransfer>
 80056ea:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d008      	beq.n	8005704 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	431a      	orrs	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f7ff fd3a 	bl	8005178 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f022 0208 	bic.w	r2, r2, #8
 8005712:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f240 523a 	movw	r2, #1338	; 0x53a
 800571c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f001 fd85 	bl	800723c <HAL_SD_RxCpltCallback>
#endif
}
 8005732:	bf00      	nop
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
	...

0800573c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b086      	sub	sp, #24
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005748:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f7fd f8dc 	bl	8002908 <HAL_DMA_GetError>
 8005750:	4603      	mov	r3, r0
 8005752:	2b02      	cmp	r3, #2
 8005754:	d03e      	beq.n	80057d4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800575c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005764:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d002      	beq.n	8005772 <SD_DMAError+0x36>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d12d      	bne.n	80057ce <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a19      	ldr	r2, [pc, #100]	; (80057dc <SD_DMAError+0xa0>)
 8005778:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005788:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8005796:	6978      	ldr	r0, [r7, #20]
 8005798:	f7ff ff62 	bl	8005660 <HAL_SD_GetCardState>
 800579c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	2b06      	cmp	r3, #6
 80057a2:	d002      	beq.n	80057aa <SD_DMAError+0x6e>
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	2b05      	cmp	r3, #5
 80057a8:	d10a      	bne.n	80057c0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4618      	mov	r0, r3
 80057b0:	f001 f8b0 	bl	8006914 <SDMMC_CmdStopTransfer>
 80057b4:	4602      	mov	r2, r0
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ba:	431a      	orrs	r2, r3
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	2200      	movs	r2, #0
 80057cc:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80057ce:	6978      	ldr	r0, [r7, #20]
 80057d0:	f7ff fcd2 	bl	8005178 <HAL_SD_ErrorCallback>
#endif
  }
}
 80057d4:	bf00      	nop
 80057d6:	3718      	adds	r7, #24
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	004005ff 	.word	0x004005ff

080057e0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ec:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f240 523a 	movw	r2, #1338	; 0x53a
 80057f6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80057f8:	68f8      	ldr	r0, [r7, #12]
 80057fa:	f7ff ff31 	bl	8005660 <HAL_SD_GetCardState>
 80057fe:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	2b06      	cmp	r3, #6
 8005812:	d002      	beq.n	800581a <SD_DMATxAbort+0x3a>
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	2b05      	cmp	r3, #5
 8005818:	d10a      	bne.n	8005830 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4618      	mov	r0, r3
 8005820:	f001 f878 	bl	8006914 <SDMMC_CmdStopTransfer>
 8005824:	4602      	mov	r2, r0
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582a:	431a      	orrs	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005834:	2b00      	cmp	r3, #0
 8005836:	d103      	bne.n	8005840 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005838:	68f8      	ldr	r0, [r7, #12]
 800583a:	f001 fceb 	bl	8007214 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800583e:	e002      	b.n	8005846 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f7ff fc99 	bl	8005178 <HAL_SD_ErrorCallback>
}
 8005846:	bf00      	nop
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b084      	sub	sp, #16
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f240 523a 	movw	r2, #1338	; 0x53a
 8005864:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f7ff fefa 	bl	8005660 <HAL_SD_GetCardState>
 800586c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2201      	movs	r2, #1
 8005872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	2b06      	cmp	r3, #6
 8005880:	d002      	beq.n	8005888 <SD_DMARxAbort+0x3a>
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	2b05      	cmp	r3, #5
 8005886:	d10a      	bne.n	800589e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4618      	mov	r0, r3
 800588e:	f001 f841 	bl	8006914 <SDMMC_CmdStopTransfer>
 8005892:	4602      	mov	r2, r0
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005898:	431a      	orrs	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d103      	bne.n	80058ae <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f001 fcb4 	bl	8007214 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80058ac:	e002      	b.n	80058b4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	f7ff fc62 	bl	8005178 <HAL_SD_ErrorCallback>
}
 80058b4:	bf00      	nop
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80058bc:	b5b0      	push	{r4, r5, r7, lr}
 80058be:	b094      	sub	sp, #80	; 0x50
 80058c0:	af04      	add	r7, sp, #16
 80058c2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80058c4:	2301      	movs	r3, #1
 80058c6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4618      	mov	r0, r3
 80058ce:	f000 fef3 	bl	80066b8 <SDIO_GetPowerState>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d102      	bne.n	80058de <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80058d8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80058dc:	e0b6      	b.n	8005a4c <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e2:	2b03      	cmp	r3, #3
 80058e4:	d02f      	beq.n	8005946 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4618      	mov	r0, r3
 80058ec:	f001 f91c 	bl	8006b28 <SDMMC_CmdSendCID>
 80058f0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80058f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d001      	beq.n	80058fc <SD_InitCard+0x40>
    {
      return errorstate;
 80058f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058fa:	e0a7      	b.n	8005a4c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2100      	movs	r1, #0
 8005902:	4618      	mov	r0, r3
 8005904:	f000 ff1d 	bl	8006742 <SDIO_GetResponse>
 8005908:	4602      	mov	r2, r0
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2104      	movs	r1, #4
 8005914:	4618      	mov	r0, r3
 8005916:	f000 ff14 	bl	8006742 <SDIO_GetResponse>
 800591a:	4602      	mov	r2, r0
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2108      	movs	r1, #8
 8005926:	4618      	mov	r0, r3
 8005928:	f000 ff0b 	bl	8006742 <SDIO_GetResponse>
 800592c:	4602      	mov	r2, r0
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	210c      	movs	r1, #12
 8005938:	4618      	mov	r0, r3
 800593a:	f000 ff02 	bl	8006742 <SDIO_GetResponse>
 800593e:	4602      	mov	r2, r0
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800594a:	2b03      	cmp	r3, #3
 800594c:	d00d      	beq.n	800596a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f107 020e 	add.w	r2, r7, #14
 8005956:	4611      	mov	r1, r2
 8005958:	4618      	mov	r0, r3
 800595a:	f001 f922 	bl	8006ba2 <SDMMC_CmdSetRelAdd>
 800595e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005962:	2b00      	cmp	r3, #0
 8005964:	d001      	beq.n	800596a <SD_InitCard+0xae>
    {
      return errorstate;
 8005966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005968:	e070      	b.n	8005a4c <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800596e:	2b03      	cmp	r3, #3
 8005970:	d036      	beq.n	80059e0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005972:	89fb      	ldrh	r3, [r7, #14]
 8005974:	461a      	mov	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005982:	041b      	lsls	r3, r3, #16
 8005984:	4619      	mov	r1, r3
 8005986:	4610      	mov	r0, r2
 8005988:	f001 f8ec 	bl	8006b64 <SDMMC_CmdSendCSD>
 800598c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800598e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005990:	2b00      	cmp	r3, #0
 8005992:	d001      	beq.n	8005998 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005996:	e059      	b.n	8005a4c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2100      	movs	r1, #0
 800599e:	4618      	mov	r0, r3
 80059a0:	f000 fecf 	bl	8006742 <SDIO_GetResponse>
 80059a4:	4602      	mov	r2, r0
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2104      	movs	r1, #4
 80059b0:	4618      	mov	r0, r3
 80059b2:	f000 fec6 	bl	8006742 <SDIO_GetResponse>
 80059b6:	4602      	mov	r2, r0
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2108      	movs	r1, #8
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 febd 	bl	8006742 <SDIO_GetResponse>
 80059c8:	4602      	mov	r2, r0
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	210c      	movs	r1, #12
 80059d4:	4618      	mov	r0, r3
 80059d6:	f000 feb4 	bl	8006742 <SDIO_GetResponse>
 80059da:	4602      	mov	r2, r0
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2104      	movs	r1, #4
 80059e6:	4618      	mov	r0, r3
 80059e8:	f000 feab 	bl	8006742 <SDIO_GetResponse>
 80059ec:	4603      	mov	r3, r0
 80059ee:	0d1a      	lsrs	r2, r3, #20
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80059f4:	f107 0310 	add.w	r3, r7, #16
 80059f8:	4619      	mov	r1, r3
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f7ff fbc6 	bl	800518c <HAL_SD_GetCardCSD>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d002      	beq.n	8005a0c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005a06:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005a0a:	e01f      	b.n	8005a4c <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6819      	ldr	r1, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a14:	041b      	lsls	r3, r3, #16
 8005a16:	461a      	mov	r2, r3
 8005a18:	f04f 0300 	mov.w	r3, #0
 8005a1c:	4608      	mov	r0, r1
 8005a1e:	f000 ff9b 	bl	8006958 <SDMMC_CmdSelDesel>
 8005a22:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d001      	beq.n	8005a2e <SD_InitCard+0x172>
  {
    return errorstate;
 8005a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a2c:	e00e      	b.n	8005a4c <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681d      	ldr	r5, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	466c      	mov	r4, sp
 8005a36:	f103 0210 	add.w	r2, r3, #16
 8005a3a:	ca07      	ldmia	r2, {r0, r1, r2}
 8005a3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005a40:	3304      	adds	r3, #4
 8005a42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a44:	4628      	mov	r0, r5
 8005a46:	f000 fddf 	bl	8006608 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3740      	adds	r7, #64	; 0x40
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bdb0      	pop	{r4, r5, r7, pc}

08005a54 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005a60:	2300      	movs	r3, #0
 8005a62:	617b      	str	r3, [r7, #20]
 8005a64:	2300      	movs	r3, #0
 8005a66:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f000 ff96 	bl	800699e <SDMMC_CmdGoIdleState>
 8005a72:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <SD_PowerON+0x2a>
  {
    return errorstate;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	e072      	b.n	8005b64 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4618      	mov	r0, r3
 8005a84:	f000 ffa9 	bl	80069da <SDMMC_CmdOperCond>
 8005a88:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00d      	beq.n	8005aac <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f000 ff7f 	bl	800699e <SDMMC_CmdGoIdleState>
 8005aa0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d004      	beq.n	8005ab2 <SD_PowerON+0x5e>
    {
      return errorstate;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	e05b      	b.n	8005b64 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d137      	bne.n	8005b2a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2100      	movs	r1, #0
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f000 ffa9 	bl	8006a18 <SDMMC_CmdAppCommand>
 8005ac6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d02d      	beq.n	8005b2a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005ace:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005ad2:	e047      	b.n	8005b64 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2100      	movs	r1, #0
 8005ada:	4618      	mov	r0, r3
 8005adc:	f000 ff9c 	bl	8006a18 <SDMMC_CmdAppCommand>
 8005ae0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d001      	beq.n	8005aec <SD_PowerON+0x98>
    {
      return errorstate;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	e03b      	b.n	8005b64 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	491e      	ldr	r1, [pc, #120]	; (8005b6c <SD_PowerON+0x118>)
 8005af2:	4618      	mov	r0, r3
 8005af4:	f000 ffb2 	bl	8006a5c <SDMMC_CmdAppOperCommand>
 8005af8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d002      	beq.n	8005b06 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005b00:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005b04:	e02e      	b.n	8005b64 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2100      	movs	r1, #0
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f000 fe18 	bl	8006742 <SDIO_GetResponse>
 8005b12:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	0fdb      	lsrs	r3, r3, #31
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d101      	bne.n	8005b20 <SD_PowerON+0xcc>
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e000      	b.n	8005b22 <SD_PowerON+0xce>
 8005b20:	2300      	movs	r3, #0
 8005b22:	613b      	str	r3, [r7, #16]

    count++;
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	3301      	adds	r3, #1
 8005b28:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d802      	bhi.n	8005b3a <SD_PowerON+0xe6>
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d0cc      	beq.n	8005ad4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d902      	bls.n	8005b4a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005b44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b48:	e00c      	b.n	8005b64 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d003      	beq.n	8005b5c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	645a      	str	r2, [r3, #68]	; 0x44
 8005b5a:	e002      	b.n	8005b62 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3718      	adds	r7, #24
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	c1100000 	.word	0xc1100000

08005b70 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d102      	bne.n	8005b86 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005b80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b84:	e018      	b.n	8005bb8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b8e:	041b      	lsls	r3, r3, #16
 8005b90:	4619      	mov	r1, r3
 8005b92:	4610      	mov	r0, r2
 8005b94:	f001 f826 	bl	8006be4 <SDMMC_CmdSendStatus>
 8005b98:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d001      	beq.n	8005ba4 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	e009      	b.n	8005bb8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2100      	movs	r1, #0
 8005baa:	4618      	mov	r0, r3
 8005bac:	f000 fdc9 	bl	8006742 <SDIO_GetResponse>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3710      	adds	r7, #16
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b086      	sub	sp, #24
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005bc8:	2300      	movs	r3, #0
 8005bca:	60fb      	str	r3, [r7, #12]
 8005bcc:	2300      	movs	r3, #0
 8005bce:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f000 fdb3 	bl	8006742 <SDIO_GetResponse>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005be2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005be6:	d102      	bne.n	8005bee <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005be8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005bec:	e02f      	b.n	8005c4e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005bee:	f107 030c 	add.w	r3, r7, #12
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 f879 	bl	8005cec <SD_FindSCR>
 8005bfa:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d001      	beq.n	8005c06 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	e023      	b.n	8005c4e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d01c      	beq.n	8005c4a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c18:	041b      	lsls	r3, r3, #16
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	4610      	mov	r0, r2
 8005c1e:	f000 fefb 	bl	8006a18 <SDMMC_CmdAppCommand>
 8005c22:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d001      	beq.n	8005c2e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	e00f      	b.n	8005c4e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2102      	movs	r1, #2
 8005c34:	4618      	mov	r0, r3
 8005c36:	f000 ff34 	bl	8006aa2 <SDMMC_CmdBusWidth>
 8005c3a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d001      	beq.n	8005c46 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	e003      	b.n	8005c4e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005c46:	2300      	movs	r3, #0
 8005c48:	e001      	b.n	8005c4e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005c4a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3718      	adds	r7, #24
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b086      	sub	sp, #24
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005c5e:	2300      	movs	r3, #0
 8005c60:	60fb      	str	r3, [r7, #12]
 8005c62:	2300      	movs	r3, #0
 8005c64:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f000 fd68 	bl	8006742 <SDIO_GetResponse>
 8005c72:	4603      	mov	r3, r0
 8005c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c7c:	d102      	bne.n	8005c84 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005c7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c82:	e02f      	b.n	8005ce4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005c84:	f107 030c 	add.w	r3, r7, #12
 8005c88:	4619      	mov	r1, r3
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 f82e 	bl	8005cec <SD_FindSCR>
 8005c90:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d001      	beq.n	8005c9c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	e023      	b.n	8005ce4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d01c      	beq.n	8005ce0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cae:	041b      	lsls	r3, r3, #16
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	4610      	mov	r0, r2
 8005cb4:	f000 feb0 	bl	8006a18 <SDMMC_CmdAppCommand>
 8005cb8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	e00f      	b.n	8005ce4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2100      	movs	r1, #0
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f000 fee9 	bl	8006aa2 <SDMMC_CmdBusWidth>
 8005cd0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d001      	beq.n	8005cdc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	e003      	b.n	8005ce4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	e001      	b.n	8005ce4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005ce0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3718      	adds	r7, #24
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005cec:	b590      	push	{r4, r7, lr}
 8005cee:	b08f      	sub	sp, #60	; 0x3c
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005cf6:	f7fc fa13 	bl	8002120 <HAL_GetTick>
 8005cfa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005d00:	2300      	movs	r3, #0
 8005d02:	60bb      	str	r3, [r7, #8]
 8005d04:	2300      	movs	r3, #0
 8005d06:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2108      	movs	r1, #8
 8005d12:	4618      	mov	r0, r3
 8005d14:	f000 fd54 	bl	80067c0 <SDMMC_CmdBlockLength>
 8005d18:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d001      	beq.n	8005d24 <SD_FindSCR+0x38>
  {
    return errorstate;
 8005d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d22:	e0b2      	b.n	8005e8a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d2c:	041b      	lsls	r3, r3, #16
 8005d2e:	4619      	mov	r1, r3
 8005d30:	4610      	mov	r0, r2
 8005d32:	f000 fe71 	bl	8006a18 <SDMMC_CmdAppCommand>
 8005d36:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d001      	beq.n	8005d42 <SD_FindSCR+0x56>
  {
    return errorstate;
 8005d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d40:	e0a3      	b.n	8005e8a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005d42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d46:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005d48:	2308      	movs	r3, #8
 8005d4a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005d4c:	2330      	movs	r3, #48	; 0x30
 8005d4e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005d50:	2302      	movs	r3, #2
 8005d52:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005d54:	2300      	movs	r3, #0
 8005d56:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f107 0210 	add.w	r2, r7, #16
 8005d64:	4611      	mov	r1, r2
 8005d66:	4618      	mov	r0, r3
 8005d68:	f000 fcfe 	bl	8006768 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4618      	mov	r0, r3
 8005d72:	f000 feb8 	bl	8006ae6 <SDMMC_CmdSendSCR>
 8005d76:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d02a      	beq.n	8005dd4 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8005d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d80:	e083      	b.n	8005e8a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00f      	beq.n	8005db0 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6819      	ldr	r1, [r3, #0]
 8005d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	f107 0208 	add.w	r2, r7, #8
 8005d9c:	18d4      	adds	r4, r2, r3
 8005d9e:	4608      	mov	r0, r1
 8005da0:	f000 fc5d 	bl	800665e <SDIO_ReadFIFO>
 8005da4:	4603      	mov	r3, r0
 8005da6:	6023      	str	r3, [r4, #0]
      index++;
 8005da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005daa:	3301      	adds	r3, #1
 8005dac:	637b      	str	r3, [r7, #52]	; 0x34
 8005dae:	e006      	b.n	8005dbe <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d012      	beq.n	8005de4 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005dbe:	f7fc f9af 	bl	8002120 <HAL_GetTick>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dcc:	d102      	bne.n	8005dd4 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005dce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005dd2:	e05a      	b.n	8005e8a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dda:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d0cf      	beq.n	8005d82 <SD_FindSCR+0x96>
 8005de2:	e000      	b.n	8005de6 <SD_FindSCR+0xfa>
      break;
 8005de4:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dec:	f003 0308 	and.w	r3, r3, #8
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d005      	beq.n	8005e00 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2208      	movs	r2, #8
 8005dfa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005dfc:	2308      	movs	r3, #8
 8005dfe:	e044      	b.n	8005e8a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e06:	f003 0302 	and.w	r3, r3, #2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d005      	beq.n	8005e1a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2202      	movs	r2, #2
 8005e14:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005e16:	2302      	movs	r3, #2
 8005e18:	e037      	b.n	8005e8a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e20:	f003 0320 	and.w	r3, r3, #32
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d005      	beq.n	8005e34 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2220      	movs	r2, #32
 8005e2e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005e30:	2320      	movs	r3, #32
 8005e32:	e02a      	b.n	8005e8a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f240 523a 	movw	r2, #1338	; 0x53a
 8005e3c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	061a      	lsls	r2, r3, #24
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	021b      	lsls	r3, r3, #8
 8005e46:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e4a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	0a1b      	lsrs	r3, r3, #8
 8005e50:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005e54:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	0e1b      	lsrs	r3, r3, #24
 8005e5a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5e:	601a      	str	r2, [r3, #0]
    scr++;
 8005e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e62:	3304      	adds	r3, #4
 8005e64:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	061a      	lsls	r2, r3, #24
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	021b      	lsls	r3, r3, #8
 8005e6e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e72:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	0a1b      	lsrs	r3, r3, #8
 8005e78:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005e7c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	0e1b      	lsrs	r3, r3, #24
 8005e82:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e86:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	373c      	adds	r7, #60	; 0x3c
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd90      	pop	{r4, r7, pc}

08005e92 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b086      	sub	sp, #24
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e9e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d03f      	beq.n	8005f2c <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8005eac:	2300      	movs	r3, #0
 8005eae:	617b      	str	r3, [r7, #20]
 8005eb0:	e033      	b.n	8005f1a <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f000 fbd1 	bl	800665e <SDIO_ReadFIFO>
 8005ebc:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	b2da      	uxtb	r2, r3
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	3301      	adds	r3, #1
 8005eca:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	0a1b      	lsrs	r3, r3, #8
 8005ed6:	b2da      	uxtb	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	3301      	adds	r3, #1
 8005ee0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	0c1b      	lsrs	r3, r3, #16
 8005eec:	b2da      	uxtb	r2, r3
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	3b01      	subs	r3, #1
 8005efc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	0e1b      	lsrs	r3, r3, #24
 8005f02:	b2da      	uxtb	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	3b01      	subs	r3, #1
 8005f12:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	3301      	adds	r3, #1
 8005f18:	617b      	str	r3, [r7, #20]
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	2b07      	cmp	r3, #7
 8005f1e:	d9c8      	bls.n	8005eb2 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8005f2c:	bf00      	nop
 8005f2e:	3718      	adds	r7, #24
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b086      	sub	sp, #24
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a1b      	ldr	r3, [r3, #32]
 8005f40:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f46:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d043      	beq.n	8005fd6 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8005f4e:	2300      	movs	r3, #0
 8005f50:	617b      	str	r3, [r7, #20]
 8005f52:	e037      	b.n	8005fc4 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	3b01      	subs	r3, #1
 8005f64:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	021a      	lsls	r2, r3, #8
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	3301      	adds	r3, #1
 8005f76:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	041a      	lsls	r2, r3, #16
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	3b01      	subs	r3, #1
 8005f94:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	061a      	lsls	r2, r3, #24
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	3b01      	subs	r3, #1
 8005fac:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f107 0208 	add.w	r2, r7, #8
 8005fb6:	4611      	mov	r1, r2
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f000 fb5d 	bl	8006678 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	617b      	str	r3, [r7, #20]
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	2b07      	cmp	r3, #7
 8005fc8:	d9c4      	bls.n	8005f54 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	693a      	ldr	r2, [r7, #16]
 8005fd4:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8005fd6:	bf00      	nop
 8005fd8:	3718      	adds	r7, #24
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b082      	sub	sp, #8
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d101      	bne.n	8005ff0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e03f      	b.n	8006070 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d106      	bne.n	800600a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f7fb faa5 	bl	8001554 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2224      	movs	r2, #36	; 0x24
 800600e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68da      	ldr	r2, [r3, #12]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006020:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 f928 	bl	8006278 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	691a      	ldr	r2, [r3, #16]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006036:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	695a      	ldr	r2, [r3, #20]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006046:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68da      	ldr	r2, [r3, #12]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006056:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2220      	movs	r2, #32
 8006062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2220      	movs	r2, #32
 800606a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800606e:	2300      	movs	r3, #0
}
 8006070:	4618      	mov	r0, r3
 8006072:	3708      	adds	r7, #8
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b08a      	sub	sp, #40	; 0x28
 800607c:	af02      	add	r7, sp, #8
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	603b      	str	r3, [r7, #0]
 8006084:	4613      	mov	r3, r2
 8006086:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006088:	2300      	movs	r3, #0
 800608a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006092:	b2db      	uxtb	r3, r3
 8006094:	2b20      	cmp	r3, #32
 8006096:	d17c      	bne.n	8006192 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d002      	beq.n	80060a4 <HAL_UART_Transmit+0x2c>
 800609e:	88fb      	ldrh	r3, [r7, #6]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d101      	bne.n	80060a8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e075      	b.n	8006194 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d101      	bne.n	80060b6 <HAL_UART_Transmit+0x3e>
 80060b2:	2302      	movs	r3, #2
 80060b4:	e06e      	b.n	8006194 <HAL_UART_Transmit+0x11c>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2221      	movs	r2, #33	; 0x21
 80060c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060cc:	f7fc f828 	bl	8002120 <HAL_GetTick>
 80060d0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	88fa      	ldrh	r2, [r7, #6]
 80060d6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	88fa      	ldrh	r2, [r7, #6]
 80060dc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060e6:	d108      	bne.n	80060fa <HAL_UART_Transmit+0x82>
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d104      	bne.n	80060fa <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80060f0:	2300      	movs	r3, #0
 80060f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	61bb      	str	r3, [r7, #24]
 80060f8:	e003      	b.n	8006102 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060fe:	2300      	movs	r3, #0
 8006100:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800610a:	e02a      	b.n	8006162 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	9300      	str	r3, [sp, #0]
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	2200      	movs	r2, #0
 8006114:	2180      	movs	r1, #128	; 0x80
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	f000 f840 	bl	800619c <UART_WaitOnFlagUntilTimeout>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d001      	beq.n	8006126 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006122:	2303      	movs	r3, #3
 8006124:	e036      	b.n	8006194 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10b      	bne.n	8006144 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	881b      	ldrh	r3, [r3, #0]
 8006130:	461a      	mov	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800613a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	3302      	adds	r3, #2
 8006140:	61bb      	str	r3, [r7, #24]
 8006142:	e007      	b.n	8006154 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	781a      	ldrb	r2, [r3, #0]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	3301      	adds	r3, #1
 8006152:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006158:	b29b      	uxth	r3, r3
 800615a:	3b01      	subs	r3, #1
 800615c:	b29a      	uxth	r2, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006166:	b29b      	uxth	r3, r3
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1cf      	bne.n	800610c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	9300      	str	r3, [sp, #0]
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	2200      	movs	r2, #0
 8006174:	2140      	movs	r1, #64	; 0x40
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f000 f810 	bl	800619c <UART_WaitOnFlagUntilTimeout>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d001      	beq.n	8006186 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e006      	b.n	8006194 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2220      	movs	r2, #32
 800618a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800618e:	2300      	movs	r3, #0
 8006190:	e000      	b.n	8006194 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006192:	2302      	movs	r3, #2
  }
}
 8006194:	4618      	mov	r0, r3
 8006196:	3720      	adds	r7, #32
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b090      	sub	sp, #64	; 0x40
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	603b      	str	r3, [r7, #0]
 80061a8:	4613      	mov	r3, r2
 80061aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061ac:	e050      	b.n	8006250 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061b4:	d04c      	beq.n	8006250 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80061b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d007      	beq.n	80061cc <UART_WaitOnFlagUntilTimeout+0x30>
 80061bc:	f7fb ffb0 	bl	8002120 <HAL_GetTick>
 80061c0:	4602      	mov	r2, r0
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d241      	bcs.n	8006250 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	330c      	adds	r3, #12
 80061d2:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d6:	e853 3f00 	ldrex	r3, [r3]
 80061da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80061e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	330c      	adds	r3, #12
 80061ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80061ec:	637a      	str	r2, [r7, #52]	; 0x34
 80061ee:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061f4:	e841 2300 	strex	r3, r2, [r1]
 80061f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80061fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d1e5      	bne.n	80061cc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	3314      	adds	r3, #20
 8006206:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	e853 3f00 	ldrex	r3, [r3]
 800620e:	613b      	str	r3, [r7, #16]
   return(result);
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	f023 0301 	bic.w	r3, r3, #1
 8006216:	63bb      	str	r3, [r7, #56]	; 0x38
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	3314      	adds	r3, #20
 800621e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006220:	623a      	str	r2, [r7, #32]
 8006222:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006224:	69f9      	ldr	r1, [r7, #28]
 8006226:	6a3a      	ldr	r2, [r7, #32]
 8006228:	e841 2300 	strex	r3, r2, [r1]
 800622c:	61bb      	str	r3, [r7, #24]
   return(result);
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d1e5      	bne.n	8006200 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2220      	movs	r2, #32
 8006238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2220      	movs	r2, #32
 8006240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800624c:	2303      	movs	r3, #3
 800624e:	e00f      	b.n	8006270 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	4013      	ands	r3, r2
 800625a:	68ba      	ldr	r2, [r7, #8]
 800625c:	429a      	cmp	r2, r3
 800625e:	bf0c      	ite	eq
 8006260:	2301      	moveq	r3, #1
 8006262:	2300      	movne	r3, #0
 8006264:	b2db      	uxtb	r3, r3
 8006266:	461a      	mov	r2, r3
 8006268:	79fb      	ldrb	r3, [r7, #7]
 800626a:	429a      	cmp	r2, r3
 800626c:	d09f      	beq.n	80061ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3740      	adds	r7, #64	; 0x40
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800627c:	b09f      	sub	sp, #124	; 0x7c
 800627e:	af00      	add	r7, sp, #0
 8006280:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006282:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800628c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800628e:	68d9      	ldr	r1, [r3, #12]
 8006290:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	ea40 0301 	orr.w	r3, r0, r1
 8006298:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800629a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800629c:	689a      	ldr	r2, [r3, #8]
 800629e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	431a      	orrs	r2, r3
 80062a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062a6:	695b      	ldr	r3, [r3, #20]
 80062a8:	431a      	orrs	r2, r3
 80062aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ac:	69db      	ldr	r3, [r3, #28]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80062b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80062bc:	f021 010c 	bic.w	r1, r1, #12
 80062c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062c6:	430b      	orrs	r3, r1
 80062c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	695b      	ldr	r3, [r3, #20]
 80062d0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80062d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062d6:	6999      	ldr	r1, [r3, #24]
 80062d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	ea40 0301 	orr.w	r3, r0, r1
 80062e0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80062e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	4bc5      	ldr	r3, [pc, #788]	; (80065fc <UART_SetConfig+0x384>)
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d004      	beq.n	80062f6 <UART_SetConfig+0x7e>
 80062ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	4bc3      	ldr	r3, [pc, #780]	; (8006600 <UART_SetConfig+0x388>)
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d103      	bne.n	80062fe <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062f6:	f7fe fb2f 	bl	8004958 <HAL_RCC_GetPCLK2Freq>
 80062fa:	6778      	str	r0, [r7, #116]	; 0x74
 80062fc:	e002      	b.n	8006304 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80062fe:	f7fe fb17 	bl	8004930 <HAL_RCC_GetPCLK1Freq>
 8006302:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006306:	69db      	ldr	r3, [r3, #28]
 8006308:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800630c:	f040 80b6 	bne.w	800647c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006310:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006312:	461c      	mov	r4, r3
 8006314:	f04f 0500 	mov.w	r5, #0
 8006318:	4622      	mov	r2, r4
 800631a:	462b      	mov	r3, r5
 800631c:	1891      	adds	r1, r2, r2
 800631e:	6439      	str	r1, [r7, #64]	; 0x40
 8006320:	415b      	adcs	r3, r3
 8006322:	647b      	str	r3, [r7, #68]	; 0x44
 8006324:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006328:	1912      	adds	r2, r2, r4
 800632a:	eb45 0303 	adc.w	r3, r5, r3
 800632e:	f04f 0000 	mov.w	r0, #0
 8006332:	f04f 0100 	mov.w	r1, #0
 8006336:	00d9      	lsls	r1, r3, #3
 8006338:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800633c:	00d0      	lsls	r0, r2, #3
 800633e:	4602      	mov	r2, r0
 8006340:	460b      	mov	r3, r1
 8006342:	1911      	adds	r1, r2, r4
 8006344:	6639      	str	r1, [r7, #96]	; 0x60
 8006346:	416b      	adcs	r3, r5
 8006348:	667b      	str	r3, [r7, #100]	; 0x64
 800634a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	461a      	mov	r2, r3
 8006350:	f04f 0300 	mov.w	r3, #0
 8006354:	1891      	adds	r1, r2, r2
 8006356:	63b9      	str	r1, [r7, #56]	; 0x38
 8006358:	415b      	adcs	r3, r3
 800635a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800635c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006360:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006364:	f7f9 ff9c 	bl	80002a0 <__aeabi_uldivmod>
 8006368:	4602      	mov	r2, r0
 800636a:	460b      	mov	r3, r1
 800636c:	4ba5      	ldr	r3, [pc, #660]	; (8006604 <UART_SetConfig+0x38c>)
 800636e:	fba3 2302 	umull	r2, r3, r3, r2
 8006372:	095b      	lsrs	r3, r3, #5
 8006374:	011e      	lsls	r6, r3, #4
 8006376:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006378:	461c      	mov	r4, r3
 800637a:	f04f 0500 	mov.w	r5, #0
 800637e:	4622      	mov	r2, r4
 8006380:	462b      	mov	r3, r5
 8006382:	1891      	adds	r1, r2, r2
 8006384:	6339      	str	r1, [r7, #48]	; 0x30
 8006386:	415b      	adcs	r3, r3
 8006388:	637b      	str	r3, [r7, #52]	; 0x34
 800638a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800638e:	1912      	adds	r2, r2, r4
 8006390:	eb45 0303 	adc.w	r3, r5, r3
 8006394:	f04f 0000 	mov.w	r0, #0
 8006398:	f04f 0100 	mov.w	r1, #0
 800639c:	00d9      	lsls	r1, r3, #3
 800639e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80063a2:	00d0      	lsls	r0, r2, #3
 80063a4:	4602      	mov	r2, r0
 80063a6:	460b      	mov	r3, r1
 80063a8:	1911      	adds	r1, r2, r4
 80063aa:	65b9      	str	r1, [r7, #88]	; 0x58
 80063ac:	416b      	adcs	r3, r5
 80063ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	461a      	mov	r2, r3
 80063b6:	f04f 0300 	mov.w	r3, #0
 80063ba:	1891      	adds	r1, r2, r2
 80063bc:	62b9      	str	r1, [r7, #40]	; 0x28
 80063be:	415b      	adcs	r3, r3
 80063c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80063c6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80063ca:	f7f9 ff69 	bl	80002a0 <__aeabi_uldivmod>
 80063ce:	4602      	mov	r2, r0
 80063d0:	460b      	mov	r3, r1
 80063d2:	4b8c      	ldr	r3, [pc, #560]	; (8006604 <UART_SetConfig+0x38c>)
 80063d4:	fba3 1302 	umull	r1, r3, r3, r2
 80063d8:	095b      	lsrs	r3, r3, #5
 80063da:	2164      	movs	r1, #100	; 0x64
 80063dc:	fb01 f303 	mul.w	r3, r1, r3
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	00db      	lsls	r3, r3, #3
 80063e4:	3332      	adds	r3, #50	; 0x32
 80063e6:	4a87      	ldr	r2, [pc, #540]	; (8006604 <UART_SetConfig+0x38c>)
 80063e8:	fba2 2303 	umull	r2, r3, r2, r3
 80063ec:	095b      	lsrs	r3, r3, #5
 80063ee:	005b      	lsls	r3, r3, #1
 80063f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80063f4:	441e      	add	r6, r3
 80063f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063f8:	4618      	mov	r0, r3
 80063fa:	f04f 0100 	mov.w	r1, #0
 80063fe:	4602      	mov	r2, r0
 8006400:	460b      	mov	r3, r1
 8006402:	1894      	adds	r4, r2, r2
 8006404:	623c      	str	r4, [r7, #32]
 8006406:	415b      	adcs	r3, r3
 8006408:	627b      	str	r3, [r7, #36]	; 0x24
 800640a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800640e:	1812      	adds	r2, r2, r0
 8006410:	eb41 0303 	adc.w	r3, r1, r3
 8006414:	f04f 0400 	mov.w	r4, #0
 8006418:	f04f 0500 	mov.w	r5, #0
 800641c:	00dd      	lsls	r5, r3, #3
 800641e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006422:	00d4      	lsls	r4, r2, #3
 8006424:	4622      	mov	r2, r4
 8006426:	462b      	mov	r3, r5
 8006428:	1814      	adds	r4, r2, r0
 800642a:	653c      	str	r4, [r7, #80]	; 0x50
 800642c:	414b      	adcs	r3, r1
 800642e:	657b      	str	r3, [r7, #84]	; 0x54
 8006430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	461a      	mov	r2, r3
 8006436:	f04f 0300 	mov.w	r3, #0
 800643a:	1891      	adds	r1, r2, r2
 800643c:	61b9      	str	r1, [r7, #24]
 800643e:	415b      	adcs	r3, r3
 8006440:	61fb      	str	r3, [r7, #28]
 8006442:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006446:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800644a:	f7f9 ff29 	bl	80002a0 <__aeabi_uldivmod>
 800644e:	4602      	mov	r2, r0
 8006450:	460b      	mov	r3, r1
 8006452:	4b6c      	ldr	r3, [pc, #432]	; (8006604 <UART_SetConfig+0x38c>)
 8006454:	fba3 1302 	umull	r1, r3, r3, r2
 8006458:	095b      	lsrs	r3, r3, #5
 800645a:	2164      	movs	r1, #100	; 0x64
 800645c:	fb01 f303 	mul.w	r3, r1, r3
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	00db      	lsls	r3, r3, #3
 8006464:	3332      	adds	r3, #50	; 0x32
 8006466:	4a67      	ldr	r2, [pc, #412]	; (8006604 <UART_SetConfig+0x38c>)
 8006468:	fba2 2303 	umull	r2, r3, r2, r3
 800646c:	095b      	lsrs	r3, r3, #5
 800646e:	f003 0207 	and.w	r2, r3, #7
 8006472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4432      	add	r2, r6
 8006478:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800647a:	e0b9      	b.n	80065f0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800647c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800647e:	461c      	mov	r4, r3
 8006480:	f04f 0500 	mov.w	r5, #0
 8006484:	4622      	mov	r2, r4
 8006486:	462b      	mov	r3, r5
 8006488:	1891      	adds	r1, r2, r2
 800648a:	6139      	str	r1, [r7, #16]
 800648c:	415b      	adcs	r3, r3
 800648e:	617b      	str	r3, [r7, #20]
 8006490:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006494:	1912      	adds	r2, r2, r4
 8006496:	eb45 0303 	adc.w	r3, r5, r3
 800649a:	f04f 0000 	mov.w	r0, #0
 800649e:	f04f 0100 	mov.w	r1, #0
 80064a2:	00d9      	lsls	r1, r3, #3
 80064a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80064a8:	00d0      	lsls	r0, r2, #3
 80064aa:	4602      	mov	r2, r0
 80064ac:	460b      	mov	r3, r1
 80064ae:	eb12 0804 	adds.w	r8, r2, r4
 80064b2:	eb43 0905 	adc.w	r9, r3, r5
 80064b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	4618      	mov	r0, r3
 80064bc:	f04f 0100 	mov.w	r1, #0
 80064c0:	f04f 0200 	mov.w	r2, #0
 80064c4:	f04f 0300 	mov.w	r3, #0
 80064c8:	008b      	lsls	r3, r1, #2
 80064ca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80064ce:	0082      	lsls	r2, r0, #2
 80064d0:	4640      	mov	r0, r8
 80064d2:	4649      	mov	r1, r9
 80064d4:	f7f9 fee4 	bl	80002a0 <__aeabi_uldivmod>
 80064d8:	4602      	mov	r2, r0
 80064da:	460b      	mov	r3, r1
 80064dc:	4b49      	ldr	r3, [pc, #292]	; (8006604 <UART_SetConfig+0x38c>)
 80064de:	fba3 2302 	umull	r2, r3, r3, r2
 80064e2:	095b      	lsrs	r3, r3, #5
 80064e4:	011e      	lsls	r6, r3, #4
 80064e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064e8:	4618      	mov	r0, r3
 80064ea:	f04f 0100 	mov.w	r1, #0
 80064ee:	4602      	mov	r2, r0
 80064f0:	460b      	mov	r3, r1
 80064f2:	1894      	adds	r4, r2, r2
 80064f4:	60bc      	str	r4, [r7, #8]
 80064f6:	415b      	adcs	r3, r3
 80064f8:	60fb      	str	r3, [r7, #12]
 80064fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064fe:	1812      	adds	r2, r2, r0
 8006500:	eb41 0303 	adc.w	r3, r1, r3
 8006504:	f04f 0400 	mov.w	r4, #0
 8006508:	f04f 0500 	mov.w	r5, #0
 800650c:	00dd      	lsls	r5, r3, #3
 800650e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006512:	00d4      	lsls	r4, r2, #3
 8006514:	4622      	mov	r2, r4
 8006516:	462b      	mov	r3, r5
 8006518:	1814      	adds	r4, r2, r0
 800651a:	64bc      	str	r4, [r7, #72]	; 0x48
 800651c:	414b      	adcs	r3, r1
 800651e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	4618      	mov	r0, r3
 8006526:	f04f 0100 	mov.w	r1, #0
 800652a:	f04f 0200 	mov.w	r2, #0
 800652e:	f04f 0300 	mov.w	r3, #0
 8006532:	008b      	lsls	r3, r1, #2
 8006534:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006538:	0082      	lsls	r2, r0, #2
 800653a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800653e:	f7f9 feaf 	bl	80002a0 <__aeabi_uldivmod>
 8006542:	4602      	mov	r2, r0
 8006544:	460b      	mov	r3, r1
 8006546:	4b2f      	ldr	r3, [pc, #188]	; (8006604 <UART_SetConfig+0x38c>)
 8006548:	fba3 1302 	umull	r1, r3, r3, r2
 800654c:	095b      	lsrs	r3, r3, #5
 800654e:	2164      	movs	r1, #100	; 0x64
 8006550:	fb01 f303 	mul.w	r3, r1, r3
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	011b      	lsls	r3, r3, #4
 8006558:	3332      	adds	r3, #50	; 0x32
 800655a:	4a2a      	ldr	r2, [pc, #168]	; (8006604 <UART_SetConfig+0x38c>)
 800655c:	fba2 2303 	umull	r2, r3, r2, r3
 8006560:	095b      	lsrs	r3, r3, #5
 8006562:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006566:	441e      	add	r6, r3
 8006568:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800656a:	4618      	mov	r0, r3
 800656c:	f04f 0100 	mov.w	r1, #0
 8006570:	4602      	mov	r2, r0
 8006572:	460b      	mov	r3, r1
 8006574:	1894      	adds	r4, r2, r2
 8006576:	603c      	str	r4, [r7, #0]
 8006578:	415b      	adcs	r3, r3
 800657a:	607b      	str	r3, [r7, #4]
 800657c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006580:	1812      	adds	r2, r2, r0
 8006582:	eb41 0303 	adc.w	r3, r1, r3
 8006586:	f04f 0400 	mov.w	r4, #0
 800658a:	f04f 0500 	mov.w	r5, #0
 800658e:	00dd      	lsls	r5, r3, #3
 8006590:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006594:	00d4      	lsls	r4, r2, #3
 8006596:	4622      	mov	r2, r4
 8006598:	462b      	mov	r3, r5
 800659a:	eb12 0a00 	adds.w	sl, r2, r0
 800659e:	eb43 0b01 	adc.w	fp, r3, r1
 80065a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	4618      	mov	r0, r3
 80065a8:	f04f 0100 	mov.w	r1, #0
 80065ac:	f04f 0200 	mov.w	r2, #0
 80065b0:	f04f 0300 	mov.w	r3, #0
 80065b4:	008b      	lsls	r3, r1, #2
 80065b6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80065ba:	0082      	lsls	r2, r0, #2
 80065bc:	4650      	mov	r0, sl
 80065be:	4659      	mov	r1, fp
 80065c0:	f7f9 fe6e 	bl	80002a0 <__aeabi_uldivmod>
 80065c4:	4602      	mov	r2, r0
 80065c6:	460b      	mov	r3, r1
 80065c8:	4b0e      	ldr	r3, [pc, #56]	; (8006604 <UART_SetConfig+0x38c>)
 80065ca:	fba3 1302 	umull	r1, r3, r3, r2
 80065ce:	095b      	lsrs	r3, r3, #5
 80065d0:	2164      	movs	r1, #100	; 0x64
 80065d2:	fb01 f303 	mul.w	r3, r1, r3
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	011b      	lsls	r3, r3, #4
 80065da:	3332      	adds	r3, #50	; 0x32
 80065dc:	4a09      	ldr	r2, [pc, #36]	; (8006604 <UART_SetConfig+0x38c>)
 80065de:	fba2 2303 	umull	r2, r3, r2, r3
 80065e2:	095b      	lsrs	r3, r3, #5
 80065e4:	f003 020f 	and.w	r2, r3, #15
 80065e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4432      	add	r2, r6
 80065ee:	609a      	str	r2, [r3, #8]
}
 80065f0:	bf00      	nop
 80065f2:	377c      	adds	r7, #124	; 0x7c
 80065f4:	46bd      	mov	sp, r7
 80065f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065fa:	bf00      	nop
 80065fc:	40011000 	.word	0x40011000
 8006600:	40011400 	.word	0x40011400
 8006604:	51eb851f 	.word	0x51eb851f

08006608 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8006608:	b084      	sub	sp, #16
 800660a:	b480      	push	{r7}
 800660c:	b085      	sub	sp, #20
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
 8006612:	f107 001c 	add.w	r0, r7, #28
 8006616:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800661a:	2300      	movs	r3, #0
 800661c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800661e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006620:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006622:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8006626:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006628:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800662a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800662c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800662e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8006632:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	4313      	orrs	r3, r2
 8006638:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8006642:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	431a      	orrs	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	3714      	adds	r7, #20
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	b004      	add	sp, #16
 800665c:	4770      	bx	lr

0800665e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800665e:	b480      	push	{r7}
 8006660:	b083      	sub	sp, #12
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800666c:	4618      	mov	r0, r3
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr

0800669a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800669a:	b580      	push	{r7, lr}
 800669c:	b082      	sub	sp, #8
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2203      	movs	r2, #3
 80066a6:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80066a8:	2002      	movs	r0, #2
 80066aa:	f7fb fd45 	bl	8002138 <HAL_Delay>
  
  return HAL_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3708      	adds	r7, #8
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 0303 	and.w	r3, r3, #3
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b085      	sub	sp, #20
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80066de:	2300      	movs	r3, #0
 80066e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80066f2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80066f8:	431a      	orrs	r2, r3
                       Command->CPSM);
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80066fe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	4313      	orrs	r3, r2
 8006704:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800670e:	f023 030f 	bic.w	r3, r3, #15
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	431a      	orrs	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3714      	adds	r7, #20
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	b2db      	uxtb	r3, r3
}
 8006736:	4618      	mov	r0, r3
 8006738:	370c      	adds	r7, #12
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr

08006742 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006742:	b480      	push	{r7}
 8006744:	b085      	sub	sp, #20
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
 800674a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	3314      	adds	r3, #20
 8006750:	461a      	mov	r2, r3
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	4413      	add	r3, r2
 8006756:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
}  
 800675c:	4618      	mov	r0, r3
 800675e:	3714      	adds	r7, #20
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006772:	2300      	movs	r3, #0
 8006774:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	685a      	ldr	r2, [r3, #4]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800678e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006794:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800679a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	4313      	orrs	r3, r2
 80067a0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	431a      	orrs	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80067b2:	2300      	movs	r3, #0

}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3714      	adds	r7, #20
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b088      	sub	sp, #32
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80067ce:	2310      	movs	r3, #16
 80067d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80067d2:	2340      	movs	r3, #64	; 0x40
 80067d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80067d6:	2300      	movs	r3, #0
 80067d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80067da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80067e0:	f107 0308 	add.w	r3, r7, #8
 80067e4:	4619      	mov	r1, r3
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f7ff ff74 	bl	80066d4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80067ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80067f0:	2110      	movs	r1, #16
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 fa44 	bl	8006c80 <SDMMC_GetCmdResp1>
 80067f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80067fa:	69fb      	ldr	r3, [r7, #28]
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3720      	adds	r7, #32
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b088      	sub	sp, #32
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006812:	2311      	movs	r3, #17
 8006814:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006816:	2340      	movs	r3, #64	; 0x40
 8006818:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800681a:	2300      	movs	r3, #0
 800681c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800681e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006822:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006824:	f107 0308 	add.w	r3, r7, #8
 8006828:	4619      	mov	r1, r3
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f7ff ff52 	bl	80066d4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006830:	f241 3288 	movw	r2, #5000	; 0x1388
 8006834:	2111      	movs	r1, #17
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 fa22 	bl	8006c80 <SDMMC_GetCmdResp1>
 800683c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800683e:	69fb      	ldr	r3, [r7, #28]
}
 8006840:	4618      	mov	r0, r3
 8006842:	3720      	adds	r7, #32
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b088      	sub	sp, #32
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006856:	2312      	movs	r3, #18
 8006858:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800685a:	2340      	movs	r3, #64	; 0x40
 800685c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800685e:	2300      	movs	r3, #0
 8006860:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006862:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006866:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006868:	f107 0308 	add.w	r3, r7, #8
 800686c:	4619      	mov	r1, r3
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f7ff ff30 	bl	80066d4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006874:	f241 3288 	movw	r2, #5000	; 0x1388
 8006878:	2112      	movs	r1, #18
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 fa00 	bl	8006c80 <SDMMC_GetCmdResp1>
 8006880:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006882:	69fb      	ldr	r3, [r7, #28]
}
 8006884:	4618      	mov	r0, r3
 8006886:	3720      	adds	r7, #32
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b088      	sub	sp, #32
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800689a:	2318      	movs	r3, #24
 800689c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800689e:	2340      	movs	r3, #64	; 0x40
 80068a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80068a2:	2300      	movs	r3, #0
 80068a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80068a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80068ac:	f107 0308 	add.w	r3, r7, #8
 80068b0:	4619      	mov	r1, r3
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f7ff ff0e 	bl	80066d4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80068b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80068bc:	2118      	movs	r1, #24
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f9de 	bl	8006c80 <SDMMC_GetCmdResp1>
 80068c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80068c6:	69fb      	ldr	r3, [r7, #28]
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3720      	adds	r7, #32
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b088      	sub	sp, #32
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80068de:	2319      	movs	r3, #25
 80068e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80068e2:	2340      	movs	r3, #64	; 0x40
 80068e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80068e6:	2300      	movs	r3, #0
 80068e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80068ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80068f0:	f107 0308 	add.w	r3, r7, #8
 80068f4:	4619      	mov	r1, r3
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f7ff feec 	bl	80066d4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80068fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006900:	2119      	movs	r1, #25
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f9bc 	bl	8006c80 <SDMMC_GetCmdResp1>
 8006908:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800690a:	69fb      	ldr	r3, [r7, #28]
}
 800690c:	4618      	mov	r0, r3
 800690e:	3720      	adds	r7, #32
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b088      	sub	sp, #32
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800691c:	2300      	movs	r3, #0
 800691e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006920:	230c      	movs	r3, #12
 8006922:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006924:	2340      	movs	r3, #64	; 0x40
 8006926:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006928:	2300      	movs	r3, #0
 800692a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800692c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006930:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006932:	f107 0308 	add.w	r3, r7, #8
 8006936:	4619      	mov	r1, r3
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f7ff fecb 	bl	80066d4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800693e:	4a05      	ldr	r2, [pc, #20]	; (8006954 <SDMMC_CmdStopTransfer+0x40>)
 8006940:	210c      	movs	r1, #12
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f99c 	bl	8006c80 <SDMMC_GetCmdResp1>
 8006948:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800694a:	69fb      	ldr	r3, [r7, #28]
}
 800694c:	4618      	mov	r0, r3
 800694e:	3720      	adds	r7, #32
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}
 8006954:	05f5e100 	.word	0x05f5e100

08006958 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b08a      	sub	sp, #40	; 0x28
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006968:	2307      	movs	r3, #7
 800696a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800696c:	2340      	movs	r3, #64	; 0x40
 800696e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006970:	2300      	movs	r3, #0
 8006972:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006974:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006978:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800697a:	f107 0310 	add.w	r3, r7, #16
 800697e:	4619      	mov	r1, r3
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	f7ff fea7 	bl	80066d4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006986:	f241 3288 	movw	r2, #5000	; 0x1388
 800698a:	2107      	movs	r1, #7
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	f000 f977 	bl	8006c80 <SDMMC_GetCmdResp1>
 8006992:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006996:	4618      	mov	r0, r3
 8006998:	3728      	adds	r7, #40	; 0x28
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}

0800699e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800699e:	b580      	push	{r7, lr}
 80069a0:	b088      	sub	sp, #32
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80069a6:	2300      	movs	r3, #0
 80069a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80069aa:	2300      	movs	r3, #0
 80069ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80069ae:	2300      	movs	r3, #0
 80069b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80069b2:	2300      	movs	r3, #0
 80069b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80069b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80069bc:	f107 0308 	add.w	r3, r7, #8
 80069c0:	4619      	mov	r1, r3
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f7ff fe86 	bl	80066d4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 f92d 	bl	8006c28 <SDMMC_GetCmdError>
 80069ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80069d0:	69fb      	ldr	r3, [r7, #28]
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3720      	adds	r7, #32
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80069da:	b580      	push	{r7, lr}
 80069dc:	b088      	sub	sp, #32
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80069e2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80069e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80069e8:	2308      	movs	r3, #8
 80069ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80069ec:	2340      	movs	r3, #64	; 0x40
 80069ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80069f0:	2300      	movs	r3, #0
 80069f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80069f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80069fa:	f107 0308 	add.w	r3, r7, #8
 80069fe:	4619      	mov	r1, r3
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f7ff fe67 	bl	80066d4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 fb24 	bl	8007054 <SDMMC_GetCmdResp7>
 8006a0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a0e:	69fb      	ldr	r3, [r7, #28]
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3720      	adds	r7, #32
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b088      	sub	sp, #32
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006a26:	2337      	movs	r3, #55	; 0x37
 8006a28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006a2a:	2340      	movs	r3, #64	; 0x40
 8006a2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a36:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a38:	f107 0308 	add.w	r3, r7, #8
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7ff fe48 	bl	80066d4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a48:	2137      	movs	r1, #55	; 0x37
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 f918 	bl	8006c80 <SDMMC_GetCmdResp1>
 8006a50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a52:	69fb      	ldr	r3, [r7, #28]
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3720      	adds	r7, #32
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b088      	sub	sp, #32
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006a72:	2329      	movs	r3, #41	; 0x29
 8006a74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006a76:	2340      	movs	r3, #64	; 0x40
 8006a78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a82:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a84:	f107 0308 	add.w	r3, r7, #8
 8006a88:	4619      	mov	r1, r3
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f7ff fe22 	bl	80066d4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 fa2b 	bl	8006eec <SDMMC_GetCmdResp3>
 8006a96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a98:	69fb      	ldr	r3, [r7, #28]
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3720      	adds	r7, #32
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b088      	sub	sp, #32
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
 8006aaa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006ab0:	2306      	movs	r3, #6
 8006ab2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ab4:	2340      	movs	r3, #64	; 0x40
 8006ab6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006abc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ac0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ac2:	f107 0308 	add.w	r3, r7, #8
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f7ff fe03 	bl	80066d4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8006ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ad2:	2106      	movs	r1, #6
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 f8d3 	bl	8006c80 <SDMMC_GetCmdResp1>
 8006ada:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006adc:	69fb      	ldr	r3, [r7, #28]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3720      	adds	r7, #32
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}

08006ae6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8006ae6:	b580      	push	{r7, lr}
 8006ae8:	b088      	sub	sp, #32
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006aee:	2300      	movs	r3, #0
 8006af0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006af2:	2333      	movs	r3, #51	; 0x33
 8006af4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006af6:	2340      	movs	r3, #64	; 0x40
 8006af8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006afa:	2300      	movs	r3, #0
 8006afc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006afe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b02:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b04:	f107 0308 	add.w	r3, r7, #8
 8006b08:	4619      	mov	r1, r3
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f7ff fde2 	bl	80066d4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8006b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b14:	2133      	movs	r1, #51	; 0x33
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 f8b2 	bl	8006c80 <SDMMC_GetCmdResp1>
 8006b1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b1e:	69fb      	ldr	r3, [r7, #28]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3720      	adds	r7, #32
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b088      	sub	sp, #32
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006b30:	2300      	movs	r3, #0
 8006b32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006b34:	2302      	movs	r3, #2
 8006b36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006b38:	23c0      	movs	r3, #192	; 0xc0
 8006b3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b44:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b46:	f107 0308 	add.w	r3, r7, #8
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f7ff fdc1 	bl	80066d4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 f982 	bl	8006e5c <SDMMC_GetCmdResp2>
 8006b58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b5a:	69fb      	ldr	r3, [r7, #28]
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3720      	adds	r7, #32
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b088      	sub	sp, #32
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006b72:	2309      	movs	r3, #9
 8006b74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006b76:	23c0      	movs	r3, #192	; 0xc0
 8006b78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b82:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b84:	f107 0308 	add.w	r3, r7, #8
 8006b88:	4619      	mov	r1, r3
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f7ff fda2 	bl	80066d4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 f963 	bl	8006e5c <SDMMC_GetCmdResp2>
 8006b96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b98:	69fb      	ldr	r3, [r7, #28]
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3720      	adds	r7, #32
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b088      	sub	sp, #32
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
 8006baa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006bac:	2300      	movs	r3, #0
 8006bae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006bb4:	2340      	movs	r3, #64	; 0x40
 8006bb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006bbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bc0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006bc2:	f107 0308 	add.w	r3, r7, #8
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f7ff fd83 	bl	80066d4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006bce:	683a      	ldr	r2, [r7, #0]
 8006bd0:	2103      	movs	r1, #3
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 f9c8 	bl	8006f68 <SDMMC_GetCmdResp6>
 8006bd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006bda:	69fb      	ldr	r3, [r7, #28]
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3720      	adds	r7, #32
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b088      	sub	sp, #32
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006bf2:	230d      	movs	r3, #13
 8006bf4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006bf6:	2340      	movs	r3, #64	; 0x40
 8006bf8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006bfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c02:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c04:	f107 0308 	add.w	r3, r7, #8
 8006c08:	4619      	mov	r1, r3
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f7ff fd62 	bl	80066d4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c14:	210d      	movs	r1, #13
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 f832 	bl	8006c80 <SDMMC_GetCmdResp1>
 8006c1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c1e:	69fb      	ldr	r3, [r7, #28]
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3720      	adds	r7, #32
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b085      	sub	sp, #20
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006c30:	4b11      	ldr	r3, [pc, #68]	; (8006c78 <SDMMC_GetCmdError+0x50>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a11      	ldr	r2, [pc, #68]	; (8006c7c <SDMMC_GetCmdError+0x54>)
 8006c36:	fba2 2303 	umull	r2, r3, r2, r3
 8006c3a:	0a5b      	lsrs	r3, r3, #9
 8006c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c40:	fb02 f303 	mul.w	r3, r2, r3
 8006c44:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	1e5a      	subs	r2, r3, #1
 8006c4a:	60fa      	str	r2, [r7, #12]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d102      	bne.n	8006c56 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006c50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006c54:	e009      	b.n	8006c6a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d0f1      	beq.n	8006c46 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	22c5      	movs	r2, #197	; 0xc5
 8006c66:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8006c68:	2300      	movs	r3, #0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3714      	adds	r7, #20
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	20000138 	.word	0x20000138
 8006c7c:	10624dd3 	.word	0x10624dd3

08006c80 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b088      	sub	sp, #32
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	460b      	mov	r3, r1
 8006c8a:	607a      	str	r2, [r7, #4]
 8006c8c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006c8e:	4b70      	ldr	r3, [pc, #448]	; (8006e50 <SDMMC_GetCmdResp1+0x1d0>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a70      	ldr	r2, [pc, #448]	; (8006e54 <SDMMC_GetCmdResp1+0x1d4>)
 8006c94:	fba2 2303 	umull	r2, r3, r2, r3
 8006c98:	0a5a      	lsrs	r2, r3, #9
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	fb02 f303 	mul.w	r3, r2, r3
 8006ca0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	1e5a      	subs	r2, r3, #1
 8006ca6:	61fa      	str	r2, [r7, #28]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d102      	bne.n	8006cb2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006cac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006cb0:	e0c9      	b.n	8006e46 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cb6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d0ef      	beq.n	8006ca2 <SDMMC_GetCmdResp1+0x22>
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d1ea      	bne.n	8006ca2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cd0:	f003 0304 	and.w	r3, r3, #4
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d004      	beq.n	8006ce2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2204      	movs	r2, #4
 8006cdc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006cde:	2304      	movs	r3, #4
 8006ce0:	e0b1      	b.n	8006e46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ce6:	f003 0301 	and.w	r3, r3, #1
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d004      	beq.n	8006cf8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e0a6      	b.n	8006e46 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	22c5      	movs	r2, #197	; 0xc5
 8006cfc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f7ff fd12 	bl	8006728 <SDIO_GetCommandResponse>
 8006d04:	4603      	mov	r3, r0
 8006d06:	461a      	mov	r2, r3
 8006d08:	7afb      	ldrb	r3, [r7, #11]
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d001      	beq.n	8006d12 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e099      	b.n	8006e46 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006d12:	2100      	movs	r1, #0
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f7ff fd14 	bl	8006742 <SDIO_GetResponse>
 8006d1a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006d1c:	697a      	ldr	r2, [r7, #20]
 8006d1e:	4b4e      	ldr	r3, [pc, #312]	; (8006e58 <SDMMC_GetCmdResp1+0x1d8>)
 8006d20:	4013      	ands	r3, r2
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d101      	bne.n	8006d2a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006d26:	2300      	movs	r3, #0
 8006d28:	e08d      	b.n	8006e46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	da02      	bge.n	8006d36 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006d30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d34:	e087      	b.n	8006e46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d001      	beq.n	8006d44 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006d40:	2340      	movs	r3, #64	; 0x40
 8006d42:	e080      	b.n	8006e46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d001      	beq.n	8006d52 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006d4e:	2380      	movs	r3, #128	; 0x80
 8006d50:	e079      	b.n	8006e46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d002      	beq.n	8006d62 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006d5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d60:	e071      	b.n	8006e46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d002      	beq.n	8006d72 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006d6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d70:	e069      	b.n	8006e46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d002      	beq.n	8006d82 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006d7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d80:	e061      	b.n	8006e46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d002      	beq.n	8006d92 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006d8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006d90:	e059      	b.n	8006e46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d002      	beq.n	8006da2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006da0:	e051      	b.n	8006e46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d002      	beq.n	8006db2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006dac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006db0:	e049      	b.n	8006e46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d002      	beq.n	8006dc2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006dbc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006dc0:	e041      	b.n	8006e46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d002      	beq.n	8006dd2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006dcc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dd0:	e039      	b.n	8006e46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d002      	beq.n	8006de2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006ddc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006de0:	e031      	b.n	8006e46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d002      	beq.n	8006df2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006dec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006df0:	e029      	b.n	8006e46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d002      	beq.n	8006e02 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006dfc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006e00:	e021      	b.n	8006e46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d002      	beq.n	8006e12 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006e0c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006e10:	e019      	b.n	8006e46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d002      	beq.n	8006e22 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006e1c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006e20:	e011      	b.n	8006e46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d002      	beq.n	8006e32 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006e2c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006e30:	e009      	b.n	8006e46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	f003 0308 	and.w	r3, r3, #8
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d002      	beq.n	8006e42 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006e3c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006e40:	e001      	b.n	8006e46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006e42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3720      	adds	r7, #32
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	20000138 	.word	0x20000138
 8006e54:	10624dd3 	.word	0x10624dd3
 8006e58:	fdffe008 	.word	0xfdffe008

08006e5c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b085      	sub	sp, #20
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006e64:	4b1f      	ldr	r3, [pc, #124]	; (8006ee4 <SDMMC_GetCmdResp2+0x88>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a1f      	ldr	r2, [pc, #124]	; (8006ee8 <SDMMC_GetCmdResp2+0x8c>)
 8006e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e6e:	0a5b      	lsrs	r3, r3, #9
 8006e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e74:	fb02 f303 	mul.w	r3, r2, r3
 8006e78:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	1e5a      	subs	r2, r3, #1
 8006e7e:	60fa      	str	r2, [r7, #12]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d102      	bne.n	8006e8a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006e84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006e88:	e026      	b.n	8006ed8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e8e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d0ef      	beq.n	8006e7a <SDMMC_GetCmdResp2+0x1e>
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d1ea      	bne.n	8006e7a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ea8:	f003 0304 	and.w	r3, r3, #4
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d004      	beq.n	8006eba <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2204      	movs	r2, #4
 8006eb4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006eb6:	2304      	movs	r3, #4
 8006eb8:	e00e      	b.n	8006ed8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ebe:	f003 0301 	and.w	r3, r3, #1
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d004      	beq.n	8006ed0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e003      	b.n	8006ed8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	22c5      	movs	r2, #197	; 0xc5
 8006ed4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3714      	adds	r7, #20
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr
 8006ee4:	20000138 	.word	0x20000138
 8006ee8:	10624dd3 	.word	0x10624dd3

08006eec <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006ef4:	4b1a      	ldr	r3, [pc, #104]	; (8006f60 <SDMMC_GetCmdResp3+0x74>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a1a      	ldr	r2, [pc, #104]	; (8006f64 <SDMMC_GetCmdResp3+0x78>)
 8006efa:	fba2 2303 	umull	r2, r3, r2, r3
 8006efe:	0a5b      	lsrs	r3, r3, #9
 8006f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f04:	fb02 f303 	mul.w	r3, r2, r3
 8006f08:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	1e5a      	subs	r2, r3, #1
 8006f0e:	60fa      	str	r2, [r7, #12]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d102      	bne.n	8006f1a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006f14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006f18:	e01b      	b.n	8006f52 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f1e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d0ef      	beq.n	8006f0a <SDMMC_GetCmdResp3+0x1e>
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d1ea      	bne.n	8006f0a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f38:	f003 0304 	and.w	r3, r3, #4
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d004      	beq.n	8006f4a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2204      	movs	r2, #4
 8006f44:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006f46:	2304      	movs	r3, #4
 8006f48:	e003      	b.n	8006f52 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	22c5      	movs	r2, #197	; 0xc5
 8006f4e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3714      	adds	r7, #20
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr
 8006f5e:	bf00      	nop
 8006f60:	20000138 	.word	0x20000138
 8006f64:	10624dd3 	.word	0x10624dd3

08006f68 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b088      	sub	sp, #32
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	460b      	mov	r3, r1
 8006f72:	607a      	str	r2, [r7, #4]
 8006f74:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006f76:	4b35      	ldr	r3, [pc, #212]	; (800704c <SDMMC_GetCmdResp6+0xe4>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a35      	ldr	r2, [pc, #212]	; (8007050 <SDMMC_GetCmdResp6+0xe8>)
 8006f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f80:	0a5b      	lsrs	r3, r3, #9
 8006f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f86:	fb02 f303 	mul.w	r3, r2, r3
 8006f8a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	1e5a      	subs	r2, r3, #1
 8006f90:	61fa      	str	r2, [r7, #28]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d102      	bne.n	8006f9c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006f96:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006f9a:	e052      	b.n	8007042 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fa0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d0ef      	beq.n	8006f8c <SDMMC_GetCmdResp6+0x24>
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1ea      	bne.n	8006f8c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fba:	f003 0304 	and.w	r3, r3, #4
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d004      	beq.n	8006fcc <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2204      	movs	r2, #4
 8006fc6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006fc8:	2304      	movs	r3, #4
 8006fca:	e03a      	b.n	8007042 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd0:	f003 0301 	and.w	r3, r3, #1
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d004      	beq.n	8006fe2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e02f      	b.n	8007042 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f7ff fba0 	bl	8006728 <SDIO_GetCommandResponse>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	461a      	mov	r2, r3
 8006fec:	7afb      	ldrb	r3, [r7, #11]
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d001      	beq.n	8006ff6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e025      	b.n	8007042 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	22c5      	movs	r2, #197	; 0xc5
 8006ffa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006ffc:	2100      	movs	r1, #0
 8006ffe:	68f8      	ldr	r0, [r7, #12]
 8007000:	f7ff fb9f 	bl	8006742 <SDIO_GetResponse>
 8007004:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800700c:	2b00      	cmp	r3, #0
 800700e:	d106      	bne.n	800701e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	0c1b      	lsrs	r3, r3, #16
 8007014:	b29a      	uxth	r2, r3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800701a:	2300      	movs	r3, #0
 800701c:	e011      	b.n	8007042 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007024:	2b00      	cmp	r3, #0
 8007026:	d002      	beq.n	800702e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007028:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800702c:	e009      	b.n	8007042 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007034:	2b00      	cmp	r3, #0
 8007036:	d002      	beq.n	800703e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800703c:	e001      	b.n	8007042 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800703e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007042:	4618      	mov	r0, r3
 8007044:	3720      	adds	r7, #32
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	20000138 	.word	0x20000138
 8007050:	10624dd3 	.word	0x10624dd3

08007054 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800705c:	4b22      	ldr	r3, [pc, #136]	; (80070e8 <SDMMC_GetCmdResp7+0x94>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a22      	ldr	r2, [pc, #136]	; (80070ec <SDMMC_GetCmdResp7+0x98>)
 8007062:	fba2 2303 	umull	r2, r3, r2, r3
 8007066:	0a5b      	lsrs	r3, r3, #9
 8007068:	f241 3288 	movw	r2, #5000	; 0x1388
 800706c:	fb02 f303 	mul.w	r3, r2, r3
 8007070:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	1e5a      	subs	r2, r3, #1
 8007076:	60fa      	str	r2, [r7, #12]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d102      	bne.n	8007082 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800707c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007080:	e02c      	b.n	80070dc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007086:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800708e:	2b00      	cmp	r3, #0
 8007090:	d0ef      	beq.n	8007072 <SDMMC_GetCmdResp7+0x1e>
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007098:	2b00      	cmp	r3, #0
 800709a:	d1ea      	bne.n	8007072 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070a0:	f003 0304 	and.w	r3, r3, #4
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d004      	beq.n	80070b2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2204      	movs	r2, #4
 80070ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80070ae:	2304      	movs	r3, #4
 80070b0:	e014      	b.n	80070dc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070b6:	f003 0301 	and.w	r3, r3, #1
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d004      	beq.n	80070c8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2201      	movs	r2, #1
 80070c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80070c4:	2301      	movs	r3, #1
 80070c6:	e009      	b.n	80070dc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d002      	beq.n	80070da <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2240      	movs	r2, #64	; 0x40
 80070d8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80070da:	2300      	movs	r3, #0
  
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3714      	adds	r7, #20
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr
 80070e8:	20000138 	.word	0x20000138
 80070ec:	10624dd3 	.word	0x10624dd3

080070f0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80070f4:	4904      	ldr	r1, [pc, #16]	; (8007108 <MX_FATFS_Init+0x18>)
 80070f6:	4805      	ldr	r0, [pc, #20]	; (800710c <MX_FATFS_Init+0x1c>)
 80070f8:	f003 fae8 	bl	800a6cc <FATFS_LinkDriver>
 80070fc:	4603      	mov	r3, r0
 80070fe:	461a      	mov	r2, r3
 8007100:	4b03      	ldr	r3, [pc, #12]	; (8007110 <MX_FATFS_Init+0x20>)
 8007102:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007104:	bf00      	nop
 8007106:	bd80      	pop	{r7, pc}
 8007108:	20008650 	.word	0x20008650
 800710c:	0801c288 	.word	0x0801c288
 8007110:	2000864c 	.word	0x2000864c

08007114 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007114:	b480      	push	{r7}
 8007116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007118:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800711a:	4618      	mov	r0, r3
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800712a:	2300      	movs	r3, #0
 800712c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800712e:	f000 f896 	bl	800725e <BSP_SD_IsDetected>
 8007132:	4603      	mov	r3, r0
 8007134:	2b01      	cmp	r3, #1
 8007136:	d001      	beq.n	800713c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	e012      	b.n	8007162 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800713c:	480b      	ldr	r0, [pc, #44]	; (800716c <BSP_SD_Init+0x48>)
 800713e:	f7fd fc1f 	bl	8004980 <HAL_SD_Init>
 8007142:	4603      	mov	r3, r0
 8007144:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8007146:	79fb      	ldrb	r3, [r7, #7]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d109      	bne.n	8007160 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800714c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007150:	4806      	ldr	r0, [pc, #24]	; (800716c <BSP_SD_Init+0x48>)
 8007152:	f7fe f9eb 	bl	800552c <HAL_SD_ConfigWideBusOperation>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d001      	beq.n	8007160 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8007160:	79fb      	ldrb	r3, [r7, #7]
}
 8007162:	4618      	mov	r0, r3
 8007164:	3708      	adds	r7, #8
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	20005a18 	.word	0x20005a18

08007170 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b086      	sub	sp, #24
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800717c:	2300      	movs	r3, #0
 800717e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	68f9      	ldr	r1, [r7, #12]
 8007186:	4806      	ldr	r0, [pc, #24]	; (80071a0 <BSP_SD_ReadBlocks_DMA+0x30>)
 8007188:	f7fd fca8 	bl	8004adc <HAL_SD_ReadBlocks_DMA>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d001      	beq.n	8007196 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007196:	7dfb      	ldrb	r3, [r7, #23]
}
 8007198:	4618      	mov	r0, r3
 800719a:	3718      	adds	r7, #24
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	20005a18 	.word	0x20005a18

080071a4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b086      	sub	sp, #24
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80071b0:	2300      	movs	r3, #0
 80071b2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	68ba      	ldr	r2, [r7, #8]
 80071b8:	68f9      	ldr	r1, [r7, #12]
 80071ba:	4806      	ldr	r0, [pc, #24]	; (80071d4 <BSP_SD_WriteBlocks_DMA+0x30>)
 80071bc:	f7fd fd70 	bl	8004ca0 <HAL_SD_WriteBlocks_DMA>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d001      	beq.n	80071ca <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80071ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3718      	adds	r7, #24
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	20005a18 	.word	0x20005a18

080071d8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80071dc:	4805      	ldr	r0, [pc, #20]	; (80071f4 <BSP_SD_GetCardState+0x1c>)
 80071de:	f7fe fa3f 	bl	8005660 <HAL_SD_GetCardState>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b04      	cmp	r3, #4
 80071e6:	bf14      	ite	ne
 80071e8:	2301      	movne	r3, #1
 80071ea:	2300      	moveq	r3, #0
 80071ec:	b2db      	uxtb	r3, r3
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	20005a18 	.word	0x20005a18

080071f8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8007200:	6879      	ldr	r1, [r7, #4]
 8007202:	4803      	ldr	r0, [pc, #12]	; (8007210 <BSP_SD_GetCardInfo+0x18>)
 8007204:	f7fe f966 	bl	80054d4 <HAL_SD_GetCardInfo>
}
 8007208:	bf00      	nop
 800720a:	3708      	adds	r7, #8
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}
 8007210:	20005a18 	.word	0x20005a18

08007214 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800721c:	f000 f818 	bl	8007250 <BSP_SD_AbortCallback>
}
 8007220:	bf00      	nop
 8007222:	3708      	adds	r7, #8
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8007230:	f000 f98c 	bl	800754c <BSP_SD_WriteCpltCallback>
}
 8007234:	bf00      	nop
 8007236:	3708      	adds	r7, #8
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8007244:	f000 f98e 	bl	8007564 <BSP_SD_ReadCpltCallback>
}
 8007248:	bf00      	nop
 800724a:	3708      	adds	r7, #8
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8007250:	b480      	push	{r7}
 8007252:	af00      	add	r7, sp, #0

}
 8007254:	bf00      	nop
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr

0800725e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800725e:	b480      	push	{r7}
 8007260:	b083      	sub	sp, #12
 8007262:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007264:	2301      	movs	r3, #1
 8007266:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8007268:	79fb      	ldrb	r3, [r7, #7]
 800726a:	b2db      	uxtb	r3, r3
}
 800726c:	4618      	mov	r0, r3
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8007280:	f7fa ff4e 	bl	8002120 <HAL_GetTick>
 8007284:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8007286:	e006      	b.n	8007296 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007288:	f7ff ffa6 	bl	80071d8 <BSP_SD_GetCardState>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d101      	bne.n	8007296 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8007292:	2300      	movs	r3, #0
 8007294:	e009      	b.n	80072aa <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8007296:	f7fa ff43 	bl	8002120 <HAL_GetTick>
 800729a:	4602      	mov	r2, r0
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	1ad3      	subs	r3, r2, r3
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d8f0      	bhi.n	8007288 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80072a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
	...

080072b4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	4603      	mov	r3, r0
 80072bc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80072be:	4b0b      	ldr	r3, [pc, #44]	; (80072ec <SD_CheckStatus+0x38>)
 80072c0:	2201      	movs	r2, #1
 80072c2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80072c4:	f7ff ff88 	bl	80071d8 <BSP_SD_GetCardState>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d107      	bne.n	80072de <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80072ce:	4b07      	ldr	r3, [pc, #28]	; (80072ec <SD_CheckStatus+0x38>)
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	f023 0301 	bic.w	r3, r3, #1
 80072d8:	b2da      	uxtb	r2, r3
 80072da:	4b04      	ldr	r3, [pc, #16]	; (80072ec <SD_CheckStatus+0x38>)
 80072dc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80072de:	4b03      	ldr	r3, [pc, #12]	; (80072ec <SD_CheckStatus+0x38>)
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	b2db      	uxtb	r3, r3
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3708      	adds	r7, #8
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	20000141 	.word	0x20000141

080072f0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	4603      	mov	r3, r0
 80072f8:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80072fa:	f7ff ff13 	bl	8007124 <BSP_SD_Init>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d107      	bne.n	8007314 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8007304:	79fb      	ldrb	r3, [r7, #7]
 8007306:	4618      	mov	r0, r3
 8007308:	f7ff ffd4 	bl	80072b4 <SD_CheckStatus>
 800730c:	4603      	mov	r3, r0
 800730e:	461a      	mov	r2, r3
 8007310:	4b04      	ldr	r3, [pc, #16]	; (8007324 <SD_initialize+0x34>)
 8007312:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8007314:	4b03      	ldr	r3, [pc, #12]	; (8007324 <SD_initialize+0x34>)
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	b2db      	uxtb	r3, r3
}
 800731a:	4618      	mov	r0, r3
 800731c:	3708      	adds	r7, #8
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	20000141 	.word	0x20000141

08007328 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
 800732e:	4603      	mov	r3, r0
 8007330:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007332:	79fb      	ldrb	r3, [r7, #7]
 8007334:	4618      	mov	r0, r3
 8007336:	f7ff ffbd 	bl	80072b4 <SD_CheckStatus>
 800733a:	4603      	mov	r3, r0
}
 800733c:	4618      	mov	r0, r3
 800733e:	3708      	adds	r7, #8
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b086      	sub	sp, #24
 8007348:	af00      	add	r7, sp, #0
 800734a:	60b9      	str	r1, [r7, #8]
 800734c:	607a      	str	r2, [r7, #4]
 800734e:	603b      	str	r3, [r7, #0]
 8007350:	4603      	mov	r3, r0
 8007352:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007358:	f247 5030 	movw	r0, #30000	; 0x7530
 800735c:	f7ff ff8c 	bl	8007278 <SD_CheckStatusWithTimeout>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	da01      	bge.n	800736a <SD_read+0x26>
  {
    return res;
 8007366:	7dfb      	ldrb	r3, [r7, #23]
 8007368:	e03b      	b.n	80073e2 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800736a:	683a      	ldr	r2, [r7, #0]
 800736c:	6879      	ldr	r1, [r7, #4]
 800736e:	68b8      	ldr	r0, [r7, #8]
 8007370:	f7ff fefe 	bl	8007170 <BSP_SD_ReadBlocks_DMA>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d132      	bne.n	80073e0 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800737a:	4b1c      	ldr	r3, [pc, #112]	; (80073ec <SD_read+0xa8>)
 800737c:	2200      	movs	r2, #0
 800737e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8007380:	f7fa fece 	bl	8002120 <HAL_GetTick>
 8007384:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8007386:	bf00      	nop
 8007388:	4b18      	ldr	r3, [pc, #96]	; (80073ec <SD_read+0xa8>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d108      	bne.n	80073a2 <SD_read+0x5e>
 8007390:	f7fa fec6 	bl	8002120 <HAL_GetTick>
 8007394:	4602      	mov	r2, r0
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	f247 522f 	movw	r2, #29999	; 0x752f
 800739e:	4293      	cmp	r3, r2
 80073a0:	d9f2      	bls.n	8007388 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80073a2:	4b12      	ldr	r3, [pc, #72]	; (80073ec <SD_read+0xa8>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d102      	bne.n	80073b0 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	75fb      	strb	r3, [r7, #23]
 80073ae:	e017      	b.n	80073e0 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80073b0:	4b0e      	ldr	r3, [pc, #56]	; (80073ec <SD_read+0xa8>)
 80073b2:	2200      	movs	r2, #0
 80073b4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80073b6:	f7fa feb3 	bl	8002120 <HAL_GetTick>
 80073ba:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80073bc:	e007      	b.n	80073ce <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80073be:	f7ff ff0b 	bl	80071d8 <BSP_SD_GetCardState>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d102      	bne.n	80073ce <SD_read+0x8a>
          {
            res = RES_OK;
 80073c8:	2300      	movs	r3, #0
 80073ca:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80073cc:	e008      	b.n	80073e0 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80073ce:	f7fa fea7 	bl	8002120 <HAL_GetTick>
 80073d2:	4602      	mov	r2, r0
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	f247 522f 	movw	r2, #29999	; 0x752f
 80073dc:	4293      	cmp	r3, r2
 80073de:	d9ee      	bls.n	80073be <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80073e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3718      	adds	r7, #24
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	200011e4 	.word	0x200011e4

080073f0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b086      	sub	sp, #24
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60b9      	str	r1, [r7, #8]
 80073f8:	607a      	str	r2, [r7, #4]
 80073fa:	603b      	str	r3, [r7, #0]
 80073fc:	4603      	mov	r3, r0
 80073fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8007404:	4b24      	ldr	r3, [pc, #144]	; (8007498 <SD_write+0xa8>)
 8007406:	2200      	movs	r2, #0
 8007408:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800740a:	f247 5030 	movw	r0, #30000	; 0x7530
 800740e:	f7ff ff33 	bl	8007278 <SD_CheckStatusWithTimeout>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	da01      	bge.n	800741c <SD_write+0x2c>
  {
    return res;
 8007418:	7dfb      	ldrb	r3, [r7, #23]
 800741a:	e038      	b.n	800748e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800741c:	683a      	ldr	r2, [r7, #0]
 800741e:	6879      	ldr	r1, [r7, #4]
 8007420:	68b8      	ldr	r0, [r7, #8]
 8007422:	f7ff febf 	bl	80071a4 <BSP_SD_WriteBlocks_DMA>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d12f      	bne.n	800748c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800742c:	f7fa fe78 	bl	8002120 <HAL_GetTick>
 8007430:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8007432:	bf00      	nop
 8007434:	4b18      	ldr	r3, [pc, #96]	; (8007498 <SD_write+0xa8>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d108      	bne.n	800744e <SD_write+0x5e>
 800743c:	f7fa fe70 	bl	8002120 <HAL_GetTick>
 8007440:	4602      	mov	r2, r0
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	1ad3      	subs	r3, r2, r3
 8007446:	f247 522f 	movw	r2, #29999	; 0x752f
 800744a:	4293      	cmp	r3, r2
 800744c:	d9f2      	bls.n	8007434 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800744e:	4b12      	ldr	r3, [pc, #72]	; (8007498 <SD_write+0xa8>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d102      	bne.n	800745c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	75fb      	strb	r3, [r7, #23]
 800745a:	e017      	b.n	800748c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800745c:	4b0e      	ldr	r3, [pc, #56]	; (8007498 <SD_write+0xa8>)
 800745e:	2200      	movs	r2, #0
 8007460:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8007462:	f7fa fe5d 	bl	8002120 <HAL_GetTick>
 8007466:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007468:	e007      	b.n	800747a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800746a:	f7ff feb5 	bl	80071d8 <BSP_SD_GetCardState>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d102      	bne.n	800747a <SD_write+0x8a>
          {
            res = RES_OK;
 8007474:	2300      	movs	r3, #0
 8007476:	75fb      	strb	r3, [r7, #23]
            break;
 8007478:	e008      	b.n	800748c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800747a:	f7fa fe51 	bl	8002120 <HAL_GetTick>
 800747e:	4602      	mov	r2, r0
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	1ad3      	subs	r3, r2, r3
 8007484:	f247 522f 	movw	r2, #29999	; 0x752f
 8007488:	4293      	cmp	r3, r2
 800748a:	d9ee      	bls.n	800746a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800748c:	7dfb      	ldrb	r3, [r7, #23]
}
 800748e:	4618      	mov	r0, r3
 8007490:	3718      	adds	r7, #24
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	200011e0 	.word	0x200011e0

0800749c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b08c      	sub	sp, #48	; 0x30
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	4603      	mov	r3, r0
 80074a4:	603a      	str	r2, [r7, #0]
 80074a6:	71fb      	strb	r3, [r7, #7]
 80074a8:	460b      	mov	r3, r1
 80074aa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80074b2:	4b25      	ldr	r3, [pc, #148]	; (8007548 <SD_ioctl+0xac>)
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	f003 0301 	and.w	r3, r3, #1
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d001      	beq.n	80074c4 <SD_ioctl+0x28>
 80074c0:	2303      	movs	r3, #3
 80074c2:	e03c      	b.n	800753e <SD_ioctl+0xa2>

  switch (cmd)
 80074c4:	79bb      	ldrb	r3, [r7, #6]
 80074c6:	2b03      	cmp	r3, #3
 80074c8:	d834      	bhi.n	8007534 <SD_ioctl+0x98>
 80074ca:	a201      	add	r2, pc, #4	; (adr r2, 80074d0 <SD_ioctl+0x34>)
 80074cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d0:	080074e1 	.word	0x080074e1
 80074d4:	080074e9 	.word	0x080074e9
 80074d8:	08007501 	.word	0x08007501
 80074dc:	0800751b 	.word	0x0800751b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80074e0:	2300      	movs	r3, #0
 80074e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80074e6:	e028      	b.n	800753a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80074e8:	f107 030c 	add.w	r3, r7, #12
 80074ec:	4618      	mov	r0, r3
 80074ee:	f7ff fe83 	bl	80071f8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80074f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80074f8:	2300      	movs	r3, #0
 80074fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80074fe:	e01c      	b.n	800753a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007500:	f107 030c 	add.w	r3, r7, #12
 8007504:	4618      	mov	r0, r3
 8007506:	f7ff fe77 	bl	80071f8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800750a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750c:	b29a      	uxth	r2, r3
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8007512:	2300      	movs	r3, #0
 8007514:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007518:	e00f      	b.n	800753a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800751a:	f107 030c 	add.w	r3, r7, #12
 800751e:	4618      	mov	r0, r3
 8007520:	f7ff fe6a 	bl	80071f8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007526:	0a5a      	lsrs	r2, r3, #9
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800752c:	2300      	movs	r3, #0
 800752e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007532:	e002      	b.n	800753a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007534:	2304      	movs	r3, #4
 8007536:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800753a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800753e:	4618      	mov	r0, r3
 8007540:	3730      	adds	r7, #48	; 0x30
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	20000141 	.word	0x20000141

0800754c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800754c:	b480      	push	{r7}
 800754e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8007550:	4b03      	ldr	r3, [pc, #12]	; (8007560 <BSP_SD_WriteCpltCallback+0x14>)
 8007552:	2201      	movs	r2, #1
 8007554:	601a      	str	r2, [r3, #0]
}
 8007556:	bf00      	nop
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr
 8007560:	200011e0 	.word	0x200011e0

08007564 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8007564:	b480      	push	{r7}
 8007566:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8007568:	4b03      	ldr	r3, [pc, #12]	; (8007578 <BSP_SD_ReadCpltCallback+0x14>)
 800756a:	2201      	movs	r2, #1
 800756c:	601a      	str	r2, [r3, #0]
}
 800756e:	bf00      	nop
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr
 8007578:	200011e4 	.word	0x200011e4

0800757c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8007582:	4b8d      	ldr	r3, [pc, #564]	; (80077b8 <MX_LWIP_Init+0x23c>)
 8007584:	22c0      	movs	r2, #192	; 0xc0
 8007586:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8007588:	4b8b      	ldr	r3, [pc, #556]	; (80077b8 <MX_LWIP_Init+0x23c>)
 800758a:	22a8      	movs	r2, #168	; 0xa8
 800758c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 18;
 800758e:	4b8a      	ldr	r3, [pc, #552]	; (80077b8 <MX_LWIP_Init+0x23c>)
 8007590:	2212      	movs	r2, #18
 8007592:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 125;
 8007594:	4b88      	ldr	r3, [pc, #544]	; (80077b8 <MX_LWIP_Init+0x23c>)
 8007596:	227d      	movs	r2, #125	; 0x7d
 8007598:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800759a:	4b88      	ldr	r3, [pc, #544]	; (80077bc <MX_LWIP_Init+0x240>)
 800759c:	22ff      	movs	r2, #255	; 0xff
 800759e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80075a0:	4b86      	ldr	r3, [pc, #536]	; (80077bc <MX_LWIP_Init+0x240>)
 80075a2:	22ff      	movs	r2, #255	; 0xff
 80075a4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80075a6:	4b85      	ldr	r3, [pc, #532]	; (80077bc <MX_LWIP_Init+0x240>)
 80075a8:	22ff      	movs	r2, #255	; 0xff
 80075aa:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80075ac:	4b83      	ldr	r3, [pc, #524]	; (80077bc <MX_LWIP_Init+0x240>)
 80075ae:	2200      	movs	r2, #0
 80075b0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80075b2:	4b83      	ldr	r3, [pc, #524]	; (80077c0 <MX_LWIP_Init+0x244>)
 80075b4:	22c0      	movs	r2, #192	; 0xc0
 80075b6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80075b8:	4b81      	ldr	r3, [pc, #516]	; (80077c0 <MX_LWIP_Init+0x244>)
 80075ba:	22a8      	movs	r2, #168	; 0xa8
 80075bc:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 18;
 80075be:	4b80      	ldr	r3, [pc, #512]	; (80077c0 <MX_LWIP_Init+0x244>)
 80075c0:	2212      	movs	r2, #18
 80075c2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80075c4:	4b7e      	ldr	r3, [pc, #504]	; (80077c0 <MX_LWIP_Init+0x244>)
 80075c6:	2201      	movs	r2, #1
 80075c8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80075ca:	f005 f97f 	bl	800c8cc <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80075ce:	4b7a      	ldr	r3, [pc, #488]	; (80077b8 <MX_LWIP_Init+0x23c>)
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	061a      	lsls	r2, r3, #24
 80075d4:	4b78      	ldr	r3, [pc, #480]	; (80077b8 <MX_LWIP_Init+0x23c>)
 80075d6:	785b      	ldrb	r3, [r3, #1]
 80075d8:	041b      	lsls	r3, r3, #16
 80075da:	431a      	orrs	r2, r3
 80075dc:	4b76      	ldr	r3, [pc, #472]	; (80077b8 <MX_LWIP_Init+0x23c>)
 80075de:	789b      	ldrb	r3, [r3, #2]
 80075e0:	021b      	lsls	r3, r3, #8
 80075e2:	4313      	orrs	r3, r2
 80075e4:	4a74      	ldr	r2, [pc, #464]	; (80077b8 <MX_LWIP_Init+0x23c>)
 80075e6:	78d2      	ldrb	r2, [r2, #3]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	061a      	lsls	r2, r3, #24
 80075ec:	4b72      	ldr	r3, [pc, #456]	; (80077b8 <MX_LWIP_Init+0x23c>)
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	0619      	lsls	r1, r3, #24
 80075f2:	4b71      	ldr	r3, [pc, #452]	; (80077b8 <MX_LWIP_Init+0x23c>)
 80075f4:	785b      	ldrb	r3, [r3, #1]
 80075f6:	041b      	lsls	r3, r3, #16
 80075f8:	4319      	orrs	r1, r3
 80075fa:	4b6f      	ldr	r3, [pc, #444]	; (80077b8 <MX_LWIP_Init+0x23c>)
 80075fc:	789b      	ldrb	r3, [r3, #2]
 80075fe:	021b      	lsls	r3, r3, #8
 8007600:	430b      	orrs	r3, r1
 8007602:	496d      	ldr	r1, [pc, #436]	; (80077b8 <MX_LWIP_Init+0x23c>)
 8007604:	78c9      	ldrb	r1, [r1, #3]
 8007606:	430b      	orrs	r3, r1
 8007608:	021b      	lsls	r3, r3, #8
 800760a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800760e:	431a      	orrs	r2, r3
 8007610:	4b69      	ldr	r3, [pc, #420]	; (80077b8 <MX_LWIP_Init+0x23c>)
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	0619      	lsls	r1, r3, #24
 8007616:	4b68      	ldr	r3, [pc, #416]	; (80077b8 <MX_LWIP_Init+0x23c>)
 8007618:	785b      	ldrb	r3, [r3, #1]
 800761a:	041b      	lsls	r3, r3, #16
 800761c:	4319      	orrs	r1, r3
 800761e:	4b66      	ldr	r3, [pc, #408]	; (80077b8 <MX_LWIP_Init+0x23c>)
 8007620:	789b      	ldrb	r3, [r3, #2]
 8007622:	021b      	lsls	r3, r3, #8
 8007624:	430b      	orrs	r3, r1
 8007626:	4964      	ldr	r1, [pc, #400]	; (80077b8 <MX_LWIP_Init+0x23c>)
 8007628:	78c9      	ldrb	r1, [r1, #3]
 800762a:	430b      	orrs	r3, r1
 800762c:	0a1b      	lsrs	r3, r3, #8
 800762e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007632:	431a      	orrs	r2, r3
 8007634:	4b60      	ldr	r3, [pc, #384]	; (80077b8 <MX_LWIP_Init+0x23c>)
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	0619      	lsls	r1, r3, #24
 800763a:	4b5f      	ldr	r3, [pc, #380]	; (80077b8 <MX_LWIP_Init+0x23c>)
 800763c:	785b      	ldrb	r3, [r3, #1]
 800763e:	041b      	lsls	r3, r3, #16
 8007640:	4319      	orrs	r1, r3
 8007642:	4b5d      	ldr	r3, [pc, #372]	; (80077b8 <MX_LWIP_Init+0x23c>)
 8007644:	789b      	ldrb	r3, [r3, #2]
 8007646:	021b      	lsls	r3, r3, #8
 8007648:	430b      	orrs	r3, r1
 800764a:	495b      	ldr	r1, [pc, #364]	; (80077b8 <MX_LWIP_Init+0x23c>)
 800764c:	78c9      	ldrb	r1, [r1, #3]
 800764e:	430b      	orrs	r3, r1
 8007650:	0e1b      	lsrs	r3, r3, #24
 8007652:	4313      	orrs	r3, r2
 8007654:	4a5b      	ldr	r2, [pc, #364]	; (80077c4 <MX_LWIP_Init+0x248>)
 8007656:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007658:	4b58      	ldr	r3, [pc, #352]	; (80077bc <MX_LWIP_Init+0x240>)
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	061a      	lsls	r2, r3, #24
 800765e:	4b57      	ldr	r3, [pc, #348]	; (80077bc <MX_LWIP_Init+0x240>)
 8007660:	785b      	ldrb	r3, [r3, #1]
 8007662:	041b      	lsls	r3, r3, #16
 8007664:	431a      	orrs	r2, r3
 8007666:	4b55      	ldr	r3, [pc, #340]	; (80077bc <MX_LWIP_Init+0x240>)
 8007668:	789b      	ldrb	r3, [r3, #2]
 800766a:	021b      	lsls	r3, r3, #8
 800766c:	4313      	orrs	r3, r2
 800766e:	4a53      	ldr	r2, [pc, #332]	; (80077bc <MX_LWIP_Init+0x240>)
 8007670:	78d2      	ldrb	r2, [r2, #3]
 8007672:	4313      	orrs	r3, r2
 8007674:	061a      	lsls	r2, r3, #24
 8007676:	4b51      	ldr	r3, [pc, #324]	; (80077bc <MX_LWIP_Init+0x240>)
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	0619      	lsls	r1, r3, #24
 800767c:	4b4f      	ldr	r3, [pc, #316]	; (80077bc <MX_LWIP_Init+0x240>)
 800767e:	785b      	ldrb	r3, [r3, #1]
 8007680:	041b      	lsls	r3, r3, #16
 8007682:	4319      	orrs	r1, r3
 8007684:	4b4d      	ldr	r3, [pc, #308]	; (80077bc <MX_LWIP_Init+0x240>)
 8007686:	789b      	ldrb	r3, [r3, #2]
 8007688:	021b      	lsls	r3, r3, #8
 800768a:	430b      	orrs	r3, r1
 800768c:	494b      	ldr	r1, [pc, #300]	; (80077bc <MX_LWIP_Init+0x240>)
 800768e:	78c9      	ldrb	r1, [r1, #3]
 8007690:	430b      	orrs	r3, r1
 8007692:	021b      	lsls	r3, r3, #8
 8007694:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007698:	431a      	orrs	r2, r3
 800769a:	4b48      	ldr	r3, [pc, #288]	; (80077bc <MX_LWIP_Init+0x240>)
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	0619      	lsls	r1, r3, #24
 80076a0:	4b46      	ldr	r3, [pc, #280]	; (80077bc <MX_LWIP_Init+0x240>)
 80076a2:	785b      	ldrb	r3, [r3, #1]
 80076a4:	041b      	lsls	r3, r3, #16
 80076a6:	4319      	orrs	r1, r3
 80076a8:	4b44      	ldr	r3, [pc, #272]	; (80077bc <MX_LWIP_Init+0x240>)
 80076aa:	789b      	ldrb	r3, [r3, #2]
 80076ac:	021b      	lsls	r3, r3, #8
 80076ae:	430b      	orrs	r3, r1
 80076b0:	4942      	ldr	r1, [pc, #264]	; (80077bc <MX_LWIP_Init+0x240>)
 80076b2:	78c9      	ldrb	r1, [r1, #3]
 80076b4:	430b      	orrs	r3, r1
 80076b6:	0a1b      	lsrs	r3, r3, #8
 80076b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80076bc:	431a      	orrs	r2, r3
 80076be:	4b3f      	ldr	r3, [pc, #252]	; (80077bc <MX_LWIP_Init+0x240>)
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	0619      	lsls	r1, r3, #24
 80076c4:	4b3d      	ldr	r3, [pc, #244]	; (80077bc <MX_LWIP_Init+0x240>)
 80076c6:	785b      	ldrb	r3, [r3, #1]
 80076c8:	041b      	lsls	r3, r3, #16
 80076ca:	4319      	orrs	r1, r3
 80076cc:	4b3b      	ldr	r3, [pc, #236]	; (80077bc <MX_LWIP_Init+0x240>)
 80076ce:	789b      	ldrb	r3, [r3, #2]
 80076d0:	021b      	lsls	r3, r3, #8
 80076d2:	430b      	orrs	r3, r1
 80076d4:	4939      	ldr	r1, [pc, #228]	; (80077bc <MX_LWIP_Init+0x240>)
 80076d6:	78c9      	ldrb	r1, [r1, #3]
 80076d8:	430b      	orrs	r3, r1
 80076da:	0e1b      	lsrs	r3, r3, #24
 80076dc:	4313      	orrs	r3, r2
 80076de:	4a3a      	ldr	r2, [pc, #232]	; (80077c8 <MX_LWIP_Init+0x24c>)
 80076e0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80076e2:	4b37      	ldr	r3, [pc, #220]	; (80077c0 <MX_LWIP_Init+0x244>)
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	061a      	lsls	r2, r3, #24
 80076e8:	4b35      	ldr	r3, [pc, #212]	; (80077c0 <MX_LWIP_Init+0x244>)
 80076ea:	785b      	ldrb	r3, [r3, #1]
 80076ec:	041b      	lsls	r3, r3, #16
 80076ee:	431a      	orrs	r2, r3
 80076f0:	4b33      	ldr	r3, [pc, #204]	; (80077c0 <MX_LWIP_Init+0x244>)
 80076f2:	789b      	ldrb	r3, [r3, #2]
 80076f4:	021b      	lsls	r3, r3, #8
 80076f6:	4313      	orrs	r3, r2
 80076f8:	4a31      	ldr	r2, [pc, #196]	; (80077c0 <MX_LWIP_Init+0x244>)
 80076fa:	78d2      	ldrb	r2, [r2, #3]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	061a      	lsls	r2, r3, #24
 8007700:	4b2f      	ldr	r3, [pc, #188]	; (80077c0 <MX_LWIP_Init+0x244>)
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	0619      	lsls	r1, r3, #24
 8007706:	4b2e      	ldr	r3, [pc, #184]	; (80077c0 <MX_LWIP_Init+0x244>)
 8007708:	785b      	ldrb	r3, [r3, #1]
 800770a:	041b      	lsls	r3, r3, #16
 800770c:	4319      	orrs	r1, r3
 800770e:	4b2c      	ldr	r3, [pc, #176]	; (80077c0 <MX_LWIP_Init+0x244>)
 8007710:	789b      	ldrb	r3, [r3, #2]
 8007712:	021b      	lsls	r3, r3, #8
 8007714:	430b      	orrs	r3, r1
 8007716:	492a      	ldr	r1, [pc, #168]	; (80077c0 <MX_LWIP_Init+0x244>)
 8007718:	78c9      	ldrb	r1, [r1, #3]
 800771a:	430b      	orrs	r3, r1
 800771c:	021b      	lsls	r3, r3, #8
 800771e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007722:	431a      	orrs	r2, r3
 8007724:	4b26      	ldr	r3, [pc, #152]	; (80077c0 <MX_LWIP_Init+0x244>)
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	0619      	lsls	r1, r3, #24
 800772a:	4b25      	ldr	r3, [pc, #148]	; (80077c0 <MX_LWIP_Init+0x244>)
 800772c:	785b      	ldrb	r3, [r3, #1]
 800772e:	041b      	lsls	r3, r3, #16
 8007730:	4319      	orrs	r1, r3
 8007732:	4b23      	ldr	r3, [pc, #140]	; (80077c0 <MX_LWIP_Init+0x244>)
 8007734:	789b      	ldrb	r3, [r3, #2]
 8007736:	021b      	lsls	r3, r3, #8
 8007738:	430b      	orrs	r3, r1
 800773a:	4921      	ldr	r1, [pc, #132]	; (80077c0 <MX_LWIP_Init+0x244>)
 800773c:	78c9      	ldrb	r1, [r1, #3]
 800773e:	430b      	orrs	r3, r1
 8007740:	0a1b      	lsrs	r3, r3, #8
 8007742:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007746:	431a      	orrs	r2, r3
 8007748:	4b1d      	ldr	r3, [pc, #116]	; (80077c0 <MX_LWIP_Init+0x244>)
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	0619      	lsls	r1, r3, #24
 800774e:	4b1c      	ldr	r3, [pc, #112]	; (80077c0 <MX_LWIP_Init+0x244>)
 8007750:	785b      	ldrb	r3, [r3, #1]
 8007752:	041b      	lsls	r3, r3, #16
 8007754:	4319      	orrs	r1, r3
 8007756:	4b1a      	ldr	r3, [pc, #104]	; (80077c0 <MX_LWIP_Init+0x244>)
 8007758:	789b      	ldrb	r3, [r3, #2]
 800775a:	021b      	lsls	r3, r3, #8
 800775c:	430b      	orrs	r3, r1
 800775e:	4918      	ldr	r1, [pc, #96]	; (80077c0 <MX_LWIP_Init+0x244>)
 8007760:	78c9      	ldrb	r1, [r1, #3]
 8007762:	430b      	orrs	r3, r1
 8007764:	0e1b      	lsrs	r3, r3, #24
 8007766:	4313      	orrs	r3, r2
 8007768:	4a18      	ldr	r2, [pc, #96]	; (80077cc <MX_LWIP_Init+0x250>)
 800776a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800776c:	4b18      	ldr	r3, [pc, #96]	; (80077d0 <MX_LWIP_Init+0x254>)
 800776e:	9302      	str	r3, [sp, #8]
 8007770:	4b18      	ldr	r3, [pc, #96]	; (80077d4 <MX_LWIP_Init+0x258>)
 8007772:	9301      	str	r3, [sp, #4]
 8007774:	2300      	movs	r3, #0
 8007776:	9300      	str	r3, [sp, #0]
 8007778:	4b14      	ldr	r3, [pc, #80]	; (80077cc <MX_LWIP_Init+0x250>)
 800777a:	4a13      	ldr	r2, [pc, #76]	; (80077c8 <MX_LWIP_Init+0x24c>)
 800777c:	4911      	ldr	r1, [pc, #68]	; (80077c4 <MX_LWIP_Init+0x248>)
 800777e:	4816      	ldr	r0, [pc, #88]	; (80077d8 <MX_LWIP_Init+0x25c>)
 8007780:	f005 fd4a 	bl	800d218 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007784:	4814      	ldr	r0, [pc, #80]	; (80077d8 <MX_LWIP_Init+0x25c>)
 8007786:	f005 fef9 	bl	800d57c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800778a:	4b13      	ldr	r3, [pc, #76]	; (80077d8 <MX_LWIP_Init+0x25c>)
 800778c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007790:	089b      	lsrs	r3, r3, #2
 8007792:	f003 0301 	and.w	r3, r3, #1
 8007796:	b2db      	uxtb	r3, r3
 8007798:	2b00      	cmp	r3, #0
 800779a:	d003      	beq.n	80077a4 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800779c:	480e      	ldr	r0, [pc, #56]	; (80077d8 <MX_LWIP_Init+0x25c>)
 800779e:	f005 fefd 	bl	800d59c <netif_set_up>
 80077a2:	e002      	b.n	80077aa <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80077a4:	480c      	ldr	r0, [pc, #48]	; (80077d8 <MX_LWIP_Init+0x25c>)
 80077a6:	f005 ff65 	bl	800d674 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80077aa:	490c      	ldr	r1, [pc, #48]	; (80077dc <MX_LWIP_Init+0x260>)
 80077ac:	480a      	ldr	r0, [pc, #40]	; (80077d8 <MX_LWIP_Init+0x25c>)
 80077ae:	f005 ff93 	bl	800d6d8 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80077b2:	bf00      	nop
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	2000a6c4 	.word	0x2000a6c4
 80077bc:	2000a6c0 	.word	0x2000a6c0
 80077c0:	2000a6b8 	.word	0x2000a6b8
 80077c4:	2000a6bc 	.word	0x2000a6bc
 80077c8:	2000a6c8 	.word	0x2000a6c8
 80077cc:	2000a6cc 	.word	0x2000a6cc
 80077d0:	08016d7d 	.word	0x08016d7d
 80077d4:	08007d6d 	.word	0x08007d6d
 80077d8:	20005984 	.word	0x20005984
 80077dc:	08007dd9 	.word	0x08007dd9

080077e0 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b08e      	sub	sp, #56	; 0x38
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077ec:	2200      	movs	r2, #0
 80077ee:	601a      	str	r2, [r3, #0]
 80077f0:	605a      	str	r2, [r3, #4]
 80077f2:	609a      	str	r2, [r3, #8]
 80077f4:	60da      	str	r2, [r3, #12]
 80077f6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a46      	ldr	r2, [pc, #280]	; (8007918 <HAL_ETH_MspInit+0x138>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	f040 8085 	bne.w	800790e <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8007804:	2300      	movs	r3, #0
 8007806:	623b      	str	r3, [r7, #32]
 8007808:	4b44      	ldr	r3, [pc, #272]	; (800791c <HAL_ETH_MspInit+0x13c>)
 800780a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800780c:	4a43      	ldr	r2, [pc, #268]	; (800791c <HAL_ETH_MspInit+0x13c>)
 800780e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007812:	6313      	str	r3, [r2, #48]	; 0x30
 8007814:	4b41      	ldr	r3, [pc, #260]	; (800791c <HAL_ETH_MspInit+0x13c>)
 8007816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800781c:	623b      	str	r3, [r7, #32]
 800781e:	6a3b      	ldr	r3, [r7, #32]
 8007820:	2300      	movs	r3, #0
 8007822:	61fb      	str	r3, [r7, #28]
 8007824:	4b3d      	ldr	r3, [pc, #244]	; (800791c <HAL_ETH_MspInit+0x13c>)
 8007826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007828:	4a3c      	ldr	r2, [pc, #240]	; (800791c <HAL_ETH_MspInit+0x13c>)
 800782a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800782e:	6313      	str	r3, [r2, #48]	; 0x30
 8007830:	4b3a      	ldr	r3, [pc, #232]	; (800791c <HAL_ETH_MspInit+0x13c>)
 8007832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007834:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007838:	61fb      	str	r3, [r7, #28]
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	2300      	movs	r3, #0
 800783e:	61bb      	str	r3, [r7, #24]
 8007840:	4b36      	ldr	r3, [pc, #216]	; (800791c <HAL_ETH_MspInit+0x13c>)
 8007842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007844:	4a35      	ldr	r2, [pc, #212]	; (800791c <HAL_ETH_MspInit+0x13c>)
 8007846:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800784a:	6313      	str	r3, [r2, #48]	; 0x30
 800784c:	4b33      	ldr	r3, [pc, #204]	; (800791c <HAL_ETH_MspInit+0x13c>)
 800784e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007850:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007854:	61bb      	str	r3, [r7, #24]
 8007856:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007858:	2300      	movs	r3, #0
 800785a:	617b      	str	r3, [r7, #20]
 800785c:	4b2f      	ldr	r3, [pc, #188]	; (800791c <HAL_ETH_MspInit+0x13c>)
 800785e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007860:	4a2e      	ldr	r2, [pc, #184]	; (800791c <HAL_ETH_MspInit+0x13c>)
 8007862:	f043 0304 	orr.w	r3, r3, #4
 8007866:	6313      	str	r3, [r2, #48]	; 0x30
 8007868:	4b2c      	ldr	r3, [pc, #176]	; (800791c <HAL_ETH_MspInit+0x13c>)
 800786a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800786c:	f003 0304 	and.w	r3, r3, #4
 8007870:	617b      	str	r3, [r7, #20]
 8007872:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007874:	2300      	movs	r3, #0
 8007876:	613b      	str	r3, [r7, #16]
 8007878:	4b28      	ldr	r3, [pc, #160]	; (800791c <HAL_ETH_MspInit+0x13c>)
 800787a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800787c:	4a27      	ldr	r2, [pc, #156]	; (800791c <HAL_ETH_MspInit+0x13c>)
 800787e:	f043 0301 	orr.w	r3, r3, #1
 8007882:	6313      	str	r3, [r2, #48]	; 0x30
 8007884:	4b25      	ldr	r3, [pc, #148]	; (800791c <HAL_ETH_MspInit+0x13c>)
 8007886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007888:	f003 0301 	and.w	r3, r3, #1
 800788c:	613b      	str	r3, [r7, #16]
 800788e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007890:	2300      	movs	r3, #0
 8007892:	60fb      	str	r3, [r7, #12]
 8007894:	4b21      	ldr	r3, [pc, #132]	; (800791c <HAL_ETH_MspInit+0x13c>)
 8007896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007898:	4a20      	ldr	r2, [pc, #128]	; (800791c <HAL_ETH_MspInit+0x13c>)
 800789a:	f043 0302 	orr.w	r3, r3, #2
 800789e:	6313      	str	r3, [r2, #48]	; 0x30
 80078a0:	4b1e      	ldr	r3, [pc, #120]	; (800791c <HAL_ETH_MspInit+0x13c>)
 80078a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a4:	f003 0302 	and.w	r3, r3, #2
 80078a8:	60fb      	str	r3, [r7, #12]
 80078aa:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80078ac:	2332      	movs	r3, #50	; 0x32
 80078ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078b0:	2302      	movs	r3, #2
 80078b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078b4:	2300      	movs	r3, #0
 80078b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078b8:	2303      	movs	r3, #3
 80078ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80078bc:	230b      	movs	r3, #11
 80078be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80078c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078c4:	4619      	mov	r1, r3
 80078c6:	4816      	ldr	r0, [pc, #88]	; (8007920 <HAL_ETH_MspInit+0x140>)
 80078c8:	f7fc fa30 	bl	8003d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80078cc:	2386      	movs	r3, #134	; 0x86
 80078ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078d0:	2302      	movs	r3, #2
 80078d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078d4:	2300      	movs	r3, #0
 80078d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078d8:	2303      	movs	r3, #3
 80078da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80078dc:	230b      	movs	r3, #11
 80078de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078e4:	4619      	mov	r1, r3
 80078e6:	480f      	ldr	r0, [pc, #60]	; (8007924 <HAL_ETH_MspInit+0x144>)
 80078e8:	f7fc fa20 	bl	8003d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80078ec:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80078f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078f2:	2302      	movs	r3, #2
 80078f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078f6:	2300      	movs	r3, #0
 80078f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078fa:	2303      	movs	r3, #3
 80078fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80078fe:	230b      	movs	r3, #11
 8007900:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007906:	4619      	mov	r1, r3
 8007908:	4807      	ldr	r0, [pc, #28]	; (8007928 <HAL_ETH_MspInit+0x148>)
 800790a:	f7fc fa0f 	bl	8003d2c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800790e:	bf00      	nop
 8007910:	3738      	adds	r7, #56	; 0x38
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	40028000 	.word	0x40028000
 800791c:	40023800 	.word	0x40023800
 8007920:	40020800 	.word	0x40020800
 8007924:	40020000 	.word	0x40020000
 8007928:	40020400 	.word	0x40020400

0800792c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b086      	sub	sp, #24
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8007934:	2300      	movs	r3, #0
 8007936:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007938:	4b4d      	ldr	r3, [pc, #308]	; (8007a70 <low_level_init+0x144>)
 800793a:	4a4e      	ldr	r2, [pc, #312]	; (8007a74 <low_level_init+0x148>)
 800793c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800793e:	4b4c      	ldr	r3, [pc, #304]	; (8007a70 <low_level_init+0x144>)
 8007940:	2201      	movs	r2, #1
 8007942:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8007944:	4b4a      	ldr	r3, [pc, #296]	; (8007a70 <low_level_init+0x144>)
 8007946:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800794a:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800794c:	4b48      	ldr	r3, [pc, #288]	; (8007a70 <low_level_init+0x144>)
 800794e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007952:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8007954:	4b46      	ldr	r3, [pc, #280]	; (8007a70 <low_level_init+0x144>)
 8007956:	2201      	movs	r2, #1
 8007958:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800795a:	2300      	movs	r3, #0
 800795c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800795e:	2380      	movs	r3, #128	; 0x80
 8007960:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8007962:	23e1      	movs	r3, #225	; 0xe1
 8007964:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8007966:	2300      	movs	r3, #0
 8007968:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800796a:	2300      	movs	r3, #0
 800796c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800796e:	2300      	movs	r3, #0
 8007970:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8007972:	4a3f      	ldr	r2, [pc, #252]	; (8007a70 <low_level_init+0x144>)
 8007974:	f107 0308 	add.w	r3, r7, #8
 8007978:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800797a:	4b3d      	ldr	r3, [pc, #244]	; (8007a70 <low_level_init+0x144>)
 800797c:	2200      	movs	r2, #0
 800797e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8007980:	4b3b      	ldr	r3, [pc, #236]	; (8007a70 <low_level_init+0x144>)
 8007982:	2200      	movs	r2, #0
 8007984:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8007986:	4b3a      	ldr	r3, [pc, #232]	; (8007a70 <low_level_init+0x144>)
 8007988:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800798c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800798e:	4838      	ldr	r0, [pc, #224]	; (8007a70 <low_level_init+0x144>)
 8007990:	f7fb f8a6 	bl	8002ae0 <HAL_ETH_Init>
 8007994:	4603      	mov	r3, r0
 8007996:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8007998:	7dfb      	ldrb	r3, [r7, #23]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d108      	bne.n	80079b0 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80079a4:	f043 0304 	orr.w	r3, r3, #4
 80079a8:	b2da      	uxtb	r2, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80079b0:	2304      	movs	r3, #4
 80079b2:	4a31      	ldr	r2, [pc, #196]	; (8007a78 <low_level_init+0x14c>)
 80079b4:	4931      	ldr	r1, [pc, #196]	; (8007a7c <low_level_init+0x150>)
 80079b6:	482e      	ldr	r0, [pc, #184]	; (8007a70 <low_level_init+0x144>)
 80079b8:	f7fb fa2e 	bl	8002e18 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80079bc:	2304      	movs	r3, #4
 80079be:	4a30      	ldr	r2, [pc, #192]	; (8007a80 <low_level_init+0x154>)
 80079c0:	4930      	ldr	r1, [pc, #192]	; (8007a84 <low_level_init+0x158>)
 80079c2:	482b      	ldr	r0, [pc, #172]	; (8007a70 <low_level_init+0x144>)
 80079c4:	f7fb fa91 	bl	8002eea <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2206      	movs	r2, #6
 80079cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80079d0:	4b27      	ldr	r3, [pc, #156]	; (8007a70 <low_level_init+0x144>)
 80079d2:	695b      	ldr	r3, [r3, #20]
 80079d4:	781a      	ldrb	r2, [r3, #0]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80079dc:	4b24      	ldr	r3, [pc, #144]	; (8007a70 <low_level_init+0x144>)
 80079de:	695b      	ldr	r3, [r3, #20]
 80079e0:	785a      	ldrb	r2, [r3, #1]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80079e8:	4b21      	ldr	r3, [pc, #132]	; (8007a70 <low_level_init+0x144>)
 80079ea:	695b      	ldr	r3, [r3, #20]
 80079ec:	789a      	ldrb	r2, [r3, #2]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80079f4:	4b1e      	ldr	r3, [pc, #120]	; (8007a70 <low_level_init+0x144>)
 80079f6:	695b      	ldr	r3, [r3, #20]
 80079f8:	78da      	ldrb	r2, [r3, #3]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007a00:	4b1b      	ldr	r3, [pc, #108]	; (8007a70 <low_level_init+0x144>)
 8007a02:	695b      	ldr	r3, [r3, #20]
 8007a04:	791a      	ldrb	r2, [r3, #4]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007a0c:	4b18      	ldr	r3, [pc, #96]	; (8007a70 <low_level_init+0x144>)
 8007a0e:	695b      	ldr	r3, [r3, #20]
 8007a10:	795a      	ldrb	r2, [r3, #5]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007a1e:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007a26:	f043 030a 	orr.w	r3, r3, #10
 8007a2a:	b2da      	uxtb	r2, r3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8007a32:	480f      	ldr	r0, [pc, #60]	; (8007a70 <low_level_init+0x144>)
 8007a34:	f7fb fd02 	bl	800343c <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8007a38:	f107 0310 	add.w	r3, r7, #16
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	211d      	movs	r1, #29
 8007a40:	480b      	ldr	r0, [pc, #44]	; (8007a70 <low_level_init+0x144>)
 8007a42:	f7fb fc2d 	bl	80032a0 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	f043 030b 	orr.w	r3, r3, #11
 8007a4c:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	461a      	mov	r2, r3
 8007a52:	211d      	movs	r1, #29
 8007a54:	4806      	ldr	r0, [pc, #24]	; (8007a70 <low_level_init+0x144>)
 8007a56:	f7fb fc8b 	bl	8003370 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8007a5a:	f107 0310 	add.w	r3, r7, #16
 8007a5e:	461a      	mov	r2, r3
 8007a60:	211d      	movs	r1, #29
 8007a62:	4803      	ldr	r0, [pc, #12]	; (8007a70 <low_level_init+0x144>)
 8007a64:	f7fb fc1c 	bl	80032a0 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8007a68:	bf00      	nop
 8007a6a:	3718      	adds	r7, #24
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	2000bfa0 	.word	0x2000bfa0
 8007a74:	40028000 	.word	0x40028000
 8007a78:	2000bfe8 	.word	0x2000bfe8
 8007a7c:	2000a6d0 	.word	0x2000a6d0
 8007a80:	2000a750 	.word	0x2000a750
 8007a84:	2000bf20 	.word	0x2000bf20

08007a88 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b08a      	sub	sp, #40	; 0x28
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8007a92:	4b4b      	ldr	r3, [pc, #300]	; (8007bc0 <low_level_output+0x138>)
 8007a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8007aaa:	4b45      	ldr	r3, [pc, #276]	; (8007bc0 <low_level_output+0x138>)
 8007aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aae:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	623b      	str	r3, [r7, #32]
 8007ab8:	e05a      	b.n	8007b70 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	da03      	bge.n	8007aca <low_level_output+0x42>
      {
        errval = ERR_USE;
 8007ac2:	23f8      	movs	r3, #248	; 0xf8
 8007ac4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8007ac8:	e05c      	b.n	8007b84 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8007aca:	6a3b      	ldr	r3, [r7, #32]
 8007acc:	895b      	ldrh	r3, [r3, #10]
 8007ace:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8007ad4:	e02f      	b.n	8007b36 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8007ad6:	69fa      	ldr	r2, [r7, #28]
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	18d0      	adds	r0, r2, r3
 8007adc:	6a3b      	ldr	r3, [r7, #32]
 8007ade:	685a      	ldr	r2, [r3, #4]
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	18d1      	adds	r1, r2, r3
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8007aea:	3304      	adds	r3, #4
 8007aec:	461a      	mov	r2, r3
 8007aee:	f00f fa51 	bl	8016f94 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007af8:	69bb      	ldr	r3, [r7, #24]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	da03      	bge.n	8007b08 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8007b00:	23f8      	movs	r3, #248	; 0xf8
 8007b02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8007b06:	e03d      	b.n	8007b84 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8007b0e:	693a      	ldr	r2, [r7, #16]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	4413      	add	r3, r2
 8007b14:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8007b18:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8007b1a:	68ba      	ldr	r2, [r7, #8]
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	1ad3      	subs	r3, r2, r3
 8007b20:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007b24:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8007b26:	697a      	ldr	r2, [r7, #20]
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	1ad3      	subs	r3, r2, r3
 8007b2c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007b30:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8007b32:	2300      	movs	r3, #0
 8007b34:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8007b36:	68fa      	ldr	r2, [r7, #12]
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d8c8      	bhi.n	8007ad6 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8007b44:	69fa      	ldr	r2, [r7, #28]
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	18d0      	adds	r0, r2, r3
 8007b4a:	6a3b      	ldr	r3, [r7, #32]
 8007b4c:	685a      	ldr	r2, [r3, #4]
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	4413      	add	r3, r2
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	4619      	mov	r1, r3
 8007b56:	f00f fa1d 	bl	8016f94 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8007b5a:	693a      	ldr	r2, [r7, #16]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	4413      	add	r3, r2
 8007b60:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8007b62:	697a      	ldr	r2, [r7, #20]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	4413      	add	r3, r2
 8007b68:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8007b6a:	6a3b      	ldr	r3, [r7, #32]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	623b      	str	r3, [r7, #32]
 8007b70:	6a3b      	ldr	r3, [r7, #32]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d1a1      	bne.n	8007aba <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8007b76:	6979      	ldr	r1, [r7, #20]
 8007b78:	4811      	ldr	r0, [pc, #68]	; (8007bc0 <low_level_output+0x138>)
 8007b7a:	f7fb fa23 	bl	8002fc4 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8007b84:	4b0e      	ldr	r3, [pc, #56]	; (8007bc0 <low_level_output+0x138>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b8c:	3314      	adds	r3, #20
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f003 0320 	and.w	r3, r3, #32
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00d      	beq.n	8007bb4 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8007b98:	4b09      	ldr	r3, [pc, #36]	; (8007bc0 <low_level_output+0x138>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ba0:	3314      	adds	r3, #20
 8007ba2:	2220      	movs	r2, #32
 8007ba4:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8007ba6:	4b06      	ldr	r3, [pc, #24]	; (8007bc0 <low_level_output+0x138>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bae:	3304      	adds	r3, #4
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8007bb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3728      	adds	r7, #40	; 0x28
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	2000bfa0 	.word	0x2000bfa0

08007bc4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b08c      	sub	sp, #48	; 0x30
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8007be0:	2300      	movs	r3, #0
 8007be2:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8007be4:	2300      	movs	r3, #0
 8007be6:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8007be8:	484f      	ldr	r0, [pc, #316]	; (8007d28 <low_level_input+0x164>)
 8007bea:	f7fb fad5 	bl	8003198 <HAL_ETH_GetReceivedFrame>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d001      	beq.n	8007bf8 <low_level_input+0x34>

    return NULL;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	e092      	b.n	8007d1e <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8007bf8:	4b4b      	ldr	r3, [pc, #300]	; (8007d28 <low_level_input+0x164>)
 8007bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bfc:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8007bfe:	4b4a      	ldr	r3, [pc, #296]	; (8007d28 <low_level_input+0x164>)
 8007c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c02:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8007c04:	89fb      	ldrh	r3, [r7, #14]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d007      	beq.n	8007c1a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8007c0a:	89fb      	ldrh	r3, [r7, #14]
 8007c0c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8007c10:	4619      	mov	r1, r3
 8007c12:	2000      	movs	r0, #0
 8007c14:	f005 fdfc 	bl	800d810 <pbuf_alloc>
 8007c18:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8007c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d04b      	beq.n	8007cb8 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8007c20:	4b41      	ldr	r3, [pc, #260]	; (8007d28 <low_level_input+0x164>)
 8007c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c24:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8007c26:	2300      	movs	r3, #0
 8007c28:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8007c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c2e:	e040      	b.n	8007cb2 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8007c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c32:	895b      	ldrh	r3, [r3, #10]
 8007c34:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8007c36:	2300      	movs	r3, #0
 8007c38:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8007c3a:	e021      	b.n	8007c80 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8007c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3e:	685a      	ldr	r2, [r3, #4]
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	18d0      	adds	r0, r2, r3
 8007c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	18d1      	adds	r1, r2, r3
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8007c50:	3304      	adds	r3, #4
 8007c52:	461a      	mov	r2, r3
 8007c54:	f00f f99e 	bl	8016f94 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8007c58:	6a3b      	ldr	r3, [r7, #32]
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8007c5e:	6a3b      	ldr	r3, [r7, #32]
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8007c64:	69fa      	ldr	r2, [r7, #28]
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	4413      	add	r3, r2
 8007c6a:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8007c6e:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8007c70:	69ba      	ldr	r2, [r7, #24]
 8007c72:	69fb      	ldr	r3, [r7, #28]
 8007c74:	1ad3      	subs	r3, r2, r3
 8007c76:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007c7a:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8007c80:	697a      	ldr	r2, [r7, #20]
 8007c82:	69fb      	ldr	r3, [r7, #28]
 8007c84:	4413      	add	r3, r2
 8007c86:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d8d6      	bhi.n	8007c3c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8007c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c90:	685a      	ldr	r2, [r3, #4]
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	18d0      	adds	r0, r2, r3
 8007c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	697a      	ldr	r2, [r7, #20]
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	f00f f978 	bl	8016f94 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8007ca4:	69fa      	ldr	r2, [r7, #28]
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	4413      	add	r3, r2
 8007caa:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8007cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d1bb      	bne.n	8007c30 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8007cb8:	4b1b      	ldr	r3, [pc, #108]	; (8007d28 <low_level_input+0x164>)
 8007cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cbc:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	613b      	str	r3, [r7, #16]
 8007cc2:	e00b      	b.n	8007cdc <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8007cc4:	6a3b      	ldr	r3, [r7, #32]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007ccc:	6a3b      	ldr	r3, [r7, #32]
 8007cce:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8007cd0:	6a3b      	ldr	r3, [r7, #32]
 8007cd2:	68db      	ldr	r3, [r3, #12]
 8007cd4:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	3301      	adds	r3, #1
 8007cda:	613b      	str	r3, [r7, #16]
 8007cdc:	4b12      	ldr	r3, [pc, #72]	; (8007d28 <low_level_input+0x164>)
 8007cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce0:	693a      	ldr	r2, [r7, #16]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d3ee      	bcc.n	8007cc4 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8007ce6:	4b10      	ldr	r3, [pc, #64]	; (8007d28 <low_level_input+0x164>)
 8007ce8:	2200      	movs	r2, #0
 8007cea:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8007cec:	4b0e      	ldr	r3, [pc, #56]	; (8007d28 <low_level_input+0x164>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cf4:	3314      	adds	r3, #20
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d00d      	beq.n	8007d1c <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8007d00:	4b09      	ldr	r3, [pc, #36]	; (8007d28 <low_level_input+0x164>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d08:	3314      	adds	r3, #20
 8007d0a:	2280      	movs	r2, #128	; 0x80
 8007d0c:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8007d0e:	4b06      	ldr	r3, [pc, #24]	; (8007d28 <low_level_input+0x164>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d16:	3308      	adds	r3, #8
 8007d18:	2200      	movs	r2, #0
 8007d1a:	601a      	str	r2, [r3, #0]
  }
  return p;
 8007d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3730      	adds	r7, #48	; 0x30
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	2000bfa0 	.word	0x2000bfa0

08007d2c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f7ff ff45 	bl	8007bc4 <low_level_input>
 8007d3a:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d010      	beq.n	8007d64 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	691b      	ldr	r3, [r3, #16]
 8007d46:	6879      	ldr	r1, [r7, #4]
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	4798      	blx	r3
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8007d50:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d006      	beq.n	8007d66 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8007d58:	68f8      	ldr	r0, [r7, #12]
 8007d5a:	f006 f83d 	bl	800ddd8 <pbuf_free>
    p = NULL;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	60fb      	str	r3, [r7, #12]
 8007d62:	e000      	b.n	8007d66 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8007d64:	bf00      	nop
  }
}
 8007d66:	3710      	adds	r7, #16
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d106      	bne.n	8007d88 <ethernetif_init+0x1c>
 8007d7a:	4b0e      	ldr	r3, [pc, #56]	; (8007db4 <ethernetif_init+0x48>)
 8007d7c:	f44f 7202 	mov.w	r2, #520	; 0x208
 8007d80:	490d      	ldr	r1, [pc, #52]	; (8007db8 <ethernetif_init+0x4c>)
 8007d82:	480e      	ldr	r0, [pc, #56]	; (8007dbc <ethernetif_init+0x50>)
 8007d84:	f00f f936 	bl	8016ff4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2273      	movs	r2, #115	; 0x73
 8007d8c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2274      	movs	r2, #116	; 0x74
 8007d94:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	4a09      	ldr	r2, [pc, #36]	; (8007dc0 <ethernetif_init+0x54>)
 8007d9c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4a08      	ldr	r2, [pc, #32]	; (8007dc4 <ethernetif_init+0x58>)
 8007da2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f7ff fdc1 	bl	800792c <low_level_init>

  return ERR_OK;
 8007daa:	2300      	movs	r3, #0
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3708      	adds	r7, #8
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	0801909c 	.word	0x0801909c
 8007db8:	080190b8 	.word	0x080190b8
 8007dbc:	080190c8 	.word	0x080190c8
 8007dc0:	08015241 	.word	0x08015241
 8007dc4:	08007a89 	.word	0x08007a89

08007dc8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007dcc:	f7fa f9a8 	bl	8002120 <HAL_GetTick>
 8007dd0:	4603      	mov	r3, r0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	bd80      	pop	{r7, pc}
	...

08007dd8 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b084      	sub	sp, #16
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8007de0:	2300      	movs	r3, #0
 8007de2:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8007de4:	2300      	movs	r3, #0
 8007de6:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007dee:	089b      	lsrs	r3, r3, #2
 8007df0:	f003 0301 	and.w	r3, r3, #1
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d05d      	beq.n	8007eb6 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8007dfa:	4b34      	ldr	r3, [pc, #208]	; (8007ecc <ethernetif_update_config+0xf4>)
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d03f      	beq.n	8007e82 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8007e02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007e06:	2100      	movs	r1, #0
 8007e08:	4830      	ldr	r0, [pc, #192]	; (8007ecc <ethernetif_update_config+0xf4>)
 8007e0a:	f7fb fab1 	bl	8003370 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8007e0e:	f7fa f987 	bl	8002120 <HAL_GetTick>
 8007e12:	4603      	mov	r3, r0
 8007e14:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8007e16:	f107 0308 	add.w	r3, r7, #8
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	2101      	movs	r1, #1
 8007e1e:	482b      	ldr	r0, [pc, #172]	; (8007ecc <ethernetif_update_config+0xf4>)
 8007e20:	f7fb fa3e 	bl	80032a0 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8007e24:	f7fa f97c 	bl	8002120 <HAL_GetTick>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	1ad3      	subs	r3, r2, r3
 8007e2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e32:	d828      	bhi.n	8007e86 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	f003 0320 	and.w	r3, r3, #32
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d0eb      	beq.n	8007e16 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8007e3e:	f107 0308 	add.w	r3, r7, #8
 8007e42:	461a      	mov	r2, r3
 8007e44:	2110      	movs	r1, #16
 8007e46:	4821      	ldr	r0, [pc, #132]	; (8007ecc <ethernetif_update_config+0xf4>)
 8007e48:	f7fb fa2a 	bl	80032a0 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	f003 0304 	and.w	r3, r3, #4
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d004      	beq.n	8007e60 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8007e56:	4b1d      	ldr	r3, [pc, #116]	; (8007ecc <ethernetif_update_config+0xf4>)
 8007e58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e5c:	60da      	str	r2, [r3, #12]
 8007e5e:	e002      	b.n	8007e66 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8007e60:	4b1a      	ldr	r3, [pc, #104]	; (8007ecc <ethernetif_update_config+0xf4>)
 8007e62:	2200      	movs	r2, #0
 8007e64:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	f003 0302 	and.w	r3, r3, #2
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d003      	beq.n	8007e78 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8007e70:	4b16      	ldr	r3, [pc, #88]	; (8007ecc <ethernetif_update_config+0xf4>)
 8007e72:	2200      	movs	r2, #0
 8007e74:	609a      	str	r2, [r3, #8]
 8007e76:	e016      	b.n	8007ea6 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8007e78:	4b14      	ldr	r3, [pc, #80]	; (8007ecc <ethernetif_update_config+0xf4>)
 8007e7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007e7e:	609a      	str	r2, [r3, #8]
 8007e80:	e011      	b.n	8007ea6 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8007e82:	bf00      	nop
 8007e84:	e000      	b.n	8007e88 <ethernetif_update_config+0xb0>
          goto error;
 8007e86:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8007e88:	4b10      	ldr	r3, [pc, #64]	; (8007ecc <ethernetif_update_config+0xf4>)
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	08db      	lsrs	r3, r3, #3
 8007e8e:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8007e90:	4b0e      	ldr	r3, [pc, #56]	; (8007ecc <ethernetif_update_config+0xf4>)
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	085b      	lsrs	r3, r3, #1
 8007e96:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	2100      	movs	r1, #0
 8007ea0:	480a      	ldr	r0, [pc, #40]	; (8007ecc <ethernetif_update_config+0xf4>)
 8007ea2:	f7fb fa65 	bl	8003370 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8007ea6:	2100      	movs	r1, #0
 8007ea8:	4808      	ldr	r0, [pc, #32]	; (8007ecc <ethernetif_update_config+0xf4>)
 8007eaa:	f7fb fb25 	bl	80034f8 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8007eae:	4807      	ldr	r0, [pc, #28]	; (8007ecc <ethernetif_update_config+0xf4>)
 8007eb0:	f7fb fac4 	bl	800343c <HAL_ETH_Start>
 8007eb4:	e002      	b.n	8007ebc <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8007eb6:	4805      	ldr	r0, [pc, #20]	; (8007ecc <ethernetif_update_config+0xf4>)
 8007eb8:	f7fb faef 	bl	800349a <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 f807 	bl	8007ed0 <ethernetif_notify_conn_changed>
}
 8007ec2:	bf00      	nop
 8007ec4:	3710      	adds	r7, #16
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
 8007eca:	bf00      	nop
 8007ecc:	2000bfa0 	.word	0x2000bfa0

08007ed0 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8007ed8:	bf00      	nop
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	4603      	mov	r3, r0
 8007eec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007eee:	79fb      	ldrb	r3, [r7, #7]
 8007ef0:	4a08      	ldr	r2, [pc, #32]	; (8007f14 <disk_status+0x30>)
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	4413      	add	r3, r2
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	79fa      	ldrb	r2, [r7, #7]
 8007efc:	4905      	ldr	r1, [pc, #20]	; (8007f14 <disk_status+0x30>)
 8007efe:	440a      	add	r2, r1
 8007f00:	7a12      	ldrb	r2, [r2, #8]
 8007f02:	4610      	mov	r0, r2
 8007f04:	4798      	blx	r3
 8007f06:	4603      	mov	r3, r0
 8007f08:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3710      	adds	r7, #16
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	20001210 	.word	0x20001210

08007f18 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	4603      	mov	r3, r0
 8007f20:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007f22:	2300      	movs	r3, #0
 8007f24:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007f26:	79fb      	ldrb	r3, [r7, #7]
 8007f28:	4a0d      	ldr	r2, [pc, #52]	; (8007f60 <disk_initialize+0x48>)
 8007f2a:	5cd3      	ldrb	r3, [r2, r3]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d111      	bne.n	8007f54 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007f30:	79fb      	ldrb	r3, [r7, #7]
 8007f32:	4a0b      	ldr	r2, [pc, #44]	; (8007f60 <disk_initialize+0x48>)
 8007f34:	2101      	movs	r1, #1
 8007f36:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007f38:	79fb      	ldrb	r3, [r7, #7]
 8007f3a:	4a09      	ldr	r2, [pc, #36]	; (8007f60 <disk_initialize+0x48>)
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	4413      	add	r3, r2
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	79fa      	ldrb	r2, [r7, #7]
 8007f46:	4906      	ldr	r1, [pc, #24]	; (8007f60 <disk_initialize+0x48>)
 8007f48:	440a      	add	r2, r1
 8007f4a:	7a12      	ldrb	r2, [r2, #8]
 8007f4c:	4610      	mov	r0, r2
 8007f4e:	4798      	blx	r3
 8007f50:	4603      	mov	r3, r0
 8007f52:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	20001210 	.word	0x20001210

08007f64 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007f64:	b590      	push	{r4, r7, lr}
 8007f66:	b087      	sub	sp, #28
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60b9      	str	r1, [r7, #8]
 8007f6c:	607a      	str	r2, [r7, #4]
 8007f6e:	603b      	str	r3, [r7, #0]
 8007f70:	4603      	mov	r3, r0
 8007f72:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007f74:	7bfb      	ldrb	r3, [r7, #15]
 8007f76:	4a0a      	ldr	r2, [pc, #40]	; (8007fa0 <disk_read+0x3c>)
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	4413      	add	r3, r2
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	689c      	ldr	r4, [r3, #8]
 8007f80:	7bfb      	ldrb	r3, [r7, #15]
 8007f82:	4a07      	ldr	r2, [pc, #28]	; (8007fa0 <disk_read+0x3c>)
 8007f84:	4413      	add	r3, r2
 8007f86:	7a18      	ldrb	r0, [r3, #8]
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	68b9      	ldr	r1, [r7, #8]
 8007f8e:	47a0      	blx	r4
 8007f90:	4603      	mov	r3, r0
 8007f92:	75fb      	strb	r3, [r7, #23]
  return res;
 8007f94:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	371c      	adds	r7, #28
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd90      	pop	{r4, r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	20001210 	.word	0x20001210

08007fa4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007fa4:	b590      	push	{r4, r7, lr}
 8007fa6:	b087      	sub	sp, #28
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60b9      	str	r1, [r7, #8]
 8007fac:	607a      	str	r2, [r7, #4]
 8007fae:	603b      	str	r3, [r7, #0]
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007fb4:	7bfb      	ldrb	r3, [r7, #15]
 8007fb6:	4a0a      	ldr	r2, [pc, #40]	; (8007fe0 <disk_write+0x3c>)
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	4413      	add	r3, r2
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	68dc      	ldr	r4, [r3, #12]
 8007fc0:	7bfb      	ldrb	r3, [r7, #15]
 8007fc2:	4a07      	ldr	r2, [pc, #28]	; (8007fe0 <disk_write+0x3c>)
 8007fc4:	4413      	add	r3, r2
 8007fc6:	7a18      	ldrb	r0, [r3, #8]
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	68b9      	ldr	r1, [r7, #8]
 8007fce:	47a0      	blx	r4
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	75fb      	strb	r3, [r7, #23]
  return res;
 8007fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	371c      	adds	r7, #28
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd90      	pop	{r4, r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	20001210 	.word	0x20001210

08007fe4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	4603      	mov	r3, r0
 8007fec:	603a      	str	r2, [r7, #0]
 8007fee:	71fb      	strb	r3, [r7, #7]
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007ff4:	79fb      	ldrb	r3, [r7, #7]
 8007ff6:	4a09      	ldr	r2, [pc, #36]	; (800801c <disk_ioctl+0x38>)
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	4413      	add	r3, r2
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	691b      	ldr	r3, [r3, #16]
 8008000:	79fa      	ldrb	r2, [r7, #7]
 8008002:	4906      	ldr	r1, [pc, #24]	; (800801c <disk_ioctl+0x38>)
 8008004:	440a      	add	r2, r1
 8008006:	7a10      	ldrb	r0, [r2, #8]
 8008008:	79b9      	ldrb	r1, [r7, #6]
 800800a:	683a      	ldr	r2, [r7, #0]
 800800c:	4798      	blx	r3
 800800e:	4603      	mov	r3, r0
 8008010:	73fb      	strb	r3, [r7, #15]
  return res;
 8008012:	7bfb      	ldrb	r3, [r7, #15]
}
 8008014:	4618      	mov	r0, r3
 8008016:	3710      	adds	r7, #16
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	20001210 	.word	0x20001210

08008020 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008020:	b480      	push	{r7}
 8008022:	b085      	sub	sp, #20
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	3301      	adds	r3, #1
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008030:	89fb      	ldrh	r3, [r7, #14]
 8008032:	021b      	lsls	r3, r3, #8
 8008034:	b21a      	sxth	r2, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	b21b      	sxth	r3, r3
 800803c:	4313      	orrs	r3, r2
 800803e:	b21b      	sxth	r3, r3
 8008040:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008042:	89fb      	ldrh	r3, [r7, #14]
}
 8008044:	4618      	mov	r0, r3
 8008046:	3714      	adds	r7, #20
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008050:	b480      	push	{r7}
 8008052:	b085      	sub	sp, #20
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	3303      	adds	r3, #3
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	021b      	lsls	r3, r3, #8
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	3202      	adds	r2, #2
 8008068:	7812      	ldrb	r2, [r2, #0]
 800806a:	4313      	orrs	r3, r2
 800806c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	021b      	lsls	r3, r3, #8
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	3201      	adds	r2, #1
 8008076:	7812      	ldrb	r2, [r2, #0]
 8008078:	4313      	orrs	r3, r2
 800807a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	021b      	lsls	r3, r3, #8
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	7812      	ldrb	r2, [r2, #0]
 8008084:	4313      	orrs	r3, r2
 8008086:	60fb      	str	r3, [r7, #12]
	return rv;
 8008088:	68fb      	ldr	r3, [r7, #12]
}
 800808a:	4618      	mov	r0, r3
 800808c:	3714      	adds	r7, #20
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr

08008096 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008096:	b480      	push	{r7}
 8008098:	b083      	sub	sp, #12
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
 800809e:	460b      	mov	r3, r1
 80080a0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	1c5a      	adds	r2, r3, #1
 80080a6:	607a      	str	r2, [r7, #4]
 80080a8:	887a      	ldrh	r2, [r7, #2]
 80080aa:	b2d2      	uxtb	r2, r2
 80080ac:	701a      	strb	r2, [r3, #0]
 80080ae:	887b      	ldrh	r3, [r7, #2]
 80080b0:	0a1b      	lsrs	r3, r3, #8
 80080b2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	1c5a      	adds	r2, r3, #1
 80080b8:	607a      	str	r2, [r7, #4]
 80080ba:	887a      	ldrh	r2, [r7, #2]
 80080bc:	b2d2      	uxtb	r2, r2
 80080be:	701a      	strb	r2, [r3, #0]
}
 80080c0:	bf00      	nop
 80080c2:	370c      	adds	r7, #12
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr

080080cc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	1c5a      	adds	r2, r3, #1
 80080da:	607a      	str	r2, [r7, #4]
 80080dc:	683a      	ldr	r2, [r7, #0]
 80080de:	b2d2      	uxtb	r2, r2
 80080e0:	701a      	strb	r2, [r3, #0]
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	0a1b      	lsrs	r3, r3, #8
 80080e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	1c5a      	adds	r2, r3, #1
 80080ec:	607a      	str	r2, [r7, #4]
 80080ee:	683a      	ldr	r2, [r7, #0]
 80080f0:	b2d2      	uxtb	r2, r2
 80080f2:	701a      	strb	r2, [r3, #0]
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	0a1b      	lsrs	r3, r3, #8
 80080f8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	1c5a      	adds	r2, r3, #1
 80080fe:	607a      	str	r2, [r7, #4]
 8008100:	683a      	ldr	r2, [r7, #0]
 8008102:	b2d2      	uxtb	r2, r2
 8008104:	701a      	strb	r2, [r3, #0]
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	0a1b      	lsrs	r3, r3, #8
 800810a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	1c5a      	adds	r2, r3, #1
 8008110:	607a      	str	r2, [r7, #4]
 8008112:	683a      	ldr	r2, [r7, #0]
 8008114:	b2d2      	uxtb	r2, r2
 8008116:	701a      	strb	r2, [r3, #0]
}
 8008118:	bf00      	nop
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008124:	b480      	push	{r7}
 8008126:	b087      	sub	sp, #28
 8008128:	af00      	add	r7, sp, #0
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	60b9      	str	r1, [r7, #8]
 800812e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00d      	beq.n	800815a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800813e:	693a      	ldr	r2, [r7, #16]
 8008140:	1c53      	adds	r3, r2, #1
 8008142:	613b      	str	r3, [r7, #16]
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	1c59      	adds	r1, r3, #1
 8008148:	6179      	str	r1, [r7, #20]
 800814a:	7812      	ldrb	r2, [r2, #0]
 800814c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	3b01      	subs	r3, #1
 8008152:	607b      	str	r3, [r7, #4]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d1f1      	bne.n	800813e <mem_cpy+0x1a>
	}
}
 800815a:	bf00      	nop
 800815c:	371c      	adds	r7, #28
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr

08008166 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008166:	b480      	push	{r7}
 8008168:	b087      	sub	sp, #28
 800816a:	af00      	add	r7, sp, #0
 800816c:	60f8      	str	r0, [r7, #12]
 800816e:	60b9      	str	r1, [r7, #8]
 8008170:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	1c5a      	adds	r2, r3, #1
 800817a:	617a      	str	r2, [r7, #20]
 800817c:	68ba      	ldr	r2, [r7, #8]
 800817e:	b2d2      	uxtb	r2, r2
 8008180:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	3b01      	subs	r3, #1
 8008186:	607b      	str	r3, [r7, #4]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d1f3      	bne.n	8008176 <mem_set+0x10>
}
 800818e:	bf00      	nop
 8008190:	bf00      	nop
 8008192:	371c      	adds	r7, #28
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800819c:	b480      	push	{r7}
 800819e:	b089      	sub	sp, #36	; 0x24
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	61fb      	str	r3, [r7, #28]
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80081b0:	2300      	movs	r3, #0
 80081b2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	1c5a      	adds	r2, r3, #1
 80081b8:	61fa      	str	r2, [r7, #28]
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	4619      	mov	r1, r3
 80081be:	69bb      	ldr	r3, [r7, #24]
 80081c0:	1c5a      	adds	r2, r3, #1
 80081c2:	61ba      	str	r2, [r7, #24]
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	1acb      	subs	r3, r1, r3
 80081c8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	3b01      	subs	r3, #1
 80081ce:	607b      	str	r3, [r7, #4]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d002      	beq.n	80081dc <mem_cmp+0x40>
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d0eb      	beq.n	80081b4 <mem_cmp+0x18>

	return r;
 80081dc:	697b      	ldr	r3, [r7, #20]
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3724      	adds	r7, #36	; 0x24
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr

080081ea <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80081ea:	b480      	push	{r7}
 80081ec:	b083      	sub	sp, #12
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
 80081f2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80081f4:	e002      	b.n	80081fc <chk_chr+0x12>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	3301      	adds	r3, #1
 80081fa:	607b      	str	r3, [r7, #4]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d005      	beq.n	8008210 <chk_chr+0x26>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	461a      	mov	r2, r3
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	4293      	cmp	r3, r2
 800820e:	d1f2      	bne.n	80081f6 <chk_chr+0xc>
	return *str;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	781b      	ldrb	r3, [r3, #0]
}
 8008214:	4618      	mov	r0, r3
 8008216:	370c      	adds	r7, #12
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008220:	b480      	push	{r7}
 8008222:	b085      	sub	sp, #20
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800822a:	2300      	movs	r3, #0
 800822c:	60bb      	str	r3, [r7, #8]
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	60fb      	str	r3, [r7, #12]
 8008232:	e029      	b.n	8008288 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008234:	4a27      	ldr	r2, [pc, #156]	; (80082d4 <chk_lock+0xb4>)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	011b      	lsls	r3, r3, #4
 800823a:	4413      	add	r3, r2
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d01d      	beq.n	800827e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008242:	4a24      	ldr	r2, [pc, #144]	; (80082d4 <chk_lock+0xb4>)
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	011b      	lsls	r3, r3, #4
 8008248:	4413      	add	r3, r2
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	429a      	cmp	r2, r3
 8008252:	d116      	bne.n	8008282 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008254:	4a1f      	ldr	r2, [pc, #124]	; (80082d4 <chk_lock+0xb4>)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	011b      	lsls	r3, r3, #4
 800825a:	4413      	add	r3, r2
 800825c:	3304      	adds	r3, #4
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008264:	429a      	cmp	r2, r3
 8008266:	d10c      	bne.n	8008282 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008268:	4a1a      	ldr	r2, [pc, #104]	; (80082d4 <chk_lock+0xb4>)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	011b      	lsls	r3, r3, #4
 800826e:	4413      	add	r3, r2
 8008270:	3308      	adds	r3, #8
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008278:	429a      	cmp	r2, r3
 800827a:	d102      	bne.n	8008282 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800827c:	e007      	b.n	800828e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800827e:	2301      	movs	r3, #1
 8008280:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	3301      	adds	r3, #1
 8008286:	60fb      	str	r3, [r7, #12]
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2b01      	cmp	r3, #1
 800828c:	d9d2      	bls.n	8008234 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2b02      	cmp	r3, #2
 8008292:	d109      	bne.n	80082a8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d102      	bne.n	80082a0 <chk_lock+0x80>
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	2b02      	cmp	r3, #2
 800829e:	d101      	bne.n	80082a4 <chk_lock+0x84>
 80082a0:	2300      	movs	r3, #0
 80082a2:	e010      	b.n	80082c6 <chk_lock+0xa6>
 80082a4:	2312      	movs	r3, #18
 80082a6:	e00e      	b.n	80082c6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d108      	bne.n	80082c0 <chk_lock+0xa0>
 80082ae:	4a09      	ldr	r2, [pc, #36]	; (80082d4 <chk_lock+0xb4>)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	011b      	lsls	r3, r3, #4
 80082b4:	4413      	add	r3, r2
 80082b6:	330c      	adds	r3, #12
 80082b8:	881b      	ldrh	r3, [r3, #0]
 80082ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082be:	d101      	bne.n	80082c4 <chk_lock+0xa4>
 80082c0:	2310      	movs	r3, #16
 80082c2:	e000      	b.n	80082c6 <chk_lock+0xa6>
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3714      	adds	r7, #20
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr
 80082d2:	bf00      	nop
 80082d4:	200011f0 	.word	0x200011f0

080082d8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80082de:	2300      	movs	r3, #0
 80082e0:	607b      	str	r3, [r7, #4]
 80082e2:	e002      	b.n	80082ea <enq_lock+0x12>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	3301      	adds	r3, #1
 80082e8:	607b      	str	r3, [r7, #4]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d806      	bhi.n	80082fe <enq_lock+0x26>
 80082f0:	4a09      	ldr	r2, [pc, #36]	; (8008318 <enq_lock+0x40>)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	011b      	lsls	r3, r3, #4
 80082f6:	4413      	add	r3, r2
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d1f2      	bne.n	80082e4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2b02      	cmp	r3, #2
 8008302:	bf14      	ite	ne
 8008304:	2301      	movne	r3, #1
 8008306:	2300      	moveq	r3, #0
 8008308:	b2db      	uxtb	r3, r3
}
 800830a:	4618      	mov	r0, r3
 800830c:	370c      	adds	r7, #12
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr
 8008316:	bf00      	nop
 8008318:	200011f0 	.word	0x200011f0

0800831c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800831c:	b480      	push	{r7}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008326:	2300      	movs	r3, #0
 8008328:	60fb      	str	r3, [r7, #12]
 800832a:	e01f      	b.n	800836c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800832c:	4a41      	ldr	r2, [pc, #260]	; (8008434 <inc_lock+0x118>)
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	011b      	lsls	r3, r3, #4
 8008332:	4413      	add	r3, r2
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	429a      	cmp	r2, r3
 800833c:	d113      	bne.n	8008366 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800833e:	4a3d      	ldr	r2, [pc, #244]	; (8008434 <inc_lock+0x118>)
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	011b      	lsls	r3, r3, #4
 8008344:	4413      	add	r3, r2
 8008346:	3304      	adds	r3, #4
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800834e:	429a      	cmp	r2, r3
 8008350:	d109      	bne.n	8008366 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008352:	4a38      	ldr	r2, [pc, #224]	; (8008434 <inc_lock+0x118>)
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	011b      	lsls	r3, r3, #4
 8008358:	4413      	add	r3, r2
 800835a:	3308      	adds	r3, #8
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008362:	429a      	cmp	r2, r3
 8008364:	d006      	beq.n	8008374 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	3301      	adds	r3, #1
 800836a:	60fb      	str	r3, [r7, #12]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2b01      	cmp	r3, #1
 8008370:	d9dc      	bls.n	800832c <inc_lock+0x10>
 8008372:	e000      	b.n	8008376 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008374:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2b02      	cmp	r3, #2
 800837a:	d132      	bne.n	80083e2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800837c:	2300      	movs	r3, #0
 800837e:	60fb      	str	r3, [r7, #12]
 8008380:	e002      	b.n	8008388 <inc_lock+0x6c>
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	3301      	adds	r3, #1
 8008386:	60fb      	str	r3, [r7, #12]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2b01      	cmp	r3, #1
 800838c:	d806      	bhi.n	800839c <inc_lock+0x80>
 800838e:	4a29      	ldr	r2, [pc, #164]	; (8008434 <inc_lock+0x118>)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	011b      	lsls	r3, r3, #4
 8008394:	4413      	add	r3, r2
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d1f2      	bne.n	8008382 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2b02      	cmp	r3, #2
 80083a0:	d101      	bne.n	80083a6 <inc_lock+0x8a>
 80083a2:	2300      	movs	r3, #0
 80083a4:	e040      	b.n	8008428 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	4922      	ldr	r1, [pc, #136]	; (8008434 <inc_lock+0x118>)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	011b      	lsls	r3, r3, #4
 80083b0:	440b      	add	r3, r1
 80083b2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	689a      	ldr	r2, [r3, #8]
 80083b8:	491e      	ldr	r1, [pc, #120]	; (8008434 <inc_lock+0x118>)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	011b      	lsls	r3, r3, #4
 80083be:	440b      	add	r3, r1
 80083c0:	3304      	adds	r3, #4
 80083c2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	695a      	ldr	r2, [r3, #20]
 80083c8:	491a      	ldr	r1, [pc, #104]	; (8008434 <inc_lock+0x118>)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	011b      	lsls	r3, r3, #4
 80083ce:	440b      	add	r3, r1
 80083d0:	3308      	adds	r3, #8
 80083d2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80083d4:	4a17      	ldr	r2, [pc, #92]	; (8008434 <inc_lock+0x118>)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	011b      	lsls	r3, r3, #4
 80083da:	4413      	add	r3, r2
 80083dc:	330c      	adds	r3, #12
 80083de:	2200      	movs	r2, #0
 80083e0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d009      	beq.n	80083fc <inc_lock+0xe0>
 80083e8:	4a12      	ldr	r2, [pc, #72]	; (8008434 <inc_lock+0x118>)
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	011b      	lsls	r3, r3, #4
 80083ee:	4413      	add	r3, r2
 80083f0:	330c      	adds	r3, #12
 80083f2:	881b      	ldrh	r3, [r3, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d001      	beq.n	80083fc <inc_lock+0xe0>
 80083f8:	2300      	movs	r3, #0
 80083fa:	e015      	b.n	8008428 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d108      	bne.n	8008414 <inc_lock+0xf8>
 8008402:	4a0c      	ldr	r2, [pc, #48]	; (8008434 <inc_lock+0x118>)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	011b      	lsls	r3, r3, #4
 8008408:	4413      	add	r3, r2
 800840a:	330c      	adds	r3, #12
 800840c:	881b      	ldrh	r3, [r3, #0]
 800840e:	3301      	adds	r3, #1
 8008410:	b29a      	uxth	r2, r3
 8008412:	e001      	b.n	8008418 <inc_lock+0xfc>
 8008414:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008418:	4906      	ldr	r1, [pc, #24]	; (8008434 <inc_lock+0x118>)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	011b      	lsls	r3, r3, #4
 800841e:	440b      	add	r3, r1
 8008420:	330c      	adds	r3, #12
 8008422:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	3301      	adds	r3, #1
}
 8008428:	4618      	mov	r0, r3
 800842a:	3714      	adds	r7, #20
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr
 8008434:	200011f0 	.word	0x200011f0

08008438 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008438:	b480      	push	{r7}
 800843a:	b085      	sub	sp, #20
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	3b01      	subs	r3, #1
 8008444:	607b      	str	r3, [r7, #4]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2b01      	cmp	r3, #1
 800844a:	d825      	bhi.n	8008498 <dec_lock+0x60>
		n = Files[i].ctr;
 800844c:	4a17      	ldr	r2, [pc, #92]	; (80084ac <dec_lock+0x74>)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	011b      	lsls	r3, r3, #4
 8008452:	4413      	add	r3, r2
 8008454:	330c      	adds	r3, #12
 8008456:	881b      	ldrh	r3, [r3, #0]
 8008458:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800845a:	89fb      	ldrh	r3, [r7, #14]
 800845c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008460:	d101      	bne.n	8008466 <dec_lock+0x2e>
 8008462:	2300      	movs	r3, #0
 8008464:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008466:	89fb      	ldrh	r3, [r7, #14]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d002      	beq.n	8008472 <dec_lock+0x3a>
 800846c:	89fb      	ldrh	r3, [r7, #14]
 800846e:	3b01      	subs	r3, #1
 8008470:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008472:	4a0e      	ldr	r2, [pc, #56]	; (80084ac <dec_lock+0x74>)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	011b      	lsls	r3, r3, #4
 8008478:	4413      	add	r3, r2
 800847a:	330c      	adds	r3, #12
 800847c:	89fa      	ldrh	r2, [r7, #14]
 800847e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008480:	89fb      	ldrh	r3, [r7, #14]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d105      	bne.n	8008492 <dec_lock+0x5a>
 8008486:	4a09      	ldr	r2, [pc, #36]	; (80084ac <dec_lock+0x74>)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	011b      	lsls	r3, r3, #4
 800848c:	4413      	add	r3, r2
 800848e:	2200      	movs	r2, #0
 8008490:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008492:	2300      	movs	r3, #0
 8008494:	737b      	strb	r3, [r7, #13]
 8008496:	e001      	b.n	800849c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008498:	2302      	movs	r3, #2
 800849a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800849c:	7b7b      	ldrb	r3, [r7, #13]
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3714      	adds	r7, #20
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr
 80084aa:	bf00      	nop
 80084ac:	200011f0 	.word	0x200011f0

080084b0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b085      	sub	sp, #20
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80084b8:	2300      	movs	r3, #0
 80084ba:	60fb      	str	r3, [r7, #12]
 80084bc:	e010      	b.n	80084e0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80084be:	4a0d      	ldr	r2, [pc, #52]	; (80084f4 <clear_lock+0x44>)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	011b      	lsls	r3, r3, #4
 80084c4:	4413      	add	r3, r2
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d105      	bne.n	80084da <clear_lock+0x2a>
 80084ce:	4a09      	ldr	r2, [pc, #36]	; (80084f4 <clear_lock+0x44>)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	011b      	lsls	r3, r3, #4
 80084d4:	4413      	add	r3, r2
 80084d6:	2200      	movs	r2, #0
 80084d8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	3301      	adds	r3, #1
 80084de:	60fb      	str	r3, [r7, #12]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d9eb      	bls.n	80084be <clear_lock+0xe>
	}
}
 80084e6:	bf00      	nop
 80084e8:	bf00      	nop
 80084ea:	3714      	adds	r7, #20
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr
 80084f4:	200011f0 	.word	0x200011f0

080084f8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b086      	sub	sp, #24
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008500:	2300      	movs	r3, #0
 8008502:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	78db      	ldrb	r3, [r3, #3]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d034      	beq.n	8008576 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008510:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	7858      	ldrb	r0, [r3, #1]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800851c:	2301      	movs	r3, #1
 800851e:	697a      	ldr	r2, [r7, #20]
 8008520:	f7ff fd40 	bl	8007fa4 <disk_write>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d002      	beq.n	8008530 <sync_window+0x38>
			res = FR_DISK_ERR;
 800852a:	2301      	movs	r3, #1
 800852c:	73fb      	strb	r3, [r7, #15]
 800852e:	e022      	b.n	8008576 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2200      	movs	r2, #0
 8008534:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853a:	697a      	ldr	r2, [r7, #20]
 800853c:	1ad2      	subs	r2, r2, r3
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	69db      	ldr	r3, [r3, #28]
 8008542:	429a      	cmp	r2, r3
 8008544:	d217      	bcs.n	8008576 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	789b      	ldrb	r3, [r3, #2]
 800854a:	613b      	str	r3, [r7, #16]
 800854c:	e010      	b.n	8008570 <sync_window+0x78>
					wsect += fs->fsize;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	69db      	ldr	r3, [r3, #28]
 8008552:	697a      	ldr	r2, [r7, #20]
 8008554:	4413      	add	r3, r2
 8008556:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	7858      	ldrb	r0, [r3, #1]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008562:	2301      	movs	r3, #1
 8008564:	697a      	ldr	r2, [r7, #20]
 8008566:	f7ff fd1d 	bl	8007fa4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	3b01      	subs	r3, #1
 800856e:	613b      	str	r3, [r7, #16]
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	2b01      	cmp	r3, #1
 8008574:	d8eb      	bhi.n	800854e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008576:	7bfb      	ldrb	r3, [r7, #15]
}
 8008578:	4618      	mov	r0, r3
 800857a:	3718      	adds	r7, #24
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800858a:	2300      	movs	r3, #0
 800858c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008592:	683a      	ldr	r2, [r7, #0]
 8008594:	429a      	cmp	r2, r3
 8008596:	d01b      	beq.n	80085d0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f7ff ffad 	bl	80084f8 <sync_window>
 800859e:	4603      	mov	r3, r0
 80085a0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80085a2:	7bfb      	ldrb	r3, [r7, #15]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d113      	bne.n	80085d0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	7858      	ldrb	r0, [r3, #1]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80085b2:	2301      	movs	r3, #1
 80085b4:	683a      	ldr	r2, [r7, #0]
 80085b6:	f7ff fcd5 	bl	8007f64 <disk_read>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d004      	beq.n	80085ca <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80085c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085c4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	683a      	ldr	r2, [r7, #0]
 80085ce:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80085d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3710      	adds	r7, #16
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
	...

080085dc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f7ff ff87 	bl	80084f8 <sync_window>
 80085ea:	4603      	mov	r3, r0
 80085ec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80085ee:	7bfb      	ldrb	r3, [r7, #15]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d159      	bne.n	80086a8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	2b03      	cmp	r3, #3
 80085fa:	d149      	bne.n	8008690 <sync_fs+0xb4>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	791b      	ldrb	r3, [r3, #4]
 8008600:	2b01      	cmp	r3, #1
 8008602:	d145      	bne.n	8008690 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	899b      	ldrh	r3, [r3, #12]
 800860e:	461a      	mov	r2, r3
 8008610:	2100      	movs	r1, #0
 8008612:	f7ff fda8 	bl	8008166 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	3334      	adds	r3, #52	; 0x34
 800861a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800861e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008622:	4618      	mov	r0, r3
 8008624:	f7ff fd37 	bl	8008096 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	3334      	adds	r3, #52	; 0x34
 800862c:	4921      	ldr	r1, [pc, #132]	; (80086b4 <sync_fs+0xd8>)
 800862e:	4618      	mov	r0, r3
 8008630:	f7ff fd4c 	bl	80080cc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	3334      	adds	r3, #52	; 0x34
 8008638:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800863c:	491e      	ldr	r1, [pc, #120]	; (80086b8 <sync_fs+0xdc>)
 800863e:	4618      	mov	r0, r3
 8008640:	f7ff fd44 	bl	80080cc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	3334      	adds	r3, #52	; 0x34
 8008648:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	695b      	ldr	r3, [r3, #20]
 8008650:	4619      	mov	r1, r3
 8008652:	4610      	mov	r0, r2
 8008654:	f7ff fd3a 	bl	80080cc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	3334      	adds	r3, #52	; 0x34
 800865c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	691b      	ldr	r3, [r3, #16]
 8008664:	4619      	mov	r1, r3
 8008666:	4610      	mov	r0, r2
 8008668:	f7ff fd30 	bl	80080cc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6a1b      	ldr	r3, [r3, #32]
 8008670:	1c5a      	adds	r2, r3, #1
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	7858      	ldrb	r0, [r3, #1]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008684:	2301      	movs	r3, #1
 8008686:	f7ff fc8d 	bl	8007fa4 <disk_write>
			fs->fsi_flag = 0;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2200      	movs	r2, #0
 800868e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	785b      	ldrb	r3, [r3, #1]
 8008694:	2200      	movs	r2, #0
 8008696:	2100      	movs	r1, #0
 8008698:	4618      	mov	r0, r3
 800869a:	f7ff fca3 	bl	8007fe4 <disk_ioctl>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d001      	beq.n	80086a8 <sync_fs+0xcc>
 80086a4:	2301      	movs	r3, #1
 80086a6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80086a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3710      	adds	r7, #16
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	41615252 	.word	0x41615252
 80086b8:	61417272 	.word	0x61417272

080086bc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80086bc:	b480      	push	{r7}
 80086be:	b083      	sub	sp, #12
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	3b02      	subs	r3, #2
 80086ca:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	699b      	ldr	r3, [r3, #24]
 80086d0:	3b02      	subs	r3, #2
 80086d2:	683a      	ldr	r2, [r7, #0]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d301      	bcc.n	80086dc <clust2sect+0x20>
 80086d8:	2300      	movs	r3, #0
 80086da:	e008      	b.n	80086ee <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	895b      	ldrh	r3, [r3, #10]
 80086e0:	461a      	mov	r2, r3
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	fb03 f202 	mul.w	r2, r3, r2
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ec:	4413      	add	r3, r2
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	370c      	adds	r7, #12
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr

080086fa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b086      	sub	sp, #24
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
 8008702:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	2b01      	cmp	r3, #1
 800870e:	d904      	bls.n	800871a <get_fat+0x20>
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	699b      	ldr	r3, [r3, #24]
 8008714:	683a      	ldr	r2, [r7, #0]
 8008716:	429a      	cmp	r2, r3
 8008718:	d302      	bcc.n	8008720 <get_fat+0x26>
		val = 1;	/* Internal error */
 800871a:	2301      	movs	r3, #1
 800871c:	617b      	str	r3, [r7, #20]
 800871e:	e0bb      	b.n	8008898 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008720:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008724:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	2b03      	cmp	r3, #3
 800872c:	f000 8083 	beq.w	8008836 <get_fat+0x13c>
 8008730:	2b03      	cmp	r3, #3
 8008732:	f300 80a7 	bgt.w	8008884 <get_fat+0x18a>
 8008736:	2b01      	cmp	r3, #1
 8008738:	d002      	beq.n	8008740 <get_fat+0x46>
 800873a:	2b02      	cmp	r3, #2
 800873c:	d056      	beq.n	80087ec <get_fat+0xf2>
 800873e:	e0a1      	b.n	8008884 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	60fb      	str	r3, [r7, #12]
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	085b      	lsrs	r3, r3, #1
 8008748:	68fa      	ldr	r2, [r7, #12]
 800874a:	4413      	add	r3, r2
 800874c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	899b      	ldrh	r3, [r3, #12]
 8008756:	4619      	mov	r1, r3
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	fbb3 f3f1 	udiv	r3, r3, r1
 800875e:	4413      	add	r3, r2
 8008760:	4619      	mov	r1, r3
 8008762:	6938      	ldr	r0, [r7, #16]
 8008764:	f7ff ff0c 	bl	8008580 <move_window>
 8008768:	4603      	mov	r3, r0
 800876a:	2b00      	cmp	r3, #0
 800876c:	f040 808d 	bne.w	800888a <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	1c5a      	adds	r2, r3, #1
 8008774:	60fa      	str	r2, [r7, #12]
 8008776:	693a      	ldr	r2, [r7, #16]
 8008778:	8992      	ldrh	r2, [r2, #12]
 800877a:	fbb3 f1f2 	udiv	r1, r3, r2
 800877e:	fb02 f201 	mul.w	r2, r2, r1
 8008782:	1a9b      	subs	r3, r3, r2
 8008784:	693a      	ldr	r2, [r7, #16]
 8008786:	4413      	add	r3, r2
 8008788:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800878c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	899b      	ldrh	r3, [r3, #12]
 8008796:	4619      	mov	r1, r3
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	fbb3 f3f1 	udiv	r3, r3, r1
 800879e:	4413      	add	r3, r2
 80087a0:	4619      	mov	r1, r3
 80087a2:	6938      	ldr	r0, [r7, #16]
 80087a4:	f7ff feec 	bl	8008580 <move_window>
 80087a8:	4603      	mov	r3, r0
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d16f      	bne.n	800888e <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	899b      	ldrh	r3, [r3, #12]
 80087b2:	461a      	mov	r2, r3
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80087ba:	fb02 f201 	mul.w	r2, r2, r1
 80087be:	1a9b      	subs	r3, r3, r2
 80087c0:	693a      	ldr	r2, [r7, #16]
 80087c2:	4413      	add	r3, r2
 80087c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80087c8:	021b      	lsls	r3, r3, #8
 80087ca:	461a      	mov	r2, r3
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	4313      	orrs	r3, r2
 80087d0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	f003 0301 	and.w	r3, r3, #1
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d002      	beq.n	80087e2 <get_fat+0xe8>
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	091b      	lsrs	r3, r3, #4
 80087e0:	e002      	b.n	80087e8 <get_fat+0xee>
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087e8:	617b      	str	r3, [r7, #20]
			break;
 80087ea:	e055      	b.n	8008898 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	899b      	ldrh	r3, [r3, #12]
 80087f4:	085b      	lsrs	r3, r3, #1
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	4619      	mov	r1, r3
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	fbb3 f3f1 	udiv	r3, r3, r1
 8008800:	4413      	add	r3, r2
 8008802:	4619      	mov	r1, r3
 8008804:	6938      	ldr	r0, [r7, #16]
 8008806:	f7ff febb 	bl	8008580 <move_window>
 800880a:	4603      	mov	r3, r0
 800880c:	2b00      	cmp	r3, #0
 800880e:	d140      	bne.n	8008892 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	005b      	lsls	r3, r3, #1
 800881a:	693a      	ldr	r2, [r7, #16]
 800881c:	8992      	ldrh	r2, [r2, #12]
 800881e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008822:	fb02 f200 	mul.w	r2, r2, r0
 8008826:	1a9b      	subs	r3, r3, r2
 8008828:	440b      	add	r3, r1
 800882a:	4618      	mov	r0, r3
 800882c:	f7ff fbf8 	bl	8008020 <ld_word>
 8008830:	4603      	mov	r3, r0
 8008832:	617b      	str	r3, [r7, #20]
			break;
 8008834:	e030      	b.n	8008898 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	899b      	ldrh	r3, [r3, #12]
 800883e:	089b      	lsrs	r3, r3, #2
 8008840:	b29b      	uxth	r3, r3
 8008842:	4619      	mov	r1, r3
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	fbb3 f3f1 	udiv	r3, r3, r1
 800884a:	4413      	add	r3, r2
 800884c:	4619      	mov	r1, r3
 800884e:	6938      	ldr	r0, [r7, #16]
 8008850:	f7ff fe96 	bl	8008580 <move_window>
 8008854:	4603      	mov	r3, r0
 8008856:	2b00      	cmp	r3, #0
 8008858:	d11d      	bne.n	8008896 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	009b      	lsls	r3, r3, #2
 8008864:	693a      	ldr	r2, [r7, #16]
 8008866:	8992      	ldrh	r2, [r2, #12]
 8008868:	fbb3 f0f2 	udiv	r0, r3, r2
 800886c:	fb02 f200 	mul.w	r2, r2, r0
 8008870:	1a9b      	subs	r3, r3, r2
 8008872:	440b      	add	r3, r1
 8008874:	4618      	mov	r0, r3
 8008876:	f7ff fbeb 	bl	8008050 <ld_dword>
 800887a:	4603      	mov	r3, r0
 800887c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008880:	617b      	str	r3, [r7, #20]
			break;
 8008882:	e009      	b.n	8008898 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008884:	2301      	movs	r3, #1
 8008886:	617b      	str	r3, [r7, #20]
 8008888:	e006      	b.n	8008898 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800888a:	bf00      	nop
 800888c:	e004      	b.n	8008898 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800888e:	bf00      	nop
 8008890:	e002      	b.n	8008898 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008892:	bf00      	nop
 8008894:	e000      	b.n	8008898 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008896:	bf00      	nop
		}
	}

	return val;
 8008898:	697b      	ldr	r3, [r7, #20]
}
 800889a:	4618      	mov	r0, r3
 800889c:	3718      	adds	r7, #24
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}

080088a2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80088a2:	b590      	push	{r4, r7, lr}
 80088a4:	b089      	sub	sp, #36	; 0x24
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	60f8      	str	r0, [r7, #12]
 80088aa:	60b9      	str	r1, [r7, #8]
 80088ac:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80088ae:	2302      	movs	r3, #2
 80088b0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	f240 8102 	bls.w	8008abe <put_fat+0x21c>
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	699b      	ldr	r3, [r3, #24]
 80088be:	68ba      	ldr	r2, [r7, #8]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	f080 80fc 	bcs.w	8008abe <put_fat+0x21c>
		switch (fs->fs_type) {
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	2b03      	cmp	r3, #3
 80088cc:	f000 80b6 	beq.w	8008a3c <put_fat+0x19a>
 80088d0:	2b03      	cmp	r3, #3
 80088d2:	f300 80fd 	bgt.w	8008ad0 <put_fat+0x22e>
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	d003      	beq.n	80088e2 <put_fat+0x40>
 80088da:	2b02      	cmp	r3, #2
 80088dc:	f000 8083 	beq.w	80089e6 <put_fat+0x144>
 80088e0:	e0f6      	b.n	8008ad0 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	61bb      	str	r3, [r7, #24]
 80088e6:	69bb      	ldr	r3, [r7, #24]
 80088e8:	085b      	lsrs	r3, r3, #1
 80088ea:	69ba      	ldr	r2, [r7, #24]
 80088ec:	4413      	add	r3, r2
 80088ee:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	899b      	ldrh	r3, [r3, #12]
 80088f8:	4619      	mov	r1, r3
 80088fa:	69bb      	ldr	r3, [r7, #24]
 80088fc:	fbb3 f3f1 	udiv	r3, r3, r1
 8008900:	4413      	add	r3, r2
 8008902:	4619      	mov	r1, r3
 8008904:	68f8      	ldr	r0, [r7, #12]
 8008906:	f7ff fe3b 	bl	8008580 <move_window>
 800890a:	4603      	mov	r3, r0
 800890c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800890e:	7ffb      	ldrb	r3, [r7, #31]
 8008910:	2b00      	cmp	r3, #0
 8008912:	f040 80d6 	bne.w	8008ac2 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800891c:	69bb      	ldr	r3, [r7, #24]
 800891e:	1c5a      	adds	r2, r3, #1
 8008920:	61ba      	str	r2, [r7, #24]
 8008922:	68fa      	ldr	r2, [r7, #12]
 8008924:	8992      	ldrh	r2, [r2, #12]
 8008926:	fbb3 f0f2 	udiv	r0, r3, r2
 800892a:	fb02 f200 	mul.w	r2, r2, r0
 800892e:	1a9b      	subs	r3, r3, r2
 8008930:	440b      	add	r3, r1
 8008932:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	f003 0301 	and.w	r3, r3, #1
 800893a:	2b00      	cmp	r3, #0
 800893c:	d00d      	beq.n	800895a <put_fat+0xb8>
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	b25b      	sxtb	r3, r3
 8008944:	f003 030f 	and.w	r3, r3, #15
 8008948:	b25a      	sxtb	r2, r3
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	b2db      	uxtb	r3, r3
 800894e:	011b      	lsls	r3, r3, #4
 8008950:	b25b      	sxtb	r3, r3
 8008952:	4313      	orrs	r3, r2
 8008954:	b25b      	sxtb	r3, r3
 8008956:	b2db      	uxtb	r3, r3
 8008958:	e001      	b.n	800895e <put_fat+0xbc>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	b2db      	uxtb	r3, r3
 800895e:	697a      	ldr	r2, [r7, #20]
 8008960:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2201      	movs	r2, #1
 8008966:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	899b      	ldrh	r3, [r3, #12]
 8008970:	4619      	mov	r1, r3
 8008972:	69bb      	ldr	r3, [r7, #24]
 8008974:	fbb3 f3f1 	udiv	r3, r3, r1
 8008978:	4413      	add	r3, r2
 800897a:	4619      	mov	r1, r3
 800897c:	68f8      	ldr	r0, [r7, #12]
 800897e:	f7ff fdff 	bl	8008580 <move_window>
 8008982:	4603      	mov	r3, r0
 8008984:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008986:	7ffb      	ldrb	r3, [r7, #31]
 8008988:	2b00      	cmp	r3, #0
 800898a:	f040 809c 	bne.w	8008ac6 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	899b      	ldrh	r3, [r3, #12]
 8008998:	461a      	mov	r2, r3
 800899a:	69bb      	ldr	r3, [r7, #24]
 800899c:	fbb3 f0f2 	udiv	r0, r3, r2
 80089a0:	fb02 f200 	mul.w	r2, r2, r0
 80089a4:	1a9b      	subs	r3, r3, r2
 80089a6:	440b      	add	r3, r1
 80089a8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	f003 0301 	and.w	r3, r3, #1
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d003      	beq.n	80089bc <put_fat+0x11a>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	091b      	lsrs	r3, r3, #4
 80089b8:	b2db      	uxtb	r3, r3
 80089ba:	e00e      	b.n	80089da <put_fat+0x138>
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	b25b      	sxtb	r3, r3
 80089c2:	f023 030f 	bic.w	r3, r3, #15
 80089c6:	b25a      	sxtb	r2, r3
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	0a1b      	lsrs	r3, r3, #8
 80089cc:	b25b      	sxtb	r3, r3
 80089ce:	f003 030f 	and.w	r3, r3, #15
 80089d2:	b25b      	sxtb	r3, r3
 80089d4:	4313      	orrs	r3, r2
 80089d6:	b25b      	sxtb	r3, r3
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	697a      	ldr	r2, [r7, #20]
 80089dc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2201      	movs	r2, #1
 80089e2:	70da      	strb	r2, [r3, #3]
			break;
 80089e4:	e074      	b.n	8008ad0 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	899b      	ldrh	r3, [r3, #12]
 80089ee:	085b      	lsrs	r3, r3, #1
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	4619      	mov	r1, r3
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80089fa:	4413      	add	r3, r2
 80089fc:	4619      	mov	r1, r3
 80089fe:	68f8      	ldr	r0, [r7, #12]
 8008a00:	f7ff fdbe 	bl	8008580 <move_window>
 8008a04:	4603      	mov	r3, r0
 8008a06:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008a08:	7ffb      	ldrb	r3, [r7, #31]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d15d      	bne.n	8008aca <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	005b      	lsls	r3, r3, #1
 8008a18:	68fa      	ldr	r2, [r7, #12]
 8008a1a:	8992      	ldrh	r2, [r2, #12]
 8008a1c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008a20:	fb02 f200 	mul.w	r2, r2, r0
 8008a24:	1a9b      	subs	r3, r3, r2
 8008a26:	440b      	add	r3, r1
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	b292      	uxth	r2, r2
 8008a2c:	4611      	mov	r1, r2
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7ff fb31 	bl	8008096 <st_word>
			fs->wflag = 1;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2201      	movs	r2, #1
 8008a38:	70da      	strb	r2, [r3, #3]
			break;
 8008a3a:	e049      	b.n	8008ad0 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	899b      	ldrh	r3, [r3, #12]
 8008a44:	089b      	lsrs	r3, r3, #2
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	4619      	mov	r1, r3
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a50:	4413      	add	r3, r2
 8008a52:	4619      	mov	r1, r3
 8008a54:	68f8      	ldr	r0, [r7, #12]
 8008a56:	f7ff fd93 	bl	8008580 <move_window>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008a5e:	7ffb      	ldrb	r3, [r7, #31]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d134      	bne.n	8008ace <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	68fa      	ldr	r2, [r7, #12]
 8008a76:	8992      	ldrh	r2, [r2, #12]
 8008a78:	fbb3 f0f2 	udiv	r0, r3, r2
 8008a7c:	fb02 f200 	mul.w	r2, r2, r0
 8008a80:	1a9b      	subs	r3, r3, r2
 8008a82:	440b      	add	r3, r1
 8008a84:	4618      	mov	r0, r3
 8008a86:	f7ff fae3 	bl	8008050 <ld_dword>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008a90:	4323      	orrs	r3, r4
 8008a92:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	68fa      	ldr	r2, [r7, #12]
 8008aa0:	8992      	ldrh	r2, [r2, #12]
 8008aa2:	fbb3 f0f2 	udiv	r0, r3, r2
 8008aa6:	fb02 f200 	mul.w	r2, r2, r0
 8008aaa:	1a9b      	subs	r3, r3, r2
 8008aac:	440b      	add	r3, r1
 8008aae:	6879      	ldr	r1, [r7, #4]
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f7ff fb0b 	bl	80080cc <st_dword>
			fs->wflag = 1;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2201      	movs	r2, #1
 8008aba:	70da      	strb	r2, [r3, #3]
			break;
 8008abc:	e008      	b.n	8008ad0 <put_fat+0x22e>
		}
	}
 8008abe:	bf00      	nop
 8008ac0:	e006      	b.n	8008ad0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008ac2:	bf00      	nop
 8008ac4:	e004      	b.n	8008ad0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008ac6:	bf00      	nop
 8008ac8:	e002      	b.n	8008ad0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008aca:	bf00      	nop
 8008acc:	e000      	b.n	8008ad0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8008ace:	bf00      	nop
	return res;
 8008ad0:	7ffb      	ldrb	r3, [r7, #31]
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3724      	adds	r7, #36	; 0x24
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd90      	pop	{r4, r7, pc}

08008ada <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b088      	sub	sp, #32
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	60f8      	str	r0, [r7, #12]
 8008ae2:	60b9      	str	r1, [r7, #8]
 8008ae4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d904      	bls.n	8008b00 <remove_chain+0x26>
 8008af6:	69bb      	ldr	r3, [r7, #24]
 8008af8:	699b      	ldr	r3, [r3, #24]
 8008afa:	68ba      	ldr	r2, [r7, #8]
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d301      	bcc.n	8008b04 <remove_chain+0x2a>
 8008b00:	2302      	movs	r3, #2
 8008b02:	e04b      	b.n	8008b9c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d00c      	beq.n	8008b24 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008b0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b0e:	6879      	ldr	r1, [r7, #4]
 8008b10:	69b8      	ldr	r0, [r7, #24]
 8008b12:	f7ff fec6 	bl	80088a2 <put_fat>
 8008b16:	4603      	mov	r3, r0
 8008b18:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008b1a:	7ffb      	ldrb	r3, [r7, #31]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d001      	beq.n	8008b24 <remove_chain+0x4a>
 8008b20:	7ffb      	ldrb	r3, [r7, #31]
 8008b22:	e03b      	b.n	8008b9c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008b24:	68b9      	ldr	r1, [r7, #8]
 8008b26:	68f8      	ldr	r0, [r7, #12]
 8008b28:	f7ff fde7 	bl	80086fa <get_fat>
 8008b2c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d031      	beq.n	8008b98 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d101      	bne.n	8008b3e <remove_chain+0x64>
 8008b3a:	2302      	movs	r3, #2
 8008b3c:	e02e      	b.n	8008b9c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b44:	d101      	bne.n	8008b4a <remove_chain+0x70>
 8008b46:	2301      	movs	r3, #1
 8008b48:	e028      	b.n	8008b9c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	68b9      	ldr	r1, [r7, #8]
 8008b4e:	69b8      	ldr	r0, [r7, #24]
 8008b50:	f7ff fea7 	bl	80088a2 <put_fat>
 8008b54:	4603      	mov	r3, r0
 8008b56:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008b58:	7ffb      	ldrb	r3, [r7, #31]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d001      	beq.n	8008b62 <remove_chain+0x88>
 8008b5e:	7ffb      	ldrb	r3, [r7, #31]
 8008b60:	e01c      	b.n	8008b9c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008b62:	69bb      	ldr	r3, [r7, #24]
 8008b64:	695a      	ldr	r2, [r3, #20]
 8008b66:	69bb      	ldr	r3, [r7, #24]
 8008b68:	699b      	ldr	r3, [r3, #24]
 8008b6a:	3b02      	subs	r3, #2
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d20b      	bcs.n	8008b88 <remove_chain+0xae>
			fs->free_clst++;
 8008b70:	69bb      	ldr	r3, [r7, #24]
 8008b72:	695b      	ldr	r3, [r3, #20]
 8008b74:	1c5a      	adds	r2, r3, #1
 8008b76:	69bb      	ldr	r3, [r7, #24]
 8008b78:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8008b7a:	69bb      	ldr	r3, [r7, #24]
 8008b7c:	791b      	ldrb	r3, [r3, #4]
 8008b7e:	f043 0301 	orr.w	r3, r3, #1
 8008b82:	b2da      	uxtb	r2, r3
 8008b84:	69bb      	ldr	r3, [r7, #24]
 8008b86:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	699b      	ldr	r3, [r3, #24]
 8008b90:	68ba      	ldr	r2, [r7, #8]
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d3c6      	bcc.n	8008b24 <remove_chain+0x4a>
 8008b96:	e000      	b.n	8008b9a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008b98:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008b9a:	2300      	movs	r3, #0
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3720      	adds	r7, #32
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b088      	sub	sp, #32
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d10d      	bne.n	8008bd6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	691b      	ldr	r3, [r3, #16]
 8008bbe:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008bc0:	69bb      	ldr	r3, [r7, #24]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d004      	beq.n	8008bd0 <create_chain+0x2c>
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	699b      	ldr	r3, [r3, #24]
 8008bca:	69ba      	ldr	r2, [r7, #24]
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d31b      	bcc.n	8008c08 <create_chain+0x64>
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	61bb      	str	r3, [r7, #24]
 8008bd4:	e018      	b.n	8008c08 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008bd6:	6839      	ldr	r1, [r7, #0]
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f7ff fd8e 	bl	80086fa <get_fat>
 8008bde:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2b01      	cmp	r3, #1
 8008be4:	d801      	bhi.n	8008bea <create_chain+0x46>
 8008be6:	2301      	movs	r3, #1
 8008be8:	e070      	b.n	8008ccc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008bf0:	d101      	bne.n	8008bf6 <create_chain+0x52>
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	e06a      	b.n	8008ccc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	699b      	ldr	r3, [r3, #24]
 8008bfa:	68fa      	ldr	r2, [r7, #12]
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d201      	bcs.n	8008c04 <create_chain+0x60>
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	e063      	b.n	8008ccc <create_chain+0x128>
		scl = clst;
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008c08:	69bb      	ldr	r3, [r7, #24]
 8008c0a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008c0c:	69fb      	ldr	r3, [r7, #28]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	699b      	ldr	r3, [r3, #24]
 8008c16:	69fa      	ldr	r2, [r7, #28]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d307      	bcc.n	8008c2c <create_chain+0x88>
				ncl = 2;
 8008c1c:	2302      	movs	r3, #2
 8008c1e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008c20:	69fa      	ldr	r2, [r7, #28]
 8008c22:	69bb      	ldr	r3, [r7, #24]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d901      	bls.n	8008c2c <create_chain+0x88>
 8008c28:	2300      	movs	r3, #0
 8008c2a:	e04f      	b.n	8008ccc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008c2c:	69f9      	ldr	r1, [r7, #28]
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f7ff fd63 	bl	80086fa <get_fat>
 8008c34:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d00e      	beq.n	8008c5a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d003      	beq.n	8008c4a <create_chain+0xa6>
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c48:	d101      	bne.n	8008c4e <create_chain+0xaa>
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	e03e      	b.n	8008ccc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008c4e:	69fa      	ldr	r2, [r7, #28]
 8008c50:	69bb      	ldr	r3, [r7, #24]
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d1da      	bne.n	8008c0c <create_chain+0x68>
 8008c56:	2300      	movs	r3, #0
 8008c58:	e038      	b.n	8008ccc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008c5a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008c5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c60:	69f9      	ldr	r1, [r7, #28]
 8008c62:	6938      	ldr	r0, [r7, #16]
 8008c64:	f7ff fe1d 	bl	80088a2 <put_fat>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008c6c:	7dfb      	ldrb	r3, [r7, #23]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d109      	bne.n	8008c86 <create_chain+0xe2>
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d006      	beq.n	8008c86 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008c78:	69fa      	ldr	r2, [r7, #28]
 8008c7a:	6839      	ldr	r1, [r7, #0]
 8008c7c:	6938      	ldr	r0, [r7, #16]
 8008c7e:	f7ff fe10 	bl	80088a2 <put_fat>
 8008c82:	4603      	mov	r3, r0
 8008c84:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008c86:	7dfb      	ldrb	r3, [r7, #23]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d116      	bne.n	8008cba <create_chain+0x116>
		fs->last_clst = ncl;
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	69fa      	ldr	r2, [r7, #28]
 8008c90:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	695a      	ldr	r2, [r3, #20]
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	699b      	ldr	r3, [r3, #24]
 8008c9a:	3b02      	subs	r3, #2
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d804      	bhi.n	8008caa <create_chain+0x106>
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	695b      	ldr	r3, [r3, #20]
 8008ca4:	1e5a      	subs	r2, r3, #1
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	791b      	ldrb	r3, [r3, #4]
 8008cae:	f043 0301 	orr.w	r3, r3, #1
 8008cb2:	b2da      	uxtb	r2, r3
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	711a      	strb	r2, [r3, #4]
 8008cb8:	e007      	b.n	8008cca <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008cba:	7dfb      	ldrb	r3, [r7, #23]
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d102      	bne.n	8008cc6 <create_chain+0x122>
 8008cc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008cc4:	e000      	b.n	8008cc8 <create_chain+0x124>
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008cca:	69fb      	ldr	r3, [r7, #28]
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3720      	adds	r7, #32
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b087      	sub	sp, #28
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce8:	3304      	adds	r3, #4
 8008cea:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	899b      	ldrh	r3, [r3, #12]
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cf8:	68fa      	ldr	r2, [r7, #12]
 8008cfa:	8952      	ldrh	r2, [r2, #10]
 8008cfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d00:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	1d1a      	adds	r2, r3, #4
 8008d06:	613a      	str	r2, [r7, #16]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d101      	bne.n	8008d16 <clmt_clust+0x42>
 8008d12:	2300      	movs	r3, #0
 8008d14:	e010      	b.n	8008d38 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8008d16:	697a      	ldr	r2, [r7, #20]
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d307      	bcc.n	8008d2e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8008d1e:	697a      	ldr	r2, [r7, #20]
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	1ad3      	subs	r3, r2, r3
 8008d24:	617b      	str	r3, [r7, #20]
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	3304      	adds	r3, #4
 8008d2a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008d2c:	e7e9      	b.n	8008d02 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8008d2e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	4413      	add	r3, r2
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	371c      	adds	r7, #28
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b086      	sub	sp, #24
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d5a:	d204      	bcs.n	8008d66 <dir_sdi+0x22>
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	f003 031f 	and.w	r3, r3, #31
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d001      	beq.n	8008d6a <dir_sdi+0x26>
		return FR_INT_ERR;
 8008d66:	2302      	movs	r3, #2
 8008d68:	e071      	b.n	8008e4e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	683a      	ldr	r2, [r7, #0]
 8008d6e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	689b      	ldr	r3, [r3, #8]
 8008d74:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d106      	bne.n	8008d8a <dir_sdi+0x46>
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	2b02      	cmp	r3, #2
 8008d82:	d902      	bls.n	8008d8a <dir_sdi+0x46>
		clst = fs->dirbase;
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d88:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d10c      	bne.n	8008daa <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	095b      	lsrs	r3, r3, #5
 8008d94:	693a      	ldr	r2, [r7, #16]
 8008d96:	8912      	ldrh	r2, [r2, #8]
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d301      	bcc.n	8008da0 <dir_sdi+0x5c>
 8008d9c:	2302      	movs	r3, #2
 8008d9e:	e056      	b.n	8008e4e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	61da      	str	r2, [r3, #28]
 8008da8:	e02d      	b.n	8008e06 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	895b      	ldrh	r3, [r3, #10]
 8008dae:	461a      	mov	r2, r3
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	899b      	ldrh	r3, [r3, #12]
 8008db4:	fb03 f302 	mul.w	r3, r3, r2
 8008db8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008dba:	e019      	b.n	8008df0 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6979      	ldr	r1, [r7, #20]
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f7ff fc9a 	bl	80086fa <get_fat>
 8008dc6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dce:	d101      	bne.n	8008dd4 <dir_sdi+0x90>
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e03c      	b.n	8008e4e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d904      	bls.n	8008de4 <dir_sdi+0xa0>
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	699b      	ldr	r3, [r3, #24]
 8008dde:	697a      	ldr	r2, [r7, #20]
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d301      	bcc.n	8008de8 <dir_sdi+0xa4>
 8008de4:	2302      	movs	r3, #2
 8008de6:	e032      	b.n	8008e4e <dir_sdi+0x10a>
			ofs -= csz;
 8008de8:	683a      	ldr	r2, [r7, #0]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	1ad3      	subs	r3, r2, r3
 8008dee:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008df0:	683a      	ldr	r2, [r7, #0]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d2e1      	bcs.n	8008dbc <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008df8:	6979      	ldr	r1, [r7, #20]
 8008dfa:	6938      	ldr	r0, [r7, #16]
 8008dfc:	f7ff fc5e 	bl	80086bc <clust2sect>
 8008e00:	4602      	mov	r2, r0
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	697a      	ldr	r2, [r7, #20]
 8008e0a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	69db      	ldr	r3, [r3, #28]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d101      	bne.n	8008e18 <dir_sdi+0xd4>
 8008e14:	2302      	movs	r3, #2
 8008e16:	e01a      	b.n	8008e4e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	69da      	ldr	r2, [r3, #28]
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	899b      	ldrh	r3, [r3, #12]
 8008e20:	4619      	mov	r1, r3
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e28:	441a      	add	r2, r3
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	899b      	ldrh	r3, [r3, #12]
 8008e38:	461a      	mov	r2, r3
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008e40:	fb02 f200 	mul.w	r2, r2, r0
 8008e44:	1a9b      	subs	r3, r3, r2
 8008e46:	18ca      	adds	r2, r1, r3
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008e4c:	2300      	movs	r3, #0
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3718      	adds	r7, #24
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}

08008e56 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008e56:	b580      	push	{r7, lr}
 8008e58:	b086      	sub	sp, #24
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
 8008e5e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	695b      	ldr	r3, [r3, #20]
 8008e6a:	3320      	adds	r3, #32
 8008e6c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	69db      	ldr	r3, [r3, #28]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d003      	beq.n	8008e7e <dir_next+0x28>
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e7c:	d301      	bcc.n	8008e82 <dir_next+0x2c>
 8008e7e:	2304      	movs	r3, #4
 8008e80:	e0bb      	b.n	8008ffa <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	899b      	ldrh	r3, [r3, #12]
 8008e86:	461a      	mov	r2, r3
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e8e:	fb02 f201 	mul.w	r2, r2, r1
 8008e92:	1a9b      	subs	r3, r3, r2
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	f040 809d 	bne.w	8008fd4 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	69db      	ldr	r3, [r3, #28]
 8008e9e:	1c5a      	adds	r2, r3, #1
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	699b      	ldr	r3, [r3, #24]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d10b      	bne.n	8008ec4 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	095b      	lsrs	r3, r3, #5
 8008eb0:	68fa      	ldr	r2, [r7, #12]
 8008eb2:	8912      	ldrh	r2, [r2, #8]
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	f0c0 808d 	bcc.w	8008fd4 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	61da      	str	r2, [r3, #28]
 8008ec0:	2304      	movs	r3, #4
 8008ec2:	e09a      	b.n	8008ffa <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	899b      	ldrh	r3, [r3, #12]
 8008ec8:	461a      	mov	r2, r3
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ed0:	68fa      	ldr	r2, [r7, #12]
 8008ed2:	8952      	ldrh	r2, [r2, #10]
 8008ed4:	3a01      	subs	r2, #1
 8008ed6:	4013      	ands	r3, r2
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d17b      	bne.n	8008fd4 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	699b      	ldr	r3, [r3, #24]
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	4610      	mov	r0, r2
 8008ee6:	f7ff fc08 	bl	80086fa <get_fat>
 8008eea:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d801      	bhi.n	8008ef6 <dir_next+0xa0>
 8008ef2:	2302      	movs	r3, #2
 8008ef4:	e081      	b.n	8008ffa <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008efc:	d101      	bne.n	8008f02 <dir_next+0xac>
 8008efe:	2301      	movs	r3, #1
 8008f00:	e07b      	b.n	8008ffa <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	699b      	ldr	r3, [r3, #24]
 8008f06:	697a      	ldr	r2, [r7, #20]
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	d359      	bcc.n	8008fc0 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d104      	bne.n	8008f1c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2200      	movs	r2, #0
 8008f16:	61da      	str	r2, [r3, #28]
 8008f18:	2304      	movs	r3, #4
 8008f1a:	e06e      	b.n	8008ffa <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	699b      	ldr	r3, [r3, #24]
 8008f22:	4619      	mov	r1, r3
 8008f24:	4610      	mov	r0, r2
 8008f26:	f7ff fe3d 	bl	8008ba4 <create_chain>
 8008f2a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d101      	bne.n	8008f36 <dir_next+0xe0>
 8008f32:	2307      	movs	r3, #7
 8008f34:	e061      	b.n	8008ffa <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	d101      	bne.n	8008f40 <dir_next+0xea>
 8008f3c:	2302      	movs	r3, #2
 8008f3e:	e05c      	b.n	8008ffa <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f46:	d101      	bne.n	8008f4c <dir_next+0xf6>
 8008f48:	2301      	movs	r3, #1
 8008f4a:	e056      	b.n	8008ffa <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008f4c:	68f8      	ldr	r0, [r7, #12]
 8008f4e:	f7ff fad3 	bl	80084f8 <sync_window>
 8008f52:	4603      	mov	r3, r0
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d001      	beq.n	8008f5c <dir_next+0x106>
 8008f58:	2301      	movs	r3, #1
 8008f5a:	e04e      	b.n	8008ffa <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	899b      	ldrh	r3, [r3, #12]
 8008f66:	461a      	mov	r2, r3
 8008f68:	2100      	movs	r1, #0
 8008f6a:	f7ff f8fc 	bl	8008166 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008f6e:	2300      	movs	r3, #0
 8008f70:	613b      	str	r3, [r7, #16]
 8008f72:	6979      	ldr	r1, [r7, #20]
 8008f74:	68f8      	ldr	r0, [r7, #12]
 8008f76:	f7ff fba1 	bl	80086bc <clust2sect>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	631a      	str	r2, [r3, #48]	; 0x30
 8008f80:	e012      	b.n	8008fa8 <dir_next+0x152>
						fs->wflag = 1;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2201      	movs	r2, #1
 8008f86:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008f88:	68f8      	ldr	r0, [r7, #12]
 8008f8a:	f7ff fab5 	bl	80084f8 <sync_window>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d001      	beq.n	8008f98 <dir_next+0x142>
 8008f94:	2301      	movs	r3, #1
 8008f96:	e030      	b.n	8008ffa <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	613b      	str	r3, [r7, #16]
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fa2:	1c5a      	adds	r2, r3, #1
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	631a      	str	r2, [r3, #48]	; 0x30
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	895b      	ldrh	r3, [r3, #10]
 8008fac:	461a      	mov	r2, r3
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d3e6      	bcc.n	8008f82 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	1ad2      	subs	r2, r2, r3
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	697a      	ldr	r2, [r7, #20]
 8008fc4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008fc6:	6979      	ldr	r1, [r7, #20]
 8008fc8:	68f8      	ldr	r0, [r7, #12]
 8008fca:	f7ff fb77 	bl	80086bc <clust2sect>
 8008fce:	4602      	mov	r2, r0
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	68ba      	ldr	r2, [r7, #8]
 8008fd8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	899b      	ldrh	r3, [r3, #12]
 8008fe4:	461a      	mov	r2, r3
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	fbb3 f0f2 	udiv	r0, r3, r2
 8008fec:	fb02 f200 	mul.w	r2, r2, r0
 8008ff0:	1a9b      	subs	r3, r3, r2
 8008ff2:	18ca      	adds	r2, r1, r3
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008ff8:	2300      	movs	r3, #0
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3718      	adds	r7, #24
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009002:	b580      	push	{r7, lr}
 8009004:	b086      	sub	sp, #24
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
 800900a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009012:	2100      	movs	r1, #0
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f7ff fe95 	bl	8008d44 <dir_sdi>
 800901a:	4603      	mov	r3, r0
 800901c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800901e:	7dfb      	ldrb	r3, [r7, #23]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d12b      	bne.n	800907c <dir_alloc+0x7a>
		n = 0;
 8009024:	2300      	movs	r3, #0
 8009026:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	69db      	ldr	r3, [r3, #28]
 800902c:	4619      	mov	r1, r3
 800902e:	68f8      	ldr	r0, [r7, #12]
 8009030:	f7ff faa6 	bl	8008580 <move_window>
 8009034:	4603      	mov	r3, r0
 8009036:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009038:	7dfb      	ldrb	r3, [r7, #23]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d11d      	bne.n	800907a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6a1b      	ldr	r3, [r3, #32]
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	2be5      	cmp	r3, #229	; 0xe5
 8009046:	d004      	beq.n	8009052 <dir_alloc+0x50>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6a1b      	ldr	r3, [r3, #32]
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d107      	bne.n	8009062 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	3301      	adds	r3, #1
 8009056:	613b      	str	r3, [r7, #16]
 8009058:	693a      	ldr	r2, [r7, #16]
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	429a      	cmp	r2, r3
 800905e:	d102      	bne.n	8009066 <dir_alloc+0x64>
 8009060:	e00c      	b.n	800907c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009062:	2300      	movs	r3, #0
 8009064:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009066:	2101      	movs	r1, #1
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f7ff fef4 	bl	8008e56 <dir_next>
 800906e:	4603      	mov	r3, r0
 8009070:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009072:	7dfb      	ldrb	r3, [r7, #23]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d0d7      	beq.n	8009028 <dir_alloc+0x26>
 8009078:	e000      	b.n	800907c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800907a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800907c:	7dfb      	ldrb	r3, [r7, #23]
 800907e:	2b04      	cmp	r3, #4
 8009080:	d101      	bne.n	8009086 <dir_alloc+0x84>
 8009082:	2307      	movs	r3, #7
 8009084:	75fb      	strb	r3, [r7, #23]
	return res;
 8009086:	7dfb      	ldrb	r3, [r7, #23]
}
 8009088:	4618      	mov	r0, r3
 800908a:	3718      	adds	r7, #24
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b084      	sub	sp, #16
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	331a      	adds	r3, #26
 800909e:	4618      	mov	r0, r3
 80090a0:	f7fe ffbe 	bl	8008020 <ld_word>
 80090a4:	4603      	mov	r3, r0
 80090a6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	2b03      	cmp	r3, #3
 80090ae:	d109      	bne.n	80090c4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	3314      	adds	r3, #20
 80090b4:	4618      	mov	r0, r3
 80090b6:	f7fe ffb3 	bl	8008020 <ld_word>
 80090ba:	4603      	mov	r3, r0
 80090bc:	041b      	lsls	r3, r3, #16
 80090be:	68fa      	ldr	r2, [r7, #12]
 80090c0:	4313      	orrs	r3, r2
 80090c2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80090c4:	68fb      	ldr	r3, [r7, #12]
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3710      	adds	r7, #16
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}

080090ce <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80090ce:	b580      	push	{r7, lr}
 80090d0:	b084      	sub	sp, #16
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	60f8      	str	r0, [r7, #12]
 80090d6:	60b9      	str	r1, [r7, #8]
 80090d8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	331a      	adds	r3, #26
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	b292      	uxth	r2, r2
 80090e2:	4611      	mov	r1, r2
 80090e4:	4618      	mov	r0, r3
 80090e6:	f7fe ffd6 	bl	8008096 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	2b03      	cmp	r3, #3
 80090f0:	d109      	bne.n	8009106 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	f103 0214 	add.w	r2, r3, #20
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	0c1b      	lsrs	r3, r3, #16
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	4619      	mov	r1, r3
 8009100:	4610      	mov	r0, r2
 8009102:	f7fe ffc8 	bl	8008096 <st_word>
	}
}
 8009106:	bf00      	nop
 8009108:	3710      	adds	r7, #16
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}

0800910e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800910e:	b580      	push	{r7, lr}
 8009110:	b086      	sub	sp, #24
 8009112:	af00      	add	r7, sp, #0
 8009114:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800911c:	2100      	movs	r1, #0
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f7ff fe10 	bl	8008d44 <dir_sdi>
 8009124:	4603      	mov	r3, r0
 8009126:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009128:	7dfb      	ldrb	r3, [r7, #23]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d001      	beq.n	8009132 <dir_find+0x24>
 800912e:	7dfb      	ldrb	r3, [r7, #23]
 8009130:	e03e      	b.n	80091b0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	69db      	ldr	r3, [r3, #28]
 8009136:	4619      	mov	r1, r3
 8009138:	6938      	ldr	r0, [r7, #16]
 800913a:	f7ff fa21 	bl	8008580 <move_window>
 800913e:	4603      	mov	r3, r0
 8009140:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009142:	7dfb      	ldrb	r3, [r7, #23]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d12f      	bne.n	80091a8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6a1b      	ldr	r3, [r3, #32]
 800914c:	781b      	ldrb	r3, [r3, #0]
 800914e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009150:	7bfb      	ldrb	r3, [r7, #15]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d102      	bne.n	800915c <dir_find+0x4e>
 8009156:	2304      	movs	r3, #4
 8009158:	75fb      	strb	r3, [r7, #23]
 800915a:	e028      	b.n	80091ae <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6a1b      	ldr	r3, [r3, #32]
 8009160:	330b      	adds	r3, #11
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009168:	b2da      	uxtb	r2, r3
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6a1b      	ldr	r3, [r3, #32]
 8009172:	330b      	adds	r3, #11
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	f003 0308 	and.w	r3, r3, #8
 800917a:	2b00      	cmp	r3, #0
 800917c:	d10a      	bne.n	8009194 <dir_find+0x86>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6a18      	ldr	r0, [r3, #32]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	3324      	adds	r3, #36	; 0x24
 8009186:	220b      	movs	r2, #11
 8009188:	4619      	mov	r1, r3
 800918a:	f7ff f807 	bl	800819c <mem_cmp>
 800918e:	4603      	mov	r3, r0
 8009190:	2b00      	cmp	r3, #0
 8009192:	d00b      	beq.n	80091ac <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009194:	2100      	movs	r1, #0
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f7ff fe5d 	bl	8008e56 <dir_next>
 800919c:	4603      	mov	r3, r0
 800919e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80091a0:	7dfb      	ldrb	r3, [r7, #23]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d0c5      	beq.n	8009132 <dir_find+0x24>
 80091a6:	e002      	b.n	80091ae <dir_find+0xa0>
		if (res != FR_OK) break;
 80091a8:	bf00      	nop
 80091aa:	e000      	b.n	80091ae <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80091ac:	bf00      	nop

	return res;
 80091ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3718      	adds	r7, #24
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80091c6:	2101      	movs	r1, #1
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f7ff ff1a 	bl	8009002 <dir_alloc>
 80091ce:	4603      	mov	r3, r0
 80091d0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80091d2:	7bfb      	ldrb	r3, [r7, #15]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d11c      	bne.n	8009212 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	69db      	ldr	r3, [r3, #28]
 80091dc:	4619      	mov	r1, r3
 80091de:	68b8      	ldr	r0, [r7, #8]
 80091e0:	f7ff f9ce 	bl	8008580 <move_window>
 80091e4:	4603      	mov	r3, r0
 80091e6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80091e8:	7bfb      	ldrb	r3, [r7, #15]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d111      	bne.n	8009212 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6a1b      	ldr	r3, [r3, #32]
 80091f2:	2220      	movs	r2, #32
 80091f4:	2100      	movs	r1, #0
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7fe ffb5 	bl	8008166 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6a18      	ldr	r0, [r3, #32]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	3324      	adds	r3, #36	; 0x24
 8009204:	220b      	movs	r2, #11
 8009206:	4619      	mov	r1, r3
 8009208:	f7fe ff8c 	bl	8008124 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	2201      	movs	r2, #1
 8009210:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009212:	7bfb      	ldrb	r3, [r7, #15]
}
 8009214:	4618      	mov	r0, r3
 8009216:	3710      	adds	r7, #16
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b088      	sub	sp, #32
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	60fb      	str	r3, [r7, #12]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	3324      	adds	r3, #36	; 0x24
 8009230:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009232:	220b      	movs	r2, #11
 8009234:	2120      	movs	r1, #32
 8009236:	68b8      	ldr	r0, [r7, #8]
 8009238:	f7fe ff95 	bl	8008166 <mem_set>
	si = i = 0; ni = 8;
 800923c:	2300      	movs	r3, #0
 800923e:	613b      	str	r3, [r7, #16]
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	61fb      	str	r3, [r7, #28]
 8009244:	2308      	movs	r3, #8
 8009246:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009248:	69fb      	ldr	r3, [r7, #28]
 800924a:	1c5a      	adds	r2, r3, #1
 800924c:	61fa      	str	r2, [r7, #28]
 800924e:	68fa      	ldr	r2, [r7, #12]
 8009250:	4413      	add	r3, r2
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009256:	7efb      	ldrb	r3, [r7, #27]
 8009258:	2b20      	cmp	r3, #32
 800925a:	d94e      	bls.n	80092fa <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800925c:	7efb      	ldrb	r3, [r7, #27]
 800925e:	2b2f      	cmp	r3, #47	; 0x2f
 8009260:	d006      	beq.n	8009270 <create_name+0x54>
 8009262:	7efb      	ldrb	r3, [r7, #27]
 8009264:	2b5c      	cmp	r3, #92	; 0x5c
 8009266:	d110      	bne.n	800928a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009268:	e002      	b.n	8009270 <create_name+0x54>
 800926a:	69fb      	ldr	r3, [r7, #28]
 800926c:	3301      	adds	r3, #1
 800926e:	61fb      	str	r3, [r7, #28]
 8009270:	68fa      	ldr	r2, [r7, #12]
 8009272:	69fb      	ldr	r3, [r7, #28]
 8009274:	4413      	add	r3, r2
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	2b2f      	cmp	r3, #47	; 0x2f
 800927a:	d0f6      	beq.n	800926a <create_name+0x4e>
 800927c:	68fa      	ldr	r2, [r7, #12]
 800927e:	69fb      	ldr	r3, [r7, #28]
 8009280:	4413      	add	r3, r2
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	2b5c      	cmp	r3, #92	; 0x5c
 8009286:	d0f0      	beq.n	800926a <create_name+0x4e>
			break;
 8009288:	e038      	b.n	80092fc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800928a:	7efb      	ldrb	r3, [r7, #27]
 800928c:	2b2e      	cmp	r3, #46	; 0x2e
 800928e:	d003      	beq.n	8009298 <create_name+0x7c>
 8009290:	693a      	ldr	r2, [r7, #16]
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	429a      	cmp	r2, r3
 8009296:	d30c      	bcc.n	80092b2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	2b0b      	cmp	r3, #11
 800929c:	d002      	beq.n	80092a4 <create_name+0x88>
 800929e:	7efb      	ldrb	r3, [r7, #27]
 80092a0:	2b2e      	cmp	r3, #46	; 0x2e
 80092a2:	d001      	beq.n	80092a8 <create_name+0x8c>
 80092a4:	2306      	movs	r3, #6
 80092a6:	e044      	b.n	8009332 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80092a8:	2308      	movs	r3, #8
 80092aa:	613b      	str	r3, [r7, #16]
 80092ac:	230b      	movs	r3, #11
 80092ae:	617b      	str	r3, [r7, #20]
			continue;
 80092b0:	e022      	b.n	80092f8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80092b2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	da04      	bge.n	80092c4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80092ba:	7efb      	ldrb	r3, [r7, #27]
 80092bc:	3b80      	subs	r3, #128	; 0x80
 80092be:	4a1f      	ldr	r2, [pc, #124]	; (800933c <create_name+0x120>)
 80092c0:	5cd3      	ldrb	r3, [r2, r3]
 80092c2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80092c4:	7efb      	ldrb	r3, [r7, #27]
 80092c6:	4619      	mov	r1, r3
 80092c8:	481d      	ldr	r0, [pc, #116]	; (8009340 <create_name+0x124>)
 80092ca:	f7fe ff8e 	bl	80081ea <chk_chr>
 80092ce:	4603      	mov	r3, r0
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d001      	beq.n	80092d8 <create_name+0xbc>
 80092d4:	2306      	movs	r3, #6
 80092d6:	e02c      	b.n	8009332 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80092d8:	7efb      	ldrb	r3, [r7, #27]
 80092da:	2b60      	cmp	r3, #96	; 0x60
 80092dc:	d905      	bls.n	80092ea <create_name+0xce>
 80092de:	7efb      	ldrb	r3, [r7, #27]
 80092e0:	2b7a      	cmp	r3, #122	; 0x7a
 80092e2:	d802      	bhi.n	80092ea <create_name+0xce>
 80092e4:	7efb      	ldrb	r3, [r7, #27]
 80092e6:	3b20      	subs	r3, #32
 80092e8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	1c5a      	adds	r2, r3, #1
 80092ee:	613a      	str	r2, [r7, #16]
 80092f0:	68ba      	ldr	r2, [r7, #8]
 80092f2:	4413      	add	r3, r2
 80092f4:	7efa      	ldrb	r2, [r7, #27]
 80092f6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80092f8:	e7a6      	b.n	8009248 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80092fa:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80092fc:	68fa      	ldr	r2, [r7, #12]
 80092fe:	69fb      	ldr	r3, [r7, #28]
 8009300:	441a      	add	r2, r3
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d101      	bne.n	8009310 <create_name+0xf4>
 800930c:	2306      	movs	r3, #6
 800930e:	e010      	b.n	8009332 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	2be5      	cmp	r3, #229	; 0xe5
 8009316:	d102      	bne.n	800931e <create_name+0x102>
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	2205      	movs	r2, #5
 800931c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800931e:	7efb      	ldrb	r3, [r7, #27]
 8009320:	2b20      	cmp	r3, #32
 8009322:	d801      	bhi.n	8009328 <create_name+0x10c>
 8009324:	2204      	movs	r2, #4
 8009326:	e000      	b.n	800932a <create_name+0x10e>
 8009328:	2200      	movs	r2, #0
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	330b      	adds	r3, #11
 800932e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009330:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009332:	4618      	mov	r0, r3
 8009334:	3720      	adds	r7, #32
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}
 800933a:	bf00      	nop
 800933c:	0801c29c 	.word	0x0801c29c
 8009340:	080190f0 	.word	0x080190f0

08009344 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b086      	sub	sp, #24
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009358:	e002      	b.n	8009360 <follow_path+0x1c>
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	3301      	adds	r3, #1
 800935e:	603b      	str	r3, [r7, #0]
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	2b2f      	cmp	r3, #47	; 0x2f
 8009366:	d0f8      	beq.n	800935a <follow_path+0x16>
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	2b5c      	cmp	r3, #92	; 0x5c
 800936e:	d0f4      	beq.n	800935a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	2200      	movs	r2, #0
 8009374:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	2b1f      	cmp	r3, #31
 800937c:	d80a      	bhi.n	8009394 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2280      	movs	r2, #128	; 0x80
 8009382:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009386:	2100      	movs	r1, #0
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f7ff fcdb 	bl	8008d44 <dir_sdi>
 800938e:	4603      	mov	r3, r0
 8009390:	75fb      	strb	r3, [r7, #23]
 8009392:	e048      	b.n	8009426 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009394:	463b      	mov	r3, r7
 8009396:	4619      	mov	r1, r3
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f7ff ff3f 	bl	800921c <create_name>
 800939e:	4603      	mov	r3, r0
 80093a0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80093a2:	7dfb      	ldrb	r3, [r7, #23]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d139      	bne.n	800941c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f7ff feb0 	bl	800910e <dir_find>
 80093ae:	4603      	mov	r3, r0
 80093b0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80093b8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80093ba:	7dfb      	ldrb	r3, [r7, #23]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d00a      	beq.n	80093d6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80093c0:	7dfb      	ldrb	r3, [r7, #23]
 80093c2:	2b04      	cmp	r3, #4
 80093c4:	d12c      	bne.n	8009420 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80093c6:	7afb      	ldrb	r3, [r7, #11]
 80093c8:	f003 0304 	and.w	r3, r3, #4
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d127      	bne.n	8009420 <follow_path+0xdc>
 80093d0:	2305      	movs	r3, #5
 80093d2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80093d4:	e024      	b.n	8009420 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80093d6:	7afb      	ldrb	r3, [r7, #11]
 80093d8:	f003 0304 	and.w	r3, r3, #4
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d121      	bne.n	8009424 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	799b      	ldrb	r3, [r3, #6]
 80093e4:	f003 0310 	and.w	r3, r3, #16
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d102      	bne.n	80093f2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80093ec:	2305      	movs	r3, #5
 80093ee:	75fb      	strb	r3, [r7, #23]
 80093f0:	e019      	b.n	8009426 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	695b      	ldr	r3, [r3, #20]
 80093fc:	68fa      	ldr	r2, [r7, #12]
 80093fe:	8992      	ldrh	r2, [r2, #12]
 8009400:	fbb3 f0f2 	udiv	r0, r3, r2
 8009404:	fb02 f200 	mul.w	r2, r2, r0
 8009408:	1a9b      	subs	r3, r3, r2
 800940a:	440b      	add	r3, r1
 800940c:	4619      	mov	r1, r3
 800940e:	68f8      	ldr	r0, [r7, #12]
 8009410:	f7ff fe3e 	bl	8009090 <ld_clust>
 8009414:	4602      	mov	r2, r0
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800941a:	e7bb      	b.n	8009394 <follow_path+0x50>
			if (res != FR_OK) break;
 800941c:	bf00      	nop
 800941e:	e002      	b.n	8009426 <follow_path+0xe2>
				break;
 8009420:	bf00      	nop
 8009422:	e000      	b.n	8009426 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009424:	bf00      	nop
			}
		}
	}

	return res;
 8009426:	7dfb      	ldrb	r3, [r7, #23]
}
 8009428:	4618      	mov	r0, r3
 800942a:	3718      	adds	r7, #24
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009430:	b480      	push	{r7}
 8009432:	b087      	sub	sp, #28
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009438:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800943c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d031      	beq.n	80094aa <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	617b      	str	r3, [r7, #20]
 800944c:	e002      	b.n	8009454 <get_ldnumber+0x24>
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	3301      	adds	r3, #1
 8009452:	617b      	str	r3, [r7, #20]
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	2b20      	cmp	r3, #32
 800945a:	d903      	bls.n	8009464 <get_ldnumber+0x34>
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	2b3a      	cmp	r3, #58	; 0x3a
 8009462:	d1f4      	bne.n	800944e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	2b3a      	cmp	r3, #58	; 0x3a
 800946a:	d11c      	bne.n	80094a6 <get_ldnumber+0x76>
			tp = *path;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	1c5a      	adds	r2, r3, #1
 8009476:	60fa      	str	r2, [r7, #12]
 8009478:	781b      	ldrb	r3, [r3, #0]
 800947a:	3b30      	subs	r3, #48	; 0x30
 800947c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	2b09      	cmp	r3, #9
 8009482:	d80e      	bhi.n	80094a2 <get_ldnumber+0x72>
 8009484:	68fa      	ldr	r2, [r7, #12]
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	429a      	cmp	r2, r3
 800948a:	d10a      	bne.n	80094a2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d107      	bne.n	80094a2 <get_ldnumber+0x72>
					vol = (int)i;
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	3301      	adds	r3, #1
 800949a:	617b      	str	r3, [r7, #20]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	697a      	ldr	r2, [r7, #20]
 80094a0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	e002      	b.n	80094ac <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80094a6:	2300      	movs	r3, #0
 80094a8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80094aa:	693b      	ldr	r3, [r7, #16]
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	371c      	adds	r7, #28
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr

080094b8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2200      	movs	r2, #0
 80094c6:	70da      	strb	r2, [r3, #3]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80094ce:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80094d0:	6839      	ldr	r1, [r7, #0]
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f7ff f854 	bl	8008580 <move_window>
 80094d8:	4603      	mov	r3, r0
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d001      	beq.n	80094e2 <check_fs+0x2a>
 80094de:	2304      	movs	r3, #4
 80094e0:	e038      	b.n	8009554 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	3334      	adds	r3, #52	; 0x34
 80094e6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7fe fd98 	bl	8008020 <ld_word>
 80094f0:	4603      	mov	r3, r0
 80094f2:	461a      	mov	r2, r3
 80094f4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d001      	beq.n	8009500 <check_fs+0x48>
 80094fc:	2303      	movs	r3, #3
 80094fe:	e029      	b.n	8009554 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009506:	2be9      	cmp	r3, #233	; 0xe9
 8009508:	d009      	beq.n	800951e <check_fs+0x66>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009510:	2beb      	cmp	r3, #235	; 0xeb
 8009512:	d11e      	bne.n	8009552 <check_fs+0x9a>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800951a:	2b90      	cmp	r3, #144	; 0x90
 800951c:	d119      	bne.n	8009552 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	3334      	adds	r3, #52	; 0x34
 8009522:	3336      	adds	r3, #54	; 0x36
 8009524:	4618      	mov	r0, r3
 8009526:	f7fe fd93 	bl	8008050 <ld_dword>
 800952a:	4603      	mov	r3, r0
 800952c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009530:	4a0a      	ldr	r2, [pc, #40]	; (800955c <check_fs+0xa4>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d101      	bne.n	800953a <check_fs+0x82>
 8009536:	2300      	movs	r3, #0
 8009538:	e00c      	b.n	8009554 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	3334      	adds	r3, #52	; 0x34
 800953e:	3352      	adds	r3, #82	; 0x52
 8009540:	4618      	mov	r0, r3
 8009542:	f7fe fd85 	bl	8008050 <ld_dword>
 8009546:	4603      	mov	r3, r0
 8009548:	4a05      	ldr	r2, [pc, #20]	; (8009560 <check_fs+0xa8>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d101      	bne.n	8009552 <check_fs+0x9a>
 800954e:	2300      	movs	r3, #0
 8009550:	e000      	b.n	8009554 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009552:	2302      	movs	r3, #2
}
 8009554:	4618      	mov	r0, r3
 8009556:	3708      	adds	r7, #8
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}
 800955c:	00544146 	.word	0x00544146
 8009560:	33544146 	.word	0x33544146

08009564 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b096      	sub	sp, #88	; 0x58
 8009568:	af00      	add	r7, sp, #0
 800956a:	60f8      	str	r0, [r7, #12]
 800956c:	60b9      	str	r1, [r7, #8]
 800956e:	4613      	mov	r3, r2
 8009570:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	2200      	movs	r2, #0
 8009576:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009578:	68f8      	ldr	r0, [r7, #12]
 800957a:	f7ff ff59 	bl	8009430 <get_ldnumber>
 800957e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009582:	2b00      	cmp	r3, #0
 8009584:	da01      	bge.n	800958a <find_volume+0x26>
 8009586:	230b      	movs	r3, #11
 8009588:	e265      	b.n	8009a56 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800958a:	4ab0      	ldr	r2, [pc, #704]	; (800984c <find_volume+0x2e8>)
 800958c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800958e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009592:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009596:	2b00      	cmp	r3, #0
 8009598:	d101      	bne.n	800959e <find_volume+0x3a>
 800959a:	230c      	movs	r3, #12
 800959c:	e25b      	b.n	8009a56 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095a2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80095a4:	79fb      	ldrb	r3, [r7, #7]
 80095a6:	f023 0301 	bic.w	r3, r3, #1
 80095aa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80095ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d01a      	beq.n	80095ea <find_volume+0x86>
		stat = disk_status(fs->drv);
 80095b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b6:	785b      	ldrb	r3, [r3, #1]
 80095b8:	4618      	mov	r0, r3
 80095ba:	f7fe fc93 	bl	8007ee4 <disk_status>
 80095be:	4603      	mov	r3, r0
 80095c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80095c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80095c8:	f003 0301 	and.w	r3, r3, #1
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d10c      	bne.n	80095ea <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80095d0:	79fb      	ldrb	r3, [r7, #7]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d007      	beq.n	80095e6 <find_volume+0x82>
 80095d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80095da:	f003 0304 	and.w	r3, r3, #4
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d001      	beq.n	80095e6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80095e2:	230a      	movs	r3, #10
 80095e4:	e237      	b.n	8009a56 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 80095e6:	2300      	movs	r3, #0
 80095e8:	e235      	b.n	8009a56 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80095ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ec:	2200      	movs	r2, #0
 80095ee:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80095f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095f2:	b2da      	uxtb	r2, r3
 80095f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095f6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80095f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095fa:	785b      	ldrb	r3, [r3, #1]
 80095fc:	4618      	mov	r0, r3
 80095fe:	f7fe fc8b 	bl	8007f18 <disk_initialize>
 8009602:	4603      	mov	r3, r0
 8009604:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009608:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800960c:	f003 0301 	and.w	r3, r3, #1
 8009610:	2b00      	cmp	r3, #0
 8009612:	d001      	beq.n	8009618 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009614:	2303      	movs	r3, #3
 8009616:	e21e      	b.n	8009a56 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009618:	79fb      	ldrb	r3, [r7, #7]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d007      	beq.n	800962e <find_volume+0xca>
 800961e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009622:	f003 0304 	and.w	r3, r3, #4
 8009626:	2b00      	cmp	r3, #0
 8009628:	d001      	beq.n	800962e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800962a:	230a      	movs	r3, #10
 800962c:	e213      	b.n	8009a56 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800962e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009630:	7858      	ldrb	r0, [r3, #1]
 8009632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009634:	330c      	adds	r3, #12
 8009636:	461a      	mov	r2, r3
 8009638:	2102      	movs	r1, #2
 800963a:	f7fe fcd3 	bl	8007fe4 <disk_ioctl>
 800963e:	4603      	mov	r3, r0
 8009640:	2b00      	cmp	r3, #0
 8009642:	d001      	beq.n	8009648 <find_volume+0xe4>
 8009644:	2301      	movs	r3, #1
 8009646:	e206      	b.n	8009a56 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8009648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800964a:	899b      	ldrh	r3, [r3, #12]
 800964c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009650:	d80d      	bhi.n	800966e <find_volume+0x10a>
 8009652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009654:	899b      	ldrh	r3, [r3, #12]
 8009656:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800965a:	d308      	bcc.n	800966e <find_volume+0x10a>
 800965c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800965e:	899b      	ldrh	r3, [r3, #12]
 8009660:	461a      	mov	r2, r3
 8009662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009664:	899b      	ldrh	r3, [r3, #12]
 8009666:	3b01      	subs	r3, #1
 8009668:	4013      	ands	r3, r2
 800966a:	2b00      	cmp	r3, #0
 800966c:	d001      	beq.n	8009672 <find_volume+0x10e>
 800966e:	2301      	movs	r3, #1
 8009670:	e1f1      	b.n	8009a56 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009672:	2300      	movs	r3, #0
 8009674:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009676:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009678:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800967a:	f7ff ff1d 	bl	80094b8 <check_fs>
 800967e:	4603      	mov	r3, r0
 8009680:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009684:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009688:	2b02      	cmp	r3, #2
 800968a:	d14b      	bne.n	8009724 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800968c:	2300      	movs	r3, #0
 800968e:	643b      	str	r3, [r7, #64]	; 0x40
 8009690:	e01f      	b.n	80096d2 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009694:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800969a:	011b      	lsls	r3, r3, #4
 800969c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80096a0:	4413      	add	r3, r2
 80096a2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80096a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a6:	3304      	adds	r3, #4
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d006      	beq.n	80096bc <find_volume+0x158>
 80096ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b0:	3308      	adds	r3, #8
 80096b2:	4618      	mov	r0, r3
 80096b4:	f7fe fccc 	bl	8008050 <ld_dword>
 80096b8:	4602      	mov	r2, r0
 80096ba:	e000      	b.n	80096be <find_volume+0x15a>
 80096bc:	2200      	movs	r2, #0
 80096be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096c0:	009b      	lsls	r3, r3, #2
 80096c2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80096c6:	440b      	add	r3, r1
 80096c8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80096cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096ce:	3301      	adds	r3, #1
 80096d0:	643b      	str	r3, [r7, #64]	; 0x40
 80096d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096d4:	2b03      	cmp	r3, #3
 80096d6:	d9dc      	bls.n	8009692 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80096d8:	2300      	movs	r3, #0
 80096da:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80096dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d002      	beq.n	80096e8 <find_volume+0x184>
 80096e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096e4:	3b01      	subs	r3, #1
 80096e6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80096e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80096f0:	4413      	add	r3, r2
 80096f2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80096f6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80096f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d005      	beq.n	800970a <find_volume+0x1a6>
 80096fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009700:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009702:	f7ff fed9 	bl	80094b8 <check_fs>
 8009706:	4603      	mov	r3, r0
 8009708:	e000      	b.n	800970c <find_volume+0x1a8>
 800970a:	2303      	movs	r3, #3
 800970c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009710:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009714:	2b01      	cmp	r3, #1
 8009716:	d905      	bls.n	8009724 <find_volume+0x1c0>
 8009718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800971a:	3301      	adds	r3, #1
 800971c:	643b      	str	r3, [r7, #64]	; 0x40
 800971e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009720:	2b03      	cmp	r3, #3
 8009722:	d9e1      	bls.n	80096e8 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009724:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009728:	2b04      	cmp	r3, #4
 800972a:	d101      	bne.n	8009730 <find_volume+0x1cc>
 800972c:	2301      	movs	r3, #1
 800972e:	e192      	b.n	8009a56 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009730:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009734:	2b01      	cmp	r3, #1
 8009736:	d901      	bls.n	800973c <find_volume+0x1d8>
 8009738:	230d      	movs	r3, #13
 800973a:	e18c      	b.n	8009a56 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800973c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800973e:	3334      	adds	r3, #52	; 0x34
 8009740:	330b      	adds	r3, #11
 8009742:	4618      	mov	r0, r3
 8009744:	f7fe fc6c 	bl	8008020 <ld_word>
 8009748:	4603      	mov	r3, r0
 800974a:	461a      	mov	r2, r3
 800974c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800974e:	899b      	ldrh	r3, [r3, #12]
 8009750:	429a      	cmp	r2, r3
 8009752:	d001      	beq.n	8009758 <find_volume+0x1f4>
 8009754:	230d      	movs	r3, #13
 8009756:	e17e      	b.n	8009a56 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800975a:	3334      	adds	r3, #52	; 0x34
 800975c:	3316      	adds	r3, #22
 800975e:	4618      	mov	r0, r3
 8009760:	f7fe fc5e 	bl	8008020 <ld_word>
 8009764:	4603      	mov	r3, r0
 8009766:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800976a:	2b00      	cmp	r3, #0
 800976c:	d106      	bne.n	800977c <find_volume+0x218>
 800976e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009770:	3334      	adds	r3, #52	; 0x34
 8009772:	3324      	adds	r3, #36	; 0x24
 8009774:	4618      	mov	r0, r3
 8009776:	f7fe fc6b 	bl	8008050 <ld_dword>
 800977a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800977c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800977e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009780:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009784:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800978a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800978c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800978e:	789b      	ldrb	r3, [r3, #2]
 8009790:	2b01      	cmp	r3, #1
 8009792:	d005      	beq.n	80097a0 <find_volume+0x23c>
 8009794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009796:	789b      	ldrb	r3, [r3, #2]
 8009798:	2b02      	cmp	r3, #2
 800979a:	d001      	beq.n	80097a0 <find_volume+0x23c>
 800979c:	230d      	movs	r3, #13
 800979e:	e15a      	b.n	8009a56 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80097a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a2:	789b      	ldrb	r3, [r3, #2]
 80097a4:	461a      	mov	r2, r3
 80097a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097a8:	fb02 f303 	mul.w	r3, r2, r3
 80097ac:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80097ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097b4:	b29a      	uxth	r2, r3
 80097b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80097ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097bc:	895b      	ldrh	r3, [r3, #10]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d008      	beq.n	80097d4 <find_volume+0x270>
 80097c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c4:	895b      	ldrh	r3, [r3, #10]
 80097c6:	461a      	mov	r2, r3
 80097c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ca:	895b      	ldrh	r3, [r3, #10]
 80097cc:	3b01      	subs	r3, #1
 80097ce:	4013      	ands	r3, r2
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d001      	beq.n	80097d8 <find_volume+0x274>
 80097d4:	230d      	movs	r3, #13
 80097d6:	e13e      	b.n	8009a56 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80097d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097da:	3334      	adds	r3, #52	; 0x34
 80097dc:	3311      	adds	r3, #17
 80097de:	4618      	mov	r0, r3
 80097e0:	f7fe fc1e 	bl	8008020 <ld_word>
 80097e4:	4603      	mov	r3, r0
 80097e6:	461a      	mov	r2, r3
 80097e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ea:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80097ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ee:	891b      	ldrh	r3, [r3, #8]
 80097f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097f2:	8992      	ldrh	r2, [r2, #12]
 80097f4:	0952      	lsrs	r2, r2, #5
 80097f6:	b292      	uxth	r2, r2
 80097f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80097fc:	fb02 f201 	mul.w	r2, r2, r1
 8009800:	1a9b      	subs	r3, r3, r2
 8009802:	b29b      	uxth	r3, r3
 8009804:	2b00      	cmp	r3, #0
 8009806:	d001      	beq.n	800980c <find_volume+0x2a8>
 8009808:	230d      	movs	r3, #13
 800980a:	e124      	b.n	8009a56 <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800980c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800980e:	3334      	adds	r3, #52	; 0x34
 8009810:	3313      	adds	r3, #19
 8009812:	4618      	mov	r0, r3
 8009814:	f7fe fc04 	bl	8008020 <ld_word>
 8009818:	4603      	mov	r3, r0
 800981a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800981c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800981e:	2b00      	cmp	r3, #0
 8009820:	d106      	bne.n	8009830 <find_volume+0x2cc>
 8009822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009824:	3334      	adds	r3, #52	; 0x34
 8009826:	3320      	adds	r3, #32
 8009828:	4618      	mov	r0, r3
 800982a:	f7fe fc11 	bl	8008050 <ld_dword>
 800982e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009832:	3334      	adds	r3, #52	; 0x34
 8009834:	330e      	adds	r3, #14
 8009836:	4618      	mov	r0, r3
 8009838:	f7fe fbf2 	bl	8008020 <ld_word>
 800983c:	4603      	mov	r3, r0
 800983e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009840:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009842:	2b00      	cmp	r3, #0
 8009844:	d104      	bne.n	8009850 <find_volume+0x2ec>
 8009846:	230d      	movs	r3, #13
 8009848:	e105      	b.n	8009a56 <find_volume+0x4f2>
 800984a:	bf00      	nop
 800984c:	200011e8 	.word	0x200011e8

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009850:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009854:	4413      	add	r3, r2
 8009856:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009858:	8911      	ldrh	r1, [r2, #8]
 800985a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800985c:	8992      	ldrh	r2, [r2, #12]
 800985e:	0952      	lsrs	r2, r2, #5
 8009860:	b292      	uxth	r2, r2
 8009862:	fbb1 f2f2 	udiv	r2, r1, r2
 8009866:	b292      	uxth	r2, r2
 8009868:	4413      	add	r3, r2
 800986a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800986c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800986e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009870:	429a      	cmp	r2, r3
 8009872:	d201      	bcs.n	8009878 <find_volume+0x314>
 8009874:	230d      	movs	r3, #13
 8009876:	e0ee      	b.n	8009a56 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009878:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800987a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800987c:	1ad3      	subs	r3, r2, r3
 800987e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009880:	8952      	ldrh	r2, [r2, #10]
 8009882:	fbb3 f3f2 	udiv	r3, r3, r2
 8009886:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988a:	2b00      	cmp	r3, #0
 800988c:	d101      	bne.n	8009892 <find_volume+0x32e>
 800988e:	230d      	movs	r3, #13
 8009890:	e0e1      	b.n	8009a56 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8009892:	2303      	movs	r3, #3
 8009894:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800989e:	4293      	cmp	r3, r2
 80098a0:	d802      	bhi.n	80098a8 <find_volume+0x344>
 80098a2:	2302      	movs	r3, #2
 80098a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80098a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098aa:	f640 72f5 	movw	r2, #4085	; 0xff5
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d802      	bhi.n	80098b8 <find_volume+0x354>
 80098b2:	2301      	movs	r3, #1
 80098b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80098b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ba:	1c9a      	adds	r2, r3, #2
 80098bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098be:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80098c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80098c4:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80098c6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80098c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098ca:	441a      	add	r2, r3
 80098cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ce:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80098d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80098d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d4:	441a      	add	r2, r3
 80098d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098d8:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80098da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80098de:	2b03      	cmp	r3, #3
 80098e0:	d11e      	bne.n	8009920 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80098e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e4:	3334      	adds	r3, #52	; 0x34
 80098e6:	332a      	adds	r3, #42	; 0x2a
 80098e8:	4618      	mov	r0, r3
 80098ea:	f7fe fb99 	bl	8008020 <ld_word>
 80098ee:	4603      	mov	r3, r0
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d001      	beq.n	80098f8 <find_volume+0x394>
 80098f4:	230d      	movs	r3, #13
 80098f6:	e0ae      	b.n	8009a56 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80098f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098fa:	891b      	ldrh	r3, [r3, #8]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d001      	beq.n	8009904 <find_volume+0x3a0>
 8009900:	230d      	movs	r3, #13
 8009902:	e0a8      	b.n	8009a56 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009906:	3334      	adds	r3, #52	; 0x34
 8009908:	332c      	adds	r3, #44	; 0x2c
 800990a:	4618      	mov	r0, r3
 800990c:	f7fe fba0 	bl	8008050 <ld_dword>
 8009910:	4602      	mov	r2, r0
 8009912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009914:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009918:	699b      	ldr	r3, [r3, #24]
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	647b      	str	r3, [r7, #68]	; 0x44
 800991e:	e01f      	b.n	8009960 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009922:	891b      	ldrh	r3, [r3, #8]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d101      	bne.n	800992c <find_volume+0x3c8>
 8009928:	230d      	movs	r3, #13
 800992a:	e094      	b.n	8009a56 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800992c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800992e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009932:	441a      	add	r2, r3
 8009934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009936:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009938:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800993c:	2b02      	cmp	r3, #2
 800993e:	d103      	bne.n	8009948 <find_volume+0x3e4>
 8009940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009942:	699b      	ldr	r3, [r3, #24]
 8009944:	005b      	lsls	r3, r3, #1
 8009946:	e00a      	b.n	800995e <find_volume+0x3fa>
 8009948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800994a:	699a      	ldr	r2, [r3, #24]
 800994c:	4613      	mov	r3, r2
 800994e:	005b      	lsls	r3, r3, #1
 8009950:	4413      	add	r3, r2
 8009952:	085a      	lsrs	r2, r3, #1
 8009954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009956:	699b      	ldr	r3, [r3, #24]
 8009958:	f003 0301 	and.w	r3, r3, #1
 800995c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800995e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009962:	69da      	ldr	r2, [r3, #28]
 8009964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009966:	899b      	ldrh	r3, [r3, #12]
 8009968:	4619      	mov	r1, r3
 800996a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800996c:	440b      	add	r3, r1
 800996e:	3b01      	subs	r3, #1
 8009970:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009972:	8989      	ldrh	r1, [r1, #12]
 8009974:	fbb3 f3f1 	udiv	r3, r3, r1
 8009978:	429a      	cmp	r2, r3
 800997a:	d201      	bcs.n	8009980 <find_volume+0x41c>
 800997c:	230d      	movs	r3, #13
 800997e:	e06a      	b.n	8009a56 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009982:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009986:	615a      	str	r2, [r3, #20]
 8009988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800998a:	695a      	ldr	r2, [r3, #20]
 800998c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800998e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8009990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009992:	2280      	movs	r2, #128	; 0x80
 8009994:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009996:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800999a:	2b03      	cmp	r3, #3
 800999c:	d149      	bne.n	8009a32 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800999e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a0:	3334      	adds	r3, #52	; 0x34
 80099a2:	3330      	adds	r3, #48	; 0x30
 80099a4:	4618      	mov	r0, r3
 80099a6:	f7fe fb3b 	bl	8008020 <ld_word>
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d140      	bne.n	8009a32 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 80099b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099b2:	3301      	adds	r3, #1
 80099b4:	4619      	mov	r1, r3
 80099b6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80099b8:	f7fe fde2 	bl	8008580 <move_window>
 80099bc:	4603      	mov	r3, r0
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d137      	bne.n	8009a32 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 80099c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c4:	2200      	movs	r2, #0
 80099c6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80099c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ca:	3334      	adds	r3, #52	; 0x34
 80099cc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80099d0:	4618      	mov	r0, r3
 80099d2:	f7fe fb25 	bl	8008020 <ld_word>
 80099d6:	4603      	mov	r3, r0
 80099d8:	461a      	mov	r2, r3
 80099da:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80099de:	429a      	cmp	r2, r3
 80099e0:	d127      	bne.n	8009a32 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80099e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e4:	3334      	adds	r3, #52	; 0x34
 80099e6:	4618      	mov	r0, r3
 80099e8:	f7fe fb32 	bl	8008050 <ld_dword>
 80099ec:	4603      	mov	r3, r0
 80099ee:	4a1c      	ldr	r2, [pc, #112]	; (8009a60 <find_volume+0x4fc>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d11e      	bne.n	8009a32 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80099f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f6:	3334      	adds	r3, #52	; 0x34
 80099f8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80099fc:	4618      	mov	r0, r3
 80099fe:	f7fe fb27 	bl	8008050 <ld_dword>
 8009a02:	4603      	mov	r3, r0
 8009a04:	4a17      	ldr	r2, [pc, #92]	; (8009a64 <find_volume+0x500>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d113      	bne.n	8009a32 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a0c:	3334      	adds	r3, #52	; 0x34
 8009a0e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009a12:	4618      	mov	r0, r3
 8009a14:	f7fe fb1c 	bl	8008050 <ld_dword>
 8009a18:	4602      	mov	r2, r0
 8009a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a1c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a20:	3334      	adds	r3, #52	; 0x34
 8009a22:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009a26:	4618      	mov	r0, r3
 8009a28:	f7fe fb12 	bl	8008050 <ld_dword>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a30:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a34:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009a38:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009a3a:	4b0b      	ldr	r3, [pc, #44]	; (8009a68 <find_volume+0x504>)
 8009a3c:	881b      	ldrh	r3, [r3, #0]
 8009a3e:	3301      	adds	r3, #1
 8009a40:	b29a      	uxth	r2, r3
 8009a42:	4b09      	ldr	r3, [pc, #36]	; (8009a68 <find_volume+0x504>)
 8009a44:	801a      	strh	r2, [r3, #0]
 8009a46:	4b08      	ldr	r3, [pc, #32]	; (8009a68 <find_volume+0x504>)
 8009a48:	881a      	ldrh	r2, [r3, #0]
 8009a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a4c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009a4e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009a50:	f7fe fd2e 	bl	80084b0 <clear_lock>
#endif
	return FR_OK;
 8009a54:	2300      	movs	r3, #0
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3758      	adds	r7, #88	; 0x58
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	41615252 	.word	0x41615252
 8009a64:	61417272 	.word	0x61417272
 8009a68:	200011ec 	.word	0x200011ec

08009a6c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009a76:	2309      	movs	r3, #9
 8009a78:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d01c      	beq.n	8009aba <validate+0x4e>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d018      	beq.n	8009aba <validate+0x4e>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	781b      	ldrb	r3, [r3, #0]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d013      	beq.n	8009aba <validate+0x4e>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	889a      	ldrh	r2, [r3, #4]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	88db      	ldrh	r3, [r3, #6]
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d10c      	bne.n	8009aba <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	785b      	ldrb	r3, [r3, #1]
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f7fe fa1c 	bl	8007ee4 <disk_status>
 8009aac:	4603      	mov	r3, r0
 8009aae:	f003 0301 	and.w	r3, r3, #1
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d101      	bne.n	8009aba <validate+0x4e>
			res = FR_OK;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009aba:	7bfb      	ldrb	r3, [r7, #15]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d102      	bne.n	8009ac6 <validate+0x5a>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	e000      	b.n	8009ac8 <validate+0x5c>
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	683a      	ldr	r2, [r7, #0]
 8009aca:	6013      	str	r3, [r2, #0]
	return res;
 8009acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3710      	adds	r7, #16
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
	...

08009ad8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b088      	sub	sp, #32
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	60b9      	str	r1, [r7, #8]
 8009ae2:	4613      	mov	r3, r2
 8009ae4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009aea:	f107 0310 	add.w	r3, r7, #16
 8009aee:	4618      	mov	r0, r3
 8009af0:	f7ff fc9e 	bl	8009430 <get_ldnumber>
 8009af4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009af6:	69fb      	ldr	r3, [r7, #28]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	da01      	bge.n	8009b00 <f_mount+0x28>
 8009afc:	230b      	movs	r3, #11
 8009afe:	e02b      	b.n	8009b58 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009b00:	4a17      	ldr	r2, [pc, #92]	; (8009b60 <f_mount+0x88>)
 8009b02:	69fb      	ldr	r3, [r7, #28]
 8009b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b08:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009b0a:	69bb      	ldr	r3, [r7, #24]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d005      	beq.n	8009b1c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009b10:	69b8      	ldr	r0, [r7, #24]
 8009b12:	f7fe fccd 	bl	80084b0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009b16:	69bb      	ldr	r3, [r7, #24]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d002      	beq.n	8009b28 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	2200      	movs	r2, #0
 8009b26:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009b28:	68fa      	ldr	r2, [r7, #12]
 8009b2a:	490d      	ldr	r1, [pc, #52]	; (8009b60 <f_mount+0x88>)
 8009b2c:	69fb      	ldr	r3, [r7, #28]
 8009b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d002      	beq.n	8009b3e <f_mount+0x66>
 8009b38:	79fb      	ldrb	r3, [r7, #7]
 8009b3a:	2b01      	cmp	r3, #1
 8009b3c:	d001      	beq.n	8009b42 <f_mount+0x6a>
 8009b3e:	2300      	movs	r3, #0
 8009b40:	e00a      	b.n	8009b58 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009b42:	f107 010c 	add.w	r1, r7, #12
 8009b46:	f107 0308 	add.w	r3, r7, #8
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f7ff fd09 	bl	8009564 <find_volume>
 8009b52:	4603      	mov	r3, r0
 8009b54:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3720      	adds	r7, #32
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}
 8009b60:	200011e8 	.word	0x200011e8

08009b64 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b098      	sub	sp, #96	; 0x60
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	60f8      	str	r0, [r7, #12]
 8009b6c:	60b9      	str	r1, [r7, #8]
 8009b6e:	4613      	mov	r3, r2
 8009b70:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d101      	bne.n	8009b7c <f_open+0x18>
 8009b78:	2309      	movs	r3, #9
 8009b7a:	e1bb      	b.n	8009ef4 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009b7c:	79fb      	ldrb	r3, [r7, #7]
 8009b7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b82:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009b84:	79fa      	ldrb	r2, [r7, #7]
 8009b86:	f107 0110 	add.w	r1, r7, #16
 8009b8a:	f107 0308 	add.w	r3, r7, #8
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f7ff fce8 	bl	8009564 <find_volume>
 8009b94:	4603      	mov	r3, r0
 8009b96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8009b9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	f040 819f 	bne.w	8009ee2 <f_open+0x37e>
		dj.obj.fs = fs;
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009ba8:	68ba      	ldr	r2, [r7, #8]
 8009baa:	f107 0314 	add.w	r3, r7, #20
 8009bae:	4611      	mov	r1, r2
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f7ff fbc7 	bl	8009344 <follow_path>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009bbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d11a      	bne.n	8009bfa <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009bc4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009bc8:	b25b      	sxtb	r3, r3
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	da03      	bge.n	8009bd6 <f_open+0x72>
				res = FR_INVALID_NAME;
 8009bce:	2306      	movs	r3, #6
 8009bd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009bd4:	e011      	b.n	8009bfa <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009bd6:	79fb      	ldrb	r3, [r7, #7]
 8009bd8:	f023 0301 	bic.w	r3, r3, #1
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	bf14      	ite	ne
 8009be0:	2301      	movne	r3, #1
 8009be2:	2300      	moveq	r3, #0
 8009be4:	b2db      	uxtb	r3, r3
 8009be6:	461a      	mov	r2, r3
 8009be8:	f107 0314 	add.w	r3, r7, #20
 8009bec:	4611      	mov	r1, r2
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f7fe fb16 	bl	8008220 <chk_lock>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009bfa:	79fb      	ldrb	r3, [r7, #7]
 8009bfc:	f003 031c 	and.w	r3, r3, #28
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d07f      	beq.n	8009d04 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009c04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d017      	beq.n	8009c3c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009c0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c10:	2b04      	cmp	r3, #4
 8009c12:	d10e      	bne.n	8009c32 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009c14:	f7fe fb60 	bl	80082d8 <enq_lock>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d006      	beq.n	8009c2c <f_open+0xc8>
 8009c1e:	f107 0314 	add.w	r3, r7, #20
 8009c22:	4618      	mov	r0, r3
 8009c24:	f7ff fac8 	bl	80091b8 <dir_register>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	e000      	b.n	8009c2e <f_open+0xca>
 8009c2c:	2312      	movs	r3, #18
 8009c2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009c32:	79fb      	ldrb	r3, [r7, #7]
 8009c34:	f043 0308 	orr.w	r3, r3, #8
 8009c38:	71fb      	strb	r3, [r7, #7]
 8009c3a:	e010      	b.n	8009c5e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009c3c:	7ebb      	ldrb	r3, [r7, #26]
 8009c3e:	f003 0311 	and.w	r3, r3, #17
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d003      	beq.n	8009c4e <f_open+0xea>
					res = FR_DENIED;
 8009c46:	2307      	movs	r3, #7
 8009c48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009c4c:	e007      	b.n	8009c5e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009c4e:	79fb      	ldrb	r3, [r7, #7]
 8009c50:	f003 0304 	and.w	r3, r3, #4
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d002      	beq.n	8009c5e <f_open+0xfa>
 8009c58:	2308      	movs	r3, #8
 8009c5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009c5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d168      	bne.n	8009d38 <f_open+0x1d4>
 8009c66:	79fb      	ldrb	r3, [r7, #7]
 8009c68:	f003 0308 	and.w	r3, r3, #8
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d063      	beq.n	8009d38 <f_open+0x1d4>
				dw = GET_FATTIME();
 8009c70:	f7fd fa50 	bl	8007114 <get_fattime>
 8009c74:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c78:	330e      	adds	r3, #14
 8009c7a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f7fe fa25 	bl	80080cc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c84:	3316      	adds	r3, #22
 8009c86:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f7fe fa1f 	bl	80080cc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c90:	330b      	adds	r3, #11
 8009c92:	2220      	movs	r2, #32
 8009c94:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c9a:	4611      	mov	r1, r2
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f7ff f9f7 	bl	8009090 <ld_clust>
 8009ca2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009ca8:	2200      	movs	r2, #0
 8009caa:	4618      	mov	r0, r3
 8009cac:	f7ff fa0f 	bl	80090ce <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cb2:	331c      	adds	r3, #28
 8009cb4:	2100      	movs	r1, #0
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f7fe fa08 	bl	80080cc <st_dword>
					fs->wflag = 1;
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d037      	beq.n	8009d38 <f_open+0x1d4>
						dw = fs->winsect;
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ccc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009cce:	f107 0314 	add.w	r3, r7, #20
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f7fe feff 	bl	8008ada <remove_chain>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8009ce2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d126      	bne.n	8009d38 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f7fe fc46 	bl	8008580 <move_window>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009cfe:	3a01      	subs	r2, #1
 8009d00:	611a      	str	r2, [r3, #16]
 8009d02:	e019      	b.n	8009d38 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009d04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d115      	bne.n	8009d38 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009d0c:	7ebb      	ldrb	r3, [r7, #26]
 8009d0e:	f003 0310 	and.w	r3, r3, #16
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d003      	beq.n	8009d1e <f_open+0x1ba>
					res = FR_NO_FILE;
 8009d16:	2304      	movs	r3, #4
 8009d18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009d1c:	e00c      	b.n	8009d38 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009d1e:	79fb      	ldrb	r3, [r7, #7]
 8009d20:	f003 0302 	and.w	r3, r3, #2
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d007      	beq.n	8009d38 <f_open+0x1d4>
 8009d28:	7ebb      	ldrb	r3, [r7, #26]
 8009d2a:	f003 0301 	and.w	r3, r3, #1
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d002      	beq.n	8009d38 <f_open+0x1d4>
						res = FR_DENIED;
 8009d32:	2307      	movs	r3, #7
 8009d34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009d38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d128      	bne.n	8009d92 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009d40:	79fb      	ldrb	r3, [r7, #7]
 8009d42:	f003 0308 	and.w	r3, r3, #8
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d003      	beq.n	8009d52 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009d4a:	79fb      	ldrb	r3, [r7, #7]
 8009d4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d50:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009d5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009d60:	79fb      	ldrb	r3, [r7, #7]
 8009d62:	f023 0301 	bic.w	r3, r3, #1
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	bf14      	ite	ne
 8009d6a:	2301      	movne	r3, #1
 8009d6c:	2300      	moveq	r3, #0
 8009d6e:	b2db      	uxtb	r3, r3
 8009d70:	461a      	mov	r2, r3
 8009d72:	f107 0314 	add.w	r3, r7, #20
 8009d76:	4611      	mov	r1, r2
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f7fe facf 	bl	800831c <inc_lock>
 8009d7e:	4602      	mov	r2, r0
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	691b      	ldr	r3, [r3, #16]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d102      	bne.n	8009d92 <f_open+0x22e>
 8009d8c:	2302      	movs	r3, #2
 8009d8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009d92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	f040 80a3 	bne.w	8009ee2 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009da0:	4611      	mov	r1, r2
 8009da2:	4618      	mov	r0, r3
 8009da4:	f7ff f974 	bl	8009090 <ld_clust>
 8009da8:	4602      	mov	r2, r0
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009db0:	331c      	adds	r3, #28
 8009db2:	4618      	mov	r0, r3
 8009db4:	f7fe f94c 	bl	8008050 <ld_dword>
 8009db8:	4602      	mov	r2, r0
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009dc4:	693a      	ldr	r2, [r7, #16]
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	88da      	ldrh	r2, [r3, #6]
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	79fa      	ldrb	r2, [r7, #7]
 8009dd6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	2200      	movs	r2, #0
 8009de2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	2200      	movs	r2, #0
 8009de8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	3330      	adds	r3, #48	; 0x30
 8009dee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009df2:	2100      	movs	r1, #0
 8009df4:	4618      	mov	r0, r3
 8009df6:	f7fe f9b6 	bl	8008166 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009dfa:	79fb      	ldrb	r3, [r7, #7]
 8009dfc:	f003 0320 	and.w	r3, r3, #32
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d06e      	beq.n	8009ee2 <f_open+0x37e>
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	68db      	ldr	r3, [r3, #12]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d06a      	beq.n	8009ee2 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	68da      	ldr	r2, [r3, #12]
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	895b      	ldrh	r3, [r3, #10]
 8009e18:	461a      	mov	r2, r3
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	899b      	ldrh	r3, [r3, #12]
 8009e1e:	fb03 f302 	mul.w	r3, r3, r2
 8009e22:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	68db      	ldr	r3, [r3, #12]
 8009e2e:	657b      	str	r3, [r7, #84]	; 0x54
 8009e30:	e016      	b.n	8009e60 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009e36:	4618      	mov	r0, r3
 8009e38:	f7fe fc5f 	bl	80086fa <get_fat>
 8009e3c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009e3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	d802      	bhi.n	8009e4a <f_open+0x2e6>
 8009e44:	2302      	movs	r3, #2
 8009e46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009e4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009e4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e50:	d102      	bne.n	8009e58 <f_open+0x2f4>
 8009e52:	2301      	movs	r3, #1
 8009e54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009e58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009e5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e5c:	1ad3      	subs	r3, r2, r3
 8009e5e:	657b      	str	r3, [r7, #84]	; 0x54
 8009e60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d103      	bne.n	8009e70 <f_open+0x30c>
 8009e68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009e6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d8e0      	bhi.n	8009e32 <f_open+0x2ce>
				}
				fp->clust = clst;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009e74:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009e76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d131      	bne.n	8009ee2 <f_open+0x37e>
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	899b      	ldrh	r3, [r3, #12]
 8009e82:	461a      	mov	r2, r3
 8009e84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e86:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e8a:	fb02 f201 	mul.w	r2, r2, r1
 8009e8e:	1a9b      	subs	r3, r3, r2
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d026      	beq.n	8009ee2 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f7fe fc0f 	bl	80086bc <clust2sect>
 8009e9e:	6478      	str	r0, [r7, #68]	; 0x44
 8009ea0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d103      	bne.n	8009eae <f_open+0x34a>
						res = FR_INT_ERR;
 8009ea6:	2302      	movs	r3, #2
 8009ea8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009eac:	e019      	b.n	8009ee2 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	899b      	ldrh	r3, [r3, #12]
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009eb6:	fbb3 f2f2 	udiv	r2, r3, r2
 8009eba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ebc:	441a      	add	r2, r3
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	7858      	ldrb	r0, [r3, #1]
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	6a1a      	ldr	r2, [r3, #32]
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	f7fe f847 	bl	8007f64 <disk_read>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d002      	beq.n	8009ee2 <f_open+0x37e>
 8009edc:	2301      	movs	r3, #1
 8009ede:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009ee2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d002      	beq.n	8009ef0 <f_open+0x38c>
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2200      	movs	r2, #0
 8009eee:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009ef0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3760      	adds	r7, #96	; 0x60
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b08e      	sub	sp, #56	; 0x38
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	60b9      	str	r1, [r7, #8]
 8009f06:	607a      	str	r2, [r7, #4]
 8009f08:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	2200      	movs	r2, #0
 8009f12:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f107 0214 	add.w	r2, r7, #20
 8009f1a:	4611      	mov	r1, r2
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f7ff fda5 	bl	8009a6c <validate>
 8009f22:	4603      	mov	r3, r0
 8009f24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009f28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d107      	bne.n	8009f40 <f_read+0x44>
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	7d5b      	ldrb	r3, [r3, #21]
 8009f34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009f38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d002      	beq.n	8009f46 <f_read+0x4a>
 8009f40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009f44:	e135      	b.n	800a1b2 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	7d1b      	ldrb	r3, [r3, #20]
 8009f4a:	f003 0301 	and.w	r3, r3, #1
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d101      	bne.n	8009f56 <f_read+0x5a>
 8009f52:	2307      	movs	r3, #7
 8009f54:	e12d      	b.n	800a1b2 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	68da      	ldr	r2, [r3, #12]
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	699b      	ldr	r3, [r3, #24]
 8009f5e:	1ad3      	subs	r3, r2, r3
 8009f60:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009f62:	687a      	ldr	r2, [r7, #4]
 8009f64:	6a3b      	ldr	r3, [r7, #32]
 8009f66:	429a      	cmp	r2, r3
 8009f68:	f240 811e 	bls.w	800a1a8 <f_read+0x2ac>
 8009f6c:	6a3b      	ldr	r3, [r7, #32]
 8009f6e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009f70:	e11a      	b.n	800a1a8 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	699b      	ldr	r3, [r3, #24]
 8009f76:	697a      	ldr	r2, [r7, #20]
 8009f78:	8992      	ldrh	r2, [r2, #12]
 8009f7a:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f7e:	fb02 f201 	mul.w	r2, r2, r1
 8009f82:	1a9b      	subs	r3, r3, r2
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	f040 80d5 	bne.w	800a134 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	699b      	ldr	r3, [r3, #24]
 8009f8e:	697a      	ldr	r2, [r7, #20]
 8009f90:	8992      	ldrh	r2, [r2, #12]
 8009f92:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f96:	697a      	ldr	r2, [r7, #20]
 8009f98:	8952      	ldrh	r2, [r2, #10]
 8009f9a:	3a01      	subs	r2, #1
 8009f9c:	4013      	ands	r3, r2
 8009f9e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009fa0:	69fb      	ldr	r3, [r7, #28]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d12f      	bne.n	800a006 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	699b      	ldr	r3, [r3, #24]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d103      	bne.n	8009fb6 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	689b      	ldr	r3, [r3, #8]
 8009fb2:	633b      	str	r3, [r7, #48]	; 0x30
 8009fb4:	e013      	b.n	8009fde <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d007      	beq.n	8009fce <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	699b      	ldr	r3, [r3, #24]
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	68f8      	ldr	r0, [r7, #12]
 8009fc6:	f7fe fe85 	bl	8008cd4 <clmt_clust>
 8009fca:	6338      	str	r0, [r7, #48]	; 0x30
 8009fcc:	e007      	b.n	8009fde <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009fce:	68fa      	ldr	r2, [r7, #12]
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	69db      	ldr	r3, [r3, #28]
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	4610      	mov	r0, r2
 8009fd8:	f7fe fb8f 	bl	80086fa <get_fat>
 8009fdc:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	d804      	bhi.n	8009fee <f_read+0xf2>
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	2202      	movs	r2, #2
 8009fe8:	755a      	strb	r2, [r3, #21]
 8009fea:	2302      	movs	r3, #2
 8009fec:	e0e1      	b.n	800a1b2 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ff4:	d104      	bne.n	800a000 <f_read+0x104>
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	755a      	strb	r2, [r3, #21]
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	e0d8      	b.n	800a1b2 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a004:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a006:	697a      	ldr	r2, [r7, #20]
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	69db      	ldr	r3, [r3, #28]
 800a00c:	4619      	mov	r1, r3
 800a00e:	4610      	mov	r0, r2
 800a010:	f7fe fb54 	bl	80086bc <clust2sect>
 800a014:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a016:	69bb      	ldr	r3, [r7, #24]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d104      	bne.n	800a026 <f_read+0x12a>
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	2202      	movs	r2, #2
 800a020:	755a      	strb	r2, [r3, #21]
 800a022:	2302      	movs	r3, #2
 800a024:	e0c5      	b.n	800a1b2 <f_read+0x2b6>
			sect += csect;
 800a026:	69ba      	ldr	r2, [r7, #24]
 800a028:	69fb      	ldr	r3, [r7, #28]
 800a02a:	4413      	add	r3, r2
 800a02c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	899b      	ldrh	r3, [r3, #12]
 800a032:	461a      	mov	r2, r3
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	fbb3 f3f2 	udiv	r3, r3, r2
 800a03a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800a03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d041      	beq.n	800a0c6 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a042:	69fa      	ldr	r2, [r7, #28]
 800a044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a046:	4413      	add	r3, r2
 800a048:	697a      	ldr	r2, [r7, #20]
 800a04a:	8952      	ldrh	r2, [r2, #10]
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d905      	bls.n	800a05c <f_read+0x160>
					cc = fs->csize - csect;
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	895b      	ldrh	r3, [r3, #10]
 800a054:	461a      	mov	r2, r3
 800a056:	69fb      	ldr	r3, [r7, #28]
 800a058:	1ad3      	subs	r3, r2, r3
 800a05a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	7858      	ldrb	r0, [r3, #1]
 800a060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a062:	69ba      	ldr	r2, [r7, #24]
 800a064:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a066:	f7fd ff7d 	bl	8007f64 <disk_read>
 800a06a:	4603      	mov	r3, r0
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d004      	beq.n	800a07a <f_read+0x17e>
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2201      	movs	r2, #1
 800a074:	755a      	strb	r2, [r3, #21]
 800a076:	2301      	movs	r3, #1
 800a078:	e09b      	b.n	800a1b2 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	7d1b      	ldrb	r3, [r3, #20]
 800a07e:	b25b      	sxtb	r3, r3
 800a080:	2b00      	cmp	r3, #0
 800a082:	da18      	bge.n	800a0b6 <f_read+0x1ba>
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	6a1a      	ldr	r2, [r3, #32]
 800a088:	69bb      	ldr	r3, [r7, #24]
 800a08a:	1ad3      	subs	r3, r2, r3
 800a08c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a08e:	429a      	cmp	r2, r3
 800a090:	d911      	bls.n	800a0b6 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	6a1a      	ldr	r2, [r3, #32]
 800a096:	69bb      	ldr	r3, [r7, #24]
 800a098:	1ad3      	subs	r3, r2, r3
 800a09a:	697a      	ldr	r2, [r7, #20]
 800a09c:	8992      	ldrh	r2, [r2, #12]
 800a09e:	fb02 f303 	mul.w	r3, r2, r3
 800a0a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0a4:	18d0      	adds	r0, r2, r3
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	899b      	ldrh	r3, [r3, #12]
 800a0b0:	461a      	mov	r2, r3
 800a0b2:	f7fe f837 	bl	8008124 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	899b      	ldrh	r3, [r3, #12]
 800a0ba:	461a      	mov	r2, r3
 800a0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0be:	fb02 f303 	mul.w	r3, r2, r3
 800a0c2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800a0c4:	e05c      	b.n	800a180 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	6a1b      	ldr	r3, [r3, #32]
 800a0ca:	69ba      	ldr	r2, [r7, #24]
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d02e      	beq.n	800a12e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	7d1b      	ldrb	r3, [r3, #20]
 800a0d4:	b25b      	sxtb	r3, r3
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	da18      	bge.n	800a10c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	7858      	ldrb	r0, [r3, #1]
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	6a1a      	ldr	r2, [r3, #32]
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	f7fd ff5b 	bl	8007fa4 <disk_write>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d004      	beq.n	800a0fe <f_read+0x202>
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	755a      	strb	r2, [r3, #21]
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	e059      	b.n	800a1b2 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	7d1b      	ldrb	r3, [r3, #20]
 800a102:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a106:	b2da      	uxtb	r2, r3
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	7858      	ldrb	r0, [r3, #1]
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a116:	2301      	movs	r3, #1
 800a118:	69ba      	ldr	r2, [r7, #24]
 800a11a:	f7fd ff23 	bl	8007f64 <disk_read>
 800a11e:	4603      	mov	r3, r0
 800a120:	2b00      	cmp	r3, #0
 800a122:	d004      	beq.n	800a12e <f_read+0x232>
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2201      	movs	r2, #1
 800a128:	755a      	strb	r2, [r3, #21]
 800a12a:	2301      	movs	r3, #1
 800a12c:	e041      	b.n	800a1b2 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	69ba      	ldr	r2, [r7, #24]
 800a132:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	899b      	ldrh	r3, [r3, #12]
 800a138:	4618      	mov	r0, r3
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	699b      	ldr	r3, [r3, #24]
 800a13e:	697a      	ldr	r2, [r7, #20]
 800a140:	8992      	ldrh	r2, [r2, #12]
 800a142:	fbb3 f1f2 	udiv	r1, r3, r2
 800a146:	fb02 f201 	mul.w	r2, r2, r1
 800a14a:	1a9b      	subs	r3, r3, r2
 800a14c:	1ac3      	subs	r3, r0, r3
 800a14e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a150:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	429a      	cmp	r2, r3
 800a156:	d901      	bls.n	800a15c <f_read+0x260>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	699b      	ldr	r3, [r3, #24]
 800a166:	697a      	ldr	r2, [r7, #20]
 800a168:	8992      	ldrh	r2, [r2, #12]
 800a16a:	fbb3 f0f2 	udiv	r0, r3, r2
 800a16e:	fb02 f200 	mul.w	r2, r2, r0
 800a172:	1a9b      	subs	r3, r3, r2
 800a174:	440b      	add	r3, r1
 800a176:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a178:	4619      	mov	r1, r3
 800a17a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a17c:	f7fd ffd2 	bl	8008124 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a184:	4413      	add	r3, r2
 800a186:	627b      	str	r3, [r7, #36]	; 0x24
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	699a      	ldr	r2, [r3, #24]
 800a18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a18e:	441a      	add	r2, r3
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	619a      	str	r2, [r3, #24]
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	681a      	ldr	r2, [r3, #0]
 800a198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a19a:	441a      	add	r2, r3
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	601a      	str	r2, [r3, #0]
 800a1a0:	687a      	ldr	r2, [r7, #4]
 800a1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1a4:	1ad3      	subs	r3, r2, r3
 800a1a6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	f47f aee1 	bne.w	8009f72 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800a1b0:	2300      	movs	r3, #0
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3738      	adds	r7, #56	; 0x38
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}

0800a1ba <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a1ba:	b580      	push	{r7, lr}
 800a1bc:	b08c      	sub	sp, #48	; 0x30
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	60f8      	str	r0, [r7, #12]
 800a1c2:	60b9      	str	r1, [r7, #8]
 800a1c4:	607a      	str	r2, [r7, #4]
 800a1c6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	f107 0210 	add.w	r2, r7, #16
 800a1d8:	4611      	mov	r1, r2
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f7ff fc46 	bl	8009a6c <validate>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a1e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d107      	bne.n	800a1fe <f_write+0x44>
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	7d5b      	ldrb	r3, [r3, #21]
 800a1f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a1f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d002      	beq.n	800a204 <f_write+0x4a>
 800a1fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a202:	e16a      	b.n	800a4da <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	7d1b      	ldrb	r3, [r3, #20]
 800a208:	f003 0302 	and.w	r3, r3, #2
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d101      	bne.n	800a214 <f_write+0x5a>
 800a210:	2307      	movs	r3, #7
 800a212:	e162      	b.n	800a4da <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	699a      	ldr	r2, [r3, #24]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	441a      	add	r2, r3
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	699b      	ldr	r3, [r3, #24]
 800a220:	429a      	cmp	r2, r3
 800a222:	f080 814c 	bcs.w	800a4be <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	699b      	ldr	r3, [r3, #24]
 800a22a:	43db      	mvns	r3, r3
 800a22c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a22e:	e146      	b.n	800a4be <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	699b      	ldr	r3, [r3, #24]
 800a234:	693a      	ldr	r2, [r7, #16]
 800a236:	8992      	ldrh	r2, [r2, #12]
 800a238:	fbb3 f1f2 	udiv	r1, r3, r2
 800a23c:	fb02 f201 	mul.w	r2, r2, r1
 800a240:	1a9b      	subs	r3, r3, r2
 800a242:	2b00      	cmp	r3, #0
 800a244:	f040 80f1 	bne.w	800a42a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	699b      	ldr	r3, [r3, #24]
 800a24c:	693a      	ldr	r2, [r7, #16]
 800a24e:	8992      	ldrh	r2, [r2, #12]
 800a250:	fbb3 f3f2 	udiv	r3, r3, r2
 800a254:	693a      	ldr	r2, [r7, #16]
 800a256:	8952      	ldrh	r2, [r2, #10]
 800a258:	3a01      	subs	r2, #1
 800a25a:	4013      	ands	r3, r2
 800a25c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a25e:	69bb      	ldr	r3, [r7, #24]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d143      	bne.n	800a2ec <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	699b      	ldr	r3, [r3, #24]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d10c      	bne.n	800a286 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	689b      	ldr	r3, [r3, #8]
 800a270:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a274:	2b00      	cmp	r3, #0
 800a276:	d11a      	bne.n	800a2ae <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	2100      	movs	r1, #0
 800a27c:	4618      	mov	r0, r3
 800a27e:	f7fe fc91 	bl	8008ba4 <create_chain>
 800a282:	62b8      	str	r0, [r7, #40]	; 0x28
 800a284:	e013      	b.n	800a2ae <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d007      	beq.n	800a29e <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	699b      	ldr	r3, [r3, #24]
 800a292:	4619      	mov	r1, r3
 800a294:	68f8      	ldr	r0, [r7, #12]
 800a296:	f7fe fd1d 	bl	8008cd4 <clmt_clust>
 800a29a:	62b8      	str	r0, [r7, #40]	; 0x28
 800a29c:	e007      	b.n	800a2ae <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a29e:	68fa      	ldr	r2, [r7, #12]
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	69db      	ldr	r3, [r3, #28]
 800a2a4:	4619      	mov	r1, r3
 800a2a6:	4610      	mov	r0, r2
 800a2a8:	f7fe fc7c 	bl	8008ba4 <create_chain>
 800a2ac:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	f000 8109 	beq.w	800a4c8 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d104      	bne.n	800a2c6 <f_write+0x10c>
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2202      	movs	r2, #2
 800a2c0:	755a      	strb	r2, [r3, #21]
 800a2c2:	2302      	movs	r3, #2
 800a2c4:	e109      	b.n	800a4da <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a2c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2cc:	d104      	bne.n	800a2d8 <f_write+0x11e>
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2201      	movs	r2, #1
 800a2d2:	755a      	strb	r2, [r3, #21]
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	e100      	b.n	800a4da <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2dc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	689b      	ldr	r3, [r3, #8]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d102      	bne.n	800a2ec <f_write+0x132>
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2ea:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	7d1b      	ldrb	r3, [r3, #20]
 800a2f0:	b25b      	sxtb	r3, r3
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	da18      	bge.n	800a328 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	7858      	ldrb	r0, [r3, #1]
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	6a1a      	ldr	r2, [r3, #32]
 800a304:	2301      	movs	r3, #1
 800a306:	f7fd fe4d 	bl	8007fa4 <disk_write>
 800a30a:	4603      	mov	r3, r0
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d004      	beq.n	800a31a <f_write+0x160>
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2201      	movs	r2, #1
 800a314:	755a      	strb	r2, [r3, #21]
 800a316:	2301      	movs	r3, #1
 800a318:	e0df      	b.n	800a4da <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	7d1b      	ldrb	r3, [r3, #20]
 800a31e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a322:	b2da      	uxtb	r2, r3
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a328:	693a      	ldr	r2, [r7, #16]
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	69db      	ldr	r3, [r3, #28]
 800a32e:	4619      	mov	r1, r3
 800a330:	4610      	mov	r0, r2
 800a332:	f7fe f9c3 	bl	80086bc <clust2sect>
 800a336:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d104      	bne.n	800a348 <f_write+0x18e>
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	2202      	movs	r2, #2
 800a342:	755a      	strb	r2, [r3, #21]
 800a344:	2302      	movs	r3, #2
 800a346:	e0c8      	b.n	800a4da <f_write+0x320>
			sect += csect;
 800a348:	697a      	ldr	r2, [r7, #20]
 800a34a:	69bb      	ldr	r3, [r7, #24]
 800a34c:	4413      	add	r3, r2
 800a34e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	899b      	ldrh	r3, [r3, #12]
 800a354:	461a      	mov	r2, r3
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	fbb3 f3f2 	udiv	r3, r3, r2
 800a35c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a35e:	6a3b      	ldr	r3, [r7, #32]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d043      	beq.n	800a3ec <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a364:	69ba      	ldr	r2, [r7, #24]
 800a366:	6a3b      	ldr	r3, [r7, #32]
 800a368:	4413      	add	r3, r2
 800a36a:	693a      	ldr	r2, [r7, #16]
 800a36c:	8952      	ldrh	r2, [r2, #10]
 800a36e:	4293      	cmp	r3, r2
 800a370:	d905      	bls.n	800a37e <f_write+0x1c4>
					cc = fs->csize - csect;
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	895b      	ldrh	r3, [r3, #10]
 800a376:	461a      	mov	r2, r3
 800a378:	69bb      	ldr	r3, [r7, #24]
 800a37a:	1ad3      	subs	r3, r2, r3
 800a37c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	7858      	ldrb	r0, [r3, #1]
 800a382:	6a3b      	ldr	r3, [r7, #32]
 800a384:	697a      	ldr	r2, [r7, #20]
 800a386:	69f9      	ldr	r1, [r7, #28]
 800a388:	f7fd fe0c 	bl	8007fa4 <disk_write>
 800a38c:	4603      	mov	r3, r0
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d004      	beq.n	800a39c <f_write+0x1e2>
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	2201      	movs	r2, #1
 800a396:	755a      	strb	r2, [r3, #21]
 800a398:	2301      	movs	r3, #1
 800a39a:	e09e      	b.n	800a4da <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	6a1a      	ldr	r2, [r3, #32]
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	1ad3      	subs	r3, r2, r3
 800a3a4:	6a3a      	ldr	r2, [r7, #32]
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d918      	bls.n	800a3dc <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	6a1a      	ldr	r2, [r3, #32]
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	1ad3      	subs	r3, r2, r3
 800a3b8:	693a      	ldr	r2, [r7, #16]
 800a3ba:	8992      	ldrh	r2, [r2, #12]
 800a3bc:	fb02 f303 	mul.w	r3, r2, r3
 800a3c0:	69fa      	ldr	r2, [r7, #28]
 800a3c2:	18d1      	adds	r1, r2, r3
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	899b      	ldrh	r3, [r3, #12]
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	f7fd feab 	bl	8008124 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	7d1b      	ldrb	r3, [r3, #20]
 800a3d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3d6:	b2da      	uxtb	r2, r3
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	899b      	ldrh	r3, [r3, #12]
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	6a3b      	ldr	r3, [r7, #32]
 800a3e4:	fb02 f303 	mul.w	r3, r2, r3
 800a3e8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a3ea:	e04b      	b.n	800a484 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	6a1b      	ldr	r3, [r3, #32]
 800a3f0:	697a      	ldr	r2, [r7, #20]
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d016      	beq.n	800a424 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	699a      	ldr	r2, [r3, #24]
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a3fe:	429a      	cmp	r2, r3
 800a400:	d210      	bcs.n	800a424 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a402:	693b      	ldr	r3, [r7, #16]
 800a404:	7858      	ldrb	r0, [r3, #1]
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a40c:	2301      	movs	r3, #1
 800a40e:	697a      	ldr	r2, [r7, #20]
 800a410:	f7fd fda8 	bl	8007f64 <disk_read>
 800a414:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a416:	2b00      	cmp	r3, #0
 800a418:	d004      	beq.n	800a424 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2201      	movs	r2, #1
 800a41e:	755a      	strb	r2, [r3, #21]
 800a420:	2301      	movs	r3, #1
 800a422:	e05a      	b.n	800a4da <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	697a      	ldr	r2, [r7, #20]
 800a428:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	899b      	ldrh	r3, [r3, #12]
 800a42e:	4618      	mov	r0, r3
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	699b      	ldr	r3, [r3, #24]
 800a434:	693a      	ldr	r2, [r7, #16]
 800a436:	8992      	ldrh	r2, [r2, #12]
 800a438:	fbb3 f1f2 	udiv	r1, r3, r2
 800a43c:	fb02 f201 	mul.w	r2, r2, r1
 800a440:	1a9b      	subs	r3, r3, r2
 800a442:	1ac3      	subs	r3, r0, r3
 800a444:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d901      	bls.n	800a452 <f_write+0x298>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	699b      	ldr	r3, [r3, #24]
 800a45c:	693a      	ldr	r2, [r7, #16]
 800a45e:	8992      	ldrh	r2, [r2, #12]
 800a460:	fbb3 f0f2 	udiv	r0, r3, r2
 800a464:	fb02 f200 	mul.w	r2, r2, r0
 800a468:	1a9b      	subs	r3, r3, r2
 800a46a:	440b      	add	r3, r1
 800a46c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a46e:	69f9      	ldr	r1, [r7, #28]
 800a470:	4618      	mov	r0, r3
 800a472:	f7fd fe57 	bl	8008124 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	7d1b      	ldrb	r3, [r3, #20]
 800a47a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a47e:	b2da      	uxtb	r2, r3
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a484:	69fa      	ldr	r2, [r7, #28]
 800a486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a488:	4413      	add	r3, r2
 800a48a:	61fb      	str	r3, [r7, #28]
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	699a      	ldr	r2, [r3, #24]
 800a490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a492:	441a      	add	r2, r3
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	619a      	str	r2, [r3, #24]
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	68da      	ldr	r2, [r3, #12]
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	699b      	ldr	r3, [r3, #24]
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	bf38      	it	cc
 800a4a4:	461a      	movcc	r2, r3
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	60da      	str	r2, [r3, #12]
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	681a      	ldr	r2, [r3, #0]
 800a4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b0:	441a      	add	r2, r3
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	601a      	str	r2, [r3, #0]
 800a4b6:	687a      	ldr	r2, [r7, #4]
 800a4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ba:	1ad3      	subs	r3, r2, r3
 800a4bc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	f47f aeb5 	bne.w	800a230 <f_write+0x76>
 800a4c6:	e000      	b.n	800a4ca <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a4c8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	7d1b      	ldrb	r3, [r3, #20]
 800a4ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4d2:	b2da      	uxtb	r2, r3
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a4d8:	2300      	movs	r3, #0
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3730      	adds	r7, #48	; 0x30
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}

0800a4e2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b086      	sub	sp, #24
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f107 0208 	add.w	r2, r7, #8
 800a4f0:	4611      	mov	r1, r2
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7ff faba 	bl	8009a6c <validate>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a4fc:	7dfb      	ldrb	r3, [r7, #23]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d168      	bne.n	800a5d4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	7d1b      	ldrb	r3, [r3, #20]
 800a506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d062      	beq.n	800a5d4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	7d1b      	ldrb	r3, [r3, #20]
 800a512:	b25b      	sxtb	r3, r3
 800a514:	2b00      	cmp	r3, #0
 800a516:	da15      	bge.n	800a544 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	7858      	ldrb	r0, [r3, #1]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6a1a      	ldr	r2, [r3, #32]
 800a526:	2301      	movs	r3, #1
 800a528:	f7fd fd3c 	bl	8007fa4 <disk_write>
 800a52c:	4603      	mov	r3, r0
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d001      	beq.n	800a536 <f_sync+0x54>
 800a532:	2301      	movs	r3, #1
 800a534:	e04f      	b.n	800a5d6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	7d1b      	ldrb	r3, [r3, #20]
 800a53a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a53e:	b2da      	uxtb	r2, r3
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a544:	f7fc fde6 	bl	8007114 <get_fattime>
 800a548:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a54a:	68ba      	ldr	r2, [r7, #8]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a550:	4619      	mov	r1, r3
 800a552:	4610      	mov	r0, r2
 800a554:	f7fe f814 	bl	8008580 <move_window>
 800a558:	4603      	mov	r3, r0
 800a55a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a55c:	7dfb      	ldrb	r3, [r7, #23]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d138      	bne.n	800a5d4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a566:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	330b      	adds	r3, #11
 800a56c:	781a      	ldrb	r2, [r3, #0]
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	330b      	adds	r3, #11
 800a572:	f042 0220 	orr.w	r2, r2, #32
 800a576:	b2d2      	uxtb	r2, r2
 800a578:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6818      	ldr	r0, [r3, #0]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	689b      	ldr	r3, [r3, #8]
 800a582:	461a      	mov	r2, r3
 800a584:	68f9      	ldr	r1, [r7, #12]
 800a586:	f7fe fda2 	bl	80090ce <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	f103 021c 	add.w	r2, r3, #28
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	68db      	ldr	r3, [r3, #12]
 800a594:	4619      	mov	r1, r3
 800a596:	4610      	mov	r0, r2
 800a598:	f7fd fd98 	bl	80080cc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	3316      	adds	r3, #22
 800a5a0:	6939      	ldr	r1, [r7, #16]
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f7fd fd92 	bl	80080cc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	3312      	adds	r3, #18
 800a5ac:	2100      	movs	r1, #0
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f7fd fd71 	bl	8008096 <st_word>
					fs->wflag = 1;
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f7fe f80d 	bl	80085dc <sync_fs>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	7d1b      	ldrb	r3, [r3, #20]
 800a5ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5ce:	b2da      	uxtb	r2, r3
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a5d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3718      	adds	r7, #24
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}

0800a5de <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a5de:	b580      	push	{r7, lr}
 800a5e0:	b084      	sub	sp, #16
 800a5e2:	af00      	add	r7, sp, #0
 800a5e4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f7ff ff7b 	bl	800a4e2 <f_sync>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a5f0:	7bfb      	ldrb	r3, [r7, #15]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d118      	bne.n	800a628 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f107 0208 	add.w	r2, r7, #8
 800a5fc:	4611      	mov	r1, r2
 800a5fe:	4618      	mov	r0, r3
 800a600:	f7ff fa34 	bl	8009a6c <validate>
 800a604:	4603      	mov	r3, r0
 800a606:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a608:	7bfb      	ldrb	r3, [r7, #15]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d10c      	bne.n	800a628 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	691b      	ldr	r3, [r3, #16]
 800a612:	4618      	mov	r0, r3
 800a614:	f7fd ff10 	bl	8008438 <dec_lock>
 800a618:	4603      	mov	r3, r0
 800a61a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a61c:	7bfb      	ldrb	r3, [r7, #15]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d102      	bne.n	800a628 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2200      	movs	r2, #0
 800a626:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a628:	7bfb      	ldrb	r3, [r7, #15]
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3710      	adds	r7, #16
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}
	...

0800a634 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a634:	b480      	push	{r7}
 800a636:	b087      	sub	sp, #28
 800a638:	af00      	add	r7, sp, #0
 800a63a:	60f8      	str	r0, [r7, #12]
 800a63c:	60b9      	str	r1, [r7, #8]
 800a63e:	4613      	mov	r3, r2
 800a640:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a642:	2301      	movs	r3, #1
 800a644:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a646:	2300      	movs	r3, #0
 800a648:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a64a:	4b1f      	ldr	r3, [pc, #124]	; (800a6c8 <FATFS_LinkDriverEx+0x94>)
 800a64c:	7a5b      	ldrb	r3, [r3, #9]
 800a64e:	b2db      	uxtb	r3, r3
 800a650:	2b00      	cmp	r3, #0
 800a652:	d131      	bne.n	800a6b8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a654:	4b1c      	ldr	r3, [pc, #112]	; (800a6c8 <FATFS_LinkDriverEx+0x94>)
 800a656:	7a5b      	ldrb	r3, [r3, #9]
 800a658:	b2db      	uxtb	r3, r3
 800a65a:	461a      	mov	r2, r3
 800a65c:	4b1a      	ldr	r3, [pc, #104]	; (800a6c8 <FATFS_LinkDriverEx+0x94>)
 800a65e:	2100      	movs	r1, #0
 800a660:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a662:	4b19      	ldr	r3, [pc, #100]	; (800a6c8 <FATFS_LinkDriverEx+0x94>)
 800a664:	7a5b      	ldrb	r3, [r3, #9]
 800a666:	b2db      	uxtb	r3, r3
 800a668:	4a17      	ldr	r2, [pc, #92]	; (800a6c8 <FATFS_LinkDriverEx+0x94>)
 800a66a:	009b      	lsls	r3, r3, #2
 800a66c:	4413      	add	r3, r2
 800a66e:	68fa      	ldr	r2, [r7, #12]
 800a670:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a672:	4b15      	ldr	r3, [pc, #84]	; (800a6c8 <FATFS_LinkDriverEx+0x94>)
 800a674:	7a5b      	ldrb	r3, [r3, #9]
 800a676:	b2db      	uxtb	r3, r3
 800a678:	461a      	mov	r2, r3
 800a67a:	4b13      	ldr	r3, [pc, #76]	; (800a6c8 <FATFS_LinkDriverEx+0x94>)
 800a67c:	4413      	add	r3, r2
 800a67e:	79fa      	ldrb	r2, [r7, #7]
 800a680:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a682:	4b11      	ldr	r3, [pc, #68]	; (800a6c8 <FATFS_LinkDriverEx+0x94>)
 800a684:	7a5b      	ldrb	r3, [r3, #9]
 800a686:	b2db      	uxtb	r3, r3
 800a688:	1c5a      	adds	r2, r3, #1
 800a68a:	b2d1      	uxtb	r1, r2
 800a68c:	4a0e      	ldr	r2, [pc, #56]	; (800a6c8 <FATFS_LinkDriverEx+0x94>)
 800a68e:	7251      	strb	r1, [r2, #9]
 800a690:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a692:	7dbb      	ldrb	r3, [r7, #22]
 800a694:	3330      	adds	r3, #48	; 0x30
 800a696:	b2da      	uxtb	r2, r3
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	3301      	adds	r3, #1
 800a6a0:	223a      	movs	r2, #58	; 0x3a
 800a6a2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	3302      	adds	r3, #2
 800a6a8:	222f      	movs	r2, #47	; 0x2f
 800a6aa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	3303      	adds	r3, #3
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a6b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	371c      	adds	r7, #28
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr
 800a6c6:	bf00      	nop
 800a6c8:	20001210 	.word	0x20001210

0800a6cc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b082      	sub	sp, #8
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	6839      	ldr	r1, [r7, #0]
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f7ff ffaa 	bl	800a634 <FATFS_LinkDriverEx>
 800a6e0:	4603      	mov	r3, r0
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3708      	adds	r7, #8
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}
	...

0800a6ec <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b084      	sub	sp, #16
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d002      	beq.n	800a702 <fs_open+0x16>
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d102      	bne.n	800a708 <fs_open+0x1c>
    return ERR_ARG;
 800a702:	f06f 030f 	mvn.w	r3, #15
 800a706:	e028      	b.n	800a75a <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800a708:	4b16      	ldr	r3, [pc, #88]	; (800a764 <fs_open+0x78>)
 800a70a:	60fb      	str	r3, [r7, #12]
 800a70c:	e020      	b.n	800a750 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	4619      	mov	r1, r3
 800a714:	6838      	ldr	r0, [r7, #0]
 800a716:	f7f5 fd5b 	bl	80001d0 <strcmp>
 800a71a:	4603      	mov	r3, r0
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d114      	bne.n	800a74a <fs_open+0x5e>
      file->data = (const char *)f->data;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	689a      	ldr	r2, [r3, #8]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	68da      	ldr	r2, [r3, #12]
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	68da      	ldr	r2, [r3, #12]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2200      	movs	r2, #0
 800a73c:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	7c1a      	ldrb	r2, [r3, #16]
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800a746:	2300      	movs	r3, #0
 800a748:	e007      	b.n	800a75a <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	60fb      	str	r3, [r7, #12]
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d1db      	bne.n	800a70e <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800a756:	f06f 0305 	mvn.w	r3, #5
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3710      	adds	r7, #16
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}
 800a762:	bf00      	nop
 800a764:	08020184 	.word	0x08020184

0800a768 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800a768:	b480      	push	{r7}
 800a76a:	b083      	sub	sp, #12
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800a770:	bf00      	nop
 800a772:	370c      	adds	r7, #12
 800a774:	46bd      	mov	sp, r7
 800a776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77a:	4770      	bx	lr

0800a77c <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800a77c:	b480      	push	{r7}
 800a77e:	b083      	sub	sp, #12
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	685a      	ldr	r2, [r3, #4]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	689b      	ldr	r3, [r3, #8]
 800a78c:	1ad3      	subs	r3, r2, r3
}
 800a78e:	4618      	mov	r0, r3
 800a790:	370c      	adds	r7, #12
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr

0800a79a <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state *
http_ssi_state_alloc(void)
{
 800a79a:	b580      	push	{r7, lr}
 800a79c:	b082      	sub	sp, #8
 800a79e:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 800a7a0:	f241 709c 	movw	r0, #6044	; 0x179c
 800a7a4:	f002 fb4c 	bl	800ce40 <mem_malloc>
 800a7a8:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d005      	beq.n	800a7bc <http_ssi_state_alloc+0x22>
    memset(ret, 0, sizeof(struct http_ssi_state));
 800a7b0:	f241 729c 	movw	r2, #6044	; 0x179c
 800a7b4:	2100      	movs	r1, #0
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f00c fc14 	bl	8016fe4 <memset>
  }
  return ret;
 800a7bc:	687b      	ldr	r3, [r7, #4]
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3708      	adds	r7, #8
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}

0800a7c6 <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 800a7c6:	b580      	push	{r7, lr}
 800a7c8:	b082      	sub	sp, #8
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d002      	beq.n	800a7da <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f002 f9cd 	bl	800cb74 <mem_free>
  }
}
 800a7da:	bf00      	nop
 800a7dc:	3708      	adds	r7, #8
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}

0800a7e2 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 800a7e2:	b580      	push	{r7, lr}
 800a7e4:	b082      	sub	sp, #8
 800a7e6:	af00      	add	r7, sp, #0
 800a7e8:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800a7ea:	22d8      	movs	r2, #216	; 0xd8
 800a7ec:	2100      	movs	r1, #0
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f00c fbf8 	bl	8016fe4 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2205      	movs	r2, #5
 800a7f8:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800a7fc:	bf00      	nop
 800a7fe:	3708      	adds	r7, #8
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}

0800a804 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b082      	sub	sp, #8
 800a808:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800a80a:	20d8      	movs	r0, #216	; 0xd8
 800a80c:	f002 fb18 	bl	800ce40 <mem_malloc>
 800a810:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d002      	beq.n	800a81e <http_state_alloc+0x1a>
    http_state_init(ret);
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f7ff ffe2 	bl	800a7e2 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800a81e:	687b      	ldr	r3, [r7, #4]
}
 800a820:	4618      	mov	r0, r3
 800a822:	3708      	adds	r7, #8
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}

0800a828 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b082      	sub	sp, #8
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	695b      	ldr	r3, [r3, #20]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d007      	beq.n	800a848 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	695b      	ldr	r3, [r3, #20]
 800a83c:	4618      	mov	r0, r3
 800a83e:	f7ff ff93 	bl	800a768 <fs_close>
    hs->handle = NULL;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2200      	movs	r2, #0
 800a846:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d007      	beq.n	800a860 <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a854:	4618      	mov	r0, r3
 800a856:	f7ff ffb6 	bl	800a7c6 <http_ssi_state_free>
    hs->ssi = NULL;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2200      	movs	r2, #0
 800a85e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6a1b      	ldr	r3, [r3, #32]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d007      	beq.n	800a878 <http_state_eof+0x50>
    pbuf_free(hs->req);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6a1b      	ldr	r3, [r3, #32]
 800a86c:	4618      	mov	r0, r3
 800a86e:	f003 fab3 	bl	800ddd8 <pbuf_free>
    hs->req = NULL;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2200      	movs	r2, #0
 800a876:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800a878:	bf00      	nop
 800a87a:	3708      	adds	r7, #8
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}

0800a880 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b082      	sub	sp, #8
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d005      	beq.n	800a89a <http_state_free+0x1a>
    http_state_eof(hs);
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f7ff ffca 	bl	800a828 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f002 f96d 	bl	800cb74 <mem_free>
  }
}
 800a89a:	bf00      	nop
 800a89c:	3708      	adds	r7, #8
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
	...

0800a8a4 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b086      	sub	sp, #24
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	60f8      	str	r0, [r7, #12]
 800a8ac:	60b9      	str	r1, [r7, #8]
 800a8ae:	607a      	str	r2, [r7, #4]
 800a8b0:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d106      	bne.n	800a8c6 <http_write+0x22>
 800a8b8:	4b2c      	ldr	r3, [pc, #176]	; (800a96c <http_write+0xc8>)
 800a8ba:	f240 2219 	movw	r2, #537	; 0x219
 800a8be:	492c      	ldr	r1, [pc, #176]	; (800a970 <http_write+0xcc>)
 800a8c0:	482c      	ldr	r0, [pc, #176]	; (800a974 <http_write+0xd0>)
 800a8c2:	f00c fb97 	bl	8016ff4 <iprintf>
  len = *length;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	881b      	ldrh	r3, [r3, #0]
 800a8ca:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800a8cc:	8afb      	ldrh	r3, [r7, #22]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d101      	bne.n	800a8d6 <http_write+0x32>
    return ERR_OK;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	e045      	b.n	800a962 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a8dc:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800a8de:	8aba      	ldrh	r2, [r7, #20]
 800a8e0:	8afb      	ldrh	r3, [r7, #22]
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d201      	bcs.n	800a8ea <http_write+0x46>
    len = max_len;
 800a8e6:	8abb      	ldrh	r3, [r7, #20]
 800a8e8:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a8ee:	005b      	lsls	r3, r3, #1
 800a8f0:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 800a8f2:	8afa      	ldrh	r2, [r7, #22]
 800a8f4:	8abb      	ldrh	r3, [r7, #20]
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d901      	bls.n	800a8fe <http_write+0x5a>
    len = max_len;
 800a8fa:	8abb      	ldrh	r3, [r7, #20]
 800a8fc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 800a8fe:	78fb      	ldrb	r3, [r7, #3]
 800a900:	8afa      	ldrh	r2, [r7, #22]
 800a902:	68b9      	ldr	r1, [r7, #8]
 800a904:	68f8      	ldr	r0, [r7, #12]
 800a906:	f007 ffeb 	bl	80128e0 <tcp_write>
 800a90a:	4603      	mov	r3, r0
 800a90c:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800a90e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a912:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a916:	d10f      	bne.n	800a938 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d004      	beq.n	800a92c <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800a928:	2b08      	cmp	r3, #8
 800a92a:	d902      	bls.n	800a932 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 800a92c:	2301      	movs	r3, #1
 800a92e:	82fb      	strh	r3, [r7, #22]
 800a930:	e002      	b.n	800a938 <http_write+0x94>
      } else {
        len /= 2;
 800a932:	8afb      	ldrh	r3, [r7, #22]
 800a934:	085b      	lsrs	r3, r3, #1
 800a936:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800a938:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a93c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a940:	d102      	bne.n	800a948 <http_write+0xa4>
 800a942:	8afb      	ldrh	r3, [r7, #22]
 800a944:	2b01      	cmp	r3, #1
 800a946:	d8da      	bhi.n	800a8fe <http_write+0x5a>

  if (err == ERR_OK) {
 800a948:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d103      	bne.n	800a958 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	8afa      	ldrh	r2, [r7, #22]
 800a954:	801a      	strh	r2, [r3, #0]
 800a956:	e002      	b.n	800a95e <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2200      	movs	r2, #0
 800a95c:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800a95e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800a962:	4618      	mov	r0, r3
 800a964:	3718      	adds	r7, #24
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}
 800a96a:	bf00      	nop
 800a96c:	08019604 	.word	0x08019604
 800a970:	0801963c 	.word	0x0801963c
 800a974:	0801964c 	.word	0x0801964c

0800a978 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b086      	sub	sp, #24
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	60f8      	str	r0, [r7, #12]
 800a980:	60b9      	str	r1, [r7, #8]
 800a982:	4613      	mov	r3, r2
 800a984:	71fb      	strb	r3, [r7, #7]
  err_t err;
  LWIP_DEBUGF(HTTPD_DEBUG, ("Closing connection %p\n", (void *)pcb));

#if LWIP_HTTPD_SUPPORT_POST
  if (hs != NULL) {
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d00c      	beq.n	800a9a6 <http_close_or_abort_conn+0x2e>
    if ((hs->post_content_len_left != 0)
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800a992:	2b00      	cmp	r3, #0
 800a994:	d007      	beq.n	800a9a6 <http_close_or_abort_conn+0x2e>
#if LWIP_HTTPD_POST_MANUAL_WND
        || ((hs->no_auto_wnd != 0) && (hs->unrecved_bytes != 0))
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
       ) {
      /* make sure the post code knows that the connection is closed */
      http_uri_buf[0] = 0;
 800a996:	4b1f      	ldr	r3, [pc, #124]	; (800aa14 <http_close_or_abort_conn+0x9c>)
 800a998:	2200      	movs	r2, #0
 800a99a:	701a      	strb	r2, [r3, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 800a99c:	223f      	movs	r2, #63	; 0x3f
 800a99e:	491d      	ldr	r1, [pc, #116]	; (800aa14 <http_close_or_abort_conn+0x9c>)
 800a9a0:	68b8      	ldr	r0, [r7, #8]
 800a9a2:	f7f6 f8b1 	bl	8000b08 <httpd_post_finished>
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800a9a6:	2100      	movs	r1, #0
 800a9a8:	68f8      	ldr	r0, [r7, #12]
 800a9aa:	f005 f85b 	bl	800fa64 <tcp_arg>
  altcp_recv(pcb, NULL);
 800a9ae:	2100      	movs	r1, #0
 800a9b0:	68f8      	ldr	r0, [r7, #12]
 800a9b2:	f005 f869 	bl	800fa88 <tcp_recv>
  altcp_err(pcb, NULL);
 800a9b6:	2100      	movs	r1, #0
 800a9b8:	68f8      	ldr	r0, [r7, #12]
 800a9ba:	f005 f8a9 	bl	800fb10 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800a9be:	2200      	movs	r2, #0
 800a9c0:	2100      	movs	r1, #0
 800a9c2:	68f8      	ldr	r0, [r7, #12]
 800a9c4:	f005 f8de 	bl	800fb84 <tcp_poll>
  altcp_sent(pcb, NULL);
 800a9c8:	2100      	movs	r1, #0
 800a9ca:	68f8      	ldr	r0, [r7, #12]
 800a9cc:	f005 f87e 	bl	800facc <tcp_sent>
  if (hs != NULL) {
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d002      	beq.n	800a9dc <http_close_or_abort_conn+0x64>
    http_state_free(hs);
 800a9d6:	68b8      	ldr	r0, [r7, #8]
 800a9d8:	f7ff ff52 	bl	800a880 <http_state_free>
  }

  if (abort_conn) {
 800a9dc:	79fb      	ldrb	r3, [r7, #7]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d004      	beq.n	800a9ec <http_close_or_abort_conn+0x74>
    altcp_abort(pcb);
 800a9e2:	68f8      	ldr	r0, [r7, #12]
 800a9e4:	f003 ff80 	bl	800e8e8 <tcp_abort>
    return ERR_OK;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	e00f      	b.n	800aa0c <http_close_or_abort_conn+0x94>
  }
  err = altcp_close(pcb);
 800a9ec:	68f8      	ldr	r0, [r7, #12]
 800a9ee:	f003 fe91 	bl	800e714 <tcp_close>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800a9f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d004      	beq.n	800aa08 <http_close_or_abort_conn+0x90>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800a9fe:	2204      	movs	r2, #4
 800aa00:	4905      	ldr	r1, [pc, #20]	; (800aa18 <http_close_or_abort_conn+0xa0>)
 800aa02:	68f8      	ldr	r0, [r7, #12]
 800aa04:	f005 f8be 	bl	800fb84 <tcp_poll>
  }
  return err;
 800aa08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3718      	adds	r7, #24
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}
 800aa14:	2000161c 	.word	0x2000161c
 800aa18:	0800c2cb 	.word	0x0800c2cb

0800aa1c <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b082      	sub	sp, #8
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800aa26:	2200      	movs	r2, #0
 800aa28:	6839      	ldr	r1, [r7, #0]
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f7ff ffa4 	bl	800a978 <http_close_or_abort_conn>
 800aa30:	4603      	mov	r3, r0
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3708      	adds	r7, #8
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}

0800aa3a <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b082      	sub	sp, #8
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
 800aa42:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800aa44:	6839      	ldr	r1, [r7, #0]
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f7ff ffe8 	bl	800aa1c <http_close_conn>
  }
}
 800aa4c:	bf00      	nop
 800aa4e:	3708      	adds	r7, #8
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b086      	sub	sp, #24
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d003      	beq.n	800aa6c <extract_uri_parameters+0x18>
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d101      	bne.n	800aa70 <extract_uri_parameters+0x1c>
    return (0);
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	e04b      	b.n	800ab08 <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800aa74:	2300      	movs	r3, #0
 800aa76:	613b      	str	r3, [r7, #16]
 800aa78:	e03f      	b.n	800aafa <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	693a      	ldr	r2, [r7, #16]
 800aa7e:	320c      	adds	r2, #12
 800aa80:	6979      	ldr	r1, [r7, #20]
 800aa82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 800aa8a:	2126      	movs	r1, #38	; 0x26
 800aa8c:	6978      	ldr	r0, [r7, #20]
 800aa8e:	f00c fbe2 	bl	8017256 <strchr>
 800aa92:	6178      	str	r0, [r7, #20]
    if (pair) {
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d006      	beq.n	800aaa8 <extract_uri_parameters+0x54>
      *pair = '\0';
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	701a      	strb	r2, [r3, #0]
      pair++;
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	617b      	str	r3, [r7, #20]
 800aaa6:	e00c      	b.n	800aac2 <extract_uri_parameters+0x6e>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 800aaa8:	2120      	movs	r1, #32
 800aaaa:	68f8      	ldr	r0, [r7, #12]
 800aaac:	f00c fbd3 	bl	8017256 <strchr>
 800aab0:	6178      	str	r0, [r7, #20]
      if (pair) {
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d002      	beq.n	800aabe <extract_uri_parameters+0x6a>
        *pair = '\0';
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	2200      	movs	r2, #0
 800aabc:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 800aabe:	2300      	movs	r3, #0
 800aac0:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 800aac2:	213d      	movs	r1, #61	; 0x3d
 800aac4:	68f8      	ldr	r0, [r7, #12]
 800aac6:	f00c fbc6 	bl	8017256 <strchr>
 800aaca:	60f8      	str	r0, [r7, #12]
    if (equals) {
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d00a      	beq.n	800aae8 <extract_uri_parameters+0x94>
      *equals = '\0';
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	2200      	movs	r2, #0
 800aad6:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	1c59      	adds	r1, r3, #1
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	693a      	ldr	r2, [r7, #16]
 800aae0:	321c      	adds	r2, #28
 800aae2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800aae6:	e005      	b.n	800aaf4 <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	693a      	ldr	r2, [r7, #16]
 800aaec:	321c      	adds	r2, #28
 800aaee:	2100      	movs	r1, #0
 800aaf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	3301      	adds	r3, #1
 800aaf8:	613b      	str	r3, [r7, #16]
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	2b0f      	cmp	r3, #15
 800aafe:	dc02      	bgt.n	800ab06 <extract_uri_parameters+0xb2>
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d1b9      	bne.n	800aa7a <extract_uri_parameters+0x26>
    }
  }

  return loop;
 800ab06:	693b      	ldr	r3, [r7, #16]
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3718      	adds	r7, #24
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}

0800ab10 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 800ab10:	b590      	push	{r4, r7, lr}
 800ab12:	b089      	sub	sp, #36	; 0x24
 800ab14:	af02      	add	r7, sp, #8
 800ab16:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d106      	bne.n	800ab2c <get_tag_insert+0x1c>
 800ab1e:	4b5b      	ldr	r3, [pc, #364]	; (800ac8c <get_tag_insert+0x17c>)
 800ab20:	f44f 7241 	mov.w	r2, #772	; 0x304
 800ab24:	495a      	ldr	r1, [pc, #360]	; (800ac90 <get_tag_insert+0x180>)
 800ab26:	485b      	ldr	r0, [pc, #364]	; (800ac94 <get_tag_insert+0x184>)
 800ab28:	f00c fa64 	bl	8016ff4 <iprintf>
  ssi = hs->ssi;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab30:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800ab32:	693b      	ldr	r3, [r7, #16]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d106      	bne.n	800ab46 <get_tag_insert+0x36>
 800ab38:	4b54      	ldr	r3, [pc, #336]	; (800ac8c <get_tag_insert+0x17c>)
 800ab3a:	f240 3206 	movw	r2, #774	; 0x306
 800ab3e:	4956      	ldr	r1, [pc, #344]	; (800ac98 <get_tag_insert+0x188>)
 800ab40:	4854      	ldr	r0, [pc, #336]	; (800ac94 <get_tag_insert+0x184>)
 800ab42:	f00c fa57 	bl	8016ff4 <iprintf>
#if LWIP_HTTPD_SSI_MULTIPART
  current_tag_part = ssi->tag_part;
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	8a9b      	ldrh	r3, [r3, #20]
 800ab4a:	81fb      	strh	r3, [r7, #14]
  ssi->tag_part = HTTPD_LAST_TAG_PART;
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab52:	829a      	strh	r2, [r3, #20]
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if (httpd_ssi_handler
 800ab54:	4b51      	ldr	r3, [pc, #324]	; (800ac9c <get_tag_insert+0x18c>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d034      	beq.n	800abc6 <get_tag_insert+0xb6>
#if !LWIP_HTTPD_SSI_RAW
      && httpd_tags && httpd_num_tags
 800ab5c:	4b50      	ldr	r3, [pc, #320]	; (800aca0 <get_tag_insert+0x190>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d030      	beq.n	800abc6 <get_tag_insert+0xb6>
 800ab64:	4b4f      	ldr	r3, [pc, #316]	; (800aca4 <get_tag_insert+0x194>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d02c      	beq.n	800abc6 <get_tag_insert+0xb6>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for (tag = 0; tag < httpd_num_tags; tag++) {
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	617b      	str	r3, [r7, #20]
 800ab70:	e024      	b.n	800abbc <get_tag_insert+0xac>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	f103 0018 	add.w	r0, r3, #24
 800ab78:	4b49      	ldr	r3, [pc, #292]	; (800aca0 <get_tag_insert+0x190>)
 800ab7a:	681a      	ldr	r2, [r3, #0]
 800ab7c:	697b      	ldr	r3, [r7, #20]
 800ab7e:	009b      	lsls	r3, r3, #2
 800ab80:	4413      	add	r3, r2
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	4619      	mov	r1, r3
 800ab86:	f7f5 fb23 	bl	80001d0 <strcmp>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d112      	bne.n	800abb6 <get_tag_insert+0xa6>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 800ab90:	4b42      	ldr	r3, [pc, #264]	; (800ac9c <get_tag_insert+0x18c>)
 800ab92:	681c      	ldr	r4, [r3, #0]
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	f103 0129 	add.w	r1, r3, #41	; 0x29
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	3314      	adds	r3, #20
 800ab9e:	89fa      	ldrh	r2, [r7, #14]
 800aba0:	9300      	str	r3, [sp, #0]
 800aba2:	4613      	mov	r3, r2
 800aba4:	f241 7270 	movw	r2, #6000	; 0x1770
 800aba8:	6978      	ldr	r0, [r7, #20]
 800abaa:	47a0      	blx	r4
 800abac:	4603      	mov	r3, r0
 800abae:	461a      	mov	r2, r3
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	825a      	strh	r2, [r3, #18]
                                             );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 800abb4:	e066      	b.n	800ac84 <get_tag_insert+0x174>
    for (tag = 0; tag < httpd_num_tags; tag++) {
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	3301      	adds	r3, #1
 800abba:	617b      	str	r3, [r7, #20]
 800abbc:	4b39      	ldr	r3, [pc, #228]	; (800aca4 <get_tag_insert+0x194>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	697a      	ldr	r2, [r7, #20]
 800abc2:	429a      	cmp	r2, r3
 800abc4:	dbd5      	blt.n	800ab72 <get_tag_insert+0x62>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	3318      	adds	r3, #24
 800abca:	4618      	mov	r0, r3
 800abcc:	f7f5 fb0a 	bl	80001e4 <strlen>
 800abd0:	4603      	mov	r3, r0
 800abd2:	f241 7256 	movw	r2, #5974	; 0x1756
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d81b      	bhi.n	800ac12 <get_tag_insert+0x102>
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	3318      	adds	r3, #24
 800abde:	4618      	mov	r0, r3
 800abe0:	f7f5 fb00 	bl	80001e4 <strlen>
 800abe4:	4603      	mov	r3, r0
 800abe6:	2b11      	cmp	r3, #17
 800abe8:	d813      	bhi.n	800ac12 <get_tag_insert+0x102>
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	3318      	adds	r3, #24
 800abee:	4618      	mov	r0, r3
 800abf0:	f7f5 faf8 	bl	80001e4 <strlen>
 800abf4:	4603      	mov	r3, r0
 800abf6:	f241 7256 	movw	r2, #5974	; 0x1756
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d806      	bhi.n	800ac0c <get_tag_insert+0xfc>
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	3318      	adds	r3, #24
 800ac02:	4618      	mov	r0, r3
 800ac04:	f7f5 faee 	bl	80001e4 <strlen>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	e003      	b.n	800ac14 <get_tag_insert+0x104>
 800ac0c:	f241 7357 	movw	r3, #5975	; 0x1757
 800ac10:	e000      	b.n	800ac14 <get_tag_insert+0x104>
 800ac12:	2311      	movs	r3, #17
 800ac14:	60bb      	str	r3, [r7, #8]
                 LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	3329      	adds	r3, #41	; 0x29
 800ac1a:	2212      	movs	r2, #18
 800ac1c:	4922      	ldr	r1, [pc, #136]	; (800aca8 <get_tag_insert+0x198>)
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f00c f9b8 	bl	8016f94 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	f103 003b 	add.w	r0, r3, #59	; 0x3b
 800ac2a:	693b      	ldr	r3, [r7, #16]
 800ac2c:	3318      	adds	r3, #24
 800ac2e:	68ba      	ldr	r2, [r7, #8]
 800ac30:	4619      	mov	r1, r3
 800ac32:	f00c f9af 	bl	8016f94 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	3312      	adds	r3, #18
 800ac3a:	3328      	adds	r3, #40	; 0x28
 800ac3c:	693a      	ldr	r2, [r7, #16]
 800ac3e:	4413      	add	r3, r2
 800ac40:	3301      	adds	r3, #1
 800ac42:	2207      	movs	r2, #7
 800ac44:	4919      	ldr	r1, [pc, #100]	; (800acac <get_tag_insert+0x19c>)
 800ac46:	4618      	mov	r0, r3
 800ac48:	f00c f9a4 	bl	8016f94 <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	3319      	adds	r3, #25
 800ac50:	693a      	ldr	r2, [r7, #16]
 800ac52:	4413      	add	r3, r2
 800ac54:	2200      	movs	r2, #0
 800ac56:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  len = strlen(ssi->tag_insert);
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	3329      	adds	r3, #41	; 0x29
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f7f5 fac0 	bl	80001e4 <strlen>
 800ac64:	60b8      	str	r0, [r7, #8]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac6c:	d306      	bcc.n	800ac7c <get_tag_insert+0x16c>
 800ac6e:	4b07      	ldr	r3, [pc, #28]	; (800ac8c <get_tag_insert+0x17c>)
 800ac70:	f240 323f 	movw	r2, #831	; 0x33f
 800ac74:	490e      	ldr	r1, [pc, #56]	; (800acb0 <get_tag_insert+0x1a0>)
 800ac76:	4807      	ldr	r0, [pc, #28]	; (800ac94 <get_tag_insert+0x184>)
 800ac78:	f00c f9bc 	bl	8016ff4 <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	b29a      	uxth	r2, r3
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	825a      	strh	r2, [r3, #18]
}
 800ac84:	371c      	adds	r7, #28
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd90      	pop	{r4, r7, pc}
 800ac8a:	bf00      	nop
 800ac8c:	08019604 	.word	0x08019604
 800ac90:	08019674 	.word	0x08019674
 800ac94:	0801964c 	.word	0x0801964c
 800ac98:	08019680 	.word	0x08019680
 800ac9c:	2000165c 	.word	0x2000165c
 800aca0:	20001664 	.word	0x20001664
 800aca4:	20001660 	.word	0x20001660
 800aca8:	0801968c 	.word	0x0801968c
 800acac:	080196a0 	.word	0x080196a0
 800acb0:	080196a8 	.word	0x080196a8

0800acb4 <get_http_headers>:
 * Generate the relevant HTTP headers for the given filename and write
 * them into the supplied buffer.
 */
static void
get_http_headers(struct http_state *hs, const char *uri)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b086      	sub	sp, #24
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
 800acbc:	6039      	str	r1, [r7, #0]
  char *ext;
  char *vars;

  /* In all cases, the second header we send is the server identification
     so set it here. */
  hs->hdrs[HDR_STRINGS_IDX_SERVER_NAME] = g_psHTTPHeaderStrings[HTTP_HDR_SERVER];
 800acbe:	4a55      	ldr	r2, [pc, #340]	; (800ae14 <get_http_headers+0x160>)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = NULL;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2200      	movs	r2, #0
 800acca:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = NULL;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2200      	movs	r2, #0
 800acd2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

  /* Is this a normal file or the special case we use to send back the
     default "404: Page not found" response? */
  if (uri == NULL) {
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d110      	bne.n	800acfe <get_http_headers+0x4a>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 800acdc:	4a4e      	ldr	r2, [pc, #312]	; (800ae18 <get_http_headers+0x164>)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    if (hs->keepalive) {
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaderStrings[DEFAULT_404_HTML_PERSISTENT];
    } else
#endif
    {
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaderStrings[DEFAULT_404_HTML];
 800ace4:	4a4d      	ldr	r2, [pc, #308]	; (800ae1c <get_http_headers+0x168>)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    }

    /* Set up to send the first header string. */
    hs->hdr_index = 0;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2200      	movs	r2, #0
 800acf0:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
    hs->hdr_pos = 0;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2200      	movs	r2, #0
 800acf8:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    return;
 800acfc:	e087      	b.n	800ae0e <get_http_headers+0x15a>
  }
  /* We are dealing with a particular filename. Look for one other
      special case.  We assume that any filename with "404" in it must be
      indicative of a 404 server error whereas all other files require
      the 200 OK header. */
  if (strstr(uri, "404")) {
 800acfe:	4948      	ldr	r1, [pc, #288]	; (800ae20 <get_http_headers+0x16c>)
 800ad00:	6838      	ldr	r0, [r7, #0]
 800ad02:	f00c fae2 	bl	80172ca <strstr>
 800ad06:	4603      	mov	r3, r0
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d004      	beq.n	800ad16 <get_http_headers+0x62>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 800ad0c:	4a42      	ldr	r2, [pc, #264]	; (800ae18 <get_http_headers+0x164>)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800ad14:	e01b      	b.n	800ad4e <get_http_headers+0x9a>
  } else if (strstr(uri, "400")) {
 800ad16:	4943      	ldr	r1, [pc, #268]	; (800ae24 <get_http_headers+0x170>)
 800ad18:	6838      	ldr	r0, [r7, #0]
 800ad1a:	f00c fad6 	bl	80172ca <strstr>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d004      	beq.n	800ad2e <get_http_headers+0x7a>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_BAD_REQUEST];
 800ad24:	4a40      	ldr	r2, [pc, #256]	; (800ae28 <get_http_headers+0x174>)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800ad2c:	e00f      	b.n	800ad4e <get_http_headers+0x9a>
  } else if (strstr(uri, "501")) {
 800ad2e:	493f      	ldr	r1, [pc, #252]	; (800ae2c <get_http_headers+0x178>)
 800ad30:	6838      	ldr	r0, [r7, #0]
 800ad32:	f00c faca 	bl	80172ca <strstr>
 800ad36:	4603      	mov	r3, r0
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d004      	beq.n	800ad46 <get_http_headers+0x92>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_IMPL];
 800ad3c:	4a3c      	ldr	r2, [pc, #240]	; (800ae30 <get_http_headers+0x17c>)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800ad44:	e003      	b.n	800ad4e <get_http_headers+0x9a>
  } else {
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_OK];
 800ad46:	4a3b      	ldr	r2, [pc, #236]	; (800ae34 <get_http_headers+0x180>)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }

  /* Determine if the URI has any variables and, if so, temporarily remove
      them. */
  vars = strchr(uri, '?');
 800ad4e:	213f      	movs	r1, #63	; 0x3f
 800ad50:	6838      	ldr	r0, [r7, #0]
 800ad52:	f00c fa80 	bl	8017256 <strchr>
 800ad56:	60b8      	str	r0, [r7, #8]
  if (vars) {
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d002      	beq.n	800ad64 <get_http_headers+0xb0>
    *vars = '\0';
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	2200      	movs	r2, #0
 800ad62:	701a      	strb	r2, [r3, #0]
  }

  /* Get a pointer to the file extension.  We find this by looking for the
      last occurrence of "." in the filename passed. */
  ext = NULL;
 800ad64:	2300      	movs	r3, #0
 800ad66:	60fb      	str	r3, [r7, #12]
  tmp = strchr(uri, '.');
 800ad68:	212e      	movs	r1, #46	; 0x2e
 800ad6a:	6838      	ldr	r0, [r7, #0]
 800ad6c:	f00c fa73 	bl	8017256 <strchr>
 800ad70:	6138      	str	r0, [r7, #16]
  while (tmp) {
 800ad72:	e007      	b.n	800ad84 <get_http_headers+0xd0>
    ext = tmp + 1;
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	3301      	adds	r3, #1
 800ad78:	60fb      	str	r3, [r7, #12]
    tmp = strchr(ext, '.');
 800ad7a:	212e      	movs	r1, #46	; 0x2e
 800ad7c:	68f8      	ldr	r0, [r7, #12]
 800ad7e:	f00c fa6a 	bl	8017256 <strchr>
 800ad82:	6138      	str	r0, [r7, #16]
  while (tmp) {
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d1f4      	bne.n	800ad74 <get_http_headers+0xc0>
  }
  if (ext != NULL) {
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d014      	beq.n	800adba <get_http_headers+0x106>
    /* Now determine the content type and add the relevant header for that. */
    for (content_type = 0; content_type < NUM_HTTP_HEADERS; content_type++) {
 800ad90:	2300      	movs	r3, #0
 800ad92:	617b      	str	r3, [r7, #20]
 800ad94:	e00d      	b.n	800adb2 <get_http_headers+0xfe>
      /* Have we found a matching extension? */
      if (!lwip_stricmp(g_psHTTPHeaders[content_type].extension, ext)) {
 800ad96:	4a28      	ldr	r2, [pc, #160]	; (800ae38 <get_http_headers+0x184>)
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ad9e:	68f9      	ldr	r1, [r7, #12]
 800ada0:	4618      	mov	r0, r3
 800ada2:	f001 fceb 	bl	800c77c <lwip_stricmp>
 800ada6:	4603      	mov	r3, r0
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d009      	beq.n	800adc0 <get_http_headers+0x10c>
    for (content_type = 0; content_type < NUM_HTTP_HEADERS; content_type++) {
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	3301      	adds	r3, #1
 800adb0:	617b      	str	r3, [r7, #20]
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	2b13      	cmp	r3, #19
 800adb6:	d9ee      	bls.n	800ad96 <get_http_headers+0xe2>
 800adb8:	e003      	b.n	800adc2 <get_http_headers+0x10e>
        break;
      }
    }
  } else {
    content_type = NUM_HTTP_HEADERS;
 800adba:	2314      	movs	r3, #20
 800adbc:	617b      	str	r3, [r7, #20]
 800adbe:	e000      	b.n	800adc2 <get_http_headers+0x10e>
        break;
 800adc0:	bf00      	nop
  }

  /* Reinstate the parameter marker if there was one in the original URI. */
  if (vars) {
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d002      	beq.n	800adce <get_http_headers+0x11a>
    *vars = '?';
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	223f      	movs	r2, #63	; 0x3f
 800adcc:	701a      	strb	r2, [r3, #0]
    hs->hdr_index = NUM_FILE_HDR_STRINGS;
    return;
  }
#endif /* LWIP_HTTPD_OMIT_HEADER_FOR_EXTENSIONLESS_URI */
  /* Did we find a matching extension? */
  if (content_type < NUM_HTTP_HEADERS) {
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	2b13      	cmp	r3, #19
 800add2:	d808      	bhi.n	800ade6 <get_http_headers+0x132>
    /* yes, store it */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaders[content_type].content_type;
 800add4:	4a18      	ldr	r2, [pc, #96]	; (800ae38 <get_http_headers+0x184>)
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	00db      	lsls	r3, r3, #3
 800adda:	4413      	add	r3, r2
 800addc:	685a      	ldr	r2, [r3, #4]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800ade4:	e00b      	b.n	800adfe <get_http_headers+0x14a>
  } else if (!ext) {
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d104      	bne.n	800adf6 <get_http_headers+0x142>
    /* no, no extension found -> use binary transfer to prevent the browser adding '.txt' on save */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_APP;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	4a13      	ldr	r2, [pc, #76]	; (800ae3c <get_http_headers+0x188>)
 800adf0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800adf4:	e003      	b.n	800adfe <get_http_headers+0x14a>
  } else {
    /* No - use the default, plain text file type. */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_DEFAULT_TYPE;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	4a11      	ldr	r2, [pc, #68]	; (800ae40 <get_http_headers+0x18c>)
 800adfa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }
  /* Set up to send the first header string. */
  hs->hdr_index = 0;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2200      	movs	r2, #0
 800ae02:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
  hs->hdr_pos = 0;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
}
 800ae0e:	3718      	adds	r7, #24
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}
 800ae14:	08019284 	.word	0x08019284
 800ae18:	08019148 	.word	0x08019148
 800ae1c:	080192c4 	.word	0x080192c4
 800ae20:	080196b8 	.word	0x080196b8
 800ae24:	080196bc 	.word	0x080196bc
 800ae28:	08019168 	.word	0x08019168
 800ae2c:	080196c0 	.word	0x080196c0
 800ae30:	08019184 	.word	0x08019184
 800ae34:	08019134 	.word	0x08019134
 800ae38:	08020198 	.word	0x08020198
 800ae3c:	08019458 	.word	0x08019458
 800ae40:	080196c4 	.word	0x080196c4

0800ae44 <get_http_content_length>:

/* Add content-length header? */
static void
get_http_content_length(struct http_state *hs)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b084      	sub	sp, #16
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  u8_t add_content_len = 0;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("already been here?", hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] == NULL);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d006      	beq.n	800ae68 <get_http_content_length+0x24>
 800ae5a:	4b27      	ldr	r3, [pc, #156]	; (800aef8 <get_http_content_length+0xb4>)
 800ae5c:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 800ae60:	4926      	ldr	r1, [pc, #152]	; (800aefc <get_http_content_length+0xb8>)
 800ae62:	4827      	ldr	r0, [pc, #156]	; (800af00 <get_http_content_length+0xbc>)
 800ae64:	f00c f8c6 	bl	8016ff4 <iprintf>

  add_content_len = 0;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	73fb      	strb	r3, [r7, #15]
#if LWIP_HTTPD_SSI
  if (hs->ssi == NULL) /* @todo: get maximum file length from SSI */
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d10c      	bne.n	800ae8e <get_http_content_length+0x4a>
#endif /* LWIP_HTTPD_SSI */
  {
    if ((hs->handle != NULL) && (hs->handle->flags & FS_FILE_FLAGS_HEADER_PERSISTENT)) {
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	695b      	ldr	r3, [r3, #20]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d008      	beq.n	800ae8e <get_http_content_length+0x4a>
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	695b      	ldr	r3, [r3, #20]
 800ae80:	7c1b      	ldrb	r3, [r3, #16]
 800ae82:	f003 0302 	and.w	r3, r3, #2
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d001      	beq.n	800ae8e <get_http_content_length+0x4a>
      add_content_len = 1;
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	73fb      	strb	r3, [r7, #15]
    }
  }
  if (add_content_len) {
 800ae8e:	7bfb      	ldrb	r3, [r7, #15]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d025      	beq.n	800aee0 <get_http_content_length+0x9c>
    size_t len;
    lwip_itoa(hs->hdr_content_len, (size_t)LWIP_HTTPD_MAX_CONTENT_LEN_SIZE,
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
              hs->handle->len);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	695b      	ldr	r3, [r3, #20]
    lwip_itoa(hs->hdr_content_len, (size_t)LWIP_HTTPD_MAX_CONTENT_LEN_SIZE,
 800ae9e:	685b      	ldr	r3, [r3, #4]
 800aea0:	461a      	mov	r2, r3
 800aea2:	210c      	movs	r1, #12
 800aea4:	f001 fc9e 	bl	800c7e4 <lwip_itoa>
    len = strlen(hs->hdr_content_len);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	33c4      	adds	r3, #196	; 0xc4
 800aeac:	4618      	mov	r0, r3
 800aeae:	f7f5 f999 	bl	80001e4 <strlen>
 800aeb2:	60b8      	str	r0, [r7, #8]
    if (len <= LWIP_HTTPD_MAX_CONTENT_LEN_SIZE - LWIP_HTTPD_MAX_CONTENT_LEN_OFFSET) {
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	2b09      	cmp	r3, #9
 800aeb8:	d810      	bhi.n	800aedc <get_http_content_length+0x98>
      SMEMCPY(&hs->hdr_content_len[len], CRLF, 3);
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	33c0      	adds	r3, #192	; 0xc0
 800aebe:	687a      	ldr	r2, [r7, #4]
 800aec0:	4413      	add	r3, r2
 800aec2:	3304      	adds	r3, #4
 800aec4:	2203      	movs	r2, #3
 800aec6:	490f      	ldr	r1, [pc, #60]	; (800af04 <get_http_content_length+0xc0>)
 800aec8:	4618      	mov	r0, r3
 800aeca:	f00c f863 	bl	8016f94 <memcpy>
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = hs->hdr_content_len;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800aeda:	e001      	b.n	800aee0 <get_http_content_length+0x9c>
    } else {
      add_content_len = 0;
 800aedc:	2300      	movs	r3, #0
 800aede:	73fb      	strb	r3, [r7, #15]
  } else {
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONN_CLOSE];
    hs->keepalive = 0;
  }
#else /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  if (add_content_len) {
 800aee0:	7bfb      	ldrb	r3, [r7, #15]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d003      	beq.n	800aeee <get_http_content_length+0xaa>
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONTENT_LENGTH];
 800aee6:	4a08      	ldr	r2, [pc, #32]	; (800af08 <get_http_content_length+0xc4>)
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
}
 800aeee:	bf00      	nop
 800aef0:	3710      	adds	r7, #16
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}
 800aef6:	bf00      	nop
 800aef8:	08019604 	.word	0x08019604
 800aefc:	080196e4 	.word	0x080196e4
 800af00:	0801964c 	.word	0x0801964c
 800af04:	080196f8 	.word	0x080196f8
 800af08:	08019214 	.word	0x08019214

0800af0c <http_send_headers>:
 *                                      so don't send HTTP body yet
 *           - HTTP_DATA_TO_SEND_FREED: http_state and pcb are already freed
 */
static u8_t
http_send_headers(struct altcp_pcb *pcb, struct http_state *hs)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b088      	sub	sp, #32
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800af16:	2300      	movs	r3, #0
 800af18:	777b      	strb	r3, [r7, #29]
  u16_t hdrlen, sendlen;

  if (hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] == NULL) {
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800af20:	2b00      	cmp	r3, #0
 800af22:	d102      	bne.n	800af2a <http_send_headers+0x1e>
    /* set up "content-length" and "connection:" headers */
    get_http_content_length(hs);
 800af24:	6838      	ldr	r0, [r7, #0]
 800af26:	f7ff ff8d 	bl	800ae44 <get_http_content_length>
  }

  /* How much data can we send? */
  len = altcp_sndbuf(pcb);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800af30:	83fb      	strh	r3, [r7, #30]
  sendlen = len;
 800af32:	8bfb      	ldrh	r3, [r7, #30]
 800af34:	81fb      	strh	r3, [r7, #14]

  while (len && (hs->hdr_index < NUM_FILE_HDR_STRINGS) && sendlen) {
 800af36:	e08b      	b.n	800b050 <http_send_headers+0x144>
    const void *ptr;
    u16_t old_sendlen;
    u8_t apiflags;
    /* How much do we have to send from the current header? */
    hdrlen = (u16_t)strlen(hs->hdrs[hs->hdr_index]);
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800af3e:	461a      	mov	r2, r3
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	322c      	adds	r2, #44	; 0x2c
 800af44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af48:	4618      	mov	r0, r3
 800af4a:	f7f5 f94b 	bl	80001e4 <strlen>
 800af4e:	4603      	mov	r3, r0
 800af50:	837b      	strh	r3, [r7, #26]

    /* How much of this can we send? */
    sendlen = (len < (hdrlen - hs->hdr_pos)) ? len : (hdrlen - hs->hdr_pos);
 800af52:	8b7b      	ldrh	r3, [r7, #26]
 800af54:	683a      	ldr	r2, [r7, #0]
 800af56:	f8b2 20d0 	ldrh.w	r2, [r2, #208]	; 0xd0
 800af5a:	1a9a      	subs	r2, r3, r2
 800af5c:	8bfb      	ldrh	r3, [r7, #30]
 800af5e:	4293      	cmp	r3, r2
 800af60:	bfa8      	it	ge
 800af62:	4613      	movge	r3, r2
 800af64:	b29b      	uxth	r3, r3
 800af66:	81fb      	strh	r3, [r7, #14]

    /* Send this amount of data or as much as we can given memory
     * constraints. */
    ptr = (const void *)(hs->hdrs[hs->hdr_index] + hs->hdr_pos);
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800af6e:	461a      	mov	r2, r3
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	322c      	adds	r2, #44	; 0x2c
 800af74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af78:	683a      	ldr	r2, [r7, #0]
 800af7a:	f8b2 20d0 	ldrh.w	r2, [r2, #208]	; 0xd0
 800af7e:	4413      	add	r3, r2
 800af80:	617b      	str	r3, [r7, #20]
    old_sendlen = sendlen;
 800af82:	89fb      	ldrh	r3, [r7, #14]
 800af84:	827b      	strh	r3, [r7, #18]
    apiflags = HTTP_IS_HDR_VOLATILE(hs, ptr);
 800af86:	2300      	movs	r3, #0
 800af88:	773b      	strb	r3, [r7, #28]
    if (hs->hdr_index == HDR_STRINGS_IDX_CONTENT_LEN_NR) {
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800af90:	2b03      	cmp	r3, #3
 800af92:	d103      	bne.n	800af9c <http_send_headers+0x90>
      /* content-length is always volatile */
      apiflags |= TCP_WRITE_FLAG_COPY;
 800af94:	7f3b      	ldrb	r3, [r7, #28]
 800af96:	f043 0301 	orr.w	r3, r3, #1
 800af9a:	773b      	strb	r3, [r7, #28]
    }
    if (hs->hdr_index < NUM_FILE_HDR_STRINGS - 1) {
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800afa2:	2b03      	cmp	r3, #3
 800afa4:	d803      	bhi.n	800afae <http_send_headers+0xa2>
      apiflags |= TCP_WRITE_FLAG_MORE;
 800afa6:	7f3b      	ldrb	r3, [r7, #28]
 800afa8:	f043 0302 	orr.w	r3, r3, #2
 800afac:	773b      	strb	r3, [r7, #28]
    }
    err = http_write(pcb, ptr, &sendlen, apiflags);
 800afae:	7f3b      	ldrb	r3, [r7, #28]
 800afb0:	f107 020e 	add.w	r2, r7, #14
 800afb4:	6979      	ldr	r1, [r7, #20]
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f7ff fc74 	bl	800a8a4 <http_write>
 800afbc:	4603      	mov	r3, r0
 800afbe:	747b      	strb	r3, [r7, #17]
    if ((err == ERR_OK) && (old_sendlen != sendlen)) {
 800afc0:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d106      	bne.n	800afd6 <http_send_headers+0xca>
 800afc8:	89fb      	ldrh	r3, [r7, #14]
 800afca:	8a7a      	ldrh	r2, [r7, #18]
 800afcc:	429a      	cmp	r2, r3
 800afce:	d002      	beq.n	800afd6 <http_send_headers+0xca>
      /* Remember that we added some more data to be transmitted. */
      data_to_send = HTTP_DATA_TO_SEND_CONTINUE;
 800afd0:	2301      	movs	r3, #1
 800afd2:	777b      	strb	r3, [r7, #29]
 800afd4:	e005      	b.n	800afe2 <http_send_headers+0xd6>
    } else if (err != ERR_OK) {
 800afd6:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d001      	beq.n	800afe2 <http_send_headers+0xd6>
      /* special case: http_write does not try to send 1 byte */
      sendlen = 0;
 800afde:	2300      	movs	r3, #0
 800afe0:	81fb      	strh	r3, [r7, #14]
    }

    /* Fix up the header position for the next time round. */
    hs->hdr_pos += sendlen;
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 800afe8:	89fb      	ldrh	r3, [r7, #14]
 800afea:	4413      	add	r3, r2
 800afec:	b29a      	uxth	r2, r3
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    len -= sendlen;
 800aff4:	89fb      	ldrh	r3, [r7, #14]
 800aff6:	8bfa      	ldrh	r2, [r7, #30]
 800aff8:	1ad3      	subs	r3, r2, r3
 800affa:	83fb      	strh	r3, [r7, #30]

    /* Have we finished sending this string? */
    if (hs->hdr_pos == hdrlen) {
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 800b002:	8b7a      	ldrh	r2, [r7, #26]
 800b004:	429a      	cmp	r2, r3
 800b006:	d123      	bne.n	800b050 <http_send_headers+0x144>
      /* Yes - move on to the next one */
      hs->hdr_index++;
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800b00e:	3301      	adds	r3, #1
 800b010:	b29a      	uxth	r2, r3
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
      /* skip headers that are NULL (not all headers are required) */
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 800b018:	e007      	b.n	800b02a <http_send_headers+0x11e>
             (hs->hdrs[hs->hdr_index] == NULL)) {
        hs->hdr_index++;
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800b020:	3301      	adds	r3, #1
 800b022:	b29a      	uxth	r2, r3
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800b030:	2b04      	cmp	r3, #4
 800b032:	d809      	bhi.n	800b048 <http_send_headers+0x13c>
             (hs->hdrs[hs->hdr_index] == NULL)) {
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800b03a:	461a      	mov	r2, r3
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	322c      	adds	r2, #44	; 0x2c
 800b040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 800b044:	2b00      	cmp	r3, #0
 800b046:	d0e8      	beq.n	800b01a <http_send_headers+0x10e>
      }
      hs->hdr_pos = 0;
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	2200      	movs	r2, #0
 800b04c:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
  while (len && (hs->hdr_index < NUM_FILE_HDR_STRINGS) && sendlen) {
 800b050:	8bfb      	ldrh	r3, [r7, #30]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d008      	beq.n	800b068 <http_send_headers+0x15c>
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800b05c:	2b04      	cmp	r3, #4
 800b05e:	d803      	bhi.n	800b068 <http_send_headers+0x15c>
 800b060:	89fb      	ldrh	r3, [r7, #14]
 800b062:	2b00      	cmp	r3, #0
 800b064:	f47f af68 	bne.w	800af38 <http_send_headers+0x2c>
    }
  }

  if ((hs->hdr_index >= NUM_FILE_HDR_STRINGS) && (hs->file == NULL)) {
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800b06e:	2b04      	cmp	r3, #4
 800b070:	d90f      	bls.n	800b092 <http_send_headers+0x186>
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	699b      	ldr	r3, [r3, #24]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d10b      	bne.n	800b092 <http_send_headers+0x186>
    /* When we are at the end of the headers, check for data to send
     * instead of waiting for ACK from remote side to continue
     * (which would happen when sending files from async read). */
    if (http_check_eof(pcb, hs)) {
 800b07a:	6839      	ldr	r1, [r7, #0]
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f000 f819 	bl	800b0b4 <http_check_eof>
 800b082:	4603      	mov	r3, r0
 800b084:	2b00      	cmp	r3, #0
 800b086:	d002      	beq.n	800b08e <http_send_headers+0x182>
      data_to_send = HTTP_DATA_TO_SEND_BREAK;
 800b088:	2302      	movs	r3, #2
 800b08a:	777b      	strb	r3, [r7, #29]
 800b08c:	e001      	b.n	800b092 <http_send_headers+0x186>
    } else {
      /* At this point, for non-keepalive connections, hs is deallocated an
         pcb is closed. */
      return HTTP_DATA_TO_SEND_FREED;
 800b08e:	2303      	movs	r3, #3
 800b090:	e00b      	b.n	800b0aa <http_send_headers+0x19e>
  }
  /* If we get here and there are still header bytes to send, we send
   * the header information we just wrote immediately. If there are no
   * more headers to send, but we do have file data to send, drop through
   * to try to send some file data too. */
  if ((hs->hdr_index < NUM_FILE_HDR_STRINGS) || !hs->file) {
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800b098:	2b04      	cmp	r3, #4
 800b09a:	d903      	bls.n	800b0a4 <http_send_headers+0x198>
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	699b      	ldr	r3, [r3, #24]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d101      	bne.n	800b0a8 <http_send_headers+0x19c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("tcp_output\n"));
    return HTTP_DATA_TO_SEND_BREAK;
 800b0a4:	2302      	movs	r3, #2
 800b0a6:	e000      	b.n	800b0aa <http_send_headers+0x19e>
  }
  return data_to_send;
 800b0a8:	7f7b      	ldrb	r3, [r7, #29]
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3720      	adds	r7, #32
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
	...

0800b0b4 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b084      	sub	sp, #16
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
 800b0bc:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	695b      	ldr	r3, [r3, #20]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d105      	bne.n	800b0d2 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800b0c6:	6839      	ldr	r1, [r7, #0]
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f7ff fcb6 	bl	800aa3a <http_eof>
    return 0;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	e016      	b.n	800b100 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	695b      	ldr	r3, [r3, #20]
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f7ff fb50 	bl	800a77c <fs_bytes_left>
 800b0dc:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	dc05      	bgt.n	800b0f0 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800b0e4:	6839      	ldr	r1, [r7, #0]
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f7ff fca7 	bl	800aa3a <http_eof>
    return 0;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	e007      	b.n	800b100 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800b0f0:	4b05      	ldr	r3, [pc, #20]	; (800b108 <http_check_eof+0x54>)
 800b0f2:	f240 429d 	movw	r2, #1181	; 0x49d
 800b0f6:	4905      	ldr	r1, [pc, #20]	; (800b10c <http_check_eof+0x58>)
 800b0f8:	4805      	ldr	r0, [pc, #20]	; (800b110 <http_check_eof+0x5c>)
 800b0fa:	f00b ff7b 	bl	8016ff4 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800b0fe:	2301      	movs	r3, #1
}
 800b100:	4618      	mov	r0, r3
 800b102:	3710      	adds	r7, #16
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}
 800b108:	08019604 	.word	0x08019604
 800b10c:	080196fc 	.word	0x080196fc
 800b110:	0801964c 	.word	0x0801964c

0800b114 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b084      	sub	sp, #16
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
 800b11c:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800b11e:	2300      	movs	r3, #0
 800b120:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b126:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d803      	bhi.n	800b136 <http_send_data_nonssi+0x22>
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b132:	b29b      	uxth	r3, r3
 800b134:	e001      	b.n	800b13a <http_send_data_nonssi+0x26>
 800b136:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b13a:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	6999      	ldr	r1, [r3, #24]
 800b140:	f107 020c 	add.w	r2, r7, #12
 800b144:	2300      	movs	r3, #0
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f7ff fbac 	bl	800a8a4 <http_write>
 800b14c:	4603      	mov	r3, r0
 800b14e:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800b150:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d10d      	bne.n	800b174 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800b158:	2301      	movs	r3, #1
 800b15a:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	699b      	ldr	r3, [r3, #24]
 800b160:	89ba      	ldrh	r2, [r7, #12]
 800b162:	441a      	add	r2, r3
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b16c:	89ba      	ldrh	r2, [r7, #12]
 800b16e:	1a9a      	subs	r2, r3, r2
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 800b174:	7bfb      	ldrb	r3, [r7, #15]
}
 800b176:	4618      	mov	r0, r3
 800b178:	3710      	adds	r7, #16
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}
	...

0800b180 <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b086      	sub	sp, #24
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 800b18a:	2300      	movs	r3, #0
 800b18c:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 800b18e:	2300      	movs	r3, #0
 800b190:	75bb      	strb	r3, [r7, #22]
  u8_t tag_type;

  struct http_ssi_state *ssi = hs->ssi;
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b196:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d106      	bne.n	800b1ac <http_send_data_ssi+0x2c>
 800b19e:	4b8e      	ldr	r3, [pc, #568]	; (800b3d8 <http_send_data_ssi+0x258>)
 800b1a0:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800b1a4:	498d      	ldr	r1, [pc, #564]	; (800b3dc <http_send_data_ssi+0x25c>)
 800b1a6:	488e      	ldr	r0, [pc, #568]	; (800b3e0 <http_send_data_ssi+0x260>)
 800b1a8:	f00b ff24 	bl	8016ff4 <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = altcp_sndbuf(pcb);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b1b2:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if (ssi->parsed > hs->file) {
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	681a      	ldr	r2, [r3, #0]
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	699b      	ldr	r3, [r3, #24]
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	f240 82d9 	bls.w	800b774 <http_send_data_ssi+0x5f4>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	681a      	ldr	r2, [r3, #0]
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	699b      	ldr	r3, [r3, #24]
 800b1ca:	1ad3      	subs	r3, r2, r3
 800b1cc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b1d0:	4293      	cmp	r3, r2
 800b1d2:	dc06      	bgt.n	800b1e2 <http_send_data_ssi+0x62>
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	681a      	ldr	r2, [r3, #0]
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	699b      	ldr	r3, [r3, #24]
 800b1dc:	1ad3      	subs	r3, r2, r3
 800b1de:	b29b      	uxth	r3, r3
 800b1e0:	e001      	b.n	800b1e6 <http_send_data_ssi+0x66>
 800b1e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b1e6:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	6999      	ldr	r1, [r3, #24]
 800b1ec:	f107 020e 	add.w	r2, r7, #14
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f7ff fb56 	bl	800a8a4 <http_write>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800b1fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d10d      	bne.n	800b220 <http_send_data_ssi+0xa0>
      data_to_send = 1;
 800b204:	2301      	movs	r3, #1
 800b206:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	699b      	ldr	r3, [r3, #24]
 800b20c:	89fa      	ldrh	r2, [r7, #14]
 800b20e:	441a      	add	r2, r3
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b218:	89fa      	ldrh	r2, [r7, #14]
 800b21a:	1a9a      	subs	r2, r3, r2
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if (altcp_sndbuf(pcb) == 0) {
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b226:	2b00      	cmp	r3, #0
 800b228:	f040 82a4 	bne.w	800b774 <http_send_data_ssi+0x5f4>
      return data_to_send;
 800b22c:	7dbb      	ldrb	r3, [r7, #22]
 800b22e:	e2ee      	b.n	800b80e <http_send_data_ssi+0x68e>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 800b230:	89fb      	ldrh	r3, [r7, #14]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d101      	bne.n	800b23a <http_send_data_ssi+0xba>
      return data_to_send;
 800b236:	7dbb      	ldrb	r3, [r7, #22]
 800b238:	e2e9      	b.n	800b80e <http_send_data_ssi+0x68e>
    }
    switch (ssi->tag_state) {
 800b23a:	693b      	ldr	r3, [r7, #16]
 800b23c:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800b240:	331a      	adds	r3, #26
 800b242:	781b      	ldrb	r3, [r3, #0]
 800b244:	2b04      	cmp	r3, #4
 800b246:	f200 8294 	bhi.w	800b772 <http_send_data_ssi+0x5f2>
 800b24a:	a201      	add	r2, pc, #4	; (adr r2, 800b250 <http_send_data_ssi+0xd0>)
 800b24c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b250:	0800b265 	.word	0x0800b265
 800b254:	0800b2c3 	.word	0x0800b2c3
 800b258:	0800b33d 	.word	0x0800b33d
 800b25c:	0800b491 	.word	0x0800b491
 800b260:	0800b60f 	.word	0x0800b60f
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 800b264:	2300      	movs	r3, #0
 800b266:	757b      	strb	r3, [r7, #21]
 800b268:	e01d      	b.n	800b2a6 <http_send_data_ssi+0x126>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 800b26a:	693b      	ldr	r3, [r7, #16]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	781a      	ldrb	r2, [r3, #0]
 800b270:	7d7b      	ldrb	r3, [r7, #21]
 800b272:	495c      	ldr	r1, [pc, #368]	; (800b3e4 <http_send_data_ssi+0x264>)
 800b274:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 800b278:	781b      	ldrb	r3, [r3, #0]
 800b27a:	429a      	cmp	r2, r3
 800b27c:	d110      	bne.n	800b2a0 <http_send_data_ssi+0x120>
            /* We found what could be the lead-in for a new tag so change
             * state appropriately. */
            ssi->tag_type = tag_type;
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	7d7a      	ldrb	r2, [r7, #21]
 800b282:	759a      	strb	r2, [r3, #22]
            ssi->tag_state = TAG_LEADIN;
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800b28a:	331a      	adds	r3, #26
 800b28c:	2201      	movs	r2, #1
 800b28e:	701a      	strb	r2, [r3, #0]
            ssi->tag_index = 1;
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	2201      	movs	r2, #1
 800b294:	821a      	strh	r2, [r3, #16]
  #if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->tag_started = ssi->parsed;
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	681a      	ldr	r2, [r3, #0]
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	605a      	str	r2, [r3, #4]
  #endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
            break;
 800b29e:	e005      	b.n	800b2ac <http_send_data_ssi+0x12c>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 800b2a0:	7d7b      	ldrb	r3, [r7, #21]
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	757b      	strb	r3, [r7, #21]
 800b2a6:	7d7b      	ldrb	r3, [r7, #21]
 800b2a8:	2b01      	cmp	r3, #1
 800b2aa:	d9de      	bls.n	800b26a <http_send_data_ssi+0xea>
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800b2ac:	693b      	ldr	r3, [r7, #16]
 800b2ae:	68db      	ldr	r3, [r3, #12]
 800b2b0:	1e5a      	subs	r2, r3, #1
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	60da      	str	r2, [r3, #12]
        ssi->parsed++;
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	1c5a      	adds	r2, r3, #1
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	601a      	str	r2, [r3, #0]
        break;
 800b2c0:	e258      	b.n	800b774 <http_send_data_ssi+0x5f4>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	7d9b      	ldrb	r3, [r3, #22]
 800b2c6:	461a      	mov	r2, r3
 800b2c8:	4b46      	ldr	r3, [pc, #280]	; (800b3e4 <http_send_data_ssi+0x264>)
 800b2ca:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800b2ce:	693a      	ldr	r2, [r7, #16]
 800b2d0:	8a12      	ldrh	r2, [r2, #16]
 800b2d2:	4413      	add	r3, r2
 800b2d4:	781b      	ldrb	r3, [r3, #0]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d109      	bne.n	800b2ee <http_send_data_ssi+0x16e>
          ssi->tag_index = 0;
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	821a      	strh	r2, [r3, #16]
          ssi->tag_state = TAG_FOUND;
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800b2e6:	331a      	adds	r3, #26
 800b2e8:	2202      	movs	r2, #2
 800b2ea:	701a      	strb	r2, [r3, #0]
 800b2ec:	e242      	b.n	800b774 <http_send_data_ssi+0x5f4>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	781a      	ldrb	r2, [r3, #0]
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	7d9b      	ldrb	r3, [r3, #22]
 800b2f8:	4619      	mov	r1, r3
 800b2fa:	4b3a      	ldr	r3, [pc, #232]	; (800b3e4 <http_send_data_ssi+0x264>)
 800b2fc:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 800b300:	6939      	ldr	r1, [r7, #16]
 800b302:	8a09      	ldrh	r1, [r1, #16]
 800b304:	440b      	add	r3, r1
 800b306:	781b      	ldrb	r3, [r3, #0]
 800b308:	429a      	cmp	r2, r3
 800b30a:	d106      	bne.n	800b31a <http_send_data_ssi+0x19a>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	8a1b      	ldrh	r3, [r3, #16]
 800b310:	3301      	adds	r3, #1
 800b312:	b29a      	uxth	r2, r3
 800b314:	693b      	ldr	r3, [r7, #16]
 800b316:	821a      	strh	r2, [r3, #16]
 800b318:	e005      	b.n	800b326 <http_send_data_ssi+0x1a6>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 800b31a:	693b      	ldr	r3, [r7, #16]
 800b31c:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800b320:	331a      	adds	r3, #26
 800b322:	2200      	movs	r2, #0
 800b324:	701a      	strb	r2, [r3, #0]
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	68db      	ldr	r3, [r3, #12]
 800b32a:	1e5a      	subs	r2, r3, #1
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800b330:	693b      	ldr	r3, [r7, #16]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	1c5a      	adds	r2, r3, #1
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	601a      	str	r2, [r3, #0]
        }
        break;
 800b33a:	e21b      	b.n	800b774 <http_send_data_ssi+0x5f4>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	8a1b      	ldrh	r3, [r3, #16]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d11e      	bne.n	800b382 <http_send_data_ssi+0x202>
 800b344:	693b      	ldr	r3, [r7, #16]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	2b20      	cmp	r3, #32
 800b34c:	d00e      	beq.n	800b36c <http_send_data_ssi+0x1ec>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800b354:	2b09      	cmp	r3, #9
 800b356:	d009      	beq.n	800b36c <http_send_data_ssi+0x1ec>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	781b      	ldrb	r3, [r3, #0]
 800b35e:	2b0a      	cmp	r3, #10
 800b360:	d004      	beq.n	800b36c <http_send_data_ssi+0x1ec>
                                      (*ssi->parsed == '\r'))) {
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800b368:	2b0d      	cmp	r3, #13
 800b36a:	d10a      	bne.n	800b382 <http_send_data_ssi+0x202>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	68db      	ldr	r3, [r3, #12]
 800b370:	1e5a      	subs	r2, r3, #1
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	1c5a      	adds	r2, r3, #1
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	601a      	str	r2, [r3, #0]
          break;
 800b380:	e1f8      	b.n	800b774 <http_send_data_ssi+0x5f4>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	781a      	ldrb	r2, [r3, #0]
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	7d9b      	ldrb	r3, [r3, #22]
 800b38c:	4915      	ldr	r1, [pc, #84]	; (800b3e4 <http_send_data_ssi+0x264>)
 800b38e:	00db      	lsls	r3, r3, #3
 800b390:	440b      	add	r3, r1
 800b392:	685b      	ldr	r3, [r3, #4]
 800b394:	781b      	ldrb	r3, [r3, #0]
 800b396:	429a      	cmp	r2, r3
 800b398:	d013      	beq.n	800b3c2 <http_send_data_ssi+0x242>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	781b      	ldrb	r3, [r3, #0]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 800b3a0:	2b20      	cmp	r3, #32
 800b3a2:	d00e      	beq.n	800b3c2 <http_send_data_ssi+0x242>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	781b      	ldrb	r3, [r3, #0]
 800b3aa:	2b09      	cmp	r3, #9
 800b3ac:	d009      	beq.n	800b3c2 <http_send_data_ssi+0x242>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	781b      	ldrb	r3, [r3, #0]
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800b3b4:	2b0a      	cmp	r3, #10
 800b3b6:	d004      	beq.n	800b3c2 <http_send_data_ssi+0x242>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	781b      	ldrb	r3, [r3, #0]
 800b3be:	2b0d      	cmp	r3, #13
 800b3c0:	d143      	bne.n	800b44a <http_send_data_ssi+0x2ca>

          if (ssi->tag_index == 0) {
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	8a1b      	ldrh	r3, [r3, #16]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d10e      	bne.n	800b3e8 <http_send_data_ssi+0x268>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 800b3ca:	693b      	ldr	r3, [r7, #16]
 800b3cc:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800b3d0:	331a      	adds	r3, #26
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	701a      	strb	r2, [r3, #0]
          if (ssi->tag_index == 0) {
 800b3d6:	e050      	b.n	800b47a <http_send_data_ssi+0x2fa>
 800b3d8:	08019604 	.word	0x08019604
 800b3dc:	08019680 	.word	0x08019680
 800b3e0:	0801964c 	.word	0x0801964c
 800b3e4:	08020274 	.word	0x08020274
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 800b3e8:	693b      	ldr	r3, [r7, #16]
 800b3ea:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800b3ee:	331a      	adds	r3, #26
 800b3f0:	2203      	movs	r2, #3
 800b3f2:	701a      	strb	r2, [r3, #0]
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	8a1b      	ldrh	r3, [r3, #16]
 800b3f8:	2bff      	cmp	r3, #255	; 0xff
 800b3fa:	d906      	bls.n	800b40a <http_send_data_ssi+0x28a>
 800b3fc:	4b95      	ldr	r3, [pc, #596]	; (800b654 <http_send_data_ssi+0x4d4>)
 800b3fe:	f240 523a 	movw	r2, #1338	; 0x53a
 800b402:	4995      	ldr	r1, [pc, #596]	; (800b658 <http_send_data_ssi+0x4d8>)
 800b404:	4895      	ldr	r0, [pc, #596]	; (800b65c <http_send_data_ssi+0x4dc>)
 800b406:	f00b fdf5 	bl	8016ff4 <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 800b40a:	693b      	ldr	r3, [r7, #16]
 800b40c:	8a1b      	ldrh	r3, [r3, #16]
 800b40e:	b2da      	uxtb	r2, r3
 800b410:	693b      	ldr	r3, [r7, #16]
 800b412:	75da      	strb	r2, [r3, #23]
            ssi->tag_name[ssi->tag_index] = '\0';
 800b414:	693b      	ldr	r3, [r7, #16]
 800b416:	8a1b      	ldrh	r3, [r3, #16]
 800b418:	461a      	mov	r2, r3
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	4413      	add	r3, r2
 800b41e:	2200      	movs	r2, #0
 800b420:	761a      	strb	r2, [r3, #24]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	781a      	ldrb	r2, [r3, #0]
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	7d9b      	ldrb	r3, [r3, #22]
 800b42c:	498c      	ldr	r1, [pc, #560]	; (800b660 <http_send_data_ssi+0x4e0>)
 800b42e:	00db      	lsls	r3, r3, #3
 800b430:	440b      	add	r3, r1
 800b432:	685b      	ldr	r3, [r3, #4]
 800b434:	781b      	ldrb	r3, [r3, #0]
 800b436:	429a      	cmp	r2, r3
 800b438:	d103      	bne.n	800b442 <http_send_data_ssi+0x2c2>
              ssi->tag_index = 1;
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	2201      	movs	r2, #1
 800b43e:	821a      	strh	r2, [r3, #16]
          if (ssi->tag_index == 0) {
 800b440:	e01b      	b.n	800b47a <http_send_data_ssi+0x2fa>
            } else {
              ssi->tag_index = 0;
 800b442:	693b      	ldr	r3, [r7, #16]
 800b444:	2200      	movs	r2, #0
 800b446:	821a      	strh	r2, [r3, #16]
          if (ssi->tag_index == 0) {
 800b448:	e017      	b.n	800b47a <http_send_data_ssi+0x2fa>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 800b44a:	693b      	ldr	r3, [r7, #16]
 800b44c:	8a1b      	ldrh	r3, [r3, #16]
 800b44e:	2b0f      	cmp	r3, #15
 800b450:	d80d      	bhi.n	800b46e <http_send_data_ssi+0x2ee>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	681a      	ldr	r2, [r3, #0]
 800b456:	693b      	ldr	r3, [r7, #16]
 800b458:	8a1b      	ldrh	r3, [r3, #16]
 800b45a:	1c59      	adds	r1, r3, #1
 800b45c:	b288      	uxth	r0, r1
 800b45e:	6939      	ldr	r1, [r7, #16]
 800b460:	8208      	strh	r0, [r1, #16]
 800b462:	4619      	mov	r1, r3
 800b464:	7812      	ldrb	r2, [r2, #0]
 800b466:	693b      	ldr	r3, [r7, #16]
 800b468:	440b      	add	r3, r1
 800b46a:	761a      	strb	r2, [r3, #24]
 800b46c:	e005      	b.n	800b47a <http_send_data_ssi+0x2fa>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800b474:	331a      	adds	r3, #26
 800b476:	2200      	movs	r2, #0
 800b478:	701a      	strb	r2, [r3, #0]
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	68db      	ldr	r3, [r3, #12]
 800b47e:	1e5a      	subs	r2, r3, #1
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	60da      	str	r2, [r3, #12]
        ssi->parsed++;
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	1c5a      	adds	r2, r3, #1
 800b48a:	693b      	ldr	r3, [r7, #16]
 800b48c:	601a      	str	r2, [r3, #0]

        break;
 800b48e:	e171      	b.n	800b774 <http_send_data_ssi+0x5f4>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800b490:	693b      	ldr	r3, [r7, #16]
 800b492:	8a1b      	ldrh	r3, [r3, #16]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d11e      	bne.n	800b4d6 <http_send_data_ssi+0x356>
 800b498:	693b      	ldr	r3, [r7, #16]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	781b      	ldrb	r3, [r3, #0]
 800b49e:	2b20      	cmp	r3, #32
 800b4a0:	d00e      	beq.n	800b4c0 <http_send_data_ssi+0x340>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800b4a8:	2b09      	cmp	r3, #9
 800b4aa:	d009      	beq.n	800b4c0 <http_send_data_ssi+0x340>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	781b      	ldrb	r3, [r3, #0]
 800b4b2:	2b0a      	cmp	r3, #10
 800b4b4:	d004      	beq.n	800b4c0 <http_send_data_ssi+0x340>
                                      (*ssi->parsed == '\r'))) {
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800b4bc:	2b0d      	cmp	r3, #13
 800b4be:	d10a      	bne.n	800b4d6 <http_send_data_ssi+0x356>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	68db      	ldr	r3, [r3, #12]
 800b4c4:	1e5a      	subs	r2, r3, #1
 800b4c6:	693b      	ldr	r3, [r7, #16]
 800b4c8:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	1c5a      	adds	r2, r3, #1
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	601a      	str	r2, [r3, #0]
          break;
 800b4d4:	e14e      	b.n	800b774 <http_send_data_ssi+0x5f4>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 800b4d6:	693b      	ldr	r3, [r7, #16]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	781a      	ldrb	r2, [r3, #0]
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	7d9b      	ldrb	r3, [r3, #22]
 800b4e0:	495f      	ldr	r1, [pc, #380]	; (800b660 <http_send_data_ssi+0x4e0>)
 800b4e2:	00db      	lsls	r3, r3, #3
 800b4e4:	440b      	add	r3, r1
 800b4e6:	685b      	ldr	r3, [r3, #4]
 800b4e8:	6939      	ldr	r1, [r7, #16]
 800b4ea:	8a09      	ldrh	r1, [r1, #16]
 800b4ec:	440b      	add	r3, r1
 800b4ee:	781b      	ldrb	r3, [r3, #0]
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d17b      	bne.n	800b5ec <http_send_data_ssi+0x46c>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800b4f4:	693b      	ldr	r3, [r7, #16]
 800b4f6:	68db      	ldr	r3, [r3, #12]
 800b4f8:	1e5a      	subs	r2, r3, #1
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	1c5a      	adds	r2, r3, #1
 800b504:	693b      	ldr	r3, [r7, #16]
 800b506:	601a      	str	r2, [r3, #0]
          ssi->tag_index++;
 800b508:	693b      	ldr	r3, [r7, #16]
 800b50a:	8a1b      	ldrh	r3, [r3, #16]
 800b50c:	3301      	adds	r3, #1
 800b50e:	b29a      	uxth	r2, r3
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	821a      	strh	r2, [r3, #16]

          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 800b514:	693b      	ldr	r3, [r7, #16]
 800b516:	7d9b      	ldrb	r3, [r3, #22]
 800b518:	4a51      	ldr	r2, [pc, #324]	; (800b660 <http_send_data_ssi+0x4e0>)
 800b51a:	00db      	lsls	r3, r3, #3
 800b51c:	4413      	add	r3, r2
 800b51e:	685b      	ldr	r3, [r3, #4]
 800b520:	693a      	ldr	r2, [r7, #16]
 800b522:	8a12      	ldrh	r2, [r2, #16]
 800b524:	4413      	add	r3, r2
 800b526:	781b      	ldrb	r3, [r3, #0]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	f040 8123 	bne.w	800b774 <http_send_data_ssi+0x5f4>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	2200      	movs	r2, #0
 800b532:	829a      	strh	r2, [r3, #20]
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 800b534:	6838      	ldr	r0, [r7, #0]
 800b536:	f7ff faeb 	bl	800ab10 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	2200      	movs	r2, #0
 800b53e:	821a      	strh	r2, [r3, #16]
            ssi->tag_state = TAG_SENDING;
 800b540:	693b      	ldr	r3, [r7, #16]
 800b542:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800b546:	331a      	adds	r3, #26
 800b548:	2204      	movs	r2, #4
 800b54a:	701a      	strb	r2, [r3, #0]
            ssi->tag_end = ssi->parsed;
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	681a      	ldr	r2, [r3, #0]
 800b550:	693b      	ldr	r3, [r7, #16]
 800b552:	609a      	str	r2, [r3, #8]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->parsed = ssi->tag_started;
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	685a      	ldr	r2, [r3, #4]
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	601a      	str	r2, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 800b55c:	693b      	ldr	r3, [r7, #16]
 800b55e:	689a      	ldr	r2, [r3, #8]
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	699b      	ldr	r3, [r3, #24]
 800b564:	429a      	cmp	r2, r3
 800b566:	f240 8105 	bls.w	800b774 <http_send_data_ssi+0x5f4>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 800b56a:	693b      	ldr	r3, [r7, #16]
 800b56c:	685a      	ldr	r2, [r3, #4]
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	699b      	ldr	r3, [r3, #24]
 800b572:	1ad3      	subs	r3, r2, r3
 800b574:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b578:	4293      	cmp	r3, r2
 800b57a:	dc06      	bgt.n	800b58a <http_send_data_ssi+0x40a>
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	685a      	ldr	r2, [r3, #4]
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	699b      	ldr	r3, [r3, #24]
 800b584:	1ad3      	subs	r3, r2, r3
 800b586:	b29b      	uxth	r3, r3
 800b588:	e001      	b.n	800b58e <http_send_data_ssi+0x40e>
 800b58a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b58e:	81fb      	strh	r3, [r7, #14]
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	6999      	ldr	r1, [r3, #24]
 800b594:	f107 020e 	add.w	r2, r7, #14
 800b598:	2300      	movs	r3, #0
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f7ff f982 	bl	800a8a4 <http_write>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 800b5a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	f040 80e3 	bne.w	800b774 <http_send_data_ssi+0x5f4>
                data_to_send = 1;
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	75bb      	strb	r3, [r7, #22]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
                if (ssi->tag_started <= hs->file) {
 800b5b2:	693b      	ldr	r3, [r7, #16]
 800b5b4:	685a      	ldr	r2, [r3, #4]
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	699b      	ldr	r3, [r3, #24]
 800b5ba:	429a      	cmp	r2, r3
 800b5bc:	d809      	bhi.n	800b5d2 <http_send_data_ssi+0x452>
                  /* pretend to have sent the tag, too */
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	689a      	ldr	r2, [r3, #8]
 800b5c2:	693b      	ldr	r3, [r7, #16]
 800b5c4:	685b      	ldr	r3, [r3, #4]
 800b5c6:	1ad3      	subs	r3, r2, r3
 800b5c8:	b29a      	uxth	r2, r3
 800b5ca:	89fb      	ldrh	r3, [r7, #14]
 800b5cc:	4413      	add	r3, r2
 800b5ce:	b29b      	uxth	r3, r3
 800b5d0:	81fb      	strh	r3, [r7, #14]
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	699b      	ldr	r3, [r3, #24]
 800b5d6:	89fa      	ldrh	r2, [r7, #14]
 800b5d8:	441a      	add	r2, r3
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e2:	89fa      	ldrh	r2, [r7, #14]
 800b5e4:	1a9a      	subs	r2, r3, r2
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	625a      	str	r2, [r3, #36]	; 0x24
 800b5ea:	e0c3      	b.n	800b774 <http_send_data_ssi+0x5f4>
            }
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	68db      	ldr	r3, [r3, #12]
 800b5f0:	1e5a      	subs	r2, r3, #1
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800b5f6:	693b      	ldr	r3, [r7, #16]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	1c5a      	adds	r2, r3, #1
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 800b600:	693b      	ldr	r3, [r7, #16]
 800b602:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800b606:	331a      	adds	r3, #26
 800b608:	2200      	movs	r2, #0
 800b60a:	701a      	strb	r2, [r3, #0]
        }
        break;
 800b60c:	e0b2      	b.n	800b774 <http_send_data_ssi+0x5f4>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if (ssi->tag_end > hs->file) {
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	689a      	ldr	r2, [r3, #8]
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	699b      	ldr	r3, [r3, #24]
 800b616:	429a      	cmp	r2, r3
 800b618:	d95c      	bls.n	800b6d4 <http_send_data_ssi+0x554>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	685a      	ldr	r2, [r3, #4]
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	699b      	ldr	r3, [r3, #24]
 800b622:	429a      	cmp	r2, r3
 800b624:	d206      	bcs.n	800b634 <http_send_data_ssi+0x4b4>
 800b626:	4b0b      	ldr	r3, [pc, #44]	; (800b654 <http_send_data_ssi+0x4d4>)
 800b628:	f240 52ac 	movw	r2, #1452	; 0x5ac
 800b62c:	490d      	ldr	r1, [pc, #52]	; (800b664 <http_send_data_ssi+0x4e4>)
 800b62e:	480b      	ldr	r0, [pc, #44]	; (800b65c <http_send_data_ssi+0x4dc>)
 800b630:	f00b fce0 	bl	8016ff4 <iprintf>
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	685a      	ldr	r2, [r3, #4]
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	699b      	ldr	r3, [r3, #24]
 800b63c:	1ad3      	subs	r3, r2, r3
 800b63e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b642:	4293      	cmp	r3, r2
 800b644:	dc10      	bgt.n	800b668 <http_send_data_ssi+0x4e8>
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	685a      	ldr	r2, [r3, #4]
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	699b      	ldr	r3, [r3, #24]
 800b64e:	1ad3      	subs	r3, r2, r3
 800b650:	b29b      	uxth	r3, r3
 800b652:	e00b      	b.n	800b66c <http_send_data_ssi+0x4ec>
 800b654:	08019604 	.word	0x08019604
 800b658:	08019734 	.word	0x08019734
 800b65c:	0801964c 	.word	0x0801964c
 800b660:	08020274 	.word	0x08020274
 800b664:	0801974c 	.word	0x0801974c
 800b668:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b66c:	81fb      	strh	r3, [r7, #14]
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 800b66e:	89fb      	ldrh	r3, [r7, #14]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d00a      	beq.n	800b68a <http_send_data_ssi+0x50a>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	6999      	ldr	r1, [r3, #24]
 800b678:	f107 020e 	add.w	r2, r7, #14
 800b67c:	2300      	movs	r3, #0
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f7ff f910 	bl	800a8a4 <http_write>
 800b684:	4603      	mov	r3, r0
 800b686:	75fb      	strb	r3, [r7, #23]
 800b688:	e001      	b.n	800b68e <http_send_data_ssi+0x50e>
          } else {
            err = ERR_OK;
 800b68a:	2300      	movs	r3, #0
 800b68c:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 800b68e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d16e      	bne.n	800b774 <http_send_data_ssi+0x5f4>
            data_to_send = 1;
 800b696:	2301      	movs	r3, #1
 800b698:	75bb      	strb	r3, [r7, #22]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
            if (ssi->tag_started <= hs->file) {
 800b69a:	693b      	ldr	r3, [r7, #16]
 800b69c:	685a      	ldr	r2, [r3, #4]
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	699b      	ldr	r3, [r3, #24]
 800b6a2:	429a      	cmp	r2, r3
 800b6a4:	d809      	bhi.n	800b6ba <http_send_data_ssi+0x53a>
              /* pretend to have sent the tag, too */
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
 800b6a6:	693b      	ldr	r3, [r7, #16]
 800b6a8:	689a      	ldr	r2, [r3, #8]
 800b6aa:	693b      	ldr	r3, [r7, #16]
 800b6ac:	685b      	ldr	r3, [r3, #4]
 800b6ae:	1ad3      	subs	r3, r2, r3
 800b6b0:	b29a      	uxth	r2, r3
 800b6b2:	89fb      	ldrh	r3, [r7, #14]
 800b6b4:	4413      	add	r3, r2
 800b6b6:	b29b      	uxth	r3, r3
 800b6b8:	81fb      	strh	r3, [r7, #14]
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	699b      	ldr	r3, [r3, #24]
 800b6be:	89fa      	ldrh	r2, [r7, #14]
 800b6c0:	441a      	add	r2, r3
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ca:	89fa      	ldrh	r2, [r7, #14]
 800b6cc:	1a9a      	subs	r2, r3, r2
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	625a      	str	r2, [r3, #36]	; 0x24
 800b6d2:	e04f      	b.n	800b774 <http_send_data_ssi+0x5f4>
          }
        } else {
#if LWIP_HTTPD_SSI_MULTIPART
          if (ssi->tag_index >= ssi->tag_insert_len) {
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	8a1a      	ldrh	r2, [r3, #16]
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	8a5b      	ldrh	r3, [r3, #18]
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	d30b      	bcc.n	800b6f8 <http_send_data_ssi+0x578>
            /* Did the last SSIHandler have more to send? */
            if (ssi->tag_part != HTTPD_LAST_TAG_PART) {
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	8a9b      	ldrh	r3, [r3, #20]
 800b6e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	d005      	beq.n	800b6f8 <http_send_data_ssi+0x578>
              /* If so, call it again */
              ssi->tag_index = 0;
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	821a      	strh	r2, [r3, #16]
              get_tag_insert(hs);
 800b6f2:	6838      	ldr	r0, [r7, #0]
 800b6f4:	f7ff fa0c 	bl	800ab10 <get_tag_insert>
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if (ssi->tag_index < ssi->tag_insert_len) {
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	8a1a      	ldrh	r2, [r3, #16]
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	8a5b      	ldrh	r3, [r3, #18]
 800b700:	429a      	cmp	r2, r3
 800b702:	d222      	bcs.n	800b74a <http_send_data_ssi+0x5ca>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	8a5a      	ldrh	r2, [r3, #18]
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	8a1b      	ldrh	r3, [r3, #16]
 800b70c:	1ad3      	subs	r3, r2, r3
 800b70e:	b29b      	uxth	r3, r3
 800b710:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	8a1b      	ldrh	r3, [r3, #16]
 800b716:	3328      	adds	r3, #40	; 0x28
 800b718:	693a      	ldr	r2, [r7, #16]
 800b71a:	4413      	add	r3, r2
 800b71c:	1c59      	adds	r1, r3, #1
 800b71e:	f107 020e 	add.w	r2, r7, #14
 800b722:	2301      	movs	r3, #1
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f7ff f8bd 	bl	800a8a4 <http_write>
 800b72a:	4603      	mov	r3, r0
 800b72c:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 800b72e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d11e      	bne.n	800b774 <http_send_data_ssi+0x5f4>
              data_to_send = 1;
 800b736:	2301      	movs	r3, #1
 800b738:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 800b73a:	693b      	ldr	r3, [r7, #16]
 800b73c:	8a1a      	ldrh	r2, [r3, #16]
 800b73e:	89fb      	ldrh	r3, [r7, #14]
 800b740:	4413      	add	r3, r2
 800b742:	b29a      	uxth	r2, r3
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	821a      	strh	r2, [r3, #16]
 800b748:	e014      	b.n	800b774 <http_send_data_ssi+0x5f4>
              /* Don't return here: keep on sending data */
            }
          } else {
#if LWIP_HTTPD_SSI_MULTIPART
            if (ssi->tag_part == HTTPD_LAST_TAG_PART)
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	8a9b      	ldrh	r3, [r3, #20]
 800b74e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b752:	4293      	cmp	r3, r2
 800b754:	d10e      	bne.n	800b774 <http_send_data_ssi+0x5f4>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 800b756:	693b      	ldr	r3, [r7, #16]
 800b758:	2200      	movs	r2, #0
 800b75a:	821a      	strh	r2, [r3, #16]
              ssi->tag_state = TAG_NONE;
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800b762:	331a      	adds	r3, #26
 800b764:	2200      	movs	r2, #0
 800b766:	701a      	strb	r2, [r3, #0]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	689a      	ldr	r2, [r3, #8]
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	601a      	str	r2, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 800b770:	e000      	b.n	800b774 <http_send_data_ssi+0x5f4>
        default:
          break;
 800b772:	bf00      	nop
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800b77a:	331a      	adds	r3, #26
 800b77c:	781b      	ldrb	r3, [r3, #0]
 800b77e:	2b04      	cmp	r3, #4
 800b780:	d003      	beq.n	800b78a <http_send_data_ssi+0x60a>
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	68db      	ldr	r3, [r3, #12]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d004      	beq.n	800b794 <http_send_data_ssi+0x614>
 800b78a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	f43f ad4e 	beq.w	800b230 <http_send_data_ssi+0xb0>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800b79a:	331a      	adds	r3, #26
 800b79c:	781b      	ldrb	r3, [r3, #0]
 800b79e:	2b04      	cmp	r3, #4
 800b7a0:	d034      	beq.n	800b80c <http_send_data_ssi+0x68c>
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	681a      	ldr	r2, [r3, #0]
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	699b      	ldr	r3, [r3, #24]
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	d92e      	bls.n	800b80c <http_send_data_ssi+0x68c>
      ssi->parsed = ssi->tag_started;
      ssi->tag_started = hs->buf;
    } else
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ && !LWIP_HTTPD_SSI_INCLUDE_TAG */
    {
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	681a      	ldr	r2, [r3, #0]
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	699b      	ldr	r3, [r3, #24]
 800b7b6:	1ad3      	subs	r3, r2, r3
 800b7b8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	dc06      	bgt.n	800b7ce <http_send_data_ssi+0x64e>
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	681a      	ldr	r2, [r3, #0]
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	699b      	ldr	r3, [r3, #24]
 800b7c8:	1ad3      	subs	r3, r2, r3
 800b7ca:	b29b      	uxth	r3, r3
 800b7cc:	e001      	b.n	800b7d2 <http_send_data_ssi+0x652>
 800b7ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b7d2:	81fb      	strh	r3, [r7, #14]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	6999      	ldr	r1, [r3, #24]
 800b7d8:	f107 020e 	add.w	r2, r7, #14
 800b7dc:	2300      	movs	r3, #0
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f7ff f860 	bl	800a8a4 <http_write>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800b7e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d10d      	bne.n	800b80c <http_send_data_ssi+0x68c>
      data_to_send = 1;
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	699b      	ldr	r3, [r3, #24]
 800b7f8:	89fa      	ldrh	r2, [r7, #14]
 800b7fa:	441a      	add	r2, r3
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b804:	89fa      	ldrh	r2, [r7, #14]
 800b806:	1a9a      	subs	r2, r3, r2
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
 800b80c:	7dbb      	ldrb	r3, [r7, #22]
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3718      	adds	r7, #24
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}
 800b816:	bf00      	nop

0800b818 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b084      	sub	sp, #16
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
 800b820:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800b822:	2300      	movs	r3, #0
 800b824:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d101      	bne.n	800b830 <http_send+0x18>
    return 0;
 800b82c:	2300      	movs	r3, #0
 800b82e:	e048      	b.n	800b8c2 <http_send+0xaa>
  }
#endif /* LWIP_HTTPD_FS_ASYNC_READ */

#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Do we have any more header data to send for this file? */
  if (hs->hdr_index < NUM_FILE_HDR_STRINGS) {
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800b836:	2b04      	cmp	r3, #4
 800b838:	d812      	bhi.n	800b860 <http_send+0x48>
    data_to_send = http_send_headers(pcb, hs);
 800b83a:	6839      	ldr	r1, [r7, #0]
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f7ff fb65 	bl	800af0c <http_send_headers>
 800b842:	4603      	mov	r3, r0
 800b844:	73fb      	strb	r3, [r7, #15]
    if ((data_to_send == HTTP_DATA_TO_SEND_FREED) ||
 800b846:	7bfb      	ldrb	r3, [r7, #15]
 800b848:	2b03      	cmp	r3, #3
 800b84a:	d007      	beq.n	800b85c <http_send+0x44>
 800b84c:	7bfb      	ldrb	r3, [r7, #15]
 800b84e:	2b01      	cmp	r3, #1
 800b850:	d006      	beq.n	800b860 <http_send+0x48>
        ((data_to_send != HTTP_DATA_TO_SEND_CONTINUE) &&
         (hs->hdr_index < NUM_FILE_HDR_STRINGS))) {
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
        ((data_to_send != HTTP_DATA_TO_SEND_CONTINUE) &&
 800b858:	2b04      	cmp	r3, #4
 800b85a:	d801      	bhi.n	800b860 <http_send+0x48>
      return data_to_send;
 800b85c:	7bfb      	ldrb	r3, [r7, #15]
 800b85e:	e030      	b.n	800b8c2 <http_send+0xaa>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b864:	2b00      	cmp	r3, #0
 800b866:	d108      	bne.n	800b87a <http_send+0x62>
    if (!http_check_eof(pcb, hs)) {
 800b868:	6839      	ldr	r1, [r7, #0]
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f7ff fc22 	bl	800b0b4 <http_check_eof>
 800b870:	4603      	mov	r3, r0
 800b872:	2b00      	cmp	r3, #0
 800b874:	d101      	bne.n	800b87a <http_send+0x62>
      return 0;
 800b876:	2300      	movs	r3, #0
 800b878:	e023      	b.n	800b8c2 <http_send+0xaa>
    }
  }

#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d006      	beq.n	800b890 <http_send+0x78>
    data_to_send = http_send_data_ssi(pcb, hs);
 800b882:	6839      	ldr	r1, [r7, #0]
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f7ff fc7b 	bl	800b180 <http_send_data_ssi>
 800b88a:	4603      	mov	r3, r0
 800b88c:	73fb      	strb	r3, [r7, #15]
 800b88e:	e005      	b.n	800b89c <http_send+0x84>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800b890:	6839      	ldr	r1, [r7, #0]
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f7ff fc3e 	bl	800b114 <http_send_data_nonssi>
 800b898:	4603      	mov	r3, r0
 800b89a:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d10d      	bne.n	800b8c0 <http_send+0xa8>
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	695b      	ldr	r3, [r3, #20]
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f7fe ff67 	bl	800a77c <fs_bytes_left>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	dc05      	bgt.n	800b8c0 <http_send+0xa8>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800b8b4:	6839      	ldr	r1, [r7, #0]
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f7ff f8bf 	bl	800aa3a <http_eof>
    return 0;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	e000      	b.n	800b8c2 <http_send+0xaa>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800b8c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3710      	adds	r7, #16
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}
	...

0800b8cc <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b084      	sub	sp, #16
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	4a1c      	ldr	r2, [pc, #112]	; (800b94c <http_get_404_file+0x80>)
 800b8da:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800b8dc:	687a      	ldr	r2, [r7, #4]
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	4619      	mov	r1, r3
 800b8e4:	4610      	mov	r0, r2
 800b8e6:	f7fe ff01 	bl	800a6ec <fs_open>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b8ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d024      	beq.n	800b940 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	4a15      	ldr	r2, [pc, #84]	; (800b950 <http_get_404_file+0x84>)
 800b8fa:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800b8fc:	687a      	ldr	r2, [r7, #4]
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	4619      	mov	r1, r3
 800b904:	4610      	mov	r0, r2
 800b906:	f7fe fef1 	bl	800a6ec <fs_open>
 800b90a:	4603      	mov	r3, r0
 800b90c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800b90e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d014      	beq.n	800b940 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	4a0e      	ldr	r2, [pc, #56]	; (800b954 <http_get_404_file+0x88>)
 800b91a:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800b91c:	687a      	ldr	r2, [r7, #4]
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	4619      	mov	r1, r3
 800b924:	4610      	mov	r0, r2
 800b926:	f7fe fee1 	bl	800a6ec <fs_open>
 800b92a:	4603      	mov	r3, r0
 800b92c:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800b92e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d004      	beq.n	800b940 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	2200      	movs	r2, #0
 800b93a:	601a      	str	r2, [r3, #0]
        return NULL;
 800b93c:	2300      	movs	r3, #0
 800b93e:	e000      	b.n	800b942 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800b940:	687b      	ldr	r3, [r7, #4]
}
 800b942:	4618      	mov	r0, r3
 800b944:	3710      	adds	r7, #16
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}
 800b94a:	bf00      	nop
 800b94c:	08019764 	.word	0x08019764
 800b950:	08019770 	.word	0x08019770
 800b954:	0801977c 	.word	0x0801977c

0800b958 <http_handle_post_finished>:

#if LWIP_HTTPD_SUPPORT_POST
static err_t
http_handle_post_finished(struct http_state *hs)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b082      	sub	sp, #8
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  }
  hs->post_finished = 1;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
  /* application error or POST finished */
  /* NULL-terminate the buffer */
  http_uri_buf[0] = 0;
 800b960:	4b08      	ldr	r3, [pc, #32]	; (800b984 <http_handle_post_finished+0x2c>)
 800b962:	2200      	movs	r2, #0
 800b964:	701a      	strb	r2, [r3, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 800b966:	223f      	movs	r2, #63	; 0x3f
 800b968:	4906      	ldr	r1, [pc, #24]	; (800b984 <http_handle_post_finished+0x2c>)
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f7f5 f8cc 	bl	8000b08 <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 800b970:	2200      	movs	r2, #0
 800b972:	4904      	ldr	r1, [pc, #16]	; (800b984 <http_handle_post_finished+0x2c>)
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f000 faab 	bl	800bed0 <http_find_file>
 800b97a:	4603      	mov	r3, r0
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3708      	adds	r7, #8
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}
 800b984:	2000161c 	.word	0x2000161c

0800b988 <http_post_rxpbuf>:
 * @return ERR_OK if passed successfully, another err_t if the response file
 *         hasn't been found (after POST finished)
 */
static err_t
http_post_rxpbuf(struct http_state *hs, struct pbuf *p)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b084      	sub	sp, #16
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	6039      	str	r1, [r7, #0]
  err_t err;

  if (p != NULL) {
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d014      	beq.n	800b9c2 <http_post_rxpbuf+0x3a>
    /* adjust remaining Content-Length */
    if (hs->post_content_len_left < p->tot_len) {
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b99e:	683a      	ldr	r2, [r7, #0]
 800b9a0:	8912      	ldrh	r2, [r2, #8]
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d204      	bcs.n	800b9b0 <http_post_rxpbuf+0x28>
      hs->post_content_len_left = 0;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800b9ae:	e008      	b.n	800b9c2 <http_post_rxpbuf+0x3a>
    } else {
      hs->post_content_len_left -= p->tot_len;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b9b6:	683a      	ldr	r2, [r7, #0]
 800b9b8:	8912      	ldrh	r2, [r2, #8]
 800b9ba:	1a9a      	subs	r2, r3, r2
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  /* prevent connection being closed if httpd_post_data_recved() is called nested */
  hs->unrecved_bytes++;
#endif
  if (p != NULL) {
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d006      	beq.n	800b9d6 <http_post_rxpbuf+0x4e>
    err = httpd_post_receive_data(hs, p);
 800b9c8:	6839      	ldr	r1, [r7, #0]
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f7f5 f85c 	bl	8000a88 <httpd_post_receive_data>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	73fb      	strb	r3, [r7, #15]
 800b9d4:	e001      	b.n	800b9da <http_post_rxpbuf+0x52>
  } else {
    err = ERR_OK;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	73fb      	strb	r3, [r7, #15]
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  hs->unrecved_bytes--;
#endif
  if (err != ERR_OK) {
 800b9da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d003      	beq.n	800b9ea <http_post_rxpbuf+0x62>
    /* Ignore remaining content in case of application error */
    hs->post_content_len_left = 0;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  }
  if (hs->post_content_len_left == 0) {
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d104      	bne.n	800b9fe <http_post_rxpbuf+0x76>
    if (hs->unrecved_bytes != 0) {
      return ERR_OK;
    }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
    /* application error or POST finished */
    return http_handle_post_finished(hs);
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f7ff ffaf 	bl	800b958 <http_handle_post_finished>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	e000      	b.n	800ba00 <http_post_rxpbuf+0x78>
  }

  return ERR_OK;
 800b9fe:	2300      	movs	r3, #0
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3710      	adds	r7, #16
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}

0800ba08 <http_post_request>:
 *         another err_t: Error parsing POST or denied by the application
 */
static err_t
http_post_request(struct pbuf *inp, struct http_state *hs,
                  char *data, u16_t data_len, char *uri, char *uri_end)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b092      	sub	sp, #72	; 0x48
 800ba0c:	af04      	add	r7, sp, #16
 800ba0e:	60f8      	str	r0, [r7, #12]
 800ba10:	60b9      	str	r1, [r7, #8]
 800ba12:	607a      	str	r2, [r7, #4]
 800ba14:	807b      	strh	r3, [r7, #2]
  err_t err;
  /* search for end-of-header (first double-CRLF) */
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 800ba16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba18:	1c58      	adds	r0, r3, #1
 800ba1a:	887a      	ldrh	r2, [r7, #2]
 800ba1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba1e:	1c59      	adds	r1, r3, #1
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	1acb      	subs	r3, r1, r3
 800ba24:	1ad3      	subs	r3, r2, r3
 800ba26:	461a      	mov	r2, r3
 800ba28:	4965      	ldr	r1, [pc, #404]	; (800bbc0 <http_post_request+0x1b8>)
 800ba2a:	f000 fe71 	bl	800c710 <lwip_strnstr>
 800ba2e:	62b8      	str	r0, [r7, #40]	; 0x28

  if (crlfcrlf != NULL) {
 800ba30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	f000 80be 	beq.w	800bbb4 <http_post_request+0x1ac>
    /* search for "Content-Length: " */
#define HTTP_HDR_CONTENT_LEN                "Content-Length: "
#define HTTP_HDR_CONTENT_LEN_LEN            16
#define HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN  10
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 800ba38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba3a:	1c58      	adds	r0, r3, #1
 800ba3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba3e:	3301      	adds	r3, #1
 800ba40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba42:	1ad3      	subs	r3, r2, r3
 800ba44:	461a      	mov	r2, r3
 800ba46:	495f      	ldr	r1, [pc, #380]	; (800bbc4 <http_post_request+0x1bc>)
 800ba48:	f000 fe62 	bl	800c710 <lwip_strnstr>
 800ba4c:	6278      	str	r0, [r7, #36]	; 0x24
    if (scontent_len != NULL) {
 800ba4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	f000 80ac 	beq.w	800bbae <http_post_request+0x1a6>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 800ba56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba58:	3310      	adds	r3, #16
 800ba5a:	220a      	movs	r2, #10
 800ba5c:	495a      	ldr	r1, [pc, #360]	; (800bbc8 <http_post_request+0x1c0>)
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f000 fe56 	bl	800c710 <lwip_strnstr>
 800ba64:	6238      	str	r0, [r7, #32]
      if (scontent_len_end != NULL) {
 800ba66:	6a3b      	ldr	r3, [r7, #32]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	f000 80a0 	beq.w	800bbae <http_post_request+0x1a6>
        int content_len;
        char *content_len_num = scontent_len + HTTP_HDR_CONTENT_LEN_LEN;
 800ba6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba70:	3310      	adds	r3, #16
 800ba72:	61fb      	str	r3, [r7, #28]
        content_len = atoi(content_len_num);
 800ba74:	69f8      	ldr	r0, [r7, #28]
 800ba76:	f00b fa57 	bl	8016f28 <atoi>
 800ba7a:	6378      	str	r0, [r7, #52]	; 0x34
        if (content_len == 0) {
 800ba7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d10b      	bne.n	800ba9a <http_post_request+0x92>
          /* if atoi returns 0 on error, fix this */
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 800ba82:	69fb      	ldr	r3, [r7, #28]
 800ba84:	781b      	ldrb	r3, [r3, #0]
 800ba86:	2b30      	cmp	r3, #48	; 0x30
 800ba88:	d104      	bne.n	800ba94 <http_post_request+0x8c>
 800ba8a:	69fb      	ldr	r3, [r7, #28]
 800ba8c:	3301      	adds	r3, #1
 800ba8e:	781b      	ldrb	r3, [r3, #0]
 800ba90:	2b0d      	cmp	r3, #13
 800ba92:	d002      	beq.n	800ba9a <http_post_request+0x92>
            content_len = -1;
 800ba94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ba98:	637b      	str	r3, [r7, #52]	; 0x34
          }
        }
        if (content_len >= 0) {
 800ba9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	f2c0 8083 	blt.w	800bba8 <http_post_request+0x1a0>
          /* adjust length of HTTP header passed to application */
          const char *hdr_start_after_uri = uri_end + 1;
 800baa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800baa4:	3301      	adds	r3, #1
 800baa6:	61bb      	str	r3, [r7, #24]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 800baa8:	887a      	ldrh	r2, [r7, #2]
 800baaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baac:	1d19      	adds	r1, r3, #4
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	1acb      	subs	r3, r1, r3
 800bab2:	429a      	cmp	r2, r3
 800bab4:	db05      	blt.n	800bac2 <http_post_request+0xba>
 800bab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab8:	1d1a      	adds	r2, r3, #4
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	1ad3      	subs	r3, r2, r3
 800babe:	b29b      	uxth	r3, r3
 800bac0:	e000      	b.n	800bac4 <http_post_request+0xbc>
 800bac2:	887b      	ldrh	r3, [r7, #2]
 800bac4:	82fb      	strh	r3, [r7, #22]
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 800bac6:	887a      	ldrh	r2, [r7, #2]
 800bac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baca:	1d19      	adds	r1, r3, #4
 800bacc:	69bb      	ldr	r3, [r7, #24]
 800bace:	1acb      	subs	r3, r1, r3
 800bad0:	429a      	cmp	r2, r3
 800bad2:	db05      	blt.n	800bae0 <http_post_request+0xd8>
 800bad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad6:	1d1a      	adds	r2, r3, #4
 800bad8:	69bb      	ldr	r3, [r7, #24]
 800bada:	1ad3      	subs	r3, r2, r3
 800badc:	b29b      	uxth	r3, r3
 800bade:	e000      	b.n	800bae2 <http_post_request+0xda>
 800bae0:	887b      	ldrh	r3, [r7, #2]
 800bae2:	82bb      	strh	r3, [r7, #20]
          u8_t post_auto_wnd = 1;
 800bae4:	2301      	movs	r3, #1
 800bae6:	74bb      	strb	r3, [r7, #18]
          http_uri_buf[0] = 0;
 800bae8:	4b38      	ldr	r3, [pc, #224]	; (800bbcc <http_post_request+0x1c4>)
 800baea:	2200      	movs	r2, #0
 800baec:	701a      	strb	r2, [r3, #0]
          /* trim http header */
          *crlfcrlf = 0;
 800baee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baf0:	2200      	movs	r2, #0
 800baf2:	701a      	strb	r2, [r3, #0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 800baf4:	8aba      	ldrh	r2, [r7, #20]
 800baf6:	f107 0312 	add.w	r3, r7, #18
 800bafa:	9303      	str	r3, [sp, #12]
 800bafc:	233f      	movs	r3, #63	; 0x3f
 800bafe:	9302      	str	r3, [sp, #8]
 800bb00:	4b32      	ldr	r3, [pc, #200]	; (800bbcc <http_post_request+0x1c4>)
 800bb02:	9301      	str	r3, [sp, #4]
 800bb04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb06:	9300      	str	r3, [sp, #0]
 800bb08:	4613      	mov	r3, r2
 800bb0a:	69ba      	ldr	r2, [r7, #24]
 800bb0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bb0e:	68b8      	ldr	r0, [r7, #8]
 800bb10:	f7f4 ff8a 	bl	8000a28 <httpd_post_begin>
 800bb14:	4603      	mov	r3, r0
 800bb16:	74fb      	strb	r3, [r7, #19]
                                 http_uri_buf, LWIP_HTTPD_URI_BUF_LEN, &post_auto_wnd);
          if (err == ERR_OK) {
 800bb18:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d13c      	bne.n	800bb9a <http_post_request+0x192>
            /* try to pass in data of the first pbuf(s) */
            struct pbuf *q = inp;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	633b      	str	r3, [r7, #48]	; 0x30
            u16_t start_offset = hdr_len;
 800bb24:	8afb      	ldrh	r3, [r7, #22]
 800bb26:	85fb      	strh	r3, [r7, #46]	; 0x2e
#if LWIP_HTTPD_POST_MANUAL_WND
            hs->no_auto_wnd = !post_auto_wnd;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
            /* set the Content-Length to be received for this POST */
            hs->post_content_len_left = (u32_t)content_len;
 800bb28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

            /* get to the pbuf where the body starts */
            while ((q != NULL) && (q->len <= start_offset)) {
 800bb30:	e007      	b.n	800bb42 <http_post_request+0x13a>
              start_offset -= q->len;
 800bb32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb34:	895b      	ldrh	r3, [r3, #10]
 800bb36:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bb38:	1ad3      	subs	r3, r2, r3
 800bb3a:	85fb      	strh	r3, [r7, #46]	; 0x2e
              q = q->next;
 800bb3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	633b      	str	r3, [r7, #48]	; 0x30
            while ((q != NULL) && (q->len <= start_offset)) {
 800bb42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d004      	beq.n	800bb52 <http_post_request+0x14a>
 800bb48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb4a:	895b      	ldrh	r3, [r3, #10]
 800bb4c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bb4e:	429a      	cmp	r2, r3
 800bb50:	d2ef      	bcs.n	800bb32 <http_post_request+0x12a>
            }
            if (q != NULL) {
 800bb52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d00d      	beq.n	800bb74 <http_post_request+0x16c>
              /* hide the remaining HTTP header */
              pbuf_remove_header(q, start_offset);
 800bb58:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bb5a:	4619      	mov	r1, r3
 800bb5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb5e:	f002 f8b5 	bl	800dccc <pbuf_remove_header>
              if (!post_auto_wnd) {
                /* already tcp_recved() this data... */
                hs->unrecved_bytes = q->tot_len;
              }
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
              pbuf_ref(q);
 800bb62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb64:	f002 f9d8 	bl	800df18 <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 800bb68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bb6a:	68b8      	ldr	r0, [r7, #8]
 800bb6c:	f7ff ff0c 	bl	800b988 <http_post_rxpbuf>
 800bb70:	4603      	mov	r3, r0
 800bb72:	e021      	b.n	800bbb8 <http_post_request+0x1b0>
            } else if (hs->post_content_len_left == 0) {
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d10b      	bne.n	800bb96 <http_post_request+0x18e>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 800bb7e:	2241      	movs	r2, #65	; 0x41
 800bb80:	2100      	movs	r1, #0
 800bb82:	2000      	movs	r0, #0
 800bb84:	f001 fe44 	bl	800d810 <pbuf_alloc>
 800bb88:	6338      	str	r0, [r7, #48]	; 0x30
              return http_post_rxpbuf(hs, q);
 800bb8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bb8c:	68b8      	ldr	r0, [r7, #8]
 800bb8e:	f7ff fefb 	bl	800b988 <http_post_rxpbuf>
 800bb92:	4603      	mov	r3, r0
 800bb94:	e010      	b.n	800bbb8 <http_post_request+0x1b0>
            } else {
              return ERR_OK;
 800bb96:	2300      	movs	r3, #0
 800bb98:	e00e      	b.n	800bbb8 <http_post_request+0x1b0>
            }
          } else {
            /* return file passed from application */
            return http_find_file(hs, http_uri_buf, 0);
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	490b      	ldr	r1, [pc, #44]	; (800bbcc <http_post_request+0x1c4>)
 800bb9e:	68b8      	ldr	r0, [r7, #8]
 800bba0:	f000 f996 	bl	800bed0 <http_find_file>
 800bba4:	4603      	mov	r3, r0
 800bba6:	e007      	b.n	800bbb8 <http_post_request+0x1b0>
          }
        } else {
          LWIP_DEBUGF(HTTPD_DEBUG, ("POST received invalid Content-Length: %s\n",
                                    content_len_num));
          return ERR_ARG;
 800bba8:	f06f 030f 	mvn.w	r3, #15
 800bbac:	e004      	b.n	800bbb8 <http_post_request+0x1b0>
    }
    /* If we come here, headers are fully received (double-crlf), but Content-Length
       was not included. Since this is currently the only supported method, we have
       to fail in this case! */
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error when parsing Content-Length\n"));
    return ERR_ARG;
 800bbae:	f06f 030f 	mvn.w	r3, #15
 800bbb2:	e001      	b.n	800bbb8 <http_post_request+0x1b0>
  }
  /* if we come here, the POST is incomplete */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  return ERR_INPROGRESS;
 800bbb4:	f06f 0304 	mvn.w	r3, #4
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  return ERR_ARG;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3738      	adds	r7, #56	; 0x38
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}
 800bbc0:	08019788 	.word	0x08019788
 800bbc4:	08019214 	.word	0x08019214
 800bbc8:	080196f8 	.word	0x080196f8
 800bbcc:	2000161c 	.word	0x2000161c

0800bbd0 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b092      	sub	sp, #72	; 0x48
 800bbd4:	af02      	add	r7, sp, #8
 800bbd6:	60f8      	str	r0, [r7, #12]
 800bbd8:	60b9      	str	r1, [r7, #8]
 800bbda:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800bbe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d106      	bne.n	800bbf4 <http_parse_request+0x24>
 800bbe6:	4b87      	ldr	r3, [pc, #540]	; (800be04 <http_parse_request+0x234>)
 800bbe8:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800bbec:	4986      	ldr	r1, [pc, #536]	; (800be08 <http_parse_request+0x238>)
 800bbee:	4887      	ldr	r0, [pc, #540]	; (800be0c <http_parse_request+0x23c>)
 800bbf0:	f00b fa00 	bl	8016ff4 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800bbf4:	68bb      	ldr	r3, [r7, #8]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d106      	bne.n	800bc08 <http_parse_request+0x38>
 800bbfa:	4b82      	ldr	r3, [pc, #520]	; (800be04 <http_parse_request+0x234>)
 800bbfc:	f240 72af 	movw	r2, #1967	; 0x7af
 800bc00:	4983      	ldr	r1, [pc, #524]	; (800be10 <http_parse_request+0x240>)
 800bc02:	4882      	ldr	r0, [pc, #520]	; (800be0c <http_parse_request+0x23c>)
 800bc04:	f00b f9f6 	bl	8016ff4 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800bc08:	68bb      	ldr	r3, [r7, #8]
 800bc0a:	695b      	ldr	r3, [r3, #20]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d103      	bne.n	800bc18 <http_parse_request+0x48>
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	699b      	ldr	r3, [r3, #24]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d002      	beq.n	800bc1e <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800bc18:	f06f 0307 	mvn.w	r3, #7
 800bc1c:	e0ed      	b.n	800bdfa <http_parse_request+0x22a>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	6a1b      	ldr	r3, [r3, #32]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d103      	bne.n	800bc2e <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc2a:	621a      	str	r2, [r3, #32]
 800bc2c:	e005      	b.n	800bc3a <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	6a1b      	ldr	r3, [r3, #32]
 800bc32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bc34:	4618      	mov	r0, r3
 800bc36:	f002 f991 	bl	800df5c <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800bc3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bc3c:	f002 f96c 	bl	800df18 <pbuf_ref>

  if (hs->req->next != NULL) {
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	6a1b      	ldr	r3, [r3, #32]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d012      	beq.n	800bc70 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	6a1b      	ldr	r3, [r3, #32]
 800bc4e:	891b      	ldrh	r3, [r3, #8]
 800bc50:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800bc54:	4293      	cmp	r3, r2
 800bc56:	bf28      	it	cs
 800bc58:	4613      	movcs	r3, r2
 800bc5a:	877b      	strh	r3, [r7, #58]	; 0x3a
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	6a18      	ldr	r0, [r3, #32]
 800bc60:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800bc62:	2300      	movs	r3, #0
 800bc64:	496b      	ldr	r1, [pc, #428]	; (800be14 <http_parse_request+0x244>)
 800bc66:	f002 faa1 	bl	800e1ac <pbuf_copy_partial>
    data = httpd_req_buf;
 800bc6a:	4b6a      	ldr	r3, [pc, #424]	; (800be14 <http_parse_request+0x244>)
 800bc6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc6e:	e005      	b.n	800bc7c <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800bc70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc72:	685b      	ldr	r3, [r3, #4]
 800bc74:	63fb      	str	r3, [r7, #60]	; 0x3c
    data_len = p->len;
 800bc76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc78:	895b      	ldrh	r3, [r3, #10]
 800bc7a:	877b      	strh	r3, [r7, #58]	; 0x3a
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800bc7c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bc7e:	2b06      	cmp	r3, #6
 800bc80:	f240 80a1 	bls.w	800bdc6 <http_parse_request+0x1f6>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800bc84:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bc86:	461a      	mov	r2, r3
 800bc88:	4963      	ldr	r1, [pc, #396]	; (800be18 <http_parse_request+0x248>)
 800bc8a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bc8c:	f000 fd40 	bl	800c710 <lwip_strnstr>
 800bc90:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800bc92:	6a3b      	ldr	r3, [r7, #32]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	f000 8096 	beq.w	800bdc6 <http_parse_request+0x1f6>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	633b      	str	r3, [r7, #48]	; 0x30
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800bca2:	2204      	movs	r2, #4
 800bca4:	495d      	ldr	r1, [pc, #372]	; (800be1c <http_parse_request+0x24c>)
 800bca6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bca8:	f00b faea 	bl	8017280 <strncmp>
 800bcac:	4603      	mov	r3, r0
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d103      	bne.n	800bcba <http_parse_request+0xea>
        sp1 = data + 3;
 800bcb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcb4:	3303      	adds	r3, #3
 800bcb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bcb8:	e014      	b.n	800bce4 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received GET request\"\n"));
#if LWIP_HTTPD_SUPPORT_POST
      } else if (!strncmp(data, "POST ", 5)) {
 800bcba:	2205      	movs	r2, #5
 800bcbc:	4958      	ldr	r1, [pc, #352]	; (800be20 <http_parse_request+0x250>)
 800bcbe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bcc0:	f00b fade 	bl	8017280 <strncmp>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d105      	bne.n	800bcd6 <http_parse_request+0x106>
        /* store request type */
        is_post = 1;
 800bcca:	2301      	movs	r3, #1
 800bccc:	637b      	str	r3, [r7, #52]	; 0x34
        sp1 = data + 4;
 800bcce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcd0:	3304      	adds	r3, #4
 800bcd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bcd4:	e006      	b.n	800bce4 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received POST request\n"));
#endif /* LWIP_HTTPD_SUPPORT_POST */
      } else {
        /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
        data[4] = 0;
 800bcd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcd8:	3304      	adds	r3, #4
 800bcda:	2200      	movs	r2, #0
 800bcdc:	701a      	strb	r2, [r3, #0]
        /* unsupported method! */
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
 800bcde:	f06f 030f 	mvn.w	r3, #15
 800bce2:	e08a      	b.n	800bdfa <http_parse_request+0x22a>
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800bce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bce6:	1c5a      	adds	r2, r3, #1
 800bce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcea:	1ad3      	subs	r3, r2, r3
 800bcec:	b29b      	uxth	r3, r3
 800bcee:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800bcf0:	1ad3      	subs	r3, r2, r3
 800bcf2:	83fb      	strh	r3, [r7, #30]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800bcf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcf6:	3301      	adds	r3, #1
 800bcf8:	8bfa      	ldrh	r2, [r7, #30]
 800bcfa:	494a      	ldr	r1, [pc, #296]	; (800be24 <http_parse_request+0x254>)
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f000 fd07 	bl	800c710 <lwip_strnstr>
 800bd02:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800bd04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d10c      	bne.n	800bd24 <http_parse_request+0x154>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800bd0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd0c:	3301      	adds	r3, #1
 800bd0e:	8bfa      	ldrh	r2, [r7, #30]
 800bd10:	4941      	ldr	r1, [pc, #260]	; (800be18 <http_parse_request+0x248>)
 800bd12:	4618      	mov	r0, r3
 800bd14:	f000 fcfc 	bl	800c710 <lwip_strnstr>
 800bd18:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	633b      	str	r3, [r7, #48]	; 0x30
#if LWIP_HTTPD_SUPPORT_POST
        if (is_post) {
 800bd1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d163      	bne.n	800bdec <http_parse_request+0x21c>
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800bd24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd26:	3301      	adds	r3, #1
 800bd28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd2a:	1ad3      	subs	r3, r2, r3
 800bd2c:	83bb      	strh	r3, [r7, #28]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800bd2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d048      	beq.n	800bdc6 <http_parse_request+0x1f6>
 800bd34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd38:	429a      	cmp	r2, r3
 800bd3a:	d944      	bls.n	800bdc6 <http_parse_request+0x1f6>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800bd3c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bd3e:	461a      	mov	r2, r3
 800bd40:	4939      	ldr	r1, [pc, #228]	; (800be28 <http_parse_request+0x258>)
 800bd42:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bd44:	f000 fce4 	bl	800c710 <lwip_strnstr>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d03b      	beq.n	800bdc6 <http_parse_request+0x1f6>
          char *uri = sp1 + 1;
 800bd4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd50:	3301      	adds	r3, #1
 800bd52:	61bb      	str	r3, [r7, #24]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800bd54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd56:	2200      	movs	r2, #0
 800bd58:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800bd5a:	8bbb      	ldrh	r3, [r7, #28]
 800bd5c:	69ba      	ldr	r2, [r7, #24]
 800bd5e:	4413      	add	r3, r2
 800bd60:	2200      	movs	r2, #0
 800bd62:	701a      	strb	r2, [r3, #0]
          LWIP_DEBUGF(HTTPD_DEBUG, ("Received \"%s\" request for URI: \"%s\"\n",
                                    data, uri));
#if LWIP_HTTPD_SUPPORT_POST
          if (is_post) {
 800bd64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d026      	beq.n	800bdb8 <http_parse_request+0x1e8>
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
            struct pbuf *q = hs->req;
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	6a1b      	ldr	r3, [r3, #32]
 800bd6e:	617b      	str	r3, [r7, #20]
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            struct pbuf *q = inp;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            err = http_post_request(q, hs, data, data_len, uri, sp2);
 800bd70:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800bd72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd74:	9301      	str	r3, [sp, #4]
 800bd76:	69bb      	ldr	r3, [r7, #24]
 800bd78:	9300      	str	r3, [sp, #0]
 800bd7a:	4613      	mov	r3, r2
 800bd7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bd7e:	68b9      	ldr	r1, [r7, #8]
 800bd80:	6978      	ldr	r0, [r7, #20]
 800bd82:	f7ff fe41 	bl	800ba08 <http_post_request>
 800bd86:	4603      	mov	r3, r0
 800bd88:	74fb      	strb	r3, [r7, #19]
            if (err != ERR_OK) {
 800bd8a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d00a      	beq.n	800bda8 <http_parse_request+0x1d8>
              /* restore header for next try */
              *sp1 = ' ';
 800bd92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd94:	2220      	movs	r2, #32
 800bd96:	701a      	strb	r2, [r3, #0]
              *sp2 = ' ';
 800bd98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd9a:	2220      	movs	r2, #32
 800bd9c:	701a      	strb	r2, [r3, #0]
              uri[uri_len] = ' ';
 800bd9e:	8bbb      	ldrh	r3, [r7, #28]
 800bda0:	69ba      	ldr	r2, [r7, #24]
 800bda2:	4413      	add	r3, r2
 800bda4:	2220      	movs	r2, #32
 800bda6:	701a      	strb	r2, [r3, #0]
            }
            if (err == ERR_ARG) {
 800bda8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bdac:	f113 0f10 	cmn.w	r3, #16
 800bdb0:	d01e      	beq.n	800bdf0 <http_parse_request+0x220>
              goto badrequest;
            }
            return err;
 800bdb2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bdb6:	e020      	b.n	800bdfa <http_parse_request+0x22a>
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800bdb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdba:	69b9      	ldr	r1, [r7, #24]
 800bdbc:	68b8      	ldr	r0, [r7, #8]
 800bdbe:	f000 f887 	bl	800bed0 <http_find_file>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	e019      	b.n	800bdfa <http_parse_request+0x22a>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	6a1b      	ldr	r3, [r3, #32]
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f002 f88c 	bl	800dee8 <pbuf_clen>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	823b      	strh	r3, [r7, #16]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	6a1b      	ldr	r3, [r3, #32]
 800bdd8:	891b      	ldrh	r3, [r3, #8]
 800bdda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bdde:	d209      	bcs.n	800bdf4 <http_parse_request+0x224>
 800bde0:	8a3b      	ldrh	r3, [r7, #16]
 800bde2:	2b05      	cmp	r3, #5
 800bde4:	d806      	bhi.n	800bdf4 <http_parse_request+0x224>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800bde6:	f06f 0304 	mvn.w	r3, #4
 800bdea:	e006      	b.n	800bdfa <http_parse_request+0x22a>
          goto badrequest;
 800bdec:	bf00      	nop
 800bdee:	e002      	b.n	800bdf6 <http_parse_request+0x226>
              goto badrequest;
 800bdf0:	bf00      	nop
 800bdf2:	e000      	b.n	800bdf6 <http_parse_request+0x226>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
 800bdf4:	bf00      	nop
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800bdf6:	f06f 030f 	mvn.w	r3, #15
  }
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3740      	adds	r7, #64	; 0x40
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}
 800be02:	bf00      	nop
 800be04:	08019604 	.word	0x08019604
 800be08:	08019790 	.word	0x08019790
 800be0c:	0801964c 	.word	0x0801964c
 800be10:	08019674 	.word	0x08019674
 800be14:	2000121c 	.word	0x2000121c
 800be18:	080196f8 	.word	0x080196f8
 800be1c:	0801979c 	.word	0x0801979c
 800be20:	080197a4 	.word	0x080197a4
 800be24:	080197ac 	.word	0x080197ac
 800be28:	08019788 	.word	0x08019788

0800be2c <http_uri_is_ssi>:
 *
 * @return 1 for SSI, 0 for standard files
 */
static u8_t
http_uri_is_ssi(struct fs_file *file, const char *uri)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b088      	sub	sp, #32
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
 800be34:	6039      	str	r1, [r7, #0]
  size_t loop;
  u8_t tag_check = 0;
 800be36:	2300      	movs	r3, #0
 800be38:	76fb      	strb	r3, [r7, #27]
  if (file != NULL) {
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d040      	beq.n	800bec2 <http_uri_is_ssi+0x96>
    /* See if we have been asked for an shtml file and, if so,
        enable tag checking. */
    const char *ext = NULL, *sub;
 800be40:	2300      	movs	r3, #0
 800be42:	617b      	str	r3, [r7, #20]
    char *param = (char *)strstr(uri, "?");
 800be44:	213f      	movs	r1, #63	; 0x3f
 800be46:	6838      	ldr	r0, [r7, #0]
 800be48:	f00b fa05 	bl	8017256 <strchr>
 800be4c:	60f8      	str	r0, [r7, #12]
    if (param != NULL) {
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d002      	beq.n	800be5a <http_uri_is_ssi+0x2e>
      /* separate uri from parameters for now, set back later */
      *param = 0;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	2200      	movs	r2, #0
 800be58:	701a      	strb	r2, [r3, #0]
    }
    sub = uri;
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	613b      	str	r3, [r7, #16]
    ext = uri;
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	617b      	str	r3, [r7, #20]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 800be62:	212e      	movs	r1, #46	; 0x2e
 800be64:	6938      	ldr	r0, [r7, #16]
 800be66:	f00b f9f6 	bl	8017256 <strchr>
 800be6a:	6138      	str	r0, [r7, #16]
 800be6c:	e009      	b.n	800be82 <http_uri_is_ssi+0x56>
      ext = sub;
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	617b      	str	r3, [r7, #20]
      sub++;
 800be72:	693b      	ldr	r3, [r7, #16]
 800be74:	3301      	adds	r3, #1
 800be76:	613b      	str	r3, [r7, #16]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 800be78:	212e      	movs	r1, #46	; 0x2e
 800be7a:	6938      	ldr	r0, [r7, #16]
 800be7c:	f00b f9eb 	bl	8017256 <strchr>
 800be80:	6138      	str	r0, [r7, #16]
 800be82:	693b      	ldr	r3, [r7, #16]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d1f2      	bne.n	800be6e <http_uri_is_ssi+0x42>
    }
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800be88:	2300      	movs	r3, #0
 800be8a:	61fb      	str	r3, [r7, #28]
 800be8c:	e010      	b.n	800beb0 <http_uri_is_ssi+0x84>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 800be8e:	4a0f      	ldr	r2, [pc, #60]	; (800becc <http_uri_is_ssi+0xa0>)
 800be90:	69fb      	ldr	r3, [r7, #28]
 800be92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be96:	4619      	mov	r1, r3
 800be98:	6978      	ldr	r0, [r7, #20]
 800be9a:	f000 fc6f 	bl	800c77c <lwip_stricmp>
 800be9e:	4603      	mov	r3, r0
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d102      	bne.n	800beaa <http_uri_is_ssi+0x7e>
        tag_check = 1;
 800bea4:	2301      	movs	r3, #1
 800bea6:	76fb      	strb	r3, [r7, #27]
        break;
 800bea8:	e005      	b.n	800beb6 <http_uri_is_ssi+0x8a>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800beaa:	69fb      	ldr	r3, [r7, #28]
 800beac:	3301      	adds	r3, #1
 800beae:	61fb      	str	r3, [r7, #28]
 800beb0:	69fb      	ldr	r3, [r7, #28]
 800beb2:	2b04      	cmp	r3, #4
 800beb4:	d9eb      	bls.n	800be8e <http_uri_is_ssi+0x62>
      }
    }
    if (param != NULL) {
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d002      	beq.n	800bec2 <http_uri_is_ssi+0x96>
      *param = '?';
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	223f      	movs	r2, #63	; 0x3f
 800bec0:	701a      	strb	r2, [r3, #0]
    }
  }
  return tag_check;
 800bec2:	7efb      	ldrb	r3, [r7, #27]
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3720      	adds	r7, #32
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}
 800becc:	08020238 	.word	0x08020238

0800bed0 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800bed0:	b590      	push	{r4, r7, lr}
 800bed2:	b093      	sub	sp, #76	; 0x4c
 800bed4:	af02      	add	r7, sp, #8
 800bed6:	60f8      	str	r0, [r7, #12]
 800bed8:	60b9      	str	r1, [r7, #8]
 800beda:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800bedc:	2300      	movs	r3, #0
 800bede:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800bee0:	2300      	movs	r3, #0
 800bee2:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800bee4:	2300      	movs	r3, #0
 800bee6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	4618      	mov	r0, r3
 800beee:	f7f4 f979 	bl	80001e4 <strlen>
 800bef2:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800bef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d072      	beq.n	800bfe0 <http_find_file+0x110>
 800befa:	68ba      	ldr	r2, [r7, #8]
 800befc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800befe:	3b01      	subs	r3, #1
 800bf00:	4413      	add	r3, r2
 800bf02:	781b      	ldrb	r3, [r3, #0]
 800bf04:	2b2f      	cmp	r3, #47	; 0x2f
 800bf06:	d16b      	bne.n	800bfe0 <http_find_file+0x110>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800bf08:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800bf0a:	4a80      	ldr	r2, [pc, #512]	; (800c10c <http_find_file+0x23c>)
 800bf0c:	4293      	cmp	r3, r2
 800bf0e:	d102      	bne.n	800bf16 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800bf10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf12:	2b01      	cmp	r3, #1
 800bf14:	d164      	bne.n	800bfe0 <http_find_file+0x110>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800bf16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf18:	3b01      	subs	r3, #1
 800bf1a:	2b3f      	cmp	r3, #63	; 0x3f
 800bf1c:	bf28      	it	cs
 800bf1e:	233f      	movcs	r3, #63	; 0x3f
 800bf20:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 800bf22:	6a3b      	ldr	r3, [r7, #32]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d00a      	beq.n	800bf3e <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	6a3a      	ldr	r2, [r7, #32]
 800bf2c:	4619      	mov	r1, r3
 800bf2e:	4877      	ldr	r0, [pc, #476]	; (800c10c <http_find_file+0x23c>)
 800bf30:	f00b f830 	bl	8016f94 <memcpy>
      http_uri_buf[copy_len] = 0;
 800bf34:	4a75      	ldr	r2, [pc, #468]	; (800c10c <http_find_file+0x23c>)
 800bf36:	6a3b      	ldr	r3, [r7, #32]
 800bf38:	4413      	add	r3, r2
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800bf3e:	2300      	movs	r3, #0
 800bf40:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf42:	e04a      	b.n	800bfda <http_find_file+0x10a>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800bf44:	6a3b      	ldr	r3, [r7, #32]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d028      	beq.n	800bf9c <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800bf4a:	6a3b      	ldr	r3, [r7, #32]
 800bf4c:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800bf50:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 800bf52:	69fb      	ldr	r3, [r7, #28]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d01e      	beq.n	800bf96 <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800bf58:	4a6d      	ldr	r2, [pc, #436]	; (800c110 <http_find_file+0x240>)
 800bf5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bf60:	4618      	mov	r0, r3
 800bf62:	f7f4 f93f 	bl	80001e4 <strlen>
 800bf66:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800bf68:	69ba      	ldr	r2, [r7, #24]
 800bf6a:	69fb      	ldr	r3, [r7, #28]
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	bf28      	it	cs
 800bf70:	4613      	movcs	r3, r2
 800bf72:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800bf74:	6a3b      	ldr	r3, [r7, #32]
 800bf76:	4a65      	ldr	r2, [pc, #404]	; (800c10c <http_find_file+0x23c>)
 800bf78:	1898      	adds	r0, r3, r2
 800bf7a:	4a65      	ldr	r2, [pc, #404]	; (800c110 <http_find_file+0x240>)
 800bf7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf7e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bf82:	697a      	ldr	r2, [r7, #20]
 800bf84:	4619      	mov	r1, r3
 800bf86:	f00b f805 	bl	8016f94 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800bf8a:	6a3a      	ldr	r2, [r7, #32]
 800bf8c:	697b      	ldr	r3, [r7, #20]
 800bf8e:	4413      	add	r3, r2
 800bf90:	4a5e      	ldr	r2, [pc, #376]	; (800c10c <http_find_file+0x23c>)
 800bf92:	2100      	movs	r1, #0
 800bf94:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800bf96:	4b5d      	ldr	r3, [pc, #372]	; (800c10c <http_find_file+0x23c>)
 800bf98:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf9a:	e004      	b.n	800bfa6 <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800bf9c:	4a5c      	ldr	r2, [pc, #368]	; (800c110 <http_find_file+0x240>)
 800bf9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfa0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bfa4:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f7fe fb9e 	bl	800a6ec <fs_open>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 800bfb4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d10b      	bne.n	800bfd4 <http_find_file+0x104>
        uri = file_name;
 800bfbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfbe:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
 800bfc4:	4a52      	ldr	r2, [pc, #328]	; (800c110 <http_find_file+0x240>)
 800bfc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfc8:	00db      	lsls	r3, r3, #3
 800bfca:	4413      	add	r3, r2
 800bfcc:	791b      	ldrb	r3, [r3, #4]
 800bfce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI */
        break;
 800bfd2:	e005      	b.n	800bfe0 <http_find_file+0x110>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800bfd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfd6:	3301      	adds	r3, #1
 800bfd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfdc:	2b04      	cmp	r3, #4
 800bfde:	d9b1      	bls.n	800bf44 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800bfe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d176      	bne.n	800c0d4 <http_find_file+0x204>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	213f      	movs	r1, #63	; 0x3f
 800bfea:	4618      	mov	r0, r3
 800bfec:	f00b f933 	bl	8017256 <strchr>
 800bff0:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800bff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d005      	beq.n	800c004 <http_find_file+0x134>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800bff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bffa:	2200      	movs	r2, #0
 800bffc:	701a      	strb	r2, [r3, #0]
      params++;
 800bffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c000:	3301      	adds	r3, #1
 800c002:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 800c004:	4b43      	ldr	r3, [pc, #268]	; (800c114 <http_find_file+0x244>)
 800c006:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c00a:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 800c00c:	4b42      	ldr	r3, [pc, #264]	; (800c118 <http_find_file+0x248>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d034      	beq.n	800c07e <http_find_file+0x1ae>
 800c014:	4b41      	ldr	r3, [pc, #260]	; (800c11c <http_find_file+0x24c>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d030      	beq.n	800c07e <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 800c01c:	2300      	movs	r3, #0
 800c01e:	633b      	str	r3, [r7, #48]	; 0x30
 800c020:	e028      	b.n	800c074 <http_find_file+0x1a4>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 800c022:	68b8      	ldr	r0, [r7, #8]
 800c024:	4b3d      	ldr	r3, [pc, #244]	; (800c11c <http_find_file+0x24c>)
 800c026:	681a      	ldr	r2, [r3, #0]
 800c028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c02a:	00db      	lsls	r3, r3, #3
 800c02c:	4413      	add	r3, r2
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	4619      	mov	r1, r3
 800c032:	f7f4 f8cd 	bl	80001d0 <strcmp>
 800c036:	4603      	mov	r3, r0
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d118      	bne.n	800c06e <http_find_file+0x19e>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 800c03c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c03e:	68f8      	ldr	r0, [r7, #12]
 800c040:	f7fe fd08 	bl	800aa54 <extract_uri_parameters>
 800c044:	4603      	mov	r3, r0
 800c046:	4a33      	ldr	r2, [pc, #204]	; (800c114 <http_find_file+0x244>)
 800c048:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800c04a:	4b34      	ldr	r3, [pc, #208]	; (800c11c <http_find_file+0x24c>)
 800c04c:	681a      	ldr	r2, [r3, #0]
 800c04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c050:	00db      	lsls	r3, r3, #3
 800c052:	4413      	add	r3, r2
 800c054:	685c      	ldr	r4, [r3, #4]
 800c056:	4b2f      	ldr	r3, [pc, #188]	; (800c114 <http_find_file+0x244>)
 800c058:	6819      	ldr	r1, [r3, #0]
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                         hs->param_vals);
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	3370      	adds	r3, #112	; 0x70
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800c064:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c066:	47a0      	blx	r4
 800c068:	4603      	mov	r3, r0
 800c06a:	60bb      	str	r3, [r7, #8]
          break;
 800c06c:	e007      	b.n	800c07e <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 800c06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c070:	3301      	adds	r3, #1
 800c072:	633b      	str	r3, [r7, #48]	; 0x30
 800c074:	4b28      	ldr	r3, [pc, #160]	; (800c118 <http_find_file+0x248>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c07a:	429a      	cmp	r2, r3
 800c07c:	dbd1      	blt.n	800c022 <http_find_file+0x152>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	68ba      	ldr	r2, [r7, #8]
 800c082:	4611      	mov	r1, r2
 800c084:	4618      	mov	r0, r3
 800c086:	f7fe fb31 	bl	800a6ec <fs_open>
 800c08a:	4603      	mov	r3, r0
 800c08c:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 800c08e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d102      	bne.n	800c09c <http_find_file+0x1cc>
      file = &hs->file_handle;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	63bb      	str	r3, [r7, #56]	; 0x38
 800c09a:	e006      	b.n	800c0aa <http_find_file+0x1da>
    } else {
      file = http_get_404_file(hs, &uri);
 800c09c:	f107 0308 	add.w	r3, r7, #8
 800c0a0:	4619      	mov	r1, r3
 800c0a2:	68f8      	ldr	r0, [r7, #12]
 800c0a4:	f7ff fc12 	bl	800b8cc <http_get_404_file>
 800c0a8:	63b8      	str	r0, [r7, #56]	; 0x38
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 800c0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d011      	beq.n	800c0d4 <http_find_file+0x204>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 800c0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b2:	7c1b      	ldrb	r3, [r3, #16]
 800c0b4:	f003 0308 	and.w	r3, r3, #8
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d003      	beq.n	800c0c4 <http_find_file+0x1f4>
        tag_check = 1;
 800c0bc:	2301      	movs	r3, #1
 800c0be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c0c2:	e007      	b.n	800c0d4 <http_find_file+0x204>
      } else {
#if LWIP_HTTPD_SSI_BY_FILE_EXTENSION
        tag_check = http_uri_is_ssi(file, uri);
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	4619      	mov	r1, r3
 800c0c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c0ca:	f7ff feaf 	bl	800be2c <http_uri_is_ssi>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800c0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d106      	bne.n	800c0e8 <http_find_file+0x218>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800c0da:	f107 0308 	add.w	r3, r7, #8
 800c0de:	4619      	mov	r1, r3
 800c0e0:	68f8      	ldr	r0, [r7, #12]
 800c0e2:	f7ff fbf3 	bl	800b8cc <http_get_404_file>
 800c0e6:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800c0e8:	68ba      	ldr	r2, [r7, #8]
 800c0ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0ec:	9301      	str	r3, [sp, #4]
 800c0ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c0f2:	9300      	str	r3, [sp, #0]
 800c0f4:	4613      	mov	r3, r2
 800c0f6:	687a      	ldr	r2, [r7, #4]
 800c0f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c0fa:	68f8      	ldr	r0, [r7, #12]
 800c0fc:	f000 f810 	bl	800c120 <http_init_file>
 800c100:	4603      	mov	r3, r0
}
 800c102:	4618      	mov	r0, r3
 800c104:	3744      	adds	r7, #68	; 0x44
 800c106:	46bd      	mov	sp, r7
 800c108:	bd90      	pop	{r4, r7, pc}
 800c10a:	bf00      	nop
 800c10c:	2000161c 	.word	0x2000161c
 800c110:	0802024c 	.word	0x0802024c
 800c114:	20001670 	.word	0x20001670
 800c118:	2000166c 	.word	0x2000166c
 800c11c:	20001668 	.word	0x20001668

0800c120 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b088      	sub	sp, #32
 800c124:	af00      	add	r7, sp, #0
 800c126:	60f8      	str	r0, [r7, #12]
 800c128:	60b9      	str	r1, [r7, #8]
 800c12a:	607a      	str	r2, [r7, #4]
 800c12c:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d071      	beq.n	800c218 <http_init_file+0xf8>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d106      	bne.n	800c14a <http_init_file+0x2a>
 800c13c:	4b47      	ldr	r3, [pc, #284]	; (800c25c <http_init_file+0x13c>)
 800c13e:	f640 120b 	movw	r2, #2315	; 0x90b
 800c142:	4947      	ldr	r1, [pc, #284]	; (800c260 <http_init_file+0x140>)
 800c144:	4847      	ldr	r0, [pc, #284]	; (800c264 <http_init_file+0x144>)
 800c146:	f00a ff55 	bl	8016ff4 <iprintf>
#endif

#if LWIP_HTTPD_SSI
    if (tag_check) {
 800c14a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d01e      	beq.n	800c190 <http_init_file+0x70>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 800c152:	f7fe fb22 	bl	800a79a <http_ssi_state_alloc>
 800c156:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 800c158:	69fb      	ldr	r3, [r7, #28]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d018      	beq.n	800c190 <http_init_file+0x70>
        ssi->tag_index = 0;
 800c15e:	69fb      	ldr	r3, [r7, #28]
 800c160:	2200      	movs	r2, #0
 800c162:	821a      	strh	r2, [r3, #16]
        ssi->tag_state = TAG_NONE;
 800c164:	69fb      	ldr	r3, [r7, #28]
 800c166:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800c16a:	331a      	adds	r3, #26
 800c16c:	2200      	movs	r2, #0
 800c16e:	701a      	strb	r2, [r3, #0]
        ssi->parsed = file->data;
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	681a      	ldr	r2, [r3, #0]
 800c174:	69fb      	ldr	r3, [r7, #28]
 800c176:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	685b      	ldr	r3, [r3, #4]
 800c17c:	461a      	mov	r2, r3
 800c17e:	69fb      	ldr	r3, [r7, #28]
 800c180:	60da      	str	r2, [r3, #12]
        ssi->tag_end = file->data;
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	681a      	ldr	r2, [r3, #0]
 800c186:	69fb      	ldr	r3, [r7, #28]
 800c188:	609a      	str	r2, [r3, #8]
        hs->ssi = ssi;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	69fa      	ldr	r2, [r7, #28]
 800c18e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	68ba      	ldr	r2, [r7, #8]
 800c194:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	681a      	ldr	r2, [r3, #0]
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	685b      	ldr	r3, [r3, #4]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	da06      	bge.n	800c1b4 <http_init_file+0x94>
 800c1a6:	4b2d      	ldr	r3, [pc, #180]	; (800c25c <http_init_file+0x13c>)
 800c1a8:	f640 1234 	movw	r2, #2356	; 0x934
 800c1ac:	492e      	ldr	r1, [pc, #184]	; (800c268 <http_init_file+0x148>)
 800c1ae:	482d      	ldr	r0, [pc, #180]	; (800c264 <http_init_file+0x144>)
 800c1b0:	f00a ff20 	bl	8016ff4 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	461a      	mov	r2, r3
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d032      	beq.n	800c232 <http_init_file+0x112>
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	695b      	ldr	r3, [r3, #20]
 800c1d0:	7c1b      	ldrb	r3, [r3, #16]
 800c1d2:	f003 0301 	and.w	r3, r3, #1
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d02b      	beq.n	800c232 <http_init_file+0x112>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	6998      	ldr	r0, [r3, #24]
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1e2:	461a      	mov	r2, r3
 800c1e4:	4921      	ldr	r1, [pc, #132]	; (800c26c <http_init_file+0x14c>)
 800c1e6:	f000 fa93 	bl	800c710 <lwip_strnstr>
 800c1ea:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 800c1ec:	69bb      	ldr	r3, [r7, #24]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d01f      	beq.n	800c232 <http_init_file+0x112>
        int diff = file_start + 4 - hs->file;
 800c1f2:	69bb      	ldr	r3, [r7, #24]
 800c1f4:	1d1a      	adds	r2, r3, #4
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	699b      	ldr	r3, [r3, #24]
 800c1fa:	1ad3      	subs	r3, r2, r3
 800c1fc:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	699a      	ldr	r2, [r3, #24]
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	441a      	add	r2, r3
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	1ad2      	subs	r2, r2, r3
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	625a      	str	r2, [r3, #36]	; 0x24
 800c216:	e00c      	b.n	800c232 <http_init_file+0x112>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	2200      	movs	r2, #0
 800c21c:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	2200      	movs	r2, #0
 800c222:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	2200      	movs	r2, #0
 800c228:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2200      	movs	r2, #0
 800c22e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  }
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Determine the HTTP headers to send based on the file extension of
   * the requested URI. */
  if ((hs->handle == NULL) || ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) == 0)) {
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	695b      	ldr	r3, [r3, #20]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d006      	beq.n	800c248 <http_init_file+0x128>
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	695b      	ldr	r3, [r3, #20]
 800c23e:	7c1b      	ldrb	r3, [r3, #16]
 800c240:	f003 0301 	and.w	r3, r3, #1
 800c244:	2b00      	cmp	r3, #0
 800c246:	d103      	bne.n	800c250 <http_init_file+0x130>
    get_http_headers(hs, uri);
 800c248:	6839      	ldr	r1, [r7, #0]
 800c24a:	68f8      	ldr	r0, [r7, #12]
 800c24c:	f7fe fd32 	bl	800acb4 <get_http_headers>
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800c250:	2300      	movs	r3, #0
}
 800c252:	4618      	mov	r0, r3
 800c254:	3720      	adds	r7, #32
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}
 800c25a:	bf00      	nop
 800c25c:	08019604 	.word	0x08019604
 800c260:	080197b0 	.word	0x080197b0
 800c264:	0801964c 	.word	0x0801964c
 800c268:	080197c4 	.word	0x080197c4
 800c26c:	08019788 	.word	0x08019788

0800c270 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b084      	sub	sp, #16
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	460b      	mov	r3, r1
 800c27a:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d002      	beq.n	800c28c <http_err+0x1c>
    http_state_free(hs);
 800c286:	68f8      	ldr	r0, [r7, #12]
 800c288:	f7fe fafa 	bl	800a880 <http_state_free>
  }
}
 800c28c:	bf00      	nop
 800c28e:	3710      	adds	r7, #16
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}

0800c294 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b086      	sub	sp, #24
 800c298:	af00      	add	r7, sp, #0
 800c29a:	60f8      	str	r0, [r7, #12]
 800c29c:	60b9      	str	r1, [r7, #8]
 800c29e:	4613      	mov	r3, r2
 800c2a0:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d101      	bne.n	800c2b0 <http_sent+0x1c>
    return ERR_OK;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	e008      	b.n	800c2c2 <http_sent+0x2e>
  }

  hs->retries = 0;
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800c2b8:	6979      	ldr	r1, [r7, #20]
 800c2ba:	68b8      	ldr	r0, [r7, #8]
 800c2bc:	f7ff faac 	bl	800b818 <http_send>

  return ERR_OK;
 800c2c0:	2300      	movs	r3, #0
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3718      	adds	r7, #24
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}

0800c2ca <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800c2ca:	b580      	push	{r7, lr}
 800c2cc:	b084      	sub	sp, #16
 800c2ce:	af00      	add	r7, sp, #0
 800c2d0:	6078      	str	r0, [r7, #4]
 800c2d2:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d107      	bne.n	800c2ee <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800c2de:	2100      	movs	r1, #0
 800c2e0:	6838      	ldr	r0, [r7, #0]
 800c2e2:	f7fe fb9b 	bl	800aa1c <http_close_conn>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	e021      	b.n	800c332 <http_poll+0x68>
  } else {
    hs->retries++;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c2f4:	3301      	adds	r3, #1
 800c2f6:	b2da      	uxtb	r2, r3
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c304:	2b04      	cmp	r3, #4
 800c306:	d105      	bne.n	800c314 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800c308:	68f9      	ldr	r1, [r7, #12]
 800c30a:	6838      	ldr	r0, [r7, #0]
 800c30c:	f7fe fb86 	bl	800aa1c <http_close_conn>
      return ERR_OK;
 800c310:	2300      	movs	r3, #0
 800c312:	e00e      	b.n	800c332 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	695b      	ldr	r3, [r3, #20]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d009      	beq.n	800c330 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800c31c:	68f9      	ldr	r1, [r7, #12]
 800c31e:	6838      	ldr	r0, [r7, #0]
 800c320:	f7ff fa7a 	bl	800b818 <http_send>
 800c324:	4603      	mov	r3, r0
 800c326:	2b00      	cmp	r3, #0
 800c328:	d002      	beq.n	800c330 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800c32a:	6838      	ldr	r0, [r7, #0]
 800c32c:	f007 f8c2 	bl	80134b4 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800c330:	2300      	movs	r3, #0
}
 800c332:	4618      	mov	r0, r3
 800c334:	3710      	adds	r7, #16
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}
	...

0800c33c <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b086      	sub	sp, #24
 800c340:	af00      	add	r7, sp, #0
 800c342:	60f8      	str	r0, [r7, #12]
 800c344:	60b9      	str	r1, [r7, #8]
 800c346:	607a      	str	r2, [r7, #4]
 800c348:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800c34e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d105      	bne.n	800c362 <http_recv+0x26>
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d002      	beq.n	800c362 <http_recv+0x26>
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d111      	bne.n	800c386 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d008      	beq.n	800c37a <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	891b      	ldrh	r3, [r3, #8]
 800c36c:	4619      	mov	r1, r3
 800c36e:	68b8      	ldr	r0, [r7, #8]
 800c370:	f002 fc94 	bl	800ec9c <tcp_recved>
      pbuf_free(p);
 800c374:	6878      	ldr	r0, [r7, #4]
 800c376:	f001 fd2f 	bl	800ddd8 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800c37a:	6979      	ldr	r1, [r7, #20]
 800c37c:	68b8      	ldr	r0, [r7, #8]
 800c37e:	f7fe fb4d 	bl	800aa1c <http_close_conn>
    return ERR_OK;
 800c382:	2300      	movs	r3, #0
 800c384:	e072      	b.n	800c46c <http_recv+0x130>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	891b      	ldrh	r3, [r3, #8]
 800c38a:	4619      	mov	r1, r3
 800c38c:	68b8      	ldr	r0, [r7, #8]
 800c38e:	f002 fc85 	bl	800ec9c <tcp_recved>
  }

#if LWIP_HTTPD_SUPPORT_POST
  if (hs->post_content_len_left > 0) {
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d012      	beq.n	800c3c2 <http_recv+0x86>
    /* reset idle counter when POST data is received */
    hs->retries = 0;
 800c39c:	697b      	ldr	r3, [r7, #20]
 800c39e:	2200      	movs	r2, #0
 800c3a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    /* this is data for a POST, pass the complete pbuf to the application */
    http_post_rxpbuf(hs, p);
 800c3a4:	6879      	ldr	r1, [r7, #4]
 800c3a6:	6978      	ldr	r0, [r7, #20]
 800c3a8:	f7ff faee 	bl	800b988 <http_post_rxpbuf>
    /* pbuf is passed to the application, don't free it! */
    if (hs->post_content_len_left == 0) {
 800c3ac:	697b      	ldr	r3, [r7, #20]
 800c3ae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d103      	bne.n	800c3be <http_recv+0x82>
      /* all data received, send response or close connection */
      http_send(pcb, hs);
 800c3b6:	6979      	ldr	r1, [r7, #20]
 800c3b8:	68b8      	ldr	r0, [r7, #8]
 800c3ba:	f7ff fa2d 	bl	800b818 <http_send>
    }
    return ERR_OK;
 800c3be:	2300      	movs	r3, #0
 800c3c0:	e054      	b.n	800c46c <http_recv+0x130>
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	695b      	ldr	r3, [r3, #20]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d14c      	bne.n	800c464 <http_recv+0x128>
      err_t parsed = http_parse_request(p, hs, pcb);
 800c3ca:	68ba      	ldr	r2, [r7, #8]
 800c3cc:	6979      	ldr	r1, [r7, #20]
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	f7ff fbfe 	bl	800bbd0 <http_parse_request>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800c3d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d015      	beq.n	800c40c <http_recv+0xd0>
 800c3e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c3e4:	f113 0f05 	cmn.w	r3, #5
 800c3e8:	d010      	beq.n	800c40c <http_recv+0xd0>
 800c3ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c3ee:	f113 0f10 	cmn.w	r3, #16
 800c3f2:	d00b      	beq.n	800c40c <http_recv+0xd0>
 800c3f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c3f8:	f113 0f08 	cmn.w	r3, #8
 800c3fc:	d006      	beq.n	800c40c <http_recv+0xd0>
 800c3fe:	4b1d      	ldr	r3, [pc, #116]	; (800c474 <http_recv+0x138>)
 800c400:	f640 2204 	movw	r2, #2564	; 0xa04
 800c404:	491c      	ldr	r1, [pc, #112]	; (800c478 <http_recv+0x13c>)
 800c406:	481d      	ldr	r0, [pc, #116]	; (800c47c <http_recv+0x140>)
 800c408:	f00a fdf4 	bl	8016ff4 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800c40c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c410:	f113 0f05 	cmn.w	r3, #5
 800c414:	d00b      	beq.n	800c42e <http_recv+0xf2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	6a1b      	ldr	r3, [r3, #32]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d007      	beq.n	800c42e <http_recv+0xf2>
          pbuf_free(hs->req);
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	6a1b      	ldr	r3, [r3, #32]
 800c422:	4618      	mov	r0, r3
 800c424:	f001 fcd8 	bl	800ddd8 <pbuf_free>
          hs->req = NULL;
 800c428:	697b      	ldr	r3, [r7, #20]
 800c42a:	2200      	movs	r2, #0
 800c42c:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f001 fcd2 	bl	800ddd8 <pbuf_free>
      if (parsed == ERR_OK) {
 800c434:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d109      	bne.n	800c450 <http_recv+0x114>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c442:	2b00      	cmp	r3, #0
 800c444:	d111      	bne.n	800c46a <http_recv+0x12e>
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800c446:	6979      	ldr	r1, [r7, #20]
 800c448:	68b8      	ldr	r0, [r7, #8]
 800c44a:	f7ff f9e5 	bl	800b818 <http_send>
 800c44e:	e00c      	b.n	800c46a <http_recv+0x12e>
        }
      } else if (parsed == ERR_ARG) {
 800c450:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c454:	f113 0f10 	cmn.w	r3, #16
 800c458:	d107      	bne.n	800c46a <http_recv+0x12e>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800c45a:	6979      	ldr	r1, [r7, #20]
 800c45c:	68b8      	ldr	r0, [r7, #8]
 800c45e:	f7fe fadd 	bl	800aa1c <http_close_conn>
 800c462:	e002      	b.n	800c46a <http_recv+0x12e>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f001 fcb7 	bl	800ddd8 <pbuf_free>
    }
  }
  return ERR_OK;
 800c46a:	2300      	movs	r3, #0
}
 800c46c:	4618      	mov	r0, r3
 800c46e:	3718      	adds	r7, #24
 800c470:	46bd      	mov	sp, r7
 800c472:	bd80      	pop	{r7, pc}
 800c474:	08019604 	.word	0x08019604
 800c478:	080197e4 	.word	0x080197e4
 800c47c:	0801964c 	.word	0x0801964c

0800c480 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b086      	sub	sp, #24
 800c484:	af00      	add	r7, sp, #0
 800c486:	60f8      	str	r0, [r7, #12]
 800c488:	60b9      	str	r1, [r7, #8]
 800c48a:	4613      	mov	r3, r2
 800c48c:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800c48e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d102      	bne.n	800c49c <http_accept+0x1c>
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d102      	bne.n	800c4a2 <http_accept+0x22>
    return ERR_VAL;
 800c49c:	f06f 0305 	mvn.w	r3, #5
 800c4a0:	e025      	b.n	800c4ee <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800c4a2:	2101      	movs	r1, #1
 800c4a4:	68b8      	ldr	r0, [r7, #8]
 800c4a6:	f003 f8dd 	bl	800f664 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800c4aa:	f7fe f9ab 	bl	800a804 <http_state_alloc>
 800c4ae:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800c4b0:	697b      	ldr	r3, [r7, #20]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d102      	bne.n	800c4bc <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800c4b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c4ba:	e018      	b.n	800c4ee <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800c4bc:	697b      	ldr	r3, [r7, #20]
 800c4be:	68ba      	ldr	r2, [r7, #8]
 800c4c0:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800c4c2:	6979      	ldr	r1, [r7, #20]
 800c4c4:	68b8      	ldr	r0, [r7, #8]
 800c4c6:	f003 facd 	bl	800fa64 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800c4ca:	490b      	ldr	r1, [pc, #44]	; (800c4f8 <http_accept+0x78>)
 800c4cc:	68b8      	ldr	r0, [r7, #8]
 800c4ce:	f003 fadb 	bl	800fa88 <tcp_recv>
  altcp_err(pcb, http_err);
 800c4d2:	490a      	ldr	r1, [pc, #40]	; (800c4fc <http_accept+0x7c>)
 800c4d4:	68b8      	ldr	r0, [r7, #8]
 800c4d6:	f003 fb1b 	bl	800fb10 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800c4da:	2204      	movs	r2, #4
 800c4dc:	4908      	ldr	r1, [pc, #32]	; (800c500 <http_accept+0x80>)
 800c4de:	68b8      	ldr	r0, [r7, #8]
 800c4e0:	f003 fb50 	bl	800fb84 <tcp_poll>
  altcp_sent(pcb, http_sent);
 800c4e4:	4907      	ldr	r1, [pc, #28]	; (800c504 <http_accept+0x84>)
 800c4e6:	68b8      	ldr	r0, [r7, #8]
 800c4e8:	f003 faf0 	bl	800facc <tcp_sent>

  return ERR_OK;
 800c4ec:	2300      	movs	r3, #0
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	3718      	adds	r7, #24
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}
 800c4f6:	bf00      	nop
 800c4f8:	0800c33d 	.word	0x0800c33d
 800c4fc:	0800c271 	.word	0x0800c271
 800c500:	0800c2cb 	.word	0x0800c2cb
 800c504:	0800c295 	.word	0x0800c295

0800c508 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b084      	sub	sp, #16
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
 800c510:	460b      	mov	r3, r1
 800c512:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d029      	beq.n	800c56e <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800c51a:	2101      	movs	r1, #1
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f003 f8a1 	bl	800f664 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800c522:	887b      	ldrh	r3, [r7, #2]
 800c524:	461a      	mov	r2, r3
 800c526:	4914      	ldr	r1, [pc, #80]	; (800c578 <httpd_init_pcb+0x70>)
 800c528:	6878      	ldr	r0, [r7, #4]
 800c52a:	f002 f9e9 	bl	800e900 <tcp_bind>
 800c52e:	4603      	mov	r3, r0
 800c530:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800c532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d006      	beq.n	800c548 <httpd_init_pcb+0x40>
 800c53a:	4b10      	ldr	r3, [pc, #64]	; (800c57c <httpd_init_pcb+0x74>)
 800c53c:	f640 2257 	movw	r2, #2647	; 0xa57
 800c540:	490f      	ldr	r1, [pc, #60]	; (800c580 <httpd_init_pcb+0x78>)
 800c542:	4810      	ldr	r0, [pc, #64]	; (800c584 <httpd_init_pcb+0x7c>)
 800c544:	f00a fd56 	bl	8016ff4 <iprintf>
    pcb = altcp_listen(pcb);
 800c548:	21ff      	movs	r1, #255	; 0xff
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f002 fa90 	bl	800ea70 <tcp_listen_with_backlog>
 800c550:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d106      	bne.n	800c566 <httpd_init_pcb+0x5e>
 800c558:	4b08      	ldr	r3, [pc, #32]	; (800c57c <httpd_init_pcb+0x74>)
 800c55a:	f640 2259 	movw	r2, #2649	; 0xa59
 800c55e:	490a      	ldr	r1, [pc, #40]	; (800c588 <httpd_init_pcb+0x80>)
 800c560:	4808      	ldr	r0, [pc, #32]	; (800c584 <httpd_init_pcb+0x7c>)
 800c562:	f00a fd47 	bl	8016ff4 <iprintf>
    altcp_accept(pcb, http_accept);
 800c566:	4909      	ldr	r1, [pc, #36]	; (800c58c <httpd_init_pcb+0x84>)
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f003 faf3 	bl	800fb54 <tcp_accept>
  }
}
 800c56e:	bf00      	nop
 800c570:	3710      	adds	r7, #16
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}
 800c576:	bf00      	nop
 800c578:	08020354 	.word	0x08020354
 800c57c:	08019604 	.word	0x08019604
 800c580:	08019810 	.word	0x08019810
 800c584:	0801964c 	.word	0x0801964c
 800c588:	0801982c 	.word	0x0801982c
 800c58c:	0800c481 	.word	0x0800c481

0800c590 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b082      	sub	sp, #8
 800c594:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800c596:	202e      	movs	r0, #46	; 0x2e
 800c598:	f003 fa56 	bl	800fa48 <tcp_new_ip_type>
 800c59c:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d106      	bne.n	800c5b2 <httpd_init+0x22>
 800c5a4:	4b07      	ldr	r3, [pc, #28]	; (800c5c4 <httpd_init+0x34>)
 800c5a6:	f640 2272 	movw	r2, #2674	; 0xa72
 800c5aa:	4907      	ldr	r1, [pc, #28]	; (800c5c8 <httpd_init+0x38>)
 800c5ac:	4807      	ldr	r0, [pc, #28]	; (800c5cc <httpd_init+0x3c>)
 800c5ae:	f00a fd21 	bl	8016ff4 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800c5b2:	2150      	movs	r1, #80	; 0x50
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	f7ff ffa7 	bl	800c508 <httpd_init_pcb>
}
 800c5ba:	bf00      	nop
 800c5bc:	3708      	adds	r7, #8
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}
 800c5c2:	bf00      	nop
 800c5c4:	08019604 	.word	0x08019604
 800c5c8:	0801984c 	.word	0x0801984c
 800c5cc:	0801964c 	.word	0x0801964c

0800c5d0 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b084      	sub	sp, #16
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	60f8      	str	r0, [r7, #12]
 800c5d8:	60b9      	str	r1, [r7, #8]
 800c5da:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d106      	bne.n	800c5f0 <http_set_ssi_handler+0x20>
 800c5e2:	4b14      	ldr	r3, [pc, #80]	; (800c634 <http_set_ssi_handler+0x64>)
 800c5e4:	f640 2297 	movw	r2, #2711	; 0xa97
 800c5e8:	4913      	ldr	r1, [pc, #76]	; (800c638 <http_set_ssi_handler+0x68>)
 800c5ea:	4814      	ldr	r0, [pc, #80]	; (800c63c <http_set_ssi_handler+0x6c>)
 800c5ec:	f00a fd02 	bl	8016ff4 <iprintf>
  httpd_ssi_handler = ssi_handler;
 800c5f0:	4a13      	ldr	r2, [pc, #76]	; (800c640 <http_set_ssi_handler+0x70>)
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	6013      	str	r3, [r2, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d106      	bne.n	800c60a <http_set_ssi_handler+0x3a>
 800c5fc:	4b0d      	ldr	r3, [pc, #52]	; (800c634 <http_set_ssi_handler+0x64>)
 800c5fe:	f640 229e 	movw	r2, #2718	; 0xa9e
 800c602:	4910      	ldr	r1, [pc, #64]	; (800c644 <http_set_ssi_handler+0x74>)
 800c604:	480d      	ldr	r0, [pc, #52]	; (800c63c <http_set_ssi_handler+0x6c>)
 800c606:	f00a fcf5 	bl	8016ff4 <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	dc06      	bgt.n	800c61e <http_set_ssi_handler+0x4e>
 800c610:	4b08      	ldr	r3, [pc, #32]	; (800c634 <http_set_ssi_handler+0x64>)
 800c612:	f640 229f 	movw	r2, #2719	; 0xa9f
 800c616:	490c      	ldr	r1, [pc, #48]	; (800c648 <http_set_ssi_handler+0x78>)
 800c618:	4808      	ldr	r0, [pc, #32]	; (800c63c <http_set_ssi_handler+0x6c>)
 800c61a:	f00a fceb 	bl	8016ff4 <iprintf>

  httpd_tags = tags;
 800c61e:	4a0b      	ldr	r2, [pc, #44]	; (800c64c <http_set_ssi_handler+0x7c>)
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	6013      	str	r3, [r2, #0]
  httpd_num_tags = num_tags;
 800c624:	4a0a      	ldr	r2, [pc, #40]	; (800c650 <http_set_ssi_handler+0x80>)
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	6013      	str	r3, [r2, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 800c62a:	bf00      	nop
 800c62c:	3710      	adds	r7, #16
 800c62e:	46bd      	mov	sp, r7
 800c630:	bd80      	pop	{r7, pc}
 800c632:	bf00      	nop
 800c634:	08019604 	.word	0x08019604
 800c638:	08019868 	.word	0x08019868
 800c63c:	0801964c 	.word	0x0801964c
 800c640:	2000165c 	.word	0x2000165c
 800c644:	08019880 	.word	0x08019880
 800c648:	08019890 	.word	0x08019890
 800c64c:	20001664 	.word	0x20001664
 800c650:	20001660 	.word	0x20001660

0800c654 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b082      	sub	sp, #8
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
 800c65c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d106      	bne.n	800c672 <http_set_cgi_handlers+0x1e>
 800c664:	4b0d      	ldr	r3, [pc, #52]	; (800c69c <http_set_cgi_handlers+0x48>)
 800c666:	f640 22b2 	movw	r2, #2738	; 0xab2
 800c66a:	490d      	ldr	r1, [pc, #52]	; (800c6a0 <http_set_cgi_handlers+0x4c>)
 800c66c:	480d      	ldr	r0, [pc, #52]	; (800c6a4 <http_set_cgi_handlers+0x50>)
 800c66e:	f00a fcc1 	bl	8016ff4 <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	2b00      	cmp	r3, #0
 800c676:	dc06      	bgt.n	800c686 <http_set_cgi_handlers+0x32>
 800c678:	4b08      	ldr	r3, [pc, #32]	; (800c69c <http_set_cgi_handlers+0x48>)
 800c67a:	f640 22b3 	movw	r2, #2739	; 0xab3
 800c67e:	490a      	ldr	r1, [pc, #40]	; (800c6a8 <http_set_cgi_handlers+0x54>)
 800c680:	4808      	ldr	r0, [pc, #32]	; (800c6a4 <http_set_cgi_handlers+0x50>)
 800c682:	f00a fcb7 	bl	8016ff4 <iprintf>

  httpd_cgis = cgis;
 800c686:	4a09      	ldr	r2, [pc, #36]	; (800c6ac <http_set_cgi_handlers+0x58>)
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
 800c68c:	4a08      	ldr	r2, [pc, #32]	; (800c6b0 <http_set_cgi_handlers+0x5c>)
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	6013      	str	r3, [r2, #0]
}
 800c692:	bf00      	nop
 800c694:	3708      	adds	r7, #8
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}
 800c69a:	bf00      	nop
 800c69c:	08019604 	.word	0x08019604
 800c6a0:	080198a8 	.word	0x080198a8
 800c6a4:	0801964c 	.word	0x0801964c
 800c6a8:	080198b8 	.word	0x080198b8
 800c6ac:	20001668 	.word	0x20001668
 800c6b0:	2000166c 	.word	0x2000166c

0800c6b4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c6b4:	b480      	push	{r7}
 800c6b6:	b083      	sub	sp, #12
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c6be:	88fb      	ldrh	r3, [r7, #6]
 800c6c0:	021b      	lsls	r3, r3, #8
 800c6c2:	b21a      	sxth	r2, r3
 800c6c4:	88fb      	ldrh	r3, [r7, #6]
 800c6c6:	0a1b      	lsrs	r3, r3, #8
 800c6c8:	b29b      	uxth	r3, r3
 800c6ca:	b21b      	sxth	r3, r3
 800c6cc:	4313      	orrs	r3, r2
 800c6ce:	b21b      	sxth	r3, r3
 800c6d0:	b29b      	uxth	r3, r3
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	370c      	adds	r7, #12
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6dc:	4770      	bx	lr

0800c6de <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c6de:	b480      	push	{r7}
 800c6e0:	b083      	sub	sp, #12
 800c6e2:	af00      	add	r7, sp, #0
 800c6e4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	061a      	lsls	r2, r3, #24
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	021b      	lsls	r3, r3, #8
 800c6ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c6f2:	431a      	orrs	r2, r3
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	0a1b      	lsrs	r3, r3, #8
 800c6f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c6fc:	431a      	orrs	r2, r3
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	0e1b      	lsrs	r3, r3, #24
 800c702:	4313      	orrs	r3, r2
}
 800c704:	4618      	mov	r0, r3
 800c706:	370c      	adds	r7, #12
 800c708:	46bd      	mov	sp, r7
 800c70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70e:	4770      	bx	lr

0800c710 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b086      	sub	sp, #24
 800c714:	af00      	add	r7, sp, #0
 800c716:	60f8      	str	r0, [r7, #12]
 800c718:	60b9      	str	r1, [r7, #8]
 800c71a:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800c71c:	68b8      	ldr	r0, [r7, #8]
 800c71e:	f7f3 fd61 	bl	80001e4 <strlen>
 800c722:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800c724:	693b      	ldr	r3, [r7, #16]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d101      	bne.n	800c72e <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	e022      	b.n	800c774 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	617b      	str	r3, [r7, #20]
 800c732:	e012      	b.n	800c75a <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	781a      	ldrb	r2, [r3, #0]
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	781b      	ldrb	r3, [r3, #0]
 800c73c:	429a      	cmp	r2, r3
 800c73e:	d109      	bne.n	800c754 <lwip_strnstr+0x44>
 800c740:	693a      	ldr	r2, [r7, #16]
 800c742:	68b9      	ldr	r1, [r7, #8]
 800c744:	6978      	ldr	r0, [r7, #20]
 800c746:	f00a fd9b 	bl	8017280 <strncmp>
 800c74a:	4603      	mov	r3, r0
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d101      	bne.n	800c754 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	e00f      	b.n	800c774 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	3301      	adds	r3, #1
 800c758:	617b      	str	r3, [r7, #20]
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	781b      	ldrb	r3, [r3, #0]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d007      	beq.n	800c772 <lwip_strnstr+0x62>
 800c762:	697a      	ldr	r2, [r7, #20]
 800c764:	693b      	ldr	r3, [r7, #16]
 800c766:	441a      	add	r2, r3
 800c768:	68f9      	ldr	r1, [r7, #12]
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	440b      	add	r3, r1
 800c76e:	429a      	cmp	r2, r3
 800c770:	d9e0      	bls.n	800c734 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800c772:	2300      	movs	r3, #0
}
 800c774:	4618      	mov	r0, r3
 800c776:	3718      	adds	r7, #24
 800c778:	46bd      	mov	sp, r7
 800c77a:	bd80      	pop	{r7, pc}

0800c77c <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
 800c77c:	b480      	push	{r7}
 800c77e:	b085      	sub	sp, #20
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
 800c784:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	1c5a      	adds	r2, r3, #1
 800c78a:	607a      	str	r2, [r7, #4]
 800c78c:	781b      	ldrb	r3, [r3, #0]
 800c78e:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	1c5a      	adds	r2, r3, #1
 800c794:	603a      	str	r2, [r7, #0]
 800c796:	781b      	ldrb	r3, [r3, #0]
 800c798:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 800c79a:	7bfa      	ldrb	r2, [r7, #15]
 800c79c:	7bbb      	ldrb	r3, [r7, #14]
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	d016      	beq.n	800c7d0 <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 800c7a2:	7bfb      	ldrb	r3, [r7, #15]
 800c7a4:	f043 0320 	orr.w	r3, r3, #32
 800c7a8:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800c7aa:	7b7b      	ldrb	r3, [r7, #13]
 800c7ac:	2b60      	cmp	r3, #96	; 0x60
 800c7ae:	d90c      	bls.n	800c7ca <lwip_stricmp+0x4e>
 800c7b0:	7b7b      	ldrb	r3, [r7, #13]
 800c7b2:	2b7a      	cmp	r3, #122	; 0x7a
 800c7b4:	d809      	bhi.n	800c7ca <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 800c7b6:	7bbb      	ldrb	r3, [r7, #14]
 800c7b8:	f043 0320 	orr.w	r3, r3, #32
 800c7bc:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 800c7be:	7b7a      	ldrb	r2, [r7, #13]
 800c7c0:	7b3b      	ldrb	r3, [r7, #12]
 800c7c2:	429a      	cmp	r2, r3
 800c7c4:	d003      	beq.n	800c7ce <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	e006      	b.n	800c7d8 <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	e004      	b.n	800c7d8 <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800c7ce:	bf00      	nop
      }
    }
  } while (c1 != 0);
 800c7d0:	7bfb      	ldrb	r3, [r7, #15]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d1d7      	bne.n	800c786 <lwip_stricmp+0xa>
  return 0;
 800c7d6:	2300      	movs	r3, #0
}
 800c7d8:	4618      	mov	r0, r3
 800c7da:	3714      	adds	r7, #20
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e2:	4770      	bx	lr

0800c7e4 <lwip_itoa>:
 * lwIP default implementation for itoa() non-standard function.
 * This can be \#defined to itoa() or snprintf(result, bufsize, "%d", number) depending on your platform port.
 */
void
lwip_itoa(char *result, size_t bufsize, int number)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b088      	sub	sp, #32
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	60f8      	str	r0, [r7, #12]
 800c7ec:	60b9      	str	r1, [r7, #8]
 800c7ee:	607a      	str	r2, [r7, #4]
  char *res = result;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	61fb      	str	r3, [r7, #28]
  char *tmp = result + bufsize - 1;
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	3b01      	subs	r3, #1
 800c7f8:	68fa      	ldr	r2, [r7, #12]
 800c7fa:	4413      	add	r3, r2
 800c7fc:	61bb      	str	r3, [r7, #24]
  int n = (number >= 0) ? number : -number;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2b00      	cmp	r3, #0
 800c802:	bfb8      	it	lt
 800c804:	425b      	neglt	r3, r3
 800c806:	617b      	str	r3, [r7, #20]

  /* handle invalid bufsize */
  if (bufsize < 2) {
 800c808:	68bb      	ldr	r3, [r7, #8]
 800c80a:	2b01      	cmp	r3, #1
 800c80c:	d806      	bhi.n	800c81c <lwip_itoa+0x38>
    if (bufsize == 1) {
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	2b01      	cmp	r3, #1
 800c812:	d154      	bne.n	800c8be <lwip_itoa+0xda>
      *result = 0;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	2200      	movs	r2, #0
 800c818:	701a      	strb	r2, [r3, #0]
    }
    return;
 800c81a:	e050      	b.n	800c8be <lwip_itoa+0xda>
  }

  /* First, add sign */
  if (number < 0) {
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	da04      	bge.n	800c82c <lwip_itoa+0x48>
    *res++ = '-';
 800c822:	69fb      	ldr	r3, [r7, #28]
 800c824:	1c5a      	adds	r2, r3, #1
 800c826:	61fa      	str	r2, [r7, #28]
 800c828:	222d      	movs	r2, #45	; 0x2d
 800c82a:	701a      	strb	r2, [r3, #0]
  }
  /* Then create the string from the end and stop if buffer full,
     and ensure output string is zero terminated */
  *tmp = 0;
 800c82c:	69bb      	ldr	r3, [r7, #24]
 800c82e:	2200      	movs	r2, #0
 800c830:	701a      	strb	r2, [r3, #0]
  while ((n != 0) && (tmp > res)) {
 800c832:	e01c      	b.n	800c86e <lwip_itoa+0x8a>
    char val = (char)('0' + (n % 10));
 800c834:	697a      	ldr	r2, [r7, #20]
 800c836:	4b24      	ldr	r3, [pc, #144]	; (800c8c8 <lwip_itoa+0xe4>)
 800c838:	fb83 1302 	smull	r1, r3, r3, r2
 800c83c:	1099      	asrs	r1, r3, #2
 800c83e:	17d3      	asrs	r3, r2, #31
 800c840:	1ac9      	subs	r1, r1, r3
 800c842:	460b      	mov	r3, r1
 800c844:	009b      	lsls	r3, r3, #2
 800c846:	440b      	add	r3, r1
 800c848:	005b      	lsls	r3, r3, #1
 800c84a:	1ad1      	subs	r1, r2, r3
 800c84c:	b2cb      	uxtb	r3, r1
 800c84e:	3330      	adds	r3, #48	; 0x30
 800c850:	74fb      	strb	r3, [r7, #19]
    tmp--;
 800c852:	69bb      	ldr	r3, [r7, #24]
 800c854:	3b01      	subs	r3, #1
 800c856:	61bb      	str	r3, [r7, #24]
    *tmp = val;
 800c858:	69bb      	ldr	r3, [r7, #24]
 800c85a:	7cfa      	ldrb	r2, [r7, #19]
 800c85c:	701a      	strb	r2, [r3, #0]
    n = n / 10;
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	4a19      	ldr	r2, [pc, #100]	; (800c8c8 <lwip_itoa+0xe4>)
 800c862:	fb82 1203 	smull	r1, r2, r2, r3
 800c866:	1092      	asrs	r2, r2, #2
 800c868:	17db      	asrs	r3, r3, #31
 800c86a:	1ad3      	subs	r3, r2, r3
 800c86c:	617b      	str	r3, [r7, #20]
  while ((n != 0) && (tmp > res)) {
 800c86e:	697b      	ldr	r3, [r7, #20]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d003      	beq.n	800c87c <lwip_itoa+0x98>
 800c874:	69ba      	ldr	r2, [r7, #24]
 800c876:	69fb      	ldr	r3, [r7, #28]
 800c878:	429a      	cmp	r2, r3
 800c87a:	d8db      	bhi.n	800c834 <lwip_itoa+0x50>
  }
  if (n) {
 800c87c:	697b      	ldr	r3, [r7, #20]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d003      	beq.n	800c88a <lwip_itoa+0xa6>
    /* buffer is too small */
    *result = 0;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	2200      	movs	r2, #0
 800c886:	701a      	strb	r2, [r3, #0]
    return;
 800c888:	e01a      	b.n	800c8c0 <lwip_itoa+0xdc>
  }
  if (*tmp == 0) {
 800c88a:	69bb      	ldr	r3, [r7, #24]
 800c88c:	781b      	ldrb	r3, [r3, #0]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d10a      	bne.n	800c8a8 <lwip_itoa+0xc4>
    /* Nothing added? */
    *res++ = '0';
 800c892:	69fb      	ldr	r3, [r7, #28]
 800c894:	1c5a      	adds	r2, r3, #1
 800c896:	61fa      	str	r2, [r7, #28]
 800c898:	2230      	movs	r2, #48	; 0x30
 800c89a:	701a      	strb	r2, [r3, #0]
    *res++ = 0;
 800c89c:	69fb      	ldr	r3, [r7, #28]
 800c89e:	1c5a      	adds	r2, r3, #1
 800c8a0:	61fa      	str	r2, [r7, #28]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	701a      	strb	r2, [r3, #0]
    return;
 800c8a6:	e00b      	b.n	800c8c0 <lwip_itoa+0xdc>
  }
  /* move from temporary buffer to output buffer (sign is not moved) */
  memmove(res, tmp, (size_t)((result + bufsize) - tmp));
 800c8a8:	68fa      	ldr	r2, [r7, #12]
 800c8aa:	68bb      	ldr	r3, [r7, #8]
 800c8ac:	441a      	add	r2, r3
 800c8ae:	69bb      	ldr	r3, [r7, #24]
 800c8b0:	1ad3      	subs	r3, r2, r3
 800c8b2:	461a      	mov	r2, r3
 800c8b4:	69b9      	ldr	r1, [r7, #24]
 800c8b6:	69f8      	ldr	r0, [r7, #28]
 800c8b8:	f00a fb7a 	bl	8016fb0 <memmove>
 800c8bc:	e000      	b.n	800c8c0 <lwip_itoa+0xdc>
    return;
 800c8be:	bf00      	nop
}
 800c8c0:	3720      	adds	r7, #32
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}
 800c8c6:	bf00      	nop
 800c8c8:	66666667 	.word	0x66666667

0800c8cc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b082      	sub	sp, #8
 800c8d0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800c8d6:	f000 f8d5 	bl	800ca84 <mem_init>
  memp_init();
 800c8da:	f000 fbdb 	bl	800d094 <memp_init>
  pbuf_init();
  netif_init();
 800c8de:	f000 fc93 	bl	800d208 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c8e2:	f007 fea7 	bl	8014634 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c8e6:	f001 fd05 	bl	800e2f4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800c8ea:	f007 fe19 	bl	8014520 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c8ee:	bf00      	nop
 800c8f0:	3708      	adds	r7, #8
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}
	...

0800c8f8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b083      	sub	sp, #12
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	4603      	mov	r3, r0
 800c900:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c902:	4b05      	ldr	r3, [pc, #20]	; (800c918 <ptr_to_mem+0x20>)
 800c904:	681a      	ldr	r2, [r3, #0]
 800c906:	88fb      	ldrh	r3, [r7, #6]
 800c908:	4413      	add	r3, r2
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	370c      	adds	r7, #12
 800c90e:	46bd      	mov	sp, r7
 800c910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c914:	4770      	bx	lr
 800c916:	bf00      	nop
 800c918:	20001674 	.word	0x20001674

0800c91c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c91c:	b480      	push	{r7}
 800c91e:	b083      	sub	sp, #12
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c924:	4b05      	ldr	r3, [pc, #20]	; (800c93c <mem_to_ptr+0x20>)
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	687a      	ldr	r2, [r7, #4]
 800c92a:	1ad3      	subs	r3, r2, r3
 800c92c:	b29b      	uxth	r3, r3
}
 800c92e:	4618      	mov	r0, r3
 800c930:	370c      	adds	r7, #12
 800c932:	46bd      	mov	sp, r7
 800c934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c938:	4770      	bx	lr
 800c93a:	bf00      	nop
 800c93c:	20001674 	.word	0x20001674

0800c940 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c940:	b590      	push	{r4, r7, lr}
 800c942:	b085      	sub	sp, #20
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c948:	4b45      	ldr	r3, [pc, #276]	; (800ca60 <plug_holes+0x120>)
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	687a      	ldr	r2, [r7, #4]
 800c94e:	429a      	cmp	r2, r3
 800c950:	d206      	bcs.n	800c960 <plug_holes+0x20>
 800c952:	4b44      	ldr	r3, [pc, #272]	; (800ca64 <plug_holes+0x124>)
 800c954:	f240 12df 	movw	r2, #479	; 0x1df
 800c958:	4943      	ldr	r1, [pc, #268]	; (800ca68 <plug_holes+0x128>)
 800c95a:	4844      	ldr	r0, [pc, #272]	; (800ca6c <plug_holes+0x12c>)
 800c95c:	f00a fb4a 	bl	8016ff4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c960:	4b43      	ldr	r3, [pc, #268]	; (800ca70 <plug_holes+0x130>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	687a      	ldr	r2, [r7, #4]
 800c966:	429a      	cmp	r2, r3
 800c968:	d306      	bcc.n	800c978 <plug_holes+0x38>
 800c96a:	4b3e      	ldr	r3, [pc, #248]	; (800ca64 <plug_holes+0x124>)
 800c96c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c970:	4940      	ldr	r1, [pc, #256]	; (800ca74 <plug_holes+0x134>)
 800c972:	483e      	ldr	r0, [pc, #248]	; (800ca6c <plug_holes+0x12c>)
 800c974:	f00a fb3e 	bl	8016ff4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	791b      	ldrb	r3, [r3, #4]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d006      	beq.n	800c98e <plug_holes+0x4e>
 800c980:	4b38      	ldr	r3, [pc, #224]	; (800ca64 <plug_holes+0x124>)
 800c982:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c986:	493c      	ldr	r1, [pc, #240]	; (800ca78 <plug_holes+0x138>)
 800c988:	4838      	ldr	r0, [pc, #224]	; (800ca6c <plug_holes+0x12c>)
 800c98a:	f00a fb33 	bl	8016ff4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	881b      	ldrh	r3, [r3, #0]
 800c992:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c996:	d906      	bls.n	800c9a6 <plug_holes+0x66>
 800c998:	4b32      	ldr	r3, [pc, #200]	; (800ca64 <plug_holes+0x124>)
 800c99a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800c99e:	4937      	ldr	r1, [pc, #220]	; (800ca7c <plug_holes+0x13c>)
 800c9a0:	4832      	ldr	r0, [pc, #200]	; (800ca6c <plug_holes+0x12c>)
 800c9a2:	f00a fb27 	bl	8016ff4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	881b      	ldrh	r3, [r3, #0]
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f7ff ffa4 	bl	800c8f8 <ptr_to_mem>
 800c9b0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c9b2:	687a      	ldr	r2, [r7, #4]
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	429a      	cmp	r2, r3
 800c9b8:	d024      	beq.n	800ca04 <plug_holes+0xc4>
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	791b      	ldrb	r3, [r3, #4]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d120      	bne.n	800ca04 <plug_holes+0xc4>
 800c9c2:	4b2b      	ldr	r3, [pc, #172]	; (800ca70 <plug_holes+0x130>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	68fa      	ldr	r2, [r7, #12]
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	d01b      	beq.n	800ca04 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c9cc:	4b2c      	ldr	r3, [pc, #176]	; (800ca80 <plug_holes+0x140>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	68fa      	ldr	r2, [r7, #12]
 800c9d2:	429a      	cmp	r2, r3
 800c9d4:	d102      	bne.n	800c9dc <plug_holes+0x9c>
      lfree = mem;
 800c9d6:	4a2a      	ldr	r2, [pc, #168]	; (800ca80 <plug_holes+0x140>)
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	881a      	ldrh	r2, [r3, #0]
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	881b      	ldrh	r3, [r3, #0]
 800c9e8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c9ec:	d00a      	beq.n	800ca04 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	881b      	ldrh	r3, [r3, #0]
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	f7ff ff80 	bl	800c8f8 <ptr_to_mem>
 800c9f8:	4604      	mov	r4, r0
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f7ff ff8e 	bl	800c91c <mem_to_ptr>
 800ca00:	4603      	mov	r3, r0
 800ca02:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	885b      	ldrh	r3, [r3, #2]
 800ca08:	4618      	mov	r0, r3
 800ca0a:	f7ff ff75 	bl	800c8f8 <ptr_to_mem>
 800ca0e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ca10:	68ba      	ldr	r2, [r7, #8]
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	429a      	cmp	r2, r3
 800ca16:	d01f      	beq.n	800ca58 <plug_holes+0x118>
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	791b      	ldrb	r3, [r3, #4]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d11b      	bne.n	800ca58 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ca20:	4b17      	ldr	r3, [pc, #92]	; (800ca80 <plug_holes+0x140>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	687a      	ldr	r2, [r7, #4]
 800ca26:	429a      	cmp	r2, r3
 800ca28:	d102      	bne.n	800ca30 <plug_holes+0xf0>
      lfree = pmem;
 800ca2a:	4a15      	ldr	r2, [pc, #84]	; (800ca80 <plug_holes+0x140>)
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	881a      	ldrh	r2, [r3, #0]
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	881b      	ldrh	r3, [r3, #0]
 800ca3c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800ca40:	d00a      	beq.n	800ca58 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	881b      	ldrh	r3, [r3, #0]
 800ca46:	4618      	mov	r0, r3
 800ca48:	f7ff ff56 	bl	800c8f8 <ptr_to_mem>
 800ca4c:	4604      	mov	r4, r0
 800ca4e:	68b8      	ldr	r0, [r7, #8]
 800ca50:	f7ff ff64 	bl	800c91c <mem_to_ptr>
 800ca54:	4603      	mov	r3, r0
 800ca56:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ca58:	bf00      	nop
 800ca5a:	3714      	adds	r7, #20
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd90      	pop	{r4, r7, pc}
 800ca60:	20001674 	.word	0x20001674
 800ca64:	080198d4 	.word	0x080198d4
 800ca68:	08019904 	.word	0x08019904
 800ca6c:	0801991c 	.word	0x0801991c
 800ca70:	20001678 	.word	0x20001678
 800ca74:	08019944 	.word	0x08019944
 800ca78:	08019960 	.word	0x08019960
 800ca7c:	0801997c 	.word	0x0801997c
 800ca80:	2000167c 	.word	0x2000167c

0800ca84 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b082      	sub	sp, #8
 800ca88:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ca8a:	4b18      	ldr	r3, [pc, #96]	; (800caec <mem_init+0x68>)
 800ca8c:	3303      	adds	r3, #3
 800ca8e:	f023 0303 	bic.w	r3, r3, #3
 800ca92:	461a      	mov	r2, r3
 800ca94:	4b16      	ldr	r3, [pc, #88]	; (800caf0 <mem_init+0x6c>)
 800ca96:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ca98:	4b15      	ldr	r3, [pc, #84]	; (800caf0 <mem_init+0x6c>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800caa4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2200      	movs	r2, #0
 800caaa:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2200      	movs	r2, #0
 800cab0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800cab2:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800cab6:	f7ff ff1f 	bl	800c8f8 <ptr_to_mem>
 800caba:	4603      	mov	r3, r0
 800cabc:	4a0d      	ldr	r2, [pc, #52]	; (800caf4 <mem_init+0x70>)
 800cabe:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800cac0:	4b0c      	ldr	r3, [pc, #48]	; (800caf4 <mem_init+0x70>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	2201      	movs	r2, #1
 800cac6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800cac8:	4b0a      	ldr	r3, [pc, #40]	; (800caf4 <mem_init+0x70>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800cad0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800cad2:	4b08      	ldr	r3, [pc, #32]	; (800caf4 <mem_init+0x70>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800cada:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800cadc:	4b04      	ldr	r3, [pc, #16]	; (800caf0 <mem_init+0x6c>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	4a05      	ldr	r2, [pc, #20]	; (800caf8 <mem_init+0x74>)
 800cae2:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800cae4:	bf00      	nop
 800cae6:	3708      	adds	r7, #8
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}
 800caec:	2000d7d0 	.word	0x2000d7d0
 800caf0:	20001674 	.word	0x20001674
 800caf4:	20001678 	.word	0x20001678
 800caf8:	2000167c 	.word	0x2000167c

0800cafc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b086      	sub	sp, #24
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800cb04:	6878      	ldr	r0, [r7, #4]
 800cb06:	f7ff ff09 	bl	800c91c <mem_to_ptr>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	881b      	ldrh	r3, [r3, #0]
 800cb12:	4618      	mov	r0, r3
 800cb14:	f7ff fef0 	bl	800c8f8 <ptr_to_mem>
 800cb18:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	885b      	ldrh	r3, [r3, #2]
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f7ff feea 	bl	800c8f8 <ptr_to_mem>
 800cb24:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	881b      	ldrh	r3, [r3, #0]
 800cb2a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cb2e:	d818      	bhi.n	800cb62 <mem_link_valid+0x66>
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	885b      	ldrh	r3, [r3, #2]
 800cb34:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cb38:	d813      	bhi.n	800cb62 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800cb3e:	8afa      	ldrh	r2, [r7, #22]
 800cb40:	429a      	cmp	r2, r3
 800cb42:	d004      	beq.n	800cb4e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	881b      	ldrh	r3, [r3, #0]
 800cb48:	8afa      	ldrh	r2, [r7, #22]
 800cb4a:	429a      	cmp	r2, r3
 800cb4c:	d109      	bne.n	800cb62 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800cb4e:	4b08      	ldr	r3, [pc, #32]	; (800cb70 <mem_link_valid+0x74>)
 800cb50:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800cb52:	693a      	ldr	r2, [r7, #16]
 800cb54:	429a      	cmp	r2, r3
 800cb56:	d006      	beq.n	800cb66 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800cb58:	693b      	ldr	r3, [r7, #16]
 800cb5a:	885b      	ldrh	r3, [r3, #2]
 800cb5c:	8afa      	ldrh	r2, [r7, #22]
 800cb5e:	429a      	cmp	r2, r3
 800cb60:	d001      	beq.n	800cb66 <mem_link_valid+0x6a>
    return 0;
 800cb62:	2300      	movs	r3, #0
 800cb64:	e000      	b.n	800cb68 <mem_link_valid+0x6c>
  }
  return 1;
 800cb66:	2301      	movs	r3, #1
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3718      	adds	r7, #24
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}
 800cb70:	20001678 	.word	0x20001678

0800cb74 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b084      	sub	sp, #16
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d04c      	beq.n	800cc1c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	f003 0303 	and.w	r3, r3, #3
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d007      	beq.n	800cb9c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800cb8c:	4b25      	ldr	r3, [pc, #148]	; (800cc24 <mem_free+0xb0>)
 800cb8e:	f240 2273 	movw	r2, #627	; 0x273
 800cb92:	4925      	ldr	r1, [pc, #148]	; (800cc28 <mem_free+0xb4>)
 800cb94:	4825      	ldr	r0, [pc, #148]	; (800cc2c <mem_free+0xb8>)
 800cb96:	f00a fa2d 	bl	8016ff4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800cb9a:	e040      	b.n	800cc1e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	3b08      	subs	r3, #8
 800cba0:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800cba2:	4b23      	ldr	r3, [pc, #140]	; (800cc30 <mem_free+0xbc>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	68fa      	ldr	r2, [r7, #12]
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	d306      	bcc.n	800cbba <mem_free+0x46>
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f103 020c 	add.w	r2, r3, #12
 800cbb2:	4b20      	ldr	r3, [pc, #128]	; (800cc34 <mem_free+0xc0>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	d907      	bls.n	800cbca <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800cbba:	4b1a      	ldr	r3, [pc, #104]	; (800cc24 <mem_free+0xb0>)
 800cbbc:	f240 227f 	movw	r2, #639	; 0x27f
 800cbc0:	491d      	ldr	r1, [pc, #116]	; (800cc38 <mem_free+0xc4>)
 800cbc2:	481a      	ldr	r0, [pc, #104]	; (800cc2c <mem_free+0xb8>)
 800cbc4:	f00a fa16 	bl	8016ff4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800cbc8:	e029      	b.n	800cc1e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	791b      	ldrb	r3, [r3, #4]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d107      	bne.n	800cbe2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800cbd2:	4b14      	ldr	r3, [pc, #80]	; (800cc24 <mem_free+0xb0>)
 800cbd4:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800cbd8:	4918      	ldr	r1, [pc, #96]	; (800cc3c <mem_free+0xc8>)
 800cbda:	4814      	ldr	r0, [pc, #80]	; (800cc2c <mem_free+0xb8>)
 800cbdc:	f00a fa0a 	bl	8016ff4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800cbe0:	e01d      	b.n	800cc1e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800cbe2:	68f8      	ldr	r0, [r7, #12]
 800cbe4:	f7ff ff8a 	bl	800cafc <mem_link_valid>
 800cbe8:	4603      	mov	r3, r0
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d107      	bne.n	800cbfe <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800cbee:	4b0d      	ldr	r3, [pc, #52]	; (800cc24 <mem_free+0xb0>)
 800cbf0:	f240 2295 	movw	r2, #661	; 0x295
 800cbf4:	4912      	ldr	r1, [pc, #72]	; (800cc40 <mem_free+0xcc>)
 800cbf6:	480d      	ldr	r0, [pc, #52]	; (800cc2c <mem_free+0xb8>)
 800cbf8:	f00a f9fc 	bl	8016ff4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800cbfc:	e00f      	b.n	800cc1e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	2200      	movs	r2, #0
 800cc02:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800cc04:	4b0f      	ldr	r3, [pc, #60]	; (800cc44 <mem_free+0xd0>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	68fa      	ldr	r2, [r7, #12]
 800cc0a:	429a      	cmp	r2, r3
 800cc0c:	d202      	bcs.n	800cc14 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800cc0e:	4a0d      	ldr	r2, [pc, #52]	; (800cc44 <mem_free+0xd0>)
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800cc14:	68f8      	ldr	r0, [r7, #12]
 800cc16:	f7ff fe93 	bl	800c940 <plug_holes>
 800cc1a:	e000      	b.n	800cc1e <mem_free+0xaa>
    return;
 800cc1c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800cc1e:	3710      	adds	r7, #16
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}
 800cc24:	080198d4 	.word	0x080198d4
 800cc28:	080199a8 	.word	0x080199a8
 800cc2c:	0801991c 	.word	0x0801991c
 800cc30:	20001674 	.word	0x20001674
 800cc34:	20001678 	.word	0x20001678
 800cc38:	080199cc 	.word	0x080199cc
 800cc3c:	080199e8 	.word	0x080199e8
 800cc40:	08019a10 	.word	0x08019a10
 800cc44:	2000167c 	.word	0x2000167c

0800cc48 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b088      	sub	sp, #32
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
 800cc50:	460b      	mov	r3, r1
 800cc52:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800cc54:	887b      	ldrh	r3, [r7, #2]
 800cc56:	3303      	adds	r3, #3
 800cc58:	b29b      	uxth	r3, r3
 800cc5a:	f023 0303 	bic.w	r3, r3, #3
 800cc5e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800cc60:	8bfb      	ldrh	r3, [r7, #30]
 800cc62:	2b0b      	cmp	r3, #11
 800cc64:	d801      	bhi.n	800cc6a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800cc66:	230c      	movs	r3, #12
 800cc68:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800cc6a:	8bfb      	ldrh	r3, [r7, #30]
 800cc6c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cc70:	d803      	bhi.n	800cc7a <mem_trim+0x32>
 800cc72:	8bfa      	ldrh	r2, [r7, #30]
 800cc74:	887b      	ldrh	r3, [r7, #2]
 800cc76:	429a      	cmp	r2, r3
 800cc78:	d201      	bcs.n	800cc7e <mem_trim+0x36>
    return NULL;
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	e0cc      	b.n	800ce18 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800cc7e:	4b68      	ldr	r3, [pc, #416]	; (800ce20 <mem_trim+0x1d8>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	687a      	ldr	r2, [r7, #4]
 800cc84:	429a      	cmp	r2, r3
 800cc86:	d304      	bcc.n	800cc92 <mem_trim+0x4a>
 800cc88:	4b66      	ldr	r3, [pc, #408]	; (800ce24 <mem_trim+0x1dc>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	687a      	ldr	r2, [r7, #4]
 800cc8e:	429a      	cmp	r2, r3
 800cc90:	d306      	bcc.n	800cca0 <mem_trim+0x58>
 800cc92:	4b65      	ldr	r3, [pc, #404]	; (800ce28 <mem_trim+0x1e0>)
 800cc94:	f240 22d1 	movw	r2, #721	; 0x2d1
 800cc98:	4964      	ldr	r1, [pc, #400]	; (800ce2c <mem_trim+0x1e4>)
 800cc9a:	4865      	ldr	r0, [pc, #404]	; (800ce30 <mem_trim+0x1e8>)
 800cc9c:	f00a f9aa 	bl	8016ff4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800cca0:	4b5f      	ldr	r3, [pc, #380]	; (800ce20 <mem_trim+0x1d8>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	687a      	ldr	r2, [r7, #4]
 800cca6:	429a      	cmp	r2, r3
 800cca8:	d304      	bcc.n	800ccb4 <mem_trim+0x6c>
 800ccaa:	4b5e      	ldr	r3, [pc, #376]	; (800ce24 <mem_trim+0x1dc>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	687a      	ldr	r2, [r7, #4]
 800ccb0:	429a      	cmp	r2, r3
 800ccb2:	d301      	bcc.n	800ccb8 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	e0af      	b.n	800ce18 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	3b08      	subs	r3, #8
 800ccbc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800ccbe:	69b8      	ldr	r0, [r7, #24]
 800ccc0:	f7ff fe2c 	bl	800c91c <mem_to_ptr>
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800ccc8:	69bb      	ldr	r3, [r7, #24]
 800ccca:	881a      	ldrh	r2, [r3, #0]
 800cccc:	8afb      	ldrh	r3, [r7, #22]
 800ccce:	1ad3      	subs	r3, r2, r3
 800ccd0:	b29b      	uxth	r3, r3
 800ccd2:	3b08      	subs	r3, #8
 800ccd4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800ccd6:	8bfa      	ldrh	r2, [r7, #30]
 800ccd8:	8abb      	ldrh	r3, [r7, #20]
 800ccda:	429a      	cmp	r2, r3
 800ccdc:	d906      	bls.n	800ccec <mem_trim+0xa4>
 800ccde:	4b52      	ldr	r3, [pc, #328]	; (800ce28 <mem_trim+0x1e0>)
 800cce0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800cce4:	4953      	ldr	r1, [pc, #332]	; (800ce34 <mem_trim+0x1ec>)
 800cce6:	4852      	ldr	r0, [pc, #328]	; (800ce30 <mem_trim+0x1e8>)
 800cce8:	f00a f984 	bl	8016ff4 <iprintf>
  if (newsize > size) {
 800ccec:	8bfa      	ldrh	r2, [r7, #30]
 800ccee:	8abb      	ldrh	r3, [r7, #20]
 800ccf0:	429a      	cmp	r2, r3
 800ccf2:	d901      	bls.n	800ccf8 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	e08f      	b.n	800ce18 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800ccf8:	8bfa      	ldrh	r2, [r7, #30]
 800ccfa:	8abb      	ldrh	r3, [r7, #20]
 800ccfc:	429a      	cmp	r2, r3
 800ccfe:	d101      	bne.n	800cd04 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	e089      	b.n	800ce18 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800cd04:	69bb      	ldr	r3, [r7, #24]
 800cd06:	881b      	ldrh	r3, [r3, #0]
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f7ff fdf5 	bl	800c8f8 <ptr_to_mem>
 800cd0e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800cd10:	693b      	ldr	r3, [r7, #16]
 800cd12:	791b      	ldrb	r3, [r3, #4]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d13f      	bne.n	800cd98 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800cd18:	69bb      	ldr	r3, [r7, #24]
 800cd1a:	881b      	ldrh	r3, [r3, #0]
 800cd1c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cd20:	d106      	bne.n	800cd30 <mem_trim+0xe8>
 800cd22:	4b41      	ldr	r3, [pc, #260]	; (800ce28 <mem_trim+0x1e0>)
 800cd24:	f240 22f5 	movw	r2, #757	; 0x2f5
 800cd28:	4943      	ldr	r1, [pc, #268]	; (800ce38 <mem_trim+0x1f0>)
 800cd2a:	4841      	ldr	r0, [pc, #260]	; (800ce30 <mem_trim+0x1e8>)
 800cd2c:	f00a f962 	bl	8016ff4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800cd30:	693b      	ldr	r3, [r7, #16]
 800cd32:	881b      	ldrh	r3, [r3, #0]
 800cd34:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cd36:	8afa      	ldrh	r2, [r7, #22]
 800cd38:	8bfb      	ldrh	r3, [r7, #30]
 800cd3a:	4413      	add	r3, r2
 800cd3c:	b29b      	uxth	r3, r3
 800cd3e:	3308      	adds	r3, #8
 800cd40:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800cd42:	4b3e      	ldr	r3, [pc, #248]	; (800ce3c <mem_trim+0x1f4>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	693a      	ldr	r2, [r7, #16]
 800cd48:	429a      	cmp	r2, r3
 800cd4a:	d106      	bne.n	800cd5a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800cd4c:	89fb      	ldrh	r3, [r7, #14]
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f7ff fdd2 	bl	800c8f8 <ptr_to_mem>
 800cd54:	4603      	mov	r3, r0
 800cd56:	4a39      	ldr	r2, [pc, #228]	; (800ce3c <mem_trim+0x1f4>)
 800cd58:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800cd5a:	89fb      	ldrh	r3, [r7, #14]
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f7ff fdcb 	bl	800c8f8 <ptr_to_mem>
 800cd62:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800cd64:	693b      	ldr	r3, [r7, #16]
 800cd66:	2200      	movs	r2, #0
 800cd68:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800cd6a:	693b      	ldr	r3, [r7, #16]
 800cd6c:	89ba      	ldrh	r2, [r7, #12]
 800cd6e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800cd70:	693b      	ldr	r3, [r7, #16]
 800cd72:	8afa      	ldrh	r2, [r7, #22]
 800cd74:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800cd76:	69bb      	ldr	r3, [r7, #24]
 800cd78:	89fa      	ldrh	r2, [r7, #14]
 800cd7a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800cd7c:	693b      	ldr	r3, [r7, #16]
 800cd7e:	881b      	ldrh	r3, [r3, #0]
 800cd80:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cd84:	d047      	beq.n	800ce16 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cd86:	693b      	ldr	r3, [r7, #16]
 800cd88:	881b      	ldrh	r3, [r3, #0]
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f7ff fdb4 	bl	800c8f8 <ptr_to_mem>
 800cd90:	4602      	mov	r2, r0
 800cd92:	89fb      	ldrh	r3, [r7, #14]
 800cd94:	8053      	strh	r3, [r2, #2]
 800cd96:	e03e      	b.n	800ce16 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800cd98:	8bfb      	ldrh	r3, [r7, #30]
 800cd9a:	f103 0214 	add.w	r2, r3, #20
 800cd9e:	8abb      	ldrh	r3, [r7, #20]
 800cda0:	429a      	cmp	r2, r3
 800cda2:	d838      	bhi.n	800ce16 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cda4:	8afa      	ldrh	r2, [r7, #22]
 800cda6:	8bfb      	ldrh	r3, [r7, #30]
 800cda8:	4413      	add	r3, r2
 800cdaa:	b29b      	uxth	r3, r3
 800cdac:	3308      	adds	r3, #8
 800cdae:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800cdb0:	69bb      	ldr	r3, [r7, #24]
 800cdb2:	881b      	ldrh	r3, [r3, #0]
 800cdb4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cdb8:	d106      	bne.n	800cdc8 <mem_trim+0x180>
 800cdba:	4b1b      	ldr	r3, [pc, #108]	; (800ce28 <mem_trim+0x1e0>)
 800cdbc:	f240 3216 	movw	r2, #790	; 0x316
 800cdc0:	491d      	ldr	r1, [pc, #116]	; (800ce38 <mem_trim+0x1f0>)
 800cdc2:	481b      	ldr	r0, [pc, #108]	; (800ce30 <mem_trim+0x1e8>)
 800cdc4:	f00a f916 	bl	8016ff4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800cdc8:	89fb      	ldrh	r3, [r7, #14]
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f7ff fd94 	bl	800c8f8 <ptr_to_mem>
 800cdd0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800cdd2:	4b1a      	ldr	r3, [pc, #104]	; (800ce3c <mem_trim+0x1f4>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	693a      	ldr	r2, [r7, #16]
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	d202      	bcs.n	800cde2 <mem_trim+0x19a>
      lfree = mem2;
 800cddc:	4a17      	ldr	r2, [pc, #92]	; (800ce3c <mem_trim+0x1f4>)
 800cdde:	693b      	ldr	r3, [r7, #16]
 800cde0:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800cde2:	693b      	ldr	r3, [r7, #16]
 800cde4:	2200      	movs	r2, #0
 800cde6:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800cde8:	69bb      	ldr	r3, [r7, #24]
 800cdea:	881a      	ldrh	r2, [r3, #0]
 800cdec:	693b      	ldr	r3, [r7, #16]
 800cdee:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800cdf0:	693b      	ldr	r3, [r7, #16]
 800cdf2:	8afa      	ldrh	r2, [r7, #22]
 800cdf4:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800cdf6:	69bb      	ldr	r3, [r7, #24]
 800cdf8:	89fa      	ldrh	r2, [r7, #14]
 800cdfa:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800cdfc:	693b      	ldr	r3, [r7, #16]
 800cdfe:	881b      	ldrh	r3, [r3, #0]
 800ce00:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800ce04:	d007      	beq.n	800ce16 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ce06:	693b      	ldr	r3, [r7, #16]
 800ce08:	881b      	ldrh	r3, [r3, #0]
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f7ff fd74 	bl	800c8f8 <ptr_to_mem>
 800ce10:	4602      	mov	r2, r0
 800ce12:	89fb      	ldrh	r3, [r7, #14]
 800ce14:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800ce16:	687b      	ldr	r3, [r7, #4]
}
 800ce18:	4618      	mov	r0, r3
 800ce1a:	3720      	adds	r7, #32
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	bd80      	pop	{r7, pc}
 800ce20:	20001674 	.word	0x20001674
 800ce24:	20001678 	.word	0x20001678
 800ce28:	080198d4 	.word	0x080198d4
 800ce2c:	08019a44 	.word	0x08019a44
 800ce30:	0801991c 	.word	0x0801991c
 800ce34:	08019a5c 	.word	0x08019a5c
 800ce38:	08019a7c 	.word	0x08019a7c
 800ce3c:	2000167c 	.word	0x2000167c

0800ce40 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b088      	sub	sp, #32
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	4603      	mov	r3, r0
 800ce48:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800ce4a:	88fb      	ldrh	r3, [r7, #6]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d101      	bne.n	800ce54 <mem_malloc+0x14>
    return NULL;
 800ce50:	2300      	movs	r3, #0
 800ce52:	e0d9      	b.n	800d008 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800ce54:	88fb      	ldrh	r3, [r7, #6]
 800ce56:	3303      	adds	r3, #3
 800ce58:	b29b      	uxth	r3, r3
 800ce5a:	f023 0303 	bic.w	r3, r3, #3
 800ce5e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800ce60:	8bbb      	ldrh	r3, [r7, #28]
 800ce62:	2b0b      	cmp	r3, #11
 800ce64:	d801      	bhi.n	800ce6a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800ce66:	230c      	movs	r3, #12
 800ce68:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800ce6a:	8bbb      	ldrh	r3, [r7, #28]
 800ce6c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800ce70:	d803      	bhi.n	800ce7a <mem_malloc+0x3a>
 800ce72:	8bba      	ldrh	r2, [r7, #28]
 800ce74:	88fb      	ldrh	r3, [r7, #6]
 800ce76:	429a      	cmp	r2, r3
 800ce78:	d201      	bcs.n	800ce7e <mem_malloc+0x3e>
    return NULL;
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	e0c4      	b.n	800d008 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ce7e:	4b64      	ldr	r3, [pc, #400]	; (800d010 <mem_malloc+0x1d0>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	4618      	mov	r0, r3
 800ce84:	f7ff fd4a 	bl	800c91c <mem_to_ptr>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	83fb      	strh	r3, [r7, #30]
 800ce8c:	e0b4      	b.n	800cff8 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800ce8e:	8bfb      	ldrh	r3, [r7, #30]
 800ce90:	4618      	mov	r0, r3
 800ce92:	f7ff fd31 	bl	800c8f8 <ptr_to_mem>
 800ce96:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800ce98:	697b      	ldr	r3, [r7, #20]
 800ce9a:	791b      	ldrb	r3, [r3, #4]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	f040 80a4 	bne.w	800cfea <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800cea2:	697b      	ldr	r3, [r7, #20]
 800cea4:	881b      	ldrh	r3, [r3, #0]
 800cea6:	461a      	mov	r2, r3
 800cea8:	8bfb      	ldrh	r3, [r7, #30]
 800ceaa:	1ad3      	subs	r3, r2, r3
 800ceac:	f1a3 0208 	sub.w	r2, r3, #8
 800ceb0:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	f0c0 8099 	bcc.w	800cfea <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800ceb8:	697b      	ldr	r3, [r7, #20]
 800ceba:	881b      	ldrh	r3, [r3, #0]
 800cebc:	461a      	mov	r2, r3
 800cebe:	8bfb      	ldrh	r3, [r7, #30]
 800cec0:	1ad3      	subs	r3, r2, r3
 800cec2:	f1a3 0208 	sub.w	r2, r3, #8
 800cec6:	8bbb      	ldrh	r3, [r7, #28]
 800cec8:	3314      	adds	r3, #20
 800ceca:	429a      	cmp	r2, r3
 800cecc:	d333      	bcc.n	800cf36 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800cece:	8bfa      	ldrh	r2, [r7, #30]
 800ced0:	8bbb      	ldrh	r3, [r7, #28]
 800ced2:	4413      	add	r3, r2
 800ced4:	b29b      	uxth	r3, r3
 800ced6:	3308      	adds	r3, #8
 800ced8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800ceda:	8a7b      	ldrh	r3, [r7, #18]
 800cedc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cee0:	d106      	bne.n	800cef0 <mem_malloc+0xb0>
 800cee2:	4b4c      	ldr	r3, [pc, #304]	; (800d014 <mem_malloc+0x1d4>)
 800cee4:	f240 3287 	movw	r2, #903	; 0x387
 800cee8:	494b      	ldr	r1, [pc, #300]	; (800d018 <mem_malloc+0x1d8>)
 800ceea:	484c      	ldr	r0, [pc, #304]	; (800d01c <mem_malloc+0x1dc>)
 800ceec:	f00a f882 	bl	8016ff4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800cef0:	8a7b      	ldrh	r3, [r7, #18]
 800cef2:	4618      	mov	r0, r3
 800cef4:	f7ff fd00 	bl	800c8f8 <ptr_to_mem>
 800cef8:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	2200      	movs	r2, #0
 800cefe:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800cf00:	697b      	ldr	r3, [r7, #20]
 800cf02:	881a      	ldrh	r2, [r3, #0]
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	8bfa      	ldrh	r2, [r7, #30]
 800cf0c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	8a7a      	ldrh	r2, [r7, #18]
 800cf12:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800cf14:	697b      	ldr	r3, [r7, #20]
 800cf16:	2201      	movs	r2, #1
 800cf18:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	881b      	ldrh	r3, [r3, #0]
 800cf1e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800cf22:	d00b      	beq.n	800cf3c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	881b      	ldrh	r3, [r3, #0]
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f7ff fce5 	bl	800c8f8 <ptr_to_mem>
 800cf2e:	4602      	mov	r2, r0
 800cf30:	8a7b      	ldrh	r3, [r7, #18]
 800cf32:	8053      	strh	r3, [r2, #2]
 800cf34:	e002      	b.n	800cf3c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800cf36:	697b      	ldr	r3, [r7, #20]
 800cf38:	2201      	movs	r2, #1
 800cf3a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800cf3c:	4b34      	ldr	r3, [pc, #208]	; (800d010 <mem_malloc+0x1d0>)
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	697a      	ldr	r2, [r7, #20]
 800cf42:	429a      	cmp	r2, r3
 800cf44:	d127      	bne.n	800cf96 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800cf46:	4b32      	ldr	r3, [pc, #200]	; (800d010 <mem_malloc+0x1d0>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800cf4c:	e005      	b.n	800cf5a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800cf4e:	69bb      	ldr	r3, [r7, #24]
 800cf50:	881b      	ldrh	r3, [r3, #0]
 800cf52:	4618      	mov	r0, r3
 800cf54:	f7ff fcd0 	bl	800c8f8 <ptr_to_mem>
 800cf58:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800cf5a:	69bb      	ldr	r3, [r7, #24]
 800cf5c:	791b      	ldrb	r3, [r3, #4]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d004      	beq.n	800cf6c <mem_malloc+0x12c>
 800cf62:	4b2f      	ldr	r3, [pc, #188]	; (800d020 <mem_malloc+0x1e0>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	69ba      	ldr	r2, [r7, #24]
 800cf68:	429a      	cmp	r2, r3
 800cf6a:	d1f0      	bne.n	800cf4e <mem_malloc+0x10e>
          }
          lfree = cur;
 800cf6c:	4a28      	ldr	r2, [pc, #160]	; (800d010 <mem_malloc+0x1d0>)
 800cf6e:	69bb      	ldr	r3, [r7, #24]
 800cf70:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800cf72:	4b27      	ldr	r3, [pc, #156]	; (800d010 <mem_malloc+0x1d0>)
 800cf74:	681a      	ldr	r2, [r3, #0]
 800cf76:	4b2a      	ldr	r3, [pc, #168]	; (800d020 <mem_malloc+0x1e0>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	429a      	cmp	r2, r3
 800cf7c:	d00b      	beq.n	800cf96 <mem_malloc+0x156>
 800cf7e:	4b24      	ldr	r3, [pc, #144]	; (800d010 <mem_malloc+0x1d0>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	791b      	ldrb	r3, [r3, #4]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d006      	beq.n	800cf96 <mem_malloc+0x156>
 800cf88:	4b22      	ldr	r3, [pc, #136]	; (800d014 <mem_malloc+0x1d4>)
 800cf8a:	f240 32b5 	movw	r2, #949	; 0x3b5
 800cf8e:	4925      	ldr	r1, [pc, #148]	; (800d024 <mem_malloc+0x1e4>)
 800cf90:	4822      	ldr	r0, [pc, #136]	; (800d01c <mem_malloc+0x1dc>)
 800cf92:	f00a f82f 	bl	8016ff4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800cf96:	8bba      	ldrh	r2, [r7, #28]
 800cf98:	697b      	ldr	r3, [r7, #20]
 800cf9a:	4413      	add	r3, r2
 800cf9c:	3308      	adds	r3, #8
 800cf9e:	4a20      	ldr	r2, [pc, #128]	; (800d020 <mem_malloc+0x1e0>)
 800cfa0:	6812      	ldr	r2, [r2, #0]
 800cfa2:	4293      	cmp	r3, r2
 800cfa4:	d906      	bls.n	800cfb4 <mem_malloc+0x174>
 800cfa6:	4b1b      	ldr	r3, [pc, #108]	; (800d014 <mem_malloc+0x1d4>)
 800cfa8:	f240 32b9 	movw	r2, #953	; 0x3b9
 800cfac:	491e      	ldr	r1, [pc, #120]	; (800d028 <mem_malloc+0x1e8>)
 800cfae:	481b      	ldr	r0, [pc, #108]	; (800d01c <mem_malloc+0x1dc>)
 800cfb0:	f00a f820 	bl	8016ff4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800cfb4:	697b      	ldr	r3, [r7, #20]
 800cfb6:	f003 0303 	and.w	r3, r3, #3
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d006      	beq.n	800cfcc <mem_malloc+0x18c>
 800cfbe:	4b15      	ldr	r3, [pc, #84]	; (800d014 <mem_malloc+0x1d4>)
 800cfc0:	f240 32bb 	movw	r2, #955	; 0x3bb
 800cfc4:	4919      	ldr	r1, [pc, #100]	; (800d02c <mem_malloc+0x1ec>)
 800cfc6:	4815      	ldr	r0, [pc, #84]	; (800d01c <mem_malloc+0x1dc>)
 800cfc8:	f00a f814 	bl	8016ff4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800cfcc:	697b      	ldr	r3, [r7, #20]
 800cfce:	f003 0303 	and.w	r3, r3, #3
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d006      	beq.n	800cfe4 <mem_malloc+0x1a4>
 800cfd6:	4b0f      	ldr	r3, [pc, #60]	; (800d014 <mem_malloc+0x1d4>)
 800cfd8:	f240 32bd 	movw	r2, #957	; 0x3bd
 800cfdc:	4914      	ldr	r1, [pc, #80]	; (800d030 <mem_malloc+0x1f0>)
 800cfde:	480f      	ldr	r0, [pc, #60]	; (800d01c <mem_malloc+0x1dc>)
 800cfe0:	f00a f808 	bl	8016ff4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800cfe4:	697b      	ldr	r3, [r7, #20]
 800cfe6:	3308      	adds	r3, #8
 800cfe8:	e00e      	b.n	800d008 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800cfea:	8bfb      	ldrh	r3, [r7, #30]
 800cfec:	4618      	mov	r0, r3
 800cfee:	f7ff fc83 	bl	800c8f8 <ptr_to_mem>
 800cff2:	4603      	mov	r3, r0
 800cff4:	881b      	ldrh	r3, [r3, #0]
 800cff6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800cff8:	8bfa      	ldrh	r2, [r7, #30]
 800cffa:	8bbb      	ldrh	r3, [r7, #28]
 800cffc:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 800d000:	429a      	cmp	r2, r3
 800d002:	f4ff af44 	bcc.w	800ce8e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d006:	2300      	movs	r3, #0
}
 800d008:	4618      	mov	r0, r3
 800d00a:	3720      	adds	r7, #32
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}
 800d010:	2000167c 	.word	0x2000167c
 800d014:	080198d4 	.word	0x080198d4
 800d018:	08019a7c 	.word	0x08019a7c
 800d01c:	0801991c 	.word	0x0801991c
 800d020:	20001678 	.word	0x20001678
 800d024:	08019a90 	.word	0x08019a90
 800d028:	08019aac 	.word	0x08019aac
 800d02c:	08019adc 	.word	0x08019adc
 800d030:	08019b0c 	.word	0x08019b0c

0800d034 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d034:	b480      	push	{r7}
 800d036:	b085      	sub	sp, #20
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	689b      	ldr	r3, [r3, #8]
 800d040:	2200      	movs	r2, #0
 800d042:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	685b      	ldr	r3, [r3, #4]
 800d048:	3303      	adds	r3, #3
 800d04a:	f023 0303 	bic.w	r3, r3, #3
 800d04e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d050:	2300      	movs	r3, #0
 800d052:	60fb      	str	r3, [r7, #12]
 800d054:	e011      	b.n	800d07a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	689b      	ldr	r3, [r3, #8]
 800d05a:	681a      	ldr	r2, [r3, #0]
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	689b      	ldr	r3, [r3, #8]
 800d064:	68ba      	ldr	r2, [r7, #8]
 800d066:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	881b      	ldrh	r3, [r3, #0]
 800d06c:	461a      	mov	r2, r3
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	4413      	add	r3, r2
 800d072:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	3301      	adds	r3, #1
 800d078:	60fb      	str	r3, [r7, #12]
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	885b      	ldrh	r3, [r3, #2]
 800d07e:	461a      	mov	r2, r3
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	4293      	cmp	r3, r2
 800d084:	dbe7      	blt.n	800d056 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d086:	bf00      	nop
 800d088:	bf00      	nop
 800d08a:	3714      	adds	r7, #20
 800d08c:	46bd      	mov	sp, r7
 800d08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d092:	4770      	bx	lr

0800d094 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b082      	sub	sp, #8
 800d098:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d09a:	2300      	movs	r3, #0
 800d09c:	80fb      	strh	r3, [r7, #6]
 800d09e:	e009      	b.n	800d0b4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d0a0:	88fb      	ldrh	r3, [r7, #6]
 800d0a2:	4a08      	ldr	r2, [pc, #32]	; (800d0c4 <memp_init+0x30>)
 800d0a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f7ff ffc3 	bl	800d034 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d0ae:	88fb      	ldrh	r3, [r7, #6]
 800d0b0:	3301      	adds	r3, #1
 800d0b2:	80fb      	strh	r3, [r7, #6]
 800d0b4:	88fb      	ldrh	r3, [r7, #6]
 800d0b6:	2b08      	cmp	r3, #8
 800d0b8:	d9f2      	bls.n	800d0a0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d0ba:	bf00      	nop
 800d0bc:	bf00      	nop
 800d0be:	3708      	adds	r7, #8
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}
 800d0c4:	080202f0 	.word	0x080202f0

0800d0c8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b084      	sub	sp, #16
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	689b      	ldr	r3, [r3, #8]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d012      	beq.n	800d104 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	689b      	ldr	r3, [r3, #8]
 800d0e2:	68fa      	ldr	r2, [r7, #12]
 800d0e4:	6812      	ldr	r2, [r2, #0]
 800d0e6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	f003 0303 	and.w	r3, r3, #3
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d006      	beq.n	800d100 <do_memp_malloc_pool+0x38>
 800d0f2:	4b07      	ldr	r3, [pc, #28]	; (800d110 <do_memp_malloc_pool+0x48>)
 800d0f4:	f44f 728c 	mov.w	r2, #280	; 0x118
 800d0f8:	4906      	ldr	r1, [pc, #24]	; (800d114 <do_memp_malloc_pool+0x4c>)
 800d0fa:	4807      	ldr	r0, [pc, #28]	; (800d118 <do_memp_malloc_pool+0x50>)
 800d0fc:	f009 ff7a 	bl	8016ff4 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	e000      	b.n	800d106 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800d104:	2300      	movs	r3, #0
}
 800d106:	4618      	mov	r0, r3
 800d108:	3710      	adds	r7, #16
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}
 800d10e:	bf00      	nop
 800d110:	08019b30 	.word	0x08019b30
 800d114:	08019b60 	.word	0x08019b60
 800d118:	08019b84 	.word	0x08019b84

0800d11c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b084      	sub	sp, #16
 800d120:	af00      	add	r7, sp, #0
 800d122:	4603      	mov	r3, r0
 800d124:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d126:	79fb      	ldrb	r3, [r7, #7]
 800d128:	2b08      	cmp	r3, #8
 800d12a:	d908      	bls.n	800d13e <memp_malloc+0x22>
 800d12c:	4b0a      	ldr	r3, [pc, #40]	; (800d158 <memp_malloc+0x3c>)
 800d12e:	f240 1257 	movw	r2, #343	; 0x157
 800d132:	490a      	ldr	r1, [pc, #40]	; (800d15c <memp_malloc+0x40>)
 800d134:	480a      	ldr	r0, [pc, #40]	; (800d160 <memp_malloc+0x44>)
 800d136:	f009 ff5d 	bl	8016ff4 <iprintf>
 800d13a:	2300      	movs	r3, #0
 800d13c:	e008      	b.n	800d150 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d13e:	79fb      	ldrb	r3, [r7, #7]
 800d140:	4a08      	ldr	r2, [pc, #32]	; (800d164 <memp_malloc+0x48>)
 800d142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d146:	4618      	mov	r0, r3
 800d148:	f7ff ffbe 	bl	800d0c8 <do_memp_malloc_pool>
 800d14c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d14e:	68fb      	ldr	r3, [r7, #12]
}
 800d150:	4618      	mov	r0, r3
 800d152:	3710      	adds	r7, #16
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}
 800d158:	08019b30 	.word	0x08019b30
 800d15c:	08019bc0 	.word	0x08019bc0
 800d160:	08019b84 	.word	0x08019b84
 800d164:	080202f0 	.word	0x080202f0

0800d168 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b084      	sub	sp, #16
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
 800d170:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	f003 0303 	and.w	r3, r3, #3
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d006      	beq.n	800d18a <do_memp_free_pool+0x22>
 800d17c:	4b0a      	ldr	r3, [pc, #40]	; (800d1a8 <do_memp_free_pool+0x40>)
 800d17e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800d182:	490a      	ldr	r1, [pc, #40]	; (800d1ac <do_memp_free_pool+0x44>)
 800d184:	480a      	ldr	r0, [pc, #40]	; (800d1b0 <do_memp_free_pool+0x48>)
 800d186:	f009 ff35 	bl	8016ff4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	689b      	ldr	r3, [r3, #8]
 800d192:	681a      	ldr	r2, [r3, #0]
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	689b      	ldr	r3, [r3, #8]
 800d19c:	68fa      	ldr	r2, [r7, #12]
 800d19e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800d1a0:	bf00      	nop
 800d1a2:	3710      	adds	r7, #16
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}
 800d1a8:	08019b30 	.word	0x08019b30
 800d1ac:	08019be0 	.word	0x08019be0
 800d1b0:	08019b84 	.word	0x08019b84

0800d1b4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b082      	sub	sp, #8
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	6039      	str	r1, [r7, #0]
 800d1be:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d1c0:	79fb      	ldrb	r3, [r7, #7]
 800d1c2:	2b08      	cmp	r3, #8
 800d1c4:	d907      	bls.n	800d1d6 <memp_free+0x22>
 800d1c6:	4b0c      	ldr	r3, [pc, #48]	; (800d1f8 <memp_free+0x44>)
 800d1c8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800d1cc:	490b      	ldr	r1, [pc, #44]	; (800d1fc <memp_free+0x48>)
 800d1ce:	480c      	ldr	r0, [pc, #48]	; (800d200 <memp_free+0x4c>)
 800d1d0:	f009 ff10 	bl	8016ff4 <iprintf>
 800d1d4:	e00c      	b.n	800d1f0 <memp_free+0x3c>

  if (mem == NULL) {
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d008      	beq.n	800d1ee <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d1dc:	79fb      	ldrb	r3, [r7, #7]
 800d1de:	4a09      	ldr	r2, [pc, #36]	; (800d204 <memp_free+0x50>)
 800d1e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1e4:	6839      	ldr	r1, [r7, #0]
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	f7ff ffbe 	bl	800d168 <do_memp_free_pool>
 800d1ec:	e000      	b.n	800d1f0 <memp_free+0x3c>
    return;
 800d1ee:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d1f0:	3708      	adds	r7, #8
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bd80      	pop	{r7, pc}
 800d1f6:	bf00      	nop
 800d1f8:	08019b30 	.word	0x08019b30
 800d1fc:	08019c00 	.word	0x08019c00
 800d200:	08019b84 	.word	0x08019b84
 800d204:	080202f0 	.word	0x080202f0

0800d208 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d208:	b480      	push	{r7}
 800d20a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d20c:	bf00      	nop
 800d20e:	46bd      	mov	sp, r7
 800d210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d214:	4770      	bx	lr
	...

0800d218 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b086      	sub	sp, #24
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	60f8      	str	r0, [r7, #12]
 800d220:	60b9      	str	r1, [r7, #8]
 800d222:	607a      	str	r2, [r7, #4]
 800d224:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d108      	bne.n	800d23e <netif_add+0x26>
 800d22c:	4b57      	ldr	r3, [pc, #348]	; (800d38c <netif_add+0x174>)
 800d22e:	f240 1227 	movw	r2, #295	; 0x127
 800d232:	4957      	ldr	r1, [pc, #348]	; (800d390 <netif_add+0x178>)
 800d234:	4857      	ldr	r0, [pc, #348]	; (800d394 <netif_add+0x17c>)
 800d236:	f009 fedd 	bl	8016ff4 <iprintf>
 800d23a:	2300      	movs	r3, #0
 800d23c:	e0a2      	b.n	800d384 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d240:	2b00      	cmp	r3, #0
 800d242:	d108      	bne.n	800d256 <netif_add+0x3e>
 800d244:	4b51      	ldr	r3, [pc, #324]	; (800d38c <netif_add+0x174>)
 800d246:	f44f 7294 	mov.w	r2, #296	; 0x128
 800d24a:	4953      	ldr	r1, [pc, #332]	; (800d398 <netif_add+0x180>)
 800d24c:	4851      	ldr	r0, [pc, #324]	; (800d394 <netif_add+0x17c>)
 800d24e:	f009 fed1 	bl	8016ff4 <iprintf>
 800d252:	2300      	movs	r3, #0
 800d254:	e096      	b.n	800d384 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d256:	68bb      	ldr	r3, [r7, #8]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d101      	bne.n	800d260 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d25c:	4b4f      	ldr	r3, [pc, #316]	; (800d39c <netif_add+0x184>)
 800d25e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d101      	bne.n	800d26a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d266:	4b4d      	ldr	r3, [pc, #308]	; (800d39c <netif_add+0x184>)
 800d268:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d26a:	683b      	ldr	r3, [r7, #0]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d101      	bne.n	800d274 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d270:	4b4a      	ldr	r3, [pc, #296]	; (800d39c <netif_add+0x184>)
 800d272:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	2200      	movs	r2, #0
 800d278:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	2200      	movs	r2, #0
 800d27e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	2200      	movs	r2, #0
 800d284:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	4a45      	ldr	r2, [pc, #276]	; (800d3a0 <netif_add+0x188>)
 800d28a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	2200      	movs	r2, #0
 800d290:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	2200      	movs	r2, #0
 800d296:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	2200      	movs	r2, #0
 800d29e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	6a3a      	ldr	r2, [r7, #32]
 800d2a4:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800d2a6:	4b3f      	ldr	r3, [pc, #252]	; (800d3a4 <netif_add+0x18c>)
 800d2a8:	781a      	ldrb	r2, [r3, #0]
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2b4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	687a      	ldr	r2, [r7, #4]
 800d2ba:	68b9      	ldr	r1, [r7, #8]
 800d2bc:	68f8      	ldr	r0, [r7, #12]
 800d2be:	f000 f913 	bl	800d4e8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2c4:	68f8      	ldr	r0, [r7, #12]
 800d2c6:	4798      	blx	r3
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d001      	beq.n	800d2d2 <netif_add+0xba>
    return NULL;
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	e058      	b.n	800d384 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d2d8:	2bff      	cmp	r3, #255	; 0xff
 800d2da:	d103      	bne.n	800d2e4 <netif_add+0xcc>
        netif->num = 0;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	2200      	movs	r2, #0
 800d2e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d2e8:	4b2f      	ldr	r3, [pc, #188]	; (800d3a8 <netif_add+0x190>)
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	617b      	str	r3, [r7, #20]
 800d2ee:	e02b      	b.n	800d348 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d2f0:	697a      	ldr	r2, [r7, #20]
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	429a      	cmp	r2, r3
 800d2f6:	d106      	bne.n	800d306 <netif_add+0xee>
 800d2f8:	4b24      	ldr	r3, [pc, #144]	; (800d38c <netif_add+0x174>)
 800d2fa:	f240 128b 	movw	r2, #395	; 0x18b
 800d2fe:	492b      	ldr	r1, [pc, #172]	; (800d3ac <netif_add+0x194>)
 800d300:	4824      	ldr	r0, [pc, #144]	; (800d394 <netif_add+0x17c>)
 800d302:	f009 fe77 	bl	8016ff4 <iprintf>
        num_netifs++;
 800d306:	693b      	ldr	r3, [r7, #16]
 800d308:	3301      	adds	r3, #1
 800d30a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800d30c:	693b      	ldr	r3, [r7, #16]
 800d30e:	2bff      	cmp	r3, #255	; 0xff
 800d310:	dd06      	ble.n	800d320 <netif_add+0x108>
 800d312:	4b1e      	ldr	r3, [pc, #120]	; (800d38c <netif_add+0x174>)
 800d314:	f240 128d 	movw	r2, #397	; 0x18d
 800d318:	4925      	ldr	r1, [pc, #148]	; (800d3b0 <netif_add+0x198>)
 800d31a:	481e      	ldr	r0, [pc, #120]	; (800d394 <netif_add+0x17c>)
 800d31c:	f009 fe6a 	bl	8016ff4 <iprintf>
        if (netif2->num == netif->num) {
 800d320:	697b      	ldr	r3, [r7, #20]
 800d322:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d32c:	429a      	cmp	r2, r3
 800d32e:	d108      	bne.n	800d342 <netif_add+0x12a>
          netif->num++;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d336:	3301      	adds	r3, #1
 800d338:	b2da      	uxtb	r2, r3
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800d340:	e005      	b.n	800d34e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d342:	697b      	ldr	r3, [r7, #20]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	617b      	str	r3, [r7, #20]
 800d348:	697b      	ldr	r3, [r7, #20]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d1d0      	bne.n	800d2f0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800d34e:	697b      	ldr	r3, [r7, #20]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d1be      	bne.n	800d2d2 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d35a:	2bfe      	cmp	r3, #254	; 0xfe
 800d35c:	d103      	bne.n	800d366 <netif_add+0x14e>
    netif_num = 0;
 800d35e:	4b11      	ldr	r3, [pc, #68]	; (800d3a4 <netif_add+0x18c>)
 800d360:	2200      	movs	r2, #0
 800d362:	701a      	strb	r2, [r3, #0]
 800d364:	e006      	b.n	800d374 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d36c:	3301      	adds	r3, #1
 800d36e:	b2da      	uxtb	r2, r3
 800d370:	4b0c      	ldr	r3, [pc, #48]	; (800d3a4 <netif_add+0x18c>)
 800d372:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d374:	4b0c      	ldr	r3, [pc, #48]	; (800d3a8 <netif_add+0x190>)
 800d376:	681a      	ldr	r2, [r3, #0]
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d37c:	4a0a      	ldr	r2, [pc, #40]	; (800d3a8 <netif_add+0x190>)
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800d382:	68fb      	ldr	r3, [r7, #12]
}
 800d384:	4618      	mov	r0, r3
 800d386:	3718      	adds	r7, #24
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}
 800d38c:	08019c1c 	.word	0x08019c1c
 800d390:	08019cb0 	.word	0x08019cb0
 800d394:	08019c6c 	.word	0x08019c6c
 800d398:	08019ccc 	.word	0x08019ccc
 800d39c:	08020354 	.word	0x08020354
 800d3a0:	0800d6fb 	.word	0x0800d6fb
 800d3a4:	200016a4 	.word	0x200016a4
 800d3a8:	20016dac 	.word	0x20016dac
 800d3ac:	08019cf0 	.word	0x08019cf0
 800d3b0:	08019d04 	.word	0x08019d04

0800d3b4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b082      	sub	sp, #8
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
 800d3bc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800d3be:	6839      	ldr	r1, [r7, #0]
 800d3c0:	6878      	ldr	r0, [r7, #4]
 800d3c2:	f002 fd85 	bl	800fed0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800d3c6:	6839      	ldr	r1, [r7, #0]
 800d3c8:	6878      	ldr	r0, [r7, #4]
 800d3ca:	f007 fabd 	bl	8014948 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800d3ce:	bf00      	nop
 800d3d0:	3708      	adds	r7, #8
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	bd80      	pop	{r7, pc}
	...

0800d3d8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b086      	sub	sp, #24
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	60f8      	str	r0, [r7, #12]
 800d3e0:	60b9      	str	r1, [r7, #8]
 800d3e2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d106      	bne.n	800d3f8 <netif_do_set_ipaddr+0x20>
 800d3ea:	4b1d      	ldr	r3, [pc, #116]	; (800d460 <netif_do_set_ipaddr+0x88>)
 800d3ec:	f240 12cb 	movw	r2, #459	; 0x1cb
 800d3f0:	491c      	ldr	r1, [pc, #112]	; (800d464 <netif_do_set_ipaddr+0x8c>)
 800d3f2:	481d      	ldr	r0, [pc, #116]	; (800d468 <netif_do_set_ipaddr+0x90>)
 800d3f4:	f009 fdfe 	bl	8016ff4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d106      	bne.n	800d40c <netif_do_set_ipaddr+0x34>
 800d3fe:	4b18      	ldr	r3, [pc, #96]	; (800d460 <netif_do_set_ipaddr+0x88>)
 800d400:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800d404:	4917      	ldr	r1, [pc, #92]	; (800d464 <netif_do_set_ipaddr+0x8c>)
 800d406:	4818      	ldr	r0, [pc, #96]	; (800d468 <netif_do_set_ipaddr+0x90>)
 800d408:	f009 fdf4 	bl	8016ff4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d40c:	68bb      	ldr	r3, [r7, #8]
 800d40e:	681a      	ldr	r2, [r3, #0]
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	3304      	adds	r3, #4
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	429a      	cmp	r2, r3
 800d418:	d01c      	beq.n	800d454 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	3304      	adds	r3, #4
 800d424:	681a      	ldr	r2, [r3, #0]
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800d42a:	f107 0314 	add.w	r3, r7, #20
 800d42e:	4619      	mov	r1, r3
 800d430:	6878      	ldr	r0, [r7, #4]
 800d432:	f7ff ffbf 	bl	800d3b4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d436:	68bb      	ldr	r3, [r7, #8]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d002      	beq.n	800d442 <netif_do_set_ipaddr+0x6a>
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	e000      	b.n	800d444 <netif_do_set_ipaddr+0x6c>
 800d442:	2300      	movs	r3, #0
 800d444:	68fa      	ldr	r2, [r7, #12]
 800d446:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d448:	2101      	movs	r1, #1
 800d44a:	68f8      	ldr	r0, [r7, #12]
 800d44c:	f000 f8d2 	bl	800d5f4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800d450:	2301      	movs	r3, #1
 800d452:	e000      	b.n	800d456 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800d454:	2300      	movs	r3, #0
}
 800d456:	4618      	mov	r0, r3
 800d458:	3718      	adds	r7, #24
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}
 800d45e:	bf00      	nop
 800d460:	08019c1c 	.word	0x08019c1c
 800d464:	08019d34 	.word	0x08019d34
 800d468:	08019c6c 	.word	0x08019c6c

0800d46c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800d46c:	b480      	push	{r7}
 800d46e:	b085      	sub	sp, #20
 800d470:	af00      	add	r7, sp, #0
 800d472:	60f8      	str	r0, [r7, #12]
 800d474:	60b9      	str	r1, [r7, #8]
 800d476:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800d478:	68bb      	ldr	r3, [r7, #8]
 800d47a:	681a      	ldr	r2, [r3, #0]
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	3308      	adds	r3, #8
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	429a      	cmp	r2, r3
 800d484:	d00a      	beq.n	800d49c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d486:	68bb      	ldr	r3, [r7, #8]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d002      	beq.n	800d492 <netif_do_set_netmask+0x26>
 800d48c:	68bb      	ldr	r3, [r7, #8]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	e000      	b.n	800d494 <netif_do_set_netmask+0x28>
 800d492:	2300      	movs	r3, #0
 800d494:	68fa      	ldr	r2, [r7, #12]
 800d496:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800d498:	2301      	movs	r3, #1
 800d49a:	e000      	b.n	800d49e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800d49c:	2300      	movs	r3, #0
}
 800d49e:	4618      	mov	r0, r3
 800d4a0:	3714      	adds	r7, #20
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a8:	4770      	bx	lr

0800d4aa <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800d4aa:	b480      	push	{r7}
 800d4ac:	b085      	sub	sp, #20
 800d4ae:	af00      	add	r7, sp, #0
 800d4b0:	60f8      	str	r0, [r7, #12]
 800d4b2:	60b9      	str	r1, [r7, #8]
 800d4b4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800d4b6:	68bb      	ldr	r3, [r7, #8]
 800d4b8:	681a      	ldr	r2, [r3, #0]
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	330c      	adds	r3, #12
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	429a      	cmp	r2, r3
 800d4c2:	d00a      	beq.n	800d4da <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d002      	beq.n	800d4d0 <netif_do_set_gw+0x26>
 800d4ca:	68bb      	ldr	r3, [r7, #8]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	e000      	b.n	800d4d2 <netif_do_set_gw+0x28>
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	68fa      	ldr	r2, [r7, #12]
 800d4d4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800d4d6:	2301      	movs	r3, #1
 800d4d8:	e000      	b.n	800d4dc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800d4da:	2300      	movs	r3, #0
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	3714      	adds	r7, #20
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e6:	4770      	bx	lr

0800d4e8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b088      	sub	sp, #32
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	60f8      	str	r0, [r7, #12]
 800d4f0:	60b9      	str	r1, [r7, #8]
 800d4f2:	607a      	str	r2, [r7, #4]
 800d4f4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d4fe:	68bb      	ldr	r3, [r7, #8]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d101      	bne.n	800d508 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800d504:	4b1c      	ldr	r3, [pc, #112]	; (800d578 <netif_set_addr+0x90>)
 800d506:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d101      	bne.n	800d512 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800d50e:	4b1a      	ldr	r3, [pc, #104]	; (800d578 <netif_set_addr+0x90>)
 800d510:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d101      	bne.n	800d51c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800d518:	4b17      	ldr	r3, [pc, #92]	; (800d578 <netif_set_addr+0x90>)
 800d51a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d003      	beq.n	800d52a <netif_set_addr+0x42>
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d101      	bne.n	800d52e <netif_set_addr+0x46>
 800d52a:	2301      	movs	r3, #1
 800d52c:	e000      	b.n	800d530 <netif_set_addr+0x48>
 800d52e:	2300      	movs	r3, #0
 800d530:	617b      	str	r3, [r7, #20]
  if (remove) {
 800d532:	697b      	ldr	r3, [r7, #20]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d006      	beq.n	800d546 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d538:	f107 0310 	add.w	r3, r7, #16
 800d53c:	461a      	mov	r2, r3
 800d53e:	68b9      	ldr	r1, [r7, #8]
 800d540:	68f8      	ldr	r0, [r7, #12]
 800d542:	f7ff ff49 	bl	800d3d8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800d546:	69fa      	ldr	r2, [r7, #28]
 800d548:	6879      	ldr	r1, [r7, #4]
 800d54a:	68f8      	ldr	r0, [r7, #12]
 800d54c:	f7ff ff8e 	bl	800d46c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d550:	69ba      	ldr	r2, [r7, #24]
 800d552:	6839      	ldr	r1, [r7, #0]
 800d554:	68f8      	ldr	r0, [r7, #12]
 800d556:	f7ff ffa8 	bl	800d4aa <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d55a:	697b      	ldr	r3, [r7, #20]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d106      	bne.n	800d56e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d560:	f107 0310 	add.w	r3, r7, #16
 800d564:	461a      	mov	r2, r3
 800d566:	68b9      	ldr	r1, [r7, #8]
 800d568:	68f8      	ldr	r0, [r7, #12]
 800d56a:	f7ff ff35 	bl	800d3d8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d56e:	bf00      	nop
 800d570:	3720      	adds	r7, #32
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}
 800d576:	bf00      	nop
 800d578:	08020354 	.word	0x08020354

0800d57c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d57c:	b480      	push	{r7}
 800d57e:	b083      	sub	sp, #12
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d584:	4a04      	ldr	r2, [pc, #16]	; (800d598 <netif_set_default+0x1c>)
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d58a:	bf00      	nop
 800d58c:	370c      	adds	r7, #12
 800d58e:	46bd      	mov	sp, r7
 800d590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d594:	4770      	bx	lr
 800d596:	bf00      	nop
 800d598:	20016db0 	.word	0x20016db0

0800d59c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b082      	sub	sp, #8
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d107      	bne.n	800d5ba <netif_set_up+0x1e>
 800d5aa:	4b0f      	ldr	r3, [pc, #60]	; (800d5e8 <netif_set_up+0x4c>)
 800d5ac:	f44f 7254 	mov.w	r2, #848	; 0x350
 800d5b0:	490e      	ldr	r1, [pc, #56]	; (800d5ec <netif_set_up+0x50>)
 800d5b2:	480f      	ldr	r0, [pc, #60]	; (800d5f0 <netif_set_up+0x54>)
 800d5b4:	f009 fd1e 	bl	8016ff4 <iprintf>
 800d5b8:	e013      	b.n	800d5e2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d5c0:	f003 0301 	and.w	r3, r3, #1
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d10c      	bne.n	800d5e2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d5ce:	f043 0301 	orr.w	r3, r3, #1
 800d5d2:	b2da      	uxtb	r2, r3
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d5da:	2103      	movs	r1, #3
 800d5dc:	6878      	ldr	r0, [r7, #4]
 800d5de:	f000 f809 	bl	800d5f4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d5e2:	3708      	adds	r7, #8
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}
 800d5e8:	08019c1c 	.word	0x08019c1c
 800d5ec:	08019da4 	.word	0x08019da4
 800d5f0:	08019c6c 	.word	0x08019c6c

0800d5f4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b082      	sub	sp, #8
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
 800d5fc:	460b      	mov	r3, r1
 800d5fe:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d106      	bne.n	800d614 <netif_issue_reports+0x20>
 800d606:	4b18      	ldr	r3, [pc, #96]	; (800d668 <netif_issue_reports+0x74>)
 800d608:	f240 326d 	movw	r2, #877	; 0x36d
 800d60c:	4917      	ldr	r1, [pc, #92]	; (800d66c <netif_issue_reports+0x78>)
 800d60e:	4818      	ldr	r0, [pc, #96]	; (800d670 <netif_issue_reports+0x7c>)
 800d610:	f009 fcf0 	bl	8016ff4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d61a:	f003 0304 	and.w	r3, r3, #4
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d01e      	beq.n	800d660 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d628:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d017      	beq.n	800d660 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d630:	78fb      	ldrb	r3, [r7, #3]
 800d632:	f003 0301 	and.w	r3, r3, #1
 800d636:	2b00      	cmp	r3, #0
 800d638:	d013      	beq.n	800d662 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	3304      	adds	r3, #4
 800d63e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d640:	2b00      	cmp	r3, #0
 800d642:	d00e      	beq.n	800d662 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d64a:	f003 0308 	and.w	r3, r3, #8
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d007      	beq.n	800d662 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	3304      	adds	r3, #4
 800d656:	4619      	mov	r1, r3
 800d658:	6878      	ldr	r0, [r7, #4]
 800d65a:	f008 f8df 	bl	801581c <etharp_request>
 800d65e:	e000      	b.n	800d662 <netif_issue_reports+0x6e>
    return;
 800d660:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d662:	3708      	adds	r7, #8
 800d664:	46bd      	mov	sp, r7
 800d666:	bd80      	pop	{r7, pc}
 800d668:	08019c1c 	.word	0x08019c1c
 800d66c:	08019dc0 	.word	0x08019dc0
 800d670:	08019c6c 	.word	0x08019c6c

0800d674 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b082      	sub	sp, #8
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d107      	bne.n	800d692 <netif_set_down+0x1e>
 800d682:	4b12      	ldr	r3, [pc, #72]	; (800d6cc <netif_set_down+0x58>)
 800d684:	f240 329b 	movw	r2, #923	; 0x39b
 800d688:	4911      	ldr	r1, [pc, #68]	; (800d6d0 <netif_set_down+0x5c>)
 800d68a:	4812      	ldr	r0, [pc, #72]	; (800d6d4 <netif_set_down+0x60>)
 800d68c:	f009 fcb2 	bl	8016ff4 <iprintf>
 800d690:	e019      	b.n	800d6c6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d698:	f003 0301 	and.w	r3, r3, #1
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d012      	beq.n	800d6c6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d6a6:	f023 0301 	bic.w	r3, r3, #1
 800d6aa:	b2da      	uxtb	r2, r3
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d6b8:	f003 0308 	and.w	r3, r3, #8
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d002      	beq.n	800d6c6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800d6c0:	6878      	ldr	r0, [r7, #4]
 800d6c2:	f007 fc69 	bl	8014f98 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d6c6:	3708      	adds	r7, #8
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	bd80      	pop	{r7, pc}
 800d6cc:	08019c1c 	.word	0x08019c1c
 800d6d0:	08019de4 	.word	0x08019de4
 800d6d4:	08019c6c 	.word	0x08019c6c

0800d6d8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d6d8:	b480      	push	{r7}
 800d6da:	b083      	sub	sp, #12
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
 800d6e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d002      	beq.n	800d6ee <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	683a      	ldr	r2, [r7, #0]
 800d6ec:	61da      	str	r2, [r3, #28]
  }
}
 800d6ee:	bf00      	nop
 800d6f0:	370c      	adds	r7, #12
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f8:	4770      	bx	lr

0800d6fa <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d6fa:	b480      	push	{r7}
 800d6fc:	b085      	sub	sp, #20
 800d6fe:	af00      	add	r7, sp, #0
 800d700:	60f8      	str	r0, [r7, #12]
 800d702:	60b9      	str	r1, [r7, #8]
 800d704:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d706:	f06f 030b 	mvn.w	r3, #11
}
 800d70a:	4618      	mov	r0, r3
 800d70c:	3714      	adds	r7, #20
 800d70e:	46bd      	mov	sp, r7
 800d710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d714:	4770      	bx	lr
	...

0800d718 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d718:	b480      	push	{r7}
 800d71a:	b085      	sub	sp, #20
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	4603      	mov	r3, r0
 800d720:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d722:	79fb      	ldrb	r3, [r7, #7]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d013      	beq.n	800d750 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d728:	4b0d      	ldr	r3, [pc, #52]	; (800d760 <netif_get_by_index+0x48>)
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	60fb      	str	r3, [r7, #12]
 800d72e:	e00c      	b.n	800d74a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d736:	3301      	adds	r3, #1
 800d738:	b2db      	uxtb	r3, r3
 800d73a:	79fa      	ldrb	r2, [r7, #7]
 800d73c:	429a      	cmp	r2, r3
 800d73e:	d101      	bne.n	800d744 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	e006      	b.n	800d752 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	60fb      	str	r3, [r7, #12]
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d1ef      	bne.n	800d730 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d750:	2300      	movs	r3, #0
}
 800d752:	4618      	mov	r0, r3
 800d754:	3714      	adds	r7, #20
 800d756:	46bd      	mov	sp, r7
 800d758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75c:	4770      	bx	lr
 800d75e:	bf00      	nop
 800d760:	20016dac 	.word	0x20016dac

0800d764 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b082      	sub	sp, #8
 800d768:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d76a:	4b0c      	ldr	r3, [pc, #48]	; (800d79c <pbuf_free_ooseq+0x38>)
 800d76c:	2200      	movs	r2, #0
 800d76e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d770:	4b0b      	ldr	r3, [pc, #44]	; (800d7a0 <pbuf_free_ooseq+0x3c>)
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	607b      	str	r3, [r7, #4]
 800d776:	e00a      	b.n	800d78e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d003      	beq.n	800d788 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800d780:	6878      	ldr	r0, [r7, #4]
 800d782:	f002 fbe3 	bl	800ff4c <tcp_free_ooseq>
      return;
 800d786:	e005      	b.n	800d794 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	68db      	ldr	r3, [r3, #12]
 800d78c:	607b      	str	r3, [r7, #4]
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d1f1      	bne.n	800d778 <pbuf_free_ooseq+0x14>
    }
  }
}
 800d794:	3708      	adds	r7, #8
 800d796:	46bd      	mov	sp, r7
 800d798:	bd80      	pop	{r7, pc}
 800d79a:	bf00      	nop
 800d79c:	20016db4 	.word	0x20016db4
 800d7a0:	20016dbc 	.word	0x20016dbc

0800d7a4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d7a4:	b480      	push	{r7}
 800d7a6:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800d7a8:	4b03      	ldr	r3, [pc, #12]	; (800d7b8 <pbuf_pool_is_empty+0x14>)
 800d7aa:	2201      	movs	r2, #1
 800d7ac:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d7ae:	bf00      	nop
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b6:	4770      	bx	lr
 800d7b8:	20016db4 	.word	0x20016db4

0800d7bc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d7bc:	b480      	push	{r7}
 800d7be:	b085      	sub	sp, #20
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	60f8      	str	r0, [r7, #12]
 800d7c4:	60b9      	str	r1, [r7, #8]
 800d7c6:	4611      	mov	r1, r2
 800d7c8:	461a      	mov	r2, r3
 800d7ca:	460b      	mov	r3, r1
 800d7cc:	80fb      	strh	r3, [r7, #6]
 800d7ce:	4613      	mov	r3, r2
 800d7d0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	68ba      	ldr	r2, [r7, #8]
 800d7dc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	88fa      	ldrh	r2, [r7, #6]
 800d7e2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	88ba      	ldrh	r2, [r7, #4]
 800d7e8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d7ea:	8b3b      	ldrh	r3, [r7, #24]
 800d7ec:	b2da      	uxtb	r2, r3
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	7f3a      	ldrb	r2, [r7, #28]
 800d7f6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	2201      	movs	r2, #1
 800d7fc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	2200      	movs	r2, #0
 800d802:	73da      	strb	r2, [r3, #15]
}
 800d804:	bf00      	nop
 800d806:	3714      	adds	r7, #20
 800d808:	46bd      	mov	sp, r7
 800d80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80e:	4770      	bx	lr

0800d810 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b08c      	sub	sp, #48	; 0x30
 800d814:	af02      	add	r7, sp, #8
 800d816:	4603      	mov	r3, r0
 800d818:	71fb      	strb	r3, [r7, #7]
 800d81a:	460b      	mov	r3, r1
 800d81c:	80bb      	strh	r3, [r7, #4]
 800d81e:	4613      	mov	r3, r2
 800d820:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d822:	79fb      	ldrb	r3, [r7, #7]
 800d824:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d826:	887b      	ldrh	r3, [r7, #2]
 800d828:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d82c:	d07f      	beq.n	800d92e <pbuf_alloc+0x11e>
 800d82e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d832:	f300 80c8 	bgt.w	800d9c6 <pbuf_alloc+0x1b6>
 800d836:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d83a:	d010      	beq.n	800d85e <pbuf_alloc+0x4e>
 800d83c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d840:	f300 80c1 	bgt.w	800d9c6 <pbuf_alloc+0x1b6>
 800d844:	2b01      	cmp	r3, #1
 800d846:	d002      	beq.n	800d84e <pbuf_alloc+0x3e>
 800d848:	2b41      	cmp	r3, #65	; 0x41
 800d84a:	f040 80bc 	bne.w	800d9c6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d84e:	887a      	ldrh	r2, [r7, #2]
 800d850:	88bb      	ldrh	r3, [r7, #4]
 800d852:	4619      	mov	r1, r3
 800d854:	2000      	movs	r0, #0
 800d856:	f000 f8d1 	bl	800d9fc <pbuf_alloc_reference>
 800d85a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800d85c:	e0bd      	b.n	800d9da <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d85e:	2300      	movs	r3, #0
 800d860:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800d862:	2300      	movs	r3, #0
 800d864:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d866:	88bb      	ldrh	r3, [r7, #4]
 800d868:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d86a:	2008      	movs	r0, #8
 800d86c:	f7ff fc56 	bl	800d11c <memp_malloc>
 800d870:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d872:	693b      	ldr	r3, [r7, #16]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d109      	bne.n	800d88c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800d878:	f7ff ff94 	bl	800d7a4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d002      	beq.n	800d888 <pbuf_alloc+0x78>
            pbuf_free(p);
 800d882:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d884:	f000 faa8 	bl	800ddd8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d888:	2300      	movs	r3, #0
 800d88a:	e0a7      	b.n	800d9dc <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d88c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d88e:	3303      	adds	r3, #3
 800d890:	b29b      	uxth	r3, r3
 800d892:	f023 0303 	bic.w	r3, r3, #3
 800d896:	b29b      	uxth	r3, r3
 800d898:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800d89c:	b29b      	uxth	r3, r3
 800d89e:	8b7a      	ldrh	r2, [r7, #26]
 800d8a0:	4293      	cmp	r3, r2
 800d8a2:	bf28      	it	cs
 800d8a4:	4613      	movcs	r3, r2
 800d8a6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d8a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d8aa:	3310      	adds	r3, #16
 800d8ac:	693a      	ldr	r2, [r7, #16]
 800d8ae:	4413      	add	r3, r2
 800d8b0:	3303      	adds	r3, #3
 800d8b2:	f023 0303 	bic.w	r3, r3, #3
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	89f9      	ldrh	r1, [r7, #14]
 800d8ba:	8b7a      	ldrh	r2, [r7, #26]
 800d8bc:	2300      	movs	r3, #0
 800d8be:	9301      	str	r3, [sp, #4]
 800d8c0:	887b      	ldrh	r3, [r7, #2]
 800d8c2:	9300      	str	r3, [sp, #0]
 800d8c4:	460b      	mov	r3, r1
 800d8c6:	4601      	mov	r1, r0
 800d8c8:	6938      	ldr	r0, [r7, #16]
 800d8ca:	f7ff ff77 	bl	800d7bc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d8ce:	693b      	ldr	r3, [r7, #16]
 800d8d0:	685b      	ldr	r3, [r3, #4]
 800d8d2:	f003 0303 	and.w	r3, r3, #3
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d006      	beq.n	800d8e8 <pbuf_alloc+0xd8>
 800d8da:	4b42      	ldr	r3, [pc, #264]	; (800d9e4 <pbuf_alloc+0x1d4>)
 800d8dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d8e0:	4941      	ldr	r1, [pc, #260]	; (800d9e8 <pbuf_alloc+0x1d8>)
 800d8e2:	4842      	ldr	r0, [pc, #264]	; (800d9ec <pbuf_alloc+0x1dc>)
 800d8e4:	f009 fb86 	bl	8016ff4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d8e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d8ea:	3303      	adds	r3, #3
 800d8ec:	f023 0303 	bic.w	r3, r3, #3
 800d8f0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d8f4:	d106      	bne.n	800d904 <pbuf_alloc+0xf4>
 800d8f6:	4b3b      	ldr	r3, [pc, #236]	; (800d9e4 <pbuf_alloc+0x1d4>)
 800d8f8:	f44f 7281 	mov.w	r2, #258	; 0x102
 800d8fc:	493c      	ldr	r1, [pc, #240]	; (800d9f0 <pbuf_alloc+0x1e0>)
 800d8fe:	483b      	ldr	r0, [pc, #236]	; (800d9ec <pbuf_alloc+0x1dc>)
 800d900:	f009 fb78 	bl	8016ff4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d906:	2b00      	cmp	r3, #0
 800d908:	d102      	bne.n	800d910 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d90a:	693b      	ldr	r3, [r7, #16]
 800d90c:	627b      	str	r3, [r7, #36]	; 0x24
 800d90e:	e002      	b.n	800d916 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d910:	69fb      	ldr	r3, [r7, #28]
 800d912:	693a      	ldr	r2, [r7, #16]
 800d914:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d916:	693b      	ldr	r3, [r7, #16]
 800d918:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d91a:	8b7a      	ldrh	r2, [r7, #26]
 800d91c:	89fb      	ldrh	r3, [r7, #14]
 800d91e:	1ad3      	subs	r3, r2, r3
 800d920:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d922:	2300      	movs	r3, #0
 800d924:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800d926:	8b7b      	ldrh	r3, [r7, #26]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d19e      	bne.n	800d86a <pbuf_alloc+0x5a>
      break;
 800d92c:	e055      	b.n	800d9da <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d92e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d930:	3303      	adds	r3, #3
 800d932:	b29b      	uxth	r3, r3
 800d934:	f023 0303 	bic.w	r3, r3, #3
 800d938:	b29a      	uxth	r2, r3
 800d93a:	88bb      	ldrh	r3, [r7, #4]
 800d93c:	3303      	adds	r3, #3
 800d93e:	b29b      	uxth	r3, r3
 800d940:	f023 0303 	bic.w	r3, r3, #3
 800d944:	b29b      	uxth	r3, r3
 800d946:	4413      	add	r3, r2
 800d948:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d94a:	8b3b      	ldrh	r3, [r7, #24]
 800d94c:	3310      	adds	r3, #16
 800d94e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d950:	8b3a      	ldrh	r2, [r7, #24]
 800d952:	88bb      	ldrh	r3, [r7, #4]
 800d954:	3303      	adds	r3, #3
 800d956:	f023 0303 	bic.w	r3, r3, #3
 800d95a:	429a      	cmp	r2, r3
 800d95c:	d306      	bcc.n	800d96c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d95e:	8afa      	ldrh	r2, [r7, #22]
 800d960:	88bb      	ldrh	r3, [r7, #4]
 800d962:	3303      	adds	r3, #3
 800d964:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d968:	429a      	cmp	r2, r3
 800d96a:	d201      	bcs.n	800d970 <pbuf_alloc+0x160>
        return NULL;
 800d96c:	2300      	movs	r3, #0
 800d96e:	e035      	b.n	800d9dc <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d970:	8afb      	ldrh	r3, [r7, #22]
 800d972:	4618      	mov	r0, r3
 800d974:	f7ff fa64 	bl	800ce40 <mem_malloc>
 800d978:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800d97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d101      	bne.n	800d984 <pbuf_alloc+0x174>
        return NULL;
 800d980:	2300      	movs	r3, #0
 800d982:	e02b      	b.n	800d9dc <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d984:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d986:	3310      	adds	r3, #16
 800d988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d98a:	4413      	add	r3, r2
 800d98c:	3303      	adds	r3, #3
 800d98e:	f023 0303 	bic.w	r3, r3, #3
 800d992:	4618      	mov	r0, r3
 800d994:	88b9      	ldrh	r1, [r7, #4]
 800d996:	88ba      	ldrh	r2, [r7, #4]
 800d998:	2300      	movs	r3, #0
 800d99a:	9301      	str	r3, [sp, #4]
 800d99c:	887b      	ldrh	r3, [r7, #2]
 800d99e:	9300      	str	r3, [sp, #0]
 800d9a0:	460b      	mov	r3, r1
 800d9a2:	4601      	mov	r1, r0
 800d9a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d9a6:	f7ff ff09 	bl	800d7bc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ac:	685b      	ldr	r3, [r3, #4]
 800d9ae:	f003 0303 	and.w	r3, r3, #3
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d010      	beq.n	800d9d8 <pbuf_alloc+0x1c8>
 800d9b6:	4b0b      	ldr	r3, [pc, #44]	; (800d9e4 <pbuf_alloc+0x1d4>)
 800d9b8:	f44f 7291 	mov.w	r2, #290	; 0x122
 800d9bc:	490d      	ldr	r1, [pc, #52]	; (800d9f4 <pbuf_alloc+0x1e4>)
 800d9be:	480b      	ldr	r0, [pc, #44]	; (800d9ec <pbuf_alloc+0x1dc>)
 800d9c0:	f009 fb18 	bl	8016ff4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d9c4:	e008      	b.n	800d9d8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d9c6:	4b07      	ldr	r3, [pc, #28]	; (800d9e4 <pbuf_alloc+0x1d4>)
 800d9c8:	f240 1227 	movw	r2, #295	; 0x127
 800d9cc:	490a      	ldr	r1, [pc, #40]	; (800d9f8 <pbuf_alloc+0x1e8>)
 800d9ce:	4807      	ldr	r0, [pc, #28]	; (800d9ec <pbuf_alloc+0x1dc>)
 800d9d0:	f009 fb10 	bl	8016ff4 <iprintf>
      return NULL;
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	e001      	b.n	800d9dc <pbuf_alloc+0x1cc>
      break;
 800d9d8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d9dc:	4618      	mov	r0, r3
 800d9de:	3728      	adds	r7, #40	; 0x28
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	bd80      	pop	{r7, pc}
 800d9e4:	08019e4c 	.word	0x08019e4c
 800d9e8:	08019e7c 	.word	0x08019e7c
 800d9ec:	08019eac 	.word	0x08019eac
 800d9f0:	08019ed4 	.word	0x08019ed4
 800d9f4:	08019f08 	.word	0x08019f08
 800d9f8:	08019f34 	.word	0x08019f34

0800d9fc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b086      	sub	sp, #24
 800da00:	af02      	add	r7, sp, #8
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	460b      	mov	r3, r1
 800da06:	807b      	strh	r3, [r7, #2]
 800da08:	4613      	mov	r3, r2
 800da0a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800da0c:	883b      	ldrh	r3, [r7, #0]
 800da0e:	2b41      	cmp	r3, #65	; 0x41
 800da10:	d009      	beq.n	800da26 <pbuf_alloc_reference+0x2a>
 800da12:	883b      	ldrh	r3, [r7, #0]
 800da14:	2b01      	cmp	r3, #1
 800da16:	d006      	beq.n	800da26 <pbuf_alloc_reference+0x2a>
 800da18:	4b0f      	ldr	r3, [pc, #60]	; (800da58 <pbuf_alloc_reference+0x5c>)
 800da1a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800da1e:	490f      	ldr	r1, [pc, #60]	; (800da5c <pbuf_alloc_reference+0x60>)
 800da20:	480f      	ldr	r0, [pc, #60]	; (800da60 <pbuf_alloc_reference+0x64>)
 800da22:	f009 fae7 	bl	8016ff4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800da26:	2007      	movs	r0, #7
 800da28:	f7ff fb78 	bl	800d11c <memp_malloc>
 800da2c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d101      	bne.n	800da38 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800da34:	2300      	movs	r3, #0
 800da36:	e00b      	b.n	800da50 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800da38:	8879      	ldrh	r1, [r7, #2]
 800da3a:	887a      	ldrh	r2, [r7, #2]
 800da3c:	2300      	movs	r3, #0
 800da3e:	9301      	str	r3, [sp, #4]
 800da40:	883b      	ldrh	r3, [r7, #0]
 800da42:	9300      	str	r3, [sp, #0]
 800da44:	460b      	mov	r3, r1
 800da46:	6879      	ldr	r1, [r7, #4]
 800da48:	68f8      	ldr	r0, [r7, #12]
 800da4a:	f7ff feb7 	bl	800d7bc <pbuf_init_alloced_pbuf>
  return p;
 800da4e:	68fb      	ldr	r3, [r7, #12]
}
 800da50:	4618      	mov	r0, r3
 800da52:	3710      	adds	r7, #16
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}
 800da58:	08019e4c 	.word	0x08019e4c
 800da5c:	08019f50 	.word	0x08019f50
 800da60:	08019eac 	.word	0x08019eac

0800da64 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b088      	sub	sp, #32
 800da68:	af02      	add	r7, sp, #8
 800da6a:	607b      	str	r3, [r7, #4]
 800da6c:	4603      	mov	r3, r0
 800da6e:	73fb      	strb	r3, [r7, #15]
 800da70:	460b      	mov	r3, r1
 800da72:	81bb      	strh	r3, [r7, #12]
 800da74:	4613      	mov	r3, r2
 800da76:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800da78:	7bfb      	ldrb	r3, [r7, #15]
 800da7a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800da7c:	8a7b      	ldrh	r3, [r7, #18]
 800da7e:	3303      	adds	r3, #3
 800da80:	f023 0203 	bic.w	r2, r3, #3
 800da84:	89bb      	ldrh	r3, [r7, #12]
 800da86:	441a      	add	r2, r3
 800da88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da8a:	429a      	cmp	r2, r3
 800da8c:	d901      	bls.n	800da92 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800da8e:	2300      	movs	r3, #0
 800da90:	e018      	b.n	800dac4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800da92:	6a3b      	ldr	r3, [r7, #32]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d007      	beq.n	800daa8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800da98:	8a7b      	ldrh	r3, [r7, #18]
 800da9a:	3303      	adds	r3, #3
 800da9c:	f023 0303 	bic.w	r3, r3, #3
 800daa0:	6a3a      	ldr	r2, [r7, #32]
 800daa2:	4413      	add	r3, r2
 800daa4:	617b      	str	r3, [r7, #20]
 800daa6:	e001      	b.n	800daac <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800daa8:	2300      	movs	r3, #0
 800daaa:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800daac:	6878      	ldr	r0, [r7, #4]
 800daae:	89b9      	ldrh	r1, [r7, #12]
 800dab0:	89ba      	ldrh	r2, [r7, #12]
 800dab2:	2302      	movs	r3, #2
 800dab4:	9301      	str	r3, [sp, #4]
 800dab6:	897b      	ldrh	r3, [r7, #10]
 800dab8:	9300      	str	r3, [sp, #0]
 800daba:	460b      	mov	r3, r1
 800dabc:	6979      	ldr	r1, [r7, #20]
 800dabe:	f7ff fe7d 	bl	800d7bc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800dac2:	687b      	ldr	r3, [r7, #4]
}
 800dac4:	4618      	mov	r0, r3
 800dac6:	3718      	adds	r7, #24
 800dac8:	46bd      	mov	sp, r7
 800daca:	bd80      	pop	{r7, pc}

0800dacc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b084      	sub	sp, #16
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
 800dad4:	460b      	mov	r3, r1
 800dad6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d106      	bne.n	800daec <pbuf_realloc+0x20>
 800dade:	4b3a      	ldr	r3, [pc, #232]	; (800dbc8 <pbuf_realloc+0xfc>)
 800dae0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800dae4:	4939      	ldr	r1, [pc, #228]	; (800dbcc <pbuf_realloc+0x100>)
 800dae6:	483a      	ldr	r0, [pc, #232]	; (800dbd0 <pbuf_realloc+0x104>)
 800dae8:	f009 fa84 	bl	8016ff4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	891b      	ldrh	r3, [r3, #8]
 800daf0:	887a      	ldrh	r2, [r7, #2]
 800daf2:	429a      	cmp	r2, r3
 800daf4:	d263      	bcs.n	800dbbe <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	891a      	ldrh	r2, [r3, #8]
 800dafa:	887b      	ldrh	r3, [r7, #2]
 800dafc:	1ad3      	subs	r3, r2, r3
 800dafe:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800db00:	887b      	ldrh	r3, [r7, #2]
 800db02:	817b      	strh	r3, [r7, #10]
  q = p;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800db08:	e018      	b.n	800db3c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	895b      	ldrh	r3, [r3, #10]
 800db0e:	897a      	ldrh	r2, [r7, #10]
 800db10:	1ad3      	subs	r3, r2, r3
 800db12:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	891a      	ldrh	r2, [r3, #8]
 800db18:	893b      	ldrh	r3, [r7, #8]
 800db1a:	1ad3      	subs	r3, r2, r3
 800db1c:	b29a      	uxth	r2, r3
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d106      	bne.n	800db3c <pbuf_realloc+0x70>
 800db2e:	4b26      	ldr	r3, [pc, #152]	; (800dbc8 <pbuf_realloc+0xfc>)
 800db30:	f240 12af 	movw	r2, #431	; 0x1af
 800db34:	4927      	ldr	r1, [pc, #156]	; (800dbd4 <pbuf_realloc+0x108>)
 800db36:	4826      	ldr	r0, [pc, #152]	; (800dbd0 <pbuf_realloc+0x104>)
 800db38:	f009 fa5c 	bl	8016ff4 <iprintf>
  while (rem_len > q->len) {
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	895b      	ldrh	r3, [r3, #10]
 800db40:	897a      	ldrh	r2, [r7, #10]
 800db42:	429a      	cmp	r2, r3
 800db44:	d8e1      	bhi.n	800db0a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	7b1b      	ldrb	r3, [r3, #12]
 800db4a:	f003 030f 	and.w	r3, r3, #15
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d121      	bne.n	800db96 <pbuf_realloc+0xca>
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	895b      	ldrh	r3, [r3, #10]
 800db56:	897a      	ldrh	r2, [r7, #10]
 800db58:	429a      	cmp	r2, r3
 800db5a:	d01c      	beq.n	800db96 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	7b5b      	ldrb	r3, [r3, #13]
 800db60:	f003 0302 	and.w	r3, r3, #2
 800db64:	2b00      	cmp	r3, #0
 800db66:	d116      	bne.n	800db96 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	685a      	ldr	r2, [r3, #4]
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	1ad3      	subs	r3, r2, r3
 800db70:	b29a      	uxth	r2, r3
 800db72:	897b      	ldrh	r3, [r7, #10]
 800db74:	4413      	add	r3, r2
 800db76:	b29b      	uxth	r3, r3
 800db78:	4619      	mov	r1, r3
 800db7a:	68f8      	ldr	r0, [r7, #12]
 800db7c:	f7ff f864 	bl	800cc48 <mem_trim>
 800db80:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d106      	bne.n	800db96 <pbuf_realloc+0xca>
 800db88:	4b0f      	ldr	r3, [pc, #60]	; (800dbc8 <pbuf_realloc+0xfc>)
 800db8a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800db8e:	4912      	ldr	r1, [pc, #72]	; (800dbd8 <pbuf_realloc+0x10c>)
 800db90:	480f      	ldr	r0, [pc, #60]	; (800dbd0 <pbuf_realloc+0x104>)
 800db92:	f009 fa2f 	bl	8016ff4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	897a      	ldrh	r2, [r7, #10]
 800db9a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	895a      	ldrh	r2, [r3, #10]
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d004      	beq.n	800dbb6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	f000 f911 	bl	800ddd8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	2200      	movs	r2, #0
 800dbba:	601a      	str	r2, [r3, #0]
 800dbbc:	e000      	b.n	800dbc0 <pbuf_realloc+0xf4>
    return;
 800dbbe:	bf00      	nop

}
 800dbc0:	3710      	adds	r7, #16
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}
 800dbc6:	bf00      	nop
 800dbc8:	08019e4c 	.word	0x08019e4c
 800dbcc:	08019f64 	.word	0x08019f64
 800dbd0:	08019eac 	.word	0x08019eac
 800dbd4:	08019f7c 	.word	0x08019f7c
 800dbd8:	08019f94 	.word	0x08019f94

0800dbdc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b086      	sub	sp, #24
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	60f8      	str	r0, [r7, #12]
 800dbe4:	60b9      	str	r1, [r7, #8]
 800dbe6:	4613      	mov	r3, r2
 800dbe8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d106      	bne.n	800dbfe <pbuf_add_header_impl+0x22>
 800dbf0:	4b2b      	ldr	r3, [pc, #172]	; (800dca0 <pbuf_add_header_impl+0xc4>)
 800dbf2:	f240 12df 	movw	r2, #479	; 0x1df
 800dbf6:	492b      	ldr	r1, [pc, #172]	; (800dca4 <pbuf_add_header_impl+0xc8>)
 800dbf8:	482b      	ldr	r0, [pc, #172]	; (800dca8 <pbuf_add_header_impl+0xcc>)
 800dbfa:	f009 f9fb 	bl	8016ff4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d003      	beq.n	800dc0c <pbuf_add_header_impl+0x30>
 800dc04:	68bb      	ldr	r3, [r7, #8]
 800dc06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc0a:	d301      	bcc.n	800dc10 <pbuf_add_header_impl+0x34>
    return 1;
 800dc0c:	2301      	movs	r3, #1
 800dc0e:	e043      	b.n	800dc98 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800dc10:	68bb      	ldr	r3, [r7, #8]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d101      	bne.n	800dc1a <pbuf_add_header_impl+0x3e>
    return 0;
 800dc16:	2300      	movs	r3, #0
 800dc18:	e03e      	b.n	800dc98 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	891a      	ldrh	r2, [r3, #8]
 800dc22:	8a7b      	ldrh	r3, [r7, #18]
 800dc24:	4413      	add	r3, r2
 800dc26:	b29b      	uxth	r3, r3
 800dc28:	8a7a      	ldrh	r2, [r7, #18]
 800dc2a:	429a      	cmp	r2, r3
 800dc2c:	d901      	bls.n	800dc32 <pbuf_add_header_impl+0x56>
    return 1;
 800dc2e:	2301      	movs	r3, #1
 800dc30:	e032      	b.n	800dc98 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	7b1b      	ldrb	r3, [r3, #12]
 800dc36:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800dc38:	8a3b      	ldrh	r3, [r7, #16]
 800dc3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d00c      	beq.n	800dc5c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	685a      	ldr	r2, [r3, #4]
 800dc46:	68bb      	ldr	r3, [r7, #8]
 800dc48:	425b      	negs	r3, r3
 800dc4a:	4413      	add	r3, r2
 800dc4c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	3310      	adds	r3, #16
 800dc52:	697a      	ldr	r2, [r7, #20]
 800dc54:	429a      	cmp	r2, r3
 800dc56:	d20d      	bcs.n	800dc74 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800dc58:	2301      	movs	r3, #1
 800dc5a:	e01d      	b.n	800dc98 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800dc5c:	79fb      	ldrb	r3, [r7, #7]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d006      	beq.n	800dc70 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	685a      	ldr	r2, [r3, #4]
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	425b      	negs	r3, r3
 800dc6a:	4413      	add	r3, r2
 800dc6c:	617b      	str	r3, [r7, #20]
 800dc6e:	e001      	b.n	800dc74 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800dc70:	2301      	movs	r3, #1
 800dc72:	e011      	b.n	800dc98 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	697a      	ldr	r2, [r7, #20]
 800dc78:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	895a      	ldrh	r2, [r3, #10]
 800dc7e:	8a7b      	ldrh	r3, [r7, #18]
 800dc80:	4413      	add	r3, r2
 800dc82:	b29a      	uxth	r2, r3
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	891a      	ldrh	r2, [r3, #8]
 800dc8c:	8a7b      	ldrh	r3, [r7, #18]
 800dc8e:	4413      	add	r3, r2
 800dc90:	b29a      	uxth	r2, r3
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	811a      	strh	r2, [r3, #8]


  return 0;
 800dc96:	2300      	movs	r3, #0
}
 800dc98:	4618      	mov	r0, r3
 800dc9a:	3718      	adds	r7, #24
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}
 800dca0:	08019e4c 	.word	0x08019e4c
 800dca4:	08019fb0 	.word	0x08019fb0
 800dca8:	08019eac 	.word	0x08019eac

0800dcac <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b082      	sub	sp, #8
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
 800dcb4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	6839      	ldr	r1, [r7, #0]
 800dcba:	6878      	ldr	r0, [r7, #4]
 800dcbc:	f7ff ff8e 	bl	800dbdc <pbuf_add_header_impl>
 800dcc0:	4603      	mov	r3, r0
}
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	3708      	adds	r7, #8
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	bd80      	pop	{r7, pc}
	...

0800dccc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b084      	sub	sp, #16
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
 800dcd4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d106      	bne.n	800dcea <pbuf_remove_header+0x1e>
 800dcdc:	4b20      	ldr	r3, [pc, #128]	; (800dd60 <pbuf_remove_header+0x94>)
 800dcde:	f240 224b 	movw	r2, #587	; 0x24b
 800dce2:	4920      	ldr	r1, [pc, #128]	; (800dd64 <pbuf_remove_header+0x98>)
 800dce4:	4820      	ldr	r0, [pc, #128]	; (800dd68 <pbuf_remove_header+0x9c>)
 800dce6:	f009 f985 	bl	8016ff4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d003      	beq.n	800dcf8 <pbuf_remove_header+0x2c>
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dcf6:	d301      	bcc.n	800dcfc <pbuf_remove_header+0x30>
    return 1;
 800dcf8:	2301      	movs	r3, #1
 800dcfa:	e02c      	b.n	800dd56 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d101      	bne.n	800dd06 <pbuf_remove_header+0x3a>
    return 0;
 800dd02:	2300      	movs	r3, #0
 800dd04:	e027      	b.n	800dd56 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	895b      	ldrh	r3, [r3, #10]
 800dd0e:	89fa      	ldrh	r2, [r7, #14]
 800dd10:	429a      	cmp	r2, r3
 800dd12:	d908      	bls.n	800dd26 <pbuf_remove_header+0x5a>
 800dd14:	4b12      	ldr	r3, [pc, #72]	; (800dd60 <pbuf_remove_header+0x94>)
 800dd16:	f240 2255 	movw	r2, #597	; 0x255
 800dd1a:	4914      	ldr	r1, [pc, #80]	; (800dd6c <pbuf_remove_header+0xa0>)
 800dd1c:	4812      	ldr	r0, [pc, #72]	; (800dd68 <pbuf_remove_header+0x9c>)
 800dd1e:	f009 f969 	bl	8016ff4 <iprintf>
 800dd22:	2301      	movs	r3, #1
 800dd24:	e017      	b.n	800dd56 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	685b      	ldr	r3, [r3, #4]
 800dd2a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	685a      	ldr	r2, [r3, #4]
 800dd30:	683b      	ldr	r3, [r7, #0]
 800dd32:	441a      	add	r2, r3
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	895a      	ldrh	r2, [r3, #10]
 800dd3c:	89fb      	ldrh	r3, [r7, #14]
 800dd3e:	1ad3      	subs	r3, r2, r3
 800dd40:	b29a      	uxth	r2, r3
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	891a      	ldrh	r2, [r3, #8]
 800dd4a:	89fb      	ldrh	r3, [r7, #14]
 800dd4c:	1ad3      	subs	r3, r2, r3
 800dd4e:	b29a      	uxth	r2, r3
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800dd54:	2300      	movs	r3, #0
}
 800dd56:	4618      	mov	r0, r3
 800dd58:	3710      	adds	r7, #16
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	bd80      	pop	{r7, pc}
 800dd5e:	bf00      	nop
 800dd60:	08019e4c 	.word	0x08019e4c
 800dd64:	08019fb0 	.word	0x08019fb0
 800dd68:	08019eac 	.word	0x08019eac
 800dd6c:	08019fbc 	.word	0x08019fbc

0800dd70 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b082      	sub	sp, #8
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
 800dd78:	460b      	mov	r3, r1
 800dd7a:	807b      	strh	r3, [r7, #2]
 800dd7c:	4613      	mov	r3, r2
 800dd7e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800dd80:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	da08      	bge.n	800dd9a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800dd88:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dd8c:	425b      	negs	r3, r3
 800dd8e:	4619      	mov	r1, r3
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	f7ff ff9b 	bl	800dccc <pbuf_remove_header>
 800dd96:	4603      	mov	r3, r0
 800dd98:	e007      	b.n	800ddaa <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800dd9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dd9e:	787a      	ldrb	r2, [r7, #1]
 800dda0:	4619      	mov	r1, r3
 800dda2:	6878      	ldr	r0, [r7, #4]
 800dda4:	f7ff ff1a 	bl	800dbdc <pbuf_add_header_impl>
 800dda8:	4603      	mov	r3, r0
  }
}
 800ddaa:	4618      	mov	r0, r3
 800ddac:	3708      	adds	r7, #8
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	bd80      	pop	{r7, pc}

0800ddb2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800ddb2:	b580      	push	{r7, lr}
 800ddb4:	b082      	sub	sp, #8
 800ddb6:	af00      	add	r7, sp, #0
 800ddb8:	6078      	str	r0, [r7, #4]
 800ddba:	460b      	mov	r3, r1
 800ddbc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800ddbe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ddc2:	2201      	movs	r2, #1
 800ddc4:	4619      	mov	r1, r3
 800ddc6:	6878      	ldr	r0, [r7, #4]
 800ddc8:	f7ff ffd2 	bl	800dd70 <pbuf_header_impl>
 800ddcc:	4603      	mov	r3, r0
}
 800ddce:	4618      	mov	r0, r3
 800ddd0:	3708      	adds	r7, #8
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bd80      	pop	{r7, pc}
	...

0800ddd8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b086      	sub	sp, #24
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d10b      	bne.n	800ddfe <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d106      	bne.n	800ddfa <pbuf_free+0x22>
 800ddec:	4b38      	ldr	r3, [pc, #224]	; (800ded0 <pbuf_free+0xf8>)
 800ddee:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800ddf2:	4938      	ldr	r1, [pc, #224]	; (800ded4 <pbuf_free+0xfc>)
 800ddf4:	4838      	ldr	r0, [pc, #224]	; (800ded8 <pbuf_free+0x100>)
 800ddf6:	f009 f8fd 	bl	8016ff4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	e063      	b.n	800dec6 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800ddfe:	2300      	movs	r3, #0
 800de00:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800de02:	e05c      	b.n	800debe <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	7b9b      	ldrb	r3, [r3, #14]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d106      	bne.n	800de1a <pbuf_free+0x42>
 800de0c:	4b30      	ldr	r3, [pc, #192]	; (800ded0 <pbuf_free+0xf8>)
 800de0e:	f240 22f1 	movw	r2, #753	; 0x2f1
 800de12:	4932      	ldr	r1, [pc, #200]	; (800dedc <pbuf_free+0x104>)
 800de14:	4830      	ldr	r0, [pc, #192]	; (800ded8 <pbuf_free+0x100>)
 800de16:	f009 f8ed 	bl	8016ff4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	7b9b      	ldrb	r3, [r3, #14]
 800de1e:	3b01      	subs	r3, #1
 800de20:	b2da      	uxtb	r2, r3
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	739a      	strb	r2, [r3, #14]
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	7b9b      	ldrb	r3, [r3, #14]
 800de2a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800de2c:	7dbb      	ldrb	r3, [r7, #22]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d143      	bne.n	800deba <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	7b1b      	ldrb	r3, [r3, #12]
 800de3c:	f003 030f 	and.w	r3, r3, #15
 800de40:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	7b5b      	ldrb	r3, [r3, #13]
 800de46:	f003 0302 	and.w	r3, r3, #2
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d011      	beq.n	800de72 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800de52:	68bb      	ldr	r3, [r7, #8]
 800de54:	691b      	ldr	r3, [r3, #16]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d106      	bne.n	800de68 <pbuf_free+0x90>
 800de5a:	4b1d      	ldr	r3, [pc, #116]	; (800ded0 <pbuf_free+0xf8>)
 800de5c:	f240 22ff 	movw	r2, #767	; 0x2ff
 800de60:	491f      	ldr	r1, [pc, #124]	; (800dee0 <pbuf_free+0x108>)
 800de62:	481d      	ldr	r0, [pc, #116]	; (800ded8 <pbuf_free+0x100>)
 800de64:	f009 f8c6 	bl	8016ff4 <iprintf>
        pc->custom_free_function(p);
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	691b      	ldr	r3, [r3, #16]
 800de6c:	6878      	ldr	r0, [r7, #4]
 800de6e:	4798      	blx	r3
 800de70:	e01d      	b.n	800deae <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800de72:	7bfb      	ldrb	r3, [r7, #15]
 800de74:	2b02      	cmp	r3, #2
 800de76:	d104      	bne.n	800de82 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800de78:	6879      	ldr	r1, [r7, #4]
 800de7a:	2008      	movs	r0, #8
 800de7c:	f7ff f99a 	bl	800d1b4 <memp_free>
 800de80:	e015      	b.n	800deae <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800de82:	7bfb      	ldrb	r3, [r7, #15]
 800de84:	2b01      	cmp	r3, #1
 800de86:	d104      	bne.n	800de92 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800de88:	6879      	ldr	r1, [r7, #4]
 800de8a:	2007      	movs	r0, #7
 800de8c:	f7ff f992 	bl	800d1b4 <memp_free>
 800de90:	e00d      	b.n	800deae <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800de92:	7bfb      	ldrb	r3, [r7, #15]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d103      	bne.n	800dea0 <pbuf_free+0xc8>
          mem_free(p);
 800de98:	6878      	ldr	r0, [r7, #4]
 800de9a:	f7fe fe6b 	bl	800cb74 <mem_free>
 800de9e:	e006      	b.n	800deae <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800dea0:	4b0b      	ldr	r3, [pc, #44]	; (800ded0 <pbuf_free+0xf8>)
 800dea2:	f240 320f 	movw	r2, #783	; 0x30f
 800dea6:	490f      	ldr	r1, [pc, #60]	; (800dee4 <pbuf_free+0x10c>)
 800dea8:	480b      	ldr	r0, [pc, #44]	; (800ded8 <pbuf_free+0x100>)
 800deaa:	f009 f8a3 	bl	8016ff4 <iprintf>
        }
      }
      count++;
 800deae:	7dfb      	ldrb	r3, [r7, #23]
 800deb0:	3301      	adds	r3, #1
 800deb2:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800deb4:	693b      	ldr	r3, [r7, #16]
 800deb6:	607b      	str	r3, [r7, #4]
 800deb8:	e001      	b.n	800debe <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800deba:	2300      	movs	r3, #0
 800debc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d19f      	bne.n	800de04 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800dec4:	7dfb      	ldrb	r3, [r7, #23]
}
 800dec6:	4618      	mov	r0, r3
 800dec8:	3718      	adds	r7, #24
 800deca:	46bd      	mov	sp, r7
 800decc:	bd80      	pop	{r7, pc}
 800dece:	bf00      	nop
 800ded0:	08019e4c 	.word	0x08019e4c
 800ded4:	08019fb0 	.word	0x08019fb0
 800ded8:	08019eac 	.word	0x08019eac
 800dedc:	08019fdc 	.word	0x08019fdc
 800dee0:	08019ff4 	.word	0x08019ff4
 800dee4:	0801a018 	.word	0x0801a018

0800dee8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800dee8:	b480      	push	{r7}
 800deea:	b085      	sub	sp, #20
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800def0:	2300      	movs	r3, #0
 800def2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800def4:	e005      	b.n	800df02 <pbuf_clen+0x1a>
    ++len;
 800def6:	89fb      	ldrh	r3, [r7, #14]
 800def8:	3301      	adds	r3, #1
 800defa:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d1f6      	bne.n	800def6 <pbuf_clen+0xe>
  }
  return len;
 800df08:	89fb      	ldrh	r3, [r7, #14]
}
 800df0a:	4618      	mov	r0, r3
 800df0c:	3714      	adds	r7, #20
 800df0e:	46bd      	mov	sp, r7
 800df10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df14:	4770      	bx	lr
	...

0800df18 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b082      	sub	sp, #8
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d010      	beq.n	800df48 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	7b9b      	ldrb	r3, [r3, #14]
 800df2a:	3301      	adds	r3, #1
 800df2c:	b2da      	uxtb	r2, r3
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	7b9b      	ldrb	r3, [r3, #14]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d106      	bne.n	800df48 <pbuf_ref+0x30>
 800df3a:	4b05      	ldr	r3, [pc, #20]	; (800df50 <pbuf_ref+0x38>)
 800df3c:	f240 3242 	movw	r2, #834	; 0x342
 800df40:	4904      	ldr	r1, [pc, #16]	; (800df54 <pbuf_ref+0x3c>)
 800df42:	4805      	ldr	r0, [pc, #20]	; (800df58 <pbuf_ref+0x40>)
 800df44:	f009 f856 	bl	8016ff4 <iprintf>
  }
}
 800df48:	bf00      	nop
 800df4a:	3708      	adds	r7, #8
 800df4c:	46bd      	mov	sp, r7
 800df4e:	bd80      	pop	{r7, pc}
 800df50:	08019e4c 	.word	0x08019e4c
 800df54:	0801a02c 	.word	0x0801a02c
 800df58:	08019eac 	.word	0x08019eac

0800df5c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b084      	sub	sp, #16
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
 800df64:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d002      	beq.n	800df72 <pbuf_cat+0x16>
 800df6c:	683b      	ldr	r3, [r7, #0]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d107      	bne.n	800df82 <pbuf_cat+0x26>
 800df72:	4b20      	ldr	r3, [pc, #128]	; (800dff4 <pbuf_cat+0x98>)
 800df74:	f240 3259 	movw	r2, #857	; 0x359
 800df78:	491f      	ldr	r1, [pc, #124]	; (800dff8 <pbuf_cat+0x9c>)
 800df7a:	4820      	ldr	r0, [pc, #128]	; (800dffc <pbuf_cat+0xa0>)
 800df7c:	f009 f83a 	bl	8016ff4 <iprintf>
 800df80:	e034      	b.n	800dfec <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	60fb      	str	r3, [r7, #12]
 800df86:	e00a      	b.n	800df9e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	891a      	ldrh	r2, [r3, #8]
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	891b      	ldrh	r3, [r3, #8]
 800df90:	4413      	add	r3, r2
 800df92:	b29a      	uxth	r2, r3
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	60fb      	str	r3, [r7, #12]
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d1f0      	bne.n	800df88 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	891a      	ldrh	r2, [r3, #8]
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	895b      	ldrh	r3, [r3, #10]
 800dfae:	429a      	cmp	r2, r3
 800dfb0:	d006      	beq.n	800dfc0 <pbuf_cat+0x64>
 800dfb2:	4b10      	ldr	r3, [pc, #64]	; (800dff4 <pbuf_cat+0x98>)
 800dfb4:	f240 3262 	movw	r2, #866	; 0x362
 800dfb8:	4911      	ldr	r1, [pc, #68]	; (800e000 <pbuf_cat+0xa4>)
 800dfba:	4810      	ldr	r0, [pc, #64]	; (800dffc <pbuf_cat+0xa0>)
 800dfbc:	f009 f81a 	bl	8016ff4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d006      	beq.n	800dfd6 <pbuf_cat+0x7a>
 800dfc8:	4b0a      	ldr	r3, [pc, #40]	; (800dff4 <pbuf_cat+0x98>)
 800dfca:	f240 3263 	movw	r2, #867	; 0x363
 800dfce:	490d      	ldr	r1, [pc, #52]	; (800e004 <pbuf_cat+0xa8>)
 800dfd0:	480a      	ldr	r0, [pc, #40]	; (800dffc <pbuf_cat+0xa0>)
 800dfd2:	f009 f80f 	bl	8016ff4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	891a      	ldrh	r2, [r3, #8]
 800dfda:	683b      	ldr	r3, [r7, #0]
 800dfdc:	891b      	ldrh	r3, [r3, #8]
 800dfde:	4413      	add	r3, r2
 800dfe0:	b29a      	uxth	r2, r3
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	683a      	ldr	r2, [r7, #0]
 800dfea:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800dfec:	3710      	adds	r7, #16
 800dfee:	46bd      	mov	sp, r7
 800dff0:	bd80      	pop	{r7, pc}
 800dff2:	bf00      	nop
 800dff4:	08019e4c 	.word	0x08019e4c
 800dff8:	0801a040 	.word	0x0801a040
 800dffc:	08019eac 	.word	0x08019eac
 800e000:	0801a078 	.word	0x0801a078
 800e004:	0801a0a8 	.word	0x0801a0a8

0800e008 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b086      	sub	sp, #24
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
 800e010:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800e012:	2300      	movs	r3, #0
 800e014:	617b      	str	r3, [r7, #20]
 800e016:	2300      	movs	r3, #0
 800e018:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d008      	beq.n	800e032 <pbuf_copy+0x2a>
 800e020:	683b      	ldr	r3, [r7, #0]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d005      	beq.n	800e032 <pbuf_copy+0x2a>
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	891a      	ldrh	r2, [r3, #8]
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	891b      	ldrh	r3, [r3, #8]
 800e02e:	429a      	cmp	r2, r3
 800e030:	d209      	bcs.n	800e046 <pbuf_copy+0x3e>
 800e032:	4b57      	ldr	r3, [pc, #348]	; (800e190 <pbuf_copy+0x188>)
 800e034:	f240 32c9 	movw	r2, #969	; 0x3c9
 800e038:	4956      	ldr	r1, [pc, #344]	; (800e194 <pbuf_copy+0x18c>)
 800e03a:	4857      	ldr	r0, [pc, #348]	; (800e198 <pbuf_copy+0x190>)
 800e03c:	f008 ffda 	bl	8016ff4 <iprintf>
 800e040:	f06f 030f 	mvn.w	r3, #15
 800e044:	e09f      	b.n	800e186 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	895b      	ldrh	r3, [r3, #10]
 800e04a:	461a      	mov	r2, r3
 800e04c:	697b      	ldr	r3, [r7, #20]
 800e04e:	1ad2      	subs	r2, r2, r3
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	895b      	ldrh	r3, [r3, #10]
 800e054:	4619      	mov	r1, r3
 800e056:	693b      	ldr	r3, [r7, #16]
 800e058:	1acb      	subs	r3, r1, r3
 800e05a:	429a      	cmp	r2, r3
 800e05c:	d306      	bcc.n	800e06c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	895b      	ldrh	r3, [r3, #10]
 800e062:	461a      	mov	r2, r3
 800e064:	693b      	ldr	r3, [r7, #16]
 800e066:	1ad3      	subs	r3, r2, r3
 800e068:	60fb      	str	r3, [r7, #12]
 800e06a:	e005      	b.n	800e078 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	895b      	ldrh	r3, [r3, #10]
 800e070:	461a      	mov	r2, r3
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	1ad3      	subs	r3, r2, r3
 800e076:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	685a      	ldr	r2, [r3, #4]
 800e07c:	697b      	ldr	r3, [r7, #20]
 800e07e:	18d0      	adds	r0, r2, r3
 800e080:	683b      	ldr	r3, [r7, #0]
 800e082:	685a      	ldr	r2, [r3, #4]
 800e084:	693b      	ldr	r3, [r7, #16]
 800e086:	4413      	add	r3, r2
 800e088:	68fa      	ldr	r2, [r7, #12]
 800e08a:	4619      	mov	r1, r3
 800e08c:	f008 ff82 	bl	8016f94 <memcpy>
    offset_to += len;
 800e090:	697a      	ldr	r2, [r7, #20]
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	4413      	add	r3, r2
 800e096:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e098:	693a      	ldr	r2, [r7, #16]
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	4413      	add	r3, r2
 800e09e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	895b      	ldrh	r3, [r3, #10]
 800e0a4:	461a      	mov	r2, r3
 800e0a6:	697b      	ldr	r3, [r7, #20]
 800e0a8:	4293      	cmp	r3, r2
 800e0aa:	d906      	bls.n	800e0ba <pbuf_copy+0xb2>
 800e0ac:	4b38      	ldr	r3, [pc, #224]	; (800e190 <pbuf_copy+0x188>)
 800e0ae:	f240 32d9 	movw	r2, #985	; 0x3d9
 800e0b2:	493a      	ldr	r1, [pc, #232]	; (800e19c <pbuf_copy+0x194>)
 800e0b4:	4838      	ldr	r0, [pc, #224]	; (800e198 <pbuf_copy+0x190>)
 800e0b6:	f008 ff9d 	bl	8016ff4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	895b      	ldrh	r3, [r3, #10]
 800e0be:	461a      	mov	r2, r3
 800e0c0:	693b      	ldr	r3, [r7, #16]
 800e0c2:	4293      	cmp	r3, r2
 800e0c4:	d906      	bls.n	800e0d4 <pbuf_copy+0xcc>
 800e0c6:	4b32      	ldr	r3, [pc, #200]	; (800e190 <pbuf_copy+0x188>)
 800e0c8:	f240 32da 	movw	r2, #986	; 0x3da
 800e0cc:	4934      	ldr	r1, [pc, #208]	; (800e1a0 <pbuf_copy+0x198>)
 800e0ce:	4832      	ldr	r0, [pc, #200]	; (800e198 <pbuf_copy+0x190>)
 800e0d0:	f008 ff90 	bl	8016ff4 <iprintf>
    if (offset_from >= p_from->len) {
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	895b      	ldrh	r3, [r3, #10]
 800e0d8:	461a      	mov	r2, r3
 800e0da:	693b      	ldr	r3, [r7, #16]
 800e0dc:	4293      	cmp	r3, r2
 800e0de:	d304      	bcc.n	800e0ea <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	895b      	ldrh	r3, [r3, #10]
 800e0ee:	461a      	mov	r2, r3
 800e0f0:	697b      	ldr	r3, [r7, #20]
 800e0f2:	4293      	cmp	r3, r2
 800e0f4:	d114      	bne.n	800e120 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d10c      	bne.n	800e120 <pbuf_copy+0x118>
 800e106:	683b      	ldr	r3, [r7, #0]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d009      	beq.n	800e120 <pbuf_copy+0x118>
 800e10c:	4b20      	ldr	r3, [pc, #128]	; (800e190 <pbuf_copy+0x188>)
 800e10e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800e112:	4924      	ldr	r1, [pc, #144]	; (800e1a4 <pbuf_copy+0x19c>)
 800e114:	4820      	ldr	r0, [pc, #128]	; (800e198 <pbuf_copy+0x190>)
 800e116:	f008 ff6d 	bl	8016ff4 <iprintf>
 800e11a:	f06f 030f 	mvn.w	r3, #15
 800e11e:	e032      	b.n	800e186 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d013      	beq.n	800e14e <pbuf_copy+0x146>
 800e126:	683b      	ldr	r3, [r7, #0]
 800e128:	895a      	ldrh	r2, [r3, #10]
 800e12a:	683b      	ldr	r3, [r7, #0]
 800e12c:	891b      	ldrh	r3, [r3, #8]
 800e12e:	429a      	cmp	r2, r3
 800e130:	d10d      	bne.n	800e14e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e132:	683b      	ldr	r3, [r7, #0]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d009      	beq.n	800e14e <pbuf_copy+0x146>
 800e13a:	4b15      	ldr	r3, [pc, #84]	; (800e190 <pbuf_copy+0x188>)
 800e13c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800e140:	4919      	ldr	r1, [pc, #100]	; (800e1a8 <pbuf_copy+0x1a0>)
 800e142:	4815      	ldr	r0, [pc, #84]	; (800e198 <pbuf_copy+0x190>)
 800e144:	f008 ff56 	bl	8016ff4 <iprintf>
 800e148:	f06f 0305 	mvn.w	r3, #5
 800e14c:	e01b      	b.n	800e186 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d013      	beq.n	800e17c <pbuf_copy+0x174>
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	895a      	ldrh	r2, [r3, #10]
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	891b      	ldrh	r3, [r3, #8]
 800e15c:	429a      	cmp	r2, r3
 800e15e:	d10d      	bne.n	800e17c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d009      	beq.n	800e17c <pbuf_copy+0x174>
 800e168:	4b09      	ldr	r3, [pc, #36]	; (800e190 <pbuf_copy+0x188>)
 800e16a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800e16e:	490e      	ldr	r1, [pc, #56]	; (800e1a8 <pbuf_copy+0x1a0>)
 800e170:	4809      	ldr	r0, [pc, #36]	; (800e198 <pbuf_copy+0x190>)
 800e172:	f008 ff3f 	bl	8016ff4 <iprintf>
 800e176:	f06f 0305 	mvn.w	r3, #5
 800e17a:	e004      	b.n	800e186 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	f47f af61 	bne.w	800e046 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e184:	2300      	movs	r3, #0
}
 800e186:	4618      	mov	r0, r3
 800e188:	3718      	adds	r7, #24
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bd80      	pop	{r7, pc}
 800e18e:	bf00      	nop
 800e190:	08019e4c 	.word	0x08019e4c
 800e194:	0801a0f4 	.word	0x0801a0f4
 800e198:	08019eac 	.word	0x08019eac
 800e19c:	0801a124 	.word	0x0801a124
 800e1a0:	0801a13c 	.word	0x0801a13c
 800e1a4:	0801a158 	.word	0x0801a158
 800e1a8:	0801a168 	.word	0x0801a168

0800e1ac <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b088      	sub	sp, #32
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	60f8      	str	r0, [r7, #12]
 800e1b4:	60b9      	str	r1, [r7, #8]
 800e1b6:	4611      	mov	r1, r2
 800e1b8:	461a      	mov	r2, r3
 800e1ba:	460b      	mov	r3, r1
 800e1bc:	80fb      	strh	r3, [r7, #6]
 800e1be:	4613      	mov	r3, r2
 800e1c0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d108      	bne.n	800e1e2 <pbuf_copy_partial+0x36>
 800e1d0:	4b2b      	ldr	r3, [pc, #172]	; (800e280 <pbuf_copy_partial+0xd4>)
 800e1d2:	f240 420a 	movw	r2, #1034	; 0x40a
 800e1d6:	492b      	ldr	r1, [pc, #172]	; (800e284 <pbuf_copy_partial+0xd8>)
 800e1d8:	482b      	ldr	r0, [pc, #172]	; (800e288 <pbuf_copy_partial+0xdc>)
 800e1da:	f008 ff0b 	bl	8016ff4 <iprintf>
 800e1de:	2300      	movs	r3, #0
 800e1e0:	e04a      	b.n	800e278 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e1e2:	68bb      	ldr	r3, [r7, #8]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d108      	bne.n	800e1fa <pbuf_copy_partial+0x4e>
 800e1e8:	4b25      	ldr	r3, [pc, #148]	; (800e280 <pbuf_copy_partial+0xd4>)
 800e1ea:	f240 420b 	movw	r2, #1035	; 0x40b
 800e1ee:	4927      	ldr	r1, [pc, #156]	; (800e28c <pbuf_copy_partial+0xe0>)
 800e1f0:	4825      	ldr	r0, [pc, #148]	; (800e288 <pbuf_copy_partial+0xdc>)
 800e1f2:	f008 feff 	bl	8016ff4 <iprintf>
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	e03e      	b.n	800e278 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	61fb      	str	r3, [r7, #28]
 800e1fe:	e034      	b.n	800e26a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800e200:	88bb      	ldrh	r3, [r7, #4]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d00a      	beq.n	800e21c <pbuf_copy_partial+0x70>
 800e206:	69fb      	ldr	r3, [r7, #28]
 800e208:	895b      	ldrh	r3, [r3, #10]
 800e20a:	88ba      	ldrh	r2, [r7, #4]
 800e20c:	429a      	cmp	r2, r3
 800e20e:	d305      	bcc.n	800e21c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800e210:	69fb      	ldr	r3, [r7, #28]
 800e212:	895b      	ldrh	r3, [r3, #10]
 800e214:	88ba      	ldrh	r2, [r7, #4]
 800e216:	1ad3      	subs	r3, r2, r3
 800e218:	80bb      	strh	r3, [r7, #4]
 800e21a:	e023      	b.n	800e264 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800e21c:	69fb      	ldr	r3, [r7, #28]
 800e21e:	895a      	ldrh	r2, [r3, #10]
 800e220:	88bb      	ldrh	r3, [r7, #4]
 800e222:	1ad3      	subs	r3, r2, r3
 800e224:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e226:	8b3a      	ldrh	r2, [r7, #24]
 800e228:	88fb      	ldrh	r3, [r7, #6]
 800e22a:	429a      	cmp	r2, r3
 800e22c:	d901      	bls.n	800e232 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800e22e:	88fb      	ldrh	r3, [r7, #6]
 800e230:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e232:	8b7b      	ldrh	r3, [r7, #26]
 800e234:	68ba      	ldr	r2, [r7, #8]
 800e236:	18d0      	adds	r0, r2, r3
 800e238:	69fb      	ldr	r3, [r7, #28]
 800e23a:	685a      	ldr	r2, [r3, #4]
 800e23c:	88bb      	ldrh	r3, [r7, #4]
 800e23e:	4413      	add	r3, r2
 800e240:	8b3a      	ldrh	r2, [r7, #24]
 800e242:	4619      	mov	r1, r3
 800e244:	f008 fea6 	bl	8016f94 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800e248:	8afa      	ldrh	r2, [r7, #22]
 800e24a:	8b3b      	ldrh	r3, [r7, #24]
 800e24c:	4413      	add	r3, r2
 800e24e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800e250:	8b7a      	ldrh	r2, [r7, #26]
 800e252:	8b3b      	ldrh	r3, [r7, #24]
 800e254:	4413      	add	r3, r2
 800e256:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800e258:	88fa      	ldrh	r2, [r7, #6]
 800e25a:	8b3b      	ldrh	r3, [r7, #24]
 800e25c:	1ad3      	subs	r3, r2, r3
 800e25e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e260:	2300      	movs	r3, #0
 800e262:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e264:	69fb      	ldr	r3, [r7, #28]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	61fb      	str	r3, [r7, #28]
 800e26a:	88fb      	ldrh	r3, [r7, #6]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d002      	beq.n	800e276 <pbuf_copy_partial+0xca>
 800e270:	69fb      	ldr	r3, [r7, #28]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d1c4      	bne.n	800e200 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800e276:	8afb      	ldrh	r3, [r7, #22]
}
 800e278:	4618      	mov	r0, r3
 800e27a:	3720      	adds	r7, #32
 800e27c:	46bd      	mov	sp, r7
 800e27e:	bd80      	pop	{r7, pc}
 800e280:	08019e4c 	.word	0x08019e4c
 800e284:	0801a194 	.word	0x0801a194
 800e288:	08019eac 	.word	0x08019eac
 800e28c:	0801a1b4 	.word	0x0801a1b4

0800e290 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b084      	sub	sp, #16
 800e294:	af00      	add	r7, sp, #0
 800e296:	4603      	mov	r3, r0
 800e298:	603a      	str	r2, [r7, #0]
 800e29a:	71fb      	strb	r3, [r7, #7]
 800e29c:	460b      	mov	r3, r1
 800e29e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e2a0:	683b      	ldr	r3, [r7, #0]
 800e2a2:	8919      	ldrh	r1, [r3, #8]
 800e2a4:	88ba      	ldrh	r2, [r7, #4]
 800e2a6:	79fb      	ldrb	r3, [r7, #7]
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	f7ff fab1 	bl	800d810 <pbuf_alloc>
 800e2ae:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d101      	bne.n	800e2ba <pbuf_clone+0x2a>
    return NULL;
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	e011      	b.n	800e2de <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e2ba:	6839      	ldr	r1, [r7, #0]
 800e2bc:	68f8      	ldr	r0, [r7, #12]
 800e2be:	f7ff fea3 	bl	800e008 <pbuf_copy>
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e2c6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d006      	beq.n	800e2dc <pbuf_clone+0x4c>
 800e2ce:	4b06      	ldr	r3, [pc, #24]	; (800e2e8 <pbuf_clone+0x58>)
 800e2d0:	f240 5224 	movw	r2, #1316	; 0x524
 800e2d4:	4905      	ldr	r1, [pc, #20]	; (800e2ec <pbuf_clone+0x5c>)
 800e2d6:	4806      	ldr	r0, [pc, #24]	; (800e2f0 <pbuf_clone+0x60>)
 800e2d8:	f008 fe8c 	bl	8016ff4 <iprintf>
  return q;
 800e2dc:	68fb      	ldr	r3, [r7, #12]
}
 800e2de:	4618      	mov	r0, r3
 800e2e0:	3710      	adds	r7, #16
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bd80      	pop	{r7, pc}
 800e2e6:	bf00      	nop
 800e2e8:	08019e4c 	.word	0x08019e4c
 800e2ec:	0801a2c0 	.word	0x0801a2c0
 800e2f0:	08019eac 	.word	0x08019eac

0800e2f4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e2f8:	f008 ff0a 	bl	8017110 <rand>
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	b29b      	uxth	r3, r3
 800e300:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e304:	b29b      	uxth	r3, r3
 800e306:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e30a:	b29a      	uxth	r2, r3
 800e30c:	4b01      	ldr	r3, [pc, #4]	; (800e314 <tcp_init+0x20>)
 800e30e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e310:	bf00      	nop
 800e312:	bd80      	pop	{r7, pc}
 800e314:	20000142 	.word	0x20000142

0800e318 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b082      	sub	sp, #8
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	7d1b      	ldrb	r3, [r3, #20]
 800e324:	2b01      	cmp	r3, #1
 800e326:	d105      	bne.n	800e334 <tcp_free+0x1c>
 800e328:	4b06      	ldr	r3, [pc, #24]	; (800e344 <tcp_free+0x2c>)
 800e32a:	22d4      	movs	r2, #212	; 0xd4
 800e32c:	4906      	ldr	r1, [pc, #24]	; (800e348 <tcp_free+0x30>)
 800e32e:	4807      	ldr	r0, [pc, #28]	; (800e34c <tcp_free+0x34>)
 800e330:	f008 fe60 	bl	8016ff4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e334:	6879      	ldr	r1, [r7, #4]
 800e336:	2001      	movs	r0, #1
 800e338:	f7fe ff3c 	bl	800d1b4 <memp_free>
}
 800e33c:	bf00      	nop
 800e33e:	3708      	adds	r7, #8
 800e340:	46bd      	mov	sp, r7
 800e342:	bd80      	pop	{r7, pc}
 800e344:	0801a34c 	.word	0x0801a34c
 800e348:	0801a37c 	.word	0x0801a37c
 800e34c:	0801a390 	.word	0x0801a390

0800e350 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b082      	sub	sp, #8
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	7d1b      	ldrb	r3, [r3, #20]
 800e35c:	2b01      	cmp	r3, #1
 800e35e:	d105      	bne.n	800e36c <tcp_free_listen+0x1c>
 800e360:	4b06      	ldr	r3, [pc, #24]	; (800e37c <tcp_free_listen+0x2c>)
 800e362:	22df      	movs	r2, #223	; 0xdf
 800e364:	4906      	ldr	r1, [pc, #24]	; (800e380 <tcp_free_listen+0x30>)
 800e366:	4807      	ldr	r0, [pc, #28]	; (800e384 <tcp_free_listen+0x34>)
 800e368:	f008 fe44 	bl	8016ff4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e36c:	6879      	ldr	r1, [r7, #4]
 800e36e:	2002      	movs	r0, #2
 800e370:	f7fe ff20 	bl	800d1b4 <memp_free>
}
 800e374:	bf00      	nop
 800e376:	3708      	adds	r7, #8
 800e378:	46bd      	mov	sp, r7
 800e37a:	bd80      	pop	{r7, pc}
 800e37c:	0801a34c 	.word	0x0801a34c
 800e380:	0801a3b8 	.word	0x0801a3b8
 800e384:	0801a390 	.word	0x0801a390

0800e388 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e38c:	f001 f85c 	bl	800f448 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e390:	4b07      	ldr	r3, [pc, #28]	; (800e3b0 <tcp_tmr+0x28>)
 800e392:	781b      	ldrb	r3, [r3, #0]
 800e394:	3301      	adds	r3, #1
 800e396:	b2da      	uxtb	r2, r3
 800e398:	4b05      	ldr	r3, [pc, #20]	; (800e3b0 <tcp_tmr+0x28>)
 800e39a:	701a      	strb	r2, [r3, #0]
 800e39c:	4b04      	ldr	r3, [pc, #16]	; (800e3b0 <tcp_tmr+0x28>)
 800e39e:	781b      	ldrb	r3, [r3, #0]
 800e3a0:	f003 0301 	and.w	r3, r3, #1
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d001      	beq.n	800e3ac <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e3a8:	f000 fd0e 	bl	800edc8 <tcp_slowtmr>
  }
}
 800e3ac:	bf00      	nop
 800e3ae:	bd80      	pop	{r7, pc}
 800e3b0:	200016a5 	.word	0x200016a5

0800e3b4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b084      	sub	sp, #16
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
 800e3bc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d105      	bne.n	800e3d0 <tcp_remove_listener+0x1c>
 800e3c4:	4b0d      	ldr	r3, [pc, #52]	; (800e3fc <tcp_remove_listener+0x48>)
 800e3c6:	22ff      	movs	r2, #255	; 0xff
 800e3c8:	490d      	ldr	r1, [pc, #52]	; (800e400 <tcp_remove_listener+0x4c>)
 800e3ca:	480e      	ldr	r0, [pc, #56]	; (800e404 <tcp_remove_listener+0x50>)
 800e3cc:	f008 fe12 	bl	8016ff4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	60fb      	str	r3, [r7, #12]
 800e3d4:	e00a      	b.n	800e3ec <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3da:	683a      	ldr	r2, [r7, #0]
 800e3dc:	429a      	cmp	r2, r3
 800e3de:	d102      	bne.n	800e3e6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	68db      	ldr	r3, [r3, #12]
 800e3ea:	60fb      	str	r3, [r7, #12]
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d1f1      	bne.n	800e3d6 <tcp_remove_listener+0x22>
    }
  }
}
 800e3f2:	bf00      	nop
 800e3f4:	bf00      	nop
 800e3f6:	3710      	adds	r7, #16
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	bd80      	pop	{r7, pc}
 800e3fc:	0801a34c 	.word	0x0801a34c
 800e400:	0801a3d4 	.word	0x0801a3d4
 800e404:	0801a390 	.word	0x0801a390

0800e408 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b084      	sub	sp, #16
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d106      	bne.n	800e424 <tcp_listen_closed+0x1c>
 800e416:	4b14      	ldr	r3, [pc, #80]	; (800e468 <tcp_listen_closed+0x60>)
 800e418:	f240 1211 	movw	r2, #273	; 0x111
 800e41c:	4913      	ldr	r1, [pc, #76]	; (800e46c <tcp_listen_closed+0x64>)
 800e41e:	4814      	ldr	r0, [pc, #80]	; (800e470 <tcp_listen_closed+0x68>)
 800e420:	f008 fde8 	bl	8016ff4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	7d1b      	ldrb	r3, [r3, #20]
 800e428:	2b01      	cmp	r3, #1
 800e42a:	d006      	beq.n	800e43a <tcp_listen_closed+0x32>
 800e42c:	4b0e      	ldr	r3, [pc, #56]	; (800e468 <tcp_listen_closed+0x60>)
 800e42e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800e432:	4910      	ldr	r1, [pc, #64]	; (800e474 <tcp_listen_closed+0x6c>)
 800e434:	480e      	ldr	r0, [pc, #56]	; (800e470 <tcp_listen_closed+0x68>)
 800e436:	f008 fddd 	bl	8016ff4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e43a:	2301      	movs	r3, #1
 800e43c:	60fb      	str	r3, [r7, #12]
 800e43e:	e00b      	b.n	800e458 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e440:	4a0d      	ldr	r2, [pc, #52]	; (800e478 <tcp_listen_closed+0x70>)
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	6879      	ldr	r1, [r7, #4]
 800e44c:	4618      	mov	r0, r3
 800e44e:	f7ff ffb1 	bl	800e3b4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	3301      	adds	r3, #1
 800e456:	60fb      	str	r3, [r7, #12]
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	2b03      	cmp	r3, #3
 800e45c:	d9f0      	bls.n	800e440 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e45e:	bf00      	nop
 800e460:	bf00      	nop
 800e462:	3710      	adds	r7, #16
 800e464:	46bd      	mov	sp, r7
 800e466:	bd80      	pop	{r7, pc}
 800e468:	0801a34c 	.word	0x0801a34c
 800e46c:	0801a3fc 	.word	0x0801a3fc
 800e470:	0801a390 	.word	0x0801a390
 800e474:	0801a408 	.word	0x0801a408
 800e478:	0802032c 	.word	0x0802032c

0800e47c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e47c:	b5b0      	push	{r4, r5, r7, lr}
 800e47e:	b088      	sub	sp, #32
 800e480:	af04      	add	r7, sp, #16
 800e482:	6078      	str	r0, [r7, #4]
 800e484:	460b      	mov	r3, r1
 800e486:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d106      	bne.n	800e49c <tcp_close_shutdown+0x20>
 800e48e:	4b63      	ldr	r3, [pc, #396]	; (800e61c <tcp_close_shutdown+0x1a0>)
 800e490:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800e494:	4962      	ldr	r1, [pc, #392]	; (800e620 <tcp_close_shutdown+0x1a4>)
 800e496:	4863      	ldr	r0, [pc, #396]	; (800e624 <tcp_close_shutdown+0x1a8>)
 800e498:	f008 fdac 	bl	8016ff4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e49c:	78fb      	ldrb	r3, [r7, #3]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d066      	beq.n	800e570 <tcp_close_shutdown+0xf4>
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	7d1b      	ldrb	r3, [r3, #20]
 800e4a6:	2b04      	cmp	r3, #4
 800e4a8:	d003      	beq.n	800e4b2 <tcp_close_shutdown+0x36>
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	7d1b      	ldrb	r3, [r3, #20]
 800e4ae:	2b07      	cmp	r3, #7
 800e4b0:	d15e      	bne.n	800e570 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d104      	bne.n	800e4c4 <tcp_close_shutdown+0x48>
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e4be:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e4c2:	d055      	beq.n	800e570 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	8b5b      	ldrh	r3, [r3, #26]
 800e4c8:	f003 0310 	and.w	r3, r3, #16
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d106      	bne.n	800e4de <tcp_close_shutdown+0x62>
 800e4d0:	4b52      	ldr	r3, [pc, #328]	; (800e61c <tcp_close_shutdown+0x1a0>)
 800e4d2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800e4d6:	4954      	ldr	r1, [pc, #336]	; (800e628 <tcp_close_shutdown+0x1ac>)
 800e4d8:	4852      	ldr	r0, [pc, #328]	; (800e624 <tcp_close_shutdown+0x1a8>)
 800e4da:	f008 fd8b 	bl	8016ff4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e4e6:	687d      	ldr	r5, [r7, #4]
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	3304      	adds	r3, #4
 800e4ec:	687a      	ldr	r2, [r7, #4]
 800e4ee:	8ad2      	ldrh	r2, [r2, #22]
 800e4f0:	6879      	ldr	r1, [r7, #4]
 800e4f2:	8b09      	ldrh	r1, [r1, #24]
 800e4f4:	9102      	str	r1, [sp, #8]
 800e4f6:	9201      	str	r2, [sp, #4]
 800e4f8:	9300      	str	r3, [sp, #0]
 800e4fa:	462b      	mov	r3, r5
 800e4fc:	4622      	mov	r2, r4
 800e4fe:	4601      	mov	r1, r0
 800e500:	6878      	ldr	r0, [r7, #4]
 800e502:	f005 fd8b 	bl	801401c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e506:	6878      	ldr	r0, [r7, #4]
 800e508:	f001 fb6c 	bl	800fbe4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e50c:	4b47      	ldr	r3, [pc, #284]	; (800e62c <tcp_close_shutdown+0x1b0>)
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	687a      	ldr	r2, [r7, #4]
 800e512:	429a      	cmp	r2, r3
 800e514:	d105      	bne.n	800e522 <tcp_close_shutdown+0xa6>
 800e516:	4b45      	ldr	r3, [pc, #276]	; (800e62c <tcp_close_shutdown+0x1b0>)
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	68db      	ldr	r3, [r3, #12]
 800e51c:	4a43      	ldr	r2, [pc, #268]	; (800e62c <tcp_close_shutdown+0x1b0>)
 800e51e:	6013      	str	r3, [r2, #0]
 800e520:	e013      	b.n	800e54a <tcp_close_shutdown+0xce>
 800e522:	4b42      	ldr	r3, [pc, #264]	; (800e62c <tcp_close_shutdown+0x1b0>)
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	60fb      	str	r3, [r7, #12]
 800e528:	e00c      	b.n	800e544 <tcp_close_shutdown+0xc8>
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	68db      	ldr	r3, [r3, #12]
 800e52e:	687a      	ldr	r2, [r7, #4]
 800e530:	429a      	cmp	r2, r3
 800e532:	d104      	bne.n	800e53e <tcp_close_shutdown+0xc2>
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	68da      	ldr	r2, [r3, #12]
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	60da      	str	r2, [r3, #12]
 800e53c:	e005      	b.n	800e54a <tcp_close_shutdown+0xce>
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	68db      	ldr	r3, [r3, #12]
 800e542:	60fb      	str	r3, [r7, #12]
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d1ef      	bne.n	800e52a <tcp_close_shutdown+0xae>
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	2200      	movs	r2, #0
 800e54e:	60da      	str	r2, [r3, #12]
 800e550:	4b37      	ldr	r3, [pc, #220]	; (800e630 <tcp_close_shutdown+0x1b4>)
 800e552:	2201      	movs	r2, #1
 800e554:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e556:	4b37      	ldr	r3, [pc, #220]	; (800e634 <tcp_close_shutdown+0x1b8>)
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	687a      	ldr	r2, [r7, #4]
 800e55c:	429a      	cmp	r2, r3
 800e55e:	d102      	bne.n	800e566 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e560:	f004 f800 	bl	8012564 <tcp_trigger_input_pcb_close>
 800e564:	e002      	b.n	800e56c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800e566:	6878      	ldr	r0, [r7, #4]
 800e568:	f7ff fed6 	bl	800e318 <tcp_free>
      }
      return ERR_OK;
 800e56c:	2300      	movs	r3, #0
 800e56e:	e050      	b.n	800e612 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	7d1b      	ldrb	r3, [r3, #20]
 800e574:	2b02      	cmp	r3, #2
 800e576:	d03b      	beq.n	800e5f0 <tcp_close_shutdown+0x174>
 800e578:	2b02      	cmp	r3, #2
 800e57a:	dc44      	bgt.n	800e606 <tcp_close_shutdown+0x18a>
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d002      	beq.n	800e586 <tcp_close_shutdown+0x10a>
 800e580:	2b01      	cmp	r3, #1
 800e582:	d02a      	beq.n	800e5da <tcp_close_shutdown+0x15e>
 800e584:	e03f      	b.n	800e606 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	8adb      	ldrh	r3, [r3, #22]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d021      	beq.n	800e5d2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e58e:	4b2a      	ldr	r3, [pc, #168]	; (800e638 <tcp_close_shutdown+0x1bc>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	687a      	ldr	r2, [r7, #4]
 800e594:	429a      	cmp	r2, r3
 800e596:	d105      	bne.n	800e5a4 <tcp_close_shutdown+0x128>
 800e598:	4b27      	ldr	r3, [pc, #156]	; (800e638 <tcp_close_shutdown+0x1bc>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	68db      	ldr	r3, [r3, #12]
 800e59e:	4a26      	ldr	r2, [pc, #152]	; (800e638 <tcp_close_shutdown+0x1bc>)
 800e5a0:	6013      	str	r3, [r2, #0]
 800e5a2:	e013      	b.n	800e5cc <tcp_close_shutdown+0x150>
 800e5a4:	4b24      	ldr	r3, [pc, #144]	; (800e638 <tcp_close_shutdown+0x1bc>)
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	60bb      	str	r3, [r7, #8]
 800e5aa:	e00c      	b.n	800e5c6 <tcp_close_shutdown+0x14a>
 800e5ac:	68bb      	ldr	r3, [r7, #8]
 800e5ae:	68db      	ldr	r3, [r3, #12]
 800e5b0:	687a      	ldr	r2, [r7, #4]
 800e5b2:	429a      	cmp	r2, r3
 800e5b4:	d104      	bne.n	800e5c0 <tcp_close_shutdown+0x144>
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	68da      	ldr	r2, [r3, #12]
 800e5ba:	68bb      	ldr	r3, [r7, #8]
 800e5bc:	60da      	str	r2, [r3, #12]
 800e5be:	e005      	b.n	800e5cc <tcp_close_shutdown+0x150>
 800e5c0:	68bb      	ldr	r3, [r7, #8]
 800e5c2:	68db      	ldr	r3, [r3, #12]
 800e5c4:	60bb      	str	r3, [r7, #8]
 800e5c6:	68bb      	ldr	r3, [r7, #8]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d1ef      	bne.n	800e5ac <tcp_close_shutdown+0x130>
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e5d2:	6878      	ldr	r0, [r7, #4]
 800e5d4:	f7ff fea0 	bl	800e318 <tcp_free>
      break;
 800e5d8:	e01a      	b.n	800e610 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e5da:	6878      	ldr	r0, [r7, #4]
 800e5dc:	f7ff ff14 	bl	800e408 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e5e0:	6879      	ldr	r1, [r7, #4]
 800e5e2:	4816      	ldr	r0, [pc, #88]	; (800e63c <tcp_close_shutdown+0x1c0>)
 800e5e4:	f001 fb4e 	bl	800fc84 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e5e8:	6878      	ldr	r0, [r7, #4]
 800e5ea:	f7ff feb1 	bl	800e350 <tcp_free_listen>
      break;
 800e5ee:	e00f      	b.n	800e610 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e5f0:	6879      	ldr	r1, [r7, #4]
 800e5f2:	480e      	ldr	r0, [pc, #56]	; (800e62c <tcp_close_shutdown+0x1b0>)
 800e5f4:	f001 fb46 	bl	800fc84 <tcp_pcb_remove>
 800e5f8:	4b0d      	ldr	r3, [pc, #52]	; (800e630 <tcp_close_shutdown+0x1b4>)
 800e5fa:	2201      	movs	r2, #1
 800e5fc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e5fe:	6878      	ldr	r0, [r7, #4]
 800e600:	f7ff fe8a 	bl	800e318 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e604:	e004      	b.n	800e610 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e606:	6878      	ldr	r0, [r7, #4]
 800e608:	f000 f81a 	bl	800e640 <tcp_close_shutdown_fin>
 800e60c:	4603      	mov	r3, r0
 800e60e:	e000      	b.n	800e612 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800e610:	2300      	movs	r3, #0
}
 800e612:	4618      	mov	r0, r3
 800e614:	3710      	adds	r7, #16
 800e616:	46bd      	mov	sp, r7
 800e618:	bdb0      	pop	{r4, r5, r7, pc}
 800e61a:	bf00      	nop
 800e61c:	0801a34c 	.word	0x0801a34c
 800e620:	0801a420 	.word	0x0801a420
 800e624:	0801a390 	.word	0x0801a390
 800e628:	0801a440 	.word	0x0801a440
 800e62c:	20016dbc 	.word	0x20016dbc
 800e630:	20016db8 	.word	0x20016db8
 800e634:	20016dd0 	.word	0x20016dd0
 800e638:	20016dc8 	.word	0x20016dc8
 800e63c:	20016dc4 	.word	0x20016dc4

0800e640 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b084      	sub	sp, #16
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d106      	bne.n	800e65c <tcp_close_shutdown_fin+0x1c>
 800e64e:	4b2e      	ldr	r3, [pc, #184]	; (800e708 <tcp_close_shutdown_fin+0xc8>)
 800e650:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800e654:	492d      	ldr	r1, [pc, #180]	; (800e70c <tcp_close_shutdown_fin+0xcc>)
 800e656:	482e      	ldr	r0, [pc, #184]	; (800e710 <tcp_close_shutdown_fin+0xd0>)
 800e658:	f008 fccc 	bl	8016ff4 <iprintf>

  switch (pcb->state) {
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	7d1b      	ldrb	r3, [r3, #20]
 800e660:	2b07      	cmp	r3, #7
 800e662:	d020      	beq.n	800e6a6 <tcp_close_shutdown_fin+0x66>
 800e664:	2b07      	cmp	r3, #7
 800e666:	dc2b      	bgt.n	800e6c0 <tcp_close_shutdown_fin+0x80>
 800e668:	2b03      	cmp	r3, #3
 800e66a:	d002      	beq.n	800e672 <tcp_close_shutdown_fin+0x32>
 800e66c:	2b04      	cmp	r3, #4
 800e66e:	d00d      	beq.n	800e68c <tcp_close_shutdown_fin+0x4c>
 800e670:	e026      	b.n	800e6c0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e672:	6878      	ldr	r0, [r7, #4]
 800e674:	f004 fde0 	bl	8013238 <tcp_send_fin>
 800e678:	4603      	mov	r3, r0
 800e67a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e67c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d11f      	bne.n	800e6c4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2205      	movs	r2, #5
 800e688:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e68a:	e01b      	b.n	800e6c4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e68c:	6878      	ldr	r0, [r7, #4]
 800e68e:	f004 fdd3 	bl	8013238 <tcp_send_fin>
 800e692:	4603      	mov	r3, r0
 800e694:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d114      	bne.n	800e6c8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	2205      	movs	r2, #5
 800e6a2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e6a4:	e010      	b.n	800e6c8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	f004 fdc6 	bl	8013238 <tcp_send_fin>
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e6b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d109      	bne.n	800e6cc <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	2209      	movs	r2, #9
 800e6bc:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e6be:	e005      	b.n	800e6cc <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	e01c      	b.n	800e6fe <tcp_close_shutdown_fin+0xbe>
      break;
 800e6c4:	bf00      	nop
 800e6c6:	e002      	b.n	800e6ce <tcp_close_shutdown_fin+0x8e>
      break;
 800e6c8:	bf00      	nop
 800e6ca:	e000      	b.n	800e6ce <tcp_close_shutdown_fin+0x8e>
      break;
 800e6cc:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e6ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d103      	bne.n	800e6de <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e6d6:	6878      	ldr	r0, [r7, #4]
 800e6d8:	f004 feec 	bl	80134b4 <tcp_output>
 800e6dc:	e00d      	b.n	800e6fa <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800e6de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e6e6:	d108      	bne.n	800e6fa <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	8b5b      	ldrh	r3, [r3, #26]
 800e6ec:	f043 0308 	orr.w	r3, r3, #8
 800e6f0:	b29a      	uxth	r2, r3
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	e001      	b.n	800e6fe <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800e6fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e6fe:	4618      	mov	r0, r3
 800e700:	3710      	adds	r7, #16
 800e702:	46bd      	mov	sp, r7
 800e704:	bd80      	pop	{r7, pc}
 800e706:	bf00      	nop
 800e708:	0801a34c 	.word	0x0801a34c
 800e70c:	0801a3fc 	.word	0x0801a3fc
 800e710:	0801a390 	.word	0x0801a390

0800e714 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b082      	sub	sp, #8
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d109      	bne.n	800e736 <tcp_close+0x22>
 800e722:	4b0f      	ldr	r3, [pc, #60]	; (800e760 <tcp_close+0x4c>)
 800e724:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800e728:	490e      	ldr	r1, [pc, #56]	; (800e764 <tcp_close+0x50>)
 800e72a:	480f      	ldr	r0, [pc, #60]	; (800e768 <tcp_close+0x54>)
 800e72c:	f008 fc62 	bl	8016ff4 <iprintf>
 800e730:	f06f 030f 	mvn.w	r3, #15
 800e734:	e00f      	b.n	800e756 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	7d1b      	ldrb	r3, [r3, #20]
 800e73a:	2b01      	cmp	r3, #1
 800e73c:	d006      	beq.n	800e74c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	8b5b      	ldrh	r3, [r3, #26]
 800e742:	f043 0310 	orr.w	r3, r3, #16
 800e746:	b29a      	uxth	r2, r3
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e74c:	2101      	movs	r1, #1
 800e74e:	6878      	ldr	r0, [r7, #4]
 800e750:	f7ff fe94 	bl	800e47c <tcp_close_shutdown>
 800e754:	4603      	mov	r3, r0
}
 800e756:	4618      	mov	r0, r3
 800e758:	3708      	adds	r7, #8
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}
 800e75e:	bf00      	nop
 800e760:	0801a34c 	.word	0x0801a34c
 800e764:	0801a45c 	.word	0x0801a45c
 800e768:	0801a390 	.word	0x0801a390

0800e76c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b08e      	sub	sp, #56	; 0x38
 800e770:	af04      	add	r7, sp, #16
 800e772:	6078      	str	r0, [r7, #4]
 800e774:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d107      	bne.n	800e78c <tcp_abandon+0x20>
 800e77c:	4b52      	ldr	r3, [pc, #328]	; (800e8c8 <tcp_abandon+0x15c>)
 800e77e:	f240 223d 	movw	r2, #573	; 0x23d
 800e782:	4952      	ldr	r1, [pc, #328]	; (800e8cc <tcp_abandon+0x160>)
 800e784:	4852      	ldr	r0, [pc, #328]	; (800e8d0 <tcp_abandon+0x164>)
 800e786:	f008 fc35 	bl	8016ff4 <iprintf>
 800e78a:	e099      	b.n	800e8c0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	7d1b      	ldrb	r3, [r3, #20]
 800e790:	2b01      	cmp	r3, #1
 800e792:	d106      	bne.n	800e7a2 <tcp_abandon+0x36>
 800e794:	4b4c      	ldr	r3, [pc, #304]	; (800e8c8 <tcp_abandon+0x15c>)
 800e796:	f44f 7210 	mov.w	r2, #576	; 0x240
 800e79a:	494e      	ldr	r1, [pc, #312]	; (800e8d4 <tcp_abandon+0x168>)
 800e79c:	484c      	ldr	r0, [pc, #304]	; (800e8d0 <tcp_abandon+0x164>)
 800e79e:	f008 fc29 	bl	8016ff4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	7d1b      	ldrb	r3, [r3, #20]
 800e7a6:	2b0a      	cmp	r3, #10
 800e7a8:	d107      	bne.n	800e7ba <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e7aa:	6879      	ldr	r1, [r7, #4]
 800e7ac:	484a      	ldr	r0, [pc, #296]	; (800e8d8 <tcp_abandon+0x16c>)
 800e7ae:	f001 fa69 	bl	800fc84 <tcp_pcb_remove>
    tcp_free(pcb);
 800e7b2:	6878      	ldr	r0, [r7, #4]
 800e7b4:	f7ff fdb0 	bl	800e318 <tcp_free>
 800e7b8:	e082      	b.n	800e8c0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800e7be:	2300      	movs	r3, #0
 800e7c0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e7c6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7cc:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e7d4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	691b      	ldr	r3, [r3, #16]
 800e7da:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	7d1b      	ldrb	r3, [r3, #20]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d126      	bne.n	800e832 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	8adb      	ldrh	r3, [r3, #22]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d02e      	beq.n	800e84a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e7ec:	4b3b      	ldr	r3, [pc, #236]	; (800e8dc <tcp_abandon+0x170>)
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	687a      	ldr	r2, [r7, #4]
 800e7f2:	429a      	cmp	r2, r3
 800e7f4:	d105      	bne.n	800e802 <tcp_abandon+0x96>
 800e7f6:	4b39      	ldr	r3, [pc, #228]	; (800e8dc <tcp_abandon+0x170>)
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	68db      	ldr	r3, [r3, #12]
 800e7fc:	4a37      	ldr	r2, [pc, #220]	; (800e8dc <tcp_abandon+0x170>)
 800e7fe:	6013      	str	r3, [r2, #0]
 800e800:	e013      	b.n	800e82a <tcp_abandon+0xbe>
 800e802:	4b36      	ldr	r3, [pc, #216]	; (800e8dc <tcp_abandon+0x170>)
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	61fb      	str	r3, [r7, #28]
 800e808:	e00c      	b.n	800e824 <tcp_abandon+0xb8>
 800e80a:	69fb      	ldr	r3, [r7, #28]
 800e80c:	68db      	ldr	r3, [r3, #12]
 800e80e:	687a      	ldr	r2, [r7, #4]
 800e810:	429a      	cmp	r2, r3
 800e812:	d104      	bne.n	800e81e <tcp_abandon+0xb2>
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	68da      	ldr	r2, [r3, #12]
 800e818:	69fb      	ldr	r3, [r7, #28]
 800e81a:	60da      	str	r2, [r3, #12]
 800e81c:	e005      	b.n	800e82a <tcp_abandon+0xbe>
 800e81e:	69fb      	ldr	r3, [r7, #28]
 800e820:	68db      	ldr	r3, [r3, #12]
 800e822:	61fb      	str	r3, [r7, #28]
 800e824:	69fb      	ldr	r3, [r7, #28]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d1ef      	bne.n	800e80a <tcp_abandon+0x9e>
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	2200      	movs	r2, #0
 800e82e:	60da      	str	r2, [r3, #12]
 800e830:	e00b      	b.n	800e84a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e832:	683b      	ldr	r3, [r7, #0]
 800e834:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	8adb      	ldrh	r3, [r3, #22]
 800e83a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e83c:	6879      	ldr	r1, [r7, #4]
 800e83e:	4828      	ldr	r0, [pc, #160]	; (800e8e0 <tcp_abandon+0x174>)
 800e840:	f001 fa20 	bl	800fc84 <tcp_pcb_remove>
 800e844:	4b27      	ldr	r3, [pc, #156]	; (800e8e4 <tcp_abandon+0x178>)
 800e846:	2201      	movs	r2, #1
 800e848:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d004      	beq.n	800e85c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e856:	4618      	mov	r0, r3
 800e858:	f000 fed6 	bl	800f608 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e860:	2b00      	cmp	r3, #0
 800e862:	d004      	beq.n	800e86e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e868:	4618      	mov	r0, r3
 800e86a:	f000 fecd 	bl	800f608 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e872:	2b00      	cmp	r3, #0
 800e874:	d004      	beq.n	800e880 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e87a:	4618      	mov	r0, r3
 800e87c:	f000 fec4 	bl	800f608 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e882:	2b00      	cmp	r3, #0
 800e884:	d00e      	beq.n	800e8a4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e886:	6879      	ldr	r1, [r7, #4]
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	3304      	adds	r3, #4
 800e88c:	687a      	ldr	r2, [r7, #4]
 800e88e:	8b12      	ldrh	r2, [r2, #24]
 800e890:	9202      	str	r2, [sp, #8]
 800e892:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e894:	9201      	str	r2, [sp, #4]
 800e896:	9300      	str	r3, [sp, #0]
 800e898:	460b      	mov	r3, r1
 800e89a:	697a      	ldr	r2, [r7, #20]
 800e89c:	69b9      	ldr	r1, [r7, #24]
 800e89e:	6878      	ldr	r0, [r7, #4]
 800e8a0:	f005 fbbc 	bl	801401c <tcp_rst>
    }
    last_state = pcb->state;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	7d1b      	ldrb	r3, [r3, #20]
 800e8a8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e8aa:	6878      	ldr	r0, [r7, #4]
 800e8ac:	f7ff fd34 	bl	800e318 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e8b0:	693b      	ldr	r3, [r7, #16]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d004      	beq.n	800e8c0 <tcp_abandon+0x154>
 800e8b6:	693b      	ldr	r3, [r7, #16]
 800e8b8:	f06f 010c 	mvn.w	r1, #12
 800e8bc:	68f8      	ldr	r0, [r7, #12]
 800e8be:	4798      	blx	r3
  }
}
 800e8c0:	3728      	adds	r7, #40	; 0x28
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	bd80      	pop	{r7, pc}
 800e8c6:	bf00      	nop
 800e8c8:	0801a34c 	.word	0x0801a34c
 800e8cc:	0801a490 	.word	0x0801a490
 800e8d0:	0801a390 	.word	0x0801a390
 800e8d4:	0801a4ac 	.word	0x0801a4ac
 800e8d8:	20016dcc 	.word	0x20016dcc
 800e8dc:	20016dc8 	.word	0x20016dc8
 800e8e0:	20016dbc 	.word	0x20016dbc
 800e8e4:	20016db8 	.word	0x20016db8

0800e8e8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b082      	sub	sp, #8
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e8f0:	2101      	movs	r1, #1
 800e8f2:	6878      	ldr	r0, [r7, #4]
 800e8f4:	f7ff ff3a 	bl	800e76c <tcp_abandon>
}
 800e8f8:	bf00      	nop
 800e8fa:	3708      	adds	r7, #8
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	bd80      	pop	{r7, pc}

0800e900 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e900:	b580      	push	{r7, lr}
 800e902:	b088      	sub	sp, #32
 800e904:	af00      	add	r7, sp, #0
 800e906:	60f8      	str	r0, [r7, #12]
 800e908:	60b9      	str	r1, [r7, #8]
 800e90a:	4613      	mov	r3, r2
 800e90c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800e90e:	2304      	movs	r3, #4
 800e910:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e912:	68bb      	ldr	r3, [r7, #8]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d101      	bne.n	800e91c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800e918:	4b3e      	ldr	r3, [pc, #248]	; (800ea14 <tcp_bind+0x114>)
 800e91a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d109      	bne.n	800e936 <tcp_bind+0x36>
 800e922:	4b3d      	ldr	r3, [pc, #244]	; (800ea18 <tcp_bind+0x118>)
 800e924:	f240 22a9 	movw	r2, #681	; 0x2a9
 800e928:	493c      	ldr	r1, [pc, #240]	; (800ea1c <tcp_bind+0x11c>)
 800e92a:	483d      	ldr	r0, [pc, #244]	; (800ea20 <tcp_bind+0x120>)
 800e92c:	f008 fb62 	bl	8016ff4 <iprintf>
 800e930:	f06f 030f 	mvn.w	r3, #15
 800e934:	e06a      	b.n	800ea0c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	7d1b      	ldrb	r3, [r3, #20]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d009      	beq.n	800e952 <tcp_bind+0x52>
 800e93e:	4b36      	ldr	r3, [pc, #216]	; (800ea18 <tcp_bind+0x118>)
 800e940:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e944:	4937      	ldr	r1, [pc, #220]	; (800ea24 <tcp_bind+0x124>)
 800e946:	4836      	ldr	r0, [pc, #216]	; (800ea20 <tcp_bind+0x120>)
 800e948:	f008 fb54 	bl	8016ff4 <iprintf>
 800e94c:	f06f 0305 	mvn.w	r3, #5
 800e950:	e05c      	b.n	800ea0c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800e952:	88fb      	ldrh	r3, [r7, #6]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d109      	bne.n	800e96c <tcp_bind+0x6c>
    port = tcp_new_port();
 800e958:	f000 f9f0 	bl	800ed3c <tcp_new_port>
 800e95c:	4603      	mov	r3, r0
 800e95e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800e960:	88fb      	ldrh	r3, [r7, #6]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d135      	bne.n	800e9d2 <tcp_bind+0xd2>
      return ERR_BUF;
 800e966:	f06f 0301 	mvn.w	r3, #1
 800e96a:	e04f      	b.n	800ea0c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800e96c:	2300      	movs	r3, #0
 800e96e:	61fb      	str	r3, [r7, #28]
 800e970:	e02b      	b.n	800e9ca <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e972:	4a2d      	ldr	r2, [pc, #180]	; (800ea28 <tcp_bind+0x128>)
 800e974:	69fb      	ldr	r3, [r7, #28]
 800e976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	61bb      	str	r3, [r7, #24]
 800e97e:	e01e      	b.n	800e9be <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800e980:	69bb      	ldr	r3, [r7, #24]
 800e982:	8adb      	ldrh	r3, [r3, #22]
 800e984:	88fa      	ldrh	r2, [r7, #6]
 800e986:	429a      	cmp	r2, r3
 800e988:	d116      	bne.n	800e9b8 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800e98a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d010      	beq.n	800e9b2 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800e990:	69bb      	ldr	r3, [r7, #24]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d00c      	beq.n	800e9b2 <tcp_bind+0xb2>
 800e998:	68bb      	ldr	r3, [r7, #8]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d009      	beq.n	800e9b2 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800e99e:	68bb      	ldr	r3, [r7, #8]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d005      	beq.n	800e9b2 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800e9a6:	69bb      	ldr	r3, [r7, #24]
 800e9a8:	681a      	ldr	r2, [r3, #0]
 800e9aa:	68bb      	ldr	r3, [r7, #8]
 800e9ac:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e9ae:	429a      	cmp	r2, r3
 800e9b0:	d102      	bne.n	800e9b8 <tcp_bind+0xb8>
              return ERR_USE;
 800e9b2:	f06f 0307 	mvn.w	r3, #7
 800e9b6:	e029      	b.n	800ea0c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e9b8:	69bb      	ldr	r3, [r7, #24]
 800e9ba:	68db      	ldr	r3, [r3, #12]
 800e9bc:	61bb      	str	r3, [r7, #24]
 800e9be:	69bb      	ldr	r3, [r7, #24]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d1dd      	bne.n	800e980 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800e9c4:	69fb      	ldr	r3, [r7, #28]
 800e9c6:	3301      	adds	r3, #1
 800e9c8:	61fb      	str	r3, [r7, #28]
 800e9ca:	69fa      	ldr	r2, [r7, #28]
 800e9cc:	697b      	ldr	r3, [r7, #20]
 800e9ce:	429a      	cmp	r2, r3
 800e9d0:	dbcf      	blt.n	800e972 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800e9d2:	68bb      	ldr	r3, [r7, #8]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d00c      	beq.n	800e9f2 <tcp_bind+0xf2>
 800e9d8:	68bb      	ldr	r3, [r7, #8]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d008      	beq.n	800e9f2 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800e9e0:	68bb      	ldr	r3, [r7, #8]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d002      	beq.n	800e9ec <tcp_bind+0xec>
 800e9e6:	68bb      	ldr	r3, [r7, #8]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	e000      	b.n	800e9ee <tcp_bind+0xee>
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	68fa      	ldr	r2, [r7, #12]
 800e9f0:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	88fa      	ldrh	r2, [r7, #6]
 800e9f6:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800e9f8:	4b0c      	ldr	r3, [pc, #48]	; (800ea2c <tcp_bind+0x12c>)
 800e9fa:	681a      	ldr	r2, [r3, #0]
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	60da      	str	r2, [r3, #12]
 800ea00:	4a0a      	ldr	r2, [pc, #40]	; (800ea2c <tcp_bind+0x12c>)
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	6013      	str	r3, [r2, #0]
 800ea06:	f005 fccb 	bl	80143a0 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800ea0a:	2300      	movs	r3, #0
}
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	3720      	adds	r7, #32
 800ea10:	46bd      	mov	sp, r7
 800ea12:	bd80      	pop	{r7, pc}
 800ea14:	08020354 	.word	0x08020354
 800ea18:	0801a34c 	.word	0x0801a34c
 800ea1c:	0801a4e0 	.word	0x0801a4e0
 800ea20:	0801a390 	.word	0x0801a390
 800ea24:	0801a4f8 	.word	0x0801a4f8
 800ea28:	0802032c 	.word	0x0802032c
 800ea2c:	20016dc8 	.word	0x20016dc8

0800ea30 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b084      	sub	sp, #16
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	60f8      	str	r0, [r7, #12]
 800ea38:	60b9      	str	r1, [r7, #8]
 800ea3a:	4613      	mov	r3, r2
 800ea3c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800ea3e:	68bb      	ldr	r3, [r7, #8]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d106      	bne.n	800ea52 <tcp_accept_null+0x22>
 800ea44:	4b07      	ldr	r3, [pc, #28]	; (800ea64 <tcp_accept_null+0x34>)
 800ea46:	f240 320f 	movw	r2, #783	; 0x30f
 800ea4a:	4907      	ldr	r1, [pc, #28]	; (800ea68 <tcp_accept_null+0x38>)
 800ea4c:	4807      	ldr	r0, [pc, #28]	; (800ea6c <tcp_accept_null+0x3c>)
 800ea4e:	f008 fad1 	bl	8016ff4 <iprintf>

  tcp_abort(pcb);
 800ea52:	68b8      	ldr	r0, [r7, #8]
 800ea54:	f7ff ff48 	bl	800e8e8 <tcp_abort>

  return ERR_ABRT;
 800ea58:	f06f 030c 	mvn.w	r3, #12
}
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	3710      	adds	r7, #16
 800ea60:	46bd      	mov	sp, r7
 800ea62:	bd80      	pop	{r7, pc}
 800ea64:	0801a34c 	.word	0x0801a34c
 800ea68:	0801a520 	.word	0x0801a520
 800ea6c:	0801a390 	.word	0x0801a390

0800ea70 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b082      	sub	sp, #8
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
 800ea78:	460b      	mov	r3, r1
 800ea7a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800ea7c:	78fb      	ldrb	r3, [r7, #3]
 800ea7e:	2200      	movs	r2, #0
 800ea80:	4619      	mov	r1, r3
 800ea82:	6878      	ldr	r0, [r7, #4]
 800ea84:	f000 f806 	bl	800ea94 <tcp_listen_with_backlog_and_err>
 800ea88:	4603      	mov	r3, r0
}
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	3708      	adds	r7, #8
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	bd80      	pop	{r7, pc}
	...

0800ea94 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b088      	sub	sp, #32
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	60f8      	str	r0, [r7, #12]
 800ea9c:	460b      	mov	r3, r1
 800ea9e:	607a      	str	r2, [r7, #4]
 800eaa0:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d109      	bne.n	800eac0 <tcp_listen_with_backlog_and_err+0x2c>
 800eaac:	4b47      	ldr	r3, [pc, #284]	; (800ebcc <tcp_listen_with_backlog_and_err+0x138>)
 800eaae:	f240 3259 	movw	r2, #857	; 0x359
 800eab2:	4947      	ldr	r1, [pc, #284]	; (800ebd0 <tcp_listen_with_backlog_and_err+0x13c>)
 800eab4:	4847      	ldr	r0, [pc, #284]	; (800ebd4 <tcp_listen_with_backlog_and_err+0x140>)
 800eab6:	f008 fa9d 	bl	8016ff4 <iprintf>
 800eaba:	23f0      	movs	r3, #240	; 0xf0
 800eabc:	76fb      	strb	r3, [r7, #27]
 800eabe:	e079      	b.n	800ebb4 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	7d1b      	ldrb	r3, [r3, #20]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d009      	beq.n	800eadc <tcp_listen_with_backlog_and_err+0x48>
 800eac8:	4b40      	ldr	r3, [pc, #256]	; (800ebcc <tcp_listen_with_backlog_and_err+0x138>)
 800eaca:	f240 325a 	movw	r2, #858	; 0x35a
 800eace:	4942      	ldr	r1, [pc, #264]	; (800ebd8 <tcp_listen_with_backlog_and_err+0x144>)
 800ead0:	4840      	ldr	r0, [pc, #256]	; (800ebd4 <tcp_listen_with_backlog_and_err+0x140>)
 800ead2:	f008 fa8f 	bl	8016ff4 <iprintf>
 800ead6:	23f1      	movs	r3, #241	; 0xf1
 800ead8:	76fb      	strb	r3, [r7, #27]
 800eada:	e06b      	b.n	800ebb4 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	7d1b      	ldrb	r3, [r3, #20]
 800eae0:	2b01      	cmp	r3, #1
 800eae2:	d104      	bne.n	800eaee <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800eae8:	23f7      	movs	r3, #247	; 0xf7
 800eaea:	76fb      	strb	r3, [r7, #27]
    goto done;
 800eaec:	e062      	b.n	800ebb4 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800eaee:	2002      	movs	r0, #2
 800eaf0:	f7fe fb14 	bl	800d11c <memp_malloc>
 800eaf4:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800eaf6:	69fb      	ldr	r3, [r7, #28]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d102      	bne.n	800eb02 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800eafc:	23ff      	movs	r3, #255	; 0xff
 800eafe:	76fb      	strb	r3, [r7, #27]
    goto done;
 800eb00:	e058      	b.n	800ebb4 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	691a      	ldr	r2, [r3, #16]
 800eb06:	69fb      	ldr	r3, [r7, #28]
 800eb08:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	8ada      	ldrh	r2, [r3, #22]
 800eb0e:	69fb      	ldr	r3, [r7, #28]
 800eb10:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800eb12:	69fb      	ldr	r3, [r7, #28]
 800eb14:	2201      	movs	r2, #1
 800eb16:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	7d5a      	ldrb	r2, [r3, #21]
 800eb1c:	69fb      	ldr	r3, [r7, #28]
 800eb1e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	7a5a      	ldrb	r2, [r3, #9]
 800eb24:	69fb      	ldr	r3, [r7, #28]
 800eb26:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800eb28:	69fb      	ldr	r3, [r7, #28]
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	7ada      	ldrb	r2, [r3, #11]
 800eb32:	69fb      	ldr	r3, [r7, #28]
 800eb34:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	7a9a      	ldrb	r2, [r3, #10]
 800eb3a:	69fb      	ldr	r3, [r7, #28]
 800eb3c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	681a      	ldr	r2, [r3, #0]
 800eb42:	69fb      	ldr	r3, [r7, #28]
 800eb44:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	8adb      	ldrh	r3, [r3, #22]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d021      	beq.n	800eb92 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800eb4e:	4b23      	ldr	r3, [pc, #140]	; (800ebdc <tcp_listen_with_backlog_and_err+0x148>)
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	68fa      	ldr	r2, [r7, #12]
 800eb54:	429a      	cmp	r2, r3
 800eb56:	d105      	bne.n	800eb64 <tcp_listen_with_backlog_and_err+0xd0>
 800eb58:	4b20      	ldr	r3, [pc, #128]	; (800ebdc <tcp_listen_with_backlog_and_err+0x148>)
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	68db      	ldr	r3, [r3, #12]
 800eb5e:	4a1f      	ldr	r2, [pc, #124]	; (800ebdc <tcp_listen_with_backlog_and_err+0x148>)
 800eb60:	6013      	str	r3, [r2, #0]
 800eb62:	e013      	b.n	800eb8c <tcp_listen_with_backlog_and_err+0xf8>
 800eb64:	4b1d      	ldr	r3, [pc, #116]	; (800ebdc <tcp_listen_with_backlog_and_err+0x148>)
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	617b      	str	r3, [r7, #20]
 800eb6a:	e00c      	b.n	800eb86 <tcp_listen_with_backlog_and_err+0xf2>
 800eb6c:	697b      	ldr	r3, [r7, #20]
 800eb6e:	68db      	ldr	r3, [r3, #12]
 800eb70:	68fa      	ldr	r2, [r7, #12]
 800eb72:	429a      	cmp	r2, r3
 800eb74:	d104      	bne.n	800eb80 <tcp_listen_with_backlog_and_err+0xec>
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	68da      	ldr	r2, [r3, #12]
 800eb7a:	697b      	ldr	r3, [r7, #20]
 800eb7c:	60da      	str	r2, [r3, #12]
 800eb7e:	e005      	b.n	800eb8c <tcp_listen_with_backlog_and_err+0xf8>
 800eb80:	697b      	ldr	r3, [r7, #20]
 800eb82:	68db      	ldr	r3, [r3, #12]
 800eb84:	617b      	str	r3, [r7, #20]
 800eb86:	697b      	ldr	r3, [r7, #20]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d1ef      	bne.n	800eb6c <tcp_listen_with_backlog_and_err+0xd8>
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	2200      	movs	r2, #0
 800eb90:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800eb92:	68f8      	ldr	r0, [r7, #12]
 800eb94:	f7ff fbc0 	bl	800e318 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800eb98:	69fb      	ldr	r3, [r7, #28]
 800eb9a:	4a11      	ldr	r2, [pc, #68]	; (800ebe0 <tcp_listen_with_backlog_and_err+0x14c>)
 800eb9c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800eb9e:	4b11      	ldr	r3, [pc, #68]	; (800ebe4 <tcp_listen_with_backlog_and_err+0x150>)
 800eba0:	681a      	ldr	r2, [r3, #0]
 800eba2:	69fb      	ldr	r3, [r7, #28]
 800eba4:	60da      	str	r2, [r3, #12]
 800eba6:	4a0f      	ldr	r2, [pc, #60]	; (800ebe4 <tcp_listen_with_backlog_and_err+0x150>)
 800eba8:	69fb      	ldr	r3, [r7, #28]
 800ebaa:	6013      	str	r3, [r2, #0]
 800ebac:	f005 fbf8 	bl	80143a0 <tcp_timer_needed>
  res = ERR_OK;
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d002      	beq.n	800ebc0 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	7efa      	ldrb	r2, [r7, #27]
 800ebbe:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800ebc0:	69fb      	ldr	r3, [r7, #28]
}
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	3720      	adds	r7, #32
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	bd80      	pop	{r7, pc}
 800ebca:	bf00      	nop
 800ebcc:	0801a34c 	.word	0x0801a34c
 800ebd0:	0801a540 	.word	0x0801a540
 800ebd4:	0801a390 	.word	0x0801a390
 800ebd8:	0801a570 	.word	0x0801a570
 800ebdc:	20016dc8 	.word	0x20016dc8
 800ebe0:	0800ea31 	.word	0x0800ea31
 800ebe4:	20016dc4 	.word	0x20016dc4

0800ebe8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b084      	sub	sp, #16
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d106      	bne.n	800ec04 <tcp_update_rcv_ann_wnd+0x1c>
 800ebf6:	4b25      	ldr	r3, [pc, #148]	; (800ec8c <tcp_update_rcv_ann_wnd+0xa4>)
 800ebf8:	f240 32a6 	movw	r2, #934	; 0x3a6
 800ebfc:	4924      	ldr	r1, [pc, #144]	; (800ec90 <tcp_update_rcv_ann_wnd+0xa8>)
 800ebfe:	4825      	ldr	r0, [pc, #148]	; (800ec94 <tcp_update_rcv_ann_wnd+0xac>)
 800ec00:	f008 f9f8 	bl	8016ff4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec08:	687a      	ldr	r2, [r7, #4]
 800ec0a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800ec0c:	4413      	add	r3, r2
 800ec0e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec14:	687a      	ldr	r2, [r7, #4]
 800ec16:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800ec18:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800ec1c:	bf28      	it	cs
 800ec1e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800ec22:	b292      	uxth	r2, r2
 800ec24:	4413      	add	r3, r2
 800ec26:	68fa      	ldr	r2, [r7, #12]
 800ec28:	1ad3      	subs	r3, r2, r3
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	db08      	blt.n	800ec40 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec3a:	68fa      	ldr	r2, [r7, #12]
 800ec3c:	1ad3      	subs	r3, r2, r3
 800ec3e:	e020      	b.n	800ec82 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec48:	1ad3      	subs	r3, r2, r3
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	dd03      	ble.n	800ec56 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	2200      	movs	r2, #0
 800ec52:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ec54:	e014      	b.n	800ec80 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec5e:	1ad3      	subs	r3, r2, r3
 800ec60:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ec62:	68bb      	ldr	r3, [r7, #8]
 800ec64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec68:	d306      	bcc.n	800ec78 <tcp_update_rcv_ann_wnd+0x90>
 800ec6a:	4b08      	ldr	r3, [pc, #32]	; (800ec8c <tcp_update_rcv_ann_wnd+0xa4>)
 800ec6c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800ec70:	4909      	ldr	r1, [pc, #36]	; (800ec98 <tcp_update_rcv_ann_wnd+0xb0>)
 800ec72:	4808      	ldr	r0, [pc, #32]	; (800ec94 <tcp_update_rcv_ann_wnd+0xac>)
 800ec74:	f008 f9be 	bl	8016ff4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ec78:	68bb      	ldr	r3, [r7, #8]
 800ec7a:	b29a      	uxth	r2, r3
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800ec80:	2300      	movs	r3, #0
  }
}
 800ec82:	4618      	mov	r0, r3
 800ec84:	3710      	adds	r7, #16
 800ec86:	46bd      	mov	sp, r7
 800ec88:	bd80      	pop	{r7, pc}
 800ec8a:	bf00      	nop
 800ec8c:	0801a34c 	.word	0x0801a34c
 800ec90:	0801a5a8 	.word	0x0801a5a8
 800ec94:	0801a390 	.word	0x0801a390
 800ec98:	0801a5cc 	.word	0x0801a5cc

0800ec9c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b084      	sub	sp, #16
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]
 800eca4:	460b      	mov	r3, r1
 800eca6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d107      	bne.n	800ecbe <tcp_recved+0x22>
 800ecae:	4b1f      	ldr	r3, [pc, #124]	; (800ed2c <tcp_recved+0x90>)
 800ecb0:	f240 32cf 	movw	r2, #975	; 0x3cf
 800ecb4:	491e      	ldr	r1, [pc, #120]	; (800ed30 <tcp_recved+0x94>)
 800ecb6:	481f      	ldr	r0, [pc, #124]	; (800ed34 <tcp_recved+0x98>)
 800ecb8:	f008 f99c 	bl	8016ff4 <iprintf>
 800ecbc:	e032      	b.n	800ed24 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	7d1b      	ldrb	r3, [r3, #20]
 800ecc2:	2b01      	cmp	r3, #1
 800ecc4:	d106      	bne.n	800ecd4 <tcp_recved+0x38>
 800ecc6:	4b19      	ldr	r3, [pc, #100]	; (800ed2c <tcp_recved+0x90>)
 800ecc8:	f240 32d2 	movw	r2, #978	; 0x3d2
 800eccc:	491a      	ldr	r1, [pc, #104]	; (800ed38 <tcp_recved+0x9c>)
 800ecce:	4819      	ldr	r0, [pc, #100]	; (800ed34 <tcp_recved+0x98>)
 800ecd0:	f008 f990 	bl	8016ff4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ecd8:	887b      	ldrh	r3, [r7, #2]
 800ecda:	4413      	add	r3, r2
 800ecdc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ecde:	89fb      	ldrh	r3, [r7, #14]
 800ece0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ece4:	d804      	bhi.n	800ecf0 <tcp_recved+0x54>
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ecea:	89fa      	ldrh	r2, [r7, #14]
 800ecec:	429a      	cmp	r2, r3
 800ecee:	d204      	bcs.n	800ecfa <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ecf6:	851a      	strh	r2, [r3, #40]	; 0x28
 800ecf8:	e002      	b.n	800ed00 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	89fa      	ldrh	r2, [r7, #14]
 800ecfe:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ed00:	6878      	ldr	r0, [r7, #4]
 800ed02:	f7ff ff71 	bl	800ebe8 <tcp_update_rcv_ann_wnd>
 800ed06:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ed08:	68bb      	ldr	r3, [r7, #8]
 800ed0a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ed0e:	d309      	bcc.n	800ed24 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	8b5b      	ldrh	r3, [r3, #26]
 800ed14:	f043 0302 	orr.w	r3, r3, #2
 800ed18:	b29a      	uxth	r2, r3
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ed1e:	6878      	ldr	r0, [r7, #4]
 800ed20:	f004 fbc8 	bl	80134b4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800ed24:	3710      	adds	r7, #16
 800ed26:	46bd      	mov	sp, r7
 800ed28:	bd80      	pop	{r7, pc}
 800ed2a:	bf00      	nop
 800ed2c:	0801a34c 	.word	0x0801a34c
 800ed30:	0801a5e8 	.word	0x0801a5e8
 800ed34:	0801a390 	.word	0x0801a390
 800ed38:	0801a600 	.word	0x0801a600

0800ed3c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800ed3c:	b480      	push	{r7}
 800ed3e:	b083      	sub	sp, #12
 800ed40:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800ed42:	2300      	movs	r3, #0
 800ed44:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800ed46:	4b1e      	ldr	r3, [pc, #120]	; (800edc0 <tcp_new_port+0x84>)
 800ed48:	881b      	ldrh	r3, [r3, #0]
 800ed4a:	3301      	adds	r3, #1
 800ed4c:	b29a      	uxth	r2, r3
 800ed4e:	4b1c      	ldr	r3, [pc, #112]	; (800edc0 <tcp_new_port+0x84>)
 800ed50:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800ed52:	4b1b      	ldr	r3, [pc, #108]	; (800edc0 <tcp_new_port+0x84>)
 800ed54:	881b      	ldrh	r3, [r3, #0]
 800ed56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed5a:	4293      	cmp	r3, r2
 800ed5c:	d103      	bne.n	800ed66 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800ed5e:	4b18      	ldr	r3, [pc, #96]	; (800edc0 <tcp_new_port+0x84>)
 800ed60:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800ed64:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ed66:	2300      	movs	r3, #0
 800ed68:	71fb      	strb	r3, [r7, #7]
 800ed6a:	e01e      	b.n	800edaa <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ed6c:	79fb      	ldrb	r3, [r7, #7]
 800ed6e:	4a15      	ldr	r2, [pc, #84]	; (800edc4 <tcp_new_port+0x88>)
 800ed70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	603b      	str	r3, [r7, #0]
 800ed78:	e011      	b.n	800ed9e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800ed7a:	683b      	ldr	r3, [r7, #0]
 800ed7c:	8ada      	ldrh	r2, [r3, #22]
 800ed7e:	4b10      	ldr	r3, [pc, #64]	; (800edc0 <tcp_new_port+0x84>)
 800ed80:	881b      	ldrh	r3, [r3, #0]
 800ed82:	429a      	cmp	r2, r3
 800ed84:	d108      	bne.n	800ed98 <tcp_new_port+0x5c>
        n++;
 800ed86:	88bb      	ldrh	r3, [r7, #4]
 800ed88:	3301      	adds	r3, #1
 800ed8a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800ed8c:	88bb      	ldrh	r3, [r7, #4]
 800ed8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ed92:	d3d8      	bcc.n	800ed46 <tcp_new_port+0xa>
          return 0;
 800ed94:	2300      	movs	r3, #0
 800ed96:	e00d      	b.n	800edb4 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	68db      	ldr	r3, [r3, #12]
 800ed9c:	603b      	str	r3, [r7, #0]
 800ed9e:	683b      	ldr	r3, [r7, #0]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d1ea      	bne.n	800ed7a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800eda4:	79fb      	ldrb	r3, [r7, #7]
 800eda6:	3301      	adds	r3, #1
 800eda8:	71fb      	strb	r3, [r7, #7]
 800edaa:	79fb      	ldrb	r3, [r7, #7]
 800edac:	2b03      	cmp	r3, #3
 800edae:	d9dd      	bls.n	800ed6c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800edb0:	4b03      	ldr	r3, [pc, #12]	; (800edc0 <tcp_new_port+0x84>)
 800edb2:	881b      	ldrh	r3, [r3, #0]
}
 800edb4:	4618      	mov	r0, r3
 800edb6:	370c      	adds	r7, #12
 800edb8:	46bd      	mov	sp, r7
 800edba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edbe:	4770      	bx	lr
 800edc0:	20000142 	.word	0x20000142
 800edc4:	0802032c 	.word	0x0802032c

0800edc8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800edc8:	b5b0      	push	{r4, r5, r7, lr}
 800edca:	b090      	sub	sp, #64	; 0x40
 800edcc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800edce:	2300      	movs	r3, #0
 800edd0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800edd4:	4b94      	ldr	r3, [pc, #592]	; (800f028 <tcp_slowtmr+0x260>)
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	3301      	adds	r3, #1
 800edda:	4a93      	ldr	r2, [pc, #588]	; (800f028 <tcp_slowtmr+0x260>)
 800eddc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800edde:	4b93      	ldr	r3, [pc, #588]	; (800f02c <tcp_slowtmr+0x264>)
 800ede0:	781b      	ldrb	r3, [r3, #0]
 800ede2:	3301      	adds	r3, #1
 800ede4:	b2da      	uxtb	r2, r3
 800ede6:	4b91      	ldr	r3, [pc, #580]	; (800f02c <tcp_slowtmr+0x264>)
 800ede8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800edea:	2300      	movs	r3, #0
 800edec:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800edee:	4b90      	ldr	r3, [pc, #576]	; (800f030 <tcp_slowtmr+0x268>)
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800edf4:	e29f      	b.n	800f336 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800edf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edf8:	7d1b      	ldrb	r3, [r3, #20]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d106      	bne.n	800ee0c <tcp_slowtmr+0x44>
 800edfe:	4b8d      	ldr	r3, [pc, #564]	; (800f034 <tcp_slowtmr+0x26c>)
 800ee00:	f240 42be 	movw	r2, #1214	; 0x4be
 800ee04:	498c      	ldr	r1, [pc, #560]	; (800f038 <tcp_slowtmr+0x270>)
 800ee06:	488d      	ldr	r0, [pc, #564]	; (800f03c <tcp_slowtmr+0x274>)
 800ee08:	f008 f8f4 	bl	8016ff4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800ee0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee0e:	7d1b      	ldrb	r3, [r3, #20]
 800ee10:	2b01      	cmp	r3, #1
 800ee12:	d106      	bne.n	800ee22 <tcp_slowtmr+0x5a>
 800ee14:	4b87      	ldr	r3, [pc, #540]	; (800f034 <tcp_slowtmr+0x26c>)
 800ee16:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800ee1a:	4989      	ldr	r1, [pc, #548]	; (800f040 <tcp_slowtmr+0x278>)
 800ee1c:	4887      	ldr	r0, [pc, #540]	; (800f03c <tcp_slowtmr+0x274>)
 800ee1e:	f008 f8e9 	bl	8016ff4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800ee22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee24:	7d1b      	ldrb	r3, [r3, #20]
 800ee26:	2b0a      	cmp	r3, #10
 800ee28:	d106      	bne.n	800ee38 <tcp_slowtmr+0x70>
 800ee2a:	4b82      	ldr	r3, [pc, #520]	; (800f034 <tcp_slowtmr+0x26c>)
 800ee2c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800ee30:	4984      	ldr	r1, [pc, #528]	; (800f044 <tcp_slowtmr+0x27c>)
 800ee32:	4882      	ldr	r0, [pc, #520]	; (800f03c <tcp_slowtmr+0x274>)
 800ee34:	f008 f8de 	bl	8016ff4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800ee38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee3a:	7f9a      	ldrb	r2, [r3, #30]
 800ee3c:	4b7b      	ldr	r3, [pc, #492]	; (800f02c <tcp_slowtmr+0x264>)
 800ee3e:	781b      	ldrb	r3, [r3, #0]
 800ee40:	429a      	cmp	r2, r3
 800ee42:	d105      	bne.n	800ee50 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800ee44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee46:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ee48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee4a:	68db      	ldr	r3, [r3, #12]
 800ee4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800ee4e:	e272      	b.n	800f336 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800ee50:	4b76      	ldr	r3, [pc, #472]	; (800f02c <tcp_slowtmr+0x264>)
 800ee52:	781a      	ldrb	r2, [r3, #0]
 800ee54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee56:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800ee58:	2300      	movs	r3, #0
 800ee5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800ee5e:	2300      	movs	r3, #0
 800ee60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ee64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee66:	7d1b      	ldrb	r3, [r3, #20]
 800ee68:	2b02      	cmp	r3, #2
 800ee6a:	d10a      	bne.n	800ee82 <tcp_slowtmr+0xba>
 800ee6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ee72:	2b05      	cmp	r3, #5
 800ee74:	d905      	bls.n	800ee82 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800ee76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee7a:	3301      	adds	r3, #1
 800ee7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ee80:	e11e      	b.n	800f0c0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800ee82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ee88:	2b0b      	cmp	r3, #11
 800ee8a:	d905      	bls.n	800ee98 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800ee8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee90:	3301      	adds	r3, #1
 800ee92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ee96:	e113      	b.n	800f0c0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800ee98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee9a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d075      	beq.n	800ef8e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800eea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d006      	beq.n	800eeb8 <tcp_slowtmr+0xf0>
 800eeaa:	4b62      	ldr	r3, [pc, #392]	; (800f034 <tcp_slowtmr+0x26c>)
 800eeac:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800eeb0:	4965      	ldr	r1, [pc, #404]	; (800f048 <tcp_slowtmr+0x280>)
 800eeb2:	4862      	ldr	r0, [pc, #392]	; (800f03c <tcp_slowtmr+0x274>)
 800eeb4:	f008 f89e 	bl	8016ff4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800eeb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d106      	bne.n	800eece <tcp_slowtmr+0x106>
 800eec0:	4b5c      	ldr	r3, [pc, #368]	; (800f034 <tcp_slowtmr+0x26c>)
 800eec2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800eec6:	4961      	ldr	r1, [pc, #388]	; (800f04c <tcp_slowtmr+0x284>)
 800eec8:	485c      	ldr	r0, [pc, #368]	; (800f03c <tcp_slowtmr+0x274>)
 800eeca:	f008 f893 	bl	8016ff4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800eece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eed0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800eed4:	2b0b      	cmp	r3, #11
 800eed6:	d905      	bls.n	800eee4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800eed8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eedc:	3301      	adds	r3, #1
 800eede:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eee2:	e0ed      	b.n	800f0c0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800eee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eee6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800eeea:	3b01      	subs	r3, #1
 800eeec:	4a58      	ldr	r2, [pc, #352]	; (800f050 <tcp_slowtmr+0x288>)
 800eeee:	5cd3      	ldrb	r3, [r2, r3]
 800eef0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800eef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eef4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800eef8:	7c7a      	ldrb	r2, [r7, #17]
 800eefa:	429a      	cmp	r2, r3
 800eefc:	d907      	bls.n	800ef0e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800eefe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef00:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ef04:	3301      	adds	r3, #1
 800ef06:	b2da      	uxtb	r2, r3
 800ef08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef0a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800ef0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef10:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ef14:	7c7a      	ldrb	r2, [r7, #17]
 800ef16:	429a      	cmp	r2, r3
 800ef18:	f200 80d2 	bhi.w	800f0c0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800ef1c:	2301      	movs	r3, #1
 800ef1e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800ef20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d108      	bne.n	800ef3c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800ef2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef2c:	f005 f96a 	bl	8014204 <tcp_zero_window_probe>
 800ef30:	4603      	mov	r3, r0
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d014      	beq.n	800ef60 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800ef36:	2300      	movs	r3, #0
 800ef38:	623b      	str	r3, [r7, #32]
 800ef3a:	e011      	b.n	800ef60 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800ef3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ef42:	4619      	mov	r1, r3
 800ef44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef46:	f004 f82f 	bl	8012fa8 <tcp_split_unsent_seg>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d107      	bne.n	800ef60 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800ef50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef52:	f004 faaf 	bl	80134b4 <tcp_output>
 800ef56:	4603      	mov	r3, r0
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d101      	bne.n	800ef60 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800ef60:	6a3b      	ldr	r3, [r7, #32]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	f000 80ac 	beq.w	800f0c0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800ef68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef6a:	2200      	movs	r2, #0
 800ef6c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ef70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef72:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ef76:	2b06      	cmp	r3, #6
 800ef78:	f200 80a2 	bhi.w	800f0c0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800ef7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef7e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ef82:	3301      	adds	r3, #1
 800ef84:	b2da      	uxtb	r2, r3
 800ef86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef88:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800ef8c:	e098      	b.n	800f0c0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800ef8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef90:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	db0f      	blt.n	800efb8 <tcp_slowtmr+0x1f0>
 800ef98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef9a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ef9e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800efa2:	4293      	cmp	r3, r2
 800efa4:	d008      	beq.n	800efb8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800efa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efa8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800efac:	b29b      	uxth	r3, r3
 800efae:	3301      	adds	r3, #1
 800efb0:	b29b      	uxth	r3, r3
 800efb2:	b21a      	sxth	r2, r3
 800efb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efb6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800efb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efba:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800efbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efc0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800efc4:	429a      	cmp	r2, r3
 800efc6:	db7b      	blt.n	800f0c0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800efc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800efca:	f004 fd65 	bl	8013a98 <tcp_rexmit_rto_prepare>
 800efce:	4603      	mov	r3, r0
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d007      	beq.n	800efe4 <tcp_slowtmr+0x21c>
 800efd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d171      	bne.n	800f0c0 <tcp_slowtmr+0x2f8>
 800efdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d06d      	beq.n	800f0c0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800efe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efe6:	7d1b      	ldrb	r3, [r3, #20]
 800efe8:	2b02      	cmp	r3, #2
 800efea:	d03a      	beq.n	800f062 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800efec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800eff2:	2b0c      	cmp	r3, #12
 800eff4:	bf28      	it	cs
 800eff6:	230c      	movcs	r3, #12
 800eff8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800effa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800effc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f000:	10db      	asrs	r3, r3, #3
 800f002:	b21b      	sxth	r3, r3
 800f004:	461a      	mov	r2, r3
 800f006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f008:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f00c:	4413      	add	r3, r2
 800f00e:	7efa      	ldrb	r2, [r7, #27]
 800f010:	4910      	ldr	r1, [pc, #64]	; (800f054 <tcp_slowtmr+0x28c>)
 800f012:	5c8a      	ldrb	r2, [r1, r2]
 800f014:	4093      	lsls	r3, r2
 800f016:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800f018:	697b      	ldr	r3, [r7, #20]
 800f01a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800f01e:	4293      	cmp	r3, r2
 800f020:	dc1a      	bgt.n	800f058 <tcp_slowtmr+0x290>
 800f022:	697b      	ldr	r3, [r7, #20]
 800f024:	b21a      	sxth	r2, r3
 800f026:	e019      	b.n	800f05c <tcp_slowtmr+0x294>
 800f028:	20016dc0 	.word	0x20016dc0
 800f02c:	200016a6 	.word	0x200016a6
 800f030:	20016dbc 	.word	0x20016dbc
 800f034:	0801a34c 	.word	0x0801a34c
 800f038:	0801a690 	.word	0x0801a690
 800f03c:	0801a390 	.word	0x0801a390
 800f040:	0801a6bc 	.word	0x0801a6bc
 800f044:	0801a6e8 	.word	0x0801a6e8
 800f048:	0801a718 	.word	0x0801a718
 800f04c:	0801a74c 	.word	0x0801a74c
 800f050:	08020324 	.word	0x08020324
 800f054:	08020314 	.word	0x08020314
 800f058:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f05e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800f062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f064:	2200      	movs	r2, #0
 800f066:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800f068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f06a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f070:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f074:	4293      	cmp	r3, r2
 800f076:	bf28      	it	cs
 800f078:	4613      	movcs	r3, r2
 800f07a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800f07c:	8a7b      	ldrh	r3, [r7, #18]
 800f07e:	085b      	lsrs	r3, r3, #1
 800f080:	b29a      	uxth	r2, r3
 800f082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f084:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800f088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f08a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f090:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f092:	005b      	lsls	r3, r3, #1
 800f094:	b29b      	uxth	r3, r3
 800f096:	429a      	cmp	r2, r3
 800f098:	d206      	bcs.n	800f0a8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800f09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f09c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f09e:	005b      	lsls	r3, r3, #1
 800f0a0:	b29a      	uxth	r2, r3
 800f0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0a4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800f0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0aa:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800f0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800f0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800f0ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f0bc:	f004 fd5c 	bl	8013b78 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800f0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0c2:	7d1b      	ldrb	r3, [r3, #20]
 800f0c4:	2b06      	cmp	r3, #6
 800f0c6:	d111      	bne.n	800f0ec <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800f0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ca:	8b5b      	ldrh	r3, [r3, #26]
 800f0cc:	f003 0310 	and.w	r3, r3, #16
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d00b      	beq.n	800f0ec <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f0d4:	4b9d      	ldr	r3, [pc, #628]	; (800f34c <tcp_slowtmr+0x584>)
 800f0d6:	681a      	ldr	r2, [r3, #0]
 800f0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0da:	6a1b      	ldr	r3, [r3, #32]
 800f0dc:	1ad3      	subs	r3, r2, r3
 800f0de:	2b28      	cmp	r3, #40	; 0x28
 800f0e0:	d904      	bls.n	800f0ec <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800f0e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f0e6:	3301      	adds	r3, #1
 800f0e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ee:	7a5b      	ldrb	r3, [r3, #9]
 800f0f0:	f003 0308 	and.w	r3, r3, #8
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d04c      	beq.n	800f192 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800f0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0fa:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f0fc:	2b04      	cmp	r3, #4
 800f0fe:	d003      	beq.n	800f108 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800f100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f102:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800f104:	2b07      	cmp	r3, #7
 800f106:	d144      	bne.n	800f192 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f108:	4b90      	ldr	r3, [pc, #576]	; (800f34c <tcp_slowtmr+0x584>)
 800f10a:	681a      	ldr	r2, [r3, #0]
 800f10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f10e:	6a1b      	ldr	r3, [r3, #32]
 800f110:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800f112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f114:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f118:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800f11c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800f120:	498b      	ldr	r1, [pc, #556]	; (800f350 <tcp_slowtmr+0x588>)
 800f122:	fba1 1303 	umull	r1, r3, r1, r3
 800f126:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f128:	429a      	cmp	r2, r3
 800f12a:	d90a      	bls.n	800f142 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800f12c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f130:	3301      	adds	r3, #1
 800f132:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800f136:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f13a:	3301      	adds	r3, #1
 800f13c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f140:	e027      	b.n	800f192 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f142:	4b82      	ldr	r3, [pc, #520]	; (800f34c <tcp_slowtmr+0x584>)
 800f144:	681a      	ldr	r2, [r3, #0]
 800f146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f148:	6a1b      	ldr	r3, [r3, #32]
 800f14a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800f14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f14e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f154:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f158:	4618      	mov	r0, r3
 800f15a:	4b7e      	ldr	r3, [pc, #504]	; (800f354 <tcp_slowtmr+0x58c>)
 800f15c:	fb03 f300 	mul.w	r3, r3, r0
 800f160:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800f162:	497b      	ldr	r1, [pc, #492]	; (800f350 <tcp_slowtmr+0x588>)
 800f164:	fba1 1303 	umull	r1, r3, r1, r3
 800f168:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f16a:	429a      	cmp	r2, r3
 800f16c:	d911      	bls.n	800f192 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800f16e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f170:	f005 f808 	bl	8014184 <tcp_keepalive>
 800f174:	4603      	mov	r3, r0
 800f176:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800f17a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d107      	bne.n	800f192 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800f182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f184:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f188:	3301      	adds	r3, #1
 800f18a:	b2da      	uxtb	r2, r3
 800f18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f18e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800f192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f196:	2b00      	cmp	r3, #0
 800f198:	d011      	beq.n	800f1be <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800f19a:	4b6c      	ldr	r3, [pc, #432]	; (800f34c <tcp_slowtmr+0x584>)
 800f19c:	681a      	ldr	r2, [r3, #0]
 800f19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1a0:	6a1b      	ldr	r3, [r3, #32]
 800f1a2:	1ad2      	subs	r2, r2, r3
 800f1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1a6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f1aa:	4619      	mov	r1, r3
 800f1ac:	460b      	mov	r3, r1
 800f1ae:	005b      	lsls	r3, r3, #1
 800f1b0:	440b      	add	r3, r1
 800f1b2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800f1b4:	429a      	cmp	r2, r3
 800f1b6:	d302      	bcc.n	800f1be <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800f1b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f1ba:	f000 fec7 	bl	800ff4c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800f1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1c0:	7d1b      	ldrb	r3, [r3, #20]
 800f1c2:	2b03      	cmp	r3, #3
 800f1c4:	d10b      	bne.n	800f1de <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f1c6:	4b61      	ldr	r3, [pc, #388]	; (800f34c <tcp_slowtmr+0x584>)
 800f1c8:	681a      	ldr	r2, [r3, #0]
 800f1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1cc:	6a1b      	ldr	r3, [r3, #32]
 800f1ce:	1ad3      	subs	r3, r2, r3
 800f1d0:	2b28      	cmp	r3, #40	; 0x28
 800f1d2:	d904      	bls.n	800f1de <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800f1d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1d8:	3301      	adds	r3, #1
 800f1da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800f1de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1e0:	7d1b      	ldrb	r3, [r3, #20]
 800f1e2:	2b09      	cmp	r3, #9
 800f1e4:	d10b      	bne.n	800f1fe <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f1e6:	4b59      	ldr	r3, [pc, #356]	; (800f34c <tcp_slowtmr+0x584>)
 800f1e8:	681a      	ldr	r2, [r3, #0]
 800f1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ec:	6a1b      	ldr	r3, [r3, #32]
 800f1ee:	1ad3      	subs	r3, r2, r3
 800f1f0:	2bf0      	cmp	r3, #240	; 0xf0
 800f1f2:	d904      	bls.n	800f1fe <tcp_slowtmr+0x436>
        ++pcb_remove;
 800f1f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1f8:	3301      	adds	r3, #1
 800f1fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f1fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f202:	2b00      	cmp	r3, #0
 800f204:	d060      	beq.n	800f2c8 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800f206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f20c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800f20e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f210:	f000 fce8 	bl	800fbe4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800f214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f216:	2b00      	cmp	r3, #0
 800f218:	d010      	beq.n	800f23c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800f21a:	4b4f      	ldr	r3, [pc, #316]	; (800f358 <tcp_slowtmr+0x590>)
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f220:	429a      	cmp	r2, r3
 800f222:	d106      	bne.n	800f232 <tcp_slowtmr+0x46a>
 800f224:	4b4d      	ldr	r3, [pc, #308]	; (800f35c <tcp_slowtmr+0x594>)
 800f226:	f240 526d 	movw	r2, #1389	; 0x56d
 800f22a:	494d      	ldr	r1, [pc, #308]	; (800f360 <tcp_slowtmr+0x598>)
 800f22c:	484d      	ldr	r0, [pc, #308]	; (800f364 <tcp_slowtmr+0x59c>)
 800f22e:	f007 fee1 	bl	8016ff4 <iprintf>
        prev->next = pcb->next;
 800f232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f234:	68da      	ldr	r2, [r3, #12]
 800f236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f238:	60da      	str	r2, [r3, #12]
 800f23a:	e00f      	b.n	800f25c <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800f23c:	4b46      	ldr	r3, [pc, #280]	; (800f358 <tcp_slowtmr+0x590>)
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f242:	429a      	cmp	r2, r3
 800f244:	d006      	beq.n	800f254 <tcp_slowtmr+0x48c>
 800f246:	4b45      	ldr	r3, [pc, #276]	; (800f35c <tcp_slowtmr+0x594>)
 800f248:	f240 5271 	movw	r2, #1393	; 0x571
 800f24c:	4946      	ldr	r1, [pc, #280]	; (800f368 <tcp_slowtmr+0x5a0>)
 800f24e:	4845      	ldr	r0, [pc, #276]	; (800f364 <tcp_slowtmr+0x59c>)
 800f250:	f007 fed0 	bl	8016ff4 <iprintf>
        tcp_active_pcbs = pcb->next;
 800f254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f256:	68db      	ldr	r3, [r3, #12]
 800f258:	4a3f      	ldr	r2, [pc, #252]	; (800f358 <tcp_slowtmr+0x590>)
 800f25a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800f25c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f260:	2b00      	cmp	r3, #0
 800f262:	d013      	beq.n	800f28c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f266:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f26a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f26c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800f26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f270:	3304      	adds	r3, #4
 800f272:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f274:	8ad2      	ldrh	r2, [r2, #22]
 800f276:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f278:	8b09      	ldrh	r1, [r1, #24]
 800f27a:	9102      	str	r1, [sp, #8]
 800f27c:	9201      	str	r2, [sp, #4]
 800f27e:	9300      	str	r3, [sp, #0]
 800f280:	462b      	mov	r3, r5
 800f282:	4622      	mov	r2, r4
 800f284:	4601      	mov	r1, r0
 800f286:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f288:	f004 fec8 	bl	801401c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800f28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f28e:	691b      	ldr	r3, [r3, #16]
 800f290:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800f292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f294:	7d1b      	ldrb	r3, [r3, #20]
 800f296:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800f298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f29a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800f29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f29e:	68db      	ldr	r3, [r3, #12]
 800f2a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f2a2:	6838      	ldr	r0, [r7, #0]
 800f2a4:	f7ff f838 	bl	800e318 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800f2a8:	4b30      	ldr	r3, [pc, #192]	; (800f36c <tcp_slowtmr+0x5a4>)
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d004      	beq.n	800f2be <tcp_slowtmr+0x4f6>
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	f06f 010c 	mvn.w	r1, #12
 800f2ba:	68b8      	ldr	r0, [r7, #8]
 800f2bc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800f2be:	4b2b      	ldr	r3, [pc, #172]	; (800f36c <tcp_slowtmr+0x5a4>)
 800f2c0:	781b      	ldrb	r3, [r3, #0]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d037      	beq.n	800f336 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800f2c6:	e590      	b.n	800edea <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800f2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2ca:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2ce:	68db      	ldr	r3, [r3, #12]
 800f2d0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800f2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2d4:	7f1b      	ldrb	r3, [r3, #28]
 800f2d6:	3301      	adds	r3, #1
 800f2d8:	b2da      	uxtb	r2, r3
 800f2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2dc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800f2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2e0:	7f1a      	ldrb	r2, [r3, #28]
 800f2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2e4:	7f5b      	ldrb	r3, [r3, #29]
 800f2e6:	429a      	cmp	r2, r3
 800f2e8:	d325      	bcc.n	800f336 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800f2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ec:	2200      	movs	r2, #0
 800f2ee:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800f2f0:	4b1e      	ldr	r3, [pc, #120]	; (800f36c <tcp_slowtmr+0x5a4>)
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800f2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d00b      	beq.n	800f318 <tcp_slowtmr+0x550>
 800f300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f302:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f308:	6912      	ldr	r2, [r2, #16]
 800f30a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f30c:	4610      	mov	r0, r2
 800f30e:	4798      	blx	r3
 800f310:	4603      	mov	r3, r0
 800f312:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800f316:	e002      	b.n	800f31e <tcp_slowtmr+0x556>
 800f318:	2300      	movs	r3, #0
 800f31a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800f31e:	4b13      	ldr	r3, [pc, #76]	; (800f36c <tcp_slowtmr+0x5a4>)
 800f320:	781b      	ldrb	r3, [r3, #0]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d000      	beq.n	800f328 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800f326:	e560      	b.n	800edea <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800f328:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d102      	bne.n	800f336 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800f330:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f332:	f004 f8bf 	bl	80134b4 <tcp_output>
  while (pcb != NULL) {
 800f336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f338:	2b00      	cmp	r3, #0
 800f33a:	f47f ad5c 	bne.w	800edf6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800f33e:	2300      	movs	r3, #0
 800f340:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800f342:	4b0b      	ldr	r3, [pc, #44]	; (800f370 <tcp_slowtmr+0x5a8>)
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f348:	e067      	b.n	800f41a <tcp_slowtmr+0x652>
 800f34a:	bf00      	nop
 800f34c:	20016dc0 	.word	0x20016dc0
 800f350:	10624dd3 	.word	0x10624dd3
 800f354:	000124f8 	.word	0x000124f8
 800f358:	20016dbc 	.word	0x20016dbc
 800f35c:	0801a34c 	.word	0x0801a34c
 800f360:	0801a784 	.word	0x0801a784
 800f364:	0801a390 	.word	0x0801a390
 800f368:	0801a7b0 	.word	0x0801a7b0
 800f36c:	20016db8 	.word	0x20016db8
 800f370:	20016dcc 	.word	0x20016dcc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f376:	7d1b      	ldrb	r3, [r3, #20]
 800f378:	2b0a      	cmp	r3, #10
 800f37a:	d006      	beq.n	800f38a <tcp_slowtmr+0x5c2>
 800f37c:	4b2b      	ldr	r3, [pc, #172]	; (800f42c <tcp_slowtmr+0x664>)
 800f37e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800f382:	492b      	ldr	r1, [pc, #172]	; (800f430 <tcp_slowtmr+0x668>)
 800f384:	482b      	ldr	r0, [pc, #172]	; (800f434 <tcp_slowtmr+0x66c>)
 800f386:	f007 fe35 	bl	8016ff4 <iprintf>
    pcb_remove = 0;
 800f38a:	2300      	movs	r3, #0
 800f38c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f390:	4b29      	ldr	r3, [pc, #164]	; (800f438 <tcp_slowtmr+0x670>)
 800f392:	681a      	ldr	r2, [r3, #0]
 800f394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f396:	6a1b      	ldr	r3, [r3, #32]
 800f398:	1ad3      	subs	r3, r2, r3
 800f39a:	2bf0      	cmp	r3, #240	; 0xf0
 800f39c:	d904      	bls.n	800f3a8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800f39e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f3a2:	3301      	adds	r3, #1
 800f3a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f3a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d02f      	beq.n	800f410 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f3b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f3b2:	f000 fc17 	bl	800fbe4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f3b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d010      	beq.n	800f3de <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f3bc:	4b1f      	ldr	r3, [pc, #124]	; (800f43c <tcp_slowtmr+0x674>)
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f3c2:	429a      	cmp	r2, r3
 800f3c4:	d106      	bne.n	800f3d4 <tcp_slowtmr+0x60c>
 800f3c6:	4b19      	ldr	r3, [pc, #100]	; (800f42c <tcp_slowtmr+0x664>)
 800f3c8:	f240 52af 	movw	r2, #1455	; 0x5af
 800f3cc:	491c      	ldr	r1, [pc, #112]	; (800f440 <tcp_slowtmr+0x678>)
 800f3ce:	4819      	ldr	r0, [pc, #100]	; (800f434 <tcp_slowtmr+0x66c>)
 800f3d0:	f007 fe10 	bl	8016ff4 <iprintf>
        prev->next = pcb->next;
 800f3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3d6:	68da      	ldr	r2, [r3, #12]
 800f3d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3da:	60da      	str	r2, [r3, #12]
 800f3dc:	e00f      	b.n	800f3fe <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f3de:	4b17      	ldr	r3, [pc, #92]	; (800f43c <tcp_slowtmr+0x674>)
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f3e4:	429a      	cmp	r2, r3
 800f3e6:	d006      	beq.n	800f3f6 <tcp_slowtmr+0x62e>
 800f3e8:	4b10      	ldr	r3, [pc, #64]	; (800f42c <tcp_slowtmr+0x664>)
 800f3ea:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800f3ee:	4915      	ldr	r1, [pc, #84]	; (800f444 <tcp_slowtmr+0x67c>)
 800f3f0:	4810      	ldr	r0, [pc, #64]	; (800f434 <tcp_slowtmr+0x66c>)
 800f3f2:	f007 fdff 	bl	8016ff4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3f8:	68db      	ldr	r3, [r3, #12]
 800f3fa:	4a10      	ldr	r2, [pc, #64]	; (800f43c <tcp_slowtmr+0x674>)
 800f3fc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f400:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f404:	68db      	ldr	r3, [r3, #12]
 800f406:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f408:	69f8      	ldr	r0, [r7, #28]
 800f40a:	f7fe ff85 	bl	800e318 <tcp_free>
 800f40e:	e004      	b.n	800f41a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800f410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f412:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f416:	68db      	ldr	r3, [r3, #12]
 800f418:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d1a9      	bne.n	800f374 <tcp_slowtmr+0x5ac>
    }
  }
}
 800f420:	bf00      	nop
 800f422:	bf00      	nop
 800f424:	3730      	adds	r7, #48	; 0x30
 800f426:	46bd      	mov	sp, r7
 800f428:	bdb0      	pop	{r4, r5, r7, pc}
 800f42a:	bf00      	nop
 800f42c:	0801a34c 	.word	0x0801a34c
 800f430:	0801a7dc 	.word	0x0801a7dc
 800f434:	0801a390 	.word	0x0801a390
 800f438:	20016dc0 	.word	0x20016dc0
 800f43c:	20016dcc 	.word	0x20016dcc
 800f440:	0801a80c 	.word	0x0801a80c
 800f444:	0801a834 	.word	0x0801a834

0800f448 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b082      	sub	sp, #8
 800f44c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f44e:	4b2d      	ldr	r3, [pc, #180]	; (800f504 <tcp_fasttmr+0xbc>)
 800f450:	781b      	ldrb	r3, [r3, #0]
 800f452:	3301      	adds	r3, #1
 800f454:	b2da      	uxtb	r2, r3
 800f456:	4b2b      	ldr	r3, [pc, #172]	; (800f504 <tcp_fasttmr+0xbc>)
 800f458:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f45a:	4b2b      	ldr	r3, [pc, #172]	; (800f508 <tcp_fasttmr+0xc0>)
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f460:	e048      	b.n	800f4f4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	7f9a      	ldrb	r2, [r3, #30]
 800f466:	4b27      	ldr	r3, [pc, #156]	; (800f504 <tcp_fasttmr+0xbc>)
 800f468:	781b      	ldrb	r3, [r3, #0]
 800f46a:	429a      	cmp	r2, r3
 800f46c:	d03f      	beq.n	800f4ee <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f46e:	4b25      	ldr	r3, [pc, #148]	; (800f504 <tcp_fasttmr+0xbc>)
 800f470:	781a      	ldrb	r2, [r3, #0]
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	8b5b      	ldrh	r3, [r3, #26]
 800f47a:	f003 0301 	and.w	r3, r3, #1
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d010      	beq.n	800f4a4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	8b5b      	ldrh	r3, [r3, #26]
 800f486:	f043 0302 	orr.w	r3, r3, #2
 800f48a:	b29a      	uxth	r2, r3
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f490:	6878      	ldr	r0, [r7, #4]
 800f492:	f004 f80f 	bl	80134b4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	8b5b      	ldrh	r3, [r3, #26]
 800f49a:	f023 0303 	bic.w	r3, r3, #3
 800f49e:	b29a      	uxth	r2, r3
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	8b5b      	ldrh	r3, [r3, #26]
 800f4a8:	f003 0308 	and.w	r3, r3, #8
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d009      	beq.n	800f4c4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	8b5b      	ldrh	r3, [r3, #26]
 800f4b4:	f023 0308 	bic.w	r3, r3, #8
 800f4b8:	b29a      	uxth	r2, r3
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f4be:	6878      	ldr	r0, [r7, #4]
 800f4c0:	f7ff f8be 	bl	800e640 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	68db      	ldr	r3, [r3, #12]
 800f4c8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d00a      	beq.n	800f4e8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f4d2:	4b0e      	ldr	r3, [pc, #56]	; (800f50c <tcp_fasttmr+0xc4>)
 800f4d4:	2200      	movs	r2, #0
 800f4d6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f4d8:	6878      	ldr	r0, [r7, #4]
 800f4da:	f000 f819 	bl	800f510 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f4de:	4b0b      	ldr	r3, [pc, #44]	; (800f50c <tcp_fasttmr+0xc4>)
 800f4e0:	781b      	ldrb	r3, [r3, #0]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d000      	beq.n	800f4e8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f4e6:	e7b8      	b.n	800f45a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	607b      	str	r3, [r7, #4]
 800f4ec:	e002      	b.n	800f4f4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	68db      	ldr	r3, [r3, #12]
 800f4f2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d1b3      	bne.n	800f462 <tcp_fasttmr+0x1a>
    }
  }
}
 800f4fa:	bf00      	nop
 800f4fc:	bf00      	nop
 800f4fe:	3708      	adds	r7, #8
 800f500:	46bd      	mov	sp, r7
 800f502:	bd80      	pop	{r7, pc}
 800f504:	200016a6 	.word	0x200016a6
 800f508:	20016dbc 	.word	0x20016dbc
 800f50c:	20016db8 	.word	0x20016db8

0800f510 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f510:	b590      	push	{r4, r7, lr}
 800f512:	b085      	sub	sp, #20
 800f514:	af00      	add	r7, sp, #0
 800f516:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d109      	bne.n	800f532 <tcp_process_refused_data+0x22>
 800f51e:	4b37      	ldr	r3, [pc, #220]	; (800f5fc <tcp_process_refused_data+0xec>)
 800f520:	f240 6209 	movw	r2, #1545	; 0x609
 800f524:	4936      	ldr	r1, [pc, #216]	; (800f600 <tcp_process_refused_data+0xf0>)
 800f526:	4837      	ldr	r0, [pc, #220]	; (800f604 <tcp_process_refused_data+0xf4>)
 800f528:	f007 fd64 	bl	8016ff4 <iprintf>
 800f52c:	f06f 030f 	mvn.w	r3, #15
 800f530:	e060      	b.n	800f5f4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f536:	7b5b      	ldrb	r3, [r3, #13]
 800f538:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f53e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	2200      	movs	r2, #0
 800f544:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d00b      	beq.n	800f568 <tcp_process_refused_data+0x58>
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	6918      	ldr	r0, [r3, #16]
 800f55a:	2300      	movs	r3, #0
 800f55c:	68ba      	ldr	r2, [r7, #8]
 800f55e:	6879      	ldr	r1, [r7, #4]
 800f560:	47a0      	blx	r4
 800f562:	4603      	mov	r3, r0
 800f564:	73fb      	strb	r3, [r7, #15]
 800f566:	e007      	b.n	800f578 <tcp_process_refused_data+0x68>
 800f568:	2300      	movs	r3, #0
 800f56a:	68ba      	ldr	r2, [r7, #8]
 800f56c:	6879      	ldr	r1, [r7, #4]
 800f56e:	2000      	movs	r0, #0
 800f570:	f000 f8c2 	bl	800f6f8 <tcp_recv_null>
 800f574:	4603      	mov	r3, r0
 800f576:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f578:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d12a      	bne.n	800f5d6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f580:	7bbb      	ldrb	r3, [r7, #14]
 800f582:	f003 0320 	and.w	r3, r3, #32
 800f586:	2b00      	cmp	r3, #0
 800f588:	d033      	beq.n	800f5f2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f58e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f592:	d005      	beq.n	800f5a0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f598:	3301      	adds	r3, #1
 800f59a:	b29a      	uxth	r2, r3
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d00b      	beq.n	800f5c2 <tcp_process_refused_data+0xb2>
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	6918      	ldr	r0, [r3, #16]
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	6879      	ldr	r1, [r7, #4]
 800f5ba:	47a0      	blx	r4
 800f5bc:	4603      	mov	r3, r0
 800f5be:	73fb      	strb	r3, [r7, #15]
 800f5c0:	e001      	b.n	800f5c6 <tcp_process_refused_data+0xb6>
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f5c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f5ca:	f113 0f0d 	cmn.w	r3, #13
 800f5ce:	d110      	bne.n	800f5f2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800f5d0:	f06f 030c 	mvn.w	r3, #12
 800f5d4:	e00e      	b.n	800f5f4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800f5d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f5da:	f113 0f0d 	cmn.w	r3, #13
 800f5de:	d102      	bne.n	800f5e6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f5e0:	f06f 030c 	mvn.w	r3, #12
 800f5e4:	e006      	b.n	800f5f4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	68ba      	ldr	r2, [r7, #8]
 800f5ea:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800f5ec:	f06f 0304 	mvn.w	r3, #4
 800f5f0:	e000      	b.n	800f5f4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800f5f2:	2300      	movs	r3, #0
}
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	3714      	adds	r7, #20
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	bd90      	pop	{r4, r7, pc}
 800f5fc:	0801a34c 	.word	0x0801a34c
 800f600:	0801a85c 	.word	0x0801a85c
 800f604:	0801a390 	.word	0x0801a390

0800f608 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b084      	sub	sp, #16
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f610:	e007      	b.n	800f622 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f618:	6878      	ldr	r0, [r7, #4]
 800f61a:	f000 f80a 	bl	800f632 <tcp_seg_free>
    seg = next;
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d1f4      	bne.n	800f612 <tcp_segs_free+0xa>
  }
}
 800f628:	bf00      	nop
 800f62a:	bf00      	nop
 800f62c:	3710      	adds	r7, #16
 800f62e:	46bd      	mov	sp, r7
 800f630:	bd80      	pop	{r7, pc}

0800f632 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f632:	b580      	push	{r7, lr}
 800f634:	b082      	sub	sp, #8
 800f636:	af00      	add	r7, sp, #0
 800f638:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d00c      	beq.n	800f65a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	685b      	ldr	r3, [r3, #4]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d004      	beq.n	800f652 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	685b      	ldr	r3, [r3, #4]
 800f64c:	4618      	mov	r0, r3
 800f64e:	f7fe fbc3 	bl	800ddd8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f652:	6879      	ldr	r1, [r7, #4]
 800f654:	2003      	movs	r0, #3
 800f656:	f7fd fdad 	bl	800d1b4 <memp_free>
  }
}
 800f65a:	bf00      	nop
 800f65c:	3708      	adds	r7, #8
 800f65e:	46bd      	mov	sp, r7
 800f660:	bd80      	pop	{r7, pc}
	...

0800f664 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800f664:	b580      	push	{r7, lr}
 800f666:	b082      	sub	sp, #8
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
 800f66c:	460b      	mov	r3, r1
 800f66e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d107      	bne.n	800f686 <tcp_setprio+0x22>
 800f676:	4b07      	ldr	r3, [pc, #28]	; (800f694 <tcp_setprio+0x30>)
 800f678:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800f67c:	4906      	ldr	r1, [pc, #24]	; (800f698 <tcp_setprio+0x34>)
 800f67e:	4807      	ldr	r0, [pc, #28]	; (800f69c <tcp_setprio+0x38>)
 800f680:	f007 fcb8 	bl	8016ff4 <iprintf>
 800f684:	e002      	b.n	800f68c <tcp_setprio+0x28>

  pcb->prio = prio;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	78fa      	ldrb	r2, [r7, #3]
 800f68a:	755a      	strb	r2, [r3, #21]
}
 800f68c:	3708      	adds	r7, #8
 800f68e:	46bd      	mov	sp, r7
 800f690:	bd80      	pop	{r7, pc}
 800f692:	bf00      	nop
 800f694:	0801a34c 	.word	0x0801a34c
 800f698:	0801a884 	.word	0x0801a884
 800f69c:	0801a390 	.word	0x0801a390

0800f6a0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b084      	sub	sp, #16
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d106      	bne.n	800f6bc <tcp_seg_copy+0x1c>
 800f6ae:	4b0f      	ldr	r3, [pc, #60]	; (800f6ec <tcp_seg_copy+0x4c>)
 800f6b0:	f240 6282 	movw	r2, #1666	; 0x682
 800f6b4:	490e      	ldr	r1, [pc, #56]	; (800f6f0 <tcp_seg_copy+0x50>)
 800f6b6:	480f      	ldr	r0, [pc, #60]	; (800f6f4 <tcp_seg_copy+0x54>)
 800f6b8:	f007 fc9c 	bl	8016ff4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f6bc:	2003      	movs	r0, #3
 800f6be:	f7fd fd2d 	bl	800d11c <memp_malloc>
 800f6c2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d101      	bne.n	800f6ce <tcp_seg_copy+0x2e>
    return NULL;
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	e00a      	b.n	800f6e4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f6ce:	2210      	movs	r2, #16
 800f6d0:	6879      	ldr	r1, [r7, #4]
 800f6d2:	68f8      	ldr	r0, [r7, #12]
 800f6d4:	f007 fc5e 	bl	8016f94 <memcpy>
  pbuf_ref(cseg->p);
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	685b      	ldr	r3, [r3, #4]
 800f6dc:	4618      	mov	r0, r3
 800f6de:	f7fe fc1b 	bl	800df18 <pbuf_ref>
  return cseg;
 800f6e2:	68fb      	ldr	r3, [r7, #12]
}
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	3710      	adds	r7, #16
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	bd80      	pop	{r7, pc}
 800f6ec:	0801a34c 	.word	0x0801a34c
 800f6f0:	0801a8a0 	.word	0x0801a8a0
 800f6f4:	0801a390 	.word	0x0801a390

0800f6f8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b084      	sub	sp, #16
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	60f8      	str	r0, [r7, #12]
 800f700:	60b9      	str	r1, [r7, #8]
 800f702:	607a      	str	r2, [r7, #4]
 800f704:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f706:	68bb      	ldr	r3, [r7, #8]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d109      	bne.n	800f720 <tcp_recv_null+0x28>
 800f70c:	4b12      	ldr	r3, [pc, #72]	; (800f758 <tcp_recv_null+0x60>)
 800f70e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f712:	4912      	ldr	r1, [pc, #72]	; (800f75c <tcp_recv_null+0x64>)
 800f714:	4812      	ldr	r0, [pc, #72]	; (800f760 <tcp_recv_null+0x68>)
 800f716:	f007 fc6d 	bl	8016ff4 <iprintf>
 800f71a:	f06f 030f 	mvn.w	r3, #15
 800f71e:	e016      	b.n	800f74e <tcp_recv_null+0x56>

  if (p != NULL) {
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	2b00      	cmp	r3, #0
 800f724:	d009      	beq.n	800f73a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	891b      	ldrh	r3, [r3, #8]
 800f72a:	4619      	mov	r1, r3
 800f72c:	68b8      	ldr	r0, [r7, #8]
 800f72e:	f7ff fab5 	bl	800ec9c <tcp_recved>
    pbuf_free(p);
 800f732:	6878      	ldr	r0, [r7, #4]
 800f734:	f7fe fb50 	bl	800ddd8 <pbuf_free>
 800f738:	e008      	b.n	800f74c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f73a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d104      	bne.n	800f74c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f742:	68b8      	ldr	r0, [r7, #8]
 800f744:	f7fe ffe6 	bl	800e714 <tcp_close>
 800f748:	4603      	mov	r3, r0
 800f74a:	e000      	b.n	800f74e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f74c:	2300      	movs	r3, #0
}
 800f74e:	4618      	mov	r0, r3
 800f750:	3710      	adds	r7, #16
 800f752:	46bd      	mov	sp, r7
 800f754:	bd80      	pop	{r7, pc}
 800f756:	bf00      	nop
 800f758:	0801a34c 	.word	0x0801a34c
 800f75c:	0801a8bc 	.word	0x0801a8bc
 800f760:	0801a390 	.word	0x0801a390

0800f764 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f764:	b580      	push	{r7, lr}
 800f766:	b086      	sub	sp, #24
 800f768:	af00      	add	r7, sp, #0
 800f76a:	4603      	mov	r3, r0
 800f76c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f76e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f772:	2b00      	cmp	r3, #0
 800f774:	db01      	blt.n	800f77a <tcp_kill_prio+0x16>
 800f776:	79fb      	ldrb	r3, [r7, #7]
 800f778:	e000      	b.n	800f77c <tcp_kill_prio+0x18>
 800f77a:	237f      	movs	r3, #127	; 0x7f
 800f77c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f77e:	7afb      	ldrb	r3, [r7, #11]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d034      	beq.n	800f7ee <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f784:	7afb      	ldrb	r3, [r7, #11]
 800f786:	3b01      	subs	r3, #1
 800f788:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f78a:	2300      	movs	r3, #0
 800f78c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f78e:	2300      	movs	r3, #0
 800f790:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f792:	4b19      	ldr	r3, [pc, #100]	; (800f7f8 <tcp_kill_prio+0x94>)
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	617b      	str	r3, [r7, #20]
 800f798:	e01f      	b.n	800f7da <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f79a:	697b      	ldr	r3, [r7, #20]
 800f79c:	7d5b      	ldrb	r3, [r3, #21]
 800f79e:	7afa      	ldrb	r2, [r7, #11]
 800f7a0:	429a      	cmp	r2, r3
 800f7a2:	d80c      	bhi.n	800f7be <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f7a4:	697b      	ldr	r3, [r7, #20]
 800f7a6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f7a8:	7afa      	ldrb	r2, [r7, #11]
 800f7aa:	429a      	cmp	r2, r3
 800f7ac:	d112      	bne.n	800f7d4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f7ae:	4b13      	ldr	r3, [pc, #76]	; (800f7fc <tcp_kill_prio+0x98>)
 800f7b0:	681a      	ldr	r2, [r3, #0]
 800f7b2:	697b      	ldr	r3, [r7, #20]
 800f7b4:	6a1b      	ldr	r3, [r3, #32]
 800f7b6:	1ad3      	subs	r3, r2, r3
 800f7b8:	68fa      	ldr	r2, [r7, #12]
 800f7ba:	429a      	cmp	r2, r3
 800f7bc:	d80a      	bhi.n	800f7d4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f7be:	4b0f      	ldr	r3, [pc, #60]	; (800f7fc <tcp_kill_prio+0x98>)
 800f7c0:	681a      	ldr	r2, [r3, #0]
 800f7c2:	697b      	ldr	r3, [r7, #20]
 800f7c4:	6a1b      	ldr	r3, [r3, #32]
 800f7c6:	1ad3      	subs	r3, r2, r3
 800f7c8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f7ca:	697b      	ldr	r3, [r7, #20]
 800f7cc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f7ce:	697b      	ldr	r3, [r7, #20]
 800f7d0:	7d5b      	ldrb	r3, [r3, #21]
 800f7d2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f7d4:	697b      	ldr	r3, [r7, #20]
 800f7d6:	68db      	ldr	r3, [r3, #12]
 800f7d8:	617b      	str	r3, [r7, #20]
 800f7da:	697b      	ldr	r3, [r7, #20]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d1dc      	bne.n	800f79a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f7e0:	693b      	ldr	r3, [r7, #16]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d004      	beq.n	800f7f0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f7e6:	6938      	ldr	r0, [r7, #16]
 800f7e8:	f7ff f87e 	bl	800e8e8 <tcp_abort>
 800f7ec:	e000      	b.n	800f7f0 <tcp_kill_prio+0x8c>
    return;
 800f7ee:	bf00      	nop
  }
}
 800f7f0:	3718      	adds	r7, #24
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	bd80      	pop	{r7, pc}
 800f7f6:	bf00      	nop
 800f7f8:	20016dbc 	.word	0x20016dbc
 800f7fc:	20016dc0 	.word	0x20016dc0

0800f800 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f800:	b580      	push	{r7, lr}
 800f802:	b086      	sub	sp, #24
 800f804:	af00      	add	r7, sp, #0
 800f806:	4603      	mov	r3, r0
 800f808:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f80a:	79fb      	ldrb	r3, [r7, #7]
 800f80c:	2b08      	cmp	r3, #8
 800f80e:	d009      	beq.n	800f824 <tcp_kill_state+0x24>
 800f810:	79fb      	ldrb	r3, [r7, #7]
 800f812:	2b09      	cmp	r3, #9
 800f814:	d006      	beq.n	800f824 <tcp_kill_state+0x24>
 800f816:	4b1a      	ldr	r3, [pc, #104]	; (800f880 <tcp_kill_state+0x80>)
 800f818:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800f81c:	4919      	ldr	r1, [pc, #100]	; (800f884 <tcp_kill_state+0x84>)
 800f81e:	481a      	ldr	r0, [pc, #104]	; (800f888 <tcp_kill_state+0x88>)
 800f820:	f007 fbe8 	bl	8016ff4 <iprintf>

  inactivity = 0;
 800f824:	2300      	movs	r3, #0
 800f826:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f828:	2300      	movs	r3, #0
 800f82a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f82c:	4b17      	ldr	r3, [pc, #92]	; (800f88c <tcp_kill_state+0x8c>)
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	617b      	str	r3, [r7, #20]
 800f832:	e017      	b.n	800f864 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f834:	697b      	ldr	r3, [r7, #20]
 800f836:	7d1b      	ldrb	r3, [r3, #20]
 800f838:	79fa      	ldrb	r2, [r7, #7]
 800f83a:	429a      	cmp	r2, r3
 800f83c:	d10f      	bne.n	800f85e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f83e:	4b14      	ldr	r3, [pc, #80]	; (800f890 <tcp_kill_state+0x90>)
 800f840:	681a      	ldr	r2, [r3, #0]
 800f842:	697b      	ldr	r3, [r7, #20]
 800f844:	6a1b      	ldr	r3, [r3, #32]
 800f846:	1ad3      	subs	r3, r2, r3
 800f848:	68fa      	ldr	r2, [r7, #12]
 800f84a:	429a      	cmp	r2, r3
 800f84c:	d807      	bhi.n	800f85e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f84e:	4b10      	ldr	r3, [pc, #64]	; (800f890 <tcp_kill_state+0x90>)
 800f850:	681a      	ldr	r2, [r3, #0]
 800f852:	697b      	ldr	r3, [r7, #20]
 800f854:	6a1b      	ldr	r3, [r3, #32]
 800f856:	1ad3      	subs	r3, r2, r3
 800f858:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f85a:	697b      	ldr	r3, [r7, #20]
 800f85c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f85e:	697b      	ldr	r3, [r7, #20]
 800f860:	68db      	ldr	r3, [r3, #12]
 800f862:	617b      	str	r3, [r7, #20]
 800f864:	697b      	ldr	r3, [r7, #20]
 800f866:	2b00      	cmp	r3, #0
 800f868:	d1e4      	bne.n	800f834 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f86a:	693b      	ldr	r3, [r7, #16]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d003      	beq.n	800f878 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f870:	2100      	movs	r1, #0
 800f872:	6938      	ldr	r0, [r7, #16]
 800f874:	f7fe ff7a 	bl	800e76c <tcp_abandon>
  }
}
 800f878:	bf00      	nop
 800f87a:	3718      	adds	r7, #24
 800f87c:	46bd      	mov	sp, r7
 800f87e:	bd80      	pop	{r7, pc}
 800f880:	0801a34c 	.word	0x0801a34c
 800f884:	0801a8d8 	.word	0x0801a8d8
 800f888:	0801a390 	.word	0x0801a390
 800f88c:	20016dbc 	.word	0x20016dbc
 800f890:	20016dc0 	.word	0x20016dc0

0800f894 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f894:	b580      	push	{r7, lr}
 800f896:	b084      	sub	sp, #16
 800f898:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f89a:	2300      	movs	r3, #0
 800f89c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f89e:	2300      	movs	r3, #0
 800f8a0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f8a2:	4b12      	ldr	r3, [pc, #72]	; (800f8ec <tcp_kill_timewait+0x58>)
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	60fb      	str	r3, [r7, #12]
 800f8a8:	e012      	b.n	800f8d0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f8aa:	4b11      	ldr	r3, [pc, #68]	; (800f8f0 <tcp_kill_timewait+0x5c>)
 800f8ac:	681a      	ldr	r2, [r3, #0]
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	6a1b      	ldr	r3, [r3, #32]
 800f8b2:	1ad3      	subs	r3, r2, r3
 800f8b4:	687a      	ldr	r2, [r7, #4]
 800f8b6:	429a      	cmp	r2, r3
 800f8b8:	d807      	bhi.n	800f8ca <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f8ba:	4b0d      	ldr	r3, [pc, #52]	; (800f8f0 <tcp_kill_timewait+0x5c>)
 800f8bc:	681a      	ldr	r2, [r3, #0]
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	6a1b      	ldr	r3, [r3, #32]
 800f8c2:	1ad3      	subs	r3, r2, r3
 800f8c4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	68db      	ldr	r3, [r3, #12]
 800f8ce:	60fb      	str	r3, [r7, #12]
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d1e9      	bne.n	800f8aa <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f8d6:	68bb      	ldr	r3, [r7, #8]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d002      	beq.n	800f8e2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f8dc:	68b8      	ldr	r0, [r7, #8]
 800f8de:	f7ff f803 	bl	800e8e8 <tcp_abort>
  }
}
 800f8e2:	bf00      	nop
 800f8e4:	3710      	adds	r7, #16
 800f8e6:	46bd      	mov	sp, r7
 800f8e8:	bd80      	pop	{r7, pc}
 800f8ea:	bf00      	nop
 800f8ec:	20016dcc 	.word	0x20016dcc
 800f8f0:	20016dc0 	.word	0x20016dc0

0800f8f4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b082      	sub	sp, #8
 800f8f8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f8fa:	4b10      	ldr	r3, [pc, #64]	; (800f93c <tcp_handle_closepend+0x48>)
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f900:	e014      	b.n	800f92c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	68db      	ldr	r3, [r3, #12]
 800f906:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	8b5b      	ldrh	r3, [r3, #26]
 800f90c:	f003 0308 	and.w	r3, r3, #8
 800f910:	2b00      	cmp	r3, #0
 800f912:	d009      	beq.n	800f928 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	8b5b      	ldrh	r3, [r3, #26]
 800f918:	f023 0308 	bic.w	r3, r3, #8
 800f91c:	b29a      	uxth	r2, r3
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f922:	6878      	ldr	r0, [r7, #4]
 800f924:	f7fe fe8c 	bl	800e640 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f928:	683b      	ldr	r3, [r7, #0]
 800f92a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d1e7      	bne.n	800f902 <tcp_handle_closepend+0xe>
  }
}
 800f932:	bf00      	nop
 800f934:	bf00      	nop
 800f936:	3708      	adds	r7, #8
 800f938:	46bd      	mov	sp, r7
 800f93a:	bd80      	pop	{r7, pc}
 800f93c:	20016dbc 	.word	0x20016dbc

0800f940 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f940:	b580      	push	{r7, lr}
 800f942:	b084      	sub	sp, #16
 800f944:	af00      	add	r7, sp, #0
 800f946:	4603      	mov	r3, r0
 800f948:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f94a:	2001      	movs	r0, #1
 800f94c:	f7fd fbe6 	bl	800d11c <memp_malloc>
 800f950:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d126      	bne.n	800f9a6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800f958:	f7ff ffcc 	bl	800f8f4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f95c:	f7ff ff9a 	bl	800f894 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f960:	2001      	movs	r0, #1
 800f962:	f7fd fbdb 	bl	800d11c <memp_malloc>
 800f966:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d11b      	bne.n	800f9a6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f96e:	2009      	movs	r0, #9
 800f970:	f7ff ff46 	bl	800f800 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f974:	2001      	movs	r0, #1
 800f976:	f7fd fbd1 	bl	800d11c <memp_malloc>
 800f97a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d111      	bne.n	800f9a6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f982:	2008      	movs	r0, #8
 800f984:	f7ff ff3c 	bl	800f800 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f988:	2001      	movs	r0, #1
 800f98a:	f7fd fbc7 	bl	800d11c <memp_malloc>
 800f98e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	2b00      	cmp	r3, #0
 800f994:	d107      	bne.n	800f9a6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f996:	79fb      	ldrb	r3, [r7, #7]
 800f998:	4618      	mov	r0, r3
 800f99a:	f7ff fee3 	bl	800f764 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f99e:	2001      	movs	r0, #1
 800f9a0:	f7fd fbbc 	bl	800d11c <memp_malloc>
 800f9a4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d03f      	beq.n	800fa2c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f9ac:	229c      	movs	r2, #156	; 0x9c
 800f9ae:	2100      	movs	r1, #0
 800f9b0:	68f8      	ldr	r0, [r7, #12]
 800f9b2:	f007 fb17 	bl	8016fe4 <memset>
    pcb->prio = prio;
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	79fa      	ldrb	r2, [r7, #7]
 800f9ba:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f9c2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f9cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	22ff      	movs	r2, #255	; 0xff
 800f9da:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f9e2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	2206      	movs	r2, #6
 800f9e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	2206      	movs	r2, #6
 800f9f0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f9f8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	2201      	movs	r2, #1
 800f9fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800fa02:	4b0d      	ldr	r3, [pc, #52]	; (800fa38 <tcp_alloc+0xf8>)
 800fa04:	681a      	ldr	r2, [r3, #0]
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800fa0a:	4b0c      	ldr	r3, [pc, #48]	; (800fa3c <tcp_alloc+0xfc>)
 800fa0c:	781a      	ldrb	r2, [r3, #0]
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800fa18:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	4a08      	ldr	r2, [pc, #32]	; (800fa40 <tcp_alloc+0x100>)
 800fa20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	4a07      	ldr	r2, [pc, #28]	; (800fa44 <tcp_alloc+0x104>)
 800fa28:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800fa2c:	68fb      	ldr	r3, [r7, #12]
}
 800fa2e:	4618      	mov	r0, r3
 800fa30:	3710      	adds	r7, #16
 800fa32:	46bd      	mov	sp, r7
 800fa34:	bd80      	pop	{r7, pc}
 800fa36:	bf00      	nop
 800fa38:	20016dc0 	.word	0x20016dc0
 800fa3c:	200016a6 	.word	0x200016a6
 800fa40:	0800f6f9 	.word	0x0800f6f9
 800fa44:	006ddd00 	.word	0x006ddd00

0800fa48 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	b084      	sub	sp, #16
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	4603      	mov	r3, r0
 800fa50:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800fa52:	2040      	movs	r0, #64	; 0x40
 800fa54:	f7ff ff74 	bl	800f940 <tcp_alloc>
 800fa58:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800fa5a:	68fb      	ldr	r3, [r7, #12]
}
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	3710      	adds	r7, #16
 800fa60:	46bd      	mov	sp, r7
 800fa62:	bd80      	pop	{r7, pc}

0800fa64 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800fa64:	b480      	push	{r7}
 800fa66:	b083      	sub	sp, #12
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
 800fa6c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d002      	beq.n	800fa7a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	683a      	ldr	r2, [r7, #0]
 800fa78:	611a      	str	r2, [r3, #16]
  }
}
 800fa7a:	bf00      	nop
 800fa7c:	370c      	adds	r7, #12
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa84:	4770      	bx	lr
	...

0800fa88 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b082      	sub	sp, #8
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
 800fa90:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d00e      	beq.n	800fab6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	7d1b      	ldrb	r3, [r3, #20]
 800fa9c:	2b01      	cmp	r3, #1
 800fa9e:	d106      	bne.n	800faae <tcp_recv+0x26>
 800faa0:	4b07      	ldr	r3, [pc, #28]	; (800fac0 <tcp_recv+0x38>)
 800faa2:	f240 72df 	movw	r2, #2015	; 0x7df
 800faa6:	4907      	ldr	r1, [pc, #28]	; (800fac4 <tcp_recv+0x3c>)
 800faa8:	4807      	ldr	r0, [pc, #28]	; (800fac8 <tcp_recv+0x40>)
 800faaa:	f007 faa3 	bl	8016ff4 <iprintf>
    pcb->recv = recv;
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	683a      	ldr	r2, [r7, #0]
 800fab2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800fab6:	bf00      	nop
 800fab8:	3708      	adds	r7, #8
 800faba:	46bd      	mov	sp, r7
 800fabc:	bd80      	pop	{r7, pc}
 800fabe:	bf00      	nop
 800fac0:	0801a34c 	.word	0x0801a34c
 800fac4:	0801a8e8 	.word	0x0801a8e8
 800fac8:	0801a390 	.word	0x0801a390

0800facc <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800facc:	b580      	push	{r7, lr}
 800face:	b082      	sub	sp, #8
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
 800fad4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d00e      	beq.n	800fafa <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	7d1b      	ldrb	r3, [r3, #20]
 800fae0:	2b01      	cmp	r3, #1
 800fae2:	d106      	bne.n	800faf2 <tcp_sent+0x26>
 800fae4:	4b07      	ldr	r3, [pc, #28]	; (800fb04 <tcp_sent+0x38>)
 800fae6:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800faea:	4907      	ldr	r1, [pc, #28]	; (800fb08 <tcp_sent+0x3c>)
 800faec:	4807      	ldr	r0, [pc, #28]	; (800fb0c <tcp_sent+0x40>)
 800faee:	f007 fa81 	bl	8016ff4 <iprintf>
    pcb->sent = sent;
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	683a      	ldr	r2, [r7, #0]
 800faf6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800fafa:	bf00      	nop
 800fafc:	3708      	adds	r7, #8
 800fafe:	46bd      	mov	sp, r7
 800fb00:	bd80      	pop	{r7, pc}
 800fb02:	bf00      	nop
 800fb04:	0801a34c 	.word	0x0801a34c
 800fb08:	0801a910 	.word	0x0801a910
 800fb0c:	0801a390 	.word	0x0801a390

0800fb10 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b082      	sub	sp, #8
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
 800fb18:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d00e      	beq.n	800fb3e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	7d1b      	ldrb	r3, [r3, #20]
 800fb24:	2b01      	cmp	r3, #1
 800fb26:	d106      	bne.n	800fb36 <tcp_err+0x26>
 800fb28:	4b07      	ldr	r3, [pc, #28]	; (800fb48 <tcp_err+0x38>)
 800fb2a:	f640 020d 	movw	r2, #2061	; 0x80d
 800fb2e:	4907      	ldr	r1, [pc, #28]	; (800fb4c <tcp_err+0x3c>)
 800fb30:	4807      	ldr	r0, [pc, #28]	; (800fb50 <tcp_err+0x40>)
 800fb32:	f007 fa5f 	bl	8016ff4 <iprintf>
    pcb->errf = err;
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	683a      	ldr	r2, [r7, #0]
 800fb3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800fb3e:	bf00      	nop
 800fb40:	3708      	adds	r7, #8
 800fb42:	46bd      	mov	sp, r7
 800fb44:	bd80      	pop	{r7, pc}
 800fb46:	bf00      	nop
 800fb48:	0801a34c 	.word	0x0801a34c
 800fb4c:	0801a938 	.word	0x0801a938
 800fb50:	0801a390 	.word	0x0801a390

0800fb54 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800fb54:	b480      	push	{r7}
 800fb56:	b085      	sub	sp, #20
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	6078      	str	r0, [r7, #4]
 800fb5c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d008      	beq.n	800fb76 <tcp_accept+0x22>
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	7d1b      	ldrb	r3, [r3, #20]
 800fb68:	2b01      	cmp	r3, #1
 800fb6a:	d104      	bne.n	800fb76 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	683a      	ldr	r2, [r7, #0]
 800fb74:	619a      	str	r2, [r3, #24]
  }
}
 800fb76:	bf00      	nop
 800fb78:	3714      	adds	r7, #20
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb80:	4770      	bx	lr
	...

0800fb84 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b084      	sub	sp, #16
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	60f8      	str	r0, [r7, #12]
 800fb8c:	60b9      	str	r1, [r7, #8]
 800fb8e:	4613      	mov	r3, r2
 800fb90:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d107      	bne.n	800fba8 <tcp_poll+0x24>
 800fb98:	4b0e      	ldr	r3, [pc, #56]	; (800fbd4 <tcp_poll+0x50>)
 800fb9a:	f640 023d 	movw	r2, #2109	; 0x83d
 800fb9e:	490e      	ldr	r1, [pc, #56]	; (800fbd8 <tcp_poll+0x54>)
 800fba0:	480e      	ldr	r0, [pc, #56]	; (800fbdc <tcp_poll+0x58>)
 800fba2:	f007 fa27 	bl	8016ff4 <iprintf>
 800fba6:	e011      	b.n	800fbcc <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	7d1b      	ldrb	r3, [r3, #20]
 800fbac:	2b01      	cmp	r3, #1
 800fbae:	d106      	bne.n	800fbbe <tcp_poll+0x3a>
 800fbb0:	4b08      	ldr	r3, [pc, #32]	; (800fbd4 <tcp_poll+0x50>)
 800fbb2:	f640 023e 	movw	r2, #2110	; 0x83e
 800fbb6:	490a      	ldr	r1, [pc, #40]	; (800fbe0 <tcp_poll+0x5c>)
 800fbb8:	4808      	ldr	r0, [pc, #32]	; (800fbdc <tcp_poll+0x58>)
 800fbba:	f007 fa1b 	bl	8016ff4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	68ba      	ldr	r2, [r7, #8]
 800fbc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	79fa      	ldrb	r2, [r7, #7]
 800fbca:	775a      	strb	r2, [r3, #29]
}
 800fbcc:	3710      	adds	r7, #16
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	bd80      	pop	{r7, pc}
 800fbd2:	bf00      	nop
 800fbd4:	0801a34c 	.word	0x0801a34c
 800fbd8:	0801a960 	.word	0x0801a960
 800fbdc:	0801a390 	.word	0x0801a390
 800fbe0:	0801a978 	.word	0x0801a978

0800fbe4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	b082      	sub	sp, #8
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d107      	bne.n	800fc02 <tcp_pcb_purge+0x1e>
 800fbf2:	4b21      	ldr	r3, [pc, #132]	; (800fc78 <tcp_pcb_purge+0x94>)
 800fbf4:	f640 0251 	movw	r2, #2129	; 0x851
 800fbf8:	4920      	ldr	r1, [pc, #128]	; (800fc7c <tcp_pcb_purge+0x98>)
 800fbfa:	4821      	ldr	r0, [pc, #132]	; (800fc80 <tcp_pcb_purge+0x9c>)
 800fbfc:	f007 f9fa 	bl	8016ff4 <iprintf>
 800fc00:	e037      	b.n	800fc72 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	7d1b      	ldrb	r3, [r3, #20]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d033      	beq.n	800fc72 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800fc0e:	2b0a      	cmp	r3, #10
 800fc10:	d02f      	beq.n	800fc72 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800fc16:	2b01      	cmp	r3, #1
 800fc18:	d02b      	beq.n	800fc72 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d007      	beq.n	800fc32 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fc26:	4618      	mov	r0, r3
 800fc28:	f7fe f8d6 	bl	800ddd8 <pbuf_free>
      pcb->refused_data = NULL;
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	2200      	movs	r2, #0
 800fc30:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d002      	beq.n	800fc40 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800fc3a:	6878      	ldr	r0, [r7, #4]
 800fc3c:	f000 f986 	bl	800ff4c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fc46:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	f7ff fcdb 	bl	800f608 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc56:	4618      	mov	r0, r3
 800fc58:	f7ff fcd6 	bl	800f608 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	2200      	movs	r2, #0
 800fc60:	66da      	str	r2, [r3, #108]	; 0x6c
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800fc72:	3708      	adds	r7, #8
 800fc74:	46bd      	mov	sp, r7
 800fc76:	bd80      	pop	{r7, pc}
 800fc78:	0801a34c 	.word	0x0801a34c
 800fc7c:	0801a998 	.word	0x0801a998
 800fc80:	0801a390 	.word	0x0801a390

0800fc84 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b084      	sub	sp, #16
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
 800fc8c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800fc8e:	683b      	ldr	r3, [r7, #0]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d106      	bne.n	800fca2 <tcp_pcb_remove+0x1e>
 800fc94:	4b3e      	ldr	r3, [pc, #248]	; (800fd90 <tcp_pcb_remove+0x10c>)
 800fc96:	f640 0283 	movw	r2, #2179	; 0x883
 800fc9a:	493e      	ldr	r1, [pc, #248]	; (800fd94 <tcp_pcb_remove+0x110>)
 800fc9c:	483e      	ldr	r0, [pc, #248]	; (800fd98 <tcp_pcb_remove+0x114>)
 800fc9e:	f007 f9a9 	bl	8016ff4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d106      	bne.n	800fcb6 <tcp_pcb_remove+0x32>
 800fca8:	4b39      	ldr	r3, [pc, #228]	; (800fd90 <tcp_pcb_remove+0x10c>)
 800fcaa:	f640 0284 	movw	r2, #2180	; 0x884
 800fcae:	493b      	ldr	r1, [pc, #236]	; (800fd9c <tcp_pcb_remove+0x118>)
 800fcb0:	4839      	ldr	r0, [pc, #228]	; (800fd98 <tcp_pcb_remove+0x114>)
 800fcb2:	f007 f99f 	bl	8016ff4 <iprintf>

  TCP_RMV(pcblist, pcb);
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	683a      	ldr	r2, [r7, #0]
 800fcbc:	429a      	cmp	r2, r3
 800fcbe:	d105      	bne.n	800fccc <tcp_pcb_remove+0x48>
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	68da      	ldr	r2, [r3, #12]
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	601a      	str	r2, [r3, #0]
 800fcca:	e013      	b.n	800fcf4 <tcp_pcb_remove+0x70>
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	60fb      	str	r3, [r7, #12]
 800fcd2:	e00c      	b.n	800fcee <tcp_pcb_remove+0x6a>
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	68db      	ldr	r3, [r3, #12]
 800fcd8:	683a      	ldr	r2, [r7, #0]
 800fcda:	429a      	cmp	r2, r3
 800fcdc:	d104      	bne.n	800fce8 <tcp_pcb_remove+0x64>
 800fcde:	683b      	ldr	r3, [r7, #0]
 800fce0:	68da      	ldr	r2, [r3, #12]
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	60da      	str	r2, [r3, #12]
 800fce6:	e005      	b.n	800fcf4 <tcp_pcb_remove+0x70>
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	68db      	ldr	r3, [r3, #12]
 800fcec:	60fb      	str	r3, [r7, #12]
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d1ef      	bne.n	800fcd4 <tcp_pcb_remove+0x50>
 800fcf4:	683b      	ldr	r3, [r7, #0]
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800fcfa:	6838      	ldr	r0, [r7, #0]
 800fcfc:	f7ff ff72 	bl	800fbe4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800fd00:	683b      	ldr	r3, [r7, #0]
 800fd02:	7d1b      	ldrb	r3, [r3, #20]
 800fd04:	2b0a      	cmp	r3, #10
 800fd06:	d013      	beq.n	800fd30 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800fd08:	683b      	ldr	r3, [r7, #0]
 800fd0a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800fd0c:	2b01      	cmp	r3, #1
 800fd0e:	d00f      	beq.n	800fd30 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800fd10:	683b      	ldr	r3, [r7, #0]
 800fd12:	8b5b      	ldrh	r3, [r3, #26]
 800fd14:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d009      	beq.n	800fd30 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800fd1c:	683b      	ldr	r3, [r7, #0]
 800fd1e:	8b5b      	ldrh	r3, [r3, #26]
 800fd20:	f043 0302 	orr.w	r3, r3, #2
 800fd24:	b29a      	uxth	r2, r3
 800fd26:	683b      	ldr	r3, [r7, #0]
 800fd28:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fd2a:	6838      	ldr	r0, [r7, #0]
 800fd2c:	f003 fbc2 	bl	80134b4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800fd30:	683b      	ldr	r3, [r7, #0]
 800fd32:	7d1b      	ldrb	r3, [r3, #20]
 800fd34:	2b01      	cmp	r3, #1
 800fd36:	d020      	beq.n	800fd7a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800fd38:	683b      	ldr	r3, [r7, #0]
 800fd3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d006      	beq.n	800fd4e <tcp_pcb_remove+0xca>
 800fd40:	4b13      	ldr	r3, [pc, #76]	; (800fd90 <tcp_pcb_remove+0x10c>)
 800fd42:	f640 0293 	movw	r2, #2195	; 0x893
 800fd46:	4916      	ldr	r1, [pc, #88]	; (800fda0 <tcp_pcb_remove+0x11c>)
 800fd48:	4813      	ldr	r0, [pc, #76]	; (800fd98 <tcp_pcb_remove+0x114>)
 800fd4a:	f007 f953 	bl	8016ff4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800fd4e:	683b      	ldr	r3, [r7, #0]
 800fd50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d006      	beq.n	800fd64 <tcp_pcb_remove+0xe0>
 800fd56:	4b0e      	ldr	r3, [pc, #56]	; (800fd90 <tcp_pcb_remove+0x10c>)
 800fd58:	f640 0294 	movw	r2, #2196	; 0x894
 800fd5c:	4911      	ldr	r1, [pc, #68]	; (800fda4 <tcp_pcb_remove+0x120>)
 800fd5e:	480e      	ldr	r0, [pc, #56]	; (800fd98 <tcp_pcb_remove+0x114>)
 800fd60:	f007 f948 	bl	8016ff4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800fd64:	683b      	ldr	r3, [r7, #0]
 800fd66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d006      	beq.n	800fd7a <tcp_pcb_remove+0xf6>
 800fd6c:	4b08      	ldr	r3, [pc, #32]	; (800fd90 <tcp_pcb_remove+0x10c>)
 800fd6e:	f640 0296 	movw	r2, #2198	; 0x896
 800fd72:	490d      	ldr	r1, [pc, #52]	; (800fda8 <tcp_pcb_remove+0x124>)
 800fd74:	4808      	ldr	r0, [pc, #32]	; (800fd98 <tcp_pcb_remove+0x114>)
 800fd76:	f007 f93d 	bl	8016ff4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800fd7a:	683b      	ldr	r3, [r7, #0]
 800fd7c:	2200      	movs	r2, #0
 800fd7e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800fd80:	683b      	ldr	r3, [r7, #0]
 800fd82:	2200      	movs	r2, #0
 800fd84:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800fd86:	bf00      	nop
 800fd88:	3710      	adds	r7, #16
 800fd8a:	46bd      	mov	sp, r7
 800fd8c:	bd80      	pop	{r7, pc}
 800fd8e:	bf00      	nop
 800fd90:	0801a34c 	.word	0x0801a34c
 800fd94:	0801a9b4 	.word	0x0801a9b4
 800fd98:	0801a390 	.word	0x0801a390
 800fd9c:	0801a9d0 	.word	0x0801a9d0
 800fda0:	0801a9f0 	.word	0x0801a9f0
 800fda4:	0801aa08 	.word	0x0801aa08
 800fda8:	0801aa24 	.word	0x0801aa24

0800fdac <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b082      	sub	sp, #8
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d106      	bne.n	800fdc8 <tcp_next_iss+0x1c>
 800fdba:	4b0a      	ldr	r3, [pc, #40]	; (800fde4 <tcp_next_iss+0x38>)
 800fdbc:	f640 02af 	movw	r2, #2223	; 0x8af
 800fdc0:	4909      	ldr	r1, [pc, #36]	; (800fde8 <tcp_next_iss+0x3c>)
 800fdc2:	480a      	ldr	r0, [pc, #40]	; (800fdec <tcp_next_iss+0x40>)
 800fdc4:	f007 f916 	bl	8016ff4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800fdc8:	4b09      	ldr	r3, [pc, #36]	; (800fdf0 <tcp_next_iss+0x44>)
 800fdca:	681a      	ldr	r2, [r3, #0]
 800fdcc:	4b09      	ldr	r3, [pc, #36]	; (800fdf4 <tcp_next_iss+0x48>)
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	4413      	add	r3, r2
 800fdd2:	4a07      	ldr	r2, [pc, #28]	; (800fdf0 <tcp_next_iss+0x44>)
 800fdd4:	6013      	str	r3, [r2, #0]
  return iss;
 800fdd6:	4b06      	ldr	r3, [pc, #24]	; (800fdf0 <tcp_next_iss+0x44>)
 800fdd8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800fdda:	4618      	mov	r0, r3
 800fddc:	3708      	adds	r7, #8
 800fdde:	46bd      	mov	sp, r7
 800fde0:	bd80      	pop	{r7, pc}
 800fde2:	bf00      	nop
 800fde4:	0801a34c 	.word	0x0801a34c
 800fde8:	0801aa3c 	.word	0x0801aa3c
 800fdec:	0801a390 	.word	0x0801a390
 800fdf0:	20000144 	.word	0x20000144
 800fdf4:	20016dc0 	.word	0x20016dc0

0800fdf8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	b086      	sub	sp, #24
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	4603      	mov	r3, r0
 800fe00:	60b9      	str	r1, [r7, #8]
 800fe02:	607a      	str	r2, [r7, #4]
 800fe04:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d106      	bne.n	800fe1a <tcp_eff_send_mss_netif+0x22>
 800fe0c:	4b14      	ldr	r3, [pc, #80]	; (800fe60 <tcp_eff_send_mss_netif+0x68>)
 800fe0e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800fe12:	4914      	ldr	r1, [pc, #80]	; (800fe64 <tcp_eff_send_mss_netif+0x6c>)
 800fe14:	4814      	ldr	r0, [pc, #80]	; (800fe68 <tcp_eff_send_mss_netif+0x70>)
 800fe16:	f007 f8ed 	bl	8016ff4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800fe1a:	68bb      	ldr	r3, [r7, #8]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d101      	bne.n	800fe24 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800fe20:	89fb      	ldrh	r3, [r7, #14]
 800fe22:	e019      	b.n	800fe58 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800fe24:	68bb      	ldr	r3, [r7, #8]
 800fe26:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fe28:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800fe2a:	8afb      	ldrh	r3, [r7, #22]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d012      	beq.n	800fe56 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800fe30:	2328      	movs	r3, #40	; 0x28
 800fe32:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800fe34:	8afa      	ldrh	r2, [r7, #22]
 800fe36:	8abb      	ldrh	r3, [r7, #20]
 800fe38:	429a      	cmp	r2, r3
 800fe3a:	d904      	bls.n	800fe46 <tcp_eff_send_mss_netif+0x4e>
 800fe3c:	8afa      	ldrh	r2, [r7, #22]
 800fe3e:	8abb      	ldrh	r3, [r7, #20]
 800fe40:	1ad3      	subs	r3, r2, r3
 800fe42:	b29b      	uxth	r3, r3
 800fe44:	e000      	b.n	800fe48 <tcp_eff_send_mss_netif+0x50>
 800fe46:	2300      	movs	r3, #0
 800fe48:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800fe4a:	8a7a      	ldrh	r2, [r7, #18]
 800fe4c:	89fb      	ldrh	r3, [r7, #14]
 800fe4e:	4293      	cmp	r3, r2
 800fe50:	bf28      	it	cs
 800fe52:	4613      	movcs	r3, r2
 800fe54:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800fe56:	89fb      	ldrh	r3, [r7, #14]
}
 800fe58:	4618      	mov	r0, r3
 800fe5a:	3718      	adds	r7, #24
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	bd80      	pop	{r7, pc}
 800fe60:	0801a34c 	.word	0x0801a34c
 800fe64:	0801aa58 	.word	0x0801aa58
 800fe68:	0801a390 	.word	0x0801a390

0800fe6c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b084      	sub	sp, #16
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	6078      	str	r0, [r7, #4]
 800fe74:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800fe76:	683b      	ldr	r3, [r7, #0]
 800fe78:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d119      	bne.n	800feb4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800fe80:	4b10      	ldr	r3, [pc, #64]	; (800fec4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800fe82:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800fe86:	4910      	ldr	r1, [pc, #64]	; (800fec8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800fe88:	4810      	ldr	r0, [pc, #64]	; (800fecc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800fe8a:	f007 f8b3 	bl	8016ff4 <iprintf>

  while (pcb != NULL) {
 800fe8e:	e011      	b.n	800feb4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	681a      	ldr	r2, [r3, #0]
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	429a      	cmp	r2, r3
 800fe9a:	d108      	bne.n	800feae <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	68db      	ldr	r3, [r3, #12]
 800fea0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800fea2:	68f8      	ldr	r0, [r7, #12]
 800fea4:	f7fe fd20 	bl	800e8e8 <tcp_abort>
      pcb = next;
 800fea8:	68bb      	ldr	r3, [r7, #8]
 800feaa:	60fb      	str	r3, [r7, #12]
 800feac:	e002      	b.n	800feb4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	68db      	ldr	r3, [r3, #12]
 800feb2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d1ea      	bne.n	800fe90 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800feba:	bf00      	nop
 800febc:	bf00      	nop
 800febe:	3710      	adds	r7, #16
 800fec0:	46bd      	mov	sp, r7
 800fec2:	bd80      	pop	{r7, pc}
 800fec4:	0801a34c 	.word	0x0801a34c
 800fec8:	0801aa80 	.word	0x0801aa80
 800fecc:	0801a390 	.word	0x0801a390

0800fed0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b084      	sub	sp, #16
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
 800fed8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d02a      	beq.n	800ff36 <tcp_netif_ip_addr_changed+0x66>
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d026      	beq.n	800ff36 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800fee8:	4b15      	ldr	r3, [pc, #84]	; (800ff40 <tcp_netif_ip_addr_changed+0x70>)
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	4619      	mov	r1, r3
 800feee:	6878      	ldr	r0, [r7, #4]
 800fef0:	f7ff ffbc 	bl	800fe6c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800fef4:	4b13      	ldr	r3, [pc, #76]	; (800ff44 <tcp_netif_ip_addr_changed+0x74>)
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	4619      	mov	r1, r3
 800fefa:	6878      	ldr	r0, [r7, #4]
 800fefc:	f7ff ffb6 	bl	800fe6c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800ff00:	683b      	ldr	r3, [r7, #0]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d017      	beq.n	800ff36 <tcp_netif_ip_addr_changed+0x66>
 800ff06:	683b      	ldr	r3, [r7, #0]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d013      	beq.n	800ff36 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ff0e:	4b0e      	ldr	r3, [pc, #56]	; (800ff48 <tcp_netif_ip_addr_changed+0x78>)
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	60fb      	str	r3, [r7, #12]
 800ff14:	e00c      	b.n	800ff30 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	681a      	ldr	r2, [r3, #0]
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	429a      	cmp	r2, r3
 800ff20:	d103      	bne.n	800ff2a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ff22:	683b      	ldr	r3, [r7, #0]
 800ff24:	681a      	ldr	r2, [r3, #0]
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	68db      	ldr	r3, [r3, #12]
 800ff2e:	60fb      	str	r3, [r7, #12]
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d1ef      	bne.n	800ff16 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800ff36:	bf00      	nop
 800ff38:	3710      	adds	r7, #16
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	bd80      	pop	{r7, pc}
 800ff3e:	bf00      	nop
 800ff40:	20016dbc 	.word	0x20016dbc
 800ff44:	20016dc8 	.word	0x20016dc8
 800ff48:	20016dc4 	.word	0x20016dc4

0800ff4c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b082      	sub	sp, #8
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d007      	beq.n	800ff6c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff60:	4618      	mov	r0, r3
 800ff62:	f7ff fb51 	bl	800f608 <tcp_segs_free>
    pcb->ooseq = NULL;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	2200      	movs	r2, #0
 800ff6a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800ff6c:	bf00      	nop
 800ff6e:	3708      	adds	r7, #8
 800ff70:	46bd      	mov	sp, r7
 800ff72:	bd80      	pop	{r7, pc}

0800ff74 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800ff74:	b590      	push	{r4, r7, lr}
 800ff76:	b08d      	sub	sp, #52	; 0x34
 800ff78:	af04      	add	r7, sp, #16
 800ff7a:	6078      	str	r0, [r7, #4]
 800ff7c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d105      	bne.n	800ff90 <tcp_input+0x1c>
 800ff84:	4b9b      	ldr	r3, [pc, #620]	; (80101f4 <tcp_input+0x280>)
 800ff86:	2283      	movs	r2, #131	; 0x83
 800ff88:	499b      	ldr	r1, [pc, #620]	; (80101f8 <tcp_input+0x284>)
 800ff8a:	489c      	ldr	r0, [pc, #624]	; (80101fc <tcp_input+0x288>)
 800ff8c:	f007 f832 	bl	8016ff4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	685b      	ldr	r3, [r3, #4]
 800ff94:	4a9a      	ldr	r2, [pc, #616]	; (8010200 <tcp_input+0x28c>)
 800ff96:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	895b      	ldrh	r3, [r3, #10]
 800ff9c:	2b13      	cmp	r3, #19
 800ff9e:	f240 83c4 	bls.w	801072a <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ffa2:	4b98      	ldr	r3, [pc, #608]	; (8010204 <tcp_input+0x290>)
 800ffa4:	695b      	ldr	r3, [r3, #20]
 800ffa6:	4a97      	ldr	r2, [pc, #604]	; (8010204 <tcp_input+0x290>)
 800ffa8:	6812      	ldr	r2, [r2, #0]
 800ffaa:	4611      	mov	r1, r2
 800ffac:	4618      	mov	r0, r3
 800ffae:	f006 f86b 	bl	8016088 <ip4_addr_isbroadcast_u32>
 800ffb2:	4603      	mov	r3, r0
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	f040 83ba 	bne.w	801072e <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ffba:	4b92      	ldr	r3, [pc, #584]	; (8010204 <tcp_input+0x290>)
 800ffbc:	695b      	ldr	r3, [r3, #20]
 800ffbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ffc2:	2be0      	cmp	r3, #224	; 0xe0
 800ffc4:	f000 83b3 	beq.w	801072e <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800ffc8:	4b8d      	ldr	r3, [pc, #564]	; (8010200 <tcp_input+0x28c>)
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	899b      	ldrh	r3, [r3, #12]
 800ffce:	b29b      	uxth	r3, r3
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	f7fc fb6f 	bl	800c6b4 <lwip_htons>
 800ffd6:	4603      	mov	r3, r0
 800ffd8:	0b1b      	lsrs	r3, r3, #12
 800ffda:	b29b      	uxth	r3, r3
 800ffdc:	b2db      	uxtb	r3, r3
 800ffde:	009b      	lsls	r3, r3, #2
 800ffe0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800ffe2:	7cbb      	ldrb	r3, [r7, #18]
 800ffe4:	2b13      	cmp	r3, #19
 800ffe6:	f240 83a4 	bls.w	8010732 <tcp_input+0x7be>
 800ffea:	7cbb      	ldrb	r3, [r7, #18]
 800ffec:	b29a      	uxth	r2, r3
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	891b      	ldrh	r3, [r3, #8]
 800fff2:	429a      	cmp	r2, r3
 800fff4:	f200 839d 	bhi.w	8010732 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800fff8:	7cbb      	ldrb	r3, [r7, #18]
 800fffa:	b29b      	uxth	r3, r3
 800fffc:	3b14      	subs	r3, #20
 800fffe:	b29a      	uxth	r2, r3
 8010000:	4b81      	ldr	r3, [pc, #516]	; (8010208 <tcp_input+0x294>)
 8010002:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010004:	4b81      	ldr	r3, [pc, #516]	; (801020c <tcp_input+0x298>)
 8010006:	2200      	movs	r2, #0
 8010008:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	895a      	ldrh	r2, [r3, #10]
 801000e:	7cbb      	ldrb	r3, [r7, #18]
 8010010:	b29b      	uxth	r3, r3
 8010012:	429a      	cmp	r2, r3
 8010014:	d309      	bcc.n	801002a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8010016:	4b7c      	ldr	r3, [pc, #496]	; (8010208 <tcp_input+0x294>)
 8010018:	881a      	ldrh	r2, [r3, #0]
 801001a:	4b7d      	ldr	r3, [pc, #500]	; (8010210 <tcp_input+0x29c>)
 801001c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801001e:	7cbb      	ldrb	r3, [r7, #18]
 8010020:	4619      	mov	r1, r3
 8010022:	6878      	ldr	r0, [r7, #4]
 8010024:	f7fd fe52 	bl	800dccc <pbuf_remove_header>
 8010028:	e04e      	b.n	80100c8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d105      	bne.n	801003e <tcp_input+0xca>
 8010032:	4b70      	ldr	r3, [pc, #448]	; (80101f4 <tcp_input+0x280>)
 8010034:	22c2      	movs	r2, #194	; 0xc2
 8010036:	4977      	ldr	r1, [pc, #476]	; (8010214 <tcp_input+0x2a0>)
 8010038:	4870      	ldr	r0, [pc, #448]	; (80101fc <tcp_input+0x288>)
 801003a:	f006 ffdb 	bl	8016ff4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801003e:	2114      	movs	r1, #20
 8010040:	6878      	ldr	r0, [r7, #4]
 8010042:	f7fd fe43 	bl	800dccc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	895a      	ldrh	r2, [r3, #10]
 801004a:	4b71      	ldr	r3, [pc, #452]	; (8010210 <tcp_input+0x29c>)
 801004c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801004e:	4b6e      	ldr	r3, [pc, #440]	; (8010208 <tcp_input+0x294>)
 8010050:	881a      	ldrh	r2, [r3, #0]
 8010052:	4b6f      	ldr	r3, [pc, #444]	; (8010210 <tcp_input+0x29c>)
 8010054:	881b      	ldrh	r3, [r3, #0]
 8010056:	1ad3      	subs	r3, r2, r3
 8010058:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801005a:	4b6d      	ldr	r3, [pc, #436]	; (8010210 <tcp_input+0x29c>)
 801005c:	881b      	ldrh	r3, [r3, #0]
 801005e:	4619      	mov	r1, r3
 8010060:	6878      	ldr	r0, [r7, #4]
 8010062:	f7fd fe33 	bl	800dccc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	895b      	ldrh	r3, [r3, #10]
 801006c:	8a3a      	ldrh	r2, [r7, #16]
 801006e:	429a      	cmp	r2, r3
 8010070:	f200 8361 	bhi.w	8010736 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	685b      	ldr	r3, [r3, #4]
 801007a:	4a64      	ldr	r2, [pc, #400]	; (801020c <tcp_input+0x298>)
 801007c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	8a3a      	ldrh	r2, [r7, #16]
 8010084:	4611      	mov	r1, r2
 8010086:	4618      	mov	r0, r3
 8010088:	f7fd fe20 	bl	800dccc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	891a      	ldrh	r2, [r3, #8]
 8010090:	8a3b      	ldrh	r3, [r7, #16]
 8010092:	1ad3      	subs	r3, r2, r3
 8010094:	b29a      	uxth	r2, r3
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	895b      	ldrh	r3, [r3, #10]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d005      	beq.n	80100ae <tcp_input+0x13a>
 80100a2:	4b54      	ldr	r3, [pc, #336]	; (80101f4 <tcp_input+0x280>)
 80100a4:	22df      	movs	r2, #223	; 0xdf
 80100a6:	495c      	ldr	r1, [pc, #368]	; (8010218 <tcp_input+0x2a4>)
 80100a8:	4854      	ldr	r0, [pc, #336]	; (80101fc <tcp_input+0x288>)
 80100aa:	f006 ffa3 	bl	8016ff4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	891a      	ldrh	r2, [r3, #8]
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	891b      	ldrh	r3, [r3, #8]
 80100b8:	429a      	cmp	r2, r3
 80100ba:	d005      	beq.n	80100c8 <tcp_input+0x154>
 80100bc:	4b4d      	ldr	r3, [pc, #308]	; (80101f4 <tcp_input+0x280>)
 80100be:	22e0      	movs	r2, #224	; 0xe0
 80100c0:	4956      	ldr	r1, [pc, #344]	; (801021c <tcp_input+0x2a8>)
 80100c2:	484e      	ldr	r0, [pc, #312]	; (80101fc <tcp_input+0x288>)
 80100c4:	f006 ff96 	bl	8016ff4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80100c8:	4b4d      	ldr	r3, [pc, #308]	; (8010200 <tcp_input+0x28c>)
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	881b      	ldrh	r3, [r3, #0]
 80100ce:	b29b      	uxth	r3, r3
 80100d0:	4a4b      	ldr	r2, [pc, #300]	; (8010200 <tcp_input+0x28c>)
 80100d2:	6814      	ldr	r4, [r2, #0]
 80100d4:	4618      	mov	r0, r3
 80100d6:	f7fc faed 	bl	800c6b4 <lwip_htons>
 80100da:	4603      	mov	r3, r0
 80100dc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80100de:	4b48      	ldr	r3, [pc, #288]	; (8010200 <tcp_input+0x28c>)
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	885b      	ldrh	r3, [r3, #2]
 80100e4:	b29b      	uxth	r3, r3
 80100e6:	4a46      	ldr	r2, [pc, #280]	; (8010200 <tcp_input+0x28c>)
 80100e8:	6814      	ldr	r4, [r2, #0]
 80100ea:	4618      	mov	r0, r3
 80100ec:	f7fc fae2 	bl	800c6b4 <lwip_htons>
 80100f0:	4603      	mov	r3, r0
 80100f2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80100f4:	4b42      	ldr	r3, [pc, #264]	; (8010200 <tcp_input+0x28c>)
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	685b      	ldr	r3, [r3, #4]
 80100fa:	4a41      	ldr	r2, [pc, #260]	; (8010200 <tcp_input+0x28c>)
 80100fc:	6814      	ldr	r4, [r2, #0]
 80100fe:	4618      	mov	r0, r3
 8010100:	f7fc faed 	bl	800c6de <lwip_htonl>
 8010104:	4603      	mov	r3, r0
 8010106:	6063      	str	r3, [r4, #4]
 8010108:	6863      	ldr	r3, [r4, #4]
 801010a:	4a45      	ldr	r2, [pc, #276]	; (8010220 <tcp_input+0x2ac>)
 801010c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801010e:	4b3c      	ldr	r3, [pc, #240]	; (8010200 <tcp_input+0x28c>)
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	689b      	ldr	r3, [r3, #8]
 8010114:	4a3a      	ldr	r2, [pc, #232]	; (8010200 <tcp_input+0x28c>)
 8010116:	6814      	ldr	r4, [r2, #0]
 8010118:	4618      	mov	r0, r3
 801011a:	f7fc fae0 	bl	800c6de <lwip_htonl>
 801011e:	4603      	mov	r3, r0
 8010120:	60a3      	str	r3, [r4, #8]
 8010122:	68a3      	ldr	r3, [r4, #8]
 8010124:	4a3f      	ldr	r2, [pc, #252]	; (8010224 <tcp_input+0x2b0>)
 8010126:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010128:	4b35      	ldr	r3, [pc, #212]	; (8010200 <tcp_input+0x28c>)
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	89db      	ldrh	r3, [r3, #14]
 801012e:	b29b      	uxth	r3, r3
 8010130:	4a33      	ldr	r2, [pc, #204]	; (8010200 <tcp_input+0x28c>)
 8010132:	6814      	ldr	r4, [r2, #0]
 8010134:	4618      	mov	r0, r3
 8010136:	f7fc fabd 	bl	800c6b4 <lwip_htons>
 801013a:	4603      	mov	r3, r0
 801013c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801013e:	4b30      	ldr	r3, [pc, #192]	; (8010200 <tcp_input+0x28c>)
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	899b      	ldrh	r3, [r3, #12]
 8010144:	b29b      	uxth	r3, r3
 8010146:	4618      	mov	r0, r3
 8010148:	f7fc fab4 	bl	800c6b4 <lwip_htons>
 801014c:	4603      	mov	r3, r0
 801014e:	b2db      	uxtb	r3, r3
 8010150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010154:	b2da      	uxtb	r2, r3
 8010156:	4b34      	ldr	r3, [pc, #208]	; (8010228 <tcp_input+0x2b4>)
 8010158:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	891a      	ldrh	r2, [r3, #8]
 801015e:	4b33      	ldr	r3, [pc, #204]	; (801022c <tcp_input+0x2b8>)
 8010160:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8010162:	4b31      	ldr	r3, [pc, #196]	; (8010228 <tcp_input+0x2b4>)
 8010164:	781b      	ldrb	r3, [r3, #0]
 8010166:	f003 0303 	and.w	r3, r3, #3
 801016a:	2b00      	cmp	r3, #0
 801016c:	d00c      	beq.n	8010188 <tcp_input+0x214>
    tcplen++;
 801016e:	4b2f      	ldr	r3, [pc, #188]	; (801022c <tcp_input+0x2b8>)
 8010170:	881b      	ldrh	r3, [r3, #0]
 8010172:	3301      	adds	r3, #1
 8010174:	b29a      	uxth	r2, r3
 8010176:	4b2d      	ldr	r3, [pc, #180]	; (801022c <tcp_input+0x2b8>)
 8010178:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	891a      	ldrh	r2, [r3, #8]
 801017e:	4b2b      	ldr	r3, [pc, #172]	; (801022c <tcp_input+0x2b8>)
 8010180:	881b      	ldrh	r3, [r3, #0]
 8010182:	429a      	cmp	r2, r3
 8010184:	f200 82d9 	bhi.w	801073a <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010188:	2300      	movs	r3, #0
 801018a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801018c:	4b28      	ldr	r3, [pc, #160]	; (8010230 <tcp_input+0x2bc>)
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	61fb      	str	r3, [r7, #28]
 8010192:	e09d      	b.n	80102d0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8010194:	69fb      	ldr	r3, [r7, #28]
 8010196:	7d1b      	ldrb	r3, [r3, #20]
 8010198:	2b00      	cmp	r3, #0
 801019a:	d105      	bne.n	80101a8 <tcp_input+0x234>
 801019c:	4b15      	ldr	r3, [pc, #84]	; (80101f4 <tcp_input+0x280>)
 801019e:	22fb      	movs	r2, #251	; 0xfb
 80101a0:	4924      	ldr	r1, [pc, #144]	; (8010234 <tcp_input+0x2c0>)
 80101a2:	4816      	ldr	r0, [pc, #88]	; (80101fc <tcp_input+0x288>)
 80101a4:	f006 ff26 	bl	8016ff4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80101a8:	69fb      	ldr	r3, [r7, #28]
 80101aa:	7d1b      	ldrb	r3, [r3, #20]
 80101ac:	2b0a      	cmp	r3, #10
 80101ae:	d105      	bne.n	80101bc <tcp_input+0x248>
 80101b0:	4b10      	ldr	r3, [pc, #64]	; (80101f4 <tcp_input+0x280>)
 80101b2:	22fc      	movs	r2, #252	; 0xfc
 80101b4:	4920      	ldr	r1, [pc, #128]	; (8010238 <tcp_input+0x2c4>)
 80101b6:	4811      	ldr	r0, [pc, #68]	; (80101fc <tcp_input+0x288>)
 80101b8:	f006 ff1c 	bl	8016ff4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80101bc:	69fb      	ldr	r3, [r7, #28]
 80101be:	7d1b      	ldrb	r3, [r3, #20]
 80101c0:	2b01      	cmp	r3, #1
 80101c2:	d105      	bne.n	80101d0 <tcp_input+0x25c>
 80101c4:	4b0b      	ldr	r3, [pc, #44]	; (80101f4 <tcp_input+0x280>)
 80101c6:	22fd      	movs	r2, #253	; 0xfd
 80101c8:	491c      	ldr	r1, [pc, #112]	; (801023c <tcp_input+0x2c8>)
 80101ca:	480c      	ldr	r0, [pc, #48]	; (80101fc <tcp_input+0x288>)
 80101cc:	f006 ff12 	bl	8016ff4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80101d0:	69fb      	ldr	r3, [r7, #28]
 80101d2:	7a1b      	ldrb	r3, [r3, #8]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d033      	beq.n	8010240 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80101d8:	69fb      	ldr	r3, [r7, #28]
 80101da:	7a1a      	ldrb	r2, [r3, #8]
 80101dc:	4b09      	ldr	r3, [pc, #36]	; (8010204 <tcp_input+0x290>)
 80101de:	685b      	ldr	r3, [r3, #4]
 80101e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80101e4:	3301      	adds	r3, #1
 80101e6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80101e8:	429a      	cmp	r2, r3
 80101ea:	d029      	beq.n	8010240 <tcp_input+0x2cc>
      prev = pcb;
 80101ec:	69fb      	ldr	r3, [r7, #28]
 80101ee:	61bb      	str	r3, [r7, #24]
      continue;
 80101f0:	e06b      	b.n	80102ca <tcp_input+0x356>
 80101f2:	bf00      	nop
 80101f4:	0801aab4 	.word	0x0801aab4
 80101f8:	0801aae8 	.word	0x0801aae8
 80101fc:	0801ab00 	.word	0x0801ab00
 8010200:	200016b8 	.word	0x200016b8
 8010204:	2000d7b8 	.word	0x2000d7b8
 8010208:	200016bc 	.word	0x200016bc
 801020c:	200016c0 	.word	0x200016c0
 8010210:	200016be 	.word	0x200016be
 8010214:	0801ab28 	.word	0x0801ab28
 8010218:	0801ab38 	.word	0x0801ab38
 801021c:	0801ab44 	.word	0x0801ab44
 8010220:	200016c8 	.word	0x200016c8
 8010224:	200016cc 	.word	0x200016cc
 8010228:	200016d4 	.word	0x200016d4
 801022c:	200016d2 	.word	0x200016d2
 8010230:	20016dbc 	.word	0x20016dbc
 8010234:	0801ab64 	.word	0x0801ab64
 8010238:	0801ab8c 	.word	0x0801ab8c
 801023c:	0801abb8 	.word	0x0801abb8
    }

    if (pcb->remote_port == tcphdr->src &&
 8010240:	69fb      	ldr	r3, [r7, #28]
 8010242:	8b1a      	ldrh	r2, [r3, #24]
 8010244:	4b94      	ldr	r3, [pc, #592]	; (8010498 <tcp_input+0x524>)
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	881b      	ldrh	r3, [r3, #0]
 801024a:	b29b      	uxth	r3, r3
 801024c:	429a      	cmp	r2, r3
 801024e:	d13a      	bne.n	80102c6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010250:	69fb      	ldr	r3, [r7, #28]
 8010252:	8ada      	ldrh	r2, [r3, #22]
 8010254:	4b90      	ldr	r3, [pc, #576]	; (8010498 <tcp_input+0x524>)
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	885b      	ldrh	r3, [r3, #2]
 801025a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801025c:	429a      	cmp	r2, r3
 801025e:	d132      	bne.n	80102c6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010260:	69fb      	ldr	r3, [r7, #28]
 8010262:	685a      	ldr	r2, [r3, #4]
 8010264:	4b8d      	ldr	r3, [pc, #564]	; (801049c <tcp_input+0x528>)
 8010266:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010268:	429a      	cmp	r2, r3
 801026a:	d12c      	bne.n	80102c6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801026c:	69fb      	ldr	r3, [r7, #28]
 801026e:	681a      	ldr	r2, [r3, #0]
 8010270:	4b8a      	ldr	r3, [pc, #552]	; (801049c <tcp_input+0x528>)
 8010272:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010274:	429a      	cmp	r2, r3
 8010276:	d126      	bne.n	80102c6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010278:	69fb      	ldr	r3, [r7, #28]
 801027a:	68db      	ldr	r3, [r3, #12]
 801027c:	69fa      	ldr	r2, [r7, #28]
 801027e:	429a      	cmp	r2, r3
 8010280:	d106      	bne.n	8010290 <tcp_input+0x31c>
 8010282:	4b87      	ldr	r3, [pc, #540]	; (80104a0 <tcp_input+0x52c>)
 8010284:	f240 120d 	movw	r2, #269	; 0x10d
 8010288:	4986      	ldr	r1, [pc, #536]	; (80104a4 <tcp_input+0x530>)
 801028a:	4887      	ldr	r0, [pc, #540]	; (80104a8 <tcp_input+0x534>)
 801028c:	f006 feb2 	bl	8016ff4 <iprintf>
      if (prev != NULL) {
 8010290:	69bb      	ldr	r3, [r7, #24]
 8010292:	2b00      	cmp	r3, #0
 8010294:	d00a      	beq.n	80102ac <tcp_input+0x338>
        prev->next = pcb->next;
 8010296:	69fb      	ldr	r3, [r7, #28]
 8010298:	68da      	ldr	r2, [r3, #12]
 801029a:	69bb      	ldr	r3, [r7, #24]
 801029c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801029e:	4b83      	ldr	r3, [pc, #524]	; (80104ac <tcp_input+0x538>)
 80102a0:	681a      	ldr	r2, [r3, #0]
 80102a2:	69fb      	ldr	r3, [r7, #28]
 80102a4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80102a6:	4a81      	ldr	r2, [pc, #516]	; (80104ac <tcp_input+0x538>)
 80102a8:	69fb      	ldr	r3, [r7, #28]
 80102aa:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80102ac:	69fb      	ldr	r3, [r7, #28]
 80102ae:	68db      	ldr	r3, [r3, #12]
 80102b0:	69fa      	ldr	r2, [r7, #28]
 80102b2:	429a      	cmp	r2, r3
 80102b4:	d111      	bne.n	80102da <tcp_input+0x366>
 80102b6:	4b7a      	ldr	r3, [pc, #488]	; (80104a0 <tcp_input+0x52c>)
 80102b8:	f240 1215 	movw	r2, #277	; 0x115
 80102bc:	497c      	ldr	r1, [pc, #496]	; (80104b0 <tcp_input+0x53c>)
 80102be:	487a      	ldr	r0, [pc, #488]	; (80104a8 <tcp_input+0x534>)
 80102c0:	f006 fe98 	bl	8016ff4 <iprintf>
      break;
 80102c4:	e009      	b.n	80102da <tcp_input+0x366>
    }
    prev = pcb;
 80102c6:	69fb      	ldr	r3, [r7, #28]
 80102c8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80102ca:	69fb      	ldr	r3, [r7, #28]
 80102cc:	68db      	ldr	r3, [r3, #12]
 80102ce:	61fb      	str	r3, [r7, #28]
 80102d0:	69fb      	ldr	r3, [r7, #28]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	f47f af5e 	bne.w	8010194 <tcp_input+0x220>
 80102d8:	e000      	b.n	80102dc <tcp_input+0x368>
      break;
 80102da:	bf00      	nop
  }

  if (pcb == NULL) {
 80102dc:	69fb      	ldr	r3, [r7, #28]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	f040 8095 	bne.w	801040e <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80102e4:	4b73      	ldr	r3, [pc, #460]	; (80104b4 <tcp_input+0x540>)
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	61fb      	str	r3, [r7, #28]
 80102ea:	e03f      	b.n	801036c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80102ec:	69fb      	ldr	r3, [r7, #28]
 80102ee:	7d1b      	ldrb	r3, [r3, #20]
 80102f0:	2b0a      	cmp	r3, #10
 80102f2:	d006      	beq.n	8010302 <tcp_input+0x38e>
 80102f4:	4b6a      	ldr	r3, [pc, #424]	; (80104a0 <tcp_input+0x52c>)
 80102f6:	f240 121f 	movw	r2, #287	; 0x11f
 80102fa:	496f      	ldr	r1, [pc, #444]	; (80104b8 <tcp_input+0x544>)
 80102fc:	486a      	ldr	r0, [pc, #424]	; (80104a8 <tcp_input+0x534>)
 80102fe:	f006 fe79 	bl	8016ff4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010302:	69fb      	ldr	r3, [r7, #28]
 8010304:	7a1b      	ldrb	r3, [r3, #8]
 8010306:	2b00      	cmp	r3, #0
 8010308:	d009      	beq.n	801031e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801030a:	69fb      	ldr	r3, [r7, #28]
 801030c:	7a1a      	ldrb	r2, [r3, #8]
 801030e:	4b63      	ldr	r3, [pc, #396]	; (801049c <tcp_input+0x528>)
 8010310:	685b      	ldr	r3, [r3, #4]
 8010312:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010316:	3301      	adds	r3, #1
 8010318:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801031a:	429a      	cmp	r2, r3
 801031c:	d122      	bne.n	8010364 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801031e:	69fb      	ldr	r3, [r7, #28]
 8010320:	8b1a      	ldrh	r2, [r3, #24]
 8010322:	4b5d      	ldr	r3, [pc, #372]	; (8010498 <tcp_input+0x524>)
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	881b      	ldrh	r3, [r3, #0]
 8010328:	b29b      	uxth	r3, r3
 801032a:	429a      	cmp	r2, r3
 801032c:	d11b      	bne.n	8010366 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801032e:	69fb      	ldr	r3, [r7, #28]
 8010330:	8ada      	ldrh	r2, [r3, #22]
 8010332:	4b59      	ldr	r3, [pc, #356]	; (8010498 <tcp_input+0x524>)
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	885b      	ldrh	r3, [r3, #2]
 8010338:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801033a:	429a      	cmp	r2, r3
 801033c:	d113      	bne.n	8010366 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801033e:	69fb      	ldr	r3, [r7, #28]
 8010340:	685a      	ldr	r2, [r3, #4]
 8010342:	4b56      	ldr	r3, [pc, #344]	; (801049c <tcp_input+0x528>)
 8010344:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8010346:	429a      	cmp	r2, r3
 8010348:	d10d      	bne.n	8010366 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801034a:	69fb      	ldr	r3, [r7, #28]
 801034c:	681a      	ldr	r2, [r3, #0]
 801034e:	4b53      	ldr	r3, [pc, #332]	; (801049c <tcp_input+0x528>)
 8010350:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010352:	429a      	cmp	r2, r3
 8010354:	d107      	bne.n	8010366 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8010356:	69f8      	ldr	r0, [r7, #28]
 8010358:	f000 fb54 	bl	8010a04 <tcp_timewait_input>
        }
        pbuf_free(p);
 801035c:	6878      	ldr	r0, [r7, #4]
 801035e:	f7fd fd3b 	bl	800ddd8 <pbuf_free>
        return;
 8010362:	e1f0      	b.n	8010746 <tcp_input+0x7d2>
        continue;
 8010364:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010366:	69fb      	ldr	r3, [r7, #28]
 8010368:	68db      	ldr	r3, [r3, #12]
 801036a:	61fb      	str	r3, [r7, #28]
 801036c:	69fb      	ldr	r3, [r7, #28]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d1bc      	bne.n	80102ec <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010372:	2300      	movs	r3, #0
 8010374:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010376:	4b51      	ldr	r3, [pc, #324]	; (80104bc <tcp_input+0x548>)
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	617b      	str	r3, [r7, #20]
 801037c:	e02a      	b.n	80103d4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801037e:	697b      	ldr	r3, [r7, #20]
 8010380:	7a1b      	ldrb	r3, [r3, #8]
 8010382:	2b00      	cmp	r3, #0
 8010384:	d00c      	beq.n	80103a0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010386:	697b      	ldr	r3, [r7, #20]
 8010388:	7a1a      	ldrb	r2, [r3, #8]
 801038a:	4b44      	ldr	r3, [pc, #272]	; (801049c <tcp_input+0x528>)
 801038c:	685b      	ldr	r3, [r3, #4]
 801038e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010392:	3301      	adds	r3, #1
 8010394:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010396:	429a      	cmp	r2, r3
 8010398:	d002      	beq.n	80103a0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801039a:	697b      	ldr	r3, [r7, #20]
 801039c:	61bb      	str	r3, [r7, #24]
        continue;
 801039e:	e016      	b.n	80103ce <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80103a0:	697b      	ldr	r3, [r7, #20]
 80103a2:	8ada      	ldrh	r2, [r3, #22]
 80103a4:	4b3c      	ldr	r3, [pc, #240]	; (8010498 <tcp_input+0x524>)
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	885b      	ldrh	r3, [r3, #2]
 80103aa:	b29b      	uxth	r3, r3
 80103ac:	429a      	cmp	r2, r3
 80103ae:	d10c      	bne.n	80103ca <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80103b0:	697b      	ldr	r3, [r7, #20]
 80103b2:	681a      	ldr	r2, [r3, #0]
 80103b4:	4b39      	ldr	r3, [pc, #228]	; (801049c <tcp_input+0x528>)
 80103b6:	695b      	ldr	r3, [r3, #20]
 80103b8:	429a      	cmp	r2, r3
 80103ba:	d00f      	beq.n	80103dc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80103bc:	697b      	ldr	r3, [r7, #20]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d00d      	beq.n	80103de <tcp_input+0x46a>
 80103c2:	697b      	ldr	r3, [r7, #20]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d009      	beq.n	80103de <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80103ca:	697b      	ldr	r3, [r7, #20]
 80103cc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80103ce:	697b      	ldr	r3, [r7, #20]
 80103d0:	68db      	ldr	r3, [r3, #12]
 80103d2:	617b      	str	r3, [r7, #20]
 80103d4:	697b      	ldr	r3, [r7, #20]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d1d1      	bne.n	801037e <tcp_input+0x40a>
 80103da:	e000      	b.n	80103de <tcp_input+0x46a>
            break;
 80103dc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80103de:	697b      	ldr	r3, [r7, #20]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d014      	beq.n	801040e <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80103e4:	69bb      	ldr	r3, [r7, #24]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d00a      	beq.n	8010400 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80103ea:	697b      	ldr	r3, [r7, #20]
 80103ec:	68da      	ldr	r2, [r3, #12]
 80103ee:	69bb      	ldr	r3, [r7, #24]
 80103f0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80103f2:	4b32      	ldr	r3, [pc, #200]	; (80104bc <tcp_input+0x548>)
 80103f4:	681a      	ldr	r2, [r3, #0]
 80103f6:	697b      	ldr	r3, [r7, #20]
 80103f8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80103fa:	4a30      	ldr	r2, [pc, #192]	; (80104bc <tcp_input+0x548>)
 80103fc:	697b      	ldr	r3, [r7, #20]
 80103fe:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010400:	6978      	ldr	r0, [r7, #20]
 8010402:	f000 fa01 	bl	8010808 <tcp_listen_input>
      }
      pbuf_free(p);
 8010406:	6878      	ldr	r0, [r7, #4]
 8010408:	f7fd fce6 	bl	800ddd8 <pbuf_free>
      return;
 801040c:	e19b      	b.n	8010746 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801040e:	69fb      	ldr	r3, [r7, #28]
 8010410:	2b00      	cmp	r3, #0
 8010412:	f000 8160 	beq.w	80106d6 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8010416:	4b2a      	ldr	r3, [pc, #168]	; (80104c0 <tcp_input+0x54c>)
 8010418:	2200      	movs	r2, #0
 801041a:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	891a      	ldrh	r2, [r3, #8]
 8010420:	4b27      	ldr	r3, [pc, #156]	; (80104c0 <tcp_input+0x54c>)
 8010422:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8010424:	4a26      	ldr	r2, [pc, #152]	; (80104c0 <tcp_input+0x54c>)
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801042a:	4b1b      	ldr	r3, [pc, #108]	; (8010498 <tcp_input+0x524>)
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	4a24      	ldr	r2, [pc, #144]	; (80104c0 <tcp_input+0x54c>)
 8010430:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8010432:	4b24      	ldr	r3, [pc, #144]	; (80104c4 <tcp_input+0x550>)
 8010434:	2200      	movs	r2, #0
 8010436:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010438:	4b23      	ldr	r3, [pc, #140]	; (80104c8 <tcp_input+0x554>)
 801043a:	2200      	movs	r2, #0
 801043c:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801043e:	4b23      	ldr	r3, [pc, #140]	; (80104cc <tcp_input+0x558>)
 8010440:	2200      	movs	r2, #0
 8010442:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010444:	4b22      	ldr	r3, [pc, #136]	; (80104d0 <tcp_input+0x55c>)
 8010446:	781b      	ldrb	r3, [r3, #0]
 8010448:	f003 0308 	and.w	r3, r3, #8
 801044c:	2b00      	cmp	r3, #0
 801044e:	d006      	beq.n	801045e <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	7b5b      	ldrb	r3, [r3, #13]
 8010454:	f043 0301 	orr.w	r3, r3, #1
 8010458:	b2da      	uxtb	r2, r3
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801045e:	69fb      	ldr	r3, [r7, #28]
 8010460:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010462:	2b00      	cmp	r3, #0
 8010464:	d038      	beq.n	80104d8 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010466:	69f8      	ldr	r0, [r7, #28]
 8010468:	f7ff f852 	bl	800f510 <tcp_process_refused_data>
 801046c:	4603      	mov	r3, r0
 801046e:	f113 0f0d 	cmn.w	r3, #13
 8010472:	d007      	beq.n	8010484 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010474:	69fb      	ldr	r3, [r7, #28]
 8010476:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010478:	2b00      	cmp	r3, #0
 801047a:	d02d      	beq.n	80104d8 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801047c:	4b15      	ldr	r3, [pc, #84]	; (80104d4 <tcp_input+0x560>)
 801047e:	881b      	ldrh	r3, [r3, #0]
 8010480:	2b00      	cmp	r3, #0
 8010482:	d029      	beq.n	80104d8 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8010484:	69fb      	ldr	r3, [r7, #28]
 8010486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010488:	2b00      	cmp	r3, #0
 801048a:	f040 8104 	bne.w	8010696 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801048e:	69f8      	ldr	r0, [r7, #28]
 8010490:	f003 fe16 	bl	80140c0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8010494:	e0ff      	b.n	8010696 <tcp_input+0x722>
 8010496:	bf00      	nop
 8010498:	200016b8 	.word	0x200016b8
 801049c:	2000d7b8 	.word	0x2000d7b8
 80104a0:	0801aab4 	.word	0x0801aab4
 80104a4:	0801abe0 	.word	0x0801abe0
 80104a8:	0801ab00 	.word	0x0801ab00
 80104ac:	20016dbc 	.word	0x20016dbc
 80104b0:	0801ac0c 	.word	0x0801ac0c
 80104b4:	20016dcc 	.word	0x20016dcc
 80104b8:	0801ac38 	.word	0x0801ac38
 80104bc:	20016dc4 	.word	0x20016dc4
 80104c0:	200016a8 	.word	0x200016a8
 80104c4:	200016d8 	.word	0x200016d8
 80104c8:	200016d5 	.word	0x200016d5
 80104cc:	200016d0 	.word	0x200016d0
 80104d0:	200016d4 	.word	0x200016d4
 80104d4:	200016d2 	.word	0x200016d2
      }
    }
    tcp_input_pcb = pcb;
 80104d8:	4a9c      	ldr	r2, [pc, #624]	; (801074c <tcp_input+0x7d8>)
 80104da:	69fb      	ldr	r3, [r7, #28]
 80104dc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80104de:	69f8      	ldr	r0, [r7, #28]
 80104e0:	f000 fb0a 	bl	8010af8 <tcp_process>
 80104e4:	4603      	mov	r3, r0
 80104e6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80104e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80104ec:	f113 0f0d 	cmn.w	r3, #13
 80104f0:	f000 80d3 	beq.w	801069a <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 80104f4:	4b96      	ldr	r3, [pc, #600]	; (8010750 <tcp_input+0x7dc>)
 80104f6:	781b      	ldrb	r3, [r3, #0]
 80104f8:	f003 0308 	and.w	r3, r3, #8
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d015      	beq.n	801052c <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8010500:	69fb      	ldr	r3, [r7, #28]
 8010502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010506:	2b00      	cmp	r3, #0
 8010508:	d008      	beq.n	801051c <tcp_input+0x5a8>
 801050a:	69fb      	ldr	r3, [r7, #28]
 801050c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010510:	69fa      	ldr	r2, [r7, #28]
 8010512:	6912      	ldr	r2, [r2, #16]
 8010514:	f06f 010d 	mvn.w	r1, #13
 8010518:	4610      	mov	r0, r2
 801051a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801051c:	69f9      	ldr	r1, [r7, #28]
 801051e:	488d      	ldr	r0, [pc, #564]	; (8010754 <tcp_input+0x7e0>)
 8010520:	f7ff fbb0 	bl	800fc84 <tcp_pcb_remove>
        tcp_free(pcb);
 8010524:	69f8      	ldr	r0, [r7, #28]
 8010526:	f7fd fef7 	bl	800e318 <tcp_free>
 801052a:	e0c1      	b.n	80106b0 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 801052c:	2300      	movs	r3, #0
 801052e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8010530:	4b89      	ldr	r3, [pc, #548]	; (8010758 <tcp_input+0x7e4>)
 8010532:	881b      	ldrh	r3, [r3, #0]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d01d      	beq.n	8010574 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8010538:	4b87      	ldr	r3, [pc, #540]	; (8010758 <tcp_input+0x7e4>)
 801053a:	881b      	ldrh	r3, [r3, #0]
 801053c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801053e:	69fb      	ldr	r3, [r7, #28]
 8010540:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010544:	2b00      	cmp	r3, #0
 8010546:	d00a      	beq.n	801055e <tcp_input+0x5ea>
 8010548:	69fb      	ldr	r3, [r7, #28]
 801054a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801054e:	69fa      	ldr	r2, [r7, #28]
 8010550:	6910      	ldr	r0, [r2, #16]
 8010552:	89fa      	ldrh	r2, [r7, #14]
 8010554:	69f9      	ldr	r1, [r7, #28]
 8010556:	4798      	blx	r3
 8010558:	4603      	mov	r3, r0
 801055a:	74fb      	strb	r3, [r7, #19]
 801055c:	e001      	b.n	8010562 <tcp_input+0x5ee>
 801055e:	2300      	movs	r3, #0
 8010560:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010562:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010566:	f113 0f0d 	cmn.w	r3, #13
 801056a:	f000 8098 	beq.w	801069e <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 801056e:	4b7a      	ldr	r3, [pc, #488]	; (8010758 <tcp_input+0x7e4>)
 8010570:	2200      	movs	r2, #0
 8010572:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8010574:	69f8      	ldr	r0, [r7, #28]
 8010576:	f000 f907 	bl	8010788 <tcp_input_delayed_close>
 801057a:	4603      	mov	r3, r0
 801057c:	2b00      	cmp	r3, #0
 801057e:	f040 8090 	bne.w	80106a2 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8010582:	4b76      	ldr	r3, [pc, #472]	; (801075c <tcp_input+0x7e8>)
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d041      	beq.n	801060e <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801058a:	69fb      	ldr	r3, [r7, #28]
 801058c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801058e:	2b00      	cmp	r3, #0
 8010590:	d006      	beq.n	80105a0 <tcp_input+0x62c>
 8010592:	4b73      	ldr	r3, [pc, #460]	; (8010760 <tcp_input+0x7ec>)
 8010594:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010598:	4972      	ldr	r1, [pc, #456]	; (8010764 <tcp_input+0x7f0>)
 801059a:	4873      	ldr	r0, [pc, #460]	; (8010768 <tcp_input+0x7f4>)
 801059c:	f006 fd2a 	bl	8016ff4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80105a0:	69fb      	ldr	r3, [r7, #28]
 80105a2:	8b5b      	ldrh	r3, [r3, #26]
 80105a4:	f003 0310 	and.w	r3, r3, #16
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d008      	beq.n	80105be <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80105ac:	4b6b      	ldr	r3, [pc, #428]	; (801075c <tcp_input+0x7e8>)
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	4618      	mov	r0, r3
 80105b2:	f7fd fc11 	bl	800ddd8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80105b6:	69f8      	ldr	r0, [r7, #28]
 80105b8:	f7fe f996 	bl	800e8e8 <tcp_abort>
            goto aborted;
 80105bc:	e078      	b.n	80106b0 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80105be:	69fb      	ldr	r3, [r7, #28]
 80105c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d00c      	beq.n	80105e2 <tcp_input+0x66e>
 80105c8:	69fb      	ldr	r3, [r7, #28]
 80105ca:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80105ce:	69fb      	ldr	r3, [r7, #28]
 80105d0:	6918      	ldr	r0, [r3, #16]
 80105d2:	4b62      	ldr	r3, [pc, #392]	; (801075c <tcp_input+0x7e8>)
 80105d4:	681a      	ldr	r2, [r3, #0]
 80105d6:	2300      	movs	r3, #0
 80105d8:	69f9      	ldr	r1, [r7, #28]
 80105da:	47a0      	blx	r4
 80105dc:	4603      	mov	r3, r0
 80105de:	74fb      	strb	r3, [r7, #19]
 80105e0:	e008      	b.n	80105f4 <tcp_input+0x680>
 80105e2:	4b5e      	ldr	r3, [pc, #376]	; (801075c <tcp_input+0x7e8>)
 80105e4:	681a      	ldr	r2, [r3, #0]
 80105e6:	2300      	movs	r3, #0
 80105e8:	69f9      	ldr	r1, [r7, #28]
 80105ea:	2000      	movs	r0, #0
 80105ec:	f7ff f884 	bl	800f6f8 <tcp_recv_null>
 80105f0:	4603      	mov	r3, r0
 80105f2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80105f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80105f8:	f113 0f0d 	cmn.w	r3, #13
 80105fc:	d053      	beq.n	80106a6 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80105fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010602:	2b00      	cmp	r3, #0
 8010604:	d003      	beq.n	801060e <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8010606:	4b55      	ldr	r3, [pc, #340]	; (801075c <tcp_input+0x7e8>)
 8010608:	681a      	ldr	r2, [r3, #0]
 801060a:	69fb      	ldr	r3, [r7, #28]
 801060c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801060e:	4b50      	ldr	r3, [pc, #320]	; (8010750 <tcp_input+0x7dc>)
 8010610:	781b      	ldrb	r3, [r3, #0]
 8010612:	f003 0320 	and.w	r3, r3, #32
 8010616:	2b00      	cmp	r3, #0
 8010618:	d030      	beq.n	801067c <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 801061a:	69fb      	ldr	r3, [r7, #28]
 801061c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801061e:	2b00      	cmp	r3, #0
 8010620:	d009      	beq.n	8010636 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8010622:	69fb      	ldr	r3, [r7, #28]
 8010624:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010626:	7b5a      	ldrb	r2, [r3, #13]
 8010628:	69fb      	ldr	r3, [r7, #28]
 801062a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801062c:	f042 0220 	orr.w	r2, r2, #32
 8010630:	b2d2      	uxtb	r2, r2
 8010632:	735a      	strb	r2, [r3, #13]
 8010634:	e022      	b.n	801067c <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010636:	69fb      	ldr	r3, [r7, #28]
 8010638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801063a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801063e:	d005      	beq.n	801064c <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8010640:	69fb      	ldr	r3, [r7, #28]
 8010642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010644:	3301      	adds	r3, #1
 8010646:	b29a      	uxth	r2, r3
 8010648:	69fb      	ldr	r3, [r7, #28]
 801064a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801064c:	69fb      	ldr	r3, [r7, #28]
 801064e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010652:	2b00      	cmp	r3, #0
 8010654:	d00b      	beq.n	801066e <tcp_input+0x6fa>
 8010656:	69fb      	ldr	r3, [r7, #28]
 8010658:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801065c:	69fb      	ldr	r3, [r7, #28]
 801065e:	6918      	ldr	r0, [r3, #16]
 8010660:	2300      	movs	r3, #0
 8010662:	2200      	movs	r2, #0
 8010664:	69f9      	ldr	r1, [r7, #28]
 8010666:	47a0      	blx	r4
 8010668:	4603      	mov	r3, r0
 801066a:	74fb      	strb	r3, [r7, #19]
 801066c:	e001      	b.n	8010672 <tcp_input+0x6fe>
 801066e:	2300      	movs	r3, #0
 8010670:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010672:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010676:	f113 0f0d 	cmn.w	r3, #13
 801067a:	d016      	beq.n	80106aa <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801067c:	4b33      	ldr	r3, [pc, #204]	; (801074c <tcp_input+0x7d8>)
 801067e:	2200      	movs	r2, #0
 8010680:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8010682:	69f8      	ldr	r0, [r7, #28]
 8010684:	f000 f880 	bl	8010788 <tcp_input_delayed_close>
 8010688:	4603      	mov	r3, r0
 801068a:	2b00      	cmp	r3, #0
 801068c:	d10f      	bne.n	80106ae <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801068e:	69f8      	ldr	r0, [r7, #28]
 8010690:	f002 ff10 	bl	80134b4 <tcp_output>
 8010694:	e00c      	b.n	80106b0 <tcp_input+0x73c>
        goto aborted;
 8010696:	bf00      	nop
 8010698:	e00a      	b.n	80106b0 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801069a:	bf00      	nop
 801069c:	e008      	b.n	80106b0 <tcp_input+0x73c>
              goto aborted;
 801069e:	bf00      	nop
 80106a0:	e006      	b.n	80106b0 <tcp_input+0x73c>
          goto aborted;
 80106a2:	bf00      	nop
 80106a4:	e004      	b.n	80106b0 <tcp_input+0x73c>
            goto aborted;
 80106a6:	bf00      	nop
 80106a8:	e002      	b.n	80106b0 <tcp_input+0x73c>
              goto aborted;
 80106aa:	bf00      	nop
 80106ac:	e000      	b.n	80106b0 <tcp_input+0x73c>
          goto aborted;
 80106ae:	bf00      	nop
    tcp_input_pcb = NULL;
 80106b0:	4b26      	ldr	r3, [pc, #152]	; (801074c <tcp_input+0x7d8>)
 80106b2:	2200      	movs	r2, #0
 80106b4:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80106b6:	4b29      	ldr	r3, [pc, #164]	; (801075c <tcp_input+0x7e8>)
 80106b8:	2200      	movs	r2, #0
 80106ba:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80106bc:	4b2b      	ldr	r3, [pc, #172]	; (801076c <tcp_input+0x7f8>)
 80106be:	685b      	ldr	r3, [r3, #4]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d03f      	beq.n	8010744 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 80106c4:	4b29      	ldr	r3, [pc, #164]	; (801076c <tcp_input+0x7f8>)
 80106c6:	685b      	ldr	r3, [r3, #4]
 80106c8:	4618      	mov	r0, r3
 80106ca:	f7fd fb85 	bl	800ddd8 <pbuf_free>
      inseg.p = NULL;
 80106ce:	4b27      	ldr	r3, [pc, #156]	; (801076c <tcp_input+0x7f8>)
 80106d0:	2200      	movs	r2, #0
 80106d2:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80106d4:	e036      	b.n	8010744 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80106d6:	4b26      	ldr	r3, [pc, #152]	; (8010770 <tcp_input+0x7fc>)
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	899b      	ldrh	r3, [r3, #12]
 80106dc:	b29b      	uxth	r3, r3
 80106de:	4618      	mov	r0, r3
 80106e0:	f7fb ffe8 	bl	800c6b4 <lwip_htons>
 80106e4:	4603      	mov	r3, r0
 80106e6:	b2db      	uxtb	r3, r3
 80106e8:	f003 0304 	and.w	r3, r3, #4
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d118      	bne.n	8010722 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80106f0:	4b20      	ldr	r3, [pc, #128]	; (8010774 <tcp_input+0x800>)
 80106f2:	6819      	ldr	r1, [r3, #0]
 80106f4:	4b20      	ldr	r3, [pc, #128]	; (8010778 <tcp_input+0x804>)
 80106f6:	881b      	ldrh	r3, [r3, #0]
 80106f8:	461a      	mov	r2, r3
 80106fa:	4b20      	ldr	r3, [pc, #128]	; (801077c <tcp_input+0x808>)
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010700:	4b1b      	ldr	r3, [pc, #108]	; (8010770 <tcp_input+0x7fc>)
 8010702:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010704:	885b      	ldrh	r3, [r3, #2]
 8010706:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010708:	4a19      	ldr	r2, [pc, #100]	; (8010770 <tcp_input+0x7fc>)
 801070a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801070c:	8812      	ldrh	r2, [r2, #0]
 801070e:	b292      	uxth	r2, r2
 8010710:	9202      	str	r2, [sp, #8]
 8010712:	9301      	str	r3, [sp, #4]
 8010714:	4b1a      	ldr	r3, [pc, #104]	; (8010780 <tcp_input+0x80c>)
 8010716:	9300      	str	r3, [sp, #0]
 8010718:	4b1a      	ldr	r3, [pc, #104]	; (8010784 <tcp_input+0x810>)
 801071a:	4602      	mov	r2, r0
 801071c:	2000      	movs	r0, #0
 801071e:	f003 fc7d 	bl	801401c <tcp_rst>
    pbuf_free(p);
 8010722:	6878      	ldr	r0, [r7, #4]
 8010724:	f7fd fb58 	bl	800ddd8 <pbuf_free>
  return;
 8010728:	e00c      	b.n	8010744 <tcp_input+0x7d0>
    goto dropped;
 801072a:	bf00      	nop
 801072c:	e006      	b.n	801073c <tcp_input+0x7c8>
    goto dropped;
 801072e:	bf00      	nop
 8010730:	e004      	b.n	801073c <tcp_input+0x7c8>
    goto dropped;
 8010732:	bf00      	nop
 8010734:	e002      	b.n	801073c <tcp_input+0x7c8>
      goto dropped;
 8010736:	bf00      	nop
 8010738:	e000      	b.n	801073c <tcp_input+0x7c8>
      goto dropped;
 801073a:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801073c:	6878      	ldr	r0, [r7, #4]
 801073e:	f7fd fb4b 	bl	800ddd8 <pbuf_free>
 8010742:	e000      	b.n	8010746 <tcp_input+0x7d2>
  return;
 8010744:	bf00      	nop
}
 8010746:	3724      	adds	r7, #36	; 0x24
 8010748:	46bd      	mov	sp, r7
 801074a:	bd90      	pop	{r4, r7, pc}
 801074c:	20016dd0 	.word	0x20016dd0
 8010750:	200016d5 	.word	0x200016d5
 8010754:	20016dbc 	.word	0x20016dbc
 8010758:	200016d0 	.word	0x200016d0
 801075c:	200016d8 	.word	0x200016d8
 8010760:	0801aab4 	.word	0x0801aab4
 8010764:	0801ac68 	.word	0x0801ac68
 8010768:	0801ab00 	.word	0x0801ab00
 801076c:	200016a8 	.word	0x200016a8
 8010770:	200016b8 	.word	0x200016b8
 8010774:	200016cc 	.word	0x200016cc
 8010778:	200016d2 	.word	0x200016d2
 801077c:	200016c8 	.word	0x200016c8
 8010780:	2000d7c8 	.word	0x2000d7c8
 8010784:	2000d7cc 	.word	0x2000d7cc

08010788 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8010788:	b580      	push	{r7, lr}
 801078a:	b082      	sub	sp, #8
 801078c:	af00      	add	r7, sp, #0
 801078e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d106      	bne.n	80107a4 <tcp_input_delayed_close+0x1c>
 8010796:	4b17      	ldr	r3, [pc, #92]	; (80107f4 <tcp_input_delayed_close+0x6c>)
 8010798:	f240 225a 	movw	r2, #602	; 0x25a
 801079c:	4916      	ldr	r1, [pc, #88]	; (80107f8 <tcp_input_delayed_close+0x70>)
 801079e:	4817      	ldr	r0, [pc, #92]	; (80107fc <tcp_input_delayed_close+0x74>)
 80107a0:	f006 fc28 	bl	8016ff4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80107a4:	4b16      	ldr	r3, [pc, #88]	; (8010800 <tcp_input_delayed_close+0x78>)
 80107a6:	781b      	ldrb	r3, [r3, #0]
 80107a8:	f003 0310 	and.w	r3, r3, #16
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d01c      	beq.n	80107ea <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	8b5b      	ldrh	r3, [r3, #26]
 80107b4:	f003 0310 	and.w	r3, r3, #16
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d10d      	bne.n	80107d8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d008      	beq.n	80107d8 <tcp_input_delayed_close+0x50>
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80107cc:	687a      	ldr	r2, [r7, #4]
 80107ce:	6912      	ldr	r2, [r2, #16]
 80107d0:	f06f 010e 	mvn.w	r1, #14
 80107d4:	4610      	mov	r0, r2
 80107d6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80107d8:	6879      	ldr	r1, [r7, #4]
 80107da:	480a      	ldr	r0, [pc, #40]	; (8010804 <tcp_input_delayed_close+0x7c>)
 80107dc:	f7ff fa52 	bl	800fc84 <tcp_pcb_remove>
    tcp_free(pcb);
 80107e0:	6878      	ldr	r0, [r7, #4]
 80107e2:	f7fd fd99 	bl	800e318 <tcp_free>
    return 1;
 80107e6:	2301      	movs	r3, #1
 80107e8:	e000      	b.n	80107ec <tcp_input_delayed_close+0x64>
  }
  return 0;
 80107ea:	2300      	movs	r3, #0
}
 80107ec:	4618      	mov	r0, r3
 80107ee:	3708      	adds	r7, #8
 80107f0:	46bd      	mov	sp, r7
 80107f2:	bd80      	pop	{r7, pc}
 80107f4:	0801aab4 	.word	0x0801aab4
 80107f8:	0801ac84 	.word	0x0801ac84
 80107fc:	0801ab00 	.word	0x0801ab00
 8010800:	200016d5 	.word	0x200016d5
 8010804:	20016dbc 	.word	0x20016dbc

08010808 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8010808:	b590      	push	{r4, r7, lr}
 801080a:	b08b      	sub	sp, #44	; 0x2c
 801080c:	af04      	add	r7, sp, #16
 801080e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8010810:	4b6f      	ldr	r3, [pc, #444]	; (80109d0 <tcp_listen_input+0x1c8>)
 8010812:	781b      	ldrb	r3, [r3, #0]
 8010814:	f003 0304 	and.w	r3, r3, #4
 8010818:	2b00      	cmp	r3, #0
 801081a:	f040 80d2 	bne.w	80109c2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	2b00      	cmp	r3, #0
 8010822:	d106      	bne.n	8010832 <tcp_listen_input+0x2a>
 8010824:	4b6b      	ldr	r3, [pc, #428]	; (80109d4 <tcp_listen_input+0x1cc>)
 8010826:	f240 2281 	movw	r2, #641	; 0x281
 801082a:	496b      	ldr	r1, [pc, #428]	; (80109d8 <tcp_listen_input+0x1d0>)
 801082c:	486b      	ldr	r0, [pc, #428]	; (80109dc <tcp_listen_input+0x1d4>)
 801082e:	f006 fbe1 	bl	8016ff4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8010832:	4b67      	ldr	r3, [pc, #412]	; (80109d0 <tcp_listen_input+0x1c8>)
 8010834:	781b      	ldrb	r3, [r3, #0]
 8010836:	f003 0310 	and.w	r3, r3, #16
 801083a:	2b00      	cmp	r3, #0
 801083c:	d019      	beq.n	8010872 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801083e:	4b68      	ldr	r3, [pc, #416]	; (80109e0 <tcp_listen_input+0x1d8>)
 8010840:	6819      	ldr	r1, [r3, #0]
 8010842:	4b68      	ldr	r3, [pc, #416]	; (80109e4 <tcp_listen_input+0x1dc>)
 8010844:	881b      	ldrh	r3, [r3, #0]
 8010846:	461a      	mov	r2, r3
 8010848:	4b67      	ldr	r3, [pc, #412]	; (80109e8 <tcp_listen_input+0x1e0>)
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801084e:	4b67      	ldr	r3, [pc, #412]	; (80109ec <tcp_listen_input+0x1e4>)
 8010850:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010852:	885b      	ldrh	r3, [r3, #2]
 8010854:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010856:	4a65      	ldr	r2, [pc, #404]	; (80109ec <tcp_listen_input+0x1e4>)
 8010858:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801085a:	8812      	ldrh	r2, [r2, #0]
 801085c:	b292      	uxth	r2, r2
 801085e:	9202      	str	r2, [sp, #8]
 8010860:	9301      	str	r3, [sp, #4]
 8010862:	4b63      	ldr	r3, [pc, #396]	; (80109f0 <tcp_listen_input+0x1e8>)
 8010864:	9300      	str	r3, [sp, #0]
 8010866:	4b63      	ldr	r3, [pc, #396]	; (80109f4 <tcp_listen_input+0x1ec>)
 8010868:	4602      	mov	r2, r0
 801086a:	6878      	ldr	r0, [r7, #4]
 801086c:	f003 fbd6 	bl	801401c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8010870:	e0a9      	b.n	80109c6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8010872:	4b57      	ldr	r3, [pc, #348]	; (80109d0 <tcp_listen_input+0x1c8>)
 8010874:	781b      	ldrb	r3, [r3, #0]
 8010876:	f003 0302 	and.w	r3, r3, #2
 801087a:	2b00      	cmp	r3, #0
 801087c:	f000 80a3 	beq.w	80109c6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	7d5b      	ldrb	r3, [r3, #21]
 8010884:	4618      	mov	r0, r3
 8010886:	f7ff f85b 	bl	800f940 <tcp_alloc>
 801088a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801088c:	697b      	ldr	r3, [r7, #20]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d111      	bne.n	80108b6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	699b      	ldr	r3, [r3, #24]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d00a      	beq.n	80108b0 <tcp_listen_input+0xa8>
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	699b      	ldr	r3, [r3, #24]
 801089e:	687a      	ldr	r2, [r7, #4]
 80108a0:	6910      	ldr	r0, [r2, #16]
 80108a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80108a6:	2100      	movs	r1, #0
 80108a8:	4798      	blx	r3
 80108aa:	4603      	mov	r3, r0
 80108ac:	73bb      	strb	r3, [r7, #14]
      return;
 80108ae:	e08b      	b.n	80109c8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80108b0:	23f0      	movs	r3, #240	; 0xf0
 80108b2:	73bb      	strb	r3, [r7, #14]
      return;
 80108b4:	e088      	b.n	80109c8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80108b6:	4b50      	ldr	r3, [pc, #320]	; (80109f8 <tcp_listen_input+0x1f0>)
 80108b8:	695a      	ldr	r2, [r3, #20]
 80108ba:	697b      	ldr	r3, [r7, #20]
 80108bc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80108be:	4b4e      	ldr	r3, [pc, #312]	; (80109f8 <tcp_listen_input+0x1f0>)
 80108c0:	691a      	ldr	r2, [r3, #16]
 80108c2:	697b      	ldr	r3, [r7, #20]
 80108c4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	8ada      	ldrh	r2, [r3, #22]
 80108ca:	697b      	ldr	r3, [r7, #20]
 80108cc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80108ce:	4b47      	ldr	r3, [pc, #284]	; (80109ec <tcp_listen_input+0x1e4>)
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	881b      	ldrh	r3, [r3, #0]
 80108d4:	b29a      	uxth	r2, r3
 80108d6:	697b      	ldr	r3, [r7, #20]
 80108d8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80108da:	697b      	ldr	r3, [r7, #20]
 80108dc:	2203      	movs	r2, #3
 80108de:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80108e0:	4b41      	ldr	r3, [pc, #260]	; (80109e8 <tcp_listen_input+0x1e0>)
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	1c5a      	adds	r2, r3, #1
 80108e6:	697b      	ldr	r3, [r7, #20]
 80108e8:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80108ea:	697b      	ldr	r3, [r7, #20]
 80108ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80108ee:	697b      	ldr	r3, [r7, #20]
 80108f0:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80108f2:	6978      	ldr	r0, [r7, #20]
 80108f4:	f7ff fa5a 	bl	800fdac <tcp_next_iss>
 80108f8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80108fa:	697b      	ldr	r3, [r7, #20]
 80108fc:	693a      	ldr	r2, [r7, #16]
 80108fe:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8010900:	697b      	ldr	r3, [r7, #20]
 8010902:	693a      	ldr	r2, [r7, #16]
 8010904:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8010906:	697b      	ldr	r3, [r7, #20]
 8010908:	693a      	ldr	r2, [r7, #16]
 801090a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801090c:	697b      	ldr	r3, [r7, #20]
 801090e:	693a      	ldr	r2, [r7, #16]
 8010910:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8010912:	4b35      	ldr	r3, [pc, #212]	; (80109e8 <tcp_listen_input+0x1e0>)
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	1e5a      	subs	r2, r3, #1
 8010918:	697b      	ldr	r3, [r7, #20]
 801091a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	691a      	ldr	r2, [r3, #16]
 8010920:	697b      	ldr	r3, [r7, #20]
 8010922:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8010924:	697b      	ldr	r3, [r7, #20]
 8010926:	687a      	ldr	r2, [r7, #4]
 8010928:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	7a5b      	ldrb	r3, [r3, #9]
 801092e:	f003 030c 	and.w	r3, r3, #12
 8010932:	b2da      	uxtb	r2, r3
 8010934:	697b      	ldr	r3, [r7, #20]
 8010936:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	7a1a      	ldrb	r2, [r3, #8]
 801093c:	697b      	ldr	r3, [r7, #20]
 801093e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8010940:	4b2e      	ldr	r3, [pc, #184]	; (80109fc <tcp_listen_input+0x1f4>)
 8010942:	681a      	ldr	r2, [r3, #0]
 8010944:	697b      	ldr	r3, [r7, #20]
 8010946:	60da      	str	r2, [r3, #12]
 8010948:	4a2c      	ldr	r2, [pc, #176]	; (80109fc <tcp_listen_input+0x1f4>)
 801094a:	697b      	ldr	r3, [r7, #20]
 801094c:	6013      	str	r3, [r2, #0]
 801094e:	f003 fd27 	bl	80143a0 <tcp_timer_needed>
 8010952:	4b2b      	ldr	r3, [pc, #172]	; (8010a00 <tcp_listen_input+0x1f8>)
 8010954:	2201      	movs	r2, #1
 8010956:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8010958:	6978      	ldr	r0, [r7, #20]
 801095a:	f001 fd8d 	bl	8012478 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801095e:	4b23      	ldr	r3, [pc, #140]	; (80109ec <tcp_listen_input+0x1e4>)
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	89db      	ldrh	r3, [r3, #14]
 8010964:	b29a      	uxth	r2, r3
 8010966:	697b      	ldr	r3, [r7, #20]
 8010968:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801096c:	697b      	ldr	r3, [r7, #20]
 801096e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010972:	697b      	ldr	r3, [r7, #20]
 8010974:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010978:	697b      	ldr	r3, [r7, #20]
 801097a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801097c:	697b      	ldr	r3, [r7, #20]
 801097e:	3304      	adds	r3, #4
 8010980:	4618      	mov	r0, r3
 8010982:	f005 f8eb 	bl	8015b5c <ip4_route>
 8010986:	4601      	mov	r1, r0
 8010988:	697b      	ldr	r3, [r7, #20]
 801098a:	3304      	adds	r3, #4
 801098c:	461a      	mov	r2, r3
 801098e:	4620      	mov	r0, r4
 8010990:	f7ff fa32 	bl	800fdf8 <tcp_eff_send_mss_netif>
 8010994:	4603      	mov	r3, r0
 8010996:	461a      	mov	r2, r3
 8010998:	697b      	ldr	r3, [r7, #20]
 801099a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801099c:	2112      	movs	r1, #18
 801099e:	6978      	ldr	r0, [r7, #20]
 80109a0:	f002 fc9a 	bl	80132d8 <tcp_enqueue_flags>
 80109a4:	4603      	mov	r3, r0
 80109a6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80109a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d004      	beq.n	80109ba <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80109b0:	2100      	movs	r1, #0
 80109b2:	6978      	ldr	r0, [r7, #20]
 80109b4:	f7fd feda 	bl	800e76c <tcp_abandon>
      return;
 80109b8:	e006      	b.n	80109c8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80109ba:	6978      	ldr	r0, [r7, #20]
 80109bc:	f002 fd7a 	bl	80134b4 <tcp_output>
  return;
 80109c0:	e001      	b.n	80109c6 <tcp_listen_input+0x1be>
    return;
 80109c2:	bf00      	nop
 80109c4:	e000      	b.n	80109c8 <tcp_listen_input+0x1c0>
  return;
 80109c6:	bf00      	nop
}
 80109c8:	371c      	adds	r7, #28
 80109ca:	46bd      	mov	sp, r7
 80109cc:	bd90      	pop	{r4, r7, pc}
 80109ce:	bf00      	nop
 80109d0:	200016d4 	.word	0x200016d4
 80109d4:	0801aab4 	.word	0x0801aab4
 80109d8:	0801acac 	.word	0x0801acac
 80109dc:	0801ab00 	.word	0x0801ab00
 80109e0:	200016cc 	.word	0x200016cc
 80109e4:	200016d2 	.word	0x200016d2
 80109e8:	200016c8 	.word	0x200016c8
 80109ec:	200016b8 	.word	0x200016b8
 80109f0:	2000d7c8 	.word	0x2000d7c8
 80109f4:	2000d7cc 	.word	0x2000d7cc
 80109f8:	2000d7b8 	.word	0x2000d7b8
 80109fc:	20016dbc 	.word	0x20016dbc
 8010a00:	20016db8 	.word	0x20016db8

08010a04 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8010a04:	b580      	push	{r7, lr}
 8010a06:	b086      	sub	sp, #24
 8010a08:	af04      	add	r7, sp, #16
 8010a0a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010a0c:	4b2f      	ldr	r3, [pc, #188]	; (8010acc <tcp_timewait_input+0xc8>)
 8010a0e:	781b      	ldrb	r3, [r3, #0]
 8010a10:	f003 0304 	and.w	r3, r3, #4
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d153      	bne.n	8010ac0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d106      	bne.n	8010a2c <tcp_timewait_input+0x28>
 8010a1e:	4b2c      	ldr	r3, [pc, #176]	; (8010ad0 <tcp_timewait_input+0xcc>)
 8010a20:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010a24:	492b      	ldr	r1, [pc, #172]	; (8010ad4 <tcp_timewait_input+0xd0>)
 8010a26:	482c      	ldr	r0, [pc, #176]	; (8010ad8 <tcp_timewait_input+0xd4>)
 8010a28:	f006 fae4 	bl	8016ff4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8010a2c:	4b27      	ldr	r3, [pc, #156]	; (8010acc <tcp_timewait_input+0xc8>)
 8010a2e:	781b      	ldrb	r3, [r3, #0]
 8010a30:	f003 0302 	and.w	r3, r3, #2
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d02a      	beq.n	8010a8e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010a38:	4b28      	ldr	r3, [pc, #160]	; (8010adc <tcp_timewait_input+0xd8>)
 8010a3a:	681a      	ldr	r2, [r3, #0]
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a40:	1ad3      	subs	r3, r2, r3
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	db2d      	blt.n	8010aa2 <tcp_timewait_input+0x9e>
 8010a46:	4b25      	ldr	r3, [pc, #148]	; (8010adc <tcp_timewait_input+0xd8>)
 8010a48:	681a      	ldr	r2, [r3, #0]
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a4e:	6879      	ldr	r1, [r7, #4]
 8010a50:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010a52:	440b      	add	r3, r1
 8010a54:	1ad3      	subs	r3, r2, r3
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	dc23      	bgt.n	8010aa2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a5a:	4b21      	ldr	r3, [pc, #132]	; (8010ae0 <tcp_timewait_input+0xdc>)
 8010a5c:	6819      	ldr	r1, [r3, #0]
 8010a5e:	4b21      	ldr	r3, [pc, #132]	; (8010ae4 <tcp_timewait_input+0xe0>)
 8010a60:	881b      	ldrh	r3, [r3, #0]
 8010a62:	461a      	mov	r2, r3
 8010a64:	4b1d      	ldr	r3, [pc, #116]	; (8010adc <tcp_timewait_input+0xd8>)
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010a6a:	4b1f      	ldr	r3, [pc, #124]	; (8010ae8 <tcp_timewait_input+0xe4>)
 8010a6c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a6e:	885b      	ldrh	r3, [r3, #2]
 8010a70:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010a72:	4a1d      	ldr	r2, [pc, #116]	; (8010ae8 <tcp_timewait_input+0xe4>)
 8010a74:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a76:	8812      	ldrh	r2, [r2, #0]
 8010a78:	b292      	uxth	r2, r2
 8010a7a:	9202      	str	r2, [sp, #8]
 8010a7c:	9301      	str	r3, [sp, #4]
 8010a7e:	4b1b      	ldr	r3, [pc, #108]	; (8010aec <tcp_timewait_input+0xe8>)
 8010a80:	9300      	str	r3, [sp, #0]
 8010a82:	4b1b      	ldr	r3, [pc, #108]	; (8010af0 <tcp_timewait_input+0xec>)
 8010a84:	4602      	mov	r2, r0
 8010a86:	6878      	ldr	r0, [r7, #4]
 8010a88:	f003 fac8 	bl	801401c <tcp_rst>
      return;
 8010a8c:	e01b      	b.n	8010ac6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8010a8e:	4b0f      	ldr	r3, [pc, #60]	; (8010acc <tcp_timewait_input+0xc8>)
 8010a90:	781b      	ldrb	r3, [r3, #0]
 8010a92:	f003 0301 	and.w	r3, r3, #1
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d003      	beq.n	8010aa2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010a9a:	4b16      	ldr	r3, [pc, #88]	; (8010af4 <tcp_timewait_input+0xf0>)
 8010a9c:	681a      	ldr	r2, [r3, #0]
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8010aa2:	4b10      	ldr	r3, [pc, #64]	; (8010ae4 <tcp_timewait_input+0xe0>)
 8010aa4:	881b      	ldrh	r3, [r3, #0]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d00c      	beq.n	8010ac4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	8b5b      	ldrh	r3, [r3, #26]
 8010aae:	f043 0302 	orr.w	r3, r3, #2
 8010ab2:	b29a      	uxth	r2, r3
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010ab8:	6878      	ldr	r0, [r7, #4]
 8010aba:	f002 fcfb 	bl	80134b4 <tcp_output>
  }
  return;
 8010abe:	e001      	b.n	8010ac4 <tcp_timewait_input+0xc0>
    return;
 8010ac0:	bf00      	nop
 8010ac2:	e000      	b.n	8010ac6 <tcp_timewait_input+0xc2>
  return;
 8010ac4:	bf00      	nop
}
 8010ac6:	3708      	adds	r7, #8
 8010ac8:	46bd      	mov	sp, r7
 8010aca:	bd80      	pop	{r7, pc}
 8010acc:	200016d4 	.word	0x200016d4
 8010ad0:	0801aab4 	.word	0x0801aab4
 8010ad4:	0801accc 	.word	0x0801accc
 8010ad8:	0801ab00 	.word	0x0801ab00
 8010adc:	200016c8 	.word	0x200016c8
 8010ae0:	200016cc 	.word	0x200016cc
 8010ae4:	200016d2 	.word	0x200016d2
 8010ae8:	200016b8 	.word	0x200016b8
 8010aec:	2000d7c8 	.word	0x2000d7c8
 8010af0:	2000d7cc 	.word	0x2000d7cc
 8010af4:	20016dc0 	.word	0x20016dc0

08010af8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010af8:	b590      	push	{r4, r7, lr}
 8010afa:	b08d      	sub	sp, #52	; 0x34
 8010afc:	af04      	add	r7, sp, #16
 8010afe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010b00:	2300      	movs	r3, #0
 8010b02:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8010b04:	2300      	movs	r3, #0
 8010b06:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d106      	bne.n	8010b1c <tcp_process+0x24>
 8010b0e:	4ba5      	ldr	r3, [pc, #660]	; (8010da4 <tcp_process+0x2ac>)
 8010b10:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010b14:	49a4      	ldr	r1, [pc, #656]	; (8010da8 <tcp_process+0x2b0>)
 8010b16:	48a5      	ldr	r0, [pc, #660]	; (8010dac <tcp_process+0x2b4>)
 8010b18:	f006 fa6c 	bl	8016ff4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010b1c:	4ba4      	ldr	r3, [pc, #656]	; (8010db0 <tcp_process+0x2b8>)
 8010b1e:	781b      	ldrb	r3, [r3, #0]
 8010b20:	f003 0304 	and.w	r3, r3, #4
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d04e      	beq.n	8010bc6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	7d1b      	ldrb	r3, [r3, #20]
 8010b2c:	2b02      	cmp	r3, #2
 8010b2e:	d108      	bne.n	8010b42 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010b34:	4b9f      	ldr	r3, [pc, #636]	; (8010db4 <tcp_process+0x2bc>)
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	429a      	cmp	r2, r3
 8010b3a:	d123      	bne.n	8010b84 <tcp_process+0x8c>
        acceptable = 1;
 8010b3c:	2301      	movs	r3, #1
 8010b3e:	76fb      	strb	r3, [r7, #27]
 8010b40:	e020      	b.n	8010b84 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010b46:	4b9c      	ldr	r3, [pc, #624]	; (8010db8 <tcp_process+0x2c0>)
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	429a      	cmp	r2, r3
 8010b4c:	d102      	bne.n	8010b54 <tcp_process+0x5c>
        acceptable = 1;
 8010b4e:	2301      	movs	r3, #1
 8010b50:	76fb      	strb	r3, [r7, #27]
 8010b52:	e017      	b.n	8010b84 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010b54:	4b98      	ldr	r3, [pc, #608]	; (8010db8 <tcp_process+0x2c0>)
 8010b56:	681a      	ldr	r2, [r3, #0]
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b5c:	1ad3      	subs	r3, r2, r3
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	db10      	blt.n	8010b84 <tcp_process+0x8c>
 8010b62:	4b95      	ldr	r3, [pc, #596]	; (8010db8 <tcp_process+0x2c0>)
 8010b64:	681a      	ldr	r2, [r3, #0]
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b6a:	6879      	ldr	r1, [r7, #4]
 8010b6c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010b6e:	440b      	add	r3, r1
 8010b70:	1ad3      	subs	r3, r2, r3
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	dc06      	bgt.n	8010b84 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	8b5b      	ldrh	r3, [r3, #26]
 8010b7a:	f043 0302 	orr.w	r3, r3, #2
 8010b7e:	b29a      	uxth	r2, r3
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010b84:	7efb      	ldrb	r3, [r7, #27]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d01b      	beq.n	8010bc2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	7d1b      	ldrb	r3, [r3, #20]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d106      	bne.n	8010ba0 <tcp_process+0xa8>
 8010b92:	4b84      	ldr	r3, [pc, #528]	; (8010da4 <tcp_process+0x2ac>)
 8010b94:	f44f 724e 	mov.w	r2, #824	; 0x338
 8010b98:	4988      	ldr	r1, [pc, #544]	; (8010dbc <tcp_process+0x2c4>)
 8010b9a:	4884      	ldr	r0, [pc, #528]	; (8010dac <tcp_process+0x2b4>)
 8010b9c:	f006 fa2a 	bl	8016ff4 <iprintf>
      recv_flags |= TF_RESET;
 8010ba0:	4b87      	ldr	r3, [pc, #540]	; (8010dc0 <tcp_process+0x2c8>)
 8010ba2:	781b      	ldrb	r3, [r3, #0]
 8010ba4:	f043 0308 	orr.w	r3, r3, #8
 8010ba8:	b2da      	uxtb	r2, r3
 8010baa:	4b85      	ldr	r3, [pc, #532]	; (8010dc0 <tcp_process+0x2c8>)
 8010bac:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	8b5b      	ldrh	r3, [r3, #26]
 8010bb2:	f023 0301 	bic.w	r3, r3, #1
 8010bb6:	b29a      	uxth	r2, r3
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010bbc:	f06f 030d 	mvn.w	r3, #13
 8010bc0:	e37a      	b.n	80112b8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	e378      	b.n	80112b8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010bc6:	4b7a      	ldr	r3, [pc, #488]	; (8010db0 <tcp_process+0x2b8>)
 8010bc8:	781b      	ldrb	r3, [r3, #0]
 8010bca:	f003 0302 	and.w	r3, r3, #2
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d010      	beq.n	8010bf4 <tcp_process+0xfc>
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	7d1b      	ldrb	r3, [r3, #20]
 8010bd6:	2b02      	cmp	r3, #2
 8010bd8:	d00c      	beq.n	8010bf4 <tcp_process+0xfc>
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	7d1b      	ldrb	r3, [r3, #20]
 8010bde:	2b03      	cmp	r3, #3
 8010be0:	d008      	beq.n	8010bf4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	8b5b      	ldrh	r3, [r3, #26]
 8010be6:	f043 0302 	orr.w	r3, r3, #2
 8010bea:	b29a      	uxth	r2, r3
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	e361      	b.n	80112b8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	8b5b      	ldrh	r3, [r3, #26]
 8010bf8:	f003 0310 	and.w	r3, r3, #16
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d103      	bne.n	8010c08 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010c00:	4b70      	ldr	r3, [pc, #448]	; (8010dc4 <tcp_process+0x2cc>)
 8010c02:	681a      	ldr	r2, [r3, #0]
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	2200      	movs	r2, #0
 8010c14:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8010c18:	6878      	ldr	r0, [r7, #4]
 8010c1a:	f001 fc2d 	bl	8012478 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	7d1b      	ldrb	r3, [r3, #20]
 8010c22:	3b02      	subs	r3, #2
 8010c24:	2b07      	cmp	r3, #7
 8010c26:	f200 8337 	bhi.w	8011298 <tcp_process+0x7a0>
 8010c2a:	a201      	add	r2, pc, #4	; (adr r2, 8010c30 <tcp_process+0x138>)
 8010c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c30:	08010c51 	.word	0x08010c51
 8010c34:	08010e81 	.word	0x08010e81
 8010c38:	08010ff9 	.word	0x08010ff9
 8010c3c:	08011023 	.word	0x08011023
 8010c40:	08011147 	.word	0x08011147
 8010c44:	08010ff9 	.word	0x08010ff9
 8010c48:	080111d3 	.word	0x080111d3
 8010c4c:	08011263 	.word	0x08011263
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010c50:	4b57      	ldr	r3, [pc, #348]	; (8010db0 <tcp_process+0x2b8>)
 8010c52:	781b      	ldrb	r3, [r3, #0]
 8010c54:	f003 0310 	and.w	r3, r3, #16
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	f000 80e4 	beq.w	8010e26 <tcp_process+0x32e>
 8010c5e:	4b54      	ldr	r3, [pc, #336]	; (8010db0 <tcp_process+0x2b8>)
 8010c60:	781b      	ldrb	r3, [r3, #0]
 8010c62:	f003 0302 	and.w	r3, r3, #2
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	f000 80dd 	beq.w	8010e26 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c70:	1c5a      	adds	r2, r3, #1
 8010c72:	4b50      	ldr	r3, [pc, #320]	; (8010db4 <tcp_process+0x2bc>)
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	429a      	cmp	r2, r3
 8010c78:	f040 80d5 	bne.w	8010e26 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010c7c:	4b4e      	ldr	r3, [pc, #312]	; (8010db8 <tcp_process+0x2c0>)
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	1c5a      	adds	r2, r3, #1
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8010c8e:	4b49      	ldr	r3, [pc, #292]	; (8010db4 <tcp_process+0x2bc>)
 8010c90:	681a      	ldr	r2, [r3, #0]
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010c96:	4b4c      	ldr	r3, [pc, #304]	; (8010dc8 <tcp_process+0x2d0>)
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	89db      	ldrh	r3, [r3, #14]
 8010c9c:	b29a      	uxth	r2, r3
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010cb0:	4b41      	ldr	r3, [pc, #260]	; (8010db8 <tcp_process+0x2c0>)
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	1e5a      	subs	r2, r3, #1
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	2204      	movs	r2, #4
 8010cbe:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	3304      	adds	r3, #4
 8010cc8:	4618      	mov	r0, r3
 8010cca:	f004 ff47 	bl	8015b5c <ip4_route>
 8010cce:	4601      	mov	r1, r0
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	3304      	adds	r3, #4
 8010cd4:	461a      	mov	r2, r3
 8010cd6:	4620      	mov	r0, r4
 8010cd8:	f7ff f88e 	bl	800fdf8 <tcp_eff_send_mss_netif>
 8010cdc:	4603      	mov	r3, r0
 8010cde:	461a      	mov	r2, r3
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ce8:	009a      	lsls	r2, r3, #2
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010cee:	005b      	lsls	r3, r3, #1
 8010cf0:	f241 111c 	movw	r1, #4380	; 0x111c
 8010cf4:	428b      	cmp	r3, r1
 8010cf6:	bf38      	it	cc
 8010cf8:	460b      	movcc	r3, r1
 8010cfa:	429a      	cmp	r2, r3
 8010cfc:	d204      	bcs.n	8010d08 <tcp_process+0x210>
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d02:	009b      	lsls	r3, r3, #2
 8010d04:	b29b      	uxth	r3, r3
 8010d06:	e00d      	b.n	8010d24 <tcp_process+0x22c>
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d0c:	005b      	lsls	r3, r3, #1
 8010d0e:	f241 121c 	movw	r2, #4380	; 0x111c
 8010d12:	4293      	cmp	r3, r2
 8010d14:	d904      	bls.n	8010d20 <tcp_process+0x228>
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d1a:	005b      	lsls	r3, r3, #1
 8010d1c:	b29b      	uxth	r3, r3
 8010d1e:	e001      	b.n	8010d24 <tcp_process+0x22c>
 8010d20:	f241 131c 	movw	r3, #4380	; 0x111c
 8010d24:	687a      	ldr	r2, [r7, #4]
 8010d26:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d106      	bne.n	8010d42 <tcp_process+0x24a>
 8010d34:	4b1b      	ldr	r3, [pc, #108]	; (8010da4 <tcp_process+0x2ac>)
 8010d36:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8010d3a:	4924      	ldr	r1, [pc, #144]	; (8010dcc <tcp_process+0x2d4>)
 8010d3c:	481b      	ldr	r0, [pc, #108]	; (8010dac <tcp_process+0x2b4>)
 8010d3e:	f006 f959 	bl	8016ff4 <iprintf>
        --pcb->snd_queuelen;
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010d48:	3b01      	subs	r3, #1
 8010d4a:	b29a      	uxth	r2, r3
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d56:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010d58:	69fb      	ldr	r3, [r7, #28]
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d111      	bne.n	8010d82 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d62:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010d64:	69fb      	ldr	r3, [r7, #28]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d106      	bne.n	8010d78 <tcp_process+0x280>
 8010d6a:	4b0e      	ldr	r3, [pc, #56]	; (8010da4 <tcp_process+0x2ac>)
 8010d6c:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010d70:	4917      	ldr	r1, [pc, #92]	; (8010dd0 <tcp_process+0x2d8>)
 8010d72:	480e      	ldr	r0, [pc, #56]	; (8010dac <tcp_process+0x2b4>)
 8010d74:	f006 f93e 	bl	8016ff4 <iprintf>
          pcb->unsent = rseg->next;
 8010d78:	69fb      	ldr	r3, [r7, #28]
 8010d7a:	681a      	ldr	r2, [r3, #0]
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	66da      	str	r2, [r3, #108]	; 0x6c
 8010d80:	e003      	b.n	8010d8a <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8010d82:	69fb      	ldr	r3, [r7, #28]
 8010d84:	681a      	ldr	r2, [r3, #0]
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8010d8a:	69f8      	ldr	r0, [r7, #28]
 8010d8c:	f7fe fc51 	bl	800f632 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d11d      	bne.n	8010dd4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010d9e:	861a      	strh	r2, [r3, #48]	; 0x30
 8010da0:	e01f      	b.n	8010de2 <tcp_process+0x2ea>
 8010da2:	bf00      	nop
 8010da4:	0801aab4 	.word	0x0801aab4
 8010da8:	0801acec 	.word	0x0801acec
 8010dac:	0801ab00 	.word	0x0801ab00
 8010db0:	200016d4 	.word	0x200016d4
 8010db4:	200016cc 	.word	0x200016cc
 8010db8:	200016c8 	.word	0x200016c8
 8010dbc:	0801ad08 	.word	0x0801ad08
 8010dc0:	200016d5 	.word	0x200016d5
 8010dc4:	20016dc0 	.word	0x20016dc0
 8010dc8:	200016b8 	.word	0x200016b8
 8010dcc:	0801ad28 	.word	0x0801ad28
 8010dd0:	0801ad40 	.word	0x0801ad40
        } else {
          pcb->rtime = 0;
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	2200      	movs	r2, #0
 8010dd8:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	2200      	movs	r2, #0
 8010dde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d00a      	beq.n	8010e02 <tcp_process+0x30a>
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010df2:	687a      	ldr	r2, [r7, #4]
 8010df4:	6910      	ldr	r0, [r2, #16]
 8010df6:	2200      	movs	r2, #0
 8010df8:	6879      	ldr	r1, [r7, #4]
 8010dfa:	4798      	blx	r3
 8010dfc:	4603      	mov	r3, r0
 8010dfe:	76bb      	strb	r3, [r7, #26]
 8010e00:	e001      	b.n	8010e06 <tcp_process+0x30e>
 8010e02:	2300      	movs	r3, #0
 8010e04:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010e06:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010e0a:	f113 0f0d 	cmn.w	r3, #13
 8010e0e:	d102      	bne.n	8010e16 <tcp_process+0x31e>
          return ERR_ABRT;
 8010e10:	f06f 030c 	mvn.w	r3, #12
 8010e14:	e250      	b.n	80112b8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	8b5b      	ldrh	r3, [r3, #26]
 8010e1a:	f043 0302 	orr.w	r3, r3, #2
 8010e1e:	b29a      	uxth	r2, r3
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010e24:	e23a      	b.n	801129c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010e26:	4b9d      	ldr	r3, [pc, #628]	; (801109c <tcp_process+0x5a4>)
 8010e28:	781b      	ldrb	r3, [r3, #0]
 8010e2a:	f003 0310 	and.w	r3, r3, #16
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	f000 8234 	beq.w	801129c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010e34:	4b9a      	ldr	r3, [pc, #616]	; (80110a0 <tcp_process+0x5a8>)
 8010e36:	6819      	ldr	r1, [r3, #0]
 8010e38:	4b9a      	ldr	r3, [pc, #616]	; (80110a4 <tcp_process+0x5ac>)
 8010e3a:	881b      	ldrh	r3, [r3, #0]
 8010e3c:	461a      	mov	r2, r3
 8010e3e:	4b9a      	ldr	r3, [pc, #616]	; (80110a8 <tcp_process+0x5b0>)
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010e44:	4b99      	ldr	r3, [pc, #612]	; (80110ac <tcp_process+0x5b4>)
 8010e46:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010e48:	885b      	ldrh	r3, [r3, #2]
 8010e4a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010e4c:	4a97      	ldr	r2, [pc, #604]	; (80110ac <tcp_process+0x5b4>)
 8010e4e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010e50:	8812      	ldrh	r2, [r2, #0]
 8010e52:	b292      	uxth	r2, r2
 8010e54:	9202      	str	r2, [sp, #8]
 8010e56:	9301      	str	r3, [sp, #4]
 8010e58:	4b95      	ldr	r3, [pc, #596]	; (80110b0 <tcp_process+0x5b8>)
 8010e5a:	9300      	str	r3, [sp, #0]
 8010e5c:	4b95      	ldr	r3, [pc, #596]	; (80110b4 <tcp_process+0x5bc>)
 8010e5e:	4602      	mov	r2, r0
 8010e60:	6878      	ldr	r0, [r7, #4]
 8010e62:	f003 f8db 	bl	801401c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010e6c:	2b05      	cmp	r3, #5
 8010e6e:	f200 8215 	bhi.w	801129c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	2200      	movs	r2, #0
 8010e76:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8010e78:	6878      	ldr	r0, [r7, #4]
 8010e7a:	f002 fea5 	bl	8013bc8 <tcp_rexmit_rto>
      break;
 8010e7e:	e20d      	b.n	801129c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010e80:	4b86      	ldr	r3, [pc, #536]	; (801109c <tcp_process+0x5a4>)
 8010e82:	781b      	ldrb	r3, [r3, #0]
 8010e84:	f003 0310 	and.w	r3, r3, #16
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	f000 80a1 	beq.w	8010fd0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010e8e:	4b84      	ldr	r3, [pc, #528]	; (80110a0 <tcp_process+0x5a8>)
 8010e90:	681a      	ldr	r2, [r3, #0]
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e96:	1ad3      	subs	r3, r2, r3
 8010e98:	3b01      	subs	r3, #1
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	db7e      	blt.n	8010f9c <tcp_process+0x4a4>
 8010e9e:	4b80      	ldr	r3, [pc, #512]	; (80110a0 <tcp_process+0x5a8>)
 8010ea0:	681a      	ldr	r2, [r3, #0]
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010ea6:	1ad3      	subs	r3, r2, r3
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	dc77      	bgt.n	8010f9c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	2204      	movs	r2, #4
 8010eb0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d102      	bne.n	8010ec0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010eba:	23fa      	movs	r3, #250	; 0xfa
 8010ebc:	76bb      	strb	r3, [r7, #26]
 8010ebe:	e01d      	b.n	8010efc <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010ec4:	699b      	ldr	r3, [r3, #24]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d106      	bne.n	8010ed8 <tcp_process+0x3e0>
 8010eca:	4b7b      	ldr	r3, [pc, #492]	; (80110b8 <tcp_process+0x5c0>)
 8010ecc:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8010ed0:	497a      	ldr	r1, [pc, #488]	; (80110bc <tcp_process+0x5c4>)
 8010ed2:	487b      	ldr	r0, [pc, #492]	; (80110c0 <tcp_process+0x5c8>)
 8010ed4:	f006 f88e 	bl	8016ff4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010edc:	699b      	ldr	r3, [r3, #24]
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d00a      	beq.n	8010ef8 <tcp_process+0x400>
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010ee6:	699b      	ldr	r3, [r3, #24]
 8010ee8:	687a      	ldr	r2, [r7, #4]
 8010eea:	6910      	ldr	r0, [r2, #16]
 8010eec:	2200      	movs	r2, #0
 8010eee:	6879      	ldr	r1, [r7, #4]
 8010ef0:	4798      	blx	r3
 8010ef2:	4603      	mov	r3, r0
 8010ef4:	76bb      	strb	r3, [r7, #26]
 8010ef6:	e001      	b.n	8010efc <tcp_process+0x404>
 8010ef8:	23f0      	movs	r3, #240	; 0xf0
 8010efa:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010efc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d00a      	beq.n	8010f1a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010f04:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010f08:	f113 0f0d 	cmn.w	r3, #13
 8010f0c:	d002      	beq.n	8010f14 <tcp_process+0x41c>
              tcp_abort(pcb);
 8010f0e:	6878      	ldr	r0, [r7, #4]
 8010f10:	f7fd fcea 	bl	800e8e8 <tcp_abort>
            }
            return ERR_ABRT;
 8010f14:	f06f 030c 	mvn.w	r3, #12
 8010f18:	e1ce      	b.n	80112b8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8010f1a:	6878      	ldr	r0, [r7, #4]
 8010f1c:	f000 fae0 	bl	80114e0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010f20:	4b68      	ldr	r3, [pc, #416]	; (80110c4 <tcp_process+0x5cc>)
 8010f22:	881b      	ldrh	r3, [r3, #0]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d005      	beq.n	8010f34 <tcp_process+0x43c>
            recv_acked--;
 8010f28:	4b66      	ldr	r3, [pc, #408]	; (80110c4 <tcp_process+0x5cc>)
 8010f2a:	881b      	ldrh	r3, [r3, #0]
 8010f2c:	3b01      	subs	r3, #1
 8010f2e:	b29a      	uxth	r2, r3
 8010f30:	4b64      	ldr	r3, [pc, #400]	; (80110c4 <tcp_process+0x5cc>)
 8010f32:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f38:	009a      	lsls	r2, r3, #2
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f3e:	005b      	lsls	r3, r3, #1
 8010f40:	f241 111c 	movw	r1, #4380	; 0x111c
 8010f44:	428b      	cmp	r3, r1
 8010f46:	bf38      	it	cc
 8010f48:	460b      	movcc	r3, r1
 8010f4a:	429a      	cmp	r2, r3
 8010f4c:	d204      	bcs.n	8010f58 <tcp_process+0x460>
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f52:	009b      	lsls	r3, r3, #2
 8010f54:	b29b      	uxth	r3, r3
 8010f56:	e00d      	b.n	8010f74 <tcp_process+0x47c>
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f5c:	005b      	lsls	r3, r3, #1
 8010f5e:	f241 121c 	movw	r2, #4380	; 0x111c
 8010f62:	4293      	cmp	r3, r2
 8010f64:	d904      	bls.n	8010f70 <tcp_process+0x478>
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f6a:	005b      	lsls	r3, r3, #1
 8010f6c:	b29b      	uxth	r3, r3
 8010f6e:	e001      	b.n	8010f74 <tcp_process+0x47c>
 8010f70:	f241 131c 	movw	r3, #4380	; 0x111c
 8010f74:	687a      	ldr	r2, [r7, #4]
 8010f76:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8010f7a:	4b53      	ldr	r3, [pc, #332]	; (80110c8 <tcp_process+0x5d0>)
 8010f7c:	781b      	ldrb	r3, [r3, #0]
 8010f7e:	f003 0320 	and.w	r3, r3, #32
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d037      	beq.n	8010ff6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	8b5b      	ldrh	r3, [r3, #26]
 8010f8a:	f043 0302 	orr.w	r3, r3, #2
 8010f8e:	b29a      	uxth	r2, r3
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	2207      	movs	r2, #7
 8010f98:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8010f9a:	e02c      	b.n	8010ff6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010f9c:	4b40      	ldr	r3, [pc, #256]	; (80110a0 <tcp_process+0x5a8>)
 8010f9e:	6819      	ldr	r1, [r3, #0]
 8010fa0:	4b40      	ldr	r3, [pc, #256]	; (80110a4 <tcp_process+0x5ac>)
 8010fa2:	881b      	ldrh	r3, [r3, #0]
 8010fa4:	461a      	mov	r2, r3
 8010fa6:	4b40      	ldr	r3, [pc, #256]	; (80110a8 <tcp_process+0x5b0>)
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010fac:	4b3f      	ldr	r3, [pc, #252]	; (80110ac <tcp_process+0x5b4>)
 8010fae:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010fb0:	885b      	ldrh	r3, [r3, #2]
 8010fb2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010fb4:	4a3d      	ldr	r2, [pc, #244]	; (80110ac <tcp_process+0x5b4>)
 8010fb6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010fb8:	8812      	ldrh	r2, [r2, #0]
 8010fba:	b292      	uxth	r2, r2
 8010fbc:	9202      	str	r2, [sp, #8]
 8010fbe:	9301      	str	r3, [sp, #4]
 8010fc0:	4b3b      	ldr	r3, [pc, #236]	; (80110b0 <tcp_process+0x5b8>)
 8010fc2:	9300      	str	r3, [sp, #0]
 8010fc4:	4b3b      	ldr	r3, [pc, #236]	; (80110b4 <tcp_process+0x5bc>)
 8010fc6:	4602      	mov	r2, r0
 8010fc8:	6878      	ldr	r0, [r7, #4]
 8010fca:	f003 f827 	bl	801401c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8010fce:	e167      	b.n	80112a0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010fd0:	4b32      	ldr	r3, [pc, #200]	; (801109c <tcp_process+0x5a4>)
 8010fd2:	781b      	ldrb	r3, [r3, #0]
 8010fd4:	f003 0302 	and.w	r3, r3, #2
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	f000 8161 	beq.w	80112a0 <tcp_process+0x7a8>
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fe2:	1e5a      	subs	r2, r3, #1
 8010fe4:	4b30      	ldr	r3, [pc, #192]	; (80110a8 <tcp_process+0x5b0>)
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	429a      	cmp	r2, r3
 8010fea:	f040 8159 	bne.w	80112a0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8010fee:	6878      	ldr	r0, [r7, #4]
 8010ff0:	f002 fe0c 	bl	8013c0c <tcp_rexmit>
      break;
 8010ff4:	e154      	b.n	80112a0 <tcp_process+0x7a8>
 8010ff6:	e153      	b.n	80112a0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010ff8:	6878      	ldr	r0, [r7, #4]
 8010ffa:	f000 fa71 	bl	80114e0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8010ffe:	4b32      	ldr	r3, [pc, #200]	; (80110c8 <tcp_process+0x5d0>)
 8011000:	781b      	ldrb	r3, [r3, #0]
 8011002:	f003 0320 	and.w	r3, r3, #32
 8011006:	2b00      	cmp	r3, #0
 8011008:	f000 814c 	beq.w	80112a4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	8b5b      	ldrh	r3, [r3, #26]
 8011010:	f043 0302 	orr.w	r3, r3, #2
 8011014:	b29a      	uxth	r2, r3
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	2207      	movs	r2, #7
 801101e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011020:	e140      	b.n	80112a4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8011022:	6878      	ldr	r0, [r7, #4]
 8011024:	f000 fa5c 	bl	80114e0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011028:	4b27      	ldr	r3, [pc, #156]	; (80110c8 <tcp_process+0x5d0>)
 801102a:	781b      	ldrb	r3, [r3, #0]
 801102c:	f003 0320 	and.w	r3, r3, #32
 8011030:	2b00      	cmp	r3, #0
 8011032:	d071      	beq.n	8011118 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011034:	4b19      	ldr	r3, [pc, #100]	; (801109c <tcp_process+0x5a4>)
 8011036:	781b      	ldrb	r3, [r3, #0]
 8011038:	f003 0310 	and.w	r3, r3, #16
 801103c:	2b00      	cmp	r3, #0
 801103e:	d060      	beq.n	8011102 <tcp_process+0x60a>
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011044:	4b16      	ldr	r3, [pc, #88]	; (80110a0 <tcp_process+0x5a8>)
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	429a      	cmp	r2, r3
 801104a:	d15a      	bne.n	8011102 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011050:	2b00      	cmp	r3, #0
 8011052:	d156      	bne.n	8011102 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	8b5b      	ldrh	r3, [r3, #26]
 8011058:	f043 0302 	orr.w	r3, r3, #2
 801105c:	b29a      	uxth	r2, r3
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8011062:	6878      	ldr	r0, [r7, #4]
 8011064:	f7fe fdbe 	bl	800fbe4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8011068:	4b18      	ldr	r3, [pc, #96]	; (80110cc <tcp_process+0x5d4>)
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	687a      	ldr	r2, [r7, #4]
 801106e:	429a      	cmp	r2, r3
 8011070:	d105      	bne.n	801107e <tcp_process+0x586>
 8011072:	4b16      	ldr	r3, [pc, #88]	; (80110cc <tcp_process+0x5d4>)
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	68db      	ldr	r3, [r3, #12]
 8011078:	4a14      	ldr	r2, [pc, #80]	; (80110cc <tcp_process+0x5d4>)
 801107a:	6013      	str	r3, [r2, #0]
 801107c:	e02e      	b.n	80110dc <tcp_process+0x5e4>
 801107e:	4b13      	ldr	r3, [pc, #76]	; (80110cc <tcp_process+0x5d4>)
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	617b      	str	r3, [r7, #20]
 8011084:	e027      	b.n	80110d6 <tcp_process+0x5de>
 8011086:	697b      	ldr	r3, [r7, #20]
 8011088:	68db      	ldr	r3, [r3, #12]
 801108a:	687a      	ldr	r2, [r7, #4]
 801108c:	429a      	cmp	r2, r3
 801108e:	d11f      	bne.n	80110d0 <tcp_process+0x5d8>
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	68da      	ldr	r2, [r3, #12]
 8011094:	697b      	ldr	r3, [r7, #20]
 8011096:	60da      	str	r2, [r3, #12]
 8011098:	e020      	b.n	80110dc <tcp_process+0x5e4>
 801109a:	bf00      	nop
 801109c:	200016d4 	.word	0x200016d4
 80110a0:	200016cc 	.word	0x200016cc
 80110a4:	200016d2 	.word	0x200016d2
 80110a8:	200016c8 	.word	0x200016c8
 80110ac:	200016b8 	.word	0x200016b8
 80110b0:	2000d7c8 	.word	0x2000d7c8
 80110b4:	2000d7cc 	.word	0x2000d7cc
 80110b8:	0801aab4 	.word	0x0801aab4
 80110bc:	0801ad54 	.word	0x0801ad54
 80110c0:	0801ab00 	.word	0x0801ab00
 80110c4:	200016d0 	.word	0x200016d0
 80110c8:	200016d5 	.word	0x200016d5
 80110cc:	20016dbc 	.word	0x20016dbc
 80110d0:	697b      	ldr	r3, [r7, #20]
 80110d2:	68db      	ldr	r3, [r3, #12]
 80110d4:	617b      	str	r3, [r7, #20]
 80110d6:	697b      	ldr	r3, [r7, #20]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d1d4      	bne.n	8011086 <tcp_process+0x58e>
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	2200      	movs	r2, #0
 80110e0:	60da      	str	r2, [r3, #12]
 80110e2:	4b77      	ldr	r3, [pc, #476]	; (80112c0 <tcp_process+0x7c8>)
 80110e4:	2201      	movs	r2, #1
 80110e6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	220a      	movs	r2, #10
 80110ec:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80110ee:	4b75      	ldr	r3, [pc, #468]	; (80112c4 <tcp_process+0x7cc>)
 80110f0:	681a      	ldr	r2, [r3, #0]
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	60da      	str	r2, [r3, #12]
 80110f6:	4a73      	ldr	r2, [pc, #460]	; (80112c4 <tcp_process+0x7cc>)
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	6013      	str	r3, [r2, #0]
 80110fc:	f003 f950 	bl	80143a0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011100:	e0d2      	b.n	80112a8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	8b5b      	ldrh	r3, [r3, #26]
 8011106:	f043 0302 	orr.w	r3, r3, #2
 801110a:	b29a      	uxth	r2, r3
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	2208      	movs	r2, #8
 8011114:	751a      	strb	r2, [r3, #20]
      break;
 8011116:	e0c7      	b.n	80112a8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011118:	4b6b      	ldr	r3, [pc, #428]	; (80112c8 <tcp_process+0x7d0>)
 801111a:	781b      	ldrb	r3, [r3, #0]
 801111c:	f003 0310 	and.w	r3, r3, #16
 8011120:	2b00      	cmp	r3, #0
 8011122:	f000 80c1 	beq.w	80112a8 <tcp_process+0x7b0>
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801112a:	4b68      	ldr	r3, [pc, #416]	; (80112cc <tcp_process+0x7d4>)
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	429a      	cmp	r2, r3
 8011130:	f040 80ba 	bne.w	80112a8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011138:	2b00      	cmp	r3, #0
 801113a:	f040 80b5 	bne.w	80112a8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	2206      	movs	r2, #6
 8011142:	751a      	strb	r2, [r3, #20]
      break;
 8011144:	e0b0      	b.n	80112a8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8011146:	6878      	ldr	r0, [r7, #4]
 8011148:	f000 f9ca 	bl	80114e0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801114c:	4b60      	ldr	r3, [pc, #384]	; (80112d0 <tcp_process+0x7d8>)
 801114e:	781b      	ldrb	r3, [r3, #0]
 8011150:	f003 0320 	and.w	r3, r3, #32
 8011154:	2b00      	cmp	r3, #0
 8011156:	f000 80a9 	beq.w	80112ac <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	8b5b      	ldrh	r3, [r3, #26]
 801115e:	f043 0302 	orr.w	r3, r3, #2
 8011162:	b29a      	uxth	r2, r3
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011168:	6878      	ldr	r0, [r7, #4]
 801116a:	f7fe fd3b 	bl	800fbe4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801116e:	4b59      	ldr	r3, [pc, #356]	; (80112d4 <tcp_process+0x7dc>)
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	687a      	ldr	r2, [r7, #4]
 8011174:	429a      	cmp	r2, r3
 8011176:	d105      	bne.n	8011184 <tcp_process+0x68c>
 8011178:	4b56      	ldr	r3, [pc, #344]	; (80112d4 <tcp_process+0x7dc>)
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	68db      	ldr	r3, [r3, #12]
 801117e:	4a55      	ldr	r2, [pc, #340]	; (80112d4 <tcp_process+0x7dc>)
 8011180:	6013      	str	r3, [r2, #0]
 8011182:	e013      	b.n	80111ac <tcp_process+0x6b4>
 8011184:	4b53      	ldr	r3, [pc, #332]	; (80112d4 <tcp_process+0x7dc>)
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	613b      	str	r3, [r7, #16]
 801118a:	e00c      	b.n	80111a6 <tcp_process+0x6ae>
 801118c:	693b      	ldr	r3, [r7, #16]
 801118e:	68db      	ldr	r3, [r3, #12]
 8011190:	687a      	ldr	r2, [r7, #4]
 8011192:	429a      	cmp	r2, r3
 8011194:	d104      	bne.n	80111a0 <tcp_process+0x6a8>
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	68da      	ldr	r2, [r3, #12]
 801119a:	693b      	ldr	r3, [r7, #16]
 801119c:	60da      	str	r2, [r3, #12]
 801119e:	e005      	b.n	80111ac <tcp_process+0x6b4>
 80111a0:	693b      	ldr	r3, [r7, #16]
 80111a2:	68db      	ldr	r3, [r3, #12]
 80111a4:	613b      	str	r3, [r7, #16]
 80111a6:	693b      	ldr	r3, [r7, #16]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d1ef      	bne.n	801118c <tcp_process+0x694>
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	2200      	movs	r2, #0
 80111b0:	60da      	str	r2, [r3, #12]
 80111b2:	4b43      	ldr	r3, [pc, #268]	; (80112c0 <tcp_process+0x7c8>)
 80111b4:	2201      	movs	r2, #1
 80111b6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	220a      	movs	r2, #10
 80111bc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80111be:	4b41      	ldr	r3, [pc, #260]	; (80112c4 <tcp_process+0x7cc>)
 80111c0:	681a      	ldr	r2, [r3, #0]
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	60da      	str	r2, [r3, #12]
 80111c6:	4a3f      	ldr	r2, [pc, #252]	; (80112c4 <tcp_process+0x7cc>)
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	6013      	str	r3, [r2, #0]
 80111cc:	f003 f8e8 	bl	80143a0 <tcp_timer_needed>
      }
      break;
 80111d0:	e06c      	b.n	80112ac <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80111d2:	6878      	ldr	r0, [r7, #4]
 80111d4:	f000 f984 	bl	80114e0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80111d8:	4b3b      	ldr	r3, [pc, #236]	; (80112c8 <tcp_process+0x7d0>)
 80111da:	781b      	ldrb	r3, [r3, #0]
 80111dc:	f003 0310 	and.w	r3, r3, #16
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d065      	beq.n	80112b0 <tcp_process+0x7b8>
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80111e8:	4b38      	ldr	r3, [pc, #224]	; (80112cc <tcp_process+0x7d4>)
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	429a      	cmp	r2, r3
 80111ee:	d15f      	bne.n	80112b0 <tcp_process+0x7b8>
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d15b      	bne.n	80112b0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80111f8:	6878      	ldr	r0, [r7, #4]
 80111fa:	f7fe fcf3 	bl	800fbe4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80111fe:	4b35      	ldr	r3, [pc, #212]	; (80112d4 <tcp_process+0x7dc>)
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	687a      	ldr	r2, [r7, #4]
 8011204:	429a      	cmp	r2, r3
 8011206:	d105      	bne.n	8011214 <tcp_process+0x71c>
 8011208:	4b32      	ldr	r3, [pc, #200]	; (80112d4 <tcp_process+0x7dc>)
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	68db      	ldr	r3, [r3, #12]
 801120e:	4a31      	ldr	r2, [pc, #196]	; (80112d4 <tcp_process+0x7dc>)
 8011210:	6013      	str	r3, [r2, #0]
 8011212:	e013      	b.n	801123c <tcp_process+0x744>
 8011214:	4b2f      	ldr	r3, [pc, #188]	; (80112d4 <tcp_process+0x7dc>)
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	60fb      	str	r3, [r7, #12]
 801121a:	e00c      	b.n	8011236 <tcp_process+0x73e>
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	68db      	ldr	r3, [r3, #12]
 8011220:	687a      	ldr	r2, [r7, #4]
 8011222:	429a      	cmp	r2, r3
 8011224:	d104      	bne.n	8011230 <tcp_process+0x738>
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	68da      	ldr	r2, [r3, #12]
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	60da      	str	r2, [r3, #12]
 801122e:	e005      	b.n	801123c <tcp_process+0x744>
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	68db      	ldr	r3, [r3, #12]
 8011234:	60fb      	str	r3, [r7, #12]
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d1ef      	bne.n	801121c <tcp_process+0x724>
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	2200      	movs	r2, #0
 8011240:	60da      	str	r2, [r3, #12]
 8011242:	4b1f      	ldr	r3, [pc, #124]	; (80112c0 <tcp_process+0x7c8>)
 8011244:	2201      	movs	r2, #1
 8011246:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	220a      	movs	r2, #10
 801124c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801124e:	4b1d      	ldr	r3, [pc, #116]	; (80112c4 <tcp_process+0x7cc>)
 8011250:	681a      	ldr	r2, [r3, #0]
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	60da      	str	r2, [r3, #12]
 8011256:	4a1b      	ldr	r2, [pc, #108]	; (80112c4 <tcp_process+0x7cc>)
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	6013      	str	r3, [r2, #0]
 801125c:	f003 f8a0 	bl	80143a0 <tcp_timer_needed>
      }
      break;
 8011260:	e026      	b.n	80112b0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8011262:	6878      	ldr	r0, [r7, #4]
 8011264:	f000 f93c 	bl	80114e0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011268:	4b17      	ldr	r3, [pc, #92]	; (80112c8 <tcp_process+0x7d0>)
 801126a:	781b      	ldrb	r3, [r3, #0]
 801126c:	f003 0310 	and.w	r3, r3, #16
 8011270:	2b00      	cmp	r3, #0
 8011272:	d01f      	beq.n	80112b4 <tcp_process+0x7bc>
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011278:	4b14      	ldr	r3, [pc, #80]	; (80112cc <tcp_process+0x7d4>)
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	429a      	cmp	r2, r3
 801127e:	d119      	bne.n	80112b4 <tcp_process+0x7bc>
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011284:	2b00      	cmp	r3, #0
 8011286:	d115      	bne.n	80112b4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011288:	4b11      	ldr	r3, [pc, #68]	; (80112d0 <tcp_process+0x7d8>)
 801128a:	781b      	ldrb	r3, [r3, #0]
 801128c:	f043 0310 	orr.w	r3, r3, #16
 8011290:	b2da      	uxtb	r2, r3
 8011292:	4b0f      	ldr	r3, [pc, #60]	; (80112d0 <tcp_process+0x7d8>)
 8011294:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011296:	e00d      	b.n	80112b4 <tcp_process+0x7bc>
    default:
      break;
 8011298:	bf00      	nop
 801129a:	e00c      	b.n	80112b6 <tcp_process+0x7be>
      break;
 801129c:	bf00      	nop
 801129e:	e00a      	b.n	80112b6 <tcp_process+0x7be>
      break;
 80112a0:	bf00      	nop
 80112a2:	e008      	b.n	80112b6 <tcp_process+0x7be>
      break;
 80112a4:	bf00      	nop
 80112a6:	e006      	b.n	80112b6 <tcp_process+0x7be>
      break;
 80112a8:	bf00      	nop
 80112aa:	e004      	b.n	80112b6 <tcp_process+0x7be>
      break;
 80112ac:	bf00      	nop
 80112ae:	e002      	b.n	80112b6 <tcp_process+0x7be>
      break;
 80112b0:	bf00      	nop
 80112b2:	e000      	b.n	80112b6 <tcp_process+0x7be>
      break;
 80112b4:	bf00      	nop
  }
  return ERR_OK;
 80112b6:	2300      	movs	r3, #0
}
 80112b8:	4618      	mov	r0, r3
 80112ba:	3724      	adds	r7, #36	; 0x24
 80112bc:	46bd      	mov	sp, r7
 80112be:	bd90      	pop	{r4, r7, pc}
 80112c0:	20016db8 	.word	0x20016db8
 80112c4:	20016dcc 	.word	0x20016dcc
 80112c8:	200016d4 	.word	0x200016d4
 80112cc:	200016cc 	.word	0x200016cc
 80112d0:	200016d5 	.word	0x200016d5
 80112d4:	20016dbc 	.word	0x20016dbc

080112d8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80112d8:	b590      	push	{r4, r7, lr}
 80112da:	b085      	sub	sp, #20
 80112dc:	af00      	add	r7, sp, #0
 80112de:	6078      	str	r0, [r7, #4]
 80112e0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d106      	bne.n	80112f6 <tcp_oos_insert_segment+0x1e>
 80112e8:	4b3b      	ldr	r3, [pc, #236]	; (80113d8 <tcp_oos_insert_segment+0x100>)
 80112ea:	f240 421f 	movw	r2, #1055	; 0x41f
 80112ee:	493b      	ldr	r1, [pc, #236]	; (80113dc <tcp_oos_insert_segment+0x104>)
 80112f0:	483b      	ldr	r0, [pc, #236]	; (80113e0 <tcp_oos_insert_segment+0x108>)
 80112f2:	f005 fe7f 	bl	8016ff4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	68db      	ldr	r3, [r3, #12]
 80112fa:	899b      	ldrh	r3, [r3, #12]
 80112fc:	b29b      	uxth	r3, r3
 80112fe:	4618      	mov	r0, r3
 8011300:	f7fb f9d8 	bl	800c6b4 <lwip_htons>
 8011304:	4603      	mov	r3, r0
 8011306:	b2db      	uxtb	r3, r3
 8011308:	f003 0301 	and.w	r3, r3, #1
 801130c:	2b00      	cmp	r3, #0
 801130e:	d028      	beq.n	8011362 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011310:	6838      	ldr	r0, [r7, #0]
 8011312:	f7fe f979 	bl	800f608 <tcp_segs_free>
    next = NULL;
 8011316:	2300      	movs	r3, #0
 8011318:	603b      	str	r3, [r7, #0]
 801131a:	e056      	b.n	80113ca <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801131c:	683b      	ldr	r3, [r7, #0]
 801131e:	68db      	ldr	r3, [r3, #12]
 8011320:	899b      	ldrh	r3, [r3, #12]
 8011322:	b29b      	uxth	r3, r3
 8011324:	4618      	mov	r0, r3
 8011326:	f7fb f9c5 	bl	800c6b4 <lwip_htons>
 801132a:	4603      	mov	r3, r0
 801132c:	b2db      	uxtb	r3, r3
 801132e:	f003 0301 	and.w	r3, r3, #1
 8011332:	2b00      	cmp	r3, #0
 8011334:	d00d      	beq.n	8011352 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	68db      	ldr	r3, [r3, #12]
 801133a:	899b      	ldrh	r3, [r3, #12]
 801133c:	b29c      	uxth	r4, r3
 801133e:	2001      	movs	r0, #1
 8011340:	f7fb f9b8 	bl	800c6b4 <lwip_htons>
 8011344:	4603      	mov	r3, r0
 8011346:	461a      	mov	r2, r3
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	68db      	ldr	r3, [r3, #12]
 801134c:	4322      	orrs	r2, r4
 801134e:	b292      	uxth	r2, r2
 8011350:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8011352:	683b      	ldr	r3, [r7, #0]
 8011354:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8011356:	683b      	ldr	r3, [r7, #0]
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801135c:	68f8      	ldr	r0, [r7, #12]
 801135e:	f7fe f968 	bl	800f632 <tcp_seg_free>
    while (next &&
 8011362:	683b      	ldr	r3, [r7, #0]
 8011364:	2b00      	cmp	r3, #0
 8011366:	d00e      	beq.n	8011386 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	891b      	ldrh	r3, [r3, #8]
 801136c:	461a      	mov	r2, r3
 801136e:	4b1d      	ldr	r3, [pc, #116]	; (80113e4 <tcp_oos_insert_segment+0x10c>)
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	441a      	add	r2, r3
 8011374:	683b      	ldr	r3, [r7, #0]
 8011376:	68db      	ldr	r3, [r3, #12]
 8011378:	685b      	ldr	r3, [r3, #4]
 801137a:	6839      	ldr	r1, [r7, #0]
 801137c:	8909      	ldrh	r1, [r1, #8]
 801137e:	440b      	add	r3, r1
 8011380:	1ad3      	subs	r3, r2, r3
    while (next &&
 8011382:	2b00      	cmp	r3, #0
 8011384:	daca      	bge.n	801131c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8011386:	683b      	ldr	r3, [r7, #0]
 8011388:	2b00      	cmp	r3, #0
 801138a:	d01e      	beq.n	80113ca <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	891b      	ldrh	r3, [r3, #8]
 8011390:	461a      	mov	r2, r3
 8011392:	4b14      	ldr	r3, [pc, #80]	; (80113e4 <tcp_oos_insert_segment+0x10c>)
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	441a      	add	r2, r3
 8011398:	683b      	ldr	r3, [r7, #0]
 801139a:	68db      	ldr	r3, [r3, #12]
 801139c:	685b      	ldr	r3, [r3, #4]
 801139e:	1ad3      	subs	r3, r2, r3
    if (next &&
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	dd12      	ble.n	80113ca <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80113a4:	683b      	ldr	r3, [r7, #0]
 80113a6:	68db      	ldr	r3, [r3, #12]
 80113a8:	685b      	ldr	r3, [r3, #4]
 80113aa:	b29a      	uxth	r2, r3
 80113ac:	4b0d      	ldr	r3, [pc, #52]	; (80113e4 <tcp_oos_insert_segment+0x10c>)
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	b29b      	uxth	r3, r3
 80113b2:	1ad3      	subs	r3, r2, r3
 80113b4:	b29a      	uxth	r2, r3
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	685a      	ldr	r2, [r3, #4]
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	891b      	ldrh	r3, [r3, #8]
 80113c2:	4619      	mov	r1, r3
 80113c4:	4610      	mov	r0, r2
 80113c6:	f7fc fb81 	bl	800dacc <pbuf_realloc>
    }
  }
  cseg->next = next;
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	683a      	ldr	r2, [r7, #0]
 80113ce:	601a      	str	r2, [r3, #0]
}
 80113d0:	bf00      	nop
 80113d2:	3714      	adds	r7, #20
 80113d4:	46bd      	mov	sp, r7
 80113d6:	bd90      	pop	{r4, r7, pc}
 80113d8:	0801aab4 	.word	0x0801aab4
 80113dc:	0801ad74 	.word	0x0801ad74
 80113e0:	0801ab00 	.word	0x0801ab00
 80113e4:	200016c8 	.word	0x200016c8

080113e8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80113e8:	b5b0      	push	{r4, r5, r7, lr}
 80113ea:	b086      	sub	sp, #24
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	60f8      	str	r0, [r7, #12]
 80113f0:	60b9      	str	r1, [r7, #8]
 80113f2:	607a      	str	r2, [r7, #4]
 80113f4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80113f6:	e03e      	b.n	8011476 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80113f8:	68bb      	ldr	r3, [r7, #8]
 80113fa:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80113fc:	68bb      	ldr	r3, [r7, #8]
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8011402:	697b      	ldr	r3, [r7, #20]
 8011404:	685b      	ldr	r3, [r3, #4]
 8011406:	4618      	mov	r0, r3
 8011408:	f7fc fd6e 	bl	800dee8 <pbuf_clen>
 801140c:	4603      	mov	r3, r0
 801140e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011416:	8a7a      	ldrh	r2, [r7, #18]
 8011418:	429a      	cmp	r2, r3
 801141a:	d906      	bls.n	801142a <tcp_free_acked_segments+0x42>
 801141c:	4b2a      	ldr	r3, [pc, #168]	; (80114c8 <tcp_free_acked_segments+0xe0>)
 801141e:	f240 4257 	movw	r2, #1111	; 0x457
 8011422:	492a      	ldr	r1, [pc, #168]	; (80114cc <tcp_free_acked_segments+0xe4>)
 8011424:	482a      	ldr	r0, [pc, #168]	; (80114d0 <tcp_free_acked_segments+0xe8>)
 8011426:	f005 fde5 	bl	8016ff4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8011430:	8a7b      	ldrh	r3, [r7, #18]
 8011432:	1ad3      	subs	r3, r2, r3
 8011434:	b29a      	uxth	r2, r3
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801143c:	697b      	ldr	r3, [r7, #20]
 801143e:	891a      	ldrh	r2, [r3, #8]
 8011440:	4b24      	ldr	r3, [pc, #144]	; (80114d4 <tcp_free_acked_segments+0xec>)
 8011442:	881b      	ldrh	r3, [r3, #0]
 8011444:	4413      	add	r3, r2
 8011446:	b29a      	uxth	r2, r3
 8011448:	4b22      	ldr	r3, [pc, #136]	; (80114d4 <tcp_free_acked_segments+0xec>)
 801144a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801144c:	6978      	ldr	r0, [r7, #20]
 801144e:	f7fe f8f0 	bl	800f632 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011458:	2b00      	cmp	r3, #0
 801145a:	d00c      	beq.n	8011476 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801145c:	68bb      	ldr	r3, [r7, #8]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d109      	bne.n	8011476 <tcp_free_acked_segments+0x8e>
 8011462:	683b      	ldr	r3, [r7, #0]
 8011464:	2b00      	cmp	r3, #0
 8011466:	d106      	bne.n	8011476 <tcp_free_acked_segments+0x8e>
 8011468:	4b17      	ldr	r3, [pc, #92]	; (80114c8 <tcp_free_acked_segments+0xe0>)
 801146a:	f240 4261 	movw	r2, #1121	; 0x461
 801146e:	491a      	ldr	r1, [pc, #104]	; (80114d8 <tcp_free_acked_segments+0xf0>)
 8011470:	4817      	ldr	r0, [pc, #92]	; (80114d0 <tcp_free_acked_segments+0xe8>)
 8011472:	f005 fdbf 	bl	8016ff4 <iprintf>
  while (seg_list != NULL &&
 8011476:	68bb      	ldr	r3, [r7, #8]
 8011478:	2b00      	cmp	r3, #0
 801147a:	d020      	beq.n	80114be <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801147c:	68bb      	ldr	r3, [r7, #8]
 801147e:	68db      	ldr	r3, [r3, #12]
 8011480:	685b      	ldr	r3, [r3, #4]
 8011482:	4618      	mov	r0, r3
 8011484:	f7fb f92b 	bl	800c6de <lwip_htonl>
 8011488:	4604      	mov	r4, r0
 801148a:	68bb      	ldr	r3, [r7, #8]
 801148c:	891b      	ldrh	r3, [r3, #8]
 801148e:	461d      	mov	r5, r3
 8011490:	68bb      	ldr	r3, [r7, #8]
 8011492:	68db      	ldr	r3, [r3, #12]
 8011494:	899b      	ldrh	r3, [r3, #12]
 8011496:	b29b      	uxth	r3, r3
 8011498:	4618      	mov	r0, r3
 801149a:	f7fb f90b 	bl	800c6b4 <lwip_htons>
 801149e:	4603      	mov	r3, r0
 80114a0:	b2db      	uxtb	r3, r3
 80114a2:	f003 0303 	and.w	r3, r3, #3
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d001      	beq.n	80114ae <tcp_free_acked_segments+0xc6>
 80114aa:	2301      	movs	r3, #1
 80114ac:	e000      	b.n	80114b0 <tcp_free_acked_segments+0xc8>
 80114ae:	2300      	movs	r3, #0
 80114b0:	442b      	add	r3, r5
 80114b2:	18e2      	adds	r2, r4, r3
 80114b4:	4b09      	ldr	r3, [pc, #36]	; (80114dc <tcp_free_acked_segments+0xf4>)
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	dd9c      	ble.n	80113f8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80114be:	68bb      	ldr	r3, [r7, #8]
}
 80114c0:	4618      	mov	r0, r3
 80114c2:	3718      	adds	r7, #24
 80114c4:	46bd      	mov	sp, r7
 80114c6:	bdb0      	pop	{r4, r5, r7, pc}
 80114c8:	0801aab4 	.word	0x0801aab4
 80114cc:	0801ad9c 	.word	0x0801ad9c
 80114d0:	0801ab00 	.word	0x0801ab00
 80114d4:	200016d0 	.word	0x200016d0
 80114d8:	0801adc4 	.word	0x0801adc4
 80114dc:	200016cc 	.word	0x200016cc

080114e0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80114e0:	b5b0      	push	{r4, r5, r7, lr}
 80114e2:	b094      	sub	sp, #80	; 0x50
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80114e8:	2300      	movs	r3, #0
 80114ea:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d106      	bne.n	8011500 <tcp_receive+0x20>
 80114f2:	4ba6      	ldr	r3, [pc, #664]	; (801178c <tcp_receive+0x2ac>)
 80114f4:	f240 427b 	movw	r2, #1147	; 0x47b
 80114f8:	49a5      	ldr	r1, [pc, #660]	; (8011790 <tcp_receive+0x2b0>)
 80114fa:	48a6      	ldr	r0, [pc, #664]	; (8011794 <tcp_receive+0x2b4>)
 80114fc:	f005 fd7a 	bl	8016ff4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	7d1b      	ldrb	r3, [r3, #20]
 8011504:	2b03      	cmp	r3, #3
 8011506:	d806      	bhi.n	8011516 <tcp_receive+0x36>
 8011508:	4ba0      	ldr	r3, [pc, #640]	; (801178c <tcp_receive+0x2ac>)
 801150a:	f240 427c 	movw	r2, #1148	; 0x47c
 801150e:	49a2      	ldr	r1, [pc, #648]	; (8011798 <tcp_receive+0x2b8>)
 8011510:	48a0      	ldr	r0, [pc, #640]	; (8011794 <tcp_receive+0x2b4>)
 8011512:	f005 fd6f 	bl	8016ff4 <iprintf>

  if (flags & TCP_ACK) {
 8011516:	4ba1      	ldr	r3, [pc, #644]	; (801179c <tcp_receive+0x2bc>)
 8011518:	781b      	ldrb	r3, [r3, #0]
 801151a:	f003 0310 	and.w	r3, r3, #16
 801151e:	2b00      	cmp	r3, #0
 8011520:	f000 8263 	beq.w	80119ea <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801152a:	461a      	mov	r2, r3
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011530:	4413      	add	r3, r2
 8011532:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011538:	4b99      	ldr	r3, [pc, #612]	; (80117a0 <tcp_receive+0x2c0>)
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	1ad3      	subs	r3, r2, r3
 801153e:	2b00      	cmp	r3, #0
 8011540:	db1b      	blt.n	801157a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011546:	4b96      	ldr	r3, [pc, #600]	; (80117a0 <tcp_receive+0x2c0>)
 8011548:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801154a:	429a      	cmp	r2, r3
 801154c:	d106      	bne.n	801155c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011552:	4b94      	ldr	r3, [pc, #592]	; (80117a4 <tcp_receive+0x2c4>)
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	1ad3      	subs	r3, r2, r3
 8011558:	2b00      	cmp	r3, #0
 801155a:	db0e      	blt.n	801157a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011560:	4b90      	ldr	r3, [pc, #576]	; (80117a4 <tcp_receive+0x2c4>)
 8011562:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011564:	429a      	cmp	r2, r3
 8011566:	d125      	bne.n	80115b4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011568:	4b8f      	ldr	r3, [pc, #572]	; (80117a8 <tcp_receive+0x2c8>)
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	89db      	ldrh	r3, [r3, #14]
 801156e:	b29a      	uxth	r2, r3
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011576:	429a      	cmp	r2, r3
 8011578:	d91c      	bls.n	80115b4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801157a:	4b8b      	ldr	r3, [pc, #556]	; (80117a8 <tcp_receive+0x2c8>)
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	89db      	ldrh	r3, [r3, #14]
 8011580:	b29a      	uxth	r2, r3
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011594:	429a      	cmp	r2, r3
 8011596:	d205      	bcs.n	80115a4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80115a4:	4b7e      	ldr	r3, [pc, #504]	; (80117a0 <tcp_receive+0x2c0>)
 80115a6:	681a      	ldr	r2, [r3, #0]
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80115ac:	4b7d      	ldr	r3, [pc, #500]	; (80117a4 <tcp_receive+0x2c4>)
 80115ae:	681a      	ldr	r2, [r3, #0]
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80115b4:	4b7b      	ldr	r3, [pc, #492]	; (80117a4 <tcp_receive+0x2c4>)
 80115b6:	681a      	ldr	r2, [r3, #0]
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80115bc:	1ad3      	subs	r3, r2, r3
 80115be:	2b00      	cmp	r3, #0
 80115c0:	dc58      	bgt.n	8011674 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80115c2:	4b7a      	ldr	r3, [pc, #488]	; (80117ac <tcp_receive+0x2cc>)
 80115c4:	881b      	ldrh	r3, [r3, #0]
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d14b      	bne.n	8011662 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80115ce:	687a      	ldr	r2, [r7, #4]
 80115d0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80115d4:	4413      	add	r3, r2
 80115d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80115d8:	429a      	cmp	r2, r3
 80115da:	d142      	bne.n	8011662 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	db3d      	blt.n	8011662 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80115ea:	4b6e      	ldr	r3, [pc, #440]	; (80117a4 <tcp_receive+0x2c4>)
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	429a      	cmp	r2, r3
 80115f0:	d137      	bne.n	8011662 <tcp_receive+0x182>
              found_dupack = 1;
 80115f2:	2301      	movs	r3, #1
 80115f4:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80115fc:	2bff      	cmp	r3, #255	; 0xff
 80115fe:	d007      	beq.n	8011610 <tcp_receive+0x130>
                ++pcb->dupacks;
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011606:	3301      	adds	r3, #1
 8011608:	b2da      	uxtb	r2, r3
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011616:	2b03      	cmp	r3, #3
 8011618:	d91b      	bls.n	8011652 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011624:	4413      	add	r3, r2
 8011626:	b29a      	uxth	r2, r3
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801162e:	429a      	cmp	r2, r3
 8011630:	d30a      	bcc.n	8011648 <tcp_receive+0x168>
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801163c:	4413      	add	r3, r2
 801163e:	b29a      	uxth	r2, r3
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011646:	e004      	b.n	8011652 <tcp_receive+0x172>
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801164e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011658:	2b02      	cmp	r3, #2
 801165a:	d902      	bls.n	8011662 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801165c:	6878      	ldr	r0, [r7, #4]
 801165e:	f002 fb41 	bl	8013ce4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8011662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011664:	2b00      	cmp	r3, #0
 8011666:	f040 8160 	bne.w	801192a <tcp_receive+0x44a>
        pcb->dupacks = 0;
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	2200      	movs	r2, #0
 801166e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011672:	e15a      	b.n	801192a <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011674:	4b4b      	ldr	r3, [pc, #300]	; (80117a4 <tcp_receive+0x2c4>)
 8011676:	681a      	ldr	r2, [r3, #0]
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801167c:	1ad3      	subs	r3, r2, r3
 801167e:	3b01      	subs	r3, #1
 8011680:	2b00      	cmp	r3, #0
 8011682:	f2c0 814d 	blt.w	8011920 <tcp_receive+0x440>
 8011686:	4b47      	ldr	r3, [pc, #284]	; (80117a4 <tcp_receive+0x2c4>)
 8011688:	681a      	ldr	r2, [r3, #0]
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801168e:	1ad3      	subs	r3, r2, r3
 8011690:	2b00      	cmp	r3, #0
 8011692:	f300 8145 	bgt.w	8011920 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	8b5b      	ldrh	r3, [r3, #26]
 801169a:	f003 0304 	and.w	r3, r3, #4
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d010      	beq.n	80116c4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	8b5b      	ldrh	r3, [r3, #26]
 80116a6:	f023 0304 	bic.w	r3, r3, #4
 80116aa:	b29a      	uxth	r2, r3
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	2200      	movs	r2, #0
 80116c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	2200      	movs	r2, #0
 80116c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80116d2:	10db      	asrs	r3, r3, #3
 80116d4:	b21b      	sxth	r3, r3
 80116d6:	b29a      	uxth	r2, r3
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80116de:	b29b      	uxth	r3, r3
 80116e0:	4413      	add	r3, r2
 80116e2:	b29b      	uxth	r3, r3
 80116e4:	b21a      	sxth	r2, r3
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80116ec:	4b2d      	ldr	r3, [pc, #180]	; (80117a4 <tcp_receive+0x2c4>)
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	b29a      	uxth	r2, r3
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80116f6:	b29b      	uxth	r3, r3
 80116f8:	1ad3      	subs	r3, r2, r3
 80116fa:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	2200      	movs	r2, #0
 8011700:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8011704:	4b27      	ldr	r3, [pc, #156]	; (80117a4 <tcp_receive+0x2c4>)
 8011706:	681a      	ldr	r2, [r3, #0]
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	7d1b      	ldrb	r3, [r3, #20]
 8011710:	2b03      	cmp	r3, #3
 8011712:	f240 8096 	bls.w	8011842 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011722:	429a      	cmp	r2, r3
 8011724:	d244      	bcs.n	80117b0 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	8b5b      	ldrh	r3, [r3, #26]
 801172a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801172e:	2b00      	cmp	r3, #0
 8011730:	d001      	beq.n	8011736 <tcp_receive+0x256>
 8011732:	2301      	movs	r3, #1
 8011734:	e000      	b.n	8011738 <tcp_receive+0x258>
 8011736:	2302      	movs	r3, #2
 8011738:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801173c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011740:	b29a      	uxth	r2, r3
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011746:	fb12 f303 	smulbb	r3, r2, r3
 801174a:	b29b      	uxth	r3, r3
 801174c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801174e:	4293      	cmp	r3, r2
 8011750:	bf28      	it	cs
 8011752:	4613      	movcs	r3, r2
 8011754:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801175c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801175e:	4413      	add	r3, r2
 8011760:	b29a      	uxth	r2, r3
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011768:	429a      	cmp	r2, r3
 801176a:	d309      	bcc.n	8011780 <tcp_receive+0x2a0>
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011772:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011774:	4413      	add	r3, r2
 8011776:	b29a      	uxth	r2, r3
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801177e:	e060      	b.n	8011842 <tcp_receive+0x362>
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011786:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801178a:	e05a      	b.n	8011842 <tcp_receive+0x362>
 801178c:	0801aab4 	.word	0x0801aab4
 8011790:	0801ade4 	.word	0x0801ade4
 8011794:	0801ab00 	.word	0x0801ab00
 8011798:	0801ae00 	.word	0x0801ae00
 801179c:	200016d4 	.word	0x200016d4
 80117a0:	200016c8 	.word	0x200016c8
 80117a4:	200016cc 	.word	0x200016cc
 80117a8:	200016b8 	.word	0x200016b8
 80117ac:	200016d2 	.word	0x200016d2
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80117b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80117b8:	4413      	add	r3, r2
 80117ba:	b29a      	uxth	r2, r3
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80117c2:	429a      	cmp	r2, r3
 80117c4:	d309      	bcc.n	80117da <tcp_receive+0x2fa>
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80117cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80117ce:	4413      	add	r3, r2
 80117d0:	b29a      	uxth	r2, r3
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80117d8:	e004      	b.n	80117e4 <tcp_receive+0x304>
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80117e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80117f0:	429a      	cmp	r2, r3
 80117f2:	d326      	bcc.n	8011842 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011800:	1ad3      	subs	r3, r2, r3
 8011802:	b29a      	uxth	r2, r3
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011814:	4413      	add	r3, r2
 8011816:	b29a      	uxth	r2, r3
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801181e:	429a      	cmp	r2, r3
 8011820:	d30a      	bcc.n	8011838 <tcp_receive+0x358>
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801182c:	4413      	add	r3, r2
 801182e:	b29a      	uxth	r2, r3
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011836:	e004      	b.n	8011842 <tcp_receive+0x362>
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801183e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801184a:	4a98      	ldr	r2, [pc, #608]	; (8011aac <tcp_receive+0x5cc>)
 801184c:	6878      	ldr	r0, [r7, #4]
 801184e:	f7ff fdcb 	bl	80113e8 <tcp_free_acked_segments>
 8011852:	4602      	mov	r2, r0
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011860:	4a93      	ldr	r2, [pc, #588]	; (8011ab0 <tcp_receive+0x5d0>)
 8011862:	6878      	ldr	r0, [r7, #4]
 8011864:	f7ff fdc0 	bl	80113e8 <tcp_free_acked_segments>
 8011868:	4602      	mov	r2, r0
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011872:	2b00      	cmp	r3, #0
 8011874:	d104      	bne.n	8011880 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801187c:	861a      	strh	r2, [r3, #48]	; 0x30
 801187e:	e002      	b.n	8011886 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	2200      	movs	r2, #0
 8011884:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	2200      	movs	r2, #0
 801188a:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011890:	2b00      	cmp	r3, #0
 8011892:	d103      	bne.n	801189c <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	2200      	movs	r2, #0
 8011898:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80118a2:	4b84      	ldr	r3, [pc, #528]	; (8011ab4 <tcp_receive+0x5d4>)
 80118a4:	881b      	ldrh	r3, [r3, #0]
 80118a6:	4413      	add	r3, r2
 80118a8:	b29a      	uxth	r2, r3
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	8b5b      	ldrh	r3, [r3, #26]
 80118b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d035      	beq.n	8011928 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d118      	bne.n	80118f6 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d00c      	beq.n	80118e6 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118d4:	68db      	ldr	r3, [r3, #12]
 80118d6:	685b      	ldr	r3, [r3, #4]
 80118d8:	4618      	mov	r0, r3
 80118da:	f7fa ff00 	bl	800c6de <lwip_htonl>
 80118de:	4603      	mov	r3, r0
 80118e0:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	dc20      	bgt.n	8011928 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	8b5b      	ldrh	r3, [r3, #26]
 80118ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80118ee:	b29a      	uxth	r2, r3
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80118f4:	e018      	b.n	8011928 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80118fe:	68db      	ldr	r3, [r3, #12]
 8011900:	685b      	ldr	r3, [r3, #4]
 8011902:	4618      	mov	r0, r3
 8011904:	f7fa feeb 	bl	800c6de <lwip_htonl>
 8011908:	4603      	mov	r3, r0
 801190a:	1ae3      	subs	r3, r4, r3
 801190c:	2b00      	cmp	r3, #0
 801190e:	dc0b      	bgt.n	8011928 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	8b5b      	ldrh	r3, [r3, #26]
 8011914:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011918:	b29a      	uxth	r2, r3
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801191e:	e003      	b.n	8011928 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8011920:	6878      	ldr	r0, [r7, #4]
 8011922:	f002 fbcd 	bl	80140c0 <tcp_send_empty_ack>
 8011926:	e000      	b.n	801192a <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011928:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801192e:	2b00      	cmp	r3, #0
 8011930:	d05b      	beq.n	80119ea <tcp_receive+0x50a>
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011936:	4b60      	ldr	r3, [pc, #384]	; (8011ab8 <tcp_receive+0x5d8>)
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	1ad3      	subs	r3, r2, r3
 801193c:	2b00      	cmp	r3, #0
 801193e:	da54      	bge.n	80119ea <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8011940:	4b5e      	ldr	r3, [pc, #376]	; (8011abc <tcp_receive+0x5dc>)
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	b29a      	uxth	r2, r3
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801194a:	b29b      	uxth	r3, r3
 801194c:	1ad3      	subs	r3, r2, r3
 801194e:	b29b      	uxth	r3, r3
 8011950:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8011954:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801195e:	10db      	asrs	r3, r3, #3
 8011960:	b21b      	sxth	r3, r3
 8011962:	b29b      	uxth	r3, r3
 8011964:	1ad3      	subs	r3, r2, r3
 8011966:	b29b      	uxth	r3, r3
 8011968:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011972:	b29a      	uxth	r2, r3
 8011974:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011978:	4413      	add	r3, r2
 801197a:	b29b      	uxth	r3, r3
 801197c:	b21a      	sxth	r2, r3
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8011982:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011986:	2b00      	cmp	r3, #0
 8011988:	da05      	bge.n	8011996 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 801198a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801198e:	425b      	negs	r3, r3
 8011990:	b29b      	uxth	r3, r3
 8011992:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8011996:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80119a0:	109b      	asrs	r3, r3, #2
 80119a2:	b21b      	sxth	r3, r3
 80119a4:	b29b      	uxth	r3, r3
 80119a6:	1ad3      	subs	r3, r2, r3
 80119a8:	b29b      	uxth	r3, r3
 80119aa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80119b4:	b29a      	uxth	r2, r3
 80119b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80119ba:	4413      	add	r3, r2
 80119bc:	b29b      	uxth	r3, r3
 80119be:	b21a      	sxth	r2, r3
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80119ca:	10db      	asrs	r3, r3, #3
 80119cc:	b21b      	sxth	r3, r3
 80119ce:	b29a      	uxth	r2, r3
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80119d6:	b29b      	uxth	r3, r3
 80119d8:	4413      	add	r3, r2
 80119da:	b29b      	uxth	r3, r3
 80119dc:	b21a      	sxth	r2, r3
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	2200      	movs	r2, #0
 80119e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80119ea:	4b35      	ldr	r3, [pc, #212]	; (8011ac0 <tcp_receive+0x5e0>)
 80119ec:	881b      	ldrh	r3, [r3, #0]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	f000 84e1 	beq.w	80123b6 <tcp_receive+0xed6>
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	7d1b      	ldrb	r3, [r3, #20]
 80119f8:	2b06      	cmp	r3, #6
 80119fa:	f200 84dc 	bhi.w	80123b6 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011a02:	4b30      	ldr	r3, [pc, #192]	; (8011ac4 <tcp_receive+0x5e4>)
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	1ad3      	subs	r3, r2, r3
 8011a08:	3b01      	subs	r3, #1
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	f2c0 808e 	blt.w	8011b2c <tcp_receive+0x64c>
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011a14:	4b2a      	ldr	r3, [pc, #168]	; (8011ac0 <tcp_receive+0x5e0>)
 8011a16:	881b      	ldrh	r3, [r3, #0]
 8011a18:	4619      	mov	r1, r3
 8011a1a:	4b2a      	ldr	r3, [pc, #168]	; (8011ac4 <tcp_receive+0x5e4>)
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	440b      	add	r3, r1
 8011a20:	1ad3      	subs	r3, r2, r3
 8011a22:	3301      	adds	r3, #1
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	f300 8081 	bgt.w	8011b2c <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8011a2a:	4b27      	ldr	r3, [pc, #156]	; (8011ac8 <tcp_receive+0x5e8>)
 8011a2c:	685b      	ldr	r3, [r3, #4]
 8011a2e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011a34:	4b23      	ldr	r3, [pc, #140]	; (8011ac4 <tcp_receive+0x5e4>)
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	1ad3      	subs	r3, r2, r3
 8011a3a:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011a3c:	4b22      	ldr	r3, [pc, #136]	; (8011ac8 <tcp_receive+0x5e8>)
 8011a3e:	685b      	ldr	r3, [r3, #4]
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d106      	bne.n	8011a52 <tcp_receive+0x572>
 8011a44:	4b21      	ldr	r3, [pc, #132]	; (8011acc <tcp_receive+0x5ec>)
 8011a46:	f240 5294 	movw	r2, #1428	; 0x594
 8011a4a:	4921      	ldr	r1, [pc, #132]	; (8011ad0 <tcp_receive+0x5f0>)
 8011a4c:	4821      	ldr	r0, [pc, #132]	; (8011ad4 <tcp_receive+0x5f4>)
 8011a4e:	f005 fad1 	bl	8016ff4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8011a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a54:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011a58:	4293      	cmp	r3, r2
 8011a5a:	d906      	bls.n	8011a6a <tcp_receive+0x58a>
 8011a5c:	4b1b      	ldr	r3, [pc, #108]	; (8011acc <tcp_receive+0x5ec>)
 8011a5e:	f240 5295 	movw	r2, #1429	; 0x595
 8011a62:	491d      	ldr	r1, [pc, #116]	; (8011ad8 <tcp_receive+0x5f8>)
 8011a64:	481b      	ldr	r0, [pc, #108]	; (8011ad4 <tcp_receive+0x5f4>)
 8011a66:	f005 fac5 	bl	8016ff4 <iprintf>
      off = (u16_t)off32;
 8011a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a6c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011a70:	4b15      	ldr	r3, [pc, #84]	; (8011ac8 <tcp_receive+0x5e8>)
 8011a72:	685b      	ldr	r3, [r3, #4]
 8011a74:	891b      	ldrh	r3, [r3, #8]
 8011a76:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011a7a:	429a      	cmp	r2, r3
 8011a7c:	d906      	bls.n	8011a8c <tcp_receive+0x5ac>
 8011a7e:	4b13      	ldr	r3, [pc, #76]	; (8011acc <tcp_receive+0x5ec>)
 8011a80:	f240 5297 	movw	r2, #1431	; 0x597
 8011a84:	4915      	ldr	r1, [pc, #84]	; (8011adc <tcp_receive+0x5fc>)
 8011a86:	4813      	ldr	r0, [pc, #76]	; (8011ad4 <tcp_receive+0x5f4>)
 8011a88:	f005 fab4 	bl	8016ff4 <iprintf>
      inseg.len -= off;
 8011a8c:	4b0e      	ldr	r3, [pc, #56]	; (8011ac8 <tcp_receive+0x5e8>)
 8011a8e:	891a      	ldrh	r2, [r3, #8]
 8011a90:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011a94:	1ad3      	subs	r3, r2, r3
 8011a96:	b29a      	uxth	r2, r3
 8011a98:	4b0b      	ldr	r3, [pc, #44]	; (8011ac8 <tcp_receive+0x5e8>)
 8011a9a:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011a9c:	4b0a      	ldr	r3, [pc, #40]	; (8011ac8 <tcp_receive+0x5e8>)
 8011a9e:	685b      	ldr	r3, [r3, #4]
 8011aa0:	891a      	ldrh	r2, [r3, #8]
 8011aa2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011aa6:	1ad3      	subs	r3, r2, r3
 8011aa8:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8011aaa:	e029      	b.n	8011b00 <tcp_receive+0x620>
 8011aac:	0801ae1c 	.word	0x0801ae1c
 8011ab0:	0801ae24 	.word	0x0801ae24
 8011ab4:	200016d0 	.word	0x200016d0
 8011ab8:	200016cc 	.word	0x200016cc
 8011abc:	20016dc0 	.word	0x20016dc0
 8011ac0:	200016d2 	.word	0x200016d2
 8011ac4:	200016c8 	.word	0x200016c8
 8011ac8:	200016a8 	.word	0x200016a8
 8011acc:	0801aab4 	.word	0x0801aab4
 8011ad0:	0801ae2c 	.word	0x0801ae2c
 8011ad4:	0801ab00 	.word	0x0801ab00
 8011ad8:	0801ae3c 	.word	0x0801ae3c
 8011adc:	0801ae4c 	.word	0x0801ae4c
        off -= p->len;
 8011ae0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ae2:	895b      	ldrh	r3, [r3, #10]
 8011ae4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011ae8:	1ad3      	subs	r3, r2, r3
 8011aea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8011aee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011af0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011af2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8011af4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011af6:	2200      	movs	r2, #0
 8011af8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8011afa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8011b00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b02:	895b      	ldrh	r3, [r3, #10]
 8011b04:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011b08:	429a      	cmp	r2, r3
 8011b0a:	d8e9      	bhi.n	8011ae0 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011b0c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011b10:	4619      	mov	r1, r3
 8011b12:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011b14:	f7fc f8da 	bl	800dccc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b1c:	4a91      	ldr	r2, [pc, #580]	; (8011d64 <tcp_receive+0x884>)
 8011b1e:	6013      	str	r3, [r2, #0]
 8011b20:	4b91      	ldr	r3, [pc, #580]	; (8011d68 <tcp_receive+0x888>)
 8011b22:	68db      	ldr	r3, [r3, #12]
 8011b24:	4a8f      	ldr	r2, [pc, #572]	; (8011d64 <tcp_receive+0x884>)
 8011b26:	6812      	ldr	r2, [r2, #0]
 8011b28:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011b2a:	e00d      	b.n	8011b48 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011b2c:	4b8d      	ldr	r3, [pc, #564]	; (8011d64 <tcp_receive+0x884>)
 8011b2e:	681a      	ldr	r2, [r3, #0]
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b34:	1ad3      	subs	r3, r2, r3
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	da06      	bge.n	8011b48 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	8b5b      	ldrh	r3, [r3, #26]
 8011b3e:	f043 0302 	orr.w	r3, r3, #2
 8011b42:	b29a      	uxth	r2, r3
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011b48:	4b86      	ldr	r3, [pc, #536]	; (8011d64 <tcp_receive+0x884>)
 8011b4a:	681a      	ldr	r2, [r3, #0]
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b50:	1ad3      	subs	r3, r2, r3
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	f2c0 842a 	blt.w	80123ac <tcp_receive+0xecc>
 8011b58:	4b82      	ldr	r3, [pc, #520]	; (8011d64 <tcp_receive+0x884>)
 8011b5a:	681a      	ldr	r2, [r3, #0]
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b60:	6879      	ldr	r1, [r7, #4]
 8011b62:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011b64:	440b      	add	r3, r1
 8011b66:	1ad3      	subs	r3, r2, r3
 8011b68:	3301      	adds	r3, #1
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	f300 841e 	bgt.w	80123ac <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011b74:	4b7b      	ldr	r3, [pc, #492]	; (8011d64 <tcp_receive+0x884>)
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	429a      	cmp	r2, r3
 8011b7a:	f040 829a 	bne.w	80120b2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011b7e:	4b7a      	ldr	r3, [pc, #488]	; (8011d68 <tcp_receive+0x888>)
 8011b80:	891c      	ldrh	r4, [r3, #8]
 8011b82:	4b79      	ldr	r3, [pc, #484]	; (8011d68 <tcp_receive+0x888>)
 8011b84:	68db      	ldr	r3, [r3, #12]
 8011b86:	899b      	ldrh	r3, [r3, #12]
 8011b88:	b29b      	uxth	r3, r3
 8011b8a:	4618      	mov	r0, r3
 8011b8c:	f7fa fd92 	bl	800c6b4 <lwip_htons>
 8011b90:	4603      	mov	r3, r0
 8011b92:	b2db      	uxtb	r3, r3
 8011b94:	f003 0303 	and.w	r3, r3, #3
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d001      	beq.n	8011ba0 <tcp_receive+0x6c0>
 8011b9c:	2301      	movs	r3, #1
 8011b9e:	e000      	b.n	8011ba2 <tcp_receive+0x6c2>
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	4423      	add	r3, r4
 8011ba4:	b29a      	uxth	r2, r3
 8011ba6:	4b71      	ldr	r3, [pc, #452]	; (8011d6c <tcp_receive+0x88c>)
 8011ba8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011bae:	4b6f      	ldr	r3, [pc, #444]	; (8011d6c <tcp_receive+0x88c>)
 8011bb0:	881b      	ldrh	r3, [r3, #0]
 8011bb2:	429a      	cmp	r2, r3
 8011bb4:	d275      	bcs.n	8011ca2 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011bb6:	4b6c      	ldr	r3, [pc, #432]	; (8011d68 <tcp_receive+0x888>)
 8011bb8:	68db      	ldr	r3, [r3, #12]
 8011bba:	899b      	ldrh	r3, [r3, #12]
 8011bbc:	b29b      	uxth	r3, r3
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	f7fa fd78 	bl	800c6b4 <lwip_htons>
 8011bc4:	4603      	mov	r3, r0
 8011bc6:	b2db      	uxtb	r3, r3
 8011bc8:	f003 0301 	and.w	r3, r3, #1
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d01f      	beq.n	8011c10 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011bd0:	4b65      	ldr	r3, [pc, #404]	; (8011d68 <tcp_receive+0x888>)
 8011bd2:	68db      	ldr	r3, [r3, #12]
 8011bd4:	899b      	ldrh	r3, [r3, #12]
 8011bd6:	b29b      	uxth	r3, r3
 8011bd8:	b21b      	sxth	r3, r3
 8011bda:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011bde:	b21c      	sxth	r4, r3
 8011be0:	4b61      	ldr	r3, [pc, #388]	; (8011d68 <tcp_receive+0x888>)
 8011be2:	68db      	ldr	r3, [r3, #12]
 8011be4:	899b      	ldrh	r3, [r3, #12]
 8011be6:	b29b      	uxth	r3, r3
 8011be8:	4618      	mov	r0, r3
 8011bea:	f7fa fd63 	bl	800c6b4 <lwip_htons>
 8011bee:	4603      	mov	r3, r0
 8011bf0:	b2db      	uxtb	r3, r3
 8011bf2:	b29b      	uxth	r3, r3
 8011bf4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011bf8:	b29b      	uxth	r3, r3
 8011bfa:	4618      	mov	r0, r3
 8011bfc:	f7fa fd5a 	bl	800c6b4 <lwip_htons>
 8011c00:	4603      	mov	r3, r0
 8011c02:	b21b      	sxth	r3, r3
 8011c04:	4323      	orrs	r3, r4
 8011c06:	b21a      	sxth	r2, r3
 8011c08:	4b57      	ldr	r3, [pc, #348]	; (8011d68 <tcp_receive+0x888>)
 8011c0a:	68db      	ldr	r3, [r3, #12]
 8011c0c:	b292      	uxth	r2, r2
 8011c0e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011c14:	4b54      	ldr	r3, [pc, #336]	; (8011d68 <tcp_receive+0x888>)
 8011c16:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011c18:	4b53      	ldr	r3, [pc, #332]	; (8011d68 <tcp_receive+0x888>)
 8011c1a:	68db      	ldr	r3, [r3, #12]
 8011c1c:	899b      	ldrh	r3, [r3, #12]
 8011c1e:	b29b      	uxth	r3, r3
 8011c20:	4618      	mov	r0, r3
 8011c22:	f7fa fd47 	bl	800c6b4 <lwip_htons>
 8011c26:	4603      	mov	r3, r0
 8011c28:	b2db      	uxtb	r3, r3
 8011c2a:	f003 0302 	and.w	r3, r3, #2
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d005      	beq.n	8011c3e <tcp_receive+0x75e>
            inseg.len -= 1;
 8011c32:	4b4d      	ldr	r3, [pc, #308]	; (8011d68 <tcp_receive+0x888>)
 8011c34:	891b      	ldrh	r3, [r3, #8]
 8011c36:	3b01      	subs	r3, #1
 8011c38:	b29a      	uxth	r2, r3
 8011c3a:	4b4b      	ldr	r3, [pc, #300]	; (8011d68 <tcp_receive+0x888>)
 8011c3c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011c3e:	4b4a      	ldr	r3, [pc, #296]	; (8011d68 <tcp_receive+0x888>)
 8011c40:	685b      	ldr	r3, [r3, #4]
 8011c42:	4a49      	ldr	r2, [pc, #292]	; (8011d68 <tcp_receive+0x888>)
 8011c44:	8912      	ldrh	r2, [r2, #8]
 8011c46:	4611      	mov	r1, r2
 8011c48:	4618      	mov	r0, r3
 8011c4a:	f7fb ff3f 	bl	800dacc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011c4e:	4b46      	ldr	r3, [pc, #280]	; (8011d68 <tcp_receive+0x888>)
 8011c50:	891c      	ldrh	r4, [r3, #8]
 8011c52:	4b45      	ldr	r3, [pc, #276]	; (8011d68 <tcp_receive+0x888>)
 8011c54:	68db      	ldr	r3, [r3, #12]
 8011c56:	899b      	ldrh	r3, [r3, #12]
 8011c58:	b29b      	uxth	r3, r3
 8011c5a:	4618      	mov	r0, r3
 8011c5c:	f7fa fd2a 	bl	800c6b4 <lwip_htons>
 8011c60:	4603      	mov	r3, r0
 8011c62:	b2db      	uxtb	r3, r3
 8011c64:	f003 0303 	and.w	r3, r3, #3
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d001      	beq.n	8011c70 <tcp_receive+0x790>
 8011c6c:	2301      	movs	r3, #1
 8011c6e:	e000      	b.n	8011c72 <tcp_receive+0x792>
 8011c70:	2300      	movs	r3, #0
 8011c72:	4423      	add	r3, r4
 8011c74:	b29a      	uxth	r2, r3
 8011c76:	4b3d      	ldr	r3, [pc, #244]	; (8011d6c <tcp_receive+0x88c>)
 8011c78:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011c7a:	4b3c      	ldr	r3, [pc, #240]	; (8011d6c <tcp_receive+0x88c>)
 8011c7c:	881b      	ldrh	r3, [r3, #0]
 8011c7e:	461a      	mov	r2, r3
 8011c80:	4b38      	ldr	r3, [pc, #224]	; (8011d64 <tcp_receive+0x884>)
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	441a      	add	r2, r3
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c8a:	6879      	ldr	r1, [r7, #4]
 8011c8c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011c8e:	440b      	add	r3, r1
 8011c90:	429a      	cmp	r2, r3
 8011c92:	d006      	beq.n	8011ca2 <tcp_receive+0x7c2>
 8011c94:	4b36      	ldr	r3, [pc, #216]	; (8011d70 <tcp_receive+0x890>)
 8011c96:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8011c9a:	4936      	ldr	r1, [pc, #216]	; (8011d74 <tcp_receive+0x894>)
 8011c9c:	4836      	ldr	r0, [pc, #216]	; (8011d78 <tcp_receive+0x898>)
 8011c9e:	f005 f9a9 	bl	8016ff4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	f000 80e7 	beq.w	8011e7a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011cac:	4b2e      	ldr	r3, [pc, #184]	; (8011d68 <tcp_receive+0x888>)
 8011cae:	68db      	ldr	r3, [r3, #12]
 8011cb0:	899b      	ldrh	r3, [r3, #12]
 8011cb2:	b29b      	uxth	r3, r3
 8011cb4:	4618      	mov	r0, r3
 8011cb6:	f7fa fcfd 	bl	800c6b4 <lwip_htons>
 8011cba:	4603      	mov	r3, r0
 8011cbc:	b2db      	uxtb	r3, r3
 8011cbe:	f003 0301 	and.w	r3, r3, #1
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d010      	beq.n	8011ce8 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011cc6:	e00a      	b.n	8011cde <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ccc:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011cd2:	681a      	ldr	r2, [r3, #0]
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8011cd8:	68f8      	ldr	r0, [r7, #12]
 8011cda:	f7fd fcaa 	bl	800f632 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d1f0      	bne.n	8011cc8 <tcp_receive+0x7e8>
 8011ce6:	e0c8      	b.n	8011e7a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011cec:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011cee:	e052      	b.n	8011d96 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011cf2:	68db      	ldr	r3, [r3, #12]
 8011cf4:	899b      	ldrh	r3, [r3, #12]
 8011cf6:	b29b      	uxth	r3, r3
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	f7fa fcdb 	bl	800c6b4 <lwip_htons>
 8011cfe:	4603      	mov	r3, r0
 8011d00:	b2db      	uxtb	r3, r3
 8011d02:	f003 0301 	and.w	r3, r3, #1
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d03d      	beq.n	8011d86 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011d0a:	4b17      	ldr	r3, [pc, #92]	; (8011d68 <tcp_receive+0x888>)
 8011d0c:	68db      	ldr	r3, [r3, #12]
 8011d0e:	899b      	ldrh	r3, [r3, #12]
 8011d10:	b29b      	uxth	r3, r3
 8011d12:	4618      	mov	r0, r3
 8011d14:	f7fa fcce 	bl	800c6b4 <lwip_htons>
 8011d18:	4603      	mov	r3, r0
 8011d1a:	b2db      	uxtb	r3, r3
 8011d1c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d130      	bne.n	8011d86 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011d24:	4b10      	ldr	r3, [pc, #64]	; (8011d68 <tcp_receive+0x888>)
 8011d26:	68db      	ldr	r3, [r3, #12]
 8011d28:	899b      	ldrh	r3, [r3, #12]
 8011d2a:	b29c      	uxth	r4, r3
 8011d2c:	2001      	movs	r0, #1
 8011d2e:	f7fa fcc1 	bl	800c6b4 <lwip_htons>
 8011d32:	4603      	mov	r3, r0
 8011d34:	461a      	mov	r2, r3
 8011d36:	4b0c      	ldr	r3, [pc, #48]	; (8011d68 <tcp_receive+0x888>)
 8011d38:	68db      	ldr	r3, [r3, #12]
 8011d3a:	4322      	orrs	r2, r4
 8011d3c:	b292      	uxth	r2, r2
 8011d3e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011d40:	4b09      	ldr	r3, [pc, #36]	; (8011d68 <tcp_receive+0x888>)
 8011d42:	891c      	ldrh	r4, [r3, #8]
 8011d44:	4b08      	ldr	r3, [pc, #32]	; (8011d68 <tcp_receive+0x888>)
 8011d46:	68db      	ldr	r3, [r3, #12]
 8011d48:	899b      	ldrh	r3, [r3, #12]
 8011d4a:	b29b      	uxth	r3, r3
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	f7fa fcb1 	bl	800c6b4 <lwip_htons>
 8011d52:	4603      	mov	r3, r0
 8011d54:	b2db      	uxtb	r3, r3
 8011d56:	f003 0303 	and.w	r3, r3, #3
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d00e      	beq.n	8011d7c <tcp_receive+0x89c>
 8011d5e:	2301      	movs	r3, #1
 8011d60:	e00d      	b.n	8011d7e <tcp_receive+0x89e>
 8011d62:	bf00      	nop
 8011d64:	200016c8 	.word	0x200016c8
 8011d68:	200016a8 	.word	0x200016a8
 8011d6c:	200016d2 	.word	0x200016d2
 8011d70:	0801aab4 	.word	0x0801aab4
 8011d74:	0801ae5c 	.word	0x0801ae5c
 8011d78:	0801ab00 	.word	0x0801ab00
 8011d7c:	2300      	movs	r3, #0
 8011d7e:	4423      	add	r3, r4
 8011d80:	b29a      	uxth	r2, r3
 8011d82:	4b98      	ldr	r3, [pc, #608]	; (8011fe4 <tcp_receive+0xb04>)
 8011d84:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d88:	613b      	str	r3, [r7, #16]
              next = next->next;
 8011d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8011d90:	6938      	ldr	r0, [r7, #16]
 8011d92:	f7fd fc4e 	bl	800f632 <tcp_seg_free>
            while (next &&
 8011d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d00e      	beq.n	8011dba <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011d9c:	4b91      	ldr	r3, [pc, #580]	; (8011fe4 <tcp_receive+0xb04>)
 8011d9e:	881b      	ldrh	r3, [r3, #0]
 8011da0:	461a      	mov	r2, r3
 8011da2:	4b91      	ldr	r3, [pc, #580]	; (8011fe8 <tcp_receive+0xb08>)
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	441a      	add	r2, r3
 8011da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011daa:	68db      	ldr	r3, [r3, #12]
 8011dac:	685b      	ldr	r3, [r3, #4]
 8011dae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011db0:	8909      	ldrh	r1, [r1, #8]
 8011db2:	440b      	add	r3, r1
 8011db4:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	da9a      	bge.n	8011cf0 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d059      	beq.n	8011e74 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8011dc0:	4b88      	ldr	r3, [pc, #544]	; (8011fe4 <tcp_receive+0xb04>)
 8011dc2:	881b      	ldrh	r3, [r3, #0]
 8011dc4:	461a      	mov	r2, r3
 8011dc6:	4b88      	ldr	r3, [pc, #544]	; (8011fe8 <tcp_receive+0xb08>)
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	441a      	add	r2, r3
 8011dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011dce:	68db      	ldr	r3, [r3, #12]
 8011dd0:	685b      	ldr	r3, [r3, #4]
 8011dd2:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	dd4d      	ble.n	8011e74 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011dda:	68db      	ldr	r3, [r3, #12]
 8011ddc:	685b      	ldr	r3, [r3, #4]
 8011dde:	b29a      	uxth	r2, r3
 8011de0:	4b81      	ldr	r3, [pc, #516]	; (8011fe8 <tcp_receive+0xb08>)
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	b29b      	uxth	r3, r3
 8011de6:	1ad3      	subs	r3, r2, r3
 8011de8:	b29a      	uxth	r2, r3
 8011dea:	4b80      	ldr	r3, [pc, #512]	; (8011fec <tcp_receive+0xb0c>)
 8011dec:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011dee:	4b7f      	ldr	r3, [pc, #508]	; (8011fec <tcp_receive+0xb0c>)
 8011df0:	68db      	ldr	r3, [r3, #12]
 8011df2:	899b      	ldrh	r3, [r3, #12]
 8011df4:	b29b      	uxth	r3, r3
 8011df6:	4618      	mov	r0, r3
 8011df8:	f7fa fc5c 	bl	800c6b4 <lwip_htons>
 8011dfc:	4603      	mov	r3, r0
 8011dfe:	b2db      	uxtb	r3, r3
 8011e00:	f003 0302 	and.w	r3, r3, #2
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d005      	beq.n	8011e14 <tcp_receive+0x934>
                inseg.len -= 1;
 8011e08:	4b78      	ldr	r3, [pc, #480]	; (8011fec <tcp_receive+0xb0c>)
 8011e0a:	891b      	ldrh	r3, [r3, #8]
 8011e0c:	3b01      	subs	r3, #1
 8011e0e:	b29a      	uxth	r2, r3
 8011e10:	4b76      	ldr	r3, [pc, #472]	; (8011fec <tcp_receive+0xb0c>)
 8011e12:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011e14:	4b75      	ldr	r3, [pc, #468]	; (8011fec <tcp_receive+0xb0c>)
 8011e16:	685b      	ldr	r3, [r3, #4]
 8011e18:	4a74      	ldr	r2, [pc, #464]	; (8011fec <tcp_receive+0xb0c>)
 8011e1a:	8912      	ldrh	r2, [r2, #8]
 8011e1c:	4611      	mov	r1, r2
 8011e1e:	4618      	mov	r0, r3
 8011e20:	f7fb fe54 	bl	800dacc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011e24:	4b71      	ldr	r3, [pc, #452]	; (8011fec <tcp_receive+0xb0c>)
 8011e26:	891c      	ldrh	r4, [r3, #8]
 8011e28:	4b70      	ldr	r3, [pc, #448]	; (8011fec <tcp_receive+0xb0c>)
 8011e2a:	68db      	ldr	r3, [r3, #12]
 8011e2c:	899b      	ldrh	r3, [r3, #12]
 8011e2e:	b29b      	uxth	r3, r3
 8011e30:	4618      	mov	r0, r3
 8011e32:	f7fa fc3f 	bl	800c6b4 <lwip_htons>
 8011e36:	4603      	mov	r3, r0
 8011e38:	b2db      	uxtb	r3, r3
 8011e3a:	f003 0303 	and.w	r3, r3, #3
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d001      	beq.n	8011e46 <tcp_receive+0x966>
 8011e42:	2301      	movs	r3, #1
 8011e44:	e000      	b.n	8011e48 <tcp_receive+0x968>
 8011e46:	2300      	movs	r3, #0
 8011e48:	4423      	add	r3, r4
 8011e4a:	b29a      	uxth	r2, r3
 8011e4c:	4b65      	ldr	r3, [pc, #404]	; (8011fe4 <tcp_receive+0xb04>)
 8011e4e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011e50:	4b64      	ldr	r3, [pc, #400]	; (8011fe4 <tcp_receive+0xb04>)
 8011e52:	881b      	ldrh	r3, [r3, #0]
 8011e54:	461a      	mov	r2, r3
 8011e56:	4b64      	ldr	r3, [pc, #400]	; (8011fe8 <tcp_receive+0xb08>)
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	441a      	add	r2, r3
 8011e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e5e:	68db      	ldr	r3, [r3, #12]
 8011e60:	685b      	ldr	r3, [r3, #4]
 8011e62:	429a      	cmp	r2, r3
 8011e64:	d006      	beq.n	8011e74 <tcp_receive+0x994>
 8011e66:	4b62      	ldr	r3, [pc, #392]	; (8011ff0 <tcp_receive+0xb10>)
 8011e68:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8011e6c:	4961      	ldr	r1, [pc, #388]	; (8011ff4 <tcp_receive+0xb14>)
 8011e6e:	4862      	ldr	r0, [pc, #392]	; (8011ff8 <tcp_receive+0xb18>)
 8011e70:	f005 f8c0 	bl	8016ff4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011e78:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011e7a:	4b5a      	ldr	r3, [pc, #360]	; (8011fe4 <tcp_receive+0xb04>)
 8011e7c:	881b      	ldrh	r3, [r3, #0]
 8011e7e:	461a      	mov	r2, r3
 8011e80:	4b59      	ldr	r3, [pc, #356]	; (8011fe8 <tcp_receive+0xb08>)
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	441a      	add	r2, r3
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011e8e:	4b55      	ldr	r3, [pc, #340]	; (8011fe4 <tcp_receive+0xb04>)
 8011e90:	881b      	ldrh	r3, [r3, #0]
 8011e92:	429a      	cmp	r2, r3
 8011e94:	d206      	bcs.n	8011ea4 <tcp_receive+0x9c4>
 8011e96:	4b56      	ldr	r3, [pc, #344]	; (8011ff0 <tcp_receive+0xb10>)
 8011e98:	f240 6207 	movw	r2, #1543	; 0x607
 8011e9c:	4957      	ldr	r1, [pc, #348]	; (8011ffc <tcp_receive+0xb1c>)
 8011e9e:	4856      	ldr	r0, [pc, #344]	; (8011ff8 <tcp_receive+0xb18>)
 8011ea0:	f005 f8a8 	bl	8016ff4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011ea8:	4b4e      	ldr	r3, [pc, #312]	; (8011fe4 <tcp_receive+0xb04>)
 8011eaa:	881b      	ldrh	r3, [r3, #0]
 8011eac:	1ad3      	subs	r3, r2, r3
 8011eae:	b29a      	uxth	r2, r3
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011eb4:	6878      	ldr	r0, [r7, #4]
 8011eb6:	f7fc fe97 	bl	800ebe8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011eba:	4b4c      	ldr	r3, [pc, #304]	; (8011fec <tcp_receive+0xb0c>)
 8011ebc:	685b      	ldr	r3, [r3, #4]
 8011ebe:	891b      	ldrh	r3, [r3, #8]
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d006      	beq.n	8011ed2 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8011ec4:	4b49      	ldr	r3, [pc, #292]	; (8011fec <tcp_receive+0xb0c>)
 8011ec6:	685b      	ldr	r3, [r3, #4]
 8011ec8:	4a4d      	ldr	r2, [pc, #308]	; (8012000 <tcp_receive+0xb20>)
 8011eca:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011ecc:	4b47      	ldr	r3, [pc, #284]	; (8011fec <tcp_receive+0xb0c>)
 8011ece:	2200      	movs	r2, #0
 8011ed0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011ed2:	4b46      	ldr	r3, [pc, #280]	; (8011fec <tcp_receive+0xb0c>)
 8011ed4:	68db      	ldr	r3, [r3, #12]
 8011ed6:	899b      	ldrh	r3, [r3, #12]
 8011ed8:	b29b      	uxth	r3, r3
 8011eda:	4618      	mov	r0, r3
 8011edc:	f7fa fbea 	bl	800c6b4 <lwip_htons>
 8011ee0:	4603      	mov	r3, r0
 8011ee2:	b2db      	uxtb	r3, r3
 8011ee4:	f003 0301 	and.w	r3, r3, #1
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	f000 80b8 	beq.w	801205e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011eee:	4b45      	ldr	r3, [pc, #276]	; (8012004 <tcp_receive+0xb24>)
 8011ef0:	781b      	ldrb	r3, [r3, #0]
 8011ef2:	f043 0320 	orr.w	r3, r3, #32
 8011ef6:	b2da      	uxtb	r2, r3
 8011ef8:	4b42      	ldr	r3, [pc, #264]	; (8012004 <tcp_receive+0xb24>)
 8011efa:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011efc:	e0af      	b.n	801205e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f02:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f08:	68db      	ldr	r3, [r3, #12]
 8011f0a:	685b      	ldr	r3, [r3, #4]
 8011f0c:	4a36      	ldr	r2, [pc, #216]	; (8011fe8 <tcp_receive+0xb08>)
 8011f0e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011f10:	68bb      	ldr	r3, [r7, #8]
 8011f12:	891b      	ldrh	r3, [r3, #8]
 8011f14:	461c      	mov	r4, r3
 8011f16:	68bb      	ldr	r3, [r7, #8]
 8011f18:	68db      	ldr	r3, [r3, #12]
 8011f1a:	899b      	ldrh	r3, [r3, #12]
 8011f1c:	b29b      	uxth	r3, r3
 8011f1e:	4618      	mov	r0, r3
 8011f20:	f7fa fbc8 	bl	800c6b4 <lwip_htons>
 8011f24:	4603      	mov	r3, r0
 8011f26:	b2db      	uxtb	r3, r3
 8011f28:	f003 0303 	and.w	r3, r3, #3
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d001      	beq.n	8011f34 <tcp_receive+0xa54>
 8011f30:	2301      	movs	r3, #1
 8011f32:	e000      	b.n	8011f36 <tcp_receive+0xa56>
 8011f34:	2300      	movs	r3, #0
 8011f36:	191a      	adds	r2, r3, r4
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f3c:	441a      	add	r2, r3
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011f46:	461c      	mov	r4, r3
 8011f48:	68bb      	ldr	r3, [r7, #8]
 8011f4a:	891b      	ldrh	r3, [r3, #8]
 8011f4c:	461d      	mov	r5, r3
 8011f4e:	68bb      	ldr	r3, [r7, #8]
 8011f50:	68db      	ldr	r3, [r3, #12]
 8011f52:	899b      	ldrh	r3, [r3, #12]
 8011f54:	b29b      	uxth	r3, r3
 8011f56:	4618      	mov	r0, r3
 8011f58:	f7fa fbac 	bl	800c6b4 <lwip_htons>
 8011f5c:	4603      	mov	r3, r0
 8011f5e:	b2db      	uxtb	r3, r3
 8011f60:	f003 0303 	and.w	r3, r3, #3
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d001      	beq.n	8011f6c <tcp_receive+0xa8c>
 8011f68:	2301      	movs	r3, #1
 8011f6a:	e000      	b.n	8011f6e <tcp_receive+0xa8e>
 8011f6c:	2300      	movs	r3, #0
 8011f6e:	442b      	add	r3, r5
 8011f70:	429c      	cmp	r4, r3
 8011f72:	d206      	bcs.n	8011f82 <tcp_receive+0xaa2>
 8011f74:	4b1e      	ldr	r3, [pc, #120]	; (8011ff0 <tcp_receive+0xb10>)
 8011f76:	f240 622b 	movw	r2, #1579	; 0x62b
 8011f7a:	4923      	ldr	r1, [pc, #140]	; (8012008 <tcp_receive+0xb28>)
 8011f7c:	481e      	ldr	r0, [pc, #120]	; (8011ff8 <tcp_receive+0xb18>)
 8011f7e:	f005 f839 	bl	8016ff4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011f82:	68bb      	ldr	r3, [r7, #8]
 8011f84:	891b      	ldrh	r3, [r3, #8]
 8011f86:	461c      	mov	r4, r3
 8011f88:	68bb      	ldr	r3, [r7, #8]
 8011f8a:	68db      	ldr	r3, [r3, #12]
 8011f8c:	899b      	ldrh	r3, [r3, #12]
 8011f8e:	b29b      	uxth	r3, r3
 8011f90:	4618      	mov	r0, r3
 8011f92:	f7fa fb8f 	bl	800c6b4 <lwip_htons>
 8011f96:	4603      	mov	r3, r0
 8011f98:	b2db      	uxtb	r3, r3
 8011f9a:	f003 0303 	and.w	r3, r3, #3
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d001      	beq.n	8011fa6 <tcp_receive+0xac6>
 8011fa2:	2301      	movs	r3, #1
 8011fa4:	e000      	b.n	8011fa8 <tcp_receive+0xac8>
 8011fa6:	2300      	movs	r3, #0
 8011fa8:	1919      	adds	r1, r3, r4
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011fae:	b28b      	uxth	r3, r1
 8011fb0:	1ad3      	subs	r3, r2, r3
 8011fb2:	b29a      	uxth	r2, r3
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011fb8:	6878      	ldr	r0, [r7, #4]
 8011fba:	f7fc fe15 	bl	800ebe8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011fbe:	68bb      	ldr	r3, [r7, #8]
 8011fc0:	685b      	ldr	r3, [r3, #4]
 8011fc2:	891b      	ldrh	r3, [r3, #8]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d028      	beq.n	801201a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011fc8:	4b0d      	ldr	r3, [pc, #52]	; (8012000 <tcp_receive+0xb20>)
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d01d      	beq.n	801200c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8011fd0:	4b0b      	ldr	r3, [pc, #44]	; (8012000 <tcp_receive+0xb20>)
 8011fd2:	681a      	ldr	r2, [r3, #0]
 8011fd4:	68bb      	ldr	r3, [r7, #8]
 8011fd6:	685b      	ldr	r3, [r3, #4]
 8011fd8:	4619      	mov	r1, r3
 8011fda:	4610      	mov	r0, r2
 8011fdc:	f7fb ffbe 	bl	800df5c <pbuf_cat>
 8011fe0:	e018      	b.n	8012014 <tcp_receive+0xb34>
 8011fe2:	bf00      	nop
 8011fe4:	200016d2 	.word	0x200016d2
 8011fe8:	200016c8 	.word	0x200016c8
 8011fec:	200016a8 	.word	0x200016a8
 8011ff0:	0801aab4 	.word	0x0801aab4
 8011ff4:	0801ae94 	.word	0x0801ae94
 8011ff8:	0801ab00 	.word	0x0801ab00
 8011ffc:	0801aed0 	.word	0x0801aed0
 8012000:	200016d8 	.word	0x200016d8
 8012004:	200016d5 	.word	0x200016d5
 8012008:	0801aef0 	.word	0x0801aef0
            } else {
              recv_data = cseg->p;
 801200c:	68bb      	ldr	r3, [r7, #8]
 801200e:	685b      	ldr	r3, [r3, #4]
 8012010:	4a70      	ldr	r2, [pc, #448]	; (80121d4 <tcp_receive+0xcf4>)
 8012012:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8012014:	68bb      	ldr	r3, [r7, #8]
 8012016:	2200      	movs	r2, #0
 8012018:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801201a:	68bb      	ldr	r3, [r7, #8]
 801201c:	68db      	ldr	r3, [r3, #12]
 801201e:	899b      	ldrh	r3, [r3, #12]
 8012020:	b29b      	uxth	r3, r3
 8012022:	4618      	mov	r0, r3
 8012024:	f7fa fb46 	bl	800c6b4 <lwip_htons>
 8012028:	4603      	mov	r3, r0
 801202a:	b2db      	uxtb	r3, r3
 801202c:	f003 0301 	and.w	r3, r3, #1
 8012030:	2b00      	cmp	r3, #0
 8012032:	d00d      	beq.n	8012050 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8012034:	4b68      	ldr	r3, [pc, #416]	; (80121d8 <tcp_receive+0xcf8>)
 8012036:	781b      	ldrb	r3, [r3, #0]
 8012038:	f043 0320 	orr.w	r3, r3, #32
 801203c:	b2da      	uxtb	r2, r3
 801203e:	4b66      	ldr	r3, [pc, #408]	; (80121d8 <tcp_receive+0xcf8>)
 8012040:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	7d1b      	ldrb	r3, [r3, #20]
 8012046:	2b04      	cmp	r3, #4
 8012048:	d102      	bne.n	8012050 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	2207      	movs	r2, #7
 801204e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012050:	68bb      	ldr	r3, [r7, #8]
 8012052:	681a      	ldr	r2, [r3, #0]
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8012058:	68b8      	ldr	r0, [r7, #8]
 801205a:	f7fd faea 	bl	800f632 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012062:	2b00      	cmp	r3, #0
 8012064:	d008      	beq.n	8012078 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801206a:	68db      	ldr	r3, [r3, #12]
 801206c:	685a      	ldr	r2, [r3, #4]
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8012072:	429a      	cmp	r2, r3
 8012074:	f43f af43 	beq.w	8011efe <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	8b5b      	ldrh	r3, [r3, #26]
 801207c:	f003 0301 	and.w	r3, r3, #1
 8012080:	2b00      	cmp	r3, #0
 8012082:	d00e      	beq.n	80120a2 <tcp_receive+0xbc2>
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	8b5b      	ldrh	r3, [r3, #26]
 8012088:	f023 0301 	bic.w	r3, r3, #1
 801208c:	b29a      	uxth	r2, r3
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	835a      	strh	r2, [r3, #26]
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	8b5b      	ldrh	r3, [r3, #26]
 8012096:	f043 0302 	orr.w	r3, r3, #2
 801209a:	b29a      	uxth	r2, r3
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80120a0:	e188      	b.n	80123b4 <tcp_receive+0xed4>
        tcp_ack(pcb);
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	8b5b      	ldrh	r3, [r3, #26]
 80120a6:	f043 0301 	orr.w	r3, r3, #1
 80120aa:	b29a      	uxth	r2, r3
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80120b0:	e180      	b.n	80123b4 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d106      	bne.n	80120c8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80120ba:	4848      	ldr	r0, [pc, #288]	; (80121dc <tcp_receive+0xcfc>)
 80120bc:	f7fd faf0 	bl	800f6a0 <tcp_seg_copy>
 80120c0:	4602      	mov	r2, r0
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	675a      	str	r2, [r3, #116]	; 0x74
 80120c6:	e16d      	b.n	80123a4 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80120c8:	2300      	movs	r3, #0
 80120ca:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80120d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80120d2:	e157      	b.n	8012384 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 80120d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120d6:	68db      	ldr	r3, [r3, #12]
 80120d8:	685a      	ldr	r2, [r3, #4]
 80120da:	4b41      	ldr	r3, [pc, #260]	; (80121e0 <tcp_receive+0xd00>)
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	429a      	cmp	r2, r3
 80120e0:	d11d      	bne.n	801211e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80120e2:	4b3e      	ldr	r3, [pc, #248]	; (80121dc <tcp_receive+0xcfc>)
 80120e4:	891a      	ldrh	r2, [r3, #8]
 80120e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120e8:	891b      	ldrh	r3, [r3, #8]
 80120ea:	429a      	cmp	r2, r3
 80120ec:	f240 814f 	bls.w	801238e <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80120f0:	483a      	ldr	r0, [pc, #232]	; (80121dc <tcp_receive+0xcfc>)
 80120f2:	f7fd fad5 	bl	800f6a0 <tcp_seg_copy>
 80120f6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80120f8:	697b      	ldr	r3, [r7, #20]
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	f000 8149 	beq.w	8012392 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8012100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012102:	2b00      	cmp	r3, #0
 8012104:	d003      	beq.n	801210e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8012106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012108:	697a      	ldr	r2, [r7, #20]
 801210a:	601a      	str	r2, [r3, #0]
 801210c:	e002      	b.n	8012114 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	697a      	ldr	r2, [r7, #20]
 8012112:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8012114:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012116:	6978      	ldr	r0, [r7, #20]
 8012118:	f7ff f8de 	bl	80112d8 <tcp_oos_insert_segment>
                }
                break;
 801211c:	e139      	b.n	8012392 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801211e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012120:	2b00      	cmp	r3, #0
 8012122:	d117      	bne.n	8012154 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8012124:	4b2e      	ldr	r3, [pc, #184]	; (80121e0 <tcp_receive+0xd00>)
 8012126:	681a      	ldr	r2, [r3, #0]
 8012128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801212a:	68db      	ldr	r3, [r3, #12]
 801212c:	685b      	ldr	r3, [r3, #4]
 801212e:	1ad3      	subs	r3, r2, r3
 8012130:	2b00      	cmp	r3, #0
 8012132:	da57      	bge.n	80121e4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012134:	4829      	ldr	r0, [pc, #164]	; (80121dc <tcp_receive+0xcfc>)
 8012136:	f7fd fab3 	bl	800f6a0 <tcp_seg_copy>
 801213a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801213c:	69bb      	ldr	r3, [r7, #24]
 801213e:	2b00      	cmp	r3, #0
 8012140:	f000 8129 	beq.w	8012396 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	69ba      	ldr	r2, [r7, #24]
 8012148:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801214a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801214c:	69b8      	ldr	r0, [r7, #24]
 801214e:	f7ff f8c3 	bl	80112d8 <tcp_oos_insert_segment>
                  }
                  break;
 8012152:	e120      	b.n	8012396 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8012154:	4b22      	ldr	r3, [pc, #136]	; (80121e0 <tcp_receive+0xd00>)
 8012156:	681a      	ldr	r2, [r3, #0]
 8012158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801215a:	68db      	ldr	r3, [r3, #12]
 801215c:	685b      	ldr	r3, [r3, #4]
 801215e:	1ad3      	subs	r3, r2, r3
 8012160:	3b01      	subs	r3, #1
 8012162:	2b00      	cmp	r3, #0
 8012164:	db3e      	blt.n	80121e4 <tcp_receive+0xd04>
 8012166:	4b1e      	ldr	r3, [pc, #120]	; (80121e0 <tcp_receive+0xd00>)
 8012168:	681a      	ldr	r2, [r3, #0]
 801216a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801216c:	68db      	ldr	r3, [r3, #12]
 801216e:	685b      	ldr	r3, [r3, #4]
 8012170:	1ad3      	subs	r3, r2, r3
 8012172:	3301      	adds	r3, #1
 8012174:	2b00      	cmp	r3, #0
 8012176:	dc35      	bgt.n	80121e4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012178:	4818      	ldr	r0, [pc, #96]	; (80121dc <tcp_receive+0xcfc>)
 801217a:	f7fd fa91 	bl	800f6a0 <tcp_seg_copy>
 801217e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8012180:	69fb      	ldr	r3, [r7, #28]
 8012182:	2b00      	cmp	r3, #0
 8012184:	f000 8109 	beq.w	801239a <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801218a:	68db      	ldr	r3, [r3, #12]
 801218c:	685b      	ldr	r3, [r3, #4]
 801218e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012190:	8912      	ldrh	r2, [r2, #8]
 8012192:	441a      	add	r2, r3
 8012194:	4b12      	ldr	r3, [pc, #72]	; (80121e0 <tcp_receive+0xd00>)
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	1ad3      	subs	r3, r2, r3
 801219a:	2b00      	cmp	r3, #0
 801219c:	dd12      	ble.n	80121c4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801219e:	4b10      	ldr	r3, [pc, #64]	; (80121e0 <tcp_receive+0xd00>)
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	b29a      	uxth	r2, r3
 80121a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121a6:	68db      	ldr	r3, [r3, #12]
 80121a8:	685b      	ldr	r3, [r3, #4]
 80121aa:	b29b      	uxth	r3, r3
 80121ac:	1ad3      	subs	r3, r2, r3
 80121ae:	b29a      	uxth	r2, r3
 80121b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121b2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80121b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121b6:	685a      	ldr	r2, [r3, #4]
 80121b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121ba:	891b      	ldrh	r3, [r3, #8]
 80121bc:	4619      	mov	r1, r3
 80121be:	4610      	mov	r0, r2
 80121c0:	f7fb fc84 	bl	800dacc <pbuf_realloc>
                    }
                    prev->next = cseg;
 80121c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121c6:	69fa      	ldr	r2, [r7, #28]
 80121c8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80121ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80121cc:	69f8      	ldr	r0, [r7, #28]
 80121ce:	f7ff f883 	bl	80112d8 <tcp_oos_insert_segment>
                  }
                  break;
 80121d2:	e0e2      	b.n	801239a <tcp_receive+0xeba>
 80121d4:	200016d8 	.word	0x200016d8
 80121d8:	200016d5 	.word	0x200016d5
 80121dc:	200016a8 	.word	0x200016a8
 80121e0:	200016c8 	.word	0x200016c8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80121e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121e6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80121e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	f040 80c6 	bne.w	801237e <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80121f2:	4b80      	ldr	r3, [pc, #512]	; (80123f4 <tcp_receive+0xf14>)
 80121f4:	681a      	ldr	r2, [r3, #0]
 80121f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121f8:	68db      	ldr	r3, [r3, #12]
 80121fa:	685b      	ldr	r3, [r3, #4]
 80121fc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80121fe:	2b00      	cmp	r3, #0
 8012200:	f340 80bd 	ble.w	801237e <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012206:	68db      	ldr	r3, [r3, #12]
 8012208:	899b      	ldrh	r3, [r3, #12]
 801220a:	b29b      	uxth	r3, r3
 801220c:	4618      	mov	r0, r3
 801220e:	f7fa fa51 	bl	800c6b4 <lwip_htons>
 8012212:	4603      	mov	r3, r0
 8012214:	b2db      	uxtb	r3, r3
 8012216:	f003 0301 	and.w	r3, r3, #1
 801221a:	2b00      	cmp	r3, #0
 801221c:	f040 80bf 	bne.w	801239e <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012220:	4875      	ldr	r0, [pc, #468]	; (80123f8 <tcp_receive+0xf18>)
 8012222:	f7fd fa3d 	bl	800f6a0 <tcp_seg_copy>
 8012226:	4602      	mov	r2, r0
 8012228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801222a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801222c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	2b00      	cmp	r3, #0
 8012232:	f000 80b6 	beq.w	80123a2 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8012236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012238:	68db      	ldr	r3, [r3, #12]
 801223a:	685b      	ldr	r3, [r3, #4]
 801223c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801223e:	8912      	ldrh	r2, [r2, #8]
 8012240:	441a      	add	r2, r3
 8012242:	4b6c      	ldr	r3, [pc, #432]	; (80123f4 <tcp_receive+0xf14>)
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	1ad3      	subs	r3, r2, r3
 8012248:	2b00      	cmp	r3, #0
 801224a:	dd12      	ble.n	8012272 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801224c:	4b69      	ldr	r3, [pc, #420]	; (80123f4 <tcp_receive+0xf14>)
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	b29a      	uxth	r2, r3
 8012252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012254:	68db      	ldr	r3, [r3, #12]
 8012256:	685b      	ldr	r3, [r3, #4]
 8012258:	b29b      	uxth	r3, r3
 801225a:	1ad3      	subs	r3, r2, r3
 801225c:	b29a      	uxth	r2, r3
 801225e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012260:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8012262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012264:	685a      	ldr	r2, [r3, #4]
 8012266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012268:	891b      	ldrh	r3, [r3, #8]
 801226a:	4619      	mov	r1, r3
 801226c:	4610      	mov	r0, r2
 801226e:	f7fb fc2d 	bl	800dacc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8012272:	4b62      	ldr	r3, [pc, #392]	; (80123fc <tcp_receive+0xf1c>)
 8012274:	881b      	ldrh	r3, [r3, #0]
 8012276:	461a      	mov	r2, r3
 8012278:	4b5e      	ldr	r3, [pc, #376]	; (80123f4 <tcp_receive+0xf14>)
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	441a      	add	r2, r3
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012282:	6879      	ldr	r1, [r7, #4]
 8012284:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012286:	440b      	add	r3, r1
 8012288:	1ad3      	subs	r3, r2, r3
 801228a:	2b00      	cmp	r3, #0
 801228c:	f340 8089 	ble.w	80123a2 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	68db      	ldr	r3, [r3, #12]
 8012296:	899b      	ldrh	r3, [r3, #12]
 8012298:	b29b      	uxth	r3, r3
 801229a:	4618      	mov	r0, r3
 801229c:	f7fa fa0a 	bl	800c6b4 <lwip_htons>
 80122a0:	4603      	mov	r3, r0
 80122a2:	b2db      	uxtb	r3, r3
 80122a4:	f003 0301 	and.w	r3, r3, #1
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d022      	beq.n	80122f2 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80122ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	68db      	ldr	r3, [r3, #12]
 80122b2:	899b      	ldrh	r3, [r3, #12]
 80122b4:	b29b      	uxth	r3, r3
 80122b6:	b21b      	sxth	r3, r3
 80122b8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80122bc:	b21c      	sxth	r4, r3
 80122be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	68db      	ldr	r3, [r3, #12]
 80122c4:	899b      	ldrh	r3, [r3, #12]
 80122c6:	b29b      	uxth	r3, r3
 80122c8:	4618      	mov	r0, r3
 80122ca:	f7fa f9f3 	bl	800c6b4 <lwip_htons>
 80122ce:	4603      	mov	r3, r0
 80122d0:	b2db      	uxtb	r3, r3
 80122d2:	b29b      	uxth	r3, r3
 80122d4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80122d8:	b29b      	uxth	r3, r3
 80122da:	4618      	mov	r0, r3
 80122dc:	f7fa f9ea 	bl	800c6b4 <lwip_htons>
 80122e0:	4603      	mov	r3, r0
 80122e2:	b21b      	sxth	r3, r3
 80122e4:	4323      	orrs	r3, r4
 80122e6:	b21a      	sxth	r2, r3
 80122e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	68db      	ldr	r3, [r3, #12]
 80122ee:	b292      	uxth	r2, r2
 80122f0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122f6:	b29a      	uxth	r2, r3
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80122fc:	4413      	add	r3, r2
 80122fe:	b299      	uxth	r1, r3
 8012300:	4b3c      	ldr	r3, [pc, #240]	; (80123f4 <tcp_receive+0xf14>)
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	b29a      	uxth	r2, r3
 8012306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	1a8a      	subs	r2, r1, r2
 801230c:	b292      	uxth	r2, r2
 801230e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8012310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	685a      	ldr	r2, [r3, #4]
 8012316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	891b      	ldrh	r3, [r3, #8]
 801231c:	4619      	mov	r1, r3
 801231e:	4610      	mov	r0, r2
 8012320:	f7fb fbd4 	bl	800dacc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8012324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	891c      	ldrh	r4, [r3, #8]
 801232a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	68db      	ldr	r3, [r3, #12]
 8012330:	899b      	ldrh	r3, [r3, #12]
 8012332:	b29b      	uxth	r3, r3
 8012334:	4618      	mov	r0, r3
 8012336:	f7fa f9bd 	bl	800c6b4 <lwip_htons>
 801233a:	4603      	mov	r3, r0
 801233c:	b2db      	uxtb	r3, r3
 801233e:	f003 0303 	and.w	r3, r3, #3
 8012342:	2b00      	cmp	r3, #0
 8012344:	d001      	beq.n	801234a <tcp_receive+0xe6a>
 8012346:	2301      	movs	r3, #1
 8012348:	e000      	b.n	801234c <tcp_receive+0xe6c>
 801234a:	2300      	movs	r3, #0
 801234c:	4423      	add	r3, r4
 801234e:	b29a      	uxth	r2, r3
 8012350:	4b2a      	ldr	r3, [pc, #168]	; (80123fc <tcp_receive+0xf1c>)
 8012352:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012354:	4b29      	ldr	r3, [pc, #164]	; (80123fc <tcp_receive+0xf1c>)
 8012356:	881b      	ldrh	r3, [r3, #0]
 8012358:	461a      	mov	r2, r3
 801235a:	4b26      	ldr	r3, [pc, #152]	; (80123f4 <tcp_receive+0xf14>)
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	441a      	add	r2, r3
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012364:	6879      	ldr	r1, [r7, #4]
 8012366:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012368:	440b      	add	r3, r1
 801236a:	429a      	cmp	r2, r3
 801236c:	d019      	beq.n	80123a2 <tcp_receive+0xec2>
 801236e:	4b24      	ldr	r3, [pc, #144]	; (8012400 <tcp_receive+0xf20>)
 8012370:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8012374:	4923      	ldr	r1, [pc, #140]	; (8012404 <tcp_receive+0xf24>)
 8012376:	4824      	ldr	r0, [pc, #144]	; (8012408 <tcp_receive+0xf28>)
 8012378:	f004 fe3c 	bl	8016ff4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801237c:	e011      	b.n	80123a2 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801237e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	63bb      	str	r3, [r7, #56]	; 0x38
 8012384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012386:	2b00      	cmp	r3, #0
 8012388:	f47f aea4 	bne.w	80120d4 <tcp_receive+0xbf4>
 801238c:	e00a      	b.n	80123a4 <tcp_receive+0xec4>
                break;
 801238e:	bf00      	nop
 8012390:	e008      	b.n	80123a4 <tcp_receive+0xec4>
                break;
 8012392:	bf00      	nop
 8012394:	e006      	b.n	80123a4 <tcp_receive+0xec4>
                  break;
 8012396:	bf00      	nop
 8012398:	e004      	b.n	80123a4 <tcp_receive+0xec4>
                  break;
 801239a:	bf00      	nop
 801239c:	e002      	b.n	80123a4 <tcp_receive+0xec4>
                  break;
 801239e:	bf00      	nop
 80123a0:	e000      	b.n	80123a4 <tcp_receive+0xec4>
                break;
 80123a2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80123a4:	6878      	ldr	r0, [r7, #4]
 80123a6:	f001 fe8b 	bl	80140c0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80123aa:	e003      	b.n	80123b4 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80123ac:	6878      	ldr	r0, [r7, #4]
 80123ae:	f001 fe87 	bl	80140c0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80123b2:	e01a      	b.n	80123ea <tcp_receive+0xf0a>
 80123b4:	e019      	b.n	80123ea <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80123b6:	4b0f      	ldr	r3, [pc, #60]	; (80123f4 <tcp_receive+0xf14>)
 80123b8:	681a      	ldr	r2, [r3, #0]
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123be:	1ad3      	subs	r3, r2, r3
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	db0a      	blt.n	80123da <tcp_receive+0xefa>
 80123c4:	4b0b      	ldr	r3, [pc, #44]	; (80123f4 <tcp_receive+0xf14>)
 80123c6:	681a      	ldr	r2, [r3, #0]
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123cc:	6879      	ldr	r1, [r7, #4]
 80123ce:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80123d0:	440b      	add	r3, r1
 80123d2:	1ad3      	subs	r3, r2, r3
 80123d4:	3301      	adds	r3, #1
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	dd07      	ble.n	80123ea <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	8b5b      	ldrh	r3, [r3, #26]
 80123de:	f043 0302 	orr.w	r3, r3, #2
 80123e2:	b29a      	uxth	r2, r3
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80123e8:	e7ff      	b.n	80123ea <tcp_receive+0xf0a>
 80123ea:	bf00      	nop
 80123ec:	3750      	adds	r7, #80	; 0x50
 80123ee:	46bd      	mov	sp, r7
 80123f0:	bdb0      	pop	{r4, r5, r7, pc}
 80123f2:	bf00      	nop
 80123f4:	200016c8 	.word	0x200016c8
 80123f8:	200016a8 	.word	0x200016a8
 80123fc:	200016d2 	.word	0x200016d2
 8012400:	0801aab4 	.word	0x0801aab4
 8012404:	0801ae5c 	.word	0x0801ae5c
 8012408:	0801ab00 	.word	0x0801ab00

0801240c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801240c:	b480      	push	{r7}
 801240e:	b083      	sub	sp, #12
 8012410:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8012412:	4b15      	ldr	r3, [pc, #84]	; (8012468 <tcp_get_next_optbyte+0x5c>)
 8012414:	881b      	ldrh	r3, [r3, #0]
 8012416:	1c5a      	adds	r2, r3, #1
 8012418:	b291      	uxth	r1, r2
 801241a:	4a13      	ldr	r2, [pc, #76]	; (8012468 <tcp_get_next_optbyte+0x5c>)
 801241c:	8011      	strh	r1, [r2, #0]
 801241e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012420:	4b12      	ldr	r3, [pc, #72]	; (801246c <tcp_get_next_optbyte+0x60>)
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	2b00      	cmp	r3, #0
 8012426:	d004      	beq.n	8012432 <tcp_get_next_optbyte+0x26>
 8012428:	4b11      	ldr	r3, [pc, #68]	; (8012470 <tcp_get_next_optbyte+0x64>)
 801242a:	881b      	ldrh	r3, [r3, #0]
 801242c:	88fa      	ldrh	r2, [r7, #6]
 801242e:	429a      	cmp	r2, r3
 8012430:	d208      	bcs.n	8012444 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8012432:	4b10      	ldr	r3, [pc, #64]	; (8012474 <tcp_get_next_optbyte+0x68>)
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	3314      	adds	r3, #20
 8012438:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801243a:	88fb      	ldrh	r3, [r7, #6]
 801243c:	683a      	ldr	r2, [r7, #0]
 801243e:	4413      	add	r3, r2
 8012440:	781b      	ldrb	r3, [r3, #0]
 8012442:	e00b      	b.n	801245c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012444:	88fb      	ldrh	r3, [r7, #6]
 8012446:	b2da      	uxtb	r2, r3
 8012448:	4b09      	ldr	r3, [pc, #36]	; (8012470 <tcp_get_next_optbyte+0x64>)
 801244a:	881b      	ldrh	r3, [r3, #0]
 801244c:	b2db      	uxtb	r3, r3
 801244e:	1ad3      	subs	r3, r2, r3
 8012450:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8012452:	4b06      	ldr	r3, [pc, #24]	; (801246c <tcp_get_next_optbyte+0x60>)
 8012454:	681a      	ldr	r2, [r3, #0]
 8012456:	797b      	ldrb	r3, [r7, #5]
 8012458:	4413      	add	r3, r2
 801245a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801245c:	4618      	mov	r0, r3
 801245e:	370c      	adds	r7, #12
 8012460:	46bd      	mov	sp, r7
 8012462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012466:	4770      	bx	lr
 8012468:	200016c4 	.word	0x200016c4
 801246c:	200016c0 	.word	0x200016c0
 8012470:	200016be 	.word	0x200016be
 8012474:	200016b8 	.word	0x200016b8

08012478 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012478:	b580      	push	{r7, lr}
 801247a:	b084      	sub	sp, #16
 801247c:	af00      	add	r7, sp, #0
 801247e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	2b00      	cmp	r3, #0
 8012484:	d106      	bne.n	8012494 <tcp_parseopt+0x1c>
 8012486:	4b32      	ldr	r3, [pc, #200]	; (8012550 <tcp_parseopt+0xd8>)
 8012488:	f240 727d 	movw	r2, #1917	; 0x77d
 801248c:	4931      	ldr	r1, [pc, #196]	; (8012554 <tcp_parseopt+0xdc>)
 801248e:	4832      	ldr	r0, [pc, #200]	; (8012558 <tcp_parseopt+0xe0>)
 8012490:	f004 fdb0 	bl	8016ff4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012494:	4b31      	ldr	r3, [pc, #196]	; (801255c <tcp_parseopt+0xe4>)
 8012496:	881b      	ldrh	r3, [r3, #0]
 8012498:	2b00      	cmp	r3, #0
 801249a:	d055      	beq.n	8012548 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801249c:	4b30      	ldr	r3, [pc, #192]	; (8012560 <tcp_parseopt+0xe8>)
 801249e:	2200      	movs	r2, #0
 80124a0:	801a      	strh	r2, [r3, #0]
 80124a2:	e045      	b.n	8012530 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80124a4:	f7ff ffb2 	bl	801240c <tcp_get_next_optbyte>
 80124a8:	4603      	mov	r3, r0
 80124aa:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80124ac:	7bfb      	ldrb	r3, [r7, #15]
 80124ae:	2b02      	cmp	r3, #2
 80124b0:	d006      	beq.n	80124c0 <tcp_parseopt+0x48>
 80124b2:	2b02      	cmp	r3, #2
 80124b4:	dc2b      	bgt.n	801250e <tcp_parseopt+0x96>
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d041      	beq.n	801253e <tcp_parseopt+0xc6>
 80124ba:	2b01      	cmp	r3, #1
 80124bc:	d127      	bne.n	801250e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80124be:	e037      	b.n	8012530 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80124c0:	f7ff ffa4 	bl	801240c <tcp_get_next_optbyte>
 80124c4:	4603      	mov	r3, r0
 80124c6:	2b04      	cmp	r3, #4
 80124c8:	d13b      	bne.n	8012542 <tcp_parseopt+0xca>
 80124ca:	4b25      	ldr	r3, [pc, #148]	; (8012560 <tcp_parseopt+0xe8>)
 80124cc:	881b      	ldrh	r3, [r3, #0]
 80124ce:	3301      	adds	r3, #1
 80124d0:	4a22      	ldr	r2, [pc, #136]	; (801255c <tcp_parseopt+0xe4>)
 80124d2:	8812      	ldrh	r2, [r2, #0]
 80124d4:	4293      	cmp	r3, r2
 80124d6:	da34      	bge.n	8012542 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80124d8:	f7ff ff98 	bl	801240c <tcp_get_next_optbyte>
 80124dc:	4603      	mov	r3, r0
 80124de:	b29b      	uxth	r3, r3
 80124e0:	021b      	lsls	r3, r3, #8
 80124e2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80124e4:	f7ff ff92 	bl	801240c <tcp_get_next_optbyte>
 80124e8:	4603      	mov	r3, r0
 80124ea:	b29a      	uxth	r2, r3
 80124ec:	89bb      	ldrh	r3, [r7, #12]
 80124ee:	4313      	orrs	r3, r2
 80124f0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80124f2:	89bb      	ldrh	r3, [r7, #12]
 80124f4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80124f8:	d804      	bhi.n	8012504 <tcp_parseopt+0x8c>
 80124fa:	89bb      	ldrh	r3, [r7, #12]
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d001      	beq.n	8012504 <tcp_parseopt+0x8c>
 8012500:	89ba      	ldrh	r2, [r7, #12]
 8012502:	e001      	b.n	8012508 <tcp_parseopt+0x90>
 8012504:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801250c:	e010      	b.n	8012530 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801250e:	f7ff ff7d 	bl	801240c <tcp_get_next_optbyte>
 8012512:	4603      	mov	r3, r0
 8012514:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8012516:	7afb      	ldrb	r3, [r7, #11]
 8012518:	2b01      	cmp	r3, #1
 801251a:	d914      	bls.n	8012546 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801251c:	7afb      	ldrb	r3, [r7, #11]
 801251e:	b29a      	uxth	r2, r3
 8012520:	4b0f      	ldr	r3, [pc, #60]	; (8012560 <tcp_parseopt+0xe8>)
 8012522:	881b      	ldrh	r3, [r3, #0]
 8012524:	4413      	add	r3, r2
 8012526:	b29b      	uxth	r3, r3
 8012528:	3b02      	subs	r3, #2
 801252a:	b29a      	uxth	r2, r3
 801252c:	4b0c      	ldr	r3, [pc, #48]	; (8012560 <tcp_parseopt+0xe8>)
 801252e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012530:	4b0b      	ldr	r3, [pc, #44]	; (8012560 <tcp_parseopt+0xe8>)
 8012532:	881a      	ldrh	r2, [r3, #0]
 8012534:	4b09      	ldr	r3, [pc, #36]	; (801255c <tcp_parseopt+0xe4>)
 8012536:	881b      	ldrh	r3, [r3, #0]
 8012538:	429a      	cmp	r2, r3
 801253a:	d3b3      	bcc.n	80124a4 <tcp_parseopt+0x2c>
 801253c:	e004      	b.n	8012548 <tcp_parseopt+0xd0>
          return;
 801253e:	bf00      	nop
 8012540:	e002      	b.n	8012548 <tcp_parseopt+0xd0>
            return;
 8012542:	bf00      	nop
 8012544:	e000      	b.n	8012548 <tcp_parseopt+0xd0>
            return;
 8012546:	bf00      	nop
      }
    }
  }
}
 8012548:	3710      	adds	r7, #16
 801254a:	46bd      	mov	sp, r7
 801254c:	bd80      	pop	{r7, pc}
 801254e:	bf00      	nop
 8012550:	0801aab4 	.word	0x0801aab4
 8012554:	0801af18 	.word	0x0801af18
 8012558:	0801ab00 	.word	0x0801ab00
 801255c:	200016bc 	.word	0x200016bc
 8012560:	200016c4 	.word	0x200016c4

08012564 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012564:	b480      	push	{r7}
 8012566:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8012568:	4b05      	ldr	r3, [pc, #20]	; (8012580 <tcp_trigger_input_pcb_close+0x1c>)
 801256a:	781b      	ldrb	r3, [r3, #0]
 801256c:	f043 0310 	orr.w	r3, r3, #16
 8012570:	b2da      	uxtb	r2, r3
 8012572:	4b03      	ldr	r3, [pc, #12]	; (8012580 <tcp_trigger_input_pcb_close+0x1c>)
 8012574:	701a      	strb	r2, [r3, #0]
}
 8012576:	bf00      	nop
 8012578:	46bd      	mov	sp, r7
 801257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801257e:	4770      	bx	lr
 8012580:	200016d5 	.word	0x200016d5

08012584 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012584:	b580      	push	{r7, lr}
 8012586:	b084      	sub	sp, #16
 8012588:	af00      	add	r7, sp, #0
 801258a:	60f8      	str	r0, [r7, #12]
 801258c:	60b9      	str	r1, [r7, #8]
 801258e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d00a      	beq.n	80125ac <tcp_route+0x28>
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	7a1b      	ldrb	r3, [r3, #8]
 801259a:	2b00      	cmp	r3, #0
 801259c:	d006      	beq.n	80125ac <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	7a1b      	ldrb	r3, [r3, #8]
 80125a2:	4618      	mov	r0, r3
 80125a4:	f7fb f8b8 	bl	800d718 <netif_get_by_index>
 80125a8:	4603      	mov	r3, r0
 80125aa:	e003      	b.n	80125b4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80125ac:	6878      	ldr	r0, [r7, #4]
 80125ae:	f003 fad5 	bl	8015b5c <ip4_route>
 80125b2:	4603      	mov	r3, r0
  }
}
 80125b4:	4618      	mov	r0, r3
 80125b6:	3710      	adds	r7, #16
 80125b8:	46bd      	mov	sp, r7
 80125ba:	bd80      	pop	{r7, pc}

080125bc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80125bc:	b590      	push	{r4, r7, lr}
 80125be:	b087      	sub	sp, #28
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	60f8      	str	r0, [r7, #12]
 80125c4:	60b9      	str	r1, [r7, #8]
 80125c6:	603b      	str	r3, [r7, #0]
 80125c8:	4613      	mov	r3, r2
 80125ca:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d105      	bne.n	80125de <tcp_create_segment+0x22>
 80125d2:	4b44      	ldr	r3, [pc, #272]	; (80126e4 <tcp_create_segment+0x128>)
 80125d4:	22a3      	movs	r2, #163	; 0xa3
 80125d6:	4944      	ldr	r1, [pc, #272]	; (80126e8 <tcp_create_segment+0x12c>)
 80125d8:	4844      	ldr	r0, [pc, #272]	; (80126ec <tcp_create_segment+0x130>)
 80125da:	f004 fd0b 	bl	8016ff4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80125de:	68bb      	ldr	r3, [r7, #8]
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d105      	bne.n	80125f0 <tcp_create_segment+0x34>
 80125e4:	4b3f      	ldr	r3, [pc, #252]	; (80126e4 <tcp_create_segment+0x128>)
 80125e6:	22a4      	movs	r2, #164	; 0xa4
 80125e8:	4941      	ldr	r1, [pc, #260]	; (80126f0 <tcp_create_segment+0x134>)
 80125ea:	4840      	ldr	r0, [pc, #256]	; (80126ec <tcp_create_segment+0x130>)
 80125ec:	f004 fd02 	bl	8016ff4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80125f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80125f4:	009b      	lsls	r3, r3, #2
 80125f6:	b2db      	uxtb	r3, r3
 80125f8:	f003 0304 	and.w	r3, r3, #4
 80125fc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80125fe:	2003      	movs	r0, #3
 8012600:	f7fa fd8c 	bl	800d11c <memp_malloc>
 8012604:	6138      	str	r0, [r7, #16]
 8012606:	693b      	ldr	r3, [r7, #16]
 8012608:	2b00      	cmp	r3, #0
 801260a:	d104      	bne.n	8012616 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801260c:	68b8      	ldr	r0, [r7, #8]
 801260e:	f7fb fbe3 	bl	800ddd8 <pbuf_free>
    return NULL;
 8012612:	2300      	movs	r3, #0
 8012614:	e061      	b.n	80126da <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8012616:	693b      	ldr	r3, [r7, #16]
 8012618:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801261c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801261e:	693b      	ldr	r3, [r7, #16]
 8012620:	2200      	movs	r2, #0
 8012622:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8012624:	693b      	ldr	r3, [r7, #16]
 8012626:	68ba      	ldr	r2, [r7, #8]
 8012628:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801262a:	68bb      	ldr	r3, [r7, #8]
 801262c:	891a      	ldrh	r2, [r3, #8]
 801262e:	7dfb      	ldrb	r3, [r7, #23]
 8012630:	b29b      	uxth	r3, r3
 8012632:	429a      	cmp	r2, r3
 8012634:	d205      	bcs.n	8012642 <tcp_create_segment+0x86>
 8012636:	4b2b      	ldr	r3, [pc, #172]	; (80126e4 <tcp_create_segment+0x128>)
 8012638:	22b0      	movs	r2, #176	; 0xb0
 801263a:	492e      	ldr	r1, [pc, #184]	; (80126f4 <tcp_create_segment+0x138>)
 801263c:	482b      	ldr	r0, [pc, #172]	; (80126ec <tcp_create_segment+0x130>)
 801263e:	f004 fcd9 	bl	8016ff4 <iprintf>
  seg->len = p->tot_len - optlen;
 8012642:	68bb      	ldr	r3, [r7, #8]
 8012644:	891a      	ldrh	r2, [r3, #8]
 8012646:	7dfb      	ldrb	r3, [r7, #23]
 8012648:	b29b      	uxth	r3, r3
 801264a:	1ad3      	subs	r3, r2, r3
 801264c:	b29a      	uxth	r2, r3
 801264e:	693b      	ldr	r3, [r7, #16]
 8012650:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8012652:	2114      	movs	r1, #20
 8012654:	68b8      	ldr	r0, [r7, #8]
 8012656:	f7fb fb29 	bl	800dcac <pbuf_add_header>
 801265a:	4603      	mov	r3, r0
 801265c:	2b00      	cmp	r3, #0
 801265e:	d004      	beq.n	801266a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8012660:	6938      	ldr	r0, [r7, #16]
 8012662:	f7fc ffe6 	bl	800f632 <tcp_seg_free>
    return NULL;
 8012666:	2300      	movs	r3, #0
 8012668:	e037      	b.n	80126da <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801266a:	693b      	ldr	r3, [r7, #16]
 801266c:	685b      	ldr	r3, [r3, #4]
 801266e:	685a      	ldr	r2, [r3, #4]
 8012670:	693b      	ldr	r3, [r7, #16]
 8012672:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	8ada      	ldrh	r2, [r3, #22]
 8012678:	693b      	ldr	r3, [r7, #16]
 801267a:	68dc      	ldr	r4, [r3, #12]
 801267c:	4610      	mov	r0, r2
 801267e:	f7fa f819 	bl	800c6b4 <lwip_htons>
 8012682:	4603      	mov	r3, r0
 8012684:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	8b1a      	ldrh	r2, [r3, #24]
 801268a:	693b      	ldr	r3, [r7, #16]
 801268c:	68dc      	ldr	r4, [r3, #12]
 801268e:	4610      	mov	r0, r2
 8012690:	f7fa f810 	bl	800c6b4 <lwip_htons>
 8012694:	4603      	mov	r3, r0
 8012696:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8012698:	693b      	ldr	r3, [r7, #16]
 801269a:	68dc      	ldr	r4, [r3, #12]
 801269c:	6838      	ldr	r0, [r7, #0]
 801269e:	f7fa f81e 	bl	800c6de <lwip_htonl>
 80126a2:	4603      	mov	r3, r0
 80126a4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80126a6:	7dfb      	ldrb	r3, [r7, #23]
 80126a8:	089b      	lsrs	r3, r3, #2
 80126aa:	b2db      	uxtb	r3, r3
 80126ac:	b29b      	uxth	r3, r3
 80126ae:	3305      	adds	r3, #5
 80126b0:	b29b      	uxth	r3, r3
 80126b2:	031b      	lsls	r3, r3, #12
 80126b4:	b29a      	uxth	r2, r3
 80126b6:	79fb      	ldrb	r3, [r7, #7]
 80126b8:	b29b      	uxth	r3, r3
 80126ba:	4313      	orrs	r3, r2
 80126bc:	b29a      	uxth	r2, r3
 80126be:	693b      	ldr	r3, [r7, #16]
 80126c0:	68dc      	ldr	r4, [r3, #12]
 80126c2:	4610      	mov	r0, r2
 80126c4:	f7f9 fff6 	bl	800c6b4 <lwip_htons>
 80126c8:	4603      	mov	r3, r0
 80126ca:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80126cc:	693b      	ldr	r3, [r7, #16]
 80126ce:	68db      	ldr	r3, [r3, #12]
 80126d0:	2200      	movs	r2, #0
 80126d2:	749a      	strb	r2, [r3, #18]
 80126d4:	2200      	movs	r2, #0
 80126d6:	74da      	strb	r2, [r3, #19]
  return seg;
 80126d8:	693b      	ldr	r3, [r7, #16]
}
 80126da:	4618      	mov	r0, r3
 80126dc:	371c      	adds	r7, #28
 80126de:	46bd      	mov	sp, r7
 80126e0:	bd90      	pop	{r4, r7, pc}
 80126e2:	bf00      	nop
 80126e4:	0801af34 	.word	0x0801af34
 80126e8:	0801af68 	.word	0x0801af68
 80126ec:	0801af88 	.word	0x0801af88
 80126f0:	0801afb0 	.word	0x0801afb0
 80126f4:	0801afd4 	.word	0x0801afd4

080126f8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80126f8:	b580      	push	{r7, lr}
 80126fa:	b086      	sub	sp, #24
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	607b      	str	r3, [r7, #4]
 8012700:	4603      	mov	r3, r0
 8012702:	73fb      	strb	r3, [r7, #15]
 8012704:	460b      	mov	r3, r1
 8012706:	81bb      	strh	r3, [r7, #12]
 8012708:	4613      	mov	r3, r2
 801270a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801270c:	89bb      	ldrh	r3, [r7, #12]
 801270e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	2b00      	cmp	r3, #0
 8012714:	d105      	bne.n	8012722 <tcp_pbuf_prealloc+0x2a>
 8012716:	4b30      	ldr	r3, [pc, #192]	; (80127d8 <tcp_pbuf_prealloc+0xe0>)
 8012718:	22e8      	movs	r2, #232	; 0xe8
 801271a:	4930      	ldr	r1, [pc, #192]	; (80127dc <tcp_pbuf_prealloc+0xe4>)
 801271c:	4830      	ldr	r0, [pc, #192]	; (80127e0 <tcp_pbuf_prealloc+0xe8>)
 801271e:	f004 fc69 	bl	8016ff4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8012722:	6a3b      	ldr	r3, [r7, #32]
 8012724:	2b00      	cmp	r3, #0
 8012726:	d105      	bne.n	8012734 <tcp_pbuf_prealloc+0x3c>
 8012728:	4b2b      	ldr	r3, [pc, #172]	; (80127d8 <tcp_pbuf_prealloc+0xe0>)
 801272a:	22e9      	movs	r2, #233	; 0xe9
 801272c:	492d      	ldr	r1, [pc, #180]	; (80127e4 <tcp_pbuf_prealloc+0xec>)
 801272e:	482c      	ldr	r0, [pc, #176]	; (80127e0 <tcp_pbuf_prealloc+0xe8>)
 8012730:	f004 fc60 	bl	8016ff4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8012734:	89ba      	ldrh	r2, [r7, #12]
 8012736:	897b      	ldrh	r3, [r7, #10]
 8012738:	429a      	cmp	r2, r3
 801273a:	d221      	bcs.n	8012780 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801273c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012740:	f003 0302 	and.w	r3, r3, #2
 8012744:	2b00      	cmp	r3, #0
 8012746:	d111      	bne.n	801276c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8012748:	6a3b      	ldr	r3, [r7, #32]
 801274a:	8b5b      	ldrh	r3, [r3, #26]
 801274c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012750:	2b00      	cmp	r3, #0
 8012752:	d115      	bne.n	8012780 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8012754:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012758:	2b00      	cmp	r3, #0
 801275a:	d007      	beq.n	801276c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801275c:	6a3b      	ldr	r3, [r7, #32]
 801275e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8012760:	2b00      	cmp	r3, #0
 8012762:	d103      	bne.n	801276c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8012764:	6a3b      	ldr	r3, [r7, #32]
 8012766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8012768:	2b00      	cmp	r3, #0
 801276a:	d009      	beq.n	8012780 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801276c:	89bb      	ldrh	r3, [r7, #12]
 801276e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8012772:	f023 0203 	bic.w	r2, r3, #3
 8012776:	897b      	ldrh	r3, [r7, #10]
 8012778:	4293      	cmp	r3, r2
 801277a:	bf28      	it	cs
 801277c:	4613      	movcs	r3, r2
 801277e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8012780:	8af9      	ldrh	r1, [r7, #22]
 8012782:	7bfb      	ldrb	r3, [r7, #15]
 8012784:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012788:	4618      	mov	r0, r3
 801278a:	f7fb f841 	bl	800d810 <pbuf_alloc>
 801278e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012790:	693b      	ldr	r3, [r7, #16]
 8012792:	2b00      	cmp	r3, #0
 8012794:	d101      	bne.n	801279a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8012796:	2300      	movs	r3, #0
 8012798:	e019      	b.n	80127ce <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801279a:	693b      	ldr	r3, [r7, #16]
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d006      	beq.n	80127b0 <tcp_pbuf_prealloc+0xb8>
 80127a2:	4b0d      	ldr	r3, [pc, #52]	; (80127d8 <tcp_pbuf_prealloc+0xe0>)
 80127a4:	f240 120b 	movw	r2, #267	; 0x10b
 80127a8:	490f      	ldr	r1, [pc, #60]	; (80127e8 <tcp_pbuf_prealloc+0xf0>)
 80127aa:	480d      	ldr	r0, [pc, #52]	; (80127e0 <tcp_pbuf_prealloc+0xe8>)
 80127ac:	f004 fc22 	bl	8016ff4 <iprintf>
  *oversize = p->len - length;
 80127b0:	693b      	ldr	r3, [r7, #16]
 80127b2:	895a      	ldrh	r2, [r3, #10]
 80127b4:	89bb      	ldrh	r3, [r7, #12]
 80127b6:	1ad3      	subs	r3, r2, r3
 80127b8:	b29a      	uxth	r2, r3
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80127be:	693b      	ldr	r3, [r7, #16]
 80127c0:	89ba      	ldrh	r2, [r7, #12]
 80127c2:	811a      	strh	r2, [r3, #8]
 80127c4:	693b      	ldr	r3, [r7, #16]
 80127c6:	891a      	ldrh	r2, [r3, #8]
 80127c8:	693b      	ldr	r3, [r7, #16]
 80127ca:	815a      	strh	r2, [r3, #10]
  return p;
 80127cc:	693b      	ldr	r3, [r7, #16]
}
 80127ce:	4618      	mov	r0, r3
 80127d0:	3718      	adds	r7, #24
 80127d2:	46bd      	mov	sp, r7
 80127d4:	bd80      	pop	{r7, pc}
 80127d6:	bf00      	nop
 80127d8:	0801af34 	.word	0x0801af34
 80127dc:	0801afec 	.word	0x0801afec
 80127e0:	0801af88 	.word	0x0801af88
 80127e4:	0801b010 	.word	0x0801b010
 80127e8:	0801b030 	.word	0x0801b030

080127ec <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80127ec:	b580      	push	{r7, lr}
 80127ee:	b082      	sub	sp, #8
 80127f0:	af00      	add	r7, sp, #0
 80127f2:	6078      	str	r0, [r7, #4]
 80127f4:	460b      	mov	r3, r1
 80127f6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d106      	bne.n	801280c <tcp_write_checks+0x20>
 80127fe:	4b33      	ldr	r3, [pc, #204]	; (80128cc <tcp_write_checks+0xe0>)
 8012800:	f240 1233 	movw	r2, #307	; 0x133
 8012804:	4932      	ldr	r1, [pc, #200]	; (80128d0 <tcp_write_checks+0xe4>)
 8012806:	4833      	ldr	r0, [pc, #204]	; (80128d4 <tcp_write_checks+0xe8>)
 8012808:	f004 fbf4 	bl	8016ff4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	7d1b      	ldrb	r3, [r3, #20]
 8012810:	2b04      	cmp	r3, #4
 8012812:	d00e      	beq.n	8012832 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8012818:	2b07      	cmp	r3, #7
 801281a:	d00a      	beq.n	8012832 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8012820:	2b02      	cmp	r3, #2
 8012822:	d006      	beq.n	8012832 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8012828:	2b03      	cmp	r3, #3
 801282a:	d002      	beq.n	8012832 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801282c:	f06f 030a 	mvn.w	r3, #10
 8012830:	e048      	b.n	80128c4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8012832:	887b      	ldrh	r3, [r7, #2]
 8012834:	2b00      	cmp	r3, #0
 8012836:	d101      	bne.n	801283c <tcp_write_checks+0x50>
    return ERR_OK;
 8012838:	2300      	movs	r3, #0
 801283a:	e043      	b.n	80128c4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012842:	887a      	ldrh	r2, [r7, #2]
 8012844:	429a      	cmp	r2, r3
 8012846:	d909      	bls.n	801285c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	8b5b      	ldrh	r3, [r3, #26]
 801284c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012850:	b29a      	uxth	r2, r3
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8012856:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801285a:	e033      	b.n	80128c4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012862:	2b08      	cmp	r3, #8
 8012864:	d909      	bls.n	801287a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	8b5b      	ldrh	r3, [r3, #26]
 801286a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801286e:	b29a      	uxth	r2, r3
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8012874:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012878:	e024      	b.n	80128c4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012880:	2b00      	cmp	r3, #0
 8012882:	d00f      	beq.n	80128a4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012888:	2b00      	cmp	r3, #0
 801288a:	d11a      	bne.n	80128c2 <tcp_write_checks+0xd6>
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012890:	2b00      	cmp	r3, #0
 8012892:	d116      	bne.n	80128c2 <tcp_write_checks+0xd6>
 8012894:	4b0d      	ldr	r3, [pc, #52]	; (80128cc <tcp_write_checks+0xe0>)
 8012896:	f240 1255 	movw	r2, #341	; 0x155
 801289a:	490f      	ldr	r1, [pc, #60]	; (80128d8 <tcp_write_checks+0xec>)
 801289c:	480d      	ldr	r0, [pc, #52]	; (80128d4 <tcp_write_checks+0xe8>)
 801289e:	f004 fba9 	bl	8016ff4 <iprintf>
 80128a2:	e00e      	b.n	80128c2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d103      	bne.n	80128b4 <tcp_write_checks+0xc8>
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d006      	beq.n	80128c2 <tcp_write_checks+0xd6>
 80128b4:	4b05      	ldr	r3, [pc, #20]	; (80128cc <tcp_write_checks+0xe0>)
 80128b6:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80128ba:	4908      	ldr	r1, [pc, #32]	; (80128dc <tcp_write_checks+0xf0>)
 80128bc:	4805      	ldr	r0, [pc, #20]	; (80128d4 <tcp_write_checks+0xe8>)
 80128be:	f004 fb99 	bl	8016ff4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80128c2:	2300      	movs	r3, #0
}
 80128c4:	4618      	mov	r0, r3
 80128c6:	3708      	adds	r7, #8
 80128c8:	46bd      	mov	sp, r7
 80128ca:	bd80      	pop	{r7, pc}
 80128cc:	0801af34 	.word	0x0801af34
 80128d0:	0801b044 	.word	0x0801b044
 80128d4:	0801af88 	.word	0x0801af88
 80128d8:	0801b064 	.word	0x0801b064
 80128dc:	0801b0a0 	.word	0x0801b0a0

080128e0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80128e0:	b590      	push	{r4, r7, lr}
 80128e2:	b09b      	sub	sp, #108	; 0x6c
 80128e4:	af04      	add	r7, sp, #16
 80128e6:	60f8      	str	r0, [r7, #12]
 80128e8:	60b9      	str	r1, [r7, #8]
 80128ea:	4611      	mov	r1, r2
 80128ec:	461a      	mov	r2, r3
 80128ee:	460b      	mov	r3, r1
 80128f0:	80fb      	strh	r3, [r7, #6]
 80128f2:	4613      	mov	r3, r2
 80128f4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80128f6:	2300      	movs	r3, #0
 80128f8:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80128fa:	2300      	movs	r3, #0
 80128fc:	653b      	str	r3, [r7, #80]	; 0x50
 80128fe:	2300      	movs	r3, #0
 8012900:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012902:	2300      	movs	r3, #0
 8012904:	64bb      	str	r3, [r7, #72]	; 0x48
 8012906:	2300      	movs	r3, #0
 8012908:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801290a:	2300      	movs	r3, #0
 801290c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8012910:	2300      	movs	r3, #0
 8012912:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8012916:	2300      	movs	r3, #0
 8012918:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801291a:	2300      	movs	r3, #0
 801291c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801291e:	2300      	movs	r3, #0
 8012920:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	2b00      	cmp	r3, #0
 8012926:	d109      	bne.n	801293c <tcp_write+0x5c>
 8012928:	4ba4      	ldr	r3, [pc, #656]	; (8012bbc <tcp_write+0x2dc>)
 801292a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801292e:	49a4      	ldr	r1, [pc, #656]	; (8012bc0 <tcp_write+0x2e0>)
 8012930:	48a4      	ldr	r0, [pc, #656]	; (8012bc4 <tcp_write+0x2e4>)
 8012932:	f004 fb5f 	bl	8016ff4 <iprintf>
 8012936:	f06f 030f 	mvn.w	r3, #15
 801293a:	e32a      	b.n	8012f92 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012942:	085b      	lsrs	r3, r3, #1
 8012944:	b29a      	uxth	r2, r3
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801294a:	4293      	cmp	r3, r2
 801294c:	bf28      	it	cs
 801294e:	4613      	movcs	r3, r2
 8012950:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8012952:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012954:	2b00      	cmp	r3, #0
 8012956:	d102      	bne.n	801295e <tcp_write+0x7e>
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801295c:	e000      	b.n	8012960 <tcp_write+0x80>
 801295e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012960:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8012962:	68bb      	ldr	r3, [r7, #8]
 8012964:	2b00      	cmp	r3, #0
 8012966:	d109      	bne.n	801297c <tcp_write+0x9c>
 8012968:	4b94      	ldr	r3, [pc, #592]	; (8012bbc <tcp_write+0x2dc>)
 801296a:	f240 12ad 	movw	r2, #429	; 0x1ad
 801296e:	4996      	ldr	r1, [pc, #600]	; (8012bc8 <tcp_write+0x2e8>)
 8012970:	4894      	ldr	r0, [pc, #592]	; (8012bc4 <tcp_write+0x2e4>)
 8012972:	f004 fb3f 	bl	8016ff4 <iprintf>
 8012976:	f06f 030f 	mvn.w	r3, #15
 801297a:	e30a      	b.n	8012f92 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801297c:	88fb      	ldrh	r3, [r7, #6]
 801297e:	4619      	mov	r1, r3
 8012980:	68f8      	ldr	r0, [r7, #12]
 8012982:	f7ff ff33 	bl	80127ec <tcp_write_checks>
 8012986:	4603      	mov	r3, r0
 8012988:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801298c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012990:	2b00      	cmp	r3, #0
 8012992:	d002      	beq.n	801299a <tcp_write+0xba>
    return err;
 8012994:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012998:	e2fb      	b.n	8012f92 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80129a0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80129a4:	2300      	movs	r3, #0
 80129a6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	f000 80f6 	beq.w	8012ba0 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129b8:	653b      	str	r3, [r7, #80]	; 0x50
 80129ba:	e002      	b.n	80129c2 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80129bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80129c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d1f8      	bne.n	80129bc <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80129ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129cc:	7a9b      	ldrb	r3, [r3, #10]
 80129ce:	009b      	lsls	r3, r3, #2
 80129d0:	b29b      	uxth	r3, r3
 80129d2:	f003 0304 	and.w	r3, r3, #4
 80129d6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80129d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80129da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129dc:	891b      	ldrh	r3, [r3, #8]
 80129de:	4619      	mov	r1, r3
 80129e0:	8c3b      	ldrh	r3, [r7, #32]
 80129e2:	440b      	add	r3, r1
 80129e4:	429a      	cmp	r2, r3
 80129e6:	da06      	bge.n	80129f6 <tcp_write+0x116>
 80129e8:	4b74      	ldr	r3, [pc, #464]	; (8012bbc <tcp_write+0x2dc>)
 80129ea:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80129ee:	4977      	ldr	r1, [pc, #476]	; (8012bcc <tcp_write+0x2ec>)
 80129f0:	4874      	ldr	r0, [pc, #464]	; (8012bc4 <tcp_write+0x2e4>)
 80129f2:	f004 faff 	bl	8016ff4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80129f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129f8:	891a      	ldrh	r2, [r3, #8]
 80129fa:	8c3b      	ldrh	r3, [r7, #32]
 80129fc:	4413      	add	r3, r2
 80129fe:	b29b      	uxth	r3, r3
 8012a00:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012a02:	1ad3      	subs	r3, r2, r3
 8012a04:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012a0c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8012a0e:	8a7b      	ldrh	r3, [r7, #18]
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d026      	beq.n	8012a62 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8012a14:	8a7b      	ldrh	r3, [r7, #18]
 8012a16:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012a18:	429a      	cmp	r2, r3
 8012a1a:	d206      	bcs.n	8012a2a <tcp_write+0x14a>
 8012a1c:	4b67      	ldr	r3, [pc, #412]	; (8012bbc <tcp_write+0x2dc>)
 8012a1e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8012a22:	496b      	ldr	r1, [pc, #428]	; (8012bd0 <tcp_write+0x2f0>)
 8012a24:	4867      	ldr	r0, [pc, #412]	; (8012bc4 <tcp_write+0x2e4>)
 8012a26:	f004 fae5 	bl	8016ff4 <iprintf>
      seg = last_unsent;
 8012a2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a2c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8012a2e:	8a7b      	ldrh	r3, [r7, #18]
 8012a30:	88fa      	ldrh	r2, [r7, #6]
 8012a32:	4293      	cmp	r3, r2
 8012a34:	bf28      	it	cs
 8012a36:	4613      	movcs	r3, r2
 8012a38:	b29b      	uxth	r3, r3
 8012a3a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012a3c:	4293      	cmp	r3, r2
 8012a3e:	bf28      	it	cs
 8012a40:	4613      	movcs	r3, r2
 8012a42:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8012a44:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012a48:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012a4a:	4413      	add	r3, r2
 8012a4c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8012a50:	8a7a      	ldrh	r2, [r7, #18]
 8012a52:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012a54:	1ad3      	subs	r3, r2, r3
 8012a56:	b29b      	uxth	r3, r3
 8012a58:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8012a5a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012a5c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012a5e:	1ad3      	subs	r3, r2, r3
 8012a60:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8012a62:	8a7b      	ldrh	r3, [r7, #18]
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d00b      	beq.n	8012a80 <tcp_write+0x1a0>
 8012a68:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012a6c:	88fb      	ldrh	r3, [r7, #6]
 8012a6e:	429a      	cmp	r2, r3
 8012a70:	d006      	beq.n	8012a80 <tcp_write+0x1a0>
 8012a72:	4b52      	ldr	r3, [pc, #328]	; (8012bbc <tcp_write+0x2dc>)
 8012a74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012a78:	4956      	ldr	r1, [pc, #344]	; (8012bd4 <tcp_write+0x2f4>)
 8012a7a:	4852      	ldr	r0, [pc, #328]	; (8012bc4 <tcp_write+0x2e4>)
 8012a7c:	f004 faba 	bl	8016ff4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8012a80:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012a84:	88fb      	ldrh	r3, [r7, #6]
 8012a86:	429a      	cmp	r2, r3
 8012a88:	f080 8167 	bcs.w	8012d5a <tcp_write+0x47a>
 8012a8c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	f000 8163 	beq.w	8012d5a <tcp_write+0x47a>
 8012a94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a96:	891b      	ldrh	r3, [r3, #8]
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	f000 815e 	beq.w	8012d5a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8012a9e:	88fa      	ldrh	r2, [r7, #6]
 8012aa0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012aa4:	1ad2      	subs	r2, r2, r3
 8012aa6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012aa8:	4293      	cmp	r3, r2
 8012aaa:	bfa8      	it	ge
 8012aac:	4613      	movge	r3, r2
 8012aae:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8012ab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ab2:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012ab4:	797b      	ldrb	r3, [r7, #5]
 8012ab6:	f003 0301 	and.w	r3, r3, #1
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d027      	beq.n	8012b0e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8012abe:	f107 0012 	add.w	r0, r7, #18
 8012ac2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012ac4:	8bf9      	ldrh	r1, [r7, #30]
 8012ac6:	2301      	movs	r3, #1
 8012ac8:	9302      	str	r3, [sp, #8]
 8012aca:	797b      	ldrb	r3, [r7, #5]
 8012acc:	9301      	str	r3, [sp, #4]
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	9300      	str	r3, [sp, #0]
 8012ad2:	4603      	mov	r3, r0
 8012ad4:	2000      	movs	r0, #0
 8012ad6:	f7ff fe0f 	bl	80126f8 <tcp_pbuf_prealloc>
 8012ada:	6578      	str	r0, [r7, #84]	; 0x54
 8012adc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	f000 8225 	beq.w	8012f2e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8012ae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012ae6:	6858      	ldr	r0, [r3, #4]
 8012ae8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012aec:	68ba      	ldr	r2, [r7, #8]
 8012aee:	4413      	add	r3, r2
 8012af0:	8bfa      	ldrh	r2, [r7, #30]
 8012af2:	4619      	mov	r1, r3
 8012af4:	f004 fa4e 	bl	8016f94 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8012af8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012afa:	f7fb f9f5 	bl	800dee8 <pbuf_clen>
 8012afe:	4603      	mov	r3, r0
 8012b00:	461a      	mov	r2, r3
 8012b02:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012b06:	4413      	add	r3, r2
 8012b08:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8012b0c:	e041      	b.n	8012b92 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8012b0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b10:	685b      	ldr	r3, [r3, #4]
 8012b12:	637b      	str	r3, [r7, #52]	; 0x34
 8012b14:	e002      	b.n	8012b1c <tcp_write+0x23c>
 8012b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	637b      	str	r3, [r7, #52]	; 0x34
 8012b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d1f8      	bne.n	8012b16 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b26:	7b1b      	ldrb	r3, [r3, #12]
 8012b28:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d115      	bne.n	8012b5c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8012b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b32:	685b      	ldr	r3, [r3, #4]
 8012b34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012b36:	8952      	ldrh	r2, [r2, #10]
 8012b38:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012b3a:	68ba      	ldr	r2, [r7, #8]
 8012b3c:	429a      	cmp	r2, r3
 8012b3e:	d10d      	bne.n	8012b5c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8012b40:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d006      	beq.n	8012b56 <tcp_write+0x276>
 8012b48:	4b1c      	ldr	r3, [pc, #112]	; (8012bbc <tcp_write+0x2dc>)
 8012b4a:	f240 2231 	movw	r2, #561	; 0x231
 8012b4e:	4922      	ldr	r1, [pc, #136]	; (8012bd8 <tcp_write+0x2f8>)
 8012b50:	481c      	ldr	r0, [pc, #112]	; (8012bc4 <tcp_write+0x2e4>)
 8012b52:	f004 fa4f 	bl	8016ff4 <iprintf>
          extendlen = seglen;
 8012b56:	8bfb      	ldrh	r3, [r7, #30]
 8012b58:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8012b5a:	e01a      	b.n	8012b92 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8012b5c:	8bfb      	ldrh	r3, [r7, #30]
 8012b5e:	2201      	movs	r2, #1
 8012b60:	4619      	mov	r1, r3
 8012b62:	2000      	movs	r0, #0
 8012b64:	f7fa fe54 	bl	800d810 <pbuf_alloc>
 8012b68:	6578      	str	r0, [r7, #84]	; 0x54
 8012b6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	f000 81e0 	beq.w	8012f32 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8012b72:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012b76:	68ba      	ldr	r2, [r7, #8]
 8012b78:	441a      	add	r2, r3
 8012b7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012b7c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8012b7e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012b80:	f7fb f9b2 	bl	800dee8 <pbuf_clen>
 8012b84:	4603      	mov	r3, r0
 8012b86:	461a      	mov	r2, r3
 8012b88:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012b8c:	4413      	add	r3, r2
 8012b8e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8012b92:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012b96:	8bfb      	ldrh	r3, [r7, #30]
 8012b98:	4413      	add	r3, r2
 8012b9a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8012b9e:	e0dc      	b.n	8012d5a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	f000 80d7 	beq.w	8012d5a <tcp_write+0x47a>
 8012bac:	4b03      	ldr	r3, [pc, #12]	; (8012bbc <tcp_write+0x2dc>)
 8012bae:	f240 224a 	movw	r2, #586	; 0x24a
 8012bb2:	490a      	ldr	r1, [pc, #40]	; (8012bdc <tcp_write+0x2fc>)
 8012bb4:	4803      	ldr	r0, [pc, #12]	; (8012bc4 <tcp_write+0x2e4>)
 8012bb6:	f004 fa1d 	bl	8016ff4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8012bba:	e0ce      	b.n	8012d5a <tcp_write+0x47a>
 8012bbc:	0801af34 	.word	0x0801af34
 8012bc0:	0801b0d4 	.word	0x0801b0d4
 8012bc4:	0801af88 	.word	0x0801af88
 8012bc8:	0801b0ec 	.word	0x0801b0ec
 8012bcc:	0801b120 	.word	0x0801b120
 8012bd0:	0801b138 	.word	0x0801b138
 8012bd4:	0801b158 	.word	0x0801b158
 8012bd8:	0801b178 	.word	0x0801b178
 8012bdc:	0801b1a4 	.word	0x0801b1a4
    struct pbuf *p;
    u16_t left = len - pos;
 8012be0:	88fa      	ldrh	r2, [r7, #6]
 8012be2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012be6:	1ad3      	subs	r3, r2, r3
 8012be8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8012bea:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012bee:	b29b      	uxth	r3, r3
 8012bf0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012bf2:	1ad3      	subs	r3, r2, r3
 8012bf4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8012bf6:	8b7a      	ldrh	r2, [r7, #26]
 8012bf8:	8bbb      	ldrh	r3, [r7, #28]
 8012bfa:	4293      	cmp	r3, r2
 8012bfc:	bf28      	it	cs
 8012bfe:	4613      	movcs	r3, r2
 8012c00:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012c02:	797b      	ldrb	r3, [r7, #5]
 8012c04:	f003 0301 	and.w	r3, r3, #1
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d036      	beq.n	8012c7a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8012c0c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012c10:	b29a      	uxth	r2, r3
 8012c12:	8b3b      	ldrh	r3, [r7, #24]
 8012c14:	4413      	add	r3, r2
 8012c16:	b299      	uxth	r1, r3
 8012c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	bf0c      	ite	eq
 8012c1e:	2301      	moveq	r3, #1
 8012c20:	2300      	movne	r3, #0
 8012c22:	b2db      	uxtb	r3, r3
 8012c24:	f107 0012 	add.w	r0, r7, #18
 8012c28:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012c2a:	9302      	str	r3, [sp, #8]
 8012c2c:	797b      	ldrb	r3, [r7, #5]
 8012c2e:	9301      	str	r3, [sp, #4]
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	9300      	str	r3, [sp, #0]
 8012c34:	4603      	mov	r3, r0
 8012c36:	2036      	movs	r0, #54	; 0x36
 8012c38:	f7ff fd5e 	bl	80126f8 <tcp_pbuf_prealloc>
 8012c3c:	6338      	str	r0, [r7, #48]	; 0x30
 8012c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	f000 8178 	beq.w	8012f36 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8012c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c48:	895b      	ldrh	r3, [r3, #10]
 8012c4a:	8b3a      	ldrh	r2, [r7, #24]
 8012c4c:	429a      	cmp	r2, r3
 8012c4e:	d906      	bls.n	8012c5e <tcp_write+0x37e>
 8012c50:	4b8c      	ldr	r3, [pc, #560]	; (8012e84 <tcp_write+0x5a4>)
 8012c52:	f240 2266 	movw	r2, #614	; 0x266
 8012c56:	498c      	ldr	r1, [pc, #560]	; (8012e88 <tcp_write+0x5a8>)
 8012c58:	488c      	ldr	r0, [pc, #560]	; (8012e8c <tcp_write+0x5ac>)
 8012c5a:	f004 f9cb 	bl	8016ff4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8012c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c60:	685a      	ldr	r2, [r3, #4]
 8012c62:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012c66:	18d0      	adds	r0, r2, r3
 8012c68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012c6c:	68ba      	ldr	r2, [r7, #8]
 8012c6e:	4413      	add	r3, r2
 8012c70:	8b3a      	ldrh	r2, [r7, #24]
 8012c72:	4619      	mov	r1, r3
 8012c74:	f004 f98e 	bl	8016f94 <memcpy>
 8012c78:	e02f      	b.n	8012cda <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8012c7a:	8a7b      	ldrh	r3, [r7, #18]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d006      	beq.n	8012c8e <tcp_write+0x3ae>
 8012c80:	4b80      	ldr	r3, [pc, #512]	; (8012e84 <tcp_write+0x5a4>)
 8012c82:	f240 2271 	movw	r2, #625	; 0x271
 8012c86:	4982      	ldr	r1, [pc, #520]	; (8012e90 <tcp_write+0x5b0>)
 8012c88:	4880      	ldr	r0, [pc, #512]	; (8012e8c <tcp_write+0x5ac>)
 8012c8a:	f004 f9b3 	bl	8016ff4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8012c8e:	8b3b      	ldrh	r3, [r7, #24]
 8012c90:	2201      	movs	r2, #1
 8012c92:	4619      	mov	r1, r3
 8012c94:	2036      	movs	r0, #54	; 0x36
 8012c96:	f7fa fdbb 	bl	800d810 <pbuf_alloc>
 8012c9a:	6178      	str	r0, [r7, #20]
 8012c9c:	697b      	ldr	r3, [r7, #20]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	f000 814b 	beq.w	8012f3a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8012ca4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012ca8:	68ba      	ldr	r2, [r7, #8]
 8012caa:	441a      	add	r2, r3
 8012cac:	697b      	ldr	r3, [r7, #20]
 8012cae:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012cb0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012cb4:	b29b      	uxth	r3, r3
 8012cb6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012cba:	4619      	mov	r1, r3
 8012cbc:	2036      	movs	r0, #54	; 0x36
 8012cbe:	f7fa fda7 	bl	800d810 <pbuf_alloc>
 8012cc2:	6338      	str	r0, [r7, #48]	; 0x30
 8012cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d103      	bne.n	8012cd2 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8012cca:	6978      	ldr	r0, [r7, #20]
 8012ccc:	f7fb f884 	bl	800ddd8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8012cd0:	e136      	b.n	8012f40 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8012cd2:	6979      	ldr	r1, [r7, #20]
 8012cd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012cd6:	f7fb f941 	bl	800df5c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8012cda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012cdc:	f7fb f904 	bl	800dee8 <pbuf_clen>
 8012ce0:	4603      	mov	r3, r0
 8012ce2:	461a      	mov	r2, r3
 8012ce4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012ce8:	4413      	add	r3, r2
 8012cea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8012cee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012cf2:	2b09      	cmp	r3, #9
 8012cf4:	d903      	bls.n	8012cfe <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8012cf6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012cf8:	f7fb f86e 	bl	800ddd8 <pbuf_free>
      goto memerr;
 8012cfc:	e120      	b.n	8012f40 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8012cfe:	68fb      	ldr	r3, [r7, #12]
 8012d00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012d02:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012d06:	441a      	add	r2, r3
 8012d08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d0c:	9300      	str	r3, [sp, #0]
 8012d0e:	4613      	mov	r3, r2
 8012d10:	2200      	movs	r2, #0
 8012d12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012d14:	68f8      	ldr	r0, [r7, #12]
 8012d16:	f7ff fc51 	bl	80125bc <tcp_create_segment>
 8012d1a:	64f8      	str	r0, [r7, #76]	; 0x4c
 8012d1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	f000 810d 	beq.w	8012f3e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8012d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d102      	bne.n	8012d30 <tcp_write+0x450>
      queue = seg;
 8012d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d2c:	647b      	str	r3, [r7, #68]	; 0x44
 8012d2e:	e00c      	b.n	8012d4a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8012d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d106      	bne.n	8012d44 <tcp_write+0x464>
 8012d36:	4b53      	ldr	r3, [pc, #332]	; (8012e84 <tcp_write+0x5a4>)
 8012d38:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012d3c:	4955      	ldr	r1, [pc, #340]	; (8012e94 <tcp_write+0x5b4>)
 8012d3e:	4853      	ldr	r0, [pc, #332]	; (8012e8c <tcp_write+0x5ac>)
 8012d40:	f004 f958 	bl	8016ff4 <iprintf>
      prev_seg->next = seg;
 8012d44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012d48:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8012d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d4c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8012d4e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012d52:	8b3b      	ldrh	r3, [r7, #24]
 8012d54:	4413      	add	r3, r2
 8012d56:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8012d5a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012d5e:	88fb      	ldrh	r3, [r7, #6]
 8012d60:	429a      	cmp	r2, r3
 8012d62:	f4ff af3d 	bcc.w	8012be0 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8012d66:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d02c      	beq.n	8012dc6 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8012d6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d6e:	685b      	ldr	r3, [r3, #4]
 8012d70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012d72:	e01e      	b.n	8012db2 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8012d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d76:	891a      	ldrh	r2, [r3, #8]
 8012d78:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012d7a:	4413      	add	r3, r2
 8012d7c:	b29a      	uxth	r2, r3
 8012d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d80:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8012d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d110      	bne.n	8012dac <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8012d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d8c:	685b      	ldr	r3, [r3, #4]
 8012d8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012d90:	8952      	ldrh	r2, [r2, #10]
 8012d92:	4413      	add	r3, r2
 8012d94:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012d96:	68b9      	ldr	r1, [r7, #8]
 8012d98:	4618      	mov	r0, r3
 8012d9a:	f004 f8fb 	bl	8016f94 <memcpy>
        p->len += oversize_used;
 8012d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012da0:	895a      	ldrh	r2, [r3, #10]
 8012da2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012da4:	4413      	add	r3, r2
 8012da6:	b29a      	uxth	r2, r3
 8012da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012daa:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8012dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d1dd      	bne.n	8012d74 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8012db8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012dba:	891a      	ldrh	r2, [r3, #8]
 8012dbc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012dbe:	4413      	add	r3, r2
 8012dc0:	b29a      	uxth	r2, r3
 8012dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012dc4:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8012dc6:	8a7a      	ldrh	r2, [r7, #18]
 8012dc8:	68fb      	ldr	r3, [r7, #12]
 8012dca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8012dce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d018      	beq.n	8012e06 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8012dd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d106      	bne.n	8012de8 <tcp_write+0x508>
 8012dda:	4b2a      	ldr	r3, [pc, #168]	; (8012e84 <tcp_write+0x5a4>)
 8012ddc:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8012de0:	492d      	ldr	r1, [pc, #180]	; (8012e98 <tcp_write+0x5b8>)
 8012de2:	482a      	ldr	r0, [pc, #168]	; (8012e8c <tcp_write+0x5ac>)
 8012de4:	f004 f906 	bl	8016ff4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8012de8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012dea:	685b      	ldr	r3, [r3, #4]
 8012dec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012dee:	4618      	mov	r0, r3
 8012df0:	f7fb f8b4 	bl	800df5c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8012df4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012df6:	891a      	ldrh	r2, [r3, #8]
 8012df8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012dfa:	891b      	ldrh	r3, [r3, #8]
 8012dfc:	4413      	add	r3, r2
 8012dfe:	b29a      	uxth	r2, r3
 8012e00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e02:	811a      	strh	r2, [r3, #8]
 8012e04:	e037      	b.n	8012e76 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8012e06:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d034      	beq.n	8012e76 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012e0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d003      	beq.n	8012e1a <tcp_write+0x53a>
 8012e12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e14:	685b      	ldr	r3, [r3, #4]
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d106      	bne.n	8012e28 <tcp_write+0x548>
 8012e1a:	4b1a      	ldr	r3, [pc, #104]	; (8012e84 <tcp_write+0x5a4>)
 8012e1c:	f240 22e6 	movw	r2, #742	; 0x2e6
 8012e20:	491e      	ldr	r1, [pc, #120]	; (8012e9c <tcp_write+0x5bc>)
 8012e22:	481a      	ldr	r0, [pc, #104]	; (8012e8c <tcp_write+0x5ac>)
 8012e24:	f004 f8e6 	bl	8016ff4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012e28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e2a:	685b      	ldr	r3, [r3, #4]
 8012e2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8012e2e:	e009      	b.n	8012e44 <tcp_write+0x564>
      p->tot_len += extendlen;
 8012e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e32:	891a      	ldrh	r2, [r3, #8]
 8012e34:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012e36:	4413      	add	r3, r2
 8012e38:	b29a      	uxth	r2, r3
 8012e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e3c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	62bb      	str	r3, [r7, #40]	; 0x28
 8012e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d1f1      	bne.n	8012e30 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8012e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e4e:	891a      	ldrh	r2, [r3, #8]
 8012e50:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012e52:	4413      	add	r3, r2
 8012e54:	b29a      	uxth	r2, r3
 8012e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e58:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8012e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e5c:	895a      	ldrh	r2, [r3, #10]
 8012e5e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012e60:	4413      	add	r3, r2
 8012e62:	b29a      	uxth	r2, r3
 8012e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e66:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8012e68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e6a:	891a      	ldrh	r2, [r3, #8]
 8012e6c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012e6e:	4413      	add	r3, r2
 8012e70:	b29a      	uxth	r2, r3
 8012e72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e74:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8012e76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d111      	bne.n	8012ea0 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012e80:	66da      	str	r2, [r3, #108]	; 0x6c
 8012e82:	e010      	b.n	8012ea6 <tcp_write+0x5c6>
 8012e84:	0801af34 	.word	0x0801af34
 8012e88:	0801b1d4 	.word	0x0801b1d4
 8012e8c:	0801af88 	.word	0x0801af88
 8012e90:	0801b214 	.word	0x0801b214
 8012e94:	0801b224 	.word	0x0801b224
 8012e98:	0801b238 	.word	0x0801b238
 8012e9c:	0801b270 	.word	0x0801b270
  } else {
    last_unsent->next = queue;
 8012ea0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ea2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012ea4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012eaa:	88fb      	ldrh	r3, [r7, #6]
 8012eac:	441a      	add	r2, r3
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8012eb2:	68fb      	ldr	r3, [r7, #12]
 8012eb4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012eb8:	88fb      	ldrh	r3, [r7, #6]
 8012eba:	1ad3      	subs	r3, r2, r3
 8012ebc:	b29a      	uxth	r2, r3
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012eca:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d00e      	beq.n	8012ef6 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d10a      	bne.n	8012ef6 <tcp_write+0x616>
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d106      	bne.n	8012ef6 <tcp_write+0x616>
 8012ee8:	4b2c      	ldr	r3, [pc, #176]	; (8012f9c <tcp_write+0x6bc>)
 8012eea:	f240 3212 	movw	r2, #786	; 0x312
 8012eee:	492c      	ldr	r1, [pc, #176]	; (8012fa0 <tcp_write+0x6c0>)
 8012ef0:	482c      	ldr	r0, [pc, #176]	; (8012fa4 <tcp_write+0x6c4>)
 8012ef2:	f004 f87f 	bl	8016ff4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8012ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d016      	beq.n	8012f2a <tcp_write+0x64a>
 8012efc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012efe:	68db      	ldr	r3, [r3, #12]
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d012      	beq.n	8012f2a <tcp_write+0x64a>
 8012f04:	797b      	ldrb	r3, [r7, #5]
 8012f06:	f003 0302 	and.w	r3, r3, #2
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d10d      	bne.n	8012f2a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8012f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f10:	68db      	ldr	r3, [r3, #12]
 8012f12:	899b      	ldrh	r3, [r3, #12]
 8012f14:	b29c      	uxth	r4, r3
 8012f16:	2008      	movs	r0, #8
 8012f18:	f7f9 fbcc 	bl	800c6b4 <lwip_htons>
 8012f1c:	4603      	mov	r3, r0
 8012f1e:	461a      	mov	r2, r3
 8012f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f22:	68db      	ldr	r3, [r3, #12]
 8012f24:	4322      	orrs	r2, r4
 8012f26:	b292      	uxth	r2, r2
 8012f28:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8012f2a:	2300      	movs	r3, #0
 8012f2c:	e031      	b.n	8012f92 <tcp_write+0x6b2>
          goto memerr;
 8012f2e:	bf00      	nop
 8012f30:	e006      	b.n	8012f40 <tcp_write+0x660>
            goto memerr;
 8012f32:	bf00      	nop
 8012f34:	e004      	b.n	8012f40 <tcp_write+0x660>
        goto memerr;
 8012f36:	bf00      	nop
 8012f38:	e002      	b.n	8012f40 <tcp_write+0x660>
        goto memerr;
 8012f3a:	bf00      	nop
 8012f3c:	e000      	b.n	8012f40 <tcp_write+0x660>
      goto memerr;
 8012f3e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012f40:	68fb      	ldr	r3, [r7, #12]
 8012f42:	8b5b      	ldrh	r3, [r3, #26]
 8012f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012f48:	b29a      	uxth	r2, r3
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8012f4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d002      	beq.n	8012f5a <tcp_write+0x67a>
    pbuf_free(concat_p);
 8012f54:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012f56:	f7fa ff3f 	bl	800ddd8 <pbuf_free>
  }
  if (queue != NULL) {
 8012f5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d002      	beq.n	8012f66 <tcp_write+0x686>
    tcp_segs_free(queue);
 8012f60:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012f62:	f7fc fb51 	bl	800f608 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d00e      	beq.n	8012f8e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d10a      	bne.n	8012f8e <tcp_write+0x6ae>
 8012f78:	68fb      	ldr	r3, [r7, #12]
 8012f7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d106      	bne.n	8012f8e <tcp_write+0x6ae>
 8012f80:	4b06      	ldr	r3, [pc, #24]	; (8012f9c <tcp_write+0x6bc>)
 8012f82:	f240 3227 	movw	r2, #807	; 0x327
 8012f86:	4906      	ldr	r1, [pc, #24]	; (8012fa0 <tcp_write+0x6c0>)
 8012f88:	4806      	ldr	r0, [pc, #24]	; (8012fa4 <tcp_write+0x6c4>)
 8012f8a:	f004 f833 	bl	8016ff4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8012f8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8012f92:	4618      	mov	r0, r3
 8012f94:	375c      	adds	r7, #92	; 0x5c
 8012f96:	46bd      	mov	sp, r7
 8012f98:	bd90      	pop	{r4, r7, pc}
 8012f9a:	bf00      	nop
 8012f9c:	0801af34 	.word	0x0801af34
 8012fa0:	0801b2a8 	.word	0x0801b2a8
 8012fa4:	0801af88 	.word	0x0801af88

08012fa8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012fa8:	b590      	push	{r4, r7, lr}
 8012faa:	b08b      	sub	sp, #44	; 0x2c
 8012fac:	af02      	add	r7, sp, #8
 8012fae:	6078      	str	r0, [r7, #4]
 8012fb0:	460b      	mov	r3, r1
 8012fb2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012fb4:	2300      	movs	r3, #0
 8012fb6:	61fb      	str	r3, [r7, #28]
 8012fb8:	2300      	movs	r3, #0
 8012fba:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012fbc:	2300      	movs	r3, #0
 8012fbe:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d106      	bne.n	8012fd4 <tcp_split_unsent_seg+0x2c>
 8012fc6:	4b95      	ldr	r3, [pc, #596]	; (801321c <tcp_split_unsent_seg+0x274>)
 8012fc8:	f240 324b 	movw	r2, #843	; 0x34b
 8012fcc:	4994      	ldr	r1, [pc, #592]	; (8013220 <tcp_split_unsent_seg+0x278>)
 8012fce:	4895      	ldr	r0, [pc, #596]	; (8013224 <tcp_split_unsent_seg+0x27c>)
 8012fd0:	f004 f810 	bl	8016ff4 <iprintf>

  useg = pcb->unsent;
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012fd8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8012fda:	697b      	ldr	r3, [r7, #20]
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d102      	bne.n	8012fe6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8012fe0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012fe4:	e116      	b.n	8013214 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8012fe6:	887b      	ldrh	r3, [r7, #2]
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d109      	bne.n	8013000 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012fec:	4b8b      	ldr	r3, [pc, #556]	; (801321c <tcp_split_unsent_seg+0x274>)
 8012fee:	f240 3253 	movw	r2, #851	; 0x353
 8012ff2:	498d      	ldr	r1, [pc, #564]	; (8013228 <tcp_split_unsent_seg+0x280>)
 8012ff4:	488b      	ldr	r0, [pc, #556]	; (8013224 <tcp_split_unsent_seg+0x27c>)
 8012ff6:	f003 fffd 	bl	8016ff4 <iprintf>
    return ERR_VAL;
 8012ffa:	f06f 0305 	mvn.w	r3, #5
 8012ffe:	e109      	b.n	8013214 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8013000:	697b      	ldr	r3, [r7, #20]
 8013002:	891b      	ldrh	r3, [r3, #8]
 8013004:	887a      	ldrh	r2, [r7, #2]
 8013006:	429a      	cmp	r2, r3
 8013008:	d301      	bcc.n	801300e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801300a:	2300      	movs	r3, #0
 801300c:	e102      	b.n	8013214 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013012:	887a      	ldrh	r2, [r7, #2]
 8013014:	429a      	cmp	r2, r3
 8013016:	d906      	bls.n	8013026 <tcp_split_unsent_seg+0x7e>
 8013018:	4b80      	ldr	r3, [pc, #512]	; (801321c <tcp_split_unsent_seg+0x274>)
 801301a:	f240 325b 	movw	r2, #859	; 0x35b
 801301e:	4983      	ldr	r1, [pc, #524]	; (801322c <tcp_split_unsent_seg+0x284>)
 8013020:	4880      	ldr	r0, [pc, #512]	; (8013224 <tcp_split_unsent_seg+0x27c>)
 8013022:	f003 ffe7 	bl	8016ff4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8013026:	697b      	ldr	r3, [r7, #20]
 8013028:	891b      	ldrh	r3, [r3, #8]
 801302a:	2b00      	cmp	r3, #0
 801302c:	d106      	bne.n	801303c <tcp_split_unsent_seg+0x94>
 801302e:	4b7b      	ldr	r3, [pc, #492]	; (801321c <tcp_split_unsent_seg+0x274>)
 8013030:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8013034:	497e      	ldr	r1, [pc, #504]	; (8013230 <tcp_split_unsent_seg+0x288>)
 8013036:	487b      	ldr	r0, [pc, #492]	; (8013224 <tcp_split_unsent_seg+0x27c>)
 8013038:	f003 ffdc 	bl	8016ff4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801303c:	697b      	ldr	r3, [r7, #20]
 801303e:	7a9b      	ldrb	r3, [r3, #10]
 8013040:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8013042:	7bfb      	ldrb	r3, [r7, #15]
 8013044:	009b      	lsls	r3, r3, #2
 8013046:	b2db      	uxtb	r3, r3
 8013048:	f003 0304 	and.w	r3, r3, #4
 801304c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801304e:	697b      	ldr	r3, [r7, #20]
 8013050:	891a      	ldrh	r2, [r3, #8]
 8013052:	887b      	ldrh	r3, [r7, #2]
 8013054:	1ad3      	subs	r3, r2, r3
 8013056:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8013058:	7bbb      	ldrb	r3, [r7, #14]
 801305a:	b29a      	uxth	r2, r3
 801305c:	89bb      	ldrh	r3, [r7, #12]
 801305e:	4413      	add	r3, r2
 8013060:	b29b      	uxth	r3, r3
 8013062:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013066:	4619      	mov	r1, r3
 8013068:	2036      	movs	r0, #54	; 0x36
 801306a:	f7fa fbd1 	bl	800d810 <pbuf_alloc>
 801306e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013070:	693b      	ldr	r3, [r7, #16]
 8013072:	2b00      	cmp	r3, #0
 8013074:	f000 80b7 	beq.w	80131e6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8013078:	697b      	ldr	r3, [r7, #20]
 801307a:	685b      	ldr	r3, [r3, #4]
 801307c:	891a      	ldrh	r2, [r3, #8]
 801307e:	697b      	ldr	r3, [r7, #20]
 8013080:	891b      	ldrh	r3, [r3, #8]
 8013082:	1ad3      	subs	r3, r2, r3
 8013084:	b29a      	uxth	r2, r3
 8013086:	887b      	ldrh	r3, [r7, #2]
 8013088:	4413      	add	r3, r2
 801308a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801308c:	697b      	ldr	r3, [r7, #20]
 801308e:	6858      	ldr	r0, [r3, #4]
 8013090:	693b      	ldr	r3, [r7, #16]
 8013092:	685a      	ldr	r2, [r3, #4]
 8013094:	7bbb      	ldrb	r3, [r7, #14]
 8013096:	18d1      	adds	r1, r2, r3
 8013098:	897b      	ldrh	r3, [r7, #10]
 801309a:	89ba      	ldrh	r2, [r7, #12]
 801309c:	f7fb f886 	bl	800e1ac <pbuf_copy_partial>
 80130a0:	4603      	mov	r3, r0
 80130a2:	461a      	mov	r2, r3
 80130a4:	89bb      	ldrh	r3, [r7, #12]
 80130a6:	4293      	cmp	r3, r2
 80130a8:	f040 809f 	bne.w	80131ea <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80130ac:	697b      	ldr	r3, [r7, #20]
 80130ae:	68db      	ldr	r3, [r3, #12]
 80130b0:	899b      	ldrh	r3, [r3, #12]
 80130b2:	b29b      	uxth	r3, r3
 80130b4:	4618      	mov	r0, r3
 80130b6:	f7f9 fafd 	bl	800c6b4 <lwip_htons>
 80130ba:	4603      	mov	r3, r0
 80130bc:	b2db      	uxtb	r3, r3
 80130be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80130c2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80130c4:	2300      	movs	r3, #0
 80130c6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80130c8:	7efb      	ldrb	r3, [r7, #27]
 80130ca:	f003 0308 	and.w	r3, r3, #8
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d007      	beq.n	80130e2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80130d2:	7efb      	ldrb	r3, [r7, #27]
 80130d4:	f023 0308 	bic.w	r3, r3, #8
 80130d8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80130da:	7ebb      	ldrb	r3, [r7, #26]
 80130dc:	f043 0308 	orr.w	r3, r3, #8
 80130e0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80130e2:	7efb      	ldrb	r3, [r7, #27]
 80130e4:	f003 0301 	and.w	r3, r3, #1
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d007      	beq.n	80130fc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80130ec:	7efb      	ldrb	r3, [r7, #27]
 80130ee:	f023 0301 	bic.w	r3, r3, #1
 80130f2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80130f4:	7ebb      	ldrb	r3, [r7, #26]
 80130f6:	f043 0301 	orr.w	r3, r3, #1
 80130fa:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80130fc:	697b      	ldr	r3, [r7, #20]
 80130fe:	68db      	ldr	r3, [r3, #12]
 8013100:	685b      	ldr	r3, [r3, #4]
 8013102:	4618      	mov	r0, r3
 8013104:	f7f9 faeb 	bl	800c6de <lwip_htonl>
 8013108:	4602      	mov	r2, r0
 801310a:	887b      	ldrh	r3, [r7, #2]
 801310c:	18d1      	adds	r1, r2, r3
 801310e:	7eba      	ldrb	r2, [r7, #26]
 8013110:	7bfb      	ldrb	r3, [r7, #15]
 8013112:	9300      	str	r3, [sp, #0]
 8013114:	460b      	mov	r3, r1
 8013116:	6939      	ldr	r1, [r7, #16]
 8013118:	6878      	ldr	r0, [r7, #4]
 801311a:	f7ff fa4f 	bl	80125bc <tcp_create_segment>
 801311e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8013120:	69fb      	ldr	r3, [r7, #28]
 8013122:	2b00      	cmp	r3, #0
 8013124:	d063      	beq.n	80131ee <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8013126:	697b      	ldr	r3, [r7, #20]
 8013128:	685b      	ldr	r3, [r3, #4]
 801312a:	4618      	mov	r0, r3
 801312c:	f7fa fedc 	bl	800dee8 <pbuf_clen>
 8013130:	4603      	mov	r3, r0
 8013132:	461a      	mov	r2, r3
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801313a:	1a9b      	subs	r3, r3, r2
 801313c:	b29a      	uxth	r2, r3
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8013144:	697b      	ldr	r3, [r7, #20]
 8013146:	6858      	ldr	r0, [r3, #4]
 8013148:	697b      	ldr	r3, [r7, #20]
 801314a:	685b      	ldr	r3, [r3, #4]
 801314c:	891a      	ldrh	r2, [r3, #8]
 801314e:	89bb      	ldrh	r3, [r7, #12]
 8013150:	1ad3      	subs	r3, r2, r3
 8013152:	b29b      	uxth	r3, r3
 8013154:	4619      	mov	r1, r3
 8013156:	f7fa fcb9 	bl	800dacc <pbuf_realloc>
  useg->len -= remainder;
 801315a:	697b      	ldr	r3, [r7, #20]
 801315c:	891a      	ldrh	r2, [r3, #8]
 801315e:	89bb      	ldrh	r3, [r7, #12]
 8013160:	1ad3      	subs	r3, r2, r3
 8013162:	b29a      	uxth	r2, r3
 8013164:	697b      	ldr	r3, [r7, #20]
 8013166:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013168:	697b      	ldr	r3, [r7, #20]
 801316a:	68db      	ldr	r3, [r3, #12]
 801316c:	899b      	ldrh	r3, [r3, #12]
 801316e:	b29c      	uxth	r4, r3
 8013170:	7efb      	ldrb	r3, [r7, #27]
 8013172:	b29b      	uxth	r3, r3
 8013174:	4618      	mov	r0, r3
 8013176:	f7f9 fa9d 	bl	800c6b4 <lwip_htons>
 801317a:	4603      	mov	r3, r0
 801317c:	461a      	mov	r2, r3
 801317e:	697b      	ldr	r3, [r7, #20]
 8013180:	68db      	ldr	r3, [r3, #12]
 8013182:	4322      	orrs	r2, r4
 8013184:	b292      	uxth	r2, r2
 8013186:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8013188:	697b      	ldr	r3, [r7, #20]
 801318a:	685b      	ldr	r3, [r3, #4]
 801318c:	4618      	mov	r0, r3
 801318e:	f7fa feab 	bl	800dee8 <pbuf_clen>
 8013192:	4603      	mov	r3, r0
 8013194:	461a      	mov	r2, r3
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801319c:	4413      	add	r3, r2
 801319e:	b29a      	uxth	r2, r3
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80131a6:	69fb      	ldr	r3, [r7, #28]
 80131a8:	685b      	ldr	r3, [r3, #4]
 80131aa:	4618      	mov	r0, r3
 80131ac:	f7fa fe9c 	bl	800dee8 <pbuf_clen>
 80131b0:	4603      	mov	r3, r0
 80131b2:	461a      	mov	r2, r3
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80131ba:	4413      	add	r3, r2
 80131bc:	b29a      	uxth	r2, r3
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80131c4:	697b      	ldr	r3, [r7, #20]
 80131c6:	681a      	ldr	r2, [r3, #0]
 80131c8:	69fb      	ldr	r3, [r7, #28]
 80131ca:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80131cc:	697b      	ldr	r3, [r7, #20]
 80131ce:	69fa      	ldr	r2, [r7, #28]
 80131d0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80131d2:	69fb      	ldr	r3, [r7, #28]
 80131d4:	681b      	ldr	r3, [r3, #0]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d103      	bne.n	80131e2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	2200      	movs	r2, #0
 80131de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80131e2:	2300      	movs	r3, #0
 80131e4:	e016      	b.n	8013214 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80131e6:	bf00      	nop
 80131e8:	e002      	b.n	80131f0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80131ea:	bf00      	nop
 80131ec:	e000      	b.n	80131f0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80131ee:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80131f0:	69fb      	ldr	r3, [r7, #28]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d006      	beq.n	8013204 <tcp_split_unsent_seg+0x25c>
 80131f6:	4b09      	ldr	r3, [pc, #36]	; (801321c <tcp_split_unsent_seg+0x274>)
 80131f8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80131fc:	490d      	ldr	r1, [pc, #52]	; (8013234 <tcp_split_unsent_seg+0x28c>)
 80131fe:	4809      	ldr	r0, [pc, #36]	; (8013224 <tcp_split_unsent_seg+0x27c>)
 8013200:	f003 fef8 	bl	8016ff4 <iprintf>
  if (p != NULL) {
 8013204:	693b      	ldr	r3, [r7, #16]
 8013206:	2b00      	cmp	r3, #0
 8013208:	d002      	beq.n	8013210 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801320a:	6938      	ldr	r0, [r7, #16]
 801320c:	f7fa fde4 	bl	800ddd8 <pbuf_free>
  }

  return ERR_MEM;
 8013210:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8013214:	4618      	mov	r0, r3
 8013216:	3724      	adds	r7, #36	; 0x24
 8013218:	46bd      	mov	sp, r7
 801321a:	bd90      	pop	{r4, r7, pc}
 801321c:	0801af34 	.word	0x0801af34
 8013220:	0801b2c8 	.word	0x0801b2c8
 8013224:	0801af88 	.word	0x0801af88
 8013228:	0801b2ec 	.word	0x0801b2ec
 801322c:	0801b310 	.word	0x0801b310
 8013230:	0801b320 	.word	0x0801b320
 8013234:	0801b330 	.word	0x0801b330

08013238 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013238:	b590      	push	{r4, r7, lr}
 801323a:	b085      	sub	sp, #20
 801323c:	af00      	add	r7, sp, #0
 801323e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	2b00      	cmp	r3, #0
 8013244:	d106      	bne.n	8013254 <tcp_send_fin+0x1c>
 8013246:	4b21      	ldr	r3, [pc, #132]	; (80132cc <tcp_send_fin+0x94>)
 8013248:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801324c:	4920      	ldr	r1, [pc, #128]	; (80132d0 <tcp_send_fin+0x98>)
 801324e:	4821      	ldr	r0, [pc, #132]	; (80132d4 <tcp_send_fin+0x9c>)
 8013250:	f003 fed0 	bl	8016ff4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013258:	2b00      	cmp	r3, #0
 801325a:	d02e      	beq.n	80132ba <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013260:	60fb      	str	r3, [r7, #12]
 8013262:	e002      	b.n	801326a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801326a:	68fb      	ldr	r3, [r7, #12]
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	2b00      	cmp	r3, #0
 8013270:	d1f8      	bne.n	8013264 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	68db      	ldr	r3, [r3, #12]
 8013276:	899b      	ldrh	r3, [r3, #12]
 8013278:	b29b      	uxth	r3, r3
 801327a:	4618      	mov	r0, r3
 801327c:	f7f9 fa1a 	bl	800c6b4 <lwip_htons>
 8013280:	4603      	mov	r3, r0
 8013282:	b2db      	uxtb	r3, r3
 8013284:	f003 0307 	and.w	r3, r3, #7
 8013288:	2b00      	cmp	r3, #0
 801328a:	d116      	bne.n	80132ba <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	68db      	ldr	r3, [r3, #12]
 8013290:	899b      	ldrh	r3, [r3, #12]
 8013292:	b29c      	uxth	r4, r3
 8013294:	2001      	movs	r0, #1
 8013296:	f7f9 fa0d 	bl	800c6b4 <lwip_htons>
 801329a:	4603      	mov	r3, r0
 801329c:	461a      	mov	r2, r3
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	68db      	ldr	r3, [r3, #12]
 80132a2:	4322      	orrs	r2, r4
 80132a4:	b292      	uxth	r2, r2
 80132a6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	8b5b      	ldrh	r3, [r3, #26]
 80132ac:	f043 0320 	orr.w	r3, r3, #32
 80132b0:	b29a      	uxth	r2, r3
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80132b6:	2300      	movs	r3, #0
 80132b8:	e004      	b.n	80132c4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80132ba:	2101      	movs	r1, #1
 80132bc:	6878      	ldr	r0, [r7, #4]
 80132be:	f000 f80b 	bl	80132d8 <tcp_enqueue_flags>
 80132c2:	4603      	mov	r3, r0
}
 80132c4:	4618      	mov	r0, r3
 80132c6:	3714      	adds	r7, #20
 80132c8:	46bd      	mov	sp, r7
 80132ca:	bd90      	pop	{r4, r7, pc}
 80132cc:	0801af34 	.word	0x0801af34
 80132d0:	0801b33c 	.word	0x0801b33c
 80132d4:	0801af88 	.word	0x0801af88

080132d8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80132d8:	b580      	push	{r7, lr}
 80132da:	b08a      	sub	sp, #40	; 0x28
 80132dc:	af02      	add	r7, sp, #8
 80132de:	6078      	str	r0, [r7, #4]
 80132e0:	460b      	mov	r3, r1
 80132e2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80132e4:	2300      	movs	r3, #0
 80132e6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80132e8:	2300      	movs	r3, #0
 80132ea:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80132ec:	78fb      	ldrb	r3, [r7, #3]
 80132ee:	f003 0303 	and.w	r3, r3, #3
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d106      	bne.n	8013304 <tcp_enqueue_flags+0x2c>
 80132f6:	4b67      	ldr	r3, [pc, #412]	; (8013494 <tcp_enqueue_flags+0x1bc>)
 80132f8:	f240 4211 	movw	r2, #1041	; 0x411
 80132fc:	4966      	ldr	r1, [pc, #408]	; (8013498 <tcp_enqueue_flags+0x1c0>)
 80132fe:	4867      	ldr	r0, [pc, #412]	; (801349c <tcp_enqueue_flags+0x1c4>)
 8013300:	f003 fe78 	bl	8016ff4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	2b00      	cmp	r3, #0
 8013308:	d106      	bne.n	8013318 <tcp_enqueue_flags+0x40>
 801330a:	4b62      	ldr	r3, [pc, #392]	; (8013494 <tcp_enqueue_flags+0x1bc>)
 801330c:	f240 4213 	movw	r2, #1043	; 0x413
 8013310:	4963      	ldr	r1, [pc, #396]	; (80134a0 <tcp_enqueue_flags+0x1c8>)
 8013312:	4862      	ldr	r0, [pc, #392]	; (801349c <tcp_enqueue_flags+0x1c4>)
 8013314:	f003 fe6e 	bl	8016ff4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013318:	78fb      	ldrb	r3, [r7, #3]
 801331a:	f003 0302 	and.w	r3, r3, #2
 801331e:	2b00      	cmp	r3, #0
 8013320:	d001      	beq.n	8013326 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8013322:	2301      	movs	r3, #1
 8013324:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013326:	7ffb      	ldrb	r3, [r7, #31]
 8013328:	009b      	lsls	r3, r3, #2
 801332a:	b2db      	uxtb	r3, r3
 801332c:	f003 0304 	and.w	r3, r3, #4
 8013330:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013332:	7dfb      	ldrb	r3, [r7, #23]
 8013334:	b29b      	uxth	r3, r3
 8013336:	f44f 7220 	mov.w	r2, #640	; 0x280
 801333a:	4619      	mov	r1, r3
 801333c:	2036      	movs	r0, #54	; 0x36
 801333e:	f7fa fa67 	bl	800d810 <pbuf_alloc>
 8013342:	6138      	str	r0, [r7, #16]
 8013344:	693b      	ldr	r3, [r7, #16]
 8013346:	2b00      	cmp	r3, #0
 8013348:	d109      	bne.n	801335e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	8b5b      	ldrh	r3, [r3, #26]
 801334e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013352:	b29a      	uxth	r2, r3
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013358:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801335c:	e095      	b.n	801348a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801335e:	693b      	ldr	r3, [r7, #16]
 8013360:	895a      	ldrh	r2, [r3, #10]
 8013362:	7dfb      	ldrb	r3, [r7, #23]
 8013364:	b29b      	uxth	r3, r3
 8013366:	429a      	cmp	r2, r3
 8013368:	d206      	bcs.n	8013378 <tcp_enqueue_flags+0xa0>
 801336a:	4b4a      	ldr	r3, [pc, #296]	; (8013494 <tcp_enqueue_flags+0x1bc>)
 801336c:	f240 4239 	movw	r2, #1081	; 0x439
 8013370:	494c      	ldr	r1, [pc, #304]	; (80134a4 <tcp_enqueue_flags+0x1cc>)
 8013372:	484a      	ldr	r0, [pc, #296]	; (801349c <tcp_enqueue_flags+0x1c4>)
 8013374:	f003 fe3e 	bl	8016ff4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801337c:	78fa      	ldrb	r2, [r7, #3]
 801337e:	7ffb      	ldrb	r3, [r7, #31]
 8013380:	9300      	str	r3, [sp, #0]
 8013382:	460b      	mov	r3, r1
 8013384:	6939      	ldr	r1, [r7, #16]
 8013386:	6878      	ldr	r0, [r7, #4]
 8013388:	f7ff f918 	bl	80125bc <tcp_create_segment>
 801338c:	60f8      	str	r0, [r7, #12]
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	2b00      	cmp	r3, #0
 8013392:	d109      	bne.n	80133a8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	8b5b      	ldrh	r3, [r3, #26]
 8013398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801339c:	b29a      	uxth	r2, r3
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80133a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80133a6:	e070      	b.n	801348a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	68db      	ldr	r3, [r3, #12]
 80133ac:	f003 0303 	and.w	r3, r3, #3
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d006      	beq.n	80133c2 <tcp_enqueue_flags+0xea>
 80133b4:	4b37      	ldr	r3, [pc, #220]	; (8013494 <tcp_enqueue_flags+0x1bc>)
 80133b6:	f240 4242 	movw	r2, #1090	; 0x442
 80133ba:	493b      	ldr	r1, [pc, #236]	; (80134a8 <tcp_enqueue_flags+0x1d0>)
 80133bc:	4837      	ldr	r0, [pc, #220]	; (801349c <tcp_enqueue_flags+0x1c4>)
 80133be:	f003 fe19 	bl	8016ff4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	891b      	ldrh	r3, [r3, #8]
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d006      	beq.n	80133d8 <tcp_enqueue_flags+0x100>
 80133ca:	4b32      	ldr	r3, [pc, #200]	; (8013494 <tcp_enqueue_flags+0x1bc>)
 80133cc:	f240 4243 	movw	r2, #1091	; 0x443
 80133d0:	4936      	ldr	r1, [pc, #216]	; (80134ac <tcp_enqueue_flags+0x1d4>)
 80133d2:	4832      	ldr	r0, [pc, #200]	; (801349c <tcp_enqueue_flags+0x1c4>)
 80133d4:	f003 fe0e 	bl	8016ff4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d103      	bne.n	80133e8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	68fa      	ldr	r2, [r7, #12]
 80133e4:	66da      	str	r2, [r3, #108]	; 0x6c
 80133e6:	e00d      	b.n	8013404 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80133ec:	61bb      	str	r3, [r7, #24]
 80133ee:	e002      	b.n	80133f6 <tcp_enqueue_flags+0x11e>
 80133f0:	69bb      	ldr	r3, [r7, #24]
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	61bb      	str	r3, [r7, #24]
 80133f6:	69bb      	ldr	r3, [r7, #24]
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d1f8      	bne.n	80133f0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80133fe:	69bb      	ldr	r3, [r7, #24]
 8013400:	68fa      	ldr	r2, [r7, #12]
 8013402:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	2200      	movs	r2, #0
 8013408:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801340c:	78fb      	ldrb	r3, [r7, #3]
 801340e:	f003 0302 	and.w	r3, r3, #2
 8013412:	2b00      	cmp	r3, #0
 8013414:	d104      	bne.n	8013420 <tcp_enqueue_flags+0x148>
 8013416:	78fb      	ldrb	r3, [r7, #3]
 8013418:	f003 0301 	and.w	r3, r3, #1
 801341c:	2b00      	cmp	r3, #0
 801341e:	d004      	beq.n	801342a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013424:	1c5a      	adds	r2, r3, #1
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801342a:	78fb      	ldrb	r3, [r7, #3]
 801342c:	f003 0301 	and.w	r3, r3, #1
 8013430:	2b00      	cmp	r3, #0
 8013432:	d006      	beq.n	8013442 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	8b5b      	ldrh	r3, [r3, #26]
 8013438:	f043 0320 	orr.w	r3, r3, #32
 801343c:	b29a      	uxth	r2, r3
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	685b      	ldr	r3, [r3, #4]
 8013446:	4618      	mov	r0, r3
 8013448:	f7fa fd4e 	bl	800dee8 <pbuf_clen>
 801344c:	4603      	mov	r3, r0
 801344e:	461a      	mov	r2, r3
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013456:	4413      	add	r3, r2
 8013458:	b29a      	uxth	r2, r3
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013466:	2b00      	cmp	r3, #0
 8013468:	d00e      	beq.n	8013488 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801346e:	2b00      	cmp	r3, #0
 8013470:	d10a      	bne.n	8013488 <tcp_enqueue_flags+0x1b0>
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013476:	2b00      	cmp	r3, #0
 8013478:	d106      	bne.n	8013488 <tcp_enqueue_flags+0x1b0>
 801347a:	4b06      	ldr	r3, [pc, #24]	; (8013494 <tcp_enqueue_flags+0x1bc>)
 801347c:	f240 4265 	movw	r2, #1125	; 0x465
 8013480:	490b      	ldr	r1, [pc, #44]	; (80134b0 <tcp_enqueue_flags+0x1d8>)
 8013482:	4806      	ldr	r0, [pc, #24]	; (801349c <tcp_enqueue_flags+0x1c4>)
 8013484:	f003 fdb6 	bl	8016ff4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013488:	2300      	movs	r3, #0
}
 801348a:	4618      	mov	r0, r3
 801348c:	3720      	adds	r7, #32
 801348e:	46bd      	mov	sp, r7
 8013490:	bd80      	pop	{r7, pc}
 8013492:	bf00      	nop
 8013494:	0801af34 	.word	0x0801af34
 8013498:	0801b358 	.word	0x0801b358
 801349c:	0801af88 	.word	0x0801af88
 80134a0:	0801b3b0 	.word	0x0801b3b0
 80134a4:	0801b3d0 	.word	0x0801b3d0
 80134a8:	0801b40c 	.word	0x0801b40c
 80134ac:	0801b424 	.word	0x0801b424
 80134b0:	0801b450 	.word	0x0801b450

080134b4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80134b4:	b5b0      	push	{r4, r5, r7, lr}
 80134b6:	b08a      	sub	sp, #40	; 0x28
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d106      	bne.n	80134d0 <tcp_output+0x1c>
 80134c2:	4b9e      	ldr	r3, [pc, #632]	; (801373c <tcp_output+0x288>)
 80134c4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80134c8:	499d      	ldr	r1, [pc, #628]	; (8013740 <tcp_output+0x28c>)
 80134ca:	489e      	ldr	r0, [pc, #632]	; (8013744 <tcp_output+0x290>)
 80134cc:	f003 fd92 	bl	8016ff4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	7d1b      	ldrb	r3, [r3, #20]
 80134d4:	2b01      	cmp	r3, #1
 80134d6:	d106      	bne.n	80134e6 <tcp_output+0x32>
 80134d8:	4b98      	ldr	r3, [pc, #608]	; (801373c <tcp_output+0x288>)
 80134da:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80134de:	499a      	ldr	r1, [pc, #616]	; (8013748 <tcp_output+0x294>)
 80134e0:	4898      	ldr	r0, [pc, #608]	; (8013744 <tcp_output+0x290>)
 80134e2:	f003 fd87 	bl	8016ff4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80134e6:	4b99      	ldr	r3, [pc, #612]	; (801374c <tcp_output+0x298>)
 80134e8:	681b      	ldr	r3, [r3, #0]
 80134ea:	687a      	ldr	r2, [r7, #4]
 80134ec:	429a      	cmp	r2, r3
 80134ee:	d101      	bne.n	80134f4 <tcp_output+0x40>
    return ERR_OK;
 80134f0:	2300      	movs	r3, #0
 80134f2:	e1ce      	b.n	8013892 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013500:	4293      	cmp	r3, r2
 8013502:	bf28      	it	cs
 8013504:	4613      	movcs	r3, r2
 8013506:	b29b      	uxth	r3, r3
 8013508:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801350e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8013510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013512:	2b00      	cmp	r3, #0
 8013514:	d10b      	bne.n	801352e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	8b5b      	ldrh	r3, [r3, #26]
 801351a:	f003 0302 	and.w	r3, r3, #2
 801351e:	2b00      	cmp	r3, #0
 8013520:	f000 81aa 	beq.w	8013878 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8013524:	6878      	ldr	r0, [r7, #4]
 8013526:	f000 fdcb 	bl	80140c0 <tcp_send_empty_ack>
 801352a:	4603      	mov	r3, r0
 801352c:	e1b1      	b.n	8013892 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801352e:	6879      	ldr	r1, [r7, #4]
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	3304      	adds	r3, #4
 8013534:	461a      	mov	r2, r3
 8013536:	6878      	ldr	r0, [r7, #4]
 8013538:	f7ff f824 	bl	8012584 <tcp_route>
 801353c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801353e:	697b      	ldr	r3, [r7, #20]
 8013540:	2b00      	cmp	r3, #0
 8013542:	d102      	bne.n	801354a <tcp_output+0x96>
    return ERR_RTE;
 8013544:	f06f 0303 	mvn.w	r3, #3
 8013548:	e1a3      	b.n	8013892 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	2b00      	cmp	r3, #0
 801354e:	d003      	beq.n	8013558 <tcp_output+0xa4>
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	681b      	ldr	r3, [r3, #0]
 8013554:	2b00      	cmp	r3, #0
 8013556:	d111      	bne.n	801357c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8013558:	697b      	ldr	r3, [r7, #20]
 801355a:	2b00      	cmp	r3, #0
 801355c:	d002      	beq.n	8013564 <tcp_output+0xb0>
 801355e:	697b      	ldr	r3, [r7, #20]
 8013560:	3304      	adds	r3, #4
 8013562:	e000      	b.n	8013566 <tcp_output+0xb2>
 8013564:	2300      	movs	r3, #0
 8013566:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8013568:	693b      	ldr	r3, [r7, #16]
 801356a:	2b00      	cmp	r3, #0
 801356c:	d102      	bne.n	8013574 <tcp_output+0xc0>
      return ERR_RTE;
 801356e:	f06f 0303 	mvn.w	r3, #3
 8013572:	e18e      	b.n	8013892 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8013574:	693b      	ldr	r3, [r7, #16]
 8013576:	681a      	ldr	r2, [r3, #0]
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801357e:	68db      	ldr	r3, [r3, #12]
 8013580:	685b      	ldr	r3, [r3, #4]
 8013582:	4618      	mov	r0, r3
 8013584:	f7f9 f8ab 	bl	800c6de <lwip_htonl>
 8013588:	4602      	mov	r2, r0
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801358e:	1ad3      	subs	r3, r2, r3
 8013590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013592:	8912      	ldrh	r2, [r2, #8]
 8013594:	4413      	add	r3, r2
 8013596:	69ba      	ldr	r2, [r7, #24]
 8013598:	429a      	cmp	r2, r3
 801359a:	d227      	bcs.n	80135ec <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80135a2:	461a      	mov	r2, r3
 80135a4:	69bb      	ldr	r3, [r7, #24]
 80135a6:	4293      	cmp	r3, r2
 80135a8:	d114      	bne.n	80135d4 <tcp_output+0x120>
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d110      	bne.n	80135d4 <tcp_output+0x120>
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d10b      	bne.n	80135d4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	2200      	movs	r2, #0
 80135c0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	2201      	movs	r2, #1
 80135c8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	2200      	movs	r2, #0
 80135d0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	8b5b      	ldrh	r3, [r3, #26]
 80135d8:	f003 0302 	and.w	r3, r3, #2
 80135dc:	2b00      	cmp	r3, #0
 80135de:	f000 814d 	beq.w	801387c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80135e2:	6878      	ldr	r0, [r7, #4]
 80135e4:	f000 fd6c 	bl	80140c0 <tcp_send_empty_ack>
 80135e8:	4603      	mov	r3, r0
 80135ea:	e152      	b.n	8013892 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	2200      	movs	r2, #0
 80135f0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80135f8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80135fa:	6a3b      	ldr	r3, [r7, #32]
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	f000 811c 	beq.w	801383a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8013602:	e002      	b.n	801360a <tcp_output+0x156>
 8013604:	6a3b      	ldr	r3, [r7, #32]
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	623b      	str	r3, [r7, #32]
 801360a:	6a3b      	ldr	r3, [r7, #32]
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	2b00      	cmp	r3, #0
 8013610:	d1f8      	bne.n	8013604 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8013612:	e112      	b.n	801383a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8013614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013616:	68db      	ldr	r3, [r3, #12]
 8013618:	899b      	ldrh	r3, [r3, #12]
 801361a:	b29b      	uxth	r3, r3
 801361c:	4618      	mov	r0, r3
 801361e:	f7f9 f849 	bl	800c6b4 <lwip_htons>
 8013622:	4603      	mov	r3, r0
 8013624:	b2db      	uxtb	r3, r3
 8013626:	f003 0304 	and.w	r3, r3, #4
 801362a:	2b00      	cmp	r3, #0
 801362c:	d006      	beq.n	801363c <tcp_output+0x188>
 801362e:	4b43      	ldr	r3, [pc, #268]	; (801373c <tcp_output+0x288>)
 8013630:	f240 5236 	movw	r2, #1334	; 0x536
 8013634:	4946      	ldr	r1, [pc, #280]	; (8013750 <tcp_output+0x29c>)
 8013636:	4843      	ldr	r0, [pc, #268]	; (8013744 <tcp_output+0x290>)
 8013638:	f003 fcdc 	bl	8016ff4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013640:	2b00      	cmp	r3, #0
 8013642:	d01f      	beq.n	8013684 <tcp_output+0x1d0>
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	8b5b      	ldrh	r3, [r3, #26]
 8013648:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801364c:	2b00      	cmp	r3, #0
 801364e:	d119      	bne.n	8013684 <tcp_output+0x1d0>
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013654:	2b00      	cmp	r3, #0
 8013656:	d00b      	beq.n	8013670 <tcp_output+0x1bc>
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	2b00      	cmp	r3, #0
 8013660:	d110      	bne.n	8013684 <tcp_output+0x1d0>
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013666:	891a      	ldrh	r2, [r3, #8]
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801366c:	429a      	cmp	r2, r3
 801366e:	d209      	bcs.n	8013684 <tcp_output+0x1d0>
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013676:	2b00      	cmp	r3, #0
 8013678:	d004      	beq.n	8013684 <tcp_output+0x1d0>
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013680:	2b08      	cmp	r3, #8
 8013682:	d901      	bls.n	8013688 <tcp_output+0x1d4>
 8013684:	2301      	movs	r3, #1
 8013686:	e000      	b.n	801368a <tcp_output+0x1d6>
 8013688:	2300      	movs	r3, #0
 801368a:	2b00      	cmp	r3, #0
 801368c:	d106      	bne.n	801369c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	8b5b      	ldrh	r3, [r3, #26]
 8013692:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013696:	2b00      	cmp	r3, #0
 8013698:	f000 80e4 	beq.w	8013864 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	7d1b      	ldrb	r3, [r3, #20]
 80136a0:	2b02      	cmp	r3, #2
 80136a2:	d00d      	beq.n	80136c0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80136a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136a6:	68db      	ldr	r3, [r3, #12]
 80136a8:	899b      	ldrh	r3, [r3, #12]
 80136aa:	b29c      	uxth	r4, r3
 80136ac:	2010      	movs	r0, #16
 80136ae:	f7f9 f801 	bl	800c6b4 <lwip_htons>
 80136b2:	4603      	mov	r3, r0
 80136b4:	461a      	mov	r2, r3
 80136b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136b8:	68db      	ldr	r3, [r3, #12]
 80136ba:	4322      	orrs	r2, r4
 80136bc:	b292      	uxth	r2, r2
 80136be:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80136c0:	697a      	ldr	r2, [r7, #20]
 80136c2:	6879      	ldr	r1, [r7, #4]
 80136c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80136c6:	f000 f909 	bl	80138dc <tcp_output_segment>
 80136ca:	4603      	mov	r3, r0
 80136cc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80136ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d009      	beq.n	80136ea <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	8b5b      	ldrh	r3, [r3, #26]
 80136da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80136de:	b29a      	uxth	r2, r3
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	835a      	strh	r2, [r3, #26]
      return err;
 80136e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80136e8:	e0d3      	b.n	8013892 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80136ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136ec:	681a      	ldr	r2, [r3, #0]
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	7d1b      	ldrb	r3, [r3, #20]
 80136f6:	2b02      	cmp	r3, #2
 80136f8:	d006      	beq.n	8013708 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	8b5b      	ldrh	r3, [r3, #26]
 80136fe:	f023 0303 	bic.w	r3, r3, #3
 8013702:	b29a      	uxth	r2, r3
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801370a:	68db      	ldr	r3, [r3, #12]
 801370c:	685b      	ldr	r3, [r3, #4]
 801370e:	4618      	mov	r0, r3
 8013710:	f7f8 ffe5 	bl	800c6de <lwip_htonl>
 8013714:	4604      	mov	r4, r0
 8013716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013718:	891b      	ldrh	r3, [r3, #8]
 801371a:	461d      	mov	r5, r3
 801371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801371e:	68db      	ldr	r3, [r3, #12]
 8013720:	899b      	ldrh	r3, [r3, #12]
 8013722:	b29b      	uxth	r3, r3
 8013724:	4618      	mov	r0, r3
 8013726:	f7f8 ffc5 	bl	800c6b4 <lwip_htons>
 801372a:	4603      	mov	r3, r0
 801372c:	b2db      	uxtb	r3, r3
 801372e:	f003 0303 	and.w	r3, r3, #3
 8013732:	2b00      	cmp	r3, #0
 8013734:	d00e      	beq.n	8013754 <tcp_output+0x2a0>
 8013736:	2301      	movs	r3, #1
 8013738:	e00d      	b.n	8013756 <tcp_output+0x2a2>
 801373a:	bf00      	nop
 801373c:	0801af34 	.word	0x0801af34
 8013740:	0801b478 	.word	0x0801b478
 8013744:	0801af88 	.word	0x0801af88
 8013748:	0801b490 	.word	0x0801b490
 801374c:	20016dd0 	.word	0x20016dd0
 8013750:	0801b4b8 	.word	0x0801b4b8
 8013754:	2300      	movs	r3, #0
 8013756:	442b      	add	r3, r5
 8013758:	4423      	add	r3, r4
 801375a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013760:	68bb      	ldr	r3, [r7, #8]
 8013762:	1ad3      	subs	r3, r2, r3
 8013764:	2b00      	cmp	r3, #0
 8013766:	da02      	bge.n	801376e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	68ba      	ldr	r2, [r7, #8]
 801376c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801376e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013770:	891b      	ldrh	r3, [r3, #8]
 8013772:	461c      	mov	r4, r3
 8013774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013776:	68db      	ldr	r3, [r3, #12]
 8013778:	899b      	ldrh	r3, [r3, #12]
 801377a:	b29b      	uxth	r3, r3
 801377c:	4618      	mov	r0, r3
 801377e:	f7f8 ff99 	bl	800c6b4 <lwip_htons>
 8013782:	4603      	mov	r3, r0
 8013784:	b2db      	uxtb	r3, r3
 8013786:	f003 0303 	and.w	r3, r3, #3
 801378a:	2b00      	cmp	r3, #0
 801378c:	d001      	beq.n	8013792 <tcp_output+0x2de>
 801378e:	2301      	movs	r3, #1
 8013790:	e000      	b.n	8013794 <tcp_output+0x2e0>
 8013792:	2300      	movs	r3, #0
 8013794:	4423      	add	r3, r4
 8013796:	2b00      	cmp	r3, #0
 8013798:	d049      	beq.n	801382e <tcp_output+0x37a>
      seg->next = NULL;
 801379a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801379c:	2200      	movs	r2, #0
 801379e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d105      	bne.n	80137b4 <tcp_output+0x300>
        pcb->unacked = seg;
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80137ac:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80137ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137b0:	623b      	str	r3, [r7, #32]
 80137b2:	e03f      	b.n	8013834 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80137b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137b6:	68db      	ldr	r3, [r3, #12]
 80137b8:	685b      	ldr	r3, [r3, #4]
 80137ba:	4618      	mov	r0, r3
 80137bc:	f7f8 ff8f 	bl	800c6de <lwip_htonl>
 80137c0:	4604      	mov	r4, r0
 80137c2:	6a3b      	ldr	r3, [r7, #32]
 80137c4:	68db      	ldr	r3, [r3, #12]
 80137c6:	685b      	ldr	r3, [r3, #4]
 80137c8:	4618      	mov	r0, r3
 80137ca:	f7f8 ff88 	bl	800c6de <lwip_htonl>
 80137ce:	4603      	mov	r3, r0
 80137d0:	1ae3      	subs	r3, r4, r3
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	da24      	bge.n	8013820 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	3370      	adds	r3, #112	; 0x70
 80137da:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80137dc:	e002      	b.n	80137e4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80137de:	69fb      	ldr	r3, [r7, #28]
 80137e0:	681b      	ldr	r3, [r3, #0]
 80137e2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80137e4:	69fb      	ldr	r3, [r7, #28]
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d011      	beq.n	8013810 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80137ec:	69fb      	ldr	r3, [r7, #28]
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	68db      	ldr	r3, [r3, #12]
 80137f2:	685b      	ldr	r3, [r3, #4]
 80137f4:	4618      	mov	r0, r3
 80137f6:	f7f8 ff72 	bl	800c6de <lwip_htonl>
 80137fa:	4604      	mov	r4, r0
 80137fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137fe:	68db      	ldr	r3, [r3, #12]
 8013800:	685b      	ldr	r3, [r3, #4]
 8013802:	4618      	mov	r0, r3
 8013804:	f7f8 ff6b 	bl	800c6de <lwip_htonl>
 8013808:	4603      	mov	r3, r0
 801380a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801380c:	2b00      	cmp	r3, #0
 801380e:	dbe6      	blt.n	80137de <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8013810:	69fb      	ldr	r3, [r7, #28]
 8013812:	681a      	ldr	r2, [r3, #0]
 8013814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013816:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8013818:	69fb      	ldr	r3, [r7, #28]
 801381a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801381c:	601a      	str	r2, [r3, #0]
 801381e:	e009      	b.n	8013834 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8013820:	6a3b      	ldr	r3, [r7, #32]
 8013822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013824:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8013826:	6a3b      	ldr	r3, [r7, #32]
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	623b      	str	r3, [r7, #32]
 801382c:	e002      	b.n	8013834 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801382e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013830:	f7fb feff 	bl	800f632 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013838:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801383c:	2b00      	cmp	r3, #0
 801383e:	d012      	beq.n	8013866 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8013840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013842:	68db      	ldr	r3, [r3, #12]
 8013844:	685b      	ldr	r3, [r3, #4]
 8013846:	4618      	mov	r0, r3
 8013848:	f7f8 ff49 	bl	800c6de <lwip_htonl>
 801384c:	4602      	mov	r2, r0
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013852:	1ad3      	subs	r3, r2, r3
 8013854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013856:	8912      	ldrh	r2, [r2, #8]
 8013858:	4413      	add	r3, r2
  while (seg != NULL &&
 801385a:	69ba      	ldr	r2, [r7, #24]
 801385c:	429a      	cmp	r2, r3
 801385e:	f4bf aed9 	bcs.w	8013614 <tcp_output+0x160>
 8013862:	e000      	b.n	8013866 <tcp_output+0x3b2>
      break;
 8013864:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801386a:	2b00      	cmp	r3, #0
 801386c:	d108      	bne.n	8013880 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	2200      	movs	r2, #0
 8013872:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8013876:	e004      	b.n	8013882 <tcp_output+0x3ce>
    goto output_done;
 8013878:	bf00      	nop
 801387a:	e002      	b.n	8013882 <tcp_output+0x3ce>
    goto output_done;
 801387c:	bf00      	nop
 801387e:	e000      	b.n	8013882 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8013880:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	8b5b      	ldrh	r3, [r3, #26]
 8013886:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801388a:	b29a      	uxth	r2, r3
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8013890:	2300      	movs	r3, #0
}
 8013892:	4618      	mov	r0, r3
 8013894:	3728      	adds	r7, #40	; 0x28
 8013896:	46bd      	mov	sp, r7
 8013898:	bdb0      	pop	{r4, r5, r7, pc}
 801389a:	bf00      	nop

0801389c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801389c:	b580      	push	{r7, lr}
 801389e:	b082      	sub	sp, #8
 80138a0:	af00      	add	r7, sp, #0
 80138a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d106      	bne.n	80138b8 <tcp_output_segment_busy+0x1c>
 80138aa:	4b09      	ldr	r3, [pc, #36]	; (80138d0 <tcp_output_segment_busy+0x34>)
 80138ac:	f240 529a 	movw	r2, #1434	; 0x59a
 80138b0:	4908      	ldr	r1, [pc, #32]	; (80138d4 <tcp_output_segment_busy+0x38>)
 80138b2:	4809      	ldr	r0, [pc, #36]	; (80138d8 <tcp_output_segment_busy+0x3c>)
 80138b4:	f003 fb9e 	bl	8016ff4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	685b      	ldr	r3, [r3, #4]
 80138bc:	7b9b      	ldrb	r3, [r3, #14]
 80138be:	2b01      	cmp	r3, #1
 80138c0:	d001      	beq.n	80138c6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80138c2:	2301      	movs	r3, #1
 80138c4:	e000      	b.n	80138c8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80138c6:	2300      	movs	r3, #0
}
 80138c8:	4618      	mov	r0, r3
 80138ca:	3708      	adds	r7, #8
 80138cc:	46bd      	mov	sp, r7
 80138ce:	bd80      	pop	{r7, pc}
 80138d0:	0801af34 	.word	0x0801af34
 80138d4:	0801b4d0 	.word	0x0801b4d0
 80138d8:	0801af88 	.word	0x0801af88

080138dc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80138dc:	b5b0      	push	{r4, r5, r7, lr}
 80138de:	b08c      	sub	sp, #48	; 0x30
 80138e0:	af04      	add	r7, sp, #16
 80138e2:	60f8      	str	r0, [r7, #12]
 80138e4:	60b9      	str	r1, [r7, #8]
 80138e6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d106      	bne.n	80138fc <tcp_output_segment+0x20>
 80138ee:	4b63      	ldr	r3, [pc, #396]	; (8013a7c <tcp_output_segment+0x1a0>)
 80138f0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80138f4:	4962      	ldr	r1, [pc, #392]	; (8013a80 <tcp_output_segment+0x1a4>)
 80138f6:	4863      	ldr	r0, [pc, #396]	; (8013a84 <tcp_output_segment+0x1a8>)
 80138f8:	f003 fb7c 	bl	8016ff4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80138fc:	68bb      	ldr	r3, [r7, #8]
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d106      	bne.n	8013910 <tcp_output_segment+0x34>
 8013902:	4b5e      	ldr	r3, [pc, #376]	; (8013a7c <tcp_output_segment+0x1a0>)
 8013904:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8013908:	495f      	ldr	r1, [pc, #380]	; (8013a88 <tcp_output_segment+0x1ac>)
 801390a:	485e      	ldr	r0, [pc, #376]	; (8013a84 <tcp_output_segment+0x1a8>)
 801390c:	f003 fb72 	bl	8016ff4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	2b00      	cmp	r3, #0
 8013914:	d106      	bne.n	8013924 <tcp_output_segment+0x48>
 8013916:	4b59      	ldr	r3, [pc, #356]	; (8013a7c <tcp_output_segment+0x1a0>)
 8013918:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801391c:	495b      	ldr	r1, [pc, #364]	; (8013a8c <tcp_output_segment+0x1b0>)
 801391e:	4859      	ldr	r0, [pc, #356]	; (8013a84 <tcp_output_segment+0x1a8>)
 8013920:	f003 fb68 	bl	8016ff4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8013924:	68f8      	ldr	r0, [r7, #12]
 8013926:	f7ff ffb9 	bl	801389c <tcp_output_segment_busy>
 801392a:	4603      	mov	r3, r0
 801392c:	2b00      	cmp	r3, #0
 801392e:	d001      	beq.n	8013934 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8013930:	2300      	movs	r3, #0
 8013932:	e09f      	b.n	8013a74 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013934:	68bb      	ldr	r3, [r7, #8]
 8013936:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	68dc      	ldr	r4, [r3, #12]
 801393c:	4610      	mov	r0, r2
 801393e:	f7f8 fece 	bl	800c6de <lwip_htonl>
 8013942:	4603      	mov	r3, r0
 8013944:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8013946:	68bb      	ldr	r3, [r7, #8]
 8013948:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	68dc      	ldr	r4, [r3, #12]
 801394e:	4610      	mov	r0, r2
 8013950:	f7f8 feb0 	bl	800c6b4 <lwip_htons>
 8013954:	4603      	mov	r3, r0
 8013956:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013958:	68bb      	ldr	r3, [r7, #8]
 801395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801395c:	68ba      	ldr	r2, [r7, #8]
 801395e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013960:	441a      	add	r2, r3
 8013962:	68bb      	ldr	r3, [r7, #8]
 8013964:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	68db      	ldr	r3, [r3, #12]
 801396a:	3314      	adds	r3, #20
 801396c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	7a9b      	ldrb	r3, [r3, #10]
 8013972:	f003 0301 	and.w	r3, r3, #1
 8013976:	2b00      	cmp	r3, #0
 8013978:	d015      	beq.n	80139a6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801397a:	68bb      	ldr	r3, [r7, #8]
 801397c:	3304      	adds	r3, #4
 801397e:	461a      	mov	r2, r3
 8013980:	6879      	ldr	r1, [r7, #4]
 8013982:	f44f 7006 	mov.w	r0, #536	; 0x218
 8013986:	f7fc fa37 	bl	800fdf8 <tcp_eff_send_mss_netif>
 801398a:	4603      	mov	r3, r0
 801398c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801398e:	8b7b      	ldrh	r3, [r7, #26]
 8013990:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8013994:	4618      	mov	r0, r3
 8013996:	f7f8 fea2 	bl	800c6de <lwip_htonl>
 801399a:	4602      	mov	r2, r0
 801399c:	69fb      	ldr	r3, [r7, #28]
 801399e:	601a      	str	r2, [r3, #0]
    opts += 1;
 80139a0:	69fb      	ldr	r3, [r7, #28]
 80139a2:	3304      	adds	r3, #4
 80139a4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80139a6:	68bb      	ldr	r3, [r7, #8]
 80139a8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	da02      	bge.n	80139b6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80139b0:	68bb      	ldr	r3, [r7, #8]
 80139b2:	2200      	movs	r2, #0
 80139b4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80139b6:	68bb      	ldr	r3, [r7, #8]
 80139b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d10c      	bne.n	80139d8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80139be:	4b34      	ldr	r3, [pc, #208]	; (8013a90 <tcp_output_segment+0x1b4>)
 80139c0:	681a      	ldr	r2, [r3, #0]
 80139c2:	68bb      	ldr	r3, [r7, #8]
 80139c4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	68db      	ldr	r3, [r3, #12]
 80139ca:	685b      	ldr	r3, [r3, #4]
 80139cc:	4618      	mov	r0, r3
 80139ce:	f7f8 fe86 	bl	800c6de <lwip_htonl>
 80139d2:	4602      	mov	r2, r0
 80139d4:	68bb      	ldr	r3, [r7, #8]
 80139d6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	68da      	ldr	r2, [r3, #12]
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	685b      	ldr	r3, [r3, #4]
 80139e0:	685b      	ldr	r3, [r3, #4]
 80139e2:	1ad3      	subs	r3, r2, r3
 80139e4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	685b      	ldr	r3, [r3, #4]
 80139ea:	8959      	ldrh	r1, [r3, #10]
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	685b      	ldr	r3, [r3, #4]
 80139f0:	8b3a      	ldrh	r2, [r7, #24]
 80139f2:	1a8a      	subs	r2, r1, r2
 80139f4:	b292      	uxth	r2, r2
 80139f6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	685b      	ldr	r3, [r3, #4]
 80139fc:	8919      	ldrh	r1, [r3, #8]
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	685b      	ldr	r3, [r3, #4]
 8013a02:	8b3a      	ldrh	r2, [r7, #24]
 8013a04:	1a8a      	subs	r2, r1, r2
 8013a06:	b292      	uxth	r2, r2
 8013a08:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	685b      	ldr	r3, [r3, #4]
 8013a0e:	68fa      	ldr	r2, [r7, #12]
 8013a10:	68d2      	ldr	r2, [r2, #12]
 8013a12:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	68db      	ldr	r3, [r3, #12]
 8013a18:	2200      	movs	r2, #0
 8013a1a:	741a      	strb	r2, [r3, #16]
 8013a1c:	2200      	movs	r2, #0
 8013a1e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	68db      	ldr	r3, [r3, #12]
 8013a24:	f103 0214 	add.w	r2, r3, #20
 8013a28:	68fb      	ldr	r3, [r7, #12]
 8013a2a:	7a9b      	ldrb	r3, [r3, #10]
 8013a2c:	009b      	lsls	r3, r3, #2
 8013a2e:	f003 0304 	and.w	r3, r3, #4
 8013a32:	4413      	add	r3, r2
 8013a34:	69fa      	ldr	r2, [r7, #28]
 8013a36:	429a      	cmp	r2, r3
 8013a38:	d006      	beq.n	8013a48 <tcp_output_segment+0x16c>
 8013a3a:	4b10      	ldr	r3, [pc, #64]	; (8013a7c <tcp_output_segment+0x1a0>)
 8013a3c:	f240 621c 	movw	r2, #1564	; 0x61c
 8013a40:	4914      	ldr	r1, [pc, #80]	; (8013a94 <tcp_output_segment+0x1b8>)
 8013a42:	4810      	ldr	r0, [pc, #64]	; (8013a84 <tcp_output_segment+0x1a8>)
 8013a44:	f003 fad6 	bl	8016ff4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	6858      	ldr	r0, [r3, #4]
 8013a4c:	68b9      	ldr	r1, [r7, #8]
 8013a4e:	68bb      	ldr	r3, [r7, #8]
 8013a50:	1d1c      	adds	r4, r3, #4
 8013a52:	68bb      	ldr	r3, [r7, #8]
 8013a54:	7add      	ldrb	r5, [r3, #11]
 8013a56:	68bb      	ldr	r3, [r7, #8]
 8013a58:	7a9b      	ldrb	r3, [r3, #10]
 8013a5a:	687a      	ldr	r2, [r7, #4]
 8013a5c:	9202      	str	r2, [sp, #8]
 8013a5e:	2206      	movs	r2, #6
 8013a60:	9201      	str	r2, [sp, #4]
 8013a62:	9300      	str	r3, [sp, #0]
 8013a64:	462b      	mov	r3, r5
 8013a66:	4622      	mov	r2, r4
 8013a68:	f002 fa36 	bl	8015ed8 <ip4_output_if>
 8013a6c:	4603      	mov	r3, r0
 8013a6e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8013a70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013a74:	4618      	mov	r0, r3
 8013a76:	3720      	adds	r7, #32
 8013a78:	46bd      	mov	sp, r7
 8013a7a:	bdb0      	pop	{r4, r5, r7, pc}
 8013a7c:	0801af34 	.word	0x0801af34
 8013a80:	0801b4f8 	.word	0x0801b4f8
 8013a84:	0801af88 	.word	0x0801af88
 8013a88:	0801b518 	.word	0x0801b518
 8013a8c:	0801b538 	.word	0x0801b538
 8013a90:	20016dc0 	.word	0x20016dc0
 8013a94:	0801b55c 	.word	0x0801b55c

08013a98 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013a98:	b5b0      	push	{r4, r5, r7, lr}
 8013a9a:	b084      	sub	sp, #16
 8013a9c:	af00      	add	r7, sp, #0
 8013a9e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d106      	bne.n	8013ab4 <tcp_rexmit_rto_prepare+0x1c>
 8013aa6:	4b31      	ldr	r3, [pc, #196]	; (8013b6c <tcp_rexmit_rto_prepare+0xd4>)
 8013aa8:	f240 6263 	movw	r2, #1635	; 0x663
 8013aac:	4930      	ldr	r1, [pc, #192]	; (8013b70 <tcp_rexmit_rto_prepare+0xd8>)
 8013aae:	4831      	ldr	r0, [pc, #196]	; (8013b74 <tcp_rexmit_rto_prepare+0xdc>)
 8013ab0:	f003 faa0 	bl	8016ff4 <iprintf>

  if (pcb->unacked == NULL) {
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d102      	bne.n	8013ac2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013abc:	f06f 0305 	mvn.w	r3, #5
 8013ac0:	e050      	b.n	8013b64 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ac6:	60fb      	str	r3, [r7, #12]
 8013ac8:	e00b      	b.n	8013ae2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8013aca:	68f8      	ldr	r0, [r7, #12]
 8013acc:	f7ff fee6 	bl	801389c <tcp_output_segment_busy>
 8013ad0:	4603      	mov	r3, r0
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d002      	beq.n	8013adc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8013ad6:	f06f 0305 	mvn.w	r3, #5
 8013ada:	e043      	b.n	8013b64 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	60fb      	str	r3, [r7, #12]
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d1ef      	bne.n	8013aca <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8013aea:	68f8      	ldr	r0, [r7, #12]
 8013aec:	f7ff fed6 	bl	801389c <tcp_output_segment_busy>
 8013af0:	4603      	mov	r3, r0
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d002      	beq.n	8013afc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8013af6:	f06f 0305 	mvn.w	r3, #5
 8013afa:	e033      	b.n	8013b64 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013b00:	68fb      	ldr	r3, [r7, #12]
 8013b02:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	2200      	movs	r2, #0
 8013b10:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	8b5b      	ldrh	r3, [r3, #26]
 8013b16:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013b1a:	b29a      	uxth	r2, r3
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	68db      	ldr	r3, [r3, #12]
 8013b24:	685b      	ldr	r3, [r3, #4]
 8013b26:	4618      	mov	r0, r3
 8013b28:	f7f8 fdd9 	bl	800c6de <lwip_htonl>
 8013b2c:	4604      	mov	r4, r0
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	891b      	ldrh	r3, [r3, #8]
 8013b32:	461d      	mov	r5, r3
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	68db      	ldr	r3, [r3, #12]
 8013b38:	899b      	ldrh	r3, [r3, #12]
 8013b3a:	b29b      	uxth	r3, r3
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	f7f8 fdb9 	bl	800c6b4 <lwip_htons>
 8013b42:	4603      	mov	r3, r0
 8013b44:	b2db      	uxtb	r3, r3
 8013b46:	f003 0303 	and.w	r3, r3, #3
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d001      	beq.n	8013b52 <tcp_rexmit_rto_prepare+0xba>
 8013b4e:	2301      	movs	r3, #1
 8013b50:	e000      	b.n	8013b54 <tcp_rexmit_rto_prepare+0xbc>
 8013b52:	2300      	movs	r3, #0
 8013b54:	442b      	add	r3, r5
 8013b56:	18e2      	adds	r2, r4, r3
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	2200      	movs	r2, #0
 8013b60:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8013b62:	2300      	movs	r3, #0
}
 8013b64:	4618      	mov	r0, r3
 8013b66:	3710      	adds	r7, #16
 8013b68:	46bd      	mov	sp, r7
 8013b6a:	bdb0      	pop	{r4, r5, r7, pc}
 8013b6c:	0801af34 	.word	0x0801af34
 8013b70:	0801b570 	.word	0x0801b570
 8013b74:	0801af88 	.word	0x0801af88

08013b78 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013b78:	b580      	push	{r7, lr}
 8013b7a:	b082      	sub	sp, #8
 8013b7c:	af00      	add	r7, sp, #0
 8013b7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d106      	bne.n	8013b94 <tcp_rexmit_rto_commit+0x1c>
 8013b86:	4b0d      	ldr	r3, [pc, #52]	; (8013bbc <tcp_rexmit_rto_commit+0x44>)
 8013b88:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013b8c:	490c      	ldr	r1, [pc, #48]	; (8013bc0 <tcp_rexmit_rto_commit+0x48>)
 8013b8e:	480d      	ldr	r0, [pc, #52]	; (8013bc4 <tcp_rexmit_rto_commit+0x4c>)
 8013b90:	f003 fa30 	bl	8016ff4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013b9a:	2bff      	cmp	r3, #255	; 0xff
 8013b9c:	d007      	beq.n	8013bae <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013ba4:	3301      	adds	r3, #1
 8013ba6:	b2da      	uxtb	r2, r3
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8013bae:	6878      	ldr	r0, [r7, #4]
 8013bb0:	f7ff fc80 	bl	80134b4 <tcp_output>
}
 8013bb4:	bf00      	nop
 8013bb6:	3708      	adds	r7, #8
 8013bb8:	46bd      	mov	sp, r7
 8013bba:	bd80      	pop	{r7, pc}
 8013bbc:	0801af34 	.word	0x0801af34
 8013bc0:	0801b594 	.word	0x0801b594
 8013bc4:	0801af88 	.word	0x0801af88

08013bc8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8013bc8:	b580      	push	{r7, lr}
 8013bca:	b082      	sub	sp, #8
 8013bcc:	af00      	add	r7, sp, #0
 8013bce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d106      	bne.n	8013be4 <tcp_rexmit_rto+0x1c>
 8013bd6:	4b0a      	ldr	r3, [pc, #40]	; (8013c00 <tcp_rexmit_rto+0x38>)
 8013bd8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8013bdc:	4909      	ldr	r1, [pc, #36]	; (8013c04 <tcp_rexmit_rto+0x3c>)
 8013bde:	480a      	ldr	r0, [pc, #40]	; (8013c08 <tcp_rexmit_rto+0x40>)
 8013be0:	f003 fa08 	bl	8016ff4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8013be4:	6878      	ldr	r0, [r7, #4]
 8013be6:	f7ff ff57 	bl	8013a98 <tcp_rexmit_rto_prepare>
 8013bea:	4603      	mov	r3, r0
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d102      	bne.n	8013bf6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8013bf0:	6878      	ldr	r0, [r7, #4]
 8013bf2:	f7ff ffc1 	bl	8013b78 <tcp_rexmit_rto_commit>
  }
}
 8013bf6:	bf00      	nop
 8013bf8:	3708      	adds	r7, #8
 8013bfa:	46bd      	mov	sp, r7
 8013bfc:	bd80      	pop	{r7, pc}
 8013bfe:	bf00      	nop
 8013c00:	0801af34 	.word	0x0801af34
 8013c04:	0801b5b8 	.word	0x0801b5b8
 8013c08:	0801af88 	.word	0x0801af88

08013c0c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013c0c:	b590      	push	{r4, r7, lr}
 8013c0e:	b085      	sub	sp, #20
 8013c10:	af00      	add	r7, sp, #0
 8013c12:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d106      	bne.n	8013c28 <tcp_rexmit+0x1c>
 8013c1a:	4b2f      	ldr	r3, [pc, #188]	; (8013cd8 <tcp_rexmit+0xcc>)
 8013c1c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8013c20:	492e      	ldr	r1, [pc, #184]	; (8013cdc <tcp_rexmit+0xd0>)
 8013c22:	482f      	ldr	r0, [pc, #188]	; (8013ce0 <tcp_rexmit+0xd4>)
 8013c24:	f003 f9e6 	bl	8016ff4 <iprintf>

  if (pcb->unacked == NULL) {
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d102      	bne.n	8013c36 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8013c30:	f06f 0305 	mvn.w	r3, #5
 8013c34:	e04c      	b.n	8013cd0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c3a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013c3c:	68b8      	ldr	r0, [r7, #8]
 8013c3e:	f7ff fe2d 	bl	801389c <tcp_output_segment_busy>
 8013c42:	4603      	mov	r3, r0
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d002      	beq.n	8013c4e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013c48:	f06f 0305 	mvn.w	r3, #5
 8013c4c:	e040      	b.n	8013cd0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8013c4e:	68bb      	ldr	r3, [r7, #8]
 8013c50:	681a      	ldr	r2, [r3, #0]
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	336c      	adds	r3, #108	; 0x6c
 8013c5a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013c5c:	e002      	b.n	8013c64 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8013c5e:	68fb      	ldr	r3, [r7, #12]
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013c64:	68fb      	ldr	r3, [r7, #12]
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d011      	beq.n	8013c90 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	68db      	ldr	r3, [r3, #12]
 8013c72:	685b      	ldr	r3, [r3, #4]
 8013c74:	4618      	mov	r0, r3
 8013c76:	f7f8 fd32 	bl	800c6de <lwip_htonl>
 8013c7a:	4604      	mov	r4, r0
 8013c7c:	68bb      	ldr	r3, [r7, #8]
 8013c7e:	68db      	ldr	r3, [r3, #12]
 8013c80:	685b      	ldr	r3, [r3, #4]
 8013c82:	4618      	mov	r0, r3
 8013c84:	f7f8 fd2b 	bl	800c6de <lwip_htonl>
 8013c88:	4603      	mov	r3, r0
 8013c8a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	dbe6      	blt.n	8013c5e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	681a      	ldr	r2, [r3, #0]
 8013c94:	68bb      	ldr	r3, [r7, #8]
 8013c96:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	68ba      	ldr	r2, [r7, #8]
 8013c9c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8013c9e:	68bb      	ldr	r3, [r7, #8]
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d103      	bne.n	8013cae <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	2200      	movs	r2, #0
 8013caa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013cb4:	2bff      	cmp	r3, #255	; 0xff
 8013cb6:	d007      	beq.n	8013cc8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013cbe:	3301      	adds	r3, #1
 8013cc0:	b2da      	uxtb	r2, r3
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	2200      	movs	r2, #0
 8013ccc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013cce:	2300      	movs	r3, #0
}
 8013cd0:	4618      	mov	r0, r3
 8013cd2:	3714      	adds	r7, #20
 8013cd4:	46bd      	mov	sp, r7
 8013cd6:	bd90      	pop	{r4, r7, pc}
 8013cd8:	0801af34 	.word	0x0801af34
 8013cdc:	0801b5d4 	.word	0x0801b5d4
 8013ce0:	0801af88 	.word	0x0801af88

08013ce4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013ce4:	b580      	push	{r7, lr}
 8013ce6:	b082      	sub	sp, #8
 8013ce8:	af00      	add	r7, sp, #0
 8013cea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d106      	bne.n	8013d00 <tcp_rexmit_fast+0x1c>
 8013cf2:	4b2a      	ldr	r3, [pc, #168]	; (8013d9c <tcp_rexmit_fast+0xb8>)
 8013cf4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8013cf8:	4929      	ldr	r1, [pc, #164]	; (8013da0 <tcp_rexmit_fast+0xbc>)
 8013cfa:	482a      	ldr	r0, [pc, #168]	; (8013da4 <tcp_rexmit_fast+0xc0>)
 8013cfc:	f003 f97a 	bl	8016ff4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d044      	beq.n	8013d92 <tcp_rexmit_fast+0xae>
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	8b5b      	ldrh	r3, [r3, #26]
 8013d0c:	f003 0304 	and.w	r3, r3, #4
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d13e      	bne.n	8013d92 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013d14:	6878      	ldr	r0, [r7, #4]
 8013d16:	f7ff ff79 	bl	8013c0c <tcp_rexmit>
 8013d1a:	4603      	mov	r3, r0
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d138      	bne.n	8013d92 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013d2c:	4293      	cmp	r3, r2
 8013d2e:	bf28      	it	cs
 8013d30:	4613      	movcs	r3, r2
 8013d32:	b29b      	uxth	r3, r3
 8013d34:	0fda      	lsrs	r2, r3, #31
 8013d36:	4413      	add	r3, r2
 8013d38:	105b      	asrs	r3, r3, #1
 8013d3a:	b29a      	uxth	r2, r3
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013d48:	461a      	mov	r2, r3
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d4e:	005b      	lsls	r3, r3, #1
 8013d50:	429a      	cmp	r2, r3
 8013d52:	d206      	bcs.n	8013d62 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d58:	005b      	lsls	r3, r3, #1
 8013d5a:	b29a      	uxth	r2, r3
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d6c:	4619      	mov	r1, r3
 8013d6e:	0049      	lsls	r1, r1, #1
 8013d70:	440b      	add	r3, r1
 8013d72:	b29b      	uxth	r3, r3
 8013d74:	4413      	add	r3, r2
 8013d76:	b29a      	uxth	r2, r3
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	8b5b      	ldrh	r3, [r3, #26]
 8013d82:	f043 0304 	orr.w	r3, r3, #4
 8013d86:	b29a      	uxth	r2, r3
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	2200      	movs	r2, #0
 8013d90:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8013d92:	bf00      	nop
 8013d94:	3708      	adds	r7, #8
 8013d96:	46bd      	mov	sp, r7
 8013d98:	bd80      	pop	{r7, pc}
 8013d9a:	bf00      	nop
 8013d9c:	0801af34 	.word	0x0801af34
 8013da0:	0801b5ec 	.word	0x0801b5ec
 8013da4:	0801af88 	.word	0x0801af88

08013da8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013da8:	b580      	push	{r7, lr}
 8013daa:	b086      	sub	sp, #24
 8013dac:	af00      	add	r7, sp, #0
 8013dae:	60f8      	str	r0, [r7, #12]
 8013db0:	607b      	str	r3, [r7, #4]
 8013db2:	460b      	mov	r3, r1
 8013db4:	817b      	strh	r3, [r7, #10]
 8013db6:	4613      	mov	r3, r2
 8013db8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013dba:	897a      	ldrh	r2, [r7, #10]
 8013dbc:	893b      	ldrh	r3, [r7, #8]
 8013dbe:	4413      	add	r3, r2
 8013dc0:	b29b      	uxth	r3, r3
 8013dc2:	3314      	adds	r3, #20
 8013dc4:	b29b      	uxth	r3, r3
 8013dc6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013dca:	4619      	mov	r1, r3
 8013dcc:	2022      	movs	r0, #34	; 0x22
 8013dce:	f7f9 fd1f 	bl	800d810 <pbuf_alloc>
 8013dd2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013dd4:	697b      	ldr	r3, [r7, #20]
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d04d      	beq.n	8013e76 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013dda:	897b      	ldrh	r3, [r7, #10]
 8013ddc:	3313      	adds	r3, #19
 8013dde:	697a      	ldr	r2, [r7, #20]
 8013de0:	8952      	ldrh	r2, [r2, #10]
 8013de2:	4293      	cmp	r3, r2
 8013de4:	db06      	blt.n	8013df4 <tcp_output_alloc_header_common+0x4c>
 8013de6:	4b26      	ldr	r3, [pc, #152]	; (8013e80 <tcp_output_alloc_header_common+0xd8>)
 8013de8:	f240 7223 	movw	r2, #1827	; 0x723
 8013dec:	4925      	ldr	r1, [pc, #148]	; (8013e84 <tcp_output_alloc_header_common+0xdc>)
 8013dee:	4826      	ldr	r0, [pc, #152]	; (8013e88 <tcp_output_alloc_header_common+0xe0>)
 8013df0:	f003 f900 	bl	8016ff4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013df4:	697b      	ldr	r3, [r7, #20]
 8013df6:	685b      	ldr	r3, [r3, #4]
 8013df8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013dfa:	8c3b      	ldrh	r3, [r7, #32]
 8013dfc:	4618      	mov	r0, r3
 8013dfe:	f7f8 fc59 	bl	800c6b4 <lwip_htons>
 8013e02:	4603      	mov	r3, r0
 8013e04:	461a      	mov	r2, r3
 8013e06:	693b      	ldr	r3, [r7, #16]
 8013e08:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013e0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013e0c:	4618      	mov	r0, r3
 8013e0e:	f7f8 fc51 	bl	800c6b4 <lwip_htons>
 8013e12:	4603      	mov	r3, r0
 8013e14:	461a      	mov	r2, r3
 8013e16:	693b      	ldr	r3, [r7, #16]
 8013e18:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013e1a:	693b      	ldr	r3, [r7, #16]
 8013e1c:	687a      	ldr	r2, [r7, #4]
 8013e1e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013e20:	68f8      	ldr	r0, [r7, #12]
 8013e22:	f7f8 fc5c 	bl	800c6de <lwip_htonl>
 8013e26:	4602      	mov	r2, r0
 8013e28:	693b      	ldr	r3, [r7, #16]
 8013e2a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013e2c:	897b      	ldrh	r3, [r7, #10]
 8013e2e:	089b      	lsrs	r3, r3, #2
 8013e30:	b29b      	uxth	r3, r3
 8013e32:	3305      	adds	r3, #5
 8013e34:	b29b      	uxth	r3, r3
 8013e36:	031b      	lsls	r3, r3, #12
 8013e38:	b29a      	uxth	r2, r3
 8013e3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013e3e:	b29b      	uxth	r3, r3
 8013e40:	4313      	orrs	r3, r2
 8013e42:	b29b      	uxth	r3, r3
 8013e44:	4618      	mov	r0, r3
 8013e46:	f7f8 fc35 	bl	800c6b4 <lwip_htons>
 8013e4a:	4603      	mov	r3, r0
 8013e4c:	461a      	mov	r2, r3
 8013e4e:	693b      	ldr	r3, [r7, #16]
 8013e50:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8013e52:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013e54:	4618      	mov	r0, r3
 8013e56:	f7f8 fc2d 	bl	800c6b4 <lwip_htons>
 8013e5a:	4603      	mov	r3, r0
 8013e5c:	461a      	mov	r2, r3
 8013e5e:	693b      	ldr	r3, [r7, #16]
 8013e60:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8013e62:	693b      	ldr	r3, [r7, #16]
 8013e64:	2200      	movs	r2, #0
 8013e66:	741a      	strb	r2, [r3, #16]
 8013e68:	2200      	movs	r2, #0
 8013e6a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013e6c:	693b      	ldr	r3, [r7, #16]
 8013e6e:	2200      	movs	r2, #0
 8013e70:	749a      	strb	r2, [r3, #18]
 8013e72:	2200      	movs	r2, #0
 8013e74:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8013e76:	697b      	ldr	r3, [r7, #20]
}
 8013e78:	4618      	mov	r0, r3
 8013e7a:	3718      	adds	r7, #24
 8013e7c:	46bd      	mov	sp, r7
 8013e7e:	bd80      	pop	{r7, pc}
 8013e80:	0801af34 	.word	0x0801af34
 8013e84:	0801b60c 	.word	0x0801b60c
 8013e88:	0801af88 	.word	0x0801af88

08013e8c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013e8c:	b5b0      	push	{r4, r5, r7, lr}
 8013e8e:	b08a      	sub	sp, #40	; 0x28
 8013e90:	af04      	add	r7, sp, #16
 8013e92:	60f8      	str	r0, [r7, #12]
 8013e94:	607b      	str	r3, [r7, #4]
 8013e96:	460b      	mov	r3, r1
 8013e98:	817b      	strh	r3, [r7, #10]
 8013e9a:	4613      	mov	r3, r2
 8013e9c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8013e9e:	68fb      	ldr	r3, [r7, #12]
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d106      	bne.n	8013eb2 <tcp_output_alloc_header+0x26>
 8013ea4:	4b15      	ldr	r3, [pc, #84]	; (8013efc <tcp_output_alloc_header+0x70>)
 8013ea6:	f240 7242 	movw	r2, #1858	; 0x742
 8013eaa:	4915      	ldr	r1, [pc, #84]	; (8013f00 <tcp_output_alloc_header+0x74>)
 8013eac:	4815      	ldr	r0, [pc, #84]	; (8013f04 <tcp_output_alloc_header+0x78>)
 8013eae:	f003 f8a1 	bl	8016ff4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	8adb      	ldrh	r3, [r3, #22]
 8013eba:	68fa      	ldr	r2, [r7, #12]
 8013ebc:	8b12      	ldrh	r2, [r2, #24]
 8013ebe:	68f9      	ldr	r1, [r7, #12]
 8013ec0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8013ec2:	893d      	ldrh	r5, [r7, #8]
 8013ec4:	897c      	ldrh	r4, [r7, #10]
 8013ec6:	9103      	str	r1, [sp, #12]
 8013ec8:	2110      	movs	r1, #16
 8013eca:	9102      	str	r1, [sp, #8]
 8013ecc:	9201      	str	r2, [sp, #4]
 8013ece:	9300      	str	r3, [sp, #0]
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	462a      	mov	r2, r5
 8013ed4:	4621      	mov	r1, r4
 8013ed6:	f7ff ff67 	bl	8013da8 <tcp_output_alloc_header_common>
 8013eda:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013edc:	697b      	ldr	r3, [r7, #20]
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d006      	beq.n	8013ef0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ee6:	68fa      	ldr	r2, [r7, #12]
 8013ee8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013eea:	441a      	add	r2, r3
 8013eec:	68fb      	ldr	r3, [r7, #12]
 8013eee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8013ef0:	697b      	ldr	r3, [r7, #20]
}
 8013ef2:	4618      	mov	r0, r3
 8013ef4:	3718      	adds	r7, #24
 8013ef6:	46bd      	mov	sp, r7
 8013ef8:	bdb0      	pop	{r4, r5, r7, pc}
 8013efa:	bf00      	nop
 8013efc:	0801af34 	.word	0x0801af34
 8013f00:	0801b63c 	.word	0x0801b63c
 8013f04:	0801af88 	.word	0x0801af88

08013f08 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013f08:	b580      	push	{r7, lr}
 8013f0a:	b088      	sub	sp, #32
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	60f8      	str	r0, [r7, #12]
 8013f10:	60b9      	str	r1, [r7, #8]
 8013f12:	4611      	mov	r1, r2
 8013f14:	461a      	mov	r2, r3
 8013f16:	460b      	mov	r3, r1
 8013f18:	71fb      	strb	r3, [r7, #7]
 8013f1a:	4613      	mov	r3, r2
 8013f1c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8013f1e:	2300      	movs	r3, #0
 8013f20:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8013f22:	68bb      	ldr	r3, [r7, #8]
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d106      	bne.n	8013f36 <tcp_output_fill_options+0x2e>
 8013f28:	4b13      	ldr	r3, [pc, #76]	; (8013f78 <tcp_output_fill_options+0x70>)
 8013f2a:	f240 7256 	movw	r2, #1878	; 0x756
 8013f2e:	4913      	ldr	r1, [pc, #76]	; (8013f7c <tcp_output_fill_options+0x74>)
 8013f30:	4813      	ldr	r0, [pc, #76]	; (8013f80 <tcp_output_fill_options+0x78>)
 8013f32:	f003 f85f 	bl	8016ff4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8013f36:	68bb      	ldr	r3, [r7, #8]
 8013f38:	685b      	ldr	r3, [r3, #4]
 8013f3a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013f3c:	69bb      	ldr	r3, [r7, #24]
 8013f3e:	3314      	adds	r3, #20
 8013f40:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8013f42:	69bb      	ldr	r3, [r7, #24]
 8013f44:	f103 0214 	add.w	r2, r3, #20
 8013f48:	8bfb      	ldrh	r3, [r7, #30]
 8013f4a:	009b      	lsls	r3, r3, #2
 8013f4c:	4619      	mov	r1, r3
 8013f4e:	79fb      	ldrb	r3, [r7, #7]
 8013f50:	009b      	lsls	r3, r3, #2
 8013f52:	f003 0304 	and.w	r3, r3, #4
 8013f56:	440b      	add	r3, r1
 8013f58:	4413      	add	r3, r2
 8013f5a:	697a      	ldr	r2, [r7, #20]
 8013f5c:	429a      	cmp	r2, r3
 8013f5e:	d006      	beq.n	8013f6e <tcp_output_fill_options+0x66>
 8013f60:	4b05      	ldr	r3, [pc, #20]	; (8013f78 <tcp_output_fill_options+0x70>)
 8013f62:	f240 7275 	movw	r2, #1909	; 0x775
 8013f66:	4907      	ldr	r1, [pc, #28]	; (8013f84 <tcp_output_fill_options+0x7c>)
 8013f68:	4805      	ldr	r0, [pc, #20]	; (8013f80 <tcp_output_fill_options+0x78>)
 8013f6a:	f003 f843 	bl	8016ff4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8013f6e:	bf00      	nop
 8013f70:	3720      	adds	r7, #32
 8013f72:	46bd      	mov	sp, r7
 8013f74:	bd80      	pop	{r7, pc}
 8013f76:	bf00      	nop
 8013f78:	0801af34 	.word	0x0801af34
 8013f7c:	0801b664 	.word	0x0801b664
 8013f80:	0801af88 	.word	0x0801af88
 8013f84:	0801b55c 	.word	0x0801b55c

08013f88 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8013f88:	b580      	push	{r7, lr}
 8013f8a:	b08a      	sub	sp, #40	; 0x28
 8013f8c:	af04      	add	r7, sp, #16
 8013f8e:	60f8      	str	r0, [r7, #12]
 8013f90:	60b9      	str	r1, [r7, #8]
 8013f92:	607a      	str	r2, [r7, #4]
 8013f94:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8013f96:	68bb      	ldr	r3, [r7, #8]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d106      	bne.n	8013faa <tcp_output_control_segment+0x22>
 8013f9c:	4b1c      	ldr	r3, [pc, #112]	; (8014010 <tcp_output_control_segment+0x88>)
 8013f9e:	f240 7287 	movw	r2, #1927	; 0x787
 8013fa2:	491c      	ldr	r1, [pc, #112]	; (8014014 <tcp_output_control_segment+0x8c>)
 8013fa4:	481c      	ldr	r0, [pc, #112]	; (8014018 <tcp_output_control_segment+0x90>)
 8013fa6:	f003 f825 	bl	8016ff4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8013faa:	683a      	ldr	r2, [r7, #0]
 8013fac:	6879      	ldr	r1, [r7, #4]
 8013fae:	68f8      	ldr	r0, [r7, #12]
 8013fb0:	f7fe fae8 	bl	8012584 <tcp_route>
 8013fb4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8013fb6:	693b      	ldr	r3, [r7, #16]
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d102      	bne.n	8013fc2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013fbc:	23fc      	movs	r3, #252	; 0xfc
 8013fbe:	75fb      	strb	r3, [r7, #23]
 8013fc0:	e01c      	b.n	8013ffc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8013fc2:	68fb      	ldr	r3, [r7, #12]
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d006      	beq.n	8013fd6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013fc8:	68fb      	ldr	r3, [r7, #12]
 8013fca:	7adb      	ldrb	r3, [r3, #11]
 8013fcc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8013fce:	68fb      	ldr	r3, [r7, #12]
 8013fd0:	7a9b      	ldrb	r3, [r3, #10]
 8013fd2:	757b      	strb	r3, [r7, #21]
 8013fd4:	e003      	b.n	8013fde <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8013fd6:	23ff      	movs	r3, #255	; 0xff
 8013fd8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8013fda:	2300      	movs	r3, #0
 8013fdc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8013fde:	7dba      	ldrb	r2, [r7, #22]
 8013fe0:	693b      	ldr	r3, [r7, #16]
 8013fe2:	9302      	str	r3, [sp, #8]
 8013fe4:	2306      	movs	r3, #6
 8013fe6:	9301      	str	r3, [sp, #4]
 8013fe8:	7d7b      	ldrb	r3, [r7, #21]
 8013fea:	9300      	str	r3, [sp, #0]
 8013fec:	4613      	mov	r3, r2
 8013fee:	683a      	ldr	r2, [r7, #0]
 8013ff0:	6879      	ldr	r1, [r7, #4]
 8013ff2:	68b8      	ldr	r0, [r7, #8]
 8013ff4:	f001 ff70 	bl	8015ed8 <ip4_output_if>
 8013ff8:	4603      	mov	r3, r0
 8013ffa:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013ffc:	68b8      	ldr	r0, [r7, #8]
 8013ffe:	f7f9 feeb 	bl	800ddd8 <pbuf_free>
  return err;
 8014002:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014006:	4618      	mov	r0, r3
 8014008:	3718      	adds	r7, #24
 801400a:	46bd      	mov	sp, r7
 801400c:	bd80      	pop	{r7, pc}
 801400e:	bf00      	nop
 8014010:	0801af34 	.word	0x0801af34
 8014014:	0801b68c 	.word	0x0801b68c
 8014018:	0801af88 	.word	0x0801af88

0801401c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801401c:	b590      	push	{r4, r7, lr}
 801401e:	b08b      	sub	sp, #44	; 0x2c
 8014020:	af04      	add	r7, sp, #16
 8014022:	60f8      	str	r0, [r7, #12]
 8014024:	60b9      	str	r1, [r7, #8]
 8014026:	607a      	str	r2, [r7, #4]
 8014028:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801402a:	683b      	ldr	r3, [r7, #0]
 801402c:	2b00      	cmp	r3, #0
 801402e:	d106      	bne.n	801403e <tcp_rst+0x22>
 8014030:	4b1f      	ldr	r3, [pc, #124]	; (80140b0 <tcp_rst+0x94>)
 8014032:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8014036:	491f      	ldr	r1, [pc, #124]	; (80140b4 <tcp_rst+0x98>)
 8014038:	481f      	ldr	r0, [pc, #124]	; (80140b8 <tcp_rst+0x9c>)
 801403a:	f002 ffdb 	bl	8016ff4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801403e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014040:	2b00      	cmp	r3, #0
 8014042:	d106      	bne.n	8014052 <tcp_rst+0x36>
 8014044:	4b1a      	ldr	r3, [pc, #104]	; (80140b0 <tcp_rst+0x94>)
 8014046:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801404a:	491c      	ldr	r1, [pc, #112]	; (80140bc <tcp_rst+0xa0>)
 801404c:	481a      	ldr	r0, [pc, #104]	; (80140b8 <tcp_rst+0x9c>)
 801404e:	f002 ffd1 	bl	8016ff4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014052:	2300      	movs	r3, #0
 8014054:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8014056:	f246 0308 	movw	r3, #24584	; 0x6008
 801405a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801405c:	7dfb      	ldrb	r3, [r7, #23]
 801405e:	b29c      	uxth	r4, r3
 8014060:	68b8      	ldr	r0, [r7, #8]
 8014062:	f7f8 fb3c 	bl	800c6de <lwip_htonl>
 8014066:	4602      	mov	r2, r0
 8014068:	8abb      	ldrh	r3, [r7, #20]
 801406a:	9303      	str	r3, [sp, #12]
 801406c:	2314      	movs	r3, #20
 801406e:	9302      	str	r3, [sp, #8]
 8014070:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014072:	9301      	str	r3, [sp, #4]
 8014074:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014076:	9300      	str	r3, [sp, #0]
 8014078:	4613      	mov	r3, r2
 801407a:	2200      	movs	r2, #0
 801407c:	4621      	mov	r1, r4
 801407e:	6878      	ldr	r0, [r7, #4]
 8014080:	f7ff fe92 	bl	8013da8 <tcp_output_alloc_header_common>
 8014084:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8014086:	693b      	ldr	r3, [r7, #16]
 8014088:	2b00      	cmp	r3, #0
 801408a:	d00c      	beq.n	80140a6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801408c:	7dfb      	ldrb	r3, [r7, #23]
 801408e:	2200      	movs	r2, #0
 8014090:	6939      	ldr	r1, [r7, #16]
 8014092:	68f8      	ldr	r0, [r7, #12]
 8014094:	f7ff ff38 	bl	8013f08 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8014098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801409a:	683a      	ldr	r2, [r7, #0]
 801409c:	6939      	ldr	r1, [r7, #16]
 801409e:	68f8      	ldr	r0, [r7, #12]
 80140a0:	f7ff ff72 	bl	8013f88 <tcp_output_control_segment>
 80140a4:	e000      	b.n	80140a8 <tcp_rst+0x8c>
    return;
 80140a6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80140a8:	371c      	adds	r7, #28
 80140aa:	46bd      	mov	sp, r7
 80140ac:	bd90      	pop	{r4, r7, pc}
 80140ae:	bf00      	nop
 80140b0:	0801af34 	.word	0x0801af34
 80140b4:	0801b6b8 	.word	0x0801b6b8
 80140b8:	0801af88 	.word	0x0801af88
 80140bc:	0801b6d4 	.word	0x0801b6d4

080140c0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80140c0:	b590      	push	{r4, r7, lr}
 80140c2:	b087      	sub	sp, #28
 80140c4:	af00      	add	r7, sp, #0
 80140c6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80140c8:	2300      	movs	r3, #0
 80140ca:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80140cc:	2300      	movs	r3, #0
 80140ce:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d106      	bne.n	80140e4 <tcp_send_empty_ack+0x24>
 80140d6:	4b28      	ldr	r3, [pc, #160]	; (8014178 <tcp_send_empty_ack+0xb8>)
 80140d8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80140dc:	4927      	ldr	r1, [pc, #156]	; (801417c <tcp_send_empty_ack+0xbc>)
 80140de:	4828      	ldr	r0, [pc, #160]	; (8014180 <tcp_send_empty_ack+0xc0>)
 80140e0:	f002 ff88 	bl	8016ff4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80140e4:	7dfb      	ldrb	r3, [r7, #23]
 80140e6:	009b      	lsls	r3, r3, #2
 80140e8:	b2db      	uxtb	r3, r3
 80140ea:	f003 0304 	and.w	r3, r3, #4
 80140ee:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80140f0:	7d7b      	ldrb	r3, [r7, #21]
 80140f2:	b29c      	uxth	r4, r3
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80140f8:	4618      	mov	r0, r3
 80140fa:	f7f8 faf0 	bl	800c6de <lwip_htonl>
 80140fe:	4603      	mov	r3, r0
 8014100:	2200      	movs	r2, #0
 8014102:	4621      	mov	r1, r4
 8014104:	6878      	ldr	r0, [r7, #4]
 8014106:	f7ff fec1 	bl	8013e8c <tcp_output_alloc_header>
 801410a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801410c:	693b      	ldr	r3, [r7, #16]
 801410e:	2b00      	cmp	r3, #0
 8014110:	d109      	bne.n	8014126 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	8b5b      	ldrh	r3, [r3, #26]
 8014116:	f043 0303 	orr.w	r3, r3, #3
 801411a:	b29a      	uxth	r2, r3
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014120:	f06f 0301 	mvn.w	r3, #1
 8014124:	e023      	b.n	801416e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8014126:	7dbb      	ldrb	r3, [r7, #22]
 8014128:	7dfa      	ldrb	r2, [r7, #23]
 801412a:	6939      	ldr	r1, [r7, #16]
 801412c:	6878      	ldr	r0, [r7, #4]
 801412e:	f7ff feeb 	bl	8013f08 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014132:	687a      	ldr	r2, [r7, #4]
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	3304      	adds	r3, #4
 8014138:	6939      	ldr	r1, [r7, #16]
 801413a:	6878      	ldr	r0, [r7, #4]
 801413c:	f7ff ff24 	bl	8013f88 <tcp_output_control_segment>
 8014140:	4603      	mov	r3, r0
 8014142:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014144:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d007      	beq.n	801415c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	8b5b      	ldrh	r3, [r3, #26]
 8014150:	f043 0303 	orr.w	r3, r3, #3
 8014154:	b29a      	uxth	r2, r3
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	835a      	strh	r2, [r3, #26]
 801415a:	e006      	b.n	801416a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	8b5b      	ldrh	r3, [r3, #26]
 8014160:	f023 0303 	bic.w	r3, r3, #3
 8014164:	b29a      	uxth	r2, r3
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801416a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801416e:	4618      	mov	r0, r3
 8014170:	371c      	adds	r7, #28
 8014172:	46bd      	mov	sp, r7
 8014174:	bd90      	pop	{r4, r7, pc}
 8014176:	bf00      	nop
 8014178:	0801af34 	.word	0x0801af34
 801417c:	0801b6f0 	.word	0x0801b6f0
 8014180:	0801af88 	.word	0x0801af88

08014184 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014184:	b590      	push	{r4, r7, lr}
 8014186:	b087      	sub	sp, #28
 8014188:	af00      	add	r7, sp, #0
 801418a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801418c:	2300      	movs	r3, #0
 801418e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	2b00      	cmp	r3, #0
 8014194:	d106      	bne.n	80141a4 <tcp_keepalive+0x20>
 8014196:	4b18      	ldr	r3, [pc, #96]	; (80141f8 <tcp_keepalive+0x74>)
 8014198:	f640 0224 	movw	r2, #2084	; 0x824
 801419c:	4917      	ldr	r1, [pc, #92]	; (80141fc <tcp_keepalive+0x78>)
 801419e:	4818      	ldr	r0, [pc, #96]	; (8014200 <tcp_keepalive+0x7c>)
 80141a0:	f002 ff28 	bl	8016ff4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80141a4:	7dfb      	ldrb	r3, [r7, #23]
 80141a6:	b29c      	uxth	r4, r3
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80141ac:	3b01      	subs	r3, #1
 80141ae:	4618      	mov	r0, r3
 80141b0:	f7f8 fa95 	bl	800c6de <lwip_htonl>
 80141b4:	4603      	mov	r3, r0
 80141b6:	2200      	movs	r2, #0
 80141b8:	4621      	mov	r1, r4
 80141ba:	6878      	ldr	r0, [r7, #4]
 80141bc:	f7ff fe66 	bl	8013e8c <tcp_output_alloc_header>
 80141c0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80141c2:	693b      	ldr	r3, [r7, #16]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d102      	bne.n	80141ce <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80141c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80141cc:	e010      	b.n	80141f0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80141ce:	7dfb      	ldrb	r3, [r7, #23]
 80141d0:	2200      	movs	r2, #0
 80141d2:	6939      	ldr	r1, [r7, #16]
 80141d4:	6878      	ldr	r0, [r7, #4]
 80141d6:	f7ff fe97 	bl	8013f08 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80141da:	687a      	ldr	r2, [r7, #4]
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	3304      	adds	r3, #4
 80141e0:	6939      	ldr	r1, [r7, #16]
 80141e2:	6878      	ldr	r0, [r7, #4]
 80141e4:	f7ff fed0 	bl	8013f88 <tcp_output_control_segment>
 80141e8:	4603      	mov	r3, r0
 80141ea:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80141ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80141f0:	4618      	mov	r0, r3
 80141f2:	371c      	adds	r7, #28
 80141f4:	46bd      	mov	sp, r7
 80141f6:	bd90      	pop	{r4, r7, pc}
 80141f8:	0801af34 	.word	0x0801af34
 80141fc:	0801b710 	.word	0x0801b710
 8014200:	0801af88 	.word	0x0801af88

08014204 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014204:	b590      	push	{r4, r7, lr}
 8014206:	b08b      	sub	sp, #44	; 0x2c
 8014208:	af00      	add	r7, sp, #0
 801420a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801420c:	2300      	movs	r3, #0
 801420e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	2b00      	cmp	r3, #0
 8014216:	d106      	bne.n	8014226 <tcp_zero_window_probe+0x22>
 8014218:	4b4c      	ldr	r3, [pc, #304]	; (801434c <tcp_zero_window_probe+0x148>)
 801421a:	f640 024f 	movw	r2, #2127	; 0x84f
 801421e:	494c      	ldr	r1, [pc, #304]	; (8014350 <tcp_zero_window_probe+0x14c>)
 8014220:	484c      	ldr	r0, [pc, #304]	; (8014354 <tcp_zero_window_probe+0x150>)
 8014222:	f002 fee7 	bl	8016ff4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801422a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801422c:	6a3b      	ldr	r3, [r7, #32]
 801422e:	2b00      	cmp	r3, #0
 8014230:	d101      	bne.n	8014236 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8014232:	2300      	movs	r3, #0
 8014234:	e086      	b.n	8014344 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801423c:	2bff      	cmp	r3, #255	; 0xff
 801423e:	d007      	beq.n	8014250 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014246:	3301      	adds	r3, #1
 8014248:	b2da      	uxtb	r2, r3
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014250:	6a3b      	ldr	r3, [r7, #32]
 8014252:	68db      	ldr	r3, [r3, #12]
 8014254:	899b      	ldrh	r3, [r3, #12]
 8014256:	b29b      	uxth	r3, r3
 8014258:	4618      	mov	r0, r3
 801425a:	f7f8 fa2b 	bl	800c6b4 <lwip_htons>
 801425e:	4603      	mov	r3, r0
 8014260:	b2db      	uxtb	r3, r3
 8014262:	f003 0301 	and.w	r3, r3, #1
 8014266:	2b00      	cmp	r3, #0
 8014268:	d005      	beq.n	8014276 <tcp_zero_window_probe+0x72>
 801426a:	6a3b      	ldr	r3, [r7, #32]
 801426c:	891b      	ldrh	r3, [r3, #8]
 801426e:	2b00      	cmp	r3, #0
 8014270:	d101      	bne.n	8014276 <tcp_zero_window_probe+0x72>
 8014272:	2301      	movs	r3, #1
 8014274:	e000      	b.n	8014278 <tcp_zero_window_probe+0x74>
 8014276:	2300      	movs	r3, #0
 8014278:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801427a:	7ffb      	ldrb	r3, [r7, #31]
 801427c:	2b00      	cmp	r3, #0
 801427e:	bf0c      	ite	eq
 8014280:	2301      	moveq	r3, #1
 8014282:	2300      	movne	r3, #0
 8014284:	b2db      	uxtb	r3, r3
 8014286:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014288:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801428c:	b299      	uxth	r1, r3
 801428e:	6a3b      	ldr	r3, [r7, #32]
 8014290:	68db      	ldr	r3, [r3, #12]
 8014292:	685b      	ldr	r3, [r3, #4]
 8014294:	8bba      	ldrh	r2, [r7, #28]
 8014296:	6878      	ldr	r0, [r7, #4]
 8014298:	f7ff fdf8 	bl	8013e8c <tcp_output_alloc_header>
 801429c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801429e:	69bb      	ldr	r3, [r7, #24]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d102      	bne.n	80142aa <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80142a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80142a8:	e04c      	b.n	8014344 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80142aa:	69bb      	ldr	r3, [r7, #24]
 80142ac:	685b      	ldr	r3, [r3, #4]
 80142ae:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80142b0:	7ffb      	ldrb	r3, [r7, #31]
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d011      	beq.n	80142da <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80142b6:	697b      	ldr	r3, [r7, #20]
 80142b8:	899b      	ldrh	r3, [r3, #12]
 80142ba:	b29b      	uxth	r3, r3
 80142bc:	b21b      	sxth	r3, r3
 80142be:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80142c2:	b21c      	sxth	r4, r3
 80142c4:	2011      	movs	r0, #17
 80142c6:	f7f8 f9f5 	bl	800c6b4 <lwip_htons>
 80142ca:	4603      	mov	r3, r0
 80142cc:	b21b      	sxth	r3, r3
 80142ce:	4323      	orrs	r3, r4
 80142d0:	b21b      	sxth	r3, r3
 80142d2:	b29a      	uxth	r2, r3
 80142d4:	697b      	ldr	r3, [r7, #20]
 80142d6:	819a      	strh	r2, [r3, #12]
 80142d8:	e010      	b.n	80142fc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80142da:	69bb      	ldr	r3, [r7, #24]
 80142dc:	685b      	ldr	r3, [r3, #4]
 80142de:	3314      	adds	r3, #20
 80142e0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80142e2:	6a3b      	ldr	r3, [r7, #32]
 80142e4:	6858      	ldr	r0, [r3, #4]
 80142e6:	6a3b      	ldr	r3, [r7, #32]
 80142e8:	685b      	ldr	r3, [r3, #4]
 80142ea:	891a      	ldrh	r2, [r3, #8]
 80142ec:	6a3b      	ldr	r3, [r7, #32]
 80142ee:	891b      	ldrh	r3, [r3, #8]
 80142f0:	1ad3      	subs	r3, r2, r3
 80142f2:	b29b      	uxth	r3, r3
 80142f4:	2201      	movs	r2, #1
 80142f6:	6939      	ldr	r1, [r7, #16]
 80142f8:	f7f9 ff58 	bl	800e1ac <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80142fc:	6a3b      	ldr	r3, [r7, #32]
 80142fe:	68db      	ldr	r3, [r3, #12]
 8014300:	685b      	ldr	r3, [r3, #4]
 8014302:	4618      	mov	r0, r3
 8014304:	f7f8 f9eb 	bl	800c6de <lwip_htonl>
 8014308:	4603      	mov	r3, r0
 801430a:	3301      	adds	r3, #1
 801430c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	1ad3      	subs	r3, r2, r3
 8014316:	2b00      	cmp	r3, #0
 8014318:	da02      	bge.n	8014320 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	68fa      	ldr	r2, [r7, #12]
 801431e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014320:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014324:	2200      	movs	r2, #0
 8014326:	69b9      	ldr	r1, [r7, #24]
 8014328:	6878      	ldr	r0, [r7, #4]
 801432a:	f7ff fded 	bl	8013f08 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801432e:	687a      	ldr	r2, [r7, #4]
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	3304      	adds	r3, #4
 8014334:	69b9      	ldr	r1, [r7, #24]
 8014336:	6878      	ldr	r0, [r7, #4]
 8014338:	f7ff fe26 	bl	8013f88 <tcp_output_control_segment>
 801433c:	4603      	mov	r3, r0
 801433e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014340:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014344:	4618      	mov	r0, r3
 8014346:	372c      	adds	r7, #44	; 0x2c
 8014348:	46bd      	mov	sp, r7
 801434a:	bd90      	pop	{r4, r7, pc}
 801434c:	0801af34 	.word	0x0801af34
 8014350:	0801b72c 	.word	0x0801b72c
 8014354:	0801af88 	.word	0x0801af88

08014358 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014358:	b580      	push	{r7, lr}
 801435a:	b082      	sub	sp, #8
 801435c:	af00      	add	r7, sp, #0
 801435e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014360:	f7fa f812 	bl	800e388 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014364:	4b0a      	ldr	r3, [pc, #40]	; (8014390 <tcpip_tcp_timer+0x38>)
 8014366:	681b      	ldr	r3, [r3, #0]
 8014368:	2b00      	cmp	r3, #0
 801436a:	d103      	bne.n	8014374 <tcpip_tcp_timer+0x1c>
 801436c:	4b09      	ldr	r3, [pc, #36]	; (8014394 <tcpip_tcp_timer+0x3c>)
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	2b00      	cmp	r3, #0
 8014372:	d005      	beq.n	8014380 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014374:	2200      	movs	r2, #0
 8014376:	4908      	ldr	r1, [pc, #32]	; (8014398 <tcpip_tcp_timer+0x40>)
 8014378:	20fa      	movs	r0, #250	; 0xfa
 801437a:	f000 f8f3 	bl	8014564 <sys_timeout>
 801437e:	e003      	b.n	8014388 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014380:	4b06      	ldr	r3, [pc, #24]	; (801439c <tcpip_tcp_timer+0x44>)
 8014382:	2200      	movs	r2, #0
 8014384:	601a      	str	r2, [r3, #0]
  }
}
 8014386:	bf00      	nop
 8014388:	bf00      	nop
 801438a:	3708      	adds	r7, #8
 801438c:	46bd      	mov	sp, r7
 801438e:	bd80      	pop	{r7, pc}
 8014390:	20016dbc 	.word	0x20016dbc
 8014394:	20016dcc 	.word	0x20016dcc
 8014398:	08014359 	.word	0x08014359
 801439c:	200016e4 	.word	0x200016e4

080143a0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80143a0:	b580      	push	{r7, lr}
 80143a2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80143a4:	4b0a      	ldr	r3, [pc, #40]	; (80143d0 <tcp_timer_needed+0x30>)
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d10f      	bne.n	80143cc <tcp_timer_needed+0x2c>
 80143ac:	4b09      	ldr	r3, [pc, #36]	; (80143d4 <tcp_timer_needed+0x34>)
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d103      	bne.n	80143bc <tcp_timer_needed+0x1c>
 80143b4:	4b08      	ldr	r3, [pc, #32]	; (80143d8 <tcp_timer_needed+0x38>)
 80143b6:	681b      	ldr	r3, [r3, #0]
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d007      	beq.n	80143cc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80143bc:	4b04      	ldr	r3, [pc, #16]	; (80143d0 <tcp_timer_needed+0x30>)
 80143be:	2201      	movs	r2, #1
 80143c0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80143c2:	2200      	movs	r2, #0
 80143c4:	4905      	ldr	r1, [pc, #20]	; (80143dc <tcp_timer_needed+0x3c>)
 80143c6:	20fa      	movs	r0, #250	; 0xfa
 80143c8:	f000 f8cc 	bl	8014564 <sys_timeout>
  }
}
 80143cc:	bf00      	nop
 80143ce:	bd80      	pop	{r7, pc}
 80143d0:	200016e4 	.word	0x200016e4
 80143d4:	20016dbc 	.word	0x20016dbc
 80143d8:	20016dcc 	.word	0x20016dcc
 80143dc:	08014359 	.word	0x08014359

080143e0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80143e0:	b580      	push	{r7, lr}
 80143e2:	b086      	sub	sp, #24
 80143e4:	af00      	add	r7, sp, #0
 80143e6:	60f8      	str	r0, [r7, #12]
 80143e8:	60b9      	str	r1, [r7, #8]
 80143ea:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80143ec:	2006      	movs	r0, #6
 80143ee:	f7f8 fe95 	bl	800d11c <memp_malloc>
 80143f2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80143f4:	693b      	ldr	r3, [r7, #16]
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d109      	bne.n	801440e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80143fa:	693b      	ldr	r3, [r7, #16]
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d151      	bne.n	80144a4 <sys_timeout_abs+0xc4>
 8014400:	4b2a      	ldr	r3, [pc, #168]	; (80144ac <sys_timeout_abs+0xcc>)
 8014402:	22be      	movs	r2, #190	; 0xbe
 8014404:	492a      	ldr	r1, [pc, #168]	; (80144b0 <sys_timeout_abs+0xd0>)
 8014406:	482b      	ldr	r0, [pc, #172]	; (80144b4 <sys_timeout_abs+0xd4>)
 8014408:	f002 fdf4 	bl	8016ff4 <iprintf>
    return;
 801440c:	e04a      	b.n	80144a4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801440e:	693b      	ldr	r3, [r7, #16]
 8014410:	2200      	movs	r2, #0
 8014412:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014414:	693b      	ldr	r3, [r7, #16]
 8014416:	68ba      	ldr	r2, [r7, #8]
 8014418:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801441a:	693b      	ldr	r3, [r7, #16]
 801441c:	687a      	ldr	r2, [r7, #4]
 801441e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014420:	693b      	ldr	r3, [r7, #16]
 8014422:	68fa      	ldr	r2, [r7, #12]
 8014424:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014426:	4b24      	ldr	r3, [pc, #144]	; (80144b8 <sys_timeout_abs+0xd8>)
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	2b00      	cmp	r3, #0
 801442c:	d103      	bne.n	8014436 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801442e:	4a22      	ldr	r2, [pc, #136]	; (80144b8 <sys_timeout_abs+0xd8>)
 8014430:	693b      	ldr	r3, [r7, #16]
 8014432:	6013      	str	r3, [r2, #0]
    return;
 8014434:	e037      	b.n	80144a6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8014436:	693b      	ldr	r3, [r7, #16]
 8014438:	685a      	ldr	r2, [r3, #4]
 801443a:	4b1f      	ldr	r3, [pc, #124]	; (80144b8 <sys_timeout_abs+0xd8>)
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	685b      	ldr	r3, [r3, #4]
 8014440:	1ad3      	subs	r3, r2, r3
 8014442:	0fdb      	lsrs	r3, r3, #31
 8014444:	f003 0301 	and.w	r3, r3, #1
 8014448:	b2db      	uxtb	r3, r3
 801444a:	2b00      	cmp	r3, #0
 801444c:	d007      	beq.n	801445e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801444e:	4b1a      	ldr	r3, [pc, #104]	; (80144b8 <sys_timeout_abs+0xd8>)
 8014450:	681a      	ldr	r2, [r3, #0]
 8014452:	693b      	ldr	r3, [r7, #16]
 8014454:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014456:	4a18      	ldr	r2, [pc, #96]	; (80144b8 <sys_timeout_abs+0xd8>)
 8014458:	693b      	ldr	r3, [r7, #16]
 801445a:	6013      	str	r3, [r2, #0]
 801445c:	e023      	b.n	80144a6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801445e:	4b16      	ldr	r3, [pc, #88]	; (80144b8 <sys_timeout_abs+0xd8>)
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	617b      	str	r3, [r7, #20]
 8014464:	e01a      	b.n	801449c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8014466:	697b      	ldr	r3, [r7, #20]
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	2b00      	cmp	r3, #0
 801446c:	d00b      	beq.n	8014486 <sys_timeout_abs+0xa6>
 801446e:	693b      	ldr	r3, [r7, #16]
 8014470:	685a      	ldr	r2, [r3, #4]
 8014472:	697b      	ldr	r3, [r7, #20]
 8014474:	681b      	ldr	r3, [r3, #0]
 8014476:	685b      	ldr	r3, [r3, #4]
 8014478:	1ad3      	subs	r3, r2, r3
 801447a:	0fdb      	lsrs	r3, r3, #31
 801447c:	f003 0301 	and.w	r3, r3, #1
 8014480:	b2db      	uxtb	r3, r3
 8014482:	2b00      	cmp	r3, #0
 8014484:	d007      	beq.n	8014496 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8014486:	697b      	ldr	r3, [r7, #20]
 8014488:	681a      	ldr	r2, [r3, #0]
 801448a:	693b      	ldr	r3, [r7, #16]
 801448c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801448e:	697b      	ldr	r3, [r7, #20]
 8014490:	693a      	ldr	r2, [r7, #16]
 8014492:	601a      	str	r2, [r3, #0]
        break;
 8014494:	e007      	b.n	80144a6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014496:	697b      	ldr	r3, [r7, #20]
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	617b      	str	r3, [r7, #20]
 801449c:	697b      	ldr	r3, [r7, #20]
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d1e1      	bne.n	8014466 <sys_timeout_abs+0x86>
 80144a2:	e000      	b.n	80144a6 <sys_timeout_abs+0xc6>
    return;
 80144a4:	bf00      	nop
      }
    }
  }
}
 80144a6:	3718      	adds	r7, #24
 80144a8:	46bd      	mov	sp, r7
 80144aa:	bd80      	pop	{r7, pc}
 80144ac:	0801b750 	.word	0x0801b750
 80144b0:	0801b784 	.word	0x0801b784
 80144b4:	0801b7c4 	.word	0x0801b7c4
 80144b8:	200016dc 	.word	0x200016dc

080144bc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80144bc:	b580      	push	{r7, lr}
 80144be:	b086      	sub	sp, #24
 80144c0:	af00      	add	r7, sp, #0
 80144c2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80144c8:	697b      	ldr	r3, [r7, #20]
 80144ca:	685b      	ldr	r3, [r3, #4]
 80144cc:	4798      	blx	r3

  now = sys_now();
 80144ce:	f7f3 fc7b 	bl	8007dc8 <sys_now>
 80144d2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80144d4:	697b      	ldr	r3, [r7, #20]
 80144d6:	681a      	ldr	r2, [r3, #0]
 80144d8:	4b0f      	ldr	r3, [pc, #60]	; (8014518 <lwip_cyclic_timer+0x5c>)
 80144da:	681b      	ldr	r3, [r3, #0]
 80144dc:	4413      	add	r3, r2
 80144de:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80144e0:	68fa      	ldr	r2, [r7, #12]
 80144e2:	693b      	ldr	r3, [r7, #16]
 80144e4:	1ad3      	subs	r3, r2, r3
 80144e6:	0fdb      	lsrs	r3, r3, #31
 80144e8:	f003 0301 	and.w	r3, r3, #1
 80144ec:	b2db      	uxtb	r3, r3
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d009      	beq.n	8014506 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80144f2:	697b      	ldr	r3, [r7, #20]
 80144f4:	681a      	ldr	r2, [r3, #0]
 80144f6:	693b      	ldr	r3, [r7, #16]
 80144f8:	4413      	add	r3, r2
 80144fa:	687a      	ldr	r2, [r7, #4]
 80144fc:	4907      	ldr	r1, [pc, #28]	; (801451c <lwip_cyclic_timer+0x60>)
 80144fe:	4618      	mov	r0, r3
 8014500:	f7ff ff6e 	bl	80143e0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8014504:	e004      	b.n	8014510 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8014506:	687a      	ldr	r2, [r7, #4]
 8014508:	4904      	ldr	r1, [pc, #16]	; (801451c <lwip_cyclic_timer+0x60>)
 801450a:	68f8      	ldr	r0, [r7, #12]
 801450c:	f7ff ff68 	bl	80143e0 <sys_timeout_abs>
}
 8014510:	bf00      	nop
 8014512:	3718      	adds	r7, #24
 8014514:	46bd      	mov	sp, r7
 8014516:	bd80      	pop	{r7, pc}
 8014518:	200016e0 	.word	0x200016e0
 801451c:	080144bd 	.word	0x080144bd

08014520 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014520:	b580      	push	{r7, lr}
 8014522:	b082      	sub	sp, #8
 8014524:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014526:	2301      	movs	r3, #1
 8014528:	607b      	str	r3, [r7, #4]
 801452a:	e00e      	b.n	801454a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801452c:	4a0b      	ldr	r2, [pc, #44]	; (801455c <sys_timeouts_init+0x3c>)
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	00db      	lsls	r3, r3, #3
 8014538:	4a08      	ldr	r2, [pc, #32]	; (801455c <sys_timeouts_init+0x3c>)
 801453a:	4413      	add	r3, r2
 801453c:	461a      	mov	r2, r3
 801453e:	4908      	ldr	r1, [pc, #32]	; (8014560 <sys_timeouts_init+0x40>)
 8014540:	f000 f810 	bl	8014564 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	3301      	adds	r3, #1
 8014548:	607b      	str	r3, [r7, #4]
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	2b02      	cmp	r3, #2
 801454e:	d9ed      	bls.n	801452c <sys_timeouts_init+0xc>
  }
}
 8014550:	bf00      	nop
 8014552:	bf00      	nop
 8014554:	3708      	adds	r7, #8
 8014556:	46bd      	mov	sp, r7
 8014558:	bd80      	pop	{r7, pc}
 801455a:	bf00      	nop
 801455c:	0802033c 	.word	0x0802033c
 8014560:	080144bd 	.word	0x080144bd

08014564 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8014564:	b580      	push	{r7, lr}
 8014566:	b086      	sub	sp, #24
 8014568:	af00      	add	r7, sp, #0
 801456a:	60f8      	str	r0, [r7, #12]
 801456c:	60b9      	str	r1, [r7, #8]
 801456e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014576:	d306      	bcc.n	8014586 <sys_timeout+0x22>
 8014578:	4b0a      	ldr	r3, [pc, #40]	; (80145a4 <sys_timeout+0x40>)
 801457a:	f240 1229 	movw	r2, #297	; 0x129
 801457e:	490a      	ldr	r1, [pc, #40]	; (80145a8 <sys_timeout+0x44>)
 8014580:	480a      	ldr	r0, [pc, #40]	; (80145ac <sys_timeout+0x48>)
 8014582:	f002 fd37 	bl	8016ff4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8014586:	f7f3 fc1f 	bl	8007dc8 <sys_now>
 801458a:	4602      	mov	r2, r0
 801458c:	68fb      	ldr	r3, [r7, #12]
 801458e:	4413      	add	r3, r2
 8014590:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8014592:	687a      	ldr	r2, [r7, #4]
 8014594:	68b9      	ldr	r1, [r7, #8]
 8014596:	6978      	ldr	r0, [r7, #20]
 8014598:	f7ff ff22 	bl	80143e0 <sys_timeout_abs>
#endif
}
 801459c:	bf00      	nop
 801459e:	3718      	adds	r7, #24
 80145a0:	46bd      	mov	sp, r7
 80145a2:	bd80      	pop	{r7, pc}
 80145a4:	0801b750 	.word	0x0801b750
 80145a8:	0801b7ec 	.word	0x0801b7ec
 80145ac:	0801b7c4 	.word	0x0801b7c4

080145b0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80145b0:	b580      	push	{r7, lr}
 80145b2:	b084      	sub	sp, #16
 80145b4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80145b6:	f7f3 fc07 	bl	8007dc8 <sys_now>
 80145ba:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 80145bc:	4b1a      	ldr	r3, [pc, #104]	; (8014628 <sys_check_timeouts+0x78>)
 80145be:	781b      	ldrb	r3, [r3, #0]
 80145c0:	b2db      	uxtb	r3, r3
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d001      	beq.n	80145ca <sys_check_timeouts+0x1a>
 80145c6:	f7f9 f8cd 	bl	800d764 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 80145ca:	4b18      	ldr	r3, [pc, #96]	; (801462c <sys_check_timeouts+0x7c>)
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80145d0:	68bb      	ldr	r3, [r7, #8]
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d022      	beq.n	801461c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80145d6:	68bb      	ldr	r3, [r7, #8]
 80145d8:	685b      	ldr	r3, [r3, #4]
 80145da:	68fa      	ldr	r2, [r7, #12]
 80145dc:	1ad3      	subs	r3, r2, r3
 80145de:	0fdb      	lsrs	r3, r3, #31
 80145e0:	f003 0301 	and.w	r3, r3, #1
 80145e4:	b2db      	uxtb	r3, r3
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d11a      	bne.n	8014620 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80145ea:	68bb      	ldr	r3, [r7, #8]
 80145ec:	681b      	ldr	r3, [r3, #0]
 80145ee:	4a0f      	ldr	r2, [pc, #60]	; (801462c <sys_check_timeouts+0x7c>)
 80145f0:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80145f2:	68bb      	ldr	r3, [r7, #8]
 80145f4:	689b      	ldr	r3, [r3, #8]
 80145f6:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80145f8:	68bb      	ldr	r3, [r7, #8]
 80145fa:	68db      	ldr	r3, [r3, #12]
 80145fc:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80145fe:	68bb      	ldr	r3, [r7, #8]
 8014600:	685b      	ldr	r3, [r3, #4]
 8014602:	4a0b      	ldr	r2, [pc, #44]	; (8014630 <sys_check_timeouts+0x80>)
 8014604:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014606:	68b9      	ldr	r1, [r7, #8]
 8014608:	2006      	movs	r0, #6
 801460a:	f7f8 fdd3 	bl	800d1b4 <memp_free>
    if (handler != NULL) {
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	2b00      	cmp	r3, #0
 8014612:	d0d3      	beq.n	80145bc <sys_check_timeouts+0xc>
      handler(arg);
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	6838      	ldr	r0, [r7, #0]
 8014618:	4798      	blx	r3
  do {
 801461a:	e7cf      	b.n	80145bc <sys_check_timeouts+0xc>
      return;
 801461c:	bf00      	nop
 801461e:	e000      	b.n	8014622 <sys_check_timeouts+0x72>
      return;
 8014620:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8014622:	3710      	adds	r7, #16
 8014624:	46bd      	mov	sp, r7
 8014626:	bd80      	pop	{r7, pc}
 8014628:	20016db4 	.word	0x20016db4
 801462c:	200016dc 	.word	0x200016dc
 8014630:	200016e0 	.word	0x200016e0

08014634 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014634:	b580      	push	{r7, lr}
 8014636:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014638:	f002 fd6a 	bl	8017110 <rand>
 801463c:	4603      	mov	r3, r0
 801463e:	b29b      	uxth	r3, r3
 8014640:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014644:	b29b      	uxth	r3, r3
 8014646:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801464a:	b29a      	uxth	r2, r3
 801464c:	4b01      	ldr	r3, [pc, #4]	; (8014654 <udp_init+0x20>)
 801464e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014650:	bf00      	nop
 8014652:	bd80      	pop	{r7, pc}
 8014654:	20000148 	.word	0x20000148

08014658 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8014658:	b580      	push	{r7, lr}
 801465a:	b084      	sub	sp, #16
 801465c:	af00      	add	r7, sp, #0
 801465e:	60f8      	str	r0, [r7, #12]
 8014660:	60b9      	str	r1, [r7, #8]
 8014662:	4613      	mov	r3, r2
 8014664:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	2b00      	cmp	r3, #0
 801466a:	d105      	bne.n	8014678 <udp_input_local_match+0x20>
 801466c:	4b27      	ldr	r3, [pc, #156]	; (801470c <udp_input_local_match+0xb4>)
 801466e:	2287      	movs	r2, #135	; 0x87
 8014670:	4927      	ldr	r1, [pc, #156]	; (8014710 <udp_input_local_match+0xb8>)
 8014672:	4828      	ldr	r0, [pc, #160]	; (8014714 <udp_input_local_match+0xbc>)
 8014674:	f002 fcbe 	bl	8016ff4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8014678:	68bb      	ldr	r3, [r7, #8]
 801467a:	2b00      	cmp	r3, #0
 801467c:	d105      	bne.n	801468a <udp_input_local_match+0x32>
 801467e:	4b23      	ldr	r3, [pc, #140]	; (801470c <udp_input_local_match+0xb4>)
 8014680:	2288      	movs	r2, #136	; 0x88
 8014682:	4925      	ldr	r1, [pc, #148]	; (8014718 <udp_input_local_match+0xc0>)
 8014684:	4823      	ldr	r0, [pc, #140]	; (8014714 <udp_input_local_match+0xbc>)
 8014686:	f002 fcb5 	bl	8016ff4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801468a:	68fb      	ldr	r3, [r7, #12]
 801468c:	7a1b      	ldrb	r3, [r3, #8]
 801468e:	2b00      	cmp	r3, #0
 8014690:	d00b      	beq.n	80146aa <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014692:	68fb      	ldr	r3, [r7, #12]
 8014694:	7a1a      	ldrb	r2, [r3, #8]
 8014696:	4b21      	ldr	r3, [pc, #132]	; (801471c <udp_input_local_match+0xc4>)
 8014698:	685b      	ldr	r3, [r3, #4]
 801469a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801469e:	3301      	adds	r3, #1
 80146a0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80146a2:	429a      	cmp	r2, r3
 80146a4:	d001      	beq.n	80146aa <udp_input_local_match+0x52>
    return 0;
 80146a6:	2300      	movs	r3, #0
 80146a8:	e02b      	b.n	8014702 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80146aa:	79fb      	ldrb	r3, [r7, #7]
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d018      	beq.n	80146e2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80146b0:	68fb      	ldr	r3, [r7, #12]
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d013      	beq.n	80146de <udp_input_local_match+0x86>
 80146b6:	68fb      	ldr	r3, [r7, #12]
 80146b8:	681b      	ldr	r3, [r3, #0]
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d00f      	beq.n	80146de <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80146be:	4b17      	ldr	r3, [pc, #92]	; (801471c <udp_input_local_match+0xc4>)
 80146c0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80146c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80146c6:	d00a      	beq.n	80146de <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	681a      	ldr	r2, [r3, #0]
 80146cc:	4b13      	ldr	r3, [pc, #76]	; (801471c <udp_input_local_match+0xc4>)
 80146ce:	695b      	ldr	r3, [r3, #20]
 80146d0:	405a      	eors	r2, r3
 80146d2:	68bb      	ldr	r3, [r7, #8]
 80146d4:	3308      	adds	r3, #8
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d110      	bne.n	8014700 <udp_input_local_match+0xa8>
          return 1;
 80146de:	2301      	movs	r3, #1
 80146e0:	e00f      	b.n	8014702 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d009      	beq.n	80146fc <udp_input_local_match+0xa4>
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d005      	beq.n	80146fc <udp_input_local_match+0xa4>
 80146f0:	68fb      	ldr	r3, [r7, #12]
 80146f2:	681a      	ldr	r2, [r3, #0]
 80146f4:	4b09      	ldr	r3, [pc, #36]	; (801471c <udp_input_local_match+0xc4>)
 80146f6:	695b      	ldr	r3, [r3, #20]
 80146f8:	429a      	cmp	r2, r3
 80146fa:	d101      	bne.n	8014700 <udp_input_local_match+0xa8>
        return 1;
 80146fc:	2301      	movs	r3, #1
 80146fe:	e000      	b.n	8014702 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8014700:	2300      	movs	r3, #0
}
 8014702:	4618      	mov	r0, r3
 8014704:	3710      	adds	r7, #16
 8014706:	46bd      	mov	sp, r7
 8014708:	bd80      	pop	{r7, pc}
 801470a:	bf00      	nop
 801470c:	0801b838 	.word	0x0801b838
 8014710:	0801b868 	.word	0x0801b868
 8014714:	0801b88c 	.word	0x0801b88c
 8014718:	0801b8b4 	.word	0x0801b8b4
 801471c:	2000d7b8 	.word	0x2000d7b8

08014720 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8014720:	b590      	push	{r4, r7, lr}
 8014722:	b08d      	sub	sp, #52	; 0x34
 8014724:	af02      	add	r7, sp, #8
 8014726:	6078      	str	r0, [r7, #4]
 8014728:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801472a:	2300      	movs	r3, #0
 801472c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	2b00      	cmp	r3, #0
 8014732:	d105      	bne.n	8014740 <udp_input+0x20>
 8014734:	4b7c      	ldr	r3, [pc, #496]	; (8014928 <udp_input+0x208>)
 8014736:	22cf      	movs	r2, #207	; 0xcf
 8014738:	497c      	ldr	r1, [pc, #496]	; (801492c <udp_input+0x20c>)
 801473a:	487d      	ldr	r0, [pc, #500]	; (8014930 <udp_input+0x210>)
 801473c:	f002 fc5a 	bl	8016ff4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8014740:	683b      	ldr	r3, [r7, #0]
 8014742:	2b00      	cmp	r3, #0
 8014744:	d105      	bne.n	8014752 <udp_input+0x32>
 8014746:	4b78      	ldr	r3, [pc, #480]	; (8014928 <udp_input+0x208>)
 8014748:	22d0      	movs	r2, #208	; 0xd0
 801474a:	497a      	ldr	r1, [pc, #488]	; (8014934 <udp_input+0x214>)
 801474c:	4878      	ldr	r0, [pc, #480]	; (8014930 <udp_input+0x210>)
 801474e:	f002 fc51 	bl	8016ff4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	895b      	ldrh	r3, [r3, #10]
 8014756:	2b07      	cmp	r3, #7
 8014758:	d803      	bhi.n	8014762 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801475a:	6878      	ldr	r0, [r7, #4]
 801475c:	f7f9 fb3c 	bl	800ddd8 <pbuf_free>
    goto end;
 8014760:	e0de      	b.n	8014920 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	685b      	ldr	r3, [r3, #4]
 8014766:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8014768:	4b73      	ldr	r3, [pc, #460]	; (8014938 <udp_input+0x218>)
 801476a:	695b      	ldr	r3, [r3, #20]
 801476c:	4a72      	ldr	r2, [pc, #456]	; (8014938 <udp_input+0x218>)
 801476e:	6812      	ldr	r2, [r2, #0]
 8014770:	4611      	mov	r1, r2
 8014772:	4618      	mov	r0, r3
 8014774:	f001 fc88 	bl	8016088 <ip4_addr_isbroadcast_u32>
 8014778:	4603      	mov	r3, r0
 801477a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801477c:	697b      	ldr	r3, [r7, #20]
 801477e:	881b      	ldrh	r3, [r3, #0]
 8014780:	b29b      	uxth	r3, r3
 8014782:	4618      	mov	r0, r3
 8014784:	f7f7 ff96 	bl	800c6b4 <lwip_htons>
 8014788:	4603      	mov	r3, r0
 801478a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801478c:	697b      	ldr	r3, [r7, #20]
 801478e:	885b      	ldrh	r3, [r3, #2]
 8014790:	b29b      	uxth	r3, r3
 8014792:	4618      	mov	r0, r3
 8014794:	f7f7 ff8e 	bl	800c6b4 <lwip_htons>
 8014798:	4603      	mov	r3, r0
 801479a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801479c:	2300      	movs	r3, #0
 801479e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80147a0:	2300      	movs	r3, #0
 80147a2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80147a4:	2300      	movs	r3, #0
 80147a6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80147a8:	4b64      	ldr	r3, [pc, #400]	; (801493c <udp_input+0x21c>)
 80147aa:	681b      	ldr	r3, [r3, #0]
 80147ac:	627b      	str	r3, [r7, #36]	; 0x24
 80147ae:	e054      	b.n	801485a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80147b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147b2:	8a5b      	ldrh	r3, [r3, #18]
 80147b4:	89fa      	ldrh	r2, [r7, #14]
 80147b6:	429a      	cmp	r2, r3
 80147b8:	d14a      	bne.n	8014850 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80147ba:	7cfb      	ldrb	r3, [r7, #19]
 80147bc:	461a      	mov	r2, r3
 80147be:	6839      	ldr	r1, [r7, #0]
 80147c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80147c2:	f7ff ff49 	bl	8014658 <udp_input_local_match>
 80147c6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d041      	beq.n	8014850 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80147cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147ce:	7c1b      	ldrb	r3, [r3, #16]
 80147d0:	f003 0304 	and.w	r3, r3, #4
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d11d      	bne.n	8014814 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80147d8:	69fb      	ldr	r3, [r7, #28]
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d102      	bne.n	80147e4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80147de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147e0:	61fb      	str	r3, [r7, #28]
 80147e2:	e017      	b.n	8014814 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80147e4:	7cfb      	ldrb	r3, [r7, #19]
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d014      	beq.n	8014814 <udp_input+0xf4>
 80147ea:	4b53      	ldr	r3, [pc, #332]	; (8014938 <udp_input+0x218>)
 80147ec:	695b      	ldr	r3, [r3, #20]
 80147ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80147f2:	d10f      	bne.n	8014814 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80147f4:	69fb      	ldr	r3, [r7, #28]
 80147f6:	681a      	ldr	r2, [r3, #0]
 80147f8:	683b      	ldr	r3, [r7, #0]
 80147fa:	3304      	adds	r3, #4
 80147fc:	681b      	ldr	r3, [r3, #0]
 80147fe:	429a      	cmp	r2, r3
 8014800:	d008      	beq.n	8014814 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8014802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014804:	681a      	ldr	r2, [r3, #0]
 8014806:	683b      	ldr	r3, [r7, #0]
 8014808:	3304      	adds	r3, #4
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	429a      	cmp	r2, r3
 801480e:	d101      	bne.n	8014814 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8014810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014812:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8014814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014816:	8a9b      	ldrh	r3, [r3, #20]
 8014818:	8a3a      	ldrh	r2, [r7, #16]
 801481a:	429a      	cmp	r2, r3
 801481c:	d118      	bne.n	8014850 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014820:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8014822:	2b00      	cmp	r3, #0
 8014824:	d005      	beq.n	8014832 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8014826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014828:	685a      	ldr	r2, [r3, #4]
 801482a:	4b43      	ldr	r3, [pc, #268]	; (8014938 <udp_input+0x218>)
 801482c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801482e:	429a      	cmp	r2, r3
 8014830:	d10e      	bne.n	8014850 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8014832:	6a3b      	ldr	r3, [r7, #32]
 8014834:	2b00      	cmp	r3, #0
 8014836:	d014      	beq.n	8014862 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8014838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801483a:	68da      	ldr	r2, [r3, #12]
 801483c:	6a3b      	ldr	r3, [r7, #32]
 801483e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8014840:	4b3e      	ldr	r3, [pc, #248]	; (801493c <udp_input+0x21c>)
 8014842:	681a      	ldr	r2, [r3, #0]
 8014844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014846:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8014848:	4a3c      	ldr	r2, [pc, #240]	; (801493c <udp_input+0x21c>)
 801484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801484c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801484e:	e008      	b.n	8014862 <udp_input+0x142>
      }
    }

    prev = pcb;
 8014850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014852:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014856:	68db      	ldr	r3, [r3, #12]
 8014858:	627b      	str	r3, [r7, #36]	; 0x24
 801485a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801485c:	2b00      	cmp	r3, #0
 801485e:	d1a7      	bne.n	80147b0 <udp_input+0x90>
 8014860:	e000      	b.n	8014864 <udp_input+0x144>
        break;
 8014862:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8014864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014866:	2b00      	cmp	r3, #0
 8014868:	d101      	bne.n	801486e <udp_input+0x14e>
    pcb = uncon_pcb;
 801486a:	69fb      	ldr	r3, [r7, #28]
 801486c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014870:	2b00      	cmp	r3, #0
 8014872:	d002      	beq.n	801487a <udp_input+0x15a>
    for_us = 1;
 8014874:	2301      	movs	r3, #1
 8014876:	76fb      	strb	r3, [r7, #27]
 8014878:	e00a      	b.n	8014890 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801487a:	683b      	ldr	r3, [r7, #0]
 801487c:	3304      	adds	r3, #4
 801487e:	681a      	ldr	r2, [r3, #0]
 8014880:	4b2d      	ldr	r3, [pc, #180]	; (8014938 <udp_input+0x218>)
 8014882:	695b      	ldr	r3, [r3, #20]
 8014884:	429a      	cmp	r2, r3
 8014886:	bf0c      	ite	eq
 8014888:	2301      	moveq	r3, #1
 801488a:	2300      	movne	r3, #0
 801488c:	b2db      	uxtb	r3, r3
 801488e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8014890:	7efb      	ldrb	r3, [r7, #27]
 8014892:	2b00      	cmp	r3, #0
 8014894:	d041      	beq.n	801491a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8014896:	2108      	movs	r1, #8
 8014898:	6878      	ldr	r0, [r7, #4]
 801489a:	f7f9 fa17 	bl	800dccc <pbuf_remove_header>
 801489e:	4603      	mov	r3, r0
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d00a      	beq.n	80148ba <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80148a4:	4b20      	ldr	r3, [pc, #128]	; (8014928 <udp_input+0x208>)
 80148a6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80148aa:	4925      	ldr	r1, [pc, #148]	; (8014940 <udp_input+0x220>)
 80148ac:	4820      	ldr	r0, [pc, #128]	; (8014930 <udp_input+0x210>)
 80148ae:	f002 fba1 	bl	8016ff4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80148b2:	6878      	ldr	r0, [r7, #4]
 80148b4:	f7f9 fa90 	bl	800ddd8 <pbuf_free>
      goto end;
 80148b8:	e032      	b.n	8014920 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80148ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d012      	beq.n	80148e6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80148c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148c2:	699b      	ldr	r3, [r3, #24]
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d00a      	beq.n	80148de <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80148c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148ca:	699c      	ldr	r4, [r3, #24]
 80148cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148ce:	69d8      	ldr	r0, [r3, #28]
 80148d0:	8a3b      	ldrh	r3, [r7, #16]
 80148d2:	9300      	str	r3, [sp, #0]
 80148d4:	4b1b      	ldr	r3, [pc, #108]	; (8014944 <udp_input+0x224>)
 80148d6:	687a      	ldr	r2, [r7, #4]
 80148d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80148da:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80148dc:	e021      	b.n	8014922 <udp_input+0x202>
        pbuf_free(p);
 80148de:	6878      	ldr	r0, [r7, #4]
 80148e0:	f7f9 fa7a 	bl	800ddd8 <pbuf_free>
        goto end;
 80148e4:	e01c      	b.n	8014920 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80148e6:	7cfb      	ldrb	r3, [r7, #19]
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d112      	bne.n	8014912 <udp_input+0x1f2>
 80148ec:	4b12      	ldr	r3, [pc, #72]	; (8014938 <udp_input+0x218>)
 80148ee:	695b      	ldr	r3, [r3, #20]
 80148f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80148f4:	2be0      	cmp	r3, #224	; 0xe0
 80148f6:	d00c      	beq.n	8014912 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80148f8:	4b0f      	ldr	r3, [pc, #60]	; (8014938 <udp_input+0x218>)
 80148fa:	899b      	ldrh	r3, [r3, #12]
 80148fc:	3308      	adds	r3, #8
 80148fe:	b29b      	uxth	r3, r3
 8014900:	b21b      	sxth	r3, r3
 8014902:	4619      	mov	r1, r3
 8014904:	6878      	ldr	r0, [r7, #4]
 8014906:	f7f9 fa54 	bl	800ddb2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801490a:	2103      	movs	r1, #3
 801490c:	6878      	ldr	r0, [r7, #4]
 801490e:	f001 f89b 	bl	8015a48 <icmp_dest_unreach>
      pbuf_free(p);
 8014912:	6878      	ldr	r0, [r7, #4]
 8014914:	f7f9 fa60 	bl	800ddd8 <pbuf_free>
  return;
 8014918:	e003      	b.n	8014922 <udp_input+0x202>
    pbuf_free(p);
 801491a:	6878      	ldr	r0, [r7, #4]
 801491c:	f7f9 fa5c 	bl	800ddd8 <pbuf_free>
  return;
 8014920:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8014922:	372c      	adds	r7, #44	; 0x2c
 8014924:	46bd      	mov	sp, r7
 8014926:	bd90      	pop	{r4, r7, pc}
 8014928:	0801b838 	.word	0x0801b838
 801492c:	0801b8dc 	.word	0x0801b8dc
 8014930:	0801b88c 	.word	0x0801b88c
 8014934:	0801b8f4 	.word	0x0801b8f4
 8014938:	2000d7b8 	.word	0x2000d7b8
 801493c:	20016dd4 	.word	0x20016dd4
 8014940:	0801b910 	.word	0x0801b910
 8014944:	2000d7c8 	.word	0x2000d7c8

08014948 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014948:	b480      	push	{r7}
 801494a:	b085      	sub	sp, #20
 801494c:	af00      	add	r7, sp, #0
 801494e:	6078      	str	r0, [r7, #4]
 8014950:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	2b00      	cmp	r3, #0
 8014956:	d01e      	beq.n	8014996 <udp_netif_ip_addr_changed+0x4e>
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	681b      	ldr	r3, [r3, #0]
 801495c:	2b00      	cmp	r3, #0
 801495e:	d01a      	beq.n	8014996 <udp_netif_ip_addr_changed+0x4e>
 8014960:	683b      	ldr	r3, [r7, #0]
 8014962:	2b00      	cmp	r3, #0
 8014964:	d017      	beq.n	8014996 <udp_netif_ip_addr_changed+0x4e>
 8014966:	683b      	ldr	r3, [r7, #0]
 8014968:	681b      	ldr	r3, [r3, #0]
 801496a:	2b00      	cmp	r3, #0
 801496c:	d013      	beq.n	8014996 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801496e:	4b0d      	ldr	r3, [pc, #52]	; (80149a4 <udp_netif_ip_addr_changed+0x5c>)
 8014970:	681b      	ldr	r3, [r3, #0]
 8014972:	60fb      	str	r3, [r7, #12]
 8014974:	e00c      	b.n	8014990 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	681a      	ldr	r2, [r3, #0]
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	429a      	cmp	r2, r3
 8014980:	d103      	bne.n	801498a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014982:	683b      	ldr	r3, [r7, #0]
 8014984:	681a      	ldr	r2, [r3, #0]
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801498a:	68fb      	ldr	r3, [r7, #12]
 801498c:	68db      	ldr	r3, [r3, #12]
 801498e:	60fb      	str	r3, [r7, #12]
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	2b00      	cmp	r3, #0
 8014994:	d1ef      	bne.n	8014976 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014996:	bf00      	nop
 8014998:	3714      	adds	r7, #20
 801499a:	46bd      	mov	sp, r7
 801499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149a0:	4770      	bx	lr
 80149a2:	bf00      	nop
 80149a4:	20016dd4 	.word	0x20016dd4

080149a8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80149a8:	b580      	push	{r7, lr}
 80149aa:	b082      	sub	sp, #8
 80149ac:	af00      	add	r7, sp, #0
 80149ae:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80149b0:	4915      	ldr	r1, [pc, #84]	; (8014a08 <etharp_free_entry+0x60>)
 80149b2:	687a      	ldr	r2, [r7, #4]
 80149b4:	4613      	mov	r3, r2
 80149b6:	005b      	lsls	r3, r3, #1
 80149b8:	4413      	add	r3, r2
 80149ba:	00db      	lsls	r3, r3, #3
 80149bc:	440b      	add	r3, r1
 80149be:	681b      	ldr	r3, [r3, #0]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d013      	beq.n	80149ec <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80149c4:	4910      	ldr	r1, [pc, #64]	; (8014a08 <etharp_free_entry+0x60>)
 80149c6:	687a      	ldr	r2, [r7, #4]
 80149c8:	4613      	mov	r3, r2
 80149ca:	005b      	lsls	r3, r3, #1
 80149cc:	4413      	add	r3, r2
 80149ce:	00db      	lsls	r3, r3, #3
 80149d0:	440b      	add	r3, r1
 80149d2:	681b      	ldr	r3, [r3, #0]
 80149d4:	4618      	mov	r0, r3
 80149d6:	f7f9 f9ff 	bl	800ddd8 <pbuf_free>
    arp_table[i].q = NULL;
 80149da:	490b      	ldr	r1, [pc, #44]	; (8014a08 <etharp_free_entry+0x60>)
 80149dc:	687a      	ldr	r2, [r7, #4]
 80149de:	4613      	mov	r3, r2
 80149e0:	005b      	lsls	r3, r3, #1
 80149e2:	4413      	add	r3, r2
 80149e4:	00db      	lsls	r3, r3, #3
 80149e6:	440b      	add	r3, r1
 80149e8:	2200      	movs	r2, #0
 80149ea:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80149ec:	4906      	ldr	r1, [pc, #24]	; (8014a08 <etharp_free_entry+0x60>)
 80149ee:	687a      	ldr	r2, [r7, #4]
 80149f0:	4613      	mov	r3, r2
 80149f2:	005b      	lsls	r3, r3, #1
 80149f4:	4413      	add	r3, r2
 80149f6:	00db      	lsls	r3, r3, #3
 80149f8:	440b      	add	r3, r1
 80149fa:	3314      	adds	r3, #20
 80149fc:	2200      	movs	r2, #0
 80149fe:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8014a00:	bf00      	nop
 8014a02:	3708      	adds	r7, #8
 8014a04:	46bd      	mov	sp, r7
 8014a06:	bd80      	pop	{r7, pc}
 8014a08:	200016e8 	.word	0x200016e8

08014a0c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014a0c:	b580      	push	{r7, lr}
 8014a0e:	b082      	sub	sp, #8
 8014a10:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014a12:	2300      	movs	r3, #0
 8014a14:	607b      	str	r3, [r7, #4]
 8014a16:	e096      	b.n	8014b46 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014a18:	494f      	ldr	r1, [pc, #316]	; (8014b58 <etharp_tmr+0x14c>)
 8014a1a:	687a      	ldr	r2, [r7, #4]
 8014a1c:	4613      	mov	r3, r2
 8014a1e:	005b      	lsls	r3, r3, #1
 8014a20:	4413      	add	r3, r2
 8014a22:	00db      	lsls	r3, r3, #3
 8014a24:	440b      	add	r3, r1
 8014a26:	3314      	adds	r3, #20
 8014a28:	781b      	ldrb	r3, [r3, #0]
 8014a2a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8014a2c:	78fb      	ldrb	r3, [r7, #3]
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	f000 8086 	beq.w	8014b40 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8014a34:	4948      	ldr	r1, [pc, #288]	; (8014b58 <etharp_tmr+0x14c>)
 8014a36:	687a      	ldr	r2, [r7, #4]
 8014a38:	4613      	mov	r3, r2
 8014a3a:	005b      	lsls	r3, r3, #1
 8014a3c:	4413      	add	r3, r2
 8014a3e:	00db      	lsls	r3, r3, #3
 8014a40:	440b      	add	r3, r1
 8014a42:	3312      	adds	r3, #18
 8014a44:	881b      	ldrh	r3, [r3, #0]
 8014a46:	3301      	adds	r3, #1
 8014a48:	b298      	uxth	r0, r3
 8014a4a:	4943      	ldr	r1, [pc, #268]	; (8014b58 <etharp_tmr+0x14c>)
 8014a4c:	687a      	ldr	r2, [r7, #4]
 8014a4e:	4613      	mov	r3, r2
 8014a50:	005b      	lsls	r3, r3, #1
 8014a52:	4413      	add	r3, r2
 8014a54:	00db      	lsls	r3, r3, #3
 8014a56:	440b      	add	r3, r1
 8014a58:	3312      	adds	r3, #18
 8014a5a:	4602      	mov	r2, r0
 8014a5c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014a5e:	493e      	ldr	r1, [pc, #248]	; (8014b58 <etharp_tmr+0x14c>)
 8014a60:	687a      	ldr	r2, [r7, #4]
 8014a62:	4613      	mov	r3, r2
 8014a64:	005b      	lsls	r3, r3, #1
 8014a66:	4413      	add	r3, r2
 8014a68:	00db      	lsls	r3, r3, #3
 8014a6a:	440b      	add	r3, r1
 8014a6c:	3312      	adds	r3, #18
 8014a6e:	881b      	ldrh	r3, [r3, #0]
 8014a70:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014a74:	d215      	bcs.n	8014aa2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014a76:	4938      	ldr	r1, [pc, #224]	; (8014b58 <etharp_tmr+0x14c>)
 8014a78:	687a      	ldr	r2, [r7, #4]
 8014a7a:	4613      	mov	r3, r2
 8014a7c:	005b      	lsls	r3, r3, #1
 8014a7e:	4413      	add	r3, r2
 8014a80:	00db      	lsls	r3, r3, #3
 8014a82:	440b      	add	r3, r1
 8014a84:	3314      	adds	r3, #20
 8014a86:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014a88:	2b01      	cmp	r3, #1
 8014a8a:	d10e      	bne.n	8014aaa <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014a8c:	4932      	ldr	r1, [pc, #200]	; (8014b58 <etharp_tmr+0x14c>)
 8014a8e:	687a      	ldr	r2, [r7, #4]
 8014a90:	4613      	mov	r3, r2
 8014a92:	005b      	lsls	r3, r3, #1
 8014a94:	4413      	add	r3, r2
 8014a96:	00db      	lsls	r3, r3, #3
 8014a98:	440b      	add	r3, r1
 8014a9a:	3312      	adds	r3, #18
 8014a9c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014a9e:	2b04      	cmp	r3, #4
 8014aa0:	d903      	bls.n	8014aaa <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8014aa2:	6878      	ldr	r0, [r7, #4]
 8014aa4:	f7ff ff80 	bl	80149a8 <etharp_free_entry>
 8014aa8:	e04a      	b.n	8014b40 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8014aaa:	492b      	ldr	r1, [pc, #172]	; (8014b58 <etharp_tmr+0x14c>)
 8014aac:	687a      	ldr	r2, [r7, #4]
 8014aae:	4613      	mov	r3, r2
 8014ab0:	005b      	lsls	r3, r3, #1
 8014ab2:	4413      	add	r3, r2
 8014ab4:	00db      	lsls	r3, r3, #3
 8014ab6:	440b      	add	r3, r1
 8014ab8:	3314      	adds	r3, #20
 8014aba:	781b      	ldrb	r3, [r3, #0]
 8014abc:	2b03      	cmp	r3, #3
 8014abe:	d10a      	bne.n	8014ad6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014ac0:	4925      	ldr	r1, [pc, #148]	; (8014b58 <etharp_tmr+0x14c>)
 8014ac2:	687a      	ldr	r2, [r7, #4]
 8014ac4:	4613      	mov	r3, r2
 8014ac6:	005b      	lsls	r3, r3, #1
 8014ac8:	4413      	add	r3, r2
 8014aca:	00db      	lsls	r3, r3, #3
 8014acc:	440b      	add	r3, r1
 8014ace:	3314      	adds	r3, #20
 8014ad0:	2204      	movs	r2, #4
 8014ad2:	701a      	strb	r2, [r3, #0]
 8014ad4:	e034      	b.n	8014b40 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8014ad6:	4920      	ldr	r1, [pc, #128]	; (8014b58 <etharp_tmr+0x14c>)
 8014ad8:	687a      	ldr	r2, [r7, #4]
 8014ada:	4613      	mov	r3, r2
 8014adc:	005b      	lsls	r3, r3, #1
 8014ade:	4413      	add	r3, r2
 8014ae0:	00db      	lsls	r3, r3, #3
 8014ae2:	440b      	add	r3, r1
 8014ae4:	3314      	adds	r3, #20
 8014ae6:	781b      	ldrb	r3, [r3, #0]
 8014ae8:	2b04      	cmp	r3, #4
 8014aea:	d10a      	bne.n	8014b02 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014aec:	491a      	ldr	r1, [pc, #104]	; (8014b58 <etharp_tmr+0x14c>)
 8014aee:	687a      	ldr	r2, [r7, #4]
 8014af0:	4613      	mov	r3, r2
 8014af2:	005b      	lsls	r3, r3, #1
 8014af4:	4413      	add	r3, r2
 8014af6:	00db      	lsls	r3, r3, #3
 8014af8:	440b      	add	r3, r1
 8014afa:	3314      	adds	r3, #20
 8014afc:	2202      	movs	r2, #2
 8014afe:	701a      	strb	r2, [r3, #0]
 8014b00:	e01e      	b.n	8014b40 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014b02:	4915      	ldr	r1, [pc, #84]	; (8014b58 <etharp_tmr+0x14c>)
 8014b04:	687a      	ldr	r2, [r7, #4]
 8014b06:	4613      	mov	r3, r2
 8014b08:	005b      	lsls	r3, r3, #1
 8014b0a:	4413      	add	r3, r2
 8014b0c:	00db      	lsls	r3, r3, #3
 8014b0e:	440b      	add	r3, r1
 8014b10:	3314      	adds	r3, #20
 8014b12:	781b      	ldrb	r3, [r3, #0]
 8014b14:	2b01      	cmp	r3, #1
 8014b16:	d113      	bne.n	8014b40 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014b18:	490f      	ldr	r1, [pc, #60]	; (8014b58 <etharp_tmr+0x14c>)
 8014b1a:	687a      	ldr	r2, [r7, #4]
 8014b1c:	4613      	mov	r3, r2
 8014b1e:	005b      	lsls	r3, r3, #1
 8014b20:	4413      	add	r3, r2
 8014b22:	00db      	lsls	r3, r3, #3
 8014b24:	440b      	add	r3, r1
 8014b26:	3308      	adds	r3, #8
 8014b28:	6818      	ldr	r0, [r3, #0]
 8014b2a:	687a      	ldr	r2, [r7, #4]
 8014b2c:	4613      	mov	r3, r2
 8014b2e:	005b      	lsls	r3, r3, #1
 8014b30:	4413      	add	r3, r2
 8014b32:	00db      	lsls	r3, r3, #3
 8014b34:	4a08      	ldr	r2, [pc, #32]	; (8014b58 <etharp_tmr+0x14c>)
 8014b36:	4413      	add	r3, r2
 8014b38:	3304      	adds	r3, #4
 8014b3a:	4619      	mov	r1, r3
 8014b3c:	f000 fe6e 	bl	801581c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	3301      	adds	r3, #1
 8014b44:	607b      	str	r3, [r7, #4]
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	2b09      	cmp	r3, #9
 8014b4a:	f77f af65 	ble.w	8014a18 <etharp_tmr+0xc>
      }
    }
  }
}
 8014b4e:	bf00      	nop
 8014b50:	bf00      	nop
 8014b52:	3708      	adds	r7, #8
 8014b54:	46bd      	mov	sp, r7
 8014b56:	bd80      	pop	{r7, pc}
 8014b58:	200016e8 	.word	0x200016e8

08014b5c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8014b5c:	b580      	push	{r7, lr}
 8014b5e:	b08a      	sub	sp, #40	; 0x28
 8014b60:	af00      	add	r7, sp, #0
 8014b62:	60f8      	str	r0, [r7, #12]
 8014b64:	460b      	mov	r3, r1
 8014b66:	607a      	str	r2, [r7, #4]
 8014b68:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8014b6a:	230a      	movs	r3, #10
 8014b6c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014b6e:	230a      	movs	r3, #10
 8014b70:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8014b72:	230a      	movs	r3, #10
 8014b74:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8014b76:	2300      	movs	r3, #0
 8014b78:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8014b7a:	230a      	movs	r3, #10
 8014b7c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8014b7e:	2300      	movs	r3, #0
 8014b80:	83bb      	strh	r3, [r7, #28]
 8014b82:	2300      	movs	r3, #0
 8014b84:	837b      	strh	r3, [r7, #26]
 8014b86:	2300      	movs	r3, #0
 8014b88:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014b8a:	2300      	movs	r3, #0
 8014b8c:	843b      	strh	r3, [r7, #32]
 8014b8e:	e0ae      	b.n	8014cee <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014b90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014b94:	49a6      	ldr	r1, [pc, #664]	; (8014e30 <etharp_find_entry+0x2d4>)
 8014b96:	4613      	mov	r3, r2
 8014b98:	005b      	lsls	r3, r3, #1
 8014b9a:	4413      	add	r3, r2
 8014b9c:	00db      	lsls	r3, r3, #3
 8014b9e:	440b      	add	r3, r1
 8014ba0:	3314      	adds	r3, #20
 8014ba2:	781b      	ldrb	r3, [r3, #0]
 8014ba4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8014ba6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014baa:	2b0a      	cmp	r3, #10
 8014bac:	d105      	bne.n	8014bba <etharp_find_entry+0x5e>
 8014bae:	7dfb      	ldrb	r3, [r7, #23]
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	d102      	bne.n	8014bba <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014bb4:	8c3b      	ldrh	r3, [r7, #32]
 8014bb6:	847b      	strh	r3, [r7, #34]	; 0x22
 8014bb8:	e095      	b.n	8014ce6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8014bba:	7dfb      	ldrb	r3, [r7, #23]
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	f000 8092 	beq.w	8014ce6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8014bc2:	7dfb      	ldrb	r3, [r7, #23]
 8014bc4:	2b01      	cmp	r3, #1
 8014bc6:	d009      	beq.n	8014bdc <etharp_find_entry+0x80>
 8014bc8:	7dfb      	ldrb	r3, [r7, #23]
 8014bca:	2b01      	cmp	r3, #1
 8014bcc:	d806      	bhi.n	8014bdc <etharp_find_entry+0x80>
 8014bce:	4b99      	ldr	r3, [pc, #612]	; (8014e34 <etharp_find_entry+0x2d8>)
 8014bd0:	f240 1223 	movw	r2, #291	; 0x123
 8014bd4:	4998      	ldr	r1, [pc, #608]	; (8014e38 <etharp_find_entry+0x2dc>)
 8014bd6:	4899      	ldr	r0, [pc, #612]	; (8014e3c <etharp_find_entry+0x2e0>)
 8014bd8:	f002 fa0c 	bl	8016ff4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d020      	beq.n	8014c24 <etharp_find_entry+0xc8>
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	6819      	ldr	r1, [r3, #0]
 8014be6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014bea:	4891      	ldr	r0, [pc, #580]	; (8014e30 <etharp_find_entry+0x2d4>)
 8014bec:	4613      	mov	r3, r2
 8014bee:	005b      	lsls	r3, r3, #1
 8014bf0:	4413      	add	r3, r2
 8014bf2:	00db      	lsls	r3, r3, #3
 8014bf4:	4403      	add	r3, r0
 8014bf6:	3304      	adds	r3, #4
 8014bf8:	681b      	ldr	r3, [r3, #0]
 8014bfa:	4299      	cmp	r1, r3
 8014bfc:	d112      	bne.n	8014c24 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d00c      	beq.n	8014c1e <etharp_find_entry+0xc2>
 8014c04:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014c08:	4989      	ldr	r1, [pc, #548]	; (8014e30 <etharp_find_entry+0x2d4>)
 8014c0a:	4613      	mov	r3, r2
 8014c0c:	005b      	lsls	r3, r3, #1
 8014c0e:	4413      	add	r3, r2
 8014c10:	00db      	lsls	r3, r3, #3
 8014c12:	440b      	add	r3, r1
 8014c14:	3308      	adds	r3, #8
 8014c16:	681b      	ldr	r3, [r3, #0]
 8014c18:	687a      	ldr	r2, [r7, #4]
 8014c1a:	429a      	cmp	r2, r3
 8014c1c:	d102      	bne.n	8014c24 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8014c1e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014c22:	e100      	b.n	8014e26 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014c24:	7dfb      	ldrb	r3, [r7, #23]
 8014c26:	2b01      	cmp	r3, #1
 8014c28:	d140      	bne.n	8014cac <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8014c2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014c2e:	4980      	ldr	r1, [pc, #512]	; (8014e30 <etharp_find_entry+0x2d4>)
 8014c30:	4613      	mov	r3, r2
 8014c32:	005b      	lsls	r3, r3, #1
 8014c34:	4413      	add	r3, r2
 8014c36:	00db      	lsls	r3, r3, #3
 8014c38:	440b      	add	r3, r1
 8014c3a:	681b      	ldr	r3, [r3, #0]
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d01a      	beq.n	8014c76 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014c40:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014c44:	497a      	ldr	r1, [pc, #488]	; (8014e30 <etharp_find_entry+0x2d4>)
 8014c46:	4613      	mov	r3, r2
 8014c48:	005b      	lsls	r3, r3, #1
 8014c4a:	4413      	add	r3, r2
 8014c4c:	00db      	lsls	r3, r3, #3
 8014c4e:	440b      	add	r3, r1
 8014c50:	3312      	adds	r3, #18
 8014c52:	881b      	ldrh	r3, [r3, #0]
 8014c54:	8bba      	ldrh	r2, [r7, #28]
 8014c56:	429a      	cmp	r2, r3
 8014c58:	d845      	bhi.n	8014ce6 <etharp_find_entry+0x18a>
            old_queue = i;
 8014c5a:	8c3b      	ldrh	r3, [r7, #32]
 8014c5c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8014c5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014c62:	4973      	ldr	r1, [pc, #460]	; (8014e30 <etharp_find_entry+0x2d4>)
 8014c64:	4613      	mov	r3, r2
 8014c66:	005b      	lsls	r3, r3, #1
 8014c68:	4413      	add	r3, r2
 8014c6a:	00db      	lsls	r3, r3, #3
 8014c6c:	440b      	add	r3, r1
 8014c6e:	3312      	adds	r3, #18
 8014c70:	881b      	ldrh	r3, [r3, #0]
 8014c72:	83bb      	strh	r3, [r7, #28]
 8014c74:	e037      	b.n	8014ce6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8014c76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014c7a:	496d      	ldr	r1, [pc, #436]	; (8014e30 <etharp_find_entry+0x2d4>)
 8014c7c:	4613      	mov	r3, r2
 8014c7e:	005b      	lsls	r3, r3, #1
 8014c80:	4413      	add	r3, r2
 8014c82:	00db      	lsls	r3, r3, #3
 8014c84:	440b      	add	r3, r1
 8014c86:	3312      	adds	r3, #18
 8014c88:	881b      	ldrh	r3, [r3, #0]
 8014c8a:	8b7a      	ldrh	r2, [r7, #26]
 8014c8c:	429a      	cmp	r2, r3
 8014c8e:	d82a      	bhi.n	8014ce6 <etharp_find_entry+0x18a>
            old_pending = i;
 8014c90:	8c3b      	ldrh	r3, [r7, #32]
 8014c92:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8014c94:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014c98:	4965      	ldr	r1, [pc, #404]	; (8014e30 <etharp_find_entry+0x2d4>)
 8014c9a:	4613      	mov	r3, r2
 8014c9c:	005b      	lsls	r3, r3, #1
 8014c9e:	4413      	add	r3, r2
 8014ca0:	00db      	lsls	r3, r3, #3
 8014ca2:	440b      	add	r3, r1
 8014ca4:	3312      	adds	r3, #18
 8014ca6:	881b      	ldrh	r3, [r3, #0]
 8014ca8:	837b      	strh	r3, [r7, #26]
 8014caa:	e01c      	b.n	8014ce6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014cac:	7dfb      	ldrb	r3, [r7, #23]
 8014cae:	2b01      	cmp	r3, #1
 8014cb0:	d919      	bls.n	8014ce6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8014cb2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014cb6:	495e      	ldr	r1, [pc, #376]	; (8014e30 <etharp_find_entry+0x2d4>)
 8014cb8:	4613      	mov	r3, r2
 8014cba:	005b      	lsls	r3, r3, #1
 8014cbc:	4413      	add	r3, r2
 8014cbe:	00db      	lsls	r3, r3, #3
 8014cc0:	440b      	add	r3, r1
 8014cc2:	3312      	adds	r3, #18
 8014cc4:	881b      	ldrh	r3, [r3, #0]
 8014cc6:	8b3a      	ldrh	r2, [r7, #24]
 8014cc8:	429a      	cmp	r2, r3
 8014cca:	d80c      	bhi.n	8014ce6 <etharp_find_entry+0x18a>
            old_stable = i;
 8014ccc:	8c3b      	ldrh	r3, [r7, #32]
 8014cce:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8014cd0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014cd4:	4956      	ldr	r1, [pc, #344]	; (8014e30 <etharp_find_entry+0x2d4>)
 8014cd6:	4613      	mov	r3, r2
 8014cd8:	005b      	lsls	r3, r3, #1
 8014cda:	4413      	add	r3, r2
 8014cdc:	00db      	lsls	r3, r3, #3
 8014cde:	440b      	add	r3, r1
 8014ce0:	3312      	adds	r3, #18
 8014ce2:	881b      	ldrh	r3, [r3, #0]
 8014ce4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014ce6:	8c3b      	ldrh	r3, [r7, #32]
 8014ce8:	3301      	adds	r3, #1
 8014cea:	b29b      	uxth	r3, r3
 8014cec:	843b      	strh	r3, [r7, #32]
 8014cee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014cf2:	2b09      	cmp	r3, #9
 8014cf4:	f77f af4c 	ble.w	8014b90 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014cf8:	7afb      	ldrb	r3, [r7, #11]
 8014cfa:	f003 0302 	and.w	r3, r3, #2
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d108      	bne.n	8014d14 <etharp_find_entry+0x1b8>
 8014d02:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014d06:	2b0a      	cmp	r3, #10
 8014d08:	d107      	bne.n	8014d1a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8014d0a:	7afb      	ldrb	r3, [r7, #11]
 8014d0c:	f003 0301 	and.w	r3, r3, #1
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d102      	bne.n	8014d1a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014d14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014d18:	e085      	b.n	8014e26 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8014d1a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014d1e:	2b09      	cmp	r3, #9
 8014d20:	dc02      	bgt.n	8014d28 <etharp_find_entry+0x1cc>
    i = empty;
 8014d22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014d24:	843b      	strh	r3, [r7, #32]
 8014d26:	e039      	b.n	8014d9c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014d28:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8014d2c:	2b09      	cmp	r3, #9
 8014d2e:	dc14      	bgt.n	8014d5a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014d30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014d32:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014d34:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014d38:	493d      	ldr	r1, [pc, #244]	; (8014e30 <etharp_find_entry+0x2d4>)
 8014d3a:	4613      	mov	r3, r2
 8014d3c:	005b      	lsls	r3, r3, #1
 8014d3e:	4413      	add	r3, r2
 8014d40:	00db      	lsls	r3, r3, #3
 8014d42:	440b      	add	r3, r1
 8014d44:	681b      	ldr	r3, [r3, #0]
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d018      	beq.n	8014d7c <etharp_find_entry+0x220>
 8014d4a:	4b3a      	ldr	r3, [pc, #232]	; (8014e34 <etharp_find_entry+0x2d8>)
 8014d4c:	f240 126d 	movw	r2, #365	; 0x16d
 8014d50:	493b      	ldr	r1, [pc, #236]	; (8014e40 <etharp_find_entry+0x2e4>)
 8014d52:	483a      	ldr	r0, [pc, #232]	; (8014e3c <etharp_find_entry+0x2e0>)
 8014d54:	f002 f94e 	bl	8016ff4 <iprintf>
 8014d58:	e010      	b.n	8014d7c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8014d5a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8014d5e:	2b09      	cmp	r3, #9
 8014d60:	dc02      	bgt.n	8014d68 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8014d62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014d64:	843b      	strh	r3, [r7, #32]
 8014d66:	e009      	b.n	8014d7c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014d68:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014d6c:	2b09      	cmp	r3, #9
 8014d6e:	dc02      	bgt.n	8014d76 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014d70:	8bfb      	ldrh	r3, [r7, #30]
 8014d72:	843b      	strh	r3, [r7, #32]
 8014d74:	e002      	b.n	8014d7c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8014d76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014d7a:	e054      	b.n	8014e26 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014d7c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014d80:	2b09      	cmp	r3, #9
 8014d82:	dd06      	ble.n	8014d92 <etharp_find_entry+0x236>
 8014d84:	4b2b      	ldr	r3, [pc, #172]	; (8014e34 <etharp_find_entry+0x2d8>)
 8014d86:	f240 127f 	movw	r2, #383	; 0x17f
 8014d8a:	492e      	ldr	r1, [pc, #184]	; (8014e44 <etharp_find_entry+0x2e8>)
 8014d8c:	482b      	ldr	r0, [pc, #172]	; (8014e3c <etharp_find_entry+0x2e0>)
 8014d8e:	f002 f931 	bl	8016ff4 <iprintf>
    etharp_free_entry(i);
 8014d92:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014d96:	4618      	mov	r0, r3
 8014d98:	f7ff fe06 	bl	80149a8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014d9c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014da0:	2b09      	cmp	r3, #9
 8014da2:	dd06      	ble.n	8014db2 <etharp_find_entry+0x256>
 8014da4:	4b23      	ldr	r3, [pc, #140]	; (8014e34 <etharp_find_entry+0x2d8>)
 8014da6:	f240 1283 	movw	r2, #387	; 0x183
 8014daa:	4926      	ldr	r1, [pc, #152]	; (8014e44 <etharp_find_entry+0x2e8>)
 8014dac:	4823      	ldr	r0, [pc, #140]	; (8014e3c <etharp_find_entry+0x2e0>)
 8014dae:	f002 f921 	bl	8016ff4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014db2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014db6:	491e      	ldr	r1, [pc, #120]	; (8014e30 <etharp_find_entry+0x2d4>)
 8014db8:	4613      	mov	r3, r2
 8014dba:	005b      	lsls	r3, r3, #1
 8014dbc:	4413      	add	r3, r2
 8014dbe:	00db      	lsls	r3, r3, #3
 8014dc0:	440b      	add	r3, r1
 8014dc2:	3314      	adds	r3, #20
 8014dc4:	781b      	ldrb	r3, [r3, #0]
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d006      	beq.n	8014dd8 <etharp_find_entry+0x27c>
 8014dca:	4b1a      	ldr	r3, [pc, #104]	; (8014e34 <etharp_find_entry+0x2d8>)
 8014dcc:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8014dd0:	491d      	ldr	r1, [pc, #116]	; (8014e48 <etharp_find_entry+0x2ec>)
 8014dd2:	481a      	ldr	r0, [pc, #104]	; (8014e3c <etharp_find_entry+0x2e0>)
 8014dd4:	f002 f90e 	bl	8016ff4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d00b      	beq.n	8014df6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8014dde:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014de2:	68fb      	ldr	r3, [r7, #12]
 8014de4:	6819      	ldr	r1, [r3, #0]
 8014de6:	4812      	ldr	r0, [pc, #72]	; (8014e30 <etharp_find_entry+0x2d4>)
 8014de8:	4613      	mov	r3, r2
 8014dea:	005b      	lsls	r3, r3, #1
 8014dec:	4413      	add	r3, r2
 8014dee:	00db      	lsls	r3, r3, #3
 8014df0:	4403      	add	r3, r0
 8014df2:	3304      	adds	r3, #4
 8014df4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8014df6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014dfa:	490d      	ldr	r1, [pc, #52]	; (8014e30 <etharp_find_entry+0x2d4>)
 8014dfc:	4613      	mov	r3, r2
 8014dfe:	005b      	lsls	r3, r3, #1
 8014e00:	4413      	add	r3, r2
 8014e02:	00db      	lsls	r3, r3, #3
 8014e04:	440b      	add	r3, r1
 8014e06:	3312      	adds	r3, #18
 8014e08:	2200      	movs	r2, #0
 8014e0a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014e0c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014e10:	4907      	ldr	r1, [pc, #28]	; (8014e30 <etharp_find_entry+0x2d4>)
 8014e12:	4613      	mov	r3, r2
 8014e14:	005b      	lsls	r3, r3, #1
 8014e16:	4413      	add	r3, r2
 8014e18:	00db      	lsls	r3, r3, #3
 8014e1a:	440b      	add	r3, r1
 8014e1c:	3308      	adds	r3, #8
 8014e1e:	687a      	ldr	r2, [r7, #4]
 8014e20:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8014e22:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8014e26:	4618      	mov	r0, r3
 8014e28:	3728      	adds	r7, #40	; 0x28
 8014e2a:	46bd      	mov	sp, r7
 8014e2c:	bd80      	pop	{r7, pc}
 8014e2e:	bf00      	nop
 8014e30:	200016e8 	.word	0x200016e8
 8014e34:	0801bb9c 	.word	0x0801bb9c
 8014e38:	0801bbd4 	.word	0x0801bbd4
 8014e3c:	0801bc14 	.word	0x0801bc14
 8014e40:	0801bc3c 	.word	0x0801bc3c
 8014e44:	0801bc54 	.word	0x0801bc54
 8014e48:	0801bc68 	.word	0x0801bc68

08014e4c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014e4c:	b580      	push	{r7, lr}
 8014e4e:	b088      	sub	sp, #32
 8014e50:	af02      	add	r7, sp, #8
 8014e52:	60f8      	str	r0, [r7, #12]
 8014e54:	60b9      	str	r1, [r7, #8]
 8014e56:	607a      	str	r2, [r7, #4]
 8014e58:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014e5a:	68fb      	ldr	r3, [r7, #12]
 8014e5c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014e60:	2b06      	cmp	r3, #6
 8014e62:	d006      	beq.n	8014e72 <etharp_update_arp_entry+0x26>
 8014e64:	4b48      	ldr	r3, [pc, #288]	; (8014f88 <etharp_update_arp_entry+0x13c>)
 8014e66:	f240 12a9 	movw	r2, #425	; 0x1a9
 8014e6a:	4948      	ldr	r1, [pc, #288]	; (8014f8c <etharp_update_arp_entry+0x140>)
 8014e6c:	4848      	ldr	r0, [pc, #288]	; (8014f90 <etharp_update_arp_entry+0x144>)
 8014e6e:	f002 f8c1 	bl	8016ff4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014e72:	68bb      	ldr	r3, [r7, #8]
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d012      	beq.n	8014e9e <etharp_update_arp_entry+0x52>
 8014e78:	68bb      	ldr	r3, [r7, #8]
 8014e7a:	681b      	ldr	r3, [r3, #0]
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d00e      	beq.n	8014e9e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014e80:	68bb      	ldr	r3, [r7, #8]
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	68f9      	ldr	r1, [r7, #12]
 8014e86:	4618      	mov	r0, r3
 8014e88:	f001 f8fe 	bl	8016088 <ip4_addr_isbroadcast_u32>
 8014e8c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d105      	bne.n	8014e9e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014e92:	68bb      	ldr	r3, [r7, #8]
 8014e94:	681b      	ldr	r3, [r3, #0]
 8014e96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014e9a:	2be0      	cmp	r3, #224	; 0xe0
 8014e9c:	d102      	bne.n	8014ea4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014e9e:	f06f 030f 	mvn.w	r3, #15
 8014ea2:	e06c      	b.n	8014f7e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014ea4:	78fb      	ldrb	r3, [r7, #3]
 8014ea6:	68fa      	ldr	r2, [r7, #12]
 8014ea8:	4619      	mov	r1, r3
 8014eaa:	68b8      	ldr	r0, [r7, #8]
 8014eac:	f7ff fe56 	bl	8014b5c <etharp_find_entry>
 8014eb0:	4603      	mov	r3, r0
 8014eb2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014eb4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	da02      	bge.n	8014ec2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014ebc:	8afb      	ldrh	r3, [r7, #22]
 8014ebe:	b25b      	sxtb	r3, r3
 8014ec0:	e05d      	b.n	8014f7e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014ec2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014ec6:	4933      	ldr	r1, [pc, #204]	; (8014f94 <etharp_update_arp_entry+0x148>)
 8014ec8:	4613      	mov	r3, r2
 8014eca:	005b      	lsls	r3, r3, #1
 8014ecc:	4413      	add	r3, r2
 8014ece:	00db      	lsls	r3, r3, #3
 8014ed0:	440b      	add	r3, r1
 8014ed2:	3314      	adds	r3, #20
 8014ed4:	2202      	movs	r2, #2
 8014ed6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014ed8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014edc:	492d      	ldr	r1, [pc, #180]	; (8014f94 <etharp_update_arp_entry+0x148>)
 8014ede:	4613      	mov	r3, r2
 8014ee0:	005b      	lsls	r3, r3, #1
 8014ee2:	4413      	add	r3, r2
 8014ee4:	00db      	lsls	r3, r3, #3
 8014ee6:	440b      	add	r3, r1
 8014ee8:	3308      	adds	r3, #8
 8014eea:	68fa      	ldr	r2, [r7, #12]
 8014eec:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8014eee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014ef2:	4613      	mov	r3, r2
 8014ef4:	005b      	lsls	r3, r3, #1
 8014ef6:	4413      	add	r3, r2
 8014ef8:	00db      	lsls	r3, r3, #3
 8014efa:	3308      	adds	r3, #8
 8014efc:	4a25      	ldr	r2, [pc, #148]	; (8014f94 <etharp_update_arp_entry+0x148>)
 8014efe:	4413      	add	r3, r2
 8014f00:	3304      	adds	r3, #4
 8014f02:	2206      	movs	r2, #6
 8014f04:	6879      	ldr	r1, [r7, #4]
 8014f06:	4618      	mov	r0, r3
 8014f08:	f002 f844 	bl	8016f94 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014f0c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014f10:	4920      	ldr	r1, [pc, #128]	; (8014f94 <etharp_update_arp_entry+0x148>)
 8014f12:	4613      	mov	r3, r2
 8014f14:	005b      	lsls	r3, r3, #1
 8014f16:	4413      	add	r3, r2
 8014f18:	00db      	lsls	r3, r3, #3
 8014f1a:	440b      	add	r3, r1
 8014f1c:	3312      	adds	r3, #18
 8014f1e:	2200      	movs	r2, #0
 8014f20:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8014f22:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014f26:	491b      	ldr	r1, [pc, #108]	; (8014f94 <etharp_update_arp_entry+0x148>)
 8014f28:	4613      	mov	r3, r2
 8014f2a:	005b      	lsls	r3, r3, #1
 8014f2c:	4413      	add	r3, r2
 8014f2e:	00db      	lsls	r3, r3, #3
 8014f30:	440b      	add	r3, r1
 8014f32:	681b      	ldr	r3, [r3, #0]
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d021      	beq.n	8014f7c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014f38:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014f3c:	4915      	ldr	r1, [pc, #84]	; (8014f94 <etharp_update_arp_entry+0x148>)
 8014f3e:	4613      	mov	r3, r2
 8014f40:	005b      	lsls	r3, r3, #1
 8014f42:	4413      	add	r3, r2
 8014f44:	00db      	lsls	r3, r3, #3
 8014f46:	440b      	add	r3, r1
 8014f48:	681b      	ldr	r3, [r3, #0]
 8014f4a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014f4c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014f50:	4910      	ldr	r1, [pc, #64]	; (8014f94 <etharp_update_arp_entry+0x148>)
 8014f52:	4613      	mov	r3, r2
 8014f54:	005b      	lsls	r3, r3, #1
 8014f56:	4413      	add	r3, r2
 8014f58:	00db      	lsls	r3, r3, #3
 8014f5a:	440b      	add	r3, r1
 8014f5c:	2200      	movs	r2, #0
 8014f5e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014f60:	68fb      	ldr	r3, [r7, #12]
 8014f62:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8014f66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014f6a:	9300      	str	r3, [sp, #0]
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	6939      	ldr	r1, [r7, #16]
 8014f70:	68f8      	ldr	r0, [r7, #12]
 8014f72:	f001 ff91 	bl	8016e98 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8014f76:	6938      	ldr	r0, [r7, #16]
 8014f78:	f7f8 ff2e 	bl	800ddd8 <pbuf_free>
  }
  return ERR_OK;
 8014f7c:	2300      	movs	r3, #0
}
 8014f7e:	4618      	mov	r0, r3
 8014f80:	3718      	adds	r7, #24
 8014f82:	46bd      	mov	sp, r7
 8014f84:	bd80      	pop	{r7, pc}
 8014f86:	bf00      	nop
 8014f88:	0801bb9c 	.word	0x0801bb9c
 8014f8c:	0801bc94 	.word	0x0801bc94
 8014f90:	0801bc14 	.word	0x0801bc14
 8014f94:	200016e8 	.word	0x200016e8

08014f98 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014f98:	b580      	push	{r7, lr}
 8014f9a:	b084      	sub	sp, #16
 8014f9c:	af00      	add	r7, sp, #0
 8014f9e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014fa0:	2300      	movs	r3, #0
 8014fa2:	60fb      	str	r3, [r7, #12]
 8014fa4:	e01e      	b.n	8014fe4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8014fa6:	4913      	ldr	r1, [pc, #76]	; (8014ff4 <etharp_cleanup_netif+0x5c>)
 8014fa8:	68fa      	ldr	r2, [r7, #12]
 8014faa:	4613      	mov	r3, r2
 8014fac:	005b      	lsls	r3, r3, #1
 8014fae:	4413      	add	r3, r2
 8014fb0:	00db      	lsls	r3, r3, #3
 8014fb2:	440b      	add	r3, r1
 8014fb4:	3314      	adds	r3, #20
 8014fb6:	781b      	ldrb	r3, [r3, #0]
 8014fb8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8014fba:	7afb      	ldrb	r3, [r7, #11]
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	d00e      	beq.n	8014fde <etharp_cleanup_netif+0x46>
 8014fc0:	490c      	ldr	r1, [pc, #48]	; (8014ff4 <etharp_cleanup_netif+0x5c>)
 8014fc2:	68fa      	ldr	r2, [r7, #12]
 8014fc4:	4613      	mov	r3, r2
 8014fc6:	005b      	lsls	r3, r3, #1
 8014fc8:	4413      	add	r3, r2
 8014fca:	00db      	lsls	r3, r3, #3
 8014fcc:	440b      	add	r3, r1
 8014fce:	3308      	adds	r3, #8
 8014fd0:	681b      	ldr	r3, [r3, #0]
 8014fd2:	687a      	ldr	r2, [r7, #4]
 8014fd4:	429a      	cmp	r2, r3
 8014fd6:	d102      	bne.n	8014fde <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014fd8:	68f8      	ldr	r0, [r7, #12]
 8014fda:	f7ff fce5 	bl	80149a8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	3301      	adds	r3, #1
 8014fe2:	60fb      	str	r3, [r7, #12]
 8014fe4:	68fb      	ldr	r3, [r7, #12]
 8014fe6:	2b09      	cmp	r3, #9
 8014fe8:	dddd      	ble.n	8014fa6 <etharp_cleanup_netif+0xe>
    }
  }
}
 8014fea:	bf00      	nop
 8014fec:	bf00      	nop
 8014fee:	3710      	adds	r7, #16
 8014ff0:	46bd      	mov	sp, r7
 8014ff2:	bd80      	pop	{r7, pc}
 8014ff4:	200016e8 	.word	0x200016e8

08014ff8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014ff8:	b5b0      	push	{r4, r5, r7, lr}
 8014ffa:	b08a      	sub	sp, #40	; 0x28
 8014ffc:	af04      	add	r7, sp, #16
 8014ffe:	6078      	str	r0, [r7, #4]
 8015000:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015002:	683b      	ldr	r3, [r7, #0]
 8015004:	2b00      	cmp	r3, #0
 8015006:	d107      	bne.n	8015018 <etharp_input+0x20>
 8015008:	4b3d      	ldr	r3, [pc, #244]	; (8015100 <etharp_input+0x108>)
 801500a:	f240 228a 	movw	r2, #650	; 0x28a
 801500e:	493d      	ldr	r1, [pc, #244]	; (8015104 <etharp_input+0x10c>)
 8015010:	483d      	ldr	r0, [pc, #244]	; (8015108 <etharp_input+0x110>)
 8015012:	f001 ffef 	bl	8016ff4 <iprintf>
 8015016:	e06f      	b.n	80150f8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	685b      	ldr	r3, [r3, #4]
 801501c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801501e:	693b      	ldr	r3, [r7, #16]
 8015020:	881b      	ldrh	r3, [r3, #0]
 8015022:	b29b      	uxth	r3, r3
 8015024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015028:	d10c      	bne.n	8015044 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801502a:	693b      	ldr	r3, [r7, #16]
 801502c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801502e:	2b06      	cmp	r3, #6
 8015030:	d108      	bne.n	8015044 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015032:	693b      	ldr	r3, [r7, #16]
 8015034:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015036:	2b04      	cmp	r3, #4
 8015038:	d104      	bne.n	8015044 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801503a:	693b      	ldr	r3, [r7, #16]
 801503c:	885b      	ldrh	r3, [r3, #2]
 801503e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015040:	2b08      	cmp	r3, #8
 8015042:	d003      	beq.n	801504c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8015044:	6878      	ldr	r0, [r7, #4]
 8015046:	f7f8 fec7 	bl	800ddd8 <pbuf_free>
    return;
 801504a:	e055      	b.n	80150f8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801504c:	693b      	ldr	r3, [r7, #16]
 801504e:	330e      	adds	r3, #14
 8015050:	681b      	ldr	r3, [r3, #0]
 8015052:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8015054:	693b      	ldr	r3, [r7, #16]
 8015056:	3318      	adds	r3, #24
 8015058:	681b      	ldr	r3, [r3, #0]
 801505a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801505c:	683b      	ldr	r3, [r7, #0]
 801505e:	3304      	adds	r3, #4
 8015060:	681b      	ldr	r3, [r3, #0]
 8015062:	2b00      	cmp	r3, #0
 8015064:	d102      	bne.n	801506c <etharp_input+0x74>
    for_us = 0;
 8015066:	2300      	movs	r3, #0
 8015068:	75fb      	strb	r3, [r7, #23]
 801506a:	e009      	b.n	8015080 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801506c:	68ba      	ldr	r2, [r7, #8]
 801506e:	683b      	ldr	r3, [r7, #0]
 8015070:	3304      	adds	r3, #4
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	429a      	cmp	r2, r3
 8015076:	bf0c      	ite	eq
 8015078:	2301      	moveq	r3, #1
 801507a:	2300      	movne	r3, #0
 801507c:	b2db      	uxtb	r3, r3
 801507e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015080:	693b      	ldr	r3, [r7, #16]
 8015082:	f103 0208 	add.w	r2, r3, #8
 8015086:	7dfb      	ldrb	r3, [r7, #23]
 8015088:	2b00      	cmp	r3, #0
 801508a:	d001      	beq.n	8015090 <etharp_input+0x98>
 801508c:	2301      	movs	r3, #1
 801508e:	e000      	b.n	8015092 <etharp_input+0x9a>
 8015090:	2302      	movs	r3, #2
 8015092:	f107 010c 	add.w	r1, r7, #12
 8015096:	6838      	ldr	r0, [r7, #0]
 8015098:	f7ff fed8 	bl	8014e4c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801509c:	693b      	ldr	r3, [r7, #16]
 801509e:	88db      	ldrh	r3, [r3, #6]
 80150a0:	b29b      	uxth	r3, r3
 80150a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80150a6:	d003      	beq.n	80150b0 <etharp_input+0xb8>
 80150a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80150ac:	d01e      	beq.n	80150ec <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80150ae:	e020      	b.n	80150f2 <etharp_input+0xfa>
      if (for_us) {
 80150b0:	7dfb      	ldrb	r3, [r7, #23]
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d01c      	beq.n	80150f0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80150b6:	683b      	ldr	r3, [r7, #0]
 80150b8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80150bc:	693b      	ldr	r3, [r7, #16]
 80150be:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80150c2:	683b      	ldr	r3, [r7, #0]
 80150c4:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80150c8:	683b      	ldr	r3, [r7, #0]
 80150ca:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80150cc:	693a      	ldr	r2, [r7, #16]
 80150ce:	3208      	adds	r2, #8
        etharp_raw(netif,
 80150d0:	2102      	movs	r1, #2
 80150d2:	9103      	str	r1, [sp, #12]
 80150d4:	f107 010c 	add.w	r1, r7, #12
 80150d8:	9102      	str	r1, [sp, #8]
 80150da:	9201      	str	r2, [sp, #4]
 80150dc:	9300      	str	r3, [sp, #0]
 80150de:	462b      	mov	r3, r5
 80150e0:	4622      	mov	r2, r4
 80150e2:	4601      	mov	r1, r0
 80150e4:	6838      	ldr	r0, [r7, #0]
 80150e6:	f000 faeb 	bl	80156c0 <etharp_raw>
      break;
 80150ea:	e001      	b.n	80150f0 <etharp_input+0xf8>
      break;
 80150ec:	bf00      	nop
 80150ee:	e000      	b.n	80150f2 <etharp_input+0xfa>
      break;
 80150f0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80150f2:	6878      	ldr	r0, [r7, #4]
 80150f4:	f7f8 fe70 	bl	800ddd8 <pbuf_free>
}
 80150f8:	3718      	adds	r7, #24
 80150fa:	46bd      	mov	sp, r7
 80150fc:	bdb0      	pop	{r4, r5, r7, pc}
 80150fe:	bf00      	nop
 8015100:	0801bb9c 	.word	0x0801bb9c
 8015104:	0801bcec 	.word	0x0801bcec
 8015108:	0801bc14 	.word	0x0801bc14

0801510c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801510c:	b580      	push	{r7, lr}
 801510e:	b086      	sub	sp, #24
 8015110:	af02      	add	r7, sp, #8
 8015112:	60f8      	str	r0, [r7, #12]
 8015114:	60b9      	str	r1, [r7, #8]
 8015116:	4613      	mov	r3, r2
 8015118:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801511a:	79fa      	ldrb	r2, [r7, #7]
 801511c:	4944      	ldr	r1, [pc, #272]	; (8015230 <etharp_output_to_arp_index+0x124>)
 801511e:	4613      	mov	r3, r2
 8015120:	005b      	lsls	r3, r3, #1
 8015122:	4413      	add	r3, r2
 8015124:	00db      	lsls	r3, r3, #3
 8015126:	440b      	add	r3, r1
 8015128:	3314      	adds	r3, #20
 801512a:	781b      	ldrb	r3, [r3, #0]
 801512c:	2b01      	cmp	r3, #1
 801512e:	d806      	bhi.n	801513e <etharp_output_to_arp_index+0x32>
 8015130:	4b40      	ldr	r3, [pc, #256]	; (8015234 <etharp_output_to_arp_index+0x128>)
 8015132:	f240 22ee 	movw	r2, #750	; 0x2ee
 8015136:	4940      	ldr	r1, [pc, #256]	; (8015238 <etharp_output_to_arp_index+0x12c>)
 8015138:	4840      	ldr	r0, [pc, #256]	; (801523c <etharp_output_to_arp_index+0x130>)
 801513a:	f001 ff5b 	bl	8016ff4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801513e:	79fa      	ldrb	r2, [r7, #7]
 8015140:	493b      	ldr	r1, [pc, #236]	; (8015230 <etharp_output_to_arp_index+0x124>)
 8015142:	4613      	mov	r3, r2
 8015144:	005b      	lsls	r3, r3, #1
 8015146:	4413      	add	r3, r2
 8015148:	00db      	lsls	r3, r3, #3
 801514a:	440b      	add	r3, r1
 801514c:	3314      	adds	r3, #20
 801514e:	781b      	ldrb	r3, [r3, #0]
 8015150:	2b02      	cmp	r3, #2
 8015152:	d153      	bne.n	80151fc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015154:	79fa      	ldrb	r2, [r7, #7]
 8015156:	4936      	ldr	r1, [pc, #216]	; (8015230 <etharp_output_to_arp_index+0x124>)
 8015158:	4613      	mov	r3, r2
 801515a:	005b      	lsls	r3, r3, #1
 801515c:	4413      	add	r3, r2
 801515e:	00db      	lsls	r3, r3, #3
 8015160:	440b      	add	r3, r1
 8015162:	3312      	adds	r3, #18
 8015164:	881b      	ldrh	r3, [r3, #0]
 8015166:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801516a:	d919      	bls.n	80151a0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801516c:	79fa      	ldrb	r2, [r7, #7]
 801516e:	4613      	mov	r3, r2
 8015170:	005b      	lsls	r3, r3, #1
 8015172:	4413      	add	r3, r2
 8015174:	00db      	lsls	r3, r3, #3
 8015176:	4a2e      	ldr	r2, [pc, #184]	; (8015230 <etharp_output_to_arp_index+0x124>)
 8015178:	4413      	add	r3, r2
 801517a:	3304      	adds	r3, #4
 801517c:	4619      	mov	r1, r3
 801517e:	68f8      	ldr	r0, [r7, #12]
 8015180:	f000 fb4c 	bl	801581c <etharp_request>
 8015184:	4603      	mov	r3, r0
 8015186:	2b00      	cmp	r3, #0
 8015188:	d138      	bne.n	80151fc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801518a:	79fa      	ldrb	r2, [r7, #7]
 801518c:	4928      	ldr	r1, [pc, #160]	; (8015230 <etharp_output_to_arp_index+0x124>)
 801518e:	4613      	mov	r3, r2
 8015190:	005b      	lsls	r3, r3, #1
 8015192:	4413      	add	r3, r2
 8015194:	00db      	lsls	r3, r3, #3
 8015196:	440b      	add	r3, r1
 8015198:	3314      	adds	r3, #20
 801519a:	2203      	movs	r2, #3
 801519c:	701a      	strb	r2, [r3, #0]
 801519e:	e02d      	b.n	80151fc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80151a0:	79fa      	ldrb	r2, [r7, #7]
 80151a2:	4923      	ldr	r1, [pc, #140]	; (8015230 <etharp_output_to_arp_index+0x124>)
 80151a4:	4613      	mov	r3, r2
 80151a6:	005b      	lsls	r3, r3, #1
 80151a8:	4413      	add	r3, r2
 80151aa:	00db      	lsls	r3, r3, #3
 80151ac:	440b      	add	r3, r1
 80151ae:	3312      	adds	r3, #18
 80151b0:	881b      	ldrh	r3, [r3, #0]
 80151b2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80151b6:	d321      	bcc.n	80151fc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80151b8:	79fa      	ldrb	r2, [r7, #7]
 80151ba:	4613      	mov	r3, r2
 80151bc:	005b      	lsls	r3, r3, #1
 80151be:	4413      	add	r3, r2
 80151c0:	00db      	lsls	r3, r3, #3
 80151c2:	4a1b      	ldr	r2, [pc, #108]	; (8015230 <etharp_output_to_arp_index+0x124>)
 80151c4:	4413      	add	r3, r2
 80151c6:	1d19      	adds	r1, r3, #4
 80151c8:	79fa      	ldrb	r2, [r7, #7]
 80151ca:	4613      	mov	r3, r2
 80151cc:	005b      	lsls	r3, r3, #1
 80151ce:	4413      	add	r3, r2
 80151d0:	00db      	lsls	r3, r3, #3
 80151d2:	3308      	adds	r3, #8
 80151d4:	4a16      	ldr	r2, [pc, #88]	; (8015230 <etharp_output_to_arp_index+0x124>)
 80151d6:	4413      	add	r3, r2
 80151d8:	3304      	adds	r3, #4
 80151da:	461a      	mov	r2, r3
 80151dc:	68f8      	ldr	r0, [r7, #12]
 80151de:	f000 fafb 	bl	80157d8 <etharp_request_dst>
 80151e2:	4603      	mov	r3, r0
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d109      	bne.n	80151fc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80151e8:	79fa      	ldrb	r2, [r7, #7]
 80151ea:	4911      	ldr	r1, [pc, #68]	; (8015230 <etharp_output_to_arp_index+0x124>)
 80151ec:	4613      	mov	r3, r2
 80151ee:	005b      	lsls	r3, r3, #1
 80151f0:	4413      	add	r3, r2
 80151f2:	00db      	lsls	r3, r3, #3
 80151f4:	440b      	add	r3, r1
 80151f6:	3314      	adds	r3, #20
 80151f8:	2203      	movs	r2, #3
 80151fa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8015202:	79fa      	ldrb	r2, [r7, #7]
 8015204:	4613      	mov	r3, r2
 8015206:	005b      	lsls	r3, r3, #1
 8015208:	4413      	add	r3, r2
 801520a:	00db      	lsls	r3, r3, #3
 801520c:	3308      	adds	r3, #8
 801520e:	4a08      	ldr	r2, [pc, #32]	; (8015230 <etharp_output_to_arp_index+0x124>)
 8015210:	4413      	add	r3, r2
 8015212:	3304      	adds	r3, #4
 8015214:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015218:	9200      	str	r2, [sp, #0]
 801521a:	460a      	mov	r2, r1
 801521c:	68b9      	ldr	r1, [r7, #8]
 801521e:	68f8      	ldr	r0, [r7, #12]
 8015220:	f001 fe3a 	bl	8016e98 <ethernet_output>
 8015224:	4603      	mov	r3, r0
}
 8015226:	4618      	mov	r0, r3
 8015228:	3710      	adds	r7, #16
 801522a:	46bd      	mov	sp, r7
 801522c:	bd80      	pop	{r7, pc}
 801522e:	bf00      	nop
 8015230:	200016e8 	.word	0x200016e8
 8015234:	0801bb9c 	.word	0x0801bb9c
 8015238:	0801bd0c 	.word	0x0801bd0c
 801523c:	0801bc14 	.word	0x0801bc14

08015240 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015240:	b580      	push	{r7, lr}
 8015242:	b08a      	sub	sp, #40	; 0x28
 8015244:	af02      	add	r7, sp, #8
 8015246:	60f8      	str	r0, [r7, #12]
 8015248:	60b9      	str	r1, [r7, #8]
 801524a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	2b00      	cmp	r3, #0
 8015254:	d106      	bne.n	8015264 <etharp_output+0x24>
 8015256:	4b73      	ldr	r3, [pc, #460]	; (8015424 <etharp_output+0x1e4>)
 8015258:	f240 321e 	movw	r2, #798	; 0x31e
 801525c:	4972      	ldr	r1, [pc, #456]	; (8015428 <etharp_output+0x1e8>)
 801525e:	4873      	ldr	r0, [pc, #460]	; (801542c <etharp_output+0x1ec>)
 8015260:	f001 fec8 	bl	8016ff4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015264:	68bb      	ldr	r3, [r7, #8]
 8015266:	2b00      	cmp	r3, #0
 8015268:	d106      	bne.n	8015278 <etharp_output+0x38>
 801526a:	4b6e      	ldr	r3, [pc, #440]	; (8015424 <etharp_output+0x1e4>)
 801526c:	f240 321f 	movw	r2, #799	; 0x31f
 8015270:	496f      	ldr	r1, [pc, #444]	; (8015430 <etharp_output+0x1f0>)
 8015272:	486e      	ldr	r0, [pc, #440]	; (801542c <etharp_output+0x1ec>)
 8015274:	f001 febe 	bl	8016ff4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	2b00      	cmp	r3, #0
 801527c:	d106      	bne.n	801528c <etharp_output+0x4c>
 801527e:	4b69      	ldr	r3, [pc, #420]	; (8015424 <etharp_output+0x1e4>)
 8015280:	f44f 7248 	mov.w	r2, #800	; 0x320
 8015284:	496b      	ldr	r1, [pc, #428]	; (8015434 <etharp_output+0x1f4>)
 8015286:	4869      	ldr	r0, [pc, #420]	; (801542c <etharp_output+0x1ec>)
 8015288:	f001 feb4 	bl	8016ff4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	681b      	ldr	r3, [r3, #0]
 8015290:	68f9      	ldr	r1, [r7, #12]
 8015292:	4618      	mov	r0, r3
 8015294:	f000 fef8 	bl	8016088 <ip4_addr_isbroadcast_u32>
 8015298:	4603      	mov	r3, r0
 801529a:	2b00      	cmp	r3, #0
 801529c:	d002      	beq.n	80152a4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801529e:	4b66      	ldr	r3, [pc, #408]	; (8015438 <etharp_output+0x1f8>)
 80152a0:	61fb      	str	r3, [r7, #28]
 80152a2:	e0af      	b.n	8015404 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	681b      	ldr	r3, [r3, #0]
 80152a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80152ac:	2be0      	cmp	r3, #224	; 0xe0
 80152ae:	d118      	bne.n	80152e2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80152b0:	2301      	movs	r3, #1
 80152b2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80152b4:	2300      	movs	r3, #0
 80152b6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80152b8:	235e      	movs	r3, #94	; 0x5e
 80152ba:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	3301      	adds	r3, #1
 80152c0:	781b      	ldrb	r3, [r3, #0]
 80152c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80152c6:	b2db      	uxtb	r3, r3
 80152c8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	3302      	adds	r3, #2
 80152ce:	781b      	ldrb	r3, [r3, #0]
 80152d0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	3303      	adds	r3, #3
 80152d6:	781b      	ldrb	r3, [r3, #0]
 80152d8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80152da:	f107 0310 	add.w	r3, r7, #16
 80152de:	61fb      	str	r3, [r7, #28]
 80152e0:	e090      	b.n	8015404 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	681a      	ldr	r2, [r3, #0]
 80152e6:	68fb      	ldr	r3, [r7, #12]
 80152e8:	3304      	adds	r3, #4
 80152ea:	681b      	ldr	r3, [r3, #0]
 80152ec:	405a      	eors	r2, r3
 80152ee:	68fb      	ldr	r3, [r7, #12]
 80152f0:	3308      	adds	r3, #8
 80152f2:	681b      	ldr	r3, [r3, #0]
 80152f4:	4013      	ands	r3, r2
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d012      	beq.n	8015320 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	681b      	ldr	r3, [r3, #0]
 80152fe:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015300:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8015304:	4293      	cmp	r3, r2
 8015306:	d00b      	beq.n	8015320 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8015308:	68fb      	ldr	r3, [r7, #12]
 801530a:	330c      	adds	r3, #12
 801530c:	681b      	ldr	r3, [r3, #0]
 801530e:	2b00      	cmp	r3, #0
 8015310:	d003      	beq.n	801531a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	330c      	adds	r3, #12
 8015316:	61bb      	str	r3, [r7, #24]
 8015318:	e002      	b.n	8015320 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801531a:	f06f 0303 	mvn.w	r3, #3
 801531e:	e07d      	b.n	801541c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015320:	4b46      	ldr	r3, [pc, #280]	; (801543c <etharp_output+0x1fc>)
 8015322:	781b      	ldrb	r3, [r3, #0]
 8015324:	4619      	mov	r1, r3
 8015326:	4a46      	ldr	r2, [pc, #280]	; (8015440 <etharp_output+0x200>)
 8015328:	460b      	mov	r3, r1
 801532a:	005b      	lsls	r3, r3, #1
 801532c:	440b      	add	r3, r1
 801532e:	00db      	lsls	r3, r3, #3
 8015330:	4413      	add	r3, r2
 8015332:	3314      	adds	r3, #20
 8015334:	781b      	ldrb	r3, [r3, #0]
 8015336:	2b01      	cmp	r3, #1
 8015338:	d925      	bls.n	8015386 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801533a:	4b40      	ldr	r3, [pc, #256]	; (801543c <etharp_output+0x1fc>)
 801533c:	781b      	ldrb	r3, [r3, #0]
 801533e:	4619      	mov	r1, r3
 8015340:	4a3f      	ldr	r2, [pc, #252]	; (8015440 <etharp_output+0x200>)
 8015342:	460b      	mov	r3, r1
 8015344:	005b      	lsls	r3, r3, #1
 8015346:	440b      	add	r3, r1
 8015348:	00db      	lsls	r3, r3, #3
 801534a:	4413      	add	r3, r2
 801534c:	3308      	adds	r3, #8
 801534e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015350:	68fa      	ldr	r2, [r7, #12]
 8015352:	429a      	cmp	r2, r3
 8015354:	d117      	bne.n	8015386 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8015356:	69bb      	ldr	r3, [r7, #24]
 8015358:	681a      	ldr	r2, [r3, #0]
 801535a:	4b38      	ldr	r3, [pc, #224]	; (801543c <etharp_output+0x1fc>)
 801535c:	781b      	ldrb	r3, [r3, #0]
 801535e:	4618      	mov	r0, r3
 8015360:	4937      	ldr	r1, [pc, #220]	; (8015440 <etharp_output+0x200>)
 8015362:	4603      	mov	r3, r0
 8015364:	005b      	lsls	r3, r3, #1
 8015366:	4403      	add	r3, r0
 8015368:	00db      	lsls	r3, r3, #3
 801536a:	440b      	add	r3, r1
 801536c:	3304      	adds	r3, #4
 801536e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015370:	429a      	cmp	r2, r3
 8015372:	d108      	bne.n	8015386 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015374:	4b31      	ldr	r3, [pc, #196]	; (801543c <etharp_output+0x1fc>)
 8015376:	781b      	ldrb	r3, [r3, #0]
 8015378:	461a      	mov	r2, r3
 801537a:	68b9      	ldr	r1, [r7, #8]
 801537c:	68f8      	ldr	r0, [r7, #12]
 801537e:	f7ff fec5 	bl	801510c <etharp_output_to_arp_index>
 8015382:	4603      	mov	r3, r0
 8015384:	e04a      	b.n	801541c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015386:	2300      	movs	r3, #0
 8015388:	75fb      	strb	r3, [r7, #23]
 801538a:	e031      	b.n	80153f0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801538c:	7dfa      	ldrb	r2, [r7, #23]
 801538e:	492c      	ldr	r1, [pc, #176]	; (8015440 <etharp_output+0x200>)
 8015390:	4613      	mov	r3, r2
 8015392:	005b      	lsls	r3, r3, #1
 8015394:	4413      	add	r3, r2
 8015396:	00db      	lsls	r3, r3, #3
 8015398:	440b      	add	r3, r1
 801539a:	3314      	adds	r3, #20
 801539c:	781b      	ldrb	r3, [r3, #0]
 801539e:	2b01      	cmp	r3, #1
 80153a0:	d923      	bls.n	80153ea <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80153a2:	7dfa      	ldrb	r2, [r7, #23]
 80153a4:	4926      	ldr	r1, [pc, #152]	; (8015440 <etharp_output+0x200>)
 80153a6:	4613      	mov	r3, r2
 80153a8:	005b      	lsls	r3, r3, #1
 80153aa:	4413      	add	r3, r2
 80153ac:	00db      	lsls	r3, r3, #3
 80153ae:	440b      	add	r3, r1
 80153b0:	3308      	adds	r3, #8
 80153b2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80153b4:	68fa      	ldr	r2, [r7, #12]
 80153b6:	429a      	cmp	r2, r3
 80153b8:	d117      	bne.n	80153ea <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80153ba:	69bb      	ldr	r3, [r7, #24]
 80153bc:	6819      	ldr	r1, [r3, #0]
 80153be:	7dfa      	ldrb	r2, [r7, #23]
 80153c0:	481f      	ldr	r0, [pc, #124]	; (8015440 <etharp_output+0x200>)
 80153c2:	4613      	mov	r3, r2
 80153c4:	005b      	lsls	r3, r3, #1
 80153c6:	4413      	add	r3, r2
 80153c8:	00db      	lsls	r3, r3, #3
 80153ca:	4403      	add	r3, r0
 80153cc:	3304      	adds	r3, #4
 80153ce:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80153d0:	4299      	cmp	r1, r3
 80153d2:	d10a      	bne.n	80153ea <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80153d4:	4a19      	ldr	r2, [pc, #100]	; (801543c <etharp_output+0x1fc>)
 80153d6:	7dfb      	ldrb	r3, [r7, #23]
 80153d8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80153da:	7dfb      	ldrb	r3, [r7, #23]
 80153dc:	461a      	mov	r2, r3
 80153de:	68b9      	ldr	r1, [r7, #8]
 80153e0:	68f8      	ldr	r0, [r7, #12]
 80153e2:	f7ff fe93 	bl	801510c <etharp_output_to_arp_index>
 80153e6:	4603      	mov	r3, r0
 80153e8:	e018      	b.n	801541c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80153ea:	7dfb      	ldrb	r3, [r7, #23]
 80153ec:	3301      	adds	r3, #1
 80153ee:	75fb      	strb	r3, [r7, #23]
 80153f0:	7dfb      	ldrb	r3, [r7, #23]
 80153f2:	2b09      	cmp	r3, #9
 80153f4:	d9ca      	bls.n	801538c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80153f6:	68ba      	ldr	r2, [r7, #8]
 80153f8:	69b9      	ldr	r1, [r7, #24]
 80153fa:	68f8      	ldr	r0, [r7, #12]
 80153fc:	f000 f822 	bl	8015444 <etharp_query>
 8015400:	4603      	mov	r3, r0
 8015402:	e00b      	b.n	801541c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8015404:	68fb      	ldr	r3, [r7, #12]
 8015406:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801540a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801540e:	9300      	str	r3, [sp, #0]
 8015410:	69fb      	ldr	r3, [r7, #28]
 8015412:	68b9      	ldr	r1, [r7, #8]
 8015414:	68f8      	ldr	r0, [r7, #12]
 8015416:	f001 fd3f 	bl	8016e98 <ethernet_output>
 801541a:	4603      	mov	r3, r0
}
 801541c:	4618      	mov	r0, r3
 801541e:	3720      	adds	r7, #32
 8015420:	46bd      	mov	sp, r7
 8015422:	bd80      	pop	{r7, pc}
 8015424:	0801bb9c 	.word	0x0801bb9c
 8015428:	0801bcec 	.word	0x0801bcec
 801542c:	0801bc14 	.word	0x0801bc14
 8015430:	0801bd3c 	.word	0x0801bd3c
 8015434:	0801bcdc 	.word	0x0801bcdc
 8015438:	08020358 	.word	0x08020358
 801543c:	200017d8 	.word	0x200017d8
 8015440:	200016e8 	.word	0x200016e8

08015444 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015444:	b580      	push	{r7, lr}
 8015446:	b08c      	sub	sp, #48	; 0x30
 8015448:	af02      	add	r7, sp, #8
 801544a:	60f8      	str	r0, [r7, #12]
 801544c:	60b9      	str	r1, [r7, #8]
 801544e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	3326      	adds	r3, #38	; 0x26
 8015454:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8015456:	23ff      	movs	r3, #255	; 0xff
 8015458:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801545c:	2300      	movs	r3, #0
 801545e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015460:	68bb      	ldr	r3, [r7, #8]
 8015462:	681b      	ldr	r3, [r3, #0]
 8015464:	68f9      	ldr	r1, [r7, #12]
 8015466:	4618      	mov	r0, r3
 8015468:	f000 fe0e 	bl	8016088 <ip4_addr_isbroadcast_u32>
 801546c:	4603      	mov	r3, r0
 801546e:	2b00      	cmp	r3, #0
 8015470:	d10c      	bne.n	801548c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015472:	68bb      	ldr	r3, [r7, #8]
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801547a:	2be0      	cmp	r3, #224	; 0xe0
 801547c:	d006      	beq.n	801548c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801547e:	68bb      	ldr	r3, [r7, #8]
 8015480:	2b00      	cmp	r3, #0
 8015482:	d003      	beq.n	801548c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015484:	68bb      	ldr	r3, [r7, #8]
 8015486:	681b      	ldr	r3, [r3, #0]
 8015488:	2b00      	cmp	r3, #0
 801548a:	d102      	bne.n	8015492 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801548c:	f06f 030f 	mvn.w	r3, #15
 8015490:	e101      	b.n	8015696 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015492:	68fa      	ldr	r2, [r7, #12]
 8015494:	2101      	movs	r1, #1
 8015496:	68b8      	ldr	r0, [r7, #8]
 8015498:	f7ff fb60 	bl	8014b5c <etharp_find_entry>
 801549c:	4603      	mov	r3, r0
 801549e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80154a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	da02      	bge.n	80154ae <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80154a8:	8a7b      	ldrh	r3, [r7, #18]
 80154aa:	b25b      	sxtb	r3, r3
 80154ac:	e0f3      	b.n	8015696 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80154ae:	8a7b      	ldrh	r3, [r7, #18]
 80154b0:	2b7e      	cmp	r3, #126	; 0x7e
 80154b2:	d906      	bls.n	80154c2 <etharp_query+0x7e>
 80154b4:	4b7a      	ldr	r3, [pc, #488]	; (80156a0 <etharp_query+0x25c>)
 80154b6:	f240 32c1 	movw	r2, #961	; 0x3c1
 80154ba:	497a      	ldr	r1, [pc, #488]	; (80156a4 <etharp_query+0x260>)
 80154bc:	487a      	ldr	r0, [pc, #488]	; (80156a8 <etharp_query+0x264>)
 80154be:	f001 fd99 	bl	8016ff4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80154c2:	8a7b      	ldrh	r3, [r7, #18]
 80154c4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80154c6:	7c7a      	ldrb	r2, [r7, #17]
 80154c8:	4978      	ldr	r1, [pc, #480]	; (80156ac <etharp_query+0x268>)
 80154ca:	4613      	mov	r3, r2
 80154cc:	005b      	lsls	r3, r3, #1
 80154ce:	4413      	add	r3, r2
 80154d0:	00db      	lsls	r3, r3, #3
 80154d2:	440b      	add	r3, r1
 80154d4:	3314      	adds	r3, #20
 80154d6:	781b      	ldrb	r3, [r3, #0]
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d115      	bne.n	8015508 <etharp_query+0xc4>
    is_new_entry = 1;
 80154dc:	2301      	movs	r3, #1
 80154de:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80154e0:	7c7a      	ldrb	r2, [r7, #17]
 80154e2:	4972      	ldr	r1, [pc, #456]	; (80156ac <etharp_query+0x268>)
 80154e4:	4613      	mov	r3, r2
 80154e6:	005b      	lsls	r3, r3, #1
 80154e8:	4413      	add	r3, r2
 80154ea:	00db      	lsls	r3, r3, #3
 80154ec:	440b      	add	r3, r1
 80154ee:	3314      	adds	r3, #20
 80154f0:	2201      	movs	r2, #1
 80154f2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80154f4:	7c7a      	ldrb	r2, [r7, #17]
 80154f6:	496d      	ldr	r1, [pc, #436]	; (80156ac <etharp_query+0x268>)
 80154f8:	4613      	mov	r3, r2
 80154fa:	005b      	lsls	r3, r3, #1
 80154fc:	4413      	add	r3, r2
 80154fe:	00db      	lsls	r3, r3, #3
 8015500:	440b      	add	r3, r1
 8015502:	3308      	adds	r3, #8
 8015504:	68fa      	ldr	r2, [r7, #12]
 8015506:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015508:	7c7a      	ldrb	r2, [r7, #17]
 801550a:	4968      	ldr	r1, [pc, #416]	; (80156ac <etharp_query+0x268>)
 801550c:	4613      	mov	r3, r2
 801550e:	005b      	lsls	r3, r3, #1
 8015510:	4413      	add	r3, r2
 8015512:	00db      	lsls	r3, r3, #3
 8015514:	440b      	add	r3, r1
 8015516:	3314      	adds	r3, #20
 8015518:	781b      	ldrb	r3, [r3, #0]
 801551a:	2b01      	cmp	r3, #1
 801551c:	d011      	beq.n	8015542 <etharp_query+0xfe>
 801551e:	7c7a      	ldrb	r2, [r7, #17]
 8015520:	4962      	ldr	r1, [pc, #392]	; (80156ac <etharp_query+0x268>)
 8015522:	4613      	mov	r3, r2
 8015524:	005b      	lsls	r3, r3, #1
 8015526:	4413      	add	r3, r2
 8015528:	00db      	lsls	r3, r3, #3
 801552a:	440b      	add	r3, r1
 801552c:	3314      	adds	r3, #20
 801552e:	781b      	ldrb	r3, [r3, #0]
 8015530:	2b01      	cmp	r3, #1
 8015532:	d806      	bhi.n	8015542 <etharp_query+0xfe>
 8015534:	4b5a      	ldr	r3, [pc, #360]	; (80156a0 <etharp_query+0x25c>)
 8015536:	f240 32cd 	movw	r2, #973	; 0x3cd
 801553a:	495d      	ldr	r1, [pc, #372]	; (80156b0 <etharp_query+0x26c>)
 801553c:	485a      	ldr	r0, [pc, #360]	; (80156a8 <etharp_query+0x264>)
 801553e:	f001 fd59 	bl	8016ff4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015542:	6a3b      	ldr	r3, [r7, #32]
 8015544:	2b00      	cmp	r3, #0
 8015546:	d102      	bne.n	801554e <etharp_query+0x10a>
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	2b00      	cmp	r3, #0
 801554c:	d10c      	bne.n	8015568 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801554e:	68b9      	ldr	r1, [r7, #8]
 8015550:	68f8      	ldr	r0, [r7, #12]
 8015552:	f000 f963 	bl	801581c <etharp_request>
 8015556:	4603      	mov	r3, r0
 8015558:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	2b00      	cmp	r3, #0
 8015560:	d102      	bne.n	8015568 <etharp_query+0x124>
      return result;
 8015562:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015566:	e096      	b.n	8015696 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	2b00      	cmp	r3, #0
 801556c:	d106      	bne.n	801557c <etharp_query+0x138>
 801556e:	4b4c      	ldr	r3, [pc, #304]	; (80156a0 <etharp_query+0x25c>)
 8015570:	f240 32e1 	movw	r2, #993	; 0x3e1
 8015574:	494f      	ldr	r1, [pc, #316]	; (80156b4 <etharp_query+0x270>)
 8015576:	484c      	ldr	r0, [pc, #304]	; (80156a8 <etharp_query+0x264>)
 8015578:	f001 fd3c 	bl	8016ff4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801557c:	7c7a      	ldrb	r2, [r7, #17]
 801557e:	494b      	ldr	r1, [pc, #300]	; (80156ac <etharp_query+0x268>)
 8015580:	4613      	mov	r3, r2
 8015582:	005b      	lsls	r3, r3, #1
 8015584:	4413      	add	r3, r2
 8015586:	00db      	lsls	r3, r3, #3
 8015588:	440b      	add	r3, r1
 801558a:	3314      	adds	r3, #20
 801558c:	781b      	ldrb	r3, [r3, #0]
 801558e:	2b01      	cmp	r3, #1
 8015590:	d917      	bls.n	80155c2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8015592:	4a49      	ldr	r2, [pc, #292]	; (80156b8 <etharp_query+0x274>)
 8015594:	7c7b      	ldrb	r3, [r7, #17]
 8015596:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015598:	7c7a      	ldrb	r2, [r7, #17]
 801559a:	4613      	mov	r3, r2
 801559c:	005b      	lsls	r3, r3, #1
 801559e:	4413      	add	r3, r2
 80155a0:	00db      	lsls	r3, r3, #3
 80155a2:	3308      	adds	r3, #8
 80155a4:	4a41      	ldr	r2, [pc, #260]	; (80156ac <etharp_query+0x268>)
 80155a6:	4413      	add	r3, r2
 80155a8:	3304      	adds	r3, #4
 80155aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80155ae:	9200      	str	r2, [sp, #0]
 80155b0:	697a      	ldr	r2, [r7, #20]
 80155b2:	6879      	ldr	r1, [r7, #4]
 80155b4:	68f8      	ldr	r0, [r7, #12]
 80155b6:	f001 fc6f 	bl	8016e98 <ethernet_output>
 80155ba:	4603      	mov	r3, r0
 80155bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80155c0:	e067      	b.n	8015692 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80155c2:	7c7a      	ldrb	r2, [r7, #17]
 80155c4:	4939      	ldr	r1, [pc, #228]	; (80156ac <etharp_query+0x268>)
 80155c6:	4613      	mov	r3, r2
 80155c8:	005b      	lsls	r3, r3, #1
 80155ca:	4413      	add	r3, r2
 80155cc:	00db      	lsls	r3, r3, #3
 80155ce:	440b      	add	r3, r1
 80155d0:	3314      	adds	r3, #20
 80155d2:	781b      	ldrb	r3, [r3, #0]
 80155d4:	2b01      	cmp	r3, #1
 80155d6:	d15c      	bne.n	8015692 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80155d8:	2300      	movs	r3, #0
 80155da:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	61fb      	str	r3, [r7, #28]
    while (p) {
 80155e0:	e01c      	b.n	801561c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80155e2:	69fb      	ldr	r3, [r7, #28]
 80155e4:	895a      	ldrh	r2, [r3, #10]
 80155e6:	69fb      	ldr	r3, [r7, #28]
 80155e8:	891b      	ldrh	r3, [r3, #8]
 80155ea:	429a      	cmp	r2, r3
 80155ec:	d10a      	bne.n	8015604 <etharp_query+0x1c0>
 80155ee:	69fb      	ldr	r3, [r7, #28]
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d006      	beq.n	8015604 <etharp_query+0x1c0>
 80155f6:	4b2a      	ldr	r3, [pc, #168]	; (80156a0 <etharp_query+0x25c>)
 80155f8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80155fc:	492f      	ldr	r1, [pc, #188]	; (80156bc <etharp_query+0x278>)
 80155fe:	482a      	ldr	r0, [pc, #168]	; (80156a8 <etharp_query+0x264>)
 8015600:	f001 fcf8 	bl	8016ff4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8015604:	69fb      	ldr	r3, [r7, #28]
 8015606:	7b1b      	ldrb	r3, [r3, #12]
 8015608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801560c:	2b00      	cmp	r3, #0
 801560e:	d002      	beq.n	8015616 <etharp_query+0x1d2>
        copy_needed = 1;
 8015610:	2301      	movs	r3, #1
 8015612:	61bb      	str	r3, [r7, #24]
        break;
 8015614:	e005      	b.n	8015622 <etharp_query+0x1de>
      }
      p = p->next;
 8015616:	69fb      	ldr	r3, [r7, #28]
 8015618:	681b      	ldr	r3, [r3, #0]
 801561a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801561c:	69fb      	ldr	r3, [r7, #28]
 801561e:	2b00      	cmp	r3, #0
 8015620:	d1df      	bne.n	80155e2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8015622:	69bb      	ldr	r3, [r7, #24]
 8015624:	2b00      	cmp	r3, #0
 8015626:	d007      	beq.n	8015638 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8015628:	687a      	ldr	r2, [r7, #4]
 801562a:	f44f 7120 	mov.w	r1, #640	; 0x280
 801562e:	200e      	movs	r0, #14
 8015630:	f7f8 fe2e 	bl	800e290 <pbuf_clone>
 8015634:	61f8      	str	r0, [r7, #28]
 8015636:	e004      	b.n	8015642 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801563c:	69f8      	ldr	r0, [r7, #28]
 801563e:	f7f8 fc6b 	bl	800df18 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015642:	69fb      	ldr	r3, [r7, #28]
 8015644:	2b00      	cmp	r3, #0
 8015646:	d021      	beq.n	801568c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8015648:	7c7a      	ldrb	r2, [r7, #17]
 801564a:	4918      	ldr	r1, [pc, #96]	; (80156ac <etharp_query+0x268>)
 801564c:	4613      	mov	r3, r2
 801564e:	005b      	lsls	r3, r3, #1
 8015650:	4413      	add	r3, r2
 8015652:	00db      	lsls	r3, r3, #3
 8015654:	440b      	add	r3, r1
 8015656:	681b      	ldr	r3, [r3, #0]
 8015658:	2b00      	cmp	r3, #0
 801565a:	d00a      	beq.n	8015672 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801565c:	7c7a      	ldrb	r2, [r7, #17]
 801565e:	4913      	ldr	r1, [pc, #76]	; (80156ac <etharp_query+0x268>)
 8015660:	4613      	mov	r3, r2
 8015662:	005b      	lsls	r3, r3, #1
 8015664:	4413      	add	r3, r2
 8015666:	00db      	lsls	r3, r3, #3
 8015668:	440b      	add	r3, r1
 801566a:	681b      	ldr	r3, [r3, #0]
 801566c:	4618      	mov	r0, r3
 801566e:	f7f8 fbb3 	bl	800ddd8 <pbuf_free>
      }
      arp_table[i].q = p;
 8015672:	7c7a      	ldrb	r2, [r7, #17]
 8015674:	490d      	ldr	r1, [pc, #52]	; (80156ac <etharp_query+0x268>)
 8015676:	4613      	mov	r3, r2
 8015678:	005b      	lsls	r3, r3, #1
 801567a:	4413      	add	r3, r2
 801567c:	00db      	lsls	r3, r3, #3
 801567e:	440b      	add	r3, r1
 8015680:	69fa      	ldr	r2, [r7, #28]
 8015682:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015684:	2300      	movs	r3, #0
 8015686:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801568a:	e002      	b.n	8015692 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801568c:	23ff      	movs	r3, #255	; 0xff
 801568e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8015692:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8015696:	4618      	mov	r0, r3
 8015698:	3728      	adds	r7, #40	; 0x28
 801569a:	46bd      	mov	sp, r7
 801569c:	bd80      	pop	{r7, pc}
 801569e:	bf00      	nop
 80156a0:	0801bb9c 	.word	0x0801bb9c
 80156a4:	0801bd48 	.word	0x0801bd48
 80156a8:	0801bc14 	.word	0x0801bc14
 80156ac:	200016e8 	.word	0x200016e8
 80156b0:	0801bd58 	.word	0x0801bd58
 80156b4:	0801bd3c 	.word	0x0801bd3c
 80156b8:	200017d8 	.word	0x200017d8
 80156bc:	0801bd80 	.word	0x0801bd80

080156c0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80156c0:	b580      	push	{r7, lr}
 80156c2:	b08a      	sub	sp, #40	; 0x28
 80156c4:	af02      	add	r7, sp, #8
 80156c6:	60f8      	str	r0, [r7, #12]
 80156c8:	60b9      	str	r1, [r7, #8]
 80156ca:	607a      	str	r2, [r7, #4]
 80156cc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80156ce:	2300      	movs	r3, #0
 80156d0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80156d2:	68fb      	ldr	r3, [r7, #12]
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d106      	bne.n	80156e6 <etharp_raw+0x26>
 80156d8:	4b3a      	ldr	r3, [pc, #232]	; (80157c4 <etharp_raw+0x104>)
 80156da:	f240 4257 	movw	r2, #1111	; 0x457
 80156de:	493a      	ldr	r1, [pc, #232]	; (80157c8 <etharp_raw+0x108>)
 80156e0:	483a      	ldr	r0, [pc, #232]	; (80157cc <etharp_raw+0x10c>)
 80156e2:	f001 fc87 	bl	8016ff4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80156e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80156ea:	211c      	movs	r1, #28
 80156ec:	200e      	movs	r0, #14
 80156ee:	f7f8 f88f 	bl	800d810 <pbuf_alloc>
 80156f2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80156f4:	69bb      	ldr	r3, [r7, #24]
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d102      	bne.n	8015700 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80156fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80156fe:	e05d      	b.n	80157bc <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015700:	69bb      	ldr	r3, [r7, #24]
 8015702:	895b      	ldrh	r3, [r3, #10]
 8015704:	2b1b      	cmp	r3, #27
 8015706:	d806      	bhi.n	8015716 <etharp_raw+0x56>
 8015708:	4b2e      	ldr	r3, [pc, #184]	; (80157c4 <etharp_raw+0x104>)
 801570a:	f240 4262 	movw	r2, #1122	; 0x462
 801570e:	4930      	ldr	r1, [pc, #192]	; (80157d0 <etharp_raw+0x110>)
 8015710:	482e      	ldr	r0, [pc, #184]	; (80157cc <etharp_raw+0x10c>)
 8015712:	f001 fc6f 	bl	8016ff4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8015716:	69bb      	ldr	r3, [r7, #24]
 8015718:	685b      	ldr	r3, [r3, #4]
 801571a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801571c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801571e:	4618      	mov	r0, r3
 8015720:	f7f6 ffc8 	bl	800c6b4 <lwip_htons>
 8015724:	4603      	mov	r3, r0
 8015726:	461a      	mov	r2, r3
 8015728:	697b      	ldr	r3, [r7, #20]
 801572a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015732:	2b06      	cmp	r3, #6
 8015734:	d006      	beq.n	8015744 <etharp_raw+0x84>
 8015736:	4b23      	ldr	r3, [pc, #140]	; (80157c4 <etharp_raw+0x104>)
 8015738:	f240 4269 	movw	r2, #1129	; 0x469
 801573c:	4925      	ldr	r1, [pc, #148]	; (80157d4 <etharp_raw+0x114>)
 801573e:	4823      	ldr	r0, [pc, #140]	; (80157cc <etharp_raw+0x10c>)
 8015740:	f001 fc58 	bl	8016ff4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8015744:	697b      	ldr	r3, [r7, #20]
 8015746:	3308      	adds	r3, #8
 8015748:	2206      	movs	r2, #6
 801574a:	6839      	ldr	r1, [r7, #0]
 801574c:	4618      	mov	r0, r3
 801574e:	f001 fc21 	bl	8016f94 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8015752:	697b      	ldr	r3, [r7, #20]
 8015754:	3312      	adds	r3, #18
 8015756:	2206      	movs	r2, #6
 8015758:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801575a:	4618      	mov	r0, r3
 801575c:	f001 fc1a 	bl	8016f94 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015760:	697b      	ldr	r3, [r7, #20]
 8015762:	330e      	adds	r3, #14
 8015764:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015766:	6812      	ldr	r2, [r2, #0]
 8015768:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801576a:	697b      	ldr	r3, [r7, #20]
 801576c:	3318      	adds	r3, #24
 801576e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015770:	6812      	ldr	r2, [r2, #0]
 8015772:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8015774:	697b      	ldr	r3, [r7, #20]
 8015776:	2200      	movs	r2, #0
 8015778:	701a      	strb	r2, [r3, #0]
 801577a:	2200      	movs	r2, #0
 801577c:	f042 0201 	orr.w	r2, r2, #1
 8015780:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015782:	697b      	ldr	r3, [r7, #20]
 8015784:	2200      	movs	r2, #0
 8015786:	f042 0208 	orr.w	r2, r2, #8
 801578a:	709a      	strb	r2, [r3, #2]
 801578c:	2200      	movs	r2, #0
 801578e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015790:	697b      	ldr	r3, [r7, #20]
 8015792:	2206      	movs	r2, #6
 8015794:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8015796:	697b      	ldr	r3, [r7, #20]
 8015798:	2204      	movs	r2, #4
 801579a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801579c:	f640 0306 	movw	r3, #2054	; 0x806
 80157a0:	9300      	str	r3, [sp, #0]
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	68ba      	ldr	r2, [r7, #8]
 80157a6:	69b9      	ldr	r1, [r7, #24]
 80157a8:	68f8      	ldr	r0, [r7, #12]
 80157aa:	f001 fb75 	bl	8016e98 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80157ae:	69b8      	ldr	r0, [r7, #24]
 80157b0:	f7f8 fb12 	bl	800ddd8 <pbuf_free>
  p = NULL;
 80157b4:	2300      	movs	r3, #0
 80157b6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80157b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80157bc:	4618      	mov	r0, r3
 80157be:	3720      	adds	r7, #32
 80157c0:	46bd      	mov	sp, r7
 80157c2:	bd80      	pop	{r7, pc}
 80157c4:	0801bb9c 	.word	0x0801bb9c
 80157c8:	0801bcec 	.word	0x0801bcec
 80157cc:	0801bc14 	.word	0x0801bc14
 80157d0:	0801bd9c 	.word	0x0801bd9c
 80157d4:	0801bdd0 	.word	0x0801bdd0

080157d8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80157d8:	b580      	push	{r7, lr}
 80157da:	b088      	sub	sp, #32
 80157dc:	af04      	add	r7, sp, #16
 80157de:	60f8      	str	r0, [r7, #12]
 80157e0:	60b9      	str	r1, [r7, #8]
 80157e2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80157e4:	68fb      	ldr	r3, [r7, #12]
 80157e6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80157ea:	68fb      	ldr	r3, [r7, #12]
 80157ec:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80157f0:	68fb      	ldr	r3, [r7, #12]
 80157f2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80157f4:	2201      	movs	r2, #1
 80157f6:	9203      	str	r2, [sp, #12]
 80157f8:	68ba      	ldr	r2, [r7, #8]
 80157fa:	9202      	str	r2, [sp, #8]
 80157fc:	4a06      	ldr	r2, [pc, #24]	; (8015818 <etharp_request_dst+0x40>)
 80157fe:	9201      	str	r2, [sp, #4]
 8015800:	9300      	str	r3, [sp, #0]
 8015802:	4603      	mov	r3, r0
 8015804:	687a      	ldr	r2, [r7, #4]
 8015806:	68f8      	ldr	r0, [r7, #12]
 8015808:	f7ff ff5a 	bl	80156c0 <etharp_raw>
 801580c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801580e:	4618      	mov	r0, r3
 8015810:	3710      	adds	r7, #16
 8015812:	46bd      	mov	sp, r7
 8015814:	bd80      	pop	{r7, pc}
 8015816:	bf00      	nop
 8015818:	08020360 	.word	0x08020360

0801581c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801581c:	b580      	push	{r7, lr}
 801581e:	b082      	sub	sp, #8
 8015820:	af00      	add	r7, sp, #0
 8015822:	6078      	str	r0, [r7, #4]
 8015824:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8015826:	4a05      	ldr	r2, [pc, #20]	; (801583c <etharp_request+0x20>)
 8015828:	6839      	ldr	r1, [r7, #0]
 801582a:	6878      	ldr	r0, [r7, #4]
 801582c:	f7ff ffd4 	bl	80157d8 <etharp_request_dst>
 8015830:	4603      	mov	r3, r0
}
 8015832:	4618      	mov	r0, r3
 8015834:	3708      	adds	r7, #8
 8015836:	46bd      	mov	sp, r7
 8015838:	bd80      	pop	{r7, pc}
 801583a:	bf00      	nop
 801583c:	08020358 	.word	0x08020358

08015840 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015840:	b580      	push	{r7, lr}
 8015842:	b08e      	sub	sp, #56	; 0x38
 8015844:	af04      	add	r7, sp, #16
 8015846:	6078      	str	r0, [r7, #4]
 8015848:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801584a:	4b79      	ldr	r3, [pc, #484]	; (8015a30 <icmp_input+0x1f0>)
 801584c:	689b      	ldr	r3, [r3, #8]
 801584e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015852:	781b      	ldrb	r3, [r3, #0]
 8015854:	f003 030f 	and.w	r3, r3, #15
 8015858:	b2db      	uxtb	r3, r3
 801585a:	009b      	lsls	r3, r3, #2
 801585c:	b2db      	uxtb	r3, r3
 801585e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8015860:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015862:	2b13      	cmp	r3, #19
 8015864:	f240 80cd 	bls.w	8015a02 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	895b      	ldrh	r3, [r3, #10]
 801586c:	2b03      	cmp	r3, #3
 801586e:	f240 80ca 	bls.w	8015a06 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	685b      	ldr	r3, [r3, #4]
 8015876:	781b      	ldrb	r3, [r3, #0]
 8015878:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801587c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8015880:	2b00      	cmp	r3, #0
 8015882:	f000 80b7 	beq.w	80159f4 <icmp_input+0x1b4>
 8015886:	2b08      	cmp	r3, #8
 8015888:	f040 80b7 	bne.w	80159fa <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801588c:	4b69      	ldr	r3, [pc, #420]	; (8015a34 <icmp_input+0x1f4>)
 801588e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015890:	4b67      	ldr	r3, [pc, #412]	; (8015a30 <icmp_input+0x1f0>)
 8015892:	695b      	ldr	r3, [r3, #20]
 8015894:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015898:	2be0      	cmp	r3, #224	; 0xe0
 801589a:	f000 80bb 	beq.w	8015a14 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801589e:	4b64      	ldr	r3, [pc, #400]	; (8015a30 <icmp_input+0x1f0>)
 80158a0:	695b      	ldr	r3, [r3, #20]
 80158a2:	4a63      	ldr	r2, [pc, #396]	; (8015a30 <icmp_input+0x1f0>)
 80158a4:	6812      	ldr	r2, [r2, #0]
 80158a6:	4611      	mov	r1, r2
 80158a8:	4618      	mov	r0, r3
 80158aa:	f000 fbed 	bl	8016088 <ip4_addr_isbroadcast_u32>
 80158ae:	4603      	mov	r3, r0
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	f040 80b1 	bne.w	8015a18 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	891b      	ldrh	r3, [r3, #8]
 80158ba:	2b07      	cmp	r3, #7
 80158bc:	f240 80a5 	bls.w	8015a0a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80158c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80158c2:	330e      	adds	r3, #14
 80158c4:	4619      	mov	r1, r3
 80158c6:	6878      	ldr	r0, [r7, #4]
 80158c8:	f7f8 f9f0 	bl	800dcac <pbuf_add_header>
 80158cc:	4603      	mov	r3, r0
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	d04b      	beq.n	801596a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	891a      	ldrh	r2, [r3, #8]
 80158d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80158d8:	4413      	add	r3, r2
 80158da:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	891b      	ldrh	r3, [r3, #8]
 80158e0:	8b7a      	ldrh	r2, [r7, #26]
 80158e2:	429a      	cmp	r2, r3
 80158e4:	f0c0 809a 	bcc.w	8015a1c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80158e8:	8b7b      	ldrh	r3, [r7, #26]
 80158ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 80158ee:	4619      	mov	r1, r3
 80158f0:	200e      	movs	r0, #14
 80158f2:	f7f7 ff8d 	bl	800d810 <pbuf_alloc>
 80158f6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80158f8:	697b      	ldr	r3, [r7, #20]
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	f000 8090 	beq.w	8015a20 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015900:	697b      	ldr	r3, [r7, #20]
 8015902:	895b      	ldrh	r3, [r3, #10]
 8015904:	461a      	mov	r2, r3
 8015906:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015908:	3308      	adds	r3, #8
 801590a:	429a      	cmp	r2, r3
 801590c:	d203      	bcs.n	8015916 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801590e:	6978      	ldr	r0, [r7, #20]
 8015910:	f7f8 fa62 	bl	800ddd8 <pbuf_free>
          goto icmperr;
 8015914:	e085      	b.n	8015a22 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8015916:	697b      	ldr	r3, [r7, #20]
 8015918:	685b      	ldr	r3, [r3, #4]
 801591a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801591c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801591e:	4618      	mov	r0, r3
 8015920:	f001 fb38 	bl	8016f94 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8015924:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015926:	4619      	mov	r1, r3
 8015928:	6978      	ldr	r0, [r7, #20]
 801592a:	f7f8 f9cf 	bl	800dccc <pbuf_remove_header>
 801592e:	4603      	mov	r3, r0
 8015930:	2b00      	cmp	r3, #0
 8015932:	d009      	beq.n	8015948 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015934:	4b40      	ldr	r3, [pc, #256]	; (8015a38 <icmp_input+0x1f8>)
 8015936:	22b6      	movs	r2, #182	; 0xb6
 8015938:	4940      	ldr	r1, [pc, #256]	; (8015a3c <icmp_input+0x1fc>)
 801593a:	4841      	ldr	r0, [pc, #260]	; (8015a40 <icmp_input+0x200>)
 801593c:	f001 fb5a 	bl	8016ff4 <iprintf>
          pbuf_free(r);
 8015940:	6978      	ldr	r0, [r7, #20]
 8015942:	f7f8 fa49 	bl	800ddd8 <pbuf_free>
          goto icmperr;
 8015946:	e06c      	b.n	8015a22 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8015948:	6879      	ldr	r1, [r7, #4]
 801594a:	6978      	ldr	r0, [r7, #20]
 801594c:	f7f8 fb5c 	bl	800e008 <pbuf_copy>
 8015950:	4603      	mov	r3, r0
 8015952:	2b00      	cmp	r3, #0
 8015954:	d003      	beq.n	801595e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8015956:	6978      	ldr	r0, [r7, #20]
 8015958:	f7f8 fa3e 	bl	800ddd8 <pbuf_free>
          goto icmperr;
 801595c:	e061      	b.n	8015a22 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801595e:	6878      	ldr	r0, [r7, #4]
 8015960:	f7f8 fa3a 	bl	800ddd8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8015964:	697b      	ldr	r3, [r7, #20]
 8015966:	607b      	str	r3, [r7, #4]
 8015968:	e00f      	b.n	801598a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801596a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801596c:	330e      	adds	r3, #14
 801596e:	4619      	mov	r1, r3
 8015970:	6878      	ldr	r0, [r7, #4]
 8015972:	f7f8 f9ab 	bl	800dccc <pbuf_remove_header>
 8015976:	4603      	mov	r3, r0
 8015978:	2b00      	cmp	r3, #0
 801597a:	d006      	beq.n	801598a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801597c:	4b2e      	ldr	r3, [pc, #184]	; (8015a38 <icmp_input+0x1f8>)
 801597e:	22c7      	movs	r2, #199	; 0xc7
 8015980:	4930      	ldr	r1, [pc, #192]	; (8015a44 <icmp_input+0x204>)
 8015982:	482f      	ldr	r0, [pc, #188]	; (8015a40 <icmp_input+0x200>)
 8015984:	f001 fb36 	bl	8016ff4 <iprintf>
          goto icmperr;
 8015988:	e04b      	b.n	8015a22 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	685b      	ldr	r3, [r3, #4]
 801598e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015990:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015992:	4619      	mov	r1, r3
 8015994:	6878      	ldr	r0, [r7, #4]
 8015996:	f7f8 f989 	bl	800dcac <pbuf_add_header>
 801599a:	4603      	mov	r3, r0
 801599c:	2b00      	cmp	r3, #0
 801599e:	d12b      	bne.n	80159f8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	685b      	ldr	r3, [r3, #4]
 80159a4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80159a6:	69fb      	ldr	r3, [r7, #28]
 80159a8:	681a      	ldr	r2, [r3, #0]
 80159aa:	68fb      	ldr	r3, [r7, #12]
 80159ac:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80159ae:	4b20      	ldr	r3, [pc, #128]	; (8015a30 <icmp_input+0x1f0>)
 80159b0:	691a      	ldr	r2, [r3, #16]
 80159b2:	68fb      	ldr	r3, [r7, #12]
 80159b4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80159b6:	693b      	ldr	r3, [r7, #16]
 80159b8:	2200      	movs	r2, #0
 80159ba:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80159bc:	693b      	ldr	r3, [r7, #16]
 80159be:	2200      	movs	r2, #0
 80159c0:	709a      	strb	r2, [r3, #2]
 80159c2:	2200      	movs	r2, #0
 80159c4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80159c6:	68fb      	ldr	r3, [r7, #12]
 80159c8:	22ff      	movs	r2, #255	; 0xff
 80159ca:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80159cc:	68fb      	ldr	r3, [r7, #12]
 80159ce:	2200      	movs	r2, #0
 80159d0:	729a      	strb	r2, [r3, #10]
 80159d2:	2200      	movs	r2, #0
 80159d4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80159d6:	683b      	ldr	r3, [r7, #0]
 80159d8:	9302      	str	r3, [sp, #8]
 80159da:	2301      	movs	r3, #1
 80159dc:	9301      	str	r3, [sp, #4]
 80159de:	2300      	movs	r3, #0
 80159e0:	9300      	str	r3, [sp, #0]
 80159e2:	23ff      	movs	r3, #255	; 0xff
 80159e4:	2200      	movs	r2, #0
 80159e6:	69f9      	ldr	r1, [r7, #28]
 80159e8:	6878      	ldr	r0, [r7, #4]
 80159ea:	f000 fa75 	bl	8015ed8 <ip4_output_if>
 80159ee:	4603      	mov	r3, r0
 80159f0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80159f2:	e001      	b.n	80159f8 <icmp_input+0x1b8>
      break;
 80159f4:	bf00      	nop
 80159f6:	e000      	b.n	80159fa <icmp_input+0x1ba>
      break;
 80159f8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80159fa:	6878      	ldr	r0, [r7, #4]
 80159fc:	f7f8 f9ec 	bl	800ddd8 <pbuf_free>
  return;
 8015a00:	e013      	b.n	8015a2a <icmp_input+0x1ea>
    goto lenerr;
 8015a02:	bf00      	nop
 8015a04:	e002      	b.n	8015a0c <icmp_input+0x1cc>
    goto lenerr;
 8015a06:	bf00      	nop
 8015a08:	e000      	b.n	8015a0c <icmp_input+0x1cc>
        goto lenerr;
 8015a0a:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015a0c:	6878      	ldr	r0, [r7, #4]
 8015a0e:	f7f8 f9e3 	bl	800ddd8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015a12:	e00a      	b.n	8015a2a <icmp_input+0x1ea>
        goto icmperr;
 8015a14:	bf00      	nop
 8015a16:	e004      	b.n	8015a22 <icmp_input+0x1e2>
        goto icmperr;
 8015a18:	bf00      	nop
 8015a1a:	e002      	b.n	8015a22 <icmp_input+0x1e2>
          goto icmperr;
 8015a1c:	bf00      	nop
 8015a1e:	e000      	b.n	8015a22 <icmp_input+0x1e2>
          goto icmperr;
 8015a20:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8015a22:	6878      	ldr	r0, [r7, #4]
 8015a24:	f7f8 f9d8 	bl	800ddd8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015a28:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8015a2a:	3728      	adds	r7, #40	; 0x28
 8015a2c:	46bd      	mov	sp, r7
 8015a2e:	bd80      	pop	{r7, pc}
 8015a30:	2000d7b8 	.word	0x2000d7b8
 8015a34:	2000d7cc 	.word	0x2000d7cc
 8015a38:	0801be14 	.word	0x0801be14
 8015a3c:	0801be4c 	.word	0x0801be4c
 8015a40:	0801be84 	.word	0x0801be84
 8015a44:	0801beac 	.word	0x0801beac

08015a48 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8015a48:	b580      	push	{r7, lr}
 8015a4a:	b082      	sub	sp, #8
 8015a4c:	af00      	add	r7, sp, #0
 8015a4e:	6078      	str	r0, [r7, #4]
 8015a50:	460b      	mov	r3, r1
 8015a52:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015a54:	78fb      	ldrb	r3, [r7, #3]
 8015a56:	461a      	mov	r2, r3
 8015a58:	2103      	movs	r1, #3
 8015a5a:	6878      	ldr	r0, [r7, #4]
 8015a5c:	f000 f814 	bl	8015a88 <icmp_send_response>
}
 8015a60:	bf00      	nop
 8015a62:	3708      	adds	r7, #8
 8015a64:	46bd      	mov	sp, r7
 8015a66:	bd80      	pop	{r7, pc}

08015a68 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015a68:	b580      	push	{r7, lr}
 8015a6a:	b082      	sub	sp, #8
 8015a6c:	af00      	add	r7, sp, #0
 8015a6e:	6078      	str	r0, [r7, #4]
 8015a70:	460b      	mov	r3, r1
 8015a72:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015a74:	78fb      	ldrb	r3, [r7, #3]
 8015a76:	461a      	mov	r2, r3
 8015a78:	210b      	movs	r1, #11
 8015a7a:	6878      	ldr	r0, [r7, #4]
 8015a7c:	f000 f804 	bl	8015a88 <icmp_send_response>
}
 8015a80:	bf00      	nop
 8015a82:	3708      	adds	r7, #8
 8015a84:	46bd      	mov	sp, r7
 8015a86:	bd80      	pop	{r7, pc}

08015a88 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015a88:	b580      	push	{r7, lr}
 8015a8a:	b08c      	sub	sp, #48	; 0x30
 8015a8c:	af04      	add	r7, sp, #16
 8015a8e:	6078      	str	r0, [r7, #4]
 8015a90:	460b      	mov	r3, r1
 8015a92:	70fb      	strb	r3, [r7, #3]
 8015a94:	4613      	mov	r3, r2
 8015a96:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015a98:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015a9c:	2124      	movs	r1, #36	; 0x24
 8015a9e:	2022      	movs	r0, #34	; 0x22
 8015aa0:	f7f7 feb6 	bl	800d810 <pbuf_alloc>
 8015aa4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015aa6:	69fb      	ldr	r3, [r7, #28]
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d04c      	beq.n	8015b46 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015aac:	69fb      	ldr	r3, [r7, #28]
 8015aae:	895b      	ldrh	r3, [r3, #10]
 8015ab0:	2b23      	cmp	r3, #35	; 0x23
 8015ab2:	d806      	bhi.n	8015ac2 <icmp_send_response+0x3a>
 8015ab4:	4b26      	ldr	r3, [pc, #152]	; (8015b50 <icmp_send_response+0xc8>)
 8015ab6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8015aba:	4926      	ldr	r1, [pc, #152]	; (8015b54 <icmp_send_response+0xcc>)
 8015abc:	4826      	ldr	r0, [pc, #152]	; (8015b58 <icmp_send_response+0xd0>)
 8015abe:	f001 fa99 	bl	8016ff4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	685b      	ldr	r3, [r3, #4]
 8015ac6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015ac8:	69fb      	ldr	r3, [r7, #28]
 8015aca:	685b      	ldr	r3, [r3, #4]
 8015acc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8015ace:	697b      	ldr	r3, [r7, #20]
 8015ad0:	78fa      	ldrb	r2, [r7, #3]
 8015ad2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015ad4:	697b      	ldr	r3, [r7, #20]
 8015ad6:	78ba      	ldrb	r2, [r7, #2]
 8015ad8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8015ada:	697b      	ldr	r3, [r7, #20]
 8015adc:	2200      	movs	r2, #0
 8015ade:	711a      	strb	r2, [r3, #4]
 8015ae0:	2200      	movs	r2, #0
 8015ae2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015ae4:	697b      	ldr	r3, [r7, #20]
 8015ae6:	2200      	movs	r2, #0
 8015ae8:	719a      	strb	r2, [r3, #6]
 8015aea:	2200      	movs	r2, #0
 8015aec:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8015aee:	69fb      	ldr	r3, [r7, #28]
 8015af0:	685b      	ldr	r3, [r3, #4]
 8015af2:	f103 0008 	add.w	r0, r3, #8
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	685b      	ldr	r3, [r3, #4]
 8015afa:	221c      	movs	r2, #28
 8015afc:	4619      	mov	r1, r3
 8015afe:	f001 fa49 	bl	8016f94 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8015b02:	69bb      	ldr	r3, [r7, #24]
 8015b04:	68db      	ldr	r3, [r3, #12]
 8015b06:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8015b08:	f107 030c 	add.w	r3, r7, #12
 8015b0c:	4618      	mov	r0, r3
 8015b0e:	f000 f825 	bl	8015b5c <ip4_route>
 8015b12:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015b14:	693b      	ldr	r3, [r7, #16]
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d011      	beq.n	8015b3e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8015b1a:	697b      	ldr	r3, [r7, #20]
 8015b1c:	2200      	movs	r2, #0
 8015b1e:	709a      	strb	r2, [r3, #2]
 8015b20:	2200      	movs	r2, #0
 8015b22:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015b24:	f107 020c 	add.w	r2, r7, #12
 8015b28:	693b      	ldr	r3, [r7, #16]
 8015b2a:	9302      	str	r3, [sp, #8]
 8015b2c:	2301      	movs	r3, #1
 8015b2e:	9301      	str	r3, [sp, #4]
 8015b30:	2300      	movs	r3, #0
 8015b32:	9300      	str	r3, [sp, #0]
 8015b34:	23ff      	movs	r3, #255	; 0xff
 8015b36:	2100      	movs	r1, #0
 8015b38:	69f8      	ldr	r0, [r7, #28]
 8015b3a:	f000 f9cd 	bl	8015ed8 <ip4_output_if>
  }
  pbuf_free(q);
 8015b3e:	69f8      	ldr	r0, [r7, #28]
 8015b40:	f7f8 f94a 	bl	800ddd8 <pbuf_free>
 8015b44:	e000      	b.n	8015b48 <icmp_send_response+0xc0>
    return;
 8015b46:	bf00      	nop
}
 8015b48:	3720      	adds	r7, #32
 8015b4a:	46bd      	mov	sp, r7
 8015b4c:	bd80      	pop	{r7, pc}
 8015b4e:	bf00      	nop
 8015b50:	0801be14 	.word	0x0801be14
 8015b54:	0801bee0 	.word	0x0801bee0
 8015b58:	0801be84 	.word	0x0801be84

08015b5c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015b5c:	b480      	push	{r7}
 8015b5e:	b085      	sub	sp, #20
 8015b60:	af00      	add	r7, sp, #0
 8015b62:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015b64:	4b33      	ldr	r3, [pc, #204]	; (8015c34 <ip4_route+0xd8>)
 8015b66:	681b      	ldr	r3, [r3, #0]
 8015b68:	60fb      	str	r3, [r7, #12]
 8015b6a:	e036      	b.n	8015bda <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015b6c:	68fb      	ldr	r3, [r7, #12]
 8015b6e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015b72:	f003 0301 	and.w	r3, r3, #1
 8015b76:	b2db      	uxtb	r3, r3
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d02b      	beq.n	8015bd4 <ip4_route+0x78>
 8015b7c:	68fb      	ldr	r3, [r7, #12]
 8015b7e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015b82:	089b      	lsrs	r3, r3, #2
 8015b84:	f003 0301 	and.w	r3, r3, #1
 8015b88:	b2db      	uxtb	r3, r3
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d022      	beq.n	8015bd4 <ip4_route+0x78>
 8015b8e:	68fb      	ldr	r3, [r7, #12]
 8015b90:	3304      	adds	r3, #4
 8015b92:	681b      	ldr	r3, [r3, #0]
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	d01d      	beq.n	8015bd4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	681a      	ldr	r2, [r3, #0]
 8015b9c:	68fb      	ldr	r3, [r7, #12]
 8015b9e:	3304      	adds	r3, #4
 8015ba0:	681b      	ldr	r3, [r3, #0]
 8015ba2:	405a      	eors	r2, r3
 8015ba4:	68fb      	ldr	r3, [r7, #12]
 8015ba6:	3308      	adds	r3, #8
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	4013      	ands	r3, r2
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d101      	bne.n	8015bb4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015bb0:	68fb      	ldr	r3, [r7, #12]
 8015bb2:	e038      	b.n	8015c26 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015bb4:	68fb      	ldr	r3, [r7, #12]
 8015bb6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015bba:	f003 0302 	and.w	r3, r3, #2
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d108      	bne.n	8015bd4 <ip4_route+0x78>
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	681a      	ldr	r2, [r3, #0]
 8015bc6:	68fb      	ldr	r3, [r7, #12]
 8015bc8:	330c      	adds	r3, #12
 8015bca:	681b      	ldr	r3, [r3, #0]
 8015bcc:	429a      	cmp	r2, r3
 8015bce:	d101      	bne.n	8015bd4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015bd0:	68fb      	ldr	r3, [r7, #12]
 8015bd2:	e028      	b.n	8015c26 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015bd4:	68fb      	ldr	r3, [r7, #12]
 8015bd6:	681b      	ldr	r3, [r3, #0]
 8015bd8:	60fb      	str	r3, [r7, #12]
 8015bda:	68fb      	ldr	r3, [r7, #12]
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	d1c5      	bne.n	8015b6c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015be0:	4b15      	ldr	r3, [pc, #84]	; (8015c38 <ip4_route+0xdc>)
 8015be2:	681b      	ldr	r3, [r3, #0]
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d01a      	beq.n	8015c1e <ip4_route+0xc2>
 8015be8:	4b13      	ldr	r3, [pc, #76]	; (8015c38 <ip4_route+0xdc>)
 8015bea:	681b      	ldr	r3, [r3, #0]
 8015bec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015bf0:	f003 0301 	and.w	r3, r3, #1
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d012      	beq.n	8015c1e <ip4_route+0xc2>
 8015bf8:	4b0f      	ldr	r3, [pc, #60]	; (8015c38 <ip4_route+0xdc>)
 8015bfa:	681b      	ldr	r3, [r3, #0]
 8015bfc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015c00:	f003 0304 	and.w	r3, r3, #4
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d00a      	beq.n	8015c1e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015c08:	4b0b      	ldr	r3, [pc, #44]	; (8015c38 <ip4_route+0xdc>)
 8015c0a:	681b      	ldr	r3, [r3, #0]
 8015c0c:	3304      	adds	r3, #4
 8015c0e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d004      	beq.n	8015c1e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	681b      	ldr	r3, [r3, #0]
 8015c18:	b2db      	uxtb	r3, r3
 8015c1a:	2b7f      	cmp	r3, #127	; 0x7f
 8015c1c:	d101      	bne.n	8015c22 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8015c1e:	2300      	movs	r3, #0
 8015c20:	e001      	b.n	8015c26 <ip4_route+0xca>
  }

  return netif_default;
 8015c22:	4b05      	ldr	r3, [pc, #20]	; (8015c38 <ip4_route+0xdc>)
 8015c24:	681b      	ldr	r3, [r3, #0]
}
 8015c26:	4618      	mov	r0, r3
 8015c28:	3714      	adds	r7, #20
 8015c2a:	46bd      	mov	sp, r7
 8015c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c30:	4770      	bx	lr
 8015c32:	bf00      	nop
 8015c34:	20016dac 	.word	0x20016dac
 8015c38:	20016db0 	.word	0x20016db0

08015c3c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015c3c:	b580      	push	{r7, lr}
 8015c3e:	b082      	sub	sp, #8
 8015c40:	af00      	add	r7, sp, #0
 8015c42:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015c4a:	f003 0301 	and.w	r3, r3, #1
 8015c4e:	b2db      	uxtb	r3, r3
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d016      	beq.n	8015c82 <ip4_input_accept+0x46>
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	3304      	adds	r3, #4
 8015c58:	681b      	ldr	r3, [r3, #0]
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	d011      	beq.n	8015c82 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015c5e:	4b0b      	ldr	r3, [pc, #44]	; (8015c8c <ip4_input_accept+0x50>)
 8015c60:	695a      	ldr	r2, [r3, #20]
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	3304      	adds	r3, #4
 8015c66:	681b      	ldr	r3, [r3, #0]
 8015c68:	429a      	cmp	r2, r3
 8015c6a:	d008      	beq.n	8015c7e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015c6c:	4b07      	ldr	r3, [pc, #28]	; (8015c8c <ip4_input_accept+0x50>)
 8015c6e:	695b      	ldr	r3, [r3, #20]
 8015c70:	6879      	ldr	r1, [r7, #4]
 8015c72:	4618      	mov	r0, r3
 8015c74:	f000 fa08 	bl	8016088 <ip4_addr_isbroadcast_u32>
 8015c78:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d001      	beq.n	8015c82 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8015c7e:	2301      	movs	r3, #1
 8015c80:	e000      	b.n	8015c84 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8015c82:	2300      	movs	r3, #0
}
 8015c84:	4618      	mov	r0, r3
 8015c86:	3708      	adds	r7, #8
 8015c88:	46bd      	mov	sp, r7
 8015c8a:	bd80      	pop	{r7, pc}
 8015c8c:	2000d7b8 	.word	0x2000d7b8

08015c90 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015c90:	b580      	push	{r7, lr}
 8015c92:	b086      	sub	sp, #24
 8015c94:	af00      	add	r7, sp, #0
 8015c96:	6078      	str	r0, [r7, #4]
 8015c98:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	685b      	ldr	r3, [r3, #4]
 8015c9e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8015ca0:	697b      	ldr	r3, [r7, #20]
 8015ca2:	781b      	ldrb	r3, [r3, #0]
 8015ca4:	091b      	lsrs	r3, r3, #4
 8015ca6:	b2db      	uxtb	r3, r3
 8015ca8:	2b04      	cmp	r3, #4
 8015caa:	d004      	beq.n	8015cb6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015cac:	6878      	ldr	r0, [r7, #4]
 8015cae:	f7f8 f893 	bl	800ddd8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015cb2:	2300      	movs	r3, #0
 8015cb4:	e107      	b.n	8015ec6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8015cb6:	697b      	ldr	r3, [r7, #20]
 8015cb8:	781b      	ldrb	r3, [r3, #0]
 8015cba:	f003 030f 	and.w	r3, r3, #15
 8015cbe:	b2db      	uxtb	r3, r3
 8015cc0:	009b      	lsls	r3, r3, #2
 8015cc2:	b2db      	uxtb	r3, r3
 8015cc4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015cc6:	697b      	ldr	r3, [r7, #20]
 8015cc8:	885b      	ldrh	r3, [r3, #2]
 8015cca:	b29b      	uxth	r3, r3
 8015ccc:	4618      	mov	r0, r3
 8015cce:	f7f6 fcf1 	bl	800c6b4 <lwip_htons>
 8015cd2:	4603      	mov	r3, r0
 8015cd4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	891b      	ldrh	r3, [r3, #8]
 8015cda:	89ba      	ldrh	r2, [r7, #12]
 8015cdc:	429a      	cmp	r2, r3
 8015cde:	d204      	bcs.n	8015cea <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8015ce0:	89bb      	ldrh	r3, [r7, #12]
 8015ce2:	4619      	mov	r1, r3
 8015ce4:	6878      	ldr	r0, [r7, #4]
 8015ce6:	f7f7 fef1 	bl	800dacc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	895b      	ldrh	r3, [r3, #10]
 8015cee:	89fa      	ldrh	r2, [r7, #14]
 8015cf0:	429a      	cmp	r2, r3
 8015cf2:	d807      	bhi.n	8015d04 <ip4_input+0x74>
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	891b      	ldrh	r3, [r3, #8]
 8015cf8:	89ba      	ldrh	r2, [r7, #12]
 8015cfa:	429a      	cmp	r2, r3
 8015cfc:	d802      	bhi.n	8015d04 <ip4_input+0x74>
 8015cfe:	89fb      	ldrh	r3, [r7, #14]
 8015d00:	2b13      	cmp	r3, #19
 8015d02:	d804      	bhi.n	8015d0e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015d04:	6878      	ldr	r0, [r7, #4]
 8015d06:	f7f8 f867 	bl	800ddd8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8015d0a:	2300      	movs	r3, #0
 8015d0c:	e0db      	b.n	8015ec6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015d0e:	697b      	ldr	r3, [r7, #20]
 8015d10:	691b      	ldr	r3, [r3, #16]
 8015d12:	4a6f      	ldr	r2, [pc, #444]	; (8015ed0 <ip4_input+0x240>)
 8015d14:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015d16:	697b      	ldr	r3, [r7, #20]
 8015d18:	68db      	ldr	r3, [r3, #12]
 8015d1a:	4a6d      	ldr	r2, [pc, #436]	; (8015ed0 <ip4_input+0x240>)
 8015d1c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015d1e:	4b6c      	ldr	r3, [pc, #432]	; (8015ed0 <ip4_input+0x240>)
 8015d20:	695b      	ldr	r3, [r3, #20]
 8015d22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015d26:	2be0      	cmp	r3, #224	; 0xe0
 8015d28:	d112      	bne.n	8015d50 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8015d2a:	683b      	ldr	r3, [r7, #0]
 8015d2c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015d30:	f003 0301 	and.w	r3, r3, #1
 8015d34:	b2db      	uxtb	r3, r3
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	d007      	beq.n	8015d4a <ip4_input+0xba>
 8015d3a:	683b      	ldr	r3, [r7, #0]
 8015d3c:	3304      	adds	r3, #4
 8015d3e:	681b      	ldr	r3, [r3, #0]
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d002      	beq.n	8015d4a <ip4_input+0xba>
      netif = inp;
 8015d44:	683b      	ldr	r3, [r7, #0]
 8015d46:	613b      	str	r3, [r7, #16]
 8015d48:	e02a      	b.n	8015da0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8015d4a:	2300      	movs	r3, #0
 8015d4c:	613b      	str	r3, [r7, #16]
 8015d4e:	e027      	b.n	8015da0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015d50:	6838      	ldr	r0, [r7, #0]
 8015d52:	f7ff ff73 	bl	8015c3c <ip4_input_accept>
 8015d56:	4603      	mov	r3, r0
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d002      	beq.n	8015d62 <ip4_input+0xd2>
      netif = inp;
 8015d5c:	683b      	ldr	r3, [r7, #0]
 8015d5e:	613b      	str	r3, [r7, #16]
 8015d60:	e01e      	b.n	8015da0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8015d62:	2300      	movs	r3, #0
 8015d64:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8015d66:	4b5a      	ldr	r3, [pc, #360]	; (8015ed0 <ip4_input+0x240>)
 8015d68:	695b      	ldr	r3, [r3, #20]
 8015d6a:	b2db      	uxtb	r3, r3
 8015d6c:	2b7f      	cmp	r3, #127	; 0x7f
 8015d6e:	d017      	beq.n	8015da0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015d70:	4b58      	ldr	r3, [pc, #352]	; (8015ed4 <ip4_input+0x244>)
 8015d72:	681b      	ldr	r3, [r3, #0]
 8015d74:	613b      	str	r3, [r7, #16]
 8015d76:	e00e      	b.n	8015d96 <ip4_input+0x106>
          if (netif == inp) {
 8015d78:	693a      	ldr	r2, [r7, #16]
 8015d7a:	683b      	ldr	r3, [r7, #0]
 8015d7c:	429a      	cmp	r2, r3
 8015d7e:	d006      	beq.n	8015d8e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015d80:	6938      	ldr	r0, [r7, #16]
 8015d82:	f7ff ff5b 	bl	8015c3c <ip4_input_accept>
 8015d86:	4603      	mov	r3, r0
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d108      	bne.n	8015d9e <ip4_input+0x10e>
 8015d8c:	e000      	b.n	8015d90 <ip4_input+0x100>
            continue;
 8015d8e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015d90:	693b      	ldr	r3, [r7, #16]
 8015d92:	681b      	ldr	r3, [r3, #0]
 8015d94:	613b      	str	r3, [r7, #16]
 8015d96:	693b      	ldr	r3, [r7, #16]
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	d1ed      	bne.n	8015d78 <ip4_input+0xe8>
 8015d9c:	e000      	b.n	8015da0 <ip4_input+0x110>
            break;
 8015d9e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015da0:	4b4b      	ldr	r3, [pc, #300]	; (8015ed0 <ip4_input+0x240>)
 8015da2:	691b      	ldr	r3, [r3, #16]
 8015da4:	6839      	ldr	r1, [r7, #0]
 8015da6:	4618      	mov	r0, r3
 8015da8:	f000 f96e 	bl	8016088 <ip4_addr_isbroadcast_u32>
 8015dac:	4603      	mov	r3, r0
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d105      	bne.n	8015dbe <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015db2:	4b47      	ldr	r3, [pc, #284]	; (8015ed0 <ip4_input+0x240>)
 8015db4:	691b      	ldr	r3, [r3, #16]
 8015db6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015dba:	2be0      	cmp	r3, #224	; 0xe0
 8015dbc:	d104      	bne.n	8015dc8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015dbe:	6878      	ldr	r0, [r7, #4]
 8015dc0:	f7f8 f80a 	bl	800ddd8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015dc4:	2300      	movs	r3, #0
 8015dc6:	e07e      	b.n	8015ec6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015dc8:	693b      	ldr	r3, [r7, #16]
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d104      	bne.n	8015dd8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015dce:	6878      	ldr	r0, [r7, #4]
 8015dd0:	f7f8 f802 	bl	800ddd8 <pbuf_free>
    return ERR_OK;
 8015dd4:	2300      	movs	r3, #0
 8015dd6:	e076      	b.n	8015ec6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015dd8:	697b      	ldr	r3, [r7, #20]
 8015dda:	88db      	ldrh	r3, [r3, #6]
 8015ddc:	b29b      	uxth	r3, r3
 8015dde:	461a      	mov	r2, r3
 8015de0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8015de4:	4013      	ands	r3, r2
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d00b      	beq.n	8015e02 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8015dea:	6878      	ldr	r0, [r7, #4]
 8015dec:	f000 fc92 	bl	8016714 <ip4_reass>
 8015df0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d101      	bne.n	8015dfc <ip4_input+0x16c>
      return ERR_OK;
 8015df8:	2300      	movs	r3, #0
 8015dfa:	e064      	b.n	8015ec6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	685b      	ldr	r3, [r3, #4]
 8015e00:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8015e02:	4a33      	ldr	r2, [pc, #204]	; (8015ed0 <ip4_input+0x240>)
 8015e04:	693b      	ldr	r3, [r7, #16]
 8015e06:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015e08:	4a31      	ldr	r2, [pc, #196]	; (8015ed0 <ip4_input+0x240>)
 8015e0a:	683b      	ldr	r3, [r7, #0]
 8015e0c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8015e0e:	4a30      	ldr	r2, [pc, #192]	; (8015ed0 <ip4_input+0x240>)
 8015e10:	697b      	ldr	r3, [r7, #20]
 8015e12:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015e14:	697b      	ldr	r3, [r7, #20]
 8015e16:	781b      	ldrb	r3, [r3, #0]
 8015e18:	f003 030f 	and.w	r3, r3, #15
 8015e1c:	b2db      	uxtb	r3, r3
 8015e1e:	009b      	lsls	r3, r3, #2
 8015e20:	b2db      	uxtb	r3, r3
 8015e22:	b29a      	uxth	r2, r3
 8015e24:	4b2a      	ldr	r3, [pc, #168]	; (8015ed0 <ip4_input+0x240>)
 8015e26:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015e28:	89fb      	ldrh	r3, [r7, #14]
 8015e2a:	4619      	mov	r1, r3
 8015e2c:	6878      	ldr	r0, [r7, #4]
 8015e2e:	f7f7 ff4d 	bl	800dccc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015e32:	697b      	ldr	r3, [r7, #20]
 8015e34:	7a5b      	ldrb	r3, [r3, #9]
 8015e36:	2b11      	cmp	r3, #17
 8015e38:	d006      	beq.n	8015e48 <ip4_input+0x1b8>
 8015e3a:	2b11      	cmp	r3, #17
 8015e3c:	dc13      	bgt.n	8015e66 <ip4_input+0x1d6>
 8015e3e:	2b01      	cmp	r3, #1
 8015e40:	d00c      	beq.n	8015e5c <ip4_input+0x1cc>
 8015e42:	2b06      	cmp	r3, #6
 8015e44:	d005      	beq.n	8015e52 <ip4_input+0x1c2>
 8015e46:	e00e      	b.n	8015e66 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015e48:	6839      	ldr	r1, [r7, #0]
 8015e4a:	6878      	ldr	r0, [r7, #4]
 8015e4c:	f7fe fc68 	bl	8014720 <udp_input>
        break;
 8015e50:	e026      	b.n	8015ea0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015e52:	6839      	ldr	r1, [r7, #0]
 8015e54:	6878      	ldr	r0, [r7, #4]
 8015e56:	f7fa f88d 	bl	800ff74 <tcp_input>
        break;
 8015e5a:	e021      	b.n	8015ea0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8015e5c:	6839      	ldr	r1, [r7, #0]
 8015e5e:	6878      	ldr	r0, [r7, #4]
 8015e60:	f7ff fcee 	bl	8015840 <icmp_input>
        break;
 8015e64:	e01c      	b.n	8015ea0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015e66:	4b1a      	ldr	r3, [pc, #104]	; (8015ed0 <ip4_input+0x240>)
 8015e68:	695b      	ldr	r3, [r3, #20]
 8015e6a:	6939      	ldr	r1, [r7, #16]
 8015e6c:	4618      	mov	r0, r3
 8015e6e:	f000 f90b 	bl	8016088 <ip4_addr_isbroadcast_u32>
 8015e72:	4603      	mov	r3, r0
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d10f      	bne.n	8015e98 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015e78:	4b15      	ldr	r3, [pc, #84]	; (8015ed0 <ip4_input+0x240>)
 8015e7a:	695b      	ldr	r3, [r3, #20]
 8015e7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015e80:	2be0      	cmp	r3, #224	; 0xe0
 8015e82:	d009      	beq.n	8015e98 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015e84:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015e88:	4619      	mov	r1, r3
 8015e8a:	6878      	ldr	r0, [r7, #4]
 8015e8c:	f7f7 ff91 	bl	800ddb2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015e90:	2102      	movs	r1, #2
 8015e92:	6878      	ldr	r0, [r7, #4]
 8015e94:	f7ff fdd8 	bl	8015a48 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015e98:	6878      	ldr	r0, [r7, #4]
 8015e9a:	f7f7 ff9d 	bl	800ddd8 <pbuf_free>
        break;
 8015e9e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015ea0:	4b0b      	ldr	r3, [pc, #44]	; (8015ed0 <ip4_input+0x240>)
 8015ea2:	2200      	movs	r2, #0
 8015ea4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015ea6:	4b0a      	ldr	r3, [pc, #40]	; (8015ed0 <ip4_input+0x240>)
 8015ea8:	2200      	movs	r2, #0
 8015eaa:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015eac:	4b08      	ldr	r3, [pc, #32]	; (8015ed0 <ip4_input+0x240>)
 8015eae:	2200      	movs	r2, #0
 8015eb0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015eb2:	4b07      	ldr	r3, [pc, #28]	; (8015ed0 <ip4_input+0x240>)
 8015eb4:	2200      	movs	r2, #0
 8015eb6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015eb8:	4b05      	ldr	r3, [pc, #20]	; (8015ed0 <ip4_input+0x240>)
 8015eba:	2200      	movs	r2, #0
 8015ebc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015ebe:	4b04      	ldr	r3, [pc, #16]	; (8015ed0 <ip4_input+0x240>)
 8015ec0:	2200      	movs	r2, #0
 8015ec2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015ec4:	2300      	movs	r3, #0
}
 8015ec6:	4618      	mov	r0, r3
 8015ec8:	3718      	adds	r7, #24
 8015eca:	46bd      	mov	sp, r7
 8015ecc:	bd80      	pop	{r7, pc}
 8015ece:	bf00      	nop
 8015ed0:	2000d7b8 	.word	0x2000d7b8
 8015ed4:	20016dac 	.word	0x20016dac

08015ed8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015ed8:	b580      	push	{r7, lr}
 8015eda:	b08a      	sub	sp, #40	; 0x28
 8015edc:	af04      	add	r7, sp, #16
 8015ede:	60f8      	str	r0, [r7, #12]
 8015ee0:	60b9      	str	r1, [r7, #8]
 8015ee2:	607a      	str	r2, [r7, #4]
 8015ee4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015ee6:	68bb      	ldr	r3, [r7, #8]
 8015ee8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d009      	beq.n	8015f04 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015ef0:	68bb      	ldr	r3, [r7, #8]
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	d003      	beq.n	8015efe <ip4_output_if+0x26>
 8015ef6:	68bb      	ldr	r3, [r7, #8]
 8015ef8:	681b      	ldr	r3, [r3, #0]
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d102      	bne.n	8015f04 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8015efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f00:	3304      	adds	r3, #4
 8015f02:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015f04:	78fa      	ldrb	r2, [r7, #3]
 8015f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f08:	9302      	str	r3, [sp, #8]
 8015f0a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015f0e:	9301      	str	r3, [sp, #4]
 8015f10:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015f14:	9300      	str	r3, [sp, #0]
 8015f16:	4613      	mov	r3, r2
 8015f18:	687a      	ldr	r2, [r7, #4]
 8015f1a:	6979      	ldr	r1, [r7, #20]
 8015f1c:	68f8      	ldr	r0, [r7, #12]
 8015f1e:	f000 f805 	bl	8015f2c <ip4_output_if_src>
 8015f22:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015f24:	4618      	mov	r0, r3
 8015f26:	3718      	adds	r7, #24
 8015f28:	46bd      	mov	sp, r7
 8015f2a:	bd80      	pop	{r7, pc}

08015f2c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8015f2c:	b580      	push	{r7, lr}
 8015f2e:	b088      	sub	sp, #32
 8015f30:	af00      	add	r7, sp, #0
 8015f32:	60f8      	str	r0, [r7, #12]
 8015f34:	60b9      	str	r1, [r7, #8]
 8015f36:	607a      	str	r2, [r7, #4]
 8015f38:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8015f3a:	68fb      	ldr	r3, [r7, #12]
 8015f3c:	7b9b      	ldrb	r3, [r3, #14]
 8015f3e:	2b01      	cmp	r3, #1
 8015f40:	d006      	beq.n	8015f50 <ip4_output_if_src+0x24>
 8015f42:	4b4b      	ldr	r3, [pc, #300]	; (8016070 <ip4_output_if_src+0x144>)
 8015f44:	f44f 7255 	mov.w	r2, #852	; 0x354
 8015f48:	494a      	ldr	r1, [pc, #296]	; (8016074 <ip4_output_if_src+0x148>)
 8015f4a:	484b      	ldr	r0, [pc, #300]	; (8016078 <ip4_output_if_src+0x14c>)
 8015f4c:	f001 f852 	bl	8016ff4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d060      	beq.n	8016018 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015f56:	2314      	movs	r3, #20
 8015f58:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8015f5a:	2114      	movs	r1, #20
 8015f5c:	68f8      	ldr	r0, [r7, #12]
 8015f5e:	f7f7 fea5 	bl	800dcac <pbuf_add_header>
 8015f62:	4603      	mov	r3, r0
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d002      	beq.n	8015f6e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015f68:	f06f 0301 	mvn.w	r3, #1
 8015f6c:	e07c      	b.n	8016068 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8015f6e:	68fb      	ldr	r3, [r7, #12]
 8015f70:	685b      	ldr	r3, [r3, #4]
 8015f72:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015f74:	68fb      	ldr	r3, [r7, #12]
 8015f76:	895b      	ldrh	r3, [r3, #10]
 8015f78:	2b13      	cmp	r3, #19
 8015f7a:	d806      	bhi.n	8015f8a <ip4_output_if_src+0x5e>
 8015f7c:	4b3c      	ldr	r3, [pc, #240]	; (8016070 <ip4_output_if_src+0x144>)
 8015f7e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8015f82:	493e      	ldr	r1, [pc, #248]	; (801607c <ip4_output_if_src+0x150>)
 8015f84:	483c      	ldr	r0, [pc, #240]	; (8016078 <ip4_output_if_src+0x14c>)
 8015f86:	f001 f835 	bl	8016ff4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015f8a:	69fb      	ldr	r3, [r7, #28]
 8015f8c:	78fa      	ldrb	r2, [r7, #3]
 8015f8e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015f90:	69fb      	ldr	r3, [r7, #28]
 8015f92:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8015f96:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	681a      	ldr	r2, [r3, #0]
 8015f9c:	69fb      	ldr	r3, [r7, #28]
 8015f9e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015fa0:	8b7b      	ldrh	r3, [r7, #26]
 8015fa2:	089b      	lsrs	r3, r3, #2
 8015fa4:	b29b      	uxth	r3, r3
 8015fa6:	b2db      	uxtb	r3, r3
 8015fa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015fac:	b2da      	uxtb	r2, r3
 8015fae:	69fb      	ldr	r3, [r7, #28]
 8015fb0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8015fb2:	69fb      	ldr	r3, [r7, #28]
 8015fb4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015fb8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015fba:	68fb      	ldr	r3, [r7, #12]
 8015fbc:	891b      	ldrh	r3, [r3, #8]
 8015fbe:	4618      	mov	r0, r3
 8015fc0:	f7f6 fb78 	bl	800c6b4 <lwip_htons>
 8015fc4:	4603      	mov	r3, r0
 8015fc6:	461a      	mov	r2, r3
 8015fc8:	69fb      	ldr	r3, [r7, #28]
 8015fca:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015fcc:	69fb      	ldr	r3, [r7, #28]
 8015fce:	2200      	movs	r2, #0
 8015fd0:	719a      	strb	r2, [r3, #6]
 8015fd2:	2200      	movs	r2, #0
 8015fd4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015fd6:	4b2a      	ldr	r3, [pc, #168]	; (8016080 <ip4_output_if_src+0x154>)
 8015fd8:	881b      	ldrh	r3, [r3, #0]
 8015fda:	4618      	mov	r0, r3
 8015fdc:	f7f6 fb6a 	bl	800c6b4 <lwip_htons>
 8015fe0:	4603      	mov	r3, r0
 8015fe2:	461a      	mov	r2, r3
 8015fe4:	69fb      	ldr	r3, [r7, #28]
 8015fe6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015fe8:	4b25      	ldr	r3, [pc, #148]	; (8016080 <ip4_output_if_src+0x154>)
 8015fea:	881b      	ldrh	r3, [r3, #0]
 8015fec:	3301      	adds	r3, #1
 8015fee:	b29a      	uxth	r2, r3
 8015ff0:	4b23      	ldr	r3, [pc, #140]	; (8016080 <ip4_output_if_src+0x154>)
 8015ff2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015ff4:	68bb      	ldr	r3, [r7, #8]
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d104      	bne.n	8016004 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015ffa:	4b22      	ldr	r3, [pc, #136]	; (8016084 <ip4_output_if_src+0x158>)
 8015ffc:	681a      	ldr	r2, [r3, #0]
 8015ffe:	69fb      	ldr	r3, [r7, #28]
 8016000:	60da      	str	r2, [r3, #12]
 8016002:	e003      	b.n	801600c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8016004:	68bb      	ldr	r3, [r7, #8]
 8016006:	681a      	ldr	r2, [r3, #0]
 8016008:	69fb      	ldr	r3, [r7, #28]
 801600a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801600c:	69fb      	ldr	r3, [r7, #28]
 801600e:	2200      	movs	r2, #0
 8016010:	729a      	strb	r2, [r3, #10]
 8016012:	2200      	movs	r2, #0
 8016014:	72da      	strb	r2, [r3, #11]
 8016016:	e00f      	b.n	8016038 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8016018:	68fb      	ldr	r3, [r7, #12]
 801601a:	895b      	ldrh	r3, [r3, #10]
 801601c:	2b13      	cmp	r3, #19
 801601e:	d802      	bhi.n	8016026 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016020:	f06f 0301 	mvn.w	r3, #1
 8016024:	e020      	b.n	8016068 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8016026:	68fb      	ldr	r3, [r7, #12]
 8016028:	685b      	ldr	r3, [r3, #4]
 801602a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801602c:	69fb      	ldr	r3, [r7, #28]
 801602e:	691b      	ldr	r3, [r3, #16]
 8016030:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8016032:	f107 0314 	add.w	r3, r7, #20
 8016036:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8016038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801603a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801603c:	2b00      	cmp	r3, #0
 801603e:	d00c      	beq.n	801605a <ip4_output_if_src+0x12e>
 8016040:	68fb      	ldr	r3, [r7, #12]
 8016042:	891a      	ldrh	r2, [r3, #8]
 8016044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016046:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016048:	429a      	cmp	r2, r3
 801604a:	d906      	bls.n	801605a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801604c:	687a      	ldr	r2, [r7, #4]
 801604e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016050:	68f8      	ldr	r0, [r7, #12]
 8016052:	f000 fd4d 	bl	8016af0 <ip4_frag>
 8016056:	4603      	mov	r3, r0
 8016058:	e006      	b.n	8016068 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801605a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801605c:	695b      	ldr	r3, [r3, #20]
 801605e:	687a      	ldr	r2, [r7, #4]
 8016060:	68f9      	ldr	r1, [r7, #12]
 8016062:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016064:	4798      	blx	r3
 8016066:	4603      	mov	r3, r0
}
 8016068:	4618      	mov	r0, r3
 801606a:	3720      	adds	r7, #32
 801606c:	46bd      	mov	sp, r7
 801606e:	bd80      	pop	{r7, pc}
 8016070:	0801bf0c 	.word	0x0801bf0c
 8016074:	0801bf40 	.word	0x0801bf40
 8016078:	0801bf4c 	.word	0x0801bf4c
 801607c:	0801bf74 	.word	0x0801bf74
 8016080:	200017da 	.word	0x200017da
 8016084:	08020354 	.word	0x08020354

08016088 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8016088:	b480      	push	{r7}
 801608a:	b085      	sub	sp, #20
 801608c:	af00      	add	r7, sp, #0
 801608e:	6078      	str	r0, [r7, #4]
 8016090:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801609c:	d002      	beq.n	80160a4 <ip4_addr_isbroadcast_u32+0x1c>
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	d101      	bne.n	80160a8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80160a4:	2301      	movs	r3, #1
 80160a6:	e02a      	b.n	80160fe <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80160a8:	683b      	ldr	r3, [r7, #0]
 80160aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80160ae:	f003 0302 	and.w	r3, r3, #2
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d101      	bne.n	80160ba <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80160b6:	2300      	movs	r3, #0
 80160b8:	e021      	b.n	80160fe <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80160ba:	683b      	ldr	r3, [r7, #0]
 80160bc:	3304      	adds	r3, #4
 80160be:	681b      	ldr	r3, [r3, #0]
 80160c0:	687a      	ldr	r2, [r7, #4]
 80160c2:	429a      	cmp	r2, r3
 80160c4:	d101      	bne.n	80160ca <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80160c6:	2300      	movs	r3, #0
 80160c8:	e019      	b.n	80160fe <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80160ca:	68fa      	ldr	r2, [r7, #12]
 80160cc:	683b      	ldr	r3, [r7, #0]
 80160ce:	3304      	adds	r3, #4
 80160d0:	681b      	ldr	r3, [r3, #0]
 80160d2:	405a      	eors	r2, r3
 80160d4:	683b      	ldr	r3, [r7, #0]
 80160d6:	3308      	adds	r3, #8
 80160d8:	681b      	ldr	r3, [r3, #0]
 80160da:	4013      	ands	r3, r2
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d10d      	bne.n	80160fc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80160e0:	683b      	ldr	r3, [r7, #0]
 80160e2:	3308      	adds	r3, #8
 80160e4:	681b      	ldr	r3, [r3, #0]
 80160e6:	43da      	mvns	r2, r3
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80160ec:	683b      	ldr	r3, [r7, #0]
 80160ee:	3308      	adds	r3, #8
 80160f0:	681b      	ldr	r3, [r3, #0]
 80160f2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80160f4:	429a      	cmp	r2, r3
 80160f6:	d101      	bne.n	80160fc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80160f8:	2301      	movs	r3, #1
 80160fa:	e000      	b.n	80160fe <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80160fc:	2300      	movs	r3, #0
  }
}
 80160fe:	4618      	mov	r0, r3
 8016100:	3714      	adds	r7, #20
 8016102:	46bd      	mov	sp, r7
 8016104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016108:	4770      	bx	lr
	...

0801610c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801610c:	b580      	push	{r7, lr}
 801610e:	b084      	sub	sp, #16
 8016110:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8016112:	2300      	movs	r3, #0
 8016114:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8016116:	4b12      	ldr	r3, [pc, #72]	; (8016160 <ip_reass_tmr+0x54>)
 8016118:	681b      	ldr	r3, [r3, #0]
 801611a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801611c:	e018      	b.n	8016150 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801611e:	68fb      	ldr	r3, [r7, #12]
 8016120:	7fdb      	ldrb	r3, [r3, #31]
 8016122:	2b00      	cmp	r3, #0
 8016124:	d00b      	beq.n	801613e <ip_reass_tmr+0x32>
      r->timer--;
 8016126:	68fb      	ldr	r3, [r7, #12]
 8016128:	7fdb      	ldrb	r3, [r3, #31]
 801612a:	3b01      	subs	r3, #1
 801612c:	b2da      	uxtb	r2, r3
 801612e:	68fb      	ldr	r3, [r7, #12]
 8016130:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8016132:	68fb      	ldr	r3, [r7, #12]
 8016134:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8016136:	68fb      	ldr	r3, [r7, #12]
 8016138:	681b      	ldr	r3, [r3, #0]
 801613a:	60fb      	str	r3, [r7, #12]
 801613c:	e008      	b.n	8016150 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8016142:	68fb      	ldr	r3, [r7, #12]
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8016148:	68b9      	ldr	r1, [r7, #8]
 801614a:	6878      	ldr	r0, [r7, #4]
 801614c:	f000 f80a 	bl	8016164 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	2b00      	cmp	r3, #0
 8016154:	d1e3      	bne.n	801611e <ip_reass_tmr+0x12>
    }
  }
}
 8016156:	bf00      	nop
 8016158:	bf00      	nop
 801615a:	3710      	adds	r7, #16
 801615c:	46bd      	mov	sp, r7
 801615e:	bd80      	pop	{r7, pc}
 8016160:	200017dc 	.word	0x200017dc

08016164 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016164:	b580      	push	{r7, lr}
 8016166:	b088      	sub	sp, #32
 8016168:	af00      	add	r7, sp, #0
 801616a:	6078      	str	r0, [r7, #4]
 801616c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801616e:	2300      	movs	r3, #0
 8016170:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8016172:	683a      	ldr	r2, [r7, #0]
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	429a      	cmp	r2, r3
 8016178:	d105      	bne.n	8016186 <ip_reass_free_complete_datagram+0x22>
 801617a:	4b45      	ldr	r3, [pc, #276]	; (8016290 <ip_reass_free_complete_datagram+0x12c>)
 801617c:	22ab      	movs	r2, #171	; 0xab
 801617e:	4945      	ldr	r1, [pc, #276]	; (8016294 <ip_reass_free_complete_datagram+0x130>)
 8016180:	4845      	ldr	r0, [pc, #276]	; (8016298 <ip_reass_free_complete_datagram+0x134>)
 8016182:	f000 ff37 	bl	8016ff4 <iprintf>
  if (prev != NULL) {
 8016186:	683b      	ldr	r3, [r7, #0]
 8016188:	2b00      	cmp	r3, #0
 801618a:	d00a      	beq.n	80161a2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801618c:	683b      	ldr	r3, [r7, #0]
 801618e:	681b      	ldr	r3, [r3, #0]
 8016190:	687a      	ldr	r2, [r7, #4]
 8016192:	429a      	cmp	r2, r3
 8016194:	d005      	beq.n	80161a2 <ip_reass_free_complete_datagram+0x3e>
 8016196:	4b3e      	ldr	r3, [pc, #248]	; (8016290 <ip_reass_free_complete_datagram+0x12c>)
 8016198:	22ad      	movs	r2, #173	; 0xad
 801619a:	4940      	ldr	r1, [pc, #256]	; (801629c <ip_reass_free_complete_datagram+0x138>)
 801619c:	483e      	ldr	r0, [pc, #248]	; (8016298 <ip_reass_free_complete_datagram+0x134>)
 801619e:	f000 ff29 	bl	8016ff4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	685b      	ldr	r3, [r3, #4]
 80161a6:	685b      	ldr	r3, [r3, #4]
 80161a8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80161aa:	697b      	ldr	r3, [r7, #20]
 80161ac:	889b      	ldrh	r3, [r3, #4]
 80161ae:	b29b      	uxth	r3, r3
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d12a      	bne.n	801620a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	685b      	ldr	r3, [r3, #4]
 80161b8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80161ba:	697b      	ldr	r3, [r7, #20]
 80161bc:	681a      	ldr	r2, [r3, #0]
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80161c2:	69bb      	ldr	r3, [r7, #24]
 80161c4:	6858      	ldr	r0, [r3, #4]
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	3308      	adds	r3, #8
 80161ca:	2214      	movs	r2, #20
 80161cc:	4619      	mov	r1, r3
 80161ce:	f000 fee1 	bl	8016f94 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80161d2:	2101      	movs	r1, #1
 80161d4:	69b8      	ldr	r0, [r7, #24]
 80161d6:	f7ff fc47 	bl	8015a68 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80161da:	69b8      	ldr	r0, [r7, #24]
 80161dc:	f7f7 fe84 	bl	800dee8 <pbuf_clen>
 80161e0:	4603      	mov	r3, r0
 80161e2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80161e4:	8bfa      	ldrh	r2, [r7, #30]
 80161e6:	8a7b      	ldrh	r3, [r7, #18]
 80161e8:	4413      	add	r3, r2
 80161ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80161ee:	db05      	blt.n	80161fc <ip_reass_free_complete_datagram+0x98>
 80161f0:	4b27      	ldr	r3, [pc, #156]	; (8016290 <ip_reass_free_complete_datagram+0x12c>)
 80161f2:	22bc      	movs	r2, #188	; 0xbc
 80161f4:	492a      	ldr	r1, [pc, #168]	; (80162a0 <ip_reass_free_complete_datagram+0x13c>)
 80161f6:	4828      	ldr	r0, [pc, #160]	; (8016298 <ip_reass_free_complete_datagram+0x134>)
 80161f8:	f000 fefc 	bl	8016ff4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80161fc:	8bfa      	ldrh	r2, [r7, #30]
 80161fe:	8a7b      	ldrh	r3, [r7, #18]
 8016200:	4413      	add	r3, r2
 8016202:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8016204:	69b8      	ldr	r0, [r7, #24]
 8016206:	f7f7 fde7 	bl	800ddd8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	685b      	ldr	r3, [r3, #4]
 801620e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8016210:	e01f      	b.n	8016252 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8016212:	69bb      	ldr	r3, [r7, #24]
 8016214:	685b      	ldr	r3, [r3, #4]
 8016216:	617b      	str	r3, [r7, #20]
    pcur = p;
 8016218:	69bb      	ldr	r3, [r7, #24]
 801621a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801621c:	697b      	ldr	r3, [r7, #20]
 801621e:	681b      	ldr	r3, [r3, #0]
 8016220:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8016222:	68f8      	ldr	r0, [r7, #12]
 8016224:	f7f7 fe60 	bl	800dee8 <pbuf_clen>
 8016228:	4603      	mov	r3, r0
 801622a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801622c:	8bfa      	ldrh	r2, [r7, #30]
 801622e:	8a7b      	ldrh	r3, [r7, #18]
 8016230:	4413      	add	r3, r2
 8016232:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016236:	db05      	blt.n	8016244 <ip_reass_free_complete_datagram+0xe0>
 8016238:	4b15      	ldr	r3, [pc, #84]	; (8016290 <ip_reass_free_complete_datagram+0x12c>)
 801623a:	22cc      	movs	r2, #204	; 0xcc
 801623c:	4918      	ldr	r1, [pc, #96]	; (80162a0 <ip_reass_free_complete_datagram+0x13c>)
 801623e:	4816      	ldr	r0, [pc, #88]	; (8016298 <ip_reass_free_complete_datagram+0x134>)
 8016240:	f000 fed8 	bl	8016ff4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016244:	8bfa      	ldrh	r2, [r7, #30]
 8016246:	8a7b      	ldrh	r3, [r7, #18]
 8016248:	4413      	add	r3, r2
 801624a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801624c:	68f8      	ldr	r0, [r7, #12]
 801624e:	f7f7 fdc3 	bl	800ddd8 <pbuf_free>
  while (p != NULL) {
 8016252:	69bb      	ldr	r3, [r7, #24]
 8016254:	2b00      	cmp	r3, #0
 8016256:	d1dc      	bne.n	8016212 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8016258:	6839      	ldr	r1, [r7, #0]
 801625a:	6878      	ldr	r0, [r7, #4]
 801625c:	f000 f8c2 	bl	80163e4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8016260:	4b10      	ldr	r3, [pc, #64]	; (80162a4 <ip_reass_free_complete_datagram+0x140>)
 8016262:	881b      	ldrh	r3, [r3, #0]
 8016264:	8bfa      	ldrh	r2, [r7, #30]
 8016266:	429a      	cmp	r2, r3
 8016268:	d905      	bls.n	8016276 <ip_reass_free_complete_datagram+0x112>
 801626a:	4b09      	ldr	r3, [pc, #36]	; (8016290 <ip_reass_free_complete_datagram+0x12c>)
 801626c:	22d2      	movs	r2, #210	; 0xd2
 801626e:	490e      	ldr	r1, [pc, #56]	; (80162a8 <ip_reass_free_complete_datagram+0x144>)
 8016270:	4809      	ldr	r0, [pc, #36]	; (8016298 <ip_reass_free_complete_datagram+0x134>)
 8016272:	f000 febf 	bl	8016ff4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8016276:	4b0b      	ldr	r3, [pc, #44]	; (80162a4 <ip_reass_free_complete_datagram+0x140>)
 8016278:	881a      	ldrh	r2, [r3, #0]
 801627a:	8bfb      	ldrh	r3, [r7, #30]
 801627c:	1ad3      	subs	r3, r2, r3
 801627e:	b29a      	uxth	r2, r3
 8016280:	4b08      	ldr	r3, [pc, #32]	; (80162a4 <ip_reass_free_complete_datagram+0x140>)
 8016282:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8016284:	8bfb      	ldrh	r3, [r7, #30]
}
 8016286:	4618      	mov	r0, r3
 8016288:	3720      	adds	r7, #32
 801628a:	46bd      	mov	sp, r7
 801628c:	bd80      	pop	{r7, pc}
 801628e:	bf00      	nop
 8016290:	0801bfa4 	.word	0x0801bfa4
 8016294:	0801bfe0 	.word	0x0801bfe0
 8016298:	0801bfec 	.word	0x0801bfec
 801629c:	0801c014 	.word	0x0801c014
 80162a0:	0801c028 	.word	0x0801c028
 80162a4:	200017e0 	.word	0x200017e0
 80162a8:	0801c048 	.word	0x0801c048

080162ac <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80162ac:	b580      	push	{r7, lr}
 80162ae:	b08a      	sub	sp, #40	; 0x28
 80162b0:	af00      	add	r7, sp, #0
 80162b2:	6078      	str	r0, [r7, #4]
 80162b4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80162b6:	2300      	movs	r3, #0
 80162b8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80162ba:	2300      	movs	r3, #0
 80162bc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80162be:	2300      	movs	r3, #0
 80162c0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80162c2:	2300      	movs	r3, #0
 80162c4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80162c6:	2300      	movs	r3, #0
 80162c8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80162ca:	4b28      	ldr	r3, [pc, #160]	; (801636c <ip_reass_remove_oldest_datagram+0xc0>)
 80162cc:	681b      	ldr	r3, [r3, #0]
 80162ce:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80162d0:	e030      	b.n	8016334 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80162d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162d4:	695a      	ldr	r2, [r3, #20]
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	68db      	ldr	r3, [r3, #12]
 80162da:	429a      	cmp	r2, r3
 80162dc:	d10c      	bne.n	80162f8 <ip_reass_remove_oldest_datagram+0x4c>
 80162de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162e0:	699a      	ldr	r2, [r3, #24]
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	691b      	ldr	r3, [r3, #16]
 80162e6:	429a      	cmp	r2, r3
 80162e8:	d106      	bne.n	80162f8 <ip_reass_remove_oldest_datagram+0x4c>
 80162ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162ec:	899a      	ldrh	r2, [r3, #12]
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	889b      	ldrh	r3, [r3, #4]
 80162f2:	b29b      	uxth	r3, r3
 80162f4:	429a      	cmp	r2, r3
 80162f6:	d014      	beq.n	8016322 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80162f8:	693b      	ldr	r3, [r7, #16]
 80162fa:	3301      	adds	r3, #1
 80162fc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80162fe:	6a3b      	ldr	r3, [r7, #32]
 8016300:	2b00      	cmp	r3, #0
 8016302:	d104      	bne.n	801630e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8016304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016306:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016308:	69fb      	ldr	r3, [r7, #28]
 801630a:	61bb      	str	r3, [r7, #24]
 801630c:	e009      	b.n	8016322 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801630e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016310:	7fda      	ldrb	r2, [r3, #31]
 8016312:	6a3b      	ldr	r3, [r7, #32]
 8016314:	7fdb      	ldrb	r3, [r3, #31]
 8016316:	429a      	cmp	r2, r3
 8016318:	d803      	bhi.n	8016322 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801631a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801631c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801631e:	69fb      	ldr	r3, [r7, #28]
 8016320:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8016322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016324:	681b      	ldr	r3, [r3, #0]
 8016326:	2b00      	cmp	r3, #0
 8016328:	d001      	beq.n	801632e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801632a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801632c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801632e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016330:	681b      	ldr	r3, [r3, #0]
 8016332:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016336:	2b00      	cmp	r3, #0
 8016338:	d1cb      	bne.n	80162d2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801633a:	6a3b      	ldr	r3, [r7, #32]
 801633c:	2b00      	cmp	r3, #0
 801633e:	d008      	beq.n	8016352 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016340:	69b9      	ldr	r1, [r7, #24]
 8016342:	6a38      	ldr	r0, [r7, #32]
 8016344:	f7ff ff0e 	bl	8016164 <ip_reass_free_complete_datagram>
 8016348:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801634a:	697a      	ldr	r2, [r7, #20]
 801634c:	68fb      	ldr	r3, [r7, #12]
 801634e:	4413      	add	r3, r2
 8016350:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8016352:	697a      	ldr	r2, [r7, #20]
 8016354:	683b      	ldr	r3, [r7, #0]
 8016356:	429a      	cmp	r2, r3
 8016358:	da02      	bge.n	8016360 <ip_reass_remove_oldest_datagram+0xb4>
 801635a:	693b      	ldr	r3, [r7, #16]
 801635c:	2b01      	cmp	r3, #1
 801635e:	dcac      	bgt.n	80162ba <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016360:	697b      	ldr	r3, [r7, #20]
}
 8016362:	4618      	mov	r0, r3
 8016364:	3728      	adds	r7, #40	; 0x28
 8016366:	46bd      	mov	sp, r7
 8016368:	bd80      	pop	{r7, pc}
 801636a:	bf00      	nop
 801636c:	200017dc 	.word	0x200017dc

08016370 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016370:	b580      	push	{r7, lr}
 8016372:	b084      	sub	sp, #16
 8016374:	af00      	add	r7, sp, #0
 8016376:	6078      	str	r0, [r7, #4]
 8016378:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801637a:	2004      	movs	r0, #4
 801637c:	f7f6 fece 	bl	800d11c <memp_malloc>
 8016380:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8016382:	68fb      	ldr	r3, [r7, #12]
 8016384:	2b00      	cmp	r3, #0
 8016386:	d110      	bne.n	80163aa <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8016388:	6839      	ldr	r1, [r7, #0]
 801638a:	6878      	ldr	r0, [r7, #4]
 801638c:	f7ff ff8e 	bl	80162ac <ip_reass_remove_oldest_datagram>
 8016390:	4602      	mov	r2, r0
 8016392:	683b      	ldr	r3, [r7, #0]
 8016394:	4293      	cmp	r3, r2
 8016396:	dc03      	bgt.n	80163a0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016398:	2004      	movs	r0, #4
 801639a:	f7f6 febf 	bl	800d11c <memp_malloc>
 801639e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80163a0:	68fb      	ldr	r3, [r7, #12]
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d101      	bne.n	80163aa <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80163a6:	2300      	movs	r3, #0
 80163a8:	e016      	b.n	80163d8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80163aa:	2220      	movs	r2, #32
 80163ac:	2100      	movs	r1, #0
 80163ae:	68f8      	ldr	r0, [r7, #12]
 80163b0:	f000 fe18 	bl	8016fe4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80163b4:	68fb      	ldr	r3, [r7, #12]
 80163b6:	220f      	movs	r2, #15
 80163b8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80163ba:	4b09      	ldr	r3, [pc, #36]	; (80163e0 <ip_reass_enqueue_new_datagram+0x70>)
 80163bc:	681a      	ldr	r2, [r3, #0]
 80163be:	68fb      	ldr	r3, [r7, #12]
 80163c0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80163c2:	4a07      	ldr	r2, [pc, #28]	; (80163e0 <ip_reass_enqueue_new_datagram+0x70>)
 80163c4:	68fb      	ldr	r3, [r7, #12]
 80163c6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80163c8:	68fb      	ldr	r3, [r7, #12]
 80163ca:	3308      	adds	r3, #8
 80163cc:	2214      	movs	r2, #20
 80163ce:	6879      	ldr	r1, [r7, #4]
 80163d0:	4618      	mov	r0, r3
 80163d2:	f000 fddf 	bl	8016f94 <memcpy>
  return ipr;
 80163d6:	68fb      	ldr	r3, [r7, #12]
}
 80163d8:	4618      	mov	r0, r3
 80163da:	3710      	adds	r7, #16
 80163dc:	46bd      	mov	sp, r7
 80163de:	bd80      	pop	{r7, pc}
 80163e0:	200017dc 	.word	0x200017dc

080163e4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80163e4:	b580      	push	{r7, lr}
 80163e6:	b082      	sub	sp, #8
 80163e8:	af00      	add	r7, sp, #0
 80163ea:	6078      	str	r0, [r7, #4]
 80163ec:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80163ee:	4b10      	ldr	r3, [pc, #64]	; (8016430 <ip_reass_dequeue_datagram+0x4c>)
 80163f0:	681b      	ldr	r3, [r3, #0]
 80163f2:	687a      	ldr	r2, [r7, #4]
 80163f4:	429a      	cmp	r2, r3
 80163f6:	d104      	bne.n	8016402 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	681b      	ldr	r3, [r3, #0]
 80163fc:	4a0c      	ldr	r2, [pc, #48]	; (8016430 <ip_reass_dequeue_datagram+0x4c>)
 80163fe:	6013      	str	r3, [r2, #0]
 8016400:	e00d      	b.n	801641e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8016402:	683b      	ldr	r3, [r7, #0]
 8016404:	2b00      	cmp	r3, #0
 8016406:	d106      	bne.n	8016416 <ip_reass_dequeue_datagram+0x32>
 8016408:	4b0a      	ldr	r3, [pc, #40]	; (8016434 <ip_reass_dequeue_datagram+0x50>)
 801640a:	f240 1245 	movw	r2, #325	; 0x145
 801640e:	490a      	ldr	r1, [pc, #40]	; (8016438 <ip_reass_dequeue_datagram+0x54>)
 8016410:	480a      	ldr	r0, [pc, #40]	; (801643c <ip_reass_dequeue_datagram+0x58>)
 8016412:	f000 fdef 	bl	8016ff4 <iprintf>
    prev->next = ipr->next;
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	681a      	ldr	r2, [r3, #0]
 801641a:	683b      	ldr	r3, [r7, #0]
 801641c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801641e:	6879      	ldr	r1, [r7, #4]
 8016420:	2004      	movs	r0, #4
 8016422:	f7f6 fec7 	bl	800d1b4 <memp_free>
}
 8016426:	bf00      	nop
 8016428:	3708      	adds	r7, #8
 801642a:	46bd      	mov	sp, r7
 801642c:	bd80      	pop	{r7, pc}
 801642e:	bf00      	nop
 8016430:	200017dc 	.word	0x200017dc
 8016434:	0801bfa4 	.word	0x0801bfa4
 8016438:	0801c06c 	.word	0x0801c06c
 801643c:	0801bfec 	.word	0x0801bfec

08016440 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016440:	b580      	push	{r7, lr}
 8016442:	b08c      	sub	sp, #48	; 0x30
 8016444:	af00      	add	r7, sp, #0
 8016446:	60f8      	str	r0, [r7, #12]
 8016448:	60b9      	str	r1, [r7, #8]
 801644a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801644c:	2300      	movs	r3, #0
 801644e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016450:	2301      	movs	r3, #1
 8016452:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8016454:	68bb      	ldr	r3, [r7, #8]
 8016456:	685b      	ldr	r3, [r3, #4]
 8016458:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801645a:	69fb      	ldr	r3, [r7, #28]
 801645c:	885b      	ldrh	r3, [r3, #2]
 801645e:	b29b      	uxth	r3, r3
 8016460:	4618      	mov	r0, r3
 8016462:	f7f6 f927 	bl	800c6b4 <lwip_htons>
 8016466:	4603      	mov	r3, r0
 8016468:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801646a:	69fb      	ldr	r3, [r7, #28]
 801646c:	781b      	ldrb	r3, [r3, #0]
 801646e:	f003 030f 	and.w	r3, r3, #15
 8016472:	b2db      	uxtb	r3, r3
 8016474:	009b      	lsls	r3, r3, #2
 8016476:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8016478:	7e7b      	ldrb	r3, [r7, #25]
 801647a:	b29b      	uxth	r3, r3
 801647c:	8b7a      	ldrh	r2, [r7, #26]
 801647e:	429a      	cmp	r2, r3
 8016480:	d202      	bcs.n	8016488 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016482:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016486:	e135      	b.n	80166f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8016488:	7e7b      	ldrb	r3, [r7, #25]
 801648a:	b29b      	uxth	r3, r3
 801648c:	8b7a      	ldrh	r2, [r7, #26]
 801648e:	1ad3      	subs	r3, r2, r3
 8016490:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8016492:	69fb      	ldr	r3, [r7, #28]
 8016494:	88db      	ldrh	r3, [r3, #6]
 8016496:	b29b      	uxth	r3, r3
 8016498:	4618      	mov	r0, r3
 801649a:	f7f6 f90b 	bl	800c6b4 <lwip_htons>
 801649e:	4603      	mov	r3, r0
 80164a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80164a4:	b29b      	uxth	r3, r3
 80164a6:	00db      	lsls	r3, r3, #3
 80164a8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80164aa:	68bb      	ldr	r3, [r7, #8]
 80164ac:	685b      	ldr	r3, [r3, #4]
 80164ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80164b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164b2:	2200      	movs	r2, #0
 80164b4:	701a      	strb	r2, [r3, #0]
 80164b6:	2200      	movs	r2, #0
 80164b8:	705a      	strb	r2, [r3, #1]
 80164ba:	2200      	movs	r2, #0
 80164bc:	709a      	strb	r2, [r3, #2]
 80164be:	2200      	movs	r2, #0
 80164c0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80164c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164c4:	8afa      	ldrh	r2, [r7, #22]
 80164c6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80164c8:	8afa      	ldrh	r2, [r7, #22]
 80164ca:	8b7b      	ldrh	r3, [r7, #26]
 80164cc:	4413      	add	r3, r2
 80164ce:	b29a      	uxth	r2, r3
 80164d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164d2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80164d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164d6:	88db      	ldrh	r3, [r3, #6]
 80164d8:	b29b      	uxth	r3, r3
 80164da:	8afa      	ldrh	r2, [r7, #22]
 80164dc:	429a      	cmp	r2, r3
 80164de:	d902      	bls.n	80164e6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80164e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80164e4:	e106      	b.n	80166f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80164e6:	68fb      	ldr	r3, [r7, #12]
 80164e8:	685b      	ldr	r3, [r3, #4]
 80164ea:	627b      	str	r3, [r7, #36]	; 0x24
 80164ec:	e068      	b.n	80165c0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80164ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164f0:	685b      	ldr	r3, [r3, #4]
 80164f2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80164f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164f6:	889b      	ldrh	r3, [r3, #4]
 80164f8:	b29a      	uxth	r2, r3
 80164fa:	693b      	ldr	r3, [r7, #16]
 80164fc:	889b      	ldrh	r3, [r3, #4]
 80164fe:	b29b      	uxth	r3, r3
 8016500:	429a      	cmp	r2, r3
 8016502:	d235      	bcs.n	8016570 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016508:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801650a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801650c:	2b00      	cmp	r3, #0
 801650e:	d020      	beq.n	8016552 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016512:	889b      	ldrh	r3, [r3, #4]
 8016514:	b29a      	uxth	r2, r3
 8016516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016518:	88db      	ldrh	r3, [r3, #6]
 801651a:	b29b      	uxth	r3, r3
 801651c:	429a      	cmp	r2, r3
 801651e:	d307      	bcc.n	8016530 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8016520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016522:	88db      	ldrh	r3, [r3, #6]
 8016524:	b29a      	uxth	r2, r3
 8016526:	693b      	ldr	r3, [r7, #16]
 8016528:	889b      	ldrh	r3, [r3, #4]
 801652a:	b29b      	uxth	r3, r3
 801652c:	429a      	cmp	r2, r3
 801652e:	d902      	bls.n	8016536 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016530:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016534:	e0de      	b.n	80166f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8016536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016538:	68ba      	ldr	r2, [r7, #8]
 801653a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801653c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801653e:	88db      	ldrh	r3, [r3, #6]
 8016540:	b29a      	uxth	r2, r3
 8016542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016544:	889b      	ldrh	r3, [r3, #4]
 8016546:	b29b      	uxth	r3, r3
 8016548:	429a      	cmp	r2, r3
 801654a:	d03d      	beq.n	80165c8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801654c:	2300      	movs	r3, #0
 801654e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016550:	e03a      	b.n	80165c8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8016552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016554:	88db      	ldrh	r3, [r3, #6]
 8016556:	b29a      	uxth	r2, r3
 8016558:	693b      	ldr	r3, [r7, #16]
 801655a:	889b      	ldrh	r3, [r3, #4]
 801655c:	b29b      	uxth	r3, r3
 801655e:	429a      	cmp	r2, r3
 8016560:	d902      	bls.n	8016568 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016562:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016566:	e0c5      	b.n	80166f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8016568:	68fb      	ldr	r3, [r7, #12]
 801656a:	68ba      	ldr	r2, [r7, #8]
 801656c:	605a      	str	r2, [r3, #4]
      break;
 801656e:	e02b      	b.n	80165c8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016572:	889b      	ldrh	r3, [r3, #4]
 8016574:	b29a      	uxth	r2, r3
 8016576:	693b      	ldr	r3, [r7, #16]
 8016578:	889b      	ldrh	r3, [r3, #4]
 801657a:	b29b      	uxth	r3, r3
 801657c:	429a      	cmp	r2, r3
 801657e:	d102      	bne.n	8016586 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016580:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016584:	e0b6      	b.n	80166f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8016586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016588:	889b      	ldrh	r3, [r3, #4]
 801658a:	b29a      	uxth	r2, r3
 801658c:	693b      	ldr	r3, [r7, #16]
 801658e:	88db      	ldrh	r3, [r3, #6]
 8016590:	b29b      	uxth	r3, r3
 8016592:	429a      	cmp	r2, r3
 8016594:	d202      	bcs.n	801659c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801659a:	e0ab      	b.n	80166f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801659c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d009      	beq.n	80165b6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80165a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165a4:	88db      	ldrh	r3, [r3, #6]
 80165a6:	b29a      	uxth	r2, r3
 80165a8:	693b      	ldr	r3, [r7, #16]
 80165aa:	889b      	ldrh	r3, [r3, #4]
 80165ac:	b29b      	uxth	r3, r3
 80165ae:	429a      	cmp	r2, r3
 80165b0:	d001      	beq.n	80165b6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80165b2:	2300      	movs	r3, #0
 80165b4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80165b6:	693b      	ldr	r3, [r7, #16]
 80165b8:	681b      	ldr	r3, [r3, #0]
 80165ba:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80165bc:	693b      	ldr	r3, [r7, #16]
 80165be:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80165c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d193      	bne.n	80164ee <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80165c6:	e000      	b.n	80165ca <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80165c8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80165ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d12d      	bne.n	801662c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80165d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165d2:	2b00      	cmp	r3, #0
 80165d4:	d01c      	beq.n	8016610 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80165d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165d8:	88db      	ldrh	r3, [r3, #6]
 80165da:	b29a      	uxth	r2, r3
 80165dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165de:	889b      	ldrh	r3, [r3, #4]
 80165e0:	b29b      	uxth	r3, r3
 80165e2:	429a      	cmp	r2, r3
 80165e4:	d906      	bls.n	80165f4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80165e6:	4b45      	ldr	r3, [pc, #276]	; (80166fc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80165e8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80165ec:	4944      	ldr	r1, [pc, #272]	; (8016700 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80165ee:	4845      	ldr	r0, [pc, #276]	; (8016704 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80165f0:	f000 fd00 	bl	8016ff4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80165f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165f6:	68ba      	ldr	r2, [r7, #8]
 80165f8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80165fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165fc:	88db      	ldrh	r3, [r3, #6]
 80165fe:	b29a      	uxth	r2, r3
 8016600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016602:	889b      	ldrh	r3, [r3, #4]
 8016604:	b29b      	uxth	r3, r3
 8016606:	429a      	cmp	r2, r3
 8016608:	d010      	beq.n	801662c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801660a:	2300      	movs	r3, #0
 801660c:	623b      	str	r3, [r7, #32]
 801660e:	e00d      	b.n	801662c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016610:	68fb      	ldr	r3, [r7, #12]
 8016612:	685b      	ldr	r3, [r3, #4]
 8016614:	2b00      	cmp	r3, #0
 8016616:	d006      	beq.n	8016626 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016618:	4b38      	ldr	r3, [pc, #224]	; (80166fc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801661a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801661e:	493a      	ldr	r1, [pc, #232]	; (8016708 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016620:	4838      	ldr	r0, [pc, #224]	; (8016704 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016622:	f000 fce7 	bl	8016ff4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8016626:	68fb      	ldr	r3, [r7, #12]
 8016628:	68ba      	ldr	r2, [r7, #8]
 801662a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	2b00      	cmp	r3, #0
 8016630:	d105      	bne.n	801663e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8016632:	68fb      	ldr	r3, [r7, #12]
 8016634:	7f9b      	ldrb	r3, [r3, #30]
 8016636:	f003 0301 	and.w	r3, r3, #1
 801663a:	2b00      	cmp	r3, #0
 801663c:	d059      	beq.n	80166f2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801663e:	6a3b      	ldr	r3, [r7, #32]
 8016640:	2b00      	cmp	r3, #0
 8016642:	d04f      	beq.n	80166e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016644:	68fb      	ldr	r3, [r7, #12]
 8016646:	685b      	ldr	r3, [r3, #4]
 8016648:	2b00      	cmp	r3, #0
 801664a:	d006      	beq.n	801665a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801664c:	68fb      	ldr	r3, [r7, #12]
 801664e:	685b      	ldr	r3, [r3, #4]
 8016650:	685b      	ldr	r3, [r3, #4]
 8016652:	889b      	ldrh	r3, [r3, #4]
 8016654:	b29b      	uxth	r3, r3
 8016656:	2b00      	cmp	r3, #0
 8016658:	d002      	beq.n	8016660 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801665a:	2300      	movs	r3, #0
 801665c:	623b      	str	r3, [r7, #32]
 801665e:	e041      	b.n	80166e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016662:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8016664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016666:	681b      	ldr	r3, [r3, #0]
 8016668:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801666a:	e012      	b.n	8016692 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801666c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801666e:	685b      	ldr	r3, [r3, #4]
 8016670:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8016672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016674:	88db      	ldrh	r3, [r3, #6]
 8016676:	b29a      	uxth	r2, r3
 8016678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801667a:	889b      	ldrh	r3, [r3, #4]
 801667c:	b29b      	uxth	r3, r3
 801667e:	429a      	cmp	r2, r3
 8016680:	d002      	beq.n	8016688 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8016682:	2300      	movs	r3, #0
 8016684:	623b      	str	r3, [r7, #32]
            break;
 8016686:	e007      	b.n	8016698 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8016688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801668a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801668c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801668e:	681b      	ldr	r3, [r3, #0]
 8016690:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016694:	2b00      	cmp	r3, #0
 8016696:	d1e9      	bne.n	801666c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016698:	6a3b      	ldr	r3, [r7, #32]
 801669a:	2b00      	cmp	r3, #0
 801669c:	d022      	beq.n	80166e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801669e:	68fb      	ldr	r3, [r7, #12]
 80166a0:	685b      	ldr	r3, [r3, #4]
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	d106      	bne.n	80166b4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80166a6:	4b15      	ldr	r3, [pc, #84]	; (80166fc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80166a8:	f240 12df 	movw	r2, #479	; 0x1df
 80166ac:	4917      	ldr	r1, [pc, #92]	; (801670c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80166ae:	4815      	ldr	r0, [pc, #84]	; (8016704 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80166b0:	f000 fca0 	bl	8016ff4 <iprintf>
          LWIP_ASSERT("sanity check",
 80166b4:	68fb      	ldr	r3, [r7, #12]
 80166b6:	685b      	ldr	r3, [r3, #4]
 80166b8:	685b      	ldr	r3, [r3, #4]
 80166ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80166bc:	429a      	cmp	r2, r3
 80166be:	d106      	bne.n	80166ce <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80166c0:	4b0e      	ldr	r3, [pc, #56]	; (80166fc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80166c2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80166c6:	4911      	ldr	r1, [pc, #68]	; (801670c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80166c8:	480e      	ldr	r0, [pc, #56]	; (8016704 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80166ca:	f000 fc93 	bl	8016ff4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80166ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166d0:	681b      	ldr	r3, [r3, #0]
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d006      	beq.n	80166e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80166d6:	4b09      	ldr	r3, [pc, #36]	; (80166fc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80166d8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80166dc:	490c      	ldr	r1, [pc, #48]	; (8016710 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80166de:	4809      	ldr	r0, [pc, #36]	; (8016704 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80166e0:	f000 fc88 	bl	8016ff4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80166e4:	6a3b      	ldr	r3, [r7, #32]
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	bf14      	ite	ne
 80166ea:	2301      	movne	r3, #1
 80166ec:	2300      	moveq	r3, #0
 80166ee:	b2db      	uxtb	r3, r3
 80166f0:	e000      	b.n	80166f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80166f2:	2300      	movs	r3, #0
}
 80166f4:	4618      	mov	r0, r3
 80166f6:	3730      	adds	r7, #48	; 0x30
 80166f8:	46bd      	mov	sp, r7
 80166fa:	bd80      	pop	{r7, pc}
 80166fc:	0801bfa4 	.word	0x0801bfa4
 8016700:	0801c088 	.word	0x0801c088
 8016704:	0801bfec 	.word	0x0801bfec
 8016708:	0801c0a8 	.word	0x0801c0a8
 801670c:	0801c0e0 	.word	0x0801c0e0
 8016710:	0801c0f0 	.word	0x0801c0f0

08016714 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016714:	b580      	push	{r7, lr}
 8016716:	b08e      	sub	sp, #56	; 0x38
 8016718:	af00      	add	r7, sp, #0
 801671a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	685b      	ldr	r3, [r3, #4]
 8016720:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8016722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016724:	781b      	ldrb	r3, [r3, #0]
 8016726:	f003 030f 	and.w	r3, r3, #15
 801672a:	b2db      	uxtb	r3, r3
 801672c:	009b      	lsls	r3, r3, #2
 801672e:	b2db      	uxtb	r3, r3
 8016730:	2b14      	cmp	r3, #20
 8016732:	f040 8167 	bne.w	8016a04 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8016736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016738:	88db      	ldrh	r3, [r3, #6]
 801673a:	b29b      	uxth	r3, r3
 801673c:	4618      	mov	r0, r3
 801673e:	f7f5 ffb9 	bl	800c6b4 <lwip_htons>
 8016742:	4603      	mov	r3, r0
 8016744:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016748:	b29b      	uxth	r3, r3
 801674a:	00db      	lsls	r3, r3, #3
 801674c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801674e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016750:	885b      	ldrh	r3, [r3, #2]
 8016752:	b29b      	uxth	r3, r3
 8016754:	4618      	mov	r0, r3
 8016756:	f7f5 ffad 	bl	800c6b4 <lwip_htons>
 801675a:	4603      	mov	r3, r0
 801675c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801675e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016760:	781b      	ldrb	r3, [r3, #0]
 8016762:	f003 030f 	and.w	r3, r3, #15
 8016766:	b2db      	uxtb	r3, r3
 8016768:	009b      	lsls	r3, r3, #2
 801676a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801676e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016772:	b29b      	uxth	r3, r3
 8016774:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016776:	429a      	cmp	r2, r3
 8016778:	f0c0 8146 	bcc.w	8016a08 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801677c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016780:	b29b      	uxth	r3, r3
 8016782:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016784:	1ad3      	subs	r3, r2, r3
 8016786:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8016788:	6878      	ldr	r0, [r7, #4]
 801678a:	f7f7 fbad 	bl	800dee8 <pbuf_clen>
 801678e:	4603      	mov	r3, r0
 8016790:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016792:	4b9f      	ldr	r3, [pc, #636]	; (8016a10 <ip4_reass+0x2fc>)
 8016794:	881b      	ldrh	r3, [r3, #0]
 8016796:	461a      	mov	r2, r3
 8016798:	8c3b      	ldrh	r3, [r7, #32]
 801679a:	4413      	add	r3, r2
 801679c:	2b0a      	cmp	r3, #10
 801679e:	dd10      	ble.n	80167c2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80167a0:	8c3b      	ldrh	r3, [r7, #32]
 80167a2:	4619      	mov	r1, r3
 80167a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80167a6:	f7ff fd81 	bl	80162ac <ip_reass_remove_oldest_datagram>
 80167aa:	4603      	mov	r3, r0
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	f000 812d 	beq.w	8016a0c <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80167b2:	4b97      	ldr	r3, [pc, #604]	; (8016a10 <ip4_reass+0x2fc>)
 80167b4:	881b      	ldrh	r3, [r3, #0]
 80167b6:	461a      	mov	r2, r3
 80167b8:	8c3b      	ldrh	r3, [r7, #32]
 80167ba:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80167bc:	2b0a      	cmp	r3, #10
 80167be:	f300 8125 	bgt.w	8016a0c <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80167c2:	4b94      	ldr	r3, [pc, #592]	; (8016a14 <ip4_reass+0x300>)
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	633b      	str	r3, [r7, #48]	; 0x30
 80167c8:	e015      	b.n	80167f6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80167ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167cc:	695a      	ldr	r2, [r3, #20]
 80167ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167d0:	68db      	ldr	r3, [r3, #12]
 80167d2:	429a      	cmp	r2, r3
 80167d4:	d10c      	bne.n	80167f0 <ip4_reass+0xdc>
 80167d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167d8:	699a      	ldr	r2, [r3, #24]
 80167da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167dc:	691b      	ldr	r3, [r3, #16]
 80167de:	429a      	cmp	r2, r3
 80167e0:	d106      	bne.n	80167f0 <ip4_reass+0xdc>
 80167e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167e4:	899a      	ldrh	r2, [r3, #12]
 80167e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167e8:	889b      	ldrh	r3, [r3, #4]
 80167ea:	b29b      	uxth	r3, r3
 80167ec:	429a      	cmp	r2, r3
 80167ee:	d006      	beq.n	80167fe <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80167f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167f2:	681b      	ldr	r3, [r3, #0]
 80167f4:	633b      	str	r3, [r7, #48]	; 0x30
 80167f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167f8:	2b00      	cmp	r3, #0
 80167fa:	d1e6      	bne.n	80167ca <ip4_reass+0xb6>
 80167fc:	e000      	b.n	8016800 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80167fe:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016802:	2b00      	cmp	r3, #0
 8016804:	d109      	bne.n	801681a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8016806:	8c3b      	ldrh	r3, [r7, #32]
 8016808:	4619      	mov	r1, r3
 801680a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801680c:	f7ff fdb0 	bl	8016370 <ip_reass_enqueue_new_datagram>
 8016810:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016814:	2b00      	cmp	r3, #0
 8016816:	d11c      	bne.n	8016852 <ip4_reass+0x13e>
      goto nullreturn;
 8016818:	e109      	b.n	8016a2e <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801681a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801681c:	88db      	ldrh	r3, [r3, #6]
 801681e:	b29b      	uxth	r3, r3
 8016820:	4618      	mov	r0, r3
 8016822:	f7f5 ff47 	bl	800c6b4 <lwip_htons>
 8016826:	4603      	mov	r3, r0
 8016828:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801682c:	2b00      	cmp	r3, #0
 801682e:	d110      	bne.n	8016852 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016832:	89db      	ldrh	r3, [r3, #14]
 8016834:	4618      	mov	r0, r3
 8016836:	f7f5 ff3d 	bl	800c6b4 <lwip_htons>
 801683a:	4603      	mov	r3, r0
 801683c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016840:	2b00      	cmp	r3, #0
 8016842:	d006      	beq.n	8016852 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016846:	3308      	adds	r3, #8
 8016848:	2214      	movs	r2, #20
 801684a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801684c:	4618      	mov	r0, r3
 801684e:	f000 fba1 	bl	8016f94 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016854:	88db      	ldrh	r3, [r3, #6]
 8016856:	b29b      	uxth	r3, r3
 8016858:	f003 0320 	and.w	r3, r3, #32
 801685c:	2b00      	cmp	r3, #0
 801685e:	bf0c      	ite	eq
 8016860:	2301      	moveq	r3, #1
 8016862:	2300      	movne	r3, #0
 8016864:	b2db      	uxtb	r3, r3
 8016866:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8016868:	69fb      	ldr	r3, [r7, #28]
 801686a:	2b00      	cmp	r3, #0
 801686c:	d00e      	beq.n	801688c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801686e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016870:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016872:	4413      	add	r3, r2
 8016874:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8016876:	8b7a      	ldrh	r2, [r7, #26]
 8016878:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801687a:	429a      	cmp	r2, r3
 801687c:	f0c0 80a0 	bcc.w	80169c0 <ip4_reass+0x2ac>
 8016880:	8b7b      	ldrh	r3, [r7, #26]
 8016882:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8016886:	4293      	cmp	r3, r2
 8016888:	f200 809a 	bhi.w	80169c0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801688c:	69fa      	ldr	r2, [r7, #28]
 801688e:	6879      	ldr	r1, [r7, #4]
 8016890:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016892:	f7ff fdd5 	bl	8016440 <ip_reass_chain_frag_into_datagram_and_validate>
 8016896:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8016898:	697b      	ldr	r3, [r7, #20]
 801689a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801689e:	f000 8091 	beq.w	80169c4 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80168a2:	4b5b      	ldr	r3, [pc, #364]	; (8016a10 <ip4_reass+0x2fc>)
 80168a4:	881a      	ldrh	r2, [r3, #0]
 80168a6:	8c3b      	ldrh	r3, [r7, #32]
 80168a8:	4413      	add	r3, r2
 80168aa:	b29a      	uxth	r2, r3
 80168ac:	4b58      	ldr	r3, [pc, #352]	; (8016a10 <ip4_reass+0x2fc>)
 80168ae:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80168b0:	69fb      	ldr	r3, [r7, #28]
 80168b2:	2b00      	cmp	r3, #0
 80168b4:	d00d      	beq.n	80168d2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80168b6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80168b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80168ba:	4413      	add	r3, r2
 80168bc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80168be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168c0:	8a7a      	ldrh	r2, [r7, #18]
 80168c2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80168c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168c6:	7f9b      	ldrb	r3, [r3, #30]
 80168c8:	f043 0301 	orr.w	r3, r3, #1
 80168cc:	b2da      	uxtb	r2, r3
 80168ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168d0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80168d2:	697b      	ldr	r3, [r7, #20]
 80168d4:	2b01      	cmp	r3, #1
 80168d6:	d171      	bne.n	80169bc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80168d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168da:	8b9b      	ldrh	r3, [r3, #28]
 80168dc:	3314      	adds	r3, #20
 80168de:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80168e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168e2:	685b      	ldr	r3, [r3, #4]
 80168e4:	685b      	ldr	r3, [r3, #4]
 80168e6:	681b      	ldr	r3, [r3, #0]
 80168e8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80168ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168ec:	685b      	ldr	r3, [r3, #4]
 80168ee:	685b      	ldr	r3, [r3, #4]
 80168f0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80168f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168f4:	3308      	adds	r3, #8
 80168f6:	2214      	movs	r2, #20
 80168f8:	4619      	mov	r1, r3
 80168fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80168fc:	f000 fb4a 	bl	8016f94 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016900:	8a3b      	ldrh	r3, [r7, #16]
 8016902:	4618      	mov	r0, r3
 8016904:	f7f5 fed6 	bl	800c6b4 <lwip_htons>
 8016908:	4603      	mov	r3, r0
 801690a:	461a      	mov	r2, r3
 801690c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801690e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016912:	2200      	movs	r2, #0
 8016914:	719a      	strb	r2, [r3, #6]
 8016916:	2200      	movs	r2, #0
 8016918:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801691a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801691c:	2200      	movs	r2, #0
 801691e:	729a      	strb	r2, [r3, #10]
 8016920:	2200      	movs	r2, #0
 8016922:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016926:	685b      	ldr	r3, [r3, #4]
 8016928:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801692a:	e00d      	b.n	8016948 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801692c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801692e:	685b      	ldr	r3, [r3, #4]
 8016930:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8016932:	2114      	movs	r1, #20
 8016934:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016936:	f7f7 f9c9 	bl	800dccc <pbuf_remove_header>
      pbuf_cat(p, r);
 801693a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801693c:	6878      	ldr	r0, [r7, #4]
 801693e:	f7f7 fb0d 	bl	800df5c <pbuf_cat>
      r = iprh->next_pbuf;
 8016942:	68fb      	ldr	r3, [r7, #12]
 8016944:	681b      	ldr	r3, [r3, #0]
 8016946:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8016948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801694a:	2b00      	cmp	r3, #0
 801694c:	d1ee      	bne.n	801692c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801694e:	4b31      	ldr	r3, [pc, #196]	; (8016a14 <ip4_reass+0x300>)
 8016950:	681b      	ldr	r3, [r3, #0]
 8016952:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016954:	429a      	cmp	r2, r3
 8016956:	d102      	bne.n	801695e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8016958:	2300      	movs	r3, #0
 801695a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801695c:	e010      	b.n	8016980 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801695e:	4b2d      	ldr	r3, [pc, #180]	; (8016a14 <ip4_reass+0x300>)
 8016960:	681b      	ldr	r3, [r3, #0]
 8016962:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016964:	e007      	b.n	8016976 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8016966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016968:	681b      	ldr	r3, [r3, #0]
 801696a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801696c:	429a      	cmp	r2, r3
 801696e:	d006      	beq.n	801697e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016972:	681b      	ldr	r3, [r3, #0]
 8016974:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016978:	2b00      	cmp	r3, #0
 801697a:	d1f4      	bne.n	8016966 <ip4_reass+0x252>
 801697c:	e000      	b.n	8016980 <ip4_reass+0x26c>
          break;
 801697e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016980:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016982:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016984:	f7ff fd2e 	bl	80163e4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8016988:	6878      	ldr	r0, [r7, #4]
 801698a:	f7f7 faad 	bl	800dee8 <pbuf_clen>
 801698e:	4603      	mov	r3, r0
 8016990:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8016992:	4b1f      	ldr	r3, [pc, #124]	; (8016a10 <ip4_reass+0x2fc>)
 8016994:	881b      	ldrh	r3, [r3, #0]
 8016996:	8c3a      	ldrh	r2, [r7, #32]
 8016998:	429a      	cmp	r2, r3
 801699a:	d906      	bls.n	80169aa <ip4_reass+0x296>
 801699c:	4b1e      	ldr	r3, [pc, #120]	; (8016a18 <ip4_reass+0x304>)
 801699e:	f240 229b 	movw	r2, #667	; 0x29b
 80169a2:	491e      	ldr	r1, [pc, #120]	; (8016a1c <ip4_reass+0x308>)
 80169a4:	481e      	ldr	r0, [pc, #120]	; (8016a20 <ip4_reass+0x30c>)
 80169a6:	f000 fb25 	bl	8016ff4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80169aa:	4b19      	ldr	r3, [pc, #100]	; (8016a10 <ip4_reass+0x2fc>)
 80169ac:	881a      	ldrh	r2, [r3, #0]
 80169ae:	8c3b      	ldrh	r3, [r7, #32]
 80169b0:	1ad3      	subs	r3, r2, r3
 80169b2:	b29a      	uxth	r2, r3
 80169b4:	4b16      	ldr	r3, [pc, #88]	; (8016a10 <ip4_reass+0x2fc>)
 80169b6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	e03c      	b.n	8016a36 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80169bc:	2300      	movs	r3, #0
 80169be:	e03a      	b.n	8016a36 <ip4_reass+0x322>
      goto nullreturn_ipr;
 80169c0:	bf00      	nop
 80169c2:	e000      	b.n	80169c6 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80169c4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80169c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	d106      	bne.n	80169da <ip4_reass+0x2c6>
 80169cc:	4b12      	ldr	r3, [pc, #72]	; (8016a18 <ip4_reass+0x304>)
 80169ce:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80169d2:	4914      	ldr	r1, [pc, #80]	; (8016a24 <ip4_reass+0x310>)
 80169d4:	4812      	ldr	r0, [pc, #72]	; (8016a20 <ip4_reass+0x30c>)
 80169d6:	f000 fb0d 	bl	8016ff4 <iprintf>
  if (ipr->p == NULL) {
 80169da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169dc:	685b      	ldr	r3, [r3, #4]
 80169de:	2b00      	cmp	r3, #0
 80169e0:	d124      	bne.n	8016a2c <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80169e2:	4b0c      	ldr	r3, [pc, #48]	; (8016a14 <ip4_reass+0x300>)
 80169e4:	681b      	ldr	r3, [r3, #0]
 80169e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80169e8:	429a      	cmp	r2, r3
 80169ea:	d006      	beq.n	80169fa <ip4_reass+0x2e6>
 80169ec:	4b0a      	ldr	r3, [pc, #40]	; (8016a18 <ip4_reass+0x304>)
 80169ee:	f240 22ab 	movw	r2, #683	; 0x2ab
 80169f2:	490d      	ldr	r1, [pc, #52]	; (8016a28 <ip4_reass+0x314>)
 80169f4:	480a      	ldr	r0, [pc, #40]	; (8016a20 <ip4_reass+0x30c>)
 80169f6:	f000 fafd 	bl	8016ff4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80169fa:	2100      	movs	r1, #0
 80169fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80169fe:	f7ff fcf1 	bl	80163e4 <ip_reass_dequeue_datagram>
 8016a02:	e014      	b.n	8016a2e <ip4_reass+0x31a>
    goto nullreturn;
 8016a04:	bf00      	nop
 8016a06:	e012      	b.n	8016a2e <ip4_reass+0x31a>
    goto nullreturn;
 8016a08:	bf00      	nop
 8016a0a:	e010      	b.n	8016a2e <ip4_reass+0x31a>
      goto nullreturn;
 8016a0c:	bf00      	nop
 8016a0e:	e00e      	b.n	8016a2e <ip4_reass+0x31a>
 8016a10:	200017e0 	.word	0x200017e0
 8016a14:	200017dc 	.word	0x200017dc
 8016a18:	0801bfa4 	.word	0x0801bfa4
 8016a1c:	0801c114 	.word	0x0801c114
 8016a20:	0801bfec 	.word	0x0801bfec
 8016a24:	0801c130 	.word	0x0801c130
 8016a28:	0801c13c 	.word	0x0801c13c
  }

nullreturn:
 8016a2c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8016a2e:	6878      	ldr	r0, [r7, #4]
 8016a30:	f7f7 f9d2 	bl	800ddd8 <pbuf_free>
  return NULL;
 8016a34:	2300      	movs	r3, #0
}
 8016a36:	4618      	mov	r0, r3
 8016a38:	3738      	adds	r7, #56	; 0x38
 8016a3a:	46bd      	mov	sp, r7
 8016a3c:	bd80      	pop	{r7, pc}
 8016a3e:	bf00      	nop

08016a40 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016a40:	b580      	push	{r7, lr}
 8016a42:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016a44:	2005      	movs	r0, #5
 8016a46:	f7f6 fb69 	bl	800d11c <memp_malloc>
 8016a4a:	4603      	mov	r3, r0
}
 8016a4c:	4618      	mov	r0, r3
 8016a4e:	bd80      	pop	{r7, pc}

08016a50 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8016a50:	b580      	push	{r7, lr}
 8016a52:	b082      	sub	sp, #8
 8016a54:	af00      	add	r7, sp, #0
 8016a56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	d106      	bne.n	8016a6c <ip_frag_free_pbuf_custom_ref+0x1c>
 8016a5e:	4b07      	ldr	r3, [pc, #28]	; (8016a7c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8016a60:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8016a64:	4906      	ldr	r1, [pc, #24]	; (8016a80 <ip_frag_free_pbuf_custom_ref+0x30>)
 8016a66:	4807      	ldr	r0, [pc, #28]	; (8016a84 <ip_frag_free_pbuf_custom_ref+0x34>)
 8016a68:	f000 fac4 	bl	8016ff4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016a6c:	6879      	ldr	r1, [r7, #4]
 8016a6e:	2005      	movs	r0, #5
 8016a70:	f7f6 fba0 	bl	800d1b4 <memp_free>
}
 8016a74:	bf00      	nop
 8016a76:	3708      	adds	r7, #8
 8016a78:	46bd      	mov	sp, r7
 8016a7a:	bd80      	pop	{r7, pc}
 8016a7c:	0801bfa4 	.word	0x0801bfa4
 8016a80:	0801c15c 	.word	0x0801c15c
 8016a84:	0801bfec 	.word	0x0801bfec

08016a88 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016a88:	b580      	push	{r7, lr}
 8016a8a:	b084      	sub	sp, #16
 8016a8c:	af00      	add	r7, sp, #0
 8016a8e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016a94:	68fb      	ldr	r3, [r7, #12]
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d106      	bne.n	8016aa8 <ipfrag_free_pbuf_custom+0x20>
 8016a9a:	4b11      	ldr	r3, [pc, #68]	; (8016ae0 <ipfrag_free_pbuf_custom+0x58>)
 8016a9c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8016aa0:	4910      	ldr	r1, [pc, #64]	; (8016ae4 <ipfrag_free_pbuf_custom+0x5c>)
 8016aa2:	4811      	ldr	r0, [pc, #68]	; (8016ae8 <ipfrag_free_pbuf_custom+0x60>)
 8016aa4:	f000 faa6 	bl	8016ff4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016aa8:	68fa      	ldr	r2, [r7, #12]
 8016aaa:	687b      	ldr	r3, [r7, #4]
 8016aac:	429a      	cmp	r2, r3
 8016aae:	d006      	beq.n	8016abe <ipfrag_free_pbuf_custom+0x36>
 8016ab0:	4b0b      	ldr	r3, [pc, #44]	; (8016ae0 <ipfrag_free_pbuf_custom+0x58>)
 8016ab2:	f240 22cf 	movw	r2, #719	; 0x2cf
 8016ab6:	490d      	ldr	r1, [pc, #52]	; (8016aec <ipfrag_free_pbuf_custom+0x64>)
 8016ab8:	480b      	ldr	r0, [pc, #44]	; (8016ae8 <ipfrag_free_pbuf_custom+0x60>)
 8016aba:	f000 fa9b 	bl	8016ff4 <iprintf>
  if (pcr->original != NULL) {
 8016abe:	68fb      	ldr	r3, [r7, #12]
 8016ac0:	695b      	ldr	r3, [r3, #20]
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d004      	beq.n	8016ad0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016ac6:	68fb      	ldr	r3, [r7, #12]
 8016ac8:	695b      	ldr	r3, [r3, #20]
 8016aca:	4618      	mov	r0, r3
 8016acc:	f7f7 f984 	bl	800ddd8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016ad0:	68f8      	ldr	r0, [r7, #12]
 8016ad2:	f7ff ffbd 	bl	8016a50 <ip_frag_free_pbuf_custom_ref>
}
 8016ad6:	bf00      	nop
 8016ad8:	3710      	adds	r7, #16
 8016ada:	46bd      	mov	sp, r7
 8016adc:	bd80      	pop	{r7, pc}
 8016ade:	bf00      	nop
 8016ae0:	0801bfa4 	.word	0x0801bfa4
 8016ae4:	0801c168 	.word	0x0801c168
 8016ae8:	0801bfec 	.word	0x0801bfec
 8016aec:	0801c174 	.word	0x0801c174

08016af0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016af0:	b580      	push	{r7, lr}
 8016af2:	b094      	sub	sp, #80	; 0x50
 8016af4:	af02      	add	r7, sp, #8
 8016af6:	60f8      	str	r0, [r7, #12]
 8016af8:	60b9      	str	r1, [r7, #8]
 8016afa:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016afc:	2300      	movs	r3, #0
 8016afe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8016b02:	68bb      	ldr	r3, [r7, #8]
 8016b04:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016b06:	3b14      	subs	r3, #20
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	da00      	bge.n	8016b0e <ip4_frag+0x1e>
 8016b0c:	3307      	adds	r3, #7
 8016b0e:	10db      	asrs	r3, r3, #3
 8016b10:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8016b12:	2314      	movs	r3, #20
 8016b14:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016b16:	68fb      	ldr	r3, [r7, #12]
 8016b18:	685b      	ldr	r3, [r3, #4]
 8016b1a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8016b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b1e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b22:	781b      	ldrb	r3, [r3, #0]
 8016b24:	f003 030f 	and.w	r3, r3, #15
 8016b28:	b2db      	uxtb	r3, r3
 8016b2a:	009b      	lsls	r3, r3, #2
 8016b2c:	b2db      	uxtb	r3, r3
 8016b2e:	2b14      	cmp	r3, #20
 8016b30:	d002      	beq.n	8016b38 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8016b32:	f06f 0305 	mvn.w	r3, #5
 8016b36:	e110      	b.n	8016d5a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016b38:	68fb      	ldr	r3, [r7, #12]
 8016b3a:	895b      	ldrh	r3, [r3, #10]
 8016b3c:	2b13      	cmp	r3, #19
 8016b3e:	d809      	bhi.n	8016b54 <ip4_frag+0x64>
 8016b40:	4b88      	ldr	r3, [pc, #544]	; (8016d64 <ip4_frag+0x274>)
 8016b42:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8016b46:	4988      	ldr	r1, [pc, #544]	; (8016d68 <ip4_frag+0x278>)
 8016b48:	4888      	ldr	r0, [pc, #544]	; (8016d6c <ip4_frag+0x27c>)
 8016b4a:	f000 fa53 	bl	8016ff4 <iprintf>
 8016b4e:	f06f 0305 	mvn.w	r3, #5
 8016b52:	e102      	b.n	8016d5a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b56:	88db      	ldrh	r3, [r3, #6]
 8016b58:	b29b      	uxth	r3, r3
 8016b5a:	4618      	mov	r0, r3
 8016b5c:	f7f5 fdaa 	bl	800c6b4 <lwip_htons>
 8016b60:	4603      	mov	r3, r0
 8016b62:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8016b64:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016b66:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016b6a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8016b6e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016b70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016b74:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8016b76:	68fb      	ldr	r3, [r7, #12]
 8016b78:	891b      	ldrh	r3, [r3, #8]
 8016b7a:	3b14      	subs	r3, #20
 8016b7c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8016b80:	e0e1      	b.n	8016d46 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8016b82:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016b84:	00db      	lsls	r3, r3, #3
 8016b86:	b29b      	uxth	r3, r3
 8016b88:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016b8c:	4293      	cmp	r3, r2
 8016b8e:	bf28      	it	cs
 8016b90:	4613      	movcs	r3, r2
 8016b92:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016b94:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016b98:	2114      	movs	r1, #20
 8016b9a:	200e      	movs	r0, #14
 8016b9c:	f7f6 fe38 	bl	800d810 <pbuf_alloc>
 8016ba0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8016ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	f000 80d5 	beq.w	8016d54 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bac:	895b      	ldrh	r3, [r3, #10]
 8016bae:	2b13      	cmp	r3, #19
 8016bb0:	d806      	bhi.n	8016bc0 <ip4_frag+0xd0>
 8016bb2:	4b6c      	ldr	r3, [pc, #432]	; (8016d64 <ip4_frag+0x274>)
 8016bb4:	f44f 7249 	mov.w	r2, #804	; 0x324
 8016bb8:	496d      	ldr	r1, [pc, #436]	; (8016d70 <ip4_frag+0x280>)
 8016bba:	486c      	ldr	r0, [pc, #432]	; (8016d6c <ip4_frag+0x27c>)
 8016bbc:	f000 fa1a 	bl	8016ff4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bc2:	685b      	ldr	r3, [r3, #4]
 8016bc4:	2214      	movs	r2, #20
 8016bc6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016bc8:	4618      	mov	r0, r3
 8016bca:	f000 f9e3 	bl	8016f94 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8016bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bd0:	685b      	ldr	r3, [r3, #4]
 8016bd2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8016bd4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016bd6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8016bda:	e064      	b.n	8016ca6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016bdc:	68fb      	ldr	r3, [r7, #12]
 8016bde:	895a      	ldrh	r2, [r3, #10]
 8016be0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016be2:	1ad3      	subs	r3, r2, r3
 8016be4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8016be6:	68fb      	ldr	r3, [r7, #12]
 8016be8:	895b      	ldrh	r3, [r3, #10]
 8016bea:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016bec:	429a      	cmp	r2, r3
 8016bee:	d906      	bls.n	8016bfe <ip4_frag+0x10e>
 8016bf0:	4b5c      	ldr	r3, [pc, #368]	; (8016d64 <ip4_frag+0x274>)
 8016bf2:	f240 322d 	movw	r2, #813	; 0x32d
 8016bf6:	495f      	ldr	r1, [pc, #380]	; (8016d74 <ip4_frag+0x284>)
 8016bf8:	485c      	ldr	r0, [pc, #368]	; (8016d6c <ip4_frag+0x27c>)
 8016bfa:	f000 f9fb 	bl	8016ff4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8016bfe:	8bfa      	ldrh	r2, [r7, #30]
 8016c00:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016c04:	4293      	cmp	r3, r2
 8016c06:	bf28      	it	cs
 8016c08:	4613      	movcs	r3, r2
 8016c0a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8016c0e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	d105      	bne.n	8016c22 <ip4_frag+0x132>
        poff = 0;
 8016c16:	2300      	movs	r3, #0
 8016c18:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016c1a:	68fb      	ldr	r3, [r7, #12]
 8016c1c:	681b      	ldr	r3, [r3, #0]
 8016c1e:	60fb      	str	r3, [r7, #12]
        continue;
 8016c20:	e041      	b.n	8016ca6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8016c22:	f7ff ff0d 	bl	8016a40 <ip_frag_alloc_pbuf_custom_ref>
 8016c26:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016c28:	69bb      	ldr	r3, [r7, #24]
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d103      	bne.n	8016c36 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8016c2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016c30:	f7f7 f8d2 	bl	800ddd8 <pbuf_free>
        goto memerr;
 8016c34:	e08f      	b.n	8016d56 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016c36:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016c38:	68fb      	ldr	r3, [r7, #12]
 8016c3a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016c3c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016c3e:	4413      	add	r3, r2
 8016c40:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8016c44:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016c48:	9201      	str	r2, [sp, #4]
 8016c4a:	9300      	str	r3, [sp, #0]
 8016c4c:	4603      	mov	r3, r0
 8016c4e:	2241      	movs	r2, #65	; 0x41
 8016c50:	2000      	movs	r0, #0
 8016c52:	f7f6 ff07 	bl	800da64 <pbuf_alloced_custom>
 8016c56:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8016c58:	697b      	ldr	r3, [r7, #20]
 8016c5a:	2b00      	cmp	r3, #0
 8016c5c:	d106      	bne.n	8016c6c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8016c5e:	69b8      	ldr	r0, [r7, #24]
 8016c60:	f7ff fef6 	bl	8016a50 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016c64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016c66:	f7f7 f8b7 	bl	800ddd8 <pbuf_free>
        goto memerr;
 8016c6a:	e074      	b.n	8016d56 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8016c6c:	68f8      	ldr	r0, [r7, #12]
 8016c6e:	f7f7 f953 	bl	800df18 <pbuf_ref>
      pcr->original = p;
 8016c72:	69bb      	ldr	r3, [r7, #24]
 8016c74:	68fa      	ldr	r2, [r7, #12]
 8016c76:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016c78:	69bb      	ldr	r3, [r7, #24]
 8016c7a:	4a3f      	ldr	r2, [pc, #252]	; (8016d78 <ip4_frag+0x288>)
 8016c7c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8016c7e:	6979      	ldr	r1, [r7, #20]
 8016c80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016c82:	f7f7 f96b 	bl	800df5c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8016c86:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8016c8a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016c8e:	1ad3      	subs	r3, r2, r3
 8016c90:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8016c94:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016c98:	2b00      	cmp	r3, #0
 8016c9a:	d004      	beq.n	8016ca6 <ip4_frag+0x1b6>
        poff = 0;
 8016c9c:	2300      	movs	r3, #0
 8016c9e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016ca0:	68fb      	ldr	r3, [r7, #12]
 8016ca2:	681b      	ldr	r3, [r3, #0]
 8016ca4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8016ca6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	d196      	bne.n	8016bdc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8016cae:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016cb0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016cb4:	4413      	add	r3, r2
 8016cb6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016cb8:	68bb      	ldr	r3, [r7, #8]
 8016cba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016cbc:	f1a3 0213 	sub.w	r2, r3, #19
 8016cc0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016cc4:	429a      	cmp	r2, r3
 8016cc6:	bfcc      	ite	gt
 8016cc8:	2301      	movgt	r3, #1
 8016cca:	2300      	movle	r3, #0
 8016ccc:	b2db      	uxtb	r3, r3
 8016cce:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016cd0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016cd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016cd8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8016cda:	6a3b      	ldr	r3, [r7, #32]
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d002      	beq.n	8016ce6 <ip4_frag+0x1f6>
 8016ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	d003      	beq.n	8016cee <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8016ce6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016ce8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016cec:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8016cee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016cf0:	4618      	mov	r0, r3
 8016cf2:	f7f5 fcdf 	bl	800c6b4 <lwip_htons>
 8016cf6:	4603      	mov	r3, r0
 8016cf8:	461a      	mov	r2, r3
 8016cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cfc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8016cfe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016d00:	3314      	adds	r3, #20
 8016d02:	b29b      	uxth	r3, r3
 8016d04:	4618      	mov	r0, r3
 8016d06:	f7f5 fcd5 	bl	800c6b4 <lwip_htons>
 8016d0a:	4603      	mov	r3, r0
 8016d0c:	461a      	mov	r2, r3
 8016d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d10:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d14:	2200      	movs	r2, #0
 8016d16:	729a      	strb	r2, [r3, #10]
 8016d18:	2200      	movs	r2, #0
 8016d1a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016d1c:	68bb      	ldr	r3, [r7, #8]
 8016d1e:	695b      	ldr	r3, [r3, #20]
 8016d20:	687a      	ldr	r2, [r7, #4]
 8016d22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016d24:	68b8      	ldr	r0, [r7, #8]
 8016d26:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016d28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016d2a:	f7f7 f855 	bl	800ddd8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8016d2e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016d32:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016d34:	1ad3      	subs	r3, r2, r3
 8016d36:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8016d3a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8016d3e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016d40:	4413      	add	r3, r2
 8016d42:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8016d46:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016d4a:	2b00      	cmp	r3, #0
 8016d4c:	f47f af19 	bne.w	8016b82 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016d50:	2300      	movs	r3, #0
 8016d52:	e002      	b.n	8016d5a <ip4_frag+0x26a>
      goto memerr;
 8016d54:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016d56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8016d5a:	4618      	mov	r0, r3
 8016d5c:	3748      	adds	r7, #72	; 0x48
 8016d5e:	46bd      	mov	sp, r7
 8016d60:	bd80      	pop	{r7, pc}
 8016d62:	bf00      	nop
 8016d64:	0801bfa4 	.word	0x0801bfa4
 8016d68:	0801c180 	.word	0x0801c180
 8016d6c:	0801bfec 	.word	0x0801bfec
 8016d70:	0801c19c 	.word	0x0801c19c
 8016d74:	0801c1bc 	.word	0x0801c1bc
 8016d78:	08016a89 	.word	0x08016a89

08016d7c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016d7c:	b580      	push	{r7, lr}
 8016d7e:	b086      	sub	sp, #24
 8016d80:	af00      	add	r7, sp, #0
 8016d82:	6078      	str	r0, [r7, #4]
 8016d84:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016d86:	230e      	movs	r3, #14
 8016d88:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	895b      	ldrh	r3, [r3, #10]
 8016d8e:	2b0e      	cmp	r3, #14
 8016d90:	d96e      	bls.n	8016e70 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	7bdb      	ldrb	r3, [r3, #15]
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d106      	bne.n	8016da8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8016d9a:	683b      	ldr	r3, [r7, #0]
 8016d9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016da0:	3301      	adds	r3, #1
 8016da2:	b2da      	uxtb	r2, r3
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	685b      	ldr	r3, [r3, #4]
 8016dac:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016dae:	693b      	ldr	r3, [r7, #16]
 8016db0:	7b1a      	ldrb	r2, [r3, #12]
 8016db2:	7b5b      	ldrb	r3, [r3, #13]
 8016db4:	021b      	lsls	r3, r3, #8
 8016db6:	4313      	orrs	r3, r2
 8016db8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016dba:	693b      	ldr	r3, [r7, #16]
 8016dbc:	781b      	ldrb	r3, [r3, #0]
 8016dbe:	f003 0301 	and.w	r3, r3, #1
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	d023      	beq.n	8016e0e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016dc6:	693b      	ldr	r3, [r7, #16]
 8016dc8:	781b      	ldrb	r3, [r3, #0]
 8016dca:	2b01      	cmp	r3, #1
 8016dcc:	d10f      	bne.n	8016dee <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016dce:	693b      	ldr	r3, [r7, #16]
 8016dd0:	785b      	ldrb	r3, [r3, #1]
 8016dd2:	2b00      	cmp	r3, #0
 8016dd4:	d11b      	bne.n	8016e0e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016dd6:	693b      	ldr	r3, [r7, #16]
 8016dd8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016dda:	2b5e      	cmp	r3, #94	; 0x5e
 8016ddc:	d117      	bne.n	8016e0e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	7b5b      	ldrb	r3, [r3, #13]
 8016de2:	f043 0310 	orr.w	r3, r3, #16
 8016de6:	b2da      	uxtb	r2, r3
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	735a      	strb	r2, [r3, #13]
 8016dec:	e00f      	b.n	8016e0e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8016dee:	693b      	ldr	r3, [r7, #16]
 8016df0:	2206      	movs	r2, #6
 8016df2:	4928      	ldr	r1, [pc, #160]	; (8016e94 <ethernet_input+0x118>)
 8016df4:	4618      	mov	r0, r3
 8016df6:	f000 f8bf 	bl	8016f78 <memcmp>
 8016dfa:	4603      	mov	r3, r0
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d106      	bne.n	8016e0e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	7b5b      	ldrb	r3, [r3, #13]
 8016e04:	f043 0308 	orr.w	r3, r3, #8
 8016e08:	b2da      	uxtb	r2, r3
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016e0e:	89fb      	ldrh	r3, [r7, #14]
 8016e10:	2b08      	cmp	r3, #8
 8016e12:	d003      	beq.n	8016e1c <ethernet_input+0xa0>
 8016e14:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016e18:	d014      	beq.n	8016e44 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016e1a:	e032      	b.n	8016e82 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016e1c:	683b      	ldr	r3, [r7, #0]
 8016e1e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016e22:	f003 0308 	and.w	r3, r3, #8
 8016e26:	2b00      	cmp	r3, #0
 8016e28:	d024      	beq.n	8016e74 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016e2a:	8afb      	ldrh	r3, [r7, #22]
 8016e2c:	4619      	mov	r1, r3
 8016e2e:	6878      	ldr	r0, [r7, #4]
 8016e30:	f7f6 ff4c 	bl	800dccc <pbuf_remove_header>
 8016e34:	4603      	mov	r3, r0
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d11e      	bne.n	8016e78 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8016e3a:	6839      	ldr	r1, [r7, #0]
 8016e3c:	6878      	ldr	r0, [r7, #4]
 8016e3e:	f7fe ff27 	bl	8015c90 <ip4_input>
      break;
 8016e42:	e013      	b.n	8016e6c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016e44:	683b      	ldr	r3, [r7, #0]
 8016e46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016e4a:	f003 0308 	and.w	r3, r3, #8
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	d014      	beq.n	8016e7c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016e52:	8afb      	ldrh	r3, [r7, #22]
 8016e54:	4619      	mov	r1, r3
 8016e56:	6878      	ldr	r0, [r7, #4]
 8016e58:	f7f6 ff38 	bl	800dccc <pbuf_remove_header>
 8016e5c:	4603      	mov	r3, r0
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d10e      	bne.n	8016e80 <ethernet_input+0x104>
        etharp_input(p, netif);
 8016e62:	6839      	ldr	r1, [r7, #0]
 8016e64:	6878      	ldr	r0, [r7, #4]
 8016e66:	f7fe f8c7 	bl	8014ff8 <etharp_input>
      break;
 8016e6a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016e6c:	2300      	movs	r3, #0
 8016e6e:	e00c      	b.n	8016e8a <ethernet_input+0x10e>
    goto free_and_return;
 8016e70:	bf00      	nop
 8016e72:	e006      	b.n	8016e82 <ethernet_input+0x106>
        goto free_and_return;
 8016e74:	bf00      	nop
 8016e76:	e004      	b.n	8016e82 <ethernet_input+0x106>
        goto free_and_return;
 8016e78:	bf00      	nop
 8016e7a:	e002      	b.n	8016e82 <ethernet_input+0x106>
        goto free_and_return;
 8016e7c:	bf00      	nop
 8016e7e:	e000      	b.n	8016e82 <ethernet_input+0x106>
        goto free_and_return;
 8016e80:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8016e82:	6878      	ldr	r0, [r7, #4]
 8016e84:	f7f6 ffa8 	bl	800ddd8 <pbuf_free>
  return ERR_OK;
 8016e88:	2300      	movs	r3, #0
}
 8016e8a:	4618      	mov	r0, r3
 8016e8c:	3718      	adds	r7, #24
 8016e8e:	46bd      	mov	sp, r7
 8016e90:	bd80      	pop	{r7, pc}
 8016e92:	bf00      	nop
 8016e94:	08020358 	.word	0x08020358

08016e98 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016e98:	b580      	push	{r7, lr}
 8016e9a:	b086      	sub	sp, #24
 8016e9c:	af00      	add	r7, sp, #0
 8016e9e:	60f8      	str	r0, [r7, #12]
 8016ea0:	60b9      	str	r1, [r7, #8]
 8016ea2:	607a      	str	r2, [r7, #4]
 8016ea4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016ea6:	8c3b      	ldrh	r3, [r7, #32]
 8016ea8:	4618      	mov	r0, r3
 8016eaa:	f7f5 fc03 	bl	800c6b4 <lwip_htons>
 8016eae:	4603      	mov	r3, r0
 8016eb0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016eb2:	210e      	movs	r1, #14
 8016eb4:	68b8      	ldr	r0, [r7, #8]
 8016eb6:	f7f6 fef9 	bl	800dcac <pbuf_add_header>
 8016eba:	4603      	mov	r3, r0
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d125      	bne.n	8016f0c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016ec0:	68bb      	ldr	r3, [r7, #8]
 8016ec2:	685b      	ldr	r3, [r3, #4]
 8016ec4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016ec6:	693b      	ldr	r3, [r7, #16]
 8016ec8:	8afa      	ldrh	r2, [r7, #22]
 8016eca:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016ecc:	693b      	ldr	r3, [r7, #16]
 8016ece:	2206      	movs	r2, #6
 8016ed0:	6839      	ldr	r1, [r7, #0]
 8016ed2:	4618      	mov	r0, r3
 8016ed4:	f000 f85e 	bl	8016f94 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016ed8:	693b      	ldr	r3, [r7, #16]
 8016eda:	3306      	adds	r3, #6
 8016edc:	2206      	movs	r2, #6
 8016ede:	6879      	ldr	r1, [r7, #4]
 8016ee0:	4618      	mov	r0, r3
 8016ee2:	f000 f857 	bl	8016f94 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016ee6:	68fb      	ldr	r3, [r7, #12]
 8016ee8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016eec:	2b06      	cmp	r3, #6
 8016eee:	d006      	beq.n	8016efe <ethernet_output+0x66>
 8016ef0:	4b0a      	ldr	r3, [pc, #40]	; (8016f1c <ethernet_output+0x84>)
 8016ef2:	f44f 7299 	mov.w	r2, #306	; 0x132
 8016ef6:	490a      	ldr	r1, [pc, #40]	; (8016f20 <ethernet_output+0x88>)
 8016ef8:	480a      	ldr	r0, [pc, #40]	; (8016f24 <ethernet_output+0x8c>)
 8016efa:	f000 f87b 	bl	8016ff4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016efe:	68fb      	ldr	r3, [r7, #12]
 8016f00:	699b      	ldr	r3, [r3, #24]
 8016f02:	68b9      	ldr	r1, [r7, #8]
 8016f04:	68f8      	ldr	r0, [r7, #12]
 8016f06:	4798      	blx	r3
 8016f08:	4603      	mov	r3, r0
 8016f0a:	e002      	b.n	8016f12 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016f0c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016f0e:	f06f 0301 	mvn.w	r3, #1
}
 8016f12:	4618      	mov	r0, r3
 8016f14:	3718      	adds	r7, #24
 8016f16:	46bd      	mov	sp, r7
 8016f18:	bd80      	pop	{r7, pc}
 8016f1a:	bf00      	nop
 8016f1c:	0801c1cc 	.word	0x0801c1cc
 8016f20:	0801c204 	.word	0x0801c204
 8016f24:	0801c238 	.word	0x0801c238

08016f28 <atoi>:
 8016f28:	220a      	movs	r2, #10
 8016f2a:	2100      	movs	r1, #0
 8016f2c:	f000 ba94 	b.w	8017458 <strtol>

08016f30 <__libc_init_array>:
 8016f30:	b570      	push	{r4, r5, r6, lr}
 8016f32:	4d0d      	ldr	r5, [pc, #52]	; (8016f68 <__libc_init_array+0x38>)
 8016f34:	4c0d      	ldr	r4, [pc, #52]	; (8016f6c <__libc_init_array+0x3c>)
 8016f36:	1b64      	subs	r4, r4, r5
 8016f38:	10a4      	asrs	r4, r4, #2
 8016f3a:	2600      	movs	r6, #0
 8016f3c:	42a6      	cmp	r6, r4
 8016f3e:	d109      	bne.n	8016f54 <__libc_init_array+0x24>
 8016f40:	4d0b      	ldr	r5, [pc, #44]	; (8016f70 <__libc_init_array+0x40>)
 8016f42:	4c0c      	ldr	r4, [pc, #48]	; (8016f74 <__libc_init_array+0x44>)
 8016f44:	f001 fbe4 	bl	8018710 <_init>
 8016f48:	1b64      	subs	r4, r4, r5
 8016f4a:	10a4      	asrs	r4, r4, #2
 8016f4c:	2600      	movs	r6, #0
 8016f4e:	42a6      	cmp	r6, r4
 8016f50:	d105      	bne.n	8016f5e <__libc_init_array+0x2e>
 8016f52:	bd70      	pop	{r4, r5, r6, pc}
 8016f54:	f855 3b04 	ldr.w	r3, [r5], #4
 8016f58:	4798      	blx	r3
 8016f5a:	3601      	adds	r6, #1
 8016f5c:	e7ee      	b.n	8016f3c <__libc_init_array+0xc>
 8016f5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8016f62:	4798      	blx	r3
 8016f64:	3601      	adds	r6, #1
 8016f66:	e7f2      	b.n	8016f4e <__libc_init_array+0x1e>
 8016f68:	080205bc 	.word	0x080205bc
 8016f6c:	080205bc 	.word	0x080205bc
 8016f70:	080205bc 	.word	0x080205bc
 8016f74:	080205c0 	.word	0x080205c0

08016f78 <memcmp>:
 8016f78:	b530      	push	{r4, r5, lr}
 8016f7a:	3901      	subs	r1, #1
 8016f7c:	2400      	movs	r4, #0
 8016f7e:	42a2      	cmp	r2, r4
 8016f80:	d101      	bne.n	8016f86 <memcmp+0xe>
 8016f82:	2000      	movs	r0, #0
 8016f84:	e005      	b.n	8016f92 <memcmp+0x1a>
 8016f86:	5d03      	ldrb	r3, [r0, r4]
 8016f88:	3401      	adds	r4, #1
 8016f8a:	5d0d      	ldrb	r5, [r1, r4]
 8016f8c:	42ab      	cmp	r3, r5
 8016f8e:	d0f6      	beq.n	8016f7e <memcmp+0x6>
 8016f90:	1b58      	subs	r0, r3, r5
 8016f92:	bd30      	pop	{r4, r5, pc}

08016f94 <memcpy>:
 8016f94:	440a      	add	r2, r1
 8016f96:	4291      	cmp	r1, r2
 8016f98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016f9c:	d100      	bne.n	8016fa0 <memcpy+0xc>
 8016f9e:	4770      	bx	lr
 8016fa0:	b510      	push	{r4, lr}
 8016fa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016fa6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016faa:	4291      	cmp	r1, r2
 8016fac:	d1f9      	bne.n	8016fa2 <memcpy+0xe>
 8016fae:	bd10      	pop	{r4, pc}

08016fb0 <memmove>:
 8016fb0:	4288      	cmp	r0, r1
 8016fb2:	b510      	push	{r4, lr}
 8016fb4:	eb01 0402 	add.w	r4, r1, r2
 8016fb8:	d902      	bls.n	8016fc0 <memmove+0x10>
 8016fba:	4284      	cmp	r4, r0
 8016fbc:	4623      	mov	r3, r4
 8016fbe:	d807      	bhi.n	8016fd0 <memmove+0x20>
 8016fc0:	1e43      	subs	r3, r0, #1
 8016fc2:	42a1      	cmp	r1, r4
 8016fc4:	d008      	beq.n	8016fd8 <memmove+0x28>
 8016fc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016fca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016fce:	e7f8      	b.n	8016fc2 <memmove+0x12>
 8016fd0:	4402      	add	r2, r0
 8016fd2:	4601      	mov	r1, r0
 8016fd4:	428a      	cmp	r2, r1
 8016fd6:	d100      	bne.n	8016fda <memmove+0x2a>
 8016fd8:	bd10      	pop	{r4, pc}
 8016fda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016fde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016fe2:	e7f7      	b.n	8016fd4 <memmove+0x24>

08016fe4 <memset>:
 8016fe4:	4402      	add	r2, r0
 8016fe6:	4603      	mov	r3, r0
 8016fe8:	4293      	cmp	r3, r2
 8016fea:	d100      	bne.n	8016fee <memset+0xa>
 8016fec:	4770      	bx	lr
 8016fee:	f803 1b01 	strb.w	r1, [r3], #1
 8016ff2:	e7f9      	b.n	8016fe8 <memset+0x4>

08016ff4 <iprintf>:
 8016ff4:	b40f      	push	{r0, r1, r2, r3}
 8016ff6:	4b0a      	ldr	r3, [pc, #40]	; (8017020 <iprintf+0x2c>)
 8016ff8:	b513      	push	{r0, r1, r4, lr}
 8016ffa:	681c      	ldr	r4, [r3, #0]
 8016ffc:	b124      	cbz	r4, 8017008 <iprintf+0x14>
 8016ffe:	69a3      	ldr	r3, [r4, #24]
 8017000:	b913      	cbnz	r3, 8017008 <iprintf+0x14>
 8017002:	4620      	mov	r0, r4
 8017004:	f000 fc30 	bl	8017868 <__sinit>
 8017008:	ab05      	add	r3, sp, #20
 801700a:	9a04      	ldr	r2, [sp, #16]
 801700c:	68a1      	ldr	r1, [r4, #8]
 801700e:	9301      	str	r3, [sp, #4]
 8017010:	4620      	mov	r0, r4
 8017012:	f000 ff77 	bl	8017f04 <_vfiprintf_r>
 8017016:	b002      	add	sp, #8
 8017018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801701c:	b004      	add	sp, #16
 801701e:	4770      	bx	lr
 8017020:	2000014c 	.word	0x2000014c

08017024 <_puts_r>:
 8017024:	b570      	push	{r4, r5, r6, lr}
 8017026:	460e      	mov	r6, r1
 8017028:	4605      	mov	r5, r0
 801702a:	b118      	cbz	r0, 8017034 <_puts_r+0x10>
 801702c:	6983      	ldr	r3, [r0, #24]
 801702e:	b90b      	cbnz	r3, 8017034 <_puts_r+0x10>
 8017030:	f000 fc1a 	bl	8017868 <__sinit>
 8017034:	69ab      	ldr	r3, [r5, #24]
 8017036:	68ac      	ldr	r4, [r5, #8]
 8017038:	b913      	cbnz	r3, 8017040 <_puts_r+0x1c>
 801703a:	4628      	mov	r0, r5
 801703c:	f000 fc14 	bl	8017868 <__sinit>
 8017040:	4b2c      	ldr	r3, [pc, #176]	; (80170f4 <_puts_r+0xd0>)
 8017042:	429c      	cmp	r4, r3
 8017044:	d120      	bne.n	8017088 <_puts_r+0x64>
 8017046:	686c      	ldr	r4, [r5, #4]
 8017048:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801704a:	07db      	lsls	r3, r3, #31
 801704c:	d405      	bmi.n	801705a <_puts_r+0x36>
 801704e:	89a3      	ldrh	r3, [r4, #12]
 8017050:	0598      	lsls	r0, r3, #22
 8017052:	d402      	bmi.n	801705a <_puts_r+0x36>
 8017054:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017056:	f000 fcb7 	bl	80179c8 <__retarget_lock_acquire_recursive>
 801705a:	89a3      	ldrh	r3, [r4, #12]
 801705c:	0719      	lsls	r1, r3, #28
 801705e:	d51d      	bpl.n	801709c <_puts_r+0x78>
 8017060:	6923      	ldr	r3, [r4, #16]
 8017062:	b1db      	cbz	r3, 801709c <_puts_r+0x78>
 8017064:	3e01      	subs	r6, #1
 8017066:	68a3      	ldr	r3, [r4, #8]
 8017068:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801706c:	3b01      	subs	r3, #1
 801706e:	60a3      	str	r3, [r4, #8]
 8017070:	bb39      	cbnz	r1, 80170c2 <_puts_r+0x9e>
 8017072:	2b00      	cmp	r3, #0
 8017074:	da38      	bge.n	80170e8 <_puts_r+0xc4>
 8017076:	4622      	mov	r2, r4
 8017078:	210a      	movs	r1, #10
 801707a:	4628      	mov	r0, r5
 801707c:	f000 f9f6 	bl	801746c <__swbuf_r>
 8017080:	3001      	adds	r0, #1
 8017082:	d011      	beq.n	80170a8 <_puts_r+0x84>
 8017084:	250a      	movs	r5, #10
 8017086:	e011      	b.n	80170ac <_puts_r+0x88>
 8017088:	4b1b      	ldr	r3, [pc, #108]	; (80170f8 <_puts_r+0xd4>)
 801708a:	429c      	cmp	r4, r3
 801708c:	d101      	bne.n	8017092 <_puts_r+0x6e>
 801708e:	68ac      	ldr	r4, [r5, #8]
 8017090:	e7da      	b.n	8017048 <_puts_r+0x24>
 8017092:	4b1a      	ldr	r3, [pc, #104]	; (80170fc <_puts_r+0xd8>)
 8017094:	429c      	cmp	r4, r3
 8017096:	bf08      	it	eq
 8017098:	68ec      	ldreq	r4, [r5, #12]
 801709a:	e7d5      	b.n	8017048 <_puts_r+0x24>
 801709c:	4621      	mov	r1, r4
 801709e:	4628      	mov	r0, r5
 80170a0:	f000 fa36 	bl	8017510 <__swsetup_r>
 80170a4:	2800      	cmp	r0, #0
 80170a6:	d0dd      	beq.n	8017064 <_puts_r+0x40>
 80170a8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80170ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80170ae:	07da      	lsls	r2, r3, #31
 80170b0:	d405      	bmi.n	80170be <_puts_r+0x9a>
 80170b2:	89a3      	ldrh	r3, [r4, #12]
 80170b4:	059b      	lsls	r3, r3, #22
 80170b6:	d402      	bmi.n	80170be <_puts_r+0x9a>
 80170b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80170ba:	f000 fc86 	bl	80179ca <__retarget_lock_release_recursive>
 80170be:	4628      	mov	r0, r5
 80170c0:	bd70      	pop	{r4, r5, r6, pc}
 80170c2:	2b00      	cmp	r3, #0
 80170c4:	da04      	bge.n	80170d0 <_puts_r+0xac>
 80170c6:	69a2      	ldr	r2, [r4, #24]
 80170c8:	429a      	cmp	r2, r3
 80170ca:	dc06      	bgt.n	80170da <_puts_r+0xb6>
 80170cc:	290a      	cmp	r1, #10
 80170ce:	d004      	beq.n	80170da <_puts_r+0xb6>
 80170d0:	6823      	ldr	r3, [r4, #0]
 80170d2:	1c5a      	adds	r2, r3, #1
 80170d4:	6022      	str	r2, [r4, #0]
 80170d6:	7019      	strb	r1, [r3, #0]
 80170d8:	e7c5      	b.n	8017066 <_puts_r+0x42>
 80170da:	4622      	mov	r2, r4
 80170dc:	4628      	mov	r0, r5
 80170de:	f000 f9c5 	bl	801746c <__swbuf_r>
 80170e2:	3001      	adds	r0, #1
 80170e4:	d1bf      	bne.n	8017066 <_puts_r+0x42>
 80170e6:	e7df      	b.n	80170a8 <_puts_r+0x84>
 80170e8:	6823      	ldr	r3, [r4, #0]
 80170ea:	250a      	movs	r5, #10
 80170ec:	1c5a      	adds	r2, r3, #1
 80170ee:	6022      	str	r2, [r4, #0]
 80170f0:	701d      	strb	r5, [r3, #0]
 80170f2:	e7db      	b.n	80170ac <_puts_r+0x88>
 80170f4:	08020540 	.word	0x08020540
 80170f8:	08020560 	.word	0x08020560
 80170fc:	08020520 	.word	0x08020520

08017100 <puts>:
 8017100:	4b02      	ldr	r3, [pc, #8]	; (801710c <puts+0xc>)
 8017102:	4601      	mov	r1, r0
 8017104:	6818      	ldr	r0, [r3, #0]
 8017106:	f7ff bf8d 	b.w	8017024 <_puts_r>
 801710a:	bf00      	nop
 801710c:	2000014c 	.word	0x2000014c

08017110 <rand>:
 8017110:	4b17      	ldr	r3, [pc, #92]	; (8017170 <rand+0x60>)
 8017112:	b510      	push	{r4, lr}
 8017114:	681c      	ldr	r4, [r3, #0]
 8017116:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017118:	b9b3      	cbnz	r3, 8017148 <rand+0x38>
 801711a:	2018      	movs	r0, #24
 801711c:	f000 fcba 	bl	8017a94 <malloc>
 8017120:	63a0      	str	r0, [r4, #56]	; 0x38
 8017122:	b928      	cbnz	r0, 8017130 <rand+0x20>
 8017124:	4602      	mov	r2, r0
 8017126:	4b13      	ldr	r3, [pc, #76]	; (8017174 <rand+0x64>)
 8017128:	4813      	ldr	r0, [pc, #76]	; (8017178 <rand+0x68>)
 801712a:	214e      	movs	r1, #78	; 0x4e
 801712c:	f000 fa5e 	bl	80175ec <__assert_func>
 8017130:	4a12      	ldr	r2, [pc, #72]	; (801717c <rand+0x6c>)
 8017132:	4b13      	ldr	r3, [pc, #76]	; (8017180 <rand+0x70>)
 8017134:	e9c0 2300 	strd	r2, r3, [r0]
 8017138:	4b12      	ldr	r3, [pc, #72]	; (8017184 <rand+0x74>)
 801713a:	6083      	str	r3, [r0, #8]
 801713c:	230b      	movs	r3, #11
 801713e:	8183      	strh	r3, [r0, #12]
 8017140:	2201      	movs	r2, #1
 8017142:	2300      	movs	r3, #0
 8017144:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8017148:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801714a:	480f      	ldr	r0, [pc, #60]	; (8017188 <rand+0x78>)
 801714c:	690a      	ldr	r2, [r1, #16]
 801714e:	694b      	ldr	r3, [r1, #20]
 8017150:	4c0e      	ldr	r4, [pc, #56]	; (801718c <rand+0x7c>)
 8017152:	4350      	muls	r0, r2
 8017154:	fb04 0003 	mla	r0, r4, r3, r0
 8017158:	fba2 3404 	umull	r3, r4, r2, r4
 801715c:	1c5a      	adds	r2, r3, #1
 801715e:	4404      	add	r4, r0
 8017160:	f144 0000 	adc.w	r0, r4, #0
 8017164:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8017168:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801716c:	bd10      	pop	{r4, pc}
 801716e:	bf00      	nop
 8017170:	2000014c 	.word	0x2000014c
 8017174:	0802046c 	.word	0x0802046c
 8017178:	08020483 	.word	0x08020483
 801717c:	abcd330e 	.word	0xabcd330e
 8017180:	e66d1234 	.word	0xe66d1234
 8017184:	0005deec 	.word	0x0005deec
 8017188:	5851f42d 	.word	0x5851f42d
 801718c:	4c957f2d 	.word	0x4c957f2d

08017190 <sniprintf>:
 8017190:	b40c      	push	{r2, r3}
 8017192:	b530      	push	{r4, r5, lr}
 8017194:	4b17      	ldr	r3, [pc, #92]	; (80171f4 <sniprintf+0x64>)
 8017196:	1e0c      	subs	r4, r1, #0
 8017198:	681d      	ldr	r5, [r3, #0]
 801719a:	b09d      	sub	sp, #116	; 0x74
 801719c:	da08      	bge.n	80171b0 <sniprintf+0x20>
 801719e:	238b      	movs	r3, #139	; 0x8b
 80171a0:	602b      	str	r3, [r5, #0]
 80171a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80171a6:	b01d      	add	sp, #116	; 0x74
 80171a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80171ac:	b002      	add	sp, #8
 80171ae:	4770      	bx	lr
 80171b0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80171b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80171b8:	bf14      	ite	ne
 80171ba:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80171be:	4623      	moveq	r3, r4
 80171c0:	9304      	str	r3, [sp, #16]
 80171c2:	9307      	str	r3, [sp, #28]
 80171c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80171c8:	9002      	str	r0, [sp, #8]
 80171ca:	9006      	str	r0, [sp, #24]
 80171cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80171d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80171d2:	ab21      	add	r3, sp, #132	; 0x84
 80171d4:	a902      	add	r1, sp, #8
 80171d6:	4628      	mov	r0, r5
 80171d8:	9301      	str	r3, [sp, #4]
 80171da:	f000 fd69 	bl	8017cb0 <_svfiprintf_r>
 80171de:	1c43      	adds	r3, r0, #1
 80171e0:	bfbc      	itt	lt
 80171e2:	238b      	movlt	r3, #139	; 0x8b
 80171e4:	602b      	strlt	r3, [r5, #0]
 80171e6:	2c00      	cmp	r4, #0
 80171e8:	d0dd      	beq.n	80171a6 <sniprintf+0x16>
 80171ea:	9b02      	ldr	r3, [sp, #8]
 80171ec:	2200      	movs	r2, #0
 80171ee:	701a      	strb	r2, [r3, #0]
 80171f0:	e7d9      	b.n	80171a6 <sniprintf+0x16>
 80171f2:	bf00      	nop
 80171f4:	2000014c 	.word	0x2000014c

080171f8 <siprintf>:
 80171f8:	b40e      	push	{r1, r2, r3}
 80171fa:	b500      	push	{lr}
 80171fc:	b09c      	sub	sp, #112	; 0x70
 80171fe:	ab1d      	add	r3, sp, #116	; 0x74
 8017200:	9002      	str	r0, [sp, #8]
 8017202:	9006      	str	r0, [sp, #24]
 8017204:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017208:	4809      	ldr	r0, [pc, #36]	; (8017230 <siprintf+0x38>)
 801720a:	9107      	str	r1, [sp, #28]
 801720c:	9104      	str	r1, [sp, #16]
 801720e:	4909      	ldr	r1, [pc, #36]	; (8017234 <siprintf+0x3c>)
 8017210:	f853 2b04 	ldr.w	r2, [r3], #4
 8017214:	9105      	str	r1, [sp, #20]
 8017216:	6800      	ldr	r0, [r0, #0]
 8017218:	9301      	str	r3, [sp, #4]
 801721a:	a902      	add	r1, sp, #8
 801721c:	f000 fd48 	bl	8017cb0 <_svfiprintf_r>
 8017220:	9b02      	ldr	r3, [sp, #8]
 8017222:	2200      	movs	r2, #0
 8017224:	701a      	strb	r2, [r3, #0]
 8017226:	b01c      	add	sp, #112	; 0x70
 8017228:	f85d eb04 	ldr.w	lr, [sp], #4
 801722c:	b003      	add	sp, #12
 801722e:	4770      	bx	lr
 8017230:	2000014c 	.word	0x2000014c
 8017234:	ffff0208 	.word	0xffff0208

08017238 <strcat>:
 8017238:	b510      	push	{r4, lr}
 801723a:	4602      	mov	r2, r0
 801723c:	7814      	ldrb	r4, [r2, #0]
 801723e:	4613      	mov	r3, r2
 8017240:	3201      	adds	r2, #1
 8017242:	2c00      	cmp	r4, #0
 8017244:	d1fa      	bne.n	801723c <strcat+0x4>
 8017246:	3b01      	subs	r3, #1
 8017248:	f811 2b01 	ldrb.w	r2, [r1], #1
 801724c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017250:	2a00      	cmp	r2, #0
 8017252:	d1f9      	bne.n	8017248 <strcat+0x10>
 8017254:	bd10      	pop	{r4, pc}

08017256 <strchr>:
 8017256:	b2c9      	uxtb	r1, r1
 8017258:	4603      	mov	r3, r0
 801725a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801725e:	b11a      	cbz	r2, 8017268 <strchr+0x12>
 8017260:	428a      	cmp	r2, r1
 8017262:	d1f9      	bne.n	8017258 <strchr+0x2>
 8017264:	4618      	mov	r0, r3
 8017266:	4770      	bx	lr
 8017268:	2900      	cmp	r1, #0
 801726a:	bf18      	it	ne
 801726c:	2300      	movne	r3, #0
 801726e:	e7f9      	b.n	8017264 <strchr+0xe>

08017270 <strcpy>:
 8017270:	4603      	mov	r3, r0
 8017272:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017276:	f803 2b01 	strb.w	r2, [r3], #1
 801727a:	2a00      	cmp	r2, #0
 801727c:	d1f9      	bne.n	8017272 <strcpy+0x2>
 801727e:	4770      	bx	lr

08017280 <strncmp>:
 8017280:	b510      	push	{r4, lr}
 8017282:	b16a      	cbz	r2, 80172a0 <strncmp+0x20>
 8017284:	3901      	subs	r1, #1
 8017286:	1884      	adds	r4, r0, r2
 8017288:	f810 3b01 	ldrb.w	r3, [r0], #1
 801728c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017290:	4293      	cmp	r3, r2
 8017292:	d103      	bne.n	801729c <strncmp+0x1c>
 8017294:	42a0      	cmp	r0, r4
 8017296:	d001      	beq.n	801729c <strncmp+0x1c>
 8017298:	2b00      	cmp	r3, #0
 801729a:	d1f5      	bne.n	8017288 <strncmp+0x8>
 801729c:	1a98      	subs	r0, r3, r2
 801729e:	bd10      	pop	{r4, pc}
 80172a0:	4610      	mov	r0, r2
 80172a2:	e7fc      	b.n	801729e <strncmp+0x1e>

080172a4 <strncpy>:
 80172a4:	b510      	push	{r4, lr}
 80172a6:	3901      	subs	r1, #1
 80172a8:	4603      	mov	r3, r0
 80172aa:	b132      	cbz	r2, 80172ba <strncpy+0x16>
 80172ac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80172b0:	f803 4b01 	strb.w	r4, [r3], #1
 80172b4:	3a01      	subs	r2, #1
 80172b6:	2c00      	cmp	r4, #0
 80172b8:	d1f7      	bne.n	80172aa <strncpy+0x6>
 80172ba:	441a      	add	r2, r3
 80172bc:	2100      	movs	r1, #0
 80172be:	4293      	cmp	r3, r2
 80172c0:	d100      	bne.n	80172c4 <strncpy+0x20>
 80172c2:	bd10      	pop	{r4, pc}
 80172c4:	f803 1b01 	strb.w	r1, [r3], #1
 80172c8:	e7f9      	b.n	80172be <strncpy+0x1a>

080172ca <strstr>:
 80172ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80172cc:	780c      	ldrb	r4, [r1, #0]
 80172ce:	b164      	cbz	r4, 80172ea <strstr+0x20>
 80172d0:	4603      	mov	r3, r0
 80172d2:	781a      	ldrb	r2, [r3, #0]
 80172d4:	4618      	mov	r0, r3
 80172d6:	1c5e      	adds	r6, r3, #1
 80172d8:	b90a      	cbnz	r2, 80172de <strstr+0x14>
 80172da:	4610      	mov	r0, r2
 80172dc:	e005      	b.n	80172ea <strstr+0x20>
 80172de:	4294      	cmp	r4, r2
 80172e0:	d108      	bne.n	80172f4 <strstr+0x2a>
 80172e2:	460d      	mov	r5, r1
 80172e4:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80172e8:	b902      	cbnz	r2, 80172ec <strstr+0x22>
 80172ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80172ec:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80172f0:	4297      	cmp	r7, r2
 80172f2:	d0f7      	beq.n	80172e4 <strstr+0x1a>
 80172f4:	4633      	mov	r3, r6
 80172f6:	e7ec      	b.n	80172d2 <strstr+0x8>

080172f8 <__strtok_r>:
 80172f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80172fa:	b908      	cbnz	r0, 8017300 <__strtok_r+0x8>
 80172fc:	6810      	ldr	r0, [r2, #0]
 80172fe:	b188      	cbz	r0, 8017324 <__strtok_r+0x2c>
 8017300:	4604      	mov	r4, r0
 8017302:	4620      	mov	r0, r4
 8017304:	f814 5b01 	ldrb.w	r5, [r4], #1
 8017308:	460f      	mov	r7, r1
 801730a:	f817 6b01 	ldrb.w	r6, [r7], #1
 801730e:	b91e      	cbnz	r6, 8017318 <__strtok_r+0x20>
 8017310:	b965      	cbnz	r5, 801732c <__strtok_r+0x34>
 8017312:	6015      	str	r5, [r2, #0]
 8017314:	4628      	mov	r0, r5
 8017316:	e005      	b.n	8017324 <__strtok_r+0x2c>
 8017318:	42b5      	cmp	r5, r6
 801731a:	d1f6      	bne.n	801730a <__strtok_r+0x12>
 801731c:	2b00      	cmp	r3, #0
 801731e:	d1f0      	bne.n	8017302 <__strtok_r+0xa>
 8017320:	6014      	str	r4, [r2, #0]
 8017322:	7003      	strb	r3, [r0, #0]
 8017324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017326:	461c      	mov	r4, r3
 8017328:	e00c      	b.n	8017344 <__strtok_r+0x4c>
 801732a:	b915      	cbnz	r5, 8017332 <__strtok_r+0x3a>
 801732c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017330:	460e      	mov	r6, r1
 8017332:	f816 5b01 	ldrb.w	r5, [r6], #1
 8017336:	42ab      	cmp	r3, r5
 8017338:	d1f7      	bne.n	801732a <__strtok_r+0x32>
 801733a:	2b00      	cmp	r3, #0
 801733c:	d0f3      	beq.n	8017326 <__strtok_r+0x2e>
 801733e:	2300      	movs	r3, #0
 8017340:	f804 3c01 	strb.w	r3, [r4, #-1]
 8017344:	6014      	str	r4, [r2, #0]
 8017346:	e7ed      	b.n	8017324 <__strtok_r+0x2c>

08017348 <strtok_r>:
 8017348:	2301      	movs	r3, #1
 801734a:	f7ff bfd5 	b.w	80172f8 <__strtok_r>
	...

08017350 <_strtol_l.isra.0>:
 8017350:	2b01      	cmp	r3, #1
 8017352:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017356:	d001      	beq.n	801735c <_strtol_l.isra.0+0xc>
 8017358:	2b24      	cmp	r3, #36	; 0x24
 801735a:	d906      	bls.n	801736a <_strtol_l.isra.0+0x1a>
 801735c:	f000 f964 	bl	8017628 <__errno>
 8017360:	2316      	movs	r3, #22
 8017362:	6003      	str	r3, [r0, #0]
 8017364:	2000      	movs	r0, #0
 8017366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801736a:	4f3a      	ldr	r7, [pc, #232]	; (8017454 <_strtol_l.isra.0+0x104>)
 801736c:	468e      	mov	lr, r1
 801736e:	4676      	mov	r6, lr
 8017370:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8017374:	5de5      	ldrb	r5, [r4, r7]
 8017376:	f015 0508 	ands.w	r5, r5, #8
 801737a:	d1f8      	bne.n	801736e <_strtol_l.isra.0+0x1e>
 801737c:	2c2d      	cmp	r4, #45	; 0x2d
 801737e:	d134      	bne.n	80173ea <_strtol_l.isra.0+0x9a>
 8017380:	f89e 4000 	ldrb.w	r4, [lr]
 8017384:	f04f 0801 	mov.w	r8, #1
 8017388:	f106 0e02 	add.w	lr, r6, #2
 801738c:	2b00      	cmp	r3, #0
 801738e:	d05c      	beq.n	801744a <_strtol_l.isra.0+0xfa>
 8017390:	2b10      	cmp	r3, #16
 8017392:	d10c      	bne.n	80173ae <_strtol_l.isra.0+0x5e>
 8017394:	2c30      	cmp	r4, #48	; 0x30
 8017396:	d10a      	bne.n	80173ae <_strtol_l.isra.0+0x5e>
 8017398:	f89e 4000 	ldrb.w	r4, [lr]
 801739c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80173a0:	2c58      	cmp	r4, #88	; 0x58
 80173a2:	d14d      	bne.n	8017440 <_strtol_l.isra.0+0xf0>
 80173a4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80173a8:	2310      	movs	r3, #16
 80173aa:	f10e 0e02 	add.w	lr, lr, #2
 80173ae:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80173b2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80173b6:	2600      	movs	r6, #0
 80173b8:	fbbc f9f3 	udiv	r9, ip, r3
 80173bc:	4635      	mov	r5, r6
 80173be:	fb03 ca19 	mls	sl, r3, r9, ip
 80173c2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80173c6:	2f09      	cmp	r7, #9
 80173c8:	d818      	bhi.n	80173fc <_strtol_l.isra.0+0xac>
 80173ca:	463c      	mov	r4, r7
 80173cc:	42a3      	cmp	r3, r4
 80173ce:	dd24      	ble.n	801741a <_strtol_l.isra.0+0xca>
 80173d0:	2e00      	cmp	r6, #0
 80173d2:	db1f      	blt.n	8017414 <_strtol_l.isra.0+0xc4>
 80173d4:	45a9      	cmp	r9, r5
 80173d6:	d31d      	bcc.n	8017414 <_strtol_l.isra.0+0xc4>
 80173d8:	d101      	bne.n	80173de <_strtol_l.isra.0+0x8e>
 80173da:	45a2      	cmp	sl, r4
 80173dc:	db1a      	blt.n	8017414 <_strtol_l.isra.0+0xc4>
 80173de:	fb05 4503 	mla	r5, r5, r3, r4
 80173e2:	2601      	movs	r6, #1
 80173e4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80173e8:	e7eb      	b.n	80173c2 <_strtol_l.isra.0+0x72>
 80173ea:	2c2b      	cmp	r4, #43	; 0x2b
 80173ec:	bf08      	it	eq
 80173ee:	f89e 4000 	ldrbeq.w	r4, [lr]
 80173f2:	46a8      	mov	r8, r5
 80173f4:	bf08      	it	eq
 80173f6:	f106 0e02 	addeq.w	lr, r6, #2
 80173fa:	e7c7      	b.n	801738c <_strtol_l.isra.0+0x3c>
 80173fc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8017400:	2f19      	cmp	r7, #25
 8017402:	d801      	bhi.n	8017408 <_strtol_l.isra.0+0xb8>
 8017404:	3c37      	subs	r4, #55	; 0x37
 8017406:	e7e1      	b.n	80173cc <_strtol_l.isra.0+0x7c>
 8017408:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801740c:	2f19      	cmp	r7, #25
 801740e:	d804      	bhi.n	801741a <_strtol_l.isra.0+0xca>
 8017410:	3c57      	subs	r4, #87	; 0x57
 8017412:	e7db      	b.n	80173cc <_strtol_l.isra.0+0x7c>
 8017414:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8017418:	e7e4      	b.n	80173e4 <_strtol_l.isra.0+0x94>
 801741a:	2e00      	cmp	r6, #0
 801741c:	da05      	bge.n	801742a <_strtol_l.isra.0+0xda>
 801741e:	2322      	movs	r3, #34	; 0x22
 8017420:	6003      	str	r3, [r0, #0]
 8017422:	4665      	mov	r5, ip
 8017424:	b942      	cbnz	r2, 8017438 <_strtol_l.isra.0+0xe8>
 8017426:	4628      	mov	r0, r5
 8017428:	e79d      	b.n	8017366 <_strtol_l.isra.0+0x16>
 801742a:	f1b8 0f00 	cmp.w	r8, #0
 801742e:	d000      	beq.n	8017432 <_strtol_l.isra.0+0xe2>
 8017430:	426d      	negs	r5, r5
 8017432:	2a00      	cmp	r2, #0
 8017434:	d0f7      	beq.n	8017426 <_strtol_l.isra.0+0xd6>
 8017436:	b10e      	cbz	r6, 801743c <_strtol_l.isra.0+0xec>
 8017438:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 801743c:	6011      	str	r1, [r2, #0]
 801743e:	e7f2      	b.n	8017426 <_strtol_l.isra.0+0xd6>
 8017440:	2430      	movs	r4, #48	; 0x30
 8017442:	2b00      	cmp	r3, #0
 8017444:	d1b3      	bne.n	80173ae <_strtol_l.isra.0+0x5e>
 8017446:	2308      	movs	r3, #8
 8017448:	e7b1      	b.n	80173ae <_strtol_l.isra.0+0x5e>
 801744a:	2c30      	cmp	r4, #48	; 0x30
 801744c:	d0a4      	beq.n	8017398 <_strtol_l.isra.0+0x48>
 801744e:	230a      	movs	r3, #10
 8017450:	e7ad      	b.n	80173ae <_strtol_l.isra.0+0x5e>
 8017452:	bf00      	nop
 8017454:	08020367 	.word	0x08020367

08017458 <strtol>:
 8017458:	4613      	mov	r3, r2
 801745a:	460a      	mov	r2, r1
 801745c:	4601      	mov	r1, r0
 801745e:	4802      	ldr	r0, [pc, #8]	; (8017468 <strtol+0x10>)
 8017460:	6800      	ldr	r0, [r0, #0]
 8017462:	f7ff bf75 	b.w	8017350 <_strtol_l.isra.0>
 8017466:	bf00      	nop
 8017468:	2000014c 	.word	0x2000014c

0801746c <__swbuf_r>:
 801746c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801746e:	460e      	mov	r6, r1
 8017470:	4614      	mov	r4, r2
 8017472:	4605      	mov	r5, r0
 8017474:	b118      	cbz	r0, 801747e <__swbuf_r+0x12>
 8017476:	6983      	ldr	r3, [r0, #24]
 8017478:	b90b      	cbnz	r3, 801747e <__swbuf_r+0x12>
 801747a:	f000 f9f5 	bl	8017868 <__sinit>
 801747e:	4b21      	ldr	r3, [pc, #132]	; (8017504 <__swbuf_r+0x98>)
 8017480:	429c      	cmp	r4, r3
 8017482:	d12b      	bne.n	80174dc <__swbuf_r+0x70>
 8017484:	686c      	ldr	r4, [r5, #4]
 8017486:	69a3      	ldr	r3, [r4, #24]
 8017488:	60a3      	str	r3, [r4, #8]
 801748a:	89a3      	ldrh	r3, [r4, #12]
 801748c:	071a      	lsls	r2, r3, #28
 801748e:	d52f      	bpl.n	80174f0 <__swbuf_r+0x84>
 8017490:	6923      	ldr	r3, [r4, #16]
 8017492:	b36b      	cbz	r3, 80174f0 <__swbuf_r+0x84>
 8017494:	6923      	ldr	r3, [r4, #16]
 8017496:	6820      	ldr	r0, [r4, #0]
 8017498:	1ac0      	subs	r0, r0, r3
 801749a:	6963      	ldr	r3, [r4, #20]
 801749c:	b2f6      	uxtb	r6, r6
 801749e:	4283      	cmp	r3, r0
 80174a0:	4637      	mov	r7, r6
 80174a2:	dc04      	bgt.n	80174ae <__swbuf_r+0x42>
 80174a4:	4621      	mov	r1, r4
 80174a6:	4628      	mov	r0, r5
 80174a8:	f000 f94a 	bl	8017740 <_fflush_r>
 80174ac:	bb30      	cbnz	r0, 80174fc <__swbuf_r+0x90>
 80174ae:	68a3      	ldr	r3, [r4, #8]
 80174b0:	3b01      	subs	r3, #1
 80174b2:	60a3      	str	r3, [r4, #8]
 80174b4:	6823      	ldr	r3, [r4, #0]
 80174b6:	1c5a      	adds	r2, r3, #1
 80174b8:	6022      	str	r2, [r4, #0]
 80174ba:	701e      	strb	r6, [r3, #0]
 80174bc:	6963      	ldr	r3, [r4, #20]
 80174be:	3001      	adds	r0, #1
 80174c0:	4283      	cmp	r3, r0
 80174c2:	d004      	beq.n	80174ce <__swbuf_r+0x62>
 80174c4:	89a3      	ldrh	r3, [r4, #12]
 80174c6:	07db      	lsls	r3, r3, #31
 80174c8:	d506      	bpl.n	80174d8 <__swbuf_r+0x6c>
 80174ca:	2e0a      	cmp	r6, #10
 80174cc:	d104      	bne.n	80174d8 <__swbuf_r+0x6c>
 80174ce:	4621      	mov	r1, r4
 80174d0:	4628      	mov	r0, r5
 80174d2:	f000 f935 	bl	8017740 <_fflush_r>
 80174d6:	b988      	cbnz	r0, 80174fc <__swbuf_r+0x90>
 80174d8:	4638      	mov	r0, r7
 80174da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80174dc:	4b0a      	ldr	r3, [pc, #40]	; (8017508 <__swbuf_r+0x9c>)
 80174de:	429c      	cmp	r4, r3
 80174e0:	d101      	bne.n	80174e6 <__swbuf_r+0x7a>
 80174e2:	68ac      	ldr	r4, [r5, #8]
 80174e4:	e7cf      	b.n	8017486 <__swbuf_r+0x1a>
 80174e6:	4b09      	ldr	r3, [pc, #36]	; (801750c <__swbuf_r+0xa0>)
 80174e8:	429c      	cmp	r4, r3
 80174ea:	bf08      	it	eq
 80174ec:	68ec      	ldreq	r4, [r5, #12]
 80174ee:	e7ca      	b.n	8017486 <__swbuf_r+0x1a>
 80174f0:	4621      	mov	r1, r4
 80174f2:	4628      	mov	r0, r5
 80174f4:	f000 f80c 	bl	8017510 <__swsetup_r>
 80174f8:	2800      	cmp	r0, #0
 80174fa:	d0cb      	beq.n	8017494 <__swbuf_r+0x28>
 80174fc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8017500:	e7ea      	b.n	80174d8 <__swbuf_r+0x6c>
 8017502:	bf00      	nop
 8017504:	08020540 	.word	0x08020540
 8017508:	08020560 	.word	0x08020560
 801750c:	08020520 	.word	0x08020520

08017510 <__swsetup_r>:
 8017510:	4b32      	ldr	r3, [pc, #200]	; (80175dc <__swsetup_r+0xcc>)
 8017512:	b570      	push	{r4, r5, r6, lr}
 8017514:	681d      	ldr	r5, [r3, #0]
 8017516:	4606      	mov	r6, r0
 8017518:	460c      	mov	r4, r1
 801751a:	b125      	cbz	r5, 8017526 <__swsetup_r+0x16>
 801751c:	69ab      	ldr	r3, [r5, #24]
 801751e:	b913      	cbnz	r3, 8017526 <__swsetup_r+0x16>
 8017520:	4628      	mov	r0, r5
 8017522:	f000 f9a1 	bl	8017868 <__sinit>
 8017526:	4b2e      	ldr	r3, [pc, #184]	; (80175e0 <__swsetup_r+0xd0>)
 8017528:	429c      	cmp	r4, r3
 801752a:	d10f      	bne.n	801754c <__swsetup_r+0x3c>
 801752c:	686c      	ldr	r4, [r5, #4]
 801752e:	89a3      	ldrh	r3, [r4, #12]
 8017530:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017534:	0719      	lsls	r1, r3, #28
 8017536:	d42c      	bmi.n	8017592 <__swsetup_r+0x82>
 8017538:	06dd      	lsls	r5, r3, #27
 801753a:	d411      	bmi.n	8017560 <__swsetup_r+0x50>
 801753c:	2309      	movs	r3, #9
 801753e:	6033      	str	r3, [r6, #0]
 8017540:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017544:	81a3      	strh	r3, [r4, #12]
 8017546:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801754a:	e03e      	b.n	80175ca <__swsetup_r+0xba>
 801754c:	4b25      	ldr	r3, [pc, #148]	; (80175e4 <__swsetup_r+0xd4>)
 801754e:	429c      	cmp	r4, r3
 8017550:	d101      	bne.n	8017556 <__swsetup_r+0x46>
 8017552:	68ac      	ldr	r4, [r5, #8]
 8017554:	e7eb      	b.n	801752e <__swsetup_r+0x1e>
 8017556:	4b24      	ldr	r3, [pc, #144]	; (80175e8 <__swsetup_r+0xd8>)
 8017558:	429c      	cmp	r4, r3
 801755a:	bf08      	it	eq
 801755c:	68ec      	ldreq	r4, [r5, #12]
 801755e:	e7e6      	b.n	801752e <__swsetup_r+0x1e>
 8017560:	0758      	lsls	r0, r3, #29
 8017562:	d512      	bpl.n	801758a <__swsetup_r+0x7a>
 8017564:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017566:	b141      	cbz	r1, 801757a <__swsetup_r+0x6a>
 8017568:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801756c:	4299      	cmp	r1, r3
 801756e:	d002      	beq.n	8017576 <__swsetup_r+0x66>
 8017570:	4630      	mov	r0, r6
 8017572:	f000 fa97 	bl	8017aa4 <_free_r>
 8017576:	2300      	movs	r3, #0
 8017578:	6363      	str	r3, [r4, #52]	; 0x34
 801757a:	89a3      	ldrh	r3, [r4, #12]
 801757c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017580:	81a3      	strh	r3, [r4, #12]
 8017582:	2300      	movs	r3, #0
 8017584:	6063      	str	r3, [r4, #4]
 8017586:	6923      	ldr	r3, [r4, #16]
 8017588:	6023      	str	r3, [r4, #0]
 801758a:	89a3      	ldrh	r3, [r4, #12]
 801758c:	f043 0308 	orr.w	r3, r3, #8
 8017590:	81a3      	strh	r3, [r4, #12]
 8017592:	6923      	ldr	r3, [r4, #16]
 8017594:	b94b      	cbnz	r3, 80175aa <__swsetup_r+0x9a>
 8017596:	89a3      	ldrh	r3, [r4, #12]
 8017598:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801759c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80175a0:	d003      	beq.n	80175aa <__swsetup_r+0x9a>
 80175a2:	4621      	mov	r1, r4
 80175a4:	4630      	mov	r0, r6
 80175a6:	f000 fa35 	bl	8017a14 <__smakebuf_r>
 80175aa:	89a0      	ldrh	r0, [r4, #12]
 80175ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80175b0:	f010 0301 	ands.w	r3, r0, #1
 80175b4:	d00a      	beq.n	80175cc <__swsetup_r+0xbc>
 80175b6:	2300      	movs	r3, #0
 80175b8:	60a3      	str	r3, [r4, #8]
 80175ba:	6963      	ldr	r3, [r4, #20]
 80175bc:	425b      	negs	r3, r3
 80175be:	61a3      	str	r3, [r4, #24]
 80175c0:	6923      	ldr	r3, [r4, #16]
 80175c2:	b943      	cbnz	r3, 80175d6 <__swsetup_r+0xc6>
 80175c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80175c8:	d1ba      	bne.n	8017540 <__swsetup_r+0x30>
 80175ca:	bd70      	pop	{r4, r5, r6, pc}
 80175cc:	0781      	lsls	r1, r0, #30
 80175ce:	bf58      	it	pl
 80175d0:	6963      	ldrpl	r3, [r4, #20]
 80175d2:	60a3      	str	r3, [r4, #8]
 80175d4:	e7f4      	b.n	80175c0 <__swsetup_r+0xb0>
 80175d6:	2000      	movs	r0, #0
 80175d8:	e7f7      	b.n	80175ca <__swsetup_r+0xba>
 80175da:	bf00      	nop
 80175dc:	2000014c 	.word	0x2000014c
 80175e0:	08020540 	.word	0x08020540
 80175e4:	08020560 	.word	0x08020560
 80175e8:	08020520 	.word	0x08020520

080175ec <__assert_func>:
 80175ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80175ee:	4614      	mov	r4, r2
 80175f0:	461a      	mov	r2, r3
 80175f2:	4b09      	ldr	r3, [pc, #36]	; (8017618 <__assert_func+0x2c>)
 80175f4:	681b      	ldr	r3, [r3, #0]
 80175f6:	4605      	mov	r5, r0
 80175f8:	68d8      	ldr	r0, [r3, #12]
 80175fa:	b14c      	cbz	r4, 8017610 <__assert_func+0x24>
 80175fc:	4b07      	ldr	r3, [pc, #28]	; (801761c <__assert_func+0x30>)
 80175fe:	9100      	str	r1, [sp, #0]
 8017600:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017604:	4906      	ldr	r1, [pc, #24]	; (8017620 <__assert_func+0x34>)
 8017606:	462b      	mov	r3, r5
 8017608:	f000 f9ac 	bl	8017964 <fiprintf>
 801760c:	f000 ffa4 	bl	8018558 <abort>
 8017610:	4b04      	ldr	r3, [pc, #16]	; (8017624 <__assert_func+0x38>)
 8017612:	461c      	mov	r4, r3
 8017614:	e7f3      	b.n	80175fe <__assert_func+0x12>
 8017616:	bf00      	nop
 8017618:	2000014c 	.word	0x2000014c
 801761c:	080204e2 	.word	0x080204e2
 8017620:	080204ef 	.word	0x080204ef
 8017624:	0802051d 	.word	0x0802051d

08017628 <__errno>:
 8017628:	4b01      	ldr	r3, [pc, #4]	; (8017630 <__errno+0x8>)
 801762a:	6818      	ldr	r0, [r3, #0]
 801762c:	4770      	bx	lr
 801762e:	bf00      	nop
 8017630:	2000014c 	.word	0x2000014c

08017634 <__sflush_r>:
 8017634:	898a      	ldrh	r2, [r1, #12]
 8017636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801763a:	4605      	mov	r5, r0
 801763c:	0710      	lsls	r0, r2, #28
 801763e:	460c      	mov	r4, r1
 8017640:	d458      	bmi.n	80176f4 <__sflush_r+0xc0>
 8017642:	684b      	ldr	r3, [r1, #4]
 8017644:	2b00      	cmp	r3, #0
 8017646:	dc05      	bgt.n	8017654 <__sflush_r+0x20>
 8017648:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801764a:	2b00      	cmp	r3, #0
 801764c:	dc02      	bgt.n	8017654 <__sflush_r+0x20>
 801764e:	2000      	movs	r0, #0
 8017650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017654:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017656:	2e00      	cmp	r6, #0
 8017658:	d0f9      	beq.n	801764e <__sflush_r+0x1a>
 801765a:	2300      	movs	r3, #0
 801765c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017660:	682f      	ldr	r7, [r5, #0]
 8017662:	602b      	str	r3, [r5, #0]
 8017664:	d032      	beq.n	80176cc <__sflush_r+0x98>
 8017666:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017668:	89a3      	ldrh	r3, [r4, #12]
 801766a:	075a      	lsls	r2, r3, #29
 801766c:	d505      	bpl.n	801767a <__sflush_r+0x46>
 801766e:	6863      	ldr	r3, [r4, #4]
 8017670:	1ac0      	subs	r0, r0, r3
 8017672:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017674:	b10b      	cbz	r3, 801767a <__sflush_r+0x46>
 8017676:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017678:	1ac0      	subs	r0, r0, r3
 801767a:	2300      	movs	r3, #0
 801767c:	4602      	mov	r2, r0
 801767e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017680:	6a21      	ldr	r1, [r4, #32]
 8017682:	4628      	mov	r0, r5
 8017684:	47b0      	blx	r6
 8017686:	1c43      	adds	r3, r0, #1
 8017688:	89a3      	ldrh	r3, [r4, #12]
 801768a:	d106      	bne.n	801769a <__sflush_r+0x66>
 801768c:	6829      	ldr	r1, [r5, #0]
 801768e:	291d      	cmp	r1, #29
 8017690:	d82c      	bhi.n	80176ec <__sflush_r+0xb8>
 8017692:	4a2a      	ldr	r2, [pc, #168]	; (801773c <__sflush_r+0x108>)
 8017694:	40ca      	lsrs	r2, r1
 8017696:	07d6      	lsls	r6, r2, #31
 8017698:	d528      	bpl.n	80176ec <__sflush_r+0xb8>
 801769a:	2200      	movs	r2, #0
 801769c:	6062      	str	r2, [r4, #4]
 801769e:	04d9      	lsls	r1, r3, #19
 80176a0:	6922      	ldr	r2, [r4, #16]
 80176a2:	6022      	str	r2, [r4, #0]
 80176a4:	d504      	bpl.n	80176b0 <__sflush_r+0x7c>
 80176a6:	1c42      	adds	r2, r0, #1
 80176a8:	d101      	bne.n	80176ae <__sflush_r+0x7a>
 80176aa:	682b      	ldr	r3, [r5, #0]
 80176ac:	b903      	cbnz	r3, 80176b0 <__sflush_r+0x7c>
 80176ae:	6560      	str	r0, [r4, #84]	; 0x54
 80176b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80176b2:	602f      	str	r7, [r5, #0]
 80176b4:	2900      	cmp	r1, #0
 80176b6:	d0ca      	beq.n	801764e <__sflush_r+0x1a>
 80176b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80176bc:	4299      	cmp	r1, r3
 80176be:	d002      	beq.n	80176c6 <__sflush_r+0x92>
 80176c0:	4628      	mov	r0, r5
 80176c2:	f000 f9ef 	bl	8017aa4 <_free_r>
 80176c6:	2000      	movs	r0, #0
 80176c8:	6360      	str	r0, [r4, #52]	; 0x34
 80176ca:	e7c1      	b.n	8017650 <__sflush_r+0x1c>
 80176cc:	6a21      	ldr	r1, [r4, #32]
 80176ce:	2301      	movs	r3, #1
 80176d0:	4628      	mov	r0, r5
 80176d2:	47b0      	blx	r6
 80176d4:	1c41      	adds	r1, r0, #1
 80176d6:	d1c7      	bne.n	8017668 <__sflush_r+0x34>
 80176d8:	682b      	ldr	r3, [r5, #0]
 80176da:	2b00      	cmp	r3, #0
 80176dc:	d0c4      	beq.n	8017668 <__sflush_r+0x34>
 80176de:	2b1d      	cmp	r3, #29
 80176e0:	d001      	beq.n	80176e6 <__sflush_r+0xb2>
 80176e2:	2b16      	cmp	r3, #22
 80176e4:	d101      	bne.n	80176ea <__sflush_r+0xb6>
 80176e6:	602f      	str	r7, [r5, #0]
 80176e8:	e7b1      	b.n	801764e <__sflush_r+0x1a>
 80176ea:	89a3      	ldrh	r3, [r4, #12]
 80176ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80176f0:	81a3      	strh	r3, [r4, #12]
 80176f2:	e7ad      	b.n	8017650 <__sflush_r+0x1c>
 80176f4:	690f      	ldr	r7, [r1, #16]
 80176f6:	2f00      	cmp	r7, #0
 80176f8:	d0a9      	beq.n	801764e <__sflush_r+0x1a>
 80176fa:	0793      	lsls	r3, r2, #30
 80176fc:	680e      	ldr	r6, [r1, #0]
 80176fe:	bf08      	it	eq
 8017700:	694b      	ldreq	r3, [r1, #20]
 8017702:	600f      	str	r7, [r1, #0]
 8017704:	bf18      	it	ne
 8017706:	2300      	movne	r3, #0
 8017708:	eba6 0807 	sub.w	r8, r6, r7
 801770c:	608b      	str	r3, [r1, #8]
 801770e:	f1b8 0f00 	cmp.w	r8, #0
 8017712:	dd9c      	ble.n	801764e <__sflush_r+0x1a>
 8017714:	6a21      	ldr	r1, [r4, #32]
 8017716:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017718:	4643      	mov	r3, r8
 801771a:	463a      	mov	r2, r7
 801771c:	4628      	mov	r0, r5
 801771e:	47b0      	blx	r6
 8017720:	2800      	cmp	r0, #0
 8017722:	dc06      	bgt.n	8017732 <__sflush_r+0xfe>
 8017724:	89a3      	ldrh	r3, [r4, #12]
 8017726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801772a:	81a3      	strh	r3, [r4, #12]
 801772c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017730:	e78e      	b.n	8017650 <__sflush_r+0x1c>
 8017732:	4407      	add	r7, r0
 8017734:	eba8 0800 	sub.w	r8, r8, r0
 8017738:	e7e9      	b.n	801770e <__sflush_r+0xda>
 801773a:	bf00      	nop
 801773c:	20400001 	.word	0x20400001

08017740 <_fflush_r>:
 8017740:	b538      	push	{r3, r4, r5, lr}
 8017742:	690b      	ldr	r3, [r1, #16]
 8017744:	4605      	mov	r5, r0
 8017746:	460c      	mov	r4, r1
 8017748:	b913      	cbnz	r3, 8017750 <_fflush_r+0x10>
 801774a:	2500      	movs	r5, #0
 801774c:	4628      	mov	r0, r5
 801774e:	bd38      	pop	{r3, r4, r5, pc}
 8017750:	b118      	cbz	r0, 801775a <_fflush_r+0x1a>
 8017752:	6983      	ldr	r3, [r0, #24]
 8017754:	b90b      	cbnz	r3, 801775a <_fflush_r+0x1a>
 8017756:	f000 f887 	bl	8017868 <__sinit>
 801775a:	4b14      	ldr	r3, [pc, #80]	; (80177ac <_fflush_r+0x6c>)
 801775c:	429c      	cmp	r4, r3
 801775e:	d11b      	bne.n	8017798 <_fflush_r+0x58>
 8017760:	686c      	ldr	r4, [r5, #4]
 8017762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017766:	2b00      	cmp	r3, #0
 8017768:	d0ef      	beq.n	801774a <_fflush_r+0xa>
 801776a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801776c:	07d0      	lsls	r0, r2, #31
 801776e:	d404      	bmi.n	801777a <_fflush_r+0x3a>
 8017770:	0599      	lsls	r1, r3, #22
 8017772:	d402      	bmi.n	801777a <_fflush_r+0x3a>
 8017774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017776:	f000 f927 	bl	80179c8 <__retarget_lock_acquire_recursive>
 801777a:	4628      	mov	r0, r5
 801777c:	4621      	mov	r1, r4
 801777e:	f7ff ff59 	bl	8017634 <__sflush_r>
 8017782:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017784:	07da      	lsls	r2, r3, #31
 8017786:	4605      	mov	r5, r0
 8017788:	d4e0      	bmi.n	801774c <_fflush_r+0xc>
 801778a:	89a3      	ldrh	r3, [r4, #12]
 801778c:	059b      	lsls	r3, r3, #22
 801778e:	d4dd      	bmi.n	801774c <_fflush_r+0xc>
 8017790:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017792:	f000 f91a 	bl	80179ca <__retarget_lock_release_recursive>
 8017796:	e7d9      	b.n	801774c <_fflush_r+0xc>
 8017798:	4b05      	ldr	r3, [pc, #20]	; (80177b0 <_fflush_r+0x70>)
 801779a:	429c      	cmp	r4, r3
 801779c:	d101      	bne.n	80177a2 <_fflush_r+0x62>
 801779e:	68ac      	ldr	r4, [r5, #8]
 80177a0:	e7df      	b.n	8017762 <_fflush_r+0x22>
 80177a2:	4b04      	ldr	r3, [pc, #16]	; (80177b4 <_fflush_r+0x74>)
 80177a4:	429c      	cmp	r4, r3
 80177a6:	bf08      	it	eq
 80177a8:	68ec      	ldreq	r4, [r5, #12]
 80177aa:	e7da      	b.n	8017762 <_fflush_r+0x22>
 80177ac:	08020540 	.word	0x08020540
 80177b0:	08020560 	.word	0x08020560
 80177b4:	08020520 	.word	0x08020520

080177b8 <std>:
 80177b8:	2300      	movs	r3, #0
 80177ba:	b510      	push	{r4, lr}
 80177bc:	4604      	mov	r4, r0
 80177be:	e9c0 3300 	strd	r3, r3, [r0]
 80177c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80177c6:	6083      	str	r3, [r0, #8]
 80177c8:	8181      	strh	r1, [r0, #12]
 80177ca:	6643      	str	r3, [r0, #100]	; 0x64
 80177cc:	81c2      	strh	r2, [r0, #14]
 80177ce:	6183      	str	r3, [r0, #24]
 80177d0:	4619      	mov	r1, r3
 80177d2:	2208      	movs	r2, #8
 80177d4:	305c      	adds	r0, #92	; 0x5c
 80177d6:	f7ff fc05 	bl	8016fe4 <memset>
 80177da:	4b05      	ldr	r3, [pc, #20]	; (80177f0 <std+0x38>)
 80177dc:	6263      	str	r3, [r4, #36]	; 0x24
 80177de:	4b05      	ldr	r3, [pc, #20]	; (80177f4 <std+0x3c>)
 80177e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80177e2:	4b05      	ldr	r3, [pc, #20]	; (80177f8 <std+0x40>)
 80177e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80177e6:	4b05      	ldr	r3, [pc, #20]	; (80177fc <std+0x44>)
 80177e8:	6224      	str	r4, [r4, #32]
 80177ea:	6323      	str	r3, [r4, #48]	; 0x30
 80177ec:	bd10      	pop	{r4, pc}
 80177ee:	bf00      	nop
 80177f0:	080184ad 	.word	0x080184ad
 80177f4:	080184cf 	.word	0x080184cf
 80177f8:	08018507 	.word	0x08018507
 80177fc:	0801852b 	.word	0x0801852b

08017800 <_cleanup_r>:
 8017800:	4901      	ldr	r1, [pc, #4]	; (8017808 <_cleanup_r+0x8>)
 8017802:	f000 b8c1 	b.w	8017988 <_fwalk_reent>
 8017806:	bf00      	nop
 8017808:	08017741 	.word	0x08017741

0801780c <__sfmoreglue>:
 801780c:	b570      	push	{r4, r5, r6, lr}
 801780e:	1e4a      	subs	r2, r1, #1
 8017810:	2568      	movs	r5, #104	; 0x68
 8017812:	4355      	muls	r5, r2
 8017814:	460e      	mov	r6, r1
 8017816:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801781a:	f000 f993 	bl	8017b44 <_malloc_r>
 801781e:	4604      	mov	r4, r0
 8017820:	b140      	cbz	r0, 8017834 <__sfmoreglue+0x28>
 8017822:	2100      	movs	r1, #0
 8017824:	e9c0 1600 	strd	r1, r6, [r0]
 8017828:	300c      	adds	r0, #12
 801782a:	60a0      	str	r0, [r4, #8]
 801782c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017830:	f7ff fbd8 	bl	8016fe4 <memset>
 8017834:	4620      	mov	r0, r4
 8017836:	bd70      	pop	{r4, r5, r6, pc}

08017838 <__sfp_lock_acquire>:
 8017838:	4801      	ldr	r0, [pc, #4]	; (8017840 <__sfp_lock_acquire+0x8>)
 801783a:	f000 b8c5 	b.w	80179c8 <__retarget_lock_acquire_recursive>
 801783e:	bf00      	nop
 8017840:	20016de4 	.word	0x20016de4

08017844 <__sfp_lock_release>:
 8017844:	4801      	ldr	r0, [pc, #4]	; (801784c <__sfp_lock_release+0x8>)
 8017846:	f000 b8c0 	b.w	80179ca <__retarget_lock_release_recursive>
 801784a:	bf00      	nop
 801784c:	20016de4 	.word	0x20016de4

08017850 <__sinit_lock_acquire>:
 8017850:	4801      	ldr	r0, [pc, #4]	; (8017858 <__sinit_lock_acquire+0x8>)
 8017852:	f000 b8b9 	b.w	80179c8 <__retarget_lock_acquire_recursive>
 8017856:	bf00      	nop
 8017858:	20016ddf 	.word	0x20016ddf

0801785c <__sinit_lock_release>:
 801785c:	4801      	ldr	r0, [pc, #4]	; (8017864 <__sinit_lock_release+0x8>)
 801785e:	f000 b8b4 	b.w	80179ca <__retarget_lock_release_recursive>
 8017862:	bf00      	nop
 8017864:	20016ddf 	.word	0x20016ddf

08017868 <__sinit>:
 8017868:	b510      	push	{r4, lr}
 801786a:	4604      	mov	r4, r0
 801786c:	f7ff fff0 	bl	8017850 <__sinit_lock_acquire>
 8017870:	69a3      	ldr	r3, [r4, #24]
 8017872:	b11b      	cbz	r3, 801787c <__sinit+0x14>
 8017874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017878:	f7ff bff0 	b.w	801785c <__sinit_lock_release>
 801787c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017880:	6523      	str	r3, [r4, #80]	; 0x50
 8017882:	4b13      	ldr	r3, [pc, #76]	; (80178d0 <__sinit+0x68>)
 8017884:	4a13      	ldr	r2, [pc, #76]	; (80178d4 <__sinit+0x6c>)
 8017886:	681b      	ldr	r3, [r3, #0]
 8017888:	62a2      	str	r2, [r4, #40]	; 0x28
 801788a:	42a3      	cmp	r3, r4
 801788c:	bf04      	itt	eq
 801788e:	2301      	moveq	r3, #1
 8017890:	61a3      	streq	r3, [r4, #24]
 8017892:	4620      	mov	r0, r4
 8017894:	f000 f820 	bl	80178d8 <__sfp>
 8017898:	6060      	str	r0, [r4, #4]
 801789a:	4620      	mov	r0, r4
 801789c:	f000 f81c 	bl	80178d8 <__sfp>
 80178a0:	60a0      	str	r0, [r4, #8]
 80178a2:	4620      	mov	r0, r4
 80178a4:	f000 f818 	bl	80178d8 <__sfp>
 80178a8:	2200      	movs	r2, #0
 80178aa:	60e0      	str	r0, [r4, #12]
 80178ac:	2104      	movs	r1, #4
 80178ae:	6860      	ldr	r0, [r4, #4]
 80178b0:	f7ff ff82 	bl	80177b8 <std>
 80178b4:	68a0      	ldr	r0, [r4, #8]
 80178b6:	2201      	movs	r2, #1
 80178b8:	2109      	movs	r1, #9
 80178ba:	f7ff ff7d 	bl	80177b8 <std>
 80178be:	68e0      	ldr	r0, [r4, #12]
 80178c0:	2202      	movs	r2, #2
 80178c2:	2112      	movs	r1, #18
 80178c4:	f7ff ff78 	bl	80177b8 <std>
 80178c8:	2301      	movs	r3, #1
 80178ca:	61a3      	str	r3, [r4, #24]
 80178cc:	e7d2      	b.n	8017874 <__sinit+0xc>
 80178ce:	bf00      	nop
 80178d0:	08020468 	.word	0x08020468
 80178d4:	08017801 	.word	0x08017801

080178d8 <__sfp>:
 80178d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80178da:	4607      	mov	r7, r0
 80178dc:	f7ff ffac 	bl	8017838 <__sfp_lock_acquire>
 80178e0:	4b1e      	ldr	r3, [pc, #120]	; (801795c <__sfp+0x84>)
 80178e2:	681e      	ldr	r6, [r3, #0]
 80178e4:	69b3      	ldr	r3, [r6, #24]
 80178e6:	b913      	cbnz	r3, 80178ee <__sfp+0x16>
 80178e8:	4630      	mov	r0, r6
 80178ea:	f7ff ffbd 	bl	8017868 <__sinit>
 80178ee:	3648      	adds	r6, #72	; 0x48
 80178f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80178f4:	3b01      	subs	r3, #1
 80178f6:	d503      	bpl.n	8017900 <__sfp+0x28>
 80178f8:	6833      	ldr	r3, [r6, #0]
 80178fa:	b30b      	cbz	r3, 8017940 <__sfp+0x68>
 80178fc:	6836      	ldr	r6, [r6, #0]
 80178fe:	e7f7      	b.n	80178f0 <__sfp+0x18>
 8017900:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017904:	b9d5      	cbnz	r5, 801793c <__sfp+0x64>
 8017906:	4b16      	ldr	r3, [pc, #88]	; (8017960 <__sfp+0x88>)
 8017908:	60e3      	str	r3, [r4, #12]
 801790a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801790e:	6665      	str	r5, [r4, #100]	; 0x64
 8017910:	f000 f859 	bl	80179c6 <__retarget_lock_init_recursive>
 8017914:	f7ff ff96 	bl	8017844 <__sfp_lock_release>
 8017918:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801791c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017920:	6025      	str	r5, [r4, #0]
 8017922:	61a5      	str	r5, [r4, #24]
 8017924:	2208      	movs	r2, #8
 8017926:	4629      	mov	r1, r5
 8017928:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801792c:	f7ff fb5a 	bl	8016fe4 <memset>
 8017930:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017934:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017938:	4620      	mov	r0, r4
 801793a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801793c:	3468      	adds	r4, #104	; 0x68
 801793e:	e7d9      	b.n	80178f4 <__sfp+0x1c>
 8017940:	2104      	movs	r1, #4
 8017942:	4638      	mov	r0, r7
 8017944:	f7ff ff62 	bl	801780c <__sfmoreglue>
 8017948:	4604      	mov	r4, r0
 801794a:	6030      	str	r0, [r6, #0]
 801794c:	2800      	cmp	r0, #0
 801794e:	d1d5      	bne.n	80178fc <__sfp+0x24>
 8017950:	f7ff ff78 	bl	8017844 <__sfp_lock_release>
 8017954:	230c      	movs	r3, #12
 8017956:	603b      	str	r3, [r7, #0]
 8017958:	e7ee      	b.n	8017938 <__sfp+0x60>
 801795a:	bf00      	nop
 801795c:	08020468 	.word	0x08020468
 8017960:	ffff0001 	.word	0xffff0001

08017964 <fiprintf>:
 8017964:	b40e      	push	{r1, r2, r3}
 8017966:	b503      	push	{r0, r1, lr}
 8017968:	4601      	mov	r1, r0
 801796a:	ab03      	add	r3, sp, #12
 801796c:	4805      	ldr	r0, [pc, #20]	; (8017984 <fiprintf+0x20>)
 801796e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017972:	6800      	ldr	r0, [r0, #0]
 8017974:	9301      	str	r3, [sp, #4]
 8017976:	f000 fac5 	bl	8017f04 <_vfiprintf_r>
 801797a:	b002      	add	sp, #8
 801797c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017980:	b003      	add	sp, #12
 8017982:	4770      	bx	lr
 8017984:	2000014c 	.word	0x2000014c

08017988 <_fwalk_reent>:
 8017988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801798c:	4606      	mov	r6, r0
 801798e:	4688      	mov	r8, r1
 8017990:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017994:	2700      	movs	r7, #0
 8017996:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801799a:	f1b9 0901 	subs.w	r9, r9, #1
 801799e:	d505      	bpl.n	80179ac <_fwalk_reent+0x24>
 80179a0:	6824      	ldr	r4, [r4, #0]
 80179a2:	2c00      	cmp	r4, #0
 80179a4:	d1f7      	bne.n	8017996 <_fwalk_reent+0xe>
 80179a6:	4638      	mov	r0, r7
 80179a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80179ac:	89ab      	ldrh	r3, [r5, #12]
 80179ae:	2b01      	cmp	r3, #1
 80179b0:	d907      	bls.n	80179c2 <_fwalk_reent+0x3a>
 80179b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80179b6:	3301      	adds	r3, #1
 80179b8:	d003      	beq.n	80179c2 <_fwalk_reent+0x3a>
 80179ba:	4629      	mov	r1, r5
 80179bc:	4630      	mov	r0, r6
 80179be:	47c0      	blx	r8
 80179c0:	4307      	orrs	r7, r0
 80179c2:	3568      	adds	r5, #104	; 0x68
 80179c4:	e7e9      	b.n	801799a <_fwalk_reent+0x12>

080179c6 <__retarget_lock_init_recursive>:
 80179c6:	4770      	bx	lr

080179c8 <__retarget_lock_acquire_recursive>:
 80179c8:	4770      	bx	lr

080179ca <__retarget_lock_release_recursive>:
 80179ca:	4770      	bx	lr

080179cc <__swhatbuf_r>:
 80179cc:	b570      	push	{r4, r5, r6, lr}
 80179ce:	460e      	mov	r6, r1
 80179d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80179d4:	2900      	cmp	r1, #0
 80179d6:	b096      	sub	sp, #88	; 0x58
 80179d8:	4614      	mov	r4, r2
 80179da:	461d      	mov	r5, r3
 80179dc:	da07      	bge.n	80179ee <__swhatbuf_r+0x22>
 80179de:	2300      	movs	r3, #0
 80179e0:	602b      	str	r3, [r5, #0]
 80179e2:	89b3      	ldrh	r3, [r6, #12]
 80179e4:	061a      	lsls	r2, r3, #24
 80179e6:	d410      	bmi.n	8017a0a <__swhatbuf_r+0x3e>
 80179e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80179ec:	e00e      	b.n	8017a0c <__swhatbuf_r+0x40>
 80179ee:	466a      	mov	r2, sp
 80179f0:	f000 fdca 	bl	8018588 <_fstat_r>
 80179f4:	2800      	cmp	r0, #0
 80179f6:	dbf2      	blt.n	80179de <__swhatbuf_r+0x12>
 80179f8:	9a01      	ldr	r2, [sp, #4]
 80179fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80179fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017a02:	425a      	negs	r2, r3
 8017a04:	415a      	adcs	r2, r3
 8017a06:	602a      	str	r2, [r5, #0]
 8017a08:	e7ee      	b.n	80179e8 <__swhatbuf_r+0x1c>
 8017a0a:	2340      	movs	r3, #64	; 0x40
 8017a0c:	2000      	movs	r0, #0
 8017a0e:	6023      	str	r3, [r4, #0]
 8017a10:	b016      	add	sp, #88	; 0x58
 8017a12:	bd70      	pop	{r4, r5, r6, pc}

08017a14 <__smakebuf_r>:
 8017a14:	898b      	ldrh	r3, [r1, #12]
 8017a16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017a18:	079d      	lsls	r5, r3, #30
 8017a1a:	4606      	mov	r6, r0
 8017a1c:	460c      	mov	r4, r1
 8017a1e:	d507      	bpl.n	8017a30 <__smakebuf_r+0x1c>
 8017a20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017a24:	6023      	str	r3, [r4, #0]
 8017a26:	6123      	str	r3, [r4, #16]
 8017a28:	2301      	movs	r3, #1
 8017a2a:	6163      	str	r3, [r4, #20]
 8017a2c:	b002      	add	sp, #8
 8017a2e:	bd70      	pop	{r4, r5, r6, pc}
 8017a30:	ab01      	add	r3, sp, #4
 8017a32:	466a      	mov	r2, sp
 8017a34:	f7ff ffca 	bl	80179cc <__swhatbuf_r>
 8017a38:	9900      	ldr	r1, [sp, #0]
 8017a3a:	4605      	mov	r5, r0
 8017a3c:	4630      	mov	r0, r6
 8017a3e:	f000 f881 	bl	8017b44 <_malloc_r>
 8017a42:	b948      	cbnz	r0, 8017a58 <__smakebuf_r+0x44>
 8017a44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017a48:	059a      	lsls	r2, r3, #22
 8017a4a:	d4ef      	bmi.n	8017a2c <__smakebuf_r+0x18>
 8017a4c:	f023 0303 	bic.w	r3, r3, #3
 8017a50:	f043 0302 	orr.w	r3, r3, #2
 8017a54:	81a3      	strh	r3, [r4, #12]
 8017a56:	e7e3      	b.n	8017a20 <__smakebuf_r+0xc>
 8017a58:	4b0d      	ldr	r3, [pc, #52]	; (8017a90 <__smakebuf_r+0x7c>)
 8017a5a:	62b3      	str	r3, [r6, #40]	; 0x28
 8017a5c:	89a3      	ldrh	r3, [r4, #12]
 8017a5e:	6020      	str	r0, [r4, #0]
 8017a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017a64:	81a3      	strh	r3, [r4, #12]
 8017a66:	9b00      	ldr	r3, [sp, #0]
 8017a68:	6163      	str	r3, [r4, #20]
 8017a6a:	9b01      	ldr	r3, [sp, #4]
 8017a6c:	6120      	str	r0, [r4, #16]
 8017a6e:	b15b      	cbz	r3, 8017a88 <__smakebuf_r+0x74>
 8017a70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017a74:	4630      	mov	r0, r6
 8017a76:	f000 fd99 	bl	80185ac <_isatty_r>
 8017a7a:	b128      	cbz	r0, 8017a88 <__smakebuf_r+0x74>
 8017a7c:	89a3      	ldrh	r3, [r4, #12]
 8017a7e:	f023 0303 	bic.w	r3, r3, #3
 8017a82:	f043 0301 	orr.w	r3, r3, #1
 8017a86:	81a3      	strh	r3, [r4, #12]
 8017a88:	89a0      	ldrh	r0, [r4, #12]
 8017a8a:	4305      	orrs	r5, r0
 8017a8c:	81a5      	strh	r5, [r4, #12]
 8017a8e:	e7cd      	b.n	8017a2c <__smakebuf_r+0x18>
 8017a90:	08017801 	.word	0x08017801

08017a94 <malloc>:
 8017a94:	4b02      	ldr	r3, [pc, #8]	; (8017aa0 <malloc+0xc>)
 8017a96:	4601      	mov	r1, r0
 8017a98:	6818      	ldr	r0, [r3, #0]
 8017a9a:	f000 b853 	b.w	8017b44 <_malloc_r>
 8017a9e:	bf00      	nop
 8017aa0:	2000014c 	.word	0x2000014c

08017aa4 <_free_r>:
 8017aa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017aa6:	2900      	cmp	r1, #0
 8017aa8:	d048      	beq.n	8017b3c <_free_r+0x98>
 8017aaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017aae:	9001      	str	r0, [sp, #4]
 8017ab0:	2b00      	cmp	r3, #0
 8017ab2:	f1a1 0404 	sub.w	r4, r1, #4
 8017ab6:	bfb8      	it	lt
 8017ab8:	18e4      	addlt	r4, r4, r3
 8017aba:	f000 fd99 	bl	80185f0 <__malloc_lock>
 8017abe:	4a20      	ldr	r2, [pc, #128]	; (8017b40 <_free_r+0x9c>)
 8017ac0:	9801      	ldr	r0, [sp, #4]
 8017ac2:	6813      	ldr	r3, [r2, #0]
 8017ac4:	4615      	mov	r5, r2
 8017ac6:	b933      	cbnz	r3, 8017ad6 <_free_r+0x32>
 8017ac8:	6063      	str	r3, [r4, #4]
 8017aca:	6014      	str	r4, [r2, #0]
 8017acc:	b003      	add	sp, #12
 8017ace:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017ad2:	f000 bd93 	b.w	80185fc <__malloc_unlock>
 8017ad6:	42a3      	cmp	r3, r4
 8017ad8:	d90b      	bls.n	8017af2 <_free_r+0x4e>
 8017ada:	6821      	ldr	r1, [r4, #0]
 8017adc:	1862      	adds	r2, r4, r1
 8017ade:	4293      	cmp	r3, r2
 8017ae0:	bf04      	itt	eq
 8017ae2:	681a      	ldreq	r2, [r3, #0]
 8017ae4:	685b      	ldreq	r3, [r3, #4]
 8017ae6:	6063      	str	r3, [r4, #4]
 8017ae8:	bf04      	itt	eq
 8017aea:	1852      	addeq	r2, r2, r1
 8017aec:	6022      	streq	r2, [r4, #0]
 8017aee:	602c      	str	r4, [r5, #0]
 8017af0:	e7ec      	b.n	8017acc <_free_r+0x28>
 8017af2:	461a      	mov	r2, r3
 8017af4:	685b      	ldr	r3, [r3, #4]
 8017af6:	b10b      	cbz	r3, 8017afc <_free_r+0x58>
 8017af8:	42a3      	cmp	r3, r4
 8017afa:	d9fa      	bls.n	8017af2 <_free_r+0x4e>
 8017afc:	6811      	ldr	r1, [r2, #0]
 8017afe:	1855      	adds	r5, r2, r1
 8017b00:	42a5      	cmp	r5, r4
 8017b02:	d10b      	bne.n	8017b1c <_free_r+0x78>
 8017b04:	6824      	ldr	r4, [r4, #0]
 8017b06:	4421      	add	r1, r4
 8017b08:	1854      	adds	r4, r2, r1
 8017b0a:	42a3      	cmp	r3, r4
 8017b0c:	6011      	str	r1, [r2, #0]
 8017b0e:	d1dd      	bne.n	8017acc <_free_r+0x28>
 8017b10:	681c      	ldr	r4, [r3, #0]
 8017b12:	685b      	ldr	r3, [r3, #4]
 8017b14:	6053      	str	r3, [r2, #4]
 8017b16:	4421      	add	r1, r4
 8017b18:	6011      	str	r1, [r2, #0]
 8017b1a:	e7d7      	b.n	8017acc <_free_r+0x28>
 8017b1c:	d902      	bls.n	8017b24 <_free_r+0x80>
 8017b1e:	230c      	movs	r3, #12
 8017b20:	6003      	str	r3, [r0, #0]
 8017b22:	e7d3      	b.n	8017acc <_free_r+0x28>
 8017b24:	6825      	ldr	r5, [r4, #0]
 8017b26:	1961      	adds	r1, r4, r5
 8017b28:	428b      	cmp	r3, r1
 8017b2a:	bf04      	itt	eq
 8017b2c:	6819      	ldreq	r1, [r3, #0]
 8017b2e:	685b      	ldreq	r3, [r3, #4]
 8017b30:	6063      	str	r3, [r4, #4]
 8017b32:	bf04      	itt	eq
 8017b34:	1949      	addeq	r1, r1, r5
 8017b36:	6021      	streq	r1, [r4, #0]
 8017b38:	6054      	str	r4, [r2, #4]
 8017b3a:	e7c7      	b.n	8017acc <_free_r+0x28>
 8017b3c:	b003      	add	sp, #12
 8017b3e:	bd30      	pop	{r4, r5, pc}
 8017b40:	200017e4 	.word	0x200017e4

08017b44 <_malloc_r>:
 8017b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b46:	1ccd      	adds	r5, r1, #3
 8017b48:	f025 0503 	bic.w	r5, r5, #3
 8017b4c:	3508      	adds	r5, #8
 8017b4e:	2d0c      	cmp	r5, #12
 8017b50:	bf38      	it	cc
 8017b52:	250c      	movcc	r5, #12
 8017b54:	2d00      	cmp	r5, #0
 8017b56:	4606      	mov	r6, r0
 8017b58:	db01      	blt.n	8017b5e <_malloc_r+0x1a>
 8017b5a:	42a9      	cmp	r1, r5
 8017b5c:	d903      	bls.n	8017b66 <_malloc_r+0x22>
 8017b5e:	230c      	movs	r3, #12
 8017b60:	6033      	str	r3, [r6, #0]
 8017b62:	2000      	movs	r0, #0
 8017b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017b66:	f000 fd43 	bl	80185f0 <__malloc_lock>
 8017b6a:	4921      	ldr	r1, [pc, #132]	; (8017bf0 <_malloc_r+0xac>)
 8017b6c:	680a      	ldr	r2, [r1, #0]
 8017b6e:	4614      	mov	r4, r2
 8017b70:	b99c      	cbnz	r4, 8017b9a <_malloc_r+0x56>
 8017b72:	4f20      	ldr	r7, [pc, #128]	; (8017bf4 <_malloc_r+0xb0>)
 8017b74:	683b      	ldr	r3, [r7, #0]
 8017b76:	b923      	cbnz	r3, 8017b82 <_malloc_r+0x3e>
 8017b78:	4621      	mov	r1, r4
 8017b7a:	4630      	mov	r0, r6
 8017b7c:	f000 fc86 	bl	801848c <_sbrk_r>
 8017b80:	6038      	str	r0, [r7, #0]
 8017b82:	4629      	mov	r1, r5
 8017b84:	4630      	mov	r0, r6
 8017b86:	f000 fc81 	bl	801848c <_sbrk_r>
 8017b8a:	1c43      	adds	r3, r0, #1
 8017b8c:	d123      	bne.n	8017bd6 <_malloc_r+0x92>
 8017b8e:	230c      	movs	r3, #12
 8017b90:	6033      	str	r3, [r6, #0]
 8017b92:	4630      	mov	r0, r6
 8017b94:	f000 fd32 	bl	80185fc <__malloc_unlock>
 8017b98:	e7e3      	b.n	8017b62 <_malloc_r+0x1e>
 8017b9a:	6823      	ldr	r3, [r4, #0]
 8017b9c:	1b5b      	subs	r3, r3, r5
 8017b9e:	d417      	bmi.n	8017bd0 <_malloc_r+0x8c>
 8017ba0:	2b0b      	cmp	r3, #11
 8017ba2:	d903      	bls.n	8017bac <_malloc_r+0x68>
 8017ba4:	6023      	str	r3, [r4, #0]
 8017ba6:	441c      	add	r4, r3
 8017ba8:	6025      	str	r5, [r4, #0]
 8017baa:	e004      	b.n	8017bb6 <_malloc_r+0x72>
 8017bac:	6863      	ldr	r3, [r4, #4]
 8017bae:	42a2      	cmp	r2, r4
 8017bb0:	bf0c      	ite	eq
 8017bb2:	600b      	streq	r3, [r1, #0]
 8017bb4:	6053      	strne	r3, [r2, #4]
 8017bb6:	4630      	mov	r0, r6
 8017bb8:	f000 fd20 	bl	80185fc <__malloc_unlock>
 8017bbc:	f104 000b 	add.w	r0, r4, #11
 8017bc0:	1d23      	adds	r3, r4, #4
 8017bc2:	f020 0007 	bic.w	r0, r0, #7
 8017bc6:	1ac2      	subs	r2, r0, r3
 8017bc8:	d0cc      	beq.n	8017b64 <_malloc_r+0x20>
 8017bca:	1a1b      	subs	r3, r3, r0
 8017bcc:	50a3      	str	r3, [r4, r2]
 8017bce:	e7c9      	b.n	8017b64 <_malloc_r+0x20>
 8017bd0:	4622      	mov	r2, r4
 8017bd2:	6864      	ldr	r4, [r4, #4]
 8017bd4:	e7cc      	b.n	8017b70 <_malloc_r+0x2c>
 8017bd6:	1cc4      	adds	r4, r0, #3
 8017bd8:	f024 0403 	bic.w	r4, r4, #3
 8017bdc:	42a0      	cmp	r0, r4
 8017bde:	d0e3      	beq.n	8017ba8 <_malloc_r+0x64>
 8017be0:	1a21      	subs	r1, r4, r0
 8017be2:	4630      	mov	r0, r6
 8017be4:	f000 fc52 	bl	801848c <_sbrk_r>
 8017be8:	3001      	adds	r0, #1
 8017bea:	d1dd      	bne.n	8017ba8 <_malloc_r+0x64>
 8017bec:	e7cf      	b.n	8017b8e <_malloc_r+0x4a>
 8017bee:	bf00      	nop
 8017bf0:	200017e4 	.word	0x200017e4
 8017bf4:	200017e8 	.word	0x200017e8

08017bf8 <__ssputs_r>:
 8017bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017bfc:	688e      	ldr	r6, [r1, #8]
 8017bfe:	429e      	cmp	r6, r3
 8017c00:	4682      	mov	sl, r0
 8017c02:	460c      	mov	r4, r1
 8017c04:	4690      	mov	r8, r2
 8017c06:	461f      	mov	r7, r3
 8017c08:	d838      	bhi.n	8017c7c <__ssputs_r+0x84>
 8017c0a:	898a      	ldrh	r2, [r1, #12]
 8017c0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017c10:	d032      	beq.n	8017c78 <__ssputs_r+0x80>
 8017c12:	6825      	ldr	r5, [r4, #0]
 8017c14:	6909      	ldr	r1, [r1, #16]
 8017c16:	eba5 0901 	sub.w	r9, r5, r1
 8017c1a:	6965      	ldr	r5, [r4, #20]
 8017c1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017c20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017c24:	3301      	adds	r3, #1
 8017c26:	444b      	add	r3, r9
 8017c28:	106d      	asrs	r5, r5, #1
 8017c2a:	429d      	cmp	r5, r3
 8017c2c:	bf38      	it	cc
 8017c2e:	461d      	movcc	r5, r3
 8017c30:	0553      	lsls	r3, r2, #21
 8017c32:	d531      	bpl.n	8017c98 <__ssputs_r+0xa0>
 8017c34:	4629      	mov	r1, r5
 8017c36:	f7ff ff85 	bl	8017b44 <_malloc_r>
 8017c3a:	4606      	mov	r6, r0
 8017c3c:	b950      	cbnz	r0, 8017c54 <__ssputs_r+0x5c>
 8017c3e:	230c      	movs	r3, #12
 8017c40:	f8ca 3000 	str.w	r3, [sl]
 8017c44:	89a3      	ldrh	r3, [r4, #12]
 8017c46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017c4a:	81a3      	strh	r3, [r4, #12]
 8017c4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c54:	6921      	ldr	r1, [r4, #16]
 8017c56:	464a      	mov	r2, r9
 8017c58:	f7ff f99c 	bl	8016f94 <memcpy>
 8017c5c:	89a3      	ldrh	r3, [r4, #12]
 8017c5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017c66:	81a3      	strh	r3, [r4, #12]
 8017c68:	6126      	str	r6, [r4, #16]
 8017c6a:	6165      	str	r5, [r4, #20]
 8017c6c:	444e      	add	r6, r9
 8017c6e:	eba5 0509 	sub.w	r5, r5, r9
 8017c72:	6026      	str	r6, [r4, #0]
 8017c74:	60a5      	str	r5, [r4, #8]
 8017c76:	463e      	mov	r6, r7
 8017c78:	42be      	cmp	r6, r7
 8017c7a:	d900      	bls.n	8017c7e <__ssputs_r+0x86>
 8017c7c:	463e      	mov	r6, r7
 8017c7e:	4632      	mov	r2, r6
 8017c80:	6820      	ldr	r0, [r4, #0]
 8017c82:	4641      	mov	r1, r8
 8017c84:	f7ff f994 	bl	8016fb0 <memmove>
 8017c88:	68a3      	ldr	r3, [r4, #8]
 8017c8a:	6822      	ldr	r2, [r4, #0]
 8017c8c:	1b9b      	subs	r3, r3, r6
 8017c8e:	4432      	add	r2, r6
 8017c90:	60a3      	str	r3, [r4, #8]
 8017c92:	6022      	str	r2, [r4, #0]
 8017c94:	2000      	movs	r0, #0
 8017c96:	e7db      	b.n	8017c50 <__ssputs_r+0x58>
 8017c98:	462a      	mov	r2, r5
 8017c9a:	f000 fcb5 	bl	8018608 <_realloc_r>
 8017c9e:	4606      	mov	r6, r0
 8017ca0:	2800      	cmp	r0, #0
 8017ca2:	d1e1      	bne.n	8017c68 <__ssputs_r+0x70>
 8017ca4:	6921      	ldr	r1, [r4, #16]
 8017ca6:	4650      	mov	r0, sl
 8017ca8:	f7ff fefc 	bl	8017aa4 <_free_r>
 8017cac:	e7c7      	b.n	8017c3e <__ssputs_r+0x46>
	...

08017cb0 <_svfiprintf_r>:
 8017cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cb4:	4698      	mov	r8, r3
 8017cb6:	898b      	ldrh	r3, [r1, #12]
 8017cb8:	061b      	lsls	r3, r3, #24
 8017cba:	b09d      	sub	sp, #116	; 0x74
 8017cbc:	4607      	mov	r7, r0
 8017cbe:	460d      	mov	r5, r1
 8017cc0:	4614      	mov	r4, r2
 8017cc2:	d50e      	bpl.n	8017ce2 <_svfiprintf_r+0x32>
 8017cc4:	690b      	ldr	r3, [r1, #16]
 8017cc6:	b963      	cbnz	r3, 8017ce2 <_svfiprintf_r+0x32>
 8017cc8:	2140      	movs	r1, #64	; 0x40
 8017cca:	f7ff ff3b 	bl	8017b44 <_malloc_r>
 8017cce:	6028      	str	r0, [r5, #0]
 8017cd0:	6128      	str	r0, [r5, #16]
 8017cd2:	b920      	cbnz	r0, 8017cde <_svfiprintf_r+0x2e>
 8017cd4:	230c      	movs	r3, #12
 8017cd6:	603b      	str	r3, [r7, #0]
 8017cd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017cdc:	e0d1      	b.n	8017e82 <_svfiprintf_r+0x1d2>
 8017cde:	2340      	movs	r3, #64	; 0x40
 8017ce0:	616b      	str	r3, [r5, #20]
 8017ce2:	2300      	movs	r3, #0
 8017ce4:	9309      	str	r3, [sp, #36]	; 0x24
 8017ce6:	2320      	movs	r3, #32
 8017ce8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017cec:	f8cd 800c 	str.w	r8, [sp, #12]
 8017cf0:	2330      	movs	r3, #48	; 0x30
 8017cf2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8017e9c <_svfiprintf_r+0x1ec>
 8017cf6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017cfa:	f04f 0901 	mov.w	r9, #1
 8017cfe:	4623      	mov	r3, r4
 8017d00:	469a      	mov	sl, r3
 8017d02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017d06:	b10a      	cbz	r2, 8017d0c <_svfiprintf_r+0x5c>
 8017d08:	2a25      	cmp	r2, #37	; 0x25
 8017d0a:	d1f9      	bne.n	8017d00 <_svfiprintf_r+0x50>
 8017d0c:	ebba 0b04 	subs.w	fp, sl, r4
 8017d10:	d00b      	beq.n	8017d2a <_svfiprintf_r+0x7a>
 8017d12:	465b      	mov	r3, fp
 8017d14:	4622      	mov	r2, r4
 8017d16:	4629      	mov	r1, r5
 8017d18:	4638      	mov	r0, r7
 8017d1a:	f7ff ff6d 	bl	8017bf8 <__ssputs_r>
 8017d1e:	3001      	adds	r0, #1
 8017d20:	f000 80aa 	beq.w	8017e78 <_svfiprintf_r+0x1c8>
 8017d24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017d26:	445a      	add	r2, fp
 8017d28:	9209      	str	r2, [sp, #36]	; 0x24
 8017d2a:	f89a 3000 	ldrb.w	r3, [sl]
 8017d2e:	2b00      	cmp	r3, #0
 8017d30:	f000 80a2 	beq.w	8017e78 <_svfiprintf_r+0x1c8>
 8017d34:	2300      	movs	r3, #0
 8017d36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017d3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017d3e:	f10a 0a01 	add.w	sl, sl, #1
 8017d42:	9304      	str	r3, [sp, #16]
 8017d44:	9307      	str	r3, [sp, #28]
 8017d46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017d4a:	931a      	str	r3, [sp, #104]	; 0x68
 8017d4c:	4654      	mov	r4, sl
 8017d4e:	2205      	movs	r2, #5
 8017d50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d54:	4851      	ldr	r0, [pc, #324]	; (8017e9c <_svfiprintf_r+0x1ec>)
 8017d56:	f7e8 fa53 	bl	8000200 <memchr>
 8017d5a:	9a04      	ldr	r2, [sp, #16]
 8017d5c:	b9d8      	cbnz	r0, 8017d96 <_svfiprintf_r+0xe6>
 8017d5e:	06d0      	lsls	r0, r2, #27
 8017d60:	bf44      	itt	mi
 8017d62:	2320      	movmi	r3, #32
 8017d64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017d68:	0711      	lsls	r1, r2, #28
 8017d6a:	bf44      	itt	mi
 8017d6c:	232b      	movmi	r3, #43	; 0x2b
 8017d6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017d72:	f89a 3000 	ldrb.w	r3, [sl]
 8017d76:	2b2a      	cmp	r3, #42	; 0x2a
 8017d78:	d015      	beq.n	8017da6 <_svfiprintf_r+0xf6>
 8017d7a:	9a07      	ldr	r2, [sp, #28]
 8017d7c:	4654      	mov	r4, sl
 8017d7e:	2000      	movs	r0, #0
 8017d80:	f04f 0c0a 	mov.w	ip, #10
 8017d84:	4621      	mov	r1, r4
 8017d86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017d8a:	3b30      	subs	r3, #48	; 0x30
 8017d8c:	2b09      	cmp	r3, #9
 8017d8e:	d94e      	bls.n	8017e2e <_svfiprintf_r+0x17e>
 8017d90:	b1b0      	cbz	r0, 8017dc0 <_svfiprintf_r+0x110>
 8017d92:	9207      	str	r2, [sp, #28]
 8017d94:	e014      	b.n	8017dc0 <_svfiprintf_r+0x110>
 8017d96:	eba0 0308 	sub.w	r3, r0, r8
 8017d9a:	fa09 f303 	lsl.w	r3, r9, r3
 8017d9e:	4313      	orrs	r3, r2
 8017da0:	9304      	str	r3, [sp, #16]
 8017da2:	46a2      	mov	sl, r4
 8017da4:	e7d2      	b.n	8017d4c <_svfiprintf_r+0x9c>
 8017da6:	9b03      	ldr	r3, [sp, #12]
 8017da8:	1d19      	adds	r1, r3, #4
 8017daa:	681b      	ldr	r3, [r3, #0]
 8017dac:	9103      	str	r1, [sp, #12]
 8017dae:	2b00      	cmp	r3, #0
 8017db0:	bfbb      	ittet	lt
 8017db2:	425b      	neglt	r3, r3
 8017db4:	f042 0202 	orrlt.w	r2, r2, #2
 8017db8:	9307      	strge	r3, [sp, #28]
 8017dba:	9307      	strlt	r3, [sp, #28]
 8017dbc:	bfb8      	it	lt
 8017dbe:	9204      	strlt	r2, [sp, #16]
 8017dc0:	7823      	ldrb	r3, [r4, #0]
 8017dc2:	2b2e      	cmp	r3, #46	; 0x2e
 8017dc4:	d10c      	bne.n	8017de0 <_svfiprintf_r+0x130>
 8017dc6:	7863      	ldrb	r3, [r4, #1]
 8017dc8:	2b2a      	cmp	r3, #42	; 0x2a
 8017dca:	d135      	bne.n	8017e38 <_svfiprintf_r+0x188>
 8017dcc:	9b03      	ldr	r3, [sp, #12]
 8017dce:	1d1a      	adds	r2, r3, #4
 8017dd0:	681b      	ldr	r3, [r3, #0]
 8017dd2:	9203      	str	r2, [sp, #12]
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	bfb8      	it	lt
 8017dd8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8017ddc:	3402      	adds	r4, #2
 8017dde:	9305      	str	r3, [sp, #20]
 8017de0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8017eac <_svfiprintf_r+0x1fc>
 8017de4:	7821      	ldrb	r1, [r4, #0]
 8017de6:	2203      	movs	r2, #3
 8017de8:	4650      	mov	r0, sl
 8017dea:	f7e8 fa09 	bl	8000200 <memchr>
 8017dee:	b140      	cbz	r0, 8017e02 <_svfiprintf_r+0x152>
 8017df0:	2340      	movs	r3, #64	; 0x40
 8017df2:	eba0 000a 	sub.w	r0, r0, sl
 8017df6:	fa03 f000 	lsl.w	r0, r3, r0
 8017dfa:	9b04      	ldr	r3, [sp, #16]
 8017dfc:	4303      	orrs	r3, r0
 8017dfe:	3401      	adds	r4, #1
 8017e00:	9304      	str	r3, [sp, #16]
 8017e02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e06:	4826      	ldr	r0, [pc, #152]	; (8017ea0 <_svfiprintf_r+0x1f0>)
 8017e08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017e0c:	2206      	movs	r2, #6
 8017e0e:	f7e8 f9f7 	bl	8000200 <memchr>
 8017e12:	2800      	cmp	r0, #0
 8017e14:	d038      	beq.n	8017e88 <_svfiprintf_r+0x1d8>
 8017e16:	4b23      	ldr	r3, [pc, #140]	; (8017ea4 <_svfiprintf_r+0x1f4>)
 8017e18:	bb1b      	cbnz	r3, 8017e62 <_svfiprintf_r+0x1b2>
 8017e1a:	9b03      	ldr	r3, [sp, #12]
 8017e1c:	3307      	adds	r3, #7
 8017e1e:	f023 0307 	bic.w	r3, r3, #7
 8017e22:	3308      	adds	r3, #8
 8017e24:	9303      	str	r3, [sp, #12]
 8017e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e28:	4433      	add	r3, r6
 8017e2a:	9309      	str	r3, [sp, #36]	; 0x24
 8017e2c:	e767      	b.n	8017cfe <_svfiprintf_r+0x4e>
 8017e2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8017e32:	460c      	mov	r4, r1
 8017e34:	2001      	movs	r0, #1
 8017e36:	e7a5      	b.n	8017d84 <_svfiprintf_r+0xd4>
 8017e38:	2300      	movs	r3, #0
 8017e3a:	3401      	adds	r4, #1
 8017e3c:	9305      	str	r3, [sp, #20]
 8017e3e:	4619      	mov	r1, r3
 8017e40:	f04f 0c0a 	mov.w	ip, #10
 8017e44:	4620      	mov	r0, r4
 8017e46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017e4a:	3a30      	subs	r2, #48	; 0x30
 8017e4c:	2a09      	cmp	r2, #9
 8017e4e:	d903      	bls.n	8017e58 <_svfiprintf_r+0x1a8>
 8017e50:	2b00      	cmp	r3, #0
 8017e52:	d0c5      	beq.n	8017de0 <_svfiprintf_r+0x130>
 8017e54:	9105      	str	r1, [sp, #20]
 8017e56:	e7c3      	b.n	8017de0 <_svfiprintf_r+0x130>
 8017e58:	fb0c 2101 	mla	r1, ip, r1, r2
 8017e5c:	4604      	mov	r4, r0
 8017e5e:	2301      	movs	r3, #1
 8017e60:	e7f0      	b.n	8017e44 <_svfiprintf_r+0x194>
 8017e62:	ab03      	add	r3, sp, #12
 8017e64:	9300      	str	r3, [sp, #0]
 8017e66:	462a      	mov	r2, r5
 8017e68:	4b0f      	ldr	r3, [pc, #60]	; (8017ea8 <_svfiprintf_r+0x1f8>)
 8017e6a:	a904      	add	r1, sp, #16
 8017e6c:	4638      	mov	r0, r7
 8017e6e:	f3af 8000 	nop.w
 8017e72:	1c42      	adds	r2, r0, #1
 8017e74:	4606      	mov	r6, r0
 8017e76:	d1d6      	bne.n	8017e26 <_svfiprintf_r+0x176>
 8017e78:	89ab      	ldrh	r3, [r5, #12]
 8017e7a:	065b      	lsls	r3, r3, #25
 8017e7c:	f53f af2c 	bmi.w	8017cd8 <_svfiprintf_r+0x28>
 8017e80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017e82:	b01d      	add	sp, #116	; 0x74
 8017e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e88:	ab03      	add	r3, sp, #12
 8017e8a:	9300      	str	r3, [sp, #0]
 8017e8c:	462a      	mov	r2, r5
 8017e8e:	4b06      	ldr	r3, [pc, #24]	; (8017ea8 <_svfiprintf_r+0x1f8>)
 8017e90:	a904      	add	r1, sp, #16
 8017e92:	4638      	mov	r0, r7
 8017e94:	f000 f9d4 	bl	8018240 <_printf_i>
 8017e98:	e7eb      	b.n	8017e72 <_svfiprintf_r+0x1c2>
 8017e9a:	bf00      	nop
 8017e9c:	08020580 	.word	0x08020580
 8017ea0:	0802058a 	.word	0x0802058a
 8017ea4:	00000000 	.word	0x00000000
 8017ea8:	08017bf9 	.word	0x08017bf9
 8017eac:	08020586 	.word	0x08020586

08017eb0 <__sfputc_r>:
 8017eb0:	6893      	ldr	r3, [r2, #8]
 8017eb2:	3b01      	subs	r3, #1
 8017eb4:	2b00      	cmp	r3, #0
 8017eb6:	b410      	push	{r4}
 8017eb8:	6093      	str	r3, [r2, #8]
 8017eba:	da08      	bge.n	8017ece <__sfputc_r+0x1e>
 8017ebc:	6994      	ldr	r4, [r2, #24]
 8017ebe:	42a3      	cmp	r3, r4
 8017ec0:	db01      	blt.n	8017ec6 <__sfputc_r+0x16>
 8017ec2:	290a      	cmp	r1, #10
 8017ec4:	d103      	bne.n	8017ece <__sfputc_r+0x1e>
 8017ec6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017eca:	f7ff bacf 	b.w	801746c <__swbuf_r>
 8017ece:	6813      	ldr	r3, [r2, #0]
 8017ed0:	1c58      	adds	r0, r3, #1
 8017ed2:	6010      	str	r0, [r2, #0]
 8017ed4:	7019      	strb	r1, [r3, #0]
 8017ed6:	4608      	mov	r0, r1
 8017ed8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017edc:	4770      	bx	lr

08017ede <__sfputs_r>:
 8017ede:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ee0:	4606      	mov	r6, r0
 8017ee2:	460f      	mov	r7, r1
 8017ee4:	4614      	mov	r4, r2
 8017ee6:	18d5      	adds	r5, r2, r3
 8017ee8:	42ac      	cmp	r4, r5
 8017eea:	d101      	bne.n	8017ef0 <__sfputs_r+0x12>
 8017eec:	2000      	movs	r0, #0
 8017eee:	e007      	b.n	8017f00 <__sfputs_r+0x22>
 8017ef0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ef4:	463a      	mov	r2, r7
 8017ef6:	4630      	mov	r0, r6
 8017ef8:	f7ff ffda 	bl	8017eb0 <__sfputc_r>
 8017efc:	1c43      	adds	r3, r0, #1
 8017efe:	d1f3      	bne.n	8017ee8 <__sfputs_r+0xa>
 8017f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017f04 <_vfiprintf_r>:
 8017f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f08:	460d      	mov	r5, r1
 8017f0a:	b09d      	sub	sp, #116	; 0x74
 8017f0c:	4614      	mov	r4, r2
 8017f0e:	4698      	mov	r8, r3
 8017f10:	4606      	mov	r6, r0
 8017f12:	b118      	cbz	r0, 8017f1c <_vfiprintf_r+0x18>
 8017f14:	6983      	ldr	r3, [r0, #24]
 8017f16:	b90b      	cbnz	r3, 8017f1c <_vfiprintf_r+0x18>
 8017f18:	f7ff fca6 	bl	8017868 <__sinit>
 8017f1c:	4b89      	ldr	r3, [pc, #548]	; (8018144 <_vfiprintf_r+0x240>)
 8017f1e:	429d      	cmp	r5, r3
 8017f20:	d11b      	bne.n	8017f5a <_vfiprintf_r+0x56>
 8017f22:	6875      	ldr	r5, [r6, #4]
 8017f24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017f26:	07d9      	lsls	r1, r3, #31
 8017f28:	d405      	bmi.n	8017f36 <_vfiprintf_r+0x32>
 8017f2a:	89ab      	ldrh	r3, [r5, #12]
 8017f2c:	059a      	lsls	r2, r3, #22
 8017f2e:	d402      	bmi.n	8017f36 <_vfiprintf_r+0x32>
 8017f30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017f32:	f7ff fd49 	bl	80179c8 <__retarget_lock_acquire_recursive>
 8017f36:	89ab      	ldrh	r3, [r5, #12]
 8017f38:	071b      	lsls	r3, r3, #28
 8017f3a:	d501      	bpl.n	8017f40 <_vfiprintf_r+0x3c>
 8017f3c:	692b      	ldr	r3, [r5, #16]
 8017f3e:	b9eb      	cbnz	r3, 8017f7c <_vfiprintf_r+0x78>
 8017f40:	4629      	mov	r1, r5
 8017f42:	4630      	mov	r0, r6
 8017f44:	f7ff fae4 	bl	8017510 <__swsetup_r>
 8017f48:	b1c0      	cbz	r0, 8017f7c <_vfiprintf_r+0x78>
 8017f4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017f4c:	07dc      	lsls	r4, r3, #31
 8017f4e:	d50e      	bpl.n	8017f6e <_vfiprintf_r+0x6a>
 8017f50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017f54:	b01d      	add	sp, #116	; 0x74
 8017f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f5a:	4b7b      	ldr	r3, [pc, #492]	; (8018148 <_vfiprintf_r+0x244>)
 8017f5c:	429d      	cmp	r5, r3
 8017f5e:	d101      	bne.n	8017f64 <_vfiprintf_r+0x60>
 8017f60:	68b5      	ldr	r5, [r6, #8]
 8017f62:	e7df      	b.n	8017f24 <_vfiprintf_r+0x20>
 8017f64:	4b79      	ldr	r3, [pc, #484]	; (801814c <_vfiprintf_r+0x248>)
 8017f66:	429d      	cmp	r5, r3
 8017f68:	bf08      	it	eq
 8017f6a:	68f5      	ldreq	r5, [r6, #12]
 8017f6c:	e7da      	b.n	8017f24 <_vfiprintf_r+0x20>
 8017f6e:	89ab      	ldrh	r3, [r5, #12]
 8017f70:	0598      	lsls	r0, r3, #22
 8017f72:	d4ed      	bmi.n	8017f50 <_vfiprintf_r+0x4c>
 8017f74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017f76:	f7ff fd28 	bl	80179ca <__retarget_lock_release_recursive>
 8017f7a:	e7e9      	b.n	8017f50 <_vfiprintf_r+0x4c>
 8017f7c:	2300      	movs	r3, #0
 8017f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8017f80:	2320      	movs	r3, #32
 8017f82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017f86:	f8cd 800c 	str.w	r8, [sp, #12]
 8017f8a:	2330      	movs	r3, #48	; 0x30
 8017f8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8018150 <_vfiprintf_r+0x24c>
 8017f90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017f94:	f04f 0901 	mov.w	r9, #1
 8017f98:	4623      	mov	r3, r4
 8017f9a:	469a      	mov	sl, r3
 8017f9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017fa0:	b10a      	cbz	r2, 8017fa6 <_vfiprintf_r+0xa2>
 8017fa2:	2a25      	cmp	r2, #37	; 0x25
 8017fa4:	d1f9      	bne.n	8017f9a <_vfiprintf_r+0x96>
 8017fa6:	ebba 0b04 	subs.w	fp, sl, r4
 8017faa:	d00b      	beq.n	8017fc4 <_vfiprintf_r+0xc0>
 8017fac:	465b      	mov	r3, fp
 8017fae:	4622      	mov	r2, r4
 8017fb0:	4629      	mov	r1, r5
 8017fb2:	4630      	mov	r0, r6
 8017fb4:	f7ff ff93 	bl	8017ede <__sfputs_r>
 8017fb8:	3001      	adds	r0, #1
 8017fba:	f000 80aa 	beq.w	8018112 <_vfiprintf_r+0x20e>
 8017fbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017fc0:	445a      	add	r2, fp
 8017fc2:	9209      	str	r2, [sp, #36]	; 0x24
 8017fc4:	f89a 3000 	ldrb.w	r3, [sl]
 8017fc8:	2b00      	cmp	r3, #0
 8017fca:	f000 80a2 	beq.w	8018112 <_vfiprintf_r+0x20e>
 8017fce:	2300      	movs	r3, #0
 8017fd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017fd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017fd8:	f10a 0a01 	add.w	sl, sl, #1
 8017fdc:	9304      	str	r3, [sp, #16]
 8017fde:	9307      	str	r3, [sp, #28]
 8017fe0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017fe4:	931a      	str	r3, [sp, #104]	; 0x68
 8017fe6:	4654      	mov	r4, sl
 8017fe8:	2205      	movs	r2, #5
 8017fea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017fee:	4858      	ldr	r0, [pc, #352]	; (8018150 <_vfiprintf_r+0x24c>)
 8017ff0:	f7e8 f906 	bl	8000200 <memchr>
 8017ff4:	9a04      	ldr	r2, [sp, #16]
 8017ff6:	b9d8      	cbnz	r0, 8018030 <_vfiprintf_r+0x12c>
 8017ff8:	06d1      	lsls	r1, r2, #27
 8017ffa:	bf44      	itt	mi
 8017ffc:	2320      	movmi	r3, #32
 8017ffe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018002:	0713      	lsls	r3, r2, #28
 8018004:	bf44      	itt	mi
 8018006:	232b      	movmi	r3, #43	; 0x2b
 8018008:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801800c:	f89a 3000 	ldrb.w	r3, [sl]
 8018010:	2b2a      	cmp	r3, #42	; 0x2a
 8018012:	d015      	beq.n	8018040 <_vfiprintf_r+0x13c>
 8018014:	9a07      	ldr	r2, [sp, #28]
 8018016:	4654      	mov	r4, sl
 8018018:	2000      	movs	r0, #0
 801801a:	f04f 0c0a 	mov.w	ip, #10
 801801e:	4621      	mov	r1, r4
 8018020:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018024:	3b30      	subs	r3, #48	; 0x30
 8018026:	2b09      	cmp	r3, #9
 8018028:	d94e      	bls.n	80180c8 <_vfiprintf_r+0x1c4>
 801802a:	b1b0      	cbz	r0, 801805a <_vfiprintf_r+0x156>
 801802c:	9207      	str	r2, [sp, #28]
 801802e:	e014      	b.n	801805a <_vfiprintf_r+0x156>
 8018030:	eba0 0308 	sub.w	r3, r0, r8
 8018034:	fa09 f303 	lsl.w	r3, r9, r3
 8018038:	4313      	orrs	r3, r2
 801803a:	9304      	str	r3, [sp, #16]
 801803c:	46a2      	mov	sl, r4
 801803e:	e7d2      	b.n	8017fe6 <_vfiprintf_r+0xe2>
 8018040:	9b03      	ldr	r3, [sp, #12]
 8018042:	1d19      	adds	r1, r3, #4
 8018044:	681b      	ldr	r3, [r3, #0]
 8018046:	9103      	str	r1, [sp, #12]
 8018048:	2b00      	cmp	r3, #0
 801804a:	bfbb      	ittet	lt
 801804c:	425b      	neglt	r3, r3
 801804e:	f042 0202 	orrlt.w	r2, r2, #2
 8018052:	9307      	strge	r3, [sp, #28]
 8018054:	9307      	strlt	r3, [sp, #28]
 8018056:	bfb8      	it	lt
 8018058:	9204      	strlt	r2, [sp, #16]
 801805a:	7823      	ldrb	r3, [r4, #0]
 801805c:	2b2e      	cmp	r3, #46	; 0x2e
 801805e:	d10c      	bne.n	801807a <_vfiprintf_r+0x176>
 8018060:	7863      	ldrb	r3, [r4, #1]
 8018062:	2b2a      	cmp	r3, #42	; 0x2a
 8018064:	d135      	bne.n	80180d2 <_vfiprintf_r+0x1ce>
 8018066:	9b03      	ldr	r3, [sp, #12]
 8018068:	1d1a      	adds	r2, r3, #4
 801806a:	681b      	ldr	r3, [r3, #0]
 801806c:	9203      	str	r2, [sp, #12]
 801806e:	2b00      	cmp	r3, #0
 8018070:	bfb8      	it	lt
 8018072:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8018076:	3402      	adds	r4, #2
 8018078:	9305      	str	r3, [sp, #20]
 801807a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8018160 <_vfiprintf_r+0x25c>
 801807e:	7821      	ldrb	r1, [r4, #0]
 8018080:	2203      	movs	r2, #3
 8018082:	4650      	mov	r0, sl
 8018084:	f7e8 f8bc 	bl	8000200 <memchr>
 8018088:	b140      	cbz	r0, 801809c <_vfiprintf_r+0x198>
 801808a:	2340      	movs	r3, #64	; 0x40
 801808c:	eba0 000a 	sub.w	r0, r0, sl
 8018090:	fa03 f000 	lsl.w	r0, r3, r0
 8018094:	9b04      	ldr	r3, [sp, #16]
 8018096:	4303      	orrs	r3, r0
 8018098:	3401      	adds	r4, #1
 801809a:	9304      	str	r3, [sp, #16]
 801809c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80180a0:	482c      	ldr	r0, [pc, #176]	; (8018154 <_vfiprintf_r+0x250>)
 80180a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80180a6:	2206      	movs	r2, #6
 80180a8:	f7e8 f8aa 	bl	8000200 <memchr>
 80180ac:	2800      	cmp	r0, #0
 80180ae:	d03f      	beq.n	8018130 <_vfiprintf_r+0x22c>
 80180b0:	4b29      	ldr	r3, [pc, #164]	; (8018158 <_vfiprintf_r+0x254>)
 80180b2:	bb1b      	cbnz	r3, 80180fc <_vfiprintf_r+0x1f8>
 80180b4:	9b03      	ldr	r3, [sp, #12]
 80180b6:	3307      	adds	r3, #7
 80180b8:	f023 0307 	bic.w	r3, r3, #7
 80180bc:	3308      	adds	r3, #8
 80180be:	9303      	str	r3, [sp, #12]
 80180c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80180c2:	443b      	add	r3, r7
 80180c4:	9309      	str	r3, [sp, #36]	; 0x24
 80180c6:	e767      	b.n	8017f98 <_vfiprintf_r+0x94>
 80180c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80180cc:	460c      	mov	r4, r1
 80180ce:	2001      	movs	r0, #1
 80180d0:	e7a5      	b.n	801801e <_vfiprintf_r+0x11a>
 80180d2:	2300      	movs	r3, #0
 80180d4:	3401      	adds	r4, #1
 80180d6:	9305      	str	r3, [sp, #20]
 80180d8:	4619      	mov	r1, r3
 80180da:	f04f 0c0a 	mov.w	ip, #10
 80180de:	4620      	mov	r0, r4
 80180e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80180e4:	3a30      	subs	r2, #48	; 0x30
 80180e6:	2a09      	cmp	r2, #9
 80180e8:	d903      	bls.n	80180f2 <_vfiprintf_r+0x1ee>
 80180ea:	2b00      	cmp	r3, #0
 80180ec:	d0c5      	beq.n	801807a <_vfiprintf_r+0x176>
 80180ee:	9105      	str	r1, [sp, #20]
 80180f0:	e7c3      	b.n	801807a <_vfiprintf_r+0x176>
 80180f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80180f6:	4604      	mov	r4, r0
 80180f8:	2301      	movs	r3, #1
 80180fa:	e7f0      	b.n	80180de <_vfiprintf_r+0x1da>
 80180fc:	ab03      	add	r3, sp, #12
 80180fe:	9300      	str	r3, [sp, #0]
 8018100:	462a      	mov	r2, r5
 8018102:	4b16      	ldr	r3, [pc, #88]	; (801815c <_vfiprintf_r+0x258>)
 8018104:	a904      	add	r1, sp, #16
 8018106:	4630      	mov	r0, r6
 8018108:	f3af 8000 	nop.w
 801810c:	4607      	mov	r7, r0
 801810e:	1c78      	adds	r0, r7, #1
 8018110:	d1d6      	bne.n	80180c0 <_vfiprintf_r+0x1bc>
 8018112:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018114:	07d9      	lsls	r1, r3, #31
 8018116:	d405      	bmi.n	8018124 <_vfiprintf_r+0x220>
 8018118:	89ab      	ldrh	r3, [r5, #12]
 801811a:	059a      	lsls	r2, r3, #22
 801811c:	d402      	bmi.n	8018124 <_vfiprintf_r+0x220>
 801811e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018120:	f7ff fc53 	bl	80179ca <__retarget_lock_release_recursive>
 8018124:	89ab      	ldrh	r3, [r5, #12]
 8018126:	065b      	lsls	r3, r3, #25
 8018128:	f53f af12 	bmi.w	8017f50 <_vfiprintf_r+0x4c>
 801812c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801812e:	e711      	b.n	8017f54 <_vfiprintf_r+0x50>
 8018130:	ab03      	add	r3, sp, #12
 8018132:	9300      	str	r3, [sp, #0]
 8018134:	462a      	mov	r2, r5
 8018136:	4b09      	ldr	r3, [pc, #36]	; (801815c <_vfiprintf_r+0x258>)
 8018138:	a904      	add	r1, sp, #16
 801813a:	4630      	mov	r0, r6
 801813c:	f000 f880 	bl	8018240 <_printf_i>
 8018140:	e7e4      	b.n	801810c <_vfiprintf_r+0x208>
 8018142:	bf00      	nop
 8018144:	08020540 	.word	0x08020540
 8018148:	08020560 	.word	0x08020560
 801814c:	08020520 	.word	0x08020520
 8018150:	08020580 	.word	0x08020580
 8018154:	0802058a 	.word	0x0802058a
 8018158:	00000000 	.word	0x00000000
 801815c:	08017edf 	.word	0x08017edf
 8018160:	08020586 	.word	0x08020586

08018164 <_printf_common>:
 8018164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018168:	4616      	mov	r6, r2
 801816a:	4699      	mov	r9, r3
 801816c:	688a      	ldr	r2, [r1, #8]
 801816e:	690b      	ldr	r3, [r1, #16]
 8018170:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018174:	4293      	cmp	r3, r2
 8018176:	bfb8      	it	lt
 8018178:	4613      	movlt	r3, r2
 801817a:	6033      	str	r3, [r6, #0]
 801817c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018180:	4607      	mov	r7, r0
 8018182:	460c      	mov	r4, r1
 8018184:	b10a      	cbz	r2, 801818a <_printf_common+0x26>
 8018186:	3301      	adds	r3, #1
 8018188:	6033      	str	r3, [r6, #0]
 801818a:	6823      	ldr	r3, [r4, #0]
 801818c:	0699      	lsls	r1, r3, #26
 801818e:	bf42      	ittt	mi
 8018190:	6833      	ldrmi	r3, [r6, #0]
 8018192:	3302      	addmi	r3, #2
 8018194:	6033      	strmi	r3, [r6, #0]
 8018196:	6825      	ldr	r5, [r4, #0]
 8018198:	f015 0506 	ands.w	r5, r5, #6
 801819c:	d106      	bne.n	80181ac <_printf_common+0x48>
 801819e:	f104 0a19 	add.w	sl, r4, #25
 80181a2:	68e3      	ldr	r3, [r4, #12]
 80181a4:	6832      	ldr	r2, [r6, #0]
 80181a6:	1a9b      	subs	r3, r3, r2
 80181a8:	42ab      	cmp	r3, r5
 80181aa:	dc26      	bgt.n	80181fa <_printf_common+0x96>
 80181ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80181b0:	1e13      	subs	r3, r2, #0
 80181b2:	6822      	ldr	r2, [r4, #0]
 80181b4:	bf18      	it	ne
 80181b6:	2301      	movne	r3, #1
 80181b8:	0692      	lsls	r2, r2, #26
 80181ba:	d42b      	bmi.n	8018214 <_printf_common+0xb0>
 80181bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80181c0:	4649      	mov	r1, r9
 80181c2:	4638      	mov	r0, r7
 80181c4:	47c0      	blx	r8
 80181c6:	3001      	adds	r0, #1
 80181c8:	d01e      	beq.n	8018208 <_printf_common+0xa4>
 80181ca:	6823      	ldr	r3, [r4, #0]
 80181cc:	68e5      	ldr	r5, [r4, #12]
 80181ce:	6832      	ldr	r2, [r6, #0]
 80181d0:	f003 0306 	and.w	r3, r3, #6
 80181d4:	2b04      	cmp	r3, #4
 80181d6:	bf08      	it	eq
 80181d8:	1aad      	subeq	r5, r5, r2
 80181da:	68a3      	ldr	r3, [r4, #8]
 80181dc:	6922      	ldr	r2, [r4, #16]
 80181de:	bf0c      	ite	eq
 80181e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80181e4:	2500      	movne	r5, #0
 80181e6:	4293      	cmp	r3, r2
 80181e8:	bfc4      	itt	gt
 80181ea:	1a9b      	subgt	r3, r3, r2
 80181ec:	18ed      	addgt	r5, r5, r3
 80181ee:	2600      	movs	r6, #0
 80181f0:	341a      	adds	r4, #26
 80181f2:	42b5      	cmp	r5, r6
 80181f4:	d11a      	bne.n	801822c <_printf_common+0xc8>
 80181f6:	2000      	movs	r0, #0
 80181f8:	e008      	b.n	801820c <_printf_common+0xa8>
 80181fa:	2301      	movs	r3, #1
 80181fc:	4652      	mov	r2, sl
 80181fe:	4649      	mov	r1, r9
 8018200:	4638      	mov	r0, r7
 8018202:	47c0      	blx	r8
 8018204:	3001      	adds	r0, #1
 8018206:	d103      	bne.n	8018210 <_printf_common+0xac>
 8018208:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801820c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018210:	3501      	adds	r5, #1
 8018212:	e7c6      	b.n	80181a2 <_printf_common+0x3e>
 8018214:	18e1      	adds	r1, r4, r3
 8018216:	1c5a      	adds	r2, r3, #1
 8018218:	2030      	movs	r0, #48	; 0x30
 801821a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801821e:	4422      	add	r2, r4
 8018220:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018224:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018228:	3302      	adds	r3, #2
 801822a:	e7c7      	b.n	80181bc <_printf_common+0x58>
 801822c:	2301      	movs	r3, #1
 801822e:	4622      	mov	r2, r4
 8018230:	4649      	mov	r1, r9
 8018232:	4638      	mov	r0, r7
 8018234:	47c0      	blx	r8
 8018236:	3001      	adds	r0, #1
 8018238:	d0e6      	beq.n	8018208 <_printf_common+0xa4>
 801823a:	3601      	adds	r6, #1
 801823c:	e7d9      	b.n	80181f2 <_printf_common+0x8e>
	...

08018240 <_printf_i>:
 8018240:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018244:	460c      	mov	r4, r1
 8018246:	4691      	mov	r9, r2
 8018248:	7e27      	ldrb	r7, [r4, #24]
 801824a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801824c:	2f78      	cmp	r7, #120	; 0x78
 801824e:	4680      	mov	r8, r0
 8018250:	469a      	mov	sl, r3
 8018252:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018256:	d807      	bhi.n	8018268 <_printf_i+0x28>
 8018258:	2f62      	cmp	r7, #98	; 0x62
 801825a:	d80a      	bhi.n	8018272 <_printf_i+0x32>
 801825c:	2f00      	cmp	r7, #0
 801825e:	f000 80d8 	beq.w	8018412 <_printf_i+0x1d2>
 8018262:	2f58      	cmp	r7, #88	; 0x58
 8018264:	f000 80a3 	beq.w	80183ae <_printf_i+0x16e>
 8018268:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801826c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018270:	e03a      	b.n	80182e8 <_printf_i+0xa8>
 8018272:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018276:	2b15      	cmp	r3, #21
 8018278:	d8f6      	bhi.n	8018268 <_printf_i+0x28>
 801827a:	a001      	add	r0, pc, #4	; (adr r0, 8018280 <_printf_i+0x40>)
 801827c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8018280:	080182d9 	.word	0x080182d9
 8018284:	080182ed 	.word	0x080182ed
 8018288:	08018269 	.word	0x08018269
 801828c:	08018269 	.word	0x08018269
 8018290:	08018269 	.word	0x08018269
 8018294:	08018269 	.word	0x08018269
 8018298:	080182ed 	.word	0x080182ed
 801829c:	08018269 	.word	0x08018269
 80182a0:	08018269 	.word	0x08018269
 80182a4:	08018269 	.word	0x08018269
 80182a8:	08018269 	.word	0x08018269
 80182ac:	080183f9 	.word	0x080183f9
 80182b0:	0801831d 	.word	0x0801831d
 80182b4:	080183db 	.word	0x080183db
 80182b8:	08018269 	.word	0x08018269
 80182bc:	08018269 	.word	0x08018269
 80182c0:	0801841b 	.word	0x0801841b
 80182c4:	08018269 	.word	0x08018269
 80182c8:	0801831d 	.word	0x0801831d
 80182cc:	08018269 	.word	0x08018269
 80182d0:	08018269 	.word	0x08018269
 80182d4:	080183e3 	.word	0x080183e3
 80182d8:	680b      	ldr	r3, [r1, #0]
 80182da:	1d1a      	adds	r2, r3, #4
 80182dc:	681b      	ldr	r3, [r3, #0]
 80182de:	600a      	str	r2, [r1, #0]
 80182e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80182e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80182e8:	2301      	movs	r3, #1
 80182ea:	e0a3      	b.n	8018434 <_printf_i+0x1f4>
 80182ec:	6825      	ldr	r5, [r4, #0]
 80182ee:	6808      	ldr	r0, [r1, #0]
 80182f0:	062e      	lsls	r6, r5, #24
 80182f2:	f100 0304 	add.w	r3, r0, #4
 80182f6:	d50a      	bpl.n	801830e <_printf_i+0xce>
 80182f8:	6805      	ldr	r5, [r0, #0]
 80182fa:	600b      	str	r3, [r1, #0]
 80182fc:	2d00      	cmp	r5, #0
 80182fe:	da03      	bge.n	8018308 <_printf_i+0xc8>
 8018300:	232d      	movs	r3, #45	; 0x2d
 8018302:	426d      	negs	r5, r5
 8018304:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018308:	485e      	ldr	r0, [pc, #376]	; (8018484 <_printf_i+0x244>)
 801830a:	230a      	movs	r3, #10
 801830c:	e019      	b.n	8018342 <_printf_i+0x102>
 801830e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8018312:	6805      	ldr	r5, [r0, #0]
 8018314:	600b      	str	r3, [r1, #0]
 8018316:	bf18      	it	ne
 8018318:	b22d      	sxthne	r5, r5
 801831a:	e7ef      	b.n	80182fc <_printf_i+0xbc>
 801831c:	680b      	ldr	r3, [r1, #0]
 801831e:	6825      	ldr	r5, [r4, #0]
 8018320:	1d18      	adds	r0, r3, #4
 8018322:	6008      	str	r0, [r1, #0]
 8018324:	0628      	lsls	r0, r5, #24
 8018326:	d501      	bpl.n	801832c <_printf_i+0xec>
 8018328:	681d      	ldr	r5, [r3, #0]
 801832a:	e002      	b.n	8018332 <_printf_i+0xf2>
 801832c:	0669      	lsls	r1, r5, #25
 801832e:	d5fb      	bpl.n	8018328 <_printf_i+0xe8>
 8018330:	881d      	ldrh	r5, [r3, #0]
 8018332:	4854      	ldr	r0, [pc, #336]	; (8018484 <_printf_i+0x244>)
 8018334:	2f6f      	cmp	r7, #111	; 0x6f
 8018336:	bf0c      	ite	eq
 8018338:	2308      	moveq	r3, #8
 801833a:	230a      	movne	r3, #10
 801833c:	2100      	movs	r1, #0
 801833e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018342:	6866      	ldr	r6, [r4, #4]
 8018344:	60a6      	str	r6, [r4, #8]
 8018346:	2e00      	cmp	r6, #0
 8018348:	bfa2      	ittt	ge
 801834a:	6821      	ldrge	r1, [r4, #0]
 801834c:	f021 0104 	bicge.w	r1, r1, #4
 8018350:	6021      	strge	r1, [r4, #0]
 8018352:	b90d      	cbnz	r5, 8018358 <_printf_i+0x118>
 8018354:	2e00      	cmp	r6, #0
 8018356:	d04d      	beq.n	80183f4 <_printf_i+0x1b4>
 8018358:	4616      	mov	r6, r2
 801835a:	fbb5 f1f3 	udiv	r1, r5, r3
 801835e:	fb03 5711 	mls	r7, r3, r1, r5
 8018362:	5dc7      	ldrb	r7, [r0, r7]
 8018364:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018368:	462f      	mov	r7, r5
 801836a:	42bb      	cmp	r3, r7
 801836c:	460d      	mov	r5, r1
 801836e:	d9f4      	bls.n	801835a <_printf_i+0x11a>
 8018370:	2b08      	cmp	r3, #8
 8018372:	d10b      	bne.n	801838c <_printf_i+0x14c>
 8018374:	6823      	ldr	r3, [r4, #0]
 8018376:	07df      	lsls	r7, r3, #31
 8018378:	d508      	bpl.n	801838c <_printf_i+0x14c>
 801837a:	6923      	ldr	r3, [r4, #16]
 801837c:	6861      	ldr	r1, [r4, #4]
 801837e:	4299      	cmp	r1, r3
 8018380:	bfde      	ittt	le
 8018382:	2330      	movle	r3, #48	; 0x30
 8018384:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018388:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 801838c:	1b92      	subs	r2, r2, r6
 801838e:	6122      	str	r2, [r4, #16]
 8018390:	f8cd a000 	str.w	sl, [sp]
 8018394:	464b      	mov	r3, r9
 8018396:	aa03      	add	r2, sp, #12
 8018398:	4621      	mov	r1, r4
 801839a:	4640      	mov	r0, r8
 801839c:	f7ff fee2 	bl	8018164 <_printf_common>
 80183a0:	3001      	adds	r0, #1
 80183a2:	d14c      	bne.n	801843e <_printf_i+0x1fe>
 80183a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80183a8:	b004      	add	sp, #16
 80183aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80183ae:	4835      	ldr	r0, [pc, #212]	; (8018484 <_printf_i+0x244>)
 80183b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80183b4:	6823      	ldr	r3, [r4, #0]
 80183b6:	680e      	ldr	r6, [r1, #0]
 80183b8:	061f      	lsls	r7, r3, #24
 80183ba:	f856 5b04 	ldr.w	r5, [r6], #4
 80183be:	600e      	str	r6, [r1, #0]
 80183c0:	d514      	bpl.n	80183ec <_printf_i+0x1ac>
 80183c2:	07d9      	lsls	r1, r3, #31
 80183c4:	bf44      	itt	mi
 80183c6:	f043 0320 	orrmi.w	r3, r3, #32
 80183ca:	6023      	strmi	r3, [r4, #0]
 80183cc:	b91d      	cbnz	r5, 80183d6 <_printf_i+0x196>
 80183ce:	6823      	ldr	r3, [r4, #0]
 80183d0:	f023 0320 	bic.w	r3, r3, #32
 80183d4:	6023      	str	r3, [r4, #0]
 80183d6:	2310      	movs	r3, #16
 80183d8:	e7b0      	b.n	801833c <_printf_i+0xfc>
 80183da:	6823      	ldr	r3, [r4, #0]
 80183dc:	f043 0320 	orr.w	r3, r3, #32
 80183e0:	6023      	str	r3, [r4, #0]
 80183e2:	2378      	movs	r3, #120	; 0x78
 80183e4:	4828      	ldr	r0, [pc, #160]	; (8018488 <_printf_i+0x248>)
 80183e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80183ea:	e7e3      	b.n	80183b4 <_printf_i+0x174>
 80183ec:	065e      	lsls	r6, r3, #25
 80183ee:	bf48      	it	mi
 80183f0:	b2ad      	uxthmi	r5, r5
 80183f2:	e7e6      	b.n	80183c2 <_printf_i+0x182>
 80183f4:	4616      	mov	r6, r2
 80183f6:	e7bb      	b.n	8018370 <_printf_i+0x130>
 80183f8:	680b      	ldr	r3, [r1, #0]
 80183fa:	6826      	ldr	r6, [r4, #0]
 80183fc:	6960      	ldr	r0, [r4, #20]
 80183fe:	1d1d      	adds	r5, r3, #4
 8018400:	600d      	str	r5, [r1, #0]
 8018402:	0635      	lsls	r5, r6, #24
 8018404:	681b      	ldr	r3, [r3, #0]
 8018406:	d501      	bpl.n	801840c <_printf_i+0x1cc>
 8018408:	6018      	str	r0, [r3, #0]
 801840a:	e002      	b.n	8018412 <_printf_i+0x1d2>
 801840c:	0671      	lsls	r1, r6, #25
 801840e:	d5fb      	bpl.n	8018408 <_printf_i+0x1c8>
 8018410:	8018      	strh	r0, [r3, #0]
 8018412:	2300      	movs	r3, #0
 8018414:	6123      	str	r3, [r4, #16]
 8018416:	4616      	mov	r6, r2
 8018418:	e7ba      	b.n	8018390 <_printf_i+0x150>
 801841a:	680b      	ldr	r3, [r1, #0]
 801841c:	1d1a      	adds	r2, r3, #4
 801841e:	600a      	str	r2, [r1, #0]
 8018420:	681e      	ldr	r6, [r3, #0]
 8018422:	6862      	ldr	r2, [r4, #4]
 8018424:	2100      	movs	r1, #0
 8018426:	4630      	mov	r0, r6
 8018428:	f7e7 feea 	bl	8000200 <memchr>
 801842c:	b108      	cbz	r0, 8018432 <_printf_i+0x1f2>
 801842e:	1b80      	subs	r0, r0, r6
 8018430:	6060      	str	r0, [r4, #4]
 8018432:	6863      	ldr	r3, [r4, #4]
 8018434:	6123      	str	r3, [r4, #16]
 8018436:	2300      	movs	r3, #0
 8018438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801843c:	e7a8      	b.n	8018390 <_printf_i+0x150>
 801843e:	6923      	ldr	r3, [r4, #16]
 8018440:	4632      	mov	r2, r6
 8018442:	4649      	mov	r1, r9
 8018444:	4640      	mov	r0, r8
 8018446:	47d0      	blx	sl
 8018448:	3001      	adds	r0, #1
 801844a:	d0ab      	beq.n	80183a4 <_printf_i+0x164>
 801844c:	6823      	ldr	r3, [r4, #0]
 801844e:	079b      	lsls	r3, r3, #30
 8018450:	d413      	bmi.n	801847a <_printf_i+0x23a>
 8018452:	68e0      	ldr	r0, [r4, #12]
 8018454:	9b03      	ldr	r3, [sp, #12]
 8018456:	4298      	cmp	r0, r3
 8018458:	bfb8      	it	lt
 801845a:	4618      	movlt	r0, r3
 801845c:	e7a4      	b.n	80183a8 <_printf_i+0x168>
 801845e:	2301      	movs	r3, #1
 8018460:	4632      	mov	r2, r6
 8018462:	4649      	mov	r1, r9
 8018464:	4640      	mov	r0, r8
 8018466:	47d0      	blx	sl
 8018468:	3001      	adds	r0, #1
 801846a:	d09b      	beq.n	80183a4 <_printf_i+0x164>
 801846c:	3501      	adds	r5, #1
 801846e:	68e3      	ldr	r3, [r4, #12]
 8018470:	9903      	ldr	r1, [sp, #12]
 8018472:	1a5b      	subs	r3, r3, r1
 8018474:	42ab      	cmp	r3, r5
 8018476:	dcf2      	bgt.n	801845e <_printf_i+0x21e>
 8018478:	e7eb      	b.n	8018452 <_printf_i+0x212>
 801847a:	2500      	movs	r5, #0
 801847c:	f104 0619 	add.w	r6, r4, #25
 8018480:	e7f5      	b.n	801846e <_printf_i+0x22e>
 8018482:	bf00      	nop
 8018484:	08020591 	.word	0x08020591
 8018488:	080205a2 	.word	0x080205a2

0801848c <_sbrk_r>:
 801848c:	b538      	push	{r3, r4, r5, lr}
 801848e:	4d06      	ldr	r5, [pc, #24]	; (80184a8 <_sbrk_r+0x1c>)
 8018490:	2300      	movs	r3, #0
 8018492:	4604      	mov	r4, r0
 8018494:	4608      	mov	r0, r1
 8018496:	602b      	str	r3, [r5, #0]
 8018498:	f7e9 f962 	bl	8001760 <_sbrk>
 801849c:	1c43      	adds	r3, r0, #1
 801849e:	d102      	bne.n	80184a6 <_sbrk_r+0x1a>
 80184a0:	682b      	ldr	r3, [r5, #0]
 80184a2:	b103      	cbz	r3, 80184a6 <_sbrk_r+0x1a>
 80184a4:	6023      	str	r3, [r4, #0]
 80184a6:	bd38      	pop	{r3, r4, r5, pc}
 80184a8:	20016dd8 	.word	0x20016dd8

080184ac <__sread>:
 80184ac:	b510      	push	{r4, lr}
 80184ae:	460c      	mov	r4, r1
 80184b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80184b4:	f000 f8ce 	bl	8018654 <_read_r>
 80184b8:	2800      	cmp	r0, #0
 80184ba:	bfab      	itete	ge
 80184bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80184be:	89a3      	ldrhlt	r3, [r4, #12]
 80184c0:	181b      	addge	r3, r3, r0
 80184c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80184c6:	bfac      	ite	ge
 80184c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80184ca:	81a3      	strhlt	r3, [r4, #12]
 80184cc:	bd10      	pop	{r4, pc}

080184ce <__swrite>:
 80184ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80184d2:	461f      	mov	r7, r3
 80184d4:	898b      	ldrh	r3, [r1, #12]
 80184d6:	05db      	lsls	r3, r3, #23
 80184d8:	4605      	mov	r5, r0
 80184da:	460c      	mov	r4, r1
 80184dc:	4616      	mov	r6, r2
 80184de:	d505      	bpl.n	80184ec <__swrite+0x1e>
 80184e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80184e4:	2302      	movs	r3, #2
 80184e6:	2200      	movs	r2, #0
 80184e8:	f000 f870 	bl	80185cc <_lseek_r>
 80184ec:	89a3      	ldrh	r3, [r4, #12]
 80184ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80184f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80184f6:	81a3      	strh	r3, [r4, #12]
 80184f8:	4632      	mov	r2, r6
 80184fa:	463b      	mov	r3, r7
 80184fc:	4628      	mov	r0, r5
 80184fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018502:	f000 b817 	b.w	8018534 <_write_r>

08018506 <__sseek>:
 8018506:	b510      	push	{r4, lr}
 8018508:	460c      	mov	r4, r1
 801850a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801850e:	f000 f85d 	bl	80185cc <_lseek_r>
 8018512:	1c43      	adds	r3, r0, #1
 8018514:	89a3      	ldrh	r3, [r4, #12]
 8018516:	bf15      	itete	ne
 8018518:	6560      	strne	r0, [r4, #84]	; 0x54
 801851a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801851e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018522:	81a3      	strheq	r3, [r4, #12]
 8018524:	bf18      	it	ne
 8018526:	81a3      	strhne	r3, [r4, #12]
 8018528:	bd10      	pop	{r4, pc}

0801852a <__sclose>:
 801852a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801852e:	f000 b81b 	b.w	8018568 <_close_r>
	...

08018534 <_write_r>:
 8018534:	b538      	push	{r3, r4, r5, lr}
 8018536:	4d07      	ldr	r5, [pc, #28]	; (8018554 <_write_r+0x20>)
 8018538:	4604      	mov	r4, r0
 801853a:	4608      	mov	r0, r1
 801853c:	4611      	mov	r1, r2
 801853e:	2200      	movs	r2, #0
 8018540:	602a      	str	r2, [r5, #0]
 8018542:	461a      	mov	r2, r3
 8018544:	f7e8 fd4c 	bl	8000fe0 <_write>
 8018548:	1c43      	adds	r3, r0, #1
 801854a:	d102      	bne.n	8018552 <_write_r+0x1e>
 801854c:	682b      	ldr	r3, [r5, #0]
 801854e:	b103      	cbz	r3, 8018552 <_write_r+0x1e>
 8018550:	6023      	str	r3, [r4, #0]
 8018552:	bd38      	pop	{r3, r4, r5, pc}
 8018554:	20016dd8 	.word	0x20016dd8

08018558 <abort>:
 8018558:	b508      	push	{r3, lr}
 801855a:	2006      	movs	r0, #6
 801855c:	f000 f8b4 	bl	80186c8 <raise>
 8018560:	2001      	movs	r0, #1
 8018562:	f7e9 f8a1 	bl	80016a8 <_exit>
	...

08018568 <_close_r>:
 8018568:	b538      	push	{r3, r4, r5, lr}
 801856a:	4d06      	ldr	r5, [pc, #24]	; (8018584 <_close_r+0x1c>)
 801856c:	2300      	movs	r3, #0
 801856e:	4604      	mov	r4, r0
 8018570:	4608      	mov	r0, r1
 8018572:	602b      	str	r3, [r5, #0]
 8018574:	f7e9 f8bf 	bl	80016f6 <_close>
 8018578:	1c43      	adds	r3, r0, #1
 801857a:	d102      	bne.n	8018582 <_close_r+0x1a>
 801857c:	682b      	ldr	r3, [r5, #0]
 801857e:	b103      	cbz	r3, 8018582 <_close_r+0x1a>
 8018580:	6023      	str	r3, [r4, #0]
 8018582:	bd38      	pop	{r3, r4, r5, pc}
 8018584:	20016dd8 	.word	0x20016dd8

08018588 <_fstat_r>:
 8018588:	b538      	push	{r3, r4, r5, lr}
 801858a:	4d07      	ldr	r5, [pc, #28]	; (80185a8 <_fstat_r+0x20>)
 801858c:	2300      	movs	r3, #0
 801858e:	4604      	mov	r4, r0
 8018590:	4608      	mov	r0, r1
 8018592:	4611      	mov	r1, r2
 8018594:	602b      	str	r3, [r5, #0]
 8018596:	f7e9 f8ba 	bl	800170e <_fstat>
 801859a:	1c43      	adds	r3, r0, #1
 801859c:	d102      	bne.n	80185a4 <_fstat_r+0x1c>
 801859e:	682b      	ldr	r3, [r5, #0]
 80185a0:	b103      	cbz	r3, 80185a4 <_fstat_r+0x1c>
 80185a2:	6023      	str	r3, [r4, #0]
 80185a4:	bd38      	pop	{r3, r4, r5, pc}
 80185a6:	bf00      	nop
 80185a8:	20016dd8 	.word	0x20016dd8

080185ac <_isatty_r>:
 80185ac:	b538      	push	{r3, r4, r5, lr}
 80185ae:	4d06      	ldr	r5, [pc, #24]	; (80185c8 <_isatty_r+0x1c>)
 80185b0:	2300      	movs	r3, #0
 80185b2:	4604      	mov	r4, r0
 80185b4:	4608      	mov	r0, r1
 80185b6:	602b      	str	r3, [r5, #0]
 80185b8:	f7e9 f8b9 	bl	800172e <_isatty>
 80185bc:	1c43      	adds	r3, r0, #1
 80185be:	d102      	bne.n	80185c6 <_isatty_r+0x1a>
 80185c0:	682b      	ldr	r3, [r5, #0]
 80185c2:	b103      	cbz	r3, 80185c6 <_isatty_r+0x1a>
 80185c4:	6023      	str	r3, [r4, #0]
 80185c6:	bd38      	pop	{r3, r4, r5, pc}
 80185c8:	20016dd8 	.word	0x20016dd8

080185cc <_lseek_r>:
 80185cc:	b538      	push	{r3, r4, r5, lr}
 80185ce:	4d07      	ldr	r5, [pc, #28]	; (80185ec <_lseek_r+0x20>)
 80185d0:	4604      	mov	r4, r0
 80185d2:	4608      	mov	r0, r1
 80185d4:	4611      	mov	r1, r2
 80185d6:	2200      	movs	r2, #0
 80185d8:	602a      	str	r2, [r5, #0]
 80185da:	461a      	mov	r2, r3
 80185dc:	f7e9 f8b2 	bl	8001744 <_lseek>
 80185e0:	1c43      	adds	r3, r0, #1
 80185e2:	d102      	bne.n	80185ea <_lseek_r+0x1e>
 80185e4:	682b      	ldr	r3, [r5, #0]
 80185e6:	b103      	cbz	r3, 80185ea <_lseek_r+0x1e>
 80185e8:	6023      	str	r3, [r4, #0]
 80185ea:	bd38      	pop	{r3, r4, r5, pc}
 80185ec:	20016dd8 	.word	0x20016dd8

080185f0 <__malloc_lock>:
 80185f0:	4801      	ldr	r0, [pc, #4]	; (80185f8 <__malloc_lock+0x8>)
 80185f2:	f7ff b9e9 	b.w	80179c8 <__retarget_lock_acquire_recursive>
 80185f6:	bf00      	nop
 80185f8:	20016de0 	.word	0x20016de0

080185fc <__malloc_unlock>:
 80185fc:	4801      	ldr	r0, [pc, #4]	; (8018604 <__malloc_unlock+0x8>)
 80185fe:	f7ff b9e4 	b.w	80179ca <__retarget_lock_release_recursive>
 8018602:	bf00      	nop
 8018604:	20016de0 	.word	0x20016de0

08018608 <_realloc_r>:
 8018608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801860a:	4607      	mov	r7, r0
 801860c:	4614      	mov	r4, r2
 801860e:	460e      	mov	r6, r1
 8018610:	b921      	cbnz	r1, 801861c <_realloc_r+0x14>
 8018612:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018616:	4611      	mov	r1, r2
 8018618:	f7ff ba94 	b.w	8017b44 <_malloc_r>
 801861c:	b922      	cbnz	r2, 8018628 <_realloc_r+0x20>
 801861e:	f7ff fa41 	bl	8017aa4 <_free_r>
 8018622:	4625      	mov	r5, r4
 8018624:	4628      	mov	r0, r5
 8018626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018628:	f000 f86a 	bl	8018700 <_malloc_usable_size_r>
 801862c:	42a0      	cmp	r0, r4
 801862e:	d20f      	bcs.n	8018650 <_realloc_r+0x48>
 8018630:	4621      	mov	r1, r4
 8018632:	4638      	mov	r0, r7
 8018634:	f7ff fa86 	bl	8017b44 <_malloc_r>
 8018638:	4605      	mov	r5, r0
 801863a:	2800      	cmp	r0, #0
 801863c:	d0f2      	beq.n	8018624 <_realloc_r+0x1c>
 801863e:	4631      	mov	r1, r6
 8018640:	4622      	mov	r2, r4
 8018642:	f7fe fca7 	bl	8016f94 <memcpy>
 8018646:	4631      	mov	r1, r6
 8018648:	4638      	mov	r0, r7
 801864a:	f7ff fa2b 	bl	8017aa4 <_free_r>
 801864e:	e7e9      	b.n	8018624 <_realloc_r+0x1c>
 8018650:	4635      	mov	r5, r6
 8018652:	e7e7      	b.n	8018624 <_realloc_r+0x1c>

08018654 <_read_r>:
 8018654:	b538      	push	{r3, r4, r5, lr}
 8018656:	4d07      	ldr	r5, [pc, #28]	; (8018674 <_read_r+0x20>)
 8018658:	4604      	mov	r4, r0
 801865a:	4608      	mov	r0, r1
 801865c:	4611      	mov	r1, r2
 801865e:	2200      	movs	r2, #0
 8018660:	602a      	str	r2, [r5, #0]
 8018662:	461a      	mov	r2, r3
 8018664:	f7e9 f82a 	bl	80016bc <_read>
 8018668:	1c43      	adds	r3, r0, #1
 801866a:	d102      	bne.n	8018672 <_read_r+0x1e>
 801866c:	682b      	ldr	r3, [r5, #0]
 801866e:	b103      	cbz	r3, 8018672 <_read_r+0x1e>
 8018670:	6023      	str	r3, [r4, #0]
 8018672:	bd38      	pop	{r3, r4, r5, pc}
 8018674:	20016dd8 	.word	0x20016dd8

08018678 <_raise_r>:
 8018678:	291f      	cmp	r1, #31
 801867a:	b538      	push	{r3, r4, r5, lr}
 801867c:	4604      	mov	r4, r0
 801867e:	460d      	mov	r5, r1
 8018680:	d904      	bls.n	801868c <_raise_r+0x14>
 8018682:	2316      	movs	r3, #22
 8018684:	6003      	str	r3, [r0, #0]
 8018686:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801868a:	bd38      	pop	{r3, r4, r5, pc}
 801868c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801868e:	b112      	cbz	r2, 8018696 <_raise_r+0x1e>
 8018690:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018694:	b94b      	cbnz	r3, 80186aa <_raise_r+0x32>
 8018696:	4620      	mov	r0, r4
 8018698:	f000 f830 	bl	80186fc <_getpid_r>
 801869c:	462a      	mov	r2, r5
 801869e:	4601      	mov	r1, r0
 80186a0:	4620      	mov	r0, r4
 80186a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80186a6:	f000 b817 	b.w	80186d8 <_kill_r>
 80186aa:	2b01      	cmp	r3, #1
 80186ac:	d00a      	beq.n	80186c4 <_raise_r+0x4c>
 80186ae:	1c59      	adds	r1, r3, #1
 80186b0:	d103      	bne.n	80186ba <_raise_r+0x42>
 80186b2:	2316      	movs	r3, #22
 80186b4:	6003      	str	r3, [r0, #0]
 80186b6:	2001      	movs	r0, #1
 80186b8:	e7e7      	b.n	801868a <_raise_r+0x12>
 80186ba:	2400      	movs	r4, #0
 80186bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80186c0:	4628      	mov	r0, r5
 80186c2:	4798      	blx	r3
 80186c4:	2000      	movs	r0, #0
 80186c6:	e7e0      	b.n	801868a <_raise_r+0x12>

080186c8 <raise>:
 80186c8:	4b02      	ldr	r3, [pc, #8]	; (80186d4 <raise+0xc>)
 80186ca:	4601      	mov	r1, r0
 80186cc:	6818      	ldr	r0, [r3, #0]
 80186ce:	f7ff bfd3 	b.w	8018678 <_raise_r>
 80186d2:	bf00      	nop
 80186d4:	2000014c 	.word	0x2000014c

080186d8 <_kill_r>:
 80186d8:	b538      	push	{r3, r4, r5, lr}
 80186da:	4d07      	ldr	r5, [pc, #28]	; (80186f8 <_kill_r+0x20>)
 80186dc:	2300      	movs	r3, #0
 80186de:	4604      	mov	r4, r0
 80186e0:	4608      	mov	r0, r1
 80186e2:	4611      	mov	r1, r2
 80186e4:	602b      	str	r3, [r5, #0]
 80186e6:	f7e8 ffcd 	bl	8001684 <_kill>
 80186ea:	1c43      	adds	r3, r0, #1
 80186ec:	d102      	bne.n	80186f4 <_kill_r+0x1c>
 80186ee:	682b      	ldr	r3, [r5, #0]
 80186f0:	b103      	cbz	r3, 80186f4 <_kill_r+0x1c>
 80186f2:	6023      	str	r3, [r4, #0]
 80186f4:	bd38      	pop	{r3, r4, r5, pc}
 80186f6:	bf00      	nop
 80186f8:	20016dd8 	.word	0x20016dd8

080186fc <_getpid_r>:
 80186fc:	f7e8 bfba 	b.w	8001674 <_getpid>

08018700 <_malloc_usable_size_r>:
 8018700:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018704:	1f18      	subs	r0, r3, #4
 8018706:	2b00      	cmp	r3, #0
 8018708:	bfbc      	itt	lt
 801870a:	580b      	ldrlt	r3, [r1, r0]
 801870c:	18c0      	addlt	r0, r0, r3
 801870e:	4770      	bx	lr

08018710 <_init>:
 8018710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018712:	bf00      	nop
 8018714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018716:	bc08      	pop	{r3}
 8018718:	469e      	mov	lr, r3
 801871a:	4770      	bx	lr

0801871c <_fini>:
 801871c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801871e:	bf00      	nop
 8018720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018722:	bc08      	pop	{r3}
 8018724:	469e      	mov	lr, r3
 8018726:	4770      	bx	lr
