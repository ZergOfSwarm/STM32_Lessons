
SDcard_SDIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007040  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  080071c8  080071c8  000171c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007314  08007314  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007314  08007314  00017314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800731c  0800731c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800731c  0800731c  0001731c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007320  08007320  00017320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007324  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000318c  2000000c  08007330  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003198  08007330  00023198  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c20  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002afd  00000000  00000000  00034c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001018  00000000  00000000  00037760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee0  00000000  00000000  00038778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002308c  00000000  00000000  00039658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001357f  00000000  00000000  0005c6e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf2e6  00000000  00000000  0006fc63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013ef49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004308  00000000  00000000  0013ef9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080071b0 	.word	0x080071b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080071b0 	.word	0x080071b0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b5b0      	push	{r4, r5, r7, lr}
 80004c2:	f5ad 5d04 	sub.w	sp, sp, #8448	; 0x2100
 80004c6:	b084      	sub	sp, #16
 80004c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ca:	f000 fb2d 	bl	8000b28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ce:	f000 f8c9 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d2:	f000 f951 	bl	8000778 <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 80004d6:	f000 f92f 	bl	8000738 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80004da:	f003 fc17 	bl	8003d0c <MX_FATFS_Init>
  char SDPath[4]; /* SD disk logical drive path */
  static uint8_t buffer[_MAX_SS]; /* a work buffer for the f_mkfs() */

  FRESULT res;                                          /* FatFs function common result code */
  uint32_t byteswritten, bytesread;                     /* File write/read counts */
  uint8_t wtext[] = "Hello World, this is STM32 working with FatFs!"; /* File write buffer */
 80004de:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80004e2:	3b24      	subs	r3, #36	; 0x24
 80004e4:	4a5c      	ldr	r2, [pc, #368]	; (8000658 <main+0x198>)
 80004e6:	461c      	mov	r4, r3
 80004e8:	4615      	mov	r5, r2
 80004ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004f2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80004f6:	c407      	stmia	r4!, {r0, r1, r2}
 80004f8:	8023      	strh	r3, [r4, #0]
 80004fa:	3402      	adds	r4, #2
 80004fc:	0c1b      	lsrs	r3, r3, #16
 80004fe:	7023      	strb	r3, [r4, #0]

  /*##-1- Link the SD disk I/O driver ########################################*/
 // if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 // {
    /*##-2- Register the file system object to the FatFs module ##############*/
    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) != FR_OK)
 8000500:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8000504:	392c      	subs	r1, #44	; 0x2c
 8000506:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 800050a:	f103 0308 	add.w	r3, r3, #8
 800050e:	3b18      	subs	r3, #24
 8000510:	2200      	movs	r2, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f005 fb80 	bl	8005c18 <f_mount>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d002      	beq.n	8000524 <main+0x64>
    {
      /* FatFs Initialization Error */
      Error_Handler();
 800051e:	f000 f98f 	bl	8000840 <Error_Handler>
 8000522:	e092      	b.n	800064a <main+0x18a>
    else
    {
      /*##-3- Create a FAT file system (format) on the logical drive #########*/

      FRESULT fr;
      fr = f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, buffer, sizeof(buffer));
 8000524:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8000528:	382c      	subs	r0, #44	; 0x2c
 800052a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800052e:	9300      	str	r3, [sp, #0]
 8000530:	4b4a      	ldr	r3, [pc, #296]	; (800065c <main+0x19c>)
 8000532:	2200      	movs	r2, #0
 8000534:	2107      	movs	r1, #7
 8000536:	f006 f91d 	bl	8006774 <f_mkfs>
 800053a:	4603      	mov	r3, r0
 800053c:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8000540:	f102 0207 	add.w	r2, r2, #7
 8000544:	7013      	strb	r3, [r2, #0]
      if (fr != FR_OK)
 8000546:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 800054a:	f103 0307 	add.w	r3, r3, #7
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d002      	beq.n	800055a <main+0x9a>
      {
    	Error_Handler();
 8000554:	f000 f974 	bl	8000840 <Error_Handler>
 8000558:	e077      	b.n	800064a <main+0x18a>
      }
      else
      {
        /*##-4- Create and Open a new text file object with write access #####*/
        if(f_open(&MyFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 800055a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800055e:	3b28      	subs	r3, #40	; 0x28
 8000560:	220a      	movs	r2, #10
 8000562:	493f      	ldr	r1, [pc, #252]	; (8000660 <main+0x1a0>)
 8000564:	4618      	mov	r0, r3
 8000566:	f005 fb9d 	bl	8005ca4 <f_open>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d002      	beq.n	8000576 <main+0xb6>
        {
          /* 'STM32.TXT' file Open for write Error */
          Error_Handler();
 8000570:	f000 f966 	bl	8000840 <Error_Handler>
 8000574:	e069      	b.n	800064a <main+0x18a>
        }
        else
        {
          /*##-5- Write data to the text file ################################*/
          res = f_write(&MyFile, wtext, sizeof(wtext), (void *)&byteswritten);
 8000576:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800057a:	3b30      	subs	r3, #48	; 0x30
 800057c:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8000580:	3924      	subs	r1, #36	; 0x24
 8000582:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8000586:	3828      	subs	r0, #40	; 0x28
 8000588:	222f      	movs	r2, #47	; 0x2f
 800058a:	f005 feb6 	bl	80062fa <f_write>
 800058e:	4603      	mov	r3, r0
 8000590:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8000594:	f102 0206 	add.w	r2, r2, #6
 8000598:	7013      	strb	r3, [r2, #0]

          if((byteswritten == 0) || (res != FR_OK))
 800059a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800059e:	3b30      	subs	r3, #48	; 0x30
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d006      	beq.n	80005b4 <main+0xf4>
 80005a6:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80005aa:	f103 0306 	add.w	r3, r3, #6
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d002      	beq.n	80005ba <main+0xfa>
          {
            /* 'STM32.TXT' file Write or EOF Error */
            Error_Handler();
 80005b4:	f000 f944 	bl	8000840 <Error_Handler>
 80005b8:	e047      	b.n	800064a <main+0x18a>
          }
          else
          {
            /*##-6- Close the open text file #################################*/
            f_close(&MyFile);
 80005ba:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80005be:	3b28      	subs	r3, #40	; 0x28
 80005c0:	4618      	mov	r0, r3
 80005c2:	f006 f8ac 	bl	800671e <f_close>

            /*##-7- Open the text file object with read access ###############*/
            if(f_open(&MyFile, "STM32.TXT", FA_READ) != FR_OK)
 80005c6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80005ca:	3b28      	subs	r3, #40	; 0x28
 80005cc:	2201      	movs	r2, #1
 80005ce:	4924      	ldr	r1, [pc, #144]	; (8000660 <main+0x1a0>)
 80005d0:	4618      	mov	r0, r3
 80005d2:	f005 fb67 	bl	8005ca4 <f_open>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d002      	beq.n	80005e2 <main+0x122>
            {
              /* 'STM32.TXT' file Open for read Error */
              Error_Handler();
 80005dc:	f000 f930 	bl	8000840 <Error_Handler>
 80005e0:	e033      	b.n	800064a <main+0x18a>
            }
            else
            {
              /*##-8- Read data from the text file ###########################*/
              res = f_read(&MyFile, rtext, sizeof(rtext), (UINT*)&bytesread);
 80005e2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80005e6:	3b34      	subs	r3, #52	; 0x34
 80005e8:	f107 0108 	add.w	r1, r7, #8
 80005ec:	3908      	subs	r1, #8
 80005ee:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 80005f2:	3828      	subs	r0, #40	; 0x28
 80005f4:	2264      	movs	r2, #100	; 0x64
 80005f6:	f005 fd21 	bl	800603c <f_read>
 80005fa:	4603      	mov	r3, r0
 80005fc:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8000600:	f102 0206 	add.w	r2, r2, #6
 8000604:	7013      	strb	r3, [r2, #0]

              if((bytesread == 0) || (res != FR_OK)) /* EOF or Error */
 8000606:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800060a:	3b34      	subs	r3, #52	; 0x34
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d006      	beq.n	8000620 <main+0x160>
 8000612:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8000616:	f103 0306 	add.w	r3, r3, #6
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d002      	beq.n	8000626 <main+0x166>
              {
                /* 'STM32.TXT' file Read or EOF Error */
                Error_Handler();
 8000620:	f000 f90e 	bl	8000840 <Error_Handler>
 8000624:	e011      	b.n	800064a <main+0x18a>
              }
              else
              {
                /*##-9- Close the open text file #############################*/
                f_close(&MyFile);
 8000626:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800062a:	3b28      	subs	r3, #40	; 0x28
 800062c:	4618      	mov	r0, r3
 800062e:	f006 f876 	bl	800671e <f_close>

                /*##-10- Compare read data with the expected data ############*/
                if ((bytesread != byteswritten))
 8000632:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000636:	3b34      	subs	r3, #52	; 0x34
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800063e:	3b30      	subs	r3, #48	; 0x30
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	429a      	cmp	r2, r3
 8000644:	d001      	beq.n	800064a <main+0x18a>
                {
                  /* Read data is different from the expected data */
                  Error_Handler();
 8000646:	f000 f8fb 	bl	8000840 <Error_Handler>
        }
      }
    }
 // }
    /*##-11- Unlink the SD disk I/O driver ####################################*/
    FATFS_UnLinkDriver(SDPath);
 800064a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800064e:	3b2c      	subs	r3, #44	; 0x2c
 8000650:	4618      	mov	r0, r3
 8000652:	f006 fd73 	bl	800713c <FATFS_UnLinkDriver>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000656:	e7fe      	b.n	8000656 <main+0x196>
 8000658:	080071d4 	.word	0x080071d4
 800065c:	20000028 	.word	0x20000028
 8000660:	080071c8 	.word	0x080071c8

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b094      	sub	sp, #80	; 0x50
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 0320 	add.w	r3, r7, #32
 800066e:	2230      	movs	r2, #48	; 0x30
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f006 fd94 	bl	80071a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000688:	2300      	movs	r3, #0
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	4b28      	ldr	r3, [pc, #160]	; (8000730 <SystemClock_Config+0xcc>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	4a27      	ldr	r2, [pc, #156]	; (8000730 <SystemClock_Config+0xcc>)
 8000692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000696:	6413      	str	r3, [r2, #64]	; 0x40
 8000698:	4b25      	ldr	r3, [pc, #148]	; (8000730 <SystemClock_Config+0xcc>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a4:	2300      	movs	r3, #0
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	4b22      	ldr	r3, [pc, #136]	; (8000734 <SystemClock_Config+0xd0>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a21      	ldr	r2, [pc, #132]	; (8000734 <SystemClock_Config+0xd0>)
 80006ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b2:	6013      	str	r3, [r2, #0]
 80006b4:	4b1f      	ldr	r3, [pc, #124]	; (8000734 <SystemClock_Config+0xd0>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c0:	2302      	movs	r3, #2
 80006c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c4:	2301      	movs	r3, #1
 80006c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c8:	2310      	movs	r3, #16
 80006ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006cc:	2302      	movs	r3, #2
 80006ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d0:	2300      	movs	r3, #0
 80006d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006d4:	2308      	movs	r3, #8
 80006d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006d8:	23a8      	movs	r3, #168	; 0xa8
 80006da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006dc:	2302      	movs	r3, #2
 80006de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006e0:	2307      	movs	r3, #7
 80006e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e4:	f107 0320 	add.w	r3, r7, #32
 80006e8:	4618      	mov	r0, r3
 80006ea:	f000 fd01 	bl	80010f0 <HAL_RCC_OscConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006f4:	f000 f8a4 	bl	8000840 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f8:	230f      	movs	r3, #15
 80006fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fc:	2302      	movs	r3, #2
 80006fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000704:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000708:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800070a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	2105      	movs	r1, #5
 8000716:	4618      	mov	r0, r3
 8000718:	f000 ff62 	bl	80015e0 <HAL_RCC_ClockConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000722:	f000 f88d 	bl	8000840 <Error_Handler>
  }
}
 8000726:	bf00      	nop
 8000728:	3750      	adds	r7, #80	; 0x50
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40023800 	.word	0x40023800
 8000734:	40007000 	.word	0x40007000

08000738 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_SDIO_SD_Init+0x38>)
 800073e:	4a0d      	ldr	r2, [pc, #52]	; (8000774 <MX_SDIO_SD_Init+0x3c>)
 8000740:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_SDIO_SD_Init+0x38>)
 8000744:	2200      	movs	r2, #0
 8000746:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_SDIO_SD_Init+0x38>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MX_SDIO_SD_Init+0x38>)
 8000750:	2200      	movs	r2, #0
 8000752:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_SDIO_SD_Init+0x38>)
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800075a:	4b05      	ldr	r3, [pc, #20]	; (8000770 <MX_SDIO_SD_Init+0x38>)
 800075c:	2200      	movs	r2, #0
 800075e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 8000760:	4b03      	ldr	r3, [pc, #12]	; (8000770 <MX_SDIO_SD_Init+0x38>)
 8000762:	2204      	movs	r2, #4
 8000764:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr
 8000770:	2000105c 	.word	0x2000105c
 8000774:	40012c00 	.word	0x40012c00

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b480      	push	{r7}
 800077a:	b087      	sub	sp, #28
 800077c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
 8000782:	4b25      	ldr	r3, [pc, #148]	; (8000818 <MX_GPIO_Init+0xa0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a24      	ldr	r2, [pc, #144]	; (8000818 <MX_GPIO_Init+0xa0>)
 8000788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b22      	ldr	r3, [pc, #136]	; (8000818 <MX_GPIO_Init+0xa0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000796:	617b      	str	r3, [r7, #20]
 8000798:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	613b      	str	r3, [r7, #16]
 800079e:	4b1e      	ldr	r3, [pc, #120]	; (8000818 <MX_GPIO_Init+0xa0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a1d      	ldr	r2, [pc, #116]	; (8000818 <MX_GPIO_Init+0xa0>)
 80007a4:	f043 0304 	orr.w	r3, r3, #4
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <MX_GPIO_Init+0xa0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0304 	and.w	r3, r3, #4
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	4b17      	ldr	r3, [pc, #92]	; (8000818 <MX_GPIO_Init+0xa0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a16      	ldr	r2, [pc, #88]	; (8000818 <MX_GPIO_Init+0xa0>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_GPIO_Init+0xa0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <MX_GPIO_Init+0xa0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a0f      	ldr	r2, [pc, #60]	; (8000818 <MX_GPIO_Init+0xa0>)
 80007dc:	f043 0308 	orr.w	r3, r3, #8
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <MX_GPIO_Init+0xa0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0308 	and.w	r3, r3, #8
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_GPIO_Init+0xa0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a08      	ldr	r2, [pc, #32]	; (8000818 <MX_GPIO_Init+0xa0>)
 80007f8:	f043 0302 	orr.w	r3, r3, #2
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_GPIO_Init+0xa0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]

}
 800080a:	bf00      	nop
 800080c:	371c      	adds	r7, #28
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	40023800 	.word	0x40023800

0800081c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a04      	ldr	r2, [pc, #16]	; (800083c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d101      	bne.n	8000832 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800082e:	f000 f99d 	bl	8000b6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40002000 	.word	0x40002000

08000840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000844:	b672      	cpsid	i
}
 8000846:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000848:	e7fe      	b.n	8000848 <Error_Handler+0x8>
	...

0800084c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	4b10      	ldr	r3, [pc, #64]	; (8000898 <HAL_MspInit+0x4c>)
 8000858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085a:	4a0f      	ldr	r2, [pc, #60]	; (8000898 <HAL_MspInit+0x4c>)
 800085c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000860:	6453      	str	r3, [r2, #68]	; 0x44
 8000862:	4b0d      	ldr	r3, [pc, #52]	; (8000898 <HAL_MspInit+0x4c>)
 8000864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	603b      	str	r3, [r7, #0]
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <HAL_MspInit+0x4c>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000876:	4a08      	ldr	r2, [pc, #32]	; (8000898 <HAL_MspInit+0x4c>)
 8000878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800087c:	6413      	str	r3, [r2, #64]	; 0x40
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <HAL_MspInit+0x4c>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088a:	bf00      	nop
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	40023800 	.word	0x40023800

0800089c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	; 0x28
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a31      	ldr	r2, [pc, #196]	; (8000980 <HAL_SD_MspInit+0xe4>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d15b      	bne.n	8000976 <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
 80008c2:	4b30      	ldr	r3, [pc, #192]	; (8000984 <HAL_SD_MspInit+0xe8>)
 80008c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c6:	4a2f      	ldr	r2, [pc, #188]	; (8000984 <HAL_SD_MspInit+0xe8>)
 80008c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008cc:	6453      	str	r3, [r2, #68]	; 0x44
 80008ce:	4b2d      	ldr	r3, [pc, #180]	; (8000984 <HAL_SD_MspInit+0xe8>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	4b29      	ldr	r3, [pc, #164]	; (8000984 <HAL_SD_MspInit+0xe8>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a28      	ldr	r2, [pc, #160]	; (8000984 <HAL_SD_MspInit+0xe8>)
 80008e4:	f043 0304 	orr.w	r3, r3, #4
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b26      	ldr	r3, [pc, #152]	; (8000984 <HAL_SD_MspInit+0xe8>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0304 	and.w	r3, r3, #4
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	4b22      	ldr	r3, [pc, #136]	; (8000984 <HAL_SD_MspInit+0xe8>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a21      	ldr	r2, [pc, #132]	; (8000984 <HAL_SD_MspInit+0xe8>)
 8000900:	f043 0308 	orr.w	r3, r3, #8
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b1f      	ldr	r3, [pc, #124]	; (8000984 <HAL_SD_MspInit+0xe8>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0308 	and.w	r3, r3, #8
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000912:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000916:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000918:	2302      	movs	r3, #2
 800091a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800091c:	2301      	movs	r3, #1
 800091e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000920:	2303      	movs	r3, #3
 8000922:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000924:	230c      	movs	r3, #12
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	4619      	mov	r1, r3
 800092e:	4816      	ldr	r0, [pc, #88]	; (8000988 <HAL_SD_MspInit+0xec>)
 8000930:	f000 fa42 	bl	8000db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000934:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093a:	2302      	movs	r3, #2
 800093c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000942:	2303      	movs	r3, #3
 8000944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000946:	230c      	movs	r3, #12
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	4619      	mov	r1, r3
 8000950:	480d      	ldr	r0, [pc, #52]	; (8000988 <HAL_SD_MspInit+0xec>)
 8000952:	f000 fa31 	bl	8000db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000956:	2304      	movs	r3, #4
 8000958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800095e:	2301      	movs	r3, #1
 8000960:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000962:	2303      	movs	r3, #3
 8000964:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000966:	230c      	movs	r3, #12
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	4619      	mov	r1, r3
 8000970:	4806      	ldr	r0, [pc, #24]	; (800098c <HAL_SD_MspInit+0xf0>)
 8000972:	f000 fa21 	bl	8000db8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000976:	bf00      	nop
 8000978:	3728      	adds	r7, #40	; 0x28
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40012c00 	.word	0x40012c00
 8000984:	40023800 	.word	0x40023800
 8000988:	40020800 	.word	0x40020800
 800098c:	40020c00 	.word	0x40020c00

08000990 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08c      	sub	sp, #48	; 0x30
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 80009a0:	2200      	movs	r2, #0
 80009a2:	6879      	ldr	r1, [r7, #4]
 80009a4:	202d      	movs	r0, #45	; 0x2d
 80009a6:	f000 f9dd 	bl	8000d64 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80009aa:	202d      	movs	r0, #45	; 0x2d
 80009ac:	f000 f9f6 	bl	8000d9c <HAL_NVIC_EnableIRQ>
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80009b0:	2300      	movs	r3, #0
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <HAL_InitTick+0xa4>)
 80009b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b8:	4a1e      	ldr	r2, [pc, #120]	; (8000a34 <HAL_InitTick+0xa4>)
 80009ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009be:	6413      	str	r3, [r2, #64]	; 0x40
 80009c0:	4b1c      	ldr	r3, [pc, #112]	; (8000a34 <HAL_InitTick+0xa4>)
 80009c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009cc:	f107 0210 	add.w	r2, r7, #16
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4611      	mov	r1, r2
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 ffbe 	bl	8001958 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80009dc:	f000 ffa8 	bl	8001930 <HAL_RCC_GetPCLK1Freq>
 80009e0:	4603      	mov	r3, r0
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009e8:	4a13      	ldr	r2, [pc, #76]	; (8000a38 <HAL_InitTick+0xa8>)
 80009ea:	fba2 2303 	umull	r2, r3, r2, r3
 80009ee:	0c9b      	lsrs	r3, r3, #18
 80009f0:	3b01      	subs	r3, #1
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80009f4:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <HAL_InitTick+0xac>)
 80009f6:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <HAL_InitTick+0xb0>)
 80009f8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80009fa:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <HAL_InitTick+0xac>)
 80009fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a00:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000a02:	4a0e      	ldr	r2, [pc, #56]	; (8000a3c <HAL_InitTick+0xac>)
 8000a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a06:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <HAL_InitTick+0xac>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <HAL_InitTick+0xac>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8000a14:	4809      	ldr	r0, [pc, #36]	; (8000a3c <HAL_InitTick+0xac>)
 8000a16:	f002 f958 	bl	8002cca <HAL_TIM_Base_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d104      	bne.n	8000a2a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8000a20:	4806      	ldr	r0, [pc, #24]	; (8000a3c <HAL_InitTick+0xac>)
 8000a22:	f002 f9ab 	bl	8002d7c <HAL_TIM_Base_Start_IT>
 8000a26:	4603      	mov	r3, r0
 8000a28:	e000      	b.n	8000a2c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3730      	adds	r7, #48	; 0x30
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40023800 	.word	0x40023800
 8000a38:	431bde83 	.word	0x431bde83
 8000a3c:	200010e0 	.word	0x200010e0
 8000a40:	40002000 	.word	0x40002000

08000a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <NMI_Handler+0x4>

08000a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <HardFault_Handler+0x4>

08000a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <MemManage_Handler+0x4>

08000a56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <BusFault_Handler+0x4>

08000a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <UsageFault_Handler+0x4>

08000a62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
	...

08000a9c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000aa0:	4802      	ldr	r0, [pc, #8]	; (8000aac <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000aa2:	f002 f9db 	bl	8002e5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	200010e0 	.word	0x200010e0

08000ab0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <SystemInit+0x20>)
 8000ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aba:	4a05      	ldr	r2, [pc, #20]	; (8000ad0 <SystemInit+0x20>)
 8000abc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ac0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ad4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ad8:	480d      	ldr	r0, [pc, #52]	; (8000b10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ada:	490e      	ldr	r1, [pc, #56]	; (8000b14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000adc:	4a0e      	ldr	r2, [pc, #56]	; (8000b18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae0:	e002      	b.n	8000ae8 <LoopCopyDataInit>

08000ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ae6:	3304      	adds	r3, #4

08000ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aec:	d3f9      	bcc.n	8000ae2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aee:	4a0b      	ldr	r2, [pc, #44]	; (8000b1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000af0:	4c0b      	ldr	r4, [pc, #44]	; (8000b20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af4:	e001      	b.n	8000afa <LoopFillZerobss>

08000af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af8:	3204      	adds	r2, #4

08000afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000afc:	d3fb      	bcc.n	8000af6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000afe:	f7ff ffd7 	bl	8000ab0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b02:	f006 fb29 	bl	8007158 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b06:	f7ff fcdb 	bl	80004c0 <main>
  bx  lr    
 8000b0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b14:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b18:	08007324 	.word	0x08007324
  ldr r2, =_sbss
 8000b1c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b20:	20003198 	.word	0x20003198

08000b24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b24:	e7fe      	b.n	8000b24 <ADC_IRQHandler>
	...

08000b28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b2c:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <HAL_Init+0x40>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a0d      	ldr	r2, [pc, #52]	; (8000b68 <HAL_Init+0x40>)
 8000b32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b38:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <HAL_Init+0x40>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a0a      	ldr	r2, [pc, #40]	; (8000b68 <HAL_Init+0x40>)
 8000b3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b44:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <HAL_Init+0x40>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a07      	ldr	r2, [pc, #28]	; (8000b68 <HAL_Init+0x40>)
 8000b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b50:	2003      	movs	r0, #3
 8000b52:	f000 f8fc 	bl	8000d4e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b56:	2000      	movs	r0, #0
 8000b58:	f7ff ff1a 	bl	8000990 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b5c:	f7ff fe76 	bl	800084c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40023c00 	.word	0x40023c00

08000b6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <HAL_IncTick+0x20>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	461a      	mov	r2, r3
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_IncTick+0x24>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <HAL_IncTick+0x24>)
 8000b7e:	6013      	str	r3, [r2, #0]
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	20000008 	.word	0x20000008
 8000b90:	20001128 	.word	0x20001128

08000b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return uwTick;
 8000b98:	4b03      	ldr	r3, [pc, #12]	; (8000ba8 <HAL_GetTick+0x14>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	20001128 	.word	0x20001128

08000bac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bb4:	f7ff ffee 	bl	8000b94 <HAL_GetTick>
 8000bb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bc4:	d005      	beq.n	8000bd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <HAL_Delay+0x44>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	461a      	mov	r2, r3
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	4413      	add	r3, r2
 8000bd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bd2:	bf00      	nop
 8000bd4:	f7ff ffde 	bl	8000b94 <HAL_GetTick>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d8f7      	bhi.n	8000bd4 <HAL_Delay+0x28>
  {
  }
}
 8000be4:	bf00      	nop
 8000be6:	bf00      	nop
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000008 	.word	0x20000008

08000bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c0a:	68ba      	ldr	r2, [r7, #8]
 8000c0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c10:	4013      	ands	r3, r2
 8000c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c26:	4a04      	ldr	r2, [pc, #16]	; (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	60d3      	str	r3, [r2, #12]
}
 8000c2c:	bf00      	nop
 8000c2e:	3714      	adds	r7, #20
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c40:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <__NVIC_GetPriorityGrouping+0x18>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	0a1b      	lsrs	r3, r3, #8
 8000c46:	f003 0307 	and.w	r3, r3, #7
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	db0b      	blt.n	8000c82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	f003 021f 	and.w	r2, r3, #31
 8000c70:	4907      	ldr	r1, [pc, #28]	; (8000c90 <__NVIC_EnableIRQ+0x38>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	095b      	lsrs	r3, r3, #5
 8000c78:	2001      	movs	r0, #1
 8000c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	e000e100 	.word	0xe000e100

08000c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	6039      	str	r1, [r7, #0]
 8000c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	db0a      	blt.n	8000cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	490c      	ldr	r1, [pc, #48]	; (8000ce0 <__NVIC_SetPriority+0x4c>)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	0112      	lsls	r2, r2, #4
 8000cb4:	b2d2      	uxtb	r2, r2
 8000cb6:	440b      	add	r3, r1
 8000cb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cbc:	e00a      	b.n	8000cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4908      	ldr	r1, [pc, #32]	; (8000ce4 <__NVIC_SetPriority+0x50>)
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	f003 030f 	and.w	r3, r3, #15
 8000cca:	3b04      	subs	r3, #4
 8000ccc:	0112      	lsls	r2, r2, #4
 8000cce:	b2d2      	uxtb	r2, r2
 8000cd0:	440b      	add	r3, r1
 8000cd2:	761a      	strb	r2, [r3, #24]
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000e100 	.word	0xe000e100
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b089      	sub	sp, #36	; 0x24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	f1c3 0307 	rsb	r3, r3, #7
 8000d02:	2b04      	cmp	r3, #4
 8000d04:	bf28      	it	cs
 8000d06:	2304      	movcs	r3, #4
 8000d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	2b06      	cmp	r3, #6
 8000d10:	d902      	bls.n	8000d18 <NVIC_EncodePriority+0x30>
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	3b03      	subs	r3, #3
 8000d16:	e000      	b.n	8000d1a <NVIC_EncodePriority+0x32>
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43da      	mvns	r2, r3
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	401a      	ands	r2, r3
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3a:	43d9      	mvns	r1, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	4313      	orrs	r3, r2
         );
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3724      	adds	r7, #36	; 0x24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f7ff ff4c 	bl	8000bf4 <__NVIC_SetPriorityGrouping>
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
 8000d70:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d76:	f7ff ff61 	bl	8000c3c <__NVIC_GetPriorityGrouping>
 8000d7a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	68b9      	ldr	r1, [r7, #8]
 8000d80:	6978      	ldr	r0, [r7, #20]
 8000d82:	f7ff ffb1 	bl	8000ce8 <NVIC_EncodePriority>
 8000d86:	4602      	mov	r2, r0
 8000d88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d8c:	4611      	mov	r1, r2
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff ff80 	bl	8000c94 <__NVIC_SetPriority>
}
 8000d94:	bf00      	nop
 8000d96:	3718      	adds	r7, #24
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff ff54 	bl	8000c58 <__NVIC_EnableIRQ>
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b089      	sub	sp, #36	; 0x24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61fb      	str	r3, [r7, #28]
 8000dd2:	e16b      	b.n	80010ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	697a      	ldr	r2, [r7, #20]
 8000de4:	4013      	ands	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	f040 815a 	bne.w	80010a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f003 0303 	and.w	r3, r3, #3
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d005      	beq.n	8000e0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d130      	bne.n	8000e6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	2203      	movs	r2, #3
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	68da      	ldr	r2, [r3, #12]
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e40:	2201      	movs	r2, #1
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	091b      	lsrs	r3, r3, #4
 8000e56:	f003 0201 	and.w	r2, r3, #1
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	2b03      	cmp	r3, #3
 8000e76:	d017      	beq.n	8000ea8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	2203      	movs	r2, #3
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	689a      	ldr	r2, [r3, #8]
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 0303 	and.w	r3, r3, #3
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d123      	bne.n	8000efc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	08da      	lsrs	r2, r3, #3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3208      	adds	r2, #8
 8000ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	f003 0307 	and.w	r3, r3, #7
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	220f      	movs	r2, #15
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	691a      	ldr	r2, [r3, #16]
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	08da      	lsrs	r2, r3, #3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3208      	adds	r2, #8
 8000ef6:	69b9      	ldr	r1, [r7, #24]
 8000ef8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	2203      	movs	r2, #3
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 0203 	and.w	r2, r3, #3
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	f000 80b4 	beq.w	80010a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	4b60      	ldr	r3, [pc, #384]	; (80010c4 <HAL_GPIO_Init+0x30c>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f46:	4a5f      	ldr	r2, [pc, #380]	; (80010c4 <HAL_GPIO_Init+0x30c>)
 8000f48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f4e:	4b5d      	ldr	r3, [pc, #372]	; (80010c4 <HAL_GPIO_Init+0x30c>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f5a:	4a5b      	ldr	r2, [pc, #364]	; (80010c8 <HAL_GPIO_Init+0x310>)
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	089b      	lsrs	r3, r3, #2
 8000f60:	3302      	adds	r3, #2
 8000f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	f003 0303 	and.w	r3, r3, #3
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	220f      	movs	r2, #15
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43db      	mvns	r3, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a52      	ldr	r2, [pc, #328]	; (80010cc <HAL_GPIO_Init+0x314>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d02b      	beq.n	8000fde <HAL_GPIO_Init+0x226>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a51      	ldr	r2, [pc, #324]	; (80010d0 <HAL_GPIO_Init+0x318>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d025      	beq.n	8000fda <HAL_GPIO_Init+0x222>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a50      	ldr	r2, [pc, #320]	; (80010d4 <HAL_GPIO_Init+0x31c>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d01f      	beq.n	8000fd6 <HAL_GPIO_Init+0x21e>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a4f      	ldr	r2, [pc, #316]	; (80010d8 <HAL_GPIO_Init+0x320>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d019      	beq.n	8000fd2 <HAL_GPIO_Init+0x21a>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a4e      	ldr	r2, [pc, #312]	; (80010dc <HAL_GPIO_Init+0x324>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d013      	beq.n	8000fce <HAL_GPIO_Init+0x216>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a4d      	ldr	r2, [pc, #308]	; (80010e0 <HAL_GPIO_Init+0x328>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d00d      	beq.n	8000fca <HAL_GPIO_Init+0x212>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a4c      	ldr	r2, [pc, #304]	; (80010e4 <HAL_GPIO_Init+0x32c>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d007      	beq.n	8000fc6 <HAL_GPIO_Init+0x20e>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a4b      	ldr	r2, [pc, #300]	; (80010e8 <HAL_GPIO_Init+0x330>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d101      	bne.n	8000fc2 <HAL_GPIO_Init+0x20a>
 8000fbe:	2307      	movs	r3, #7
 8000fc0:	e00e      	b.n	8000fe0 <HAL_GPIO_Init+0x228>
 8000fc2:	2308      	movs	r3, #8
 8000fc4:	e00c      	b.n	8000fe0 <HAL_GPIO_Init+0x228>
 8000fc6:	2306      	movs	r3, #6
 8000fc8:	e00a      	b.n	8000fe0 <HAL_GPIO_Init+0x228>
 8000fca:	2305      	movs	r3, #5
 8000fcc:	e008      	b.n	8000fe0 <HAL_GPIO_Init+0x228>
 8000fce:	2304      	movs	r3, #4
 8000fd0:	e006      	b.n	8000fe0 <HAL_GPIO_Init+0x228>
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e004      	b.n	8000fe0 <HAL_GPIO_Init+0x228>
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	e002      	b.n	8000fe0 <HAL_GPIO_Init+0x228>
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e000      	b.n	8000fe0 <HAL_GPIO_Init+0x228>
 8000fde:	2300      	movs	r3, #0
 8000fe0:	69fa      	ldr	r2, [r7, #28]
 8000fe2:	f002 0203 	and.w	r2, r2, #3
 8000fe6:	0092      	lsls	r2, r2, #2
 8000fe8:	4093      	lsls	r3, r2
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ff0:	4935      	ldr	r1, [pc, #212]	; (80010c8 <HAL_GPIO_Init+0x310>)
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	089b      	lsrs	r3, r3, #2
 8000ff6:	3302      	adds	r3, #2
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ffe:	4b3b      	ldr	r3, [pc, #236]	; (80010ec <HAL_GPIO_Init+0x334>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	43db      	mvns	r3, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4013      	ands	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	4313      	orrs	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001022:	4a32      	ldr	r2, [pc, #200]	; (80010ec <HAL_GPIO_Init+0x334>)
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001028:	4b30      	ldr	r3, [pc, #192]	; (80010ec <HAL_GPIO_Init+0x334>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d003      	beq.n	800104c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	4313      	orrs	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800104c:	4a27      	ldr	r2, [pc, #156]	; (80010ec <HAL_GPIO_Init+0x334>)
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001052:	4b26      	ldr	r3, [pc, #152]	; (80010ec <HAL_GPIO_Init+0x334>)
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	43db      	mvns	r3, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4013      	ands	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001076:	4a1d      	ldr	r2, [pc, #116]	; (80010ec <HAL_GPIO_Init+0x334>)
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800107c:	4b1b      	ldr	r3, [pc, #108]	; (80010ec <HAL_GPIO_Init+0x334>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010a0:	4a12      	ldr	r2, [pc, #72]	; (80010ec <HAL_GPIO_Init+0x334>)
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3301      	adds	r3, #1
 80010aa:	61fb      	str	r3, [r7, #28]
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	2b0f      	cmp	r3, #15
 80010b0:	f67f ae90 	bls.w	8000dd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	3724      	adds	r7, #36	; 0x24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40013800 	.word	0x40013800
 80010cc:	40020000 	.word	0x40020000
 80010d0:	40020400 	.word	0x40020400
 80010d4:	40020800 	.word	0x40020800
 80010d8:	40020c00 	.word	0x40020c00
 80010dc:	40021000 	.word	0x40021000
 80010e0:	40021400 	.word	0x40021400
 80010e4:	40021800 	.word	0x40021800
 80010e8:	40021c00 	.word	0x40021c00
 80010ec:	40013c00 	.word	0x40013c00

080010f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d101      	bne.n	8001102 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e264      	b.n	80015cc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	2b00      	cmp	r3, #0
 800110c:	d075      	beq.n	80011fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800110e:	4ba3      	ldr	r3, [pc, #652]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 030c 	and.w	r3, r3, #12
 8001116:	2b04      	cmp	r3, #4
 8001118:	d00c      	beq.n	8001134 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800111a:	4ba0      	ldr	r3, [pc, #640]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001122:	2b08      	cmp	r3, #8
 8001124:	d112      	bne.n	800114c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001126:	4b9d      	ldr	r3, [pc, #628]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800112e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001132:	d10b      	bne.n	800114c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001134:	4b99      	ldr	r3, [pc, #612]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d05b      	beq.n	80011f8 <HAL_RCC_OscConfig+0x108>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d157      	bne.n	80011f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e23f      	b.n	80015cc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001154:	d106      	bne.n	8001164 <HAL_RCC_OscConfig+0x74>
 8001156:	4b91      	ldr	r3, [pc, #580]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a90      	ldr	r2, [pc, #576]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 800115c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	e01d      	b.n	80011a0 <HAL_RCC_OscConfig+0xb0>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800116c:	d10c      	bne.n	8001188 <HAL_RCC_OscConfig+0x98>
 800116e:	4b8b      	ldr	r3, [pc, #556]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a8a      	ldr	r2, [pc, #552]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001174:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001178:	6013      	str	r3, [r2, #0]
 800117a:	4b88      	ldr	r3, [pc, #544]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a87      	ldr	r2, [pc, #540]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	e00b      	b.n	80011a0 <HAL_RCC_OscConfig+0xb0>
 8001188:	4b84      	ldr	r3, [pc, #528]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a83      	ldr	r2, [pc, #524]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 800118e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001192:	6013      	str	r3, [r2, #0]
 8001194:	4b81      	ldr	r3, [pc, #516]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a80      	ldr	r2, [pc, #512]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 800119a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800119e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d013      	beq.n	80011d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a8:	f7ff fcf4 	bl	8000b94 <HAL_GetTick>
 80011ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011b0:	f7ff fcf0 	bl	8000b94 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b64      	cmp	r3, #100	; 0x64
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e204      	b.n	80015cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c2:	4b76      	ldr	r3, [pc, #472]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d0f0      	beq.n	80011b0 <HAL_RCC_OscConfig+0xc0>
 80011ce:	e014      	b.n	80011fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d0:	f7ff fce0 	bl	8000b94 <HAL_GetTick>
 80011d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011d6:	e008      	b.n	80011ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011d8:	f7ff fcdc 	bl	8000b94 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b64      	cmp	r3, #100	; 0x64
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e1f0      	b.n	80015cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ea:	4b6c      	ldr	r3, [pc, #432]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1f0      	bne.n	80011d8 <HAL_RCC_OscConfig+0xe8>
 80011f6:	e000      	b.n	80011fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d063      	beq.n	80012ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001206:	4b65      	ldr	r3, [pc, #404]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 030c 	and.w	r3, r3, #12
 800120e:	2b00      	cmp	r3, #0
 8001210:	d00b      	beq.n	800122a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001212:	4b62      	ldr	r3, [pc, #392]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800121a:	2b08      	cmp	r3, #8
 800121c:	d11c      	bne.n	8001258 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800121e:	4b5f      	ldr	r3, [pc, #380]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d116      	bne.n	8001258 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800122a:	4b5c      	ldr	r3, [pc, #368]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d005      	beq.n	8001242 <HAL_RCC_OscConfig+0x152>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d001      	beq.n	8001242 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e1c4      	b.n	80015cc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001242:	4b56      	ldr	r3, [pc, #344]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	4952      	ldr	r1, [pc, #328]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001252:	4313      	orrs	r3, r2
 8001254:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001256:	e03a      	b.n	80012ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d020      	beq.n	80012a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001260:	4b4f      	ldr	r3, [pc, #316]	; (80013a0 <HAL_RCC_OscConfig+0x2b0>)
 8001262:	2201      	movs	r2, #1
 8001264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001266:	f7ff fc95 	bl	8000b94 <HAL_GetTick>
 800126a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800126c:	e008      	b.n	8001280 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800126e:	f7ff fc91 	bl	8000b94 <HAL_GetTick>
 8001272:	4602      	mov	r2, r0
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d901      	bls.n	8001280 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e1a5      	b.n	80015cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001280:	4b46      	ldr	r3, [pc, #280]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	2b00      	cmp	r3, #0
 800128a:	d0f0      	beq.n	800126e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800128c:	4b43      	ldr	r3, [pc, #268]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	4940      	ldr	r1, [pc, #256]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 800129c:	4313      	orrs	r3, r2
 800129e:	600b      	str	r3, [r1, #0]
 80012a0:	e015      	b.n	80012ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012a2:	4b3f      	ldr	r3, [pc, #252]	; (80013a0 <HAL_RCC_OscConfig+0x2b0>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a8:	f7ff fc74 	bl	8000b94 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012b0:	f7ff fc70 	bl	8000b94 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e184      	b.n	80015cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012c2:	4b36      	ldr	r3, [pc, #216]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1f0      	bne.n	80012b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0308 	and.w	r3, r3, #8
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d030      	beq.n	800133c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d016      	beq.n	8001310 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012e2:	4b30      	ldr	r3, [pc, #192]	; (80013a4 <HAL_RCC_OscConfig+0x2b4>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012e8:	f7ff fc54 	bl	8000b94 <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012f0:	f7ff fc50 	bl	8000b94 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e164      	b.n	80015cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001302:	4b26      	ldr	r3, [pc, #152]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f0      	beq.n	80012f0 <HAL_RCC_OscConfig+0x200>
 800130e:	e015      	b.n	800133c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001310:	4b24      	ldr	r3, [pc, #144]	; (80013a4 <HAL_RCC_OscConfig+0x2b4>)
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001316:	f7ff fc3d 	bl	8000b94 <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800131e:	f7ff fc39 	bl	8000b94 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e14d      	b.n	80015cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001330:	4b1a      	ldr	r3, [pc, #104]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1f0      	bne.n	800131e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	2b00      	cmp	r3, #0
 8001346:	f000 80a0 	beq.w	800148a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800134a:	2300      	movs	r3, #0
 800134c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800134e:	4b13      	ldr	r3, [pc, #76]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d10f      	bne.n	800137a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	60bb      	str	r3, [r7, #8]
 800135e:	4b0f      	ldr	r3, [pc, #60]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	4a0e      	ldr	r2, [pc, #56]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 8001364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001368:	6413      	str	r3, [r2, #64]	; 0x40
 800136a:	4b0c      	ldr	r3, [pc, #48]	; (800139c <HAL_RCC_OscConfig+0x2ac>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001372:	60bb      	str	r3, [r7, #8]
 8001374:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001376:	2301      	movs	r3, #1
 8001378:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800137a:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <HAL_RCC_OscConfig+0x2b8>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001382:	2b00      	cmp	r3, #0
 8001384:	d121      	bne.n	80013ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001386:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <HAL_RCC_OscConfig+0x2b8>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a07      	ldr	r2, [pc, #28]	; (80013a8 <HAL_RCC_OscConfig+0x2b8>)
 800138c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001390:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001392:	f7ff fbff 	bl	8000b94 <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001398:	e011      	b.n	80013be <HAL_RCC_OscConfig+0x2ce>
 800139a:	bf00      	nop
 800139c:	40023800 	.word	0x40023800
 80013a0:	42470000 	.word	0x42470000
 80013a4:	42470e80 	.word	0x42470e80
 80013a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ac:	f7ff fbf2 	bl	8000b94 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e106      	b.n	80015cc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013be:	4b85      	ldr	r3, [pc, #532]	; (80015d4 <HAL_RCC_OscConfig+0x4e4>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d0f0      	beq.n	80013ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d106      	bne.n	80013e0 <HAL_RCC_OscConfig+0x2f0>
 80013d2:	4b81      	ldr	r3, [pc, #516]	; (80015d8 <HAL_RCC_OscConfig+0x4e8>)
 80013d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d6:	4a80      	ldr	r2, [pc, #512]	; (80015d8 <HAL_RCC_OscConfig+0x4e8>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6713      	str	r3, [r2, #112]	; 0x70
 80013de:	e01c      	b.n	800141a <HAL_RCC_OscConfig+0x32a>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	2b05      	cmp	r3, #5
 80013e6:	d10c      	bne.n	8001402 <HAL_RCC_OscConfig+0x312>
 80013e8:	4b7b      	ldr	r3, [pc, #492]	; (80015d8 <HAL_RCC_OscConfig+0x4e8>)
 80013ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ec:	4a7a      	ldr	r2, [pc, #488]	; (80015d8 <HAL_RCC_OscConfig+0x4e8>)
 80013ee:	f043 0304 	orr.w	r3, r3, #4
 80013f2:	6713      	str	r3, [r2, #112]	; 0x70
 80013f4:	4b78      	ldr	r3, [pc, #480]	; (80015d8 <HAL_RCC_OscConfig+0x4e8>)
 80013f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f8:	4a77      	ldr	r2, [pc, #476]	; (80015d8 <HAL_RCC_OscConfig+0x4e8>)
 80013fa:	f043 0301 	orr.w	r3, r3, #1
 80013fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001400:	e00b      	b.n	800141a <HAL_RCC_OscConfig+0x32a>
 8001402:	4b75      	ldr	r3, [pc, #468]	; (80015d8 <HAL_RCC_OscConfig+0x4e8>)
 8001404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001406:	4a74      	ldr	r2, [pc, #464]	; (80015d8 <HAL_RCC_OscConfig+0x4e8>)
 8001408:	f023 0301 	bic.w	r3, r3, #1
 800140c:	6713      	str	r3, [r2, #112]	; 0x70
 800140e:	4b72      	ldr	r3, [pc, #456]	; (80015d8 <HAL_RCC_OscConfig+0x4e8>)
 8001410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001412:	4a71      	ldr	r2, [pc, #452]	; (80015d8 <HAL_RCC_OscConfig+0x4e8>)
 8001414:	f023 0304 	bic.w	r3, r3, #4
 8001418:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d015      	beq.n	800144e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001422:	f7ff fbb7 	bl	8000b94 <HAL_GetTick>
 8001426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001428:	e00a      	b.n	8001440 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800142a:	f7ff fbb3 	bl	8000b94 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	f241 3288 	movw	r2, #5000	; 0x1388
 8001438:	4293      	cmp	r3, r2
 800143a:	d901      	bls.n	8001440 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e0c5      	b.n	80015cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001440:	4b65      	ldr	r3, [pc, #404]	; (80015d8 <HAL_RCC_OscConfig+0x4e8>)
 8001442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d0ee      	beq.n	800142a <HAL_RCC_OscConfig+0x33a>
 800144c:	e014      	b.n	8001478 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800144e:	f7ff fba1 	bl	8000b94 <HAL_GetTick>
 8001452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001454:	e00a      	b.n	800146c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001456:	f7ff fb9d 	bl	8000b94 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	f241 3288 	movw	r2, #5000	; 0x1388
 8001464:	4293      	cmp	r3, r2
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e0af      	b.n	80015cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800146c:	4b5a      	ldr	r3, [pc, #360]	; (80015d8 <HAL_RCC_OscConfig+0x4e8>)
 800146e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1ee      	bne.n	8001456 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001478:	7dfb      	ldrb	r3, [r7, #23]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d105      	bne.n	800148a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800147e:	4b56      	ldr	r3, [pc, #344]	; (80015d8 <HAL_RCC_OscConfig+0x4e8>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	4a55      	ldr	r2, [pc, #340]	; (80015d8 <HAL_RCC_OscConfig+0x4e8>)
 8001484:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001488:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	2b00      	cmp	r3, #0
 8001490:	f000 809b 	beq.w	80015ca <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001494:	4b50      	ldr	r3, [pc, #320]	; (80015d8 <HAL_RCC_OscConfig+0x4e8>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f003 030c 	and.w	r3, r3, #12
 800149c:	2b08      	cmp	r3, #8
 800149e:	d05c      	beq.n	800155a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d141      	bne.n	800152c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a8:	4b4c      	ldr	r3, [pc, #304]	; (80015dc <HAL_RCC_OscConfig+0x4ec>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ae:	f7ff fb71 	bl	8000b94 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b6:	f7ff fb6d 	bl	8000b94 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e081      	b.n	80015cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014c8:	4b43      	ldr	r3, [pc, #268]	; (80015d8 <HAL_RCC_OscConfig+0x4e8>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1f0      	bne.n	80014b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	69da      	ldr	r2, [r3, #28]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a1b      	ldr	r3, [r3, #32]
 80014dc:	431a      	orrs	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e2:	019b      	lsls	r3, r3, #6
 80014e4:	431a      	orrs	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ea:	085b      	lsrs	r3, r3, #1
 80014ec:	3b01      	subs	r3, #1
 80014ee:	041b      	lsls	r3, r3, #16
 80014f0:	431a      	orrs	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f6:	061b      	lsls	r3, r3, #24
 80014f8:	4937      	ldr	r1, [pc, #220]	; (80015d8 <HAL_RCC_OscConfig+0x4e8>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014fe:	4b37      	ldr	r3, [pc, #220]	; (80015dc <HAL_RCC_OscConfig+0x4ec>)
 8001500:	2201      	movs	r2, #1
 8001502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001504:	f7ff fb46 	bl	8000b94 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800150c:	f7ff fb42 	bl	8000b94 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e056      	b.n	80015cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800151e:	4b2e      	ldr	r3, [pc, #184]	; (80015d8 <HAL_RCC_OscConfig+0x4e8>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0f0      	beq.n	800150c <HAL_RCC_OscConfig+0x41c>
 800152a:	e04e      	b.n	80015ca <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800152c:	4b2b      	ldr	r3, [pc, #172]	; (80015dc <HAL_RCC_OscConfig+0x4ec>)
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001532:	f7ff fb2f 	bl	8000b94 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800153a:	f7ff fb2b 	bl	8000b94 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e03f      	b.n	80015cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800154c:	4b22      	ldr	r3, [pc, #136]	; (80015d8 <HAL_RCC_OscConfig+0x4e8>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1f0      	bne.n	800153a <HAL_RCC_OscConfig+0x44a>
 8001558:	e037      	b.n	80015ca <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d101      	bne.n	8001566 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e032      	b.n	80015cc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001566:	4b1c      	ldr	r3, [pc, #112]	; (80015d8 <HAL_RCC_OscConfig+0x4e8>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d028      	beq.n	80015c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800157e:	429a      	cmp	r2, r3
 8001580:	d121      	bne.n	80015c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800158c:	429a      	cmp	r2, r3
 800158e:	d11a      	bne.n	80015c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001590:	68fa      	ldr	r2, [r7, #12]
 8001592:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001596:	4013      	ands	r3, r2
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800159c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800159e:	4293      	cmp	r3, r2
 80015a0:	d111      	bne.n	80015c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ac:	085b      	lsrs	r3, r3, #1
 80015ae:	3b01      	subs	r3, #1
 80015b0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d107      	bne.n	80015c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d001      	beq.n	80015ca <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e000      	b.n	80015cc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80015ca:	2300      	movs	r3, #0
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40007000 	.word	0x40007000
 80015d8:	40023800 	.word	0x40023800
 80015dc:	42470060 	.word	0x42470060

080015e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d101      	bne.n	80015f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e0cc      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015f4:	4b68      	ldr	r3, [pc, #416]	; (8001798 <HAL_RCC_ClockConfig+0x1b8>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0307 	and.w	r3, r3, #7
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d90c      	bls.n	800161c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001602:	4b65      	ldr	r3, [pc, #404]	; (8001798 <HAL_RCC_ClockConfig+0x1b8>)
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800160a:	4b63      	ldr	r3, [pc, #396]	; (8001798 <HAL_RCC_ClockConfig+0x1b8>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	683a      	ldr	r2, [r7, #0]
 8001614:	429a      	cmp	r2, r3
 8001616:	d001      	beq.n	800161c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e0b8      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d020      	beq.n	800166a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	2b00      	cmp	r3, #0
 8001632:	d005      	beq.n	8001640 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001634:	4b59      	ldr	r3, [pc, #356]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	4a58      	ldr	r2, [pc, #352]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 800163a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800163e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0308 	and.w	r3, r3, #8
 8001648:	2b00      	cmp	r3, #0
 800164a:	d005      	beq.n	8001658 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800164c:	4b53      	ldr	r3, [pc, #332]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	4a52      	ldr	r2, [pc, #328]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001652:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001656:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001658:	4b50      	ldr	r3, [pc, #320]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	494d      	ldr	r1, [pc, #308]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001666:	4313      	orrs	r3, r2
 8001668:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	2b00      	cmp	r3, #0
 8001674:	d044      	beq.n	8001700 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d107      	bne.n	800168e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167e:	4b47      	ldr	r3, [pc, #284]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d119      	bne.n	80016be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e07f      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2b02      	cmp	r3, #2
 8001694:	d003      	beq.n	800169e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800169a:	2b03      	cmp	r3, #3
 800169c:	d107      	bne.n	80016ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800169e:	4b3f      	ldr	r3, [pc, #252]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d109      	bne.n	80016be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e06f      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ae:	4b3b      	ldr	r3, [pc, #236]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e067      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016be:	4b37      	ldr	r3, [pc, #220]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f023 0203 	bic.w	r2, r3, #3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	4934      	ldr	r1, [pc, #208]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016d0:	f7ff fa60 	bl	8000b94 <HAL_GetTick>
 80016d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016d6:	e00a      	b.n	80016ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d8:	f7ff fa5c 	bl	8000b94 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e04f      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ee:	4b2b      	ldr	r3, [pc, #172]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 020c 	and.w	r2, r3, #12
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d1eb      	bne.n	80016d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001700:	4b25      	ldr	r3, [pc, #148]	; (8001798 <HAL_RCC_ClockConfig+0x1b8>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	429a      	cmp	r2, r3
 800170c:	d20c      	bcs.n	8001728 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170e:	4b22      	ldr	r3, [pc, #136]	; (8001798 <HAL_RCC_ClockConfig+0x1b8>)
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001716:	4b20      	ldr	r3, [pc, #128]	; (8001798 <HAL_RCC_ClockConfig+0x1b8>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	683a      	ldr	r2, [r7, #0]
 8001720:	429a      	cmp	r2, r3
 8001722:	d001      	beq.n	8001728 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e032      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	2b00      	cmp	r3, #0
 8001732:	d008      	beq.n	8001746 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001734:	4b19      	ldr	r3, [pc, #100]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	4916      	ldr	r1, [pc, #88]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	4313      	orrs	r3, r2
 8001744:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0308 	and.w	r3, r3, #8
 800174e:	2b00      	cmp	r3, #0
 8001750:	d009      	beq.n	8001766 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001752:	4b12      	ldr	r3, [pc, #72]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	490e      	ldr	r1, [pc, #56]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001762:	4313      	orrs	r3, r2
 8001764:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001766:	f000 f821 	bl	80017ac <HAL_RCC_GetSysClockFreq>
 800176a:	4602      	mov	r2, r0
 800176c:	4b0b      	ldr	r3, [pc, #44]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	091b      	lsrs	r3, r3, #4
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	490a      	ldr	r1, [pc, #40]	; (80017a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001778:	5ccb      	ldrb	r3, [r1, r3]
 800177a:	fa22 f303 	lsr.w	r3, r2, r3
 800177e:	4a09      	ldr	r2, [pc, #36]	; (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001780:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001782:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff f902 	bl	8000990 <HAL_InitTick>

  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40023c00 	.word	0x40023c00
 800179c:	40023800 	.word	0x40023800
 80017a0:	08007248 	.word	0x08007248
 80017a4:	20000000 	.word	0x20000000
 80017a8:	20000004 	.word	0x20000004

080017ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017ac:	b5b0      	push	{r4, r5, r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017b2:	2100      	movs	r1, #0
 80017b4:	6079      	str	r1, [r7, #4]
 80017b6:	2100      	movs	r1, #0
 80017b8:	60f9      	str	r1, [r7, #12]
 80017ba:	2100      	movs	r1, #0
 80017bc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80017be:	2100      	movs	r1, #0
 80017c0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017c2:	4952      	ldr	r1, [pc, #328]	; (800190c <HAL_RCC_GetSysClockFreq+0x160>)
 80017c4:	6889      	ldr	r1, [r1, #8]
 80017c6:	f001 010c 	and.w	r1, r1, #12
 80017ca:	2908      	cmp	r1, #8
 80017cc:	d00d      	beq.n	80017ea <HAL_RCC_GetSysClockFreq+0x3e>
 80017ce:	2908      	cmp	r1, #8
 80017d0:	f200 8094 	bhi.w	80018fc <HAL_RCC_GetSysClockFreq+0x150>
 80017d4:	2900      	cmp	r1, #0
 80017d6:	d002      	beq.n	80017de <HAL_RCC_GetSysClockFreq+0x32>
 80017d8:	2904      	cmp	r1, #4
 80017da:	d003      	beq.n	80017e4 <HAL_RCC_GetSysClockFreq+0x38>
 80017dc:	e08e      	b.n	80018fc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017de:	4b4c      	ldr	r3, [pc, #304]	; (8001910 <HAL_RCC_GetSysClockFreq+0x164>)
 80017e0:	60bb      	str	r3, [r7, #8]
       break;
 80017e2:	e08e      	b.n	8001902 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017e4:	4b4b      	ldr	r3, [pc, #300]	; (8001914 <HAL_RCC_GetSysClockFreq+0x168>)
 80017e6:	60bb      	str	r3, [r7, #8]
      break;
 80017e8:	e08b      	b.n	8001902 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017ea:	4948      	ldr	r1, [pc, #288]	; (800190c <HAL_RCC_GetSysClockFreq+0x160>)
 80017ec:	6849      	ldr	r1, [r1, #4]
 80017ee:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80017f2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017f4:	4945      	ldr	r1, [pc, #276]	; (800190c <HAL_RCC_GetSysClockFreq+0x160>)
 80017f6:	6849      	ldr	r1, [r1, #4]
 80017f8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80017fc:	2900      	cmp	r1, #0
 80017fe:	d024      	beq.n	800184a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001800:	4942      	ldr	r1, [pc, #264]	; (800190c <HAL_RCC_GetSysClockFreq+0x160>)
 8001802:	6849      	ldr	r1, [r1, #4]
 8001804:	0989      	lsrs	r1, r1, #6
 8001806:	4608      	mov	r0, r1
 8001808:	f04f 0100 	mov.w	r1, #0
 800180c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001810:	f04f 0500 	mov.w	r5, #0
 8001814:	ea00 0204 	and.w	r2, r0, r4
 8001818:	ea01 0305 	and.w	r3, r1, r5
 800181c:	493d      	ldr	r1, [pc, #244]	; (8001914 <HAL_RCC_GetSysClockFreq+0x168>)
 800181e:	fb01 f003 	mul.w	r0, r1, r3
 8001822:	2100      	movs	r1, #0
 8001824:	fb01 f102 	mul.w	r1, r1, r2
 8001828:	1844      	adds	r4, r0, r1
 800182a:	493a      	ldr	r1, [pc, #232]	; (8001914 <HAL_RCC_GetSysClockFreq+0x168>)
 800182c:	fba2 0101 	umull	r0, r1, r2, r1
 8001830:	1863      	adds	r3, r4, r1
 8001832:	4619      	mov	r1, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	461a      	mov	r2, r3
 8001838:	f04f 0300 	mov.w	r3, #0
 800183c:	f7fe fcc4 	bl	80001c8 <__aeabi_uldivmod>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	4613      	mov	r3, r2
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	e04a      	b.n	80018e0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800184a:	4b30      	ldr	r3, [pc, #192]	; (800190c <HAL_RCC_GetSysClockFreq+0x160>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	099b      	lsrs	r3, r3, #6
 8001850:	461a      	mov	r2, r3
 8001852:	f04f 0300 	mov.w	r3, #0
 8001856:	f240 10ff 	movw	r0, #511	; 0x1ff
 800185a:	f04f 0100 	mov.w	r1, #0
 800185e:	ea02 0400 	and.w	r4, r2, r0
 8001862:	ea03 0501 	and.w	r5, r3, r1
 8001866:	4620      	mov	r0, r4
 8001868:	4629      	mov	r1, r5
 800186a:	f04f 0200 	mov.w	r2, #0
 800186e:	f04f 0300 	mov.w	r3, #0
 8001872:	014b      	lsls	r3, r1, #5
 8001874:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001878:	0142      	lsls	r2, r0, #5
 800187a:	4610      	mov	r0, r2
 800187c:	4619      	mov	r1, r3
 800187e:	1b00      	subs	r0, r0, r4
 8001880:	eb61 0105 	sbc.w	r1, r1, r5
 8001884:	f04f 0200 	mov.w	r2, #0
 8001888:	f04f 0300 	mov.w	r3, #0
 800188c:	018b      	lsls	r3, r1, #6
 800188e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001892:	0182      	lsls	r2, r0, #6
 8001894:	1a12      	subs	r2, r2, r0
 8001896:	eb63 0301 	sbc.w	r3, r3, r1
 800189a:	f04f 0000 	mov.w	r0, #0
 800189e:	f04f 0100 	mov.w	r1, #0
 80018a2:	00d9      	lsls	r1, r3, #3
 80018a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80018a8:	00d0      	lsls	r0, r2, #3
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	1912      	adds	r2, r2, r4
 80018b0:	eb45 0303 	adc.w	r3, r5, r3
 80018b4:	f04f 0000 	mov.w	r0, #0
 80018b8:	f04f 0100 	mov.w	r1, #0
 80018bc:	0299      	lsls	r1, r3, #10
 80018be:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80018c2:	0290      	lsls	r0, r2, #10
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	4610      	mov	r0, r2
 80018ca:	4619      	mov	r1, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	461a      	mov	r2, r3
 80018d0:	f04f 0300 	mov.w	r3, #0
 80018d4:	f7fe fc78 	bl	80001c8 <__aeabi_uldivmod>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4613      	mov	r3, r2
 80018de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018e0:	4b0a      	ldr	r3, [pc, #40]	; (800190c <HAL_RCC_GetSysClockFreq+0x160>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	0c1b      	lsrs	r3, r3, #16
 80018e6:	f003 0303 	and.w	r3, r3, #3
 80018ea:	3301      	adds	r3, #1
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80018f0:	68fa      	ldr	r2, [r7, #12]
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f8:	60bb      	str	r3, [r7, #8]
      break;
 80018fa:	e002      	b.n	8001902 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018fc:	4b04      	ldr	r3, [pc, #16]	; (8001910 <HAL_RCC_GetSysClockFreq+0x164>)
 80018fe:	60bb      	str	r3, [r7, #8]
      break;
 8001900:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001902:	68bb      	ldr	r3, [r7, #8]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bdb0      	pop	{r4, r5, r7, pc}
 800190c:	40023800 	.word	0x40023800
 8001910:	00f42400 	.word	0x00f42400
 8001914:	017d7840 	.word	0x017d7840

08001918 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800191c:	4b03      	ldr	r3, [pc, #12]	; (800192c <HAL_RCC_GetHCLKFreq+0x14>)
 800191e:	681b      	ldr	r3, [r3, #0]
}
 8001920:	4618      	mov	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	20000000 	.word	0x20000000

08001930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001934:	f7ff fff0 	bl	8001918 <HAL_RCC_GetHCLKFreq>
 8001938:	4602      	mov	r2, r0
 800193a:	4b05      	ldr	r3, [pc, #20]	; (8001950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	0a9b      	lsrs	r3, r3, #10
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	4903      	ldr	r1, [pc, #12]	; (8001954 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001946:	5ccb      	ldrb	r3, [r1, r3]
 8001948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800194c:	4618      	mov	r0, r3
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40023800 	.word	0x40023800
 8001954:	08007258 	.word	0x08007258

08001958 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	220f      	movs	r2, #15
 8001966:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001968:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <HAL_RCC_GetClockConfig+0x5c>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f003 0203 	and.w	r2, r3, #3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001974:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <HAL_RCC_GetClockConfig+0x5c>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001980:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <HAL_RCC_GetClockConfig+0x5c>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800198c:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <HAL_RCC_GetClockConfig+0x5c>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	08db      	lsrs	r3, r3, #3
 8001992:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800199a:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <HAL_RCC_GetClockConfig+0x60>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0207 	and.w	r2, r3, #7
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	601a      	str	r2, [r3, #0]
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40023c00 	.word	0x40023c00

080019bc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d101      	bne.n	80019ce <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e022      	b.n	8001a14 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d105      	bne.n	80019e6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7fe ff5b 	bl	800089c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2203      	movs	r2, #3
 80019ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f000 f814 	bl	8001a1c <HAL_SD_InitCard>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e00a      	b.n	8001a14 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8001a1c:	b5b0      	push	{r4, r5, r7, lr}
 8001a1e:	b08e      	sub	sp, #56	; 0x38
 8001a20:	af04      	add	r7, sp, #16
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001a24:	2300      	movs	r3, #0
 8001a26:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001a34:	2300      	movs	r3, #0
 8001a36:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8001a38:	2376      	movs	r3, #118	; 0x76
 8001a3a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681d      	ldr	r5, [r3, #0]
 8001a40:	466c      	mov	r4, sp
 8001a42:	f107 0314 	add.w	r3, r7, #20
 8001a46:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001a4e:	f107 0308 	add.w	r3, r7, #8
 8001a52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a54:	4628      	mov	r0, r5
 8001a56:	f001 fbe5 	bl	8003224 <SDIO_Init>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8001a60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e04c      	b.n	8001b06 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8001a6c:	4b28      	ldr	r3, [pc, #160]	; (8001b10 <HAL_SD_InitCard+0xf4>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f001 fc1d 	bl	80032b6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8001a7c:	4b24      	ldr	r3, [pc, #144]	; (8001b10 <HAL_SD_InitCard+0xf4>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f000 ff02 	bl	800288c <SD_PowerON>
 8001a88:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001a8a:	6a3b      	ldr	r3, [r7, #32]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d00b      	beq.n	8001aa8 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a9c:	6a3b      	ldr	r3, [r7, #32]
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e02e      	b.n	8001b06 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f000 fe23 	bl	80026f4 <SD_InitCard>
 8001aae:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001ab0:	6a3b      	ldr	r3, [r7, #32]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d00b      	beq.n	8001ace <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ac2:	6a3b      	ldr	r3, [r7, #32]
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e01b      	b.n	8001b06 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f001 fc80 	bl	80033dc <SDMMC_CmdBlockLength>
 8001adc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001ade:	6a3b      	ldr	r3, [r7, #32]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d00f      	beq.n	8001b04 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a0a      	ldr	r2, [pc, #40]	; (8001b14 <HAL_SD_InitCard+0xf8>)
 8001aea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001af0:	6a3b      	ldr	r3, [r7, #32]
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e000      	b.n	8001b06 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3728      	adds	r7, #40	; 0x28
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	422580a0 	.word	0x422580a0
 8001b14:	004005ff 	.word	0x004005ff

08001b18 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b092      	sub	sp, #72	; 0x48
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
 8001b24:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8001b26:	f7ff f835 	bl	8000b94 <HAL_GetTick>
 8001b2a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d107      	bne.n	8001b4a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b3e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e1bd      	b.n	8001ec6 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	f040 81b0 	bne.w	8001eb8 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001b5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	441a      	add	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d907      	bls.n	8001b7c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b70:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e1a4      	b.n	8001ec6 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2203      	movs	r2, #3
 8001b80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d002      	beq.n	8001b9a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8001b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b96:	025b      	lsls	r3, r3, #9
 8001b98:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001b9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b9e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	025b      	lsls	r3, r3, #9
 8001ba4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001ba6:	2390      	movs	r3, #144	; 0x90
 8001ba8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001baa:	2302      	movs	r3, #2
 8001bac:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f107 0214 	add.w	r2, r7, #20
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f001 fbdf 	bl	8003384 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d90a      	bls.n	8001be2 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2202      	movs	r2, #2
 8001bd0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f001 fc43 	bl	8003464 <SDMMC_CmdReadMultiBlock>
 8001bde:	6478      	str	r0, [r7, #68]	; 0x44
 8001be0:	e009      	b.n	8001bf6 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2201      	movs	r2, #1
 8001be6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f001 fc16 	bl	8003420 <SDMMC_CmdReadSingleBlock>
 8001bf4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8001bf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d012      	beq.n	8001c22 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a7a      	ldr	r2, [pc, #488]	; (8001dec <HAL_SD_ReadBlocks+0x2d4>)
 8001c02:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e151      	b.n	8001ec6 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001c26:	e061      	b.n	8001cec <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d03c      	beq.n	8001cb0 <HAL_SD_ReadBlocks+0x198>
 8001c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d039      	beq.n	8001cb0 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	643b      	str	r3, [r7, #64]	; 0x40
 8001c40:	e033      	b.n	8001caa <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f001 fb17 	bl	800327a <SDIO_ReadFIFO>
 8001c4c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8001c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c54:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c58:	3301      	adds	r3, #1
 8001c5a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8001c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c64:	0a1b      	lsrs	r3, r3, #8
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c6a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c6e:	3301      	adds	r3, #1
 8001c70:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c74:	3b01      	subs	r3, #1
 8001c76:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8001c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c7a:	0c1b      	lsrs	r3, r3, #16
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c80:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c84:	3301      	adds	r3, #1
 8001c86:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8001c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c90:	0e1b      	lsrs	r3, r3, #24
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c96:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8001ca4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	643b      	str	r3, [r7, #64]	; 0x40
 8001caa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cac:	2b07      	cmp	r3, #7
 8001cae:	d9c8      	bls.n	8001c42 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8001cb0:	f7fe ff70 	bl	8000b94 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d902      	bls.n	8001cc6 <HAL_SD_ReadBlocks+0x1ae>
 8001cc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d112      	bne.n	8001cec <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a48      	ldr	r2, [pc, #288]	; (8001dec <HAL_SD_ReadBlocks+0x2d4>)
 8001ccc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e0ec      	b.n	8001ec6 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cf2:	f240 332a 	movw	r3, #810	; 0x32a
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d095      	beq.n	8001c28 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d022      	beq.n	8001d50 <HAL_SD_ReadBlocks+0x238>
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d91f      	bls.n	8001d50 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d14:	2b03      	cmp	r3, #3
 8001d16:	d01b      	beq.n	8001d50 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f001 fc07 	bl	8003530 <SDMMC_CmdStopTransfer>
 8001d22:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8001d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d012      	beq.n	8001d50 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a2f      	ldr	r2, [pc, #188]	; (8001dec <HAL_SD_ReadBlocks+0x2d4>)
 8001d30:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e0ba      	b.n	8001ec6 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d012      	beq.n	8001d84 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a22      	ldr	r2, [pc, #136]	; (8001dec <HAL_SD_ReadBlocks+0x2d4>)
 8001d64:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d6a:	f043 0208 	orr.w	r2, r3, #8
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2201      	movs	r2, #1
 8001d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e0a0      	b.n	8001ec6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d012      	beq.n	8001db8 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a15      	ldr	r2, [pc, #84]	; (8001dec <HAL_SD_ReadBlocks+0x2d4>)
 8001d98:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d9e:	f043 0202 	orr.w	r2, r3, #2
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e086      	b.n	8001ec6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dbe:	f003 0320 	and.w	r3, r3, #32
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d063      	beq.n	8001e8e <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a08      	ldr	r2, [pc, #32]	; (8001dec <HAL_SD_ReadBlocks+0x2d4>)
 8001dcc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd2:	f043 0220 	orr.w	r2, r3, #32
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e06c      	b.n	8001ec6 <HAL_SD_ReadBlocks+0x3ae>
 8001dec:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f001 fa40 	bl	800327a <SDIO_ReadFIFO>
 8001dfa:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8001dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e02:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8001e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e06:	3301      	adds	r3, #1
 8001e08:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8001e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8001e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e12:	0a1b      	lsrs	r3, r3, #8
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e18:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8001e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8001e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e22:	3b01      	subs	r3, #1
 8001e24:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8001e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e28:	0c1b      	lsrs	r3, r3, #16
 8001e2a:	b2da      	uxtb	r2, r3
 8001e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e2e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8001e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e32:	3301      	adds	r3, #1
 8001e34:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8001e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8001e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e3e:	0e1b      	lsrs	r3, r3, #24
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e44:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8001e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e48:	3301      	adds	r3, #1
 8001e4a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8001e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8001e52:	f7fe fe9f 	bl	8000b94 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d902      	bls.n	8001e68 <HAL_SD_ReadBlocks+0x350>
 8001e62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d112      	bne.n	8001e8e <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a18      	ldr	r2, [pc, #96]	; (8001ed0 <HAL_SD_ReadBlocks+0x3b8>)
 8001e6e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e74:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e01b      	b.n	8001ec6 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d002      	beq.n	8001ea2 <HAL_SD_ReadBlocks+0x38a>
 8001e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1a6      	bne.n	8001df0 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f240 523a 	movw	r2, #1338	; 0x53a
 8001eaa:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	e006      	b.n	8001ec6 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ebc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
  }
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3748      	adds	r7, #72	; 0x48
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	004005ff 	.word	0x004005ff

08001ed4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b092      	sub	sp, #72	; 0x48
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
 8001ee0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8001ee2:	f7fe fe57 	bl	8000b94 <HAL_GetTick>
 8001ee6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d107      	bne.n	8001f06 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001efa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e166      	b.n	80021d4 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	f040 8159 	bne.w	80021c6 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2200      	movs	r2, #0
 8001f18:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001f1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	441a      	add	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d907      	bls.n	8001f38 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f2c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e14d      	b.n	80021d4 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2203      	movs	r2, #3
 8001f3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2200      	movs	r2, #0
 8001f46:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d002      	beq.n	8001f56 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8001f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f52:	025b      	lsls	r3, r3, #9
 8001f54:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001f56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f5a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	025b      	lsls	r3, r3, #9
 8001f60:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001f62:	2390      	movs	r3, #144	; 0x90
 8001f64:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8001f66:	2300      	movs	r3, #0
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f107 0218 	add.w	r2, r7, #24
 8001f7a:	4611      	mov	r1, r2
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f001 fa01 	bl	8003384 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d90a      	bls.n	8001f9e <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2220      	movs	r2, #32
 8001f8c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f94:	4618      	mov	r0, r3
 8001f96:	f001 faa9 	bl	80034ec <SDMMC_CmdWriteMultiBlock>
 8001f9a:	6478      	str	r0, [r7, #68]	; 0x44
 8001f9c:	e009      	b.n	8001fb2 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2210      	movs	r2, #16
 8001fa2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001faa:	4618      	mov	r0, r3
 8001fac:	f001 fa7c 	bl	80034a8 <SDMMC_CmdWriteSingleBlock>
 8001fb0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8001fb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d012      	beq.n	8001fde <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a87      	ldr	r2, [pc, #540]	; (80021dc <HAL_SD_WriteBlocks+0x308>)
 8001fbe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e0fa      	b.n	80021d4 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001fe2:	e065      	b.n	80020b0 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d040      	beq.n	8002074 <HAL_SD_WriteBlocks+0x1a0>
 8001ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d03d      	beq.n	8002074 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	643b      	str	r3, [r7, #64]	; 0x40
 8001ffc:	e037      	b.n	800206e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8001ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002006:	3301      	adds	r3, #1
 8002008:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800200a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800200c:	3b01      	subs	r3, #1
 800200e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8002010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	021a      	lsls	r2, r3, #8
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	4313      	orrs	r3, r2
 800201a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800201c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800201e:	3301      	adds	r3, #1
 8002020:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002024:	3b01      	subs	r3, #1
 8002026:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8002028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	041a      	lsls	r2, r3, #16
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	4313      	orrs	r3, r2
 8002032:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002036:	3301      	adds	r3, #1
 8002038:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800203a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800203c:	3b01      	subs	r3, #1
 800203e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8002040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	061a      	lsls	r2, r3, #24
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	4313      	orrs	r3, r2
 800204a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800204c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800204e:	3301      	adds	r3, #1
 8002050:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002054:	3b01      	subs	r3, #1
 8002056:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f107 0214 	add.w	r2, r7, #20
 8002060:	4611      	mov	r1, r2
 8002062:	4618      	mov	r0, r3
 8002064:	f001 f916 	bl	8003294 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8002068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800206a:	3301      	adds	r3, #1
 800206c:	643b      	str	r3, [r7, #64]	; 0x40
 800206e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002070:	2b07      	cmp	r3, #7
 8002072:	d9c4      	bls.n	8001ffe <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002074:	f7fe fd8e 	bl	8000b94 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002080:	429a      	cmp	r2, r3
 8002082:	d902      	bls.n	800208a <HAL_SD_WriteBlocks+0x1b6>
 8002084:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002086:	2b00      	cmp	r3, #0
 8002088:	d112      	bne.n	80020b0 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a53      	ldr	r2, [pc, #332]	; (80021dc <HAL_SD_WriteBlocks+0x308>)
 8002090:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002096:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002098:	431a      	orrs	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e091      	b.n	80021d4 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020b6:	f240 331a 	movw	r3, #794	; 0x31a
 80020ba:	4013      	ands	r3, r2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d091      	beq.n	8001fe4 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d022      	beq.n	8002114 <HAL_SD_WriteBlocks+0x240>
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d91f      	bls.n	8002114 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d8:	2b03      	cmp	r3, #3
 80020da:	d01b      	beq.n	8002114 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f001 fa25 	bl	8003530 <SDMMC_CmdStopTransfer>
 80020e6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80020e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d012      	beq.n	8002114 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a3a      	ldr	r2, [pc, #232]	; (80021dc <HAL_SD_WriteBlocks+0x308>)
 80020f4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020fc:	431a      	orrs	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e05f      	b.n	80021d4 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800211a:	f003 0308 	and.w	r3, r3, #8
 800211e:	2b00      	cmp	r3, #0
 8002120:	d012      	beq.n	8002148 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a2d      	ldr	r2, [pc, #180]	; (80021dc <HAL_SD_WriteBlocks+0x308>)
 8002128:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212e:	f043 0208 	orr.w	r2, r3, #8
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e045      	b.n	80021d4 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d012      	beq.n	800217c <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a20      	ldr	r2, [pc, #128]	; (80021dc <HAL_SD_WriteBlocks+0x308>)
 800215c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002162:	f043 0202 	orr.w	r2, r3, #2
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e02b      	b.n	80021d4 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002182:	f003 0310 	and.w	r3, r3, #16
 8002186:	2b00      	cmp	r3, #0
 8002188:	d012      	beq.n	80021b0 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a13      	ldr	r2, [pc, #76]	; (80021dc <HAL_SD_WriteBlocks+0x308>)
 8002190:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002196:	f043 0210 	orr.w	r2, r3, #16
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e011      	b.n	80021d4 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f240 523a 	movw	r2, #1338	; 0x53a
 80021b8:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2201      	movs	r2, #1
 80021be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80021c2:	2300      	movs	r3, #0
 80021c4:	e006      	b.n	80021d4 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
  }
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3748      	adds	r7, #72	; 0x48
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	004005ff 	.word	0x004005ff

080021e0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021ee:	0f9b      	lsrs	r3, r3, #30
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021fa:	0e9b      	lsrs	r3, r3, #26
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	f003 030f 	and.w	r3, r3, #15
 8002202:	b2da      	uxtb	r2, r3
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800220c:	0e1b      	lsrs	r3, r3, #24
 800220e:	b2db      	uxtb	r3, r3
 8002210:	f003 0303 	and.w	r3, r3, #3
 8002214:	b2da      	uxtb	r2, r3
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800221e:	0c1b      	lsrs	r3, r3, #16
 8002220:	b2da      	uxtb	r2, r3
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800222a:	0a1b      	lsrs	r3, r3, #8
 800222c:	b2da      	uxtb	r2, r3
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002236:	b2da      	uxtb	r2, r3
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002240:	0d1b      	lsrs	r3, r3, #20
 8002242:	b29a      	uxth	r2, r3
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800224c:	0c1b      	lsrs	r3, r3, #16
 800224e:	b2db      	uxtb	r3, r3
 8002250:	f003 030f 	and.w	r3, r3, #15
 8002254:	b2da      	uxtb	r2, r3
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800225e:	0bdb      	lsrs	r3, r3, #15
 8002260:	b2db      	uxtb	r3, r3
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	b2da      	uxtb	r2, r3
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002270:	0b9b      	lsrs	r3, r3, #14
 8002272:	b2db      	uxtb	r3, r3
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	b2da      	uxtb	r2, r3
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002282:	0b5b      	lsrs	r3, r3, #13
 8002284:	b2db      	uxtb	r3, r3
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	b2da      	uxtb	r2, r3
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002294:	0b1b      	lsrs	r3, r3, #12
 8002296:	b2db      	uxtb	r3, r3
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	b2da      	uxtb	r2, r3
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	2200      	movs	r2, #0
 80022a6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d163      	bne.n	8002378 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022b4:	009a      	lsls	r2, r3, #2
 80022b6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80022ba:	4013      	ands	r3, r2
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80022c0:	0f92      	lsrs	r2, r2, #30
 80022c2:	431a      	orrs	r2, r3
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022cc:	0edb      	lsrs	r3, r3, #27
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	f003 0307 	and.w	r3, r3, #7
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022de:	0e1b      	lsrs	r3, r3, #24
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022f0:	0d5b      	lsrs	r3, r3, #21
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002302:	0c9b      	lsrs	r3, r3, #18
 8002304:	b2db      	uxtb	r3, r3
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	b2da      	uxtb	r2, r3
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002314:	0bdb      	lsrs	r3, r3, #15
 8002316:	b2db      	uxtb	r3, r3
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	b2da      	uxtb	r2, r3
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	1c5a      	adds	r2, r3, #1
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	7e1b      	ldrb	r3, [r3, #24]
 8002330:	b2db      	uxtb	r3, r3
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	3302      	adds	r3, #2
 8002338:	2201      	movs	r2, #1
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002342:	fb02 f203 	mul.w	r2, r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	7a1b      	ldrb	r3, [r3, #8]
 800234e:	b2db      	uxtb	r3, r3
 8002350:	f003 030f 	and.w	r3, r3, #15
 8002354:	2201      	movs	r2, #1
 8002356:	409a      	lsls	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002364:	0a52      	lsrs	r2, r2, #9
 8002366:	fb02 f203 	mul.w	r2, r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002374:	661a      	str	r2, [r3, #96]	; 0x60
 8002376:	e031      	b.n	80023dc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237c:	2b01      	cmp	r3, #1
 800237e:	d11d      	bne.n	80023bc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002384:	041b      	lsls	r3, r3, #16
 8002386:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800238e:	0c1b      	lsrs	r3, r3, #16
 8002390:	431a      	orrs	r2, r3
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	3301      	adds	r3, #1
 800239c:	029a      	lsls	r2, r3, #10
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023b0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	661a      	str	r2, [r3, #96]	; 0x60
 80023ba:	e00f      	b.n	80023dc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a58      	ldr	r2, [pc, #352]	; (8002524 <HAL_SD_GetCardCSD+0x344>)
 80023c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e09d      	b.n	8002518 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023e0:	0b9b      	lsrs	r3, r3, #14
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023f2:	09db      	lsrs	r3, r3, #7
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002404:	b2db      	uxtb	r3, r3
 8002406:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800240a:	b2da      	uxtb	r2, r3
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002414:	0fdb      	lsrs	r3, r3, #31
 8002416:	b2da      	uxtb	r2, r3
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002420:	0f5b      	lsrs	r3, r3, #29
 8002422:	b2db      	uxtb	r3, r3
 8002424:	f003 0303 	and.w	r3, r3, #3
 8002428:	b2da      	uxtb	r2, r3
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002432:	0e9b      	lsrs	r3, r3, #26
 8002434:	b2db      	uxtb	r3, r3
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	b2da      	uxtb	r2, r3
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002444:	0d9b      	lsrs	r3, r3, #22
 8002446:	b2db      	uxtb	r3, r3
 8002448:	f003 030f 	and.w	r3, r3, #15
 800244c:	b2da      	uxtb	r2, r3
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002456:	0d5b      	lsrs	r3, r3, #21
 8002458:	b2db      	uxtb	r3, r3
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	b2da      	uxtb	r2, r3
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002472:	0c1b      	lsrs	r3, r3, #16
 8002474:	b2db      	uxtb	r3, r3
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	b2da      	uxtb	r2, r3
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002486:	0bdb      	lsrs	r3, r3, #15
 8002488:	b2db      	uxtb	r3, r3
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	b2da      	uxtb	r2, r3
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249a:	0b9b      	lsrs	r3, r3, #14
 800249c:	b2db      	uxtb	r3, r3
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ae:	0b5b      	lsrs	r3, r3, #13
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c2:	0b1b      	lsrs	r3, r3, #12
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	b2da      	uxtb	r2, r3
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d6:	0a9b      	lsrs	r3, r3, #10
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ea:	0a1b      	lsrs	r3, r3, #8
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fe:	085b      	lsrs	r3, r3, #1
 8002500:	b2db      	uxtb	r3, r3
 8002502:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002506:	b2da      	uxtb	r2, r3
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	004005ff 	.word	0x004005ff

08002528 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8002580:	b5b0      	push	{r4, r5, r7, lr}
 8002582:	b08e      	sub	sp, #56	; 0x38
 8002584:	af04      	add	r7, sp, #16
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800258a:	2300      	movs	r3, #0
 800258c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2203      	movs	r2, #3
 8002594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259c:	2b03      	cmp	r3, #3
 800259e:	d02e      	beq.n	80025fe <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025a6:	d106      	bne.n	80025b6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	639a      	str	r2, [r3, #56]	; 0x38
 80025b4:	e029      	b.n	800260a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025bc:	d10a      	bne.n	80025d4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 fa1a 	bl	80029f8 <SD_WideBus_Enable>
 80025c4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025ca:	6a3b      	ldr	r3, [r7, #32]
 80025cc:	431a      	orrs	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	639a      	str	r2, [r3, #56]	; 0x38
 80025d2:	e01a      	b.n	800260a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10a      	bne.n	80025f0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 fa57 	bl	8002a8e <SD_WideBus_Disable>
 80025e0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025e6:	6a3b      	ldr	r3, [r7, #32]
 80025e8:	431a      	orrs	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	639a      	str	r2, [r3, #56]	; 0x38
 80025ee:	e00c      	b.n	800260a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	639a      	str	r2, [r3, #56]	; 0x38
 80025fc:	e005      	b.n	800260a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002602:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00b      	beq.n	800262a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a26      	ldr	r2, [pc, #152]	; (80026b0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8002618:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002628:	e01f      	b.n	800266a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681d      	ldr	r5, [r3, #0]
 8002650:	466c      	mov	r4, sp
 8002652:	f107 0314 	add.w	r3, r7, #20
 8002656:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800265a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800265e:	f107 0308 	add.w	r3, r7, #8
 8002662:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002664:	4628      	mov	r0, r5
 8002666:	f000 fddd 	bl	8003224 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002672:	4618      	mov	r0, r3
 8002674:	f000 feb2 	bl	80033dc <SDMMC_CmdBlockLength>
 8002678:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800267a:	6a3b      	ldr	r3, [r7, #32]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00c      	beq.n	800269a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a0a      	ldr	r2, [pc, #40]	; (80026b0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8002686:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800268c:	6a3b      	ldr	r3, [r7, #32]
 800268e:	431a      	orrs	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80026a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3728      	adds	r7, #40	; 0x28
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bdb0      	pop	{r4, r5, r7, pc}
 80026ae:	bf00      	nop
 80026b0:	004005ff 	.word	0x004005ff

080026b4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80026bc:	2300      	movs	r3, #0
 80026be:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80026c0:	f107 030c 	add.w	r3, r7, #12
 80026c4:	4619      	mov	r1, r3
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f96e 	bl	80029a8 <SD_SendStatus>
 80026cc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d005      	beq.n	80026e0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	0a5b      	lsrs	r3, r3, #9
 80026e4:	f003 030f 	and.w	r3, r3, #15
 80026e8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80026ea:	693b      	ldr	r3, [r7, #16]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80026f4:	b5b0      	push	{r4, r5, r7, lr}
 80026f6:	b094      	sub	sp, #80	; 0x50
 80026f8:	af04      	add	r7, sp, #16
 80026fa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80026fc:	2301      	movs	r3, #1
 80026fe:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f000 fde5 	bl	80032d4 <SDIO_GetPowerState>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d102      	bne.n	8002716 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002710:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002714:	e0b6      	b.n	8002884 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	2b03      	cmp	r3, #3
 800271c:	d02f      	beq.n	800277e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f001 f80e 	bl	8003744 <SDMMC_CmdSendCID>
 8002728:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800272a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <SD_InitCard+0x40>
    {
      return errorstate;
 8002730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002732:	e0a7      	b.n	8002884 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2100      	movs	r1, #0
 800273a:	4618      	mov	r0, r3
 800273c:	f000 fe0f 	bl	800335e <SDIO_GetResponse>
 8002740:	4602      	mov	r2, r0
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2104      	movs	r1, #4
 800274c:	4618      	mov	r0, r3
 800274e:	f000 fe06 	bl	800335e <SDIO_GetResponse>
 8002752:	4602      	mov	r2, r0
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2108      	movs	r1, #8
 800275e:	4618      	mov	r0, r3
 8002760:	f000 fdfd 	bl	800335e <SDIO_GetResponse>
 8002764:	4602      	mov	r2, r0
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	210c      	movs	r1, #12
 8002770:	4618      	mov	r0, r3
 8002772:	f000 fdf4 	bl	800335e <SDIO_GetResponse>
 8002776:	4602      	mov	r2, r0
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	2b03      	cmp	r3, #3
 8002784:	d00d      	beq.n	80027a2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f107 020e 	add.w	r2, r7, #14
 800278e:	4611      	mov	r1, r2
 8002790:	4618      	mov	r0, r3
 8002792:	f001 f814 	bl	80037be <SDMMC_CmdSetRelAdd>
 8002796:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <SD_InitCard+0xae>
    {
      return errorstate;
 800279e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027a0:	e070      	b.n	8002884 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a6:	2b03      	cmp	r3, #3
 80027a8:	d036      	beq.n	8002818 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80027aa:	89fb      	ldrh	r3, [r7, #14]
 80027ac:	461a      	mov	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ba:	041b      	lsls	r3, r3, #16
 80027bc:	4619      	mov	r1, r3
 80027be:	4610      	mov	r0, r2
 80027c0:	f000 ffde 	bl	8003780 <SDMMC_CmdSendCSD>
 80027c4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80027c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <SD_InitCard+0xdc>
    {
      return errorstate;
 80027cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027ce:	e059      	b.n	8002884 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2100      	movs	r1, #0
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 fdc1 	bl	800335e <SDIO_GetResponse>
 80027dc:	4602      	mov	r2, r0
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2104      	movs	r1, #4
 80027e8:	4618      	mov	r0, r3
 80027ea:	f000 fdb8 	bl	800335e <SDIO_GetResponse>
 80027ee:	4602      	mov	r2, r0
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2108      	movs	r1, #8
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 fdaf 	bl	800335e <SDIO_GetResponse>
 8002800:	4602      	mov	r2, r0
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	210c      	movs	r1, #12
 800280c:	4618      	mov	r0, r3
 800280e:	f000 fda6 	bl	800335e <SDIO_GetResponse>
 8002812:	4602      	mov	r2, r0
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2104      	movs	r1, #4
 800281e:	4618      	mov	r0, r3
 8002820:	f000 fd9d 	bl	800335e <SDIO_GetResponse>
 8002824:	4603      	mov	r3, r0
 8002826:	0d1a      	lsrs	r2, r3, #20
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800282c:	f107 0310 	add.w	r3, r7, #16
 8002830:	4619      	mov	r1, r3
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7ff fcd4 	bl	80021e0 <HAL_SD_GetCardCSD>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d002      	beq.n	8002844 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800283e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002842:	e01f      	b.n	8002884 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6819      	ldr	r1, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800284c:	041b      	lsls	r3, r3, #16
 800284e:	461a      	mov	r2, r3
 8002850:	f04f 0300 	mov.w	r3, #0
 8002854:	4608      	mov	r0, r1
 8002856:	f000 fe8d 	bl	8003574 <SDMMC_CmdSelDesel>
 800285a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800285c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <SD_InitCard+0x172>
  {
    return errorstate;
 8002862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002864:	e00e      	b.n	8002884 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681d      	ldr	r5, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	466c      	mov	r4, sp
 800286e:	f103 0210 	add.w	r2, r3, #16
 8002872:	ca07      	ldmia	r2, {r0, r1, r2}
 8002874:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002878:	3304      	adds	r3, #4
 800287a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800287c:	4628      	mov	r0, r5
 800287e:	f000 fcd1 	bl	8003224 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3740      	adds	r7, #64	; 0x40
 8002888:	46bd      	mov	sp, r7
 800288a:	bdb0      	pop	{r4, r5, r7, pc}

0800288c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002894:	2300      	movs	r3, #0
 8002896:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8002898:	2300      	movs	r3, #0
 800289a:	617b      	str	r3, [r7, #20]
 800289c:	2300      	movs	r3, #0
 800289e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f000 fe88 	bl	80035ba <SDMMC_CmdGoIdleState>
 80028aa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	e072      	b.n	800299c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f000 fe9b 	bl	80035f6 <SDMMC_CmdOperCond>
 80028c0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00d      	beq.n	80028e4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f000 fe71 	bl	80035ba <SDMMC_CmdGoIdleState>
 80028d8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d004      	beq.n	80028ea <SD_PowerON+0x5e>
    {
      return errorstate;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	e05b      	b.n	800299c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d137      	bne.n	8002962 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2100      	movs	r1, #0
 80028f8:	4618      	mov	r0, r3
 80028fa:	f000 fe9b 	bl	8003634 <SDMMC_CmdAppCommand>
 80028fe:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d02d      	beq.n	8002962 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002906:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800290a:	e047      	b.n	800299c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2100      	movs	r1, #0
 8002912:	4618      	mov	r0, r3
 8002914:	f000 fe8e 	bl	8003634 <SDMMC_CmdAppCommand>
 8002918:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <SD_PowerON+0x98>
    {
      return errorstate;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	e03b      	b.n	800299c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	491e      	ldr	r1, [pc, #120]	; (80029a4 <SD_PowerON+0x118>)
 800292a:	4618      	mov	r0, r3
 800292c:	f000 fea4 	bl	8003678 <SDMMC_CmdAppOperCommand>
 8002930:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d002      	beq.n	800293e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002938:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800293c:	e02e      	b.n	800299c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2100      	movs	r1, #0
 8002944:	4618      	mov	r0, r3
 8002946:	f000 fd0a 	bl	800335e <SDIO_GetResponse>
 800294a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	0fdb      	lsrs	r3, r3, #31
 8002950:	2b01      	cmp	r3, #1
 8002952:	d101      	bne.n	8002958 <SD_PowerON+0xcc>
 8002954:	2301      	movs	r3, #1
 8002956:	e000      	b.n	800295a <SD_PowerON+0xce>
 8002958:	2300      	movs	r3, #0
 800295a:	613b      	str	r3, [r7, #16]

    count++;
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	3301      	adds	r3, #1
 8002960:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002968:	4293      	cmp	r3, r2
 800296a:	d802      	bhi.n	8002972 <SD_PowerON+0xe6>
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0cc      	beq.n	800290c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002978:	4293      	cmp	r3, r2
 800297a:	d902      	bls.n	8002982 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800297c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002980:	e00c      	b.n	800299c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	645a      	str	r2, [r3, #68]	; 0x44
 8002992:	e002      	b.n	800299a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3718      	adds	r7, #24
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	c1100000 	.word	0xc1100000

080029a8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d102      	bne.n	80029be <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80029b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80029bc:	e018      	b.n	80029f0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029c6:	041b      	lsls	r3, r3, #16
 80029c8:	4619      	mov	r1, r3
 80029ca:	4610      	mov	r0, r2
 80029cc:	f000 ff18 	bl	8003800 <SDMMC_CmdSendStatus>
 80029d0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <SD_SendStatus+0x34>
  {
    return errorstate;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	e009      	b.n	80029f0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2100      	movs	r1, #0
 80029e2:	4618      	mov	r0, r3
 80029e4:	f000 fcbb 	bl	800335e <SDIO_GetResponse>
 80029e8:	4602      	mov	r2, r0
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8002a00:	2300      	movs	r3, #0
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	2300      	movs	r3, #0
 8002a06:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f000 fca5 	bl	800335e <SDIO_GetResponse>
 8002a14:	4603      	mov	r3, r0
 8002a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a1e:	d102      	bne.n	8002a26 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002a20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a24:	e02f      	b.n	8002a86 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8002a26:	f107 030c 	add.w	r3, r7, #12
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 f879 	bl	8002b24 <SD_FindSCR>
 8002a32:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	e023      	b.n	8002a86 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d01c      	beq.n	8002a82 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a50:	041b      	lsls	r3, r3, #16
 8002a52:	4619      	mov	r1, r3
 8002a54:	4610      	mov	r0, r2
 8002a56:	f000 fded 	bl	8003634 <SDMMC_CmdAppCommand>
 8002a5a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	e00f      	b.n	8002a86 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2102      	movs	r1, #2
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f000 fe26 	bl	80036be <SDMMC_CmdBusWidth>
 8002a72:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	e003      	b.n	8002a86 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	e001      	b.n	8002a86 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002a82:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b086      	sub	sp, #24
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8002a96:	2300      	movs	r3, #0
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f000 fc5a 	bl	800335e <SDIO_GetResponse>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ab4:	d102      	bne.n	8002abc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002ab6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002aba:	e02f      	b.n	8002b1c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8002abc:	f107 030c 	add.w	r3, r7, #12
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f82e 	bl	8002b24 <SD_FindSCR>
 8002ac8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	e023      	b.n	8002b1c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d01c      	beq.n	8002b18 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ae6:	041b      	lsls	r3, r3, #16
 8002ae8:	4619      	mov	r1, r3
 8002aea:	4610      	mov	r0, r2
 8002aec:	f000 fda2 	bl	8003634 <SDMMC_CmdAppCommand>
 8002af0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	e00f      	b.n	8002b1c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2100      	movs	r1, #0
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 fddb 	bl	80036be <SDMMC_CmdBusWidth>
 8002b08:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	e003      	b.n	8002b1c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8002b14:	2300      	movs	r3, #0
 8002b16:	e001      	b.n	8002b1c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002b18:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3718      	adds	r7, #24
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8002b24:	b590      	push	{r4, r7, lr}
 8002b26:	b08f      	sub	sp, #60	; 0x3c
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002b2e:	f7fe f831 	bl	8000b94 <HAL_GetTick>
 8002b32:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8002b34:	2300      	movs	r3, #0
 8002b36:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8002b38:	2300      	movs	r3, #0
 8002b3a:	60bb      	str	r3, [r7, #8]
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2108      	movs	r1, #8
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 fc46 	bl	80033dc <SDMMC_CmdBlockLength>
 8002b50:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8002b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <SD_FindSCR+0x38>
  {
    return errorstate;
 8002b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5a:	e0b2      	b.n	8002cc2 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b64:	041b      	lsls	r3, r3, #16
 8002b66:	4619      	mov	r1, r3
 8002b68:	4610      	mov	r0, r2
 8002b6a:	f000 fd63 	bl	8003634 <SDMMC_CmdAppCommand>
 8002b6e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8002b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <SD_FindSCR+0x56>
  {
    return errorstate;
 8002b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b78:	e0a3      	b.n	8002cc2 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002b7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b7e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8002b80:	2308      	movs	r3, #8
 8002b82:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8002b84:	2330      	movs	r3, #48	; 0x30
 8002b86:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002b88:	2302      	movs	r3, #2
 8002b8a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8002b90:	2301      	movs	r3, #1
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f107 0210 	add.w	r2, r7, #16
 8002b9c:	4611      	mov	r1, r2
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 fbf0 	bl	8003384 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f000 fdaa 	bl	8003702 <SDMMC_CmdSendSCR>
 8002bae:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8002bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d02a      	beq.n	8002c0c <SD_FindSCR+0xe8>
  {
    return errorstate;
 8002bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb8:	e083      	b.n	8002cc2 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00f      	beq.n	8002be8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6819      	ldr	r1, [r3, #0]
 8002bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	f107 0208 	add.w	r2, r7, #8
 8002bd4:	18d4      	adds	r4, r2, r3
 8002bd6:	4608      	mov	r0, r1
 8002bd8:	f000 fb4f 	bl	800327a <SDIO_ReadFIFO>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	6023      	str	r3, [r4, #0]
      index++;
 8002be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be2:	3301      	adds	r3, #1
 8002be4:	637b      	str	r3, [r7, #52]	; 0x34
 8002be6:	e006      	b.n	8002bf6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d012      	beq.n	8002c1c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8002bf6:	f7fd ffcd 	bl	8000b94 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c04:	d102      	bne.n	8002c0c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8002c06:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002c0a:	e05a      	b.n	8002cc2 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c12:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0cf      	beq.n	8002bba <SD_FindSCR+0x96>
 8002c1a:	e000      	b.n	8002c1e <SD_FindSCR+0xfa>
      break;
 8002c1c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c24:	f003 0308 	and.w	r3, r3, #8
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d005      	beq.n	8002c38 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2208      	movs	r2, #8
 8002c32:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8002c34:	2308      	movs	r3, #8
 8002c36:	e044      	b.n	8002cc2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d005      	beq.n	8002c52 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8002c4e:	2302      	movs	r3, #2
 8002c50:	e037      	b.n	8002cc2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c58:	f003 0320 	and.w	r3, r3, #32
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d005      	beq.n	8002c6c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2220      	movs	r2, #32
 8002c66:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8002c68:	2320      	movs	r3, #32
 8002c6a:	e02a      	b.n	8002cc2 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f240 523a 	movw	r2, #1338	; 0x53a
 8002c74:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	061a      	lsls	r2, r3, #24
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	021b      	lsls	r3, r3, #8
 8002c7e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002c82:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	0a1b      	lsrs	r3, r3, #8
 8002c88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8002c8c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	0e1b      	lsrs	r3, r3, #24
 8002c92:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8002c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c96:	601a      	str	r2, [r3, #0]
    scr++;
 8002c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9a:	3304      	adds	r3, #4
 8002c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	061a      	lsls	r2, r3, #24
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	021b      	lsls	r3, r3, #8
 8002ca6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002caa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	0a1b      	lsrs	r3, r3, #8
 8002cb0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8002cb4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	0e1b      	lsrs	r3, r3, #24
 8002cba:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8002cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cbe:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	373c      	adds	r7, #60	; 0x3c
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd90      	pop	{r4, r7, pc}

08002cca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b082      	sub	sp, #8
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e041      	b.n	8002d60 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d106      	bne.n	8002cf6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 f839 	bl	8002d68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	3304      	adds	r3, #4
 8002d06:	4619      	mov	r1, r3
 8002d08:	4610      	mov	r0, r2
 8002d0a:	f000 f9d7 	bl	80030bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d001      	beq.n	8002d94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e04e      	b.n	8002e32 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2202      	movs	r2, #2
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68da      	ldr	r2, [r3, #12]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f042 0201 	orr.w	r2, r2, #1
 8002daa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a23      	ldr	r2, [pc, #140]	; (8002e40 <HAL_TIM_Base_Start_IT+0xc4>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d022      	beq.n	8002dfc <HAL_TIM_Base_Start_IT+0x80>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dbe:	d01d      	beq.n	8002dfc <HAL_TIM_Base_Start_IT+0x80>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a1f      	ldr	r2, [pc, #124]	; (8002e44 <HAL_TIM_Base_Start_IT+0xc8>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d018      	beq.n	8002dfc <HAL_TIM_Base_Start_IT+0x80>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a1e      	ldr	r2, [pc, #120]	; (8002e48 <HAL_TIM_Base_Start_IT+0xcc>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d013      	beq.n	8002dfc <HAL_TIM_Base_Start_IT+0x80>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a1c      	ldr	r2, [pc, #112]	; (8002e4c <HAL_TIM_Base_Start_IT+0xd0>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d00e      	beq.n	8002dfc <HAL_TIM_Base_Start_IT+0x80>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a1b      	ldr	r2, [pc, #108]	; (8002e50 <HAL_TIM_Base_Start_IT+0xd4>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d009      	beq.n	8002dfc <HAL_TIM_Base_Start_IT+0x80>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a19      	ldr	r2, [pc, #100]	; (8002e54 <HAL_TIM_Base_Start_IT+0xd8>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d004      	beq.n	8002dfc <HAL_TIM_Base_Start_IT+0x80>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a18      	ldr	r2, [pc, #96]	; (8002e58 <HAL_TIM_Base_Start_IT+0xdc>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d111      	bne.n	8002e20 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2b06      	cmp	r3, #6
 8002e0c:	d010      	beq.n	8002e30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f042 0201 	orr.w	r2, r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e1e:	e007      	b.n	8002e30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 0201 	orr.w	r2, r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	40010000 	.word	0x40010000
 8002e44:	40000400 	.word	0x40000400
 8002e48:	40000800 	.word	0x40000800
 8002e4c:	40000c00 	.word	0x40000c00
 8002e50:	40010400 	.word	0x40010400
 8002e54:	40014000 	.word	0x40014000
 8002e58:	40001800 	.word	0x40001800

08002e5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d122      	bne.n	8002eb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d11b      	bne.n	8002eb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f06f 0202 	mvn.w	r2, #2
 8002e88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 f8ee 	bl	8003080 <HAL_TIM_IC_CaptureCallback>
 8002ea4:	e005      	b.n	8002eb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f8e0 	bl	800306c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 f8f1 	bl	8003094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	f003 0304 	and.w	r3, r3, #4
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	d122      	bne.n	8002f0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	f003 0304 	and.w	r3, r3, #4
 8002ed0:	2b04      	cmp	r3, #4
 8002ed2:	d11b      	bne.n	8002f0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f06f 0204 	mvn.w	r2, #4
 8002edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2202      	movs	r2, #2
 8002ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f8c4 	bl	8003080 <HAL_TIM_IC_CaptureCallback>
 8002ef8:	e005      	b.n	8002f06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f8b6 	bl	800306c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 f8c7 	bl	8003094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	2b08      	cmp	r3, #8
 8002f18:	d122      	bne.n	8002f60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f003 0308 	and.w	r3, r3, #8
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	d11b      	bne.n	8002f60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f06f 0208 	mvn.w	r2, #8
 8002f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2204      	movs	r2, #4
 8002f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f89a 	bl	8003080 <HAL_TIM_IC_CaptureCallback>
 8002f4c:	e005      	b.n	8002f5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f88c 	bl	800306c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 f89d 	bl	8003094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	f003 0310 	and.w	r3, r3, #16
 8002f6a:	2b10      	cmp	r3, #16
 8002f6c:	d122      	bne.n	8002fb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f003 0310 	and.w	r3, r3, #16
 8002f78:	2b10      	cmp	r3, #16
 8002f7a:	d11b      	bne.n	8002fb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f06f 0210 	mvn.w	r2, #16
 8002f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2208      	movs	r2, #8
 8002f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f870 	bl	8003080 <HAL_TIM_IC_CaptureCallback>
 8002fa0:	e005      	b.n	8002fae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f862 	bl	800306c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 f873 	bl	8003094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d10e      	bne.n	8002fe0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d107      	bne.n	8002fe0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f06f 0201 	mvn.w	r2, #1
 8002fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7fd fc1e 	bl	800081c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fea:	2b80      	cmp	r3, #128	; 0x80
 8002fec:	d10e      	bne.n	800300c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff8:	2b80      	cmp	r3, #128	; 0x80
 8002ffa:	d107      	bne.n	800300c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f902 	bl	8003210 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003016:	2b40      	cmp	r3, #64	; 0x40
 8003018:	d10e      	bne.n	8003038 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003024:	2b40      	cmp	r3, #64	; 0x40
 8003026:	d107      	bne.n	8003038 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f838 	bl	80030a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	f003 0320 	and.w	r3, r3, #32
 8003042:	2b20      	cmp	r3, #32
 8003044:	d10e      	bne.n	8003064 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	f003 0320 	and.w	r3, r3, #32
 8003050:	2b20      	cmp	r3, #32
 8003052:	d107      	bne.n	8003064 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f06f 0220 	mvn.w	r2, #32
 800305c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f8cc 	bl	80031fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003064:	bf00      	nop
 8003066:	3708      	adds	r7, #8
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a40      	ldr	r2, [pc, #256]	; (80031d0 <TIM_Base_SetConfig+0x114>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d013      	beq.n	80030fc <TIM_Base_SetConfig+0x40>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030da:	d00f      	beq.n	80030fc <TIM_Base_SetConfig+0x40>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a3d      	ldr	r2, [pc, #244]	; (80031d4 <TIM_Base_SetConfig+0x118>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d00b      	beq.n	80030fc <TIM_Base_SetConfig+0x40>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a3c      	ldr	r2, [pc, #240]	; (80031d8 <TIM_Base_SetConfig+0x11c>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d007      	beq.n	80030fc <TIM_Base_SetConfig+0x40>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a3b      	ldr	r2, [pc, #236]	; (80031dc <TIM_Base_SetConfig+0x120>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d003      	beq.n	80030fc <TIM_Base_SetConfig+0x40>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a3a      	ldr	r2, [pc, #232]	; (80031e0 <TIM_Base_SetConfig+0x124>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d108      	bne.n	800310e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	4313      	orrs	r3, r2
 800310c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a2f      	ldr	r2, [pc, #188]	; (80031d0 <TIM_Base_SetConfig+0x114>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d02b      	beq.n	800316e <TIM_Base_SetConfig+0xb2>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800311c:	d027      	beq.n	800316e <TIM_Base_SetConfig+0xb2>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a2c      	ldr	r2, [pc, #176]	; (80031d4 <TIM_Base_SetConfig+0x118>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d023      	beq.n	800316e <TIM_Base_SetConfig+0xb2>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a2b      	ldr	r2, [pc, #172]	; (80031d8 <TIM_Base_SetConfig+0x11c>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d01f      	beq.n	800316e <TIM_Base_SetConfig+0xb2>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a2a      	ldr	r2, [pc, #168]	; (80031dc <TIM_Base_SetConfig+0x120>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d01b      	beq.n	800316e <TIM_Base_SetConfig+0xb2>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a29      	ldr	r2, [pc, #164]	; (80031e0 <TIM_Base_SetConfig+0x124>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d017      	beq.n	800316e <TIM_Base_SetConfig+0xb2>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a28      	ldr	r2, [pc, #160]	; (80031e4 <TIM_Base_SetConfig+0x128>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d013      	beq.n	800316e <TIM_Base_SetConfig+0xb2>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a27      	ldr	r2, [pc, #156]	; (80031e8 <TIM_Base_SetConfig+0x12c>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d00f      	beq.n	800316e <TIM_Base_SetConfig+0xb2>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a26      	ldr	r2, [pc, #152]	; (80031ec <TIM_Base_SetConfig+0x130>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d00b      	beq.n	800316e <TIM_Base_SetConfig+0xb2>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a25      	ldr	r2, [pc, #148]	; (80031f0 <TIM_Base_SetConfig+0x134>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d007      	beq.n	800316e <TIM_Base_SetConfig+0xb2>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a24      	ldr	r2, [pc, #144]	; (80031f4 <TIM_Base_SetConfig+0x138>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d003      	beq.n	800316e <TIM_Base_SetConfig+0xb2>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a23      	ldr	r2, [pc, #140]	; (80031f8 <TIM_Base_SetConfig+0x13c>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d108      	bne.n	8003180 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	4313      	orrs	r3, r2
 800317e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	4313      	orrs	r3, r2
 800318c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a0a      	ldr	r2, [pc, #40]	; (80031d0 <TIM_Base_SetConfig+0x114>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d003      	beq.n	80031b4 <TIM_Base_SetConfig+0xf8>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a0c      	ldr	r2, [pc, #48]	; (80031e0 <TIM_Base_SetConfig+0x124>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d103      	bne.n	80031bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	691a      	ldr	r2, [r3, #16]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	615a      	str	r2, [r3, #20]
}
 80031c2:	bf00      	nop
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	40010000 	.word	0x40010000
 80031d4:	40000400 	.word	0x40000400
 80031d8:	40000800 	.word	0x40000800
 80031dc:	40000c00 	.word	0x40000c00
 80031e0:	40010400 	.word	0x40010400
 80031e4:	40014000 	.word	0x40014000
 80031e8:	40014400 	.word	0x40014400
 80031ec:	40014800 	.word	0x40014800
 80031f0:	40001800 	.word	0x40001800
 80031f4:	40001c00 	.word	0x40001c00
 80031f8:	40002000 	.word	0x40002000

080031fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8003224:	b084      	sub	sp, #16
 8003226:	b480      	push	{r7}
 8003228:	b085      	sub	sp, #20
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
 800322e:	f107 001c 	add.w	r0, r7, #28
 8003232:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8003236:	2300      	movs	r3, #0
 8003238:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800323a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800323c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800323e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8003242:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003244:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8003246:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800324a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800324c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800324e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	4313      	orrs	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800325e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	431a      	orrs	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3714      	adds	r7, #20
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	b004      	add	sp, #16
 8003278:	4770      	bx	lr

0800327a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800327a:	b480      	push	{r7}
 800327c:	b083      	sub	sp, #12
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8003288:	4618      	mov	r0, r3
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr

080032b6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b082      	sub	sp, #8
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2203      	movs	r2, #3
 80032c2:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80032c4:	2002      	movs	r0, #2
 80032c6:	f7fd fc71 	bl	8000bac <HAL_Delay>
  
  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3708      	adds	r7, #8
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0303 	and.w	r3, r3, #3
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80032fa:	2300      	movs	r3, #0
 80032fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800330e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8003314:	431a      	orrs	r2, r3
                       Command->CPSM);
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800331a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	4313      	orrs	r3, r2
 8003320:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800332a:	f023 030f 	bic.w	r3, r3, #15
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	431a      	orrs	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	b2db      	uxtb	r3, r3
}
 8003352:	4618      	mov	r0, r3
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800335e:	b480      	push	{r7}
 8003360:	b085      	sub	sp, #20
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
 8003366:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3314      	adds	r3, #20
 800336c:	461a      	mov	r2, r3
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	4413      	add	r3, r2
 8003372:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
}  
 8003378:	4618      	mov	r0, r3
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800338e:	2300      	movs	r3, #0
 8003390:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80033aa:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80033b0:	431a      	orrs	r2, r3
                       Data->DPSM);
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80033b6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	431a      	orrs	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80033ce:	2300      	movs	r3, #0

}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3714      	adds	r7, #20
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b088      	sub	sp, #32
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80033ea:	2310      	movs	r3, #16
 80033ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80033ee:	2340      	movs	r3, #64	; 0x40
 80033f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80033f2:	2300      	movs	r3, #0
 80033f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80033f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80033fc:	f107 0308 	add.w	r3, r7, #8
 8003400:	4619      	mov	r1, r3
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f7ff ff74 	bl	80032f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8003408:	f241 3288 	movw	r2, #5000	; 0x1388
 800340c:	2110      	movs	r1, #16
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 fa44 	bl	800389c <SDMMC_GetCmdResp1>
 8003414:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003416:	69fb      	ldr	r3, [r7, #28]
}
 8003418:	4618      	mov	r0, r3
 800341a:	3720      	adds	r7, #32
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b088      	sub	sp, #32
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800342e:	2311      	movs	r3, #17
 8003430:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003432:	2340      	movs	r3, #64	; 0x40
 8003434:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003436:	2300      	movs	r3, #0
 8003438:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800343a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800343e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003440:	f107 0308 	add.w	r3, r7, #8
 8003444:	4619      	mov	r1, r3
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7ff ff52 	bl	80032f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800344c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003450:	2111      	movs	r1, #17
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 fa22 	bl	800389c <SDMMC_GetCmdResp1>
 8003458:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800345a:	69fb      	ldr	r3, [r7, #28]
}
 800345c:	4618      	mov	r0, r3
 800345e:	3720      	adds	r7, #32
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b088      	sub	sp, #32
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003472:	2312      	movs	r3, #18
 8003474:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003476:	2340      	movs	r3, #64	; 0x40
 8003478:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800347a:	2300      	movs	r3, #0
 800347c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800347e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003482:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003484:	f107 0308 	add.w	r3, r7, #8
 8003488:	4619      	mov	r1, r3
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7ff ff30 	bl	80032f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003490:	f241 3288 	movw	r2, #5000	; 0x1388
 8003494:	2112      	movs	r1, #18
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 fa00 	bl	800389c <SDMMC_GetCmdResp1>
 800349c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800349e:	69fb      	ldr	r3, [r7, #28]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3720      	adds	r7, #32
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b088      	sub	sp, #32
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80034b6:	2318      	movs	r3, #24
 80034b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80034ba:	2340      	movs	r3, #64	; 0x40
 80034bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80034be:	2300      	movs	r3, #0
 80034c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80034c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80034c8:	f107 0308 	add.w	r3, r7, #8
 80034cc:	4619      	mov	r1, r3
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7ff ff0e 	bl	80032f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80034d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d8:	2118      	movs	r1, #24
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 f9de 	bl	800389c <SDMMC_GetCmdResp1>
 80034e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80034e2:	69fb      	ldr	r3, [r7, #28]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3720      	adds	r7, #32
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b088      	sub	sp, #32
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80034fa:	2319      	movs	r3, #25
 80034fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80034fe:	2340      	movs	r3, #64	; 0x40
 8003500:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003502:	2300      	movs	r3, #0
 8003504:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003506:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800350a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800350c:	f107 0308 	add.w	r3, r7, #8
 8003510:	4619      	mov	r1, r3
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7ff feec 	bl	80032f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003518:	f241 3288 	movw	r2, #5000	; 0x1388
 800351c:	2119      	movs	r1, #25
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f9bc 	bl	800389c <SDMMC_GetCmdResp1>
 8003524:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003526:	69fb      	ldr	r3, [r7, #28]
}
 8003528:	4618      	mov	r0, r3
 800352a:	3720      	adds	r7, #32
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b088      	sub	sp, #32
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8003538:	2300      	movs	r3, #0
 800353a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800353c:	230c      	movs	r3, #12
 800353e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003540:	2340      	movs	r3, #64	; 0x40
 8003542:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003544:	2300      	movs	r3, #0
 8003546:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003548:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800354c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800354e:	f107 0308 	add.w	r3, r7, #8
 8003552:	4619      	mov	r1, r3
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f7ff fecb 	bl	80032f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800355a:	4a05      	ldr	r2, [pc, #20]	; (8003570 <SDMMC_CmdStopTransfer+0x40>)
 800355c:	210c      	movs	r1, #12
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f99c 	bl	800389c <SDMMC_GetCmdResp1>
 8003564:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003566:	69fb      	ldr	r3, [r7, #28]
}
 8003568:	4618      	mov	r0, r3
 800356a:	3720      	adds	r7, #32
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	05f5e100 	.word	0x05f5e100

08003574 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b08a      	sub	sp, #40	; 0x28
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003584:	2307      	movs	r3, #7
 8003586:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003588:	2340      	movs	r3, #64	; 0x40
 800358a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800358c:	2300      	movs	r3, #0
 800358e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003590:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003594:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003596:	f107 0310 	add.w	r3, r7, #16
 800359a:	4619      	mov	r1, r3
 800359c:	68f8      	ldr	r0, [r7, #12]
 800359e:	f7ff fea7 	bl	80032f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80035a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a6:	2107      	movs	r1, #7
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f000 f977 	bl	800389c <SDMMC_GetCmdResp1>
 80035ae:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80035b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3728      	adds	r7, #40	; 0x28
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b088      	sub	sp, #32
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80035c2:	2300      	movs	r3, #0
 80035c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80035c6:	2300      	movs	r3, #0
 80035c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80035ca:	2300      	movs	r3, #0
 80035cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80035ce:	2300      	movs	r3, #0
 80035d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80035d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80035d8:	f107 0308 	add.w	r3, r7, #8
 80035dc:	4619      	mov	r1, r3
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7ff fe86 	bl	80032f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f92d 	bl	8003844 <SDMMC_GetCmdError>
 80035ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80035ec:	69fb      	ldr	r3, [r7, #28]
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3720      	adds	r7, #32
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b088      	sub	sp, #32
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80035fe:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8003602:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8003604:	2308      	movs	r3, #8
 8003606:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003608:	2340      	movs	r3, #64	; 0x40
 800360a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800360c:	2300      	movs	r3, #0
 800360e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003610:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003614:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003616:	f107 0308 	add.w	r3, r7, #8
 800361a:	4619      	mov	r1, r3
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f7ff fe67 	bl	80032f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 fb24 	bl	8003c70 <SDMMC_GetCmdResp7>
 8003628:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800362a:	69fb      	ldr	r3, [r7, #28]
}
 800362c:	4618      	mov	r0, r3
 800362e:	3720      	adds	r7, #32
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b088      	sub	sp, #32
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8003642:	2337      	movs	r3, #55	; 0x37
 8003644:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003646:	2340      	movs	r3, #64	; 0x40
 8003648:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800364a:	2300      	movs	r3, #0
 800364c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800364e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003652:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003654:	f107 0308 	add.w	r3, r7, #8
 8003658:	4619      	mov	r1, r3
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7ff fe48 	bl	80032f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8003660:	f241 3288 	movw	r2, #5000	; 0x1388
 8003664:	2137      	movs	r1, #55	; 0x37
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f918 	bl	800389c <SDMMC_GetCmdResp1>
 800366c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800366e:	69fb      	ldr	r3, [r7, #28]
}
 8003670:	4618      	mov	r0, r3
 8003672:	3720      	adds	r7, #32
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b088      	sub	sp, #32
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003688:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800368c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800368e:	2329      	movs	r3, #41	; 0x29
 8003690:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003692:	2340      	movs	r3, #64	; 0x40
 8003694:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003696:	2300      	movs	r3, #0
 8003698:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800369a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800369e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80036a0:	f107 0308 	add.w	r3, r7, #8
 80036a4:	4619      	mov	r1, r3
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7ff fe22 	bl	80032f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 fa2b 	bl	8003b08 <SDMMC_GetCmdResp3>
 80036b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80036b4:	69fb      	ldr	r3, [r7, #28]
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3720      	adds	r7, #32
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b088      	sub	sp, #32
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
 80036c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80036cc:	2306      	movs	r3, #6
 80036ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80036d0:	2340      	movs	r3, #64	; 0x40
 80036d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80036d4:	2300      	movs	r3, #0
 80036d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80036d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80036de:	f107 0308 	add.w	r3, r7, #8
 80036e2:	4619      	mov	r1, r3
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f7ff fe03 	bl	80032f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80036ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ee:	2106      	movs	r1, #6
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f8d3 	bl	800389c <SDMMC_GetCmdResp1>
 80036f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80036f8:	69fb      	ldr	r3, [r7, #28]
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3720      	adds	r7, #32
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b088      	sub	sp, #32
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800370a:	2300      	movs	r3, #0
 800370c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800370e:	2333      	movs	r3, #51	; 0x33
 8003710:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003712:	2340      	movs	r3, #64	; 0x40
 8003714:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003716:	2300      	movs	r3, #0
 8003718:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800371a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800371e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003720:	f107 0308 	add.w	r3, r7, #8
 8003724:	4619      	mov	r1, r3
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7ff fde2 	bl	80032f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800372c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003730:	2133      	movs	r1, #51	; 0x33
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f8b2 	bl	800389c <SDMMC_GetCmdResp1>
 8003738:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800373a:	69fb      	ldr	r3, [r7, #28]
}
 800373c:	4618      	mov	r0, r3
 800373e:	3720      	adds	r7, #32
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b088      	sub	sp, #32
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800374c:	2300      	movs	r3, #0
 800374e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003750:	2302      	movs	r3, #2
 8003752:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003754:	23c0      	movs	r3, #192	; 0xc0
 8003756:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003758:	2300      	movs	r3, #0
 800375a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800375c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003760:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003762:	f107 0308 	add.w	r3, r7, #8
 8003766:	4619      	mov	r1, r3
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f7ff fdc1 	bl	80032f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f982 	bl	8003a78 <SDMMC_GetCmdResp2>
 8003774:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003776:	69fb      	ldr	r3, [r7, #28]
}
 8003778:	4618      	mov	r0, r3
 800377a:	3720      	adds	r7, #32
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b088      	sub	sp, #32
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800378e:	2309      	movs	r3, #9
 8003790:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003792:	23c0      	movs	r3, #192	; 0xc0
 8003794:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003796:	2300      	movs	r3, #0
 8003798:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800379a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800379e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80037a0:	f107 0308 	add.w	r3, r7, #8
 80037a4:	4619      	mov	r1, r3
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f7ff fda2 	bl	80032f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 f963 	bl	8003a78 <SDMMC_GetCmdResp2>
 80037b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80037b4:	69fb      	ldr	r3, [r7, #28]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3720      	adds	r7, #32
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b088      	sub	sp, #32
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
 80037c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80037c8:	2300      	movs	r3, #0
 80037ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80037cc:	2303      	movs	r3, #3
 80037ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80037d0:	2340      	movs	r3, #64	; 0x40
 80037d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80037d4:	2300      	movs	r3, #0
 80037d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80037d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80037de:	f107 0308 	add.w	r3, r7, #8
 80037e2:	4619      	mov	r1, r3
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7ff fd83 	bl	80032f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	2103      	movs	r1, #3
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f9c8 	bl	8003b84 <SDMMC_GetCmdResp6>
 80037f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80037f6:	69fb      	ldr	r3, [r7, #28]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3720      	adds	r7, #32
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b088      	sub	sp, #32
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800380e:	230d      	movs	r3, #13
 8003810:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003812:	2340      	movs	r3, #64	; 0x40
 8003814:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003816:	2300      	movs	r3, #0
 8003818:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800381a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800381e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003820:	f107 0308 	add.w	r3, r7, #8
 8003824:	4619      	mov	r1, r3
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7ff fd62 	bl	80032f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800382c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003830:	210d      	movs	r1, #13
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f832 	bl	800389c <SDMMC_GetCmdResp1>
 8003838:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800383a:	69fb      	ldr	r3, [r7, #28]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3720      	adds	r7, #32
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800384c:	4b11      	ldr	r3, [pc, #68]	; (8003894 <SDMMC_GetCmdError+0x50>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a11      	ldr	r2, [pc, #68]	; (8003898 <SDMMC_GetCmdError+0x54>)
 8003852:	fba2 2303 	umull	r2, r3, r2, r3
 8003856:	0a5b      	lsrs	r3, r3, #9
 8003858:	f241 3288 	movw	r2, #5000	; 0x1388
 800385c:	fb02 f303 	mul.w	r3, r2, r3
 8003860:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	1e5a      	subs	r2, r3, #1
 8003866:	60fa      	str	r2, [r7, #12]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d102      	bne.n	8003872 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800386c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003870:	e009      	b.n	8003886 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800387a:	2b00      	cmp	r3, #0
 800387c:	d0f1      	beq.n	8003862 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	22c5      	movs	r2, #197	; 0xc5
 8003882:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3714      	adds	r7, #20
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	20000000 	.word	0x20000000
 8003898:	10624dd3 	.word	0x10624dd3

0800389c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b088      	sub	sp, #32
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	460b      	mov	r3, r1
 80038a6:	607a      	str	r2, [r7, #4]
 80038a8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80038aa:	4b70      	ldr	r3, [pc, #448]	; (8003a6c <SDMMC_GetCmdResp1+0x1d0>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a70      	ldr	r2, [pc, #448]	; (8003a70 <SDMMC_GetCmdResp1+0x1d4>)
 80038b0:	fba2 2303 	umull	r2, r3, r2, r3
 80038b4:	0a5a      	lsrs	r2, r3, #9
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	fb02 f303 	mul.w	r3, r2, r3
 80038bc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	1e5a      	subs	r2, r3, #1
 80038c2:	61fa      	str	r2, [r7, #28]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d102      	bne.n	80038ce <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80038c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80038cc:	e0c9      	b.n	8003a62 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d0ef      	beq.n	80038be <SDMMC_GetCmdResp1+0x22>
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1ea      	bne.n	80038be <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ec:	f003 0304 	and.w	r3, r3, #4
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d004      	beq.n	80038fe <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2204      	movs	r2, #4
 80038f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80038fa:	2304      	movs	r3, #4
 80038fc:	e0b1      	b.n	8003a62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	d004      	beq.n	8003914 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2201      	movs	r2, #1
 800390e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003910:	2301      	movs	r3, #1
 8003912:	e0a6      	b.n	8003a62 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	22c5      	movs	r2, #197	; 0xc5
 8003918:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f7ff fd12 	bl	8003344 <SDIO_GetCommandResponse>
 8003920:	4603      	mov	r3, r0
 8003922:	461a      	mov	r2, r3
 8003924:	7afb      	ldrb	r3, [r7, #11]
 8003926:	4293      	cmp	r3, r2
 8003928:	d001      	beq.n	800392e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800392a:	2301      	movs	r3, #1
 800392c:	e099      	b.n	8003a62 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800392e:	2100      	movs	r1, #0
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f7ff fd14 	bl	800335e <SDIO_GetResponse>
 8003936:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	4b4e      	ldr	r3, [pc, #312]	; (8003a74 <SDMMC_GetCmdResp1+0x1d8>)
 800393c:	4013      	ands	r3, r2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8003942:	2300      	movs	r3, #0
 8003944:	e08d      	b.n	8003a62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	2b00      	cmp	r3, #0
 800394a:	da02      	bge.n	8003952 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800394c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003950:	e087      	b.n	8003a62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800395c:	2340      	movs	r3, #64	; 0x40
 800395e:	e080      	b.n	8003a62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800396a:	2380      	movs	r3, #128	; 0x80
 800396c:	e079      	b.n	8003a62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d002      	beq.n	800397e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003978:	f44f 7380 	mov.w	r3, #256	; 0x100
 800397c:	e071      	b.n	8003a62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d002      	beq.n	800398e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003988:	f44f 7300 	mov.w	r3, #512	; 0x200
 800398c:	e069      	b.n	8003a62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d002      	beq.n	800399e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003998:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800399c:	e061      	b.n	8003a62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d002      	beq.n	80039ae <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80039a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80039ac:	e059      	b.n	8003a62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d002      	beq.n	80039be <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80039b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039bc:	e051      	b.n	8003a62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d002      	beq.n	80039ce <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80039c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039cc:	e049      	b.n	8003a62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d002      	beq.n	80039de <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80039d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80039dc:	e041      	b.n	8003a62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d002      	beq.n	80039ee <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80039e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039ec:	e039      	b.n	8003a62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d002      	beq.n	80039fe <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80039f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039fc:	e031      	b.n	8003a62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d002      	beq.n	8003a0e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003a08:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003a0c:	e029      	b.n	8003a62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d002      	beq.n	8003a1e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003a18:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003a1c:	e021      	b.n	8003a62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d002      	beq.n	8003a2e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003a28:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003a2c:	e019      	b.n	8003a62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d002      	beq.n	8003a3e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8003a38:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003a3c:	e011      	b.n	8003a62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d002      	beq.n	8003a4e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8003a48:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a4c:	e009      	b.n	8003a62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	f003 0308 	and.w	r3, r3, #8
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d002      	beq.n	8003a5e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8003a58:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003a5c:	e001      	b.n	8003a62 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003a5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3720      	adds	r7, #32
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	20000000 	.word	0x20000000
 8003a70:	10624dd3 	.word	0x10624dd3
 8003a74:	fdffe008 	.word	0xfdffe008

08003a78 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003a80:	4b1f      	ldr	r3, [pc, #124]	; (8003b00 <SDMMC_GetCmdResp2+0x88>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a1f      	ldr	r2, [pc, #124]	; (8003b04 <SDMMC_GetCmdResp2+0x8c>)
 8003a86:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8a:	0a5b      	lsrs	r3, r3, #9
 8003a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a90:	fb02 f303 	mul.w	r3, r2, r3
 8003a94:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	1e5a      	subs	r2, r3, #1
 8003a9a:	60fa      	str	r2, [r7, #12]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d102      	bne.n	8003aa6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003aa0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003aa4:	e026      	b.n	8003af4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aaa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0ef      	beq.n	8003a96 <SDMMC_GetCmdResp2+0x1e>
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1ea      	bne.n	8003a96 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d004      	beq.n	8003ad6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2204      	movs	r2, #4
 8003ad0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003ad2:	2304      	movs	r3, #4
 8003ad4:	e00e      	b.n	8003af4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d004      	beq.n	8003aec <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e003      	b.n	8003af4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	22c5      	movs	r2, #197	; 0xc5
 8003af0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3714      	adds	r7, #20
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	20000000 	.word	0x20000000
 8003b04:	10624dd3 	.word	0x10624dd3

08003b08 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003b10:	4b1a      	ldr	r3, [pc, #104]	; (8003b7c <SDMMC_GetCmdResp3+0x74>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a1a      	ldr	r2, [pc, #104]	; (8003b80 <SDMMC_GetCmdResp3+0x78>)
 8003b16:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1a:	0a5b      	lsrs	r3, r3, #9
 8003b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b20:	fb02 f303 	mul.w	r3, r2, r3
 8003b24:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	1e5a      	subs	r2, r3, #1
 8003b2a:	60fa      	str	r2, [r7, #12]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d102      	bne.n	8003b36 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003b30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003b34:	e01b      	b.n	8003b6e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b3a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0ef      	beq.n	8003b26 <SDMMC_GetCmdResp3+0x1e>
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1ea      	bne.n	8003b26 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b54:	f003 0304 	and.w	r3, r3, #4
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d004      	beq.n	8003b66 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2204      	movs	r2, #4
 8003b60:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003b62:	2304      	movs	r3, #4
 8003b64:	e003      	b.n	8003b6e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	22c5      	movs	r2, #197	; 0xc5
 8003b6a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3714      	adds	r7, #20
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	20000000 	.word	0x20000000
 8003b80:	10624dd3 	.word	0x10624dd3

08003b84 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b088      	sub	sp, #32
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	607a      	str	r2, [r7, #4]
 8003b90:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003b92:	4b35      	ldr	r3, [pc, #212]	; (8003c68 <SDMMC_GetCmdResp6+0xe4>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a35      	ldr	r2, [pc, #212]	; (8003c6c <SDMMC_GetCmdResp6+0xe8>)
 8003b98:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9c:	0a5b      	lsrs	r3, r3, #9
 8003b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ba2:	fb02 f303 	mul.w	r3, r2, r3
 8003ba6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	1e5a      	subs	r2, r3, #1
 8003bac:	61fa      	str	r2, [r7, #28]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d102      	bne.n	8003bb8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003bb2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003bb6:	e052      	b.n	8003c5e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bbc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d0ef      	beq.n	8003ba8 <SDMMC_GetCmdResp6+0x24>
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1ea      	bne.n	8003ba8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd6:	f003 0304 	and.w	r3, r3, #4
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d004      	beq.n	8003be8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2204      	movs	r2, #4
 8003be2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003be4:	2304      	movs	r3, #4
 8003be6:	e03a      	b.n	8003c5e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d004      	beq.n	8003bfe <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e02f      	b.n	8003c5e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f7ff fba0 	bl	8003344 <SDIO_GetCommandResponse>
 8003c04:	4603      	mov	r3, r0
 8003c06:	461a      	mov	r2, r3
 8003c08:	7afb      	ldrb	r3, [r7, #11]
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d001      	beq.n	8003c12 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e025      	b.n	8003c5e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	22c5      	movs	r2, #197	; 0xc5
 8003c16:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003c18:	2100      	movs	r1, #0
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f7ff fb9f 	bl	800335e <SDIO_GetResponse>
 8003c20:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d106      	bne.n	8003c3a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	0c1b      	lsrs	r3, r3, #16
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8003c36:	2300      	movs	r3, #0
 8003c38:	e011      	b.n	8003c5e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d002      	beq.n	8003c4a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003c44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c48:	e009      	b.n	8003c5e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d002      	beq.n	8003c5a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003c54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c58:	e001      	b.n	8003c5e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003c5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3720      	adds	r7, #32
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	20000000 	.word	0x20000000
 8003c6c:	10624dd3 	.word	0x10624dd3

08003c70 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003c78:	4b22      	ldr	r3, [pc, #136]	; (8003d04 <SDMMC_GetCmdResp7+0x94>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a22      	ldr	r2, [pc, #136]	; (8003d08 <SDMMC_GetCmdResp7+0x98>)
 8003c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c82:	0a5b      	lsrs	r3, r3, #9
 8003c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c88:	fb02 f303 	mul.w	r3, r2, r3
 8003c8c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	1e5a      	subs	r2, r3, #1
 8003c92:	60fa      	str	r2, [r7, #12]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d102      	bne.n	8003c9e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003c98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003c9c:	e02c      	b.n	8003cf8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0ef      	beq.n	8003c8e <SDMMC_GetCmdResp7+0x1e>
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1ea      	bne.n	8003c8e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cbc:	f003 0304 	and.w	r3, r3, #4
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d004      	beq.n	8003cce <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2204      	movs	r2, #4
 8003cc8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003cca:	2304      	movs	r3, #4
 8003ccc:	e014      	b.n	8003cf8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d004      	beq.n	8003ce4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e009      	b.n	8003cf8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d002      	beq.n	8003cf6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2240      	movs	r2, #64	; 0x40
 8003cf4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003cf6:	2300      	movs	r3, #0
  
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	20000000 	.word	0x20000000
 8003d08:	10624dd3 	.word	0x10624dd3

08003d0c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8003d10:	4904      	ldr	r1, [pc, #16]	; (8003d24 <MX_FATFS_Init+0x18>)
 8003d12:	4805      	ldr	r0, [pc, #20]	; (8003d28 <MX_FATFS_Init+0x1c>)
 8003d14:	f003 f9ca 	bl	80070ac <FATFS_LinkDriver>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	4b03      	ldr	r3, [pc, #12]	; (8003d2c <MX_FATFS_Init+0x20>)
 8003d1e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003d20:	bf00      	nop
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	20001130 	.word	0x20001130
 8003d28:	08007260 	.word	0x08007260
 8003d2c:	2000112c 	.word	0x2000112c

08003d30 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003d34:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8003d46:	2300      	movs	r3, #0
 8003d48:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8003d4a:	f000 f879 	bl	8003e40 <BSP_SD_IsDetected>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d001      	beq.n	8003d58 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e012      	b.n	8003d7e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8003d58:	480b      	ldr	r0, [pc, #44]	; (8003d88 <BSP_SD_Init+0x48>)
 8003d5a:	f7fd fe2f 	bl	80019bc <HAL_SD_Init>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8003d62:	79fb      	ldrb	r3, [r7, #7]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d109      	bne.n	8003d7c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8003d68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003d6c:	4806      	ldr	r0, [pc, #24]	; (8003d88 <BSP_SD_Init+0x48>)
 8003d6e:	f7fe fc07 	bl	8002580 <HAL_SD_ConfigWideBusOperation>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8003d7c:	79fb      	ldrb	r3, [r7, #7]
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	2000105c 	.word	0x2000105c

08003d8c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b088      	sub	sp, #32
 8003d90:	af02      	add	r7, sp, #8
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
 8003d98:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68ba      	ldr	r2, [r7, #8]
 8003da6:	68f9      	ldr	r1, [r7, #12]
 8003da8:	4806      	ldr	r0, [pc, #24]	; (8003dc4 <BSP_SD_ReadBlocks+0x38>)
 8003daa:	f7fd feb5 	bl	8001b18 <HAL_SD_ReadBlocks>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8003db8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3718      	adds	r7, #24
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	2000105c 	.word	0x2000105c

08003dc8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b088      	sub	sp, #32
 8003dcc:	af02      	add	r7, sp, #8
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
 8003dd4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	68f9      	ldr	r1, [r7, #12]
 8003de4:	4806      	ldr	r0, [pc, #24]	; (8003e00 <BSP_SD_WriteBlocks+0x38>)
 8003de6:	f7fe f875 	bl	8001ed4 <HAL_SD_WriteBlocks>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8003df4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3718      	adds	r7, #24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	2000105c 	.word	0x2000105c

08003e04 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8003e08:	4805      	ldr	r0, [pc, #20]	; (8003e20 <BSP_SD_GetCardState+0x1c>)
 8003e0a:	f7fe fc53 	bl	80026b4 <HAL_SD_GetCardState>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b04      	cmp	r3, #4
 8003e12:	bf14      	ite	ne
 8003e14:	2301      	movne	r3, #1
 8003e16:	2300      	moveq	r3, #0
 8003e18:	b2db      	uxtb	r3, r3
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	2000105c 	.word	0x2000105c

08003e24 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8003e2c:	6879      	ldr	r1, [r7, #4]
 8003e2e:	4803      	ldr	r0, [pc, #12]	; (8003e3c <BSP_SD_GetCardInfo+0x18>)
 8003e30:	f7fe fb7a 	bl	8002528 <HAL_SD_GetCardInfo>
}
 8003e34:	bf00      	nop
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	2000105c 	.word	0x2000105c

08003e40 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8003e46:	2301      	movs	r3, #1
 8003e48:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8003e4a:	79fb      	ldrb	r3, [r7, #7]
 8003e4c:	b2db      	uxtb	r3, r3
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
	...

08003e5c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	4603      	mov	r3, r0
 8003e64:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8003e66:	4b0b      	ldr	r3, [pc, #44]	; (8003e94 <SD_CheckStatus+0x38>)
 8003e68:	2201      	movs	r2, #1
 8003e6a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8003e6c:	f7ff ffca 	bl	8003e04 <BSP_SD_GetCardState>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d107      	bne.n	8003e86 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8003e76:	4b07      	ldr	r3, [pc, #28]	; (8003e94 <SD_CheckStatus+0x38>)
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	f023 0301 	bic.w	r3, r3, #1
 8003e80:	b2da      	uxtb	r2, r3
 8003e82:	4b04      	ldr	r3, [pc, #16]	; (8003e94 <SD_CheckStatus+0x38>)
 8003e84:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8003e86:	4b03      	ldr	r3, [pc, #12]	; (8003e94 <SD_CheckStatus+0x38>)
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	b2db      	uxtb	r3, r3
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3708      	adds	r7, #8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	20000009 	.word	0x20000009

08003e98 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8003ea2:	4b0b      	ldr	r3, [pc, #44]	; (8003ed0 <SD_initialize+0x38>)
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8003ea8:	f7ff ff4a 	bl	8003d40 <BSP_SD_Init>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d107      	bne.n	8003ec2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8003eb2:	79fb      	ldrb	r3, [r7, #7]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7ff ffd1 	bl	8003e5c <SD_CheckStatus>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	4b04      	ldr	r3, [pc, #16]	; (8003ed0 <SD_initialize+0x38>)
 8003ec0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8003ec2:	4b03      	ldr	r3, [pc, #12]	; (8003ed0 <SD_initialize+0x38>)
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	b2db      	uxtb	r3, r3
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3708      	adds	r7, #8
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	20000009 	.word	0x20000009

08003ed4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	4603      	mov	r3, r0
 8003edc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8003ede:	79fb      	ldrb	r3, [r7, #7]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7ff ffbb 	bl	8003e5c <SD_CheckStatus>
 8003ee6:	4603      	mov	r3, r0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3708      	adds	r7, #8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60b9      	str	r1, [r7, #8]
 8003ef8:	607a      	str	r2, [r7, #4]
 8003efa:	603b      	str	r3, [r7, #0]
 8003efc:	4603      	mov	r3, r0
 8003efe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8003f04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	6879      	ldr	r1, [r7, #4]
 8003f0c:	68b8      	ldr	r0, [r7, #8]
 8003f0e:	f7ff ff3d 	bl	8003d8c <BSP_SD_ReadBlocks>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d107      	bne.n	8003f28 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8003f18:	bf00      	nop
 8003f1a:	f7ff ff73 	bl	8003e04 <BSP_SD_GetCardState>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1fa      	bne.n	8003f1a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8003f24:	2300      	movs	r3, #0
 8003f26:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8003f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3718      	adds	r7, #24
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b086      	sub	sp, #24
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
 8003f3c:	603b      	str	r3, [r7, #0]
 8003f3e:	4603      	mov	r3, r0
 8003f40:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8003f46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	6879      	ldr	r1, [r7, #4]
 8003f4e:	68b8      	ldr	r0, [r7, #8]
 8003f50:	f7ff ff3a 	bl	8003dc8 <BSP_SD_WriteBlocks>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d107      	bne.n	8003f6a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8003f5a:	bf00      	nop
 8003f5c:	f7ff ff52 	bl	8003e04 <BSP_SD_GetCardState>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1fa      	bne.n	8003f5c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8003f66:	2300      	movs	r3, #0
 8003f68:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8003f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3718      	adds	r7, #24
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b08c      	sub	sp, #48	; 0x30
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	603a      	str	r2, [r7, #0]
 8003f7e:	71fb      	strb	r3, [r7, #7]
 8003f80:	460b      	mov	r3, r1
 8003f82:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003f8a:	4b25      	ldr	r3, [pc, #148]	; (8004020 <SD_ioctl+0xac>)
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <SD_ioctl+0x28>
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e03c      	b.n	8004016 <SD_ioctl+0xa2>

  switch (cmd)
 8003f9c:	79bb      	ldrb	r3, [r7, #6]
 8003f9e:	2b03      	cmp	r3, #3
 8003fa0:	d834      	bhi.n	800400c <SD_ioctl+0x98>
 8003fa2:	a201      	add	r2, pc, #4	; (adr r2, 8003fa8 <SD_ioctl+0x34>)
 8003fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa8:	08003fb9 	.word	0x08003fb9
 8003fac:	08003fc1 	.word	0x08003fc1
 8003fb0:	08003fd9 	.word	0x08003fd9
 8003fb4:	08003ff3 	.word	0x08003ff3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8003fbe:	e028      	b.n	8004012 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8003fc0:	f107 030c 	add.w	r3, r7, #12
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7ff ff2d 	bl	8003e24 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8003fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8003fd6:	e01c      	b.n	8004012 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8003fd8:	f107 030c 	add.w	r3, r7, #12
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7ff ff21 	bl	8003e24 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8003fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8003fea:	2300      	movs	r3, #0
 8003fec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8003ff0:	e00f      	b.n	8004012 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8003ff2:	f107 030c 	add.w	r3, r7, #12
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7ff ff14 	bl	8003e24 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8003ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffe:	0a5a      	lsrs	r2, r3, #9
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004004:	2300      	movs	r3, #0
 8004006:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800400a:	e002      	b.n	8004012 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800400c:	2304      	movs	r3, #4
 800400e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8004012:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004016:	4618      	mov	r0, r3
 8004018:	3730      	adds	r7, #48	; 0x30
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	20000009 	.word	0x20000009

08004024 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	4603      	mov	r3, r0
 800402c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800402e:	79fb      	ldrb	r3, [r7, #7]
 8004030:	4a08      	ldr	r2, [pc, #32]	; (8004054 <disk_status+0x30>)
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4413      	add	r3, r2
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	79fa      	ldrb	r2, [r7, #7]
 800403c:	4905      	ldr	r1, [pc, #20]	; (8004054 <disk_status+0x30>)
 800403e:	440a      	add	r2, r1
 8004040:	7a12      	ldrb	r2, [r2, #8]
 8004042:	4610      	mov	r0, r2
 8004044:	4798      	blx	r3
 8004046:	4603      	mov	r3, r0
 8004048:	73fb      	strb	r3, [r7, #15]
  return stat;
 800404a:	7bfb      	ldrb	r3, [r7, #15]
}
 800404c:	4618      	mov	r0, r3
 800404e:	3710      	adds	r7, #16
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	20001050 	.word	0x20001050

08004058 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	4603      	mov	r3, r0
 8004060:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004062:	2300      	movs	r3, #0
 8004064:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004066:	79fb      	ldrb	r3, [r7, #7]
 8004068:	4a0d      	ldr	r2, [pc, #52]	; (80040a0 <disk_initialize+0x48>)
 800406a:	5cd3      	ldrb	r3, [r2, r3]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d111      	bne.n	8004094 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004070:	79fb      	ldrb	r3, [r7, #7]
 8004072:	4a0b      	ldr	r2, [pc, #44]	; (80040a0 <disk_initialize+0x48>)
 8004074:	2101      	movs	r1, #1
 8004076:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004078:	79fb      	ldrb	r3, [r7, #7]
 800407a:	4a09      	ldr	r2, [pc, #36]	; (80040a0 <disk_initialize+0x48>)
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4413      	add	r3, r2
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	79fa      	ldrb	r2, [r7, #7]
 8004086:	4906      	ldr	r1, [pc, #24]	; (80040a0 <disk_initialize+0x48>)
 8004088:	440a      	add	r2, r1
 800408a:	7a12      	ldrb	r2, [r2, #8]
 800408c:	4610      	mov	r0, r2
 800408e:	4798      	blx	r3
 8004090:	4603      	mov	r3, r0
 8004092:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004094:	7bfb      	ldrb	r3, [r7, #15]
}
 8004096:	4618      	mov	r0, r3
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	20001050 	.word	0x20001050

080040a4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80040a4:	b590      	push	{r4, r7, lr}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60b9      	str	r1, [r7, #8]
 80040ac:	607a      	str	r2, [r7, #4]
 80040ae:	603b      	str	r3, [r7, #0]
 80040b0:	4603      	mov	r3, r0
 80040b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80040b4:	7bfb      	ldrb	r3, [r7, #15]
 80040b6:	4a0a      	ldr	r2, [pc, #40]	; (80040e0 <disk_read+0x3c>)
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	689c      	ldr	r4, [r3, #8]
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
 80040c2:	4a07      	ldr	r2, [pc, #28]	; (80040e0 <disk_read+0x3c>)
 80040c4:	4413      	add	r3, r2
 80040c6:	7a18      	ldrb	r0, [r3, #8]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	68b9      	ldr	r1, [r7, #8]
 80040ce:	47a0      	blx	r4
 80040d0:	4603      	mov	r3, r0
 80040d2:	75fb      	strb	r3, [r7, #23]
  return res;
 80040d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	371c      	adds	r7, #28
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd90      	pop	{r4, r7, pc}
 80040de:	bf00      	nop
 80040e0:	20001050 	.word	0x20001050

080040e4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80040e4:	b590      	push	{r4, r7, lr}
 80040e6:	b087      	sub	sp, #28
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60b9      	str	r1, [r7, #8]
 80040ec:	607a      	str	r2, [r7, #4]
 80040ee:	603b      	str	r3, [r7, #0]
 80040f0:	4603      	mov	r3, r0
 80040f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80040f4:	7bfb      	ldrb	r3, [r7, #15]
 80040f6:	4a0a      	ldr	r2, [pc, #40]	; (8004120 <disk_write+0x3c>)
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4413      	add	r3, r2
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	68dc      	ldr	r4, [r3, #12]
 8004100:	7bfb      	ldrb	r3, [r7, #15]
 8004102:	4a07      	ldr	r2, [pc, #28]	; (8004120 <disk_write+0x3c>)
 8004104:	4413      	add	r3, r2
 8004106:	7a18      	ldrb	r0, [r3, #8]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	68b9      	ldr	r1, [r7, #8]
 800410e:	47a0      	blx	r4
 8004110:	4603      	mov	r3, r0
 8004112:	75fb      	strb	r3, [r7, #23]
  return res;
 8004114:	7dfb      	ldrb	r3, [r7, #23]
}
 8004116:	4618      	mov	r0, r3
 8004118:	371c      	adds	r7, #28
 800411a:	46bd      	mov	sp, r7
 800411c:	bd90      	pop	{r4, r7, pc}
 800411e:	bf00      	nop
 8004120:	20001050 	.word	0x20001050

08004124 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	4603      	mov	r3, r0
 800412c:	603a      	str	r2, [r7, #0]
 800412e:	71fb      	strb	r3, [r7, #7]
 8004130:	460b      	mov	r3, r1
 8004132:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004134:	79fb      	ldrb	r3, [r7, #7]
 8004136:	4a09      	ldr	r2, [pc, #36]	; (800415c <disk_ioctl+0x38>)
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	4413      	add	r3, r2
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	79fa      	ldrb	r2, [r7, #7]
 8004142:	4906      	ldr	r1, [pc, #24]	; (800415c <disk_ioctl+0x38>)
 8004144:	440a      	add	r2, r1
 8004146:	7a10      	ldrb	r0, [r2, #8]
 8004148:	79b9      	ldrb	r1, [r7, #6]
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	4798      	blx	r3
 800414e:	4603      	mov	r3, r0
 8004150:	73fb      	strb	r3, [r7, #15]
  return res;
 8004152:	7bfb      	ldrb	r3, [r7, #15]
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	20001050 	.word	0x20001050

08004160 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3301      	adds	r3, #1
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004170:	89fb      	ldrh	r3, [r7, #14]
 8004172:	021b      	lsls	r3, r3, #8
 8004174:	b21a      	sxth	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	b21b      	sxth	r3, r3
 800417c:	4313      	orrs	r3, r2
 800417e:	b21b      	sxth	r3, r3
 8004180:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004182:	89fb      	ldrh	r3, [r7, #14]
}
 8004184:	4618      	mov	r0, r3
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	3303      	adds	r3, #3
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	021b      	lsls	r3, r3, #8
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	3202      	adds	r2, #2
 80041a8:	7812      	ldrb	r2, [r2, #0]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	021b      	lsls	r3, r3, #8
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	3201      	adds	r2, #1
 80041b6:	7812      	ldrb	r2, [r2, #0]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	021b      	lsls	r3, r3, #8
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	7812      	ldrb	r2, [r2, #0]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	60fb      	str	r3, [r7, #12]
	return rv;
 80041c8:	68fb      	ldr	r3, [r7, #12]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3714      	adds	r7, #20
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
 80041de:	460b      	mov	r3, r1
 80041e0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	1c5a      	adds	r2, r3, #1
 80041e6:	607a      	str	r2, [r7, #4]
 80041e8:	887a      	ldrh	r2, [r7, #2]
 80041ea:	b2d2      	uxtb	r2, r2
 80041ec:	701a      	strb	r2, [r3, #0]
 80041ee:	887b      	ldrh	r3, [r7, #2]
 80041f0:	0a1b      	lsrs	r3, r3, #8
 80041f2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	1c5a      	adds	r2, r3, #1
 80041f8:	607a      	str	r2, [r7, #4]
 80041fa:	887a      	ldrh	r2, [r7, #2]
 80041fc:	b2d2      	uxtb	r2, r2
 80041fe:	701a      	strb	r2, [r3, #0]
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	1c5a      	adds	r2, r3, #1
 800421a:	607a      	str	r2, [r7, #4]
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	b2d2      	uxtb	r2, r2
 8004220:	701a      	strb	r2, [r3, #0]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	0a1b      	lsrs	r3, r3, #8
 8004226:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	1c5a      	adds	r2, r3, #1
 800422c:	607a      	str	r2, [r7, #4]
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	b2d2      	uxtb	r2, r2
 8004232:	701a      	strb	r2, [r3, #0]
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	0a1b      	lsrs	r3, r3, #8
 8004238:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	1c5a      	adds	r2, r3, #1
 800423e:	607a      	str	r2, [r7, #4]
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	b2d2      	uxtb	r2, r2
 8004244:	701a      	strb	r2, [r3, #0]
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	0a1b      	lsrs	r3, r3, #8
 800424a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	1c5a      	adds	r2, r3, #1
 8004250:	607a      	str	r2, [r7, #4]
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	b2d2      	uxtb	r2, r2
 8004256:	701a      	strb	r2, [r3, #0]
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004264:	b480      	push	{r7}
 8004266:	b087      	sub	sp, #28
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00d      	beq.n	800429a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	1c53      	adds	r3, r2, #1
 8004282:	613b      	str	r3, [r7, #16]
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	1c59      	adds	r1, r3, #1
 8004288:	6179      	str	r1, [r7, #20]
 800428a:	7812      	ldrb	r2, [r2, #0]
 800428c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	3b01      	subs	r3, #1
 8004292:	607b      	str	r3, [r7, #4]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1f1      	bne.n	800427e <mem_cpy+0x1a>
	}
}
 800429a:	bf00      	nop
 800429c:	371c      	adds	r7, #28
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80042a6:	b480      	push	{r7}
 80042a8:	b087      	sub	sp, #28
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	60f8      	str	r0, [r7, #12]
 80042ae:	60b9      	str	r1, [r7, #8]
 80042b0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	1c5a      	adds	r2, r3, #1
 80042ba:	617a      	str	r2, [r7, #20]
 80042bc:	68ba      	ldr	r2, [r7, #8]
 80042be:	b2d2      	uxtb	r2, r2
 80042c0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	3b01      	subs	r3, #1
 80042c6:	607b      	str	r3, [r7, #4]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1f3      	bne.n	80042b6 <mem_set+0x10>
}
 80042ce:	bf00      	nop
 80042d0:	bf00      	nop
 80042d2:	371c      	adds	r7, #28
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80042dc:	b480      	push	{r7}
 80042de:	b089      	sub	sp, #36	; 0x24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	61fb      	str	r3, [r7, #28]
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80042f0:	2300      	movs	r3, #0
 80042f2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	1c5a      	adds	r2, r3, #1
 80042f8:	61fa      	str	r2, [r7, #28]
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	4619      	mov	r1, r3
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	1c5a      	adds	r2, r3, #1
 8004302:	61ba      	str	r2, [r7, #24]
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	1acb      	subs	r3, r1, r3
 8004308:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	3b01      	subs	r3, #1
 800430e:	607b      	str	r3, [r7, #4]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <mem_cmp+0x40>
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d0eb      	beq.n	80042f4 <mem_cmp+0x18>

	return r;
 800431c:	697b      	ldr	r3, [r7, #20]
}
 800431e:	4618      	mov	r0, r3
 8004320:	3724      	adds	r7, #36	; 0x24
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr

0800432a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800432a:	b480      	push	{r7}
 800432c:	b083      	sub	sp, #12
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
 8004332:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004334:	e002      	b.n	800433c <chk_chr+0x12>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	3301      	adds	r3, #1
 800433a:	607b      	str	r3, [r7, #4]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d005      	beq.n	8004350 <chk_chr+0x26>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	461a      	mov	r2, r3
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	4293      	cmp	r3, r2
 800434e:	d1f2      	bne.n	8004336 <chk_chr+0xc>
	return *str;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	781b      	ldrb	r3, [r3, #0]
}
 8004354:	4618      	mov	r0, r3
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800436a:	2300      	movs	r3, #0
 800436c:	60bb      	str	r3, [r7, #8]
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	60fb      	str	r3, [r7, #12]
 8004372:	e029      	b.n	80043c8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004374:	4a27      	ldr	r2, [pc, #156]	; (8004414 <chk_lock+0xb4>)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	011b      	lsls	r3, r3, #4
 800437a:	4413      	add	r3, r2
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d01d      	beq.n	80043be <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004382:	4a24      	ldr	r2, [pc, #144]	; (8004414 <chk_lock+0xb4>)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	011b      	lsls	r3, r3, #4
 8004388:	4413      	add	r3, r2
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	429a      	cmp	r2, r3
 8004392:	d116      	bne.n	80043c2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004394:	4a1f      	ldr	r2, [pc, #124]	; (8004414 <chk_lock+0xb4>)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	011b      	lsls	r3, r3, #4
 800439a:	4413      	add	r3, r2
 800439c:	3304      	adds	r3, #4
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d10c      	bne.n	80043c2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80043a8:	4a1a      	ldr	r2, [pc, #104]	; (8004414 <chk_lock+0xb4>)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	011b      	lsls	r3, r3, #4
 80043ae:	4413      	add	r3, r2
 80043b0:	3308      	adds	r3, #8
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d102      	bne.n	80043c2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80043bc:	e007      	b.n	80043ce <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80043be:	2301      	movs	r3, #1
 80043c0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	3301      	adds	r3, #1
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d9d2      	bls.n	8004374 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d109      	bne.n	80043e8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d102      	bne.n	80043e0 <chk_lock+0x80>
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d101      	bne.n	80043e4 <chk_lock+0x84>
 80043e0:	2300      	movs	r3, #0
 80043e2:	e010      	b.n	8004406 <chk_lock+0xa6>
 80043e4:	2312      	movs	r3, #18
 80043e6:	e00e      	b.n	8004406 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d108      	bne.n	8004400 <chk_lock+0xa0>
 80043ee:	4a09      	ldr	r2, [pc, #36]	; (8004414 <chk_lock+0xb4>)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	011b      	lsls	r3, r3, #4
 80043f4:	4413      	add	r3, r2
 80043f6:	330c      	adds	r3, #12
 80043f8:	881b      	ldrh	r3, [r3, #0]
 80043fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043fe:	d101      	bne.n	8004404 <chk_lock+0xa4>
 8004400:	2310      	movs	r3, #16
 8004402:	e000      	b.n	8004406 <chk_lock+0xa6>
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3714      	adds	r7, #20
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	20001030 	.word	0x20001030

08004418 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800441e:	2300      	movs	r3, #0
 8004420:	607b      	str	r3, [r7, #4]
 8004422:	e002      	b.n	800442a <enq_lock+0x12>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3301      	adds	r3, #1
 8004428:	607b      	str	r3, [r7, #4]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d806      	bhi.n	800443e <enq_lock+0x26>
 8004430:	4a09      	ldr	r2, [pc, #36]	; (8004458 <enq_lock+0x40>)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	011b      	lsls	r3, r3, #4
 8004436:	4413      	add	r3, r2
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1f2      	bne.n	8004424 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b02      	cmp	r3, #2
 8004442:	bf14      	ite	ne
 8004444:	2301      	movne	r3, #1
 8004446:	2300      	moveq	r3, #0
 8004448:	b2db      	uxtb	r3, r3
}
 800444a:	4618      	mov	r0, r3
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	20001030 	.word	0x20001030

0800445c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004466:	2300      	movs	r3, #0
 8004468:	60fb      	str	r3, [r7, #12]
 800446a:	e01f      	b.n	80044ac <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800446c:	4a41      	ldr	r2, [pc, #260]	; (8004574 <inc_lock+0x118>)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	011b      	lsls	r3, r3, #4
 8004472:	4413      	add	r3, r2
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	429a      	cmp	r2, r3
 800447c:	d113      	bne.n	80044a6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800447e:	4a3d      	ldr	r2, [pc, #244]	; (8004574 <inc_lock+0x118>)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	011b      	lsls	r3, r3, #4
 8004484:	4413      	add	r3, r2
 8004486:	3304      	adds	r3, #4
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800448e:	429a      	cmp	r2, r3
 8004490:	d109      	bne.n	80044a6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004492:	4a38      	ldr	r2, [pc, #224]	; (8004574 <inc_lock+0x118>)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	011b      	lsls	r3, r3, #4
 8004498:	4413      	add	r3, r2
 800449a:	3308      	adds	r3, #8
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d006      	beq.n	80044b4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	3301      	adds	r3, #1
 80044aa:	60fb      	str	r3, [r7, #12]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d9dc      	bls.n	800446c <inc_lock+0x10>
 80044b2:	e000      	b.n	80044b6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80044b4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d132      	bne.n	8004522 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80044bc:	2300      	movs	r3, #0
 80044be:	60fb      	str	r3, [r7, #12]
 80044c0:	e002      	b.n	80044c8 <inc_lock+0x6c>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	3301      	adds	r3, #1
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d806      	bhi.n	80044dc <inc_lock+0x80>
 80044ce:	4a29      	ldr	r2, [pc, #164]	; (8004574 <inc_lock+0x118>)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	011b      	lsls	r3, r3, #4
 80044d4:	4413      	add	r3, r2
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1f2      	bne.n	80044c2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d101      	bne.n	80044e6 <inc_lock+0x8a>
 80044e2:	2300      	movs	r3, #0
 80044e4:	e040      	b.n	8004568 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	4922      	ldr	r1, [pc, #136]	; (8004574 <inc_lock+0x118>)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	011b      	lsls	r3, r3, #4
 80044f0:	440b      	add	r3, r1
 80044f2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689a      	ldr	r2, [r3, #8]
 80044f8:	491e      	ldr	r1, [pc, #120]	; (8004574 <inc_lock+0x118>)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	011b      	lsls	r3, r3, #4
 80044fe:	440b      	add	r3, r1
 8004500:	3304      	adds	r3, #4
 8004502:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	695a      	ldr	r2, [r3, #20]
 8004508:	491a      	ldr	r1, [pc, #104]	; (8004574 <inc_lock+0x118>)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	011b      	lsls	r3, r3, #4
 800450e:	440b      	add	r3, r1
 8004510:	3308      	adds	r3, #8
 8004512:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004514:	4a17      	ldr	r2, [pc, #92]	; (8004574 <inc_lock+0x118>)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	011b      	lsls	r3, r3, #4
 800451a:	4413      	add	r3, r2
 800451c:	330c      	adds	r3, #12
 800451e:	2200      	movs	r2, #0
 8004520:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d009      	beq.n	800453c <inc_lock+0xe0>
 8004528:	4a12      	ldr	r2, [pc, #72]	; (8004574 <inc_lock+0x118>)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	011b      	lsls	r3, r3, #4
 800452e:	4413      	add	r3, r2
 8004530:	330c      	adds	r3, #12
 8004532:	881b      	ldrh	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d001      	beq.n	800453c <inc_lock+0xe0>
 8004538:	2300      	movs	r3, #0
 800453a:	e015      	b.n	8004568 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d108      	bne.n	8004554 <inc_lock+0xf8>
 8004542:	4a0c      	ldr	r2, [pc, #48]	; (8004574 <inc_lock+0x118>)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	011b      	lsls	r3, r3, #4
 8004548:	4413      	add	r3, r2
 800454a:	330c      	adds	r3, #12
 800454c:	881b      	ldrh	r3, [r3, #0]
 800454e:	3301      	adds	r3, #1
 8004550:	b29a      	uxth	r2, r3
 8004552:	e001      	b.n	8004558 <inc_lock+0xfc>
 8004554:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004558:	4906      	ldr	r1, [pc, #24]	; (8004574 <inc_lock+0x118>)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	011b      	lsls	r3, r3, #4
 800455e:	440b      	add	r3, r1
 8004560:	330c      	adds	r3, #12
 8004562:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	3301      	adds	r3, #1
}
 8004568:	4618      	mov	r0, r3
 800456a:	3714      	adds	r7, #20
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	20001030 	.word	0x20001030

08004578 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	3b01      	subs	r3, #1
 8004584:	607b      	str	r3, [r7, #4]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d825      	bhi.n	80045d8 <dec_lock+0x60>
		n = Files[i].ctr;
 800458c:	4a17      	ldr	r2, [pc, #92]	; (80045ec <dec_lock+0x74>)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	011b      	lsls	r3, r3, #4
 8004592:	4413      	add	r3, r2
 8004594:	330c      	adds	r3, #12
 8004596:	881b      	ldrh	r3, [r3, #0]
 8004598:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800459a:	89fb      	ldrh	r3, [r7, #14]
 800459c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045a0:	d101      	bne.n	80045a6 <dec_lock+0x2e>
 80045a2:	2300      	movs	r3, #0
 80045a4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80045a6:	89fb      	ldrh	r3, [r7, #14]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d002      	beq.n	80045b2 <dec_lock+0x3a>
 80045ac:	89fb      	ldrh	r3, [r7, #14]
 80045ae:	3b01      	subs	r3, #1
 80045b0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80045b2:	4a0e      	ldr	r2, [pc, #56]	; (80045ec <dec_lock+0x74>)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	011b      	lsls	r3, r3, #4
 80045b8:	4413      	add	r3, r2
 80045ba:	330c      	adds	r3, #12
 80045bc:	89fa      	ldrh	r2, [r7, #14]
 80045be:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80045c0:	89fb      	ldrh	r3, [r7, #14]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d105      	bne.n	80045d2 <dec_lock+0x5a>
 80045c6:	4a09      	ldr	r2, [pc, #36]	; (80045ec <dec_lock+0x74>)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	011b      	lsls	r3, r3, #4
 80045cc:	4413      	add	r3, r2
 80045ce:	2200      	movs	r2, #0
 80045d0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80045d2:	2300      	movs	r3, #0
 80045d4:	737b      	strb	r3, [r7, #13]
 80045d6:	e001      	b.n	80045dc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80045d8:	2302      	movs	r3, #2
 80045da:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80045dc:	7b7b      	ldrb	r3, [r7, #13]
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3714      	adds	r7, #20
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	20001030 	.word	0x20001030

080045f0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80045f8:	2300      	movs	r3, #0
 80045fa:	60fb      	str	r3, [r7, #12]
 80045fc:	e010      	b.n	8004620 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80045fe:	4a0d      	ldr	r2, [pc, #52]	; (8004634 <clear_lock+0x44>)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	011b      	lsls	r3, r3, #4
 8004604:	4413      	add	r3, r2
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	429a      	cmp	r2, r3
 800460c:	d105      	bne.n	800461a <clear_lock+0x2a>
 800460e:	4a09      	ldr	r2, [pc, #36]	; (8004634 <clear_lock+0x44>)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	011b      	lsls	r3, r3, #4
 8004614:	4413      	add	r3, r2
 8004616:	2200      	movs	r2, #0
 8004618:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	3301      	adds	r3, #1
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d9eb      	bls.n	80045fe <clear_lock+0xe>
	}
}
 8004626:	bf00      	nop
 8004628:	bf00      	nop
 800462a:	3714      	adds	r7, #20
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr
 8004634:	20001030 	.word	0x20001030

08004638 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b086      	sub	sp, #24
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004640:	2300      	movs	r3, #0
 8004642:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	78db      	ldrb	r3, [r3, #3]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d034      	beq.n	80046b6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004650:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	7858      	ldrb	r0, [r3, #1]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800465c:	2301      	movs	r3, #1
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	f7ff fd40 	bl	80040e4 <disk_write>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d002      	beq.n	8004670 <sync_window+0x38>
			res = FR_DISK_ERR;
 800466a:	2301      	movs	r3, #1
 800466c:	73fb      	strb	r3, [r7, #15]
 800466e:	e022      	b.n	80046b6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	1ad2      	subs	r2, r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	429a      	cmp	r2, r3
 8004684:	d217      	bcs.n	80046b6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	789b      	ldrb	r3, [r3, #2]
 800468a:	613b      	str	r3, [r7, #16]
 800468c:	e010      	b.n	80046b0 <sync_window+0x78>
					wsect += fs->fsize;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	69db      	ldr	r3, [r3, #28]
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	4413      	add	r3, r2
 8004696:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	7858      	ldrb	r0, [r3, #1]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80046a2:	2301      	movs	r3, #1
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	f7ff fd1d 	bl	80040e4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	3b01      	subs	r3, #1
 80046ae:	613b      	str	r3, [r7, #16]
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d8eb      	bhi.n	800468e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80046b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3718      	adds	r7, #24
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80046ca:	2300      	movs	r3, #0
 80046cc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d01b      	beq.n	8004710 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f7ff ffad 	bl	8004638 <sync_window>
 80046de:	4603      	mov	r3, r0
 80046e0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80046e2:	7bfb      	ldrb	r3, [r7, #15]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d113      	bne.n	8004710 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	7858      	ldrb	r0, [r3, #1]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80046f2:	2301      	movs	r3, #1
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	f7ff fcd5 	bl	80040a4 <disk_read>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d004      	beq.n	800470a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004700:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004704:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004706:	2301      	movs	r3, #1
 8004708:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	683a      	ldr	r2, [r7, #0]
 800470e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8004710:	7bfb      	ldrb	r3, [r7, #15]
}
 8004712:	4618      	mov	r0, r3
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
	...

0800471c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f7ff ff87 	bl	8004638 <sync_window>
 800472a:	4603      	mov	r3, r0
 800472c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800472e:	7bfb      	ldrb	r3, [r7, #15]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d159      	bne.n	80047e8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	2b03      	cmp	r3, #3
 800473a:	d149      	bne.n	80047d0 <sync_fs+0xb4>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	791b      	ldrb	r3, [r3, #4]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d145      	bne.n	80047d0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	899b      	ldrh	r3, [r3, #12]
 800474e:	461a      	mov	r2, r3
 8004750:	2100      	movs	r1, #0
 8004752:	f7ff fda8 	bl	80042a6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	3334      	adds	r3, #52	; 0x34
 800475a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800475e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004762:	4618      	mov	r0, r3
 8004764:	f7ff fd37 	bl	80041d6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	3334      	adds	r3, #52	; 0x34
 800476c:	4921      	ldr	r1, [pc, #132]	; (80047f4 <sync_fs+0xd8>)
 800476e:	4618      	mov	r0, r3
 8004770:	f7ff fd4c 	bl	800420c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	3334      	adds	r3, #52	; 0x34
 8004778:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800477c:	491e      	ldr	r1, [pc, #120]	; (80047f8 <sync_fs+0xdc>)
 800477e:	4618      	mov	r0, r3
 8004780:	f7ff fd44 	bl	800420c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	3334      	adds	r3, #52	; 0x34
 8004788:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	4619      	mov	r1, r3
 8004792:	4610      	mov	r0, r2
 8004794:	f7ff fd3a 	bl	800420c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	3334      	adds	r3, #52	; 0x34
 800479c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	4619      	mov	r1, r3
 80047a6:	4610      	mov	r0, r2
 80047a8:	f7ff fd30 	bl	800420c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	1c5a      	adds	r2, r3, #1
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	7858      	ldrb	r0, [r3, #1]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047c4:	2301      	movs	r3, #1
 80047c6:	f7ff fc8d 	bl	80040e4 <disk_write>
			fs->fsi_flag = 0;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	785b      	ldrb	r3, [r3, #1]
 80047d4:	2200      	movs	r2, #0
 80047d6:	2100      	movs	r1, #0
 80047d8:	4618      	mov	r0, r3
 80047da:	f7ff fca3 	bl	8004124 <disk_ioctl>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d001      	beq.n	80047e8 <sync_fs+0xcc>
 80047e4:	2301      	movs	r3, #1
 80047e6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80047e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	41615252 	.word	0x41615252
 80047f8:	61417272 	.word	0x61417272

080047fc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	3b02      	subs	r3, #2
 800480a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	3b02      	subs	r3, #2
 8004812:	683a      	ldr	r2, [r7, #0]
 8004814:	429a      	cmp	r2, r3
 8004816:	d301      	bcc.n	800481c <clust2sect+0x20>
 8004818:	2300      	movs	r3, #0
 800481a:	e008      	b.n	800482e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	895b      	ldrh	r3, [r3, #10]
 8004820:	461a      	mov	r2, r3
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	fb03 f202 	mul.w	r2, r3, r2
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482c:	4413      	add	r3, r2
}
 800482e:	4618      	mov	r0, r3
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b086      	sub	sp, #24
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
 8004842:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d904      	bls.n	800485a <get_fat+0x20>
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	429a      	cmp	r2, r3
 8004858:	d302      	bcc.n	8004860 <get_fat+0x26>
		val = 1;	/* Internal error */
 800485a:	2301      	movs	r3, #1
 800485c:	617b      	str	r3, [r7, #20]
 800485e:	e0bb      	b.n	80049d8 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004860:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004864:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	2b03      	cmp	r3, #3
 800486c:	f000 8083 	beq.w	8004976 <get_fat+0x13c>
 8004870:	2b03      	cmp	r3, #3
 8004872:	f300 80a7 	bgt.w	80049c4 <get_fat+0x18a>
 8004876:	2b01      	cmp	r3, #1
 8004878:	d002      	beq.n	8004880 <get_fat+0x46>
 800487a:	2b02      	cmp	r3, #2
 800487c:	d056      	beq.n	800492c <get_fat+0xf2>
 800487e:	e0a1      	b.n	80049c4 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	60fb      	str	r3, [r7, #12]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	085b      	lsrs	r3, r3, #1
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	4413      	add	r3, r2
 800488c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	899b      	ldrh	r3, [r3, #12]
 8004896:	4619      	mov	r1, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	fbb3 f3f1 	udiv	r3, r3, r1
 800489e:	4413      	add	r3, r2
 80048a0:	4619      	mov	r1, r3
 80048a2:	6938      	ldr	r0, [r7, #16]
 80048a4:	f7ff ff0c 	bl	80046c0 <move_window>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f040 808d 	bne.w	80049ca <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	1c5a      	adds	r2, r3, #1
 80048b4:	60fa      	str	r2, [r7, #12]
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	8992      	ldrh	r2, [r2, #12]
 80048ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80048be:	fb02 f201 	mul.w	r2, r2, r1
 80048c2:	1a9b      	subs	r3, r3, r2
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	4413      	add	r3, r2
 80048c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80048cc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	899b      	ldrh	r3, [r3, #12]
 80048d6:	4619      	mov	r1, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	fbb3 f3f1 	udiv	r3, r3, r1
 80048de:	4413      	add	r3, r2
 80048e0:	4619      	mov	r1, r3
 80048e2:	6938      	ldr	r0, [r7, #16]
 80048e4:	f7ff feec 	bl	80046c0 <move_window>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d16f      	bne.n	80049ce <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	899b      	ldrh	r3, [r3, #12]
 80048f2:	461a      	mov	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80048fa:	fb02 f201 	mul.w	r2, r2, r1
 80048fe:	1a9b      	subs	r3, r3, r2
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	4413      	add	r3, r2
 8004904:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004908:	021b      	lsls	r3, r3, #8
 800490a:	461a      	mov	r2, r3
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	4313      	orrs	r3, r2
 8004910:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	f003 0301 	and.w	r3, r3, #1
 8004918:	2b00      	cmp	r3, #0
 800491a:	d002      	beq.n	8004922 <get_fat+0xe8>
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	091b      	lsrs	r3, r3, #4
 8004920:	e002      	b.n	8004928 <get_fat+0xee>
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004928:	617b      	str	r3, [r7, #20]
			break;
 800492a:	e055      	b.n	80049d8 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	899b      	ldrh	r3, [r3, #12]
 8004934:	085b      	lsrs	r3, r3, #1
 8004936:	b29b      	uxth	r3, r3
 8004938:	4619      	mov	r1, r3
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004940:	4413      	add	r3, r2
 8004942:	4619      	mov	r1, r3
 8004944:	6938      	ldr	r0, [r7, #16]
 8004946:	f7ff febb 	bl	80046c0 <move_window>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d140      	bne.n	80049d2 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	8992      	ldrh	r2, [r2, #12]
 800495e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004962:	fb02 f200 	mul.w	r2, r2, r0
 8004966:	1a9b      	subs	r3, r3, r2
 8004968:	440b      	add	r3, r1
 800496a:	4618      	mov	r0, r3
 800496c:	f7ff fbf8 	bl	8004160 <ld_word>
 8004970:	4603      	mov	r3, r0
 8004972:	617b      	str	r3, [r7, #20]
			break;
 8004974:	e030      	b.n	80049d8 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	899b      	ldrh	r3, [r3, #12]
 800497e:	089b      	lsrs	r3, r3, #2
 8004980:	b29b      	uxth	r3, r3
 8004982:	4619      	mov	r1, r3
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	fbb3 f3f1 	udiv	r3, r3, r1
 800498a:	4413      	add	r3, r2
 800498c:	4619      	mov	r1, r3
 800498e:	6938      	ldr	r0, [r7, #16]
 8004990:	f7ff fe96 	bl	80046c0 <move_window>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d11d      	bne.n	80049d6 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	8992      	ldrh	r2, [r2, #12]
 80049a8:	fbb3 f0f2 	udiv	r0, r3, r2
 80049ac:	fb02 f200 	mul.w	r2, r2, r0
 80049b0:	1a9b      	subs	r3, r3, r2
 80049b2:	440b      	add	r3, r1
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7ff fbeb 	bl	8004190 <ld_dword>
 80049ba:	4603      	mov	r3, r0
 80049bc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80049c0:	617b      	str	r3, [r7, #20]
			break;
 80049c2:	e009      	b.n	80049d8 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80049c4:	2301      	movs	r3, #1
 80049c6:	617b      	str	r3, [r7, #20]
 80049c8:	e006      	b.n	80049d8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80049ca:	bf00      	nop
 80049cc:	e004      	b.n	80049d8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80049ce:	bf00      	nop
 80049d0:	e002      	b.n	80049d8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80049d2:	bf00      	nop
 80049d4:	e000      	b.n	80049d8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80049d6:	bf00      	nop
		}
	}

	return val;
 80049d8:	697b      	ldr	r3, [r7, #20]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3718      	adds	r7, #24
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80049e2:	b590      	push	{r4, r7, lr}
 80049e4:	b089      	sub	sp, #36	; 0x24
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	60f8      	str	r0, [r7, #12]
 80049ea:	60b9      	str	r1, [r7, #8]
 80049ec:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80049ee:	2302      	movs	r3, #2
 80049f0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	f240 8102 	bls.w	8004bfe <put_fat+0x21c>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	f080 80fc 	bcs.w	8004bfe <put_fat+0x21c>
		switch (fs->fs_type) {
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	2b03      	cmp	r3, #3
 8004a0c:	f000 80b6 	beq.w	8004b7c <put_fat+0x19a>
 8004a10:	2b03      	cmp	r3, #3
 8004a12:	f300 80fd 	bgt.w	8004c10 <put_fat+0x22e>
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d003      	beq.n	8004a22 <put_fat+0x40>
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	f000 8083 	beq.w	8004b26 <put_fat+0x144>
 8004a20:	e0f6      	b.n	8004c10 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	61bb      	str	r3, [r7, #24]
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	085b      	lsrs	r3, r3, #1
 8004a2a:	69ba      	ldr	r2, [r7, #24]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	899b      	ldrh	r3, [r3, #12]
 8004a38:	4619      	mov	r1, r3
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a40:	4413      	add	r3, r2
 8004a42:	4619      	mov	r1, r3
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f7ff fe3b 	bl	80046c0 <move_window>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004a4e:	7ffb      	ldrb	r3, [r7, #31]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f040 80d6 	bne.w	8004c02 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	1c5a      	adds	r2, r3, #1
 8004a60:	61ba      	str	r2, [r7, #24]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	8992      	ldrh	r2, [r2, #12]
 8004a66:	fbb3 f0f2 	udiv	r0, r3, r2
 8004a6a:	fb02 f200 	mul.w	r2, r2, r0
 8004a6e:	1a9b      	subs	r3, r3, r2
 8004a70:	440b      	add	r3, r1
 8004a72:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00d      	beq.n	8004a9a <put_fat+0xb8>
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	b25b      	sxtb	r3, r3
 8004a84:	f003 030f 	and.w	r3, r3, #15
 8004a88:	b25a      	sxtb	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	011b      	lsls	r3, r3, #4
 8004a90:	b25b      	sxtb	r3, r3
 8004a92:	4313      	orrs	r3, r2
 8004a94:	b25b      	sxtb	r3, r3
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	e001      	b.n	8004a9e <put_fat+0xbc>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	899b      	ldrh	r3, [r3, #12]
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ab8:	4413      	add	r3, r2
 8004aba:	4619      	mov	r1, r3
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	f7ff fdff 	bl	80046c0 <move_window>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004ac6:	7ffb      	ldrb	r3, [r7, #31]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f040 809c 	bne.w	8004c06 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	899b      	ldrh	r3, [r3, #12]
 8004ad8:	461a      	mov	r2, r3
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	fbb3 f0f2 	udiv	r0, r3, r2
 8004ae0:	fb02 f200 	mul.w	r2, r2, r0
 8004ae4:	1a9b      	subs	r3, r3, r2
 8004ae6:	440b      	add	r3, r1
 8004ae8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d003      	beq.n	8004afc <put_fat+0x11a>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	091b      	lsrs	r3, r3, #4
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	e00e      	b.n	8004b1a <put_fat+0x138>
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	b25b      	sxtb	r3, r3
 8004b02:	f023 030f 	bic.w	r3, r3, #15
 8004b06:	b25a      	sxtb	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	0a1b      	lsrs	r3, r3, #8
 8004b0c:	b25b      	sxtb	r3, r3
 8004b0e:	f003 030f 	and.w	r3, r3, #15
 8004b12:	b25b      	sxtb	r3, r3
 8004b14:	4313      	orrs	r3, r2
 8004b16:	b25b      	sxtb	r3, r3
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2201      	movs	r2, #1
 8004b22:	70da      	strb	r2, [r3, #3]
			break;
 8004b24:	e074      	b.n	8004c10 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	899b      	ldrh	r3, [r3, #12]
 8004b2e:	085b      	lsrs	r3, r3, #1
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	4619      	mov	r1, r3
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b3a:	4413      	add	r3, r2
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	f7ff fdbe 	bl	80046c0 <move_window>
 8004b44:	4603      	mov	r3, r0
 8004b46:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004b48:	7ffb      	ldrb	r3, [r7, #31]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d15d      	bne.n	8004c0a <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	005b      	lsls	r3, r3, #1
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	8992      	ldrh	r2, [r2, #12]
 8004b5c:	fbb3 f0f2 	udiv	r0, r3, r2
 8004b60:	fb02 f200 	mul.w	r2, r2, r0
 8004b64:	1a9b      	subs	r3, r3, r2
 8004b66:	440b      	add	r3, r1
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	b292      	uxth	r2, r2
 8004b6c:	4611      	mov	r1, r2
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7ff fb31 	bl	80041d6 <st_word>
			fs->wflag = 1;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2201      	movs	r2, #1
 8004b78:	70da      	strb	r2, [r3, #3]
			break;
 8004b7a:	e049      	b.n	8004c10 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	899b      	ldrh	r3, [r3, #12]
 8004b84:	089b      	lsrs	r3, r3, #2
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	4619      	mov	r1, r3
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b90:	4413      	add	r3, r2
 8004b92:	4619      	mov	r1, r3
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f7ff fd93 	bl	80046c0 <move_window>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004b9e:	7ffb      	ldrb	r3, [r7, #31]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d134      	bne.n	8004c0e <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	8992      	ldrh	r2, [r2, #12]
 8004bb8:	fbb3 f0f2 	udiv	r0, r3, r2
 8004bbc:	fb02 f200 	mul.w	r2, r2, r0
 8004bc0:	1a9b      	subs	r3, r3, r2
 8004bc2:	440b      	add	r3, r1
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7ff fae3 	bl	8004190 <ld_dword>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004bd0:	4323      	orrs	r3, r4
 8004bd2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	8992      	ldrh	r2, [r2, #12]
 8004be2:	fbb3 f0f2 	udiv	r0, r3, r2
 8004be6:	fb02 f200 	mul.w	r2, r2, r0
 8004bea:	1a9b      	subs	r3, r3, r2
 8004bec:	440b      	add	r3, r1
 8004bee:	6879      	ldr	r1, [r7, #4]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7ff fb0b 	bl	800420c <st_dword>
			fs->wflag = 1;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	70da      	strb	r2, [r3, #3]
			break;
 8004bfc:	e008      	b.n	8004c10 <put_fat+0x22e>
		}
	}
 8004bfe:	bf00      	nop
 8004c00:	e006      	b.n	8004c10 <put_fat+0x22e>
			if (res != FR_OK) break;
 8004c02:	bf00      	nop
 8004c04:	e004      	b.n	8004c10 <put_fat+0x22e>
			if (res != FR_OK) break;
 8004c06:	bf00      	nop
 8004c08:	e002      	b.n	8004c10 <put_fat+0x22e>
			if (res != FR_OK) break;
 8004c0a:	bf00      	nop
 8004c0c:	e000      	b.n	8004c10 <put_fat+0x22e>
			if (res != FR_OK) break;
 8004c0e:	bf00      	nop
	return res;
 8004c10:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3724      	adds	r7, #36	; 0x24
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd90      	pop	{r4, r7, pc}

08004c1a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b088      	sub	sp, #32
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	60f8      	str	r0, [r7, #12]
 8004c22:	60b9      	str	r1, [r7, #8]
 8004c24:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004c26:	2300      	movs	r3, #0
 8004c28:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d904      	bls.n	8004c40 <remove_chain+0x26>
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	68ba      	ldr	r2, [r7, #8]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d301      	bcc.n	8004c44 <remove_chain+0x2a>
 8004c40:	2302      	movs	r3, #2
 8004c42:	e04b      	b.n	8004cdc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00c      	beq.n	8004c64 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004c4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c4e:	6879      	ldr	r1, [r7, #4]
 8004c50:	69b8      	ldr	r0, [r7, #24]
 8004c52:	f7ff fec6 	bl	80049e2 <put_fat>
 8004c56:	4603      	mov	r3, r0
 8004c58:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004c5a:	7ffb      	ldrb	r3, [r7, #31]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d001      	beq.n	8004c64 <remove_chain+0x4a>
 8004c60:	7ffb      	ldrb	r3, [r7, #31]
 8004c62:	e03b      	b.n	8004cdc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004c64:	68b9      	ldr	r1, [r7, #8]
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f7ff fde7 	bl	800483a <get_fat>
 8004c6c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d031      	beq.n	8004cd8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d101      	bne.n	8004c7e <remove_chain+0x64>
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	e02e      	b.n	8004cdc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c84:	d101      	bne.n	8004c8a <remove_chain+0x70>
 8004c86:	2301      	movs	r3, #1
 8004c88:	e028      	b.n	8004cdc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	68b9      	ldr	r1, [r7, #8]
 8004c8e:	69b8      	ldr	r0, [r7, #24]
 8004c90:	f7ff fea7 	bl	80049e2 <put_fat>
 8004c94:	4603      	mov	r3, r0
 8004c96:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004c98:	7ffb      	ldrb	r3, [r7, #31]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d001      	beq.n	8004ca2 <remove_chain+0x88>
 8004c9e:	7ffb      	ldrb	r3, [r7, #31]
 8004ca0:	e01c      	b.n	8004cdc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	695a      	ldr	r2, [r3, #20]
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	3b02      	subs	r3, #2
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d20b      	bcs.n	8004cc8 <remove_chain+0xae>
			fs->free_clst++;
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	1c5a      	adds	r2, r3, #1
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	791b      	ldrb	r3, [r3, #4]
 8004cbe:	f043 0301 	orr.w	r3, r3, #1
 8004cc2:	b2da      	uxtb	r2, r3
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d3c6      	bcc.n	8004c64 <remove_chain+0x4a>
 8004cd6:	e000      	b.n	8004cda <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004cd8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3720      	adds	r7, #32
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b088      	sub	sp, #32
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d10d      	bne.n	8004d16 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d004      	beq.n	8004d10 <create_chain+0x2c>
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	69ba      	ldr	r2, [r7, #24]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d31b      	bcc.n	8004d48 <create_chain+0x64>
 8004d10:	2301      	movs	r3, #1
 8004d12:	61bb      	str	r3, [r7, #24]
 8004d14:	e018      	b.n	8004d48 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004d16:	6839      	ldr	r1, [r7, #0]
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f7ff fd8e 	bl	800483a <get_fat>
 8004d1e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d801      	bhi.n	8004d2a <create_chain+0x46>
 8004d26:	2301      	movs	r3, #1
 8004d28:	e070      	b.n	8004e0c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d30:	d101      	bne.n	8004d36 <create_chain+0x52>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	e06a      	b.n	8004e0c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d201      	bcs.n	8004d44 <create_chain+0x60>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	e063      	b.n	8004e0c <create_chain+0x128>
		scl = clst;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	69fa      	ldr	r2, [r7, #28]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d307      	bcc.n	8004d6c <create_chain+0x88>
				ncl = 2;
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004d60:	69fa      	ldr	r2, [r7, #28]
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d901      	bls.n	8004d6c <create_chain+0x88>
 8004d68:	2300      	movs	r3, #0
 8004d6a:	e04f      	b.n	8004e0c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004d6c:	69f9      	ldr	r1, [r7, #28]
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f7ff fd63 	bl	800483a <get_fat>
 8004d74:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00e      	beq.n	8004d9a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d003      	beq.n	8004d8a <create_chain+0xa6>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d88:	d101      	bne.n	8004d8e <create_chain+0xaa>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	e03e      	b.n	8004e0c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004d8e:	69fa      	ldr	r2, [r7, #28]
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d1da      	bne.n	8004d4c <create_chain+0x68>
 8004d96:	2300      	movs	r3, #0
 8004d98:	e038      	b.n	8004e0c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004d9a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004d9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004da0:	69f9      	ldr	r1, [r7, #28]
 8004da2:	6938      	ldr	r0, [r7, #16]
 8004da4:	f7ff fe1d 	bl	80049e2 <put_fat>
 8004da8:	4603      	mov	r3, r0
 8004daa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004dac:	7dfb      	ldrb	r3, [r7, #23]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d109      	bne.n	8004dc6 <create_chain+0xe2>
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d006      	beq.n	8004dc6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004db8:	69fa      	ldr	r2, [r7, #28]
 8004dba:	6839      	ldr	r1, [r7, #0]
 8004dbc:	6938      	ldr	r0, [r7, #16]
 8004dbe:	f7ff fe10 	bl	80049e2 <put_fat>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004dc6:	7dfb      	ldrb	r3, [r7, #23]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d116      	bne.n	8004dfa <create_chain+0x116>
		fs->last_clst = ncl;
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	69fa      	ldr	r2, [r7, #28]
 8004dd0:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	695a      	ldr	r2, [r3, #20]
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	3b02      	subs	r3, #2
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d804      	bhi.n	8004dea <create_chain+0x106>
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	1e5a      	subs	r2, r3, #1
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	791b      	ldrb	r3, [r3, #4]
 8004dee:	f043 0301 	orr.w	r3, r3, #1
 8004df2:	b2da      	uxtb	r2, r3
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	711a      	strb	r2, [r3, #4]
 8004df8:	e007      	b.n	8004e0a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004dfa:	7dfb      	ldrb	r3, [r7, #23]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d102      	bne.n	8004e06 <create_chain+0x122>
 8004e00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e04:	e000      	b.n	8004e08 <create_chain+0x124>
 8004e06:	2301      	movs	r3, #1
 8004e08:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004e0a:	69fb      	ldr	r3, [r7, #28]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3720      	adds	r7, #32
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b087      	sub	sp, #28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e28:	3304      	adds	r3, #4
 8004e2a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	899b      	ldrh	r3, [r3, #12]
 8004e30:	461a      	mov	r2, r3
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	8952      	ldrh	r2, [r2, #10]
 8004e3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e40:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	1d1a      	adds	r2, r3, #4
 8004e46:	613a      	str	r2, [r7, #16]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <clmt_clust+0x42>
 8004e52:	2300      	movs	r3, #0
 8004e54:	e010      	b.n	8004e78 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d307      	bcc.n	8004e6e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	617b      	str	r3, [r7, #20]
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	3304      	adds	r3, #4
 8004e6a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004e6c:	e7e9      	b.n	8004e42 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8004e6e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	4413      	add	r3, r2
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	371c      	adds	r7, #28
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e9a:	d204      	bcs.n	8004ea6 <dir_sdi+0x22>
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	f003 031f 	and.w	r3, r3, #31
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <dir_sdi+0x26>
		return FR_INT_ERR;
 8004ea6:	2302      	movs	r3, #2
 8004ea8:	e071      	b.n	8004f8e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	683a      	ldr	r2, [r7, #0]
 8004eae:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d106      	bne.n	8004eca <dir_sdi+0x46>
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d902      	bls.n	8004eca <dir_sdi+0x46>
		clst = fs->dirbase;
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10c      	bne.n	8004eea <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	095b      	lsrs	r3, r3, #5
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	8912      	ldrh	r2, [r2, #8]
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d301      	bcc.n	8004ee0 <dir_sdi+0x5c>
 8004edc:	2302      	movs	r3, #2
 8004ede:	e056      	b.n	8004f8e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	61da      	str	r2, [r3, #28]
 8004ee8:	e02d      	b.n	8004f46 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	895b      	ldrh	r3, [r3, #10]
 8004eee:	461a      	mov	r2, r3
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	899b      	ldrh	r3, [r3, #12]
 8004ef4:	fb03 f302 	mul.w	r3, r3, r2
 8004ef8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004efa:	e019      	b.n	8004f30 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6979      	ldr	r1, [r7, #20]
 8004f00:	4618      	mov	r0, r3
 8004f02:	f7ff fc9a 	bl	800483a <get_fat>
 8004f06:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f0e:	d101      	bne.n	8004f14 <dir_sdi+0x90>
 8004f10:	2301      	movs	r3, #1
 8004f12:	e03c      	b.n	8004f8e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d904      	bls.n	8004f24 <dir_sdi+0xa0>
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d301      	bcc.n	8004f28 <dir_sdi+0xa4>
 8004f24:	2302      	movs	r3, #2
 8004f26:	e032      	b.n	8004f8e <dir_sdi+0x10a>
			ofs -= csz;
 8004f28:	683a      	ldr	r2, [r7, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004f30:	683a      	ldr	r2, [r7, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d2e1      	bcs.n	8004efc <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8004f38:	6979      	ldr	r1, [r7, #20]
 8004f3a:	6938      	ldr	r0, [r7, #16]
 8004f3c:	f7ff fc5e 	bl	80047fc <clust2sect>
 8004f40:	4602      	mov	r2, r0
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	697a      	ldr	r2, [r7, #20]
 8004f4a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	69db      	ldr	r3, [r3, #28]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d101      	bne.n	8004f58 <dir_sdi+0xd4>
 8004f54:	2302      	movs	r3, #2
 8004f56:	e01a      	b.n	8004f8e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	69da      	ldr	r2, [r3, #28]
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	899b      	ldrh	r3, [r3, #12]
 8004f60:	4619      	mov	r1, r3
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f68:	441a      	add	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	899b      	ldrh	r3, [r3, #12]
 8004f78:	461a      	mov	r2, r3
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	fbb3 f0f2 	udiv	r0, r3, r2
 8004f80:	fb02 f200 	mul.w	r2, r2, r0
 8004f84:	1a9b      	subs	r3, r3, r2
 8004f86:	18ca      	adds	r2, r1, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3718      	adds	r7, #24
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b086      	sub	sp, #24
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
 8004f9e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	3320      	adds	r3, #32
 8004fac:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	69db      	ldr	r3, [r3, #28]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d003      	beq.n	8004fbe <dir_next+0x28>
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fbc:	d301      	bcc.n	8004fc2 <dir_next+0x2c>
 8004fbe:	2304      	movs	r3, #4
 8004fc0:	e0bb      	b.n	800513a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	899b      	ldrh	r3, [r3, #12]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	fbb3 f1f2 	udiv	r1, r3, r2
 8004fce:	fb02 f201 	mul.w	r2, r2, r1
 8004fd2:	1a9b      	subs	r3, r3, r2
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f040 809d 	bne.w	8005114 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	1c5a      	adds	r2, r3, #1
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d10b      	bne.n	8005004 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	095b      	lsrs	r3, r3, #5
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	8912      	ldrh	r2, [r2, #8]
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	f0c0 808d 	bcc.w	8005114 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	61da      	str	r2, [r3, #28]
 8005000:	2304      	movs	r3, #4
 8005002:	e09a      	b.n	800513a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	899b      	ldrh	r3, [r3, #12]
 8005008:	461a      	mov	r2, r3
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	8952      	ldrh	r2, [r2, #10]
 8005014:	3a01      	subs	r2, #1
 8005016:	4013      	ands	r3, r2
 8005018:	2b00      	cmp	r3, #0
 800501a:	d17b      	bne.n	8005114 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	4619      	mov	r1, r3
 8005024:	4610      	mov	r0, r2
 8005026:	f7ff fc08 	bl	800483a <get_fat>
 800502a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	2b01      	cmp	r3, #1
 8005030:	d801      	bhi.n	8005036 <dir_next+0xa0>
 8005032:	2302      	movs	r3, #2
 8005034:	e081      	b.n	800513a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800503c:	d101      	bne.n	8005042 <dir_next+0xac>
 800503e:	2301      	movs	r3, #1
 8005040:	e07b      	b.n	800513a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	429a      	cmp	r2, r3
 800504a:	d359      	bcc.n	8005100 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d104      	bne.n	800505c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	61da      	str	r2, [r3, #28]
 8005058:	2304      	movs	r3, #4
 800505a:	e06e      	b.n	800513a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	4619      	mov	r1, r3
 8005064:	4610      	mov	r0, r2
 8005066:	f7ff fe3d 	bl	8004ce4 <create_chain>
 800506a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d101      	bne.n	8005076 <dir_next+0xe0>
 8005072:	2307      	movs	r3, #7
 8005074:	e061      	b.n	800513a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d101      	bne.n	8005080 <dir_next+0xea>
 800507c:	2302      	movs	r3, #2
 800507e:	e05c      	b.n	800513a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005086:	d101      	bne.n	800508c <dir_next+0xf6>
 8005088:	2301      	movs	r3, #1
 800508a:	e056      	b.n	800513a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f7ff fad3 	bl	8004638 <sync_window>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d001      	beq.n	800509c <dir_next+0x106>
 8005098:	2301      	movs	r3, #1
 800509a:	e04e      	b.n	800513a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	899b      	ldrh	r3, [r3, #12]
 80050a6:	461a      	mov	r2, r3
 80050a8:	2100      	movs	r1, #0
 80050aa:	f7ff f8fc 	bl	80042a6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80050ae:	2300      	movs	r3, #0
 80050b0:	613b      	str	r3, [r7, #16]
 80050b2:	6979      	ldr	r1, [r7, #20]
 80050b4:	68f8      	ldr	r0, [r7, #12]
 80050b6:	f7ff fba1 	bl	80047fc <clust2sect>
 80050ba:	4602      	mov	r2, r0
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	631a      	str	r2, [r3, #48]	; 0x30
 80050c0:	e012      	b.n	80050e8 <dir_next+0x152>
						fs->wflag = 1;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2201      	movs	r2, #1
 80050c6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f7ff fab5 	bl	8004638 <sync_window>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d001      	beq.n	80050d8 <dir_next+0x142>
 80050d4:	2301      	movs	r3, #1
 80050d6:	e030      	b.n	800513a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	3301      	adds	r3, #1
 80050dc:	613b      	str	r3, [r7, #16]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e2:	1c5a      	adds	r2, r3, #1
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	631a      	str	r2, [r3, #48]	; 0x30
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	895b      	ldrh	r3, [r3, #10]
 80050ec:	461a      	mov	r2, r3
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d3e6      	bcc.n	80050c2 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	1ad2      	subs	r2, r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005106:	6979      	ldr	r1, [r7, #20]
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f7ff fb77 	bl	80047fc <clust2sect>
 800510e:	4602      	mov	r2, r0
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	68ba      	ldr	r2, [r7, #8]
 8005118:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	899b      	ldrh	r3, [r3, #12]
 8005124:	461a      	mov	r2, r3
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	fbb3 f0f2 	udiv	r0, r3, r2
 800512c:	fb02 f200 	mul.w	r2, r2, r0
 8005130:	1a9b      	subs	r3, r3, r2
 8005132:	18ca      	adds	r2, r1, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3718      	adds	r7, #24
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b086      	sub	sp, #24
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
 800514a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005152:	2100      	movs	r1, #0
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f7ff fe95 	bl	8004e84 <dir_sdi>
 800515a:	4603      	mov	r3, r0
 800515c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800515e:	7dfb      	ldrb	r3, [r7, #23]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d12b      	bne.n	80051bc <dir_alloc+0x7a>
		n = 0;
 8005164:	2300      	movs	r3, #0
 8005166:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	69db      	ldr	r3, [r3, #28]
 800516c:	4619      	mov	r1, r3
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f7ff faa6 	bl	80046c0 <move_window>
 8005174:	4603      	mov	r3, r0
 8005176:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005178:	7dfb      	ldrb	r3, [r7, #23]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d11d      	bne.n	80051ba <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	2be5      	cmp	r3, #229	; 0xe5
 8005186:	d004      	beq.n	8005192 <dir_alloc+0x50>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a1b      	ldr	r3, [r3, #32]
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d107      	bne.n	80051a2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	3301      	adds	r3, #1
 8005196:	613b      	str	r3, [r7, #16]
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	429a      	cmp	r2, r3
 800519e:	d102      	bne.n	80051a6 <dir_alloc+0x64>
 80051a0:	e00c      	b.n	80051bc <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80051a2:	2300      	movs	r3, #0
 80051a4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80051a6:	2101      	movs	r1, #1
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f7ff fef4 	bl	8004f96 <dir_next>
 80051ae:	4603      	mov	r3, r0
 80051b0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80051b2:	7dfb      	ldrb	r3, [r7, #23]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d0d7      	beq.n	8005168 <dir_alloc+0x26>
 80051b8:	e000      	b.n	80051bc <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80051ba:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80051bc:	7dfb      	ldrb	r3, [r7, #23]
 80051be:	2b04      	cmp	r3, #4
 80051c0:	d101      	bne.n	80051c6 <dir_alloc+0x84>
 80051c2:	2307      	movs	r3, #7
 80051c4:	75fb      	strb	r3, [r7, #23]
	return res;
 80051c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3718      	adds	r7, #24
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	331a      	adds	r3, #26
 80051de:	4618      	mov	r0, r3
 80051e0:	f7fe ffbe 	bl	8004160 <ld_word>
 80051e4:	4603      	mov	r3, r0
 80051e6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	2b03      	cmp	r3, #3
 80051ee:	d109      	bne.n	8005204 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	3314      	adds	r3, #20
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7fe ffb3 	bl	8004160 <ld_word>
 80051fa:	4603      	mov	r3, r0
 80051fc:	041b      	lsls	r3, r3, #16
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	4313      	orrs	r3, r2
 8005202:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005204:	68fb      	ldr	r3, [r7, #12]
}
 8005206:	4618      	mov	r0, r3
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b084      	sub	sp, #16
 8005212:	af00      	add	r7, sp, #0
 8005214:	60f8      	str	r0, [r7, #12]
 8005216:	60b9      	str	r1, [r7, #8]
 8005218:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	331a      	adds	r3, #26
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	b292      	uxth	r2, r2
 8005222:	4611      	mov	r1, r2
 8005224:	4618      	mov	r0, r3
 8005226:	f7fe ffd6 	bl	80041d6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	2b03      	cmp	r3, #3
 8005230:	d109      	bne.n	8005246 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	f103 0214 	add.w	r2, r3, #20
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	0c1b      	lsrs	r3, r3, #16
 800523c:	b29b      	uxth	r3, r3
 800523e:	4619      	mov	r1, r3
 8005240:	4610      	mov	r0, r2
 8005242:	f7fe ffc8 	bl	80041d6 <st_word>
	}
}
 8005246:	bf00      	nop
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b086      	sub	sp, #24
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800525c:	2100      	movs	r1, #0
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f7ff fe10 	bl	8004e84 <dir_sdi>
 8005264:	4603      	mov	r3, r0
 8005266:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005268:	7dfb      	ldrb	r3, [r7, #23]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d001      	beq.n	8005272 <dir_find+0x24>
 800526e:	7dfb      	ldrb	r3, [r7, #23]
 8005270:	e03e      	b.n	80052f0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	4619      	mov	r1, r3
 8005278:	6938      	ldr	r0, [r7, #16]
 800527a:	f7ff fa21 	bl	80046c0 <move_window>
 800527e:	4603      	mov	r3, r0
 8005280:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005282:	7dfb      	ldrb	r3, [r7, #23]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d12f      	bne.n	80052e8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a1b      	ldr	r3, [r3, #32]
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005290:	7bfb      	ldrb	r3, [r7, #15]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d102      	bne.n	800529c <dir_find+0x4e>
 8005296:	2304      	movs	r3, #4
 8005298:	75fb      	strb	r3, [r7, #23]
 800529a:	e028      	b.n	80052ee <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a1b      	ldr	r3, [r3, #32]
 80052a0:	330b      	adds	r3, #11
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052a8:	b2da      	uxtb	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	330b      	adds	r3, #11
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	f003 0308 	and.w	r3, r3, #8
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d10a      	bne.n	80052d4 <dir_find+0x86>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a18      	ldr	r0, [r3, #32]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	3324      	adds	r3, #36	; 0x24
 80052c6:	220b      	movs	r2, #11
 80052c8:	4619      	mov	r1, r3
 80052ca:	f7ff f807 	bl	80042dc <mem_cmp>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00b      	beq.n	80052ec <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80052d4:	2100      	movs	r1, #0
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f7ff fe5d 	bl	8004f96 <dir_next>
 80052dc:	4603      	mov	r3, r0
 80052de:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80052e0:	7dfb      	ldrb	r3, [r7, #23]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d0c5      	beq.n	8005272 <dir_find+0x24>
 80052e6:	e002      	b.n	80052ee <dir_find+0xa0>
		if (res != FR_OK) break;
 80052e8:	bf00      	nop
 80052ea:	e000      	b.n	80052ee <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80052ec:	bf00      	nop

	return res;
 80052ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3718      	adds	r7, #24
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005306:	2101      	movs	r1, #1
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f7ff ff1a 	bl	8005142 <dir_alloc>
 800530e:	4603      	mov	r3, r0
 8005310:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005312:	7bfb      	ldrb	r3, [r7, #15]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d11c      	bne.n	8005352 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	69db      	ldr	r3, [r3, #28]
 800531c:	4619      	mov	r1, r3
 800531e:	68b8      	ldr	r0, [r7, #8]
 8005320:	f7ff f9ce 	bl	80046c0 <move_window>
 8005324:	4603      	mov	r3, r0
 8005326:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005328:	7bfb      	ldrb	r3, [r7, #15]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d111      	bne.n	8005352 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	2220      	movs	r2, #32
 8005334:	2100      	movs	r1, #0
 8005336:	4618      	mov	r0, r3
 8005338:	f7fe ffb5 	bl	80042a6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a18      	ldr	r0, [r3, #32]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	3324      	adds	r3, #36	; 0x24
 8005344:	220b      	movs	r2, #11
 8005346:	4619      	mov	r1, r3
 8005348:	f7fe ff8c 	bl	8004264 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	2201      	movs	r2, #1
 8005350:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005352:	7bfb      	ldrb	r3, [r7, #15]
}
 8005354:	4618      	mov	r0, r3
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b088      	sub	sp, #32
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	60fb      	str	r3, [r7, #12]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	3324      	adds	r3, #36	; 0x24
 8005370:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005372:	220b      	movs	r2, #11
 8005374:	2120      	movs	r1, #32
 8005376:	68b8      	ldr	r0, [r7, #8]
 8005378:	f7fe ff95 	bl	80042a6 <mem_set>
	si = i = 0; ni = 8;
 800537c:	2300      	movs	r3, #0
 800537e:	613b      	str	r3, [r7, #16]
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	61fb      	str	r3, [r7, #28]
 8005384:	2308      	movs	r3, #8
 8005386:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	1c5a      	adds	r2, r3, #1
 800538c:	61fa      	str	r2, [r7, #28]
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	4413      	add	r3, r2
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005396:	7efb      	ldrb	r3, [r7, #27]
 8005398:	2b20      	cmp	r3, #32
 800539a:	d94e      	bls.n	800543a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800539c:	7efb      	ldrb	r3, [r7, #27]
 800539e:	2b2f      	cmp	r3, #47	; 0x2f
 80053a0:	d006      	beq.n	80053b0 <create_name+0x54>
 80053a2:	7efb      	ldrb	r3, [r7, #27]
 80053a4:	2b5c      	cmp	r3, #92	; 0x5c
 80053a6:	d110      	bne.n	80053ca <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80053a8:	e002      	b.n	80053b0 <create_name+0x54>
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	3301      	adds	r3, #1
 80053ae:	61fb      	str	r3, [r7, #28]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	4413      	add	r3, r2
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	2b2f      	cmp	r3, #47	; 0x2f
 80053ba:	d0f6      	beq.n	80053aa <create_name+0x4e>
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	4413      	add	r3, r2
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	2b5c      	cmp	r3, #92	; 0x5c
 80053c6:	d0f0      	beq.n	80053aa <create_name+0x4e>
			break;
 80053c8:	e038      	b.n	800543c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80053ca:	7efb      	ldrb	r3, [r7, #27]
 80053cc:	2b2e      	cmp	r3, #46	; 0x2e
 80053ce:	d003      	beq.n	80053d8 <create_name+0x7c>
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d30c      	bcc.n	80053f2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	2b0b      	cmp	r3, #11
 80053dc:	d002      	beq.n	80053e4 <create_name+0x88>
 80053de:	7efb      	ldrb	r3, [r7, #27]
 80053e0:	2b2e      	cmp	r3, #46	; 0x2e
 80053e2:	d001      	beq.n	80053e8 <create_name+0x8c>
 80053e4:	2306      	movs	r3, #6
 80053e6:	e044      	b.n	8005472 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80053e8:	2308      	movs	r3, #8
 80053ea:	613b      	str	r3, [r7, #16]
 80053ec:	230b      	movs	r3, #11
 80053ee:	617b      	str	r3, [r7, #20]
			continue;
 80053f0:	e022      	b.n	8005438 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80053f2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	da04      	bge.n	8005404 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80053fa:	7efb      	ldrb	r3, [r7, #27]
 80053fc:	3b80      	subs	r3, #128	; 0x80
 80053fe:	4a1f      	ldr	r2, [pc, #124]	; (800547c <create_name+0x120>)
 8005400:	5cd3      	ldrb	r3, [r2, r3]
 8005402:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005404:	7efb      	ldrb	r3, [r7, #27]
 8005406:	4619      	mov	r1, r3
 8005408:	481d      	ldr	r0, [pc, #116]	; (8005480 <create_name+0x124>)
 800540a:	f7fe ff8e 	bl	800432a <chk_chr>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d001      	beq.n	8005418 <create_name+0xbc>
 8005414:	2306      	movs	r3, #6
 8005416:	e02c      	b.n	8005472 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005418:	7efb      	ldrb	r3, [r7, #27]
 800541a:	2b60      	cmp	r3, #96	; 0x60
 800541c:	d905      	bls.n	800542a <create_name+0xce>
 800541e:	7efb      	ldrb	r3, [r7, #27]
 8005420:	2b7a      	cmp	r3, #122	; 0x7a
 8005422:	d802      	bhi.n	800542a <create_name+0xce>
 8005424:	7efb      	ldrb	r3, [r7, #27]
 8005426:	3b20      	subs	r3, #32
 8005428:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	1c5a      	adds	r2, r3, #1
 800542e:	613a      	str	r2, [r7, #16]
 8005430:	68ba      	ldr	r2, [r7, #8]
 8005432:	4413      	add	r3, r2
 8005434:	7efa      	ldrb	r2, [r7, #27]
 8005436:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005438:	e7a6      	b.n	8005388 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800543a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	441a      	add	r2, r3
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d101      	bne.n	8005450 <create_name+0xf4>
 800544c:	2306      	movs	r3, #6
 800544e:	e010      	b.n	8005472 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	2be5      	cmp	r3, #229	; 0xe5
 8005456:	d102      	bne.n	800545e <create_name+0x102>
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	2205      	movs	r2, #5
 800545c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800545e:	7efb      	ldrb	r3, [r7, #27]
 8005460:	2b20      	cmp	r3, #32
 8005462:	d801      	bhi.n	8005468 <create_name+0x10c>
 8005464:	2204      	movs	r2, #4
 8005466:	e000      	b.n	800546a <create_name+0x10e>
 8005468:	2200      	movs	r2, #0
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	330b      	adds	r3, #11
 800546e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005470:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8005472:	4618      	mov	r0, r3
 8005474:	3720      	adds	r7, #32
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	08007274 	.word	0x08007274
 8005480:	08007204 	.word	0x08007204

08005484 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005498:	e002      	b.n	80054a0 <follow_path+0x1c>
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	3301      	adds	r3, #1
 800549e:	603b      	str	r3, [r7, #0]
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	2b2f      	cmp	r3, #47	; 0x2f
 80054a6:	d0f8      	beq.n	800549a <follow_path+0x16>
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	2b5c      	cmp	r3, #92	; 0x5c
 80054ae:	d0f4      	beq.n	800549a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	2200      	movs	r2, #0
 80054b4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	2b1f      	cmp	r3, #31
 80054bc:	d80a      	bhi.n	80054d4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2280      	movs	r2, #128	; 0x80
 80054c2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80054c6:	2100      	movs	r1, #0
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f7ff fcdb 	bl	8004e84 <dir_sdi>
 80054ce:	4603      	mov	r3, r0
 80054d0:	75fb      	strb	r3, [r7, #23]
 80054d2:	e048      	b.n	8005566 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80054d4:	463b      	mov	r3, r7
 80054d6:	4619      	mov	r1, r3
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f7ff ff3f 	bl	800535c <create_name>
 80054de:	4603      	mov	r3, r0
 80054e0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80054e2:	7dfb      	ldrb	r3, [r7, #23]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d139      	bne.n	800555c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f7ff feb0 	bl	800524e <dir_find>
 80054ee:	4603      	mov	r3, r0
 80054f0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80054f8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80054fa:	7dfb      	ldrb	r3, [r7, #23]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00a      	beq.n	8005516 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005500:	7dfb      	ldrb	r3, [r7, #23]
 8005502:	2b04      	cmp	r3, #4
 8005504:	d12c      	bne.n	8005560 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005506:	7afb      	ldrb	r3, [r7, #11]
 8005508:	f003 0304 	and.w	r3, r3, #4
 800550c:	2b00      	cmp	r3, #0
 800550e:	d127      	bne.n	8005560 <follow_path+0xdc>
 8005510:	2305      	movs	r3, #5
 8005512:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005514:	e024      	b.n	8005560 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005516:	7afb      	ldrb	r3, [r7, #11]
 8005518:	f003 0304 	and.w	r3, r3, #4
 800551c:	2b00      	cmp	r3, #0
 800551e:	d121      	bne.n	8005564 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	799b      	ldrb	r3, [r3, #6]
 8005524:	f003 0310 	and.w	r3, r3, #16
 8005528:	2b00      	cmp	r3, #0
 800552a:	d102      	bne.n	8005532 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800552c:	2305      	movs	r3, #5
 800552e:	75fb      	strb	r3, [r7, #23]
 8005530:	e019      	b.n	8005566 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	695b      	ldr	r3, [r3, #20]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	8992      	ldrh	r2, [r2, #12]
 8005540:	fbb3 f0f2 	udiv	r0, r3, r2
 8005544:	fb02 f200 	mul.w	r2, r2, r0
 8005548:	1a9b      	subs	r3, r3, r2
 800554a:	440b      	add	r3, r1
 800554c:	4619      	mov	r1, r3
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f7ff fe3e 	bl	80051d0 <ld_clust>
 8005554:	4602      	mov	r2, r0
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800555a:	e7bb      	b.n	80054d4 <follow_path+0x50>
			if (res != FR_OK) break;
 800555c:	bf00      	nop
 800555e:	e002      	b.n	8005566 <follow_path+0xe2>
				break;
 8005560:	bf00      	nop
 8005562:	e000      	b.n	8005566 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005564:	bf00      	nop
			}
		}
	}

	return res;
 8005566:	7dfb      	ldrb	r3, [r7, #23]
}
 8005568:	4618      	mov	r0, r3
 800556a:	3718      	adds	r7, #24
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005570:	b480      	push	{r7}
 8005572:	b087      	sub	sp, #28
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005578:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800557c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d031      	beq.n	80055ea <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	617b      	str	r3, [r7, #20]
 800558c:	e002      	b.n	8005594 <get_ldnumber+0x24>
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	3301      	adds	r3, #1
 8005592:	617b      	str	r3, [r7, #20]
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	2b20      	cmp	r3, #32
 800559a:	d903      	bls.n	80055a4 <get_ldnumber+0x34>
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	2b3a      	cmp	r3, #58	; 0x3a
 80055a2:	d1f4      	bne.n	800558e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	2b3a      	cmp	r3, #58	; 0x3a
 80055aa:	d11c      	bne.n	80055e6 <get_ldnumber+0x76>
			tp = *path;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	1c5a      	adds	r2, r3, #1
 80055b6:	60fa      	str	r2, [r7, #12]
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	3b30      	subs	r3, #48	; 0x30
 80055bc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	2b09      	cmp	r3, #9
 80055c2:	d80e      	bhi.n	80055e2 <get_ldnumber+0x72>
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d10a      	bne.n	80055e2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d107      	bne.n	80055e2 <get_ldnumber+0x72>
					vol = (int)i;
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	3301      	adds	r3, #1
 80055da:	617b      	str	r3, [r7, #20]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	e002      	b.n	80055ec <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80055e6:	2300      	movs	r3, #0
 80055e8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80055ea:	693b      	ldr	r3, [r7, #16]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	371c      	adds	r7, #28
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	70da      	strb	r2, [r3, #3]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800560e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005610:	6839      	ldr	r1, [r7, #0]
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f7ff f854 	bl	80046c0 <move_window>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d001      	beq.n	8005622 <check_fs+0x2a>
 800561e:	2304      	movs	r3, #4
 8005620:	e038      	b.n	8005694 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	3334      	adds	r3, #52	; 0x34
 8005626:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800562a:	4618      	mov	r0, r3
 800562c:	f7fe fd98 	bl	8004160 <ld_word>
 8005630:	4603      	mov	r3, r0
 8005632:	461a      	mov	r2, r3
 8005634:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005638:	429a      	cmp	r2, r3
 800563a:	d001      	beq.n	8005640 <check_fs+0x48>
 800563c:	2303      	movs	r3, #3
 800563e:	e029      	b.n	8005694 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005646:	2be9      	cmp	r3, #233	; 0xe9
 8005648:	d009      	beq.n	800565e <check_fs+0x66>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005650:	2beb      	cmp	r3, #235	; 0xeb
 8005652:	d11e      	bne.n	8005692 <check_fs+0x9a>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800565a:	2b90      	cmp	r3, #144	; 0x90
 800565c:	d119      	bne.n	8005692 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	3334      	adds	r3, #52	; 0x34
 8005662:	3336      	adds	r3, #54	; 0x36
 8005664:	4618      	mov	r0, r3
 8005666:	f7fe fd93 	bl	8004190 <ld_dword>
 800566a:	4603      	mov	r3, r0
 800566c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005670:	4a0a      	ldr	r2, [pc, #40]	; (800569c <check_fs+0xa4>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d101      	bne.n	800567a <check_fs+0x82>
 8005676:	2300      	movs	r3, #0
 8005678:	e00c      	b.n	8005694 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	3334      	adds	r3, #52	; 0x34
 800567e:	3352      	adds	r3, #82	; 0x52
 8005680:	4618      	mov	r0, r3
 8005682:	f7fe fd85 	bl	8004190 <ld_dword>
 8005686:	4603      	mov	r3, r0
 8005688:	4a05      	ldr	r2, [pc, #20]	; (80056a0 <check_fs+0xa8>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d101      	bne.n	8005692 <check_fs+0x9a>
 800568e:	2300      	movs	r3, #0
 8005690:	e000      	b.n	8005694 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005692:	2302      	movs	r3, #2
}
 8005694:	4618      	mov	r0, r3
 8005696:	3708      	adds	r7, #8
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	00544146 	.word	0x00544146
 80056a0:	33544146 	.word	0x33544146

080056a4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b096      	sub	sp, #88	; 0x58
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	4613      	mov	r3, r2
 80056b0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	2200      	movs	r2, #0
 80056b6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f7ff ff59 	bl	8005570 <get_ldnumber>
 80056be:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80056c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	da01      	bge.n	80056ca <find_volume+0x26>
 80056c6:	230b      	movs	r3, #11
 80056c8:	e265      	b.n	8005b96 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80056ca:	4ab0      	ldr	r2, [pc, #704]	; (800598c <find_volume+0x2e8>)
 80056cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056d2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80056d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d101      	bne.n	80056de <find_volume+0x3a>
 80056da:	230c      	movs	r3, #12
 80056dc:	e25b      	b.n	8005b96 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056e2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80056e4:	79fb      	ldrb	r3, [r7, #7]
 80056e6:	f023 0301 	bic.w	r3, r3, #1
 80056ea:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80056ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d01a      	beq.n	800572a <find_volume+0x86>
		stat = disk_status(fs->drv);
 80056f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f6:	785b      	ldrb	r3, [r3, #1]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7fe fc93 	bl	8004024 <disk_status>
 80056fe:	4603      	mov	r3, r0
 8005700:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005704:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	2b00      	cmp	r3, #0
 800570e:	d10c      	bne.n	800572a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005710:	79fb      	ldrb	r3, [r7, #7]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d007      	beq.n	8005726 <find_volume+0x82>
 8005716:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800571a:	f003 0304 	and.w	r3, r3, #4
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005722:	230a      	movs	r3, #10
 8005724:	e237      	b.n	8005b96 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8005726:	2300      	movs	r3, #0
 8005728:	e235      	b.n	8005b96 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800572a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800572c:	2200      	movs	r2, #0
 800572e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005732:	b2da      	uxtb	r2, r3
 8005734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005736:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800573a:	785b      	ldrb	r3, [r3, #1]
 800573c:	4618      	mov	r0, r3
 800573e:	f7fe fc8b 	bl	8004058 <disk_initialize>
 8005742:	4603      	mov	r3, r0
 8005744:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005748:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	2b00      	cmp	r3, #0
 8005752:	d001      	beq.n	8005758 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005754:	2303      	movs	r3, #3
 8005756:	e21e      	b.n	8005b96 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005758:	79fb      	ldrb	r3, [r7, #7]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d007      	beq.n	800576e <find_volume+0xca>
 800575e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005762:	f003 0304 	and.w	r3, r3, #4
 8005766:	2b00      	cmp	r3, #0
 8005768:	d001      	beq.n	800576e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800576a:	230a      	movs	r3, #10
 800576c:	e213      	b.n	8005b96 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800576e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005770:	7858      	ldrb	r0, [r3, #1]
 8005772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005774:	330c      	adds	r3, #12
 8005776:	461a      	mov	r2, r3
 8005778:	2102      	movs	r1, #2
 800577a:	f7fe fcd3 	bl	8004124 <disk_ioctl>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d001      	beq.n	8005788 <find_volume+0xe4>
 8005784:	2301      	movs	r3, #1
 8005786:	e206      	b.n	8005b96 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8005788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800578a:	899b      	ldrh	r3, [r3, #12]
 800578c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005790:	d80d      	bhi.n	80057ae <find_volume+0x10a>
 8005792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005794:	899b      	ldrh	r3, [r3, #12]
 8005796:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800579a:	d308      	bcc.n	80057ae <find_volume+0x10a>
 800579c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800579e:	899b      	ldrh	r3, [r3, #12]
 80057a0:	461a      	mov	r2, r3
 80057a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a4:	899b      	ldrh	r3, [r3, #12]
 80057a6:	3b01      	subs	r3, #1
 80057a8:	4013      	ands	r3, r2
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d001      	beq.n	80057b2 <find_volume+0x10e>
 80057ae:	2301      	movs	r3, #1
 80057b0:	e1f1      	b.n	8005b96 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80057b2:	2300      	movs	r3, #0
 80057b4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80057b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80057b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80057ba:	f7ff ff1d 	bl	80055f8 <check_fs>
 80057be:	4603      	mov	r3, r0
 80057c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80057c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	d14b      	bne.n	8005864 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80057cc:	2300      	movs	r3, #0
 80057ce:	643b      	str	r3, [r7, #64]	; 0x40
 80057d0:	e01f      	b.n	8005812 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80057d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80057d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057da:	011b      	lsls	r3, r3, #4
 80057dc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80057e0:	4413      	add	r3, r2
 80057e2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80057e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e6:	3304      	adds	r3, #4
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d006      	beq.n	80057fc <find_volume+0x158>
 80057ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f0:	3308      	adds	r3, #8
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7fe fccc 	bl	8004190 <ld_dword>
 80057f8:	4602      	mov	r2, r0
 80057fa:	e000      	b.n	80057fe <find_volume+0x15a>
 80057fc:	2200      	movs	r2, #0
 80057fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005806:	440b      	add	r3, r1
 8005808:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800580c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800580e:	3301      	adds	r3, #1
 8005810:	643b      	str	r3, [r7, #64]	; 0x40
 8005812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005814:	2b03      	cmp	r3, #3
 8005816:	d9dc      	bls.n	80057d2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005818:	2300      	movs	r3, #0
 800581a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800581c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800581e:	2b00      	cmp	r3, #0
 8005820:	d002      	beq.n	8005828 <find_volume+0x184>
 8005822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005824:	3b01      	subs	r3, #1
 8005826:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005830:	4413      	add	r3, r2
 8005832:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005836:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005838:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800583a:	2b00      	cmp	r3, #0
 800583c:	d005      	beq.n	800584a <find_volume+0x1a6>
 800583e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005840:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005842:	f7ff fed9 	bl	80055f8 <check_fs>
 8005846:	4603      	mov	r3, r0
 8005848:	e000      	b.n	800584c <find_volume+0x1a8>
 800584a:	2303      	movs	r3, #3
 800584c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005850:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005854:	2b01      	cmp	r3, #1
 8005856:	d905      	bls.n	8005864 <find_volume+0x1c0>
 8005858:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800585a:	3301      	adds	r3, #1
 800585c:	643b      	str	r3, [r7, #64]	; 0x40
 800585e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005860:	2b03      	cmp	r3, #3
 8005862:	d9e1      	bls.n	8005828 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005864:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005868:	2b04      	cmp	r3, #4
 800586a:	d101      	bne.n	8005870 <find_volume+0x1cc>
 800586c:	2301      	movs	r3, #1
 800586e:	e192      	b.n	8005b96 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005870:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005874:	2b01      	cmp	r3, #1
 8005876:	d901      	bls.n	800587c <find_volume+0x1d8>
 8005878:	230d      	movs	r3, #13
 800587a:	e18c      	b.n	8005b96 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800587c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800587e:	3334      	adds	r3, #52	; 0x34
 8005880:	330b      	adds	r3, #11
 8005882:	4618      	mov	r0, r3
 8005884:	f7fe fc6c 	bl	8004160 <ld_word>
 8005888:	4603      	mov	r3, r0
 800588a:	461a      	mov	r2, r3
 800588c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800588e:	899b      	ldrh	r3, [r3, #12]
 8005890:	429a      	cmp	r2, r3
 8005892:	d001      	beq.n	8005898 <find_volume+0x1f4>
 8005894:	230d      	movs	r3, #13
 8005896:	e17e      	b.n	8005b96 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800589a:	3334      	adds	r3, #52	; 0x34
 800589c:	3316      	adds	r3, #22
 800589e:	4618      	mov	r0, r3
 80058a0:	f7fe fc5e 	bl	8004160 <ld_word>
 80058a4:	4603      	mov	r3, r0
 80058a6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80058a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d106      	bne.n	80058bc <find_volume+0x218>
 80058ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b0:	3334      	adds	r3, #52	; 0x34
 80058b2:	3324      	adds	r3, #36	; 0x24
 80058b4:	4618      	mov	r0, r3
 80058b6:	f7fe fc6b 	bl	8004190 <ld_dword>
 80058ba:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80058bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80058c0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80058c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80058c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ca:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80058cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ce:	789b      	ldrb	r3, [r3, #2]
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d005      	beq.n	80058e0 <find_volume+0x23c>
 80058d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d6:	789b      	ldrb	r3, [r3, #2]
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d001      	beq.n	80058e0 <find_volume+0x23c>
 80058dc:	230d      	movs	r3, #13
 80058de:	e15a      	b.n	8005b96 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80058e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e2:	789b      	ldrb	r3, [r3, #2]
 80058e4:	461a      	mov	r2, r3
 80058e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058e8:	fb02 f303 	mul.w	r3, r2, r3
 80058ec:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80058ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80058fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fc:	895b      	ldrh	r3, [r3, #10]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d008      	beq.n	8005914 <find_volume+0x270>
 8005902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005904:	895b      	ldrh	r3, [r3, #10]
 8005906:	461a      	mov	r2, r3
 8005908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800590a:	895b      	ldrh	r3, [r3, #10]
 800590c:	3b01      	subs	r3, #1
 800590e:	4013      	ands	r3, r2
 8005910:	2b00      	cmp	r3, #0
 8005912:	d001      	beq.n	8005918 <find_volume+0x274>
 8005914:	230d      	movs	r3, #13
 8005916:	e13e      	b.n	8005b96 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591a:	3334      	adds	r3, #52	; 0x34
 800591c:	3311      	adds	r3, #17
 800591e:	4618      	mov	r0, r3
 8005920:	f7fe fc1e 	bl	8004160 <ld_word>
 8005924:	4603      	mov	r3, r0
 8005926:	461a      	mov	r2, r3
 8005928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800592c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592e:	891b      	ldrh	r3, [r3, #8]
 8005930:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005932:	8992      	ldrh	r2, [r2, #12]
 8005934:	0952      	lsrs	r2, r2, #5
 8005936:	b292      	uxth	r2, r2
 8005938:	fbb3 f1f2 	udiv	r1, r3, r2
 800593c:	fb02 f201 	mul.w	r2, r2, r1
 8005940:	1a9b      	subs	r3, r3, r2
 8005942:	b29b      	uxth	r3, r3
 8005944:	2b00      	cmp	r3, #0
 8005946:	d001      	beq.n	800594c <find_volume+0x2a8>
 8005948:	230d      	movs	r3, #13
 800594a:	e124      	b.n	8005b96 <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800594c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594e:	3334      	adds	r3, #52	; 0x34
 8005950:	3313      	adds	r3, #19
 8005952:	4618      	mov	r0, r3
 8005954:	f7fe fc04 	bl	8004160 <ld_word>
 8005958:	4603      	mov	r3, r0
 800595a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800595c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800595e:	2b00      	cmp	r3, #0
 8005960:	d106      	bne.n	8005970 <find_volume+0x2cc>
 8005962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005964:	3334      	adds	r3, #52	; 0x34
 8005966:	3320      	adds	r3, #32
 8005968:	4618      	mov	r0, r3
 800596a:	f7fe fc11 	bl	8004190 <ld_dword>
 800596e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005972:	3334      	adds	r3, #52	; 0x34
 8005974:	330e      	adds	r3, #14
 8005976:	4618      	mov	r0, r3
 8005978:	f7fe fbf2 	bl	8004160 <ld_word>
 800597c:	4603      	mov	r3, r0
 800597e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005980:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005982:	2b00      	cmp	r3, #0
 8005984:	d104      	bne.n	8005990 <find_volume+0x2ec>
 8005986:	230d      	movs	r3, #13
 8005988:	e105      	b.n	8005b96 <find_volume+0x4f2>
 800598a:	bf00      	nop
 800598c:	20001028 	.word	0x20001028

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005990:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005994:	4413      	add	r3, r2
 8005996:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005998:	8911      	ldrh	r1, [r2, #8]
 800599a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800599c:	8992      	ldrh	r2, [r2, #12]
 800599e:	0952      	lsrs	r2, r2, #5
 80059a0:	b292      	uxth	r2, r2
 80059a2:	fbb1 f2f2 	udiv	r2, r1, r2
 80059a6:	b292      	uxth	r2, r2
 80059a8:	4413      	add	r3, r2
 80059aa:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80059ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d201      	bcs.n	80059b8 <find_volume+0x314>
 80059b4:	230d      	movs	r3, #13
 80059b6:	e0ee      	b.n	8005b96 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80059b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059c0:	8952      	ldrh	r2, [r2, #10]
 80059c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80059c6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80059c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d101      	bne.n	80059d2 <find_volume+0x32e>
 80059ce:	230d      	movs	r3, #13
 80059d0:	e0e1      	b.n	8005b96 <find_volume+0x4f2>
		fmt = FS_FAT32;
 80059d2:	2303      	movs	r3, #3
 80059d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80059d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059da:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80059de:	4293      	cmp	r3, r2
 80059e0:	d802      	bhi.n	80059e8 <find_volume+0x344>
 80059e2:	2302      	movs	r3, #2
 80059e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80059e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ea:	f640 72f5 	movw	r2, #4085	; 0xff5
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d802      	bhi.n	80059f8 <find_volume+0x354>
 80059f2:	2301      	movs	r3, #1
 80059f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80059f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fa:	1c9a      	adds	r2, r3, #2
 80059fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059fe:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8005a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a02:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005a04:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005a06:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a0a:	441a      	add	r2, r3
 8005a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a0e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8005a10:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a14:	441a      	add	r2, r3
 8005a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a18:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8005a1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a1e:	2b03      	cmp	r3, #3
 8005a20:	d11e      	bne.n	8005a60 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a24:	3334      	adds	r3, #52	; 0x34
 8005a26:	332a      	adds	r3, #42	; 0x2a
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7fe fb99 	bl	8004160 <ld_word>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d001      	beq.n	8005a38 <find_volume+0x394>
 8005a34:	230d      	movs	r3, #13
 8005a36:	e0ae      	b.n	8005b96 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a3a:	891b      	ldrh	r3, [r3, #8]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d001      	beq.n	8005a44 <find_volume+0x3a0>
 8005a40:	230d      	movs	r3, #13
 8005a42:	e0a8      	b.n	8005b96 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a46:	3334      	adds	r3, #52	; 0x34
 8005a48:	332c      	adds	r3, #44	; 0x2c
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7fe fba0 	bl	8004190 <ld_dword>
 8005a50:	4602      	mov	r2, r0
 8005a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a54:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	647b      	str	r3, [r7, #68]	; 0x44
 8005a5e:	e01f      	b.n	8005aa0 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a62:	891b      	ldrh	r3, [r3, #8]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d101      	bne.n	8005a6c <find_volume+0x3c8>
 8005a68:	230d      	movs	r3, #13
 8005a6a:	e094      	b.n	8005b96 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a72:	441a      	add	r2, r3
 8005a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a76:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005a78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d103      	bne.n	8005a88 <find_volume+0x3e4>
 8005a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	005b      	lsls	r3, r3, #1
 8005a86:	e00a      	b.n	8005a9e <find_volume+0x3fa>
 8005a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a8a:	699a      	ldr	r2, [r3, #24]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	005b      	lsls	r3, r3, #1
 8005a90:	4413      	add	r3, r2
 8005a92:	085a      	lsrs	r2, r3, #1
 8005a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005a9e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa2:	69da      	ldr	r2, [r3, #28]
 8005aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa6:	899b      	ldrh	r3, [r3, #12]
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aac:	440b      	add	r3, r1
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ab2:	8989      	ldrh	r1, [r1, #12]
 8005ab4:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d201      	bcs.n	8005ac0 <find_volume+0x41c>
 8005abc:	230d      	movs	r3, #13
 8005abe:	e06a      	b.n	8005b96 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ac6:	615a      	str	r2, [r3, #20]
 8005ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aca:	695a      	ldr	r2, [r3, #20]
 8005acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ace:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8005ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad2:	2280      	movs	r2, #128	; 0x80
 8005ad4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005ad6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ada:	2b03      	cmp	r3, #3
 8005adc:	d149      	bne.n	8005b72 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae0:	3334      	adds	r3, #52	; 0x34
 8005ae2:	3330      	adds	r3, #48	; 0x30
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7fe fb3b 	bl	8004160 <ld_word>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d140      	bne.n	8005b72 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005af0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005af2:	3301      	adds	r3, #1
 8005af4:	4619      	mov	r1, r3
 8005af6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005af8:	f7fe fde2 	bl	80046c0 <move_window>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d137      	bne.n	8005b72 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8005b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b04:	2200      	movs	r2, #0
 8005b06:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0a:	3334      	adds	r3, #52	; 0x34
 8005b0c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005b10:	4618      	mov	r0, r3
 8005b12:	f7fe fb25 	bl	8004160 <ld_word>
 8005b16:	4603      	mov	r3, r0
 8005b18:	461a      	mov	r2, r3
 8005b1a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d127      	bne.n	8005b72 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b24:	3334      	adds	r3, #52	; 0x34
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7fe fb32 	bl	8004190 <ld_dword>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	4a1c      	ldr	r2, [pc, #112]	; (8005ba0 <find_volume+0x4fc>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d11e      	bne.n	8005b72 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b36:	3334      	adds	r3, #52	; 0x34
 8005b38:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f7fe fb27 	bl	8004190 <ld_dword>
 8005b42:	4603      	mov	r3, r0
 8005b44:	4a17      	ldr	r2, [pc, #92]	; (8005ba4 <find_volume+0x500>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d113      	bne.n	8005b72 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4c:	3334      	adds	r3, #52	; 0x34
 8005b4e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7fe fb1c 	bl	8004190 <ld_dword>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b60:	3334      	adds	r3, #52	; 0x34
 8005b62:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8005b66:	4618      	mov	r0, r3
 8005b68:	f7fe fb12 	bl	8004190 <ld_dword>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b70:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b74:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005b78:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005b7a:	4b0b      	ldr	r3, [pc, #44]	; (8005ba8 <find_volume+0x504>)
 8005b7c:	881b      	ldrh	r3, [r3, #0]
 8005b7e:	3301      	adds	r3, #1
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	4b09      	ldr	r3, [pc, #36]	; (8005ba8 <find_volume+0x504>)
 8005b84:	801a      	strh	r2, [r3, #0]
 8005b86:	4b08      	ldr	r3, [pc, #32]	; (8005ba8 <find_volume+0x504>)
 8005b88:	881a      	ldrh	r2, [r3, #0]
 8005b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005b8e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005b90:	f7fe fd2e 	bl	80045f0 <clear_lock>
#endif
	return FR_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3758      	adds	r7, #88	; 0x58
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	41615252 	.word	0x41615252
 8005ba4:	61417272 	.word	0x61417272
 8005ba8:	2000102c 	.word	0x2000102c

08005bac <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005bb6:	2309      	movs	r3, #9
 8005bb8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d01c      	beq.n	8005bfa <validate+0x4e>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d018      	beq.n	8005bfa <validate+0x4e>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d013      	beq.n	8005bfa <validate+0x4e>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	889a      	ldrh	r2, [r3, #4]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	88db      	ldrh	r3, [r3, #6]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d10c      	bne.n	8005bfa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	785b      	ldrb	r3, [r3, #1]
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7fe fa1c 	bl	8004024 <disk_status>
 8005bec:	4603      	mov	r3, r0
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <validate+0x4e>
			res = FR_OK;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005bfa:	7bfb      	ldrb	r3, [r7, #15]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d102      	bne.n	8005c06 <validate+0x5a>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	e000      	b.n	8005c08 <validate+0x5c>
 8005c06:	2300      	movs	r3, #0
 8005c08:	683a      	ldr	r2, [r7, #0]
 8005c0a:	6013      	str	r3, [r2, #0]
	return res;
 8005c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3710      	adds	r7, #16
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
	...

08005c18 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b088      	sub	sp, #32
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	4613      	mov	r3, r2
 8005c24:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005c2a:	f107 0310 	add.w	r3, r7, #16
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7ff fc9e 	bl	8005570 <get_ldnumber>
 8005c34:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	da01      	bge.n	8005c40 <f_mount+0x28>
 8005c3c:	230b      	movs	r3, #11
 8005c3e:	e02b      	b.n	8005c98 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005c40:	4a17      	ldr	r2, [pc, #92]	; (8005ca0 <f_mount+0x88>)
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c48:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d005      	beq.n	8005c5c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005c50:	69b8      	ldr	r0, [r7, #24]
 8005c52:	f7fe fccd 	bl	80045f0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d002      	beq.n	8005c68 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	490d      	ldr	r1, [pc, #52]	; (8005ca0 <f_mount+0x88>)
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d002      	beq.n	8005c7e <f_mount+0x66>
 8005c78:	79fb      	ldrb	r3, [r7, #7]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d001      	beq.n	8005c82 <f_mount+0x6a>
 8005c7e:	2300      	movs	r3, #0
 8005c80:	e00a      	b.n	8005c98 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005c82:	f107 010c 	add.w	r1, r7, #12
 8005c86:	f107 0308 	add.w	r3, r7, #8
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f7ff fd09 	bl	80056a4 <find_volume>
 8005c92:	4603      	mov	r3, r0
 8005c94:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3720      	adds	r7, #32
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	20001028 	.word	0x20001028

08005ca4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b098      	sub	sp, #96	; 0x60
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	4613      	mov	r3, r2
 8005cb0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d101      	bne.n	8005cbc <f_open+0x18>
 8005cb8:	2309      	movs	r3, #9
 8005cba:	e1bb      	b.n	8006034 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005cbc:	79fb      	ldrb	r3, [r7, #7]
 8005cbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cc2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005cc4:	79fa      	ldrb	r2, [r7, #7]
 8005cc6:	f107 0110 	add.w	r1, r7, #16
 8005cca:	f107 0308 	add.w	r3, r7, #8
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7ff fce8 	bl	80056a4 <find_volume>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8005cda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f040 819f 	bne.w	8006022 <f_open+0x37e>
		dj.obj.fs = fs;
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005ce8:	68ba      	ldr	r2, [r7, #8]
 8005cea:	f107 0314 	add.w	r3, r7, #20
 8005cee:	4611      	mov	r1, r2
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7ff fbc7 	bl	8005484 <follow_path>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005cfc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d11a      	bne.n	8005d3a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005d04:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005d08:	b25b      	sxtb	r3, r3
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	da03      	bge.n	8005d16 <f_open+0x72>
				res = FR_INVALID_NAME;
 8005d0e:	2306      	movs	r3, #6
 8005d10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005d14:	e011      	b.n	8005d3a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005d16:	79fb      	ldrb	r3, [r7, #7]
 8005d18:	f023 0301 	bic.w	r3, r3, #1
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	bf14      	ite	ne
 8005d20:	2301      	movne	r3, #1
 8005d22:	2300      	moveq	r3, #0
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	461a      	mov	r2, r3
 8005d28:	f107 0314 	add.w	r3, r7, #20
 8005d2c:	4611      	mov	r1, r2
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7fe fb16 	bl	8004360 <chk_lock>
 8005d34:	4603      	mov	r3, r0
 8005d36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005d3a:	79fb      	ldrb	r3, [r7, #7]
 8005d3c:	f003 031c 	and.w	r3, r3, #28
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d07f      	beq.n	8005e44 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8005d44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d017      	beq.n	8005d7c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005d4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d50:	2b04      	cmp	r3, #4
 8005d52:	d10e      	bne.n	8005d72 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005d54:	f7fe fb60 	bl	8004418 <enq_lock>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d006      	beq.n	8005d6c <f_open+0xc8>
 8005d5e:	f107 0314 	add.w	r3, r7, #20
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7ff fac8 	bl	80052f8 <dir_register>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	e000      	b.n	8005d6e <f_open+0xca>
 8005d6c:	2312      	movs	r3, #18
 8005d6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005d72:	79fb      	ldrb	r3, [r7, #7]
 8005d74:	f043 0308 	orr.w	r3, r3, #8
 8005d78:	71fb      	strb	r3, [r7, #7]
 8005d7a:	e010      	b.n	8005d9e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005d7c:	7ebb      	ldrb	r3, [r7, #26]
 8005d7e:	f003 0311 	and.w	r3, r3, #17
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d003      	beq.n	8005d8e <f_open+0xea>
					res = FR_DENIED;
 8005d86:	2307      	movs	r3, #7
 8005d88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005d8c:	e007      	b.n	8005d9e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005d8e:	79fb      	ldrb	r3, [r7, #7]
 8005d90:	f003 0304 	and.w	r3, r3, #4
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d002      	beq.n	8005d9e <f_open+0xfa>
 8005d98:	2308      	movs	r3, #8
 8005d9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005d9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d168      	bne.n	8005e78 <f_open+0x1d4>
 8005da6:	79fb      	ldrb	r3, [r7, #7]
 8005da8:	f003 0308 	and.w	r3, r3, #8
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d063      	beq.n	8005e78 <f_open+0x1d4>
				dw = GET_FATTIME();
 8005db0:	f7fd ffbe 	bl	8003d30 <get_fattime>
 8005db4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8005db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db8:	330e      	adds	r3, #14
 8005dba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f7fe fa25 	bl	800420c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8005dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc4:	3316      	adds	r3, #22
 8005dc6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7fe fa1f 	bl	800420c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd0:	330b      	adds	r3, #11
 8005dd2:	2220      	movs	r2, #32
 8005dd4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005dda:	4611      	mov	r1, r2
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7ff f9f7 	bl	80051d0 <ld_clust>
 8005de2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005de8:	2200      	movs	r2, #0
 8005dea:	4618      	mov	r0, r3
 8005dec:	f7ff fa0f 	bl	800520e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df2:	331c      	adds	r3, #28
 8005df4:	2100      	movs	r1, #0
 8005df6:	4618      	mov	r0, r3
 8005df8:	f7fe fa08 	bl	800420c <st_dword>
					fs->wflag = 1;
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8005e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d037      	beq.n	8005e78 <f_open+0x1d4>
						dw = fs->winsect;
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e0c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8005e0e:	f107 0314 	add.w	r3, r7, #20
 8005e12:	2200      	movs	r2, #0
 8005e14:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7fe feff 	bl	8004c1a <remove_chain>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8005e22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d126      	bne.n	8005e78 <f_open+0x1d4>
							res = move_window(fs, dw);
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7fe fc46 	bl	80046c0 <move_window>
 8005e34:	4603      	mov	r3, r0
 8005e36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e3e:	3a01      	subs	r2, #1
 8005e40:	611a      	str	r2, [r3, #16]
 8005e42:	e019      	b.n	8005e78 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005e44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d115      	bne.n	8005e78 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005e4c:	7ebb      	ldrb	r3, [r7, #26]
 8005e4e:	f003 0310 	and.w	r3, r3, #16
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d003      	beq.n	8005e5e <f_open+0x1ba>
					res = FR_NO_FILE;
 8005e56:	2304      	movs	r3, #4
 8005e58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005e5c:	e00c      	b.n	8005e78 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005e5e:	79fb      	ldrb	r3, [r7, #7]
 8005e60:	f003 0302 	and.w	r3, r3, #2
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d007      	beq.n	8005e78 <f_open+0x1d4>
 8005e68:	7ebb      	ldrb	r3, [r7, #26]
 8005e6a:	f003 0301 	and.w	r3, r3, #1
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d002      	beq.n	8005e78 <f_open+0x1d4>
						res = FR_DENIED;
 8005e72:	2307      	movs	r3, #7
 8005e74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8005e78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d128      	bne.n	8005ed2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005e80:	79fb      	ldrb	r3, [r7, #7]
 8005e82:	f003 0308 	and.w	r3, r3, #8
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d003      	beq.n	8005e92 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8005e8a:	79fb      	ldrb	r3, [r7, #7]
 8005e8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e90:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8005e9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005ea0:	79fb      	ldrb	r3, [r7, #7]
 8005ea2:	f023 0301 	bic.w	r3, r3, #1
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	bf14      	ite	ne
 8005eaa:	2301      	movne	r3, #1
 8005eac:	2300      	moveq	r3, #0
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	f107 0314 	add.w	r3, r7, #20
 8005eb6:	4611      	mov	r1, r2
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f7fe facf 	bl	800445c <inc_lock>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d102      	bne.n	8005ed2 <f_open+0x22e>
 8005ecc:	2302      	movs	r3, #2
 8005ece:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8005ed2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f040 80a3 	bne.w	8006022 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ee0:	4611      	mov	r1, r2
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7ff f974 	bl	80051d0 <ld_clust>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ef0:	331c      	adds	r3, #28
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7fe f94c 	bl	8004190 <ld_dword>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005f04:	693a      	ldr	r2, [r7, #16]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	88da      	ldrh	r2, [r3, #6]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	79fa      	ldrb	r2, [r7, #7]
 8005f16:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	3330      	adds	r3, #48	; 0x30
 8005f2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005f32:	2100      	movs	r1, #0
 8005f34:	4618      	mov	r0, r3
 8005f36:	f7fe f9b6 	bl	80042a6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8005f3a:	79fb      	ldrb	r3, [r7, #7]
 8005f3c:	f003 0320 	and.w	r3, r3, #32
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d06e      	beq.n	8006022 <f_open+0x37e>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d06a      	beq.n	8006022 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	68da      	ldr	r2, [r3, #12]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	895b      	ldrh	r3, [r3, #10]
 8005f58:	461a      	mov	r2, r3
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	899b      	ldrh	r3, [r3, #12]
 8005f5e:	fb03 f302 	mul.w	r3, r3, r2
 8005f62:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	657b      	str	r3, [r7, #84]	; 0x54
 8005f70:	e016      	b.n	8005fa0 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7fe fc5f 	bl	800483a <get_fat>
 8005f7c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8005f7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d802      	bhi.n	8005f8a <f_open+0x2e6>
 8005f84:	2302      	movs	r3, #2
 8005f86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005f8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f90:	d102      	bne.n	8005f98 <f_open+0x2f4>
 8005f92:	2301      	movs	r3, #1
 8005f94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005f98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005f9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	657b      	str	r3, [r7, #84]	; 0x54
 8005fa0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d103      	bne.n	8005fb0 <f_open+0x30c>
 8005fa8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005faa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d8e0      	bhi.n	8005f72 <f_open+0x2ce>
				}
				fp->clust = clst;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005fb4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005fb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d131      	bne.n	8006022 <f_open+0x37e>
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	899b      	ldrh	r3, [r3, #12]
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fc6:	fbb3 f1f2 	udiv	r1, r3, r2
 8005fca:	fb02 f201 	mul.w	r2, r2, r1
 8005fce:	1a9b      	subs	r3, r3, r2
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d026      	beq.n	8006022 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f7fe fc0f 	bl	80047fc <clust2sect>
 8005fde:	6478      	str	r0, [r7, #68]	; 0x44
 8005fe0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d103      	bne.n	8005fee <f_open+0x34a>
						res = FR_INT_ERR;
 8005fe6:	2302      	movs	r3, #2
 8005fe8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005fec:	e019      	b.n	8006022 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	899b      	ldrh	r3, [r3, #12]
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ff6:	fbb3 f2f2 	udiv	r2, r3, r2
 8005ffa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ffc:	441a      	add	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	7858      	ldrb	r0, [r3, #1]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6a1a      	ldr	r2, [r3, #32]
 8006010:	2301      	movs	r3, #1
 8006012:	f7fe f847 	bl	80040a4 <disk_read>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d002      	beq.n	8006022 <f_open+0x37e>
 800601c:	2301      	movs	r3, #1
 800601e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006022:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006026:	2b00      	cmp	r3, #0
 8006028:	d002      	beq.n	8006030 <f_open+0x38c>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006030:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8006034:	4618      	mov	r0, r3
 8006036:	3760      	adds	r7, #96	; 0x60
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b08e      	sub	sp, #56	; 0x38
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
 8006048:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	2200      	movs	r2, #0
 8006052:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f107 0214 	add.w	r2, r7, #20
 800605a:	4611      	mov	r1, r2
 800605c:	4618      	mov	r0, r3
 800605e:	f7ff fda5 	bl	8005bac <validate>
 8006062:	4603      	mov	r3, r0
 8006064:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006068:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800606c:	2b00      	cmp	r3, #0
 800606e:	d107      	bne.n	8006080 <f_read+0x44>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	7d5b      	ldrb	r3, [r3, #21]
 8006074:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006078:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800607c:	2b00      	cmp	r3, #0
 800607e:	d002      	beq.n	8006086 <f_read+0x4a>
 8006080:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006084:	e135      	b.n	80062f2 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	7d1b      	ldrb	r3, [r3, #20]
 800608a:	f003 0301 	and.w	r3, r3, #1
 800608e:	2b00      	cmp	r3, #0
 8006090:	d101      	bne.n	8006096 <f_read+0x5a>
 8006092:	2307      	movs	r3, #7
 8006094:	e12d      	b.n	80062f2 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	68da      	ldr	r2, [r3, #12]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	6a3b      	ldr	r3, [r7, #32]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	f240 811e 	bls.w	80062e8 <f_read+0x2ac>
 80060ac:	6a3b      	ldr	r3, [r7, #32]
 80060ae:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80060b0:	e11a      	b.n	80062e8 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	699b      	ldr	r3, [r3, #24]
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	8992      	ldrh	r2, [r2, #12]
 80060ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80060be:	fb02 f201 	mul.w	r2, r2, r1
 80060c2:	1a9b      	subs	r3, r3, r2
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f040 80d5 	bne.w	8006274 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	8992      	ldrh	r2, [r2, #12]
 80060d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	8952      	ldrh	r2, [r2, #10]
 80060da:	3a01      	subs	r2, #1
 80060dc:	4013      	ands	r3, r2
 80060de:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d12f      	bne.n	8006146 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d103      	bne.n	80060f6 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	633b      	str	r3, [r7, #48]	; 0x30
 80060f4:	e013      	b.n	800611e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d007      	beq.n	800610e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	4619      	mov	r1, r3
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f7fe fe85 	bl	8004e14 <clmt_clust>
 800610a:	6338      	str	r0, [r7, #48]	; 0x30
 800610c:	e007      	b.n	800611e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	69db      	ldr	r3, [r3, #28]
 8006114:	4619      	mov	r1, r3
 8006116:	4610      	mov	r0, r2
 8006118:	f7fe fb8f 	bl	800483a <get_fat>
 800611c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800611e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006120:	2b01      	cmp	r3, #1
 8006122:	d804      	bhi.n	800612e <f_read+0xf2>
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2202      	movs	r2, #2
 8006128:	755a      	strb	r2, [r3, #21]
 800612a:	2302      	movs	r3, #2
 800612c:	e0e1      	b.n	80062f2 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800612e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006130:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006134:	d104      	bne.n	8006140 <f_read+0x104>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2201      	movs	r2, #1
 800613a:	755a      	strb	r2, [r3, #21]
 800613c:	2301      	movs	r3, #1
 800613e:	e0d8      	b.n	80062f2 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006144:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	69db      	ldr	r3, [r3, #28]
 800614c:	4619      	mov	r1, r3
 800614e:	4610      	mov	r0, r2
 8006150:	f7fe fb54 	bl	80047fc <clust2sect>
 8006154:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d104      	bne.n	8006166 <f_read+0x12a>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2202      	movs	r2, #2
 8006160:	755a      	strb	r2, [r3, #21]
 8006162:	2302      	movs	r3, #2
 8006164:	e0c5      	b.n	80062f2 <f_read+0x2b6>
			sect += csect;
 8006166:	69ba      	ldr	r2, [r7, #24]
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	4413      	add	r3, r2
 800616c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	899b      	ldrh	r3, [r3, #12]
 8006172:	461a      	mov	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	fbb3 f3f2 	udiv	r3, r3, r2
 800617a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800617c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617e:	2b00      	cmp	r3, #0
 8006180:	d041      	beq.n	8006206 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006182:	69fa      	ldr	r2, [r7, #28]
 8006184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006186:	4413      	add	r3, r2
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	8952      	ldrh	r2, [r2, #10]
 800618c:	4293      	cmp	r3, r2
 800618e:	d905      	bls.n	800619c <f_read+0x160>
					cc = fs->csize - csect;
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	895b      	ldrh	r3, [r3, #10]
 8006194:	461a      	mov	r2, r3
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	7858      	ldrb	r0, [r3, #1]
 80061a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a2:	69ba      	ldr	r2, [r7, #24]
 80061a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80061a6:	f7fd ff7d 	bl	80040a4 <disk_read>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d004      	beq.n	80061ba <f_read+0x17e>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2201      	movs	r2, #1
 80061b4:	755a      	strb	r2, [r3, #21]
 80061b6:	2301      	movs	r3, #1
 80061b8:	e09b      	b.n	80062f2 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	7d1b      	ldrb	r3, [r3, #20]
 80061be:	b25b      	sxtb	r3, r3
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	da18      	bge.n	80061f6 <f_read+0x1ba>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6a1a      	ldr	r2, [r3, #32]
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d911      	bls.n	80061f6 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6a1a      	ldr	r2, [r3, #32]
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	8992      	ldrh	r2, [r2, #12]
 80061de:	fb02 f303 	mul.w	r3, r2, r3
 80061e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061e4:	18d0      	adds	r0, r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	899b      	ldrh	r3, [r3, #12]
 80061f0:	461a      	mov	r2, r3
 80061f2:	f7fe f837 	bl	8004264 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	899b      	ldrh	r3, [r3, #12]
 80061fa:	461a      	mov	r2, r3
 80061fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061fe:	fb02 f303 	mul.w	r3, r2, r3
 8006202:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8006204:	e05c      	b.n	80062c0 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	69ba      	ldr	r2, [r7, #24]
 800620c:	429a      	cmp	r2, r3
 800620e:	d02e      	beq.n	800626e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	7d1b      	ldrb	r3, [r3, #20]
 8006214:	b25b      	sxtb	r3, r3
 8006216:	2b00      	cmp	r3, #0
 8006218:	da18      	bge.n	800624c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	7858      	ldrb	r0, [r3, #1]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6a1a      	ldr	r2, [r3, #32]
 8006228:	2301      	movs	r3, #1
 800622a:	f7fd ff5b 	bl	80040e4 <disk_write>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d004      	beq.n	800623e <f_read+0x202>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2201      	movs	r2, #1
 8006238:	755a      	strb	r2, [r3, #21]
 800623a:	2301      	movs	r3, #1
 800623c:	e059      	b.n	80062f2 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	7d1b      	ldrb	r3, [r3, #20]
 8006242:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006246:	b2da      	uxtb	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	7858      	ldrb	r0, [r3, #1]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006256:	2301      	movs	r3, #1
 8006258:	69ba      	ldr	r2, [r7, #24]
 800625a:	f7fd ff23 	bl	80040a4 <disk_read>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d004      	beq.n	800626e <f_read+0x232>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2201      	movs	r2, #1
 8006268:	755a      	strb	r2, [r3, #21]
 800626a:	2301      	movs	r3, #1
 800626c:	e041      	b.n	80062f2 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	69ba      	ldr	r2, [r7, #24]
 8006272:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	899b      	ldrh	r3, [r3, #12]
 8006278:	4618      	mov	r0, r3
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	699b      	ldr	r3, [r3, #24]
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	8992      	ldrh	r2, [r2, #12]
 8006282:	fbb3 f1f2 	udiv	r1, r3, r2
 8006286:	fb02 f201 	mul.w	r2, r2, r1
 800628a:	1a9b      	subs	r3, r3, r2
 800628c:	1ac3      	subs	r3, r0, r3
 800628e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006290:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	429a      	cmp	r2, r3
 8006296:	d901      	bls.n	800629c <f_read+0x260>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	697a      	ldr	r2, [r7, #20]
 80062a8:	8992      	ldrh	r2, [r2, #12]
 80062aa:	fbb3 f0f2 	udiv	r0, r3, r2
 80062ae:	fb02 f200 	mul.w	r2, r2, r0
 80062b2:	1a9b      	subs	r3, r3, r2
 80062b4:	440b      	add	r3, r1
 80062b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062b8:	4619      	mov	r1, r3
 80062ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062bc:	f7fd ffd2 	bl	8004264 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80062c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c4:	4413      	add	r3, r2
 80062c6:	627b      	str	r3, [r7, #36]	; 0x24
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	699a      	ldr	r2, [r3, #24]
 80062cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ce:	441a      	add	r2, r3
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	619a      	str	r2, [r3, #24]
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062da:	441a      	add	r2, r3
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	601a      	str	r2, [r3, #0]
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f47f aee1 	bne.w	80060b2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3738      	adds	r7, #56	; 0x38
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b08c      	sub	sp, #48	; 0x30
 80062fe:	af00      	add	r7, sp, #0
 8006300:	60f8      	str	r0, [r7, #12]
 8006302:	60b9      	str	r1, [r7, #8]
 8006304:	607a      	str	r2, [r7, #4]
 8006306:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	2200      	movs	r2, #0
 8006310:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f107 0210 	add.w	r2, r7, #16
 8006318:	4611      	mov	r1, r2
 800631a:	4618      	mov	r0, r3
 800631c:	f7ff fc46 	bl	8005bac <validate>
 8006320:	4603      	mov	r3, r0
 8006322:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006326:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800632a:	2b00      	cmp	r3, #0
 800632c:	d107      	bne.n	800633e <f_write+0x44>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	7d5b      	ldrb	r3, [r3, #21]
 8006332:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006336:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800633a:	2b00      	cmp	r3, #0
 800633c:	d002      	beq.n	8006344 <f_write+0x4a>
 800633e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006342:	e16a      	b.n	800661a <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	7d1b      	ldrb	r3, [r3, #20]
 8006348:	f003 0302 	and.w	r3, r3, #2
 800634c:	2b00      	cmp	r3, #0
 800634e:	d101      	bne.n	8006354 <f_write+0x5a>
 8006350:	2307      	movs	r3, #7
 8006352:	e162      	b.n	800661a <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	699a      	ldr	r2, [r3, #24]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	441a      	add	r2, r3
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	699b      	ldr	r3, [r3, #24]
 8006360:	429a      	cmp	r2, r3
 8006362:	f080 814c 	bcs.w	80065fe <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	699b      	ldr	r3, [r3, #24]
 800636a:	43db      	mvns	r3, r3
 800636c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800636e:	e146      	b.n	80065fe <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	699b      	ldr	r3, [r3, #24]
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	8992      	ldrh	r2, [r2, #12]
 8006378:	fbb3 f1f2 	udiv	r1, r3, r2
 800637c:	fb02 f201 	mul.w	r2, r2, r1
 8006380:	1a9b      	subs	r3, r3, r2
 8006382:	2b00      	cmp	r3, #0
 8006384:	f040 80f1 	bne.w	800656a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	699b      	ldr	r3, [r3, #24]
 800638c:	693a      	ldr	r2, [r7, #16]
 800638e:	8992      	ldrh	r2, [r2, #12]
 8006390:	fbb3 f3f2 	udiv	r3, r3, r2
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	8952      	ldrh	r2, [r2, #10]
 8006398:	3a01      	subs	r2, #1
 800639a:	4013      	ands	r3, r2
 800639c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d143      	bne.n	800642c <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	699b      	ldr	r3, [r3, #24]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d10c      	bne.n	80063c6 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80063b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d11a      	bne.n	80063ee <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2100      	movs	r1, #0
 80063bc:	4618      	mov	r0, r3
 80063be:	f7fe fc91 	bl	8004ce4 <create_chain>
 80063c2:	62b8      	str	r0, [r7, #40]	; 0x28
 80063c4:	e013      	b.n	80063ee <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d007      	beq.n	80063de <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	4619      	mov	r1, r3
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f7fe fd1d 	bl	8004e14 <clmt_clust>
 80063da:	62b8      	str	r0, [r7, #40]	; 0x28
 80063dc:	e007      	b.n	80063ee <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	69db      	ldr	r3, [r3, #28]
 80063e4:	4619      	mov	r1, r3
 80063e6:	4610      	mov	r0, r2
 80063e8:	f7fe fc7c 	bl	8004ce4 <create_chain>
 80063ec:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80063ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f000 8109 	beq.w	8006608 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80063f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d104      	bne.n	8006406 <f_write+0x10c>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2202      	movs	r2, #2
 8006400:	755a      	strb	r2, [r3, #21]
 8006402:	2302      	movs	r3, #2
 8006404:	e109      	b.n	800661a <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006408:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800640c:	d104      	bne.n	8006418 <f_write+0x11e>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2201      	movs	r2, #1
 8006412:	755a      	strb	r2, [r3, #21]
 8006414:	2301      	movs	r3, #1
 8006416:	e100      	b.n	800661a <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800641c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d102      	bne.n	800642c <f_write+0x132>
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800642a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	7d1b      	ldrb	r3, [r3, #20]
 8006430:	b25b      	sxtb	r3, r3
 8006432:	2b00      	cmp	r3, #0
 8006434:	da18      	bge.n	8006468 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	7858      	ldrb	r0, [r3, #1]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6a1a      	ldr	r2, [r3, #32]
 8006444:	2301      	movs	r3, #1
 8006446:	f7fd fe4d 	bl	80040e4 <disk_write>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d004      	beq.n	800645a <f_write+0x160>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2201      	movs	r2, #1
 8006454:	755a      	strb	r2, [r3, #21]
 8006456:	2301      	movs	r3, #1
 8006458:	e0df      	b.n	800661a <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	7d1b      	ldrb	r3, [r3, #20]
 800645e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006462:	b2da      	uxtb	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	69db      	ldr	r3, [r3, #28]
 800646e:	4619      	mov	r1, r3
 8006470:	4610      	mov	r0, r2
 8006472:	f7fe f9c3 	bl	80047fc <clust2sect>
 8006476:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d104      	bne.n	8006488 <f_write+0x18e>
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2202      	movs	r2, #2
 8006482:	755a      	strb	r2, [r3, #21]
 8006484:	2302      	movs	r3, #2
 8006486:	e0c8      	b.n	800661a <f_write+0x320>
			sect += csect;
 8006488:	697a      	ldr	r2, [r7, #20]
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	4413      	add	r3, r2
 800648e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	899b      	ldrh	r3, [r3, #12]
 8006494:	461a      	mov	r2, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	fbb3 f3f2 	udiv	r3, r3, r2
 800649c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800649e:	6a3b      	ldr	r3, [r7, #32]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d043      	beq.n	800652c <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80064a4:	69ba      	ldr	r2, [r7, #24]
 80064a6:	6a3b      	ldr	r3, [r7, #32]
 80064a8:	4413      	add	r3, r2
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	8952      	ldrh	r2, [r2, #10]
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d905      	bls.n	80064be <f_write+0x1c4>
					cc = fs->csize - csect;
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	895b      	ldrh	r3, [r3, #10]
 80064b6:	461a      	mov	r2, r3
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	7858      	ldrb	r0, [r3, #1]
 80064c2:	6a3b      	ldr	r3, [r7, #32]
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	69f9      	ldr	r1, [r7, #28]
 80064c8:	f7fd fe0c 	bl	80040e4 <disk_write>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d004      	beq.n	80064dc <f_write+0x1e2>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2201      	movs	r2, #1
 80064d6:	755a      	strb	r2, [r3, #21]
 80064d8:	2301      	movs	r3, #1
 80064da:	e09e      	b.n	800661a <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6a1a      	ldr	r2, [r3, #32]
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	6a3a      	ldr	r2, [r7, #32]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d918      	bls.n	800651c <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6a1a      	ldr	r2, [r3, #32]
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	1ad3      	subs	r3, r2, r3
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	8992      	ldrh	r2, [r2, #12]
 80064fc:	fb02 f303 	mul.w	r3, r2, r3
 8006500:	69fa      	ldr	r2, [r7, #28]
 8006502:	18d1      	adds	r1, r2, r3
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	899b      	ldrh	r3, [r3, #12]
 8006508:	461a      	mov	r2, r3
 800650a:	f7fd feab 	bl	8004264 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	7d1b      	ldrb	r3, [r3, #20]
 8006512:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006516:	b2da      	uxtb	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	899b      	ldrh	r3, [r3, #12]
 8006520:	461a      	mov	r2, r3
 8006522:	6a3b      	ldr	r3, [r7, #32]
 8006524:	fb02 f303 	mul.w	r3, r2, r3
 8006528:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800652a:	e04b      	b.n	80065c4 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6a1b      	ldr	r3, [r3, #32]
 8006530:	697a      	ldr	r2, [r7, #20]
 8006532:	429a      	cmp	r2, r3
 8006534:	d016      	beq.n	8006564 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	699a      	ldr	r2, [r3, #24]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800653e:	429a      	cmp	r2, r3
 8006540:	d210      	bcs.n	8006564 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	7858      	ldrb	r0, [r3, #1]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800654c:	2301      	movs	r3, #1
 800654e:	697a      	ldr	r2, [r7, #20]
 8006550:	f7fd fda8 	bl	80040a4 <disk_read>
 8006554:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006556:	2b00      	cmp	r3, #0
 8006558:	d004      	beq.n	8006564 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2201      	movs	r2, #1
 800655e:	755a      	strb	r2, [r3, #21]
 8006560:	2301      	movs	r3, #1
 8006562:	e05a      	b.n	800661a <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	697a      	ldr	r2, [r7, #20]
 8006568:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	899b      	ldrh	r3, [r3, #12]
 800656e:	4618      	mov	r0, r3
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	8992      	ldrh	r2, [r2, #12]
 8006578:	fbb3 f1f2 	udiv	r1, r3, r2
 800657c:	fb02 f201 	mul.w	r2, r2, r1
 8006580:	1a9b      	subs	r3, r3, r2
 8006582:	1ac3      	subs	r3, r0, r3
 8006584:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	429a      	cmp	r2, r3
 800658c:	d901      	bls.n	8006592 <f_write+0x298>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	699b      	ldr	r3, [r3, #24]
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	8992      	ldrh	r2, [r2, #12]
 80065a0:	fbb3 f0f2 	udiv	r0, r3, r2
 80065a4:	fb02 f200 	mul.w	r2, r2, r0
 80065a8:	1a9b      	subs	r3, r3, r2
 80065aa:	440b      	add	r3, r1
 80065ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065ae:	69f9      	ldr	r1, [r7, #28]
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7fd fe57 	bl	8004264 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	7d1b      	ldrb	r3, [r3, #20]
 80065ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80065be:	b2da      	uxtb	r2, r3
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80065c4:	69fa      	ldr	r2, [r7, #28]
 80065c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c8:	4413      	add	r3, r2
 80065ca:	61fb      	str	r3, [r7, #28]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	699a      	ldr	r2, [r3, #24]
 80065d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d2:	441a      	add	r2, r3
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	619a      	str	r2, [r3, #24]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	68da      	ldr	r2, [r3, #12]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	699b      	ldr	r3, [r3, #24]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	bf38      	it	cc
 80065e4:	461a      	movcc	r2, r3
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	60da      	str	r2, [r3, #12]
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f0:	441a      	add	r2, r3
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	601a      	str	r2, [r3, #0]
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2b00      	cmp	r3, #0
 8006602:	f47f aeb5 	bne.w	8006370 <f_write+0x76>
 8006606:	e000      	b.n	800660a <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006608:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	7d1b      	ldrb	r3, [r3, #20]
 800660e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006612:	b2da      	uxtb	r2, r3
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3730      	adds	r7, #48	; 0x30
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b086      	sub	sp, #24
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f107 0208 	add.w	r2, r7, #8
 8006630:	4611      	mov	r1, r2
 8006632:	4618      	mov	r0, r3
 8006634:	f7ff faba 	bl	8005bac <validate>
 8006638:	4603      	mov	r3, r0
 800663a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800663c:	7dfb      	ldrb	r3, [r7, #23]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d168      	bne.n	8006714 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	7d1b      	ldrb	r3, [r3, #20]
 8006646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800664a:	2b00      	cmp	r3, #0
 800664c:	d062      	beq.n	8006714 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	7d1b      	ldrb	r3, [r3, #20]
 8006652:	b25b      	sxtb	r3, r3
 8006654:	2b00      	cmp	r3, #0
 8006656:	da15      	bge.n	8006684 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	7858      	ldrb	r0, [r3, #1]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a1a      	ldr	r2, [r3, #32]
 8006666:	2301      	movs	r3, #1
 8006668:	f7fd fd3c 	bl	80040e4 <disk_write>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d001      	beq.n	8006676 <f_sync+0x54>
 8006672:	2301      	movs	r3, #1
 8006674:	e04f      	b.n	8006716 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	7d1b      	ldrb	r3, [r3, #20]
 800667a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800667e:	b2da      	uxtb	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006684:	f7fd fb54 	bl	8003d30 <get_fattime>
 8006688:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800668a:	68ba      	ldr	r2, [r7, #8]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006690:	4619      	mov	r1, r3
 8006692:	4610      	mov	r0, r2
 8006694:	f7fe f814 	bl	80046c0 <move_window>
 8006698:	4603      	mov	r3, r0
 800669a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800669c:	7dfb      	ldrb	r3, [r7, #23]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d138      	bne.n	8006714 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	330b      	adds	r3, #11
 80066ac:	781a      	ldrb	r2, [r3, #0]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	330b      	adds	r3, #11
 80066b2:	f042 0220 	orr.w	r2, r2, #32
 80066b6:	b2d2      	uxtb	r2, r2
 80066b8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6818      	ldr	r0, [r3, #0]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	461a      	mov	r2, r3
 80066c4:	68f9      	ldr	r1, [r7, #12]
 80066c6:	f7fe fda2 	bl	800520e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f103 021c 	add.w	r2, r3, #28
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	4619      	mov	r1, r3
 80066d6:	4610      	mov	r0, r2
 80066d8:	f7fd fd98 	bl	800420c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	3316      	adds	r3, #22
 80066e0:	6939      	ldr	r1, [r7, #16]
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7fd fd92 	bl	800420c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	3312      	adds	r3, #18
 80066ec:	2100      	movs	r1, #0
 80066ee:	4618      	mov	r0, r3
 80066f0:	f7fd fd71 	bl	80041d6 <st_word>
					fs->wflag = 1;
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	2201      	movs	r2, #1
 80066f8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	4618      	mov	r0, r3
 80066fe:	f7fe f80d 	bl	800471c <sync_fs>
 8006702:	4603      	mov	r3, r0
 8006704:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	7d1b      	ldrb	r3, [r3, #20]
 800670a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800670e:	b2da      	uxtb	r2, r3
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006714:	7dfb      	ldrb	r3, [r7, #23]
}
 8006716:	4618      	mov	r0, r3
 8006718:	3718      	adds	r7, #24
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}

0800671e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800671e:	b580      	push	{r7, lr}
 8006720:	b084      	sub	sp, #16
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f7ff ff7b 	bl	8006622 <f_sync>
 800672c:	4603      	mov	r3, r0
 800672e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006730:	7bfb      	ldrb	r3, [r7, #15]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d118      	bne.n	8006768 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f107 0208 	add.w	r2, r7, #8
 800673c:	4611      	mov	r1, r2
 800673e:	4618      	mov	r0, r3
 8006740:	f7ff fa34 	bl	8005bac <validate>
 8006744:	4603      	mov	r3, r0
 8006746:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006748:	7bfb      	ldrb	r3, [r7, #15]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d10c      	bne.n	8006768 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	4618      	mov	r0, r3
 8006754:	f7fd ff10 	bl	8004578 <dec_lock>
 8006758:	4603      	mov	r3, r0
 800675a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800675c:	7bfb      	ldrb	r3, [r7, #15]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d102      	bne.n	8006768 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006768:	7bfb      	ldrb	r3, [r7, #15]
}
 800676a:	4618      	mov	r0, r3
 800676c:	3710      	adds	r7, #16
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
	...

08006774 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8006774:	b590      	push	{r4, r7, lr}
 8006776:	b09d      	sub	sp, #116	; 0x74
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	607a      	str	r2, [r7, #4]
 800677e:	603b      	str	r3, [r7, #0]
 8006780:	460b      	mov	r3, r1
 8006782:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8006784:	2301      	movs	r3, #1
 8006786:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8006788:	f44f 7300 	mov.w	r3, #512	; 0x200
 800678c:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800678e:	f107 030c 	add.w	r3, r7, #12
 8006792:	4618      	mov	r0, r3
 8006794:	f7fe feec 	bl	8005570 <get_ldnumber>
 8006798:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800679a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800679c:	2b00      	cmp	r3, #0
 800679e:	da02      	bge.n	80067a6 <f_mkfs+0x32>
 80067a0:	230b      	movs	r3, #11
 80067a2:	f000 bc31 	b.w	8007008 <f_mkfs+0x894>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 80067a6:	4aa5      	ldr	r2, [pc, #660]	; (8006a3c <f_mkfs+0x2c8>)
 80067a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d005      	beq.n	80067be <f_mkfs+0x4a>
 80067b2:	4aa2      	ldr	r2, [pc, #648]	; (8006a3c <f_mkfs+0x2c8>)
 80067b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067ba:	2200      	movs	r2, #0
 80067bc:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 80067be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067c0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 80067c4:	2300      	movs	r3, #0
 80067c6:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 80067ca:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7fd fc42 	bl	8004058 <disk_initialize>
 80067d4:	4603      	mov	r3, r0
 80067d6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 80067da:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80067de:	f003 0301 	and.w	r3, r3, #1
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d002      	beq.n	80067ec <f_mkfs+0x78>
 80067e6:	2303      	movs	r3, #3
 80067e8:	f000 bc0e 	b.w	8007008 <f_mkfs+0x894>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 80067ec:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80067f0:	f003 0304 	and.w	r3, r3, #4
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d002      	beq.n	80067fe <f_mkfs+0x8a>
 80067f8:	230a      	movs	r3, #10
 80067fa:	f000 bc05 	b.w	8007008 <f_mkfs+0x894>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 80067fe:	f107 0214 	add.w	r2, r7, #20
 8006802:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006806:	2103      	movs	r1, #3
 8006808:	4618      	mov	r0, r3
 800680a:	f7fd fc8b 	bl	8004124 <disk_ioctl>
 800680e:	4603      	mov	r3, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	d10c      	bne.n	800682e <f_mkfs+0xba>
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d009      	beq.n	800682e <f_mkfs+0xba>
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006820:	d805      	bhi.n	800682e <f_mkfs+0xba>
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	1e5a      	subs	r2, r3, #1
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	4013      	ands	r3, r2
 800682a:	2b00      	cmp	r3, #0
 800682c:	d001      	beq.n	8006832 <f_mkfs+0xbe>
 800682e:	2301      	movs	r3, #1
 8006830:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
 8006832:	f107 021a 	add.w	r2, r7, #26
 8006836:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800683a:	2102      	movs	r1, #2
 800683c:	4618      	mov	r0, r3
 800683e:	f7fd fc71 	bl	8004124 <disk_ioctl>
 8006842:	4603      	mov	r3, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d001      	beq.n	800684c <f_mkfs+0xd8>
 8006848:	2301      	movs	r3, #1
 800684a:	e3dd      	b.n	8007008 <f_mkfs+0x894>
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
 800684c:	8b7b      	ldrh	r3, [r7, #26]
 800684e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006852:	d80a      	bhi.n	800686a <f_mkfs+0xf6>
 8006854:	8b7b      	ldrh	r3, [r7, #26]
 8006856:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800685a:	d306      	bcc.n	800686a <f_mkfs+0xf6>
 800685c:	8b7b      	ldrh	r3, [r7, #26]
 800685e:	461a      	mov	r2, r3
 8006860:	8b7b      	ldrh	r3, [r7, #26]
 8006862:	3b01      	subs	r3, #1
 8006864:	4013      	ands	r3, r2
 8006866:	2b00      	cmp	r3, #0
 8006868:	d001      	beq.n	800686e <f_mkfs+0xfa>
 800686a:	2301      	movs	r3, #1
 800686c:	e3cc      	b.n	8007008 <f_mkfs+0x894>
#else
	ss = _MAX_SS;
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d004      	beq.n	800687e <f_mkfs+0x10a>
 8006874:	8b7b      	ldrh	r3, [r7, #26]
 8006876:	461a      	mov	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4293      	cmp	r3, r2
 800687c:	d309      	bcc.n	8006892 <f_mkfs+0x11e>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006884:	d805      	bhi.n	8006892 <f_mkfs+0x11e>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	1e5a      	subs	r2, r3, #1
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4013      	ands	r3, r2
 800688e:	2b00      	cmp	r3, #0
 8006890:	d001      	beq.n	8006896 <f_mkfs+0x122>
 8006892:	2313      	movs	r3, #19
 8006894:	e3b8      	b.n	8007008 <f_mkfs+0x894>
	au /= ss;	/* Cluster size in unit of sector */
 8006896:	8b7b      	ldrh	r3, [r7, #26]
 8006898:	461a      	mov	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	fbb3 f3f2 	udiv	r3, r3, r2
 80068a0:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	637b      	str	r3, [r7, #52]	; 0x34
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 80068a6:	8b7b      	ldrh	r3, [r7, #26]
 80068a8:	461a      	mov	r2, r3
 80068aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80068ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80068b2:	633b      	str	r3, [r7, #48]	; 0x30
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 80068b4:	8b7b      	ldrh	r3, [r7, #26]
 80068b6:	461a      	mov	r2, r3
 80068b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ba:	fb02 f303 	mul.w	r3, r2, r3
 80068be:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (!szb_buf) return FR_MKFS_ABORTED;
 80068c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d101      	bne.n	80068ca <f_mkfs+0x156>
 80068c6:	230e      	movs	r3, #14
 80068c8:	e39e      	b.n	8007008 <f_mkfs+0x894>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 80068ca:	f107 0210 	add.w	r2, r7, #16
 80068ce:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80068d2:	2101      	movs	r1, #1
 80068d4:	4618      	mov	r0, r3
 80068d6:	f7fd fc25 	bl	8004124 <disk_ioctl>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d001      	beq.n	80068e4 <f_mkfs+0x170>
 80068e0:	2301      	movs	r3, #1
 80068e2:	e391      	b.n	8007008 <f_mkfs+0x894>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 80068e4:	7afb      	ldrb	r3, [r7, #11]
 80068e6:	f003 0308 	and.w	r3, r3, #8
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d001      	beq.n	80068f2 <f_mkfs+0x17e>
 80068ee:	2300      	movs	r3, #0
 80068f0:	e000      	b.n	80068f4 <f_mkfs+0x180>
 80068f2:	233f      	movs	r3, #63	; 0x3f
 80068f4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d901      	bls.n	8006902 <f_mkfs+0x18e>
 80068fe:	230e      	movs	r3, #14
 8006900:	e382      	b.n	8007008 <f_mkfs+0x894>
		sz_vol -= b_vol;						/* Volume size */
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	2b7f      	cmp	r3, #127	; 0x7f
 800690e:	d801      	bhi.n	8006914 <f_mkfs+0x1a0>
 8006910:	230e      	movs	r3, #14
 8006912:	e379      	b.n	8007008 <f_mkfs+0x894>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2b80      	cmp	r3, #128	; 0x80
 8006918:	d901      	bls.n	800691e <f_mkfs+0x1aa>
 800691a:	2313      	movs	r3, #19
 800691c:	e374      	b.n	8007008 <f_mkfs+0x894>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800691e:	7afb      	ldrb	r3, [r7, #11]
 8006920:	f003 0302 	and.w	r3, r3, #2
 8006924:	2b00      	cmp	r3, #0
 8006926:	d00d      	beq.n	8006944 <f_mkfs+0x1d0>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8006928:	7afb      	ldrb	r3, [r7, #11]
 800692a:	f003 0307 	and.w	r3, r3, #7
 800692e:	2b02      	cmp	r3, #2
 8006930:	d004      	beq.n	800693c <f_mkfs+0x1c8>
 8006932:	7afb      	ldrb	r3, [r7, #11]
 8006934:	f003 0301 	and.w	r3, r3, #1
 8006938:	2b00      	cmp	r3, #0
 800693a:	d103      	bne.n	8006944 <f_mkfs+0x1d0>
				fmt = FS_FAT32; break;
 800693c:	2303      	movs	r3, #3
 800693e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006942:	e009      	b.n	8006958 <f_mkfs+0x1e4>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8006944:	7afb      	ldrb	r3, [r7, #11]
 8006946:	f003 0301 	and.w	r3, r3, #1
 800694a:	2b00      	cmp	r3, #0
 800694c:	d101      	bne.n	8006952 <f_mkfs+0x1de>
 800694e:	2313      	movs	r3, #19
 8006950:	e35a      	b.n	8007008 <f_mkfs+0x894>
		fmt = FS_FAT16;
 8006952:	2302      	movs	r3, #2
 8006954:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800695c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006960:	2b03      	cmp	r3, #3
 8006962:	d13c      	bne.n	80069de <f_mkfs+0x26a>
				if (!pau) {	/* au auto-selection */
 8006964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006966:	2b00      	cmp	r3, #0
 8006968:	d11b      	bne.n	80069a2 <f_mkfs+0x22e>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	0c5b      	lsrs	r3, r3, #17
 800696e:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8006970:	2300      	movs	r3, #0
 8006972:	64bb      	str	r3, [r7, #72]	; 0x48
 8006974:	2301      	movs	r3, #1
 8006976:	653b      	str	r3, [r7, #80]	; 0x50
 8006978:	e005      	b.n	8006986 <f_mkfs+0x212>
 800697a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800697c:	3301      	adds	r3, #1
 800697e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006982:	005b      	lsls	r3, r3, #1
 8006984:	653b      	str	r3, [r7, #80]	; 0x50
 8006986:	4a2e      	ldr	r2, [pc, #184]	; (8006a40 <f_mkfs+0x2cc>)
 8006988:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800698a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d007      	beq.n	80069a2 <f_mkfs+0x22e>
 8006992:	4a2b      	ldr	r2, [pc, #172]	; (8006a40 <f_mkfs+0x2cc>)
 8006994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006996:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800699a:	461a      	mov	r2, r3
 800699c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800699e:	4293      	cmp	r3, r2
 80069a0:	d2eb      	bcs.n	800697a <f_mkfs+0x206>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 80069a2:	693a      	ldr	r2, [r7, #16]
 80069a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80069aa:	627b      	str	r3, [r7, #36]	; 0x24
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 80069ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ae:	3302      	adds	r3, #2
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	8b7a      	ldrh	r2, [r7, #26]
 80069b4:	4413      	add	r3, r2
 80069b6:	3b01      	subs	r3, #1
 80069b8:	8b7a      	ldrh	r2, [r7, #26]
 80069ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80069be:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 80069c0:	2320      	movs	r3, #32
 80069c2:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 80069c4:	2300      	movs	r3, #0
 80069c6:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 80069c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ca:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d903      	bls.n	80069da <f_mkfs+0x266>
 80069d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d4:	4a1b      	ldr	r2, [pc, #108]	; (8006a44 <f_mkfs+0x2d0>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d954      	bls.n	8006a84 <f_mkfs+0x310>
 80069da:	230e      	movs	r3, #14
 80069dc:	e314      	b.n	8007008 <f_mkfs+0x894>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 80069de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d11b      	bne.n	8006a1c <f_mkfs+0x2a8>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	0b1b      	lsrs	r3, r3, #12
 80069e8:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80069ea:	2300      	movs	r3, #0
 80069ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80069ee:	2301      	movs	r3, #1
 80069f0:	653b      	str	r3, [r7, #80]	; 0x50
 80069f2:	e005      	b.n	8006a00 <f_mkfs+0x28c>
 80069f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069f6:	3301      	adds	r3, #1
 80069f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80069fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069fc:	005b      	lsls	r3, r3, #1
 80069fe:	653b      	str	r3, [r7, #80]	; 0x50
 8006a00:	4a11      	ldr	r2, [pc, #68]	; (8006a48 <f_mkfs+0x2d4>)
 8006a02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d007      	beq.n	8006a1c <f_mkfs+0x2a8>
 8006a0c:	4a0e      	ldr	r2, [pc, #56]	; (8006a48 <f_mkfs+0x2d4>)
 8006a0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a14:	461a      	mov	r2, r3
 8006a16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d2eb      	bcs.n	80069f4 <f_mkfs+0x280>
				}
				n_clst = sz_vol / pau;
 8006a1c:	693a      	ldr	r2, [r7, #16]
 8006a1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a24:	627b      	str	r3, [r7, #36]	; 0x24
				if (n_clst > MAX_FAT12) {
 8006a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a28:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d90d      	bls.n	8006a4c <f_mkfs+0x2d8>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8006a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a32:	3302      	adds	r3, #2
 8006a34:	005b      	lsls	r3, r3, #1
 8006a36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a38:	e013      	b.n	8006a62 <f_mkfs+0x2ee>
 8006a3a:	bf00      	nop
 8006a3c:	20001028 	.word	0x20001028
 8006a40:	080072f4 	.word	0x080072f4
 8006a44:	0ffffff5 	.word	0x0ffffff5
 8006a48:	08007304 	.word	0x08007304
				} else {
					fmt = FS_FAT12;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8006a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a54:	4613      	mov	r3, r2
 8006a56:	005b      	lsls	r3, r3, #1
 8006a58:	4413      	add	r3, r2
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	085b      	lsrs	r3, r3, #1
 8006a5e:	3303      	adds	r3, #3
 8006a60:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8006a62:	8b7b      	ldrh	r3, [r7, #26]
 8006a64:	461a      	mov	r2, r3
 8006a66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a68:	4413      	add	r3, r2
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	8b7a      	ldrh	r2, [r7, #26]
 8006a6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a72:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 8006a74:	2301      	movs	r3, #1
 8006a76:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8006a78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a7a:	015b      	lsls	r3, r3, #5
 8006a7c:	8b7a      	ldrh	r2, [r7, #26]
 8006a7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a82:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8006a84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a88:	4413      	add	r3, r2
 8006a8a:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8006a8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a90:	fb02 f203 	mul.w	r2, r2, r3
 8006a94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a96:	4413      	add	r3, r2
 8006a98:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a9a:	4413      	add	r3, r2
 8006a9c:	623b      	str	r3, [r7, #32]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8006a9e:	697a      	ldr	r2, [r7, #20]
 8006aa0:	6a3b      	ldr	r3, [r7, #32]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	1e5a      	subs	r2, r3, #1
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	425b      	negs	r3, r3
 8006aaa:	401a      	ands	r2, r3
 8006aac:	6a3b      	ldr	r3, [r7, #32]
 8006aae:	1ad3      	subs	r3, r2, r3
 8006ab0:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8006ab2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006ab6:	2b03      	cmp	r3, #3
 8006ab8:	d108      	bne.n	8006acc <f_mkfs+0x358>
				sz_rsv += n; b_fat += n;
 8006aba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006abc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006abe:	4413      	add	r3, r2
 8006ac0:	657b      	str	r3, [r7, #84]	; 0x54
 8006ac2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ac4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ac6:	4413      	add	r3, r2
 8006ac8:	65bb      	str	r3, [r7, #88]	; 0x58
 8006aca:	e006      	b.n	8006ada <f_mkfs+0x366>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 8006acc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006ace:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ad4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006ad6:	4413      	add	r3, r2
 8006ad8:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8006ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006adc:	011a      	lsls	r2, r3, #4
 8006ade:	6a3b      	ldr	r3, [r7, #32]
 8006ae0:	441a      	add	r2, r3
 8006ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae4:	1ad2      	subs	r2, r2, r3
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d901      	bls.n	8006af0 <f_mkfs+0x37c>
 8006aec:	230e      	movs	r3, #14
 8006aee:	e28b      	b.n	8007008 <f_mkfs+0x894>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8006af0:	693a      	ldr	r2, [r7, #16]
 8006af2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006af4:	1ad2      	subs	r2, r2, r3
 8006af6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006af8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006afa:	fb01 f303 	mul.w	r3, r1, r3
 8006afe:	1ad2      	subs	r2, r2, r3
 8006b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b02:	1ad2      	subs	r2, r2, r3
 8006b04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b0a:	627b      	str	r3, [r7, #36]	; 0x24
			if (fmt == FS_FAT32) {
 8006b0c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006b10:	2b03      	cmp	r3, #3
 8006b12:	d10f      	bne.n	8006b34 <f_mkfs+0x3c0>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8006b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b16:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d80a      	bhi.n	8006b34 <f_mkfs+0x3c0>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d105      	bne.n	8006b30 <f_mkfs+0x3bc>
 8006b24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b26:	085b      	lsrs	r3, r3, #1
 8006b28:	607b      	str	r3, [r7, #4]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d144      	bne.n	8006bba <f_mkfs+0x446>
					return FR_MKFS_ABORTED;
 8006b30:	230e      	movs	r3, #14
 8006b32:	e269      	b.n	8007008 <f_mkfs+0x894>
				}
			}
			if (fmt == FS_FAT16) {
 8006b34:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	d133      	bne.n	8006ba4 <f_mkfs+0x430>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8006b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d91e      	bls.n	8006b84 <f_mkfs+0x410>
					if (!au && (pau * 2) <= 64) {
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d107      	bne.n	8006b5c <f_mkfs+0x3e8>
 8006b4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b4e:	005b      	lsls	r3, r3, #1
 8006b50:	2b40      	cmp	r3, #64	; 0x40
 8006b52:	d803      	bhi.n	8006b5c <f_mkfs+0x3e8>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8006b54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b56:	005b      	lsls	r3, r3, #1
 8006b58:	607b      	str	r3, [r7, #4]
 8006b5a:	e033      	b.n	8006bc4 <f_mkfs+0x450>
					}
					if ((opt & FM_FAT32)) {
 8006b5c:	7afb      	ldrb	r3, [r7, #11]
 8006b5e:	f003 0302 	and.w	r3, r3, #2
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d003      	beq.n	8006b6e <f_mkfs+0x3fa>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8006b66:	2303      	movs	r3, #3
 8006b68:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006b6c:	e02a      	b.n	8006bc4 <f_mkfs+0x450>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d105      	bne.n	8006b80 <f_mkfs+0x40c>
 8006b74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b76:	005b      	lsls	r3, r3, #1
 8006b78:	607b      	str	r3, [r7, #4]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2b80      	cmp	r3, #128	; 0x80
 8006b7e:	d91e      	bls.n	8006bbe <f_mkfs+0x44a>
					return FR_MKFS_ABORTED;
 8006b80:	230e      	movs	r3, #14
 8006b82:	e241      	b.n	8007008 <f_mkfs+0x894>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8006b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b86:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d80a      	bhi.n	8006ba4 <f_mkfs+0x430>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d105      	bne.n	8006ba0 <f_mkfs+0x42c>
 8006b94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b96:	005b      	lsls	r3, r3, #1
 8006b98:	607b      	str	r3, [r7, #4]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2b80      	cmp	r3, #128	; 0x80
 8006b9e:	d910      	bls.n	8006bc2 <f_mkfs+0x44e>
					return FR_MKFS_ABORTED;
 8006ba0:	230e      	movs	r3, #14
 8006ba2:	e231      	b.n	8007008 <f_mkfs+0x894>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8006ba4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d10c      	bne.n	8006bc6 <f_mkfs+0x452>
 8006bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bae:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d907      	bls.n	8006bc6 <f_mkfs+0x452>
 8006bb6:	230e      	movs	r3, #14
 8006bb8:	e226      	b.n	8007008 <f_mkfs+0x894>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8006bba:	bf00      	nop
 8006bbc:	e6cc      	b.n	8006958 <f_mkfs+0x1e4>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8006bbe:	bf00      	nop
 8006bc0:	e6ca      	b.n	8006958 <f_mkfs+0x1e4>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8006bc2:	bf00      	nop
			pau = au;
 8006bc4:	e6c8      	b.n	8006958 <f_mkfs+0x1e4>

			/* Ok, it is the valid cluster configuration */
			break;
 8006bc6:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8006bc8:	8b7b      	ldrh	r3, [r7, #26]
 8006bca:	461a      	mov	r2, r3
 8006bcc:	2100      	movs	r1, #0
 8006bce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006bd0:	f7fd fb69 	bl	80042a6 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8006bd4:	220b      	movs	r2, #11
 8006bd6:	49bd      	ldr	r1, [pc, #756]	; (8006ecc <f_mkfs+0x758>)
 8006bd8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006bda:	f7fd fb43 	bl	8004264 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8006bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006be0:	330b      	adds	r3, #11
 8006be2:	8b7a      	ldrh	r2, [r7, #26]
 8006be4:	4611      	mov	r1, r2
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7fd faf5 	bl	80041d6 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8006bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bee:	330d      	adds	r3, #13
 8006bf0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006bf2:	b2d2      	uxtb	r2, r2
 8006bf4:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8006bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bf8:	330e      	adds	r3, #14
 8006bfa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006bfc:	b292      	uxth	r2, r2
 8006bfe:	4611      	mov	r1, r2
 8006c00:	4618      	mov	r0, r3
 8006c02:	f7fd fae8 	bl	80041d6 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8006c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c08:	3310      	adds	r3, #16
 8006c0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c0c:	b2d2      	uxtb	r2, r2
 8006c0e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8006c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c12:	f103 0211 	add.w	r2, r3, #17
 8006c16:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006c1a:	2b03      	cmp	r3, #3
 8006c1c:	d002      	beq.n	8006c24 <f_mkfs+0x4b0>
 8006c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	e000      	b.n	8006c26 <f_mkfs+0x4b2>
 8006c24:	2300      	movs	r3, #0
 8006c26:	4619      	mov	r1, r3
 8006c28:	4610      	mov	r0, r2
 8006c2a:	f7fd fad4 	bl	80041d6 <st_word>
		if (sz_vol < 0x10000) {
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c34:	d208      	bcs.n	8006c48 <f_mkfs+0x4d4>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8006c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c38:	3313      	adds	r3, #19
 8006c3a:	693a      	ldr	r2, [r7, #16]
 8006c3c:	b292      	uxth	r2, r2
 8006c3e:	4611      	mov	r1, r2
 8006c40:	4618      	mov	r0, r3
 8006c42:	f7fd fac8 	bl	80041d6 <st_word>
 8006c46:	e006      	b.n	8006c56 <f_mkfs+0x4e2>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8006c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c4a:	3320      	adds	r3, #32
 8006c4c:	693a      	ldr	r2, [r7, #16]
 8006c4e:	4611      	mov	r1, r2
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7fd fadb 	bl	800420c <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8006c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c58:	3315      	adds	r3, #21
 8006c5a:	22f8      	movs	r2, #248	; 0xf8
 8006c5c:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8006c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c60:	3318      	adds	r3, #24
 8006c62:	213f      	movs	r1, #63	; 0x3f
 8006c64:	4618      	mov	r0, r3
 8006c66:	f7fd fab6 	bl	80041d6 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8006c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c6c:	331a      	adds	r3, #26
 8006c6e:	21ff      	movs	r1, #255	; 0xff
 8006c70:	4618      	mov	r0, r3
 8006c72:	f7fd fab0 	bl	80041d6 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8006c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c78:	331c      	adds	r3, #28
 8006c7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f7fd fac5 	bl	800420c <st_dword>
		if (fmt == FS_FAT32) {
 8006c82:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006c86:	2b03      	cmp	r3, #3
 8006c88:	d131      	bne.n	8006cee <f_mkfs+0x57a>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8006c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c8c:	f103 0443 	add.w	r4, r3, #67	; 0x43
 8006c90:	f7fd f84e 	bl	8003d30 <get_fattime>
 8006c94:	4603      	mov	r3, r0
 8006c96:	4619      	mov	r1, r3
 8006c98:	4620      	mov	r0, r4
 8006c9a:	f7fd fab7 	bl	800420c <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8006c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ca0:	3324      	adds	r3, #36	; 0x24
 8006ca2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7fd fab1 	bl	800420c <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8006caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cac:	332c      	adds	r3, #44	; 0x2c
 8006cae:	2102      	movs	r1, #2
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f7fd faab 	bl	800420c <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8006cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cb8:	3330      	adds	r3, #48	; 0x30
 8006cba:	2101      	movs	r1, #1
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f7fd fa8a 	bl	80041d6 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8006cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cc4:	3332      	adds	r3, #50	; 0x32
 8006cc6:	2106      	movs	r1, #6
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f7fd fa84 	bl	80041d6 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8006cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd0:	3340      	adds	r3, #64	; 0x40
 8006cd2:	2280      	movs	r2, #128	; 0x80
 8006cd4:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8006cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd8:	3342      	adds	r3, #66	; 0x42
 8006cda:	2229      	movs	r2, #41	; 0x29
 8006cdc:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8006cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ce0:	3347      	adds	r3, #71	; 0x47
 8006ce2:	2213      	movs	r2, #19
 8006ce4:	497a      	ldr	r1, [pc, #488]	; (8006ed0 <f_mkfs+0x75c>)
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f7fd fabc 	bl	8004264 <mem_cpy>
 8006cec:	e020      	b.n	8006d30 <f_mkfs+0x5bc>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8006cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cf0:	f103 0427 	add.w	r4, r3, #39	; 0x27
 8006cf4:	f7fd f81c 	bl	8003d30 <get_fattime>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	4620      	mov	r0, r4
 8006cfe:	f7fd fa85 	bl	800420c <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8006d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d04:	3316      	adds	r3, #22
 8006d06:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006d08:	b292      	uxth	r2, r2
 8006d0a:	4611      	mov	r1, r2
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7fd fa62 	bl	80041d6 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8006d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d14:	3324      	adds	r3, #36	; 0x24
 8006d16:	2280      	movs	r2, #128	; 0x80
 8006d18:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8006d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d1c:	3326      	adds	r3, #38	; 0x26
 8006d1e:	2229      	movs	r2, #41	; 0x29
 8006d20:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8006d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d24:	332b      	adds	r3, #43	; 0x2b
 8006d26:	2213      	movs	r2, #19
 8006d28:	496a      	ldr	r1, [pc, #424]	; (8006ed4 <f_mkfs+0x760>)
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7fd fa9a 	bl	8004264 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8006d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d32:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006d36:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f7fd fa4b 	bl	80041d6 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8006d40:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8006d44:	2301      	movs	r3, #1
 8006d46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d48:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006d4a:	f7fd f9cb 	bl	80040e4 <disk_write>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d001      	beq.n	8006d58 <f_mkfs+0x5e4>
 8006d54:	2301      	movs	r3, #1
 8006d56:	e157      	b.n	8007008 <f_mkfs+0x894>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8006d58:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006d5c:	2b03      	cmp	r3, #3
 8006d5e:	d140      	bne.n	8006de2 <f_mkfs+0x66e>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8006d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d62:	1d9a      	adds	r2, r3, #6
 8006d64:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8006d68:	2301      	movs	r3, #1
 8006d6a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006d6c:	f7fd f9ba 	bl	80040e4 <disk_write>
			mem_set(buf, 0, ss);
 8006d70:	8b7b      	ldrh	r3, [r7, #26]
 8006d72:	461a      	mov	r2, r3
 8006d74:	2100      	movs	r1, #0
 8006d76:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006d78:	f7fd fa95 	bl	80042a6 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8006d7c:	4956      	ldr	r1, [pc, #344]	; (8006ed8 <f_mkfs+0x764>)
 8006d7e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006d80:	f7fd fa44 	bl	800420c <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8006d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d86:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006d8a:	4954      	ldr	r1, [pc, #336]	; (8006edc <f_mkfs+0x768>)
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7fd fa3d 	bl	800420c <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8006d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d94:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	4610      	mov	r0, r2
 8006da0:	f7fd fa34 	bl	800420c <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8006da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006da6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006daa:	2102      	movs	r1, #2
 8006dac:	4618      	mov	r0, r3
 8006dae:	f7fd fa2d 	bl	800420c <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8006db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006db4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006db8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f7fd fa0a 	bl	80041d6 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8006dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc4:	1dda      	adds	r2, r3, #7
 8006dc6:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8006dca:	2301      	movs	r3, #1
 8006dcc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006dce:	f7fd f989 	bl	80040e4 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8006dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd4:	1c5a      	adds	r2, r3, #1
 8006dd6:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8006dda:	2301      	movs	r3, #1
 8006ddc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006dde:	f7fd f981 	bl	80040e4 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8006de2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006de4:	2100      	movs	r1, #0
 8006de6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006de8:	f7fd fa5d 	bl	80042a6 <mem_set>
		sect = b_fat;		/* FAT start sector */
 8006dec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006dee:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8006df0:	2300      	movs	r3, #0
 8006df2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006df4:	e04b      	b.n	8006e8e <f_mkfs+0x71a>
			if (fmt == FS_FAT32) {
 8006df6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006dfa:	2b03      	cmp	r3, #3
 8006dfc:	d113      	bne.n	8006e26 <f_mkfs+0x6b2>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8006dfe:	f06f 0107 	mvn.w	r1, #7
 8006e02:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006e04:	f7fd fa02 	bl	800420c <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8006e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e0a:	3304      	adds	r3, #4
 8006e0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006e10:	4618      	mov	r0, r3
 8006e12:	f7fd f9fb 	bl	800420c <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8006e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e18:	3308      	adds	r3, #8
 8006e1a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f7fd f9f4 	bl	800420c <st_dword>
 8006e24:	e00b      	b.n	8006e3e <f_mkfs+0x6ca>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8006e26:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d101      	bne.n	8006e32 <f_mkfs+0x6be>
 8006e2e:	4b2c      	ldr	r3, [pc, #176]	; (8006ee0 <f_mkfs+0x76c>)
 8006e30:	e001      	b.n	8006e36 <f_mkfs+0x6c2>
 8006e32:	f06f 0307 	mvn.w	r3, #7
 8006e36:	4619      	mov	r1, r3
 8006e38:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006e3a:	f7fd f9e7 	bl	800420c <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8006e3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e40:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8006e42:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e46:	4293      	cmp	r3, r2
 8006e48:	bf28      	it	cs
 8006e4a:	4613      	movcs	r3, r2
 8006e4c:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8006e4e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8006e52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e54:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006e56:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006e58:	f7fd f944 	bl	80040e4 <disk_write>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d001      	beq.n	8006e66 <f_mkfs+0x6f2>
 8006e62:	2301      	movs	r3, #1
 8006e64:	e0d0      	b.n	8007008 <f_mkfs+0x894>
				mem_set(buf, 0, ss);
 8006e66:	8b7b      	ldrh	r3, [r7, #26]
 8006e68:	461a      	mov	r2, r3
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006e6e:	f7fd fa1a 	bl	80042a6 <mem_set>
				sect += n; nsect -= n;
 8006e72:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006e74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e76:	4413      	add	r3, r2
 8006e78:	667b      	str	r3, [r7, #100]	; 0x64
 8006e7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 8006e82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d1dc      	bne.n	8006e42 <f_mkfs+0x6ce>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8006e88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d3af      	bcc.n	8006df6 <f_mkfs+0x682>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8006e96:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006e9a:	2b03      	cmp	r3, #3
 8006e9c:	d101      	bne.n	8006ea2 <f_mkfs+0x72e>
 8006e9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ea0:	e000      	b.n	8006ea4 <f_mkfs+0x730>
 8006ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ea4:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8006ea6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	bf28      	it	cs
 8006eae:	4613      	movcs	r3, r2
 8006eb0:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8006eb2:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8006eb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006eb8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006eba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006ebc:	f7fd f912 	bl	80040e4 <disk_write>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d00e      	beq.n	8006ee4 <f_mkfs+0x770>
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e09e      	b.n	8007008 <f_mkfs+0x894>
 8006eca:	bf00      	nop
 8006ecc:	08007214 	.word	0x08007214
 8006ed0:	08007220 	.word	0x08007220
 8006ed4:	08007234 	.word	0x08007234
 8006ed8:	41615252 	.word	0x41615252
 8006edc:	61417272 	.word	0x61417272
 8006ee0:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 8006ee4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006ee6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ee8:	4413      	add	r3, r2
 8006eea:	667b      	str	r3, [r7, #100]	; 0x64
 8006eec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006eee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 8006ef4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d1d5      	bne.n	8006ea6 <f_mkfs+0x732>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 8006efa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006efe:	2b03      	cmp	r3, #3
 8006f00:	d103      	bne.n	8006f0a <f_mkfs+0x796>
			sys = 0x0C;		/* FAT32X */
 8006f02:	230c      	movs	r3, #12
 8006f04:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8006f08:	e010      	b.n	8006f2c <f_mkfs+0x7b8>
		} else {
			if (sz_vol >= 0x10000) {
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f10:	d303      	bcc.n	8006f1a <f_mkfs+0x7a6>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8006f12:	2306      	movs	r3, #6
 8006f14:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8006f18:	e008      	b.n	8006f2c <f_mkfs+0x7b8>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8006f1a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006f1e:	2b02      	cmp	r3, #2
 8006f20:	d101      	bne.n	8006f26 <f_mkfs+0x7b2>
 8006f22:	2304      	movs	r3, #4
 8006f24:	e000      	b.n	8006f28 <f_mkfs+0x7b4>
 8006f26:	2301      	movs	r3, #1
 8006f28:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8006f2c:	7afb      	ldrb	r3, [r7, #11]
 8006f2e:	f003 0308 	and.w	r3, r3, #8
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d15b      	bne.n	8006fee <f_mkfs+0x87a>
			mem_set(buf, 0, ss);
 8006f36:	8b7b      	ldrh	r3, [r7, #26]
 8006f38:	461a      	mov	r2, r3
 8006f3a:	2100      	movs	r1, #0
 8006f3c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006f3e:	f7fd f9b2 	bl	80042a6 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8006f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f44:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006f48:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f7fd f942 	bl	80041d6 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8006f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f54:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006f58:	61fb      	str	r3, [r7, #28]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	3301      	adds	r3, #1
 8006f64:	2201      	movs	r2, #1
 8006f66:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	3302      	adds	r3, #2
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	3303      	adds	r3, #3
 8006f74:	2200      	movs	r2, #0
 8006f76:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	3304      	adds	r3, #4
 8006f7c:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8006f80:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8006f82:	693a      	ldr	r2, [r7, #16]
 8006f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f86:	441a      	add	r2, r3
 8006f88:	4b21      	ldr	r3, [pc, #132]	; (8007010 <f_mkfs+0x89c>)
 8006f8a:	fba3 1302 	umull	r1, r3, r3, r2
 8006f8e:	1ad2      	subs	r2, r2, r3
 8006f90:	0852      	lsrs	r2, r2, #1
 8006f92:	4413      	add	r3, r2
 8006f94:	0b5b      	lsrs	r3, r3, #13
 8006f96:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	3305      	adds	r3, #5
 8006f9c:	22fe      	movs	r2, #254	; 0xfe
 8006f9e:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8006fa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fa2:	089b      	lsrs	r3, r3, #2
 8006fa4:	b2da      	uxtb	r2, r3
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	3306      	adds	r3, #6
 8006faa:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8006fae:	b2d2      	uxtb	r2, r2
 8006fb0:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	3307      	adds	r3, #7
 8006fb6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006fb8:	b2d2      	uxtb	r2, r2
 8006fba:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	3308      	adds	r3, #8
 8006fc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7fd f922 	bl	800420c <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	330c      	adds	r3, #12
 8006fcc:	693a      	ldr	r2, [r7, #16]
 8006fce:	4611      	mov	r1, r2
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f7fd f91b 	bl	800420c <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8006fd6:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8006fda:	2301      	movs	r3, #1
 8006fdc:	2200      	movs	r2, #0
 8006fde:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006fe0:	f7fd f880 	bl	80040e4 <disk_write>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d001      	beq.n	8006fee <f_mkfs+0x87a>
 8006fea:	2301      	movs	r3, #1
 8006fec:	e00c      	b.n	8007008 <f_mkfs+0x894>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 8006fee:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	2100      	movs	r1, #0
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7fd f894 	bl	8004124 <disk_ioctl>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d001      	beq.n	8007006 <f_mkfs+0x892>
 8007002:	2301      	movs	r3, #1
 8007004:	e000      	b.n	8007008 <f_mkfs+0x894>

	return FR_OK;
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	3774      	adds	r7, #116	; 0x74
 800700c:	46bd      	mov	sp, r7
 800700e:	bd90      	pop	{r4, r7, pc}
 8007010:	0515565b 	.word	0x0515565b

08007014 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007014:	b480      	push	{r7}
 8007016:	b087      	sub	sp, #28
 8007018:	af00      	add	r7, sp, #0
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	4613      	mov	r3, r2
 8007020:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007022:	2301      	movs	r3, #1
 8007024:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007026:	2300      	movs	r3, #0
 8007028:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800702a:	4b1f      	ldr	r3, [pc, #124]	; (80070a8 <FATFS_LinkDriverEx+0x94>)
 800702c:	7a5b      	ldrb	r3, [r3, #9]
 800702e:	b2db      	uxtb	r3, r3
 8007030:	2b00      	cmp	r3, #0
 8007032:	d131      	bne.n	8007098 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007034:	4b1c      	ldr	r3, [pc, #112]	; (80070a8 <FATFS_LinkDriverEx+0x94>)
 8007036:	7a5b      	ldrb	r3, [r3, #9]
 8007038:	b2db      	uxtb	r3, r3
 800703a:	461a      	mov	r2, r3
 800703c:	4b1a      	ldr	r3, [pc, #104]	; (80070a8 <FATFS_LinkDriverEx+0x94>)
 800703e:	2100      	movs	r1, #0
 8007040:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007042:	4b19      	ldr	r3, [pc, #100]	; (80070a8 <FATFS_LinkDriverEx+0x94>)
 8007044:	7a5b      	ldrb	r3, [r3, #9]
 8007046:	b2db      	uxtb	r3, r3
 8007048:	4a17      	ldr	r2, [pc, #92]	; (80070a8 <FATFS_LinkDriverEx+0x94>)
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	4413      	add	r3, r2
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007052:	4b15      	ldr	r3, [pc, #84]	; (80070a8 <FATFS_LinkDriverEx+0x94>)
 8007054:	7a5b      	ldrb	r3, [r3, #9]
 8007056:	b2db      	uxtb	r3, r3
 8007058:	461a      	mov	r2, r3
 800705a:	4b13      	ldr	r3, [pc, #76]	; (80070a8 <FATFS_LinkDriverEx+0x94>)
 800705c:	4413      	add	r3, r2
 800705e:	79fa      	ldrb	r2, [r7, #7]
 8007060:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007062:	4b11      	ldr	r3, [pc, #68]	; (80070a8 <FATFS_LinkDriverEx+0x94>)
 8007064:	7a5b      	ldrb	r3, [r3, #9]
 8007066:	b2db      	uxtb	r3, r3
 8007068:	1c5a      	adds	r2, r3, #1
 800706a:	b2d1      	uxtb	r1, r2
 800706c:	4a0e      	ldr	r2, [pc, #56]	; (80070a8 <FATFS_LinkDriverEx+0x94>)
 800706e:	7251      	strb	r1, [r2, #9]
 8007070:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007072:	7dbb      	ldrb	r3, [r7, #22]
 8007074:	3330      	adds	r3, #48	; 0x30
 8007076:	b2da      	uxtb	r2, r3
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	3301      	adds	r3, #1
 8007080:	223a      	movs	r2, #58	; 0x3a
 8007082:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	3302      	adds	r3, #2
 8007088:	222f      	movs	r2, #47	; 0x2f
 800708a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	3303      	adds	r3, #3
 8007090:	2200      	movs	r2, #0
 8007092:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007094:	2300      	movs	r3, #0
 8007096:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007098:	7dfb      	ldrb	r3, [r7, #23]
}
 800709a:	4618      	mov	r0, r3
 800709c:	371c      	adds	r7, #28
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	20001050 	.word	0x20001050

080070ac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80070b6:	2200      	movs	r2, #0
 80070b8:	6839      	ldr	r1, [r7, #0]
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f7ff ffaa 	bl	8007014 <FATFS_LinkDriverEx>
 80070c0:	4603      	mov	r3, r0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3708      	adds	r7, #8
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
	...

080070cc <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	460b      	mov	r3, r1
 80070d6:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 80070d8:	2300      	movs	r3, #0
 80070da:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 80070dc:	2301      	movs	r3, #1
 80070de:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 80070e0:	4b15      	ldr	r3, [pc, #84]	; (8007138 <FATFS_UnLinkDriverEx+0x6c>)
 80070e2:	7a5b      	ldrb	r3, [r3, #9]
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d01e      	beq.n	8007128 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	3b30      	subs	r3, #48	; 0x30
 80070f0:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 80070f2:	7bbb      	ldrb	r3, [r7, #14]
 80070f4:	4a10      	ldr	r2, [pc, #64]	; (8007138 <FATFS_UnLinkDriverEx+0x6c>)
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	4413      	add	r3, r2
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d013      	beq.n	8007128 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 8007100:	7bbb      	ldrb	r3, [r7, #14]
 8007102:	4a0d      	ldr	r2, [pc, #52]	; (8007138 <FATFS_UnLinkDriverEx+0x6c>)
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	4413      	add	r3, r2
 8007108:	2200      	movs	r2, #0
 800710a:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 800710c:	7bbb      	ldrb	r3, [r7, #14]
 800710e:	4a0a      	ldr	r2, [pc, #40]	; (8007138 <FATFS_UnLinkDriverEx+0x6c>)
 8007110:	4413      	add	r3, r2
 8007112:	2200      	movs	r2, #0
 8007114:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 8007116:	4b08      	ldr	r3, [pc, #32]	; (8007138 <FATFS_UnLinkDriverEx+0x6c>)
 8007118:	7a5b      	ldrb	r3, [r3, #9]
 800711a:	b2db      	uxtb	r3, r3
 800711c:	3b01      	subs	r3, #1
 800711e:	b2da      	uxtb	r2, r3
 8007120:	4b05      	ldr	r3, [pc, #20]	; (8007138 <FATFS_UnLinkDriverEx+0x6c>)
 8007122:	725a      	strb	r2, [r3, #9]
      ret = 0;
 8007124:	2300      	movs	r3, #0
 8007126:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007128:	7bfb      	ldrb	r3, [r7, #15]
}
 800712a:	4618      	mov	r0, r3
 800712c:	3714      	adds	r7, #20
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	20001050 	.word	0x20001050

0800713c <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 8007144:	2100      	movs	r1, #0
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f7ff ffc0 	bl	80070cc <FATFS_UnLinkDriverEx>
 800714c:	4603      	mov	r3, r0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3708      	adds	r7, #8
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
	...

08007158 <__libc_init_array>:
 8007158:	b570      	push	{r4, r5, r6, lr}
 800715a:	4d0d      	ldr	r5, [pc, #52]	; (8007190 <__libc_init_array+0x38>)
 800715c:	4c0d      	ldr	r4, [pc, #52]	; (8007194 <__libc_init_array+0x3c>)
 800715e:	1b64      	subs	r4, r4, r5
 8007160:	10a4      	asrs	r4, r4, #2
 8007162:	2600      	movs	r6, #0
 8007164:	42a6      	cmp	r6, r4
 8007166:	d109      	bne.n	800717c <__libc_init_array+0x24>
 8007168:	4d0b      	ldr	r5, [pc, #44]	; (8007198 <__libc_init_array+0x40>)
 800716a:	4c0c      	ldr	r4, [pc, #48]	; (800719c <__libc_init_array+0x44>)
 800716c:	f000 f820 	bl	80071b0 <_init>
 8007170:	1b64      	subs	r4, r4, r5
 8007172:	10a4      	asrs	r4, r4, #2
 8007174:	2600      	movs	r6, #0
 8007176:	42a6      	cmp	r6, r4
 8007178:	d105      	bne.n	8007186 <__libc_init_array+0x2e>
 800717a:	bd70      	pop	{r4, r5, r6, pc}
 800717c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007180:	4798      	blx	r3
 8007182:	3601      	adds	r6, #1
 8007184:	e7ee      	b.n	8007164 <__libc_init_array+0xc>
 8007186:	f855 3b04 	ldr.w	r3, [r5], #4
 800718a:	4798      	blx	r3
 800718c:	3601      	adds	r6, #1
 800718e:	e7f2      	b.n	8007176 <__libc_init_array+0x1e>
 8007190:	0800731c 	.word	0x0800731c
 8007194:	0800731c 	.word	0x0800731c
 8007198:	0800731c 	.word	0x0800731c
 800719c:	08007320 	.word	0x08007320

080071a0 <memset>:
 80071a0:	4402      	add	r2, r0
 80071a2:	4603      	mov	r3, r0
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d100      	bne.n	80071aa <memset+0xa>
 80071a8:	4770      	bx	lr
 80071aa:	f803 1b01 	strb.w	r1, [r3], #1
 80071ae:	e7f9      	b.n	80071a4 <memset+0x4>

080071b0 <_init>:
 80071b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071b2:	bf00      	nop
 80071b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071b6:	bc08      	pop	{r3}
 80071b8:	469e      	mov	lr, r3
 80071ba:	4770      	bx	lr

080071bc <_fini>:
 80071bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071be:	bf00      	nop
 80071c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071c2:	bc08      	pop	{r3}
 80071c4:	469e      	mov	lr, r3
 80071c6:	4770      	bx	lr
