
SDcard_SDIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  08008344  08008344  00018344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085d4  080085d4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080085d4  080085d4  000185d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085dc  080085dc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085dc  080085dc  000185dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085e0  080085e0  000185e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080085e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031a8  20000070  08008654  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003218  08008654  00023218  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000165ed  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f42  00000000  00000000  0003668d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e0  00000000  00000000  000395d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f88  00000000  00000000  0003a6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000240e1  00000000  00000000  0003b638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014229  00000000  00000000  0005f719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0987  00000000  00000000  00073942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001442c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004da8  00000000  00000000  0014431c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800832c 	.word	0x0800832c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800832c 	.word	0x0800832c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000570:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000574:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000578:	f003 0301 	and.w	r3, r3, #1
 800057c:	2b00      	cmp	r3, #0
 800057e:	d013      	beq.n	80005a8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000580:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000584:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000588:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800058c:	2b00      	cmp	r3, #0
 800058e:	d00b      	beq.n	80005a8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000590:	e000      	b.n	8000594 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000592:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000594:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d0f9      	beq.n	8000592 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800059e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	b2d2      	uxtb	r2, r2
 80005a6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005a8:	687b      	ldr	r3, [r7, #4]
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr

080005b6 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*-----------------------------for prinf--------------------------------------*/
int _write(int file, uint8_t *ptr, int len) {
 80005b6:	b580      	push	{r7, lr}
 80005b8:	b086      	sub	sp, #24
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	60f8      	str	r0, [r7, #12]
 80005be:	60b9      	str	r1, [r7, #8]
 80005c0:	607a      	str	r2, [r7, #4]
  for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]
 80005c6:	e009      	b.n	80005dc <_write+0x26>
    ITM_SendChar(*ptr++);
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	1c5a      	adds	r2, r3, #1
 80005cc:	60ba      	str	r2, [r7, #8]
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff ffc9 	bl	8000568 <ITM_SendChar>
  for (int DataIdx = 0; DataIdx < len; DataIdx++) {
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	3301      	adds	r3, #1
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	697a      	ldr	r2, [r7, #20]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	dbf1      	blt.n	80005c8 <_write+0x12>
  }
  return len;
 80005e4:	687b      	ldr	r3, [r7, #4]
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3718      	adds	r7, #24
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
	...

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b5b0      	push	{r4, r5, r7, lr}
 80005f2:	f5ad 5d04 	sub.w	sp, sp, #8448	; 0x2100
 80005f6:	b084      	sub	sp, #16
 80005f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f000 fbf7 	bl	8000dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f90b 	bl	8000818 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f000 f993 	bl	800092c <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 8000606:	f000 f971 	bl	80008ec <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800060a:	f003 fce1 	bl	8003fd0 <MX_FATFS_Init>
  char SDPath[4]; /* SD disk logical drive path */
  static uint8_t buffer[_MAX_SS]; /* a work buffer for the f_mkfs() */

  FRESULT res;                                          /* FatFs function common result code */
  uint32_t byteswritten, bytesread;                     /* File write/read counts */
  uint8_t wtext[] = "Hello World, this is STM32 working with FatFs!"; /* File write buffer */
 800060e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000612:	3b24      	subs	r3, #36	; 0x24
 8000614:	4a74      	ldr	r2, [pc, #464]	; (80007e8 <main+0x1f8>)
 8000616:	461c      	mov	r4, r3
 8000618:	4615      	mov	r5, r2
 800061a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000620:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000622:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000626:	c407      	stmia	r4!, {r0, r1, r2}
 8000628:	8023      	strh	r3, [r4, #0]
 800062a:	3402      	adds	r4, #2
 800062c:	0c1b      	lsrs	r3, r3, #16
 800062e:	7023      	strb	r3, [r4, #0]

  /*##-1- Link the SD disk I/O driver ########################################*/
 // if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 // {
    /*##-2- Register the file system object to the FatFs module ##############*/
    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) != FR_OK)
 8000630:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8000634:	392c      	subs	r1, #44	; 0x2c
 8000636:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 800063a:	f103 0308 	add.w	r3, r3, #8
 800063e:	3b18      	subs	r3, #24
 8000640:	2200      	movs	r2, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f005 fc4a 	bl	8005edc <f_mount>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d002      	beq.n	8000654 <main+0x64>
    {
      /* FatFs Initialization Error */
      Error_Handler();
 800064e:	f000 f9d1 	bl	80009f4 <Error_Handler>
 8000652:	e092      	b.n	800077a <main+0x18a>
    else
    {
      /*##-3- Create a FAT file system (format) on the logical drive #########*/

      FRESULT fr;
      fr = f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, buffer, sizeof(buffer));
 8000654:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8000658:	382c      	subs	r0, #44	; 0x2c
 800065a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800065e:	9300      	str	r3, [sp, #0]
 8000660:	4b62      	ldr	r3, [pc, #392]	; (80007ec <main+0x1fc>)
 8000662:	2200      	movs	r2, #0
 8000664:	2107      	movs	r1, #7
 8000666:	f006 f9e7 	bl	8006a38 <f_mkfs>
 800066a:	4603      	mov	r3, r0
 800066c:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8000670:	f102 0207 	add.w	r2, r2, #7
 8000674:	7013      	strb	r3, [r2, #0]
      if (fr != FR_OK)
 8000676:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 800067a:	f103 0307 	add.w	r3, r3, #7
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d002      	beq.n	800068a <main+0x9a>
      {
    	Error_Handler();
 8000684:	f000 f9b6 	bl	80009f4 <Error_Handler>
 8000688:	e077      	b.n	800077a <main+0x18a>
      }
      else
      {
        /*##-4- Create and Open a new text file object with write access #####*/
        if(f_open(&MyFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 800068a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800068e:	3b28      	subs	r3, #40	; 0x28
 8000690:	220a      	movs	r2, #10
 8000692:	4957      	ldr	r1, [pc, #348]	; (80007f0 <main+0x200>)
 8000694:	4618      	mov	r0, r3
 8000696:	f005 fc67 	bl	8005f68 <f_open>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d002      	beq.n	80006a6 <main+0xb6>
        {
          /* 'STM32.TXT' file Open for write Error */
          Error_Handler();
 80006a0:	f000 f9a8 	bl	80009f4 <Error_Handler>
 80006a4:	e069      	b.n	800077a <main+0x18a>
        }
        else
        {
          /*##-5- Write data to the text file ################################*/
          res = f_write(&MyFile, wtext, sizeof(wtext), (void *)&byteswritten);
 80006a6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80006aa:	3b30      	subs	r3, #48	; 0x30
 80006ac:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80006b0:	3924      	subs	r1, #36	; 0x24
 80006b2:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 80006b6:	3828      	subs	r0, #40	; 0x28
 80006b8:	222f      	movs	r2, #47	; 0x2f
 80006ba:	f005 ff80 	bl	80065be <f_write>
 80006be:	4603      	mov	r3, r0
 80006c0:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 80006c4:	f102 0206 	add.w	r2, r2, #6
 80006c8:	7013      	strb	r3, [r2, #0]

          if((byteswritten == 0) || (res != FR_OK))
 80006ca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80006ce:	3b30      	subs	r3, #48	; 0x30
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d006      	beq.n	80006e4 <main+0xf4>
 80006d6:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80006da:	f103 0306 	add.w	r3, r3, #6
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d002      	beq.n	80006ea <main+0xfa>
          {
            /* 'STM32.TXT' file Write or EOF Error */
            Error_Handler();
 80006e4:	f000 f986 	bl	80009f4 <Error_Handler>
 80006e8:	e047      	b.n	800077a <main+0x18a>
          }
          else
          {
            /*##-6- Close the open text file #################################*/
            f_close(&MyFile);
 80006ea:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80006ee:	3b28      	subs	r3, #40	; 0x28
 80006f0:	4618      	mov	r0, r3
 80006f2:	f006 f976 	bl	80069e2 <f_close>

            /*##-7- Open the text file object with read access ###############*/
            if(f_open(&MyFile, "STM32.TXT", FA_READ) != FR_OK)
 80006f6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80006fa:	3b28      	subs	r3, #40	; 0x28
 80006fc:	2201      	movs	r2, #1
 80006fe:	493c      	ldr	r1, [pc, #240]	; (80007f0 <main+0x200>)
 8000700:	4618      	mov	r0, r3
 8000702:	f005 fc31 	bl	8005f68 <f_open>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d002      	beq.n	8000712 <main+0x122>
            {
              /* 'STM32.TXT' file Open for read Error */
              Error_Handler();
 800070c:	f000 f972 	bl	80009f4 <Error_Handler>
 8000710:	e033      	b.n	800077a <main+0x18a>
            }
            else
            {
              /*##-8- Read data from the text file ###########################*/
              res = f_read(&MyFile, rtext, sizeof(rtext), (UINT*)&bytesread);
 8000712:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000716:	3b34      	subs	r3, #52	; 0x34
 8000718:	f107 0108 	add.w	r1, r7, #8
 800071c:	3908      	subs	r1, #8
 800071e:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8000722:	3828      	subs	r0, #40	; 0x28
 8000724:	2264      	movs	r2, #100	; 0x64
 8000726:	f005 fdeb 	bl	8006300 <f_read>
 800072a:	4603      	mov	r3, r0
 800072c:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8000730:	f102 0206 	add.w	r2, r2, #6
 8000734:	7013      	strb	r3, [r2, #0]

              if((bytesread == 0) || (res != FR_OK)) /* EOF or Error */
 8000736:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800073a:	3b34      	subs	r3, #52	; 0x34
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d006      	beq.n	8000750 <main+0x160>
 8000742:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8000746:	f103 0306 	add.w	r3, r3, #6
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d002      	beq.n	8000756 <main+0x166>
              {
                /* 'STM32.TXT' file Read or EOF Error */
                Error_Handler();
 8000750:	f000 f950 	bl	80009f4 <Error_Handler>
 8000754:	e011      	b.n	800077a <main+0x18a>
              }
              else
              {
                /*##-9- Close the open text file #############################*/
                f_close(&MyFile);
 8000756:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800075a:	3b28      	subs	r3, #40	; 0x28
 800075c:	4618      	mov	r0, r3
 800075e:	f006 f940 	bl	80069e2 <f_close>

                /*##-10- Compare read data with the expected data ############*/
                if ((bytesread != byteswritten))
 8000762:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000766:	3b34      	subs	r3, #52	; 0x34
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800076e:	3b30      	subs	r3, #48	; 0x30
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	429a      	cmp	r2, r3
 8000774:	d001      	beq.n	800077a <main+0x18a>
                {
                  /* Read data is different from the expected data */
                  Error_Handler();
 8000776:	f000 f93d 	bl	80009f4 <Error_Handler>
        }
      }
    }
 // }
    /*##-11- Unlink the SD disk I/O driver ####################################*/
    FATFS_UnLinkDriver(SDPath);
 800077a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800077e:	3b2c      	subs	r3, #44	; 0x2c
 8000780:	4618      	mov	r0, r3
 8000782:	f006 fe3d 	bl	8007400 <FATFS_UnLinkDriver>


	printf( "CardType is : %d\r\n", hsd.SdCard.CardType);         // CardType is : 0
 8000786:	4b1b      	ldr	r3, [pc, #108]	; (80007f4 <main+0x204>)
 8000788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078a:	4619      	mov	r1, r3
 800078c:	481a      	ldr	r0, [pc, #104]	; (80007f8 <main+0x208>)
 800078e:	f006 fe77 	bl	8007480 <iprintf>
	printf( "CardCapacity is : %d\r\n", hsd.SdCard.BlockNbr);     // CardCapacity is : 1961984
 8000792:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <main+0x204>)
 8000794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000796:	4619      	mov	r1, r3
 8000798:	4818      	ldr	r0, [pc, #96]	; (80007fc <main+0x20c>)
 800079a:	f006 fe71 	bl	8007480 <iprintf>
	printf( "CardBlockSize is : %d\r\n", hsd.SdCard.BlockSize);   // CardBlockSize is : 512
 800079e:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <main+0x204>)
 80007a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007a2:	4619      	mov	r1, r3
 80007a4:	4816      	ldr	r0, [pc, #88]	; (8000800 <main+0x210>)
 80007a6:	f006 fe6b 	bl	8007480 <iprintf>
	printf( "RCA is : %d\r\n", hsd.SdCard.RelCardAdd);            // RCA is : 45928
 80007aa:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <main+0x204>)
 80007ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80007ae:	4619      	mov	r1, r3
 80007b0:	4814      	ldr	r0, [pc, #80]	; (8000804 <main+0x214>)
 80007b2:	f006 fe65 	bl	8007480 <iprintf>
	printf( "CardVersion is : %d\r\n", hsd.SdCard.CardVersion);   // CardVersion is : 1
 80007b6:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <main+0x204>)
 80007b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007ba:	4619      	mov	r1, r3
 80007bc:	4812      	ldr	r0, [pc, #72]	; (8000808 <main+0x218>)
 80007be:	f006 fe5f 	bl	8007480 <iprintf>
	printf( "Class is : %d\r\n", hsd.SdCard.Class);               // Class is : 1525
 80007c2:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <main+0x204>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	4619      	mov	r1, r3
 80007c8:	4810      	ldr	r0, [pc, #64]	; (800080c <main+0x21c>)
 80007ca:	f006 fe59 	bl	8007480 <iprintf>
	printf( "LogBlockNbr is : %d\r\n", hsd.SdCard.LogBlockNbr);   // LogBlockNbr is : 1961984
 80007ce:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <main+0x204>)
 80007d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80007d2:	4619      	mov	r1, r3
 80007d4:	480e      	ldr	r0, [pc, #56]	; (8000810 <main+0x220>)
 80007d6:	f006 fe53 	bl	8007480 <iprintf>
	printf( "LogBlockSize is : %d\r\n", hsd.SdCard.LogBlockSize); // LogBlockSize is : 512
 80007da:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <main+0x204>)
 80007dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007de:	4619      	mov	r1, r3
 80007e0:	480c      	ldr	r0, [pc, #48]	; (8000814 <main+0x224>)
 80007e2:	f006 fe4d 	bl	8007480 <iprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007e6:	e7fe      	b.n	80007e6 <main+0x1f6>
 80007e8:	080083fc 	.word	0x080083fc
 80007ec:	2000008c 	.word	0x2000008c
 80007f0:	08008344 	.word	0x08008344
 80007f4:	200010cc 	.word	0x200010cc
 80007f8:	08008350 	.word	0x08008350
 80007fc:	08008364 	.word	0x08008364
 8000800:	0800837c 	.word	0x0800837c
 8000804:	08008394 	.word	0x08008394
 8000808:	080083a4 	.word	0x080083a4
 800080c:	080083bc 	.word	0x080083bc
 8000810:	080083cc 	.word	0x080083cc
 8000814:	080083e4 	.word	0x080083e4

08000818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b094      	sub	sp, #80	; 0x50
 800081c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081e:	f107 0320 	add.w	r3, r7, #32
 8000822:	2230      	movs	r2, #48	; 0x30
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f006 fe22 	bl	8007470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800082c:	f107 030c 	add.w	r3, r7, #12
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800083c:	2300      	movs	r3, #0
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	4b28      	ldr	r3, [pc, #160]	; (80008e4 <SystemClock_Config+0xcc>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000844:	4a27      	ldr	r2, [pc, #156]	; (80008e4 <SystemClock_Config+0xcc>)
 8000846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084a:	6413      	str	r3, [r2, #64]	; 0x40
 800084c:	4b25      	ldr	r3, [pc, #148]	; (80008e4 <SystemClock_Config+0xcc>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000858:	2300      	movs	r3, #0
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	4b22      	ldr	r3, [pc, #136]	; (80008e8 <SystemClock_Config+0xd0>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a21      	ldr	r2, [pc, #132]	; (80008e8 <SystemClock_Config+0xd0>)
 8000862:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000866:	6013      	str	r3, [r2, #0]
 8000868:	4b1f      	ldr	r3, [pc, #124]	; (80008e8 <SystemClock_Config+0xd0>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000874:	2302      	movs	r3, #2
 8000876:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000878:	2301      	movs	r3, #1
 800087a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800087c:	2310      	movs	r3, #16
 800087e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000880:	2302      	movs	r3, #2
 8000882:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000884:	2300      	movs	r3, #0
 8000886:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000888:	2308      	movs	r3, #8
 800088a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800088c:	23a8      	movs	r3, #168	; 0xa8
 800088e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000890:	2302      	movs	r3, #2
 8000892:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000894:	2307      	movs	r3, #7
 8000896:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000898:	f107 0320 	add.w	r3, r7, #32
 800089c:	4618      	mov	r0, r3
 800089e:	f000 fd89 	bl	80013b4 <HAL_RCC_OscConfig>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008a8:	f000 f8a4 	bl	80009f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ac:	230f      	movs	r3, #15
 80008ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b0:	2302      	movs	r3, #2
 80008b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	2105      	movs	r1, #5
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 ffea 	bl	80018a4 <HAL_RCC_ClockConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008d6:	f000 f88d 	bl	80009f4 <Error_Handler>
  }
}
 80008da:	bf00      	nop
 80008dc:	3750      	adds	r7, #80	; 0x50
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40007000 	.word	0x40007000

080008ec <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_SDIO_SD_Init+0x38>)
 80008f2:	4a0d      	ldr	r2, [pc, #52]	; (8000928 <MX_SDIO_SD_Init+0x3c>)
 80008f4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <MX_SDIO_SD_Init+0x38>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80008fc:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_SDIO_SD_Init+0x38>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <MX_SDIO_SD_Init+0x38>)
 8000904:	2200      	movs	r2, #0
 8000906:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_SDIO_SD_Init+0x38>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800090e:	4b05      	ldr	r3, [pc, #20]	; (8000924 <MX_SDIO_SD_Init+0x38>)
 8000910:	2200      	movs	r2, #0
 8000912:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 5;
 8000914:	4b03      	ldr	r3, [pc, #12]	; (8000924 <MX_SDIO_SD_Init+0x38>)
 8000916:	2205      	movs	r2, #5
 8000918:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	200010cc 	.word	0x200010cc
 8000928:	40012c00 	.word	0x40012c00

0800092c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800092c:	b480      	push	{r7}
 800092e:	b087      	sub	sp, #28
 8000930:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	617b      	str	r3, [r7, #20]
 8000936:	4b25      	ldr	r3, [pc, #148]	; (80009cc <MX_GPIO_Init+0xa0>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a24      	ldr	r2, [pc, #144]	; (80009cc <MX_GPIO_Init+0xa0>)
 800093c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b22      	ldr	r3, [pc, #136]	; (80009cc <MX_GPIO_Init+0xa0>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800094a:	617b      	str	r3, [r7, #20]
 800094c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	613b      	str	r3, [r7, #16]
 8000952:	4b1e      	ldr	r3, [pc, #120]	; (80009cc <MX_GPIO_Init+0xa0>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a1d      	ldr	r2, [pc, #116]	; (80009cc <MX_GPIO_Init+0xa0>)
 8000958:	f043 0304 	orr.w	r3, r3, #4
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b1b      	ldr	r3, [pc, #108]	; (80009cc <MX_GPIO_Init+0xa0>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0304 	and.w	r3, r3, #4
 8000966:	613b      	str	r3, [r7, #16]
 8000968:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	4b17      	ldr	r3, [pc, #92]	; (80009cc <MX_GPIO_Init+0xa0>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a16      	ldr	r2, [pc, #88]	; (80009cc <MX_GPIO_Init+0xa0>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b14      	ldr	r3, [pc, #80]	; (80009cc <MX_GPIO_Init+0xa0>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	60bb      	str	r3, [r7, #8]
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <MX_GPIO_Init+0xa0>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a0f      	ldr	r2, [pc, #60]	; (80009cc <MX_GPIO_Init+0xa0>)
 8000990:	f043 0308 	orr.w	r3, r3, #8
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <MX_GPIO_Init+0xa0>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0308 	and.w	r3, r3, #8
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_GPIO_Init+0xa0>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a08      	ldr	r2, [pc, #32]	; (80009cc <MX_GPIO_Init+0xa0>)
 80009ac:	f043 0302 	orr.w	r3, r3, #2
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b06      	ldr	r3, [pc, #24]	; (80009cc <MX_GPIO_Init+0xa0>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0302 	and.w	r3, r3, #2
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]

}
 80009be:	bf00      	nop
 80009c0:	371c      	adds	r7, #28
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40023800 	.word	0x40023800

080009d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a04      	ldr	r2, [pc, #16]	; (80009f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d101      	bne.n	80009e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009e2:	f000 fa25 	bl	8000e30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40002000 	.word	0x40002000

080009f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f8:	b672      	cpsid	i
}
 80009fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009fc:	e7fe      	b.n	80009fc <Error_Handler+0x8>
	...

08000a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	607b      	str	r3, [r7, #4]
 8000a0a:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0e:	4a0f      	ldr	r2, [pc, #60]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a14:	6453      	str	r3, [r2, #68]	; 0x44
 8000a16:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	603b      	str	r3, [r7, #0]
 8000a26:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2a:	4a08      	ldr	r2, [pc, #32]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a30:	6413      	str	r3, [r2, #64]	; 0x40
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_MspInit+0x4c>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800

08000a50 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	; 0x28
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a31      	ldr	r2, [pc, #196]	; (8000b34 <HAL_SD_MspInit+0xe4>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d15b      	bne.n	8000b2a <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	613b      	str	r3, [r7, #16]
 8000a76:	4b30      	ldr	r3, [pc, #192]	; (8000b38 <HAL_SD_MspInit+0xe8>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7a:	4a2f      	ldr	r2, [pc, #188]	; (8000b38 <HAL_SD_MspInit+0xe8>)
 8000a7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a80:	6453      	str	r3, [r2, #68]	; 0x44
 8000a82:	4b2d      	ldr	r3, [pc, #180]	; (8000b38 <HAL_SD_MspInit+0xe8>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	4b29      	ldr	r3, [pc, #164]	; (8000b38 <HAL_SD_MspInit+0xe8>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a28      	ldr	r2, [pc, #160]	; (8000b38 <HAL_SD_MspInit+0xe8>)
 8000a98:	f043 0304 	orr.w	r3, r3, #4
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b26      	ldr	r3, [pc, #152]	; (8000b38 <HAL_SD_MspInit+0xe8>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0304 	and.w	r3, r3, #4
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	4b22      	ldr	r3, [pc, #136]	; (8000b38 <HAL_SD_MspInit+0xe8>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a21      	ldr	r2, [pc, #132]	; (8000b38 <HAL_SD_MspInit+0xe8>)
 8000ab4:	f043 0308 	orr.w	r3, r3, #8
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b1f      	ldr	r3, [pc, #124]	; (8000b38 <HAL_SD_MspInit+0xe8>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0308 	and.w	r3, r3, #8
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000ac6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	2302      	movs	r3, #2
 8000ace:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000ad8:	230c      	movs	r3, #12
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4816      	ldr	r0, [pc, #88]	; (8000b3c <HAL_SD_MspInit+0xec>)
 8000ae4:	f000 faca 	bl	800107c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ae8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	2302      	movs	r3, #2
 8000af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af6:	2303      	movs	r3, #3
 8000af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000afa:	230c      	movs	r3, #12
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4619      	mov	r1, r3
 8000b04:	480d      	ldr	r0, [pc, #52]	; (8000b3c <HAL_SD_MspInit+0xec>)
 8000b06:	f000 fab9 	bl	800107c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b0a:	2304      	movs	r3, #4
 8000b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b12:	2301      	movs	r3, #1
 8000b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b16:	2303      	movs	r3, #3
 8000b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000b1a:	230c      	movs	r3, #12
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	4619      	mov	r1, r3
 8000b24:	4806      	ldr	r0, [pc, #24]	; (8000b40 <HAL_SD_MspInit+0xf0>)
 8000b26:	f000 faa9 	bl	800107c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000b2a:	bf00      	nop
 8000b2c:	3728      	adds	r7, #40	; 0x28
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40012c00 	.word	0x40012c00
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40020800 	.word	0x40020800
 8000b40:	40020c00 	.word	0x40020c00

08000b44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08c      	sub	sp, #48	; 0x30
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8000b54:	2200      	movs	r2, #0
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	202d      	movs	r0, #45	; 0x2d
 8000b5a:	f000 fa65 	bl	8001028 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000b5e:	202d      	movs	r0, #45	; 0x2d
 8000b60:	f000 fa7e 	bl	8001060 <HAL_NVIC_EnableIRQ>
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000b64:	2300      	movs	r3, #0
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	4b1f      	ldr	r3, [pc, #124]	; (8000be8 <HAL_InitTick+0xa4>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	4a1e      	ldr	r2, [pc, #120]	; (8000be8 <HAL_InitTick+0xa4>)
 8000b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b72:	6413      	str	r3, [r2, #64]	; 0x40
 8000b74:	4b1c      	ldr	r3, [pc, #112]	; (8000be8 <HAL_InitTick+0xa4>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b80:	f107 0210 	add.w	r2, r7, #16
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4611      	mov	r1, r2
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f001 f846 	bl	8001c1c <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b90:	f001 f830 	bl	8001bf4 <HAL_RCC_GetPCLK1Freq>
 8000b94:	4603      	mov	r3, r0
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b9c:	4a13      	ldr	r2, [pc, #76]	; (8000bec <HAL_InitTick+0xa8>)
 8000b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba2:	0c9b      	lsrs	r3, r3, #18
 8000ba4:	3b01      	subs	r3, #1
 8000ba6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <HAL_InitTick+0xac>)
 8000baa:	4a12      	ldr	r2, [pc, #72]	; (8000bf4 <HAL_InitTick+0xb0>)
 8000bac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <HAL_InitTick+0xac>)
 8000bb0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bb4:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000bb6:	4a0e      	ldr	r2, [pc, #56]	; (8000bf0 <HAL_InitTick+0xac>)
 8000bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bba:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <HAL_InitTick+0xac>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <HAL_InitTick+0xac>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8000bc8:	4809      	ldr	r0, [pc, #36]	; (8000bf0 <HAL_InitTick+0xac>)
 8000bca:	f002 f9e0 	bl	8002f8e <HAL_TIM_Base_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d104      	bne.n	8000bde <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8000bd4:	4806      	ldr	r0, [pc, #24]	; (8000bf0 <HAL_InitTick+0xac>)
 8000bd6:	f002 fa33 	bl	8003040 <HAL_TIM_Base_Start_IT>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	e000      	b.n	8000be0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3730      	adds	r7, #48	; 0x30
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40023800 	.word	0x40023800
 8000bec:	431bde83 	.word	0x431bde83
 8000bf0:	20001150 	.word	0x20001150
 8000bf4:	40002000 	.word	0x40002000

08000bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <NMI_Handler+0x4>

08000bfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <HardFault_Handler+0x4>

08000c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <MemManage_Handler+0x4>

08000c0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <BusFault_Handler+0x4>

08000c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <UsageFault_Handler+0x4>

08000c16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
	...

08000c50 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000c54:	4802      	ldr	r0, [pc, #8]	; (8000c60 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000c56:	f002 fa63 	bl	8003120 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20001150 	.word	0x20001150

08000c64 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
 8000c74:	e00a      	b.n	8000c8c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c76:	f3af 8000 	nop.w
 8000c7a:	4601      	mov	r1, r0
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	1c5a      	adds	r2, r3, #1
 8000c80:	60ba      	str	r2, [r7, #8]
 8000c82:	b2ca      	uxtb	r2, r1
 8000c84:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	617b      	str	r3, [r7, #20]
 8000c8c:	697a      	ldr	r2, [r7, #20]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	dbf0      	blt.n	8000c76 <_read+0x12>
	}

return len;
 8000c94:	687b      	ldr	r3, [r7, #4]
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3718      	adds	r7, #24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <_close>:
	}
	return len;
}

int _close(int file)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
	return -1;
 8000ca6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	b083      	sub	sp, #12
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
 8000cbe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cc6:	605a      	str	r2, [r3, #4]
	return 0;
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <_isatty>:

int _isatty(int file)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	b083      	sub	sp, #12
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
	return 1;
 8000cde:	2301      	movs	r3, #1
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
	return 0;
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3714      	adds	r7, #20
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
	...

08000d08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d10:	4a14      	ldr	r2, [pc, #80]	; (8000d64 <_sbrk+0x5c>)
 8000d12:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <_sbrk+0x60>)
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d1c:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <_sbrk+0x64>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d102      	bne.n	8000d2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d24:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <_sbrk+0x64>)
 8000d26:	4a12      	ldr	r2, [pc, #72]	; (8000d70 <_sbrk+0x68>)
 8000d28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d2a:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <_sbrk+0x64>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4413      	add	r3, r2
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d207      	bcs.n	8000d48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d38:	f006 fb70 	bl	800741c <__errno>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	220c      	movs	r2, #12
 8000d40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d46:	e009      	b.n	8000d5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d48:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <_sbrk+0x64>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d4e:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <_sbrk+0x64>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4413      	add	r3, r2
 8000d56:	4a05      	ldr	r2, [pc, #20]	; (8000d6c <_sbrk+0x64>)
 8000d58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3718      	adds	r7, #24
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20020000 	.word	0x20020000
 8000d68:	00000400 	.word	0x00000400
 8000d6c:	2000108c 	.word	0x2000108c
 8000d70:	20003218 	.word	0x20003218

08000d74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <SystemInit+0x20>)
 8000d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d7e:	4a05      	ldr	r2, [pc, #20]	; (8000d94 <SystemInit+0x20>)
 8000d80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d9c:	480d      	ldr	r0, [pc, #52]	; (8000dd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d9e:	490e      	ldr	r1, [pc, #56]	; (8000dd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000da0:	4a0e      	ldr	r2, [pc, #56]	; (8000ddc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da4:	e002      	b.n	8000dac <LoopCopyDataInit>

08000da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000daa:	3304      	adds	r3, #4

08000dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db0:	d3f9      	bcc.n	8000da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db2:	4a0b      	ldr	r2, [pc, #44]	; (8000de0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000db4:	4c0b      	ldr	r4, [pc, #44]	; (8000de4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db8:	e001      	b.n	8000dbe <LoopFillZerobss>

08000dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dbc:	3204      	adds	r2, #4

08000dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc0:	d3fb      	bcc.n	8000dba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dc2:	f7ff ffd7 	bl	8000d74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dc6:	f006 fb2f 	bl	8007428 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dca:	f7ff fc11 	bl	80005f0 <main>
  bx  lr    
 8000dce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ddc:	080085e4 	.word	0x080085e4
  ldr r2, =_sbss
 8000de0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000de4:	20003218 	.word	0x20003218

08000de8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de8:	e7fe      	b.n	8000de8 <ADC_IRQHandler>
	...

08000dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000df0:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <HAL_Init+0x40>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a0d      	ldr	r2, [pc, #52]	; (8000e2c <HAL_Init+0x40>)
 8000df6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dfc:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <HAL_Init+0x40>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <HAL_Init+0x40>)
 8000e02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <HAL_Init+0x40>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a07      	ldr	r2, [pc, #28]	; (8000e2c <HAL_Init+0x40>)
 8000e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e14:	2003      	movs	r0, #3
 8000e16:	f000 f8fc 	bl	8001012 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f7ff fe92 	bl	8000b44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e20:	f7ff fdee 	bl	8000a00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40023c00 	.word	0x40023c00

08000e30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <HAL_IncTick+0x20>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_IncTick+0x24>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4413      	add	r3, r2
 8000e40:	4a04      	ldr	r2, [pc, #16]	; (8000e54 <HAL_IncTick+0x24>)
 8000e42:	6013      	str	r3, [r2, #0]
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	20000008 	.word	0x20000008
 8000e54:	20001198 	.word	0x20001198

08000e58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e5c:	4b03      	ldr	r3, [pc, #12]	; (8000e6c <HAL_GetTick+0x14>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	20001198 	.word	0x20001198

08000e70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e78:	f7ff ffee 	bl	8000e58 <HAL_GetTick>
 8000e7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e88:	d005      	beq.n	8000e96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <HAL_Delay+0x44>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	4413      	add	r3, r2
 8000e94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e96:	bf00      	nop
 8000e98:	f7ff ffde 	bl	8000e58 <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d8f7      	bhi.n	8000e98 <HAL_Delay+0x28>
  {
  }
}
 8000ea8:	bf00      	nop
 8000eaa:	bf00      	nop
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000008 	.word	0x20000008

08000eb8 <__NVIC_SetPriorityGrouping>:
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <__NVIC_SetPriorityGrouping+0x44>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ece:	68ba      	ldr	r2, [r7, #8]
 8000ed0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ee4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eea:	4a04      	ldr	r2, [pc, #16]	; (8000efc <__NVIC_SetPriorityGrouping+0x44>)
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	60d3      	str	r3, [r2, #12]
}
 8000ef0:	bf00      	nop
 8000ef2:	3714      	adds	r7, #20
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <__NVIC_GetPriorityGrouping>:
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f04:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <__NVIC_GetPriorityGrouping+0x18>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	0a1b      	lsrs	r3, r3, #8
 8000f0a:	f003 0307 	and.w	r3, r3, #7
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <__NVIC_EnableIRQ>:
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	db0b      	blt.n	8000f46 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	f003 021f 	and.w	r2, r3, #31
 8000f34:	4907      	ldr	r1, [pc, #28]	; (8000f54 <__NVIC_EnableIRQ+0x38>)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	095b      	lsrs	r3, r3, #5
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000e100 	.word	0xe000e100

08000f58 <__NVIC_SetPriority>:
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	6039      	str	r1, [r7, #0]
 8000f62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	db0a      	blt.n	8000f82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	490c      	ldr	r1, [pc, #48]	; (8000fa4 <__NVIC_SetPriority+0x4c>)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	0112      	lsls	r2, r2, #4
 8000f78:	b2d2      	uxtb	r2, r2
 8000f7a:	440b      	add	r3, r1
 8000f7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f80:	e00a      	b.n	8000f98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	4908      	ldr	r1, [pc, #32]	; (8000fa8 <__NVIC_SetPriority+0x50>)
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	f003 030f 	and.w	r3, r3, #15
 8000f8e:	3b04      	subs	r3, #4
 8000f90:	0112      	lsls	r2, r2, #4
 8000f92:	b2d2      	uxtb	r2, r2
 8000f94:	440b      	add	r3, r1
 8000f96:	761a      	strb	r2, [r3, #24]
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000e100 	.word	0xe000e100
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <NVIC_EncodePriority>:
{
 8000fac:	b480      	push	{r7}
 8000fae:	b089      	sub	sp, #36	; 0x24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	f1c3 0307 	rsb	r3, r3, #7
 8000fc6:	2b04      	cmp	r3, #4
 8000fc8:	bf28      	it	cs
 8000fca:	2304      	movcs	r3, #4
 8000fcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	2b06      	cmp	r3, #6
 8000fd4:	d902      	bls.n	8000fdc <NVIC_EncodePriority+0x30>
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3b03      	subs	r3, #3
 8000fda:	e000      	b.n	8000fde <NVIC_EncodePriority+0x32>
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43da      	mvns	r2, r3
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	401a      	ands	r2, r3
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffe:	43d9      	mvns	r1, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	4313      	orrs	r3, r2
}
 8001006:	4618      	mov	r0, r3
 8001008:	3724      	adds	r7, #36	; 0x24
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff ff4c 	bl	8000eb8 <__NVIC_SetPriorityGrouping>
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800103a:	f7ff ff61 	bl	8000f00 <__NVIC_GetPriorityGrouping>
 800103e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	68b9      	ldr	r1, [r7, #8]
 8001044:	6978      	ldr	r0, [r7, #20]
 8001046:	f7ff ffb1 	bl	8000fac <NVIC_EncodePriority>
 800104a:	4602      	mov	r2, r0
 800104c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001050:	4611      	mov	r1, r2
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff ff80 	bl	8000f58 <__NVIC_SetPriority>
}
 8001058:	bf00      	nop
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff ff54 	bl	8000f1c <__NVIC_EnableIRQ>
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800107c:	b480      	push	{r7}
 800107e:	b089      	sub	sp, #36	; 0x24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800108e:	2300      	movs	r3, #0
 8001090:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
 8001096:	e16b      	b.n	8001370 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001098:	2201      	movs	r2, #1
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	697a      	ldr	r2, [r7, #20]
 80010a8:	4013      	ands	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	f040 815a 	bne.w	800136a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f003 0303 	and.w	r3, r3, #3
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d005      	beq.n	80010ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d130      	bne.n	8001130 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	2203      	movs	r2, #3
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43db      	mvns	r3, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4013      	ands	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	68da      	ldr	r2, [r3, #12]
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001104:	2201      	movs	r2, #1
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	091b      	lsrs	r3, r3, #4
 800111a:	f003 0201 	and.w	r2, r3, #1
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f003 0303 	and.w	r3, r3, #3
 8001138:	2b03      	cmp	r3, #3
 800113a:	d017      	beq.n	800116c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	2203      	movs	r2, #3
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	689a      	ldr	r2, [r3, #8]
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d123      	bne.n	80011c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	08da      	lsrs	r2, r3, #3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3208      	adds	r2, #8
 8001180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001184:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	f003 0307 	and.w	r3, r3, #7
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	220f      	movs	r2, #15
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	691a      	ldr	r2, [r3, #16]
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	08da      	lsrs	r2, r3, #3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3208      	adds	r2, #8
 80011ba:	69b9      	ldr	r1, [r7, #24]
 80011bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	2203      	movs	r2, #3
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0203 	and.w	r2, r3, #3
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	f000 80b4 	beq.w	800136a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	4b60      	ldr	r3, [pc, #384]	; (8001388 <HAL_GPIO_Init+0x30c>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	4a5f      	ldr	r2, [pc, #380]	; (8001388 <HAL_GPIO_Init+0x30c>)
 800120c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001210:	6453      	str	r3, [r2, #68]	; 0x44
 8001212:	4b5d      	ldr	r3, [pc, #372]	; (8001388 <HAL_GPIO_Init+0x30c>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800121e:	4a5b      	ldr	r2, [pc, #364]	; (800138c <HAL_GPIO_Init+0x310>)
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	089b      	lsrs	r3, r3, #2
 8001224:	3302      	adds	r3, #2
 8001226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f003 0303 	and.w	r3, r3, #3
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	220f      	movs	r2, #15
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a52      	ldr	r2, [pc, #328]	; (8001390 <HAL_GPIO_Init+0x314>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d02b      	beq.n	80012a2 <HAL_GPIO_Init+0x226>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a51      	ldr	r2, [pc, #324]	; (8001394 <HAL_GPIO_Init+0x318>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d025      	beq.n	800129e <HAL_GPIO_Init+0x222>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a50      	ldr	r2, [pc, #320]	; (8001398 <HAL_GPIO_Init+0x31c>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d01f      	beq.n	800129a <HAL_GPIO_Init+0x21e>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a4f      	ldr	r2, [pc, #316]	; (800139c <HAL_GPIO_Init+0x320>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d019      	beq.n	8001296 <HAL_GPIO_Init+0x21a>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a4e      	ldr	r2, [pc, #312]	; (80013a0 <HAL_GPIO_Init+0x324>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d013      	beq.n	8001292 <HAL_GPIO_Init+0x216>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a4d      	ldr	r2, [pc, #308]	; (80013a4 <HAL_GPIO_Init+0x328>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d00d      	beq.n	800128e <HAL_GPIO_Init+0x212>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a4c      	ldr	r2, [pc, #304]	; (80013a8 <HAL_GPIO_Init+0x32c>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d007      	beq.n	800128a <HAL_GPIO_Init+0x20e>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a4b      	ldr	r2, [pc, #300]	; (80013ac <HAL_GPIO_Init+0x330>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d101      	bne.n	8001286 <HAL_GPIO_Init+0x20a>
 8001282:	2307      	movs	r3, #7
 8001284:	e00e      	b.n	80012a4 <HAL_GPIO_Init+0x228>
 8001286:	2308      	movs	r3, #8
 8001288:	e00c      	b.n	80012a4 <HAL_GPIO_Init+0x228>
 800128a:	2306      	movs	r3, #6
 800128c:	e00a      	b.n	80012a4 <HAL_GPIO_Init+0x228>
 800128e:	2305      	movs	r3, #5
 8001290:	e008      	b.n	80012a4 <HAL_GPIO_Init+0x228>
 8001292:	2304      	movs	r3, #4
 8001294:	e006      	b.n	80012a4 <HAL_GPIO_Init+0x228>
 8001296:	2303      	movs	r3, #3
 8001298:	e004      	b.n	80012a4 <HAL_GPIO_Init+0x228>
 800129a:	2302      	movs	r3, #2
 800129c:	e002      	b.n	80012a4 <HAL_GPIO_Init+0x228>
 800129e:	2301      	movs	r3, #1
 80012a0:	e000      	b.n	80012a4 <HAL_GPIO_Init+0x228>
 80012a2:	2300      	movs	r3, #0
 80012a4:	69fa      	ldr	r2, [r7, #28]
 80012a6:	f002 0203 	and.w	r2, r2, #3
 80012aa:	0092      	lsls	r2, r2, #2
 80012ac:	4093      	lsls	r3, r2
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012b4:	4935      	ldr	r1, [pc, #212]	; (800138c <HAL_GPIO_Init+0x310>)
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	089b      	lsrs	r3, r3, #2
 80012ba:	3302      	adds	r3, #2
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012c2:	4b3b      	ldr	r3, [pc, #236]	; (80013b0 <HAL_GPIO_Init+0x334>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	43db      	mvns	r3, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4013      	ands	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012e6:	4a32      	ldr	r2, [pc, #200]	; (80013b0 <HAL_GPIO_Init+0x334>)
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012ec:	4b30      	ldr	r3, [pc, #192]	; (80013b0 <HAL_GPIO_Init+0x334>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	43db      	mvns	r3, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4013      	ands	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d003      	beq.n	8001310 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	4313      	orrs	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001310:	4a27      	ldr	r2, [pc, #156]	; (80013b0 <HAL_GPIO_Init+0x334>)
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001316:	4b26      	ldr	r3, [pc, #152]	; (80013b0 <HAL_GPIO_Init+0x334>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	43db      	mvns	r3, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4013      	ands	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d003      	beq.n	800133a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800133a:	4a1d      	ldr	r2, [pc, #116]	; (80013b0 <HAL_GPIO_Init+0x334>)
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001340:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <HAL_GPIO_Init+0x334>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d003      	beq.n	8001364 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001364:	4a12      	ldr	r2, [pc, #72]	; (80013b0 <HAL_GPIO_Init+0x334>)
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	3301      	adds	r3, #1
 800136e:	61fb      	str	r3, [r7, #28]
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	2b0f      	cmp	r3, #15
 8001374:	f67f ae90 	bls.w	8001098 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001378:	bf00      	nop
 800137a:	bf00      	nop
 800137c:	3724      	adds	r7, #36	; 0x24
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	40023800 	.word	0x40023800
 800138c:	40013800 	.word	0x40013800
 8001390:	40020000 	.word	0x40020000
 8001394:	40020400 	.word	0x40020400
 8001398:	40020800 	.word	0x40020800
 800139c:	40020c00 	.word	0x40020c00
 80013a0:	40021000 	.word	0x40021000
 80013a4:	40021400 	.word	0x40021400
 80013a8:	40021800 	.word	0x40021800
 80013ac:	40021c00 	.word	0x40021c00
 80013b0:	40013c00 	.word	0x40013c00

080013b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d101      	bne.n	80013c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e264      	b.n	8001890 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d075      	beq.n	80014be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013d2:	4ba3      	ldr	r3, [pc, #652]	; (8001660 <HAL_RCC_OscConfig+0x2ac>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 030c 	and.w	r3, r3, #12
 80013da:	2b04      	cmp	r3, #4
 80013dc:	d00c      	beq.n	80013f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013de:	4ba0      	ldr	r3, [pc, #640]	; (8001660 <HAL_RCC_OscConfig+0x2ac>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013e6:	2b08      	cmp	r3, #8
 80013e8:	d112      	bne.n	8001410 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013ea:	4b9d      	ldr	r3, [pc, #628]	; (8001660 <HAL_RCC_OscConfig+0x2ac>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013f6:	d10b      	bne.n	8001410 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f8:	4b99      	ldr	r3, [pc, #612]	; (8001660 <HAL_RCC_OscConfig+0x2ac>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d05b      	beq.n	80014bc <HAL_RCC_OscConfig+0x108>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d157      	bne.n	80014bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e23f      	b.n	8001890 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001418:	d106      	bne.n	8001428 <HAL_RCC_OscConfig+0x74>
 800141a:	4b91      	ldr	r3, [pc, #580]	; (8001660 <HAL_RCC_OscConfig+0x2ac>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a90      	ldr	r2, [pc, #576]	; (8001660 <HAL_RCC_OscConfig+0x2ac>)
 8001420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	e01d      	b.n	8001464 <HAL_RCC_OscConfig+0xb0>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001430:	d10c      	bne.n	800144c <HAL_RCC_OscConfig+0x98>
 8001432:	4b8b      	ldr	r3, [pc, #556]	; (8001660 <HAL_RCC_OscConfig+0x2ac>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a8a      	ldr	r2, [pc, #552]	; (8001660 <HAL_RCC_OscConfig+0x2ac>)
 8001438:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	4b88      	ldr	r3, [pc, #544]	; (8001660 <HAL_RCC_OscConfig+0x2ac>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a87      	ldr	r2, [pc, #540]	; (8001660 <HAL_RCC_OscConfig+0x2ac>)
 8001444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	e00b      	b.n	8001464 <HAL_RCC_OscConfig+0xb0>
 800144c:	4b84      	ldr	r3, [pc, #528]	; (8001660 <HAL_RCC_OscConfig+0x2ac>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a83      	ldr	r2, [pc, #524]	; (8001660 <HAL_RCC_OscConfig+0x2ac>)
 8001452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001456:	6013      	str	r3, [r2, #0]
 8001458:	4b81      	ldr	r3, [pc, #516]	; (8001660 <HAL_RCC_OscConfig+0x2ac>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a80      	ldr	r2, [pc, #512]	; (8001660 <HAL_RCC_OscConfig+0x2ac>)
 800145e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001462:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d013      	beq.n	8001494 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146c:	f7ff fcf4 	bl	8000e58 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001474:	f7ff fcf0 	bl	8000e58 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b64      	cmp	r3, #100	; 0x64
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e204      	b.n	8001890 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001486:	4b76      	ldr	r3, [pc, #472]	; (8001660 <HAL_RCC_OscConfig+0x2ac>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d0f0      	beq.n	8001474 <HAL_RCC_OscConfig+0xc0>
 8001492:	e014      	b.n	80014be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001494:	f7ff fce0 	bl	8000e58 <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800149c:	f7ff fcdc 	bl	8000e58 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b64      	cmp	r3, #100	; 0x64
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e1f0      	b.n	8001890 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ae:	4b6c      	ldr	r3, [pc, #432]	; (8001660 <HAL_RCC_OscConfig+0x2ac>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1f0      	bne.n	800149c <HAL_RCC_OscConfig+0xe8>
 80014ba:	e000      	b.n	80014be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d063      	beq.n	8001592 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014ca:	4b65      	ldr	r3, [pc, #404]	; (8001660 <HAL_RCC_OscConfig+0x2ac>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f003 030c 	and.w	r3, r3, #12
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d00b      	beq.n	80014ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014d6:	4b62      	ldr	r3, [pc, #392]	; (8001660 <HAL_RCC_OscConfig+0x2ac>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014de:	2b08      	cmp	r3, #8
 80014e0:	d11c      	bne.n	800151c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014e2:	4b5f      	ldr	r3, [pc, #380]	; (8001660 <HAL_RCC_OscConfig+0x2ac>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d116      	bne.n	800151c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ee:	4b5c      	ldr	r3, [pc, #368]	; (8001660 <HAL_RCC_OscConfig+0x2ac>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d005      	beq.n	8001506 <HAL_RCC_OscConfig+0x152>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d001      	beq.n	8001506 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e1c4      	b.n	8001890 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001506:	4b56      	ldr	r3, [pc, #344]	; (8001660 <HAL_RCC_OscConfig+0x2ac>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	4952      	ldr	r1, [pc, #328]	; (8001660 <HAL_RCC_OscConfig+0x2ac>)
 8001516:	4313      	orrs	r3, r2
 8001518:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800151a:	e03a      	b.n	8001592 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d020      	beq.n	8001566 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001524:	4b4f      	ldr	r3, [pc, #316]	; (8001664 <HAL_RCC_OscConfig+0x2b0>)
 8001526:	2201      	movs	r2, #1
 8001528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152a:	f7ff fc95 	bl	8000e58 <HAL_GetTick>
 800152e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001530:	e008      	b.n	8001544 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001532:	f7ff fc91 	bl	8000e58 <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e1a5      	b.n	8001890 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001544:	4b46      	ldr	r3, [pc, #280]	; (8001660 <HAL_RCC_OscConfig+0x2ac>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d0f0      	beq.n	8001532 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001550:	4b43      	ldr	r3, [pc, #268]	; (8001660 <HAL_RCC_OscConfig+0x2ac>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	4940      	ldr	r1, [pc, #256]	; (8001660 <HAL_RCC_OscConfig+0x2ac>)
 8001560:	4313      	orrs	r3, r2
 8001562:	600b      	str	r3, [r1, #0]
 8001564:	e015      	b.n	8001592 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001566:	4b3f      	ldr	r3, [pc, #252]	; (8001664 <HAL_RCC_OscConfig+0x2b0>)
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156c:	f7ff fc74 	bl	8000e58 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001574:	f7ff fc70 	bl	8000e58 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e184      	b.n	8001890 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001586:	4b36      	ldr	r3, [pc, #216]	; (8001660 <HAL_RCC_OscConfig+0x2ac>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f0      	bne.n	8001574 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0308 	and.w	r3, r3, #8
 800159a:	2b00      	cmp	r3, #0
 800159c:	d030      	beq.n	8001600 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d016      	beq.n	80015d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015a6:	4b30      	ldr	r3, [pc, #192]	; (8001668 <HAL_RCC_OscConfig+0x2b4>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ac:	f7ff fc54 	bl	8000e58 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015b4:	f7ff fc50 	bl	8000e58 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e164      	b.n	8001890 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015c6:	4b26      	ldr	r3, [pc, #152]	; (8001660 <HAL_RCC_OscConfig+0x2ac>)
 80015c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d0f0      	beq.n	80015b4 <HAL_RCC_OscConfig+0x200>
 80015d2:	e015      	b.n	8001600 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015d4:	4b24      	ldr	r3, [pc, #144]	; (8001668 <HAL_RCC_OscConfig+0x2b4>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015da:	f7ff fc3d 	bl	8000e58 <HAL_GetTick>
 80015de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e0:	e008      	b.n	80015f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015e2:	f7ff fc39 	bl	8000e58 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e14d      	b.n	8001890 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015f4:	4b1a      	ldr	r3, [pc, #104]	; (8001660 <HAL_RCC_OscConfig+0x2ac>)
 80015f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1f0      	bne.n	80015e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	2b00      	cmp	r3, #0
 800160a:	f000 80a0 	beq.w	800174e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800160e:	2300      	movs	r3, #0
 8001610:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001612:	4b13      	ldr	r3, [pc, #76]	; (8001660 <HAL_RCC_OscConfig+0x2ac>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d10f      	bne.n	800163e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <HAL_RCC_OscConfig+0x2ac>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	4a0e      	ldr	r2, [pc, #56]	; (8001660 <HAL_RCC_OscConfig+0x2ac>)
 8001628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800162c:	6413      	str	r3, [r2, #64]	; 0x40
 800162e:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <HAL_RCC_OscConfig+0x2ac>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800163a:	2301      	movs	r3, #1
 800163c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800163e:	4b0b      	ldr	r3, [pc, #44]	; (800166c <HAL_RCC_OscConfig+0x2b8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001646:	2b00      	cmp	r3, #0
 8001648:	d121      	bne.n	800168e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800164a:	4b08      	ldr	r3, [pc, #32]	; (800166c <HAL_RCC_OscConfig+0x2b8>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a07      	ldr	r2, [pc, #28]	; (800166c <HAL_RCC_OscConfig+0x2b8>)
 8001650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001656:	f7ff fbff 	bl	8000e58 <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800165c:	e011      	b.n	8001682 <HAL_RCC_OscConfig+0x2ce>
 800165e:	bf00      	nop
 8001660:	40023800 	.word	0x40023800
 8001664:	42470000 	.word	0x42470000
 8001668:	42470e80 	.word	0x42470e80
 800166c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001670:	f7ff fbf2 	bl	8000e58 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e106      	b.n	8001890 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001682:	4b85      	ldr	r3, [pc, #532]	; (8001898 <HAL_RCC_OscConfig+0x4e4>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0f0      	beq.n	8001670 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d106      	bne.n	80016a4 <HAL_RCC_OscConfig+0x2f0>
 8001696:	4b81      	ldr	r3, [pc, #516]	; (800189c <HAL_RCC_OscConfig+0x4e8>)
 8001698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800169a:	4a80      	ldr	r2, [pc, #512]	; (800189c <HAL_RCC_OscConfig+0x4e8>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6713      	str	r3, [r2, #112]	; 0x70
 80016a2:	e01c      	b.n	80016de <HAL_RCC_OscConfig+0x32a>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	2b05      	cmp	r3, #5
 80016aa:	d10c      	bne.n	80016c6 <HAL_RCC_OscConfig+0x312>
 80016ac:	4b7b      	ldr	r3, [pc, #492]	; (800189c <HAL_RCC_OscConfig+0x4e8>)
 80016ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b0:	4a7a      	ldr	r2, [pc, #488]	; (800189c <HAL_RCC_OscConfig+0x4e8>)
 80016b2:	f043 0304 	orr.w	r3, r3, #4
 80016b6:	6713      	str	r3, [r2, #112]	; 0x70
 80016b8:	4b78      	ldr	r3, [pc, #480]	; (800189c <HAL_RCC_OscConfig+0x4e8>)
 80016ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016bc:	4a77      	ldr	r2, [pc, #476]	; (800189c <HAL_RCC_OscConfig+0x4e8>)
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	6713      	str	r3, [r2, #112]	; 0x70
 80016c4:	e00b      	b.n	80016de <HAL_RCC_OscConfig+0x32a>
 80016c6:	4b75      	ldr	r3, [pc, #468]	; (800189c <HAL_RCC_OscConfig+0x4e8>)
 80016c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ca:	4a74      	ldr	r2, [pc, #464]	; (800189c <HAL_RCC_OscConfig+0x4e8>)
 80016cc:	f023 0301 	bic.w	r3, r3, #1
 80016d0:	6713      	str	r3, [r2, #112]	; 0x70
 80016d2:	4b72      	ldr	r3, [pc, #456]	; (800189c <HAL_RCC_OscConfig+0x4e8>)
 80016d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d6:	4a71      	ldr	r2, [pc, #452]	; (800189c <HAL_RCC_OscConfig+0x4e8>)
 80016d8:	f023 0304 	bic.w	r3, r3, #4
 80016dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d015      	beq.n	8001712 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e6:	f7ff fbb7 	bl	8000e58 <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ec:	e00a      	b.n	8001704 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ee:	f7ff fbb3 	bl	8000e58 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e0c5      	b.n	8001890 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001704:	4b65      	ldr	r3, [pc, #404]	; (800189c <HAL_RCC_OscConfig+0x4e8>)
 8001706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d0ee      	beq.n	80016ee <HAL_RCC_OscConfig+0x33a>
 8001710:	e014      	b.n	800173c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001712:	f7ff fba1 	bl	8000e58 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001718:	e00a      	b.n	8001730 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800171a:	f7ff fb9d 	bl	8000e58 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	f241 3288 	movw	r2, #5000	; 0x1388
 8001728:	4293      	cmp	r3, r2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e0af      	b.n	8001890 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001730:	4b5a      	ldr	r3, [pc, #360]	; (800189c <HAL_RCC_OscConfig+0x4e8>)
 8001732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1ee      	bne.n	800171a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800173c:	7dfb      	ldrb	r3, [r7, #23]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d105      	bne.n	800174e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001742:	4b56      	ldr	r3, [pc, #344]	; (800189c <HAL_RCC_OscConfig+0x4e8>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	4a55      	ldr	r2, [pc, #340]	; (800189c <HAL_RCC_OscConfig+0x4e8>)
 8001748:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800174c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	2b00      	cmp	r3, #0
 8001754:	f000 809b 	beq.w	800188e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001758:	4b50      	ldr	r3, [pc, #320]	; (800189c <HAL_RCC_OscConfig+0x4e8>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f003 030c 	and.w	r3, r3, #12
 8001760:	2b08      	cmp	r3, #8
 8001762:	d05c      	beq.n	800181e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	2b02      	cmp	r3, #2
 800176a:	d141      	bne.n	80017f0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800176c:	4b4c      	ldr	r3, [pc, #304]	; (80018a0 <HAL_RCC_OscConfig+0x4ec>)
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001772:	f7ff fb71 	bl	8000e58 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800177a:	f7ff fb6d 	bl	8000e58 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e081      	b.n	8001890 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800178c:	4b43      	ldr	r3, [pc, #268]	; (800189c <HAL_RCC_OscConfig+0x4e8>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1f0      	bne.n	800177a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	69da      	ldr	r2, [r3, #28]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a1b      	ldr	r3, [r3, #32]
 80017a0:	431a      	orrs	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a6:	019b      	lsls	r3, r3, #6
 80017a8:	431a      	orrs	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ae:	085b      	lsrs	r3, r3, #1
 80017b0:	3b01      	subs	r3, #1
 80017b2:	041b      	lsls	r3, r3, #16
 80017b4:	431a      	orrs	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ba:	061b      	lsls	r3, r3, #24
 80017bc:	4937      	ldr	r1, [pc, #220]	; (800189c <HAL_RCC_OscConfig+0x4e8>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017c2:	4b37      	ldr	r3, [pc, #220]	; (80018a0 <HAL_RCC_OscConfig+0x4ec>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c8:	f7ff fb46 	bl	8000e58 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017d0:	f7ff fb42 	bl	8000e58 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e056      	b.n	8001890 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e2:	4b2e      	ldr	r3, [pc, #184]	; (800189c <HAL_RCC_OscConfig+0x4e8>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0f0      	beq.n	80017d0 <HAL_RCC_OscConfig+0x41c>
 80017ee:	e04e      	b.n	800188e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f0:	4b2b      	ldr	r3, [pc, #172]	; (80018a0 <HAL_RCC_OscConfig+0x4ec>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f6:	f7ff fb2f 	bl	8000e58 <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017fe:	f7ff fb2b 	bl	8000e58 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e03f      	b.n	8001890 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001810:	4b22      	ldr	r3, [pc, #136]	; (800189c <HAL_RCC_OscConfig+0x4e8>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1f0      	bne.n	80017fe <HAL_RCC_OscConfig+0x44a>
 800181c:	e037      	b.n	800188e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d101      	bne.n	800182a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e032      	b.n	8001890 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800182a:	4b1c      	ldr	r3, [pc, #112]	; (800189c <HAL_RCC_OscConfig+0x4e8>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d028      	beq.n	800188a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001842:	429a      	cmp	r2, r3
 8001844:	d121      	bne.n	800188a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001850:	429a      	cmp	r2, r3
 8001852:	d11a      	bne.n	800188a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001854:	68fa      	ldr	r2, [r7, #12]
 8001856:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800185a:	4013      	ands	r3, r2
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001860:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001862:	4293      	cmp	r3, r2
 8001864:	d111      	bne.n	800188a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001870:	085b      	lsrs	r3, r3, #1
 8001872:	3b01      	subs	r3, #1
 8001874:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001876:	429a      	cmp	r2, r3
 8001878:	d107      	bne.n	800188a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001884:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001886:	429a      	cmp	r2, r3
 8001888:	d001      	beq.n	800188e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e000      	b.n	8001890 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40007000 	.word	0x40007000
 800189c:	40023800 	.word	0x40023800
 80018a0:	42470060 	.word	0x42470060

080018a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e0cc      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018b8:	4b68      	ldr	r3, [pc, #416]	; (8001a5c <HAL_RCC_ClockConfig+0x1b8>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d90c      	bls.n	80018e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c6:	4b65      	ldr	r3, [pc, #404]	; (8001a5c <HAL_RCC_ClockConfig+0x1b8>)
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ce:	4b63      	ldr	r3, [pc, #396]	; (8001a5c <HAL_RCC_ClockConfig+0x1b8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d001      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e0b8      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d020      	beq.n	800192e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d005      	beq.n	8001904 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018f8:	4b59      	ldr	r3, [pc, #356]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	4a58      	ldr	r2, [pc, #352]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001902:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0308 	and.w	r3, r3, #8
 800190c:	2b00      	cmp	r3, #0
 800190e:	d005      	beq.n	800191c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001910:	4b53      	ldr	r3, [pc, #332]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	4a52      	ldr	r2, [pc, #328]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800191a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800191c:	4b50      	ldr	r3, [pc, #320]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	494d      	ldr	r1, [pc, #308]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 800192a:	4313      	orrs	r3, r2
 800192c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b00      	cmp	r3, #0
 8001938:	d044      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d107      	bne.n	8001952 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001942:	4b47      	ldr	r3, [pc, #284]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d119      	bne.n	8001982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e07f      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b02      	cmp	r3, #2
 8001958:	d003      	beq.n	8001962 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800195e:	2b03      	cmp	r3, #3
 8001960:	d107      	bne.n	8001972 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001962:	4b3f      	ldr	r3, [pc, #252]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d109      	bne.n	8001982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e06f      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001972:	4b3b      	ldr	r3, [pc, #236]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e067      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001982:	4b37      	ldr	r3, [pc, #220]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f023 0203 	bic.w	r2, r3, #3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	4934      	ldr	r1, [pc, #208]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001990:	4313      	orrs	r3, r2
 8001992:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001994:	f7ff fa60 	bl	8000e58 <HAL_GetTick>
 8001998:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800199a:	e00a      	b.n	80019b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800199c:	f7ff fa5c 	bl	8000e58 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e04f      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b2:	4b2b      	ldr	r3, [pc, #172]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 020c 	and.w	r2, r3, #12
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d1eb      	bne.n	800199c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019c4:	4b25      	ldr	r3, [pc, #148]	; (8001a5c <HAL_RCC_ClockConfig+0x1b8>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d20c      	bcs.n	80019ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d2:	4b22      	ldr	r3, [pc, #136]	; (8001a5c <HAL_RCC_ClockConfig+0x1b8>)
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019da:	4b20      	ldr	r3, [pc, #128]	; (8001a5c <HAL_RCC_ClockConfig+0x1b8>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d001      	beq.n	80019ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e032      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d008      	beq.n	8001a0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019f8:	4b19      	ldr	r3, [pc, #100]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	4916      	ldr	r1, [pc, #88]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0308 	and.w	r3, r3, #8
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d009      	beq.n	8001a2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a16:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	490e      	ldr	r1, [pc, #56]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a2a:	f000 f821 	bl	8001a70 <HAL_RCC_GetSysClockFreq>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	091b      	lsrs	r3, r3, #4
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	490a      	ldr	r1, [pc, #40]	; (8001a64 <HAL_RCC_ClockConfig+0x1c0>)
 8001a3c:	5ccb      	ldrb	r3, [r1, r3]
 8001a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a42:	4a09      	ldr	r2, [pc, #36]	; (8001a68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a46:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <HAL_RCC_ClockConfig+0x1c8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff f87a 	bl	8000b44 <HAL_InitTick>

  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40023c00 	.word	0x40023c00
 8001a60:	40023800 	.word	0x40023800
 8001a64:	08008470 	.word	0x08008470
 8001a68:	20000000 	.word	0x20000000
 8001a6c:	20000004 	.word	0x20000004

08001a70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a70:	b5b0      	push	{r4, r5, r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a76:	2100      	movs	r1, #0
 8001a78:	6079      	str	r1, [r7, #4]
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	60f9      	str	r1, [r7, #12]
 8001a7e:	2100      	movs	r1, #0
 8001a80:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001a82:	2100      	movs	r1, #0
 8001a84:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a86:	4952      	ldr	r1, [pc, #328]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001a88:	6889      	ldr	r1, [r1, #8]
 8001a8a:	f001 010c 	and.w	r1, r1, #12
 8001a8e:	2908      	cmp	r1, #8
 8001a90:	d00d      	beq.n	8001aae <HAL_RCC_GetSysClockFreq+0x3e>
 8001a92:	2908      	cmp	r1, #8
 8001a94:	f200 8094 	bhi.w	8001bc0 <HAL_RCC_GetSysClockFreq+0x150>
 8001a98:	2900      	cmp	r1, #0
 8001a9a:	d002      	beq.n	8001aa2 <HAL_RCC_GetSysClockFreq+0x32>
 8001a9c:	2904      	cmp	r1, #4
 8001a9e:	d003      	beq.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x38>
 8001aa0:	e08e      	b.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001aa2:	4b4c      	ldr	r3, [pc, #304]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x164>)
 8001aa4:	60bb      	str	r3, [r7, #8]
       break;
 8001aa6:	e08e      	b.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001aa8:	4b4b      	ldr	r3, [pc, #300]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x168>)
 8001aaa:	60bb      	str	r3, [r7, #8]
      break;
 8001aac:	e08b      	b.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001aae:	4948      	ldr	r1, [pc, #288]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ab0:	6849      	ldr	r1, [r1, #4]
 8001ab2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001ab6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ab8:	4945      	ldr	r1, [pc, #276]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001aba:	6849      	ldr	r1, [r1, #4]
 8001abc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001ac0:	2900      	cmp	r1, #0
 8001ac2:	d024      	beq.n	8001b0e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ac4:	4942      	ldr	r1, [pc, #264]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ac6:	6849      	ldr	r1, [r1, #4]
 8001ac8:	0989      	lsrs	r1, r1, #6
 8001aca:	4608      	mov	r0, r1
 8001acc:	f04f 0100 	mov.w	r1, #0
 8001ad0:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001ad4:	f04f 0500 	mov.w	r5, #0
 8001ad8:	ea00 0204 	and.w	r2, r0, r4
 8001adc:	ea01 0305 	and.w	r3, r1, r5
 8001ae0:	493d      	ldr	r1, [pc, #244]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x168>)
 8001ae2:	fb01 f003 	mul.w	r0, r1, r3
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	fb01 f102 	mul.w	r1, r1, r2
 8001aec:	1844      	adds	r4, r0, r1
 8001aee:	493a      	ldr	r1, [pc, #232]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x168>)
 8001af0:	fba2 0101 	umull	r0, r1, r2, r1
 8001af4:	1863      	adds	r3, r4, r1
 8001af6:	4619      	mov	r1, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	461a      	mov	r2, r3
 8001afc:	f04f 0300 	mov.w	r3, #0
 8001b00:	f7fe fbb6 	bl	8000270 <__aeabi_uldivmod>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4613      	mov	r3, r2
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	e04a      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b0e:	4b30      	ldr	r3, [pc, #192]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	099b      	lsrs	r3, r3, #6
 8001b14:	461a      	mov	r2, r3
 8001b16:	f04f 0300 	mov.w	r3, #0
 8001b1a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b1e:	f04f 0100 	mov.w	r1, #0
 8001b22:	ea02 0400 	and.w	r4, r2, r0
 8001b26:	ea03 0501 	and.w	r5, r3, r1
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	4629      	mov	r1, r5
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	f04f 0300 	mov.w	r3, #0
 8001b36:	014b      	lsls	r3, r1, #5
 8001b38:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b3c:	0142      	lsls	r2, r0, #5
 8001b3e:	4610      	mov	r0, r2
 8001b40:	4619      	mov	r1, r3
 8001b42:	1b00      	subs	r0, r0, r4
 8001b44:	eb61 0105 	sbc.w	r1, r1, r5
 8001b48:	f04f 0200 	mov.w	r2, #0
 8001b4c:	f04f 0300 	mov.w	r3, #0
 8001b50:	018b      	lsls	r3, r1, #6
 8001b52:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b56:	0182      	lsls	r2, r0, #6
 8001b58:	1a12      	subs	r2, r2, r0
 8001b5a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b5e:	f04f 0000 	mov.w	r0, #0
 8001b62:	f04f 0100 	mov.w	r1, #0
 8001b66:	00d9      	lsls	r1, r3, #3
 8001b68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b6c:	00d0      	lsls	r0, r2, #3
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	1912      	adds	r2, r2, r4
 8001b74:	eb45 0303 	adc.w	r3, r5, r3
 8001b78:	f04f 0000 	mov.w	r0, #0
 8001b7c:	f04f 0100 	mov.w	r1, #0
 8001b80:	0299      	lsls	r1, r3, #10
 8001b82:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001b86:	0290      	lsls	r0, r2, #10
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4610      	mov	r0, r2
 8001b8e:	4619      	mov	r1, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	461a      	mov	r2, r3
 8001b94:	f04f 0300 	mov.w	r3, #0
 8001b98:	f7fe fb6a 	bl	8000270 <__aeabi_uldivmod>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ba4:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	0c1b      	lsrs	r3, r3, #16
 8001baa:	f003 0303 	and.w	r3, r3, #3
 8001bae:	3301      	adds	r3, #1
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bbc:	60bb      	str	r3, [r7, #8]
      break;
 8001bbe:	e002      	b.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bc0:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x164>)
 8001bc2:	60bb      	str	r3, [r7, #8]
      break;
 8001bc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bc6:	68bb      	ldr	r3, [r7, #8]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bdb0      	pop	{r4, r5, r7, pc}
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	00f42400 	.word	0x00f42400
 8001bd8:	017d7840 	.word	0x017d7840

08001bdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001be0:	4b03      	ldr	r3, [pc, #12]	; (8001bf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001be2:	681b      	ldr	r3, [r3, #0]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	20000000 	.word	0x20000000

08001bf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bf8:	f7ff fff0 	bl	8001bdc <HAL_RCC_GetHCLKFreq>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	0a9b      	lsrs	r3, r3, #10
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	4903      	ldr	r1, [pc, #12]	; (8001c18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c0a:	5ccb      	ldrb	r3, [r1, r3]
 8001c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40023800 	.word	0x40023800
 8001c18:	08008480 	.word	0x08008480

08001c1c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	220f      	movs	r2, #15
 8001c2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c2c:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <HAL_RCC_GetClockConfig+0x5c>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f003 0203 	and.w	r2, r3, #3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c38:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <HAL_RCC_GetClockConfig+0x5c>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c44:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <HAL_RCC_GetClockConfig+0x5c>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c50:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <HAL_RCC_GetClockConfig+0x5c>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	08db      	lsrs	r3, r3, #3
 8001c56:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c5e:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <HAL_RCC_GetClockConfig+0x60>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0207 	and.w	r2, r3, #7
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	601a      	str	r2, [r3, #0]
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40023c00 	.word	0x40023c00

08001c80 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e022      	b.n	8001cd8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d105      	bne.n	8001caa <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f7fe fed3 	bl	8000a50 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2203      	movs	r2, #3
 8001cae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f814 	bl	8001ce0 <HAL_SD_InitCard>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e00a      	b.n	8001cd8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8001ce0:	b5b0      	push	{r4, r5, r7, lr}
 8001ce2:	b08e      	sub	sp, #56	; 0x38
 8001ce4:	af04      	add	r7, sp, #16
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8001cfc:	2376      	movs	r3, #118	; 0x76
 8001cfe:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681d      	ldr	r5, [r3, #0]
 8001d04:	466c      	mov	r4, sp
 8001d06:	f107 0314 	add.w	r3, r7, #20
 8001d0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001d0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001d12:	f107 0308 	add.w	r3, r7, #8
 8001d16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d18:	4628      	mov	r0, r5
 8001d1a:	f001 fbe5 	bl	80034e8 <SDIO_Init>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8001d24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e04c      	b.n	8001dca <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8001d30:	4b28      	ldr	r3, [pc, #160]	; (8001dd4 <HAL_SD_InitCard+0xf4>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f001 fc1d 	bl	800357a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8001d40:	4b24      	ldr	r3, [pc, #144]	; (8001dd4 <HAL_SD_InitCard+0xf4>)
 8001d42:	2201      	movs	r2, #1
 8001d44:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 ff02 	bl	8002b50 <SD_PowerON>
 8001d4c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00b      	beq.n	8001d6c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d60:	6a3b      	ldr	r3, [r7, #32]
 8001d62:	431a      	orrs	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e02e      	b.n	8001dca <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 fe23 	bl	80029b8 <SD_InitCard>
 8001d72:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001d74:	6a3b      	ldr	r3, [r7, #32]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00b      	beq.n	8001d92 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d86:	6a3b      	ldr	r3, [r7, #32]
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e01b      	b.n	8001dca <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f001 fc80 	bl	80036a0 <SDMMC_CmdBlockLength>
 8001da0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001da2:	6a3b      	ldr	r3, [r7, #32]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d00f      	beq.n	8001dc8 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <HAL_SD_InitCard+0xf8>)
 8001dae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001db4:	6a3b      	ldr	r3, [r7, #32]
 8001db6:	431a      	orrs	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e000      	b.n	8001dca <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3728      	adds	r7, #40	; 0x28
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bdb0      	pop	{r4, r5, r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	422580a0 	.word	0x422580a0
 8001dd8:	004005ff 	.word	0x004005ff

08001ddc <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b092      	sub	sp, #72	; 0x48
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
 8001de8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8001dea:	f7ff f835 	bl	8000e58 <HAL_GetTick>
 8001dee:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d107      	bne.n	8001e0e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e02:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e1bd      	b.n	800218a <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	f040 81b0 	bne.w	800217c <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001e22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	441a      	add	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d907      	bls.n	8001e40 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e34:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e1a4      	b.n	800218a <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2203      	movs	r2, #3
 8001e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d002      	beq.n	8001e5e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8001e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e5a:	025b      	lsls	r3, r3, #9
 8001e5c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001e5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e62:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	025b      	lsls	r3, r3, #9
 8001e68:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001e6a:	2390      	movs	r3, #144	; 0x90
 8001e6c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001e72:	2300      	movs	r3, #0
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001e76:	2301      	movs	r3, #1
 8001e78:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f107 0214 	add.w	r2, r7, #20
 8001e82:	4611      	mov	r1, r2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f001 fbdf 	bl	8003648 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d90a      	bls.n	8001ea6 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2202      	movs	r2, #2
 8001e94:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f001 fc43 	bl	8003728 <SDMMC_CmdReadMultiBlock>
 8001ea2:	6478      	str	r0, [r7, #68]	; 0x44
 8001ea4:	e009      	b.n	8001eba <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f001 fc16 	bl	80036e4 <SDMMC_CmdReadSingleBlock>
 8001eb8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8001eba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d012      	beq.n	8001ee6 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a7a      	ldr	r2, [pc, #488]	; (80020b0 <HAL_SD_ReadBlocks+0x2d4>)
 8001ec6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ecc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e151      	b.n	800218a <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001eea:	e061      	b.n	8001fb0 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d03c      	beq.n	8001f74 <HAL_SD_ReadBlocks+0x198>
 8001efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d039      	beq.n	8001f74 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8001f00:	2300      	movs	r3, #0
 8001f02:	643b      	str	r3, [r7, #64]	; 0x40
 8001f04:	e033      	b.n	8001f6e <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f001 fb17 	bl	800353e <SDIO_ReadFIFO>
 8001f10:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8001f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f18:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f22:	3b01      	subs	r3, #1
 8001f24:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8001f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f28:	0a1b      	lsrs	r3, r3, #8
 8001f2a:	b2da      	uxtb	r2, r3
 8001f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f2e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f32:	3301      	adds	r3, #1
 8001f34:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8001f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f3e:	0c1b      	lsrs	r3, r3, #16
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f44:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f48:	3301      	adds	r3, #1
 8001f4a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8001f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f54:	0e1b      	lsrs	r3, r3, #24
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f5a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8001f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f5e:	3301      	adds	r3, #1
 8001f60:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f64:	3b01      	subs	r3, #1
 8001f66:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8001f68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	643b      	str	r3, [r7, #64]	; 0x40
 8001f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f70:	2b07      	cmp	r3, #7
 8001f72:	d9c8      	bls.n	8001f06 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8001f74:	f7fe ff70 	bl	8000e58 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d902      	bls.n	8001f8a <HAL_SD_ReadBlocks+0x1ae>
 8001f84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d112      	bne.n	8001fb0 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a48      	ldr	r2, [pc, #288]	; (80020b0 <HAL_SD_ReadBlocks+0x2d4>)
 8001f90:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f96:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e0ec      	b.n	800218a <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fb6:	f240 332a 	movw	r3, #810	; 0x32a
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d095      	beq.n	8001eec <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d022      	beq.n	8002014 <HAL_SD_ReadBlocks+0x238>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d91f      	bls.n	8002014 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd8:	2b03      	cmp	r3, #3
 8001fda:	d01b      	beq.n	8002014 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f001 fc07 	bl	80037f4 <SDMMC_CmdStopTransfer>
 8001fe6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8001fe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d012      	beq.n	8002014 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a2f      	ldr	r2, [pc, #188]	; (80020b0 <HAL_SD_ReadBlocks+0x2d4>)
 8001ff4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ffa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2200      	movs	r2, #0
 800200e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e0ba      	b.n	800218a <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800201a:	f003 0308 	and.w	r3, r3, #8
 800201e:	2b00      	cmp	r3, #0
 8002020:	d012      	beq.n	8002048 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a22      	ldr	r2, [pc, #136]	; (80020b0 <HAL_SD_ReadBlocks+0x2d4>)
 8002028:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800202e:	f043 0208 	orr.w	r2, r3, #8
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e0a0      	b.n	800218a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d012      	beq.n	800207c <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a15      	ldr	r2, [pc, #84]	; (80020b0 <HAL_SD_ReadBlocks+0x2d4>)
 800205c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002062:	f043 0202 	orr.w	r2, r3, #2
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e086      	b.n	800218a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002082:	f003 0320 	and.w	r3, r3, #32
 8002086:	2b00      	cmp	r3, #0
 8002088:	d063      	beq.n	8002152 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a08      	ldr	r2, [pc, #32]	; (80020b0 <HAL_SD_ReadBlocks+0x2d4>)
 8002090:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002096:	f043 0220 	orr.w	r2, r3, #32
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e06c      	b.n	800218a <HAL_SD_ReadBlocks+0x3ae>
 80020b0:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f001 fa40 	bl	800353e <SDIO_ReadFIFO>
 80020be:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80020c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020c6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80020c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ca:	3301      	adds	r3, #1
 80020cc:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80020ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020d0:	3b01      	subs	r3, #1
 80020d2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80020d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d6:	0a1b      	lsrs	r3, r3, #8
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020dc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80020de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020e0:	3301      	adds	r3, #1
 80020e2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80020e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020e6:	3b01      	subs	r3, #1
 80020e8:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80020ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ec:	0c1b      	lsrs	r3, r3, #16
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020f2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80020f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020f6:	3301      	adds	r3, #1
 80020f8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80020fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020fc:	3b01      	subs	r3, #1
 80020fe:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002102:	0e1b      	lsrs	r3, r3, #24
 8002104:	b2da      	uxtb	r2, r3
 8002106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002108:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800210a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800210c:	3301      	adds	r3, #1
 800210e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002112:	3b01      	subs	r3, #1
 8002114:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002116:	f7fe fe9f 	bl	8000e58 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002122:	429a      	cmp	r2, r3
 8002124:	d902      	bls.n	800212c <HAL_SD_ReadBlocks+0x350>
 8002126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002128:	2b00      	cmp	r3, #0
 800212a:	d112      	bne.n	8002152 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a18      	ldr	r2, [pc, #96]	; (8002194 <HAL_SD_ReadBlocks+0x3b8>)
 8002132:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002138:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e01b      	b.n	800218a <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002158:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d002      	beq.n	8002166 <HAL_SD_ReadBlocks+0x38a>
 8002160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1a6      	bne.n	80020b4 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f240 523a 	movw	r2, #1338	; 0x53a
 800216e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	e006      	b.n	800218a <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002180:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
  }
}
 800218a:	4618      	mov	r0, r3
 800218c:	3748      	adds	r7, #72	; 0x48
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	004005ff 	.word	0x004005ff

08002198 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b092      	sub	sp, #72	; 0x48
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
 80021a4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80021a6:	f7fe fe57 	bl	8000e58 <HAL_GetTick>
 80021aa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d107      	bne.n	80021ca <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021be:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e166      	b.n	8002498 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	f040 8159 	bne.w	800248a <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80021de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	441a      	add	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d907      	bls.n	80021fc <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e14d      	b.n	8002498 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2203      	movs	r2, #3
 8002200:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2200      	movs	r2, #0
 800220a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002210:	2b01      	cmp	r3, #1
 8002212:	d002      	beq.n	800221a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8002214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002216:	025b      	lsls	r3, r3, #9
 8002218:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800221a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800221e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	025b      	lsls	r3, r3, #9
 8002224:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002226:	2390      	movs	r3, #144	; 0x90
 8002228:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800222a:	2300      	movs	r3, #0
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800222e:	2300      	movs	r3, #0
 8002230:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002232:	2301      	movs	r3, #1
 8002234:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f107 0218 	add.w	r2, r7, #24
 800223e:	4611      	mov	r1, r2
 8002240:	4618      	mov	r0, r3
 8002242:	f001 fa01 	bl	8003648 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d90a      	bls.n	8002262 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2220      	movs	r2, #32
 8002250:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002258:	4618      	mov	r0, r3
 800225a:	f001 faa9 	bl	80037b0 <SDMMC_CmdWriteMultiBlock>
 800225e:	6478      	str	r0, [r7, #68]	; 0x44
 8002260:	e009      	b.n	8002276 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2210      	movs	r2, #16
 8002266:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800226e:	4618      	mov	r0, r3
 8002270:	f001 fa7c 	bl	800376c <SDMMC_CmdWriteSingleBlock>
 8002274:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002276:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002278:	2b00      	cmp	r3, #0
 800227a:	d012      	beq.n	80022a2 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a87      	ldr	r2, [pc, #540]	; (80024a0 <HAL_SD_WriteBlocks+0x308>)
 8002282:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002288:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800228a:	431a      	orrs	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e0fa      	b.n	8002498 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80022a6:	e065      	b.n	8002374 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d040      	beq.n	8002338 <HAL_SD_WriteBlocks+0x1a0>
 80022b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d03d      	beq.n	8002338 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80022bc:	2300      	movs	r3, #0
 80022be:	643b      	str	r3, [r7, #64]	; 0x40
 80022c0:	e037      	b.n	8002332 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80022c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80022c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ca:	3301      	adds	r3, #1
 80022cc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80022ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022d0:	3b01      	subs	r3, #1
 80022d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80022d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	021a      	lsls	r2, r3, #8
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	4313      	orrs	r3, r2
 80022de:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80022e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022e2:	3301      	adds	r3, #1
 80022e4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80022e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022e8:	3b01      	subs	r3, #1
 80022ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80022ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	041a      	lsls	r2, r3, #16
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80022f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022fa:	3301      	adds	r3, #1
 80022fc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80022fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002300:	3b01      	subs	r3, #1
 8002302:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8002304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	061a      	lsls	r2, r3, #24
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	4313      	orrs	r3, r2
 800230e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002312:	3301      	adds	r3, #1
 8002314:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002318:	3b01      	subs	r3, #1
 800231a:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f107 0214 	add.w	r2, r7, #20
 8002324:	4611      	mov	r1, r2
 8002326:	4618      	mov	r0, r3
 8002328:	f001 f916 	bl	8003558 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800232c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800232e:	3301      	adds	r3, #1
 8002330:	643b      	str	r3, [r7, #64]	; 0x40
 8002332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002334:	2b07      	cmp	r3, #7
 8002336:	d9c4      	bls.n	80022c2 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002338:	f7fe fd8e 	bl	8000e58 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002344:	429a      	cmp	r2, r3
 8002346:	d902      	bls.n	800234e <HAL_SD_WriteBlocks+0x1b6>
 8002348:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800234a:	2b00      	cmp	r3, #0
 800234c:	d112      	bne.n	8002374 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a53      	ldr	r2, [pc, #332]	; (80024a0 <HAL_SD_WriteBlocks+0x308>)
 8002354:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800235a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800235c:	431a      	orrs	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2200      	movs	r2, #0
 800236e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e091      	b.n	8002498 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800237a:	f240 331a 	movw	r3, #794	; 0x31a
 800237e:	4013      	ands	r3, r2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d091      	beq.n	80022a8 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800238a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800238e:	2b00      	cmp	r3, #0
 8002390:	d022      	beq.n	80023d8 <HAL_SD_WriteBlocks+0x240>
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d91f      	bls.n	80023d8 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239c:	2b03      	cmp	r3, #3
 800239e:	d01b      	beq.n	80023d8 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f001 fa25 	bl	80037f4 <SDMMC_CmdStopTransfer>
 80023aa:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80023ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d012      	beq.n	80023d8 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a3a      	ldr	r2, [pc, #232]	; (80024a0 <HAL_SD_WriteBlocks+0x308>)
 80023b8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023c0:	431a      	orrs	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e05f      	b.n	8002498 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d012      	beq.n	800240c <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a2d      	ldr	r2, [pc, #180]	; (80024a0 <HAL_SD_WriteBlocks+0x308>)
 80023ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f2:	f043 0208 	orr.w	r2, r3, #8
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2201      	movs	r2, #1
 80023fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e045      	b.n	8002498 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d012      	beq.n	8002440 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a20      	ldr	r2, [pc, #128]	; (80024a0 <HAL_SD_WriteBlocks+0x308>)
 8002420:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002426:	f043 0202 	orr.w	r2, r3, #2
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e02b      	b.n	8002498 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002446:	f003 0310 	and.w	r3, r3, #16
 800244a:	2b00      	cmp	r3, #0
 800244c:	d012      	beq.n	8002474 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a13      	ldr	r2, [pc, #76]	; (80024a0 <HAL_SD_WriteBlocks+0x308>)
 8002454:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245a:	f043 0210 	orr.w	r2, r3, #16
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e011      	b.n	8002498 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f240 523a 	movw	r2, #1338	; 0x53a
 800247c:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	e006      	b.n	8002498 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800248e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
  }
}
 8002498:	4618      	mov	r0, r3
 800249a:	3748      	adds	r7, #72	; 0x48
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	004005ff 	.word	0x004005ff

080024a4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024b2:	0f9b      	lsrs	r3, r3, #30
 80024b4:	b2da      	uxtb	r2, r3
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024be:	0e9b      	lsrs	r3, r3, #26
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024d0:	0e1b      	lsrs	r3, r3, #24
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	f003 0303 	and.w	r3, r3, #3
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024e2:	0c1b      	lsrs	r3, r3, #16
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024ee:	0a1b      	lsrs	r3, r3, #8
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002504:	0d1b      	lsrs	r3, r3, #20
 8002506:	b29a      	uxth	r2, r3
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002510:	0c1b      	lsrs	r3, r3, #16
 8002512:	b2db      	uxtb	r3, r3
 8002514:	f003 030f 	and.w	r3, r3, #15
 8002518:	b2da      	uxtb	r2, r3
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002522:	0bdb      	lsrs	r3, r3, #15
 8002524:	b2db      	uxtb	r3, r3
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	b2da      	uxtb	r2, r3
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002534:	0b9b      	lsrs	r3, r3, #14
 8002536:	b2db      	uxtb	r3, r3
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	b2da      	uxtb	r2, r3
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002546:	0b5b      	lsrs	r3, r3, #13
 8002548:	b2db      	uxtb	r3, r3
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	b2da      	uxtb	r2, r3
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002558:	0b1b      	lsrs	r3, r3, #12
 800255a:	b2db      	uxtb	r3, r3
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	b2da      	uxtb	r2, r3
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	2200      	movs	r2, #0
 800256a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002570:	2b00      	cmp	r3, #0
 8002572:	d163      	bne.n	800263c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002578:	009a      	lsls	r2, r3, #2
 800257a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800257e:	4013      	ands	r3, r2
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002584:	0f92      	lsrs	r2, r2, #30
 8002586:	431a      	orrs	r2, r3
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002590:	0edb      	lsrs	r3, r3, #27
 8002592:	b2db      	uxtb	r3, r3
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	b2da      	uxtb	r2, r3
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025a2:	0e1b      	lsrs	r3, r3, #24
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	b2da      	uxtb	r2, r3
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025b4:	0d5b      	lsrs	r3, r3, #21
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025c6:	0c9b      	lsrs	r3, r3, #18
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	b2da      	uxtb	r2, r3
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025d8:	0bdb      	lsrs	r3, r3, #15
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	1c5a      	adds	r2, r3, #1
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	7e1b      	ldrb	r3, [r3, #24]
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	3302      	adds	r3, #2
 80025fc:	2201      	movs	r2, #1
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002606:	fb02 f203 	mul.w	r2, r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	7a1b      	ldrb	r3, [r3, #8]
 8002612:	b2db      	uxtb	r3, r3
 8002614:	f003 030f 	and.w	r3, r3, #15
 8002618:	2201      	movs	r2, #1
 800261a:	409a      	lsls	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002628:	0a52      	lsrs	r2, r2, #9
 800262a:	fb02 f203 	mul.w	r2, r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002638:	661a      	str	r2, [r3, #96]	; 0x60
 800263a:	e031      	b.n	80026a0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002640:	2b01      	cmp	r3, #1
 8002642:	d11d      	bne.n	8002680 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002648:	041b      	lsls	r3, r3, #16
 800264a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002652:	0c1b      	lsrs	r3, r3, #16
 8002654:	431a      	orrs	r2, r3
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	3301      	adds	r3, #1
 8002660:	029a      	lsls	r2, r3, #10
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002674:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	661a      	str	r2, [r3, #96]	; 0x60
 800267e:	e00f      	b.n	80026a0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a58      	ldr	r2, [pc, #352]	; (80027e8 <HAL_SD_GetCardCSD+0x344>)
 8002686:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e09d      	b.n	80027dc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026a4:	0b9b      	lsrs	r3, r3, #14
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026b6:	09db      	lsrs	r3, r3, #7
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d8:	0fdb      	lsrs	r3, r3, #31
 80026da:	b2da      	uxtb	r2, r3
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e4:	0f5b      	lsrs	r3, r3, #29
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	f003 0303 	and.w	r3, r3, #3
 80026ec:	b2da      	uxtb	r2, r3
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f6:	0e9b      	lsrs	r3, r3, #26
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002708:	0d9b      	lsrs	r3, r3, #22
 800270a:	b2db      	uxtb	r3, r3
 800270c:	f003 030f 	and.w	r3, r3, #15
 8002710:	b2da      	uxtb	r2, r3
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271a:	0d5b      	lsrs	r3, r3, #21
 800271c:	b2db      	uxtb	r3, r3
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	b2da      	uxtb	r2, r3
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002736:	0c1b      	lsrs	r3, r3, #16
 8002738:	b2db      	uxtb	r3, r3
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	b2da      	uxtb	r2, r3
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274a:	0bdb      	lsrs	r3, r3, #15
 800274c:	b2db      	uxtb	r3, r3
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	b2da      	uxtb	r2, r3
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275e:	0b9b      	lsrs	r3, r3, #14
 8002760:	b2db      	uxtb	r3, r3
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	b2da      	uxtb	r2, r3
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002772:	0b5b      	lsrs	r3, r3, #13
 8002774:	b2db      	uxtb	r3, r3
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	b2da      	uxtb	r2, r3
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002786:	0b1b      	lsrs	r3, r3, #12
 8002788:	b2db      	uxtb	r3, r3
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	b2da      	uxtb	r2, r3
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279a:	0a9b      	lsrs	r3, r3, #10
 800279c:	b2db      	uxtb	r3, r3
 800279e:	f003 0303 	and.w	r3, r3, #3
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ae:	0a1b      	lsrs	r3, r3, #8
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	f003 0303 	and.w	r3, r3, #3
 80027b6:	b2da      	uxtb	r2, r3
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c2:	085b      	lsrs	r3, r3, #1
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	004005ff 	.word	0x004005ff

080027ec <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8002844:	b5b0      	push	{r4, r5, r7, lr}
 8002846:	b08e      	sub	sp, #56	; 0x38
 8002848:	af04      	add	r7, sp, #16
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800284e:	2300      	movs	r3, #0
 8002850:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2203      	movs	r2, #3
 8002858:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002860:	2b03      	cmp	r3, #3
 8002862:	d02e      	beq.n	80028c2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800286a:	d106      	bne.n	800287a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002870:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	639a      	str	r2, [r3, #56]	; 0x38
 8002878:	e029      	b.n	80028ce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002880:	d10a      	bne.n	8002898 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 fa1a 	bl	8002cbc <SD_WideBus_Enable>
 8002888:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800288e:	6a3b      	ldr	r3, [r7, #32]
 8002890:	431a      	orrs	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	639a      	str	r2, [r3, #56]	; 0x38
 8002896:	e01a      	b.n	80028ce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10a      	bne.n	80028b4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 fa57 	bl	8002d52 <SD_WideBus_Disable>
 80028a4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028aa:	6a3b      	ldr	r3, [r7, #32]
 80028ac:	431a      	orrs	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	639a      	str	r2, [r3, #56]	; 0x38
 80028b2:	e00c      	b.n	80028ce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	639a      	str	r2, [r3, #56]	; 0x38
 80028c0:	e005      	b.n	80028ce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00b      	beq.n	80028ee <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a26      	ldr	r2, [pc, #152]	; (8002974 <HAL_SD_ConfigWideBusOperation+0x130>)
 80028dc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80028ec:	e01f      	b.n	800292e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681d      	ldr	r5, [r3, #0]
 8002914:	466c      	mov	r4, sp
 8002916:	f107 0314 	add.w	r3, r7, #20
 800291a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800291e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002922:	f107 0308 	add.w	r3, r7, #8
 8002926:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002928:	4628      	mov	r0, r5
 800292a:	f000 fddd 	bl	80034e8 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002936:	4618      	mov	r0, r3
 8002938:	f000 feb2 	bl	80036a0 <SDMMC_CmdBlockLength>
 800293c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800293e:	6a3b      	ldr	r3, [r7, #32]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00c      	beq.n	800295e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a0a      	ldr	r2, [pc, #40]	; (8002974 <HAL_SD_ConfigWideBusOperation+0x130>)
 800294a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002950:	6a3b      	ldr	r3, [r7, #32]
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2201      	movs	r2, #1
 8002962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8002966:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800296a:	4618      	mov	r0, r3
 800296c:	3728      	adds	r7, #40	; 0x28
 800296e:	46bd      	mov	sp, r7
 8002970:	bdb0      	pop	{r4, r5, r7, pc}
 8002972:	bf00      	nop
 8002974:	004005ff 	.word	0x004005ff

08002978 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8002980:	2300      	movs	r3, #0
 8002982:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8002984:	f107 030c 	add.w	r3, r7, #12
 8002988:	4619      	mov	r1, r3
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f96e 	bl	8002c6c <SD_SendStatus>
 8002990:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d005      	beq.n	80029a4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	431a      	orrs	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	0a5b      	lsrs	r3, r3, #9
 80029a8:	f003 030f 	and.w	r3, r3, #15
 80029ac:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80029ae:	693b      	ldr	r3, [r7, #16]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80029b8:	b5b0      	push	{r4, r5, r7, lr}
 80029ba:	b094      	sub	sp, #80	; 0x50
 80029bc:	af04      	add	r7, sp, #16
 80029be:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80029c0:	2301      	movs	r3, #1
 80029c2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f000 fde5 	bl	8003598 <SDIO_GetPowerState>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d102      	bne.n	80029da <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80029d4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80029d8:	e0b6      	b.n	8002b48 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029de:	2b03      	cmp	r3, #3
 80029e0:	d02f      	beq.n	8002a42 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f001 f80e 	bl	8003a08 <SDMMC_CmdSendCID>
 80029ec:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80029ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <SD_InitCard+0x40>
    {
      return errorstate;
 80029f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029f6:	e0a7      	b.n	8002b48 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2100      	movs	r1, #0
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 fe0f 	bl	8003622 <SDIO_GetResponse>
 8002a04:	4602      	mov	r2, r0
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2104      	movs	r1, #4
 8002a10:	4618      	mov	r0, r3
 8002a12:	f000 fe06 	bl	8003622 <SDIO_GetResponse>
 8002a16:	4602      	mov	r2, r0
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2108      	movs	r1, #8
 8002a22:	4618      	mov	r0, r3
 8002a24:	f000 fdfd 	bl	8003622 <SDIO_GetResponse>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	210c      	movs	r1, #12
 8002a34:	4618      	mov	r0, r3
 8002a36:	f000 fdf4 	bl	8003622 <SDIO_GetResponse>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a46:	2b03      	cmp	r3, #3
 8002a48:	d00d      	beq.n	8002a66 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f107 020e 	add.w	r2, r7, #14
 8002a52:	4611      	mov	r1, r2
 8002a54:	4618      	mov	r0, r3
 8002a56:	f001 f814 	bl	8003a82 <SDMMC_CmdSetRelAdd>
 8002a5a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <SD_InitCard+0xae>
    {
      return errorstate;
 8002a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a64:	e070      	b.n	8002b48 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6a:	2b03      	cmp	r3, #3
 8002a6c:	d036      	beq.n	8002adc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8002a6e:	89fb      	ldrh	r3, [r7, #14]
 8002a70:	461a      	mov	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a7e:	041b      	lsls	r3, r3, #16
 8002a80:	4619      	mov	r1, r3
 8002a82:	4610      	mov	r0, r2
 8002a84:	f000 ffde 	bl	8003a44 <SDMMC_CmdSendCSD>
 8002a88:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <SD_InitCard+0xdc>
    {
      return errorstate;
 8002a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a92:	e059      	b.n	8002b48 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2100      	movs	r1, #0
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 fdc1 	bl	8003622 <SDIO_GetResponse>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2104      	movs	r1, #4
 8002aac:	4618      	mov	r0, r3
 8002aae:	f000 fdb8 	bl	8003622 <SDIO_GetResponse>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2108      	movs	r1, #8
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f000 fdaf 	bl	8003622 <SDIO_GetResponse>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	210c      	movs	r1, #12
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f000 fda6 	bl	8003622 <SDIO_GetResponse>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2104      	movs	r1, #4
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 fd9d 	bl	8003622 <SDIO_GetResponse>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	0d1a      	lsrs	r2, r3, #20
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8002af0:	f107 0310 	add.w	r3, r7, #16
 8002af4:	4619      	mov	r1, r3
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7ff fcd4 	bl	80024a4 <HAL_SD_GetCardCSD>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d002      	beq.n	8002b08 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002b02:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002b06:	e01f      	b.n	8002b48 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6819      	ldr	r1, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b10:	041b      	lsls	r3, r3, #16
 8002b12:	461a      	mov	r2, r3
 8002b14:	f04f 0300 	mov.w	r3, #0
 8002b18:	4608      	mov	r0, r1
 8002b1a:	f000 fe8d 	bl	8003838 <SDMMC_CmdSelDesel>
 8002b1e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <SD_InitCard+0x172>
  {
    return errorstate;
 8002b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b28:	e00e      	b.n	8002b48 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681d      	ldr	r5, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	466c      	mov	r4, sp
 8002b32:	f103 0210 	add.w	r2, r3, #16
 8002b36:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b40:	4628      	mov	r0, r5
 8002b42:	f000 fcd1 	bl	80034e8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3740      	adds	r7, #64	; 0x40
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bdb0      	pop	{r4, r5, r7, pc}

08002b50 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	617b      	str	r3, [r7, #20]
 8002b60:	2300      	movs	r3, #0
 8002b62:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f000 fe88 	bl	800387e <SDMMC_CmdGoIdleState>
 8002b6e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <SD_PowerON+0x2a>
  {
    return errorstate;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	e072      	b.n	8002c60 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f000 fe9b 	bl	80038ba <SDMMC_CmdOperCond>
 8002b84:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00d      	beq.n	8002ba8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f000 fe71 	bl	800387e <SDMMC_CmdGoIdleState>
 8002b9c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d004      	beq.n	8002bae <SD_PowerON+0x5e>
    {
      return errorstate;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	e05b      	b.n	8002c60 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d137      	bne.n	8002c26 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2100      	movs	r1, #0
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f000 fe9b 	bl	80038f8 <SDMMC_CmdAppCommand>
 8002bc2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d02d      	beq.n	8002c26 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002bca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002bce:	e047      	b.n	8002c60 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f000 fe8e 	bl	80038f8 <SDMMC_CmdAppCommand>
 8002bdc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <SD_PowerON+0x98>
    {
      return errorstate;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	e03b      	b.n	8002c60 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	491e      	ldr	r1, [pc, #120]	; (8002c68 <SD_PowerON+0x118>)
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 fea4 	bl	800393c <SDMMC_CmdAppOperCommand>
 8002bf4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d002      	beq.n	8002c02 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002bfc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002c00:	e02e      	b.n	8002c60 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2100      	movs	r1, #0
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f000 fd0a 	bl	8003622 <SDIO_GetResponse>
 8002c0e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	0fdb      	lsrs	r3, r3, #31
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d101      	bne.n	8002c1c <SD_PowerON+0xcc>
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e000      	b.n	8002c1e <SD_PowerON+0xce>
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	613b      	str	r3, [r7, #16]

    count++;
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	3301      	adds	r3, #1
 8002c24:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d802      	bhi.n	8002c36 <SD_PowerON+0xe6>
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d0cc      	beq.n	8002bd0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d902      	bls.n	8002c46 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002c40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c44:	e00c      	b.n	8002c60 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d003      	beq.n	8002c58 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	645a      	str	r2, [r3, #68]	; 0x44
 8002c56:	e002      	b.n	8002c5e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3718      	adds	r7, #24
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	c1100000 	.word	0xc1100000

08002c6c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d102      	bne.n	8002c82 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8002c7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002c80:	e018      	b.n	8002cb4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c8a:	041b      	lsls	r3, r3, #16
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4610      	mov	r0, r2
 8002c90:	f000 ff18 	bl	8003ac4 <SDMMC_CmdSendStatus>
 8002c94:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	e009      	b.n	8002cb4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f000 fcbb 	bl	8003622 <SDIO_GetResponse>
 8002cac:	4602      	mov	r2, r0
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	2300      	movs	r3, #0
 8002cca:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f000 fca5 	bl	8003622 <SDIO_GetResponse>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ce2:	d102      	bne.n	8002cea <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002ce4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ce8:	e02f      	b.n	8002d4a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8002cea:	f107 030c 	add.w	r3, r7, #12
 8002cee:	4619      	mov	r1, r3
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 f879 	bl	8002de8 <SD_FindSCR>
 8002cf6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	e023      	b.n	8002d4a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d01c      	beq.n	8002d46 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d14:	041b      	lsls	r3, r3, #16
 8002d16:	4619      	mov	r1, r3
 8002d18:	4610      	mov	r0, r2
 8002d1a:	f000 fded 	bl	80038f8 <SDMMC_CmdAppCommand>
 8002d1e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	e00f      	b.n	8002d4a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2102      	movs	r1, #2
 8002d30:	4618      	mov	r0, r3
 8002d32:	f000 fe26 	bl	8003982 <SDMMC_CmdBusWidth>
 8002d36:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	e003      	b.n	8002d4a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8002d42:	2300      	movs	r3, #0
 8002d44:	e001      	b.n	8002d4a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002d46:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3718      	adds	r7, #24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b086      	sub	sp, #24
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60fb      	str	r3, [r7, #12]
 8002d5e:	2300      	movs	r3, #0
 8002d60:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2100      	movs	r1, #0
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f000 fc5a 	bl	8003622 <SDIO_GetResponse>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d78:	d102      	bne.n	8002d80 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002d7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d7e:	e02f      	b.n	8002de0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8002d80:	f107 030c 	add.w	r3, r7, #12
 8002d84:	4619      	mov	r1, r3
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 f82e 	bl	8002de8 <SD_FindSCR>
 8002d8c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	e023      	b.n	8002de0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d01c      	beq.n	8002ddc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002daa:	041b      	lsls	r3, r3, #16
 8002dac:	4619      	mov	r1, r3
 8002dae:	4610      	mov	r0, r2
 8002db0:	f000 fda2 	bl	80038f8 <SDMMC_CmdAppCommand>
 8002db4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	e00f      	b.n	8002de0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 fddb 	bl	8003982 <SDMMC_CmdBusWidth>
 8002dcc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	e003      	b.n	8002de0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	e001      	b.n	8002de0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002ddc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8002de8:	b590      	push	{r4, r7, lr}
 8002dea:	b08f      	sub	sp, #60	; 0x3c
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002df2:	f7fe f831 	bl	8000e58 <HAL_GetTick>
 8002df6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	60bb      	str	r3, [r7, #8]
 8002e00:	2300      	movs	r3, #0
 8002e02:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2108      	movs	r1, #8
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 fc46 	bl	80036a0 <SDMMC_CmdBlockLength>
 8002e14:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <SD_FindSCR+0x38>
  {
    return errorstate;
 8002e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1e:	e0b2      	b.n	8002f86 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e28:	041b      	lsls	r3, r3, #16
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	4610      	mov	r0, r2
 8002e2e:	f000 fd63 	bl	80038f8 <SDMMC_CmdAppCommand>
 8002e32:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <SD_FindSCR+0x56>
  {
    return errorstate;
 8002e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3c:	e0a3      	b.n	8002f86 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002e3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e42:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8002e44:	2308      	movs	r3, #8
 8002e46:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8002e48:	2330      	movs	r3, #48	; 0x30
 8002e4a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002e50:	2300      	movs	r3, #0
 8002e52:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8002e54:	2301      	movs	r3, #1
 8002e56:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f107 0210 	add.w	r2, r7, #16
 8002e60:	4611      	mov	r1, r2
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 fbf0 	bl	8003648 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f000 fdaa 	bl	80039c6 <SDMMC_CmdSendSCR>
 8002e72:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d02a      	beq.n	8002ed0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8002e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7c:	e083      	b.n	8002f86 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00f      	beq.n	8002eac <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6819      	ldr	r1, [r3, #0]
 8002e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	f107 0208 	add.w	r2, r7, #8
 8002e98:	18d4      	adds	r4, r2, r3
 8002e9a:	4608      	mov	r0, r1
 8002e9c:	f000 fb4f 	bl	800353e <SDIO_ReadFIFO>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	6023      	str	r3, [r4, #0]
      index++;
 8002ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	637b      	str	r3, [r7, #52]	; 0x34
 8002eaa:	e006      	b.n	8002eba <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d012      	beq.n	8002ee0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8002eba:	f7fd ffcd 	bl	8000e58 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ec8:	d102      	bne.n	8002ed0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8002eca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002ece:	e05a      	b.n	8002f86 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed6:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d0cf      	beq.n	8002e7e <SD_FindSCR+0x96>
 8002ede:	e000      	b.n	8002ee2 <SD_FindSCR+0xfa>
      break;
 8002ee0:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee8:	f003 0308 	and.w	r3, r3, #8
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d005      	beq.n	8002efc <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2208      	movs	r2, #8
 8002ef6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8002ef8:	2308      	movs	r3, #8
 8002efa:	e044      	b.n	8002f86 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d005      	beq.n	8002f16 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8002f12:	2302      	movs	r3, #2
 8002f14:	e037      	b.n	8002f86 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f1c:	f003 0320 	and.w	r3, r3, #32
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d005      	beq.n	8002f30 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2220      	movs	r2, #32
 8002f2a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8002f2c:	2320      	movs	r3, #32
 8002f2e:	e02a      	b.n	8002f86 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f240 523a 	movw	r2, #1338	; 0x53a
 8002f38:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	061a      	lsls	r2, r3, #24
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	021b      	lsls	r3, r3, #8
 8002f42:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002f46:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	0a1b      	lsrs	r3, r3, #8
 8002f4c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8002f50:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	0e1b      	lsrs	r3, r3, #24
 8002f56:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8002f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f5a:	601a      	str	r2, [r3, #0]
    scr++;
 8002f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f5e:	3304      	adds	r3, #4
 8002f60:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	061a      	lsls	r2, r3, #24
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	021b      	lsls	r3, r3, #8
 8002f6a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002f6e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	0a1b      	lsrs	r3, r3, #8
 8002f74:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8002f78:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	0e1b      	lsrs	r3, r3, #24
 8002f7e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8002f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f82:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	373c      	adds	r7, #60	; 0x3c
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd90      	pop	{r4, r7, pc}

08002f8e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b082      	sub	sp, #8
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d101      	bne.n	8002fa0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e041      	b.n	8003024 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d106      	bne.n	8002fba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 f839 	bl	800302c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2202      	movs	r2, #2
 8002fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	3304      	adds	r3, #4
 8002fca:	4619      	mov	r1, r3
 8002fcc:	4610      	mov	r0, r2
 8002fce:	f000 f9d7 	bl	8003380 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b01      	cmp	r3, #1
 8003052:	d001      	beq.n	8003058 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e04e      	b.n	80030f6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2202      	movs	r2, #2
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68da      	ldr	r2, [r3, #12]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 0201 	orr.w	r2, r2, #1
 800306e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a23      	ldr	r2, [pc, #140]	; (8003104 <HAL_TIM_Base_Start_IT+0xc4>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d022      	beq.n	80030c0 <HAL_TIM_Base_Start_IT+0x80>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003082:	d01d      	beq.n	80030c0 <HAL_TIM_Base_Start_IT+0x80>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a1f      	ldr	r2, [pc, #124]	; (8003108 <HAL_TIM_Base_Start_IT+0xc8>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d018      	beq.n	80030c0 <HAL_TIM_Base_Start_IT+0x80>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a1e      	ldr	r2, [pc, #120]	; (800310c <HAL_TIM_Base_Start_IT+0xcc>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d013      	beq.n	80030c0 <HAL_TIM_Base_Start_IT+0x80>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a1c      	ldr	r2, [pc, #112]	; (8003110 <HAL_TIM_Base_Start_IT+0xd0>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d00e      	beq.n	80030c0 <HAL_TIM_Base_Start_IT+0x80>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a1b      	ldr	r2, [pc, #108]	; (8003114 <HAL_TIM_Base_Start_IT+0xd4>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d009      	beq.n	80030c0 <HAL_TIM_Base_Start_IT+0x80>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a19      	ldr	r2, [pc, #100]	; (8003118 <HAL_TIM_Base_Start_IT+0xd8>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d004      	beq.n	80030c0 <HAL_TIM_Base_Start_IT+0x80>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a18      	ldr	r2, [pc, #96]	; (800311c <HAL_TIM_Base_Start_IT+0xdc>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d111      	bne.n	80030e4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 0307 	and.w	r3, r3, #7
 80030ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2b06      	cmp	r3, #6
 80030d0:	d010      	beq.n	80030f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f042 0201 	orr.w	r2, r2, #1
 80030e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030e2:	e007      	b.n	80030f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f042 0201 	orr.w	r2, r2, #1
 80030f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3714      	adds	r7, #20
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	40010000 	.word	0x40010000
 8003108:	40000400 	.word	0x40000400
 800310c:	40000800 	.word	0x40000800
 8003110:	40000c00 	.word	0x40000c00
 8003114:	40010400 	.word	0x40010400
 8003118:	40014000 	.word	0x40014000
 800311c:	40001800 	.word	0x40001800

08003120 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b02      	cmp	r3, #2
 8003134:	d122      	bne.n	800317c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b02      	cmp	r3, #2
 8003142:	d11b      	bne.n	800317c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f06f 0202 	mvn.w	r2, #2
 800314c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f8ee 	bl	8003344 <HAL_TIM_IC_CaptureCallback>
 8003168:	e005      	b.n	8003176 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f8e0 	bl	8003330 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 f8f1 	bl	8003358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	f003 0304 	and.w	r3, r3, #4
 8003186:	2b04      	cmp	r3, #4
 8003188:	d122      	bne.n	80031d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b04      	cmp	r3, #4
 8003196:	d11b      	bne.n	80031d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f06f 0204 	mvn.w	r2, #4
 80031a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2202      	movs	r2, #2
 80031a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f8c4 	bl	8003344 <HAL_TIM_IC_CaptureCallback>
 80031bc:	e005      	b.n	80031ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f8b6 	bl	8003330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 f8c7 	bl	8003358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	f003 0308 	and.w	r3, r3, #8
 80031da:	2b08      	cmp	r3, #8
 80031dc:	d122      	bne.n	8003224 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	f003 0308 	and.w	r3, r3, #8
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d11b      	bne.n	8003224 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f06f 0208 	mvn.w	r2, #8
 80031f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2204      	movs	r2, #4
 80031fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	f003 0303 	and.w	r3, r3, #3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 f89a 	bl	8003344 <HAL_TIM_IC_CaptureCallback>
 8003210:	e005      	b.n	800321e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f88c 	bl	8003330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f000 f89d 	bl	8003358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	f003 0310 	and.w	r3, r3, #16
 800322e:	2b10      	cmp	r3, #16
 8003230:	d122      	bne.n	8003278 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	f003 0310 	and.w	r3, r3, #16
 800323c:	2b10      	cmp	r3, #16
 800323e:	d11b      	bne.n	8003278 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f06f 0210 	mvn.w	r2, #16
 8003248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2208      	movs	r2, #8
 800324e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800325a:	2b00      	cmp	r3, #0
 800325c:	d003      	beq.n	8003266 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f870 	bl	8003344 <HAL_TIM_IC_CaptureCallback>
 8003264:	e005      	b.n	8003272 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f862 	bl	8003330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 f873 	bl	8003358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b01      	cmp	r3, #1
 8003284:	d10e      	bne.n	80032a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b01      	cmp	r3, #1
 8003292:	d107      	bne.n	80032a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f06f 0201 	mvn.w	r2, #1
 800329c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7fd fb96 	bl	80009d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ae:	2b80      	cmp	r3, #128	; 0x80
 80032b0:	d10e      	bne.n	80032d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032bc:	2b80      	cmp	r3, #128	; 0x80
 80032be:	d107      	bne.n	80032d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f902 	bl	80034d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032da:	2b40      	cmp	r3, #64	; 0x40
 80032dc:	d10e      	bne.n	80032fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e8:	2b40      	cmp	r3, #64	; 0x40
 80032ea:	d107      	bne.n	80032fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f838 	bl	800336c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	f003 0320 	and.w	r3, r3, #32
 8003306:	2b20      	cmp	r3, #32
 8003308:	d10e      	bne.n	8003328 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	f003 0320 	and.w	r3, r3, #32
 8003314:	2b20      	cmp	r3, #32
 8003316:	d107      	bne.n	8003328 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f06f 0220 	mvn.w	r2, #32
 8003320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f8cc 	bl	80034c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003328:	bf00      	nop
 800332a:	3708      	adds	r7, #8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a40      	ldr	r2, [pc, #256]	; (8003494 <TIM_Base_SetConfig+0x114>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d013      	beq.n	80033c0 <TIM_Base_SetConfig+0x40>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800339e:	d00f      	beq.n	80033c0 <TIM_Base_SetConfig+0x40>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a3d      	ldr	r2, [pc, #244]	; (8003498 <TIM_Base_SetConfig+0x118>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d00b      	beq.n	80033c0 <TIM_Base_SetConfig+0x40>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a3c      	ldr	r2, [pc, #240]	; (800349c <TIM_Base_SetConfig+0x11c>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d007      	beq.n	80033c0 <TIM_Base_SetConfig+0x40>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a3b      	ldr	r2, [pc, #236]	; (80034a0 <TIM_Base_SetConfig+0x120>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d003      	beq.n	80033c0 <TIM_Base_SetConfig+0x40>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a3a      	ldr	r2, [pc, #232]	; (80034a4 <TIM_Base_SetConfig+0x124>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d108      	bne.n	80033d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a2f      	ldr	r2, [pc, #188]	; (8003494 <TIM_Base_SetConfig+0x114>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d02b      	beq.n	8003432 <TIM_Base_SetConfig+0xb2>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033e0:	d027      	beq.n	8003432 <TIM_Base_SetConfig+0xb2>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a2c      	ldr	r2, [pc, #176]	; (8003498 <TIM_Base_SetConfig+0x118>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d023      	beq.n	8003432 <TIM_Base_SetConfig+0xb2>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a2b      	ldr	r2, [pc, #172]	; (800349c <TIM_Base_SetConfig+0x11c>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d01f      	beq.n	8003432 <TIM_Base_SetConfig+0xb2>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a2a      	ldr	r2, [pc, #168]	; (80034a0 <TIM_Base_SetConfig+0x120>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d01b      	beq.n	8003432 <TIM_Base_SetConfig+0xb2>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a29      	ldr	r2, [pc, #164]	; (80034a4 <TIM_Base_SetConfig+0x124>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d017      	beq.n	8003432 <TIM_Base_SetConfig+0xb2>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a28      	ldr	r2, [pc, #160]	; (80034a8 <TIM_Base_SetConfig+0x128>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d013      	beq.n	8003432 <TIM_Base_SetConfig+0xb2>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a27      	ldr	r2, [pc, #156]	; (80034ac <TIM_Base_SetConfig+0x12c>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d00f      	beq.n	8003432 <TIM_Base_SetConfig+0xb2>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a26      	ldr	r2, [pc, #152]	; (80034b0 <TIM_Base_SetConfig+0x130>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d00b      	beq.n	8003432 <TIM_Base_SetConfig+0xb2>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a25      	ldr	r2, [pc, #148]	; (80034b4 <TIM_Base_SetConfig+0x134>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d007      	beq.n	8003432 <TIM_Base_SetConfig+0xb2>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a24      	ldr	r2, [pc, #144]	; (80034b8 <TIM_Base_SetConfig+0x138>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d003      	beq.n	8003432 <TIM_Base_SetConfig+0xb2>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a23      	ldr	r2, [pc, #140]	; (80034bc <TIM_Base_SetConfig+0x13c>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d108      	bne.n	8003444 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003438:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	4313      	orrs	r3, r2
 8003442:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	4313      	orrs	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a0a      	ldr	r2, [pc, #40]	; (8003494 <TIM_Base_SetConfig+0x114>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d003      	beq.n	8003478 <TIM_Base_SetConfig+0xf8>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a0c      	ldr	r2, [pc, #48]	; (80034a4 <TIM_Base_SetConfig+0x124>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d103      	bne.n	8003480 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	691a      	ldr	r2, [r3, #16]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	615a      	str	r2, [r3, #20]
}
 8003486:	bf00      	nop
 8003488:	3714      	adds	r7, #20
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	40010000 	.word	0x40010000
 8003498:	40000400 	.word	0x40000400
 800349c:	40000800 	.word	0x40000800
 80034a0:	40000c00 	.word	0x40000c00
 80034a4:	40010400 	.word	0x40010400
 80034a8:	40014000 	.word	0x40014000
 80034ac:	40014400 	.word	0x40014400
 80034b0:	40014800 	.word	0x40014800
 80034b4:	40001800 	.word	0x40001800
 80034b8:	40001c00 	.word	0x40001c00
 80034bc:	40002000 	.word	0x40002000

080034c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80034e8:	b084      	sub	sp, #16
 80034ea:	b480      	push	{r7}
 80034ec:	b085      	sub	sp, #20
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
 80034f2:	f107 001c 	add.w	r0, r7, #28
 80034f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80034fa:	2300      	movs	r3, #0
 80034fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80034fe:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8003500:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8003502:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8003504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8003506:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003508:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800350a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800350c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800350e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8003512:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	4313      	orrs	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8003522:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	431a      	orrs	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3714      	adds	r7, #20
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	b004      	add	sp, #16
 800353c:	4770      	bx	lr

0800353e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800353e:	b480      	push	{r7}
 8003540:	b083      	sub	sp, #12
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800354c:	4618      	mov	r0, r3
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800357a:	b580      	push	{r7, lr}
 800357c:	b082      	sub	sp, #8
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2203      	movs	r2, #3
 8003586:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8003588:	2002      	movs	r0, #2
 800358a:	f7fd fc71 	bl	8000e70 <HAL_Delay>
  
  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0303 	and.w	r3, r3, #3
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80035be:	2300      	movs	r3, #0
 80035c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80035d2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80035d8:	431a      	orrs	r2, r3
                       Command->CPSM);
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80035de:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80035ee:	f023 030f 	bic.w	r3, r3, #15
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	431a      	orrs	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3714      	adds	r7, #20
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	b2db      	uxtb	r3, r3
}
 8003616:	4618      	mov	r0, r3
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8003622:	b480      	push	{r7}
 8003624:	b085      	sub	sp, #20
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
 800362a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3314      	adds	r3, #20
 8003630:	461a      	mov	r2, r3
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	4413      	add	r3, r2
 8003636:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
}  
 800363c:	4618      	mov	r0, r3
 800363e:	3714      	adds	r7, #20
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003652:	2300      	movs	r3, #0
 8003654:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800366e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8003674:	431a      	orrs	r2, r3
                       Data->DPSM);
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800367a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	4313      	orrs	r3, r2
 8003680:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003686:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	431a      	orrs	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003692:	2300      	movs	r3, #0

}
 8003694:	4618      	mov	r0, r3
 8003696:	3714      	adds	r7, #20
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b088      	sub	sp, #32
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80036ae:	2310      	movs	r3, #16
 80036b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80036b2:	2340      	movs	r3, #64	; 0x40
 80036b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80036b6:	2300      	movs	r3, #0
 80036b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80036ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80036c0:	f107 0308 	add.w	r3, r7, #8
 80036c4:	4619      	mov	r1, r3
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7ff ff74 	bl	80035b4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80036cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d0:	2110      	movs	r1, #16
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 fa44 	bl	8003b60 <SDMMC_GetCmdResp1>
 80036d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80036da:	69fb      	ldr	r3, [r7, #28]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3720      	adds	r7, #32
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b088      	sub	sp, #32
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80036f2:	2311      	movs	r3, #17
 80036f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80036f6:	2340      	movs	r3, #64	; 0x40
 80036f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80036fa:	2300      	movs	r3, #0
 80036fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80036fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003702:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003704:	f107 0308 	add.w	r3, r7, #8
 8003708:	4619      	mov	r1, r3
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7ff ff52 	bl	80035b4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003710:	f241 3288 	movw	r2, #5000	; 0x1388
 8003714:	2111      	movs	r1, #17
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 fa22 	bl	8003b60 <SDMMC_GetCmdResp1>
 800371c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800371e:	69fb      	ldr	r3, [r7, #28]
}
 8003720:	4618      	mov	r0, r3
 8003722:	3720      	adds	r7, #32
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b088      	sub	sp, #32
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003736:	2312      	movs	r3, #18
 8003738:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800373a:	2340      	movs	r3, #64	; 0x40
 800373c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800373e:	2300      	movs	r3, #0
 8003740:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003742:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003746:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003748:	f107 0308 	add.w	r3, r7, #8
 800374c:	4619      	mov	r1, r3
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7ff ff30 	bl	80035b4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003754:	f241 3288 	movw	r2, #5000	; 0x1388
 8003758:	2112      	movs	r1, #18
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 fa00 	bl	8003b60 <SDMMC_GetCmdResp1>
 8003760:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003762:	69fb      	ldr	r3, [r7, #28]
}
 8003764:	4618      	mov	r0, r3
 8003766:	3720      	adds	r7, #32
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b088      	sub	sp, #32
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800377a:	2318      	movs	r3, #24
 800377c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800377e:	2340      	movs	r3, #64	; 0x40
 8003780:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003782:	2300      	movs	r3, #0
 8003784:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003786:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800378a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800378c:	f107 0308 	add.w	r3, r7, #8
 8003790:	4619      	mov	r1, r3
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7ff ff0e 	bl	80035b4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003798:	f241 3288 	movw	r2, #5000	; 0x1388
 800379c:	2118      	movs	r1, #24
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f9de 	bl	8003b60 <SDMMC_GetCmdResp1>
 80037a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80037a6:	69fb      	ldr	r3, [r7, #28]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3720      	adds	r7, #32
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b088      	sub	sp, #32
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80037be:	2319      	movs	r3, #25
 80037c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80037c2:	2340      	movs	r3, #64	; 0x40
 80037c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80037c6:	2300      	movs	r3, #0
 80037c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80037ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80037d0:	f107 0308 	add.w	r3, r7, #8
 80037d4:	4619      	mov	r1, r3
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7ff feec 	bl	80035b4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80037dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e0:	2119      	movs	r1, #25
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f9bc 	bl	8003b60 <SDMMC_GetCmdResp1>
 80037e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80037ea:	69fb      	ldr	r3, [r7, #28]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3720      	adds	r7, #32
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b088      	sub	sp, #32
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80037fc:	2300      	movs	r3, #0
 80037fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003800:	230c      	movs	r3, #12
 8003802:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003804:	2340      	movs	r3, #64	; 0x40
 8003806:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003808:	2300      	movs	r3, #0
 800380a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800380c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003810:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003812:	f107 0308 	add.w	r3, r7, #8
 8003816:	4619      	mov	r1, r3
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f7ff fecb 	bl	80035b4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800381e:	4a05      	ldr	r2, [pc, #20]	; (8003834 <SDMMC_CmdStopTransfer+0x40>)
 8003820:	210c      	movs	r1, #12
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f99c 	bl	8003b60 <SDMMC_GetCmdResp1>
 8003828:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800382a:	69fb      	ldr	r3, [r7, #28]
}
 800382c:	4618      	mov	r0, r3
 800382e:	3720      	adds	r7, #32
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	05f5e100 	.word	0x05f5e100

08003838 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08a      	sub	sp, #40	; 0x28
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003848:	2307      	movs	r3, #7
 800384a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800384c:	2340      	movs	r3, #64	; 0x40
 800384e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003850:	2300      	movs	r3, #0
 8003852:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003854:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003858:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800385a:	f107 0310 	add.w	r3, r7, #16
 800385e:	4619      	mov	r1, r3
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f7ff fea7 	bl	80035b4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8003866:	f241 3288 	movw	r2, #5000	; 0x1388
 800386a:	2107      	movs	r1, #7
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f000 f977 	bl	8003b60 <SDMMC_GetCmdResp1>
 8003872:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003876:	4618      	mov	r0, r3
 8003878:	3728      	adds	r7, #40	; 0x28
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b088      	sub	sp, #32
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8003886:	2300      	movs	r3, #0
 8003888:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800388a:	2300      	movs	r3, #0
 800388c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800388e:	2300      	movs	r3, #0
 8003890:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003892:	2300      	movs	r3, #0
 8003894:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003896:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800389a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800389c:	f107 0308 	add.w	r3, r7, #8
 80038a0:	4619      	mov	r1, r3
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7ff fe86 	bl	80035b4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 f92d 	bl	8003b08 <SDMMC_GetCmdError>
 80038ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80038b0:	69fb      	ldr	r3, [r7, #28]
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3720      	adds	r7, #32
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b088      	sub	sp, #32
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80038c2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80038c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80038c8:	2308      	movs	r3, #8
 80038ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80038cc:	2340      	movs	r3, #64	; 0x40
 80038ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80038d0:	2300      	movs	r3, #0
 80038d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80038d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80038da:	f107 0308 	add.w	r3, r7, #8
 80038de:	4619      	mov	r1, r3
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f7ff fe67 	bl	80035b4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 fb24 	bl	8003f34 <SDMMC_GetCmdResp7>
 80038ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80038ee:	69fb      	ldr	r3, [r7, #28]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3720      	adds	r7, #32
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b088      	sub	sp, #32
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8003906:	2337      	movs	r3, #55	; 0x37
 8003908:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800390a:	2340      	movs	r3, #64	; 0x40
 800390c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800390e:	2300      	movs	r3, #0
 8003910:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003912:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003916:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003918:	f107 0308 	add.w	r3, r7, #8
 800391c:	4619      	mov	r1, r3
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7ff fe48 	bl	80035b4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8003924:	f241 3288 	movw	r2, #5000	; 0x1388
 8003928:	2137      	movs	r1, #55	; 0x37
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f918 	bl	8003b60 <SDMMC_GetCmdResp1>
 8003930:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003932:	69fb      	ldr	r3, [r7, #28]
}
 8003934:	4618      	mov	r0, r3
 8003936:	3720      	adds	r7, #32
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b088      	sub	sp, #32
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800394c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003950:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8003952:	2329      	movs	r3, #41	; 0x29
 8003954:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003956:	2340      	movs	r3, #64	; 0x40
 8003958:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800395a:	2300      	movs	r3, #0
 800395c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800395e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003962:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003964:	f107 0308 	add.w	r3, r7, #8
 8003968:	4619      	mov	r1, r3
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7ff fe22 	bl	80035b4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 fa2b 	bl	8003dcc <SDMMC_GetCmdResp3>
 8003976:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003978:	69fb      	ldr	r3, [r7, #28]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3720      	adds	r7, #32
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b088      	sub	sp, #32
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
 800398a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8003990:	2306      	movs	r3, #6
 8003992:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003994:	2340      	movs	r3, #64	; 0x40
 8003996:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003998:	2300      	movs	r3, #0
 800399a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800399c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80039a2:	f107 0308 	add.w	r3, r7, #8
 80039a6:	4619      	mov	r1, r3
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f7ff fe03 	bl	80035b4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80039ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b2:	2106      	movs	r1, #6
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 f8d3 	bl	8003b60 <SDMMC_GetCmdResp1>
 80039ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80039bc:	69fb      	ldr	r3, [r7, #28]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3720      	adds	r7, #32
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b088      	sub	sp, #32
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80039ce:	2300      	movs	r3, #0
 80039d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80039d2:	2333      	movs	r3, #51	; 0x33
 80039d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80039d6:	2340      	movs	r3, #64	; 0x40
 80039d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80039da:	2300      	movs	r3, #0
 80039dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80039de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80039e4:	f107 0308 	add.w	r3, r7, #8
 80039e8:	4619      	mov	r1, r3
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7ff fde2 	bl	80035b4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80039f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f4:	2133      	movs	r1, #51	; 0x33
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f8b2 	bl	8003b60 <SDMMC_GetCmdResp1>
 80039fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80039fe:	69fb      	ldr	r3, [r7, #28]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3720      	adds	r7, #32
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b088      	sub	sp, #32
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8003a10:	2300      	movs	r3, #0
 8003a12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003a14:	2302      	movs	r3, #2
 8003a16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003a18:	23c0      	movs	r3, #192	; 0xc0
 8003a1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a24:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a26:	f107 0308 	add.w	r3, r7, #8
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7ff fdc1 	bl	80035b4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 f982 	bl	8003d3c <SDMMC_GetCmdResp2>
 8003a38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003a3a:	69fb      	ldr	r3, [r7, #28]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3720      	adds	r7, #32
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b088      	sub	sp, #32
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8003a52:	2309      	movs	r3, #9
 8003a54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003a56:	23c0      	movs	r3, #192	; 0xc0
 8003a58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a62:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a64:	f107 0308 	add.w	r3, r7, #8
 8003a68:	4619      	mov	r1, r3
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7ff fda2 	bl	80035b4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 f963 	bl	8003d3c <SDMMC_GetCmdResp2>
 8003a76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003a78:	69fb      	ldr	r3, [r7, #28]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3720      	adds	r7, #32
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b088      	sub	sp, #32
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
 8003a8a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003a90:	2303      	movs	r3, #3
 8003a92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003a94:	2340      	movs	r3, #64	; 0x40
 8003a96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003aa0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003aa2:	f107 0308 	add.w	r3, r7, #8
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f7ff fd83 	bl	80035b4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	2103      	movs	r1, #3
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f9c8 	bl	8003e48 <SDMMC_GetCmdResp6>
 8003ab8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003aba:	69fb      	ldr	r3, [r7, #28]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3720      	adds	r7, #32
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b088      	sub	sp, #32
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8003ad2:	230d      	movs	r3, #13
 8003ad4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003ad6:	2340      	movs	r3, #64	; 0x40
 8003ad8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ada:	2300      	movs	r3, #0
 8003adc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ade:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ae2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ae4:	f107 0308 	add.w	r3, r7, #8
 8003ae8:	4619      	mov	r1, r3
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7ff fd62 	bl	80035b4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8003af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af4:	210d      	movs	r1, #13
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f832 	bl	8003b60 <SDMMC_GetCmdResp1>
 8003afc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003afe:	69fb      	ldr	r3, [r7, #28]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3720      	adds	r7, #32
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003b10:	4b11      	ldr	r3, [pc, #68]	; (8003b58 <SDMMC_GetCmdError+0x50>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a11      	ldr	r2, [pc, #68]	; (8003b5c <SDMMC_GetCmdError+0x54>)
 8003b16:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1a:	0a5b      	lsrs	r3, r3, #9
 8003b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b20:	fb02 f303 	mul.w	r3, r2, r3
 8003b24:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	1e5a      	subs	r2, r3, #1
 8003b2a:	60fa      	str	r2, [r7, #12]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d102      	bne.n	8003b36 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003b30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003b34:	e009      	b.n	8003b4a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0f1      	beq.n	8003b26 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	22c5      	movs	r2, #197	; 0xc5
 8003b46:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3714      	adds	r7, #20
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	20000000 	.word	0x20000000
 8003b5c:	10624dd3 	.word	0x10624dd3

08003b60 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b088      	sub	sp, #32
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	607a      	str	r2, [r7, #4]
 8003b6c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003b6e:	4b70      	ldr	r3, [pc, #448]	; (8003d30 <SDMMC_GetCmdResp1+0x1d0>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a70      	ldr	r2, [pc, #448]	; (8003d34 <SDMMC_GetCmdResp1+0x1d4>)
 8003b74:	fba2 2303 	umull	r2, r3, r2, r3
 8003b78:	0a5a      	lsrs	r2, r3, #9
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	fb02 f303 	mul.w	r3, r2, r3
 8003b80:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	1e5a      	subs	r2, r3, #1
 8003b86:	61fa      	str	r2, [r7, #28]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d102      	bne.n	8003b92 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003b8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003b90:	e0c9      	b.n	8003d26 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b96:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0ef      	beq.n	8003b82 <SDMMC_GetCmdResp1+0x22>
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1ea      	bne.n	8003b82 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb0:	f003 0304 	and.w	r3, r3, #4
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d004      	beq.n	8003bc2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2204      	movs	r2, #4
 8003bbc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003bbe:	2304      	movs	r3, #4
 8003bc0:	e0b1      	b.n	8003d26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d004      	beq.n	8003bd8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e0a6      	b.n	8003d26 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	22c5      	movs	r2, #197	; 0xc5
 8003bdc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f7ff fd12 	bl	8003608 <SDIO_GetCommandResponse>
 8003be4:	4603      	mov	r3, r0
 8003be6:	461a      	mov	r2, r3
 8003be8:	7afb      	ldrb	r3, [r7, #11]
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d001      	beq.n	8003bf2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e099      	b.n	8003d26 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	f7ff fd14 	bl	8003622 <SDIO_GetResponse>
 8003bfa:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	4b4e      	ldr	r3, [pc, #312]	; (8003d38 <SDMMC_GetCmdResp1+0x1d8>)
 8003c00:	4013      	ands	r3, r2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8003c06:	2300      	movs	r3, #0
 8003c08:	e08d      	b.n	8003d26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	da02      	bge.n	8003c16 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003c10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c14:	e087      	b.n	8003d26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d001      	beq.n	8003c24 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003c20:	2340      	movs	r3, #64	; 0x40
 8003c22:	e080      	b.n	8003d26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003c2e:	2380      	movs	r3, #128	; 0x80
 8003c30:	e079      	b.n	8003d26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d002      	beq.n	8003c42 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003c3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c40:	e071      	b.n	8003d26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d002      	beq.n	8003c52 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003c4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c50:	e069      	b.n	8003d26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d002      	beq.n	8003c62 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003c5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c60:	e061      	b.n	8003d26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d002      	beq.n	8003c72 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003c6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c70:	e059      	b.n	8003d26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d002      	beq.n	8003c82 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003c7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c80:	e051      	b.n	8003d26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d002      	beq.n	8003c92 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003c8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c90:	e049      	b.n	8003d26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d002      	beq.n	8003ca2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003c9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ca0:	e041      	b.n	8003d26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d002      	beq.n	8003cb2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8003cac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cb0:	e039      	b.n	8003d26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d002      	beq.n	8003cc2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003cbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cc0:	e031      	b.n	8003d26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d002      	beq.n	8003cd2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003ccc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003cd0:	e029      	b.n	8003d26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d002      	beq.n	8003ce2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003cdc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003ce0:	e021      	b.n	8003d26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d002      	beq.n	8003cf2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003cec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003cf0:	e019      	b.n	8003d26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d002      	beq.n	8003d02 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8003cfc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003d00:	e011      	b.n	8003d26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d002      	beq.n	8003d12 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8003d0c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d10:	e009      	b.n	8003d26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f003 0308 	and.w	r3, r3, #8
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8003d1c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003d20:	e001      	b.n	8003d26 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003d22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3720      	adds	r7, #32
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	20000000 	.word	0x20000000
 8003d34:	10624dd3 	.word	0x10624dd3
 8003d38:	fdffe008 	.word	0xfdffe008

08003d3c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003d44:	4b1f      	ldr	r3, [pc, #124]	; (8003dc4 <SDMMC_GetCmdResp2+0x88>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a1f      	ldr	r2, [pc, #124]	; (8003dc8 <SDMMC_GetCmdResp2+0x8c>)
 8003d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4e:	0a5b      	lsrs	r3, r3, #9
 8003d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d54:	fb02 f303 	mul.w	r3, r2, r3
 8003d58:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	1e5a      	subs	r2, r3, #1
 8003d5e:	60fa      	str	r2, [r7, #12]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d102      	bne.n	8003d6a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003d64:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003d68:	e026      	b.n	8003db8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d6e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d0ef      	beq.n	8003d5a <SDMMC_GetCmdResp2+0x1e>
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1ea      	bne.n	8003d5a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d004      	beq.n	8003d9a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2204      	movs	r2, #4
 8003d94:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003d96:	2304      	movs	r3, #4
 8003d98:	e00e      	b.n	8003db8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d004      	beq.n	8003db0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e003      	b.n	8003db8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	22c5      	movs	r2, #197	; 0xc5
 8003db4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3714      	adds	r7, #20
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	20000000 	.word	0x20000000
 8003dc8:	10624dd3 	.word	0x10624dd3

08003dcc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003dd4:	4b1a      	ldr	r3, [pc, #104]	; (8003e40 <SDMMC_GetCmdResp3+0x74>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a1a      	ldr	r2, [pc, #104]	; (8003e44 <SDMMC_GetCmdResp3+0x78>)
 8003dda:	fba2 2303 	umull	r2, r3, r2, r3
 8003dde:	0a5b      	lsrs	r3, r3, #9
 8003de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de4:	fb02 f303 	mul.w	r3, r2, r3
 8003de8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	1e5a      	subs	r2, r3, #1
 8003dee:	60fa      	str	r2, [r7, #12]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d102      	bne.n	8003dfa <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003df4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003df8:	e01b      	b.n	8003e32 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d0ef      	beq.n	8003dea <SDMMC_GetCmdResp3+0x1e>
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1ea      	bne.n	8003dea <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e18:	f003 0304 	and.w	r3, r3, #4
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d004      	beq.n	8003e2a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2204      	movs	r2, #4
 8003e24:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003e26:	2304      	movs	r3, #4
 8003e28:	e003      	b.n	8003e32 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	22c5      	movs	r2, #197	; 0xc5
 8003e2e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	20000000 	.word	0x20000000
 8003e44:	10624dd3 	.word	0x10624dd3

08003e48 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b088      	sub	sp, #32
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	460b      	mov	r3, r1
 8003e52:	607a      	str	r2, [r7, #4]
 8003e54:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003e56:	4b35      	ldr	r3, [pc, #212]	; (8003f2c <SDMMC_GetCmdResp6+0xe4>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a35      	ldr	r2, [pc, #212]	; (8003f30 <SDMMC_GetCmdResp6+0xe8>)
 8003e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e60:	0a5b      	lsrs	r3, r3, #9
 8003e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e66:	fb02 f303 	mul.w	r3, r2, r3
 8003e6a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	1e5a      	subs	r2, r3, #1
 8003e70:	61fa      	str	r2, [r7, #28]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d102      	bne.n	8003e7c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003e76:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003e7a:	e052      	b.n	8003f22 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e80:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0ef      	beq.n	8003e6c <SDMMC_GetCmdResp6+0x24>
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1ea      	bne.n	8003e6c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e9a:	f003 0304 	and.w	r3, r3, #4
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d004      	beq.n	8003eac <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2204      	movs	r2, #4
 8003ea6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003ea8:	2304      	movs	r3, #4
 8003eaa:	e03a      	b.n	8003f22 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d004      	beq.n	8003ec2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e02f      	b.n	8003f22 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f7ff fba0 	bl	8003608 <SDIO_GetCommandResponse>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	461a      	mov	r2, r3
 8003ecc:	7afb      	ldrb	r3, [r7, #11]
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d001      	beq.n	8003ed6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e025      	b.n	8003f22 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	22c5      	movs	r2, #197	; 0xc5
 8003eda:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003edc:	2100      	movs	r1, #0
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f7ff fb9f 	bl	8003622 <SDIO_GetResponse>
 8003ee4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d106      	bne.n	8003efe <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	0c1b      	lsrs	r3, r3, #16
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8003efa:	2300      	movs	r3, #0
 8003efc:	e011      	b.n	8003f22 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d002      	beq.n	8003f0e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003f08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f0c:	e009      	b.n	8003f22 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d002      	beq.n	8003f1e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003f18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f1c:	e001      	b.n	8003f22 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003f1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3720      	adds	r7, #32
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	20000000 	.word	0x20000000
 8003f30:	10624dd3 	.word	0x10624dd3

08003f34 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003f3c:	4b22      	ldr	r3, [pc, #136]	; (8003fc8 <SDMMC_GetCmdResp7+0x94>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a22      	ldr	r2, [pc, #136]	; (8003fcc <SDMMC_GetCmdResp7+0x98>)
 8003f42:	fba2 2303 	umull	r2, r3, r2, r3
 8003f46:	0a5b      	lsrs	r3, r3, #9
 8003f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f4c:	fb02 f303 	mul.w	r3, r2, r3
 8003f50:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	1e5a      	subs	r2, r3, #1
 8003f56:	60fa      	str	r2, [r7, #12]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d102      	bne.n	8003f62 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003f5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003f60:	e02c      	b.n	8003fbc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f66:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d0ef      	beq.n	8003f52 <SDMMC_GetCmdResp7+0x1e>
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1ea      	bne.n	8003f52 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f80:	f003 0304 	and.w	r3, r3, #4
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d004      	beq.n	8003f92 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2204      	movs	r2, #4
 8003f8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003f8e:	2304      	movs	r3, #4
 8003f90:	e014      	b.n	8003fbc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d004      	beq.n	8003fa8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e009      	b.n	8003fbc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d002      	beq.n	8003fba <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2240      	movs	r2, #64	; 0x40
 8003fb8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003fba:	2300      	movs	r3, #0
  
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	20000000 	.word	0x20000000
 8003fcc:	10624dd3 	.word	0x10624dd3

08003fd0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8003fd4:	4904      	ldr	r1, [pc, #16]	; (8003fe8 <MX_FATFS_Init+0x18>)
 8003fd6:	4805      	ldr	r0, [pc, #20]	; (8003fec <MX_FATFS_Init+0x1c>)
 8003fd8:	f003 f9ca 	bl	8007370 <FATFS_LinkDriver>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	461a      	mov	r2, r3
 8003fe0:	4b03      	ldr	r3, [pc, #12]	; (8003ff0 <MX_FATFS_Init+0x20>)
 8003fe2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003fe4:	bf00      	nop
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	200011a0 	.word	0x200011a0
 8003fec:	08008488 	.word	0x08008488
 8003ff0:	2000119c 	.word	0x2000119c

08003ff4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003ff8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800400a:	2300      	movs	r3, #0
 800400c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800400e:	f000 f879 	bl	8004104 <BSP_SD_IsDetected>
 8004012:	4603      	mov	r3, r0
 8004014:	2b01      	cmp	r3, #1
 8004016:	d001      	beq.n	800401c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e012      	b.n	8004042 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800401c:	480b      	ldr	r0, [pc, #44]	; (800404c <BSP_SD_Init+0x48>)
 800401e:	f7fd fe2f 	bl	8001c80 <HAL_SD_Init>
 8004022:	4603      	mov	r3, r0
 8004024:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8004026:	79fb      	ldrb	r3, [r7, #7]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d109      	bne.n	8004040 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800402c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004030:	4806      	ldr	r0, [pc, #24]	; (800404c <BSP_SD_Init+0x48>)
 8004032:	f7fe fc07 	bl	8002844 <HAL_SD_ConfigWideBusOperation>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d001      	beq.n	8004040 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8004040:	79fb      	ldrb	r3, [r7, #7]
}
 8004042:	4618      	mov	r0, r3
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	200010cc 	.word	0x200010cc

08004050 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b088      	sub	sp, #32
 8004054:	af02      	add	r7, sp, #8
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
 800405c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800405e:	2300      	movs	r3, #0
 8004060:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	9300      	str	r3, [sp, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	68f9      	ldr	r1, [r7, #12]
 800406c:	4806      	ldr	r0, [pc, #24]	; (8004088 <BSP_SD_ReadBlocks+0x38>)
 800406e:	f7fd feb5 	bl	8001ddc <HAL_SD_ReadBlocks>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800407c:	7dfb      	ldrb	r3, [r7, #23]
}
 800407e:	4618      	mov	r0, r3
 8004080:	3718      	adds	r7, #24
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	200010cc 	.word	0x200010cc

0800408c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b088      	sub	sp, #32
 8004090:	af02      	add	r7, sp, #8
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
 8004098:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800409a:	2300      	movs	r3, #0
 800409c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68ba      	ldr	r2, [r7, #8]
 80040a6:	68f9      	ldr	r1, [r7, #12]
 80040a8:	4806      	ldr	r0, [pc, #24]	; (80040c4 <BSP_SD_WriteBlocks+0x38>)
 80040aa:	f7fe f875 	bl	8002198 <HAL_SD_WriteBlocks>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80040b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3718      	adds	r7, #24
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	200010cc 	.word	0x200010cc

080040c8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80040cc:	4805      	ldr	r0, [pc, #20]	; (80040e4 <BSP_SD_GetCardState+0x1c>)
 80040ce:	f7fe fc53 	bl	8002978 <HAL_SD_GetCardState>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b04      	cmp	r3, #4
 80040d6:	bf14      	ite	ne
 80040d8:	2301      	movne	r3, #1
 80040da:	2300      	moveq	r3, #0
 80040dc:	b2db      	uxtb	r3, r3
}
 80040de:	4618      	mov	r0, r3
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	200010cc 	.word	0x200010cc

080040e8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80040f0:	6879      	ldr	r1, [r7, #4]
 80040f2:	4803      	ldr	r0, [pc, #12]	; (8004100 <BSP_SD_GetCardInfo+0x18>)
 80040f4:	f7fe fb7a 	bl	80027ec <HAL_SD_GetCardInfo>
}
 80040f8:	bf00      	nop
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	200010cc 	.word	0x200010cc

08004104 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800410a:	2301      	movs	r3, #1
 800410c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800410e:	79fb      	ldrb	r3, [r7, #7]
 8004110:	b2db      	uxtb	r3, r3
}
 8004112:	4618      	mov	r0, r3
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
	...

08004120 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	4603      	mov	r3, r0
 8004128:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800412a:	4b0b      	ldr	r3, [pc, #44]	; (8004158 <SD_CheckStatus+0x38>)
 800412c:	2201      	movs	r2, #1
 800412e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8004130:	f7ff ffca 	bl	80040c8 <BSP_SD_GetCardState>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d107      	bne.n	800414a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800413a:	4b07      	ldr	r3, [pc, #28]	; (8004158 <SD_CheckStatus+0x38>)
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	b2db      	uxtb	r3, r3
 8004140:	f023 0301 	bic.w	r3, r3, #1
 8004144:	b2da      	uxtb	r2, r3
 8004146:	4b04      	ldr	r3, [pc, #16]	; (8004158 <SD_CheckStatus+0x38>)
 8004148:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800414a:	4b03      	ldr	r3, [pc, #12]	; (8004158 <SD_CheckStatus+0x38>)
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	b2db      	uxtb	r3, r3
}
 8004150:	4618      	mov	r0, r3
 8004152:	3708      	adds	r7, #8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	20000009 	.word	0x20000009

0800415c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	4603      	mov	r3, r0
 8004164:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8004166:	4b0b      	ldr	r3, [pc, #44]	; (8004194 <SD_initialize+0x38>)
 8004168:	2201      	movs	r2, #1
 800416a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800416c:	f7ff ff4a 	bl	8004004 <BSP_SD_Init>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d107      	bne.n	8004186 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8004176:	79fb      	ldrb	r3, [r7, #7]
 8004178:	4618      	mov	r0, r3
 800417a:	f7ff ffd1 	bl	8004120 <SD_CheckStatus>
 800417e:	4603      	mov	r3, r0
 8004180:	461a      	mov	r2, r3
 8004182:	4b04      	ldr	r3, [pc, #16]	; (8004194 <SD_initialize+0x38>)
 8004184:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8004186:	4b03      	ldr	r3, [pc, #12]	; (8004194 <SD_initialize+0x38>)
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	b2db      	uxtb	r3, r3
}
 800418c:	4618      	mov	r0, r3
 800418e:	3708      	adds	r7, #8
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	20000009 	.word	0x20000009

08004198 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	4603      	mov	r3, r0
 80041a0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80041a2:	79fb      	ldrb	r3, [r7, #7]
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7ff ffbb 	bl	8004120 <SD_CheckStatus>
 80041aa:	4603      	mov	r3, r0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3708      	adds	r7, #8
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60b9      	str	r1, [r7, #8]
 80041bc:	607a      	str	r2, [r7, #4]
 80041be:	603b      	str	r3, [r7, #0]
 80041c0:	4603      	mov	r3, r0
 80041c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80041c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	6879      	ldr	r1, [r7, #4]
 80041d0:	68b8      	ldr	r0, [r7, #8]
 80041d2:	f7ff ff3d 	bl	8004050 <BSP_SD_ReadBlocks>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d107      	bne.n	80041ec <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80041dc:	bf00      	nop
 80041de:	f7ff ff73 	bl	80040c8 <BSP_SD_GetCardState>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1fa      	bne.n	80041de <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80041e8:	2300      	movs	r3, #0
 80041ea:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80041ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3718      	adds	r7, #24
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b086      	sub	sp, #24
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
 8004200:	603b      	str	r3, [r7, #0]
 8004202:	4603      	mov	r3, r0
 8004204:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800420a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	6879      	ldr	r1, [r7, #4]
 8004212:	68b8      	ldr	r0, [r7, #8]
 8004214:	f7ff ff3a 	bl	800408c <BSP_SD_WriteBlocks>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d107      	bne.n	800422e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800421e:	bf00      	nop
 8004220:	f7ff ff52 	bl	80040c8 <BSP_SD_GetCardState>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1fa      	bne.n	8004220 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800422a:	2300      	movs	r3, #0
 800422c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800422e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004230:	4618      	mov	r0, r3
 8004232:	3718      	adds	r7, #24
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b08c      	sub	sp, #48	; 0x30
 800423c:	af00      	add	r7, sp, #0
 800423e:	4603      	mov	r3, r0
 8004240:	603a      	str	r2, [r7, #0]
 8004242:	71fb      	strb	r3, [r7, #7]
 8004244:	460b      	mov	r3, r1
 8004246:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800424e:	4b25      	ldr	r3, [pc, #148]	; (80042e4 <SD_ioctl+0xac>)
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	b2db      	uxtb	r3, r3
 8004254:	f003 0301 	and.w	r3, r3, #1
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <SD_ioctl+0x28>
 800425c:	2303      	movs	r3, #3
 800425e:	e03c      	b.n	80042da <SD_ioctl+0xa2>

  switch (cmd)
 8004260:	79bb      	ldrb	r3, [r7, #6]
 8004262:	2b03      	cmp	r3, #3
 8004264:	d834      	bhi.n	80042d0 <SD_ioctl+0x98>
 8004266:	a201      	add	r2, pc, #4	; (adr r2, 800426c <SD_ioctl+0x34>)
 8004268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426c:	0800427d 	.word	0x0800427d
 8004270:	08004285 	.word	0x08004285
 8004274:	0800429d 	.word	0x0800429d
 8004278:	080042b7 	.word	0x080042b7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800427c:	2300      	movs	r3, #0
 800427e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004282:	e028      	b.n	80042d6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8004284:	f107 030c 	add.w	r3, r7, #12
 8004288:	4618      	mov	r0, r3
 800428a:	f7ff ff2d 	bl	80040e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800428e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004294:	2300      	movs	r3, #0
 8004296:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800429a:	e01c      	b.n	80042d6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800429c:	f107 030c 	add.w	r3, r7, #12
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7ff ff21 	bl	80040e8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80042a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80042ae:	2300      	movs	r3, #0
 80042b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80042b4:	e00f      	b.n	80042d6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80042b6:	f107 030c 	add.w	r3, r7, #12
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7ff ff14 	bl	80040e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80042c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c2:	0a5a      	lsrs	r2, r3, #9
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80042c8:	2300      	movs	r3, #0
 80042ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80042ce:	e002      	b.n	80042d6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80042d0:	2304      	movs	r3, #4
 80042d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80042d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3730      	adds	r7, #48	; 0x30
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	20000009 	.word	0x20000009

080042e8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	4603      	mov	r3, r0
 80042f0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80042f2:	79fb      	ldrb	r3, [r7, #7]
 80042f4:	4a08      	ldr	r2, [pc, #32]	; (8004318 <disk_status+0x30>)
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4413      	add	r3, r2
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	79fa      	ldrb	r2, [r7, #7]
 8004300:	4905      	ldr	r1, [pc, #20]	; (8004318 <disk_status+0x30>)
 8004302:	440a      	add	r2, r1
 8004304:	7a12      	ldrb	r2, [r2, #8]
 8004306:	4610      	mov	r0, r2
 8004308:	4798      	blx	r3
 800430a:	4603      	mov	r3, r0
 800430c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800430e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004310:	4618      	mov	r0, r3
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	200010b8 	.word	0x200010b8

0800431c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	4603      	mov	r3, r0
 8004324:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004326:	2300      	movs	r3, #0
 8004328:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800432a:	79fb      	ldrb	r3, [r7, #7]
 800432c:	4a0d      	ldr	r2, [pc, #52]	; (8004364 <disk_initialize+0x48>)
 800432e:	5cd3      	ldrb	r3, [r2, r3]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d111      	bne.n	8004358 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004334:	79fb      	ldrb	r3, [r7, #7]
 8004336:	4a0b      	ldr	r2, [pc, #44]	; (8004364 <disk_initialize+0x48>)
 8004338:	2101      	movs	r1, #1
 800433a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800433c:	79fb      	ldrb	r3, [r7, #7]
 800433e:	4a09      	ldr	r2, [pc, #36]	; (8004364 <disk_initialize+0x48>)
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	4413      	add	r3, r2
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	79fa      	ldrb	r2, [r7, #7]
 800434a:	4906      	ldr	r1, [pc, #24]	; (8004364 <disk_initialize+0x48>)
 800434c:	440a      	add	r2, r1
 800434e:	7a12      	ldrb	r2, [r2, #8]
 8004350:	4610      	mov	r0, r2
 8004352:	4798      	blx	r3
 8004354:	4603      	mov	r3, r0
 8004356:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004358:	7bfb      	ldrb	r3, [r7, #15]
}
 800435a:	4618      	mov	r0, r3
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	200010b8 	.word	0x200010b8

08004368 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004368:	b590      	push	{r4, r7, lr}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	60b9      	str	r1, [r7, #8]
 8004370:	607a      	str	r2, [r7, #4]
 8004372:	603b      	str	r3, [r7, #0]
 8004374:	4603      	mov	r3, r0
 8004376:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004378:	7bfb      	ldrb	r3, [r7, #15]
 800437a:	4a0a      	ldr	r2, [pc, #40]	; (80043a4 <disk_read+0x3c>)
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4413      	add	r3, r2
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	689c      	ldr	r4, [r3, #8]
 8004384:	7bfb      	ldrb	r3, [r7, #15]
 8004386:	4a07      	ldr	r2, [pc, #28]	; (80043a4 <disk_read+0x3c>)
 8004388:	4413      	add	r3, r2
 800438a:	7a18      	ldrb	r0, [r3, #8]
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	68b9      	ldr	r1, [r7, #8]
 8004392:	47a0      	blx	r4
 8004394:	4603      	mov	r3, r0
 8004396:	75fb      	strb	r3, [r7, #23]
  return res;
 8004398:	7dfb      	ldrb	r3, [r7, #23]
}
 800439a:	4618      	mov	r0, r3
 800439c:	371c      	adds	r7, #28
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd90      	pop	{r4, r7, pc}
 80043a2:	bf00      	nop
 80043a4:	200010b8 	.word	0x200010b8

080043a8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80043a8:	b590      	push	{r4, r7, lr}
 80043aa:	b087      	sub	sp, #28
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60b9      	str	r1, [r7, #8]
 80043b0:	607a      	str	r2, [r7, #4]
 80043b2:	603b      	str	r3, [r7, #0]
 80043b4:	4603      	mov	r3, r0
 80043b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80043b8:	7bfb      	ldrb	r3, [r7, #15]
 80043ba:	4a0a      	ldr	r2, [pc, #40]	; (80043e4 <disk_write+0x3c>)
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4413      	add	r3, r2
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	68dc      	ldr	r4, [r3, #12]
 80043c4:	7bfb      	ldrb	r3, [r7, #15]
 80043c6:	4a07      	ldr	r2, [pc, #28]	; (80043e4 <disk_write+0x3c>)
 80043c8:	4413      	add	r3, r2
 80043ca:	7a18      	ldrb	r0, [r3, #8]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	68b9      	ldr	r1, [r7, #8]
 80043d2:	47a0      	blx	r4
 80043d4:	4603      	mov	r3, r0
 80043d6:	75fb      	strb	r3, [r7, #23]
  return res;
 80043d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80043da:	4618      	mov	r0, r3
 80043dc:	371c      	adds	r7, #28
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd90      	pop	{r4, r7, pc}
 80043e2:	bf00      	nop
 80043e4:	200010b8 	.word	0x200010b8

080043e8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	4603      	mov	r3, r0
 80043f0:	603a      	str	r2, [r7, #0]
 80043f2:	71fb      	strb	r3, [r7, #7]
 80043f4:	460b      	mov	r3, r1
 80043f6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80043f8:	79fb      	ldrb	r3, [r7, #7]
 80043fa:	4a09      	ldr	r2, [pc, #36]	; (8004420 <disk_ioctl+0x38>)
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4413      	add	r3, r2
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	79fa      	ldrb	r2, [r7, #7]
 8004406:	4906      	ldr	r1, [pc, #24]	; (8004420 <disk_ioctl+0x38>)
 8004408:	440a      	add	r2, r1
 800440a:	7a10      	ldrb	r0, [r2, #8]
 800440c:	79b9      	ldrb	r1, [r7, #6]
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	4798      	blx	r3
 8004412:	4603      	mov	r3, r0
 8004414:	73fb      	strb	r3, [r7, #15]
  return res;
 8004416:	7bfb      	ldrb	r3, [r7, #15]
}
 8004418:	4618      	mov	r0, r3
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	200010b8 	.word	0x200010b8

08004424 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	3301      	adds	r3, #1
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004434:	89fb      	ldrh	r3, [r7, #14]
 8004436:	021b      	lsls	r3, r3, #8
 8004438:	b21a      	sxth	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	b21b      	sxth	r3, r3
 8004440:	4313      	orrs	r3, r2
 8004442:	b21b      	sxth	r3, r3
 8004444:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004446:	89fb      	ldrh	r3, [r7, #14]
}
 8004448:	4618      	mov	r0, r3
 800444a:	3714      	adds	r7, #20
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	3303      	adds	r3, #3
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	021b      	lsls	r3, r3, #8
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	3202      	adds	r2, #2
 800446c:	7812      	ldrb	r2, [r2, #0]
 800446e:	4313      	orrs	r3, r2
 8004470:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	021b      	lsls	r3, r3, #8
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	3201      	adds	r2, #1
 800447a:	7812      	ldrb	r2, [r2, #0]
 800447c:	4313      	orrs	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	021b      	lsls	r3, r3, #8
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	7812      	ldrb	r2, [r2, #0]
 8004488:	4313      	orrs	r3, r2
 800448a:	60fb      	str	r3, [r7, #12]
	return rv;
 800448c:	68fb      	ldr	r3, [r7, #12]
}
 800448e:	4618      	mov	r0, r3
 8004490:	3714      	adds	r7, #20
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800449a:	b480      	push	{r7}
 800449c:	b083      	sub	sp, #12
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	460b      	mov	r3, r1
 80044a4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	1c5a      	adds	r2, r3, #1
 80044aa:	607a      	str	r2, [r7, #4]
 80044ac:	887a      	ldrh	r2, [r7, #2]
 80044ae:	b2d2      	uxtb	r2, r2
 80044b0:	701a      	strb	r2, [r3, #0]
 80044b2:	887b      	ldrh	r3, [r7, #2]
 80044b4:	0a1b      	lsrs	r3, r3, #8
 80044b6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	1c5a      	adds	r2, r3, #1
 80044bc:	607a      	str	r2, [r7, #4]
 80044be:	887a      	ldrh	r2, [r7, #2]
 80044c0:	b2d2      	uxtb	r2, r2
 80044c2:	701a      	strb	r2, [r3, #0]
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	1c5a      	adds	r2, r3, #1
 80044de:	607a      	str	r2, [r7, #4]
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	b2d2      	uxtb	r2, r2
 80044e4:	701a      	strb	r2, [r3, #0]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	0a1b      	lsrs	r3, r3, #8
 80044ea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	1c5a      	adds	r2, r3, #1
 80044f0:	607a      	str	r2, [r7, #4]
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	b2d2      	uxtb	r2, r2
 80044f6:	701a      	strb	r2, [r3, #0]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	0a1b      	lsrs	r3, r3, #8
 80044fc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	1c5a      	adds	r2, r3, #1
 8004502:	607a      	str	r2, [r7, #4]
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	b2d2      	uxtb	r2, r2
 8004508:	701a      	strb	r2, [r3, #0]
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	0a1b      	lsrs	r3, r3, #8
 800450e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	1c5a      	adds	r2, r3, #1
 8004514:	607a      	str	r2, [r7, #4]
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	b2d2      	uxtb	r2, r2
 800451a:	701a      	strb	r2, [r3, #0]
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004528:	b480      	push	{r7}
 800452a:	b087      	sub	sp, #28
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00d      	beq.n	800455e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	1c53      	adds	r3, r2, #1
 8004546:	613b      	str	r3, [r7, #16]
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	1c59      	adds	r1, r3, #1
 800454c:	6179      	str	r1, [r7, #20]
 800454e:	7812      	ldrb	r2, [r2, #0]
 8004550:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	3b01      	subs	r3, #1
 8004556:	607b      	str	r3, [r7, #4]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1f1      	bne.n	8004542 <mem_cpy+0x1a>
	}
}
 800455e:	bf00      	nop
 8004560:	371c      	adds	r7, #28
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800456a:	b480      	push	{r7}
 800456c:	b087      	sub	sp, #28
 800456e:	af00      	add	r7, sp, #0
 8004570:	60f8      	str	r0, [r7, #12]
 8004572:	60b9      	str	r1, [r7, #8]
 8004574:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	1c5a      	adds	r2, r3, #1
 800457e:	617a      	str	r2, [r7, #20]
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	b2d2      	uxtb	r2, r2
 8004584:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	3b01      	subs	r3, #1
 800458a:	607b      	str	r3, [r7, #4]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1f3      	bne.n	800457a <mem_set+0x10>
}
 8004592:	bf00      	nop
 8004594:	bf00      	nop
 8004596:	371c      	adds	r7, #28
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80045a0:	b480      	push	{r7}
 80045a2:	b089      	sub	sp, #36	; 0x24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	61fb      	str	r3, [r7, #28]
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80045b4:	2300      	movs	r3, #0
 80045b6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	1c5a      	adds	r2, r3, #1
 80045bc:	61fa      	str	r2, [r7, #28]
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	4619      	mov	r1, r3
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	1c5a      	adds	r2, r3, #1
 80045c6:	61ba      	str	r2, [r7, #24]
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	1acb      	subs	r3, r1, r3
 80045cc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	3b01      	subs	r3, #1
 80045d2:	607b      	str	r3, [r7, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d002      	beq.n	80045e0 <mem_cmp+0x40>
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d0eb      	beq.n	80045b8 <mem_cmp+0x18>

	return r;
 80045e0:	697b      	ldr	r3, [r7, #20]
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3724      	adds	r7, #36	; 0x24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
 80045f6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80045f8:	e002      	b.n	8004600 <chk_chr+0x12>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	3301      	adds	r3, #1
 80045fe:	607b      	str	r3, [r7, #4]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d005      	beq.n	8004614 <chk_chr+0x26>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	461a      	mov	r2, r3
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	4293      	cmp	r3, r2
 8004612:	d1f2      	bne.n	80045fa <chk_chr+0xc>
	return *str;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	781b      	ldrb	r3, [r3, #0]
}
 8004618:	4618      	mov	r0, r3
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800462e:	2300      	movs	r3, #0
 8004630:	60bb      	str	r3, [r7, #8]
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	60fb      	str	r3, [r7, #12]
 8004636:	e029      	b.n	800468c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004638:	4a27      	ldr	r2, [pc, #156]	; (80046d8 <chk_lock+0xb4>)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	011b      	lsls	r3, r3, #4
 800463e:	4413      	add	r3, r2
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d01d      	beq.n	8004682 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004646:	4a24      	ldr	r2, [pc, #144]	; (80046d8 <chk_lock+0xb4>)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	011b      	lsls	r3, r3, #4
 800464c:	4413      	add	r3, r2
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	429a      	cmp	r2, r3
 8004656:	d116      	bne.n	8004686 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004658:	4a1f      	ldr	r2, [pc, #124]	; (80046d8 <chk_lock+0xb4>)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	011b      	lsls	r3, r3, #4
 800465e:	4413      	add	r3, r2
 8004660:	3304      	adds	r3, #4
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004668:	429a      	cmp	r2, r3
 800466a:	d10c      	bne.n	8004686 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800466c:	4a1a      	ldr	r2, [pc, #104]	; (80046d8 <chk_lock+0xb4>)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	011b      	lsls	r3, r3, #4
 8004672:	4413      	add	r3, r2
 8004674:	3308      	adds	r3, #8
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800467c:	429a      	cmp	r2, r3
 800467e:	d102      	bne.n	8004686 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004680:	e007      	b.n	8004692 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004682:	2301      	movs	r3, #1
 8004684:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	3301      	adds	r3, #1
 800468a:	60fb      	str	r3, [r7, #12]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d9d2      	bls.n	8004638 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2b02      	cmp	r3, #2
 8004696:	d109      	bne.n	80046ac <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d102      	bne.n	80046a4 <chk_lock+0x80>
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d101      	bne.n	80046a8 <chk_lock+0x84>
 80046a4:	2300      	movs	r3, #0
 80046a6:	e010      	b.n	80046ca <chk_lock+0xa6>
 80046a8:	2312      	movs	r3, #18
 80046aa:	e00e      	b.n	80046ca <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d108      	bne.n	80046c4 <chk_lock+0xa0>
 80046b2:	4a09      	ldr	r2, [pc, #36]	; (80046d8 <chk_lock+0xb4>)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	011b      	lsls	r3, r3, #4
 80046b8:	4413      	add	r3, r2
 80046ba:	330c      	adds	r3, #12
 80046bc:	881b      	ldrh	r3, [r3, #0]
 80046be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046c2:	d101      	bne.n	80046c8 <chk_lock+0xa4>
 80046c4:	2310      	movs	r3, #16
 80046c6:	e000      	b.n	80046ca <chk_lock+0xa6>
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3714      	adds	r7, #20
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	20001098 	.word	0x20001098

080046dc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80046e2:	2300      	movs	r3, #0
 80046e4:	607b      	str	r3, [r7, #4]
 80046e6:	e002      	b.n	80046ee <enq_lock+0x12>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	3301      	adds	r3, #1
 80046ec:	607b      	str	r3, [r7, #4]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d806      	bhi.n	8004702 <enq_lock+0x26>
 80046f4:	4a09      	ldr	r2, [pc, #36]	; (800471c <enq_lock+0x40>)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	011b      	lsls	r3, r3, #4
 80046fa:	4413      	add	r3, r2
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1f2      	bne.n	80046e8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b02      	cmp	r3, #2
 8004706:	bf14      	ite	ne
 8004708:	2301      	movne	r3, #1
 800470a:	2300      	moveq	r3, #0
 800470c:	b2db      	uxtb	r3, r3
}
 800470e:	4618      	mov	r0, r3
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	20001098 	.word	0x20001098

08004720 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800472a:	2300      	movs	r3, #0
 800472c:	60fb      	str	r3, [r7, #12]
 800472e:	e01f      	b.n	8004770 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004730:	4a41      	ldr	r2, [pc, #260]	; (8004838 <inc_lock+0x118>)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	011b      	lsls	r3, r3, #4
 8004736:	4413      	add	r3, r2
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	429a      	cmp	r2, r3
 8004740:	d113      	bne.n	800476a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004742:	4a3d      	ldr	r2, [pc, #244]	; (8004838 <inc_lock+0x118>)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	011b      	lsls	r3, r3, #4
 8004748:	4413      	add	r3, r2
 800474a:	3304      	adds	r3, #4
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004752:	429a      	cmp	r2, r3
 8004754:	d109      	bne.n	800476a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004756:	4a38      	ldr	r2, [pc, #224]	; (8004838 <inc_lock+0x118>)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	011b      	lsls	r3, r3, #4
 800475c:	4413      	add	r3, r2
 800475e:	3308      	adds	r3, #8
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004766:	429a      	cmp	r2, r3
 8004768:	d006      	beq.n	8004778 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	3301      	adds	r3, #1
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d9dc      	bls.n	8004730 <inc_lock+0x10>
 8004776:	e000      	b.n	800477a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004778:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2b02      	cmp	r3, #2
 800477e:	d132      	bne.n	80047e6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004780:	2300      	movs	r3, #0
 8004782:	60fb      	str	r3, [r7, #12]
 8004784:	e002      	b.n	800478c <inc_lock+0x6c>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	3301      	adds	r3, #1
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d806      	bhi.n	80047a0 <inc_lock+0x80>
 8004792:	4a29      	ldr	r2, [pc, #164]	; (8004838 <inc_lock+0x118>)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	011b      	lsls	r3, r3, #4
 8004798:	4413      	add	r3, r2
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1f2      	bne.n	8004786 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d101      	bne.n	80047aa <inc_lock+0x8a>
 80047a6:	2300      	movs	r3, #0
 80047a8:	e040      	b.n	800482c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	4922      	ldr	r1, [pc, #136]	; (8004838 <inc_lock+0x118>)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	011b      	lsls	r3, r3, #4
 80047b4:	440b      	add	r3, r1
 80047b6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689a      	ldr	r2, [r3, #8]
 80047bc:	491e      	ldr	r1, [pc, #120]	; (8004838 <inc_lock+0x118>)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	011b      	lsls	r3, r3, #4
 80047c2:	440b      	add	r3, r1
 80047c4:	3304      	adds	r3, #4
 80047c6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	695a      	ldr	r2, [r3, #20]
 80047cc:	491a      	ldr	r1, [pc, #104]	; (8004838 <inc_lock+0x118>)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	011b      	lsls	r3, r3, #4
 80047d2:	440b      	add	r3, r1
 80047d4:	3308      	adds	r3, #8
 80047d6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80047d8:	4a17      	ldr	r2, [pc, #92]	; (8004838 <inc_lock+0x118>)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	011b      	lsls	r3, r3, #4
 80047de:	4413      	add	r3, r2
 80047e0:	330c      	adds	r3, #12
 80047e2:	2200      	movs	r2, #0
 80047e4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d009      	beq.n	8004800 <inc_lock+0xe0>
 80047ec:	4a12      	ldr	r2, [pc, #72]	; (8004838 <inc_lock+0x118>)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	011b      	lsls	r3, r3, #4
 80047f2:	4413      	add	r3, r2
 80047f4:	330c      	adds	r3, #12
 80047f6:	881b      	ldrh	r3, [r3, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d001      	beq.n	8004800 <inc_lock+0xe0>
 80047fc:	2300      	movs	r3, #0
 80047fe:	e015      	b.n	800482c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d108      	bne.n	8004818 <inc_lock+0xf8>
 8004806:	4a0c      	ldr	r2, [pc, #48]	; (8004838 <inc_lock+0x118>)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	011b      	lsls	r3, r3, #4
 800480c:	4413      	add	r3, r2
 800480e:	330c      	adds	r3, #12
 8004810:	881b      	ldrh	r3, [r3, #0]
 8004812:	3301      	adds	r3, #1
 8004814:	b29a      	uxth	r2, r3
 8004816:	e001      	b.n	800481c <inc_lock+0xfc>
 8004818:	f44f 7280 	mov.w	r2, #256	; 0x100
 800481c:	4906      	ldr	r1, [pc, #24]	; (8004838 <inc_lock+0x118>)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	011b      	lsls	r3, r3, #4
 8004822:	440b      	add	r3, r1
 8004824:	330c      	adds	r3, #12
 8004826:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	3301      	adds	r3, #1
}
 800482c:	4618      	mov	r0, r3
 800482e:	3714      	adds	r7, #20
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	20001098 	.word	0x20001098

0800483c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	3b01      	subs	r3, #1
 8004848:	607b      	str	r3, [r7, #4]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d825      	bhi.n	800489c <dec_lock+0x60>
		n = Files[i].ctr;
 8004850:	4a17      	ldr	r2, [pc, #92]	; (80048b0 <dec_lock+0x74>)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	011b      	lsls	r3, r3, #4
 8004856:	4413      	add	r3, r2
 8004858:	330c      	adds	r3, #12
 800485a:	881b      	ldrh	r3, [r3, #0]
 800485c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800485e:	89fb      	ldrh	r3, [r7, #14]
 8004860:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004864:	d101      	bne.n	800486a <dec_lock+0x2e>
 8004866:	2300      	movs	r3, #0
 8004868:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800486a:	89fb      	ldrh	r3, [r7, #14]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <dec_lock+0x3a>
 8004870:	89fb      	ldrh	r3, [r7, #14]
 8004872:	3b01      	subs	r3, #1
 8004874:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004876:	4a0e      	ldr	r2, [pc, #56]	; (80048b0 <dec_lock+0x74>)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	011b      	lsls	r3, r3, #4
 800487c:	4413      	add	r3, r2
 800487e:	330c      	adds	r3, #12
 8004880:	89fa      	ldrh	r2, [r7, #14]
 8004882:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004884:	89fb      	ldrh	r3, [r7, #14]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d105      	bne.n	8004896 <dec_lock+0x5a>
 800488a:	4a09      	ldr	r2, [pc, #36]	; (80048b0 <dec_lock+0x74>)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	011b      	lsls	r3, r3, #4
 8004890:	4413      	add	r3, r2
 8004892:	2200      	movs	r2, #0
 8004894:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004896:	2300      	movs	r3, #0
 8004898:	737b      	strb	r3, [r7, #13]
 800489a:	e001      	b.n	80048a0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800489c:	2302      	movs	r3, #2
 800489e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80048a0:	7b7b      	ldrb	r3, [r7, #13]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3714      	adds	r7, #20
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	20001098 	.word	0x20001098

080048b4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80048bc:	2300      	movs	r3, #0
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	e010      	b.n	80048e4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80048c2:	4a0d      	ldr	r2, [pc, #52]	; (80048f8 <clear_lock+0x44>)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	011b      	lsls	r3, r3, #4
 80048c8:	4413      	add	r3, r2
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d105      	bne.n	80048de <clear_lock+0x2a>
 80048d2:	4a09      	ldr	r2, [pc, #36]	; (80048f8 <clear_lock+0x44>)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	011b      	lsls	r3, r3, #4
 80048d8:	4413      	add	r3, r2
 80048da:	2200      	movs	r2, #0
 80048dc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	3301      	adds	r3, #1
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d9eb      	bls.n	80048c2 <clear_lock+0xe>
	}
}
 80048ea:	bf00      	nop
 80048ec:	bf00      	nop
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	20001098 	.word	0x20001098

080048fc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004904:	2300      	movs	r3, #0
 8004906:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	78db      	ldrb	r3, [r3, #3]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d034      	beq.n	800497a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004914:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	7858      	ldrb	r0, [r3, #1]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004920:	2301      	movs	r3, #1
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	f7ff fd40 	bl	80043a8 <disk_write>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d002      	beq.n	8004934 <sync_window+0x38>
			res = FR_DISK_ERR;
 800492e:	2301      	movs	r3, #1
 8004930:	73fb      	strb	r3, [r7, #15]
 8004932:	e022      	b.n	800497a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	1ad2      	subs	r2, r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	429a      	cmp	r2, r3
 8004948:	d217      	bcs.n	800497a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	789b      	ldrb	r3, [r3, #2]
 800494e:	613b      	str	r3, [r7, #16]
 8004950:	e010      	b.n	8004974 <sync_window+0x78>
					wsect += fs->fsize;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	4413      	add	r3, r2
 800495a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	7858      	ldrb	r0, [r3, #1]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004966:	2301      	movs	r3, #1
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	f7ff fd1d 	bl	80043a8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	3b01      	subs	r3, #1
 8004972:	613b      	str	r3, [r7, #16]
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d8eb      	bhi.n	8004952 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800497a:	7bfb      	ldrb	r3, [r7, #15]
}
 800497c:	4618      	mov	r0, r3
 800497e:	3718      	adds	r7, #24
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800498e:	2300      	movs	r3, #0
 8004990:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	429a      	cmp	r2, r3
 800499a:	d01b      	beq.n	80049d4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f7ff ffad 	bl	80048fc <sync_window>
 80049a2:	4603      	mov	r3, r0
 80049a4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80049a6:	7bfb      	ldrb	r3, [r7, #15]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d113      	bne.n	80049d4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	7858      	ldrb	r0, [r3, #1]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80049b6:	2301      	movs	r3, #1
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	f7ff fcd5 	bl	8004368 <disk_read>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d004      	beq.n	80049ce <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80049c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049c8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80049d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
	...

080049e0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f7ff ff87 	bl	80048fc <sync_window>
 80049ee:	4603      	mov	r3, r0
 80049f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80049f2:	7bfb      	ldrb	r3, [r7, #15]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d159      	bne.n	8004aac <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	2b03      	cmp	r3, #3
 80049fe:	d149      	bne.n	8004a94 <sync_fs+0xb4>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	791b      	ldrb	r3, [r3, #4]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d145      	bne.n	8004a94 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	899b      	ldrh	r3, [r3, #12]
 8004a12:	461a      	mov	r2, r3
 8004a14:	2100      	movs	r1, #0
 8004a16:	f7ff fda8 	bl	800456a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	3334      	adds	r3, #52	; 0x34
 8004a1e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004a22:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7ff fd37 	bl	800449a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	3334      	adds	r3, #52	; 0x34
 8004a30:	4921      	ldr	r1, [pc, #132]	; (8004ab8 <sync_fs+0xd8>)
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7ff fd4c 	bl	80044d0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	3334      	adds	r3, #52	; 0x34
 8004a3c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004a40:	491e      	ldr	r1, [pc, #120]	; (8004abc <sync_fs+0xdc>)
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7ff fd44 	bl	80044d0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	3334      	adds	r3, #52	; 0x34
 8004a4c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	4619      	mov	r1, r3
 8004a56:	4610      	mov	r0, r2
 8004a58:	f7ff fd3a 	bl	80044d0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	3334      	adds	r3, #52	; 0x34
 8004a60:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	4619      	mov	r1, r3
 8004a6a:	4610      	mov	r0, r2
 8004a6c:	f7ff fd30 	bl	80044d0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a1b      	ldr	r3, [r3, #32]
 8004a74:	1c5a      	adds	r2, r3, #1
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	7858      	ldrb	r0, [r3, #1]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a88:	2301      	movs	r3, #1
 8004a8a:	f7ff fc8d 	bl	80043a8 <disk_write>
			fs->fsi_flag = 0;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	785b      	ldrb	r3, [r3, #1]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7ff fca3 	bl	80043e8 <disk_ioctl>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <sync_fs+0xcc>
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	41615252 	.word	0x41615252
 8004abc:	61417272 	.word	0x61417272

08004ac0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	3b02      	subs	r3, #2
 8004ace:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	3b02      	subs	r3, #2
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d301      	bcc.n	8004ae0 <clust2sect+0x20>
 8004adc:	2300      	movs	r3, #0
 8004ade:	e008      	b.n	8004af2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	895b      	ldrh	r3, [r3, #10]
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	fb03 f202 	mul.w	r2, r3, r2
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af0:	4413      	add	r3, r2
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	370c      	adds	r7, #12
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr

08004afe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b086      	sub	sp, #24
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
 8004b06:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d904      	bls.n	8004b1e <get_fat+0x20>
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d302      	bcc.n	8004b24 <get_fat+0x26>
		val = 1;	/* Internal error */
 8004b1e:	2301      	movs	r3, #1
 8004b20:	617b      	str	r3, [r7, #20]
 8004b22:	e0bb      	b.n	8004c9c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004b24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b28:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	2b03      	cmp	r3, #3
 8004b30:	f000 8083 	beq.w	8004c3a <get_fat+0x13c>
 8004b34:	2b03      	cmp	r3, #3
 8004b36:	f300 80a7 	bgt.w	8004c88 <get_fat+0x18a>
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d002      	beq.n	8004b44 <get_fat+0x46>
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d056      	beq.n	8004bf0 <get_fat+0xf2>
 8004b42:	e0a1      	b.n	8004c88 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	60fb      	str	r3, [r7, #12]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	085b      	lsrs	r3, r3, #1
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	4413      	add	r3, r2
 8004b50:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	899b      	ldrh	r3, [r3, #12]
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b62:	4413      	add	r3, r2
 8004b64:	4619      	mov	r1, r3
 8004b66:	6938      	ldr	r0, [r7, #16]
 8004b68:	f7ff ff0c 	bl	8004984 <move_window>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f040 808d 	bne.w	8004c8e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	1c5a      	adds	r2, r3, #1
 8004b78:	60fa      	str	r2, [r7, #12]
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	8992      	ldrh	r2, [r2, #12]
 8004b7e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b82:	fb02 f201 	mul.w	r2, r2, r1
 8004b86:	1a9b      	subs	r3, r3, r2
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b90:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	899b      	ldrh	r3, [r3, #12]
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ba2:	4413      	add	r3, r2
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	6938      	ldr	r0, [r7, #16]
 8004ba8:	f7ff feec 	bl	8004984 <move_window>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d16f      	bne.n	8004c92 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	899b      	ldrh	r3, [r3, #12]
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	fbb3 f1f2 	udiv	r1, r3, r2
 8004bbe:	fb02 f201 	mul.w	r2, r2, r1
 8004bc2:	1a9b      	subs	r3, r3, r2
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004bcc:	021b      	lsls	r3, r3, #8
 8004bce:	461a      	mov	r2, r3
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	f003 0301 	and.w	r3, r3, #1
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d002      	beq.n	8004be6 <get_fat+0xe8>
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	091b      	lsrs	r3, r3, #4
 8004be4:	e002      	b.n	8004bec <get_fat+0xee>
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bec:	617b      	str	r3, [r7, #20]
			break;
 8004bee:	e055      	b.n	8004c9c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	899b      	ldrh	r3, [r3, #12]
 8004bf8:	085b      	lsrs	r3, r3, #1
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c04:	4413      	add	r3, r2
 8004c06:	4619      	mov	r1, r3
 8004c08:	6938      	ldr	r0, [r7, #16]
 8004c0a:	f7ff febb 	bl	8004984 <move_window>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d140      	bne.n	8004c96 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	005b      	lsls	r3, r3, #1
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	8992      	ldrh	r2, [r2, #12]
 8004c22:	fbb3 f0f2 	udiv	r0, r3, r2
 8004c26:	fb02 f200 	mul.w	r2, r2, r0
 8004c2a:	1a9b      	subs	r3, r3, r2
 8004c2c:	440b      	add	r3, r1
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7ff fbf8 	bl	8004424 <ld_word>
 8004c34:	4603      	mov	r3, r0
 8004c36:	617b      	str	r3, [r7, #20]
			break;
 8004c38:	e030      	b.n	8004c9c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	899b      	ldrh	r3, [r3, #12]
 8004c42:	089b      	lsrs	r3, r3, #2
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	4619      	mov	r1, r3
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c4e:	4413      	add	r3, r2
 8004c50:	4619      	mov	r1, r3
 8004c52:	6938      	ldr	r0, [r7, #16]
 8004c54:	f7ff fe96 	bl	8004984 <move_window>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d11d      	bne.n	8004c9a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	8992      	ldrh	r2, [r2, #12]
 8004c6c:	fbb3 f0f2 	udiv	r0, r3, r2
 8004c70:	fb02 f200 	mul.w	r2, r2, r0
 8004c74:	1a9b      	subs	r3, r3, r2
 8004c76:	440b      	add	r3, r1
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7ff fbeb 	bl	8004454 <ld_dword>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004c84:	617b      	str	r3, [r7, #20]
			break;
 8004c86:	e009      	b.n	8004c9c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004c88:	2301      	movs	r3, #1
 8004c8a:	617b      	str	r3, [r7, #20]
 8004c8c:	e006      	b.n	8004c9c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004c8e:	bf00      	nop
 8004c90:	e004      	b.n	8004c9c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004c92:	bf00      	nop
 8004c94:	e002      	b.n	8004c9c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004c96:	bf00      	nop
 8004c98:	e000      	b.n	8004c9c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004c9a:	bf00      	nop
		}
	}

	return val;
 8004c9c:	697b      	ldr	r3, [r7, #20]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3718      	adds	r7, #24
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004ca6:	b590      	push	{r4, r7, lr}
 8004ca8:	b089      	sub	sp, #36	; 0x24
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	60f8      	str	r0, [r7, #12]
 8004cae:	60b9      	str	r1, [r7, #8]
 8004cb0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	f240 8102 	bls.w	8004ec2 <put_fat+0x21c>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	f080 80fc 	bcs.w	8004ec2 <put_fat+0x21c>
		switch (fs->fs_type) {
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	2b03      	cmp	r3, #3
 8004cd0:	f000 80b6 	beq.w	8004e40 <put_fat+0x19a>
 8004cd4:	2b03      	cmp	r3, #3
 8004cd6:	f300 80fd 	bgt.w	8004ed4 <put_fat+0x22e>
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d003      	beq.n	8004ce6 <put_fat+0x40>
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	f000 8083 	beq.w	8004dea <put_fat+0x144>
 8004ce4:	e0f6      	b.n	8004ed4 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	61bb      	str	r3, [r7, #24]
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	085b      	lsrs	r3, r3, #1
 8004cee:	69ba      	ldr	r2, [r7, #24]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	899b      	ldrh	r3, [r3, #12]
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d04:	4413      	add	r3, r2
 8004d06:	4619      	mov	r1, r3
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f7ff fe3b 	bl	8004984 <move_window>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004d12:	7ffb      	ldrb	r3, [r7, #31]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f040 80d6 	bne.w	8004ec6 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	1c5a      	adds	r2, r3, #1
 8004d24:	61ba      	str	r2, [r7, #24]
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	8992      	ldrh	r2, [r2, #12]
 8004d2a:	fbb3 f0f2 	udiv	r0, r3, r2
 8004d2e:	fb02 f200 	mul.w	r2, r2, r0
 8004d32:	1a9b      	subs	r3, r3, r2
 8004d34:	440b      	add	r3, r1
 8004d36:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00d      	beq.n	8004d5e <put_fat+0xb8>
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	b25b      	sxtb	r3, r3
 8004d48:	f003 030f 	and.w	r3, r3, #15
 8004d4c:	b25a      	sxtb	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	011b      	lsls	r3, r3, #4
 8004d54:	b25b      	sxtb	r3, r3
 8004d56:	4313      	orrs	r3, r2
 8004d58:	b25b      	sxtb	r3, r3
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	e001      	b.n	8004d62 <put_fat+0xbc>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	697a      	ldr	r2, [r7, #20]
 8004d64:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	899b      	ldrh	r3, [r3, #12]
 8004d74:	4619      	mov	r1, r3
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d7c:	4413      	add	r3, r2
 8004d7e:	4619      	mov	r1, r3
 8004d80:	68f8      	ldr	r0, [r7, #12]
 8004d82:	f7ff fdff 	bl	8004984 <move_window>
 8004d86:	4603      	mov	r3, r0
 8004d88:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004d8a:	7ffb      	ldrb	r3, [r7, #31]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f040 809c 	bne.w	8004eca <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	899b      	ldrh	r3, [r3, #12]
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	fbb3 f0f2 	udiv	r0, r3, r2
 8004da4:	fb02 f200 	mul.w	r2, r2, r0
 8004da8:	1a9b      	subs	r3, r3, r2
 8004daa:	440b      	add	r3, r1
 8004dac:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d003      	beq.n	8004dc0 <put_fat+0x11a>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	091b      	lsrs	r3, r3, #4
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	e00e      	b.n	8004dde <put_fat+0x138>
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	b25b      	sxtb	r3, r3
 8004dc6:	f023 030f 	bic.w	r3, r3, #15
 8004dca:	b25a      	sxtb	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	0a1b      	lsrs	r3, r3, #8
 8004dd0:	b25b      	sxtb	r3, r3
 8004dd2:	f003 030f 	and.w	r3, r3, #15
 8004dd6:	b25b      	sxtb	r3, r3
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	b25b      	sxtb	r3, r3
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2201      	movs	r2, #1
 8004de6:	70da      	strb	r2, [r3, #3]
			break;
 8004de8:	e074      	b.n	8004ed4 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	899b      	ldrh	r3, [r3, #12]
 8004df2:	085b      	lsrs	r3, r3, #1
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	4619      	mov	r1, r3
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8004dfe:	4413      	add	r3, r2
 8004e00:	4619      	mov	r1, r3
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f7ff fdbe 	bl	8004984 <move_window>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004e0c:	7ffb      	ldrb	r3, [r7, #31]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d15d      	bne.n	8004ece <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	005b      	lsls	r3, r3, #1
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	8992      	ldrh	r2, [r2, #12]
 8004e20:	fbb3 f0f2 	udiv	r0, r3, r2
 8004e24:	fb02 f200 	mul.w	r2, r2, r0
 8004e28:	1a9b      	subs	r3, r3, r2
 8004e2a:	440b      	add	r3, r1
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	b292      	uxth	r2, r2
 8004e30:	4611      	mov	r1, r2
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7ff fb31 	bl	800449a <st_word>
			fs->wflag = 1;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	70da      	strb	r2, [r3, #3]
			break;
 8004e3e:	e049      	b.n	8004ed4 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	899b      	ldrh	r3, [r3, #12]
 8004e48:	089b      	lsrs	r3, r3, #2
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e54:	4413      	add	r3, r2
 8004e56:	4619      	mov	r1, r3
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f7ff fd93 	bl	8004984 <move_window>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004e62:	7ffb      	ldrb	r3, [r7, #31]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d134      	bne.n	8004ed2 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	8992      	ldrh	r2, [r2, #12]
 8004e7c:	fbb3 f0f2 	udiv	r0, r3, r2
 8004e80:	fb02 f200 	mul.w	r2, r2, r0
 8004e84:	1a9b      	subs	r3, r3, r2
 8004e86:	440b      	add	r3, r1
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7ff fae3 	bl	8004454 <ld_dword>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004e94:	4323      	orrs	r3, r4
 8004e96:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	8992      	ldrh	r2, [r2, #12]
 8004ea6:	fbb3 f0f2 	udiv	r0, r3, r2
 8004eaa:	fb02 f200 	mul.w	r2, r2, r0
 8004eae:	1a9b      	subs	r3, r3, r2
 8004eb0:	440b      	add	r3, r1
 8004eb2:	6879      	ldr	r1, [r7, #4]
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f7ff fb0b 	bl	80044d0 <st_dword>
			fs->wflag = 1;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	70da      	strb	r2, [r3, #3]
			break;
 8004ec0:	e008      	b.n	8004ed4 <put_fat+0x22e>
		}
	}
 8004ec2:	bf00      	nop
 8004ec4:	e006      	b.n	8004ed4 <put_fat+0x22e>
			if (res != FR_OK) break;
 8004ec6:	bf00      	nop
 8004ec8:	e004      	b.n	8004ed4 <put_fat+0x22e>
			if (res != FR_OK) break;
 8004eca:	bf00      	nop
 8004ecc:	e002      	b.n	8004ed4 <put_fat+0x22e>
			if (res != FR_OK) break;
 8004ece:	bf00      	nop
 8004ed0:	e000      	b.n	8004ed4 <put_fat+0x22e>
			if (res != FR_OK) break;
 8004ed2:	bf00      	nop
	return res;
 8004ed4:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3724      	adds	r7, #36	; 0x24
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd90      	pop	{r4, r7, pc}

08004ede <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b088      	sub	sp, #32
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	60f8      	str	r0, [r7, #12]
 8004ee6:	60b9      	str	r1, [r7, #8]
 8004ee8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004eea:	2300      	movs	r3, #0
 8004eec:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d904      	bls.n	8004f04 <remove_chain+0x26>
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	68ba      	ldr	r2, [r7, #8]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d301      	bcc.n	8004f08 <remove_chain+0x2a>
 8004f04:	2302      	movs	r3, #2
 8004f06:	e04b      	b.n	8004fa0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00c      	beq.n	8004f28 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004f0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f12:	6879      	ldr	r1, [r7, #4]
 8004f14:	69b8      	ldr	r0, [r7, #24]
 8004f16:	f7ff fec6 	bl	8004ca6 <put_fat>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004f1e:	7ffb      	ldrb	r3, [r7, #31]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d001      	beq.n	8004f28 <remove_chain+0x4a>
 8004f24:	7ffb      	ldrb	r3, [r7, #31]
 8004f26:	e03b      	b.n	8004fa0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004f28:	68b9      	ldr	r1, [r7, #8]
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f7ff fde7 	bl	8004afe <get_fat>
 8004f30:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d031      	beq.n	8004f9c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d101      	bne.n	8004f42 <remove_chain+0x64>
 8004f3e:	2302      	movs	r3, #2
 8004f40:	e02e      	b.n	8004fa0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f48:	d101      	bne.n	8004f4e <remove_chain+0x70>
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e028      	b.n	8004fa0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004f4e:	2200      	movs	r2, #0
 8004f50:	68b9      	ldr	r1, [r7, #8]
 8004f52:	69b8      	ldr	r0, [r7, #24]
 8004f54:	f7ff fea7 	bl	8004ca6 <put_fat>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004f5c:	7ffb      	ldrb	r3, [r7, #31]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <remove_chain+0x88>
 8004f62:	7ffb      	ldrb	r3, [r7, #31]
 8004f64:	e01c      	b.n	8004fa0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	695a      	ldr	r2, [r3, #20]
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	3b02      	subs	r3, #2
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d20b      	bcs.n	8004f8c <remove_chain+0xae>
			fs->free_clst++;
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	1c5a      	adds	r2, r3, #1
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	791b      	ldrb	r3, [r3, #4]
 8004f82:	f043 0301 	orr.w	r3, r3, #1
 8004f86:	b2da      	uxtb	r2, r3
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	68ba      	ldr	r2, [r7, #8]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d3c6      	bcc.n	8004f28 <remove_chain+0x4a>
 8004f9a:	e000      	b.n	8004f9e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004f9c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3720      	adds	r7, #32
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b088      	sub	sp, #32
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d10d      	bne.n	8004fda <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d004      	beq.n	8004fd4 <create_chain+0x2c>
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d31b      	bcc.n	800500c <create_chain+0x64>
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	61bb      	str	r3, [r7, #24]
 8004fd8:	e018      	b.n	800500c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004fda:	6839      	ldr	r1, [r7, #0]
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f7ff fd8e 	bl	8004afe <get_fat>
 8004fe2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d801      	bhi.n	8004fee <create_chain+0x46>
 8004fea:	2301      	movs	r3, #1
 8004fec:	e070      	b.n	80050d0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ff4:	d101      	bne.n	8004ffa <create_chain+0x52>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	e06a      	b.n	80050d0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	429a      	cmp	r2, r3
 8005002:	d201      	bcs.n	8005008 <create_chain+0x60>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	e063      	b.n	80050d0 <create_chain+0x128>
		scl = clst;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	3301      	adds	r3, #1
 8005014:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	69fa      	ldr	r2, [r7, #28]
 800501c:	429a      	cmp	r2, r3
 800501e:	d307      	bcc.n	8005030 <create_chain+0x88>
				ncl = 2;
 8005020:	2302      	movs	r3, #2
 8005022:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005024:	69fa      	ldr	r2, [r7, #28]
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	429a      	cmp	r2, r3
 800502a:	d901      	bls.n	8005030 <create_chain+0x88>
 800502c:	2300      	movs	r3, #0
 800502e:	e04f      	b.n	80050d0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005030:	69f9      	ldr	r1, [r7, #28]
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f7ff fd63 	bl	8004afe <get_fat>
 8005038:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00e      	beq.n	800505e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d003      	beq.n	800504e <create_chain+0xa6>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800504c:	d101      	bne.n	8005052 <create_chain+0xaa>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	e03e      	b.n	80050d0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005052:	69fa      	ldr	r2, [r7, #28]
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	429a      	cmp	r2, r3
 8005058:	d1da      	bne.n	8005010 <create_chain+0x68>
 800505a:	2300      	movs	r3, #0
 800505c:	e038      	b.n	80050d0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800505e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005060:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005064:	69f9      	ldr	r1, [r7, #28]
 8005066:	6938      	ldr	r0, [r7, #16]
 8005068:	f7ff fe1d 	bl	8004ca6 <put_fat>
 800506c:	4603      	mov	r3, r0
 800506e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005070:	7dfb      	ldrb	r3, [r7, #23]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d109      	bne.n	800508a <create_chain+0xe2>
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d006      	beq.n	800508a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800507c:	69fa      	ldr	r2, [r7, #28]
 800507e:	6839      	ldr	r1, [r7, #0]
 8005080:	6938      	ldr	r0, [r7, #16]
 8005082:	f7ff fe10 	bl	8004ca6 <put_fat>
 8005086:	4603      	mov	r3, r0
 8005088:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800508a:	7dfb      	ldrb	r3, [r7, #23]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d116      	bne.n	80050be <create_chain+0x116>
		fs->last_clst = ncl;
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	69fa      	ldr	r2, [r7, #28]
 8005094:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	695a      	ldr	r2, [r3, #20]
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	3b02      	subs	r3, #2
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d804      	bhi.n	80050ae <create_chain+0x106>
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	1e5a      	subs	r2, r3, #1
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	791b      	ldrb	r3, [r3, #4]
 80050b2:	f043 0301 	orr.w	r3, r3, #1
 80050b6:	b2da      	uxtb	r2, r3
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	711a      	strb	r2, [r3, #4]
 80050bc:	e007      	b.n	80050ce <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80050be:	7dfb      	ldrb	r3, [r7, #23]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d102      	bne.n	80050ca <create_chain+0x122>
 80050c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050c8:	e000      	b.n	80050cc <create_chain+0x124>
 80050ca:	2301      	movs	r3, #1
 80050cc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80050ce:	69fb      	ldr	r3, [r7, #28]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3720      	adds	r7, #32
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80050d8:	b480      	push	{r7}
 80050da:	b087      	sub	sp, #28
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ec:	3304      	adds	r3, #4
 80050ee:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	899b      	ldrh	r3, [r3, #12]
 80050f4:	461a      	mov	r2, r3
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	8952      	ldrh	r2, [r2, #10]
 8005100:	fbb3 f3f2 	udiv	r3, r3, r2
 8005104:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	1d1a      	adds	r2, r3, #4
 800510a:	613a      	str	r2, [r7, #16]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d101      	bne.n	800511a <clmt_clust+0x42>
 8005116:	2300      	movs	r3, #0
 8005118:	e010      	b.n	800513c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	429a      	cmp	r2, r3
 8005120:	d307      	bcc.n	8005132 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	617b      	str	r3, [r7, #20]
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	3304      	adds	r3, #4
 800512e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005130:	e7e9      	b.n	8005106 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8005132:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	4413      	add	r3, r2
}
 800513c:	4618      	mov	r0, r3
 800513e:	371c      	adds	r7, #28
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b086      	sub	sp, #24
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800515e:	d204      	bcs.n	800516a <dir_sdi+0x22>
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	f003 031f 	and.w	r3, r3, #31
 8005166:	2b00      	cmp	r3, #0
 8005168:	d001      	beq.n	800516e <dir_sdi+0x26>
		return FR_INT_ERR;
 800516a:	2302      	movs	r3, #2
 800516c:	e071      	b.n	8005252 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d106      	bne.n	800518e <dir_sdi+0x46>
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	2b02      	cmp	r3, #2
 8005186:	d902      	bls.n	800518e <dir_sdi+0x46>
		clst = fs->dirbase;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10c      	bne.n	80051ae <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	095b      	lsrs	r3, r3, #5
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	8912      	ldrh	r2, [r2, #8]
 800519c:	4293      	cmp	r3, r2
 800519e:	d301      	bcc.n	80051a4 <dir_sdi+0x5c>
 80051a0:	2302      	movs	r3, #2
 80051a2:	e056      	b.n	8005252 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	61da      	str	r2, [r3, #28]
 80051ac:	e02d      	b.n	800520a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	895b      	ldrh	r3, [r3, #10]
 80051b2:	461a      	mov	r2, r3
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	899b      	ldrh	r3, [r3, #12]
 80051b8:	fb03 f302 	mul.w	r3, r3, r2
 80051bc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80051be:	e019      	b.n	80051f4 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6979      	ldr	r1, [r7, #20]
 80051c4:	4618      	mov	r0, r3
 80051c6:	f7ff fc9a 	bl	8004afe <get_fat>
 80051ca:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051d2:	d101      	bne.n	80051d8 <dir_sdi+0x90>
 80051d4:	2301      	movs	r3, #1
 80051d6:	e03c      	b.n	8005252 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d904      	bls.n	80051e8 <dir_sdi+0xa0>
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d301      	bcc.n	80051ec <dir_sdi+0xa4>
 80051e8:	2302      	movs	r3, #2
 80051ea:	e032      	b.n	8005252 <dir_sdi+0x10a>
			ofs -= csz;
 80051ec:	683a      	ldr	r2, [r7, #0]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80051f4:	683a      	ldr	r2, [r7, #0]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d2e1      	bcs.n	80051c0 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80051fc:	6979      	ldr	r1, [r7, #20]
 80051fe:	6938      	ldr	r0, [r7, #16]
 8005200:	f7ff fc5e 	bl	8004ac0 <clust2sect>
 8005204:	4602      	mov	r2, r0
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	69db      	ldr	r3, [r3, #28]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d101      	bne.n	800521c <dir_sdi+0xd4>
 8005218:	2302      	movs	r3, #2
 800521a:	e01a      	b.n	8005252 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	69da      	ldr	r2, [r3, #28]
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	899b      	ldrh	r3, [r3, #12]
 8005224:	4619      	mov	r1, r3
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	fbb3 f3f1 	udiv	r3, r3, r1
 800522c:	441a      	add	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	899b      	ldrh	r3, [r3, #12]
 800523c:	461a      	mov	r2, r3
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	fbb3 f0f2 	udiv	r0, r3, r2
 8005244:	fb02 f200 	mul.w	r2, r2, r0
 8005248:	1a9b      	subs	r3, r3, r2
 800524a:	18ca      	adds	r2, r1, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3718      	adds	r7, #24
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b086      	sub	sp, #24
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
 8005262:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	3320      	adds	r3, #32
 8005270:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <dir_next+0x28>
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005280:	d301      	bcc.n	8005286 <dir_next+0x2c>
 8005282:	2304      	movs	r3, #4
 8005284:	e0bb      	b.n	80053fe <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	899b      	ldrh	r3, [r3, #12]
 800528a:	461a      	mov	r2, r3
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005292:	fb02 f201 	mul.w	r2, r2, r1
 8005296:	1a9b      	subs	r3, r3, r2
 8005298:	2b00      	cmp	r3, #0
 800529a:	f040 809d 	bne.w	80053d8 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	1c5a      	adds	r2, r3, #1
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10b      	bne.n	80052c8 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	095b      	lsrs	r3, r3, #5
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	8912      	ldrh	r2, [r2, #8]
 80052b8:	4293      	cmp	r3, r2
 80052ba:	f0c0 808d 	bcc.w	80053d8 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	61da      	str	r2, [r3, #28]
 80052c4:	2304      	movs	r3, #4
 80052c6:	e09a      	b.n	80053fe <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	899b      	ldrh	r3, [r3, #12]
 80052cc:	461a      	mov	r2, r3
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	8952      	ldrh	r2, [r2, #10]
 80052d8:	3a01      	subs	r2, #1
 80052da:	4013      	ands	r3, r2
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d17b      	bne.n	80053d8 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	4619      	mov	r1, r3
 80052e8:	4610      	mov	r0, r2
 80052ea:	f7ff fc08 	bl	8004afe <get_fat>
 80052ee:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d801      	bhi.n	80052fa <dir_next+0xa0>
 80052f6:	2302      	movs	r3, #2
 80052f8:	e081      	b.n	80053fe <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005300:	d101      	bne.n	8005306 <dir_next+0xac>
 8005302:	2301      	movs	r3, #1
 8005304:	e07b      	b.n	80053fe <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	429a      	cmp	r2, r3
 800530e:	d359      	bcc.n	80053c4 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d104      	bne.n	8005320 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	61da      	str	r2, [r3, #28]
 800531c:	2304      	movs	r3, #4
 800531e:	e06e      	b.n	80053fe <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	4619      	mov	r1, r3
 8005328:	4610      	mov	r0, r2
 800532a:	f7ff fe3d 	bl	8004fa8 <create_chain>
 800532e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d101      	bne.n	800533a <dir_next+0xe0>
 8005336:	2307      	movs	r3, #7
 8005338:	e061      	b.n	80053fe <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d101      	bne.n	8005344 <dir_next+0xea>
 8005340:	2302      	movs	r3, #2
 8005342:	e05c      	b.n	80053fe <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800534a:	d101      	bne.n	8005350 <dir_next+0xf6>
 800534c:	2301      	movs	r3, #1
 800534e:	e056      	b.n	80053fe <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f7ff fad3 	bl	80048fc <sync_window>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d001      	beq.n	8005360 <dir_next+0x106>
 800535c:	2301      	movs	r3, #1
 800535e:	e04e      	b.n	80053fe <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	899b      	ldrh	r3, [r3, #12]
 800536a:	461a      	mov	r2, r3
 800536c:	2100      	movs	r1, #0
 800536e:	f7ff f8fc 	bl	800456a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005372:	2300      	movs	r3, #0
 8005374:	613b      	str	r3, [r7, #16]
 8005376:	6979      	ldr	r1, [r7, #20]
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f7ff fba1 	bl	8004ac0 <clust2sect>
 800537e:	4602      	mov	r2, r0
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	631a      	str	r2, [r3, #48]	; 0x30
 8005384:	e012      	b.n	80053ac <dir_next+0x152>
						fs->wflag = 1;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2201      	movs	r2, #1
 800538a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800538c:	68f8      	ldr	r0, [r7, #12]
 800538e:	f7ff fab5 	bl	80048fc <sync_window>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d001      	beq.n	800539c <dir_next+0x142>
 8005398:	2301      	movs	r3, #1
 800539a:	e030      	b.n	80053fe <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	3301      	adds	r3, #1
 80053a0:	613b      	str	r3, [r7, #16]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a6:	1c5a      	adds	r2, r3, #1
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	631a      	str	r2, [r3, #48]	; 0x30
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	895b      	ldrh	r3, [r3, #10]
 80053b0:	461a      	mov	r2, r3
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d3e6      	bcc.n	8005386 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	1ad2      	subs	r2, r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80053ca:	6979      	ldr	r1, [r7, #20]
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f7ff fb77 	bl	8004ac0 <clust2sect>
 80053d2:	4602      	mov	r2, r0
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	899b      	ldrh	r3, [r3, #12]
 80053e8:	461a      	mov	r2, r3
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	fbb3 f0f2 	udiv	r0, r3, r2
 80053f0:	fb02 f200 	mul.w	r2, r2, r0
 80053f4:	1a9b      	subs	r3, r3, r2
 80053f6:	18ca      	adds	r2, r1, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3718      	adds	r7, #24
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005406:	b580      	push	{r7, lr}
 8005408:	b086      	sub	sp, #24
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
 800540e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005416:	2100      	movs	r1, #0
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f7ff fe95 	bl	8005148 <dir_sdi>
 800541e:	4603      	mov	r3, r0
 8005420:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005422:	7dfb      	ldrb	r3, [r7, #23]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d12b      	bne.n	8005480 <dir_alloc+0x7a>
		n = 0;
 8005428:	2300      	movs	r3, #0
 800542a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	69db      	ldr	r3, [r3, #28]
 8005430:	4619      	mov	r1, r3
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f7ff faa6 	bl	8004984 <move_window>
 8005438:	4603      	mov	r3, r0
 800543a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800543c:	7dfb      	ldrb	r3, [r7, #23]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d11d      	bne.n	800547e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	2be5      	cmp	r3, #229	; 0xe5
 800544a:	d004      	beq.n	8005456 <dir_alloc+0x50>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a1b      	ldr	r3, [r3, #32]
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d107      	bne.n	8005466 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	3301      	adds	r3, #1
 800545a:	613b      	str	r3, [r7, #16]
 800545c:	693a      	ldr	r2, [r7, #16]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	429a      	cmp	r2, r3
 8005462:	d102      	bne.n	800546a <dir_alloc+0x64>
 8005464:	e00c      	b.n	8005480 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005466:	2300      	movs	r3, #0
 8005468:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800546a:	2101      	movs	r1, #1
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f7ff fef4 	bl	800525a <dir_next>
 8005472:	4603      	mov	r3, r0
 8005474:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005476:	7dfb      	ldrb	r3, [r7, #23]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d0d7      	beq.n	800542c <dir_alloc+0x26>
 800547c:	e000      	b.n	8005480 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800547e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005480:	7dfb      	ldrb	r3, [r7, #23]
 8005482:	2b04      	cmp	r3, #4
 8005484:	d101      	bne.n	800548a <dir_alloc+0x84>
 8005486:	2307      	movs	r3, #7
 8005488:	75fb      	strb	r3, [r7, #23]
	return res;
 800548a:	7dfb      	ldrb	r3, [r7, #23]
}
 800548c:	4618      	mov	r0, r3
 800548e:	3718      	adds	r7, #24
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	331a      	adds	r3, #26
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7fe ffbe 	bl	8004424 <ld_word>
 80054a8:	4603      	mov	r3, r0
 80054aa:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	2b03      	cmp	r3, #3
 80054b2:	d109      	bne.n	80054c8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	3314      	adds	r3, #20
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7fe ffb3 	bl	8004424 <ld_word>
 80054be:	4603      	mov	r3, r0
 80054c0:	041b      	lsls	r3, r3, #16
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80054c8:	68fb      	ldr	r3, [r7, #12]
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3710      	adds	r7, #16
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b084      	sub	sp, #16
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	60f8      	str	r0, [r7, #12]
 80054da:	60b9      	str	r1, [r7, #8]
 80054dc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	331a      	adds	r3, #26
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	b292      	uxth	r2, r2
 80054e6:	4611      	mov	r1, r2
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7fe ffd6 	bl	800449a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	2b03      	cmp	r3, #3
 80054f4:	d109      	bne.n	800550a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	f103 0214 	add.w	r2, r3, #20
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	0c1b      	lsrs	r3, r3, #16
 8005500:	b29b      	uxth	r3, r3
 8005502:	4619      	mov	r1, r3
 8005504:	4610      	mov	r0, r2
 8005506:	f7fe ffc8 	bl	800449a <st_word>
	}
}
 800550a:	bf00      	nop
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b086      	sub	sp, #24
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005520:	2100      	movs	r1, #0
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f7ff fe10 	bl	8005148 <dir_sdi>
 8005528:	4603      	mov	r3, r0
 800552a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800552c:	7dfb      	ldrb	r3, [r7, #23]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d001      	beq.n	8005536 <dir_find+0x24>
 8005532:	7dfb      	ldrb	r3, [r7, #23]
 8005534:	e03e      	b.n	80055b4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	69db      	ldr	r3, [r3, #28]
 800553a:	4619      	mov	r1, r3
 800553c:	6938      	ldr	r0, [r7, #16]
 800553e:	f7ff fa21 	bl	8004984 <move_window>
 8005542:	4603      	mov	r3, r0
 8005544:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005546:	7dfb      	ldrb	r3, [r7, #23]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d12f      	bne.n	80055ac <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a1b      	ldr	r3, [r3, #32]
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005554:	7bfb      	ldrb	r3, [r7, #15]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d102      	bne.n	8005560 <dir_find+0x4e>
 800555a:	2304      	movs	r3, #4
 800555c:	75fb      	strb	r3, [r7, #23]
 800555e:	e028      	b.n	80055b2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a1b      	ldr	r3, [r3, #32]
 8005564:	330b      	adds	r3, #11
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800556c:	b2da      	uxtb	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	330b      	adds	r3, #11
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	f003 0308 	and.w	r3, r3, #8
 800557e:	2b00      	cmp	r3, #0
 8005580:	d10a      	bne.n	8005598 <dir_find+0x86>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a18      	ldr	r0, [r3, #32]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	3324      	adds	r3, #36	; 0x24
 800558a:	220b      	movs	r2, #11
 800558c:	4619      	mov	r1, r3
 800558e:	f7ff f807 	bl	80045a0 <mem_cmp>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00b      	beq.n	80055b0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005598:	2100      	movs	r1, #0
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f7ff fe5d 	bl	800525a <dir_next>
 80055a0:	4603      	mov	r3, r0
 80055a2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80055a4:	7dfb      	ldrb	r3, [r7, #23]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d0c5      	beq.n	8005536 <dir_find+0x24>
 80055aa:	e002      	b.n	80055b2 <dir_find+0xa0>
		if (res != FR_OK) break;
 80055ac:	bf00      	nop
 80055ae:	e000      	b.n	80055b2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80055b0:	bf00      	nop

	return res;
 80055b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3718      	adds	r7, #24
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80055ca:	2101      	movs	r1, #1
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f7ff ff1a 	bl	8005406 <dir_alloc>
 80055d2:	4603      	mov	r3, r0
 80055d4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80055d6:	7bfb      	ldrb	r3, [r7, #15]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d11c      	bne.n	8005616 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	69db      	ldr	r3, [r3, #28]
 80055e0:	4619      	mov	r1, r3
 80055e2:	68b8      	ldr	r0, [r7, #8]
 80055e4:	f7ff f9ce 	bl	8004984 <move_window>
 80055e8:	4603      	mov	r3, r0
 80055ea:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80055ec:	7bfb      	ldrb	r3, [r7, #15]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d111      	bne.n	8005616 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	2220      	movs	r2, #32
 80055f8:	2100      	movs	r1, #0
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7fe ffb5 	bl	800456a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a18      	ldr	r0, [r3, #32]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	3324      	adds	r3, #36	; 0x24
 8005608:	220b      	movs	r2, #11
 800560a:	4619      	mov	r1, r3
 800560c:	f7fe ff8c 	bl	8004528 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	2201      	movs	r2, #1
 8005614:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005616:	7bfb      	ldrb	r3, [r7, #15]
}
 8005618:	4618      	mov	r0, r3
 800561a:	3710      	adds	r7, #16
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b088      	sub	sp, #32
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	60fb      	str	r3, [r7, #12]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	3324      	adds	r3, #36	; 0x24
 8005634:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005636:	220b      	movs	r2, #11
 8005638:	2120      	movs	r1, #32
 800563a:	68b8      	ldr	r0, [r7, #8]
 800563c:	f7fe ff95 	bl	800456a <mem_set>
	si = i = 0; ni = 8;
 8005640:	2300      	movs	r3, #0
 8005642:	613b      	str	r3, [r7, #16]
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	61fb      	str	r3, [r7, #28]
 8005648:	2308      	movs	r3, #8
 800564a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	1c5a      	adds	r2, r3, #1
 8005650:	61fa      	str	r2, [r7, #28]
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	4413      	add	r3, r2
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800565a:	7efb      	ldrb	r3, [r7, #27]
 800565c:	2b20      	cmp	r3, #32
 800565e:	d94e      	bls.n	80056fe <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8005660:	7efb      	ldrb	r3, [r7, #27]
 8005662:	2b2f      	cmp	r3, #47	; 0x2f
 8005664:	d006      	beq.n	8005674 <create_name+0x54>
 8005666:	7efb      	ldrb	r3, [r7, #27]
 8005668:	2b5c      	cmp	r3, #92	; 0x5c
 800566a:	d110      	bne.n	800568e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800566c:	e002      	b.n	8005674 <create_name+0x54>
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	3301      	adds	r3, #1
 8005672:	61fb      	str	r3, [r7, #28]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	4413      	add	r3, r2
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	2b2f      	cmp	r3, #47	; 0x2f
 800567e:	d0f6      	beq.n	800566e <create_name+0x4e>
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	4413      	add	r3, r2
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	2b5c      	cmp	r3, #92	; 0x5c
 800568a:	d0f0      	beq.n	800566e <create_name+0x4e>
			break;
 800568c:	e038      	b.n	8005700 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800568e:	7efb      	ldrb	r3, [r7, #27]
 8005690:	2b2e      	cmp	r3, #46	; 0x2e
 8005692:	d003      	beq.n	800569c <create_name+0x7c>
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	429a      	cmp	r2, r3
 800569a:	d30c      	bcc.n	80056b6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	2b0b      	cmp	r3, #11
 80056a0:	d002      	beq.n	80056a8 <create_name+0x88>
 80056a2:	7efb      	ldrb	r3, [r7, #27]
 80056a4:	2b2e      	cmp	r3, #46	; 0x2e
 80056a6:	d001      	beq.n	80056ac <create_name+0x8c>
 80056a8:	2306      	movs	r3, #6
 80056aa:	e044      	b.n	8005736 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80056ac:	2308      	movs	r3, #8
 80056ae:	613b      	str	r3, [r7, #16]
 80056b0:	230b      	movs	r3, #11
 80056b2:	617b      	str	r3, [r7, #20]
			continue;
 80056b4:	e022      	b.n	80056fc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80056b6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	da04      	bge.n	80056c8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80056be:	7efb      	ldrb	r3, [r7, #27]
 80056c0:	3b80      	subs	r3, #128	; 0x80
 80056c2:	4a1f      	ldr	r2, [pc, #124]	; (8005740 <create_name+0x120>)
 80056c4:	5cd3      	ldrb	r3, [r2, r3]
 80056c6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80056c8:	7efb      	ldrb	r3, [r7, #27]
 80056ca:	4619      	mov	r1, r3
 80056cc:	481d      	ldr	r0, [pc, #116]	; (8005744 <create_name+0x124>)
 80056ce:	f7fe ff8e 	bl	80045ee <chk_chr>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d001      	beq.n	80056dc <create_name+0xbc>
 80056d8:	2306      	movs	r3, #6
 80056da:	e02c      	b.n	8005736 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80056dc:	7efb      	ldrb	r3, [r7, #27]
 80056de:	2b60      	cmp	r3, #96	; 0x60
 80056e0:	d905      	bls.n	80056ee <create_name+0xce>
 80056e2:	7efb      	ldrb	r3, [r7, #27]
 80056e4:	2b7a      	cmp	r3, #122	; 0x7a
 80056e6:	d802      	bhi.n	80056ee <create_name+0xce>
 80056e8:	7efb      	ldrb	r3, [r7, #27]
 80056ea:	3b20      	subs	r3, #32
 80056ec:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	1c5a      	adds	r2, r3, #1
 80056f2:	613a      	str	r2, [r7, #16]
 80056f4:	68ba      	ldr	r2, [r7, #8]
 80056f6:	4413      	add	r3, r2
 80056f8:	7efa      	ldrb	r2, [r7, #27]
 80056fa:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80056fc:	e7a6      	b.n	800564c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80056fe:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	441a      	add	r2, r3
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d101      	bne.n	8005714 <create_name+0xf4>
 8005710:	2306      	movs	r3, #6
 8005712:	e010      	b.n	8005736 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	2be5      	cmp	r3, #229	; 0xe5
 800571a:	d102      	bne.n	8005722 <create_name+0x102>
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	2205      	movs	r2, #5
 8005720:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005722:	7efb      	ldrb	r3, [r7, #27]
 8005724:	2b20      	cmp	r3, #32
 8005726:	d801      	bhi.n	800572c <create_name+0x10c>
 8005728:	2204      	movs	r2, #4
 800572a:	e000      	b.n	800572e <create_name+0x10e>
 800572c:	2200      	movs	r2, #0
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	330b      	adds	r3, #11
 8005732:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005734:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8005736:	4618      	mov	r0, r3
 8005738:	3720      	adds	r7, #32
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	0800849c 	.word	0x0800849c
 8005744:	0800842c 	.word	0x0800842c

08005748 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b086      	sub	sp, #24
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800575c:	e002      	b.n	8005764 <follow_path+0x1c>
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	3301      	adds	r3, #1
 8005762:	603b      	str	r3, [r7, #0]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	2b2f      	cmp	r3, #47	; 0x2f
 800576a:	d0f8      	beq.n	800575e <follow_path+0x16>
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	2b5c      	cmp	r3, #92	; 0x5c
 8005772:	d0f4      	beq.n	800575e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	2200      	movs	r2, #0
 8005778:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	2b1f      	cmp	r3, #31
 8005780:	d80a      	bhi.n	8005798 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2280      	movs	r2, #128	; 0x80
 8005786:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800578a:	2100      	movs	r1, #0
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f7ff fcdb 	bl	8005148 <dir_sdi>
 8005792:	4603      	mov	r3, r0
 8005794:	75fb      	strb	r3, [r7, #23]
 8005796:	e048      	b.n	800582a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005798:	463b      	mov	r3, r7
 800579a:	4619      	mov	r1, r3
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f7ff ff3f 	bl	8005620 <create_name>
 80057a2:	4603      	mov	r3, r0
 80057a4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80057a6:	7dfb      	ldrb	r3, [r7, #23]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d139      	bne.n	8005820 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f7ff feb0 	bl	8005512 <dir_find>
 80057b2:	4603      	mov	r3, r0
 80057b4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80057bc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80057be:	7dfb      	ldrb	r3, [r7, #23]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00a      	beq.n	80057da <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80057c4:	7dfb      	ldrb	r3, [r7, #23]
 80057c6:	2b04      	cmp	r3, #4
 80057c8:	d12c      	bne.n	8005824 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80057ca:	7afb      	ldrb	r3, [r7, #11]
 80057cc:	f003 0304 	and.w	r3, r3, #4
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d127      	bne.n	8005824 <follow_path+0xdc>
 80057d4:	2305      	movs	r3, #5
 80057d6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80057d8:	e024      	b.n	8005824 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80057da:	7afb      	ldrb	r3, [r7, #11]
 80057dc:	f003 0304 	and.w	r3, r3, #4
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d121      	bne.n	8005828 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	799b      	ldrb	r3, [r3, #6]
 80057e8:	f003 0310 	and.w	r3, r3, #16
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d102      	bne.n	80057f6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80057f0:	2305      	movs	r3, #5
 80057f2:	75fb      	strb	r3, [r7, #23]
 80057f4:	e019      	b.n	800582a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	695b      	ldr	r3, [r3, #20]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	8992      	ldrh	r2, [r2, #12]
 8005804:	fbb3 f0f2 	udiv	r0, r3, r2
 8005808:	fb02 f200 	mul.w	r2, r2, r0
 800580c:	1a9b      	subs	r3, r3, r2
 800580e:	440b      	add	r3, r1
 8005810:	4619      	mov	r1, r3
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f7ff fe3e 	bl	8005494 <ld_clust>
 8005818:	4602      	mov	r2, r0
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800581e:	e7bb      	b.n	8005798 <follow_path+0x50>
			if (res != FR_OK) break;
 8005820:	bf00      	nop
 8005822:	e002      	b.n	800582a <follow_path+0xe2>
				break;
 8005824:	bf00      	nop
 8005826:	e000      	b.n	800582a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005828:	bf00      	nop
			}
		}
	}

	return res;
 800582a:	7dfb      	ldrb	r3, [r7, #23]
}
 800582c:	4618      	mov	r0, r3
 800582e:	3718      	adds	r7, #24
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005834:	b480      	push	{r7}
 8005836:	b087      	sub	sp, #28
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800583c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005840:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d031      	beq.n	80058ae <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	617b      	str	r3, [r7, #20]
 8005850:	e002      	b.n	8005858 <get_ldnumber+0x24>
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	3301      	adds	r3, #1
 8005856:	617b      	str	r3, [r7, #20]
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	2b20      	cmp	r3, #32
 800585e:	d903      	bls.n	8005868 <get_ldnumber+0x34>
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	2b3a      	cmp	r3, #58	; 0x3a
 8005866:	d1f4      	bne.n	8005852 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	2b3a      	cmp	r3, #58	; 0x3a
 800586e:	d11c      	bne.n	80058aa <get_ldnumber+0x76>
			tp = *path;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	1c5a      	adds	r2, r3, #1
 800587a:	60fa      	str	r2, [r7, #12]
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	3b30      	subs	r3, #48	; 0x30
 8005880:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	2b09      	cmp	r3, #9
 8005886:	d80e      	bhi.n	80058a6 <get_ldnumber+0x72>
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	429a      	cmp	r2, r3
 800588e:	d10a      	bne.n	80058a6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d107      	bne.n	80058a6 <get_ldnumber+0x72>
					vol = (int)i;
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	3301      	adds	r3, #1
 800589e:	617b      	str	r3, [r7, #20]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	e002      	b.n	80058b0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80058aa:	2300      	movs	r3, #0
 80058ac:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80058ae:	693b      	ldr	r3, [r7, #16]
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	371c      	adds	r7, #28
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	70da      	strb	r2, [r3, #3]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058d2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80058d4:	6839      	ldr	r1, [r7, #0]
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f7ff f854 	bl	8004984 <move_window>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d001      	beq.n	80058e6 <check_fs+0x2a>
 80058e2:	2304      	movs	r3, #4
 80058e4:	e038      	b.n	8005958 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	3334      	adds	r3, #52	; 0x34
 80058ea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7fe fd98 	bl	8004424 <ld_word>
 80058f4:	4603      	mov	r3, r0
 80058f6:	461a      	mov	r2, r3
 80058f8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d001      	beq.n	8005904 <check_fs+0x48>
 8005900:	2303      	movs	r3, #3
 8005902:	e029      	b.n	8005958 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800590a:	2be9      	cmp	r3, #233	; 0xe9
 800590c:	d009      	beq.n	8005922 <check_fs+0x66>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005914:	2beb      	cmp	r3, #235	; 0xeb
 8005916:	d11e      	bne.n	8005956 <check_fs+0x9a>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800591e:	2b90      	cmp	r3, #144	; 0x90
 8005920:	d119      	bne.n	8005956 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	3334      	adds	r3, #52	; 0x34
 8005926:	3336      	adds	r3, #54	; 0x36
 8005928:	4618      	mov	r0, r3
 800592a:	f7fe fd93 	bl	8004454 <ld_dword>
 800592e:	4603      	mov	r3, r0
 8005930:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005934:	4a0a      	ldr	r2, [pc, #40]	; (8005960 <check_fs+0xa4>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d101      	bne.n	800593e <check_fs+0x82>
 800593a:	2300      	movs	r3, #0
 800593c:	e00c      	b.n	8005958 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	3334      	adds	r3, #52	; 0x34
 8005942:	3352      	adds	r3, #82	; 0x52
 8005944:	4618      	mov	r0, r3
 8005946:	f7fe fd85 	bl	8004454 <ld_dword>
 800594a:	4603      	mov	r3, r0
 800594c:	4a05      	ldr	r2, [pc, #20]	; (8005964 <check_fs+0xa8>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d101      	bne.n	8005956 <check_fs+0x9a>
 8005952:	2300      	movs	r3, #0
 8005954:	e000      	b.n	8005958 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005956:	2302      	movs	r3, #2
}
 8005958:	4618      	mov	r0, r3
 800595a:	3708      	adds	r7, #8
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}
 8005960:	00544146 	.word	0x00544146
 8005964:	33544146 	.word	0x33544146

08005968 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b096      	sub	sp, #88	; 0x58
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	4613      	mov	r3, r2
 8005974:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	2200      	movs	r2, #0
 800597a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f7ff ff59 	bl	8005834 <get_ldnumber>
 8005982:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005986:	2b00      	cmp	r3, #0
 8005988:	da01      	bge.n	800598e <find_volume+0x26>
 800598a:	230b      	movs	r3, #11
 800598c:	e265      	b.n	8005e5a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800598e:	4ab0      	ldr	r2, [pc, #704]	; (8005c50 <find_volume+0x2e8>)
 8005990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005996:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800599a:	2b00      	cmp	r3, #0
 800599c:	d101      	bne.n	80059a2 <find_volume+0x3a>
 800599e:	230c      	movs	r3, #12
 80059a0:	e25b      	b.n	8005e5a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059a6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80059a8:	79fb      	ldrb	r3, [r7, #7]
 80059aa:	f023 0301 	bic.w	r3, r3, #1
 80059ae:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80059b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d01a      	beq.n	80059ee <find_volume+0x86>
		stat = disk_status(fs->drv);
 80059b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ba:	785b      	ldrb	r3, [r3, #1]
 80059bc:	4618      	mov	r0, r3
 80059be:	f7fe fc93 	bl	80042e8 <disk_status>
 80059c2:	4603      	mov	r3, r0
 80059c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80059c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80059cc:	f003 0301 	and.w	r3, r3, #1
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10c      	bne.n	80059ee <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80059d4:	79fb      	ldrb	r3, [r7, #7]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d007      	beq.n	80059ea <find_volume+0x82>
 80059da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80059de:	f003 0304 	and.w	r3, r3, #4
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d001      	beq.n	80059ea <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80059e6:	230a      	movs	r3, #10
 80059e8:	e237      	b.n	8005e5a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 80059ea:	2300      	movs	r3, #0
 80059ec:	e235      	b.n	8005e5a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80059ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f0:	2200      	movs	r2, #0
 80059f2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80059f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059f6:	b2da      	uxtb	r2, r3
 80059f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059fa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80059fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059fe:	785b      	ldrb	r3, [r3, #1]
 8005a00:	4618      	mov	r0, r3
 8005a02:	f7fe fc8b 	bl	800431c <disk_initialize>
 8005a06:	4603      	mov	r3, r0
 8005a08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005a0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a10:	f003 0301 	and.w	r3, r3, #1
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d001      	beq.n	8005a1c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e21e      	b.n	8005e5a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005a1c:	79fb      	ldrb	r3, [r7, #7]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d007      	beq.n	8005a32 <find_volume+0xca>
 8005a22:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a26:	f003 0304 	and.w	r3, r3, #4
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d001      	beq.n	8005a32 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005a2e:	230a      	movs	r3, #10
 8005a30:	e213      	b.n	8005e5a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8005a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a34:	7858      	ldrb	r0, [r3, #1]
 8005a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a38:	330c      	adds	r3, #12
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	2102      	movs	r1, #2
 8005a3e:	f7fe fcd3 	bl	80043e8 <disk_ioctl>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d001      	beq.n	8005a4c <find_volume+0xe4>
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e206      	b.n	8005e5a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8005a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a4e:	899b      	ldrh	r3, [r3, #12]
 8005a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a54:	d80d      	bhi.n	8005a72 <find_volume+0x10a>
 8005a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a58:	899b      	ldrh	r3, [r3, #12]
 8005a5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a5e:	d308      	bcc.n	8005a72 <find_volume+0x10a>
 8005a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a62:	899b      	ldrh	r3, [r3, #12]
 8005a64:	461a      	mov	r2, r3
 8005a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a68:	899b      	ldrh	r3, [r3, #12]
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d001      	beq.n	8005a76 <find_volume+0x10e>
 8005a72:	2301      	movs	r3, #1
 8005a74:	e1f1      	b.n	8005e5a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005a76:	2300      	movs	r3, #0
 8005a78:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005a7a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005a7e:	f7ff ff1d 	bl	80058bc <check_fs>
 8005a82:	4603      	mov	r3, r0
 8005a84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005a88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d14b      	bne.n	8005b28 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005a90:	2300      	movs	r3, #0
 8005a92:	643b      	str	r3, [r7, #64]	; 0x40
 8005a94:	e01f      	b.n	8005ad6 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a98:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005a9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a9e:	011b      	lsls	r3, r3, #4
 8005aa0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005aa4:	4413      	add	r3, r2
 8005aa6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aaa:	3304      	adds	r3, #4
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d006      	beq.n	8005ac0 <find_volume+0x158>
 8005ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab4:	3308      	adds	r3, #8
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7fe fccc 	bl	8004454 <ld_dword>
 8005abc:	4602      	mov	r2, r0
 8005abe:	e000      	b.n	8005ac2 <find_volume+0x15a>
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005aca:	440b      	add	r3, r1
 8005acc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005ad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	643b      	str	r3, [r7, #64]	; 0x40
 8005ad6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ad8:	2b03      	cmp	r3, #3
 8005ada:	d9dc      	bls.n	8005a96 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005adc:	2300      	movs	r3, #0
 8005ade:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005ae0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d002      	beq.n	8005aec <find_volume+0x184>
 8005ae6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005aec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005af4:	4413      	add	r3, r2
 8005af6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005afa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005afc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d005      	beq.n	8005b0e <find_volume+0x1a6>
 8005b02:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005b04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005b06:	f7ff fed9 	bl	80058bc <check_fs>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	e000      	b.n	8005b10 <find_volume+0x1a8>
 8005b0e:	2303      	movs	r3, #3
 8005b10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005b14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d905      	bls.n	8005b28 <find_volume+0x1c0>
 8005b1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b1e:	3301      	adds	r3, #1
 8005b20:	643b      	str	r3, [r7, #64]	; 0x40
 8005b22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b24:	2b03      	cmp	r3, #3
 8005b26:	d9e1      	bls.n	8005aec <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005b28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b2c:	2b04      	cmp	r3, #4
 8005b2e:	d101      	bne.n	8005b34 <find_volume+0x1cc>
 8005b30:	2301      	movs	r3, #1
 8005b32:	e192      	b.n	8005e5a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005b34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d901      	bls.n	8005b40 <find_volume+0x1d8>
 8005b3c:	230d      	movs	r3, #13
 8005b3e:	e18c      	b.n	8005e5a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b42:	3334      	adds	r3, #52	; 0x34
 8005b44:	330b      	adds	r3, #11
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7fe fc6c 	bl	8004424 <ld_word>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	461a      	mov	r2, r3
 8005b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b52:	899b      	ldrh	r3, [r3, #12]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d001      	beq.n	8005b5c <find_volume+0x1f4>
 8005b58:	230d      	movs	r3, #13
 8005b5a:	e17e      	b.n	8005e5a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5e:	3334      	adds	r3, #52	; 0x34
 8005b60:	3316      	adds	r3, #22
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fe fc5e 	bl	8004424 <ld_word>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005b6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d106      	bne.n	8005b80 <find_volume+0x218>
 8005b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b74:	3334      	adds	r3, #52	; 0x34
 8005b76:	3324      	adds	r3, #36	; 0x24
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7fe fc6b 	bl	8004454 <ld_dword>
 8005b7e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b84:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b88:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b92:	789b      	ldrb	r3, [r3, #2]
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d005      	beq.n	8005ba4 <find_volume+0x23c>
 8005b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9a:	789b      	ldrb	r3, [r3, #2]
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d001      	beq.n	8005ba4 <find_volume+0x23c>
 8005ba0:	230d      	movs	r3, #13
 8005ba2:	e15a      	b.n	8005e5a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba6:	789b      	ldrb	r3, [r3, #2]
 8005ba8:	461a      	mov	r2, r3
 8005baa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bac:	fb02 f303 	mul.w	r3, r2, r3
 8005bb0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bbc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc0:	895b      	ldrh	r3, [r3, #10]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d008      	beq.n	8005bd8 <find_volume+0x270>
 8005bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc8:	895b      	ldrh	r3, [r3, #10]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bce:	895b      	ldrh	r3, [r3, #10]
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d001      	beq.n	8005bdc <find_volume+0x274>
 8005bd8:	230d      	movs	r3, #13
 8005bda:	e13e      	b.n	8005e5a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bde:	3334      	adds	r3, #52	; 0x34
 8005be0:	3311      	adds	r3, #17
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7fe fc1e 	bl	8004424 <ld_word>
 8005be8:	4603      	mov	r3, r0
 8005bea:	461a      	mov	r2, r3
 8005bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bee:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf2:	891b      	ldrh	r3, [r3, #8]
 8005bf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bf6:	8992      	ldrh	r2, [r2, #12]
 8005bf8:	0952      	lsrs	r2, r2, #5
 8005bfa:	b292      	uxth	r2, r2
 8005bfc:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c00:	fb02 f201 	mul.w	r2, r2, r1
 8005c04:	1a9b      	subs	r3, r3, r2
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d001      	beq.n	8005c10 <find_volume+0x2a8>
 8005c0c:	230d      	movs	r3, #13
 8005c0e:	e124      	b.n	8005e5a <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c12:	3334      	adds	r3, #52	; 0x34
 8005c14:	3313      	adds	r3, #19
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7fe fc04 	bl	8004424 <ld_word>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005c20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d106      	bne.n	8005c34 <find_volume+0x2cc>
 8005c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c28:	3334      	adds	r3, #52	; 0x34
 8005c2a:	3320      	adds	r3, #32
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f7fe fc11 	bl	8004454 <ld_dword>
 8005c32:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c36:	3334      	adds	r3, #52	; 0x34
 8005c38:	330e      	adds	r3, #14
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7fe fbf2 	bl	8004424 <ld_word>
 8005c40:	4603      	mov	r3, r0
 8005c42:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005c44:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d104      	bne.n	8005c54 <find_volume+0x2ec>
 8005c4a:	230d      	movs	r3, #13
 8005c4c:	e105      	b.n	8005e5a <find_volume+0x4f2>
 8005c4e:	bf00      	nop
 8005c50:	20001090 	.word	0x20001090

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005c54:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c58:	4413      	add	r3, r2
 8005c5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c5c:	8911      	ldrh	r1, [r2, #8]
 8005c5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c60:	8992      	ldrh	r2, [r2, #12]
 8005c62:	0952      	lsrs	r2, r2, #5
 8005c64:	b292      	uxth	r2, r2
 8005c66:	fbb1 f2f2 	udiv	r2, r1, r2
 8005c6a:	b292      	uxth	r2, r2
 8005c6c:	4413      	add	r3, r2
 8005c6e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005c70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d201      	bcs.n	8005c7c <find_volume+0x314>
 8005c78:	230d      	movs	r3, #13
 8005c7a:	e0ee      	b.n	8005e5a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005c7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c84:	8952      	ldrh	r2, [r2, #10]
 8005c86:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c8a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d101      	bne.n	8005c96 <find_volume+0x32e>
 8005c92:	230d      	movs	r3, #13
 8005c94:	e0e1      	b.n	8005e5a <find_volume+0x4f2>
		fmt = FS_FAT32;
 8005c96:	2303      	movs	r3, #3
 8005c98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d802      	bhi.n	8005cac <find_volume+0x344>
 8005ca6:	2302      	movs	r3, #2
 8005ca8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cae:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d802      	bhi.n	8005cbc <find_volume+0x354>
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbe:	1c9a      	adds	r2, r3, #2
 8005cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc2:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8005cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005cc8:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005cca:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005ccc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cce:	441a      	add	r2, r3
 8005cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8005cd4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd8:	441a      	add	r2, r3
 8005cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cdc:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8005cde:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ce2:	2b03      	cmp	r3, #3
 8005ce4:	d11e      	bne.n	8005d24 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce8:	3334      	adds	r3, #52	; 0x34
 8005cea:	332a      	adds	r3, #42	; 0x2a
 8005cec:	4618      	mov	r0, r3
 8005cee:	f7fe fb99 	bl	8004424 <ld_word>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d001      	beq.n	8005cfc <find_volume+0x394>
 8005cf8:	230d      	movs	r3, #13
 8005cfa:	e0ae      	b.n	8005e5a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cfe:	891b      	ldrh	r3, [r3, #8]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d001      	beq.n	8005d08 <find_volume+0x3a0>
 8005d04:	230d      	movs	r3, #13
 8005d06:	e0a8      	b.n	8005e5a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d0a:	3334      	adds	r3, #52	; 0x34
 8005d0c:	332c      	adds	r3, #44	; 0x2c
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7fe fba0 	bl	8004454 <ld_dword>
 8005d14:	4602      	mov	r2, r0
 8005d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d18:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1c:	699b      	ldr	r3, [r3, #24]
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	647b      	str	r3, [r7, #68]	; 0x44
 8005d22:	e01f      	b.n	8005d64 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d26:	891b      	ldrh	r3, [r3, #8]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d101      	bne.n	8005d30 <find_volume+0x3c8>
 8005d2c:	230d      	movs	r3, #13
 8005d2e:	e094      	b.n	8005e5a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d36:	441a      	add	r2, r3
 8005d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d3a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005d3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d103      	bne.n	8005d4c <find_volume+0x3e4>
 8005d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	005b      	lsls	r3, r3, #1
 8005d4a:	e00a      	b.n	8005d62 <find_volume+0x3fa>
 8005d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d4e:	699a      	ldr	r2, [r3, #24]
 8005d50:	4613      	mov	r3, r2
 8005d52:	005b      	lsls	r3, r3, #1
 8005d54:	4413      	add	r3, r2
 8005d56:	085a      	lsrs	r2, r3, #1
 8005d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5a:	699b      	ldr	r3, [r3, #24]
 8005d5c:	f003 0301 	and.w	r3, r3, #1
 8005d60:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005d62:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d66:	69da      	ldr	r2, [r3, #28]
 8005d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6a:	899b      	ldrh	r3, [r3, #12]
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d70:	440b      	add	r3, r1
 8005d72:	3b01      	subs	r3, #1
 8005d74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d76:	8989      	ldrh	r1, [r1, #12]
 8005d78:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d201      	bcs.n	8005d84 <find_volume+0x41c>
 8005d80:	230d      	movs	r3, #13
 8005d82:	e06a      	b.n	8005e5a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d8a:	615a      	str	r2, [r3, #20]
 8005d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8e:	695a      	ldr	r2, [r3, #20]
 8005d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d92:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8005d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d96:	2280      	movs	r2, #128	; 0x80
 8005d98:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005d9a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d9e:	2b03      	cmp	r3, #3
 8005da0:	d149      	bne.n	8005e36 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da4:	3334      	adds	r3, #52	; 0x34
 8005da6:	3330      	adds	r3, #48	; 0x30
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7fe fb3b 	bl	8004424 <ld_word>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d140      	bne.n	8005e36 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005db4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005db6:	3301      	adds	r3, #1
 8005db8:	4619      	mov	r1, r3
 8005dba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005dbc:	f7fe fde2 	bl	8004984 <move_window>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d137      	bne.n	8005e36 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8005dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc8:	2200      	movs	r2, #0
 8005dca:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dce:	3334      	adds	r3, #52	; 0x34
 8005dd0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f7fe fb25 	bl	8004424 <ld_word>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	461a      	mov	r2, r3
 8005dde:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d127      	bne.n	8005e36 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de8:	3334      	adds	r3, #52	; 0x34
 8005dea:	4618      	mov	r0, r3
 8005dec:	f7fe fb32 	bl	8004454 <ld_dword>
 8005df0:	4603      	mov	r3, r0
 8005df2:	4a1c      	ldr	r2, [pc, #112]	; (8005e64 <find_volume+0x4fc>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d11e      	bne.n	8005e36 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfa:	3334      	adds	r3, #52	; 0x34
 8005dfc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005e00:	4618      	mov	r0, r3
 8005e02:	f7fe fb27 	bl	8004454 <ld_dword>
 8005e06:	4603      	mov	r3, r0
 8005e08:	4a17      	ldr	r2, [pc, #92]	; (8005e68 <find_volume+0x500>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d113      	bne.n	8005e36 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e10:	3334      	adds	r3, #52	; 0x34
 8005e12:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7fe fb1c 	bl	8004454 <ld_dword>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e20:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e24:	3334      	adds	r3, #52	; 0x34
 8005e26:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7fe fb12 	bl	8004454 <ld_dword>
 8005e30:	4602      	mov	r2, r0
 8005e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e34:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e38:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005e3c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005e3e:	4b0b      	ldr	r3, [pc, #44]	; (8005e6c <find_volume+0x504>)
 8005e40:	881b      	ldrh	r3, [r3, #0]
 8005e42:	3301      	adds	r3, #1
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	4b09      	ldr	r3, [pc, #36]	; (8005e6c <find_volume+0x504>)
 8005e48:	801a      	strh	r2, [r3, #0]
 8005e4a:	4b08      	ldr	r3, [pc, #32]	; (8005e6c <find_volume+0x504>)
 8005e4c:	881a      	ldrh	r2, [r3, #0]
 8005e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e50:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005e52:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005e54:	f7fe fd2e 	bl	80048b4 <clear_lock>
#endif
	return FR_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3758      	adds	r7, #88	; 0x58
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	41615252 	.word	0x41615252
 8005e68:	61417272 	.word	0x61417272
 8005e6c:	20001094 	.word	0x20001094

08005e70 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005e7a:	2309      	movs	r3, #9
 8005e7c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d01c      	beq.n	8005ebe <validate+0x4e>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d018      	beq.n	8005ebe <validate+0x4e>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d013      	beq.n	8005ebe <validate+0x4e>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	889a      	ldrh	r2, [r3, #4]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	88db      	ldrh	r3, [r3, #6]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d10c      	bne.n	8005ebe <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	785b      	ldrb	r3, [r3, #1]
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7fe fa1c 	bl	80042e8 <disk_status>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	f003 0301 	and.w	r3, r3, #1
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d101      	bne.n	8005ebe <validate+0x4e>
			res = FR_OK;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005ebe:	7bfb      	ldrb	r3, [r7, #15]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d102      	bne.n	8005eca <validate+0x5a>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	e000      	b.n	8005ecc <validate+0x5c>
 8005eca:	2300      	movs	r3, #0
 8005ecc:	683a      	ldr	r2, [r7, #0]
 8005ece:	6013      	str	r3, [r2, #0]
	return res;
 8005ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
	...

08005edc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b088      	sub	sp, #32
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005eee:	f107 0310 	add.w	r3, r7, #16
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7ff fc9e 	bl	8005834 <get_ldnumber>
 8005ef8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	da01      	bge.n	8005f04 <f_mount+0x28>
 8005f00:	230b      	movs	r3, #11
 8005f02:	e02b      	b.n	8005f5c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005f04:	4a17      	ldr	r2, [pc, #92]	; (8005f64 <f_mount+0x88>)
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f0c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d005      	beq.n	8005f20 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005f14:	69b8      	ldr	r0, [r7, #24]
 8005f16:	f7fe fccd 	bl	80048b4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d002      	beq.n	8005f2c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	490d      	ldr	r1, [pc, #52]	; (8005f64 <f_mount+0x88>)
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d002      	beq.n	8005f42 <f_mount+0x66>
 8005f3c:	79fb      	ldrb	r3, [r7, #7]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d001      	beq.n	8005f46 <f_mount+0x6a>
 8005f42:	2300      	movs	r3, #0
 8005f44:	e00a      	b.n	8005f5c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005f46:	f107 010c 	add.w	r1, r7, #12
 8005f4a:	f107 0308 	add.w	r3, r7, #8
 8005f4e:	2200      	movs	r2, #0
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7ff fd09 	bl	8005968 <find_volume>
 8005f56:	4603      	mov	r3, r0
 8005f58:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3720      	adds	r7, #32
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	20001090 	.word	0x20001090

08005f68 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b098      	sub	sp, #96	; 0x60
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	4613      	mov	r3, r2
 8005f74:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d101      	bne.n	8005f80 <f_open+0x18>
 8005f7c:	2309      	movs	r3, #9
 8005f7e:	e1bb      	b.n	80062f8 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005f80:	79fb      	ldrb	r3, [r7, #7]
 8005f82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f86:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005f88:	79fa      	ldrb	r2, [r7, #7]
 8005f8a:	f107 0110 	add.w	r1, r7, #16
 8005f8e:	f107 0308 	add.w	r3, r7, #8
 8005f92:	4618      	mov	r0, r3
 8005f94:	f7ff fce8 	bl	8005968 <find_volume>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8005f9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f040 819f 	bne.w	80062e6 <f_open+0x37e>
		dj.obj.fs = fs;
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005fac:	68ba      	ldr	r2, [r7, #8]
 8005fae:	f107 0314 	add.w	r3, r7, #20
 8005fb2:	4611      	mov	r1, r2
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f7ff fbc7 	bl	8005748 <follow_path>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005fc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d11a      	bne.n	8005ffe <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005fc8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005fcc:	b25b      	sxtb	r3, r3
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	da03      	bge.n	8005fda <f_open+0x72>
				res = FR_INVALID_NAME;
 8005fd2:	2306      	movs	r3, #6
 8005fd4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005fd8:	e011      	b.n	8005ffe <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005fda:	79fb      	ldrb	r3, [r7, #7]
 8005fdc:	f023 0301 	bic.w	r3, r3, #1
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	bf14      	ite	ne
 8005fe4:	2301      	movne	r3, #1
 8005fe6:	2300      	moveq	r3, #0
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	461a      	mov	r2, r3
 8005fec:	f107 0314 	add.w	r3, r7, #20
 8005ff0:	4611      	mov	r1, r2
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7fe fb16 	bl	8004624 <chk_lock>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005ffe:	79fb      	ldrb	r3, [r7, #7]
 8006000:	f003 031c 	and.w	r3, r3, #28
 8006004:	2b00      	cmp	r3, #0
 8006006:	d07f      	beq.n	8006108 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006008:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800600c:	2b00      	cmp	r3, #0
 800600e:	d017      	beq.n	8006040 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006010:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006014:	2b04      	cmp	r3, #4
 8006016:	d10e      	bne.n	8006036 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006018:	f7fe fb60 	bl	80046dc <enq_lock>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d006      	beq.n	8006030 <f_open+0xc8>
 8006022:	f107 0314 	add.w	r3, r7, #20
 8006026:	4618      	mov	r0, r3
 8006028:	f7ff fac8 	bl	80055bc <dir_register>
 800602c:	4603      	mov	r3, r0
 800602e:	e000      	b.n	8006032 <f_open+0xca>
 8006030:	2312      	movs	r3, #18
 8006032:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006036:	79fb      	ldrb	r3, [r7, #7]
 8006038:	f043 0308 	orr.w	r3, r3, #8
 800603c:	71fb      	strb	r3, [r7, #7]
 800603e:	e010      	b.n	8006062 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006040:	7ebb      	ldrb	r3, [r7, #26]
 8006042:	f003 0311 	and.w	r3, r3, #17
 8006046:	2b00      	cmp	r3, #0
 8006048:	d003      	beq.n	8006052 <f_open+0xea>
					res = FR_DENIED;
 800604a:	2307      	movs	r3, #7
 800604c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006050:	e007      	b.n	8006062 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006052:	79fb      	ldrb	r3, [r7, #7]
 8006054:	f003 0304 	and.w	r3, r3, #4
 8006058:	2b00      	cmp	r3, #0
 800605a:	d002      	beq.n	8006062 <f_open+0xfa>
 800605c:	2308      	movs	r3, #8
 800605e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006062:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006066:	2b00      	cmp	r3, #0
 8006068:	d168      	bne.n	800613c <f_open+0x1d4>
 800606a:	79fb      	ldrb	r3, [r7, #7]
 800606c:	f003 0308 	and.w	r3, r3, #8
 8006070:	2b00      	cmp	r3, #0
 8006072:	d063      	beq.n	800613c <f_open+0x1d4>
				dw = GET_FATTIME();
 8006074:	f7fd ffbe 	bl	8003ff4 <get_fattime>
 8006078:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800607a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800607c:	330e      	adds	r3, #14
 800607e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006080:	4618      	mov	r0, r3
 8006082:	f7fe fa25 	bl	80044d0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006088:	3316      	adds	r3, #22
 800608a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800608c:	4618      	mov	r0, r3
 800608e:	f7fe fa1f 	bl	80044d0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006094:	330b      	adds	r3, #11
 8006096:	2220      	movs	r2, #32
 8006098:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800609e:	4611      	mov	r1, r2
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7ff f9f7 	bl	8005494 <ld_clust>
 80060a6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80060ac:	2200      	movs	r2, #0
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7ff fa0f 	bl	80054d2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80060b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b6:	331c      	adds	r3, #28
 80060b8:	2100      	movs	r1, #0
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7fe fa08 	bl	80044d0 <st_dword>
					fs->wflag = 1;
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	2201      	movs	r2, #1
 80060c4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80060c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d037      	beq.n	800613c <f_open+0x1d4>
						dw = fs->winsect;
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80060d2:	f107 0314 	add.w	r3, r7, #20
 80060d6:	2200      	movs	r2, #0
 80060d8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80060da:	4618      	mov	r0, r3
 80060dc:	f7fe feff 	bl	8004ede <remove_chain>
 80060e0:	4603      	mov	r3, r0
 80060e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80060e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d126      	bne.n	800613c <f_open+0x1d4>
							res = move_window(fs, dw);
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7fe fc46 	bl	8004984 <move_window>
 80060f8:	4603      	mov	r3, r0
 80060fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006102:	3a01      	subs	r2, #1
 8006104:	611a      	str	r2, [r3, #16]
 8006106:	e019      	b.n	800613c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006108:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800610c:	2b00      	cmp	r3, #0
 800610e:	d115      	bne.n	800613c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006110:	7ebb      	ldrb	r3, [r7, #26]
 8006112:	f003 0310 	and.w	r3, r3, #16
 8006116:	2b00      	cmp	r3, #0
 8006118:	d003      	beq.n	8006122 <f_open+0x1ba>
					res = FR_NO_FILE;
 800611a:	2304      	movs	r3, #4
 800611c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006120:	e00c      	b.n	800613c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006122:	79fb      	ldrb	r3, [r7, #7]
 8006124:	f003 0302 	and.w	r3, r3, #2
 8006128:	2b00      	cmp	r3, #0
 800612a:	d007      	beq.n	800613c <f_open+0x1d4>
 800612c:	7ebb      	ldrb	r3, [r7, #26]
 800612e:	f003 0301 	and.w	r3, r3, #1
 8006132:	2b00      	cmp	r3, #0
 8006134:	d002      	beq.n	800613c <f_open+0x1d4>
						res = FR_DENIED;
 8006136:	2307      	movs	r3, #7
 8006138:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800613c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006140:	2b00      	cmp	r3, #0
 8006142:	d128      	bne.n	8006196 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006144:	79fb      	ldrb	r3, [r7, #7]
 8006146:	f003 0308 	and.w	r3, r3, #8
 800614a:	2b00      	cmp	r3, #0
 800614c:	d003      	beq.n	8006156 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800614e:	79fb      	ldrb	r3, [r7, #7]
 8006150:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006154:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800615e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006164:	79fb      	ldrb	r3, [r7, #7]
 8006166:	f023 0301 	bic.w	r3, r3, #1
 800616a:	2b00      	cmp	r3, #0
 800616c:	bf14      	ite	ne
 800616e:	2301      	movne	r3, #1
 8006170:	2300      	moveq	r3, #0
 8006172:	b2db      	uxtb	r3, r3
 8006174:	461a      	mov	r2, r3
 8006176:	f107 0314 	add.w	r3, r7, #20
 800617a:	4611      	mov	r1, r2
 800617c:	4618      	mov	r0, r3
 800617e:	f7fe facf 	bl	8004720 <inc_lock>
 8006182:	4602      	mov	r2, r0
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d102      	bne.n	8006196 <f_open+0x22e>
 8006190:	2302      	movs	r3, #2
 8006192:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006196:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800619a:	2b00      	cmp	r3, #0
 800619c:	f040 80a3 	bne.w	80062e6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061a4:	4611      	mov	r1, r2
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7ff f974 	bl	8005494 <ld_clust>
 80061ac:	4602      	mov	r2, r0
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80061b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b4:	331c      	adds	r3, #28
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7fe f94c 	bl	8004454 <ld_dword>
 80061bc:	4602      	mov	r2, r0
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80061c8:	693a      	ldr	r2, [r7, #16]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	88da      	ldrh	r2, [r3, #6]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	79fa      	ldrb	r2, [r7, #7]
 80061da:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	3330      	adds	r3, #48	; 0x30
 80061f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80061f6:	2100      	movs	r1, #0
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7fe f9b6 	bl	800456a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80061fe:	79fb      	ldrb	r3, [r7, #7]
 8006200:	f003 0320 	and.w	r3, r3, #32
 8006204:	2b00      	cmp	r3, #0
 8006206:	d06e      	beq.n	80062e6 <f_open+0x37e>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d06a      	beq.n	80062e6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	68da      	ldr	r2, [r3, #12]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	895b      	ldrh	r3, [r3, #10]
 800621c:	461a      	mov	r2, r3
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	899b      	ldrh	r3, [r3, #12]
 8006222:	fb03 f302 	mul.w	r3, r3, r2
 8006226:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	657b      	str	r3, [r7, #84]	; 0x54
 8006234:	e016      	b.n	8006264 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800623a:	4618      	mov	r0, r3
 800623c:	f7fe fc5f 	bl	8004afe <get_fat>
 8006240:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8006242:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006244:	2b01      	cmp	r3, #1
 8006246:	d802      	bhi.n	800624e <f_open+0x2e6>
 8006248:	2302      	movs	r3, #2
 800624a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800624e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006250:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006254:	d102      	bne.n	800625c <f_open+0x2f4>
 8006256:	2301      	movs	r3, #1
 8006258:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800625c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800625e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	657b      	str	r3, [r7, #84]	; 0x54
 8006264:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006268:	2b00      	cmp	r3, #0
 800626a:	d103      	bne.n	8006274 <f_open+0x30c>
 800626c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800626e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006270:	429a      	cmp	r2, r3
 8006272:	d8e0      	bhi.n	8006236 <f_open+0x2ce>
				}
				fp->clust = clst;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006278:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800627a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800627e:	2b00      	cmp	r3, #0
 8006280:	d131      	bne.n	80062e6 <f_open+0x37e>
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	899b      	ldrh	r3, [r3, #12]
 8006286:	461a      	mov	r2, r3
 8006288:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800628a:	fbb3 f1f2 	udiv	r1, r3, r2
 800628e:	fb02 f201 	mul.w	r2, r2, r1
 8006292:	1a9b      	subs	r3, r3, r2
 8006294:	2b00      	cmp	r3, #0
 8006296:	d026      	beq.n	80062e6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800629c:	4618      	mov	r0, r3
 800629e:	f7fe fc0f 	bl	8004ac0 <clust2sect>
 80062a2:	6478      	str	r0, [r7, #68]	; 0x44
 80062a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d103      	bne.n	80062b2 <f_open+0x34a>
						res = FR_INT_ERR;
 80062aa:	2302      	movs	r3, #2
 80062ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80062b0:	e019      	b.n	80062e6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	899b      	ldrh	r3, [r3, #12]
 80062b6:	461a      	mov	r2, r3
 80062b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80062be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062c0:	441a      	add	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	7858      	ldrb	r0, [r3, #1]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6a1a      	ldr	r2, [r3, #32]
 80062d4:	2301      	movs	r3, #1
 80062d6:	f7fe f847 	bl	8004368 <disk_read>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d002      	beq.n	80062e6 <f_open+0x37e>
 80062e0:	2301      	movs	r3, #1
 80062e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80062e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d002      	beq.n	80062f4 <f_open+0x38c>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80062f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3760      	adds	r7, #96	; 0x60
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b08e      	sub	sp, #56	; 0x38
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
 800630c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	2200      	movs	r2, #0
 8006316:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f107 0214 	add.w	r2, r7, #20
 800631e:	4611      	mov	r1, r2
 8006320:	4618      	mov	r0, r3
 8006322:	f7ff fda5 	bl	8005e70 <validate>
 8006326:	4603      	mov	r3, r0
 8006328:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800632c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006330:	2b00      	cmp	r3, #0
 8006332:	d107      	bne.n	8006344 <f_read+0x44>
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	7d5b      	ldrb	r3, [r3, #21]
 8006338:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800633c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006340:	2b00      	cmp	r3, #0
 8006342:	d002      	beq.n	800634a <f_read+0x4a>
 8006344:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006348:	e135      	b.n	80065b6 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	7d1b      	ldrb	r3, [r3, #20]
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b00      	cmp	r3, #0
 8006354:	d101      	bne.n	800635a <f_read+0x5a>
 8006356:	2307      	movs	r3, #7
 8006358:	e12d      	b.n	80065b6 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	68da      	ldr	r2, [r3, #12]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	6a3b      	ldr	r3, [r7, #32]
 800636a:	429a      	cmp	r2, r3
 800636c:	f240 811e 	bls.w	80065ac <f_read+0x2ac>
 8006370:	6a3b      	ldr	r3, [r7, #32]
 8006372:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006374:	e11a      	b.n	80065ac <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	8992      	ldrh	r2, [r2, #12]
 800637e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006382:	fb02 f201 	mul.w	r2, r2, r1
 8006386:	1a9b      	subs	r3, r3, r2
 8006388:	2b00      	cmp	r3, #0
 800638a:	f040 80d5 	bne.w	8006538 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	8992      	ldrh	r2, [r2, #12]
 8006396:	fbb3 f3f2 	udiv	r3, r3, r2
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	8952      	ldrh	r2, [r2, #10]
 800639e:	3a01      	subs	r2, #1
 80063a0:	4013      	ands	r3, r2
 80063a2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d12f      	bne.n	800640a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d103      	bne.n	80063ba <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	633b      	str	r3, [r7, #48]	; 0x30
 80063b8:	e013      	b.n	80063e2 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d007      	beq.n	80063d2 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	699b      	ldr	r3, [r3, #24]
 80063c6:	4619      	mov	r1, r3
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f7fe fe85 	bl	80050d8 <clmt_clust>
 80063ce:	6338      	str	r0, [r7, #48]	; 0x30
 80063d0:	e007      	b.n	80063e2 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	69db      	ldr	r3, [r3, #28]
 80063d8:	4619      	mov	r1, r3
 80063da:	4610      	mov	r0, r2
 80063dc:	f7fe fb8f 	bl	8004afe <get_fat>
 80063e0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80063e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d804      	bhi.n	80063f2 <f_read+0xf2>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2202      	movs	r2, #2
 80063ec:	755a      	strb	r2, [r3, #21]
 80063ee:	2302      	movs	r3, #2
 80063f0:	e0e1      	b.n	80065b6 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80063f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063f8:	d104      	bne.n	8006404 <f_read+0x104>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2201      	movs	r2, #1
 80063fe:	755a      	strb	r2, [r3, #21]
 8006400:	2301      	movs	r3, #1
 8006402:	e0d8      	b.n	80065b6 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006408:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	69db      	ldr	r3, [r3, #28]
 8006410:	4619      	mov	r1, r3
 8006412:	4610      	mov	r0, r2
 8006414:	f7fe fb54 	bl	8004ac0 <clust2sect>
 8006418:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d104      	bne.n	800642a <f_read+0x12a>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2202      	movs	r2, #2
 8006424:	755a      	strb	r2, [r3, #21]
 8006426:	2302      	movs	r3, #2
 8006428:	e0c5      	b.n	80065b6 <f_read+0x2b6>
			sect += csect;
 800642a:	69ba      	ldr	r2, [r7, #24]
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	4413      	add	r3, r2
 8006430:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	899b      	ldrh	r3, [r3, #12]
 8006436:	461a      	mov	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	fbb3 f3f2 	udiv	r3, r3, r2
 800643e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006442:	2b00      	cmp	r3, #0
 8006444:	d041      	beq.n	80064ca <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006446:	69fa      	ldr	r2, [r7, #28]
 8006448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644a:	4413      	add	r3, r2
 800644c:	697a      	ldr	r2, [r7, #20]
 800644e:	8952      	ldrh	r2, [r2, #10]
 8006450:	4293      	cmp	r3, r2
 8006452:	d905      	bls.n	8006460 <f_read+0x160>
					cc = fs->csize - csect;
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	895b      	ldrh	r3, [r3, #10]
 8006458:	461a      	mov	r2, r3
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	7858      	ldrb	r0, [r3, #1]
 8006464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006466:	69ba      	ldr	r2, [r7, #24]
 8006468:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800646a:	f7fd ff7d 	bl	8004368 <disk_read>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d004      	beq.n	800647e <f_read+0x17e>
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2201      	movs	r2, #1
 8006478:	755a      	strb	r2, [r3, #21]
 800647a:	2301      	movs	r3, #1
 800647c:	e09b      	b.n	80065b6 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	7d1b      	ldrb	r3, [r3, #20]
 8006482:	b25b      	sxtb	r3, r3
 8006484:	2b00      	cmp	r3, #0
 8006486:	da18      	bge.n	80064ba <f_read+0x1ba>
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6a1a      	ldr	r2, [r3, #32]
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	1ad3      	subs	r3, r2, r3
 8006490:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006492:	429a      	cmp	r2, r3
 8006494:	d911      	bls.n	80064ba <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6a1a      	ldr	r2, [r3, #32]
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	8992      	ldrh	r2, [r2, #12]
 80064a2:	fb02 f303 	mul.w	r3, r2, r3
 80064a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064a8:	18d0      	adds	r0, r2, r3
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	899b      	ldrh	r3, [r3, #12]
 80064b4:	461a      	mov	r2, r3
 80064b6:	f7fe f837 	bl	8004528 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	899b      	ldrh	r3, [r3, #12]
 80064be:	461a      	mov	r2, r3
 80064c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c2:	fb02 f303 	mul.w	r3, r2, r3
 80064c6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80064c8:	e05c      	b.n	8006584 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6a1b      	ldr	r3, [r3, #32]
 80064ce:	69ba      	ldr	r2, [r7, #24]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d02e      	beq.n	8006532 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	7d1b      	ldrb	r3, [r3, #20]
 80064d8:	b25b      	sxtb	r3, r3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	da18      	bge.n	8006510 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	7858      	ldrb	r0, [r3, #1]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6a1a      	ldr	r2, [r3, #32]
 80064ec:	2301      	movs	r3, #1
 80064ee:	f7fd ff5b 	bl	80043a8 <disk_write>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d004      	beq.n	8006502 <f_read+0x202>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2201      	movs	r2, #1
 80064fc:	755a      	strb	r2, [r3, #21]
 80064fe:	2301      	movs	r3, #1
 8006500:	e059      	b.n	80065b6 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	7d1b      	ldrb	r3, [r3, #20]
 8006506:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800650a:	b2da      	uxtb	r2, r3
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	7858      	ldrb	r0, [r3, #1]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800651a:	2301      	movs	r3, #1
 800651c:	69ba      	ldr	r2, [r7, #24]
 800651e:	f7fd ff23 	bl	8004368 <disk_read>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d004      	beq.n	8006532 <f_read+0x232>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2201      	movs	r2, #1
 800652c:	755a      	strb	r2, [r3, #21]
 800652e:	2301      	movs	r3, #1
 8006530:	e041      	b.n	80065b6 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	69ba      	ldr	r2, [r7, #24]
 8006536:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	899b      	ldrh	r3, [r3, #12]
 800653c:	4618      	mov	r0, r3
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	699b      	ldr	r3, [r3, #24]
 8006542:	697a      	ldr	r2, [r7, #20]
 8006544:	8992      	ldrh	r2, [r2, #12]
 8006546:	fbb3 f1f2 	udiv	r1, r3, r2
 800654a:	fb02 f201 	mul.w	r2, r2, r1
 800654e:	1a9b      	subs	r3, r3, r2
 8006550:	1ac3      	subs	r3, r0, r3
 8006552:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006554:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	429a      	cmp	r2, r3
 800655a:	d901      	bls.n	8006560 <f_read+0x260>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	8992      	ldrh	r2, [r2, #12]
 800656e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006572:	fb02 f200 	mul.w	r2, r2, r0
 8006576:	1a9b      	subs	r3, r3, r2
 8006578:	440b      	add	r3, r1
 800657a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800657c:	4619      	mov	r1, r3
 800657e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006580:	f7fd ffd2 	bl	8004528 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006588:	4413      	add	r3, r2
 800658a:	627b      	str	r3, [r7, #36]	; 0x24
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	699a      	ldr	r2, [r3, #24]
 8006590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006592:	441a      	add	r2, r3
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	619a      	str	r2, [r3, #24]
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800659e:	441a      	add	r2, r3
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	601a      	str	r2, [r3, #0]
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f47f aee1 	bne.w	8006376 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3738      	adds	r7, #56	; 0x38
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}

080065be <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80065be:	b580      	push	{r7, lr}
 80065c0:	b08c      	sub	sp, #48	; 0x30
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	60f8      	str	r0, [r7, #12]
 80065c6:	60b9      	str	r1, [r7, #8]
 80065c8:	607a      	str	r2, [r7, #4]
 80065ca:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	2200      	movs	r2, #0
 80065d4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f107 0210 	add.w	r2, r7, #16
 80065dc:	4611      	mov	r1, r2
 80065de:	4618      	mov	r0, r3
 80065e0:	f7ff fc46 	bl	8005e70 <validate>
 80065e4:	4603      	mov	r3, r0
 80065e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80065ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d107      	bne.n	8006602 <f_write+0x44>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	7d5b      	ldrb	r3, [r3, #21]
 80065f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80065fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d002      	beq.n	8006608 <f_write+0x4a>
 8006602:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006606:	e16a      	b.n	80068de <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	7d1b      	ldrb	r3, [r3, #20]
 800660c:	f003 0302 	and.w	r3, r3, #2
 8006610:	2b00      	cmp	r3, #0
 8006612:	d101      	bne.n	8006618 <f_write+0x5a>
 8006614:	2307      	movs	r3, #7
 8006616:	e162      	b.n	80068de <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	699a      	ldr	r2, [r3, #24]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	441a      	add	r2, r3
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	429a      	cmp	r2, r3
 8006626:	f080 814c 	bcs.w	80068c2 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	699b      	ldr	r3, [r3, #24]
 800662e:	43db      	mvns	r3, r3
 8006630:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006632:	e146      	b.n	80068c2 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	8992      	ldrh	r2, [r2, #12]
 800663c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006640:	fb02 f201 	mul.w	r2, r2, r1
 8006644:	1a9b      	subs	r3, r3, r2
 8006646:	2b00      	cmp	r3, #0
 8006648:	f040 80f1 	bne.w	800682e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	699b      	ldr	r3, [r3, #24]
 8006650:	693a      	ldr	r2, [r7, #16]
 8006652:	8992      	ldrh	r2, [r2, #12]
 8006654:	fbb3 f3f2 	udiv	r3, r3, r2
 8006658:	693a      	ldr	r2, [r7, #16]
 800665a:	8952      	ldrh	r2, [r2, #10]
 800665c:	3a01      	subs	r2, #1
 800665e:	4013      	ands	r3, r2
 8006660:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d143      	bne.n	80066f0 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d10c      	bne.n	800668a <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006678:	2b00      	cmp	r3, #0
 800667a:	d11a      	bne.n	80066b2 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2100      	movs	r1, #0
 8006680:	4618      	mov	r0, r3
 8006682:	f7fe fc91 	bl	8004fa8 <create_chain>
 8006686:	62b8      	str	r0, [r7, #40]	; 0x28
 8006688:	e013      	b.n	80066b2 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668e:	2b00      	cmp	r3, #0
 8006690:	d007      	beq.n	80066a2 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	699b      	ldr	r3, [r3, #24]
 8006696:	4619      	mov	r1, r3
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f7fe fd1d 	bl	80050d8 <clmt_clust>
 800669e:	62b8      	str	r0, [r7, #40]	; 0x28
 80066a0:	e007      	b.n	80066b2 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	69db      	ldr	r3, [r3, #28]
 80066a8:	4619      	mov	r1, r3
 80066aa:	4610      	mov	r0, r2
 80066ac:	f7fe fc7c 	bl	8004fa8 <create_chain>
 80066b0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80066b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	f000 8109 	beq.w	80068cc <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80066ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d104      	bne.n	80066ca <f_write+0x10c>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2202      	movs	r2, #2
 80066c4:	755a      	strb	r2, [r3, #21]
 80066c6:	2302      	movs	r3, #2
 80066c8:	e109      	b.n	80068de <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80066ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066d0:	d104      	bne.n	80066dc <f_write+0x11e>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2201      	movs	r2, #1
 80066d6:	755a      	strb	r2, [r3, #21]
 80066d8:	2301      	movs	r3, #1
 80066da:	e100      	b.n	80068de <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066e0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d102      	bne.n	80066f0 <f_write+0x132>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066ee:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	7d1b      	ldrb	r3, [r3, #20]
 80066f4:	b25b      	sxtb	r3, r3
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	da18      	bge.n	800672c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	7858      	ldrb	r0, [r3, #1]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6a1a      	ldr	r2, [r3, #32]
 8006708:	2301      	movs	r3, #1
 800670a:	f7fd fe4d 	bl	80043a8 <disk_write>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d004      	beq.n	800671e <f_write+0x160>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2201      	movs	r2, #1
 8006718:	755a      	strb	r2, [r3, #21]
 800671a:	2301      	movs	r3, #1
 800671c:	e0df      	b.n	80068de <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	7d1b      	ldrb	r3, [r3, #20]
 8006722:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006726:	b2da      	uxtb	r2, r3
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	69db      	ldr	r3, [r3, #28]
 8006732:	4619      	mov	r1, r3
 8006734:	4610      	mov	r0, r2
 8006736:	f7fe f9c3 	bl	8004ac0 <clust2sect>
 800673a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d104      	bne.n	800674c <f_write+0x18e>
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2202      	movs	r2, #2
 8006746:	755a      	strb	r2, [r3, #21]
 8006748:	2302      	movs	r3, #2
 800674a:	e0c8      	b.n	80068de <f_write+0x320>
			sect += csect;
 800674c:	697a      	ldr	r2, [r7, #20]
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	4413      	add	r3, r2
 8006752:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	899b      	ldrh	r3, [r3, #12]
 8006758:	461a      	mov	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006760:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006762:	6a3b      	ldr	r3, [r7, #32]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d043      	beq.n	80067f0 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006768:	69ba      	ldr	r2, [r7, #24]
 800676a:	6a3b      	ldr	r3, [r7, #32]
 800676c:	4413      	add	r3, r2
 800676e:	693a      	ldr	r2, [r7, #16]
 8006770:	8952      	ldrh	r2, [r2, #10]
 8006772:	4293      	cmp	r3, r2
 8006774:	d905      	bls.n	8006782 <f_write+0x1c4>
					cc = fs->csize - csect;
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	895b      	ldrh	r3, [r3, #10]
 800677a:	461a      	mov	r2, r3
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	7858      	ldrb	r0, [r3, #1]
 8006786:	6a3b      	ldr	r3, [r7, #32]
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	69f9      	ldr	r1, [r7, #28]
 800678c:	f7fd fe0c 	bl	80043a8 <disk_write>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d004      	beq.n	80067a0 <f_write+0x1e2>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2201      	movs	r2, #1
 800679a:	755a      	strb	r2, [r3, #21]
 800679c:	2301      	movs	r3, #1
 800679e:	e09e      	b.n	80068de <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6a1a      	ldr	r2, [r3, #32]
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	6a3a      	ldr	r2, [r7, #32]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d918      	bls.n	80067e0 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6a1a      	ldr	r2, [r3, #32]
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	8992      	ldrh	r2, [r2, #12]
 80067c0:	fb02 f303 	mul.w	r3, r2, r3
 80067c4:	69fa      	ldr	r2, [r7, #28]
 80067c6:	18d1      	adds	r1, r2, r3
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	899b      	ldrh	r3, [r3, #12]
 80067cc:	461a      	mov	r2, r3
 80067ce:	f7fd feab 	bl	8004528 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	7d1b      	ldrb	r3, [r3, #20]
 80067d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067da:	b2da      	uxtb	r2, r3
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	899b      	ldrh	r3, [r3, #12]
 80067e4:	461a      	mov	r2, r3
 80067e6:	6a3b      	ldr	r3, [r7, #32]
 80067e8:	fb02 f303 	mul.w	r3, r2, r3
 80067ec:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80067ee:	e04b      	b.n	8006888 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6a1b      	ldr	r3, [r3, #32]
 80067f4:	697a      	ldr	r2, [r7, #20]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d016      	beq.n	8006828 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	699a      	ldr	r2, [r3, #24]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006802:	429a      	cmp	r2, r3
 8006804:	d210      	bcs.n	8006828 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	7858      	ldrb	r0, [r3, #1]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006810:	2301      	movs	r3, #1
 8006812:	697a      	ldr	r2, [r7, #20]
 8006814:	f7fd fda8 	bl	8004368 <disk_read>
 8006818:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800681a:	2b00      	cmp	r3, #0
 800681c:	d004      	beq.n	8006828 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2201      	movs	r2, #1
 8006822:	755a      	strb	r2, [r3, #21]
 8006824:	2301      	movs	r3, #1
 8006826:	e05a      	b.n	80068de <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	899b      	ldrh	r3, [r3, #12]
 8006832:	4618      	mov	r0, r3
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	699b      	ldr	r3, [r3, #24]
 8006838:	693a      	ldr	r2, [r7, #16]
 800683a:	8992      	ldrh	r2, [r2, #12]
 800683c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006840:	fb02 f201 	mul.w	r2, r2, r1
 8006844:	1a9b      	subs	r3, r3, r2
 8006846:	1ac3      	subs	r3, r0, r3
 8006848:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800684a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	429a      	cmp	r2, r3
 8006850:	d901      	bls.n	8006856 <f_write+0x298>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	699b      	ldr	r3, [r3, #24]
 8006860:	693a      	ldr	r2, [r7, #16]
 8006862:	8992      	ldrh	r2, [r2, #12]
 8006864:	fbb3 f0f2 	udiv	r0, r3, r2
 8006868:	fb02 f200 	mul.w	r2, r2, r0
 800686c:	1a9b      	subs	r3, r3, r2
 800686e:	440b      	add	r3, r1
 8006870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006872:	69f9      	ldr	r1, [r7, #28]
 8006874:	4618      	mov	r0, r3
 8006876:	f7fd fe57 	bl	8004528 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	7d1b      	ldrb	r3, [r3, #20]
 800687e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006882:	b2da      	uxtb	r2, r3
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006888:	69fa      	ldr	r2, [r7, #28]
 800688a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688c:	4413      	add	r3, r2
 800688e:	61fb      	str	r3, [r7, #28]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	699a      	ldr	r2, [r3, #24]
 8006894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006896:	441a      	add	r2, r3
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	619a      	str	r2, [r3, #24]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	68da      	ldr	r2, [r3, #12]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	699b      	ldr	r3, [r3, #24]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	bf38      	it	cc
 80068a8:	461a      	movcc	r2, r3
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	60da      	str	r2, [r3, #12]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b4:	441a      	add	r2, r3
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	601a      	str	r2, [r3, #0]
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068be:	1ad3      	subs	r3, r2, r3
 80068c0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f47f aeb5 	bne.w	8006634 <f_write+0x76>
 80068ca:	e000      	b.n	80068ce <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80068cc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	7d1b      	ldrb	r3, [r3, #20]
 80068d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068d6:	b2da      	uxtb	r2, r3
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3730      	adds	r7, #48	; 0x30
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b086      	sub	sp, #24
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f107 0208 	add.w	r2, r7, #8
 80068f4:	4611      	mov	r1, r2
 80068f6:	4618      	mov	r0, r3
 80068f8:	f7ff faba 	bl	8005e70 <validate>
 80068fc:	4603      	mov	r3, r0
 80068fe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006900:	7dfb      	ldrb	r3, [r7, #23]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d168      	bne.n	80069d8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	7d1b      	ldrb	r3, [r3, #20]
 800690a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800690e:	2b00      	cmp	r3, #0
 8006910:	d062      	beq.n	80069d8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	7d1b      	ldrb	r3, [r3, #20]
 8006916:	b25b      	sxtb	r3, r3
 8006918:	2b00      	cmp	r3, #0
 800691a:	da15      	bge.n	8006948 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	7858      	ldrb	r0, [r3, #1]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a1a      	ldr	r2, [r3, #32]
 800692a:	2301      	movs	r3, #1
 800692c:	f7fd fd3c 	bl	80043a8 <disk_write>
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d001      	beq.n	800693a <f_sync+0x54>
 8006936:	2301      	movs	r3, #1
 8006938:	e04f      	b.n	80069da <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	7d1b      	ldrb	r3, [r3, #20]
 800693e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006942:	b2da      	uxtb	r2, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006948:	f7fd fb54 	bl	8003ff4 <get_fattime>
 800694c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006954:	4619      	mov	r1, r3
 8006956:	4610      	mov	r0, r2
 8006958:	f7fe f814 	bl	8004984 <move_window>
 800695c:	4603      	mov	r3, r0
 800695e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006960:	7dfb      	ldrb	r3, [r7, #23]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d138      	bne.n	80069d8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800696a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	330b      	adds	r3, #11
 8006970:	781a      	ldrb	r2, [r3, #0]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	330b      	adds	r3, #11
 8006976:	f042 0220 	orr.w	r2, r2, #32
 800697a:	b2d2      	uxtb	r2, r2
 800697c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6818      	ldr	r0, [r3, #0]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	461a      	mov	r2, r3
 8006988:	68f9      	ldr	r1, [r7, #12]
 800698a:	f7fe fda2 	bl	80054d2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f103 021c 	add.w	r2, r3, #28
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	4619      	mov	r1, r3
 800699a:	4610      	mov	r0, r2
 800699c:	f7fd fd98 	bl	80044d0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	3316      	adds	r3, #22
 80069a4:	6939      	ldr	r1, [r7, #16]
 80069a6:	4618      	mov	r0, r3
 80069a8:	f7fd fd92 	bl	80044d0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	3312      	adds	r3, #18
 80069b0:	2100      	movs	r1, #0
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7fd fd71 	bl	800449a <st_word>
					fs->wflag = 1;
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	2201      	movs	r2, #1
 80069bc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	4618      	mov	r0, r3
 80069c2:	f7fe f80d 	bl	80049e0 <sync_fs>
 80069c6:	4603      	mov	r3, r0
 80069c8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	7d1b      	ldrb	r3, [r3, #20]
 80069ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069d2:	b2da      	uxtb	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80069d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3718      	adds	r7, #24
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b084      	sub	sp, #16
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f7ff ff7b 	bl	80068e6 <f_sync>
 80069f0:	4603      	mov	r3, r0
 80069f2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80069f4:	7bfb      	ldrb	r3, [r7, #15]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d118      	bne.n	8006a2c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f107 0208 	add.w	r2, r7, #8
 8006a00:	4611      	mov	r1, r2
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7ff fa34 	bl	8005e70 <validate>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006a0c:	7bfb      	ldrb	r3, [r7, #15]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d10c      	bne.n	8006a2c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	4618      	mov	r0, r3
 8006a18:	f7fd ff10 	bl	800483c <dec_lock>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006a20:	7bfb      	ldrb	r3, [r7, #15]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d102      	bne.n	8006a2c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
	...

08006a38 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8006a38:	b590      	push	{r4, r7, lr}
 8006a3a:	b09d      	sub	sp, #116	; 0x74
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	607a      	str	r2, [r7, #4]
 8006a42:	603b      	str	r3, [r7, #0]
 8006a44:	460b      	mov	r3, r1
 8006a46:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8006a48:	2301      	movs	r3, #1
 8006a4a:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8006a4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a50:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8006a52:	f107 030c 	add.w	r3, r7, #12
 8006a56:	4618      	mov	r0, r3
 8006a58:	f7fe feec 	bl	8005834 <get_ldnumber>
 8006a5c:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	da02      	bge.n	8006a6a <f_mkfs+0x32>
 8006a64:	230b      	movs	r3, #11
 8006a66:	f000 bc31 	b.w	80072cc <f_mkfs+0x894>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8006a6a:	4aa5      	ldr	r2, [pc, #660]	; (8006d00 <f_mkfs+0x2c8>)
 8006a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d005      	beq.n	8006a82 <f_mkfs+0x4a>
 8006a76:	4aa2      	ldr	r2, [pc, #648]	; (8006d00 <f_mkfs+0x2c8>)
 8006a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8006a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a84:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8006a88:	2300      	movs	r3, #0
 8006a8a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8006a8e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006a92:	4618      	mov	r0, r3
 8006a94:	f7fd fc42 	bl	800431c <disk_initialize>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8006a9e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8006aa2:	f003 0301 	and.w	r3, r3, #1
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d002      	beq.n	8006ab0 <f_mkfs+0x78>
 8006aaa:	2303      	movs	r3, #3
 8006aac:	f000 bc0e 	b.w	80072cc <f_mkfs+0x894>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8006ab0:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8006ab4:	f003 0304 	and.w	r3, r3, #4
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d002      	beq.n	8006ac2 <f_mkfs+0x8a>
 8006abc:	230a      	movs	r3, #10
 8006abe:	f000 bc05 	b.w	80072cc <f_mkfs+0x894>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8006ac2:	f107 0214 	add.w	r2, r7, #20
 8006ac6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006aca:	2103      	movs	r1, #3
 8006acc:	4618      	mov	r0, r3
 8006ace:	f7fd fc8b 	bl	80043e8 <disk_ioctl>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d10c      	bne.n	8006af2 <f_mkfs+0xba>
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d009      	beq.n	8006af2 <f_mkfs+0xba>
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ae4:	d805      	bhi.n	8006af2 <f_mkfs+0xba>
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	1e5a      	subs	r2, r3, #1
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	4013      	ands	r3, r2
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d001      	beq.n	8006af6 <f_mkfs+0xbe>
 8006af2:	2301      	movs	r3, #1
 8006af4:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
 8006af6:	f107 021a 	add.w	r2, r7, #26
 8006afa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006afe:	2102      	movs	r1, #2
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7fd fc71 	bl	80043e8 <disk_ioctl>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d001      	beq.n	8006b10 <f_mkfs+0xd8>
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e3dd      	b.n	80072cc <f_mkfs+0x894>
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
 8006b10:	8b7b      	ldrh	r3, [r7, #26]
 8006b12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b16:	d80a      	bhi.n	8006b2e <f_mkfs+0xf6>
 8006b18:	8b7b      	ldrh	r3, [r7, #26]
 8006b1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b1e:	d306      	bcc.n	8006b2e <f_mkfs+0xf6>
 8006b20:	8b7b      	ldrh	r3, [r7, #26]
 8006b22:	461a      	mov	r2, r3
 8006b24:	8b7b      	ldrh	r3, [r7, #26]
 8006b26:	3b01      	subs	r3, #1
 8006b28:	4013      	ands	r3, r2
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d001      	beq.n	8006b32 <f_mkfs+0xfa>
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e3cc      	b.n	80072cc <f_mkfs+0x894>
#else
	ss = _MAX_SS;
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d004      	beq.n	8006b42 <f_mkfs+0x10a>
 8006b38:	8b7b      	ldrh	r3, [r7, #26]
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d309      	bcc.n	8006b56 <f_mkfs+0x11e>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b48:	d805      	bhi.n	8006b56 <f_mkfs+0x11e>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	1e5a      	subs	r2, r3, #1
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4013      	ands	r3, r2
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d001      	beq.n	8006b5a <f_mkfs+0x122>
 8006b56:	2313      	movs	r3, #19
 8006b58:	e3b8      	b.n	80072cc <f_mkfs+0x894>
	au /= ss;	/* Cluster size in unit of sector */
 8006b5a:	8b7b      	ldrh	r3, [r7, #26]
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b64:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	637b      	str	r3, [r7, #52]	; 0x34
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8006b6a:	8b7b      	ldrh	r3, [r7, #26]
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b72:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b76:	633b      	str	r3, [r7, #48]	; 0x30
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8006b78:	8b7b      	ldrh	r3, [r7, #26]
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7e:	fb02 f303 	mul.w	r3, r2, r3
 8006b82:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (!szb_buf) return FR_MKFS_ABORTED;
 8006b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d101      	bne.n	8006b8e <f_mkfs+0x156>
 8006b8a:	230e      	movs	r3, #14
 8006b8c:	e39e      	b.n	80072cc <f_mkfs+0x894>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8006b8e:	f107 0210 	add.w	r2, r7, #16
 8006b92:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006b96:	2101      	movs	r1, #1
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f7fd fc25 	bl	80043e8 <disk_ioctl>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d001      	beq.n	8006ba8 <f_mkfs+0x170>
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e391      	b.n	80072cc <f_mkfs+0x894>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8006ba8:	7afb      	ldrb	r3, [r7, #11]
 8006baa:	f003 0308 	and.w	r3, r3, #8
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d001      	beq.n	8006bb6 <f_mkfs+0x17e>
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	e000      	b.n	8006bb8 <f_mkfs+0x180>
 8006bb6:	233f      	movs	r3, #63	; 0x3f
 8006bb8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d901      	bls.n	8006bc6 <f_mkfs+0x18e>
 8006bc2:	230e      	movs	r3, #14
 8006bc4:	e382      	b.n	80072cc <f_mkfs+0x894>
		sz_vol -= b_vol;						/* Volume size */
 8006bc6:	693a      	ldr	r2, [r7, #16]
 8006bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	2b7f      	cmp	r3, #127	; 0x7f
 8006bd2:	d801      	bhi.n	8006bd8 <f_mkfs+0x1a0>
 8006bd4:	230e      	movs	r3, #14
 8006bd6:	e379      	b.n	80072cc <f_mkfs+0x894>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2b80      	cmp	r3, #128	; 0x80
 8006bdc:	d901      	bls.n	8006be2 <f_mkfs+0x1aa>
 8006bde:	2313      	movs	r3, #19
 8006be0:	e374      	b.n	80072cc <f_mkfs+0x894>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8006be2:	7afb      	ldrb	r3, [r7, #11]
 8006be4:	f003 0302 	and.w	r3, r3, #2
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00d      	beq.n	8006c08 <f_mkfs+0x1d0>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8006bec:	7afb      	ldrb	r3, [r7, #11]
 8006bee:	f003 0307 	and.w	r3, r3, #7
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d004      	beq.n	8006c00 <f_mkfs+0x1c8>
 8006bf6:	7afb      	ldrb	r3, [r7, #11]
 8006bf8:	f003 0301 	and.w	r3, r3, #1
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d103      	bne.n	8006c08 <f_mkfs+0x1d0>
				fmt = FS_FAT32; break;
 8006c00:	2303      	movs	r3, #3
 8006c02:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006c06:	e009      	b.n	8006c1c <f_mkfs+0x1e4>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8006c08:	7afb      	ldrb	r3, [r7, #11]
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d101      	bne.n	8006c16 <f_mkfs+0x1de>
 8006c12:	2313      	movs	r3, #19
 8006c14:	e35a      	b.n	80072cc <f_mkfs+0x894>
		fmt = FS_FAT16;
 8006c16:	2302      	movs	r3, #2
 8006c18:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8006c20:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006c24:	2b03      	cmp	r3, #3
 8006c26:	d13c      	bne.n	8006ca2 <f_mkfs+0x26a>
				if (!pau) {	/* au auto-selection */
 8006c28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d11b      	bne.n	8006c66 <f_mkfs+0x22e>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	0c5b      	lsrs	r3, r3, #17
 8006c32:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8006c34:	2300      	movs	r3, #0
 8006c36:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c38:	2301      	movs	r3, #1
 8006c3a:	653b      	str	r3, [r7, #80]	; 0x50
 8006c3c:	e005      	b.n	8006c4a <f_mkfs+0x212>
 8006c3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c40:	3301      	adds	r3, #1
 8006c42:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c46:	005b      	lsls	r3, r3, #1
 8006c48:	653b      	str	r3, [r7, #80]	; 0x50
 8006c4a:	4a2e      	ldr	r2, [pc, #184]	; (8006d04 <f_mkfs+0x2cc>)
 8006c4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d007      	beq.n	8006c66 <f_mkfs+0x22e>
 8006c56:	4a2b      	ldr	r2, [pc, #172]	; (8006d04 <f_mkfs+0x2cc>)
 8006c58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c5e:	461a      	mov	r2, r3
 8006c60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d2eb      	bcs.n	8006c3e <f_mkfs+0x206>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8006c66:	693a      	ldr	r2, [r7, #16]
 8006c68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c6e:	627b      	str	r3, [r7, #36]	; 0x24
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8006c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c72:	3302      	adds	r3, #2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	8b7a      	ldrh	r2, [r7, #26]
 8006c78:	4413      	add	r3, r2
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	8b7a      	ldrh	r2, [r7, #26]
 8006c7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c82:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 8006c84:	2320      	movs	r3, #32
 8006c86:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 8006c88:	2300      	movs	r3, #0
 8006c8a:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8006c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d903      	bls.n	8006c9e <f_mkfs+0x266>
 8006c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c98:	4a1b      	ldr	r2, [pc, #108]	; (8006d08 <f_mkfs+0x2d0>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d954      	bls.n	8006d48 <f_mkfs+0x310>
 8006c9e:	230e      	movs	r3, #14
 8006ca0:	e314      	b.n	80072cc <f_mkfs+0x894>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8006ca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d11b      	bne.n	8006ce0 <f_mkfs+0x2a8>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	0b1b      	lsrs	r3, r3, #12
 8006cac:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8006cae:	2300      	movs	r3, #0
 8006cb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	653b      	str	r3, [r7, #80]	; 0x50
 8006cb6:	e005      	b.n	8006cc4 <f_mkfs+0x28c>
 8006cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cba:	3301      	adds	r3, #1
 8006cbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cc0:	005b      	lsls	r3, r3, #1
 8006cc2:	653b      	str	r3, [r7, #80]	; 0x50
 8006cc4:	4a11      	ldr	r2, [pc, #68]	; (8006d0c <f_mkfs+0x2d4>)
 8006cc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d007      	beq.n	8006ce0 <f_mkfs+0x2a8>
 8006cd0:	4a0e      	ldr	r2, [pc, #56]	; (8006d0c <f_mkfs+0x2d4>)
 8006cd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cd8:	461a      	mov	r2, r3
 8006cda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d2eb      	bcs.n	8006cb8 <f_mkfs+0x280>
				}
				n_clst = sz_vol / pau;
 8006ce0:	693a      	ldr	r2, [r7, #16]
 8006ce2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ce8:	627b      	str	r3, [r7, #36]	; 0x24
				if (n_clst > MAX_FAT12) {
 8006cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cec:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d90d      	bls.n	8006d10 <f_mkfs+0x2d8>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf6:	3302      	adds	r3, #2
 8006cf8:	005b      	lsls	r3, r3, #1
 8006cfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cfc:	e013      	b.n	8006d26 <f_mkfs+0x2ee>
 8006cfe:	bf00      	nop
 8006d00:	20001090 	.word	0x20001090
 8006d04:	0800851c 	.word	0x0800851c
 8006d08:	0ffffff5 	.word	0x0ffffff5
 8006d0c:	0800852c 	.word	0x0800852c
				} else {
					fmt = FS_FAT12;
 8006d10:	2301      	movs	r3, #1
 8006d12:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8006d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d18:	4613      	mov	r3, r2
 8006d1a:	005b      	lsls	r3, r3, #1
 8006d1c:	4413      	add	r3, r2
 8006d1e:	3301      	adds	r3, #1
 8006d20:	085b      	lsrs	r3, r3, #1
 8006d22:	3303      	adds	r3, #3
 8006d24:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8006d26:	8b7b      	ldrh	r3, [r7, #26]
 8006d28:	461a      	mov	r2, r3
 8006d2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d2c:	4413      	add	r3, r2
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	8b7a      	ldrh	r2, [r7, #26]
 8006d32:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d36:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 8006d38:	2301      	movs	r3, #1
 8006d3a:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8006d3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d3e:	015b      	lsls	r3, r3, #5
 8006d40:	8b7a      	ldrh	r2, [r7, #26]
 8006d42:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d46:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8006d48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d4c:	4413      	add	r3, r2
 8006d4e:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8006d50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d54:	fb02 f203 	mul.w	r2, r2, r3
 8006d58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d5a:	4413      	add	r3, r2
 8006d5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006d5e:	4413      	add	r3, r2
 8006d60:	623b      	str	r3, [r7, #32]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8006d62:	697a      	ldr	r2, [r7, #20]
 8006d64:	6a3b      	ldr	r3, [r7, #32]
 8006d66:	4413      	add	r3, r2
 8006d68:	1e5a      	subs	r2, r3, #1
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	425b      	negs	r3, r3
 8006d6e:	401a      	ands	r2, r3
 8006d70:	6a3b      	ldr	r3, [r7, #32]
 8006d72:	1ad3      	subs	r3, r2, r3
 8006d74:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8006d76:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006d7a:	2b03      	cmp	r3, #3
 8006d7c:	d108      	bne.n	8006d90 <f_mkfs+0x358>
				sz_rsv += n; b_fat += n;
 8006d7e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006d80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d82:	4413      	add	r3, r2
 8006d84:	657b      	str	r3, [r7, #84]	; 0x54
 8006d86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d8a:	4413      	add	r3, r2
 8006d8c:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d8e:	e006      	b.n	8006d9e <f_mkfs+0x366>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 8006d90:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006d92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d98:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006d9a:	4413      	add	r3, r2
 8006d9c:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8006d9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006da0:	011a      	lsls	r2, r3, #4
 8006da2:	6a3b      	ldr	r3, [r7, #32]
 8006da4:	441a      	add	r2, r3
 8006da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da8:	1ad2      	subs	r2, r2, r3
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d901      	bls.n	8006db4 <f_mkfs+0x37c>
 8006db0:	230e      	movs	r3, #14
 8006db2:	e28b      	b.n	80072cc <f_mkfs+0x894>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8006db4:	693a      	ldr	r2, [r7, #16]
 8006db6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006db8:	1ad2      	subs	r2, r2, r3
 8006dba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006dbc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006dbe:	fb01 f303 	mul.w	r3, r1, r3
 8006dc2:	1ad2      	subs	r2, r2, r3
 8006dc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dc6:	1ad2      	subs	r2, r2, r3
 8006dc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dce:	627b      	str	r3, [r7, #36]	; 0x24
			if (fmt == FS_FAT32) {
 8006dd0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006dd4:	2b03      	cmp	r3, #3
 8006dd6:	d10f      	bne.n	8006df8 <f_mkfs+0x3c0>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8006dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dda:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d80a      	bhi.n	8006df8 <f_mkfs+0x3c0>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d105      	bne.n	8006df4 <f_mkfs+0x3bc>
 8006de8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dea:	085b      	lsrs	r3, r3, #1
 8006dec:	607b      	str	r3, [r7, #4]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d144      	bne.n	8006e7e <f_mkfs+0x446>
					return FR_MKFS_ABORTED;
 8006df4:	230e      	movs	r3, #14
 8006df6:	e269      	b.n	80072cc <f_mkfs+0x894>
				}
			}
			if (fmt == FS_FAT16) {
 8006df8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	d133      	bne.n	8006e68 <f_mkfs+0x430>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8006e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e02:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d91e      	bls.n	8006e48 <f_mkfs+0x410>
					if (!au && (pau * 2) <= 64) {
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d107      	bne.n	8006e20 <f_mkfs+0x3e8>
 8006e10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e12:	005b      	lsls	r3, r3, #1
 8006e14:	2b40      	cmp	r3, #64	; 0x40
 8006e16:	d803      	bhi.n	8006e20 <f_mkfs+0x3e8>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8006e18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e1a:	005b      	lsls	r3, r3, #1
 8006e1c:	607b      	str	r3, [r7, #4]
 8006e1e:	e033      	b.n	8006e88 <f_mkfs+0x450>
					}
					if ((opt & FM_FAT32)) {
 8006e20:	7afb      	ldrb	r3, [r7, #11]
 8006e22:	f003 0302 	and.w	r3, r3, #2
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d003      	beq.n	8006e32 <f_mkfs+0x3fa>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006e30:	e02a      	b.n	8006e88 <f_mkfs+0x450>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d105      	bne.n	8006e44 <f_mkfs+0x40c>
 8006e38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e3a:	005b      	lsls	r3, r3, #1
 8006e3c:	607b      	str	r3, [r7, #4]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2b80      	cmp	r3, #128	; 0x80
 8006e42:	d91e      	bls.n	8006e82 <f_mkfs+0x44a>
					return FR_MKFS_ABORTED;
 8006e44:	230e      	movs	r3, #14
 8006e46:	e241      	b.n	80072cc <f_mkfs+0x894>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8006e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4a:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d80a      	bhi.n	8006e68 <f_mkfs+0x430>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d105      	bne.n	8006e64 <f_mkfs+0x42c>
 8006e58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e5a:	005b      	lsls	r3, r3, #1
 8006e5c:	607b      	str	r3, [r7, #4]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2b80      	cmp	r3, #128	; 0x80
 8006e62:	d910      	bls.n	8006e86 <f_mkfs+0x44e>
					return FR_MKFS_ABORTED;
 8006e64:	230e      	movs	r3, #14
 8006e66:	e231      	b.n	80072cc <f_mkfs+0x894>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8006e68:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d10c      	bne.n	8006e8a <f_mkfs+0x452>
 8006e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e72:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d907      	bls.n	8006e8a <f_mkfs+0x452>
 8006e7a:	230e      	movs	r3, #14
 8006e7c:	e226      	b.n	80072cc <f_mkfs+0x894>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8006e7e:	bf00      	nop
 8006e80:	e6cc      	b.n	8006c1c <f_mkfs+0x1e4>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8006e82:	bf00      	nop
 8006e84:	e6ca      	b.n	8006c1c <f_mkfs+0x1e4>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8006e86:	bf00      	nop
			pau = au;
 8006e88:	e6c8      	b.n	8006c1c <f_mkfs+0x1e4>

			/* Ok, it is the valid cluster configuration */
			break;
 8006e8a:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8006e8c:	8b7b      	ldrh	r3, [r7, #26]
 8006e8e:	461a      	mov	r2, r3
 8006e90:	2100      	movs	r1, #0
 8006e92:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006e94:	f7fd fb69 	bl	800456a <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8006e98:	220b      	movs	r2, #11
 8006e9a:	49bd      	ldr	r1, [pc, #756]	; (8007190 <f_mkfs+0x758>)
 8006e9c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006e9e:	f7fd fb43 	bl	8004528 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8006ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ea4:	330b      	adds	r3, #11
 8006ea6:	8b7a      	ldrh	r2, [r7, #26]
 8006ea8:	4611      	mov	r1, r2
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7fd faf5 	bl	800449a <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8006eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eb2:	330d      	adds	r3, #13
 8006eb4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006eb6:	b2d2      	uxtb	r2, r2
 8006eb8:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8006eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ebc:	330e      	adds	r3, #14
 8006ebe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006ec0:	b292      	uxth	r2, r2
 8006ec2:	4611      	mov	r1, r2
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f7fd fae8 	bl	800449a <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8006eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ecc:	3310      	adds	r3, #16
 8006ece:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ed0:	b2d2      	uxtb	r2, r2
 8006ed2:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8006ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ed6:	f103 0211 	add.w	r2, r3, #17
 8006eda:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006ede:	2b03      	cmp	r3, #3
 8006ee0:	d002      	beq.n	8006ee8 <f_mkfs+0x4b0>
 8006ee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	e000      	b.n	8006eea <f_mkfs+0x4b2>
 8006ee8:	2300      	movs	r3, #0
 8006eea:	4619      	mov	r1, r3
 8006eec:	4610      	mov	r0, r2
 8006eee:	f7fd fad4 	bl	800449a <st_word>
		if (sz_vol < 0x10000) {
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ef8:	d208      	bcs.n	8006f0c <f_mkfs+0x4d4>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8006efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006efc:	3313      	adds	r3, #19
 8006efe:	693a      	ldr	r2, [r7, #16]
 8006f00:	b292      	uxth	r2, r2
 8006f02:	4611      	mov	r1, r2
 8006f04:	4618      	mov	r0, r3
 8006f06:	f7fd fac8 	bl	800449a <st_word>
 8006f0a:	e006      	b.n	8006f1a <f_mkfs+0x4e2>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8006f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f0e:	3320      	adds	r3, #32
 8006f10:	693a      	ldr	r2, [r7, #16]
 8006f12:	4611      	mov	r1, r2
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7fd fadb 	bl	80044d0 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8006f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f1c:	3315      	adds	r3, #21
 8006f1e:	22f8      	movs	r2, #248	; 0xf8
 8006f20:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8006f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f24:	3318      	adds	r3, #24
 8006f26:	213f      	movs	r1, #63	; 0x3f
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f7fd fab6 	bl	800449a <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8006f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f30:	331a      	adds	r3, #26
 8006f32:	21ff      	movs	r1, #255	; 0xff
 8006f34:	4618      	mov	r0, r3
 8006f36:	f7fd fab0 	bl	800449a <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8006f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f3c:	331c      	adds	r3, #28
 8006f3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7fd fac5 	bl	80044d0 <st_dword>
		if (fmt == FS_FAT32) {
 8006f46:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006f4a:	2b03      	cmp	r3, #3
 8006f4c:	d131      	bne.n	8006fb2 <f_mkfs+0x57a>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8006f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f50:	f103 0443 	add.w	r4, r3, #67	; 0x43
 8006f54:	f7fd f84e 	bl	8003ff4 <get_fattime>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	4620      	mov	r0, r4
 8006f5e:	f7fd fab7 	bl	80044d0 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8006f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f64:	3324      	adds	r3, #36	; 0x24
 8006f66:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f7fd fab1 	bl	80044d0 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8006f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f70:	332c      	adds	r3, #44	; 0x2c
 8006f72:	2102      	movs	r1, #2
 8006f74:	4618      	mov	r0, r3
 8006f76:	f7fd faab 	bl	80044d0 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8006f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f7c:	3330      	adds	r3, #48	; 0x30
 8006f7e:	2101      	movs	r1, #1
 8006f80:	4618      	mov	r0, r3
 8006f82:	f7fd fa8a 	bl	800449a <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8006f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f88:	3332      	adds	r3, #50	; 0x32
 8006f8a:	2106      	movs	r1, #6
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7fd fa84 	bl	800449a <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8006f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f94:	3340      	adds	r3, #64	; 0x40
 8006f96:	2280      	movs	r2, #128	; 0x80
 8006f98:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8006f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f9c:	3342      	adds	r3, #66	; 0x42
 8006f9e:	2229      	movs	r2, #41	; 0x29
 8006fa0:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8006fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fa4:	3347      	adds	r3, #71	; 0x47
 8006fa6:	2213      	movs	r2, #19
 8006fa8:	497a      	ldr	r1, [pc, #488]	; (8007194 <f_mkfs+0x75c>)
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7fd fabc 	bl	8004528 <mem_cpy>
 8006fb0:	e020      	b.n	8006ff4 <f_mkfs+0x5bc>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8006fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fb4:	f103 0427 	add.w	r4, r3, #39	; 0x27
 8006fb8:	f7fd f81c 	bl	8003ff4 <get_fattime>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	4620      	mov	r0, r4
 8006fc2:	f7fd fa85 	bl	80044d0 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8006fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fc8:	3316      	adds	r3, #22
 8006fca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006fcc:	b292      	uxth	r2, r2
 8006fce:	4611      	mov	r1, r2
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f7fd fa62 	bl	800449a <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8006fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fd8:	3324      	adds	r3, #36	; 0x24
 8006fda:	2280      	movs	r2, #128	; 0x80
 8006fdc:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8006fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fe0:	3326      	adds	r3, #38	; 0x26
 8006fe2:	2229      	movs	r2, #41	; 0x29
 8006fe4:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8006fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fe8:	332b      	adds	r3, #43	; 0x2b
 8006fea:	2213      	movs	r2, #19
 8006fec:	496a      	ldr	r1, [pc, #424]	; (8007198 <f_mkfs+0x760>)
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f7fd fa9a 	bl	8004528 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8006ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ff6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006ffa:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006ffe:	4618      	mov	r0, r3
 8007000:	f7fd fa4b 	bl	800449a <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8007004:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8007008:	2301      	movs	r3, #1
 800700a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800700c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800700e:	f7fd f9cb 	bl	80043a8 <disk_write>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d001      	beq.n	800701c <f_mkfs+0x5e4>
 8007018:	2301      	movs	r3, #1
 800701a:	e157      	b.n	80072cc <f_mkfs+0x894>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800701c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007020:	2b03      	cmp	r3, #3
 8007022:	d140      	bne.n	80070a6 <f_mkfs+0x66e>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8007024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007026:	1d9a      	adds	r2, r3, #6
 8007028:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800702c:	2301      	movs	r3, #1
 800702e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007030:	f7fd f9ba 	bl	80043a8 <disk_write>
			mem_set(buf, 0, ss);
 8007034:	8b7b      	ldrh	r3, [r7, #26]
 8007036:	461a      	mov	r2, r3
 8007038:	2100      	movs	r1, #0
 800703a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800703c:	f7fd fa95 	bl	800456a <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8007040:	4956      	ldr	r1, [pc, #344]	; (800719c <f_mkfs+0x764>)
 8007042:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007044:	f7fd fa44 	bl	80044d0 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8007048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800704a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800704e:	4954      	ldr	r1, [pc, #336]	; (80071a0 <f_mkfs+0x768>)
 8007050:	4618      	mov	r0, r3
 8007052:	f7fd fa3d 	bl	80044d0 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8007056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007058:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800705c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705e:	3b01      	subs	r3, #1
 8007060:	4619      	mov	r1, r3
 8007062:	4610      	mov	r0, r2
 8007064:	f7fd fa34 	bl	80044d0 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8007068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800706a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800706e:	2102      	movs	r1, #2
 8007070:	4618      	mov	r0, r3
 8007072:	f7fd fa2d 	bl	80044d0 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8007076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007078:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800707c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007080:	4618      	mov	r0, r3
 8007082:	f7fd fa0a 	bl	800449a <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8007086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007088:	1dda      	adds	r2, r3, #7
 800708a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800708e:	2301      	movs	r3, #1
 8007090:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007092:	f7fd f989 	bl	80043a8 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8007096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007098:	1c5a      	adds	r2, r3, #1
 800709a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800709e:	2301      	movs	r3, #1
 80070a0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80070a2:	f7fd f981 	bl	80043a8 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 80070a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070a8:	2100      	movs	r1, #0
 80070aa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80070ac:	f7fd fa5d 	bl	800456a <mem_set>
		sect = b_fat;		/* FAT start sector */
 80070b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80070b2:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 80070b4:	2300      	movs	r3, #0
 80070b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80070b8:	e04b      	b.n	8007152 <f_mkfs+0x71a>
			if (fmt == FS_FAT32) {
 80070ba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80070be:	2b03      	cmp	r3, #3
 80070c0:	d113      	bne.n	80070ea <f_mkfs+0x6b2>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 80070c2:	f06f 0107 	mvn.w	r1, #7
 80070c6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80070c8:	f7fd fa02 	bl	80044d0 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 80070cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ce:	3304      	adds	r3, #4
 80070d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80070d4:	4618      	mov	r0, r3
 80070d6:	f7fd f9fb 	bl	80044d0 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 80070da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070dc:	3308      	adds	r3, #8
 80070de:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80070e2:	4618      	mov	r0, r3
 80070e4:	f7fd f9f4 	bl	80044d0 <st_dword>
 80070e8:	e00b      	b.n	8007102 <f_mkfs+0x6ca>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 80070ea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d101      	bne.n	80070f6 <f_mkfs+0x6be>
 80070f2:	4b2c      	ldr	r3, [pc, #176]	; (80071a4 <f_mkfs+0x76c>)
 80070f4:	e001      	b.n	80070fa <f_mkfs+0x6c2>
 80070f6:	f06f 0307 	mvn.w	r3, #7
 80070fa:	4619      	mov	r1, r3
 80070fc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80070fe:	f7fd f9e7 	bl	80044d0 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8007102:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007104:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8007106:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710a:	4293      	cmp	r3, r2
 800710c:	bf28      	it	cs
 800710e:	4613      	movcs	r3, r2
 8007110:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8007112:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8007116:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007118:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800711a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800711c:	f7fd f944 	bl	80043a8 <disk_write>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d001      	beq.n	800712a <f_mkfs+0x6f2>
 8007126:	2301      	movs	r3, #1
 8007128:	e0d0      	b.n	80072cc <f_mkfs+0x894>
				mem_set(buf, 0, ss);
 800712a:	8b7b      	ldrh	r3, [r7, #26]
 800712c:	461a      	mov	r2, r3
 800712e:	2100      	movs	r1, #0
 8007130:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007132:	f7fd fa1a 	bl	800456a <mem_set>
				sect += n; nsect -= n;
 8007136:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007138:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800713a:	4413      	add	r3, r2
 800713c:	667b      	str	r3, [r7, #100]	; 0x64
 800713e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007140:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007142:	1ad3      	subs	r3, r2, r3
 8007144:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 8007146:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007148:	2b00      	cmp	r3, #0
 800714a:	d1dc      	bne.n	8007106 <f_mkfs+0x6ce>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800714c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800714e:	3301      	adds	r3, #1
 8007150:	64bb      	str	r3, [r7, #72]	; 0x48
 8007152:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007156:	429a      	cmp	r2, r3
 8007158:	d3af      	bcc.n	80070ba <f_mkfs+0x682>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800715a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800715e:	2b03      	cmp	r3, #3
 8007160:	d101      	bne.n	8007166 <f_mkfs+0x72e>
 8007162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007164:	e000      	b.n	8007168 <f_mkfs+0x730>
 8007166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007168:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800716a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800716c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716e:	4293      	cmp	r3, r2
 8007170:	bf28      	it	cs
 8007172:	4613      	movcs	r3, r2
 8007174:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8007176:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800717a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800717c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800717e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007180:	f7fd f912 	bl	80043a8 <disk_write>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00e      	beq.n	80071a8 <f_mkfs+0x770>
 800718a:	2301      	movs	r3, #1
 800718c:	e09e      	b.n	80072cc <f_mkfs+0x894>
 800718e:	bf00      	nop
 8007190:	0800843c 	.word	0x0800843c
 8007194:	08008448 	.word	0x08008448
 8007198:	0800845c 	.word	0x0800845c
 800719c:	41615252 	.word	0x41615252
 80071a0:	61417272 	.word	0x61417272
 80071a4:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 80071a8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80071aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071ac:	4413      	add	r3, r2
 80071ae:	667b      	str	r3, [r7, #100]	; 0x64
 80071b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80071b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071b4:	1ad3      	subs	r3, r2, r3
 80071b6:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 80071b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d1d5      	bne.n	800716a <f_mkfs+0x732>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 80071be:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80071c2:	2b03      	cmp	r3, #3
 80071c4:	d103      	bne.n	80071ce <f_mkfs+0x796>
			sys = 0x0C;		/* FAT32X */
 80071c6:	230c      	movs	r3, #12
 80071c8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80071cc:	e010      	b.n	80071f0 <f_mkfs+0x7b8>
		} else {
			if (sz_vol >= 0x10000) {
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071d4:	d303      	bcc.n	80071de <f_mkfs+0x7a6>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 80071d6:	2306      	movs	r3, #6
 80071d8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80071dc:	e008      	b.n	80071f0 <f_mkfs+0x7b8>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 80071de:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	d101      	bne.n	80071ea <f_mkfs+0x7b2>
 80071e6:	2304      	movs	r3, #4
 80071e8:	e000      	b.n	80071ec <f_mkfs+0x7b4>
 80071ea:	2301      	movs	r3, #1
 80071ec:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 80071f0:	7afb      	ldrb	r3, [r7, #11]
 80071f2:	f003 0308 	and.w	r3, r3, #8
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d15b      	bne.n	80072b2 <f_mkfs+0x87a>
			mem_set(buf, 0, ss);
 80071fa:	8b7b      	ldrh	r3, [r7, #26]
 80071fc:	461a      	mov	r2, r3
 80071fe:	2100      	movs	r1, #0
 8007200:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007202:	f7fd f9b2 	bl	800456a <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8007206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007208:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800720c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007210:	4618      	mov	r0, r3
 8007212:	f7fd f942 	bl	800449a <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8007216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007218:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800721c:	61fb      	str	r3, [r7, #28]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	2200      	movs	r2, #0
 8007222:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	3301      	adds	r3, #1
 8007228:	2201      	movs	r2, #1
 800722a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	3302      	adds	r3, #2
 8007230:	2201      	movs	r2, #1
 8007232:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	3303      	adds	r3, #3
 8007238:	2200      	movs	r2, #0
 800723a:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	3304      	adds	r3, #4
 8007240:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8007244:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8007246:	693a      	ldr	r2, [r7, #16]
 8007248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724a:	441a      	add	r2, r3
 800724c:	4b21      	ldr	r3, [pc, #132]	; (80072d4 <f_mkfs+0x89c>)
 800724e:	fba3 1302 	umull	r1, r3, r3, r2
 8007252:	1ad2      	subs	r2, r2, r3
 8007254:	0852      	lsrs	r2, r2, #1
 8007256:	4413      	add	r3, r2
 8007258:	0b5b      	lsrs	r3, r3, #13
 800725a:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	3305      	adds	r3, #5
 8007260:	22fe      	movs	r2, #254	; 0xfe
 8007262:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8007264:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007266:	089b      	lsrs	r3, r3, #2
 8007268:	b2da      	uxtb	r2, r3
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	3306      	adds	r3, #6
 800726e:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8007272:	b2d2      	uxtb	r2, r2
 8007274:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	3307      	adds	r3, #7
 800727a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800727c:	b2d2      	uxtb	r2, r2
 800727e:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	3308      	adds	r3, #8
 8007284:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007286:	4618      	mov	r0, r3
 8007288:	f7fd f922 	bl	80044d0 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	330c      	adds	r3, #12
 8007290:	693a      	ldr	r2, [r7, #16]
 8007292:	4611      	mov	r1, r2
 8007294:	4618      	mov	r0, r3
 8007296:	f7fd f91b 	bl	80044d0 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800729a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800729e:	2301      	movs	r3, #1
 80072a0:	2200      	movs	r2, #0
 80072a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80072a4:	f7fd f880 	bl	80043a8 <disk_write>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d001      	beq.n	80072b2 <f_mkfs+0x87a>
 80072ae:	2301      	movs	r3, #1
 80072b0:	e00c      	b.n	80072cc <f_mkfs+0x894>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 80072b2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80072b6:	2200      	movs	r2, #0
 80072b8:	2100      	movs	r1, #0
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7fd f894 	bl	80043e8 <disk_ioctl>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d001      	beq.n	80072ca <f_mkfs+0x892>
 80072c6:	2301      	movs	r3, #1
 80072c8:	e000      	b.n	80072cc <f_mkfs+0x894>

	return FR_OK;
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3774      	adds	r7, #116	; 0x74
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd90      	pop	{r4, r7, pc}
 80072d4:	0515565b 	.word	0x0515565b

080072d8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80072d8:	b480      	push	{r7}
 80072da:	b087      	sub	sp, #28
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	4613      	mov	r3, r2
 80072e4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80072e6:	2301      	movs	r3, #1
 80072e8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80072ea:	2300      	movs	r3, #0
 80072ec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80072ee:	4b1f      	ldr	r3, [pc, #124]	; (800736c <FATFS_LinkDriverEx+0x94>)
 80072f0:	7a5b      	ldrb	r3, [r3, #9]
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d131      	bne.n	800735c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80072f8:	4b1c      	ldr	r3, [pc, #112]	; (800736c <FATFS_LinkDriverEx+0x94>)
 80072fa:	7a5b      	ldrb	r3, [r3, #9]
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	461a      	mov	r2, r3
 8007300:	4b1a      	ldr	r3, [pc, #104]	; (800736c <FATFS_LinkDriverEx+0x94>)
 8007302:	2100      	movs	r1, #0
 8007304:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007306:	4b19      	ldr	r3, [pc, #100]	; (800736c <FATFS_LinkDriverEx+0x94>)
 8007308:	7a5b      	ldrb	r3, [r3, #9]
 800730a:	b2db      	uxtb	r3, r3
 800730c:	4a17      	ldr	r2, [pc, #92]	; (800736c <FATFS_LinkDriverEx+0x94>)
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	4413      	add	r3, r2
 8007312:	68fa      	ldr	r2, [r7, #12]
 8007314:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007316:	4b15      	ldr	r3, [pc, #84]	; (800736c <FATFS_LinkDriverEx+0x94>)
 8007318:	7a5b      	ldrb	r3, [r3, #9]
 800731a:	b2db      	uxtb	r3, r3
 800731c:	461a      	mov	r2, r3
 800731e:	4b13      	ldr	r3, [pc, #76]	; (800736c <FATFS_LinkDriverEx+0x94>)
 8007320:	4413      	add	r3, r2
 8007322:	79fa      	ldrb	r2, [r7, #7]
 8007324:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007326:	4b11      	ldr	r3, [pc, #68]	; (800736c <FATFS_LinkDriverEx+0x94>)
 8007328:	7a5b      	ldrb	r3, [r3, #9]
 800732a:	b2db      	uxtb	r3, r3
 800732c:	1c5a      	adds	r2, r3, #1
 800732e:	b2d1      	uxtb	r1, r2
 8007330:	4a0e      	ldr	r2, [pc, #56]	; (800736c <FATFS_LinkDriverEx+0x94>)
 8007332:	7251      	strb	r1, [r2, #9]
 8007334:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007336:	7dbb      	ldrb	r3, [r7, #22]
 8007338:	3330      	adds	r3, #48	; 0x30
 800733a:	b2da      	uxtb	r2, r3
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	3301      	adds	r3, #1
 8007344:	223a      	movs	r2, #58	; 0x3a
 8007346:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	3302      	adds	r3, #2
 800734c:	222f      	movs	r2, #47	; 0x2f
 800734e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	3303      	adds	r3, #3
 8007354:	2200      	movs	r2, #0
 8007356:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007358:	2300      	movs	r3, #0
 800735a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800735c:	7dfb      	ldrb	r3, [r7, #23]
}
 800735e:	4618      	mov	r0, r3
 8007360:	371c      	adds	r7, #28
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	200010b8 	.word	0x200010b8

08007370 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800737a:	2200      	movs	r2, #0
 800737c:	6839      	ldr	r1, [r7, #0]
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f7ff ffaa 	bl	80072d8 <FATFS_LinkDriverEx>
 8007384:	4603      	mov	r3, r0
}
 8007386:	4618      	mov	r0, r3
 8007388:	3708      	adds	r7, #8
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
	...

08007390 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 8007390:	b480      	push	{r7}
 8007392:	b085      	sub	sp, #20
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	460b      	mov	r3, r1
 800739a:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 800739c:	2300      	movs	r3, #0
 800739e:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 80073a0:	2301      	movs	r3, #1
 80073a2:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 80073a4:	4b15      	ldr	r3, [pc, #84]	; (80073fc <FATFS_UnLinkDriverEx+0x6c>)
 80073a6:	7a5b      	ldrb	r3, [r3, #9]
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d01e      	beq.n	80073ec <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	3b30      	subs	r3, #48	; 0x30
 80073b4:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 80073b6:	7bbb      	ldrb	r3, [r7, #14]
 80073b8:	4a10      	ldr	r2, [pc, #64]	; (80073fc <FATFS_UnLinkDriverEx+0x6c>)
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	4413      	add	r3, r2
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d013      	beq.n	80073ec <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 80073c4:	7bbb      	ldrb	r3, [r7, #14]
 80073c6:	4a0d      	ldr	r2, [pc, #52]	; (80073fc <FATFS_UnLinkDriverEx+0x6c>)
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	4413      	add	r3, r2
 80073cc:	2200      	movs	r2, #0
 80073ce:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 80073d0:	7bbb      	ldrb	r3, [r7, #14]
 80073d2:	4a0a      	ldr	r2, [pc, #40]	; (80073fc <FATFS_UnLinkDriverEx+0x6c>)
 80073d4:	4413      	add	r3, r2
 80073d6:	2200      	movs	r2, #0
 80073d8:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 80073da:	4b08      	ldr	r3, [pc, #32]	; (80073fc <FATFS_UnLinkDriverEx+0x6c>)
 80073dc:	7a5b      	ldrb	r3, [r3, #9]
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	3b01      	subs	r3, #1
 80073e2:	b2da      	uxtb	r2, r3
 80073e4:	4b05      	ldr	r3, [pc, #20]	; (80073fc <FATFS_UnLinkDriverEx+0x6c>)
 80073e6:	725a      	strb	r2, [r3, #9]
      ret = 0;
 80073e8:	2300      	movs	r3, #0
 80073ea:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80073ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3714      	adds	r7, #20
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	200010b8 	.word	0x200010b8

08007400 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 8007408:	2100      	movs	r1, #0
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f7ff ffc0 	bl	8007390 <FATFS_UnLinkDriverEx>
 8007410:	4603      	mov	r3, r0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3708      	adds	r7, #8
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
	...

0800741c <__errno>:
 800741c:	4b01      	ldr	r3, [pc, #4]	; (8007424 <__errno+0x8>)
 800741e:	6818      	ldr	r0, [r3, #0]
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	2000000c 	.word	0x2000000c

08007428 <__libc_init_array>:
 8007428:	b570      	push	{r4, r5, r6, lr}
 800742a:	4d0d      	ldr	r5, [pc, #52]	; (8007460 <__libc_init_array+0x38>)
 800742c:	4c0d      	ldr	r4, [pc, #52]	; (8007464 <__libc_init_array+0x3c>)
 800742e:	1b64      	subs	r4, r4, r5
 8007430:	10a4      	asrs	r4, r4, #2
 8007432:	2600      	movs	r6, #0
 8007434:	42a6      	cmp	r6, r4
 8007436:	d109      	bne.n	800744c <__libc_init_array+0x24>
 8007438:	4d0b      	ldr	r5, [pc, #44]	; (8007468 <__libc_init_array+0x40>)
 800743a:	4c0c      	ldr	r4, [pc, #48]	; (800746c <__libc_init_array+0x44>)
 800743c:	f000 ff76 	bl	800832c <_init>
 8007440:	1b64      	subs	r4, r4, r5
 8007442:	10a4      	asrs	r4, r4, #2
 8007444:	2600      	movs	r6, #0
 8007446:	42a6      	cmp	r6, r4
 8007448:	d105      	bne.n	8007456 <__libc_init_array+0x2e>
 800744a:	bd70      	pop	{r4, r5, r6, pc}
 800744c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007450:	4798      	blx	r3
 8007452:	3601      	adds	r6, #1
 8007454:	e7ee      	b.n	8007434 <__libc_init_array+0xc>
 8007456:	f855 3b04 	ldr.w	r3, [r5], #4
 800745a:	4798      	blx	r3
 800745c:	3601      	adds	r6, #1
 800745e:	e7f2      	b.n	8007446 <__libc_init_array+0x1e>
 8007460:	080085dc 	.word	0x080085dc
 8007464:	080085dc 	.word	0x080085dc
 8007468:	080085dc 	.word	0x080085dc
 800746c:	080085e0 	.word	0x080085e0

08007470 <memset>:
 8007470:	4402      	add	r2, r0
 8007472:	4603      	mov	r3, r0
 8007474:	4293      	cmp	r3, r2
 8007476:	d100      	bne.n	800747a <memset+0xa>
 8007478:	4770      	bx	lr
 800747a:	f803 1b01 	strb.w	r1, [r3], #1
 800747e:	e7f9      	b.n	8007474 <memset+0x4>

08007480 <iprintf>:
 8007480:	b40f      	push	{r0, r1, r2, r3}
 8007482:	4b0a      	ldr	r3, [pc, #40]	; (80074ac <iprintf+0x2c>)
 8007484:	b513      	push	{r0, r1, r4, lr}
 8007486:	681c      	ldr	r4, [r3, #0]
 8007488:	b124      	cbz	r4, 8007494 <iprintf+0x14>
 800748a:	69a3      	ldr	r3, [r4, #24]
 800748c:	b913      	cbnz	r3, 8007494 <iprintf+0x14>
 800748e:	4620      	mov	r0, r4
 8007490:	f000 f866 	bl	8007560 <__sinit>
 8007494:	ab05      	add	r3, sp, #20
 8007496:	9a04      	ldr	r2, [sp, #16]
 8007498:	68a1      	ldr	r1, [r4, #8]
 800749a:	9301      	str	r3, [sp, #4]
 800749c:	4620      	mov	r0, r4
 800749e:	f000 f983 	bl	80077a8 <_vfiprintf_r>
 80074a2:	b002      	add	sp, #8
 80074a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074a8:	b004      	add	sp, #16
 80074aa:	4770      	bx	lr
 80074ac:	2000000c 	.word	0x2000000c

080074b0 <std>:
 80074b0:	2300      	movs	r3, #0
 80074b2:	b510      	push	{r4, lr}
 80074b4:	4604      	mov	r4, r0
 80074b6:	e9c0 3300 	strd	r3, r3, [r0]
 80074ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80074be:	6083      	str	r3, [r0, #8]
 80074c0:	8181      	strh	r1, [r0, #12]
 80074c2:	6643      	str	r3, [r0, #100]	; 0x64
 80074c4:	81c2      	strh	r2, [r0, #14]
 80074c6:	6183      	str	r3, [r0, #24]
 80074c8:	4619      	mov	r1, r3
 80074ca:	2208      	movs	r2, #8
 80074cc:	305c      	adds	r0, #92	; 0x5c
 80074ce:	f7ff ffcf 	bl	8007470 <memset>
 80074d2:	4b05      	ldr	r3, [pc, #20]	; (80074e8 <std+0x38>)
 80074d4:	6263      	str	r3, [r4, #36]	; 0x24
 80074d6:	4b05      	ldr	r3, [pc, #20]	; (80074ec <std+0x3c>)
 80074d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80074da:	4b05      	ldr	r3, [pc, #20]	; (80074f0 <std+0x40>)
 80074dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80074de:	4b05      	ldr	r3, [pc, #20]	; (80074f4 <std+0x44>)
 80074e0:	6224      	str	r4, [r4, #32]
 80074e2:	6323      	str	r3, [r4, #48]	; 0x30
 80074e4:	bd10      	pop	{r4, pc}
 80074e6:	bf00      	nop
 80074e8:	08007d51 	.word	0x08007d51
 80074ec:	08007d73 	.word	0x08007d73
 80074f0:	08007dab 	.word	0x08007dab
 80074f4:	08007dcf 	.word	0x08007dcf

080074f8 <_cleanup_r>:
 80074f8:	4901      	ldr	r1, [pc, #4]	; (8007500 <_cleanup_r+0x8>)
 80074fa:	f000 b8af 	b.w	800765c <_fwalk_reent>
 80074fe:	bf00      	nop
 8007500:	080080a9 	.word	0x080080a9

08007504 <__sfmoreglue>:
 8007504:	b570      	push	{r4, r5, r6, lr}
 8007506:	1e4a      	subs	r2, r1, #1
 8007508:	2568      	movs	r5, #104	; 0x68
 800750a:	4355      	muls	r5, r2
 800750c:	460e      	mov	r6, r1
 800750e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007512:	f000 f8c5 	bl	80076a0 <_malloc_r>
 8007516:	4604      	mov	r4, r0
 8007518:	b140      	cbz	r0, 800752c <__sfmoreglue+0x28>
 800751a:	2100      	movs	r1, #0
 800751c:	e9c0 1600 	strd	r1, r6, [r0]
 8007520:	300c      	adds	r0, #12
 8007522:	60a0      	str	r0, [r4, #8]
 8007524:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007528:	f7ff ffa2 	bl	8007470 <memset>
 800752c:	4620      	mov	r0, r4
 800752e:	bd70      	pop	{r4, r5, r6, pc}

08007530 <__sfp_lock_acquire>:
 8007530:	4801      	ldr	r0, [pc, #4]	; (8007538 <__sfp_lock_acquire+0x8>)
 8007532:	f000 b8b3 	b.w	800769c <__retarget_lock_acquire_recursive>
 8007536:	bf00      	nop
 8007538:	20003210 	.word	0x20003210

0800753c <__sfp_lock_release>:
 800753c:	4801      	ldr	r0, [pc, #4]	; (8007544 <__sfp_lock_release+0x8>)
 800753e:	f000 b8ae 	b.w	800769e <__retarget_lock_release_recursive>
 8007542:	bf00      	nop
 8007544:	20003210 	.word	0x20003210

08007548 <__sinit_lock_acquire>:
 8007548:	4801      	ldr	r0, [pc, #4]	; (8007550 <__sinit_lock_acquire+0x8>)
 800754a:	f000 b8a7 	b.w	800769c <__retarget_lock_acquire_recursive>
 800754e:	bf00      	nop
 8007550:	2000320b 	.word	0x2000320b

08007554 <__sinit_lock_release>:
 8007554:	4801      	ldr	r0, [pc, #4]	; (800755c <__sinit_lock_release+0x8>)
 8007556:	f000 b8a2 	b.w	800769e <__retarget_lock_release_recursive>
 800755a:	bf00      	nop
 800755c:	2000320b 	.word	0x2000320b

08007560 <__sinit>:
 8007560:	b510      	push	{r4, lr}
 8007562:	4604      	mov	r4, r0
 8007564:	f7ff fff0 	bl	8007548 <__sinit_lock_acquire>
 8007568:	69a3      	ldr	r3, [r4, #24]
 800756a:	b11b      	cbz	r3, 8007574 <__sinit+0x14>
 800756c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007570:	f7ff bff0 	b.w	8007554 <__sinit_lock_release>
 8007574:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007578:	6523      	str	r3, [r4, #80]	; 0x50
 800757a:	4b13      	ldr	r3, [pc, #76]	; (80075c8 <__sinit+0x68>)
 800757c:	4a13      	ldr	r2, [pc, #76]	; (80075cc <__sinit+0x6c>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	62a2      	str	r2, [r4, #40]	; 0x28
 8007582:	42a3      	cmp	r3, r4
 8007584:	bf04      	itt	eq
 8007586:	2301      	moveq	r3, #1
 8007588:	61a3      	streq	r3, [r4, #24]
 800758a:	4620      	mov	r0, r4
 800758c:	f000 f820 	bl	80075d0 <__sfp>
 8007590:	6060      	str	r0, [r4, #4]
 8007592:	4620      	mov	r0, r4
 8007594:	f000 f81c 	bl	80075d0 <__sfp>
 8007598:	60a0      	str	r0, [r4, #8]
 800759a:	4620      	mov	r0, r4
 800759c:	f000 f818 	bl	80075d0 <__sfp>
 80075a0:	2200      	movs	r2, #0
 80075a2:	60e0      	str	r0, [r4, #12]
 80075a4:	2104      	movs	r1, #4
 80075a6:	6860      	ldr	r0, [r4, #4]
 80075a8:	f7ff ff82 	bl	80074b0 <std>
 80075ac:	68a0      	ldr	r0, [r4, #8]
 80075ae:	2201      	movs	r2, #1
 80075b0:	2109      	movs	r1, #9
 80075b2:	f7ff ff7d 	bl	80074b0 <std>
 80075b6:	68e0      	ldr	r0, [r4, #12]
 80075b8:	2202      	movs	r2, #2
 80075ba:	2112      	movs	r1, #18
 80075bc:	f7ff ff78 	bl	80074b0 <std>
 80075c0:	2301      	movs	r3, #1
 80075c2:	61a3      	str	r3, [r4, #24]
 80075c4:	e7d2      	b.n	800756c <__sinit+0xc>
 80075c6:	bf00      	nop
 80075c8:	0800853c 	.word	0x0800853c
 80075cc:	080074f9 	.word	0x080074f9

080075d0 <__sfp>:
 80075d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075d2:	4607      	mov	r7, r0
 80075d4:	f7ff ffac 	bl	8007530 <__sfp_lock_acquire>
 80075d8:	4b1e      	ldr	r3, [pc, #120]	; (8007654 <__sfp+0x84>)
 80075da:	681e      	ldr	r6, [r3, #0]
 80075dc:	69b3      	ldr	r3, [r6, #24]
 80075de:	b913      	cbnz	r3, 80075e6 <__sfp+0x16>
 80075e0:	4630      	mov	r0, r6
 80075e2:	f7ff ffbd 	bl	8007560 <__sinit>
 80075e6:	3648      	adds	r6, #72	; 0x48
 80075e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80075ec:	3b01      	subs	r3, #1
 80075ee:	d503      	bpl.n	80075f8 <__sfp+0x28>
 80075f0:	6833      	ldr	r3, [r6, #0]
 80075f2:	b30b      	cbz	r3, 8007638 <__sfp+0x68>
 80075f4:	6836      	ldr	r6, [r6, #0]
 80075f6:	e7f7      	b.n	80075e8 <__sfp+0x18>
 80075f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80075fc:	b9d5      	cbnz	r5, 8007634 <__sfp+0x64>
 80075fe:	4b16      	ldr	r3, [pc, #88]	; (8007658 <__sfp+0x88>)
 8007600:	60e3      	str	r3, [r4, #12]
 8007602:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007606:	6665      	str	r5, [r4, #100]	; 0x64
 8007608:	f000 f847 	bl	800769a <__retarget_lock_init_recursive>
 800760c:	f7ff ff96 	bl	800753c <__sfp_lock_release>
 8007610:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007614:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007618:	6025      	str	r5, [r4, #0]
 800761a:	61a5      	str	r5, [r4, #24]
 800761c:	2208      	movs	r2, #8
 800761e:	4629      	mov	r1, r5
 8007620:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007624:	f7ff ff24 	bl	8007470 <memset>
 8007628:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800762c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007630:	4620      	mov	r0, r4
 8007632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007634:	3468      	adds	r4, #104	; 0x68
 8007636:	e7d9      	b.n	80075ec <__sfp+0x1c>
 8007638:	2104      	movs	r1, #4
 800763a:	4638      	mov	r0, r7
 800763c:	f7ff ff62 	bl	8007504 <__sfmoreglue>
 8007640:	4604      	mov	r4, r0
 8007642:	6030      	str	r0, [r6, #0]
 8007644:	2800      	cmp	r0, #0
 8007646:	d1d5      	bne.n	80075f4 <__sfp+0x24>
 8007648:	f7ff ff78 	bl	800753c <__sfp_lock_release>
 800764c:	230c      	movs	r3, #12
 800764e:	603b      	str	r3, [r7, #0]
 8007650:	e7ee      	b.n	8007630 <__sfp+0x60>
 8007652:	bf00      	nop
 8007654:	0800853c 	.word	0x0800853c
 8007658:	ffff0001 	.word	0xffff0001

0800765c <_fwalk_reent>:
 800765c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007660:	4606      	mov	r6, r0
 8007662:	4688      	mov	r8, r1
 8007664:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007668:	2700      	movs	r7, #0
 800766a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800766e:	f1b9 0901 	subs.w	r9, r9, #1
 8007672:	d505      	bpl.n	8007680 <_fwalk_reent+0x24>
 8007674:	6824      	ldr	r4, [r4, #0]
 8007676:	2c00      	cmp	r4, #0
 8007678:	d1f7      	bne.n	800766a <_fwalk_reent+0xe>
 800767a:	4638      	mov	r0, r7
 800767c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007680:	89ab      	ldrh	r3, [r5, #12]
 8007682:	2b01      	cmp	r3, #1
 8007684:	d907      	bls.n	8007696 <_fwalk_reent+0x3a>
 8007686:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800768a:	3301      	adds	r3, #1
 800768c:	d003      	beq.n	8007696 <_fwalk_reent+0x3a>
 800768e:	4629      	mov	r1, r5
 8007690:	4630      	mov	r0, r6
 8007692:	47c0      	blx	r8
 8007694:	4307      	orrs	r7, r0
 8007696:	3568      	adds	r5, #104	; 0x68
 8007698:	e7e9      	b.n	800766e <_fwalk_reent+0x12>

0800769a <__retarget_lock_init_recursive>:
 800769a:	4770      	bx	lr

0800769c <__retarget_lock_acquire_recursive>:
 800769c:	4770      	bx	lr

0800769e <__retarget_lock_release_recursive>:
 800769e:	4770      	bx	lr

080076a0 <_malloc_r>:
 80076a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076a2:	1ccd      	adds	r5, r1, #3
 80076a4:	f025 0503 	bic.w	r5, r5, #3
 80076a8:	3508      	adds	r5, #8
 80076aa:	2d0c      	cmp	r5, #12
 80076ac:	bf38      	it	cc
 80076ae:	250c      	movcc	r5, #12
 80076b0:	2d00      	cmp	r5, #0
 80076b2:	4606      	mov	r6, r0
 80076b4:	db01      	blt.n	80076ba <_malloc_r+0x1a>
 80076b6:	42a9      	cmp	r1, r5
 80076b8:	d903      	bls.n	80076c2 <_malloc_r+0x22>
 80076ba:	230c      	movs	r3, #12
 80076bc:	6033      	str	r3, [r6, #0]
 80076be:	2000      	movs	r0, #0
 80076c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076c2:	f000 fda3 	bl	800820c <__malloc_lock>
 80076c6:	4921      	ldr	r1, [pc, #132]	; (800774c <_malloc_r+0xac>)
 80076c8:	680a      	ldr	r2, [r1, #0]
 80076ca:	4614      	mov	r4, r2
 80076cc:	b99c      	cbnz	r4, 80076f6 <_malloc_r+0x56>
 80076ce:	4f20      	ldr	r7, [pc, #128]	; (8007750 <_malloc_r+0xb0>)
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	b923      	cbnz	r3, 80076de <_malloc_r+0x3e>
 80076d4:	4621      	mov	r1, r4
 80076d6:	4630      	mov	r0, r6
 80076d8:	f000 fb2a 	bl	8007d30 <_sbrk_r>
 80076dc:	6038      	str	r0, [r7, #0]
 80076de:	4629      	mov	r1, r5
 80076e0:	4630      	mov	r0, r6
 80076e2:	f000 fb25 	bl	8007d30 <_sbrk_r>
 80076e6:	1c43      	adds	r3, r0, #1
 80076e8:	d123      	bne.n	8007732 <_malloc_r+0x92>
 80076ea:	230c      	movs	r3, #12
 80076ec:	6033      	str	r3, [r6, #0]
 80076ee:	4630      	mov	r0, r6
 80076f0:	f000 fd92 	bl	8008218 <__malloc_unlock>
 80076f4:	e7e3      	b.n	80076be <_malloc_r+0x1e>
 80076f6:	6823      	ldr	r3, [r4, #0]
 80076f8:	1b5b      	subs	r3, r3, r5
 80076fa:	d417      	bmi.n	800772c <_malloc_r+0x8c>
 80076fc:	2b0b      	cmp	r3, #11
 80076fe:	d903      	bls.n	8007708 <_malloc_r+0x68>
 8007700:	6023      	str	r3, [r4, #0]
 8007702:	441c      	add	r4, r3
 8007704:	6025      	str	r5, [r4, #0]
 8007706:	e004      	b.n	8007712 <_malloc_r+0x72>
 8007708:	6863      	ldr	r3, [r4, #4]
 800770a:	42a2      	cmp	r2, r4
 800770c:	bf0c      	ite	eq
 800770e:	600b      	streq	r3, [r1, #0]
 8007710:	6053      	strne	r3, [r2, #4]
 8007712:	4630      	mov	r0, r6
 8007714:	f000 fd80 	bl	8008218 <__malloc_unlock>
 8007718:	f104 000b 	add.w	r0, r4, #11
 800771c:	1d23      	adds	r3, r4, #4
 800771e:	f020 0007 	bic.w	r0, r0, #7
 8007722:	1ac2      	subs	r2, r0, r3
 8007724:	d0cc      	beq.n	80076c0 <_malloc_r+0x20>
 8007726:	1a1b      	subs	r3, r3, r0
 8007728:	50a3      	str	r3, [r4, r2]
 800772a:	e7c9      	b.n	80076c0 <_malloc_r+0x20>
 800772c:	4622      	mov	r2, r4
 800772e:	6864      	ldr	r4, [r4, #4]
 8007730:	e7cc      	b.n	80076cc <_malloc_r+0x2c>
 8007732:	1cc4      	adds	r4, r0, #3
 8007734:	f024 0403 	bic.w	r4, r4, #3
 8007738:	42a0      	cmp	r0, r4
 800773a:	d0e3      	beq.n	8007704 <_malloc_r+0x64>
 800773c:	1a21      	subs	r1, r4, r0
 800773e:	4630      	mov	r0, r6
 8007740:	f000 faf6 	bl	8007d30 <_sbrk_r>
 8007744:	3001      	adds	r0, #1
 8007746:	d1dd      	bne.n	8007704 <_malloc_r+0x64>
 8007748:	e7cf      	b.n	80076ea <_malloc_r+0x4a>
 800774a:	bf00      	nop
 800774c:	200010c4 	.word	0x200010c4
 8007750:	200010c8 	.word	0x200010c8

08007754 <__sfputc_r>:
 8007754:	6893      	ldr	r3, [r2, #8]
 8007756:	3b01      	subs	r3, #1
 8007758:	2b00      	cmp	r3, #0
 800775a:	b410      	push	{r4}
 800775c:	6093      	str	r3, [r2, #8]
 800775e:	da08      	bge.n	8007772 <__sfputc_r+0x1e>
 8007760:	6994      	ldr	r4, [r2, #24]
 8007762:	42a3      	cmp	r3, r4
 8007764:	db01      	blt.n	800776a <__sfputc_r+0x16>
 8007766:	290a      	cmp	r1, #10
 8007768:	d103      	bne.n	8007772 <__sfputc_r+0x1e>
 800776a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800776e:	f000 bb33 	b.w	8007dd8 <__swbuf_r>
 8007772:	6813      	ldr	r3, [r2, #0]
 8007774:	1c58      	adds	r0, r3, #1
 8007776:	6010      	str	r0, [r2, #0]
 8007778:	7019      	strb	r1, [r3, #0]
 800777a:	4608      	mov	r0, r1
 800777c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007780:	4770      	bx	lr

08007782 <__sfputs_r>:
 8007782:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007784:	4606      	mov	r6, r0
 8007786:	460f      	mov	r7, r1
 8007788:	4614      	mov	r4, r2
 800778a:	18d5      	adds	r5, r2, r3
 800778c:	42ac      	cmp	r4, r5
 800778e:	d101      	bne.n	8007794 <__sfputs_r+0x12>
 8007790:	2000      	movs	r0, #0
 8007792:	e007      	b.n	80077a4 <__sfputs_r+0x22>
 8007794:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007798:	463a      	mov	r2, r7
 800779a:	4630      	mov	r0, r6
 800779c:	f7ff ffda 	bl	8007754 <__sfputc_r>
 80077a0:	1c43      	adds	r3, r0, #1
 80077a2:	d1f3      	bne.n	800778c <__sfputs_r+0xa>
 80077a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080077a8 <_vfiprintf_r>:
 80077a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ac:	460d      	mov	r5, r1
 80077ae:	b09d      	sub	sp, #116	; 0x74
 80077b0:	4614      	mov	r4, r2
 80077b2:	4698      	mov	r8, r3
 80077b4:	4606      	mov	r6, r0
 80077b6:	b118      	cbz	r0, 80077c0 <_vfiprintf_r+0x18>
 80077b8:	6983      	ldr	r3, [r0, #24]
 80077ba:	b90b      	cbnz	r3, 80077c0 <_vfiprintf_r+0x18>
 80077bc:	f7ff fed0 	bl	8007560 <__sinit>
 80077c0:	4b89      	ldr	r3, [pc, #548]	; (80079e8 <_vfiprintf_r+0x240>)
 80077c2:	429d      	cmp	r5, r3
 80077c4:	d11b      	bne.n	80077fe <_vfiprintf_r+0x56>
 80077c6:	6875      	ldr	r5, [r6, #4]
 80077c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077ca:	07d9      	lsls	r1, r3, #31
 80077cc:	d405      	bmi.n	80077da <_vfiprintf_r+0x32>
 80077ce:	89ab      	ldrh	r3, [r5, #12]
 80077d0:	059a      	lsls	r2, r3, #22
 80077d2:	d402      	bmi.n	80077da <_vfiprintf_r+0x32>
 80077d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077d6:	f7ff ff61 	bl	800769c <__retarget_lock_acquire_recursive>
 80077da:	89ab      	ldrh	r3, [r5, #12]
 80077dc:	071b      	lsls	r3, r3, #28
 80077de:	d501      	bpl.n	80077e4 <_vfiprintf_r+0x3c>
 80077e0:	692b      	ldr	r3, [r5, #16]
 80077e2:	b9eb      	cbnz	r3, 8007820 <_vfiprintf_r+0x78>
 80077e4:	4629      	mov	r1, r5
 80077e6:	4630      	mov	r0, r6
 80077e8:	f000 fb5a 	bl	8007ea0 <__swsetup_r>
 80077ec:	b1c0      	cbz	r0, 8007820 <_vfiprintf_r+0x78>
 80077ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077f0:	07dc      	lsls	r4, r3, #31
 80077f2:	d50e      	bpl.n	8007812 <_vfiprintf_r+0x6a>
 80077f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077f8:	b01d      	add	sp, #116	; 0x74
 80077fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077fe:	4b7b      	ldr	r3, [pc, #492]	; (80079ec <_vfiprintf_r+0x244>)
 8007800:	429d      	cmp	r5, r3
 8007802:	d101      	bne.n	8007808 <_vfiprintf_r+0x60>
 8007804:	68b5      	ldr	r5, [r6, #8]
 8007806:	e7df      	b.n	80077c8 <_vfiprintf_r+0x20>
 8007808:	4b79      	ldr	r3, [pc, #484]	; (80079f0 <_vfiprintf_r+0x248>)
 800780a:	429d      	cmp	r5, r3
 800780c:	bf08      	it	eq
 800780e:	68f5      	ldreq	r5, [r6, #12]
 8007810:	e7da      	b.n	80077c8 <_vfiprintf_r+0x20>
 8007812:	89ab      	ldrh	r3, [r5, #12]
 8007814:	0598      	lsls	r0, r3, #22
 8007816:	d4ed      	bmi.n	80077f4 <_vfiprintf_r+0x4c>
 8007818:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800781a:	f7ff ff40 	bl	800769e <__retarget_lock_release_recursive>
 800781e:	e7e9      	b.n	80077f4 <_vfiprintf_r+0x4c>
 8007820:	2300      	movs	r3, #0
 8007822:	9309      	str	r3, [sp, #36]	; 0x24
 8007824:	2320      	movs	r3, #32
 8007826:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800782a:	f8cd 800c 	str.w	r8, [sp, #12]
 800782e:	2330      	movs	r3, #48	; 0x30
 8007830:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80079f4 <_vfiprintf_r+0x24c>
 8007834:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007838:	f04f 0901 	mov.w	r9, #1
 800783c:	4623      	mov	r3, r4
 800783e:	469a      	mov	sl, r3
 8007840:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007844:	b10a      	cbz	r2, 800784a <_vfiprintf_r+0xa2>
 8007846:	2a25      	cmp	r2, #37	; 0x25
 8007848:	d1f9      	bne.n	800783e <_vfiprintf_r+0x96>
 800784a:	ebba 0b04 	subs.w	fp, sl, r4
 800784e:	d00b      	beq.n	8007868 <_vfiprintf_r+0xc0>
 8007850:	465b      	mov	r3, fp
 8007852:	4622      	mov	r2, r4
 8007854:	4629      	mov	r1, r5
 8007856:	4630      	mov	r0, r6
 8007858:	f7ff ff93 	bl	8007782 <__sfputs_r>
 800785c:	3001      	adds	r0, #1
 800785e:	f000 80aa 	beq.w	80079b6 <_vfiprintf_r+0x20e>
 8007862:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007864:	445a      	add	r2, fp
 8007866:	9209      	str	r2, [sp, #36]	; 0x24
 8007868:	f89a 3000 	ldrb.w	r3, [sl]
 800786c:	2b00      	cmp	r3, #0
 800786e:	f000 80a2 	beq.w	80079b6 <_vfiprintf_r+0x20e>
 8007872:	2300      	movs	r3, #0
 8007874:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007878:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800787c:	f10a 0a01 	add.w	sl, sl, #1
 8007880:	9304      	str	r3, [sp, #16]
 8007882:	9307      	str	r3, [sp, #28]
 8007884:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007888:	931a      	str	r3, [sp, #104]	; 0x68
 800788a:	4654      	mov	r4, sl
 800788c:	2205      	movs	r2, #5
 800788e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007892:	4858      	ldr	r0, [pc, #352]	; (80079f4 <_vfiprintf_r+0x24c>)
 8007894:	f7f8 fc9c 	bl	80001d0 <memchr>
 8007898:	9a04      	ldr	r2, [sp, #16]
 800789a:	b9d8      	cbnz	r0, 80078d4 <_vfiprintf_r+0x12c>
 800789c:	06d1      	lsls	r1, r2, #27
 800789e:	bf44      	itt	mi
 80078a0:	2320      	movmi	r3, #32
 80078a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078a6:	0713      	lsls	r3, r2, #28
 80078a8:	bf44      	itt	mi
 80078aa:	232b      	movmi	r3, #43	; 0x2b
 80078ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078b0:	f89a 3000 	ldrb.w	r3, [sl]
 80078b4:	2b2a      	cmp	r3, #42	; 0x2a
 80078b6:	d015      	beq.n	80078e4 <_vfiprintf_r+0x13c>
 80078b8:	9a07      	ldr	r2, [sp, #28]
 80078ba:	4654      	mov	r4, sl
 80078bc:	2000      	movs	r0, #0
 80078be:	f04f 0c0a 	mov.w	ip, #10
 80078c2:	4621      	mov	r1, r4
 80078c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078c8:	3b30      	subs	r3, #48	; 0x30
 80078ca:	2b09      	cmp	r3, #9
 80078cc:	d94e      	bls.n	800796c <_vfiprintf_r+0x1c4>
 80078ce:	b1b0      	cbz	r0, 80078fe <_vfiprintf_r+0x156>
 80078d0:	9207      	str	r2, [sp, #28]
 80078d2:	e014      	b.n	80078fe <_vfiprintf_r+0x156>
 80078d4:	eba0 0308 	sub.w	r3, r0, r8
 80078d8:	fa09 f303 	lsl.w	r3, r9, r3
 80078dc:	4313      	orrs	r3, r2
 80078de:	9304      	str	r3, [sp, #16]
 80078e0:	46a2      	mov	sl, r4
 80078e2:	e7d2      	b.n	800788a <_vfiprintf_r+0xe2>
 80078e4:	9b03      	ldr	r3, [sp, #12]
 80078e6:	1d19      	adds	r1, r3, #4
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	9103      	str	r1, [sp, #12]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	bfbb      	ittet	lt
 80078f0:	425b      	neglt	r3, r3
 80078f2:	f042 0202 	orrlt.w	r2, r2, #2
 80078f6:	9307      	strge	r3, [sp, #28]
 80078f8:	9307      	strlt	r3, [sp, #28]
 80078fa:	bfb8      	it	lt
 80078fc:	9204      	strlt	r2, [sp, #16]
 80078fe:	7823      	ldrb	r3, [r4, #0]
 8007900:	2b2e      	cmp	r3, #46	; 0x2e
 8007902:	d10c      	bne.n	800791e <_vfiprintf_r+0x176>
 8007904:	7863      	ldrb	r3, [r4, #1]
 8007906:	2b2a      	cmp	r3, #42	; 0x2a
 8007908:	d135      	bne.n	8007976 <_vfiprintf_r+0x1ce>
 800790a:	9b03      	ldr	r3, [sp, #12]
 800790c:	1d1a      	adds	r2, r3, #4
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	9203      	str	r2, [sp, #12]
 8007912:	2b00      	cmp	r3, #0
 8007914:	bfb8      	it	lt
 8007916:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800791a:	3402      	adds	r4, #2
 800791c:	9305      	str	r3, [sp, #20]
 800791e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007a04 <_vfiprintf_r+0x25c>
 8007922:	7821      	ldrb	r1, [r4, #0]
 8007924:	2203      	movs	r2, #3
 8007926:	4650      	mov	r0, sl
 8007928:	f7f8 fc52 	bl	80001d0 <memchr>
 800792c:	b140      	cbz	r0, 8007940 <_vfiprintf_r+0x198>
 800792e:	2340      	movs	r3, #64	; 0x40
 8007930:	eba0 000a 	sub.w	r0, r0, sl
 8007934:	fa03 f000 	lsl.w	r0, r3, r0
 8007938:	9b04      	ldr	r3, [sp, #16]
 800793a:	4303      	orrs	r3, r0
 800793c:	3401      	adds	r4, #1
 800793e:	9304      	str	r3, [sp, #16]
 8007940:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007944:	482c      	ldr	r0, [pc, #176]	; (80079f8 <_vfiprintf_r+0x250>)
 8007946:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800794a:	2206      	movs	r2, #6
 800794c:	f7f8 fc40 	bl	80001d0 <memchr>
 8007950:	2800      	cmp	r0, #0
 8007952:	d03f      	beq.n	80079d4 <_vfiprintf_r+0x22c>
 8007954:	4b29      	ldr	r3, [pc, #164]	; (80079fc <_vfiprintf_r+0x254>)
 8007956:	bb1b      	cbnz	r3, 80079a0 <_vfiprintf_r+0x1f8>
 8007958:	9b03      	ldr	r3, [sp, #12]
 800795a:	3307      	adds	r3, #7
 800795c:	f023 0307 	bic.w	r3, r3, #7
 8007960:	3308      	adds	r3, #8
 8007962:	9303      	str	r3, [sp, #12]
 8007964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007966:	443b      	add	r3, r7
 8007968:	9309      	str	r3, [sp, #36]	; 0x24
 800796a:	e767      	b.n	800783c <_vfiprintf_r+0x94>
 800796c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007970:	460c      	mov	r4, r1
 8007972:	2001      	movs	r0, #1
 8007974:	e7a5      	b.n	80078c2 <_vfiprintf_r+0x11a>
 8007976:	2300      	movs	r3, #0
 8007978:	3401      	adds	r4, #1
 800797a:	9305      	str	r3, [sp, #20]
 800797c:	4619      	mov	r1, r3
 800797e:	f04f 0c0a 	mov.w	ip, #10
 8007982:	4620      	mov	r0, r4
 8007984:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007988:	3a30      	subs	r2, #48	; 0x30
 800798a:	2a09      	cmp	r2, #9
 800798c:	d903      	bls.n	8007996 <_vfiprintf_r+0x1ee>
 800798e:	2b00      	cmp	r3, #0
 8007990:	d0c5      	beq.n	800791e <_vfiprintf_r+0x176>
 8007992:	9105      	str	r1, [sp, #20]
 8007994:	e7c3      	b.n	800791e <_vfiprintf_r+0x176>
 8007996:	fb0c 2101 	mla	r1, ip, r1, r2
 800799a:	4604      	mov	r4, r0
 800799c:	2301      	movs	r3, #1
 800799e:	e7f0      	b.n	8007982 <_vfiprintf_r+0x1da>
 80079a0:	ab03      	add	r3, sp, #12
 80079a2:	9300      	str	r3, [sp, #0]
 80079a4:	462a      	mov	r2, r5
 80079a6:	4b16      	ldr	r3, [pc, #88]	; (8007a00 <_vfiprintf_r+0x258>)
 80079a8:	a904      	add	r1, sp, #16
 80079aa:	4630      	mov	r0, r6
 80079ac:	f3af 8000 	nop.w
 80079b0:	4607      	mov	r7, r0
 80079b2:	1c78      	adds	r0, r7, #1
 80079b4:	d1d6      	bne.n	8007964 <_vfiprintf_r+0x1bc>
 80079b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079b8:	07d9      	lsls	r1, r3, #31
 80079ba:	d405      	bmi.n	80079c8 <_vfiprintf_r+0x220>
 80079bc:	89ab      	ldrh	r3, [r5, #12]
 80079be:	059a      	lsls	r2, r3, #22
 80079c0:	d402      	bmi.n	80079c8 <_vfiprintf_r+0x220>
 80079c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079c4:	f7ff fe6b 	bl	800769e <__retarget_lock_release_recursive>
 80079c8:	89ab      	ldrh	r3, [r5, #12]
 80079ca:	065b      	lsls	r3, r3, #25
 80079cc:	f53f af12 	bmi.w	80077f4 <_vfiprintf_r+0x4c>
 80079d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079d2:	e711      	b.n	80077f8 <_vfiprintf_r+0x50>
 80079d4:	ab03      	add	r3, sp, #12
 80079d6:	9300      	str	r3, [sp, #0]
 80079d8:	462a      	mov	r2, r5
 80079da:	4b09      	ldr	r3, [pc, #36]	; (8007a00 <_vfiprintf_r+0x258>)
 80079dc:	a904      	add	r1, sp, #16
 80079de:	4630      	mov	r0, r6
 80079e0:	f000 f880 	bl	8007ae4 <_printf_i>
 80079e4:	e7e4      	b.n	80079b0 <_vfiprintf_r+0x208>
 80079e6:	bf00      	nop
 80079e8:	08008560 	.word	0x08008560
 80079ec:	08008580 	.word	0x08008580
 80079f0:	08008540 	.word	0x08008540
 80079f4:	080085a0 	.word	0x080085a0
 80079f8:	080085aa 	.word	0x080085aa
 80079fc:	00000000 	.word	0x00000000
 8007a00:	08007783 	.word	0x08007783
 8007a04:	080085a6 	.word	0x080085a6

08007a08 <_printf_common>:
 8007a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a0c:	4616      	mov	r6, r2
 8007a0e:	4699      	mov	r9, r3
 8007a10:	688a      	ldr	r2, [r1, #8]
 8007a12:	690b      	ldr	r3, [r1, #16]
 8007a14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	bfb8      	it	lt
 8007a1c:	4613      	movlt	r3, r2
 8007a1e:	6033      	str	r3, [r6, #0]
 8007a20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a24:	4607      	mov	r7, r0
 8007a26:	460c      	mov	r4, r1
 8007a28:	b10a      	cbz	r2, 8007a2e <_printf_common+0x26>
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	6033      	str	r3, [r6, #0]
 8007a2e:	6823      	ldr	r3, [r4, #0]
 8007a30:	0699      	lsls	r1, r3, #26
 8007a32:	bf42      	ittt	mi
 8007a34:	6833      	ldrmi	r3, [r6, #0]
 8007a36:	3302      	addmi	r3, #2
 8007a38:	6033      	strmi	r3, [r6, #0]
 8007a3a:	6825      	ldr	r5, [r4, #0]
 8007a3c:	f015 0506 	ands.w	r5, r5, #6
 8007a40:	d106      	bne.n	8007a50 <_printf_common+0x48>
 8007a42:	f104 0a19 	add.w	sl, r4, #25
 8007a46:	68e3      	ldr	r3, [r4, #12]
 8007a48:	6832      	ldr	r2, [r6, #0]
 8007a4a:	1a9b      	subs	r3, r3, r2
 8007a4c:	42ab      	cmp	r3, r5
 8007a4e:	dc26      	bgt.n	8007a9e <_printf_common+0x96>
 8007a50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a54:	1e13      	subs	r3, r2, #0
 8007a56:	6822      	ldr	r2, [r4, #0]
 8007a58:	bf18      	it	ne
 8007a5a:	2301      	movne	r3, #1
 8007a5c:	0692      	lsls	r2, r2, #26
 8007a5e:	d42b      	bmi.n	8007ab8 <_printf_common+0xb0>
 8007a60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a64:	4649      	mov	r1, r9
 8007a66:	4638      	mov	r0, r7
 8007a68:	47c0      	blx	r8
 8007a6a:	3001      	adds	r0, #1
 8007a6c:	d01e      	beq.n	8007aac <_printf_common+0xa4>
 8007a6e:	6823      	ldr	r3, [r4, #0]
 8007a70:	68e5      	ldr	r5, [r4, #12]
 8007a72:	6832      	ldr	r2, [r6, #0]
 8007a74:	f003 0306 	and.w	r3, r3, #6
 8007a78:	2b04      	cmp	r3, #4
 8007a7a:	bf08      	it	eq
 8007a7c:	1aad      	subeq	r5, r5, r2
 8007a7e:	68a3      	ldr	r3, [r4, #8]
 8007a80:	6922      	ldr	r2, [r4, #16]
 8007a82:	bf0c      	ite	eq
 8007a84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a88:	2500      	movne	r5, #0
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	bfc4      	itt	gt
 8007a8e:	1a9b      	subgt	r3, r3, r2
 8007a90:	18ed      	addgt	r5, r5, r3
 8007a92:	2600      	movs	r6, #0
 8007a94:	341a      	adds	r4, #26
 8007a96:	42b5      	cmp	r5, r6
 8007a98:	d11a      	bne.n	8007ad0 <_printf_common+0xc8>
 8007a9a:	2000      	movs	r0, #0
 8007a9c:	e008      	b.n	8007ab0 <_printf_common+0xa8>
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	4652      	mov	r2, sl
 8007aa2:	4649      	mov	r1, r9
 8007aa4:	4638      	mov	r0, r7
 8007aa6:	47c0      	blx	r8
 8007aa8:	3001      	adds	r0, #1
 8007aaa:	d103      	bne.n	8007ab4 <_printf_common+0xac>
 8007aac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ab4:	3501      	adds	r5, #1
 8007ab6:	e7c6      	b.n	8007a46 <_printf_common+0x3e>
 8007ab8:	18e1      	adds	r1, r4, r3
 8007aba:	1c5a      	adds	r2, r3, #1
 8007abc:	2030      	movs	r0, #48	; 0x30
 8007abe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ac2:	4422      	add	r2, r4
 8007ac4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ac8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007acc:	3302      	adds	r3, #2
 8007ace:	e7c7      	b.n	8007a60 <_printf_common+0x58>
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	4622      	mov	r2, r4
 8007ad4:	4649      	mov	r1, r9
 8007ad6:	4638      	mov	r0, r7
 8007ad8:	47c0      	blx	r8
 8007ada:	3001      	adds	r0, #1
 8007adc:	d0e6      	beq.n	8007aac <_printf_common+0xa4>
 8007ade:	3601      	adds	r6, #1
 8007ae0:	e7d9      	b.n	8007a96 <_printf_common+0x8e>
	...

08007ae4 <_printf_i>:
 8007ae4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ae8:	460c      	mov	r4, r1
 8007aea:	4691      	mov	r9, r2
 8007aec:	7e27      	ldrb	r7, [r4, #24]
 8007aee:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007af0:	2f78      	cmp	r7, #120	; 0x78
 8007af2:	4680      	mov	r8, r0
 8007af4:	469a      	mov	sl, r3
 8007af6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007afa:	d807      	bhi.n	8007b0c <_printf_i+0x28>
 8007afc:	2f62      	cmp	r7, #98	; 0x62
 8007afe:	d80a      	bhi.n	8007b16 <_printf_i+0x32>
 8007b00:	2f00      	cmp	r7, #0
 8007b02:	f000 80d8 	beq.w	8007cb6 <_printf_i+0x1d2>
 8007b06:	2f58      	cmp	r7, #88	; 0x58
 8007b08:	f000 80a3 	beq.w	8007c52 <_printf_i+0x16e>
 8007b0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007b10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b14:	e03a      	b.n	8007b8c <_printf_i+0xa8>
 8007b16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b1a:	2b15      	cmp	r3, #21
 8007b1c:	d8f6      	bhi.n	8007b0c <_printf_i+0x28>
 8007b1e:	a001      	add	r0, pc, #4	; (adr r0, 8007b24 <_printf_i+0x40>)
 8007b20:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007b24:	08007b7d 	.word	0x08007b7d
 8007b28:	08007b91 	.word	0x08007b91
 8007b2c:	08007b0d 	.word	0x08007b0d
 8007b30:	08007b0d 	.word	0x08007b0d
 8007b34:	08007b0d 	.word	0x08007b0d
 8007b38:	08007b0d 	.word	0x08007b0d
 8007b3c:	08007b91 	.word	0x08007b91
 8007b40:	08007b0d 	.word	0x08007b0d
 8007b44:	08007b0d 	.word	0x08007b0d
 8007b48:	08007b0d 	.word	0x08007b0d
 8007b4c:	08007b0d 	.word	0x08007b0d
 8007b50:	08007c9d 	.word	0x08007c9d
 8007b54:	08007bc1 	.word	0x08007bc1
 8007b58:	08007c7f 	.word	0x08007c7f
 8007b5c:	08007b0d 	.word	0x08007b0d
 8007b60:	08007b0d 	.word	0x08007b0d
 8007b64:	08007cbf 	.word	0x08007cbf
 8007b68:	08007b0d 	.word	0x08007b0d
 8007b6c:	08007bc1 	.word	0x08007bc1
 8007b70:	08007b0d 	.word	0x08007b0d
 8007b74:	08007b0d 	.word	0x08007b0d
 8007b78:	08007c87 	.word	0x08007c87
 8007b7c:	680b      	ldr	r3, [r1, #0]
 8007b7e:	1d1a      	adds	r2, r3, #4
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	600a      	str	r2, [r1, #0]
 8007b84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007b88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e0a3      	b.n	8007cd8 <_printf_i+0x1f4>
 8007b90:	6825      	ldr	r5, [r4, #0]
 8007b92:	6808      	ldr	r0, [r1, #0]
 8007b94:	062e      	lsls	r6, r5, #24
 8007b96:	f100 0304 	add.w	r3, r0, #4
 8007b9a:	d50a      	bpl.n	8007bb2 <_printf_i+0xce>
 8007b9c:	6805      	ldr	r5, [r0, #0]
 8007b9e:	600b      	str	r3, [r1, #0]
 8007ba0:	2d00      	cmp	r5, #0
 8007ba2:	da03      	bge.n	8007bac <_printf_i+0xc8>
 8007ba4:	232d      	movs	r3, #45	; 0x2d
 8007ba6:	426d      	negs	r5, r5
 8007ba8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bac:	485e      	ldr	r0, [pc, #376]	; (8007d28 <_printf_i+0x244>)
 8007bae:	230a      	movs	r3, #10
 8007bb0:	e019      	b.n	8007be6 <_printf_i+0x102>
 8007bb2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007bb6:	6805      	ldr	r5, [r0, #0]
 8007bb8:	600b      	str	r3, [r1, #0]
 8007bba:	bf18      	it	ne
 8007bbc:	b22d      	sxthne	r5, r5
 8007bbe:	e7ef      	b.n	8007ba0 <_printf_i+0xbc>
 8007bc0:	680b      	ldr	r3, [r1, #0]
 8007bc2:	6825      	ldr	r5, [r4, #0]
 8007bc4:	1d18      	adds	r0, r3, #4
 8007bc6:	6008      	str	r0, [r1, #0]
 8007bc8:	0628      	lsls	r0, r5, #24
 8007bca:	d501      	bpl.n	8007bd0 <_printf_i+0xec>
 8007bcc:	681d      	ldr	r5, [r3, #0]
 8007bce:	e002      	b.n	8007bd6 <_printf_i+0xf2>
 8007bd0:	0669      	lsls	r1, r5, #25
 8007bd2:	d5fb      	bpl.n	8007bcc <_printf_i+0xe8>
 8007bd4:	881d      	ldrh	r5, [r3, #0]
 8007bd6:	4854      	ldr	r0, [pc, #336]	; (8007d28 <_printf_i+0x244>)
 8007bd8:	2f6f      	cmp	r7, #111	; 0x6f
 8007bda:	bf0c      	ite	eq
 8007bdc:	2308      	moveq	r3, #8
 8007bde:	230a      	movne	r3, #10
 8007be0:	2100      	movs	r1, #0
 8007be2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007be6:	6866      	ldr	r6, [r4, #4]
 8007be8:	60a6      	str	r6, [r4, #8]
 8007bea:	2e00      	cmp	r6, #0
 8007bec:	bfa2      	ittt	ge
 8007bee:	6821      	ldrge	r1, [r4, #0]
 8007bf0:	f021 0104 	bicge.w	r1, r1, #4
 8007bf4:	6021      	strge	r1, [r4, #0]
 8007bf6:	b90d      	cbnz	r5, 8007bfc <_printf_i+0x118>
 8007bf8:	2e00      	cmp	r6, #0
 8007bfa:	d04d      	beq.n	8007c98 <_printf_i+0x1b4>
 8007bfc:	4616      	mov	r6, r2
 8007bfe:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c02:	fb03 5711 	mls	r7, r3, r1, r5
 8007c06:	5dc7      	ldrb	r7, [r0, r7]
 8007c08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c0c:	462f      	mov	r7, r5
 8007c0e:	42bb      	cmp	r3, r7
 8007c10:	460d      	mov	r5, r1
 8007c12:	d9f4      	bls.n	8007bfe <_printf_i+0x11a>
 8007c14:	2b08      	cmp	r3, #8
 8007c16:	d10b      	bne.n	8007c30 <_printf_i+0x14c>
 8007c18:	6823      	ldr	r3, [r4, #0]
 8007c1a:	07df      	lsls	r7, r3, #31
 8007c1c:	d508      	bpl.n	8007c30 <_printf_i+0x14c>
 8007c1e:	6923      	ldr	r3, [r4, #16]
 8007c20:	6861      	ldr	r1, [r4, #4]
 8007c22:	4299      	cmp	r1, r3
 8007c24:	bfde      	ittt	le
 8007c26:	2330      	movle	r3, #48	; 0x30
 8007c28:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c2c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8007c30:	1b92      	subs	r2, r2, r6
 8007c32:	6122      	str	r2, [r4, #16]
 8007c34:	f8cd a000 	str.w	sl, [sp]
 8007c38:	464b      	mov	r3, r9
 8007c3a:	aa03      	add	r2, sp, #12
 8007c3c:	4621      	mov	r1, r4
 8007c3e:	4640      	mov	r0, r8
 8007c40:	f7ff fee2 	bl	8007a08 <_printf_common>
 8007c44:	3001      	adds	r0, #1
 8007c46:	d14c      	bne.n	8007ce2 <_printf_i+0x1fe>
 8007c48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c4c:	b004      	add	sp, #16
 8007c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c52:	4835      	ldr	r0, [pc, #212]	; (8007d28 <_printf_i+0x244>)
 8007c54:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007c58:	6823      	ldr	r3, [r4, #0]
 8007c5a:	680e      	ldr	r6, [r1, #0]
 8007c5c:	061f      	lsls	r7, r3, #24
 8007c5e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007c62:	600e      	str	r6, [r1, #0]
 8007c64:	d514      	bpl.n	8007c90 <_printf_i+0x1ac>
 8007c66:	07d9      	lsls	r1, r3, #31
 8007c68:	bf44      	itt	mi
 8007c6a:	f043 0320 	orrmi.w	r3, r3, #32
 8007c6e:	6023      	strmi	r3, [r4, #0]
 8007c70:	b91d      	cbnz	r5, 8007c7a <_printf_i+0x196>
 8007c72:	6823      	ldr	r3, [r4, #0]
 8007c74:	f023 0320 	bic.w	r3, r3, #32
 8007c78:	6023      	str	r3, [r4, #0]
 8007c7a:	2310      	movs	r3, #16
 8007c7c:	e7b0      	b.n	8007be0 <_printf_i+0xfc>
 8007c7e:	6823      	ldr	r3, [r4, #0]
 8007c80:	f043 0320 	orr.w	r3, r3, #32
 8007c84:	6023      	str	r3, [r4, #0]
 8007c86:	2378      	movs	r3, #120	; 0x78
 8007c88:	4828      	ldr	r0, [pc, #160]	; (8007d2c <_printf_i+0x248>)
 8007c8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c8e:	e7e3      	b.n	8007c58 <_printf_i+0x174>
 8007c90:	065e      	lsls	r6, r3, #25
 8007c92:	bf48      	it	mi
 8007c94:	b2ad      	uxthmi	r5, r5
 8007c96:	e7e6      	b.n	8007c66 <_printf_i+0x182>
 8007c98:	4616      	mov	r6, r2
 8007c9a:	e7bb      	b.n	8007c14 <_printf_i+0x130>
 8007c9c:	680b      	ldr	r3, [r1, #0]
 8007c9e:	6826      	ldr	r6, [r4, #0]
 8007ca0:	6960      	ldr	r0, [r4, #20]
 8007ca2:	1d1d      	adds	r5, r3, #4
 8007ca4:	600d      	str	r5, [r1, #0]
 8007ca6:	0635      	lsls	r5, r6, #24
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	d501      	bpl.n	8007cb0 <_printf_i+0x1cc>
 8007cac:	6018      	str	r0, [r3, #0]
 8007cae:	e002      	b.n	8007cb6 <_printf_i+0x1d2>
 8007cb0:	0671      	lsls	r1, r6, #25
 8007cb2:	d5fb      	bpl.n	8007cac <_printf_i+0x1c8>
 8007cb4:	8018      	strh	r0, [r3, #0]
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	6123      	str	r3, [r4, #16]
 8007cba:	4616      	mov	r6, r2
 8007cbc:	e7ba      	b.n	8007c34 <_printf_i+0x150>
 8007cbe:	680b      	ldr	r3, [r1, #0]
 8007cc0:	1d1a      	adds	r2, r3, #4
 8007cc2:	600a      	str	r2, [r1, #0]
 8007cc4:	681e      	ldr	r6, [r3, #0]
 8007cc6:	6862      	ldr	r2, [r4, #4]
 8007cc8:	2100      	movs	r1, #0
 8007cca:	4630      	mov	r0, r6
 8007ccc:	f7f8 fa80 	bl	80001d0 <memchr>
 8007cd0:	b108      	cbz	r0, 8007cd6 <_printf_i+0x1f2>
 8007cd2:	1b80      	subs	r0, r0, r6
 8007cd4:	6060      	str	r0, [r4, #4]
 8007cd6:	6863      	ldr	r3, [r4, #4]
 8007cd8:	6123      	str	r3, [r4, #16]
 8007cda:	2300      	movs	r3, #0
 8007cdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ce0:	e7a8      	b.n	8007c34 <_printf_i+0x150>
 8007ce2:	6923      	ldr	r3, [r4, #16]
 8007ce4:	4632      	mov	r2, r6
 8007ce6:	4649      	mov	r1, r9
 8007ce8:	4640      	mov	r0, r8
 8007cea:	47d0      	blx	sl
 8007cec:	3001      	adds	r0, #1
 8007cee:	d0ab      	beq.n	8007c48 <_printf_i+0x164>
 8007cf0:	6823      	ldr	r3, [r4, #0]
 8007cf2:	079b      	lsls	r3, r3, #30
 8007cf4:	d413      	bmi.n	8007d1e <_printf_i+0x23a>
 8007cf6:	68e0      	ldr	r0, [r4, #12]
 8007cf8:	9b03      	ldr	r3, [sp, #12]
 8007cfa:	4298      	cmp	r0, r3
 8007cfc:	bfb8      	it	lt
 8007cfe:	4618      	movlt	r0, r3
 8007d00:	e7a4      	b.n	8007c4c <_printf_i+0x168>
 8007d02:	2301      	movs	r3, #1
 8007d04:	4632      	mov	r2, r6
 8007d06:	4649      	mov	r1, r9
 8007d08:	4640      	mov	r0, r8
 8007d0a:	47d0      	blx	sl
 8007d0c:	3001      	adds	r0, #1
 8007d0e:	d09b      	beq.n	8007c48 <_printf_i+0x164>
 8007d10:	3501      	adds	r5, #1
 8007d12:	68e3      	ldr	r3, [r4, #12]
 8007d14:	9903      	ldr	r1, [sp, #12]
 8007d16:	1a5b      	subs	r3, r3, r1
 8007d18:	42ab      	cmp	r3, r5
 8007d1a:	dcf2      	bgt.n	8007d02 <_printf_i+0x21e>
 8007d1c:	e7eb      	b.n	8007cf6 <_printf_i+0x212>
 8007d1e:	2500      	movs	r5, #0
 8007d20:	f104 0619 	add.w	r6, r4, #25
 8007d24:	e7f5      	b.n	8007d12 <_printf_i+0x22e>
 8007d26:	bf00      	nop
 8007d28:	080085b1 	.word	0x080085b1
 8007d2c:	080085c2 	.word	0x080085c2

08007d30 <_sbrk_r>:
 8007d30:	b538      	push	{r3, r4, r5, lr}
 8007d32:	4d06      	ldr	r5, [pc, #24]	; (8007d4c <_sbrk_r+0x1c>)
 8007d34:	2300      	movs	r3, #0
 8007d36:	4604      	mov	r4, r0
 8007d38:	4608      	mov	r0, r1
 8007d3a:	602b      	str	r3, [r5, #0]
 8007d3c:	f7f8 ffe4 	bl	8000d08 <_sbrk>
 8007d40:	1c43      	adds	r3, r0, #1
 8007d42:	d102      	bne.n	8007d4a <_sbrk_r+0x1a>
 8007d44:	682b      	ldr	r3, [r5, #0]
 8007d46:	b103      	cbz	r3, 8007d4a <_sbrk_r+0x1a>
 8007d48:	6023      	str	r3, [r4, #0]
 8007d4a:	bd38      	pop	{r3, r4, r5, pc}
 8007d4c:	20003214 	.word	0x20003214

08007d50 <__sread>:
 8007d50:	b510      	push	{r4, lr}
 8007d52:	460c      	mov	r4, r1
 8007d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d58:	f000 fab4 	bl	80082c4 <_read_r>
 8007d5c:	2800      	cmp	r0, #0
 8007d5e:	bfab      	itete	ge
 8007d60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007d62:	89a3      	ldrhlt	r3, [r4, #12]
 8007d64:	181b      	addge	r3, r3, r0
 8007d66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007d6a:	bfac      	ite	ge
 8007d6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007d6e:	81a3      	strhlt	r3, [r4, #12]
 8007d70:	bd10      	pop	{r4, pc}

08007d72 <__swrite>:
 8007d72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d76:	461f      	mov	r7, r3
 8007d78:	898b      	ldrh	r3, [r1, #12]
 8007d7a:	05db      	lsls	r3, r3, #23
 8007d7c:	4605      	mov	r5, r0
 8007d7e:	460c      	mov	r4, r1
 8007d80:	4616      	mov	r6, r2
 8007d82:	d505      	bpl.n	8007d90 <__swrite+0x1e>
 8007d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d88:	2302      	movs	r3, #2
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f000 f9c8 	bl	8008120 <_lseek_r>
 8007d90:	89a3      	ldrh	r3, [r4, #12]
 8007d92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d9a:	81a3      	strh	r3, [r4, #12]
 8007d9c:	4632      	mov	r2, r6
 8007d9e:	463b      	mov	r3, r7
 8007da0:	4628      	mov	r0, r5
 8007da2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007da6:	f000 b869 	b.w	8007e7c <_write_r>

08007daa <__sseek>:
 8007daa:	b510      	push	{r4, lr}
 8007dac:	460c      	mov	r4, r1
 8007dae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007db2:	f000 f9b5 	bl	8008120 <_lseek_r>
 8007db6:	1c43      	adds	r3, r0, #1
 8007db8:	89a3      	ldrh	r3, [r4, #12]
 8007dba:	bf15      	itete	ne
 8007dbc:	6560      	strne	r0, [r4, #84]	; 0x54
 8007dbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007dc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007dc6:	81a3      	strheq	r3, [r4, #12]
 8007dc8:	bf18      	it	ne
 8007dca:	81a3      	strhne	r3, [r4, #12]
 8007dcc:	bd10      	pop	{r4, pc}

08007dce <__sclose>:
 8007dce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dd2:	f000 b8d3 	b.w	8007f7c <_close_r>
	...

08007dd8 <__swbuf_r>:
 8007dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dda:	460e      	mov	r6, r1
 8007ddc:	4614      	mov	r4, r2
 8007dde:	4605      	mov	r5, r0
 8007de0:	b118      	cbz	r0, 8007dea <__swbuf_r+0x12>
 8007de2:	6983      	ldr	r3, [r0, #24]
 8007de4:	b90b      	cbnz	r3, 8007dea <__swbuf_r+0x12>
 8007de6:	f7ff fbbb 	bl	8007560 <__sinit>
 8007dea:	4b21      	ldr	r3, [pc, #132]	; (8007e70 <__swbuf_r+0x98>)
 8007dec:	429c      	cmp	r4, r3
 8007dee:	d12b      	bne.n	8007e48 <__swbuf_r+0x70>
 8007df0:	686c      	ldr	r4, [r5, #4]
 8007df2:	69a3      	ldr	r3, [r4, #24]
 8007df4:	60a3      	str	r3, [r4, #8]
 8007df6:	89a3      	ldrh	r3, [r4, #12]
 8007df8:	071a      	lsls	r2, r3, #28
 8007dfa:	d52f      	bpl.n	8007e5c <__swbuf_r+0x84>
 8007dfc:	6923      	ldr	r3, [r4, #16]
 8007dfe:	b36b      	cbz	r3, 8007e5c <__swbuf_r+0x84>
 8007e00:	6923      	ldr	r3, [r4, #16]
 8007e02:	6820      	ldr	r0, [r4, #0]
 8007e04:	1ac0      	subs	r0, r0, r3
 8007e06:	6963      	ldr	r3, [r4, #20]
 8007e08:	b2f6      	uxtb	r6, r6
 8007e0a:	4283      	cmp	r3, r0
 8007e0c:	4637      	mov	r7, r6
 8007e0e:	dc04      	bgt.n	8007e1a <__swbuf_r+0x42>
 8007e10:	4621      	mov	r1, r4
 8007e12:	4628      	mov	r0, r5
 8007e14:	f000 f948 	bl	80080a8 <_fflush_r>
 8007e18:	bb30      	cbnz	r0, 8007e68 <__swbuf_r+0x90>
 8007e1a:	68a3      	ldr	r3, [r4, #8]
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	60a3      	str	r3, [r4, #8]
 8007e20:	6823      	ldr	r3, [r4, #0]
 8007e22:	1c5a      	adds	r2, r3, #1
 8007e24:	6022      	str	r2, [r4, #0]
 8007e26:	701e      	strb	r6, [r3, #0]
 8007e28:	6963      	ldr	r3, [r4, #20]
 8007e2a:	3001      	adds	r0, #1
 8007e2c:	4283      	cmp	r3, r0
 8007e2e:	d004      	beq.n	8007e3a <__swbuf_r+0x62>
 8007e30:	89a3      	ldrh	r3, [r4, #12]
 8007e32:	07db      	lsls	r3, r3, #31
 8007e34:	d506      	bpl.n	8007e44 <__swbuf_r+0x6c>
 8007e36:	2e0a      	cmp	r6, #10
 8007e38:	d104      	bne.n	8007e44 <__swbuf_r+0x6c>
 8007e3a:	4621      	mov	r1, r4
 8007e3c:	4628      	mov	r0, r5
 8007e3e:	f000 f933 	bl	80080a8 <_fflush_r>
 8007e42:	b988      	cbnz	r0, 8007e68 <__swbuf_r+0x90>
 8007e44:	4638      	mov	r0, r7
 8007e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e48:	4b0a      	ldr	r3, [pc, #40]	; (8007e74 <__swbuf_r+0x9c>)
 8007e4a:	429c      	cmp	r4, r3
 8007e4c:	d101      	bne.n	8007e52 <__swbuf_r+0x7a>
 8007e4e:	68ac      	ldr	r4, [r5, #8]
 8007e50:	e7cf      	b.n	8007df2 <__swbuf_r+0x1a>
 8007e52:	4b09      	ldr	r3, [pc, #36]	; (8007e78 <__swbuf_r+0xa0>)
 8007e54:	429c      	cmp	r4, r3
 8007e56:	bf08      	it	eq
 8007e58:	68ec      	ldreq	r4, [r5, #12]
 8007e5a:	e7ca      	b.n	8007df2 <__swbuf_r+0x1a>
 8007e5c:	4621      	mov	r1, r4
 8007e5e:	4628      	mov	r0, r5
 8007e60:	f000 f81e 	bl	8007ea0 <__swsetup_r>
 8007e64:	2800      	cmp	r0, #0
 8007e66:	d0cb      	beq.n	8007e00 <__swbuf_r+0x28>
 8007e68:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007e6c:	e7ea      	b.n	8007e44 <__swbuf_r+0x6c>
 8007e6e:	bf00      	nop
 8007e70:	08008560 	.word	0x08008560
 8007e74:	08008580 	.word	0x08008580
 8007e78:	08008540 	.word	0x08008540

08007e7c <_write_r>:
 8007e7c:	b538      	push	{r3, r4, r5, lr}
 8007e7e:	4d07      	ldr	r5, [pc, #28]	; (8007e9c <_write_r+0x20>)
 8007e80:	4604      	mov	r4, r0
 8007e82:	4608      	mov	r0, r1
 8007e84:	4611      	mov	r1, r2
 8007e86:	2200      	movs	r2, #0
 8007e88:	602a      	str	r2, [r5, #0]
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	f7f8 fb93 	bl	80005b6 <_write>
 8007e90:	1c43      	adds	r3, r0, #1
 8007e92:	d102      	bne.n	8007e9a <_write_r+0x1e>
 8007e94:	682b      	ldr	r3, [r5, #0]
 8007e96:	b103      	cbz	r3, 8007e9a <_write_r+0x1e>
 8007e98:	6023      	str	r3, [r4, #0]
 8007e9a:	bd38      	pop	{r3, r4, r5, pc}
 8007e9c:	20003214 	.word	0x20003214

08007ea0 <__swsetup_r>:
 8007ea0:	4b32      	ldr	r3, [pc, #200]	; (8007f6c <__swsetup_r+0xcc>)
 8007ea2:	b570      	push	{r4, r5, r6, lr}
 8007ea4:	681d      	ldr	r5, [r3, #0]
 8007ea6:	4606      	mov	r6, r0
 8007ea8:	460c      	mov	r4, r1
 8007eaa:	b125      	cbz	r5, 8007eb6 <__swsetup_r+0x16>
 8007eac:	69ab      	ldr	r3, [r5, #24]
 8007eae:	b913      	cbnz	r3, 8007eb6 <__swsetup_r+0x16>
 8007eb0:	4628      	mov	r0, r5
 8007eb2:	f7ff fb55 	bl	8007560 <__sinit>
 8007eb6:	4b2e      	ldr	r3, [pc, #184]	; (8007f70 <__swsetup_r+0xd0>)
 8007eb8:	429c      	cmp	r4, r3
 8007eba:	d10f      	bne.n	8007edc <__swsetup_r+0x3c>
 8007ebc:	686c      	ldr	r4, [r5, #4]
 8007ebe:	89a3      	ldrh	r3, [r4, #12]
 8007ec0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ec4:	0719      	lsls	r1, r3, #28
 8007ec6:	d42c      	bmi.n	8007f22 <__swsetup_r+0x82>
 8007ec8:	06dd      	lsls	r5, r3, #27
 8007eca:	d411      	bmi.n	8007ef0 <__swsetup_r+0x50>
 8007ecc:	2309      	movs	r3, #9
 8007ece:	6033      	str	r3, [r6, #0]
 8007ed0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007ed4:	81a3      	strh	r3, [r4, #12]
 8007ed6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007eda:	e03e      	b.n	8007f5a <__swsetup_r+0xba>
 8007edc:	4b25      	ldr	r3, [pc, #148]	; (8007f74 <__swsetup_r+0xd4>)
 8007ede:	429c      	cmp	r4, r3
 8007ee0:	d101      	bne.n	8007ee6 <__swsetup_r+0x46>
 8007ee2:	68ac      	ldr	r4, [r5, #8]
 8007ee4:	e7eb      	b.n	8007ebe <__swsetup_r+0x1e>
 8007ee6:	4b24      	ldr	r3, [pc, #144]	; (8007f78 <__swsetup_r+0xd8>)
 8007ee8:	429c      	cmp	r4, r3
 8007eea:	bf08      	it	eq
 8007eec:	68ec      	ldreq	r4, [r5, #12]
 8007eee:	e7e6      	b.n	8007ebe <__swsetup_r+0x1e>
 8007ef0:	0758      	lsls	r0, r3, #29
 8007ef2:	d512      	bpl.n	8007f1a <__swsetup_r+0x7a>
 8007ef4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ef6:	b141      	cbz	r1, 8007f0a <__swsetup_r+0x6a>
 8007ef8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007efc:	4299      	cmp	r1, r3
 8007efe:	d002      	beq.n	8007f06 <__swsetup_r+0x66>
 8007f00:	4630      	mov	r0, r6
 8007f02:	f000 f98f 	bl	8008224 <_free_r>
 8007f06:	2300      	movs	r3, #0
 8007f08:	6363      	str	r3, [r4, #52]	; 0x34
 8007f0a:	89a3      	ldrh	r3, [r4, #12]
 8007f0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007f10:	81a3      	strh	r3, [r4, #12]
 8007f12:	2300      	movs	r3, #0
 8007f14:	6063      	str	r3, [r4, #4]
 8007f16:	6923      	ldr	r3, [r4, #16]
 8007f18:	6023      	str	r3, [r4, #0]
 8007f1a:	89a3      	ldrh	r3, [r4, #12]
 8007f1c:	f043 0308 	orr.w	r3, r3, #8
 8007f20:	81a3      	strh	r3, [r4, #12]
 8007f22:	6923      	ldr	r3, [r4, #16]
 8007f24:	b94b      	cbnz	r3, 8007f3a <__swsetup_r+0x9a>
 8007f26:	89a3      	ldrh	r3, [r4, #12]
 8007f28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007f2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f30:	d003      	beq.n	8007f3a <__swsetup_r+0x9a>
 8007f32:	4621      	mov	r1, r4
 8007f34:	4630      	mov	r0, r6
 8007f36:	f000 f929 	bl	800818c <__smakebuf_r>
 8007f3a:	89a0      	ldrh	r0, [r4, #12]
 8007f3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f40:	f010 0301 	ands.w	r3, r0, #1
 8007f44:	d00a      	beq.n	8007f5c <__swsetup_r+0xbc>
 8007f46:	2300      	movs	r3, #0
 8007f48:	60a3      	str	r3, [r4, #8]
 8007f4a:	6963      	ldr	r3, [r4, #20]
 8007f4c:	425b      	negs	r3, r3
 8007f4e:	61a3      	str	r3, [r4, #24]
 8007f50:	6923      	ldr	r3, [r4, #16]
 8007f52:	b943      	cbnz	r3, 8007f66 <__swsetup_r+0xc6>
 8007f54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007f58:	d1ba      	bne.n	8007ed0 <__swsetup_r+0x30>
 8007f5a:	bd70      	pop	{r4, r5, r6, pc}
 8007f5c:	0781      	lsls	r1, r0, #30
 8007f5e:	bf58      	it	pl
 8007f60:	6963      	ldrpl	r3, [r4, #20]
 8007f62:	60a3      	str	r3, [r4, #8]
 8007f64:	e7f4      	b.n	8007f50 <__swsetup_r+0xb0>
 8007f66:	2000      	movs	r0, #0
 8007f68:	e7f7      	b.n	8007f5a <__swsetup_r+0xba>
 8007f6a:	bf00      	nop
 8007f6c:	2000000c 	.word	0x2000000c
 8007f70:	08008560 	.word	0x08008560
 8007f74:	08008580 	.word	0x08008580
 8007f78:	08008540 	.word	0x08008540

08007f7c <_close_r>:
 8007f7c:	b538      	push	{r3, r4, r5, lr}
 8007f7e:	4d06      	ldr	r5, [pc, #24]	; (8007f98 <_close_r+0x1c>)
 8007f80:	2300      	movs	r3, #0
 8007f82:	4604      	mov	r4, r0
 8007f84:	4608      	mov	r0, r1
 8007f86:	602b      	str	r3, [r5, #0]
 8007f88:	f7f8 fe89 	bl	8000c9e <_close>
 8007f8c:	1c43      	adds	r3, r0, #1
 8007f8e:	d102      	bne.n	8007f96 <_close_r+0x1a>
 8007f90:	682b      	ldr	r3, [r5, #0]
 8007f92:	b103      	cbz	r3, 8007f96 <_close_r+0x1a>
 8007f94:	6023      	str	r3, [r4, #0]
 8007f96:	bd38      	pop	{r3, r4, r5, pc}
 8007f98:	20003214 	.word	0x20003214

08007f9c <__sflush_r>:
 8007f9c:	898a      	ldrh	r2, [r1, #12]
 8007f9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fa2:	4605      	mov	r5, r0
 8007fa4:	0710      	lsls	r0, r2, #28
 8007fa6:	460c      	mov	r4, r1
 8007fa8:	d458      	bmi.n	800805c <__sflush_r+0xc0>
 8007faa:	684b      	ldr	r3, [r1, #4]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	dc05      	bgt.n	8007fbc <__sflush_r+0x20>
 8007fb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	dc02      	bgt.n	8007fbc <__sflush_r+0x20>
 8007fb6:	2000      	movs	r0, #0
 8007fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007fbe:	2e00      	cmp	r6, #0
 8007fc0:	d0f9      	beq.n	8007fb6 <__sflush_r+0x1a>
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007fc8:	682f      	ldr	r7, [r5, #0]
 8007fca:	602b      	str	r3, [r5, #0]
 8007fcc:	d032      	beq.n	8008034 <__sflush_r+0x98>
 8007fce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007fd0:	89a3      	ldrh	r3, [r4, #12]
 8007fd2:	075a      	lsls	r2, r3, #29
 8007fd4:	d505      	bpl.n	8007fe2 <__sflush_r+0x46>
 8007fd6:	6863      	ldr	r3, [r4, #4]
 8007fd8:	1ac0      	subs	r0, r0, r3
 8007fda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007fdc:	b10b      	cbz	r3, 8007fe2 <__sflush_r+0x46>
 8007fde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007fe0:	1ac0      	subs	r0, r0, r3
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007fe8:	6a21      	ldr	r1, [r4, #32]
 8007fea:	4628      	mov	r0, r5
 8007fec:	47b0      	blx	r6
 8007fee:	1c43      	adds	r3, r0, #1
 8007ff0:	89a3      	ldrh	r3, [r4, #12]
 8007ff2:	d106      	bne.n	8008002 <__sflush_r+0x66>
 8007ff4:	6829      	ldr	r1, [r5, #0]
 8007ff6:	291d      	cmp	r1, #29
 8007ff8:	d82c      	bhi.n	8008054 <__sflush_r+0xb8>
 8007ffa:	4a2a      	ldr	r2, [pc, #168]	; (80080a4 <__sflush_r+0x108>)
 8007ffc:	40ca      	lsrs	r2, r1
 8007ffe:	07d6      	lsls	r6, r2, #31
 8008000:	d528      	bpl.n	8008054 <__sflush_r+0xb8>
 8008002:	2200      	movs	r2, #0
 8008004:	6062      	str	r2, [r4, #4]
 8008006:	04d9      	lsls	r1, r3, #19
 8008008:	6922      	ldr	r2, [r4, #16]
 800800a:	6022      	str	r2, [r4, #0]
 800800c:	d504      	bpl.n	8008018 <__sflush_r+0x7c>
 800800e:	1c42      	adds	r2, r0, #1
 8008010:	d101      	bne.n	8008016 <__sflush_r+0x7a>
 8008012:	682b      	ldr	r3, [r5, #0]
 8008014:	b903      	cbnz	r3, 8008018 <__sflush_r+0x7c>
 8008016:	6560      	str	r0, [r4, #84]	; 0x54
 8008018:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800801a:	602f      	str	r7, [r5, #0]
 800801c:	2900      	cmp	r1, #0
 800801e:	d0ca      	beq.n	8007fb6 <__sflush_r+0x1a>
 8008020:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008024:	4299      	cmp	r1, r3
 8008026:	d002      	beq.n	800802e <__sflush_r+0x92>
 8008028:	4628      	mov	r0, r5
 800802a:	f000 f8fb 	bl	8008224 <_free_r>
 800802e:	2000      	movs	r0, #0
 8008030:	6360      	str	r0, [r4, #52]	; 0x34
 8008032:	e7c1      	b.n	8007fb8 <__sflush_r+0x1c>
 8008034:	6a21      	ldr	r1, [r4, #32]
 8008036:	2301      	movs	r3, #1
 8008038:	4628      	mov	r0, r5
 800803a:	47b0      	blx	r6
 800803c:	1c41      	adds	r1, r0, #1
 800803e:	d1c7      	bne.n	8007fd0 <__sflush_r+0x34>
 8008040:	682b      	ldr	r3, [r5, #0]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d0c4      	beq.n	8007fd0 <__sflush_r+0x34>
 8008046:	2b1d      	cmp	r3, #29
 8008048:	d001      	beq.n	800804e <__sflush_r+0xb2>
 800804a:	2b16      	cmp	r3, #22
 800804c:	d101      	bne.n	8008052 <__sflush_r+0xb6>
 800804e:	602f      	str	r7, [r5, #0]
 8008050:	e7b1      	b.n	8007fb6 <__sflush_r+0x1a>
 8008052:	89a3      	ldrh	r3, [r4, #12]
 8008054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008058:	81a3      	strh	r3, [r4, #12]
 800805a:	e7ad      	b.n	8007fb8 <__sflush_r+0x1c>
 800805c:	690f      	ldr	r7, [r1, #16]
 800805e:	2f00      	cmp	r7, #0
 8008060:	d0a9      	beq.n	8007fb6 <__sflush_r+0x1a>
 8008062:	0793      	lsls	r3, r2, #30
 8008064:	680e      	ldr	r6, [r1, #0]
 8008066:	bf08      	it	eq
 8008068:	694b      	ldreq	r3, [r1, #20]
 800806a:	600f      	str	r7, [r1, #0]
 800806c:	bf18      	it	ne
 800806e:	2300      	movne	r3, #0
 8008070:	eba6 0807 	sub.w	r8, r6, r7
 8008074:	608b      	str	r3, [r1, #8]
 8008076:	f1b8 0f00 	cmp.w	r8, #0
 800807a:	dd9c      	ble.n	8007fb6 <__sflush_r+0x1a>
 800807c:	6a21      	ldr	r1, [r4, #32]
 800807e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008080:	4643      	mov	r3, r8
 8008082:	463a      	mov	r2, r7
 8008084:	4628      	mov	r0, r5
 8008086:	47b0      	blx	r6
 8008088:	2800      	cmp	r0, #0
 800808a:	dc06      	bgt.n	800809a <__sflush_r+0xfe>
 800808c:	89a3      	ldrh	r3, [r4, #12]
 800808e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008092:	81a3      	strh	r3, [r4, #12]
 8008094:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008098:	e78e      	b.n	8007fb8 <__sflush_r+0x1c>
 800809a:	4407      	add	r7, r0
 800809c:	eba8 0800 	sub.w	r8, r8, r0
 80080a0:	e7e9      	b.n	8008076 <__sflush_r+0xda>
 80080a2:	bf00      	nop
 80080a4:	20400001 	.word	0x20400001

080080a8 <_fflush_r>:
 80080a8:	b538      	push	{r3, r4, r5, lr}
 80080aa:	690b      	ldr	r3, [r1, #16]
 80080ac:	4605      	mov	r5, r0
 80080ae:	460c      	mov	r4, r1
 80080b0:	b913      	cbnz	r3, 80080b8 <_fflush_r+0x10>
 80080b2:	2500      	movs	r5, #0
 80080b4:	4628      	mov	r0, r5
 80080b6:	bd38      	pop	{r3, r4, r5, pc}
 80080b8:	b118      	cbz	r0, 80080c2 <_fflush_r+0x1a>
 80080ba:	6983      	ldr	r3, [r0, #24]
 80080bc:	b90b      	cbnz	r3, 80080c2 <_fflush_r+0x1a>
 80080be:	f7ff fa4f 	bl	8007560 <__sinit>
 80080c2:	4b14      	ldr	r3, [pc, #80]	; (8008114 <_fflush_r+0x6c>)
 80080c4:	429c      	cmp	r4, r3
 80080c6:	d11b      	bne.n	8008100 <_fflush_r+0x58>
 80080c8:	686c      	ldr	r4, [r5, #4]
 80080ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d0ef      	beq.n	80080b2 <_fflush_r+0xa>
 80080d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80080d4:	07d0      	lsls	r0, r2, #31
 80080d6:	d404      	bmi.n	80080e2 <_fflush_r+0x3a>
 80080d8:	0599      	lsls	r1, r3, #22
 80080da:	d402      	bmi.n	80080e2 <_fflush_r+0x3a>
 80080dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080de:	f7ff fadd 	bl	800769c <__retarget_lock_acquire_recursive>
 80080e2:	4628      	mov	r0, r5
 80080e4:	4621      	mov	r1, r4
 80080e6:	f7ff ff59 	bl	8007f9c <__sflush_r>
 80080ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080ec:	07da      	lsls	r2, r3, #31
 80080ee:	4605      	mov	r5, r0
 80080f0:	d4e0      	bmi.n	80080b4 <_fflush_r+0xc>
 80080f2:	89a3      	ldrh	r3, [r4, #12]
 80080f4:	059b      	lsls	r3, r3, #22
 80080f6:	d4dd      	bmi.n	80080b4 <_fflush_r+0xc>
 80080f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080fa:	f7ff fad0 	bl	800769e <__retarget_lock_release_recursive>
 80080fe:	e7d9      	b.n	80080b4 <_fflush_r+0xc>
 8008100:	4b05      	ldr	r3, [pc, #20]	; (8008118 <_fflush_r+0x70>)
 8008102:	429c      	cmp	r4, r3
 8008104:	d101      	bne.n	800810a <_fflush_r+0x62>
 8008106:	68ac      	ldr	r4, [r5, #8]
 8008108:	e7df      	b.n	80080ca <_fflush_r+0x22>
 800810a:	4b04      	ldr	r3, [pc, #16]	; (800811c <_fflush_r+0x74>)
 800810c:	429c      	cmp	r4, r3
 800810e:	bf08      	it	eq
 8008110:	68ec      	ldreq	r4, [r5, #12]
 8008112:	e7da      	b.n	80080ca <_fflush_r+0x22>
 8008114:	08008560 	.word	0x08008560
 8008118:	08008580 	.word	0x08008580
 800811c:	08008540 	.word	0x08008540

08008120 <_lseek_r>:
 8008120:	b538      	push	{r3, r4, r5, lr}
 8008122:	4d07      	ldr	r5, [pc, #28]	; (8008140 <_lseek_r+0x20>)
 8008124:	4604      	mov	r4, r0
 8008126:	4608      	mov	r0, r1
 8008128:	4611      	mov	r1, r2
 800812a:	2200      	movs	r2, #0
 800812c:	602a      	str	r2, [r5, #0]
 800812e:	461a      	mov	r2, r3
 8008130:	f7f8 fddc 	bl	8000cec <_lseek>
 8008134:	1c43      	adds	r3, r0, #1
 8008136:	d102      	bne.n	800813e <_lseek_r+0x1e>
 8008138:	682b      	ldr	r3, [r5, #0]
 800813a:	b103      	cbz	r3, 800813e <_lseek_r+0x1e>
 800813c:	6023      	str	r3, [r4, #0]
 800813e:	bd38      	pop	{r3, r4, r5, pc}
 8008140:	20003214 	.word	0x20003214

08008144 <__swhatbuf_r>:
 8008144:	b570      	push	{r4, r5, r6, lr}
 8008146:	460e      	mov	r6, r1
 8008148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800814c:	2900      	cmp	r1, #0
 800814e:	b096      	sub	sp, #88	; 0x58
 8008150:	4614      	mov	r4, r2
 8008152:	461d      	mov	r5, r3
 8008154:	da07      	bge.n	8008166 <__swhatbuf_r+0x22>
 8008156:	2300      	movs	r3, #0
 8008158:	602b      	str	r3, [r5, #0]
 800815a:	89b3      	ldrh	r3, [r6, #12]
 800815c:	061a      	lsls	r2, r3, #24
 800815e:	d410      	bmi.n	8008182 <__swhatbuf_r+0x3e>
 8008160:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008164:	e00e      	b.n	8008184 <__swhatbuf_r+0x40>
 8008166:	466a      	mov	r2, sp
 8008168:	f000 f8be 	bl	80082e8 <_fstat_r>
 800816c:	2800      	cmp	r0, #0
 800816e:	dbf2      	blt.n	8008156 <__swhatbuf_r+0x12>
 8008170:	9a01      	ldr	r2, [sp, #4]
 8008172:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008176:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800817a:	425a      	negs	r2, r3
 800817c:	415a      	adcs	r2, r3
 800817e:	602a      	str	r2, [r5, #0]
 8008180:	e7ee      	b.n	8008160 <__swhatbuf_r+0x1c>
 8008182:	2340      	movs	r3, #64	; 0x40
 8008184:	2000      	movs	r0, #0
 8008186:	6023      	str	r3, [r4, #0]
 8008188:	b016      	add	sp, #88	; 0x58
 800818a:	bd70      	pop	{r4, r5, r6, pc}

0800818c <__smakebuf_r>:
 800818c:	898b      	ldrh	r3, [r1, #12]
 800818e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008190:	079d      	lsls	r5, r3, #30
 8008192:	4606      	mov	r6, r0
 8008194:	460c      	mov	r4, r1
 8008196:	d507      	bpl.n	80081a8 <__smakebuf_r+0x1c>
 8008198:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800819c:	6023      	str	r3, [r4, #0]
 800819e:	6123      	str	r3, [r4, #16]
 80081a0:	2301      	movs	r3, #1
 80081a2:	6163      	str	r3, [r4, #20]
 80081a4:	b002      	add	sp, #8
 80081a6:	bd70      	pop	{r4, r5, r6, pc}
 80081a8:	ab01      	add	r3, sp, #4
 80081aa:	466a      	mov	r2, sp
 80081ac:	f7ff ffca 	bl	8008144 <__swhatbuf_r>
 80081b0:	9900      	ldr	r1, [sp, #0]
 80081b2:	4605      	mov	r5, r0
 80081b4:	4630      	mov	r0, r6
 80081b6:	f7ff fa73 	bl	80076a0 <_malloc_r>
 80081ba:	b948      	cbnz	r0, 80081d0 <__smakebuf_r+0x44>
 80081bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081c0:	059a      	lsls	r2, r3, #22
 80081c2:	d4ef      	bmi.n	80081a4 <__smakebuf_r+0x18>
 80081c4:	f023 0303 	bic.w	r3, r3, #3
 80081c8:	f043 0302 	orr.w	r3, r3, #2
 80081cc:	81a3      	strh	r3, [r4, #12]
 80081ce:	e7e3      	b.n	8008198 <__smakebuf_r+0xc>
 80081d0:	4b0d      	ldr	r3, [pc, #52]	; (8008208 <__smakebuf_r+0x7c>)
 80081d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80081d4:	89a3      	ldrh	r3, [r4, #12]
 80081d6:	6020      	str	r0, [r4, #0]
 80081d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081dc:	81a3      	strh	r3, [r4, #12]
 80081de:	9b00      	ldr	r3, [sp, #0]
 80081e0:	6163      	str	r3, [r4, #20]
 80081e2:	9b01      	ldr	r3, [sp, #4]
 80081e4:	6120      	str	r0, [r4, #16]
 80081e6:	b15b      	cbz	r3, 8008200 <__smakebuf_r+0x74>
 80081e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081ec:	4630      	mov	r0, r6
 80081ee:	f000 f88d 	bl	800830c <_isatty_r>
 80081f2:	b128      	cbz	r0, 8008200 <__smakebuf_r+0x74>
 80081f4:	89a3      	ldrh	r3, [r4, #12]
 80081f6:	f023 0303 	bic.w	r3, r3, #3
 80081fa:	f043 0301 	orr.w	r3, r3, #1
 80081fe:	81a3      	strh	r3, [r4, #12]
 8008200:	89a0      	ldrh	r0, [r4, #12]
 8008202:	4305      	orrs	r5, r0
 8008204:	81a5      	strh	r5, [r4, #12]
 8008206:	e7cd      	b.n	80081a4 <__smakebuf_r+0x18>
 8008208:	080074f9 	.word	0x080074f9

0800820c <__malloc_lock>:
 800820c:	4801      	ldr	r0, [pc, #4]	; (8008214 <__malloc_lock+0x8>)
 800820e:	f7ff ba45 	b.w	800769c <__retarget_lock_acquire_recursive>
 8008212:	bf00      	nop
 8008214:	2000320c 	.word	0x2000320c

08008218 <__malloc_unlock>:
 8008218:	4801      	ldr	r0, [pc, #4]	; (8008220 <__malloc_unlock+0x8>)
 800821a:	f7ff ba40 	b.w	800769e <__retarget_lock_release_recursive>
 800821e:	bf00      	nop
 8008220:	2000320c 	.word	0x2000320c

08008224 <_free_r>:
 8008224:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008226:	2900      	cmp	r1, #0
 8008228:	d048      	beq.n	80082bc <_free_r+0x98>
 800822a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800822e:	9001      	str	r0, [sp, #4]
 8008230:	2b00      	cmp	r3, #0
 8008232:	f1a1 0404 	sub.w	r4, r1, #4
 8008236:	bfb8      	it	lt
 8008238:	18e4      	addlt	r4, r4, r3
 800823a:	f7ff ffe7 	bl	800820c <__malloc_lock>
 800823e:	4a20      	ldr	r2, [pc, #128]	; (80082c0 <_free_r+0x9c>)
 8008240:	9801      	ldr	r0, [sp, #4]
 8008242:	6813      	ldr	r3, [r2, #0]
 8008244:	4615      	mov	r5, r2
 8008246:	b933      	cbnz	r3, 8008256 <_free_r+0x32>
 8008248:	6063      	str	r3, [r4, #4]
 800824a:	6014      	str	r4, [r2, #0]
 800824c:	b003      	add	sp, #12
 800824e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008252:	f7ff bfe1 	b.w	8008218 <__malloc_unlock>
 8008256:	42a3      	cmp	r3, r4
 8008258:	d90b      	bls.n	8008272 <_free_r+0x4e>
 800825a:	6821      	ldr	r1, [r4, #0]
 800825c:	1862      	adds	r2, r4, r1
 800825e:	4293      	cmp	r3, r2
 8008260:	bf04      	itt	eq
 8008262:	681a      	ldreq	r2, [r3, #0]
 8008264:	685b      	ldreq	r3, [r3, #4]
 8008266:	6063      	str	r3, [r4, #4]
 8008268:	bf04      	itt	eq
 800826a:	1852      	addeq	r2, r2, r1
 800826c:	6022      	streq	r2, [r4, #0]
 800826e:	602c      	str	r4, [r5, #0]
 8008270:	e7ec      	b.n	800824c <_free_r+0x28>
 8008272:	461a      	mov	r2, r3
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	b10b      	cbz	r3, 800827c <_free_r+0x58>
 8008278:	42a3      	cmp	r3, r4
 800827a:	d9fa      	bls.n	8008272 <_free_r+0x4e>
 800827c:	6811      	ldr	r1, [r2, #0]
 800827e:	1855      	adds	r5, r2, r1
 8008280:	42a5      	cmp	r5, r4
 8008282:	d10b      	bne.n	800829c <_free_r+0x78>
 8008284:	6824      	ldr	r4, [r4, #0]
 8008286:	4421      	add	r1, r4
 8008288:	1854      	adds	r4, r2, r1
 800828a:	42a3      	cmp	r3, r4
 800828c:	6011      	str	r1, [r2, #0]
 800828e:	d1dd      	bne.n	800824c <_free_r+0x28>
 8008290:	681c      	ldr	r4, [r3, #0]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	6053      	str	r3, [r2, #4]
 8008296:	4421      	add	r1, r4
 8008298:	6011      	str	r1, [r2, #0]
 800829a:	e7d7      	b.n	800824c <_free_r+0x28>
 800829c:	d902      	bls.n	80082a4 <_free_r+0x80>
 800829e:	230c      	movs	r3, #12
 80082a0:	6003      	str	r3, [r0, #0]
 80082a2:	e7d3      	b.n	800824c <_free_r+0x28>
 80082a4:	6825      	ldr	r5, [r4, #0]
 80082a6:	1961      	adds	r1, r4, r5
 80082a8:	428b      	cmp	r3, r1
 80082aa:	bf04      	itt	eq
 80082ac:	6819      	ldreq	r1, [r3, #0]
 80082ae:	685b      	ldreq	r3, [r3, #4]
 80082b0:	6063      	str	r3, [r4, #4]
 80082b2:	bf04      	itt	eq
 80082b4:	1949      	addeq	r1, r1, r5
 80082b6:	6021      	streq	r1, [r4, #0]
 80082b8:	6054      	str	r4, [r2, #4]
 80082ba:	e7c7      	b.n	800824c <_free_r+0x28>
 80082bc:	b003      	add	sp, #12
 80082be:	bd30      	pop	{r4, r5, pc}
 80082c0:	200010c4 	.word	0x200010c4

080082c4 <_read_r>:
 80082c4:	b538      	push	{r3, r4, r5, lr}
 80082c6:	4d07      	ldr	r5, [pc, #28]	; (80082e4 <_read_r+0x20>)
 80082c8:	4604      	mov	r4, r0
 80082ca:	4608      	mov	r0, r1
 80082cc:	4611      	mov	r1, r2
 80082ce:	2200      	movs	r2, #0
 80082d0:	602a      	str	r2, [r5, #0]
 80082d2:	461a      	mov	r2, r3
 80082d4:	f7f8 fcc6 	bl	8000c64 <_read>
 80082d8:	1c43      	adds	r3, r0, #1
 80082da:	d102      	bne.n	80082e2 <_read_r+0x1e>
 80082dc:	682b      	ldr	r3, [r5, #0]
 80082de:	b103      	cbz	r3, 80082e2 <_read_r+0x1e>
 80082e0:	6023      	str	r3, [r4, #0]
 80082e2:	bd38      	pop	{r3, r4, r5, pc}
 80082e4:	20003214 	.word	0x20003214

080082e8 <_fstat_r>:
 80082e8:	b538      	push	{r3, r4, r5, lr}
 80082ea:	4d07      	ldr	r5, [pc, #28]	; (8008308 <_fstat_r+0x20>)
 80082ec:	2300      	movs	r3, #0
 80082ee:	4604      	mov	r4, r0
 80082f0:	4608      	mov	r0, r1
 80082f2:	4611      	mov	r1, r2
 80082f4:	602b      	str	r3, [r5, #0]
 80082f6:	f7f8 fcde 	bl	8000cb6 <_fstat>
 80082fa:	1c43      	adds	r3, r0, #1
 80082fc:	d102      	bne.n	8008304 <_fstat_r+0x1c>
 80082fe:	682b      	ldr	r3, [r5, #0]
 8008300:	b103      	cbz	r3, 8008304 <_fstat_r+0x1c>
 8008302:	6023      	str	r3, [r4, #0]
 8008304:	bd38      	pop	{r3, r4, r5, pc}
 8008306:	bf00      	nop
 8008308:	20003214 	.word	0x20003214

0800830c <_isatty_r>:
 800830c:	b538      	push	{r3, r4, r5, lr}
 800830e:	4d06      	ldr	r5, [pc, #24]	; (8008328 <_isatty_r+0x1c>)
 8008310:	2300      	movs	r3, #0
 8008312:	4604      	mov	r4, r0
 8008314:	4608      	mov	r0, r1
 8008316:	602b      	str	r3, [r5, #0]
 8008318:	f7f8 fcdd 	bl	8000cd6 <_isatty>
 800831c:	1c43      	adds	r3, r0, #1
 800831e:	d102      	bne.n	8008326 <_isatty_r+0x1a>
 8008320:	682b      	ldr	r3, [r5, #0]
 8008322:	b103      	cbz	r3, 8008326 <_isatty_r+0x1a>
 8008324:	6023      	str	r3, [r4, #0]
 8008326:	bd38      	pop	{r3, r4, r5, pc}
 8008328:	20003214 	.word	0x20003214

0800832c <_init>:
 800832c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800832e:	bf00      	nop
 8008330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008332:	bc08      	pop	{r3}
 8008334:	469e      	mov	lr, r3
 8008336:	4770      	bx	lr

08008338 <_fini>:
 8008338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833a:	bf00      	nop
 800833c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800833e:	bc08      	pop	{r3}
 8008340:	469e      	mov	lr, r3
 8008342:	4770      	bx	lr
