
SSI_server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010538  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003dac  080106c8  080106c8  000206c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014474  08014474  00030088  2**0
                  CONTENTS
  4 .ARM          00000008  08014474  08014474  00024474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801447c  0801447c  00030088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801447c  0801447c  0002447c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014480  08014480  00024480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08014484  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030088  2**0
                  CONTENTS
 10 .bss          00008e50  20000088  20000088  00030088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20008ed8  20008ed8  00030088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002bf9e  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000575f  00000000  00000000  0005c056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001100  00000000  00000000  000617b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001050  00000000  00000000  000628b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d0b1  00000000  00000000  00063908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020f5f  00000000  00000000  000909b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da0e9  00000000  00000000  000b1918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0018ba01  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004d14  00000000  00000000  0018ba54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080106b0 	.word	0x080106b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	080106b0 	.word	0x080106b0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <ssi_handler>:
/* we will use character "x", "y","z" as tag for SSI */
char const* TAGCHAR[]={"x", "y", "z"};
char const** TAGS=TAGCHAR;

uint16_t ssi_handler (int iIndex, char *pcInsert, int iInsertLen) // iIndex получает индекс из массива тегов.
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	607a      	str	r2, [r7, #4]
	switch (iIndex) {
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	2b02      	cmp	r3, #2
 80005a8:	d02d      	beq.n	8000606 <ssi_handler+0x6e>
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	2b02      	cmp	r3, #2
 80005ae:	dc3c      	bgt.n	800062a <ssi_handler+0x92>
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d003      	beq.n	80005be <ssi_handler+0x26>
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d012      	beq.n	80005e2 <ssi_handler+0x4a>
			indx+=1;
			sprintf(pcInsert, "%d", indx);
			return strlen(pcInsert);
			break;
		default :
			break;
 80005bc:	e035      	b.n	800062a <ssi_handler+0x92>
			indx+=1;
 80005be:	4b1e      	ldr	r3, [pc, #120]	; (8000638 <ssi_handler+0xa0>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	3301      	adds	r3, #1
 80005c4:	4a1c      	ldr	r2, [pc, #112]	; (8000638 <ssi_handler+0xa0>)
 80005c6:	6013      	str	r3, [r2, #0]
			sprintf(pcInsert, "%d", indx); // pcInsert -указатель на данные которые мы посылаем на web server.
 80005c8:	4b1b      	ldr	r3, [pc, #108]	; (8000638 <ssi_handler+0xa0>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	461a      	mov	r2, r3
 80005ce:	491b      	ldr	r1, [pc, #108]	; (800063c <ssi_handler+0xa4>)
 80005d0:	68b8      	ldr	r0, [r7, #8]
 80005d2:	f00e fee1 	bl	800f398 <siprintf>
			return strlen(pcInsert); //
 80005d6:	68b8      	ldr	r0, [r7, #8]
 80005d8:	f7ff fe04 	bl	80001e4 <strlen>
 80005dc:	4603      	mov	r3, r0
 80005de:	b29b      	uxth	r3, r3
 80005e0:	e025      	b.n	800062e <ssi_handler+0x96>
			indx+=1;
 80005e2:	4b15      	ldr	r3, [pc, #84]	; (8000638 <ssi_handler+0xa0>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	3301      	adds	r3, #1
 80005e8:	4a13      	ldr	r2, [pc, #76]	; (8000638 <ssi_handler+0xa0>)
 80005ea:	6013      	str	r3, [r2, #0]
			sprintf(pcInsert, "%d", indx);
 80005ec:	4b12      	ldr	r3, [pc, #72]	; (8000638 <ssi_handler+0xa0>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	461a      	mov	r2, r3
 80005f2:	4912      	ldr	r1, [pc, #72]	; (800063c <ssi_handler+0xa4>)
 80005f4:	68b8      	ldr	r0, [r7, #8]
 80005f6:	f00e fecf 	bl	800f398 <siprintf>
			return strlen(pcInsert);
 80005fa:	68b8      	ldr	r0, [r7, #8]
 80005fc:	f7ff fdf2 	bl	80001e4 <strlen>
 8000600:	4603      	mov	r3, r0
 8000602:	b29b      	uxth	r3, r3
 8000604:	e013      	b.n	800062e <ssi_handler+0x96>
			indx+=1;
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <ssi_handler+0xa0>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	3301      	adds	r3, #1
 800060c:	4a0a      	ldr	r2, [pc, #40]	; (8000638 <ssi_handler+0xa0>)
 800060e:	6013      	str	r3, [r2, #0]
			sprintf(pcInsert, "%d", indx);
 8000610:	4b09      	ldr	r3, [pc, #36]	; (8000638 <ssi_handler+0xa0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	461a      	mov	r2, r3
 8000616:	4909      	ldr	r1, [pc, #36]	; (800063c <ssi_handler+0xa4>)
 8000618:	68b8      	ldr	r0, [r7, #8]
 800061a:	f00e febd 	bl	800f398 <siprintf>
			return strlen(pcInsert);
 800061e:	68b8      	ldr	r0, [r7, #8]
 8000620:	f7ff fde0 	bl	80001e4 <strlen>
 8000624:	4603      	mov	r3, r0
 8000626:	b29b      	uxth	r3, r3
 8000628:	e001      	b.n	800062e <ssi_handler+0x96>
			break;
 800062a:	bf00      	nop
//						adc_get_value; // Добавим к примеру вывод аналогового пина.
//						sprintf(pcInsert, "%d", adc_get_value); // pcInsert -указатель на данные которые мы посылаем на web server.
//						return strlen(pcInsert); //
//						break;
/*---------------------------------------------------------------------------------*/
	return 0;
 800062c:	2300      	movs	r3, #0
}
 800062e:	4618      	mov	r0, r3
 8000630:	3710      	adds	r7, #16
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	200000a4 	.word	0x200000a4
 800063c:	080106d4 	.word	0x080106d4

08000640 <http_server_init>:


void http_server_init (void) // Инициализация hhtp сервера.
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
	httpd_init();
 8000644:	f004 f9c6 	bl	80049d4 <httpd_init>

	http_set_ssi_handler(ssi_handler, (char const**) TAGS, 3); // Где 3-это количество тегов.
 8000648:	4b04      	ldr	r3, [pc, #16]	; (800065c <http_server_init+0x1c>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2203      	movs	r2, #3
 800064e:	4619      	mov	r1, r3
 8000650:	4803      	ldr	r0, [pc, #12]	; (8000660 <http_server_init+0x20>)
 8000652:	f004 f9df 	bl	8004a14 <http_set_ssi_handler>
}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	2000000c 	.word	0x2000000c
 8000660:	08000599 	.word	0x08000599

08000664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000668:	f000 fa1c 	bl	8000aa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066c:	f000 f80e 	bl	800068c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000670:	f000 f876 	bl	8000760 <MX_GPIO_Init>
  MX_LWIP_Init();
 8000674:	f002 faa0 	bl	8002bb8 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  http_server_init();
 8000678:	f7ff ffe2 	bl	8000640 <http_server_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ethernetif_input(&gnetif);
 800067c:	4802      	ldr	r0, [pc, #8]	; (8000688 <main+0x24>)
 800067e:	f002 fe73 	bl	8003368 <ethernetif_input>
	  sys_check_timeouts();
 8000682:	f00c f913 	bl	800c8ac <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 8000686:	e7f9      	b.n	800067c <main+0x18>
 8000688:	20000678 	.word	0x20000678

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b094      	sub	sp, #80	; 0x50
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 0320 	add.w	r3, r7, #32
 8000696:	2230      	movs	r2, #48	; 0x30
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f00e fe1c 	bl	800f2d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b0:	2300      	movs	r3, #0
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	4b28      	ldr	r3, [pc, #160]	; (8000758 <SystemClock_Config+0xcc>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b8:	4a27      	ldr	r2, [pc, #156]	; (8000758 <SystemClock_Config+0xcc>)
 80006ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006be:	6413      	str	r3, [r2, #64]	; 0x40
 80006c0:	4b25      	ldr	r3, [pc, #148]	; (8000758 <SystemClock_Config+0xcc>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006cc:	2300      	movs	r3, #0
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	4b22      	ldr	r3, [pc, #136]	; (800075c <SystemClock_Config+0xd0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a21      	ldr	r2, [pc, #132]	; (800075c <SystemClock_Config+0xd0>)
 80006d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006da:	6013      	str	r3, [r2, #0]
 80006dc:	4b1f      	ldr	r3, [pc, #124]	; (800075c <SystemClock_Config+0xd0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e8:	2301      	movs	r3, #1
 80006ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f2:	2302      	movs	r3, #2
 80006f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006fc:	2304      	movs	r3, #4
 80006fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000700:	23a8      	movs	r3, #168	; 0xa8
 8000702:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000704:	2302      	movs	r3, #2
 8000706:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000708:	2304      	movs	r3, #4
 800070a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070c:	f107 0320 	add.w	r3, r7, #32
 8000710:	4618      	mov	r0, r3
 8000712:	f001 fe05 	bl	8002320 <HAL_RCC_OscConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800071c:	f000 f864 	bl	80007e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000720:	230f      	movs	r3, #15
 8000722:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000724:	2302      	movs	r3, #2
 8000726:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800072c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000730:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000736:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	2105      	movs	r1, #5
 800073e:	4618      	mov	r0, r3
 8000740:	f002 f866 	bl	8002810 <HAL_RCC_ClockConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800074a:	f000 f84d 	bl	80007e8 <Error_Handler>
  }
}
 800074e:	bf00      	nop
 8000750:	3750      	adds	r7, #80	; 0x50
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800
 800075c:	40007000 	.word	0x40007000

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	4b1e      	ldr	r3, [pc, #120]	; (80007e4 <MX_GPIO_Init+0x84>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a1d      	ldr	r2, [pc, #116]	; (80007e4 <MX_GPIO_Init+0x84>)
 8000770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <MX_GPIO_Init+0x84>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <MX_GPIO_Init+0x84>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a16      	ldr	r2, [pc, #88]	; (80007e4 <MX_GPIO_Init+0x84>)
 800078c:	f043 0304 	orr.w	r3, r3, #4
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <MX_GPIO_Init+0x84>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0304 	and.w	r3, r3, #4
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <MX_GPIO_Init+0x84>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a0f      	ldr	r2, [pc, #60]	; (80007e4 <MX_GPIO_Init+0x84>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <MX_GPIO_Init+0x84>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_GPIO_Init+0x84>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a08      	ldr	r2, [pc, #32]	; (80007e4 <MX_GPIO_Init+0x84>)
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_GPIO_Init+0x84>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0302 	and.w	r3, r3, #2
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]

}
 80007d6:	bf00      	nop
 80007d8:	3714      	adds	r7, #20
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	40023800 	.word	0x40023800

080007e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ec:	b672      	cpsid	i
}
 80007ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <Error_Handler+0x8>
	...

080007f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b10      	ldr	r3, [pc, #64]	; (8000840 <HAL_MspInit+0x4c>)
 8000800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000802:	4a0f      	ldr	r2, [pc, #60]	; (8000840 <HAL_MspInit+0x4c>)
 8000804:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000808:	6453      	str	r3, [r2, #68]	; 0x44
 800080a:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <HAL_MspInit+0x4c>)
 800080c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <HAL_MspInit+0x4c>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081e:	4a08      	ldr	r2, [pc, #32]	; (8000840 <HAL_MspInit+0x4c>)
 8000820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000824:	6413      	str	r3, [r2, #64]	; 0x40
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <HAL_MspInit+0x4c>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800

08000844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000848:	e7fe      	b.n	8000848 <NMI_Handler+0x4>

0800084a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800084e:	e7fe      	b.n	800084e <HardFault_Handler+0x4>

08000850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <MemManage_Handler+0x4>

08000856 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800085a:	e7fe      	b.n	800085a <BusFault_Handler+0x4>

0800085c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <UsageFault_Handler+0x4>

08000862 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000890:	f000 f95a 	bl	8000b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}

08000898 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
	return 1;
 800089c:	2301      	movs	r3, #1
}
 800089e:	4618      	mov	r0, r3
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <_kill>:

int _kill(int pid, int sig)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80008b2:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <_kill+0x20>)
 80008b4:	2216      	movs	r2, #22
 80008b6:	601a      	str	r2, [r3, #0]
	return -1;
 80008b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80008bc:	4618      	mov	r0, r3
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	20008ec8 	.word	0x20008ec8

080008cc <_exit>:

void _exit (int status)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80008d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	f7ff ffe5 	bl	80008a8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80008de:	e7fe      	b.n	80008de <_exit+0x12>

080008e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]
 80008f0:	e00a      	b.n	8000908 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008f2:	f3af 8000 	nop.w
 80008f6:	4601      	mov	r1, r0
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	1c5a      	adds	r2, r3, #1
 80008fc:	60ba      	str	r2, [r7, #8]
 80008fe:	b2ca      	uxtb	r2, r1
 8000900:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	3301      	adds	r3, #1
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	697a      	ldr	r2, [r7, #20]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	429a      	cmp	r2, r3
 800090e:	dbf0      	blt.n	80008f2 <_read+0x12>
	}

return len;
 8000910:	687b      	ldr	r3, [r7, #4]
}
 8000912:	4618      	mov	r0, r3
 8000914:	3718      	adds	r7, #24
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b086      	sub	sp, #24
 800091e:	af00      	add	r7, sp, #0
 8000920:	60f8      	str	r0, [r7, #12]
 8000922:	60b9      	str	r1, [r7, #8]
 8000924:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
 800092a:	e009      	b.n	8000940 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	1c5a      	adds	r2, r3, #1
 8000930:	60ba      	str	r2, [r7, #8]
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	4618      	mov	r0, r3
 8000936:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	3301      	adds	r3, #1
 800093e:	617b      	str	r3, [r7, #20]
 8000940:	697a      	ldr	r2, [r7, #20]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	429a      	cmp	r2, r3
 8000946:	dbf1      	blt.n	800092c <_write+0x12>
	}
	return len;
 8000948:	687b      	ldr	r3, [r7, #4]
}
 800094a:	4618      	mov	r0, r3
 800094c:	3718      	adds	r7, #24
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <_close>:

int _close(int file)
{
 8000952:	b480      	push	{r7}
 8000954:	b083      	sub	sp, #12
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
	return -1;
 800095a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800095e:	4618      	mov	r0, r3
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800096a:	b480      	push	{r7}
 800096c:	b083      	sub	sp, #12
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
 8000972:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800097a:	605a      	str	r2, [r3, #4]
	return 0;
 800097c:	2300      	movs	r3, #0
}
 800097e:	4618      	mov	r0, r3
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <_isatty>:

int _isatty(int file)
{
 800098a:	b480      	push	{r7}
 800098c:	b083      	sub	sp, #12
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
	return 1;
 8000992:	2301      	movs	r3, #1
}
 8000994:	4618      	mov	r0, r3
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	60f8      	str	r0, [r7, #12]
 80009a8:	60b9      	str	r1, [r7, #8]
 80009aa:	607a      	str	r2, [r7, #4]
	return 0;
 80009ac:	2300      	movs	r3, #0
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3714      	adds	r7, #20
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
	...

080009bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009bc:	b480      	push	{r7}
 80009be:	b087      	sub	sp, #28
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009c4:	4a14      	ldr	r2, [pc, #80]	; (8000a18 <_sbrk+0x5c>)
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <_sbrk+0x60>)
 80009c8:	1ad3      	subs	r3, r2, r3
 80009ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009d0:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <_sbrk+0x64>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d102      	bne.n	80009de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009d8:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <_sbrk+0x64>)
 80009da:	4a12      	ldr	r2, [pc, #72]	; (8000a24 <_sbrk+0x68>)
 80009dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <_sbrk+0x64>)
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4413      	add	r3, r2
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d205      	bcs.n	80009f8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80009ec:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <_sbrk+0x6c>)
 80009ee:	220c      	movs	r2, #12
 80009f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009f6:	e009      	b.n	8000a0c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <_sbrk+0x64>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <_sbrk+0x64>)
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4413      	add	r3, r2
 8000a06:	4a06      	ldr	r2, [pc, #24]	; (8000a20 <_sbrk+0x64>)
 8000a08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	371c      	adds	r7, #28
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	20020000 	.word	0x20020000
 8000a1c:	00000400 	.word	0x00000400
 8000a20:	200000a8 	.word	0x200000a8
 8000a24:	20008ed8 	.word	0x20008ed8
 8000a28:	20008ec8 	.word	0x20008ec8

08000a2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <SystemInit+0x20>)
 8000a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a36:	4a05      	ldr	r2, [pc, #20]	; (8000a4c <SystemInit+0x20>)
 8000a38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a54:	480d      	ldr	r0, [pc, #52]	; (8000a8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a56:	490e      	ldr	r1, [pc, #56]	; (8000a90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a58:	4a0e      	ldr	r2, [pc, #56]	; (8000a94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a5c:	e002      	b.n	8000a64 <LoopCopyDataInit>

08000a5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a62:	3304      	adds	r3, #4

08000a64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a68:	d3f9      	bcc.n	8000a5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a6a:	4a0b      	ldr	r2, [pc, #44]	; (8000a98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a6c:	4c0b      	ldr	r4, [pc, #44]	; (8000a9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a70:	e001      	b.n	8000a76 <LoopFillZerobss>

08000a72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a74:	3204      	adds	r2, #4

08000a76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a78:	d3fb      	bcc.n	8000a72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a7a:	f7ff ffd7 	bl	8000a2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a7e:	f00e fbd1 	bl	800f224 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a82:	f7ff fdef 	bl	8000664 <main>
  bx  lr    
 8000a86:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a90:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000a94:	08014484 	.word	0x08014484
  ldr r2, =_sbss
 8000a98:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000a9c:	20008ed8 	.word	0x20008ed8

08000aa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aa0:	e7fe      	b.n	8000aa0 <ADC_IRQHandler>
	...

08000aa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aa8:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <HAL_Init+0x40>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a0d      	ldr	r2, [pc, #52]	; (8000ae4 <HAL_Init+0x40>)
 8000aae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ab2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ab4:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <HAL_Init+0x40>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <HAL_Init+0x40>)
 8000aba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000abe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <HAL_Init+0x40>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a07      	ldr	r2, [pc, #28]	; (8000ae4 <HAL_Init+0x40>)
 8000ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000acc:	2003      	movs	r0, #3
 8000ace:	f000 f931 	bl	8000d34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ad2:	200f      	movs	r0, #15
 8000ad4:	f000 f808 	bl	8000ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad8:	f7ff fe8c 	bl	80007f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000adc:	2300      	movs	r3, #0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40023c00 	.word	0x40023c00

08000ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000af0:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <HAL_InitTick+0x54>)
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <HAL_InitTick+0x58>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	4619      	mov	r1, r3
 8000afa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 f93b 	bl	8000d82 <HAL_SYSTICK_Config>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	e00e      	b.n	8000b34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2b0f      	cmp	r3, #15
 8000b1a:	d80a      	bhi.n	8000b32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	6879      	ldr	r1, [r7, #4]
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b24:	f000 f911 	bl	8000d4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b28:	4a06      	ldr	r2, [pc, #24]	; (8000b44 <HAL_InitTick+0x5c>)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	e000      	b.n	8000b34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000010 	.word	0x20000010
 8000b40:	20000018 	.word	0x20000018
 8000b44:	20000014 	.word	0x20000014

08000b48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_IncTick+0x20>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	461a      	mov	r2, r3
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_IncTick+0x24>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4413      	add	r3, r2
 8000b58:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <HAL_IncTick+0x24>)
 8000b5a:	6013      	str	r3, [r2, #0]
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	20000018 	.word	0x20000018
 8000b6c:	20000670 	.word	0x20000670

08000b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  return uwTick;
 8000b74:	4b03      	ldr	r3, [pc, #12]	; (8000b84 <HAL_GetTick+0x14>)
 8000b76:	681b      	ldr	r3, [r3, #0]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	20000670 	.word	0x20000670

08000b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b90:	f7ff ffee 	bl	8000b70 <HAL_GetTick>
 8000b94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ba0:	d005      	beq.n	8000bae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <HAL_Delay+0x44>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	4413      	add	r3, r2
 8000bac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bae:	bf00      	nop
 8000bb0:	f7ff ffde 	bl	8000b70 <HAL_GetTick>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	68fa      	ldr	r2, [r7, #12]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d8f7      	bhi.n	8000bb0 <HAL_Delay+0x28>
  {
  }
}
 8000bc0:	bf00      	nop
 8000bc2:	bf00      	nop
 8000bc4:	3710      	adds	r7, #16
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000018 	.word	0x20000018

08000bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f003 0307 	and.w	r3, r3, #7
 8000bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <__NVIC_SetPriorityGrouping+0x44>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be6:	68ba      	ldr	r2, [r7, #8]
 8000be8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bec:	4013      	ands	r3, r2
 8000bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c02:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <__NVIC_SetPriorityGrouping+0x44>)
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	60d3      	str	r3, [r2, #12]
}
 8000c08:	bf00      	nop
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c1c:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <__NVIC_GetPriorityGrouping+0x18>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	0a1b      	lsrs	r3, r3, #8
 8000c22:	f003 0307 	and.w	r3, r3, #7
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	6039      	str	r1, [r7, #0]
 8000c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	db0a      	blt.n	8000c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	b2da      	uxtb	r2, r3
 8000c4c:	490c      	ldr	r1, [pc, #48]	; (8000c80 <__NVIC_SetPriority+0x4c>)
 8000c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c52:	0112      	lsls	r2, r2, #4
 8000c54:	b2d2      	uxtb	r2, r2
 8000c56:	440b      	add	r3, r1
 8000c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c5c:	e00a      	b.n	8000c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	4908      	ldr	r1, [pc, #32]	; (8000c84 <__NVIC_SetPriority+0x50>)
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	f003 030f 	and.w	r3, r3, #15
 8000c6a:	3b04      	subs	r3, #4
 8000c6c:	0112      	lsls	r2, r2, #4
 8000c6e:	b2d2      	uxtb	r2, r2
 8000c70:	440b      	add	r3, r1
 8000c72:	761a      	strb	r2, [r3, #24]
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	e000e100 	.word	0xe000e100
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b089      	sub	sp, #36	; 0x24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ca2:	2b04      	cmp	r3, #4
 8000ca4:	bf28      	it	cs
 8000ca6:	2304      	movcs	r3, #4
 8000ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	3304      	adds	r3, #4
 8000cae:	2b06      	cmp	r3, #6
 8000cb0:	d902      	bls.n	8000cb8 <NVIC_EncodePriority+0x30>
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	3b03      	subs	r3, #3
 8000cb6:	e000      	b.n	8000cba <NVIC_EncodePriority+0x32>
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43da      	mvns	r2, r3
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	401a      	ands	r2, r3
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cda:	43d9      	mvns	r1, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	4313      	orrs	r3, r2
         );
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3724      	adds	r7, #36	; 0x24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
	...

08000cf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d00:	d301      	bcc.n	8000d06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d02:	2301      	movs	r3, #1
 8000d04:	e00f      	b.n	8000d26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d06:	4a0a      	ldr	r2, [pc, #40]	; (8000d30 <SysTick_Config+0x40>)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d0e:	210f      	movs	r1, #15
 8000d10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d14:	f7ff ff8e 	bl	8000c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d18:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <SysTick_Config+0x40>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d1e:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <SysTick_Config+0x40>)
 8000d20:	2207      	movs	r2, #7
 8000d22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	e000e010 	.word	0xe000e010

08000d34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f7ff ff47 	bl	8000bd0 <__NVIC_SetPriorityGrouping>
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b086      	sub	sp, #24
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	4603      	mov	r3, r0
 8000d52:	60b9      	str	r1, [r7, #8]
 8000d54:	607a      	str	r2, [r7, #4]
 8000d56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d5c:	f7ff ff5c 	bl	8000c18 <__NVIC_GetPriorityGrouping>
 8000d60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	68b9      	ldr	r1, [r7, #8]
 8000d66:	6978      	ldr	r0, [r7, #20]
 8000d68:	f7ff ff8e 	bl	8000c88 <NVIC_EncodePriority>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d72:	4611      	mov	r1, r2
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff5d 	bl	8000c34 <__NVIC_SetPriority>
}
 8000d7a:	bf00      	nop
 8000d7c:	3718      	adds	r7, #24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff ffb0 	bl	8000cf0 <SysTick_Config>
 8000d90:	4603      	mov	r3, r0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b088      	sub	sp, #32
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61fb      	str	r3, [r7, #28]
 8000da8:	2300      	movs	r3, #0
 8000daa:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8000dac:	4baa      	ldr	r3, [pc, #680]	; (8001058 <HAL_ETH_Init+0x2bc>)
 8000dae:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000db4:	2300      	movs	r3, #0
 8000db6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d101      	bne.n	8000dc2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e183      	b.n	80010ca <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d106      	bne.n	8000ddc <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f002 f820 	bl	8002e1c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	4b9e      	ldr	r3, [pc, #632]	; (800105c <HAL_ETH_Init+0x2c0>)
 8000de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de4:	4a9d      	ldr	r2, [pc, #628]	; (800105c <HAL_ETH_Init+0x2c0>)
 8000de6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dea:	6453      	str	r3, [r2, #68]	; 0x44
 8000dec:	4b9b      	ldr	r3, [pc, #620]	; (800105c <HAL_ETH_Init+0x2c0>)
 8000dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000df8:	4b99      	ldr	r3, [pc, #612]	; (8001060 <HAL_ETH_Init+0x2c4>)
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	4a98      	ldr	r2, [pc, #608]	; (8001060 <HAL_ETH_Init+0x2c4>)
 8000dfe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000e02:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000e04:	4b96      	ldr	r3, [pc, #600]	; (8001060 <HAL_ETH_Init+0x2c4>)
 8000e06:	685a      	ldr	r2, [r3, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6a1b      	ldr	r3, [r3, #32]
 8000e0c:	4994      	ldr	r1, [pc, #592]	; (8001060 <HAL_ETH_Init+0x2c4>)
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f042 0201 	orr.w	r2, r2, #1
 8000e24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e28:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000e2a:	f7ff fea1 	bl	8000b70 <HAL_GetTick>
 8000e2e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000e30:	e011      	b.n	8000e56 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000e32:	f7ff fe9d 	bl	8000b70 <HAL_GetTick>
 8000e36:	4602      	mov	r2, r0
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e40:	d909      	bls.n	8000e56 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2203      	movs	r2, #3
 8000e46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8000e52:	2303      	movs	r3, #3
 8000e54:	e139      	b.n	80010ca <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f003 0301 	and.w	r3, r3, #1
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d1e4      	bne.n	8000e32 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	691b      	ldr	r3, [r3, #16]
 8000e6e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	f023 031c 	bic.w	r3, r3, #28
 8000e76:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000e78:	f001 fe92 	bl	8002ba0 <HAL_RCC_GetHCLKFreq>
 8000e7c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	4a78      	ldr	r2, [pc, #480]	; (8001064 <HAL_ETH_Init+0x2c8>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d908      	bls.n	8000e98 <HAL_ETH_Init+0xfc>
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	4a77      	ldr	r2, [pc, #476]	; (8001068 <HAL_ETH_Init+0x2cc>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d804      	bhi.n	8000e98 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	f043 0308 	orr.w	r3, r3, #8
 8000e94:	61fb      	str	r3, [r7, #28]
 8000e96:	e027      	b.n	8000ee8 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	4a73      	ldr	r2, [pc, #460]	; (8001068 <HAL_ETH_Init+0x2cc>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d908      	bls.n	8000eb2 <HAL_ETH_Init+0x116>
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	4a6d      	ldr	r2, [pc, #436]	; (8001058 <HAL_ETH_Init+0x2bc>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d204      	bcs.n	8000eb2 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	f043 030c 	orr.w	r3, r3, #12
 8000eae:	61fb      	str	r3, [r7, #28]
 8000eb0:	e01a      	b.n	8000ee8 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	4a68      	ldr	r2, [pc, #416]	; (8001058 <HAL_ETH_Init+0x2bc>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d303      	bcc.n	8000ec2 <HAL_ETH_Init+0x126>
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	4a6b      	ldr	r2, [pc, #428]	; (800106c <HAL_ETH_Init+0x2d0>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d911      	bls.n	8000ee6 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	4a69      	ldr	r2, [pc, #420]	; (800106c <HAL_ETH_Init+0x2d0>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d908      	bls.n	8000edc <HAL_ETH_Init+0x140>
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	4a68      	ldr	r2, [pc, #416]	; (8001070 <HAL_ETH_Init+0x2d4>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d804      	bhi.n	8000edc <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	f043 0304 	orr.w	r3, r3, #4
 8000ed8:	61fb      	str	r3, [r7, #28]
 8000eda:	e005      	b.n	8000ee8 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f043 0310 	orr.w	r3, r3, #16
 8000ee2:	61fb      	str	r3, [r7, #28]
 8000ee4:	e000      	b.n	8000ee8 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8000ee6:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	69fa      	ldr	r2, [r7, #28]
 8000eee:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000ef0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f000 fb98 	bl	800162c <HAL_ETH_WritePHYRegister>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d00b      	beq.n	8000f1a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8000f06:	6939      	ldr	r1, [r7, #16]
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f000 fd4d 	bl	80019a8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2201      	movs	r2, #1
 8000f12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e0d7      	b.n	80010ca <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8000f1a:	20ff      	movs	r0, #255	; 0xff
 8000f1c:	f7ff fe34 	bl	8000b88 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	f000 80a5 	beq.w	8001074 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000f2a:	f7ff fe21 	bl	8000b70 <HAL_GetTick>
 8000f2e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	461a      	mov	r2, r3
 8000f36:	2101      	movs	r1, #1
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f000 fb0f 	bl	800155c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000f3e:	f7ff fe17 	bl	8000b70 <HAL_GetTick>
 8000f42:	4602      	mov	r2, r0
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d90f      	bls.n	8000f70 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000f54:	6939      	ldr	r1, [r7, #16]
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f000 fd26 	bl	80019a8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2201      	movs	r2, #1
 8000f60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	e0ac      	b.n	80010ca <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f003 0304 	and.w	r3, r3, #4
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d0da      	beq.n	8000f30 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000f7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f7e:	2100      	movs	r1, #0
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f000 fb53 	bl	800162c <HAL_ETH_WritePHYRegister>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d00b      	beq.n	8000fa4 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000f90:	6939      	ldr	r1, [r7, #16]
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f000 fd08 	bl	80019a8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e092      	b.n	80010ca <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8000fa4:	f7ff fde4 	bl	8000b70 <HAL_GetTick>
 8000fa8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000faa:	f107 030c 	add.w	r3, r7, #12
 8000fae:	461a      	mov	r2, r3
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f000 fad2 	bl	800155c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000fb8:	f7ff fdda 	bl	8000b70 <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d90f      	bls.n	8000fea <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000fce:	6939      	ldr	r1, [r7, #16]
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f000 fce9 	bl	80019a8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	e06f      	b.n	80010ca <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	f003 0320 	and.w	r3, r3, #32
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d0da      	beq.n	8000faa <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	2110      	movs	r1, #16
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f000 faad 	bl	800155c <HAL_ETH_ReadPHYRegister>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d00b      	beq.n	8001020 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800100c:	6939      	ldr	r1, [r7, #16]
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f000 fcca 	bl	80019a8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2201      	movs	r2, #1
 8001018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800101c:	2301      	movs	r3, #1
 800101e:	e054      	b.n	80010ca <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f003 0304 	and.w	r3, r3, #4
 8001026:	2b00      	cmp	r3, #0
 8001028:	d004      	beq.n	8001034 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	e002      	b.n	800103a <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f003 0302 	and.w	r3, r3, #2
 8001040:	2b00      	cmp	r3, #0
 8001042:	d003      	beq.n	800104c <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	e035      	b.n	80010b8 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	e030      	b.n	80010b8 <HAL_ETH_Init+0x31c>
 8001056:	bf00      	nop
 8001058:	03938700 	.word	0x03938700
 800105c:	40023800 	.word	0x40023800
 8001060:	40013800 	.word	0x40013800
 8001064:	01312cff 	.word	0x01312cff
 8001068:	02160ebf 	.word	0x02160ebf
 800106c:	05f5e0ff 	.word	0x05f5e0ff
 8001070:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	08db      	lsrs	r3, r3, #3
 800107a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	085b      	lsrs	r3, r3, #1
 8001082:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001084:	4313      	orrs	r3, r2
 8001086:	b29b      	uxth	r3, r3
 8001088:	461a      	mov	r2, r3
 800108a:	2100      	movs	r1, #0
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f000 facd 	bl	800162c <HAL_ETH_WritePHYRegister>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d00b      	beq.n	80010b0 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800109c:	6939      	ldr	r1, [r7, #16]
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f000 fc82 	bl	80019a8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2201      	movs	r2, #1
 80010a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e00c      	b.n	80010ca <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80010b0:	f640 70ff 	movw	r0, #4095	; 0xfff
 80010b4:	f7ff fd68 	bl	8000b88 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80010b8:	6939      	ldr	r1, [r7, #16]
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f000 fc74 	bl	80019a8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2201      	movs	r2, #1
 80010c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3720      	adds	r7, #32
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop

080010d4 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b087      	sub	sp, #28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
 80010e0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d101      	bne.n	80010f4 <HAL_ETH_DMATxDescListInit+0x20>
 80010f0:	2302      	movs	r3, #2
 80010f2:	e052      	b.n	800119a <HAL_ETH_DMATxDescListInit+0xc6>
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2201      	movs	r2, #1
 80010f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2202      	movs	r2, #2
 8001100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	68ba      	ldr	r2, [r7, #8]
 8001108:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
 800110e:	e030      	b.n	8001172 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	015b      	lsls	r3, r3, #5
 8001114:	68ba      	ldr	r2, [r7, #8]
 8001116:	4413      	add	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001120:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001128:	fb02 f303 	mul.w	r3, r2, r3
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	4413      	add	r3, r2
 8001130:	461a      	mov	r2, r3
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d105      	bne.n	800114a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	3b01      	subs	r3, #1
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	429a      	cmp	r2, r3
 8001152:	d208      	bcs.n	8001166 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	3301      	adds	r3, #1
 8001158:	015b      	lsls	r3, r3, #5
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	4413      	add	r3, r2
 800115e:	461a      	mov	r2, r3
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	60da      	str	r2, [r3, #12]
 8001164:	e002      	b.n	800116c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	3301      	adds	r3, #1
 8001170:	617b      	str	r3, [r7, #20]
 8001172:	697a      	ldr	r2, [r7, #20]
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	429a      	cmp	r2, r3
 8001178:	d3ca      	bcc.n	8001110 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001184:	3310      	adds	r3, #16
 8001186:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	2201      	movs	r2, #1
 800118c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	2200      	movs	r2, #0
 8001194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	371c      	adds	r7, #28
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80011a6:	b480      	push	{r7}
 80011a8:	b087      	sub	sp, #28
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	60f8      	str	r0, [r7, #12]
 80011ae:	60b9      	str	r1, [r7, #8]
 80011b0:	607a      	str	r2, [r7, #4]
 80011b2:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d101      	bne.n	80011c6 <HAL_ETH_DMARxDescListInit+0x20>
 80011c2:	2302      	movs	r3, #2
 80011c4:	e056      	b.n	8001274 <HAL_ETH_DMARxDescListInit+0xce>
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2201      	movs	r2, #1
 80011ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2202      	movs	r2, #2
 80011d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
 80011e0:	e034      	b.n	800124c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	015b      	lsls	r3, r3, #5
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	4413      	add	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80011f2:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80011fa:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001202:	fb02 f303 	mul.w	r3, r2, r3
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	4413      	add	r3, r2
 800120a:	461a      	mov	r2, r3
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d105      	bne.n	8001224 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	3b01      	subs	r3, #1
 8001228:	697a      	ldr	r2, [r7, #20]
 800122a:	429a      	cmp	r2, r3
 800122c:	d208      	bcs.n	8001240 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	3301      	adds	r3, #1
 8001232:	015b      	lsls	r3, r3, #5
 8001234:	68ba      	ldr	r2, [r7, #8]
 8001236:	4413      	add	r3, r2
 8001238:	461a      	mov	r2, r3
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	e002      	b.n	8001246 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001240:	68ba      	ldr	r2, [r7, #8]
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	3301      	adds	r3, #1
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	697a      	ldr	r2, [r7, #20]
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	429a      	cmp	r2, r3
 8001252:	d3c6      	bcc.n	80011e2 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	68ba      	ldr	r2, [r7, #8]
 800125a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800125e:	330c      	adds	r3, #12
 8001260:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	2201      	movs	r2, #1
 8001266:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	2200      	movs	r2, #0
 800126e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001272:	2300      	movs	r3, #0
}
 8001274:	4618      	mov	r0, r3
 8001276:	371c      	adds	r7, #28
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001280:	b480      	push	{r7}
 8001282:	b087      	sub	sp, #28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	2300      	movs	r3, #0
 8001294:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800129c:	2b01      	cmp	r3, #1
 800129e:	d101      	bne.n	80012a4 <HAL_ETH_TransmitFrame+0x24>
 80012a0:	2302      	movs	r3, #2
 80012a2:	e0cd      	b.n	8001440 <HAL_ETH_TransmitFrame+0x1c0>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2201      	movs	r2, #1
 80012a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2202      	movs	r2, #2
 80012b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d109      	bne.n	80012ce <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2201      	movs	r2, #1
 80012be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80012ca:	2301      	movs	r3, #1
 80012cc:	e0b8      	b.n	8001440 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	da09      	bge.n	80012ec <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2212      	movs	r2, #18
 80012dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2200      	movs	r2, #0
 80012e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e0a9      	b.n	8001440 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d915      	bls.n	8001322 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	4a54      	ldr	r2, [pc, #336]	; (800144c <HAL_ETH_TransmitFrame+0x1cc>)
 80012fa:	fba2 2303 	umull	r2, r3, r2, r3
 80012fe:	0a9b      	lsrs	r3, r3, #10
 8001300:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001302:	683a      	ldr	r2, [r7, #0]
 8001304:	4b51      	ldr	r3, [pc, #324]	; (800144c <HAL_ETH_TransmitFrame+0x1cc>)
 8001306:	fba3 1302 	umull	r1, r3, r3, r2
 800130a:	0a9b      	lsrs	r3, r3, #10
 800130c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001310:	fb01 f303 	mul.w	r3, r1, r3
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b00      	cmp	r3, #0
 8001318:	d005      	beq.n	8001326 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	3301      	adds	r3, #1
 800131e:	617b      	str	r3, [r7, #20]
 8001320:	e001      	b.n	8001326 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001322:	2301      	movs	r3, #1
 8001324:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d11c      	bne.n	8001366 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001336:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800133a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001340:	683a      	ldr	r2, [r7, #0]
 8001342:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001346:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001352:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001356:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	461a      	mov	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	62da      	str	r2, [r3, #44]	; 0x2c
 8001364:	e04b      	b.n	80013fe <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
 800136a:	e044      	b.n	80013f6 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001376:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800137a:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d107      	bne.n	8001392 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001390:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001396:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800139a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	3b01      	subs	r3, #1
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d116      	bne.n	80013d4 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80013b4:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	4a25      	ldr	r2, [pc, #148]	; (8001450 <HAL_ETH_TransmitFrame+0x1d0>)
 80013ba:	fb02 f203 	mul.w	r2, r2, r3
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	4413      	add	r3, r2
 80013c2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80013c6:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013cc:	68fa      	ldr	r2, [r7, #12]
 80013ce:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80013d2:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013de:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80013e2:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	461a      	mov	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	3301      	adds	r3, #1
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d3b6      	bcc.n	800136c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001406:	3314      	adds	r3, #20
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0304 	and.w	r3, r3, #4
 800140e:	2b00      	cmp	r3, #0
 8001410:	d00d      	beq.n	800142e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800141a:	3314      	adds	r3, #20
 800141c:	2204      	movs	r2, #4
 800141e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001428:	3304      	adds	r3, #4
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2201      	movs	r2, #1
 8001432:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	371c      	adds	r7, #28
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	ac02b00b 	.word	0xac02b00b
 8001450:	fffffa0c 	.word	0xfffffa0c

08001454 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 800145c:	2300      	movs	r3, #0
 800145e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001466:	2b01      	cmp	r3, #1
 8001468:	d101      	bne.n	800146e <HAL_ETH_GetReceivedFrame+0x1a>
 800146a:	2302      	movs	r3, #2
 800146c:	e070      	b.n	8001550 <HAL_ETH_GetReceivedFrame+0xfc>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2201      	movs	r2, #1
 8001472:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2202      	movs	r2, #2
 800147a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	db5a      	blt.n	800153e <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001492:	2b00      	cmp	r3, #0
 8001494:	d030      	beq.n	80014f8 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800149a:	1c5a      	adds	r2, r3, #1
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d103      	bne.n	80014b0 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	0c1b      	lsrs	r3, r3, #16
 80014c0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80014c4:	3b04      	subs	r3, #4
 80014c6:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	689a      	ldr	r2, [r3, #8]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	461a      	mov	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2201      	movs	r2, #1
 80014e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 80014f4:	2300      	movs	r3, #0
 80014f6:	e02b      	b.n	8001550 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001502:	2b00      	cmp	r3, #0
 8001504:	d010      	beq.n	8001528 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2201      	movs	r2, #1
 8001518:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	461a      	mov	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	629a      	str	r2, [r3, #40]	; 0x28
 8001526:	e00a      	b.n	800153e <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800152c:	1c5a      	adds	r2, r3, #1
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	461a      	mov	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2201      	movs	r2, #1
 8001542:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
}
 8001550:	4618      	mov	r0, r3
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	460b      	mov	r3, r1
 8001566:	607a      	str	r2, [r7, #4]
 8001568:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b82      	cmp	r3, #130	; 0x82
 800157c:	d101      	bne.n	8001582 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800157e:	2302      	movs	r3, #2
 8001580:	e050      	b.n	8001624 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2282      	movs	r2, #130	; 0x82
 8001586:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	f003 031c 	and.w	r3, r3, #28
 8001598:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	8a1b      	ldrh	r3, [r3, #16]
 800159e:	02db      	lsls	r3, r3, #11
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	697a      	ldr	r2, [r7, #20]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80015a8:	897b      	ldrh	r3, [r7, #10]
 80015aa:	019b      	lsls	r3, r3, #6
 80015ac:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	f023 0302 	bic.w	r3, r3, #2
 80015bc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	697a      	ldr	r2, [r7, #20]
 80015cc:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80015ce:	f7ff facf 	bl	8000b70 <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80015d4:	e015      	b.n	8001602 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80015d6:	f7ff facb 	bl	8000b70 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e4:	d309      	bcc.n	80015fa <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2201      	movs	r2, #1
 80015ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e014      	b.n	8001624 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	691b      	ldr	r3, [r3, #16]
 8001600:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1e4      	bne.n	80015d6 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	b29b      	uxth	r3, r3
 8001614:	461a      	mov	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2201      	movs	r2, #1
 800161e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	460b      	mov	r3, r1
 8001636:	607a      	str	r2, [r7, #4]
 8001638:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800163e:	2300      	movs	r3, #0
 8001640:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b42      	cmp	r3, #66	; 0x42
 800164c:	d101      	bne.n	8001652 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800164e:	2302      	movs	r3, #2
 8001650:	e04e      	b.n	80016f0 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2242      	movs	r2, #66	; 0x42
 8001656:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	f003 031c 	and.w	r3, r3, #28
 8001668:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	8a1b      	ldrh	r3, [r3, #16]
 800166e:	02db      	lsls	r3, r3, #11
 8001670:	b29b      	uxth	r3, r3
 8001672:	697a      	ldr	r2, [r7, #20]
 8001674:	4313      	orrs	r3, r2
 8001676:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001678:	897b      	ldrh	r3, [r7, #10]
 800167a:	019b      	lsls	r3, r3, #6
 800167c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001680:	697a      	ldr	r2, [r7, #20]
 8001682:	4313      	orrs	r3, r2
 8001684:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	f043 0302 	orr.w	r3, r3, #2
 800168c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	b29a      	uxth	r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	697a      	ldr	r2, [r7, #20]
 80016a6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80016a8:	f7ff fa62 	bl	8000b70 <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80016ae:	e015      	b.n	80016dc <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80016b0:	f7ff fa5e 	bl	8000b70 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016be:	d309      	bcc.n	80016d4 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e00d      	b.n	80016f0 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1e4      	bne.n	80016b0 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2201      	movs	r2, #1
 80016ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001706:	2b01      	cmp	r3, #1
 8001708:	d101      	bne.n	800170e <HAL_ETH_Start+0x16>
 800170a:	2302      	movs	r3, #2
 800170c:	e01f      	b.n	800174e <HAL_ETH_Start+0x56>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2202      	movs	r2, #2
 800171a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 fb44 	bl	8001dac <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f000 fb7b 	bl	8001e20 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 fc12 	bl	8001f54 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f000 fbaf 	bl	8001e94 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f000 fbdc 	bl	8001ef4 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2201      	movs	r2, #1
 8001740:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001764:	2b01      	cmp	r3, #1
 8001766:	d101      	bne.n	800176c <HAL_ETH_Stop+0x16>
 8001768:	2302      	movs	r3, #2
 800176a:	e01f      	b.n	80017ac <HAL_ETH_Stop+0x56>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2202      	movs	r2, #2
 8001778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f000 fba1 	bl	8001ec4 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f000 fbce 	bl	8001f24 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 fb66 	bl	8001e5a <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 fbe0 	bl	8001f54 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f000 fb26 	bl	8001de6 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2201      	movs	r2, #1
 800179e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d101      	bne.n	80017d0 <HAL_ETH_ConfigMAC+0x1c>
 80017cc:	2302      	movs	r3, #2
 80017ce:	e0e4      	b.n	800199a <HAL_ETH_ConfigMAC+0x1e6>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2202      	movs	r2, #2
 80017dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 80b1 	beq.w	800194a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80017f0:	68fa      	ldr	r2, [r7, #12]
 80017f2:	4b6c      	ldr	r3, [pc, #432]	; (80019a4 <HAL_ETH_ConfigMAC+0x1f0>)
 80017f4:	4013      	ands	r3, r2
 80017f6:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001800:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001806:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 800180c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001812:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001818:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800181e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001824:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800182a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001830:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001836:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 800183c:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001842:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	4313      	orrs	r3, r2
 8001848:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800185a:	2001      	movs	r0, #1
 800185c:	f7ff f994 	bl	8000b88 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001870:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001876:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 800187c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001882:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001888:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800188e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800189a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800189c:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80018a6:	2001      	movs	r0, #1
 80018a8:	f7ff f96e 	bl	8000b88 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	68fa      	ldr	r2, [r7, #12]
 80018b2:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80018bc:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80018c6:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80018d6:	4013      	ands	r3, r2
 80018d8:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018de:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80018e4:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80018ea:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80018f0:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80018f6:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80018fc:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	4313      	orrs	r3, r2
 8001902:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001914:	2001      	movs	r0, #1
 8001916:	f7ff f937 	bl	8000b88 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	430a      	orrs	r2, r1
 8001930:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	69db      	ldr	r3, [r3, #28]
 8001938:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800193a:	2001      	movs	r0, #1
 800193c:	f7ff f924 	bl	8000b88 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	61da      	str	r2, [r3, #28]
 8001948:	e01e      	b.n	8001988 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001958:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689a      	ldr	r2, [r3, #8]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	4313      	orrs	r3, r2
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	4313      	orrs	r3, r2
 8001968:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800197a:	2001      	movs	r0, #1
 800197c:	f7ff f904 	bl	8000b88 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	ff20810f 	.word	0xff20810f

080019a8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b0b0      	sub	sp, #192	; 0xc0
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80019b2:	2300      	movs	r3, #0
 80019b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d007      	beq.n	80019ce <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019c4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80019ce:	2300      	movs	r3, #0
 80019d0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80019d2:	2300      	movs	r3, #0
 80019d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80019d6:	2300      	movs	r3, #0
 80019d8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80019da:	2300      	movs	r3, #0
 80019dc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80019e2:	2300      	movs	r3, #0
 80019e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d103      	bne.n	80019f6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80019ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019f2:	663b      	str	r3, [r7, #96]	; 0x60
 80019f4:	e001      	b.n	80019fa <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80019f6:	2300      	movs	r3, #0
 80019f8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80019fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019fe:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001a00:	2300      	movs	r3, #0
 8001a02:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001a04:	2300      	movs	r3, #0
 8001a06:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001a10:	2300      	movs	r3, #0
 8001a12:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001a14:	2340      	movs	r3, #64	; 0x40
 8001a16:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001a24:	2300      	movs	r3, #0
 8001a26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001a30:	2300      	movs	r3, #0
 8001a32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001a42:	2300      	movs	r3, #0
 8001a44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001a48:	2380      	movs	r3, #128	; 0x80
 8001a4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001a54:	2300      	movs	r3, #0
 8001a56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001a60:	2300      	movs	r3, #0
 8001a62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001a66:	2300      	movs	r3, #0
 8001a68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001a7c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a80:	4bac      	ldr	r3, [pc, #688]	; (8001d34 <ETH_MACDMAConfig+0x38c>)
 8001a82:	4013      	ands	r3, r2
 8001a84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001a88:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001a8c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001a8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001a90:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001a94:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001a9a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001a9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001a9e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001aa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001aa2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001aa8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001aaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001aac:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001aae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001ab0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001ab2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001ab4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001ab8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001aba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001abc:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001abe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ad0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001adc:	2001      	movs	r0, #1
 8001ade:	f7ff f853 	bl	8000b88 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001aea:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001aec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001aee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001af0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001af2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001af4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001af6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001afa:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001afc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001b00:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001b02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001b06:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001b08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001b0c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001b10:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001b18:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001b1a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b26:	2001      	movs	r0, #1
 8001b28:	f7ff f82e 	bl	8000b88 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b34:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001b3e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001b48:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001b54:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b58:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001b62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b66:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001b68:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001b6c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001b6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001b72:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001b74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001b78:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001b7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001b7e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001b80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001b84:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001b86:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b98:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ba4:	2001      	movs	r0, #1
 8001ba6:	f7fe ffef 	bl	8000b88 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bb2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001bb4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001bb8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bce:	2001      	movs	r0, #1
 8001bd0:	f7fe ffda 	bl	8000b88 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bdc:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001bde:	2300      	movs	r3, #0
 8001be0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001be2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001be6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001be8:	2300      	movs	r3, #0
 8001bea:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001bec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001bf0:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001c02:	2304      	movs	r3, #4
 8001c04:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001c06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001c0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c10:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001c12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c16:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001c18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c1c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001c1e:	2380      	movs	r3, #128	; 0x80
 8001c20:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001c26:	2300      	movs	r3, #0
 8001c28:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c32:	3318      	adds	r3, #24
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001c3a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c3e:	4b3e      	ldr	r3, [pc, #248]	; (8001d38 <ETH_MACDMAConfig+0x390>)
 8001c40:	4013      	ands	r3, r2
 8001c42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001c46:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001c48:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001c4a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001c4c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001c4e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001c50:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001c52:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001c54:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001c56:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001c58:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001c5a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001c5c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001c5e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001c62:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001c66:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001c68:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c7a:	3318      	adds	r3, #24
 8001c7c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c80:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c8a:	3318      	adds	r3, #24
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c92:	2001      	movs	r0, #1
 8001c94:	f7fe ff78 	bl	8000b88 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ca0:	3318      	adds	r3, #24
 8001ca2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ca6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001ca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001cac:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001cb0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001cb4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001cb8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001cba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cbc:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001cbe:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001cc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001cc2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001ccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cd0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	f7fe ff51 	bl	8000b88 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cf2:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d10f      	bne.n	8001d1c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d04:	331c      	adds	r3, #28
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001d10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d18:	331c      	adds	r3, #28
 8001d1a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	695b      	ldr	r3, [r3, #20]
 8001d20:	461a      	mov	r2, r3
 8001d22:	2100      	movs	r1, #0
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 f809 	bl	8001d3c <ETH_MACAddressConfig>
}
 8001d2a:	bf00      	nop
 8001d2c:	37c0      	adds	r7, #192	; 0xc0
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	ff20810f 	.word	0xff20810f
 8001d38:	f8de3f23 	.word	0xf8de3f23

08001d3c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b087      	sub	sp, #28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3305      	adds	r3, #5
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	021b      	lsls	r3, r3, #8
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	3204      	adds	r2, #4
 8001d54:	7812      	ldrb	r2, [r2, #0]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001d5a:	68ba      	ldr	r2, [r7, #8]
 8001d5c:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <ETH_MACAddressConfig+0x68>)
 8001d5e:	4413      	add	r3, r2
 8001d60:	461a      	mov	r2, r3
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3303      	adds	r3, #3
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	061a      	lsls	r2, r3, #24
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	3302      	adds	r3, #2
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	041b      	lsls	r3, r3, #16
 8001d76:	431a      	orrs	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	021b      	lsls	r3, r3, #8
 8001d80:	4313      	orrs	r3, r2
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	7812      	ldrb	r2, [r2, #0]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001d8a:	68ba      	ldr	r2, [r7, #8]
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <ETH_MACAddressConfig+0x6c>)
 8001d8e:	4413      	add	r3, r2
 8001d90:	461a      	mov	r2, r3
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	6013      	str	r3, [r2, #0]
}
 8001d96:	bf00      	nop
 8001d98:	371c      	adds	r7, #28
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	40028040 	.word	0x40028040
 8001da8:	40028044 	.word	0x40028044

08001dac <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0208 	orr.w	r2, r2, #8
 8001dc6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	f000 f8e9 	bl	8001fa8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	601a      	str	r2, [r3, #0]
}
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b084      	sub	sp, #16
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001dee:	2300      	movs	r3, #0
 8001df0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 0208 	bic.w	r2, r2, #8
 8001e00:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001e0a:	2001      	movs	r0, #1
 8001e0c:	f000 f8cc 	bl	8001fa8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	601a      	str	r2, [r3, #0]
}
 8001e18:	bf00      	nop
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0204 	orr.w	r2, r2, #4
 8001e3a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001e44:	2001      	movs	r0, #1
 8001e46:	f000 f8af 	bl	8001fa8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	601a      	str	r2, [r3, #0]
}
 8001e52:	bf00      	nop
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b084      	sub	sp, #16
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 0204 	bic.w	r2, r2, #4
 8001e74:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001e7e:	2001      	movs	r0, #1
 8001e80:	f000 f892 	bl	8001fa8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	601a      	str	r2, [r3, #0]
}
 8001e8c:	bf00      	nop
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ea4:	3318      	adds	r3, #24
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001eb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eb4:	3318      	adds	r3, #24
 8001eb6:	601a      	str	r2, [r3, #0]
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ed4:	3318      	adds	r3, #24
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ee0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ee4:	3318      	adds	r3, #24
 8001ee6:	601a      	str	r2, [r3, #0]
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f04:	3318      	adds	r3, #24
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f042 0202 	orr.w	r2, r2, #2
 8001f10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f14:	3318      	adds	r3, #24
 8001f16:	601a      	str	r2, [r3, #0]
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f34:	3318      	adds	r3, #24
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0202 	bic.w	r2, r2, #2
 8001f40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f44:	3318      	adds	r3, #24
 8001f46:	601a      	str	r2, [r3, #0]
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f68:	3318      	adds	r3, #24
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001f74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f78:	3318      	adds	r3, #24
 8001f7a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f84:	3318      	adds	r3, #24
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001f8a:	2001      	movs	r0, #1
 8001f8c:	f000 f80c 	bl	8001fa8 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f9a:	3318      	adds	r3, #24
 8001f9c:	601a      	str	r2, [r3, #0]
}
 8001f9e:	bf00      	nop
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
	...

08001fa8 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <ETH_Delay+0x38>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a0b      	ldr	r2, [pc, #44]	; (8001fe4 <ETH_Delay+0x3c>)
 8001fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fba:	0a5b      	lsrs	r3, r3, #9
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	fb02 f303 	mul.w	r3, r2, r3
 8001fc2:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8001fc4:	bf00      	nop
  } 
  while (Delay --);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	1e5a      	subs	r2, r3, #1
 8001fca:	60fa      	str	r2, [r7, #12]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1f9      	bne.n	8001fc4 <ETH_Delay+0x1c>
}
 8001fd0:	bf00      	nop
 8001fd2:	bf00      	nop
 8001fd4:	3714      	adds	r7, #20
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	20000010 	.word	0x20000010
 8001fe4:	10624dd3 	.word	0x10624dd3

08001fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b089      	sub	sp, #36	; 0x24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ffe:	2300      	movs	r3, #0
 8002000:	61fb      	str	r3, [r7, #28]
 8002002:	e16b      	b.n	80022dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002004:	2201      	movs	r2, #1
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	4013      	ands	r3, r2
 8002016:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	429a      	cmp	r2, r3
 800201e:	f040 815a 	bne.w	80022d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	2b01      	cmp	r3, #1
 800202c:	d005      	beq.n	800203a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002036:	2b02      	cmp	r3, #2
 8002038:	d130      	bne.n	800209c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	2203      	movs	r2, #3
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43db      	mvns	r3, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4013      	ands	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	68da      	ldr	r2, [r3, #12]
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4313      	orrs	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002070:	2201      	movs	r2, #1
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	43db      	mvns	r3, r3
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4013      	ands	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	091b      	lsrs	r3, r3, #4
 8002086:	f003 0201 	and.w	r2, r3, #1
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4313      	orrs	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 0303 	and.w	r3, r3, #3
 80020a4:	2b03      	cmp	r3, #3
 80020a6:	d017      	beq.n	80020d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	2203      	movs	r2, #3
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4013      	ands	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 0303 	and.w	r3, r3, #3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d123      	bne.n	800212c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	08da      	lsrs	r2, r3, #3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3208      	adds	r2, #8
 80020ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	220f      	movs	r2, #15
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4013      	ands	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	691a      	ldr	r2, [r3, #16]
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4313      	orrs	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	08da      	lsrs	r2, r3, #3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	3208      	adds	r2, #8
 8002126:	69b9      	ldr	r1, [r7, #24]
 8002128:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	2203      	movs	r2, #3
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4013      	ands	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 0203 	and.w	r2, r3, #3
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4313      	orrs	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 80b4 	beq.w	80022d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	4b60      	ldr	r3, [pc, #384]	; (80022f4 <HAL_GPIO_Init+0x30c>)
 8002174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002176:	4a5f      	ldr	r2, [pc, #380]	; (80022f4 <HAL_GPIO_Init+0x30c>)
 8002178:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800217c:	6453      	str	r3, [r2, #68]	; 0x44
 800217e:	4b5d      	ldr	r3, [pc, #372]	; (80022f4 <HAL_GPIO_Init+0x30c>)
 8002180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800218a:	4a5b      	ldr	r2, [pc, #364]	; (80022f8 <HAL_GPIO_Init+0x310>)
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	089b      	lsrs	r3, r3, #2
 8002190:	3302      	adds	r3, #2
 8002192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002196:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	220f      	movs	r2, #15
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	43db      	mvns	r3, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4013      	ands	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a52      	ldr	r2, [pc, #328]	; (80022fc <HAL_GPIO_Init+0x314>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d02b      	beq.n	800220e <HAL_GPIO_Init+0x226>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a51      	ldr	r2, [pc, #324]	; (8002300 <HAL_GPIO_Init+0x318>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d025      	beq.n	800220a <HAL_GPIO_Init+0x222>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a50      	ldr	r2, [pc, #320]	; (8002304 <HAL_GPIO_Init+0x31c>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d01f      	beq.n	8002206 <HAL_GPIO_Init+0x21e>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a4f      	ldr	r2, [pc, #316]	; (8002308 <HAL_GPIO_Init+0x320>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d019      	beq.n	8002202 <HAL_GPIO_Init+0x21a>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a4e      	ldr	r2, [pc, #312]	; (800230c <HAL_GPIO_Init+0x324>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d013      	beq.n	80021fe <HAL_GPIO_Init+0x216>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a4d      	ldr	r2, [pc, #308]	; (8002310 <HAL_GPIO_Init+0x328>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d00d      	beq.n	80021fa <HAL_GPIO_Init+0x212>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a4c      	ldr	r2, [pc, #304]	; (8002314 <HAL_GPIO_Init+0x32c>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d007      	beq.n	80021f6 <HAL_GPIO_Init+0x20e>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a4b      	ldr	r2, [pc, #300]	; (8002318 <HAL_GPIO_Init+0x330>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d101      	bne.n	80021f2 <HAL_GPIO_Init+0x20a>
 80021ee:	2307      	movs	r3, #7
 80021f0:	e00e      	b.n	8002210 <HAL_GPIO_Init+0x228>
 80021f2:	2308      	movs	r3, #8
 80021f4:	e00c      	b.n	8002210 <HAL_GPIO_Init+0x228>
 80021f6:	2306      	movs	r3, #6
 80021f8:	e00a      	b.n	8002210 <HAL_GPIO_Init+0x228>
 80021fa:	2305      	movs	r3, #5
 80021fc:	e008      	b.n	8002210 <HAL_GPIO_Init+0x228>
 80021fe:	2304      	movs	r3, #4
 8002200:	e006      	b.n	8002210 <HAL_GPIO_Init+0x228>
 8002202:	2303      	movs	r3, #3
 8002204:	e004      	b.n	8002210 <HAL_GPIO_Init+0x228>
 8002206:	2302      	movs	r3, #2
 8002208:	e002      	b.n	8002210 <HAL_GPIO_Init+0x228>
 800220a:	2301      	movs	r3, #1
 800220c:	e000      	b.n	8002210 <HAL_GPIO_Init+0x228>
 800220e:	2300      	movs	r3, #0
 8002210:	69fa      	ldr	r2, [r7, #28]
 8002212:	f002 0203 	and.w	r2, r2, #3
 8002216:	0092      	lsls	r2, r2, #2
 8002218:	4093      	lsls	r3, r2
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4313      	orrs	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002220:	4935      	ldr	r1, [pc, #212]	; (80022f8 <HAL_GPIO_Init+0x310>)
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	089b      	lsrs	r3, r3, #2
 8002226:	3302      	adds	r3, #2
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800222e:	4b3b      	ldr	r3, [pc, #236]	; (800231c <HAL_GPIO_Init+0x334>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	43db      	mvns	r3, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4013      	ands	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	4313      	orrs	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002252:	4a32      	ldr	r2, [pc, #200]	; (800231c <HAL_GPIO_Init+0x334>)
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002258:	4b30      	ldr	r3, [pc, #192]	; (800231c <HAL_GPIO_Init+0x334>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	43db      	mvns	r3, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4013      	ands	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	4313      	orrs	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800227c:	4a27      	ldr	r2, [pc, #156]	; (800231c <HAL_GPIO_Init+0x334>)
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002282:	4b26      	ldr	r3, [pc, #152]	; (800231c <HAL_GPIO_Init+0x334>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	43db      	mvns	r3, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4013      	ands	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022a6:	4a1d      	ldr	r2, [pc, #116]	; (800231c <HAL_GPIO_Init+0x334>)
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022ac:	4b1b      	ldr	r3, [pc, #108]	; (800231c <HAL_GPIO_Init+0x334>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	43db      	mvns	r3, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4013      	ands	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d003      	beq.n	80022d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022d0:	4a12      	ldr	r2, [pc, #72]	; (800231c <HAL_GPIO_Init+0x334>)
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	3301      	adds	r3, #1
 80022da:	61fb      	str	r3, [r7, #28]
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	2b0f      	cmp	r3, #15
 80022e0:	f67f ae90 	bls.w	8002004 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022e4:	bf00      	nop
 80022e6:	bf00      	nop
 80022e8:	3724      	adds	r7, #36	; 0x24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	40023800 	.word	0x40023800
 80022f8:	40013800 	.word	0x40013800
 80022fc:	40020000 	.word	0x40020000
 8002300:	40020400 	.word	0x40020400
 8002304:	40020800 	.word	0x40020800
 8002308:	40020c00 	.word	0x40020c00
 800230c:	40021000 	.word	0x40021000
 8002310:	40021400 	.word	0x40021400
 8002314:	40021800 	.word	0x40021800
 8002318:	40021c00 	.word	0x40021c00
 800231c:	40013c00 	.word	0x40013c00

08002320 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e264      	b.n	80027fc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b00      	cmp	r3, #0
 800233c:	d075      	beq.n	800242a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800233e:	4ba3      	ldr	r3, [pc, #652]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 030c 	and.w	r3, r3, #12
 8002346:	2b04      	cmp	r3, #4
 8002348:	d00c      	beq.n	8002364 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800234a:	4ba0      	ldr	r3, [pc, #640]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002352:	2b08      	cmp	r3, #8
 8002354:	d112      	bne.n	800237c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002356:	4b9d      	ldr	r3, [pc, #628]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800235e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002362:	d10b      	bne.n	800237c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002364:	4b99      	ldr	r3, [pc, #612]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d05b      	beq.n	8002428 <HAL_RCC_OscConfig+0x108>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d157      	bne.n	8002428 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e23f      	b.n	80027fc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002384:	d106      	bne.n	8002394 <HAL_RCC_OscConfig+0x74>
 8002386:	4b91      	ldr	r3, [pc, #580]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a90      	ldr	r2, [pc, #576]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 800238c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002390:	6013      	str	r3, [r2, #0]
 8002392:	e01d      	b.n	80023d0 <HAL_RCC_OscConfig+0xb0>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800239c:	d10c      	bne.n	80023b8 <HAL_RCC_OscConfig+0x98>
 800239e:	4b8b      	ldr	r3, [pc, #556]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a8a      	ldr	r2, [pc, #552]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 80023a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	4b88      	ldr	r3, [pc, #544]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a87      	ldr	r2, [pc, #540]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 80023b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b4:	6013      	str	r3, [r2, #0]
 80023b6:	e00b      	b.n	80023d0 <HAL_RCC_OscConfig+0xb0>
 80023b8:	4b84      	ldr	r3, [pc, #528]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a83      	ldr	r2, [pc, #524]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 80023be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023c2:	6013      	str	r3, [r2, #0]
 80023c4:	4b81      	ldr	r3, [pc, #516]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a80      	ldr	r2, [pc, #512]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 80023ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d013      	beq.n	8002400 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d8:	f7fe fbca 	bl	8000b70 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023e0:	f7fe fbc6 	bl	8000b70 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b64      	cmp	r3, #100	; 0x64
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e204      	b.n	80027fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f2:	4b76      	ldr	r3, [pc, #472]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0f0      	beq.n	80023e0 <HAL_RCC_OscConfig+0xc0>
 80023fe:	e014      	b.n	800242a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002400:	f7fe fbb6 	bl	8000b70 <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002408:	f7fe fbb2 	bl	8000b70 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b64      	cmp	r3, #100	; 0x64
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e1f0      	b.n	80027fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241a:	4b6c      	ldr	r3, [pc, #432]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1f0      	bne.n	8002408 <HAL_RCC_OscConfig+0xe8>
 8002426:	e000      	b.n	800242a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d063      	beq.n	80024fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002436:	4b65      	ldr	r3, [pc, #404]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 030c 	and.w	r3, r3, #12
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00b      	beq.n	800245a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002442:	4b62      	ldr	r3, [pc, #392]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800244a:	2b08      	cmp	r3, #8
 800244c:	d11c      	bne.n	8002488 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800244e:	4b5f      	ldr	r3, [pc, #380]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d116      	bne.n	8002488 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800245a:	4b5c      	ldr	r3, [pc, #368]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d005      	beq.n	8002472 <HAL_RCC_OscConfig+0x152>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d001      	beq.n	8002472 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e1c4      	b.n	80027fc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002472:	4b56      	ldr	r3, [pc, #344]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	4952      	ldr	r1, [pc, #328]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 8002482:	4313      	orrs	r3, r2
 8002484:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002486:	e03a      	b.n	80024fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d020      	beq.n	80024d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002490:	4b4f      	ldr	r3, [pc, #316]	; (80025d0 <HAL_RCC_OscConfig+0x2b0>)
 8002492:	2201      	movs	r2, #1
 8002494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002496:	f7fe fb6b 	bl	8000b70 <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800249e:	f7fe fb67 	bl	8000b70 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e1a5      	b.n	80027fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b0:	4b46      	ldr	r3, [pc, #280]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0f0      	beq.n	800249e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024bc:	4b43      	ldr	r3, [pc, #268]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	4940      	ldr	r1, [pc, #256]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	600b      	str	r3, [r1, #0]
 80024d0:	e015      	b.n	80024fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024d2:	4b3f      	ldr	r3, [pc, #252]	; (80025d0 <HAL_RCC_OscConfig+0x2b0>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d8:	f7fe fb4a 	bl	8000b70 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024e0:	f7fe fb46 	bl	8000b70 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e184      	b.n	80027fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f2:	4b36      	ldr	r3, [pc, #216]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1f0      	bne.n	80024e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	2b00      	cmp	r3, #0
 8002508:	d030      	beq.n	800256c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d016      	beq.n	8002540 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002512:	4b30      	ldr	r3, [pc, #192]	; (80025d4 <HAL_RCC_OscConfig+0x2b4>)
 8002514:	2201      	movs	r2, #1
 8002516:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002518:	f7fe fb2a 	bl	8000b70 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002520:	f7fe fb26 	bl	8000b70 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e164      	b.n	80027fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002532:	4b26      	ldr	r3, [pc, #152]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 8002534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d0f0      	beq.n	8002520 <HAL_RCC_OscConfig+0x200>
 800253e:	e015      	b.n	800256c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002540:	4b24      	ldr	r3, [pc, #144]	; (80025d4 <HAL_RCC_OscConfig+0x2b4>)
 8002542:	2200      	movs	r2, #0
 8002544:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002546:	f7fe fb13 	bl	8000b70 <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800254e:	f7fe fb0f 	bl	8000b70 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e14d      	b.n	80027fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002560:	4b1a      	ldr	r3, [pc, #104]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 8002562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1f0      	bne.n	800254e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 80a0 	beq.w	80026ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800257a:	2300      	movs	r3, #0
 800257c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800257e:	4b13      	ldr	r3, [pc, #76]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10f      	bne.n	80025aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	60bb      	str	r3, [r7, #8]
 800258e:	4b0f      	ldr	r3, [pc, #60]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	4a0e      	ldr	r2, [pc, #56]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 8002594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002598:	6413      	str	r3, [r2, #64]	; 0x40
 800259a:	4b0c      	ldr	r3, [pc, #48]	; (80025cc <HAL_RCC_OscConfig+0x2ac>)
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a2:	60bb      	str	r3, [r7, #8]
 80025a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025a6:	2301      	movs	r3, #1
 80025a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025aa:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <HAL_RCC_OscConfig+0x2b8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d121      	bne.n	80025fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025b6:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <HAL_RCC_OscConfig+0x2b8>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a07      	ldr	r2, [pc, #28]	; (80025d8 <HAL_RCC_OscConfig+0x2b8>)
 80025bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025c2:	f7fe fad5 	bl	8000b70 <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c8:	e011      	b.n	80025ee <HAL_RCC_OscConfig+0x2ce>
 80025ca:	bf00      	nop
 80025cc:	40023800 	.word	0x40023800
 80025d0:	42470000 	.word	0x42470000
 80025d4:	42470e80 	.word	0x42470e80
 80025d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025dc:	f7fe fac8 	bl	8000b70 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e106      	b.n	80027fc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ee:	4b85      	ldr	r3, [pc, #532]	; (8002804 <HAL_RCC_OscConfig+0x4e4>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0f0      	beq.n	80025dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d106      	bne.n	8002610 <HAL_RCC_OscConfig+0x2f0>
 8002602:	4b81      	ldr	r3, [pc, #516]	; (8002808 <HAL_RCC_OscConfig+0x4e8>)
 8002604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002606:	4a80      	ldr	r2, [pc, #512]	; (8002808 <HAL_RCC_OscConfig+0x4e8>)
 8002608:	f043 0301 	orr.w	r3, r3, #1
 800260c:	6713      	str	r3, [r2, #112]	; 0x70
 800260e:	e01c      	b.n	800264a <HAL_RCC_OscConfig+0x32a>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	2b05      	cmp	r3, #5
 8002616:	d10c      	bne.n	8002632 <HAL_RCC_OscConfig+0x312>
 8002618:	4b7b      	ldr	r3, [pc, #492]	; (8002808 <HAL_RCC_OscConfig+0x4e8>)
 800261a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261c:	4a7a      	ldr	r2, [pc, #488]	; (8002808 <HAL_RCC_OscConfig+0x4e8>)
 800261e:	f043 0304 	orr.w	r3, r3, #4
 8002622:	6713      	str	r3, [r2, #112]	; 0x70
 8002624:	4b78      	ldr	r3, [pc, #480]	; (8002808 <HAL_RCC_OscConfig+0x4e8>)
 8002626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002628:	4a77      	ldr	r2, [pc, #476]	; (8002808 <HAL_RCC_OscConfig+0x4e8>)
 800262a:	f043 0301 	orr.w	r3, r3, #1
 800262e:	6713      	str	r3, [r2, #112]	; 0x70
 8002630:	e00b      	b.n	800264a <HAL_RCC_OscConfig+0x32a>
 8002632:	4b75      	ldr	r3, [pc, #468]	; (8002808 <HAL_RCC_OscConfig+0x4e8>)
 8002634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002636:	4a74      	ldr	r2, [pc, #464]	; (8002808 <HAL_RCC_OscConfig+0x4e8>)
 8002638:	f023 0301 	bic.w	r3, r3, #1
 800263c:	6713      	str	r3, [r2, #112]	; 0x70
 800263e:	4b72      	ldr	r3, [pc, #456]	; (8002808 <HAL_RCC_OscConfig+0x4e8>)
 8002640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002642:	4a71      	ldr	r2, [pc, #452]	; (8002808 <HAL_RCC_OscConfig+0x4e8>)
 8002644:	f023 0304 	bic.w	r3, r3, #4
 8002648:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d015      	beq.n	800267e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002652:	f7fe fa8d 	bl	8000b70 <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002658:	e00a      	b.n	8002670 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800265a:	f7fe fa89 	bl	8000b70 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	f241 3288 	movw	r2, #5000	; 0x1388
 8002668:	4293      	cmp	r3, r2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e0c5      	b.n	80027fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002670:	4b65      	ldr	r3, [pc, #404]	; (8002808 <HAL_RCC_OscConfig+0x4e8>)
 8002672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d0ee      	beq.n	800265a <HAL_RCC_OscConfig+0x33a>
 800267c:	e014      	b.n	80026a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800267e:	f7fe fa77 	bl	8000b70 <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002684:	e00a      	b.n	800269c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002686:	f7fe fa73 	bl	8000b70 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	f241 3288 	movw	r2, #5000	; 0x1388
 8002694:	4293      	cmp	r3, r2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e0af      	b.n	80027fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800269c:	4b5a      	ldr	r3, [pc, #360]	; (8002808 <HAL_RCC_OscConfig+0x4e8>)
 800269e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1ee      	bne.n	8002686 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026a8:	7dfb      	ldrb	r3, [r7, #23]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d105      	bne.n	80026ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ae:	4b56      	ldr	r3, [pc, #344]	; (8002808 <HAL_RCC_OscConfig+0x4e8>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	4a55      	ldr	r2, [pc, #340]	; (8002808 <HAL_RCC_OscConfig+0x4e8>)
 80026b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f000 809b 	beq.w	80027fa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026c4:	4b50      	ldr	r3, [pc, #320]	; (8002808 <HAL_RCC_OscConfig+0x4e8>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 030c 	and.w	r3, r3, #12
 80026cc:	2b08      	cmp	r3, #8
 80026ce:	d05c      	beq.n	800278a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d141      	bne.n	800275c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d8:	4b4c      	ldr	r3, [pc, #304]	; (800280c <HAL_RCC_OscConfig+0x4ec>)
 80026da:	2200      	movs	r2, #0
 80026dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026de:	f7fe fa47 	bl	8000b70 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026e6:	f7fe fa43 	bl	8000b70 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e081      	b.n	80027fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026f8:	4b43      	ldr	r3, [pc, #268]	; (8002808 <HAL_RCC_OscConfig+0x4e8>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1f0      	bne.n	80026e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	69da      	ldr	r2, [r3, #28]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	431a      	orrs	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002712:	019b      	lsls	r3, r3, #6
 8002714:	431a      	orrs	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271a:	085b      	lsrs	r3, r3, #1
 800271c:	3b01      	subs	r3, #1
 800271e:	041b      	lsls	r3, r3, #16
 8002720:	431a      	orrs	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002726:	061b      	lsls	r3, r3, #24
 8002728:	4937      	ldr	r1, [pc, #220]	; (8002808 <HAL_RCC_OscConfig+0x4e8>)
 800272a:	4313      	orrs	r3, r2
 800272c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800272e:	4b37      	ldr	r3, [pc, #220]	; (800280c <HAL_RCC_OscConfig+0x4ec>)
 8002730:	2201      	movs	r2, #1
 8002732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002734:	f7fe fa1c 	bl	8000b70 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800273c:	f7fe fa18 	bl	8000b70 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e056      	b.n	80027fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800274e:	4b2e      	ldr	r3, [pc, #184]	; (8002808 <HAL_RCC_OscConfig+0x4e8>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0f0      	beq.n	800273c <HAL_RCC_OscConfig+0x41c>
 800275a:	e04e      	b.n	80027fa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800275c:	4b2b      	ldr	r3, [pc, #172]	; (800280c <HAL_RCC_OscConfig+0x4ec>)
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002762:	f7fe fa05 	bl	8000b70 <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002768:	e008      	b.n	800277c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800276a:	f7fe fa01 	bl	8000b70 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e03f      	b.n	80027fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277c:	4b22      	ldr	r3, [pc, #136]	; (8002808 <HAL_RCC_OscConfig+0x4e8>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1f0      	bne.n	800276a <HAL_RCC_OscConfig+0x44a>
 8002788:	e037      	b.n	80027fa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d101      	bne.n	8002796 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e032      	b.n	80027fc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002796:	4b1c      	ldr	r3, [pc, #112]	; (8002808 <HAL_RCC_OscConfig+0x4e8>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d028      	beq.n	80027f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d121      	bne.n	80027f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027bc:	429a      	cmp	r2, r3
 80027be:	d11a      	bne.n	80027f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027c6:	4013      	ands	r3, r2
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027cc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d111      	bne.n	80027f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027dc:	085b      	lsrs	r3, r3, #1
 80027de:	3b01      	subs	r3, #1
 80027e0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d107      	bne.n	80027f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d001      	beq.n	80027fa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40007000 	.word	0x40007000
 8002808:	40023800 	.word	0x40023800
 800280c:	42470060 	.word	0x42470060

08002810 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e0cc      	b.n	80029be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002824:	4b68      	ldr	r3, [pc, #416]	; (80029c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	429a      	cmp	r2, r3
 8002830:	d90c      	bls.n	800284c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002832:	4b65      	ldr	r3, [pc, #404]	; (80029c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800283a:	4b63      	ldr	r3, [pc, #396]	; (80029c8 <HAL_RCC_ClockConfig+0x1b8>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	429a      	cmp	r2, r3
 8002846:	d001      	beq.n	800284c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e0b8      	b.n	80029be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d020      	beq.n	800289a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b00      	cmp	r3, #0
 8002862:	d005      	beq.n	8002870 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002864:	4b59      	ldr	r3, [pc, #356]	; (80029cc <HAL_RCC_ClockConfig+0x1bc>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	4a58      	ldr	r2, [pc, #352]	; (80029cc <HAL_RCC_ClockConfig+0x1bc>)
 800286a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800286e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0308 	and.w	r3, r3, #8
 8002878:	2b00      	cmp	r3, #0
 800287a:	d005      	beq.n	8002888 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800287c:	4b53      	ldr	r3, [pc, #332]	; (80029cc <HAL_RCC_ClockConfig+0x1bc>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	4a52      	ldr	r2, [pc, #328]	; (80029cc <HAL_RCC_ClockConfig+0x1bc>)
 8002882:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002886:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002888:	4b50      	ldr	r3, [pc, #320]	; (80029cc <HAL_RCC_ClockConfig+0x1bc>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	494d      	ldr	r1, [pc, #308]	; (80029cc <HAL_RCC_ClockConfig+0x1bc>)
 8002896:	4313      	orrs	r3, r2
 8002898:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d044      	beq.n	8002930 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d107      	bne.n	80028be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ae:	4b47      	ldr	r3, [pc, #284]	; (80029cc <HAL_RCC_ClockConfig+0x1bc>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d119      	bne.n	80028ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e07f      	b.n	80029be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d003      	beq.n	80028ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ca:	2b03      	cmp	r3, #3
 80028cc:	d107      	bne.n	80028de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ce:	4b3f      	ldr	r3, [pc, #252]	; (80029cc <HAL_RCC_ClockConfig+0x1bc>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d109      	bne.n	80028ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e06f      	b.n	80029be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028de:	4b3b      	ldr	r3, [pc, #236]	; (80029cc <HAL_RCC_ClockConfig+0x1bc>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e067      	b.n	80029be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ee:	4b37      	ldr	r3, [pc, #220]	; (80029cc <HAL_RCC_ClockConfig+0x1bc>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f023 0203 	bic.w	r2, r3, #3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	4934      	ldr	r1, [pc, #208]	; (80029cc <HAL_RCC_ClockConfig+0x1bc>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002900:	f7fe f936 	bl	8000b70 <HAL_GetTick>
 8002904:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002906:	e00a      	b.n	800291e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002908:	f7fe f932 	bl	8000b70 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	f241 3288 	movw	r2, #5000	; 0x1388
 8002916:	4293      	cmp	r3, r2
 8002918:	d901      	bls.n	800291e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e04f      	b.n	80029be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291e:	4b2b      	ldr	r3, [pc, #172]	; (80029cc <HAL_RCC_ClockConfig+0x1bc>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 020c 	and.w	r2, r3, #12
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	429a      	cmp	r2, r3
 800292e:	d1eb      	bne.n	8002908 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002930:	4b25      	ldr	r3, [pc, #148]	; (80029c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	429a      	cmp	r2, r3
 800293c:	d20c      	bcs.n	8002958 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800293e:	4b22      	ldr	r3, [pc, #136]	; (80029c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	b2d2      	uxtb	r2, r2
 8002944:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002946:	4b20      	ldr	r3, [pc, #128]	; (80029c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	429a      	cmp	r2, r3
 8002952:	d001      	beq.n	8002958 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e032      	b.n	80029be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	2b00      	cmp	r3, #0
 8002962:	d008      	beq.n	8002976 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002964:	4b19      	ldr	r3, [pc, #100]	; (80029cc <HAL_RCC_ClockConfig+0x1bc>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	4916      	ldr	r1, [pc, #88]	; (80029cc <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	4313      	orrs	r3, r2
 8002974:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0308 	and.w	r3, r3, #8
 800297e:	2b00      	cmp	r3, #0
 8002980:	d009      	beq.n	8002996 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002982:	4b12      	ldr	r3, [pc, #72]	; (80029cc <HAL_RCC_ClockConfig+0x1bc>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	490e      	ldr	r1, [pc, #56]	; (80029cc <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	4313      	orrs	r3, r2
 8002994:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002996:	f000 f821 	bl	80029dc <HAL_RCC_GetSysClockFreq>
 800299a:	4602      	mov	r2, r0
 800299c:	4b0b      	ldr	r3, [pc, #44]	; (80029cc <HAL_RCC_ClockConfig+0x1bc>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	091b      	lsrs	r3, r3, #4
 80029a2:	f003 030f 	and.w	r3, r3, #15
 80029a6:	490a      	ldr	r1, [pc, #40]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 80029a8:	5ccb      	ldrb	r3, [r1, r3]
 80029aa:	fa22 f303 	lsr.w	r3, r2, r3
 80029ae:	4a09      	ldr	r2, [pc, #36]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 80029b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029b2:	4b09      	ldr	r3, [pc, #36]	; (80029d8 <HAL_RCC_ClockConfig+0x1c8>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fe f896 	bl	8000ae8 <HAL_InitTick>

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40023c00 	.word	0x40023c00
 80029cc:	40023800 	.word	0x40023800
 80029d0:	080133a4 	.word	0x080133a4
 80029d4:	20000010 	.word	0x20000010
 80029d8:	20000014 	.word	0x20000014

080029dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80029e0:	b084      	sub	sp, #16
 80029e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029e4:	2300      	movs	r3, #0
 80029e6:	607b      	str	r3, [r7, #4]
 80029e8:	2300      	movs	r3, #0
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	2300      	movs	r3, #0
 80029ee:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029f4:	4b67      	ldr	r3, [pc, #412]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 030c 	and.w	r3, r3, #12
 80029fc:	2b08      	cmp	r3, #8
 80029fe:	d00d      	beq.n	8002a1c <HAL_RCC_GetSysClockFreq+0x40>
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	f200 80bd 	bhi.w	8002b80 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d002      	beq.n	8002a10 <HAL_RCC_GetSysClockFreq+0x34>
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	d003      	beq.n	8002a16 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a0e:	e0b7      	b.n	8002b80 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a10:	4b61      	ldr	r3, [pc, #388]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002a12:	60bb      	str	r3, [r7, #8]
       break;
 8002a14:	e0b7      	b.n	8002b86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a16:	4b61      	ldr	r3, [pc, #388]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002a18:	60bb      	str	r3, [r7, #8]
      break;
 8002a1a:	e0b4      	b.n	8002b86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a1c:	4b5d      	ldr	r3, [pc, #372]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a24:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a26:	4b5b      	ldr	r3, [pc, #364]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d04d      	beq.n	8002ace <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a32:	4b58      	ldr	r3, [pc, #352]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	099b      	lsrs	r3, r3, #6
 8002a38:	461a      	mov	r2, r3
 8002a3a:	f04f 0300 	mov.w	r3, #0
 8002a3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a42:	f04f 0100 	mov.w	r1, #0
 8002a46:	ea02 0800 	and.w	r8, r2, r0
 8002a4a:	ea03 0901 	and.w	r9, r3, r1
 8002a4e:	4640      	mov	r0, r8
 8002a50:	4649      	mov	r1, r9
 8002a52:	f04f 0200 	mov.w	r2, #0
 8002a56:	f04f 0300 	mov.w	r3, #0
 8002a5a:	014b      	lsls	r3, r1, #5
 8002a5c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a60:	0142      	lsls	r2, r0, #5
 8002a62:	4610      	mov	r0, r2
 8002a64:	4619      	mov	r1, r3
 8002a66:	ebb0 0008 	subs.w	r0, r0, r8
 8002a6a:	eb61 0109 	sbc.w	r1, r1, r9
 8002a6e:	f04f 0200 	mov.w	r2, #0
 8002a72:	f04f 0300 	mov.w	r3, #0
 8002a76:	018b      	lsls	r3, r1, #6
 8002a78:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a7c:	0182      	lsls	r2, r0, #6
 8002a7e:	1a12      	subs	r2, r2, r0
 8002a80:	eb63 0301 	sbc.w	r3, r3, r1
 8002a84:	f04f 0000 	mov.w	r0, #0
 8002a88:	f04f 0100 	mov.w	r1, #0
 8002a8c:	00d9      	lsls	r1, r3, #3
 8002a8e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a92:	00d0      	lsls	r0, r2, #3
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	eb12 0208 	adds.w	r2, r2, r8
 8002a9c:	eb43 0309 	adc.w	r3, r3, r9
 8002aa0:	f04f 0000 	mov.w	r0, #0
 8002aa4:	f04f 0100 	mov.w	r1, #0
 8002aa8:	0259      	lsls	r1, r3, #9
 8002aaa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002aae:	0250      	lsls	r0, r2, #9
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	4610      	mov	r0, r2
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	461a      	mov	r2, r3
 8002abc:	f04f 0300 	mov.w	r3, #0
 8002ac0:	f7fd fbee 	bl	80002a0 <__aeabi_uldivmod>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4613      	mov	r3, r2
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	e04a      	b.n	8002b64 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ace:	4b31      	ldr	r3, [pc, #196]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	099b      	lsrs	r3, r3, #6
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	f04f 0300 	mov.w	r3, #0
 8002ada:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002ade:	f04f 0100 	mov.w	r1, #0
 8002ae2:	ea02 0400 	and.w	r4, r2, r0
 8002ae6:	ea03 0501 	and.w	r5, r3, r1
 8002aea:	4620      	mov	r0, r4
 8002aec:	4629      	mov	r1, r5
 8002aee:	f04f 0200 	mov.w	r2, #0
 8002af2:	f04f 0300 	mov.w	r3, #0
 8002af6:	014b      	lsls	r3, r1, #5
 8002af8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002afc:	0142      	lsls	r2, r0, #5
 8002afe:	4610      	mov	r0, r2
 8002b00:	4619      	mov	r1, r3
 8002b02:	1b00      	subs	r0, r0, r4
 8002b04:	eb61 0105 	sbc.w	r1, r1, r5
 8002b08:	f04f 0200 	mov.w	r2, #0
 8002b0c:	f04f 0300 	mov.w	r3, #0
 8002b10:	018b      	lsls	r3, r1, #6
 8002b12:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b16:	0182      	lsls	r2, r0, #6
 8002b18:	1a12      	subs	r2, r2, r0
 8002b1a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b1e:	f04f 0000 	mov.w	r0, #0
 8002b22:	f04f 0100 	mov.w	r1, #0
 8002b26:	00d9      	lsls	r1, r3, #3
 8002b28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b2c:	00d0      	lsls	r0, r2, #3
 8002b2e:	4602      	mov	r2, r0
 8002b30:	460b      	mov	r3, r1
 8002b32:	1912      	adds	r2, r2, r4
 8002b34:	eb45 0303 	adc.w	r3, r5, r3
 8002b38:	f04f 0000 	mov.w	r0, #0
 8002b3c:	f04f 0100 	mov.w	r1, #0
 8002b40:	0299      	lsls	r1, r3, #10
 8002b42:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002b46:	0290      	lsls	r0, r2, #10
 8002b48:	4602      	mov	r2, r0
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	4610      	mov	r0, r2
 8002b4e:	4619      	mov	r1, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	461a      	mov	r2, r3
 8002b54:	f04f 0300 	mov.w	r3, #0
 8002b58:	f7fd fba2 	bl	80002a0 <__aeabi_uldivmod>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	4613      	mov	r3, r2
 8002b62:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b64:	4b0b      	ldr	r3, [pc, #44]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	0c1b      	lsrs	r3, r3, #16
 8002b6a:	f003 0303 	and.w	r3, r3, #3
 8002b6e:	3301      	adds	r3, #1
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b7c:	60bb      	str	r3, [r7, #8]
      break;
 8002b7e:	e002      	b.n	8002b86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b80:	4b05      	ldr	r3, [pc, #20]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002b82:	60bb      	str	r3, [r7, #8]
      break;
 8002b84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b86:	68bb      	ldr	r3, [r7, #8]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b92:	bf00      	nop
 8002b94:	40023800 	.word	0x40023800
 8002b98:	00f42400 	.word	0x00f42400
 8002b9c:	007a1200 	.word	0x007a1200

08002ba0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ba4:	4b03      	ldr	r3, [pc, #12]	; (8002bb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	20000010 	.word	0x20000010

08002bb8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8002bbe:	4b8d      	ldr	r3, [pc, #564]	; (8002df4 <MX_LWIP_Init+0x23c>)
 8002bc0:	22c0      	movs	r2, #192	; 0xc0
 8002bc2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8002bc4:	4b8b      	ldr	r3, [pc, #556]	; (8002df4 <MX_LWIP_Init+0x23c>)
 8002bc6:	22a8      	movs	r2, #168	; 0xa8
 8002bc8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 18;
 8002bca:	4b8a      	ldr	r3, [pc, #552]	; (8002df4 <MX_LWIP_Init+0x23c>)
 8002bcc:	2212      	movs	r2, #18
 8002bce:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 118;
 8002bd0:	4b88      	ldr	r3, [pc, #544]	; (8002df4 <MX_LWIP_Init+0x23c>)
 8002bd2:	2276      	movs	r2, #118	; 0x76
 8002bd4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8002bd6:	4b88      	ldr	r3, [pc, #544]	; (8002df8 <MX_LWIP_Init+0x240>)
 8002bd8:	22ff      	movs	r2, #255	; 0xff
 8002bda:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8002bdc:	4b86      	ldr	r3, [pc, #536]	; (8002df8 <MX_LWIP_Init+0x240>)
 8002bde:	22ff      	movs	r2, #255	; 0xff
 8002be0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8002be2:	4b85      	ldr	r3, [pc, #532]	; (8002df8 <MX_LWIP_Init+0x240>)
 8002be4:	22ff      	movs	r2, #255	; 0xff
 8002be6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8002be8:	4b83      	ldr	r3, [pc, #524]	; (8002df8 <MX_LWIP_Init+0x240>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8002bee:	4b83      	ldr	r3, [pc, #524]	; (8002dfc <MX_LWIP_Init+0x244>)
 8002bf0:	22c0      	movs	r2, #192	; 0xc0
 8002bf2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8002bf4:	4b81      	ldr	r3, [pc, #516]	; (8002dfc <MX_LWIP_Init+0x244>)
 8002bf6:	22a8      	movs	r2, #168	; 0xa8
 8002bf8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 18;
 8002bfa:	4b80      	ldr	r3, [pc, #512]	; (8002dfc <MX_LWIP_Init+0x244>)
 8002bfc:	2212      	movs	r2, #18
 8002bfe:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8002c00:	4b7e      	ldr	r3, [pc, #504]	; (8002dfc <MX_LWIP_Init+0x244>)
 8002c02:	2201      	movs	r2, #1
 8002c04:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8002c06:	f001 ffdf 	bl	8004bc8 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8002c0a:	4b7a      	ldr	r3, [pc, #488]	; (8002df4 <MX_LWIP_Init+0x23c>)
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	061a      	lsls	r2, r3, #24
 8002c10:	4b78      	ldr	r3, [pc, #480]	; (8002df4 <MX_LWIP_Init+0x23c>)
 8002c12:	785b      	ldrb	r3, [r3, #1]
 8002c14:	041b      	lsls	r3, r3, #16
 8002c16:	431a      	orrs	r2, r3
 8002c18:	4b76      	ldr	r3, [pc, #472]	; (8002df4 <MX_LWIP_Init+0x23c>)
 8002c1a:	789b      	ldrb	r3, [r3, #2]
 8002c1c:	021b      	lsls	r3, r3, #8
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	4a74      	ldr	r2, [pc, #464]	; (8002df4 <MX_LWIP_Init+0x23c>)
 8002c22:	78d2      	ldrb	r2, [r2, #3]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	061a      	lsls	r2, r3, #24
 8002c28:	4b72      	ldr	r3, [pc, #456]	; (8002df4 <MX_LWIP_Init+0x23c>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	0619      	lsls	r1, r3, #24
 8002c2e:	4b71      	ldr	r3, [pc, #452]	; (8002df4 <MX_LWIP_Init+0x23c>)
 8002c30:	785b      	ldrb	r3, [r3, #1]
 8002c32:	041b      	lsls	r3, r3, #16
 8002c34:	4319      	orrs	r1, r3
 8002c36:	4b6f      	ldr	r3, [pc, #444]	; (8002df4 <MX_LWIP_Init+0x23c>)
 8002c38:	789b      	ldrb	r3, [r3, #2]
 8002c3a:	021b      	lsls	r3, r3, #8
 8002c3c:	430b      	orrs	r3, r1
 8002c3e:	496d      	ldr	r1, [pc, #436]	; (8002df4 <MX_LWIP_Init+0x23c>)
 8002c40:	78c9      	ldrb	r1, [r1, #3]
 8002c42:	430b      	orrs	r3, r1
 8002c44:	021b      	lsls	r3, r3, #8
 8002c46:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	4b69      	ldr	r3, [pc, #420]	; (8002df4 <MX_LWIP_Init+0x23c>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	0619      	lsls	r1, r3, #24
 8002c52:	4b68      	ldr	r3, [pc, #416]	; (8002df4 <MX_LWIP_Init+0x23c>)
 8002c54:	785b      	ldrb	r3, [r3, #1]
 8002c56:	041b      	lsls	r3, r3, #16
 8002c58:	4319      	orrs	r1, r3
 8002c5a:	4b66      	ldr	r3, [pc, #408]	; (8002df4 <MX_LWIP_Init+0x23c>)
 8002c5c:	789b      	ldrb	r3, [r3, #2]
 8002c5e:	021b      	lsls	r3, r3, #8
 8002c60:	430b      	orrs	r3, r1
 8002c62:	4964      	ldr	r1, [pc, #400]	; (8002df4 <MX_LWIP_Init+0x23c>)
 8002c64:	78c9      	ldrb	r1, [r1, #3]
 8002c66:	430b      	orrs	r3, r1
 8002c68:	0a1b      	lsrs	r3, r3, #8
 8002c6a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	4b60      	ldr	r3, [pc, #384]	; (8002df4 <MX_LWIP_Init+0x23c>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	0619      	lsls	r1, r3, #24
 8002c76:	4b5f      	ldr	r3, [pc, #380]	; (8002df4 <MX_LWIP_Init+0x23c>)
 8002c78:	785b      	ldrb	r3, [r3, #1]
 8002c7a:	041b      	lsls	r3, r3, #16
 8002c7c:	4319      	orrs	r1, r3
 8002c7e:	4b5d      	ldr	r3, [pc, #372]	; (8002df4 <MX_LWIP_Init+0x23c>)
 8002c80:	789b      	ldrb	r3, [r3, #2]
 8002c82:	021b      	lsls	r3, r3, #8
 8002c84:	430b      	orrs	r3, r1
 8002c86:	495b      	ldr	r1, [pc, #364]	; (8002df4 <MX_LWIP_Init+0x23c>)
 8002c88:	78c9      	ldrb	r1, [r1, #3]
 8002c8a:	430b      	orrs	r3, r1
 8002c8c:	0e1b      	lsrs	r3, r3, #24
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	4a5b      	ldr	r2, [pc, #364]	; (8002e00 <MX_LWIP_Init+0x248>)
 8002c92:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8002c94:	4b58      	ldr	r3, [pc, #352]	; (8002df8 <MX_LWIP_Init+0x240>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	061a      	lsls	r2, r3, #24
 8002c9a:	4b57      	ldr	r3, [pc, #348]	; (8002df8 <MX_LWIP_Init+0x240>)
 8002c9c:	785b      	ldrb	r3, [r3, #1]
 8002c9e:	041b      	lsls	r3, r3, #16
 8002ca0:	431a      	orrs	r2, r3
 8002ca2:	4b55      	ldr	r3, [pc, #340]	; (8002df8 <MX_LWIP_Init+0x240>)
 8002ca4:	789b      	ldrb	r3, [r3, #2]
 8002ca6:	021b      	lsls	r3, r3, #8
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	4a53      	ldr	r2, [pc, #332]	; (8002df8 <MX_LWIP_Init+0x240>)
 8002cac:	78d2      	ldrb	r2, [r2, #3]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	061a      	lsls	r2, r3, #24
 8002cb2:	4b51      	ldr	r3, [pc, #324]	; (8002df8 <MX_LWIP_Init+0x240>)
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	0619      	lsls	r1, r3, #24
 8002cb8:	4b4f      	ldr	r3, [pc, #316]	; (8002df8 <MX_LWIP_Init+0x240>)
 8002cba:	785b      	ldrb	r3, [r3, #1]
 8002cbc:	041b      	lsls	r3, r3, #16
 8002cbe:	4319      	orrs	r1, r3
 8002cc0:	4b4d      	ldr	r3, [pc, #308]	; (8002df8 <MX_LWIP_Init+0x240>)
 8002cc2:	789b      	ldrb	r3, [r3, #2]
 8002cc4:	021b      	lsls	r3, r3, #8
 8002cc6:	430b      	orrs	r3, r1
 8002cc8:	494b      	ldr	r1, [pc, #300]	; (8002df8 <MX_LWIP_Init+0x240>)
 8002cca:	78c9      	ldrb	r1, [r1, #3]
 8002ccc:	430b      	orrs	r3, r1
 8002cce:	021b      	lsls	r3, r3, #8
 8002cd0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	4b48      	ldr	r3, [pc, #288]	; (8002df8 <MX_LWIP_Init+0x240>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	0619      	lsls	r1, r3, #24
 8002cdc:	4b46      	ldr	r3, [pc, #280]	; (8002df8 <MX_LWIP_Init+0x240>)
 8002cde:	785b      	ldrb	r3, [r3, #1]
 8002ce0:	041b      	lsls	r3, r3, #16
 8002ce2:	4319      	orrs	r1, r3
 8002ce4:	4b44      	ldr	r3, [pc, #272]	; (8002df8 <MX_LWIP_Init+0x240>)
 8002ce6:	789b      	ldrb	r3, [r3, #2]
 8002ce8:	021b      	lsls	r3, r3, #8
 8002cea:	430b      	orrs	r3, r1
 8002cec:	4942      	ldr	r1, [pc, #264]	; (8002df8 <MX_LWIP_Init+0x240>)
 8002cee:	78c9      	ldrb	r1, [r1, #3]
 8002cf0:	430b      	orrs	r3, r1
 8002cf2:	0a1b      	lsrs	r3, r3, #8
 8002cf4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	4b3f      	ldr	r3, [pc, #252]	; (8002df8 <MX_LWIP_Init+0x240>)
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	0619      	lsls	r1, r3, #24
 8002d00:	4b3d      	ldr	r3, [pc, #244]	; (8002df8 <MX_LWIP_Init+0x240>)
 8002d02:	785b      	ldrb	r3, [r3, #1]
 8002d04:	041b      	lsls	r3, r3, #16
 8002d06:	4319      	orrs	r1, r3
 8002d08:	4b3b      	ldr	r3, [pc, #236]	; (8002df8 <MX_LWIP_Init+0x240>)
 8002d0a:	789b      	ldrb	r3, [r3, #2]
 8002d0c:	021b      	lsls	r3, r3, #8
 8002d0e:	430b      	orrs	r3, r1
 8002d10:	4939      	ldr	r1, [pc, #228]	; (8002df8 <MX_LWIP_Init+0x240>)
 8002d12:	78c9      	ldrb	r1, [r1, #3]
 8002d14:	430b      	orrs	r3, r1
 8002d16:	0e1b      	lsrs	r3, r3, #24
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	4a3a      	ldr	r2, [pc, #232]	; (8002e04 <MX_LWIP_Init+0x24c>)
 8002d1c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8002d1e:	4b37      	ldr	r3, [pc, #220]	; (8002dfc <MX_LWIP_Init+0x244>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	061a      	lsls	r2, r3, #24
 8002d24:	4b35      	ldr	r3, [pc, #212]	; (8002dfc <MX_LWIP_Init+0x244>)
 8002d26:	785b      	ldrb	r3, [r3, #1]
 8002d28:	041b      	lsls	r3, r3, #16
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	4b33      	ldr	r3, [pc, #204]	; (8002dfc <MX_LWIP_Init+0x244>)
 8002d2e:	789b      	ldrb	r3, [r3, #2]
 8002d30:	021b      	lsls	r3, r3, #8
 8002d32:	4313      	orrs	r3, r2
 8002d34:	4a31      	ldr	r2, [pc, #196]	; (8002dfc <MX_LWIP_Init+0x244>)
 8002d36:	78d2      	ldrb	r2, [r2, #3]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	061a      	lsls	r2, r3, #24
 8002d3c:	4b2f      	ldr	r3, [pc, #188]	; (8002dfc <MX_LWIP_Init+0x244>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	0619      	lsls	r1, r3, #24
 8002d42:	4b2e      	ldr	r3, [pc, #184]	; (8002dfc <MX_LWIP_Init+0x244>)
 8002d44:	785b      	ldrb	r3, [r3, #1]
 8002d46:	041b      	lsls	r3, r3, #16
 8002d48:	4319      	orrs	r1, r3
 8002d4a:	4b2c      	ldr	r3, [pc, #176]	; (8002dfc <MX_LWIP_Init+0x244>)
 8002d4c:	789b      	ldrb	r3, [r3, #2]
 8002d4e:	021b      	lsls	r3, r3, #8
 8002d50:	430b      	orrs	r3, r1
 8002d52:	492a      	ldr	r1, [pc, #168]	; (8002dfc <MX_LWIP_Init+0x244>)
 8002d54:	78c9      	ldrb	r1, [r1, #3]
 8002d56:	430b      	orrs	r3, r1
 8002d58:	021b      	lsls	r3, r3, #8
 8002d5a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	4b26      	ldr	r3, [pc, #152]	; (8002dfc <MX_LWIP_Init+0x244>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	0619      	lsls	r1, r3, #24
 8002d66:	4b25      	ldr	r3, [pc, #148]	; (8002dfc <MX_LWIP_Init+0x244>)
 8002d68:	785b      	ldrb	r3, [r3, #1]
 8002d6a:	041b      	lsls	r3, r3, #16
 8002d6c:	4319      	orrs	r1, r3
 8002d6e:	4b23      	ldr	r3, [pc, #140]	; (8002dfc <MX_LWIP_Init+0x244>)
 8002d70:	789b      	ldrb	r3, [r3, #2]
 8002d72:	021b      	lsls	r3, r3, #8
 8002d74:	430b      	orrs	r3, r1
 8002d76:	4921      	ldr	r1, [pc, #132]	; (8002dfc <MX_LWIP_Init+0x244>)
 8002d78:	78c9      	ldrb	r1, [r1, #3]
 8002d7a:	430b      	orrs	r3, r1
 8002d7c:	0a1b      	lsrs	r3, r3, #8
 8002d7e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002d82:	431a      	orrs	r2, r3
 8002d84:	4b1d      	ldr	r3, [pc, #116]	; (8002dfc <MX_LWIP_Init+0x244>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	0619      	lsls	r1, r3, #24
 8002d8a:	4b1c      	ldr	r3, [pc, #112]	; (8002dfc <MX_LWIP_Init+0x244>)
 8002d8c:	785b      	ldrb	r3, [r3, #1]
 8002d8e:	041b      	lsls	r3, r3, #16
 8002d90:	4319      	orrs	r1, r3
 8002d92:	4b1a      	ldr	r3, [pc, #104]	; (8002dfc <MX_LWIP_Init+0x244>)
 8002d94:	789b      	ldrb	r3, [r3, #2]
 8002d96:	021b      	lsls	r3, r3, #8
 8002d98:	430b      	orrs	r3, r1
 8002d9a:	4918      	ldr	r1, [pc, #96]	; (8002dfc <MX_LWIP_Init+0x244>)
 8002d9c:	78c9      	ldrb	r1, [r1, #3]
 8002d9e:	430b      	orrs	r3, r1
 8002da0:	0e1b      	lsrs	r3, r3, #24
 8002da2:	4313      	orrs	r3, r2
 8002da4:	4a18      	ldr	r2, [pc, #96]	; (8002e08 <MX_LWIP_Init+0x250>)
 8002da6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8002da8:	4b18      	ldr	r3, [pc, #96]	; (8002e0c <MX_LWIP_Init+0x254>)
 8002daa:	9302      	str	r3, [sp, #8]
 8002dac:	4b18      	ldr	r3, [pc, #96]	; (8002e10 <MX_LWIP_Init+0x258>)
 8002dae:	9301      	str	r3, [sp, #4]
 8002db0:	2300      	movs	r3, #0
 8002db2:	9300      	str	r3, [sp, #0]
 8002db4:	4b14      	ldr	r3, [pc, #80]	; (8002e08 <MX_LWIP_Init+0x250>)
 8002db6:	4a13      	ldr	r2, [pc, #76]	; (8002e04 <MX_LWIP_Init+0x24c>)
 8002db8:	4911      	ldr	r1, [pc, #68]	; (8002e00 <MX_LWIP_Init+0x248>)
 8002dba:	4816      	ldr	r0, [pc, #88]	; (8002e14 <MX_LWIP_Init+0x25c>)
 8002dbc:	f002 fbaa 	bl	8005514 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8002dc0:	4814      	ldr	r0, [pc, #80]	; (8002e14 <MX_LWIP_Init+0x25c>)
 8002dc2:	f002 fd59 	bl	8005878 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8002dc6:	4b13      	ldr	r3, [pc, #76]	; (8002e14 <MX_LWIP_Init+0x25c>)
 8002dc8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002dcc:	089b      	lsrs	r3, r3, #2
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d003      	beq.n	8002de0 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8002dd8:	480e      	ldr	r0, [pc, #56]	; (8002e14 <MX_LWIP_Init+0x25c>)
 8002dda:	f002 fd5d 	bl	8005898 <netif_set_up>
 8002dde:	e002      	b.n	8002de6 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8002de0:	480c      	ldr	r0, [pc, #48]	; (8002e14 <MX_LWIP_Init+0x25c>)
 8002de2:	f002 fdc5 	bl	8005970 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8002de6:	490c      	ldr	r1, [pc, #48]	; (8002e18 <MX_LWIP_Init+0x260>)
 8002de8:	480a      	ldr	r0, [pc, #40]	; (8002e14 <MX_LWIP_Init+0x25c>)
 8002dea:	f002 fdf3 	bl	80059d4 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8002dee:	bf00      	nop
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	200006b4 	.word	0x200006b4
 8002df8:	200006b0 	.word	0x200006b0
 8002dfc:	20000674 	.word	0x20000674
 8002e00:	200006ac 	.word	0x200006ac
 8002e04:	200006b8 	.word	0x200006b8
 8002e08:	200006bc 	.word	0x200006bc
 8002e0c:	0800f079 	.word	0x0800f079
 8002e10:	080033a9 	.word	0x080033a9
 8002e14:	20000678 	.word	0x20000678
 8002e18:	08003415 	.word	0x08003415

08002e1c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b08e      	sub	sp, #56	; 0x38
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	605a      	str	r2, [r3, #4]
 8002e2e:	609a      	str	r2, [r3, #8]
 8002e30:	60da      	str	r2, [r3, #12]
 8002e32:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a46      	ldr	r2, [pc, #280]	; (8002f54 <HAL_ETH_MspInit+0x138>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	f040 8085 	bne.w	8002f4a <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002e40:	2300      	movs	r3, #0
 8002e42:	623b      	str	r3, [r7, #32]
 8002e44:	4b44      	ldr	r3, [pc, #272]	; (8002f58 <HAL_ETH_MspInit+0x13c>)
 8002e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e48:	4a43      	ldr	r2, [pc, #268]	; (8002f58 <HAL_ETH_MspInit+0x13c>)
 8002e4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e4e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e50:	4b41      	ldr	r3, [pc, #260]	; (8002f58 <HAL_ETH_MspInit+0x13c>)
 8002e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e58:	623b      	str	r3, [r7, #32]
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	61fb      	str	r3, [r7, #28]
 8002e60:	4b3d      	ldr	r3, [pc, #244]	; (8002f58 <HAL_ETH_MspInit+0x13c>)
 8002e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e64:	4a3c      	ldr	r2, [pc, #240]	; (8002f58 <HAL_ETH_MspInit+0x13c>)
 8002e66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e6a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e6c:	4b3a      	ldr	r3, [pc, #232]	; (8002f58 <HAL_ETH_MspInit+0x13c>)
 8002e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e74:	61fb      	str	r3, [r7, #28]
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	2300      	movs	r3, #0
 8002e7a:	61bb      	str	r3, [r7, #24]
 8002e7c:	4b36      	ldr	r3, [pc, #216]	; (8002f58 <HAL_ETH_MspInit+0x13c>)
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e80:	4a35      	ldr	r2, [pc, #212]	; (8002f58 <HAL_ETH_MspInit+0x13c>)
 8002e82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002e86:	6313      	str	r3, [r2, #48]	; 0x30
 8002e88:	4b33      	ldr	r3, [pc, #204]	; (8002f58 <HAL_ETH_MspInit+0x13c>)
 8002e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e90:	61bb      	str	r3, [r7, #24]
 8002e92:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e94:	2300      	movs	r3, #0
 8002e96:	617b      	str	r3, [r7, #20]
 8002e98:	4b2f      	ldr	r3, [pc, #188]	; (8002f58 <HAL_ETH_MspInit+0x13c>)
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9c:	4a2e      	ldr	r2, [pc, #184]	; (8002f58 <HAL_ETH_MspInit+0x13c>)
 8002e9e:	f043 0304 	orr.w	r3, r3, #4
 8002ea2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ea4:	4b2c      	ldr	r3, [pc, #176]	; (8002f58 <HAL_ETH_MspInit+0x13c>)
 8002ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	617b      	str	r3, [r7, #20]
 8002eae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	613b      	str	r3, [r7, #16]
 8002eb4:	4b28      	ldr	r3, [pc, #160]	; (8002f58 <HAL_ETH_MspInit+0x13c>)
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb8:	4a27      	ldr	r2, [pc, #156]	; (8002f58 <HAL_ETH_MspInit+0x13c>)
 8002eba:	f043 0301 	orr.w	r3, r3, #1
 8002ebe:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec0:	4b25      	ldr	r3, [pc, #148]	; (8002f58 <HAL_ETH_MspInit+0x13c>)
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	613b      	str	r3, [r7, #16]
 8002eca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ecc:	2300      	movs	r3, #0
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	4b21      	ldr	r3, [pc, #132]	; (8002f58 <HAL_ETH_MspInit+0x13c>)
 8002ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed4:	4a20      	ldr	r2, [pc, #128]	; (8002f58 <HAL_ETH_MspInit+0x13c>)
 8002ed6:	f043 0302 	orr.w	r3, r3, #2
 8002eda:	6313      	str	r3, [r2, #48]	; 0x30
 8002edc:	4b1e      	ldr	r3, [pc, #120]	; (8002f58 <HAL_ETH_MspInit+0x13c>)
 8002ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	60fb      	str	r3, [r7, #12]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002ee8:	2332      	movs	r3, #50	; 0x32
 8002eea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eec:	2302      	movs	r3, #2
 8002eee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002ef8:	230b      	movs	r3, #11
 8002efa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f00:	4619      	mov	r1, r3
 8002f02:	4816      	ldr	r0, [pc, #88]	; (8002f5c <HAL_ETH_MspInit+0x140>)
 8002f04:	f7ff f870 	bl	8001fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8002f08:	2386      	movs	r3, #134	; 0x86
 8002f0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f10:	2300      	movs	r3, #0
 8002f12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f14:	2303      	movs	r3, #3
 8002f16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002f18:	230b      	movs	r3, #11
 8002f1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f20:	4619      	mov	r1, r3
 8002f22:	480f      	ldr	r0, [pc, #60]	; (8002f60 <HAL_ETH_MspInit+0x144>)
 8002f24:	f7ff f860 	bl	8001fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8002f28:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2e:	2302      	movs	r3, #2
 8002f30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f32:	2300      	movs	r3, #0
 8002f34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f36:	2303      	movs	r3, #3
 8002f38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002f3a:	230b      	movs	r3, #11
 8002f3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f42:	4619      	mov	r1, r3
 8002f44:	4807      	ldr	r0, [pc, #28]	; (8002f64 <HAL_ETH_MspInit+0x148>)
 8002f46:	f7ff f84f 	bl	8001fe8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8002f4a:	bf00      	nop
 8002f4c:	3738      	adds	r7, #56	; 0x38
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	40028000 	.word	0x40028000
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	40020800 	.word	0x40020800
 8002f60:	40020000 	.word	0x40020000
 8002f64:	40020400 	.word	0x40020400

08002f68 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8002f70:	2300      	movs	r3, #0
 8002f72:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8002f74:	4b4d      	ldr	r3, [pc, #308]	; (80030ac <low_level_init+0x144>)
 8002f76:	4a4e      	ldr	r2, [pc, #312]	; (80030b0 <low_level_init+0x148>)
 8002f78:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8002f7a:	4b4c      	ldr	r3, [pc, #304]	; (80030ac <low_level_init+0x144>)
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8002f80:	4b4a      	ldr	r3, [pc, #296]	; (80030ac <low_level_init+0x144>)
 8002f82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f86:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8002f88:	4b48      	ldr	r3, [pc, #288]	; (80030ac <low_level_init+0x144>)
 8002f8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f8e:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8002f90:	4b46      	ldr	r3, [pc, #280]	; (80030ac <low_level_init+0x144>)
 8002f92:	2201      	movs	r2, #1
 8002f94:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8002f96:	2300      	movs	r3, #0
 8002f98:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8002f9a:	2380      	movs	r3, #128	; 0x80
 8002f9c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8002f9e:	23e1      	movs	r3, #225	; 0xe1
 8002fa0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8002faa:	2300      	movs	r3, #0
 8002fac:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8002fae:	4a3f      	ldr	r2, [pc, #252]	; (80030ac <low_level_init+0x144>)
 8002fb0:	f107 0308 	add.w	r3, r7, #8
 8002fb4:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8002fb6:	4b3d      	ldr	r3, [pc, #244]	; (80030ac <low_level_init+0x144>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8002fbc:	4b3b      	ldr	r3, [pc, #236]	; (80030ac <low_level_init+0x144>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8002fc2:	4b3a      	ldr	r3, [pc, #232]	; (80030ac <low_level_init+0x144>)
 8002fc4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002fc8:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8002fca:	4838      	ldr	r0, [pc, #224]	; (80030ac <low_level_init+0x144>)
 8002fcc:	f7fd fee6 	bl	8000d9c <HAL_ETH_Init>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8002fd4:	7dfb      	ldrb	r3, [r7, #23]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d108      	bne.n	8002fec <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002fe0:	f043 0304 	orr.w	r3, r3, #4
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8002fec:	2304      	movs	r3, #4
 8002fee:	4a31      	ldr	r2, [pc, #196]	; (80030b4 <low_level_init+0x14c>)
 8002ff0:	4931      	ldr	r1, [pc, #196]	; (80030b8 <low_level_init+0x150>)
 8002ff2:	482e      	ldr	r0, [pc, #184]	; (80030ac <low_level_init+0x144>)
 8002ff4:	f7fe f86e 	bl	80010d4 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8002ff8:	2304      	movs	r3, #4
 8002ffa:	4a30      	ldr	r2, [pc, #192]	; (80030bc <low_level_init+0x154>)
 8002ffc:	4930      	ldr	r1, [pc, #192]	; (80030c0 <low_level_init+0x158>)
 8002ffe:	482b      	ldr	r0, [pc, #172]	; (80030ac <low_level_init+0x144>)
 8003000:	f7fe f8d1 	bl	80011a6 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2206      	movs	r2, #6
 8003008:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800300c:	4b27      	ldr	r3, [pc, #156]	; (80030ac <low_level_init+0x144>)
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	781a      	ldrb	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003018:	4b24      	ldr	r3, [pc, #144]	; (80030ac <low_level_init+0x144>)
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	785a      	ldrb	r2, [r3, #1]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003024:	4b21      	ldr	r3, [pc, #132]	; (80030ac <low_level_init+0x144>)
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	789a      	ldrb	r2, [r3, #2]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003030:	4b1e      	ldr	r3, [pc, #120]	; (80030ac <low_level_init+0x144>)
 8003032:	695b      	ldr	r3, [r3, #20]
 8003034:	78da      	ldrb	r2, [r3, #3]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800303c:	4b1b      	ldr	r3, [pc, #108]	; (80030ac <low_level_init+0x144>)
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	791a      	ldrb	r2, [r3, #4]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003048:	4b18      	ldr	r3, [pc, #96]	; (80030ac <low_level_init+0x144>)
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	795a      	ldrb	r2, [r3, #5]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800305a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003062:	f043 030a 	orr.w	r3, r3, #10
 8003066:	b2da      	uxtb	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800306e:	480f      	ldr	r0, [pc, #60]	; (80030ac <low_level_init+0x144>)
 8003070:	f7fe fb42 	bl	80016f8 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8003074:	f107 0310 	add.w	r3, r7, #16
 8003078:	461a      	mov	r2, r3
 800307a:	211d      	movs	r1, #29
 800307c:	480b      	ldr	r0, [pc, #44]	; (80030ac <low_level_init+0x144>)
 800307e:	f7fe fa6d 	bl	800155c <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	f043 030b 	orr.w	r3, r3, #11
 8003088:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	461a      	mov	r2, r3
 800308e:	211d      	movs	r1, #29
 8003090:	4806      	ldr	r0, [pc, #24]	; (80030ac <low_level_init+0x144>)
 8003092:	f7fe facb 	bl	800162c <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8003096:	f107 0310 	add.w	r3, r7, #16
 800309a:	461a      	mov	r2, r3
 800309c:	211d      	movs	r1, #29
 800309e:	4803      	ldr	r0, [pc, #12]	; (80030ac <low_level_init+0x144>)
 80030a0:	f7fe fa5c 	bl	800155c <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80030a4:	bf00      	nop
 80030a6:	3718      	adds	r7, #24
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	20001f90 	.word	0x20001f90
 80030b0:	40028000 	.word	0x40028000
 80030b4:	20001fd8 	.word	0x20001fd8
 80030b8:	200006c0 	.word	0x200006c0
 80030bc:	20000740 	.word	0x20000740
 80030c0:	20001f10 	.word	0x20001f10

080030c4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b08a      	sub	sp, #40	; 0x28
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80030ce:	4b4b      	ldr	r3, [pc, #300]	; (80031fc <low_level_output+0x138>)
 80030d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80030da:	2300      	movs	r3, #0
 80030dc:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80030de:	2300      	movs	r3, #0
 80030e0:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80030e2:	2300      	movs	r3, #0
 80030e4:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80030e6:	4b45      	ldr	r3, [pc, #276]	; (80031fc <low_level_output+0x138>)
 80030e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ea:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80030ec:	2300      	movs	r3, #0
 80030ee:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	623b      	str	r3, [r7, #32]
 80030f4:	e05a      	b.n	80031ac <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	da03      	bge.n	8003106 <low_level_output+0x42>
      {
        errval = ERR_USE;
 80030fe:	23f8      	movs	r3, #248	; 0xf8
 8003100:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8003104:	e05c      	b.n	80031c0 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8003106:	6a3b      	ldr	r3, [r7, #32]
 8003108:	895b      	ldrh	r3, [r3, #10]
 800310a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800310c:	2300      	movs	r3, #0
 800310e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003110:	e02f      	b.n	8003172 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8003112:	69fa      	ldr	r2, [r7, #28]
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	18d0      	adds	r0, r2, r3
 8003118:	6a3b      	ldr	r3, [r7, #32]
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	18d1      	adds	r1, r2, r3
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8003126:	3304      	adds	r3, #4
 8003128:	461a      	mov	r2, r3
 800312a:	f00c f8ad 	bl	800f288 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	da03      	bge.n	8003144 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800313c:	23f8      	movs	r3, #248	; 0xf8
 800313e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8003142:	e03d      	b.n	80031c0 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	4413      	add	r3, r2
 8003150:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003154:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003160:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800316c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800316e:	2300      	movs	r3, #0
 8003170:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	4413      	add	r3, r2
 8003178:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800317c:	4293      	cmp	r3, r2
 800317e:	d8c8      	bhi.n	8003112 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8003180:	69fa      	ldr	r2, [r7, #28]
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	18d0      	adds	r0, r2, r3
 8003186:	6a3b      	ldr	r3, [r7, #32]
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	4413      	add	r3, r2
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	4619      	mov	r1, r3
 8003192:	f00c f879 	bl	800f288 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	4413      	add	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800319e:	697a      	ldr	r2, [r7, #20]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	4413      	add	r3, r2
 80031a4:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	623b      	str	r3, [r7, #32]
 80031ac:	6a3b      	ldr	r3, [r7, #32]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1a1      	bne.n	80030f6 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80031b2:	6979      	ldr	r1, [r7, #20]
 80031b4:	4811      	ldr	r0, [pc, #68]	; (80031fc <low_level_output+0x138>)
 80031b6:	f7fe f863 	bl	8001280 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80031ba:	2300      	movs	r3, #0
 80031bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80031c0:	4b0e      	ldr	r3, [pc, #56]	; (80031fc <low_level_output+0x138>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031c8:	3314      	adds	r3, #20
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0320 	and.w	r3, r3, #32
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00d      	beq.n	80031f0 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80031d4:	4b09      	ldr	r3, [pc, #36]	; (80031fc <low_level_output+0x138>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031dc:	3314      	adds	r3, #20
 80031de:	2220      	movs	r2, #32
 80031e0:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80031e2:	4b06      	ldr	r3, [pc, #24]	; (80031fc <low_level_output+0x138>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031ea:	3304      	adds	r3, #4
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80031f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3728      	adds	r7, #40	; 0x28
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	20001f90 	.word	0x20001f90

08003200 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b08c      	sub	sp, #48	; 0x30
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003208:	2300      	movs	r3, #0
 800320a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800320c:	2300      	movs	r3, #0
 800320e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8003210:	2300      	movs	r3, #0
 8003212:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8003214:	2300      	movs	r3, #0
 8003216:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8003218:	2300      	movs	r3, #0
 800321a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800321c:	2300      	movs	r3, #0
 800321e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8003220:	2300      	movs	r3, #0
 8003222:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8003224:	484f      	ldr	r0, [pc, #316]	; (8003364 <low_level_input+0x164>)
 8003226:	f7fe f915 	bl	8001454 <HAL_ETH_GetReceivedFrame>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <low_level_input+0x34>

    return NULL;
 8003230:	2300      	movs	r3, #0
 8003232:	e092      	b.n	800335a <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8003234:	4b4b      	ldr	r3, [pc, #300]	; (8003364 <low_level_input+0x164>)
 8003236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003238:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800323a:	4b4a      	ldr	r3, [pc, #296]	; (8003364 <low_level_input+0x164>)
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8003240:	89fb      	ldrh	r3, [r7, #14]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d007      	beq.n	8003256 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8003246:	89fb      	ldrh	r3, [r7, #14]
 8003248:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800324c:	4619      	mov	r1, r3
 800324e:	2000      	movs	r0, #0
 8003250:	f002 fc5c 	bl	8005b0c <pbuf_alloc>
 8003254:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8003256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003258:	2b00      	cmp	r3, #0
 800325a:	d04b      	beq.n	80032f4 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800325c:	4b41      	ldr	r3, [pc, #260]	; (8003364 <low_level_input+0x164>)
 800325e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003260:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8003262:	2300      	movs	r3, #0
 8003264:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003268:	62bb      	str	r3, [r7, #40]	; 0x28
 800326a:	e040      	b.n	80032ee <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800326c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326e:	895b      	ldrh	r3, [r3, #10]
 8003270:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8003272:	2300      	movs	r3, #0
 8003274:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003276:	e021      	b.n	80032bc <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	18d0      	adds	r0, r2, r3
 8003280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	18d1      	adds	r1, r2, r3
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800328c:	3304      	adds	r3, #4
 800328e:	461a      	mov	r2, r3
 8003290:	f00b fffa 	bl	800f288 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003294:	6a3b      	ldr	r3, [r7, #32]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800329a:	6a3b      	ldr	r3, [r7, #32]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80032a0:	69fa      	ldr	r2, [r7, #28]
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	4413      	add	r3, r2
 80032a6:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80032aa:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80032b6:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80032b8:	2300      	movs	r3, #0
 80032ba:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	4413      	add	r3, r2
 80032c2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d8d6      	bhi.n	8003278 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80032ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	18d0      	adds	r0, r2, r3
 80032d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	4413      	add	r3, r2
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	4619      	mov	r1, r3
 80032dc:	f00b ffd4 	bl	800f288 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80032e0:	69fa      	ldr	r2, [r7, #28]
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	4413      	add	r3, r2
 80032e6:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80032e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80032ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1bb      	bne.n	800326c <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80032f4:	4b1b      	ldr	r3, [pc, #108]	; (8003364 <low_level_input+0x164>)
 80032f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f8:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80032fa:	2300      	movs	r3, #0
 80032fc:	613b      	str	r3, [r7, #16]
 80032fe:	e00b      	b.n	8003318 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8003300:	6a3b      	ldr	r3, [r7, #32]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800330c:	6a3b      	ldr	r3, [r7, #32]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	3301      	adds	r3, #1
 8003316:	613b      	str	r3, [r7, #16]
 8003318:	4b12      	ldr	r3, [pc, #72]	; (8003364 <low_level_input+0x164>)
 800331a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	429a      	cmp	r2, r3
 8003320:	d3ee      	bcc.n	8003300 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8003322:	4b10      	ldr	r3, [pc, #64]	; (8003364 <low_level_input+0x164>)
 8003324:	2200      	movs	r2, #0
 8003326:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8003328:	4b0e      	ldr	r3, [pc, #56]	; (8003364 <low_level_input+0x164>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003330:	3314      	adds	r3, #20
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00d      	beq.n	8003358 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800333c:	4b09      	ldr	r3, [pc, #36]	; (8003364 <low_level_input+0x164>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003344:	3314      	adds	r3, #20
 8003346:	2280      	movs	r2, #128	; 0x80
 8003348:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800334a:	4b06      	ldr	r3, [pc, #24]	; (8003364 <low_level_input+0x164>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003352:	3308      	adds	r3, #8
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]
  }
  return p;
 8003358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800335a:	4618      	mov	r0, r3
 800335c:	3730      	adds	r7, #48	; 0x30
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	20001f90 	.word	0x20001f90

08003368 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f7ff ff45 	bl	8003200 <low_level_input>
 8003376:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d010      	beq.n	80033a0 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	6879      	ldr	r1, [r7, #4]
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	4798      	blx	r3
 8003388:	4603      	mov	r3, r0
 800338a:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 800338c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d006      	beq.n	80033a2 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	f002 fe9d 	bl	80060d4 <pbuf_free>
    p = NULL;
 800339a:	2300      	movs	r3, #0
 800339c:	60fb      	str	r3, [r7, #12]
 800339e:	e000      	b.n	80033a2 <ethernetif_input+0x3a>
  if (p == NULL) return;
 80033a0:	bf00      	nop
  }
}
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d106      	bne.n	80033c4 <ethernetif_init+0x1c>
 80033b6:	4b0e      	ldr	r3, [pc, #56]	; (80033f0 <ethernetif_init+0x48>)
 80033b8:	f44f 7202 	mov.w	r2, #520	; 0x208
 80033bc:	490d      	ldr	r1, [pc, #52]	; (80033f4 <ethernetif_init+0x4c>)
 80033be:	480e      	ldr	r0, [pc, #56]	; (80033f8 <ethernetif_init+0x50>)
 80033c0:	f00b ff92 	bl	800f2e8 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2273      	movs	r2, #115	; 0x73
 80033c8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2274      	movs	r2, #116	; 0x74
 80033d0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a09      	ldr	r2, [pc, #36]	; (80033fc <ethernetif_init+0x54>)
 80033d8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a08      	ldr	r2, [pc, #32]	; (8003400 <ethernetif_init+0x58>)
 80033de:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f7ff fdc1 	bl	8002f68 <low_level_init>

  return ERR_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	080106d8 	.word	0x080106d8
 80033f4:	080106f4 	.word	0x080106f4
 80033f8:	08010704 	.word	0x08010704
 80033fc:	0800d53d 	.word	0x0800d53d
 8003400:	080030c5 	.word	0x080030c5

08003404 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003408:	f7fd fbb2 	bl	8000b70 <HAL_GetTick>
 800340c:	4603      	mov	r3, r0
}
 800340e:	4618      	mov	r0, r3
 8003410:	bd80      	pop	{r7, pc}
	...

08003414 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800341c:	2300      	movs	r3, #0
 800341e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8003420:	2300      	movs	r3, #0
 8003422:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800342a:	089b      	lsrs	r3, r3, #2
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d05d      	beq.n	80034f2 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003436:	4b34      	ldr	r3, [pc, #208]	; (8003508 <ethernetif_update_config+0xf4>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d03f      	beq.n	80034be <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800343e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003442:	2100      	movs	r1, #0
 8003444:	4830      	ldr	r0, [pc, #192]	; (8003508 <ethernetif_update_config+0xf4>)
 8003446:	f7fe f8f1 	bl	800162c <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800344a:	f7fd fb91 	bl	8000b70 <HAL_GetTick>
 800344e:	4603      	mov	r3, r0
 8003450:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003452:	f107 0308 	add.w	r3, r7, #8
 8003456:	461a      	mov	r2, r3
 8003458:	2101      	movs	r1, #1
 800345a:	482b      	ldr	r0, [pc, #172]	; (8003508 <ethernetif_update_config+0xf4>)
 800345c:	f7fe f87e 	bl	800155c <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8003460:	f7fd fb86 	bl	8000b70 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800346e:	d828      	bhi.n	80034c2 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	f003 0320 	and.w	r3, r3, #32
 8003476:	2b00      	cmp	r3, #0
 8003478:	d0eb      	beq.n	8003452 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800347a:	f107 0308 	add.w	r3, r7, #8
 800347e:	461a      	mov	r2, r3
 8003480:	2110      	movs	r1, #16
 8003482:	4821      	ldr	r0, [pc, #132]	; (8003508 <ethernetif_update_config+0xf4>)
 8003484:	f7fe f86a 	bl	800155c <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	f003 0304 	and.w	r3, r3, #4
 800348e:	2b00      	cmp	r3, #0
 8003490:	d004      	beq.n	800349c <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003492:	4b1d      	ldr	r3, [pc, #116]	; (8003508 <ethernetif_update_config+0xf4>)
 8003494:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003498:	60da      	str	r2, [r3, #12]
 800349a:	e002      	b.n	80034a2 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800349c:	4b1a      	ldr	r3, [pc, #104]	; (8003508 <ethernetif_update_config+0xf4>)
 800349e:	2200      	movs	r2, #0
 80034a0:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d003      	beq.n	80034b4 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80034ac:	4b16      	ldr	r3, [pc, #88]	; (8003508 <ethernetif_update_config+0xf4>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	609a      	str	r2, [r3, #8]
 80034b2:	e016      	b.n	80034e2 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80034b4:	4b14      	ldr	r3, [pc, #80]	; (8003508 <ethernetif_update_config+0xf4>)
 80034b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034ba:	609a      	str	r2, [r3, #8]
 80034bc:	e011      	b.n	80034e2 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80034be:	bf00      	nop
 80034c0:	e000      	b.n	80034c4 <ethernetif_update_config+0xb0>
          goto error;
 80034c2:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80034c4:	4b10      	ldr	r3, [pc, #64]	; (8003508 <ethernetif_update_config+0xf4>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	08db      	lsrs	r3, r3, #3
 80034ca:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80034cc:	4b0e      	ldr	r3, [pc, #56]	; (8003508 <ethernetif_update_config+0xf4>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	085b      	lsrs	r3, r3, #1
 80034d2:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80034d4:	4313      	orrs	r3, r2
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	461a      	mov	r2, r3
 80034da:	2100      	movs	r1, #0
 80034dc:	480a      	ldr	r0, [pc, #40]	; (8003508 <ethernetif_update_config+0xf4>)
 80034de:	f7fe f8a5 	bl	800162c <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80034e2:	2100      	movs	r1, #0
 80034e4:	4808      	ldr	r0, [pc, #32]	; (8003508 <ethernetif_update_config+0xf4>)
 80034e6:	f7fe f965 	bl	80017b4 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80034ea:	4807      	ldr	r0, [pc, #28]	; (8003508 <ethernetif_update_config+0xf4>)
 80034ec:	f7fe f904 	bl	80016f8 <HAL_ETH_Start>
 80034f0:	e002      	b.n	80034f8 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 80034f2:	4805      	ldr	r0, [pc, #20]	; (8003508 <ethernetif_update_config+0xf4>)
 80034f4:	f7fe f92f 	bl	8001756 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f807 	bl	800350c <ethernetif_notify_conn_changed>
}
 80034fe:	bf00      	nop
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	20001f90 	.word	0x20001f90

0800350c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d002      	beq.n	8003536 <fs_open+0x16>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d102      	bne.n	800353c <fs_open+0x1c>
    return ERR_ARG;
 8003536:	f06f 030f 	mvn.w	r3, #15
 800353a:	e028      	b.n	800358e <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800353c:	4b16      	ldr	r3, [pc, #88]	; (8003598 <fs_open+0x78>)
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	e020      	b.n	8003584 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	4619      	mov	r1, r3
 8003548:	6838      	ldr	r0, [r7, #0]
 800354a:	f7fc fe41 	bl	80001d0 <strcmp>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d114      	bne.n	800357e <fs_open+0x5e>
      file->data = (const char *)f->data;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	68da      	ldr	r2, [r3, #12]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	68da      	ldr	r2, [r3, #12]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	7c1a      	ldrb	r2, [r3, #16]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800357a:	2300      	movs	r3, #0
 800357c:	e007      	b.n	800358e <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	60fb      	str	r3, [r7, #12]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1db      	bne.n	8003542 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800358a:	f06f 0305 	mvn.w	r3, #5
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	080141e4 	.word	0x080141e4

0800359c <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	1ad3      	subs	r3, r2, r3
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state *
http_ssi_state_alloc(void)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b082      	sub	sp, #8
 80035d2:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 80035d4:	20e0      	movs	r0, #224	; 0xe0
 80035d6:	f001 fdb1 	bl	800513c <mem_malloc>
 80035da:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d004      	beq.n	80035ec <http_ssi_state_alloc+0x1e>
    memset(ret, 0, sizeof(struct http_ssi_state));
 80035e2:	22e0      	movs	r2, #224	; 0xe0
 80035e4:	2100      	movs	r1, #0
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f00b fe76 	bl	800f2d8 <memset>
  }
  return ret;
 80035ec:	687b      	ldr	r3, [r7, #4]
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b082      	sub	sp, #8
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d002      	beq.n	800360a <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f001 fc33 	bl	8004e70 <mem_free>
  }
}
 800360a:	bf00      	nop
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8003612:	b580      	push	{r7, lr}
 8003614:	b082      	sub	sp, #8
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800361a:	2230      	movs	r2, #48	; 0x30
 800361c:	2100      	movs	r1, #0
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f00b fe5a 	bl	800f2d8 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8003624:	bf00      	nop
 8003626:	3708      	adds	r7, #8
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8003632:	2030      	movs	r0, #48	; 0x30
 8003634:	f001 fd82 	bl	800513c <mem_malloc>
 8003638:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d002      	beq.n	8003646 <http_state_alloc+0x1a>
    http_state_init(ret);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f7ff ffe6 	bl	8003612 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8003646:	687b      	ldr	r3, [r7, #4]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d007      	beq.n	8003670 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff ff99 	bl	800359c <fs_close>
    hs->handle = NULL;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003674:	2b00      	cmp	r3, #0
 8003676:	d007      	beq.n	8003688 <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff ffba 	bl	80035f6 <http_ssi_state_free>
    hs->ssi = NULL;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d007      	beq.n	80036a0 <http_state_eof+0x50>
    pbuf_free(hs->req);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	4618      	mov	r0, r3
 8003696:	f002 fd1d 	bl	80060d4 <pbuf_free>
    hs->req = NULL;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 80036a0:	bf00      	nop
 80036a2:	3708      	adds	r7, #8
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d005      	beq.n	80036c2 <http_state_free+0x1a>
    http_state_eof(hs);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7ff ffca 	bl	8003650 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f001 fbd7 	bl	8004e70 <mem_free>
  }
}
 80036c2:	bf00      	nop
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
 80036d8:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d106      	bne.n	80036ee <http_write+0x22>
 80036e0:	4b2c      	ldr	r3, [pc, #176]	; (8003794 <http_write+0xc8>)
 80036e2:	f240 2219 	movw	r2, #537	; 0x219
 80036e6:	492c      	ldr	r1, [pc, #176]	; (8003798 <http_write+0xcc>)
 80036e8:	482c      	ldr	r0, [pc, #176]	; (800379c <http_write+0xd0>)
 80036ea:	f00b fdfd 	bl	800f2e8 <iprintf>
  len = *length;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	881b      	ldrh	r3, [r3, #0]
 80036f2:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 80036f4:	8afb      	ldrh	r3, [r7, #22]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <http_write+0x32>
    return ERR_OK;
 80036fa:	2300      	movs	r3, #0
 80036fc:	e045      	b.n	800378a <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003704:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8003706:	8aba      	ldrh	r2, [r7, #20]
 8003708:	8afb      	ldrh	r3, [r7, #22]
 800370a:	429a      	cmp	r2, r3
 800370c:	d201      	bcs.n	8003712 <http_write+0x46>
    len = max_len;
 800370e:	8abb      	ldrh	r3, [r7, #20]
 8003710:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 800371a:	8afa      	ldrh	r2, [r7, #22]
 800371c:	8abb      	ldrh	r3, [r7, #20]
 800371e:	429a      	cmp	r2, r3
 8003720:	d901      	bls.n	8003726 <http_write+0x5a>
    len = max_len;
 8003722:	8abb      	ldrh	r3, [r7, #20]
 8003724:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8003726:	78fb      	ldrb	r3, [r7, #3]
 8003728:	8afa      	ldrh	r2, [r7, #22]
 800372a:	68b9      	ldr	r1, [r7, #8]
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f007 fa55 	bl	800abdc <tcp_write>
 8003732:	4603      	mov	r3, r0
 8003734:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8003736:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800373a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800373e:	d10f      	bne.n	8003760 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003746:	2b00      	cmp	r3, #0
 8003748:	d004      	beq.n	8003754 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8003750:	2b08      	cmp	r3, #8
 8003752:	d902      	bls.n	800375a <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8003754:	2301      	movs	r3, #1
 8003756:	82fb      	strh	r3, [r7, #22]
 8003758:	e002      	b.n	8003760 <http_write+0x94>
      } else {
        len /= 2;
 800375a:	8afb      	ldrh	r3, [r7, #22]
 800375c:	085b      	lsrs	r3, r3, #1
 800375e:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8003760:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003764:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003768:	d102      	bne.n	8003770 <http_write+0xa4>
 800376a:	8afb      	ldrh	r3, [r7, #22]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d8da      	bhi.n	8003726 <http_write+0x5a>

  if (err == ERR_OK) {
 8003770:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d103      	bne.n	8003780 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	8afa      	ldrh	r2, [r7, #22]
 800377c:	801a      	strh	r2, [r3, #0]
 800377e:	e002      	b.n	8003786 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8003786:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800378a:	4618      	mov	r0, r3
 800378c:	3718      	adds	r7, #24
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	080107a8 	.word	0x080107a8
 8003798:	080107e0 	.word	0x080107e0
 800379c:	080107f0 	.word	0x080107f0

080037a0 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	4613      	mov	r3, r2
 80037ac:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 80037ae:	2100      	movs	r1, #0
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f004 fad5 	bl	8007d60 <tcp_arg>
  altcp_recv(pcb, NULL);
 80037b6:	2100      	movs	r1, #0
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f004 fae3 	bl	8007d84 <tcp_recv>
  altcp_err(pcb, NULL);
 80037be:	2100      	movs	r1, #0
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f004 fb23 	bl	8007e0c <tcp_err>
  altcp_poll(pcb, NULL, 0);
 80037c6:	2200      	movs	r2, #0
 80037c8:	2100      	movs	r1, #0
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f004 fb58 	bl	8007e80 <tcp_poll>
  altcp_sent(pcb, NULL);
 80037d0:	2100      	movs	r1, #0
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f004 faf8 	bl	8007dc8 <tcp_sent>
  if (hs != NULL) {
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d002      	beq.n	80037e4 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 80037de:	68b8      	ldr	r0, [r7, #8]
 80037e0:	f7ff ff62 	bl	80036a8 <http_state_free>
  }

  if (abort_conn) {
 80037e4:	79fb      	ldrb	r3, [r7, #7]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d004      	beq.n	80037f4 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f003 f9fa 	bl	8006be4 <tcp_abort>
    return ERR_OK;
 80037f0:	2300      	movs	r3, #0
 80037f2:	e00f      	b.n	8003814 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f003 f90b 	bl	8006a10 <tcp_close>
 80037fa:	4603      	mov	r3, r0
 80037fc:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 80037fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d004      	beq.n	8003810 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8003806:	2204      	movs	r2, #4
 8003808:	4904      	ldr	r1, [pc, #16]	; (800381c <http_close_or_abort_conn+0x7c>)
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f004 fb38 	bl	8007e80 <tcp_poll>
  }
  return err;
 8003810:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003814:	4618      	mov	r0, r3
 8003816:	3718      	adds	r7, #24
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	08004747 	.word	0x08004747

08003820 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800382a:	2200      	movs	r2, #0
 800382c:	6839      	ldr	r1, [r7, #0]
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7ff ffb6 	bl	80037a0 <http_close_or_abort_conn>
 8003834:	4603      	mov	r3, r0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b082      	sub	sp, #8
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
 8003846:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8003848:	6839      	ldr	r1, [r7, #0]
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7ff ffe8 	bl	8003820 <http_close_conn>
  }
}
 8003850:	bf00      	nop
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d106      	bne.n	8003874 <get_tag_insert+0x1c>
 8003866:	4b51      	ldr	r3, [pc, #324]	; (80039ac <get_tag_insert+0x154>)
 8003868:	f44f 7241 	mov.w	r2, #772	; 0x304
 800386c:	4950      	ldr	r1, [pc, #320]	; (80039b0 <get_tag_insert+0x158>)
 800386e:	4851      	ldr	r0, [pc, #324]	; (80039b4 <get_tag_insert+0x15c>)
 8003870:	f00b fd3a 	bl	800f2e8 <iprintf>
  ssi = hs->ssi;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003878:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d106      	bne.n	800388e <get_tag_insert+0x36>
 8003880:	4b4a      	ldr	r3, [pc, #296]	; (80039ac <get_tag_insert+0x154>)
 8003882:	f240 3206 	movw	r2, #774	; 0x306
 8003886:	494c      	ldr	r1, [pc, #304]	; (80039b8 <get_tag_insert+0x160>)
 8003888:	484a      	ldr	r0, [pc, #296]	; (80039b4 <get_tag_insert+0x15c>)
 800388a:	f00b fd2d 	bl	800f2e8 <iprintf>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if (httpd_ssi_handler
 800388e:	4b4b      	ldr	r3, [pc, #300]	; (80039bc <get_tag_insert+0x164>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d02e      	beq.n	80038f4 <get_tag_insert+0x9c>
#if !LWIP_HTTPD_SSI_RAW
      && httpd_tags && httpd_num_tags
 8003896:	4b4a      	ldr	r3, [pc, #296]	; (80039c0 <get_tag_insert+0x168>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d02a      	beq.n	80038f4 <get_tag_insert+0x9c>
 800389e:	4b49      	ldr	r3, [pc, #292]	; (80039c4 <get_tag_insert+0x16c>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d026      	beq.n	80038f4 <get_tag_insert+0x9c>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for (tag = 0; tag < httpd_num_tags; tag++) {
 80038a6:	2300      	movs	r3, #0
 80038a8:	617b      	str	r3, [r7, #20]
 80038aa:	e01e      	b.n	80038ea <get_tag_insert+0x92>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	f103 0012 	add.w	r0, r3, #18
 80038b2:	4b43      	ldr	r3, [pc, #268]	; (80039c0 <get_tag_insert+0x168>)
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4619      	mov	r1, r3
 80038c0:	f7fc fc86 	bl	80001d0 <strcmp>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10c      	bne.n	80038e4 <get_tag_insert+0x8c>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 80038ca:	4b3c      	ldr	r3, [pc, #240]	; (80039bc <get_tag_insert+0x164>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	f102 011b 	add.w	r1, r2, #27
 80038d4:	22c0      	movs	r2, #192	; 0xc0
 80038d6:	6978      	ldr	r0, [r7, #20]
 80038d8:	4798      	blx	r3
 80038da:	4603      	mov	r3, r0
 80038dc:	461a      	mov	r2, r3
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	81da      	strh	r2, [r3, #14]
                                             );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 80038e2:	e060      	b.n	80039a6 <get_tag_insert+0x14e>
    for (tag = 0; tag < httpd_num_tags; tag++) {
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	3301      	adds	r3, #1
 80038e8:	617b      	str	r3, [r7, #20]
 80038ea:	4b36      	ldr	r3, [pc, #216]	; (80039c4 <get_tag_insert+0x16c>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	dbdb      	blt.n	80038ac <get_tag_insert+0x54>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	3312      	adds	r3, #18
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fc fc73 	bl	80001e4 <strlen>
 80038fe:	4603      	mov	r3, r0
 8003900:	2ba6      	cmp	r3, #166	; 0xa6
 8003902:	d818      	bhi.n	8003936 <get_tag_insert+0xde>
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	3312      	adds	r3, #18
 8003908:	4618      	mov	r0, r3
 800390a:	f7fc fc6b 	bl	80001e4 <strlen>
 800390e:	4603      	mov	r3, r0
 8003910:	2b09      	cmp	r3, #9
 8003912:	d810      	bhi.n	8003936 <get_tag_insert+0xde>
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	3312      	adds	r3, #18
 8003918:	4618      	mov	r0, r3
 800391a:	f7fc fc63 	bl	80001e4 <strlen>
 800391e:	4603      	mov	r3, r0
 8003920:	2ba6      	cmp	r3, #166	; 0xa6
 8003922:	d806      	bhi.n	8003932 <get_tag_insert+0xda>
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	3312      	adds	r3, #18
 8003928:	4618      	mov	r0, r3
 800392a:	f7fc fc5b 	bl	80001e4 <strlen>
 800392e:	4603      	mov	r3, r0
 8003930:	e002      	b.n	8003938 <get_tag_insert+0xe0>
 8003932:	23a7      	movs	r3, #167	; 0xa7
 8003934:	e000      	b.n	8003938 <get_tag_insert+0xe0>
 8003936:	2309      	movs	r3, #9
 8003938:	60fb      	str	r3, [r7, #12]
                 LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	331b      	adds	r3, #27
 800393e:	2212      	movs	r2, #18
 8003940:	4921      	ldr	r1, [pc, #132]	; (80039c8 <get_tag_insert+0x170>)
 8003942:	4618      	mov	r0, r3
 8003944:	f00b fca0 	bl	800f288 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	f103 002d 	add.w	r0, r3, #45	; 0x2d
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	3312      	adds	r3, #18
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	4619      	mov	r1, r3
 8003956:	f00b fc97 	bl	800f288 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	3312      	adds	r3, #18
 800395e:	3318      	adds	r3, #24
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	4413      	add	r3, r2
 8003964:	3303      	adds	r3, #3
 8003966:	2207      	movs	r2, #7
 8003968:	4918      	ldr	r1, [pc, #96]	; (80039cc <get_tag_insert+0x174>)
 800396a:	4618      	mov	r0, r3
 800396c:	f00b fc8c 	bl	800f288 <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	3319      	adds	r3, #25
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	4413      	add	r3, r2
 8003978:	2200      	movs	r2, #0
 800397a:	76da      	strb	r2, [r3, #27]

  len = strlen(ssi->tag_insert);
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	331b      	adds	r3, #27
 8003980:	4618      	mov	r0, r3
 8003982:	f7fc fc2f 	bl	80001e4 <strlen>
 8003986:	60f8      	str	r0, [r7, #12]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800398e:	d306      	bcc.n	800399e <get_tag_insert+0x146>
 8003990:	4b06      	ldr	r3, [pc, #24]	; (80039ac <get_tag_insert+0x154>)
 8003992:	f240 323f 	movw	r2, #831	; 0x33f
 8003996:	490e      	ldr	r1, [pc, #56]	; (80039d0 <get_tag_insert+0x178>)
 8003998:	4806      	ldr	r0, [pc, #24]	; (80039b4 <get_tag_insert+0x15c>)
 800399a:	f00b fca5 	bl	800f2e8 <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	81da      	strh	r2, [r3, #14]
}
 80039a6:	3718      	adds	r7, #24
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	080107a8 	.word	0x080107a8
 80039b0:	08010818 	.word	0x08010818
 80039b4:	080107f0 	.word	0x080107f0
 80039b8:	08010824 	.word	0x08010824
 80039bc:	200004ec 	.word	0x200004ec
 80039c0:	200004f4 	.word	0x200004f4
 80039c4:	200004f0 	.word	0x200004f0
 80039c8:	08010830 	.word	0x08010830
 80039cc:	08010844 	.word	0x08010844
 80039d0:	0801084c 	.word	0x0801084c

080039d4 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d105      	bne.n	80039f2 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 80039e6:	6839      	ldr	r1, [r7, #0]
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f7ff ff28 	bl	800383e <http_eof>
    return 0;
 80039ee:	2300      	movs	r3, #0
 80039f0:	e016      	b.n	8003a20 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7ff fdda 	bl	80035b0 <fs_bytes_left>
 80039fc:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	dc05      	bgt.n	8003a10 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8003a04:	6839      	ldr	r1, [r7, #0]
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7ff ff19 	bl	800383e <http_eof>
    return 0;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	e007      	b.n	8003a20 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8003a10:	4b05      	ldr	r3, [pc, #20]	; (8003a28 <http_check_eof+0x54>)
 8003a12:	f240 429d 	movw	r2, #1181	; 0x49d
 8003a16:	4905      	ldr	r1, [pc, #20]	; (8003a2c <http_check_eof+0x58>)
 8003a18:	4805      	ldr	r0, [pc, #20]	; (8003a30 <http_check_eof+0x5c>)
 8003a1a:	f00b fc65 	bl	800f2e8 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 8003a1e:	2301      	movs	r3, #1
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	080107a8 	.word	0x080107a8
 8003a2c:	0801085c 	.word	0x0801085c
 8003a30:	080107f0 	.word	0x080107f0

08003a34 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a46:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d803      	bhi.n	8003a56 <http_send_data_nonssi+0x22>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	e001      	b.n	8003a5a <http_send_data_nonssi+0x26>
 8003a56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a5a:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	6999      	ldr	r1, [r3, #24]
 8003a60:	f107 020c 	add.w	r2, r7, #12
 8003a64:	2300      	movs	r3, #0
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7ff fe30 	bl	80036cc <http_write>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8003a70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10d      	bne.n	8003a94 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	89ba      	ldrh	r2, [r7, #12]
 8003a82:	441a      	add	r2, r3
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	89ba      	ldrh	r2, [r7, #12]
 8003a8e:	1a9a      	subs	r2, r3, r2
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 8003a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
	...

08003aa0 <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	75bb      	strb	r3, [r7, #22]
  u8_t tag_type;

  struct http_ssi_state *ssi = hs->ssi;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab6:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d106      	bne.n	8003acc <http_send_data_ssi+0x2c>
 8003abe:	4b9d      	ldr	r3, [pc, #628]	; (8003d34 <http_send_data_ssi+0x294>)
 8003ac0:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8003ac4:	499c      	ldr	r1, [pc, #624]	; (8003d38 <http_send_data_ssi+0x298>)
 8003ac6:	489d      	ldr	r0, [pc, #628]	; (8003d3c <http_send_data_ssi+0x29c>)
 8003ac8:	f00b fc0e 	bl	800f2e8 <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = altcp_sndbuf(pcb);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003ad2:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if (ssi->parsed > hs->file) {
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	f240 826a 	bls.w	8003fb6 <http_send_data_ssi+0x516>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003af0:	4293      	cmp	r3, r2
 8003af2:	dc06      	bgt.n	8003b02 <http_send_data_ssi+0x62>
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	e001      	b.n	8003b06 <http_send_data_ssi+0x66>
 8003b02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b06:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	6999      	ldr	r1, [r3, #24]
 8003b0c:	f107 020e 	add.w	r2, r7, #14
 8003b10:	2300      	movs	r3, #0
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f7ff fdda 	bl	80036cc <http_write>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8003b1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10d      	bne.n	8003b40 <http_send_data_ssi+0xa0>
      data_to_send = 1;
 8003b24:	2301      	movs	r3, #1
 8003b26:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	89fa      	ldrh	r2, [r7, #14]
 8003b2e:	441a      	add	r2, r3
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	89fa      	ldrh	r2, [r7, #14]
 8003b3a:	1a9a      	subs	r2, r3, r2
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if (altcp_sndbuf(pcb) == 0) {
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f040 8235 	bne.w	8003fb6 <http_send_data_ssi+0x516>
      return data_to_send;
 8003b4c:	7dbb      	ldrb	r3, [r7, #22]
 8003b4e:	e27b      	b.n	8004048 <http_send_data_ssi+0x5a8>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 8003b50:	89fb      	ldrh	r3, [r7, #14]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <http_send_data_ssi+0xba>
      return data_to_send;
 8003b56:	7dbb      	ldrb	r3, [r7, #22]
 8003b58:	e276      	b.n	8004048 <http_send_data_ssi+0x5a8>
    }
    switch (ssi->tag_state) {
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8003b60:	2b04      	cmp	r3, #4
 8003b62:	f200 8227 	bhi.w	8003fb4 <http_send_data_ssi+0x514>
 8003b66:	a201      	add	r2, pc, #4	; (adr r2, 8003b6c <http_send_data_ssi+0xcc>)
 8003b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b6c:	08003b81 	.word	0x08003b81
 8003b70:	08003bd3 	.word	0x08003bd3
 8003b74:	08003c45 	.word	0x08003c45
 8003b78:	08003d93 	.word	0x08003d93
 8003b7c:	08003edb 	.word	0x08003edb
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8003b80:	2300      	movs	r3, #0
 8003b82:	757b      	strb	r3, [r7, #21]
 8003b84:	e017      	b.n	8003bb6 <http_send_data_ssi+0x116>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	781a      	ldrb	r2, [r3, #0]
 8003b8c:	7d7b      	ldrb	r3, [r7, #21]
 8003b8e:	496c      	ldr	r1, [pc, #432]	; (8003d40 <http_send_data_ssi+0x2a0>)
 8003b90:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d10a      	bne.n	8003bb0 <http_send_data_ssi+0x110>
            /* We found what could be the lead-in for a new tag so change
             * state appropriately. */
            ssi->tag_type = tag_type;
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	7d7a      	ldrb	r2, [r7, #21]
 8003b9e:	741a      	strb	r2, [r3, #16]
            ssi->tag_state = TAG_LEADIN;
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            ssi->tag_index = 1;
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	2201      	movs	r2, #1
 8003bac:	819a      	strh	r2, [r3, #12]
  #if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->tag_started = ssi->parsed;
  #endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
            break;
 8003bae:	e005      	b.n	8003bbc <http_send_data_ssi+0x11c>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8003bb0:	7d7b      	ldrb	r3, [r7, #21]
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	757b      	strb	r3, [r7, #21]
 8003bb6:	7d7b      	ldrb	r3, [r7, #21]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d9e4      	bls.n	8003b86 <http_send_data_ssi+0xe6>
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	1e5a      	subs	r2, r3, #1
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	601a      	str	r2, [r3, #0]
        break;
 8003bd0:	e1f1      	b.n	8003fb6 <http_send_data_ssi+0x516>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	7c1b      	ldrb	r3, [r3, #16]
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	4b59      	ldr	r3, [pc, #356]	; (8003d40 <http_send_data_ssi+0x2a0>)
 8003bda:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	8992      	ldrh	r2, [r2, #12]
 8003be2:	4413      	add	r3, r2
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d107      	bne.n	8003bfa <http_send_data_ssi+0x15a>
          ssi->tag_index = 0;
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	2200      	movs	r2, #0
 8003bee:	819a      	strh	r2, [r3, #12]
          ssi->tag_state = TAG_FOUND;
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8003bf8:	e1dd      	b.n	8003fb6 <http_send_data_ssi+0x516>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	781a      	ldrb	r2, [r3, #0]
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	7c1b      	ldrb	r3, [r3, #16]
 8003c04:	4619      	mov	r1, r3
 8003c06:	4b4e      	ldr	r3, [pc, #312]	; (8003d40 <http_send_data_ssi+0x2a0>)
 8003c08:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 8003c0c:	6939      	ldr	r1, [r7, #16]
 8003c0e:	8989      	ldrh	r1, [r1, #12]
 8003c10:	440b      	add	r3, r1
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d106      	bne.n	8003c26 <http_send_data_ssi+0x186>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	899b      	ldrh	r3, [r3, #12]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	819a      	strh	r2, [r3, #12]
 8003c24:	e003      	b.n	8003c2e <http_send_data_ssi+0x18e>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	1e5a      	subs	r2, r3, #1
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	1c5a      	adds	r2, r3, #1
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	601a      	str	r2, [r3, #0]
        }
        break;
 8003c42:	e1b8      	b.n	8003fb6 <http_send_data_ssi+0x516>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	899b      	ldrh	r3, [r3, #12]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d11e      	bne.n	8003c8a <http_send_data_ssi+0x1ea>
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	2b20      	cmp	r3, #32
 8003c54:	d00e      	beq.n	8003c74 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8003c5c:	2b09      	cmp	r3, #9
 8003c5e:	d009      	beq.n	8003c74 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	2b0a      	cmp	r3, #10
 8003c68:	d004      	beq.n	8003c74 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\r'))) {
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8003c70:	2b0d      	cmp	r3, #13
 8003c72:	d10a      	bne.n	8003c8a <http_send_data_ssi+0x1ea>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	1e5a      	subs	r2, r3, #1
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	1c5a      	adds	r2, r3, #1
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	601a      	str	r2, [r3, #0]
          break;
 8003c88:	e195      	b.n	8003fb6 <http_send_data_ssi+0x516>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	781a      	ldrb	r2, [r3, #0]
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	7c1b      	ldrb	r3, [r3, #16]
 8003c94:	492a      	ldr	r1, [pc, #168]	; (8003d40 <http_send_data_ssi+0x2a0>)
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	440b      	add	r3, r1
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d013      	beq.n	8003cca <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	781b      	ldrb	r3, [r3, #0]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8003ca8:	2b20      	cmp	r3, #32
 8003caa:	d00e      	beq.n	8003cca <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	2b09      	cmp	r3, #9
 8003cb4:	d009      	beq.n	8003cca <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	781b      	ldrb	r3, [r3, #0]
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8003cbc:	2b0a      	cmp	r3, #10
 8003cbe:	d004      	beq.n	8003cca <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	2b0d      	cmp	r3, #13
 8003cc8:	d142      	bne.n	8003d50 <http_send_data_ssi+0x2b0>

          if (ssi->tag_index == 0) {
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	899b      	ldrh	r3, [r3, #12]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d104      	bne.n	8003cdc <http_send_data_ssi+0x23c>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          if (ssi->tag_index == 0) {
 8003cda:	e04f      	b.n	8003d7c <http_send_data_ssi+0x2dc>
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	2203      	movs	r2, #3
 8003ce0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	899b      	ldrh	r3, [r3, #12]
 8003ce8:	2bff      	cmp	r3, #255	; 0xff
 8003cea:	d906      	bls.n	8003cfa <http_send_data_ssi+0x25a>
 8003cec:	4b11      	ldr	r3, [pc, #68]	; (8003d34 <http_send_data_ssi+0x294>)
 8003cee:	f240 523a 	movw	r2, #1338	; 0x53a
 8003cf2:	4914      	ldr	r1, [pc, #80]	; (8003d44 <http_send_data_ssi+0x2a4>)
 8003cf4:	4811      	ldr	r0, [pc, #68]	; (8003d3c <http_send_data_ssi+0x29c>)
 8003cf6:	f00b faf7 	bl	800f2e8 <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	899b      	ldrh	r3, [r3, #12]
 8003cfe:	b2da      	uxtb	r2, r3
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	745a      	strb	r2, [r3, #17]
            ssi->tag_name[ssi->tag_index] = '\0';
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	899b      	ldrh	r3, [r3, #12]
 8003d08:	461a      	mov	r2, r3
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	2200      	movs	r2, #0
 8003d10:	749a      	strb	r2, [r3, #18]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	781a      	ldrb	r2, [r3, #0]
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	7c1b      	ldrb	r3, [r3, #16]
 8003d1c:	4908      	ldr	r1, [pc, #32]	; (8003d40 <http_send_data_ssi+0x2a0>)
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	440b      	add	r3, r1
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d10e      	bne.n	8003d48 <http_send_data_ssi+0x2a8>
              ssi->tag_index = 1;
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 8003d30:	e024      	b.n	8003d7c <http_send_data_ssi+0x2dc>
 8003d32:	bf00      	nop
 8003d34:	080107a8 	.word	0x080107a8
 8003d38:	08010824 	.word	0x08010824
 8003d3c:	080107f0 	.word	0x080107f0
 8003d40:	08014234 	.word	0x08014234
 8003d44:	08010894 	.word	0x08010894
            } else {
              ssi->tag_index = 0;
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 8003d4e:	e015      	b.n	8003d7c <http_send_data_ssi+0x2dc>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	899b      	ldrh	r3, [r3, #12]
 8003d54:	2b07      	cmp	r3, #7
 8003d56:	d80d      	bhi.n	8003d74 <http_send_data_ssi+0x2d4>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	899b      	ldrh	r3, [r3, #12]
 8003d60:	1c59      	adds	r1, r3, #1
 8003d62:	b288      	uxth	r0, r1
 8003d64:	6939      	ldr	r1, [r7, #16]
 8003d66:	8188      	strh	r0, [r1, #12]
 8003d68:	4619      	mov	r1, r3
 8003d6a:	7812      	ldrb	r2, [r2, #0]
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	440b      	add	r3, r1
 8003d70:	749a      	strb	r2, [r3, #18]
 8003d72:	e003      	b.n	8003d7c <http_send_data_ssi+0x2dc>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	1e5a      	subs	r2, r3, #1
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	1c5a      	adds	r2, r3, #1
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	601a      	str	r2, [r3, #0]

        break;
 8003d90:	e111      	b.n	8003fb6 <http_send_data_ssi+0x516>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	899b      	ldrh	r3, [r3, #12]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d11e      	bne.n	8003dd8 <http_send_data_ssi+0x338>
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	2b20      	cmp	r3, #32
 8003da2:	d00e      	beq.n	8003dc2 <http_send_data_ssi+0x322>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8003daa:	2b09      	cmp	r3, #9
 8003dac:	d009      	beq.n	8003dc2 <http_send_data_ssi+0x322>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	2b0a      	cmp	r3, #10
 8003db6:	d004      	beq.n	8003dc2 <http_send_data_ssi+0x322>
                                      (*ssi->parsed == '\r'))) {
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8003dbe:	2b0d      	cmp	r3, #13
 8003dc0:	d10a      	bne.n	8003dd8 <http_send_data_ssi+0x338>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	1e5a      	subs	r2, r3, #1
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	1c5a      	adds	r2, r3, #1
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	601a      	str	r2, [r3, #0]
          break;
 8003dd6:	e0ee      	b.n	8003fb6 <http_send_data_ssi+0x516>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	781a      	ldrb	r2, [r3, #0]
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	7c1b      	ldrb	r3, [r3, #16]
 8003de2:	499b      	ldr	r1, [pc, #620]	; (8004050 <http_send_data_ssi+0x5b0>)
 8003de4:	00db      	lsls	r3, r3, #3
 8003de6:	440b      	add	r3, r1
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	6939      	ldr	r1, [r7, #16]
 8003dec:	8989      	ldrh	r1, [r1, #12]
 8003dee:	440b      	add	r3, r1
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d162      	bne.n	8003ebc <http_send_data_ssi+0x41c>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	1e5a      	subs	r2, r3, #1
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	1c5a      	adds	r2, r3, #1
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	601a      	str	r2, [r3, #0]
          ssi->tag_index++;
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	899b      	ldrh	r3, [r3, #12]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	819a      	strh	r2, [r3, #12]

          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	7c1b      	ldrb	r3, [r3, #16]
 8003e1a:	4a8d      	ldr	r2, [pc, #564]	; (8004050 <http_send_data_ssi+0x5b0>)
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	4413      	add	r3, r2
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	8992      	ldrh	r2, [r2, #12]
 8003e26:	4413      	add	r3, r2
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f040 80c3 	bne.w	8003fb6 <http_send_data_ssi+0x516>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 8003e30:	6838      	ldr	r0, [r7, #0]
 8003e32:	f7ff fd11 	bl	8003858 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	819a      	strh	r2, [r3, #12]
            ssi->tag_state = TAG_SENDING;
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	2204      	movs	r2, #4
 8003e40:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            ssi->tag_end = ssi->parsed;
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	605a      	str	r2, [r3, #4]
            ssi->parsed = ssi->tag_started;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	f240 80ae 	bls.w	8003fb6 <http_send_data_ssi+0x516>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	685a      	ldr	r2, [r3, #4]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	dc06      	bgt.n	8003e7a <http_send_data_ssi+0x3da>
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	e001      	b.n	8003e7e <http_send_data_ssi+0x3de>
 8003e7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e7e:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	6999      	ldr	r1, [r3, #24]
 8003e84:	f107 020e 	add.w	r2, r7, #14
 8003e88:	2300      	movs	r3, #0
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7ff fc1e 	bl	80036cc <http_write>
 8003e90:	4603      	mov	r3, r0
 8003e92:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 8003e94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f040 808c 	bne.w	8003fb6 <http_send_data_ssi+0x516>
                data_to_send = 1;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	75bb      	strb	r3, [r7, #22]
                if (ssi->tag_started <= hs->file) {
                  /* pretend to have sent the tag, too */
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	89fa      	ldrh	r2, [r7, #14]
 8003ea8:	441a      	add	r2, r3
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb2:	89fa      	ldrh	r2, [r7, #14]
 8003eb4:	1a9a      	subs	r2, r3, r2
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	625a      	str	r2, [r3, #36]	; 0x24
 8003eba:	e07c      	b.n	8003fb6 <http_send_data_ssi+0x516>
            }
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	1e5a      	subs	r2, r3, #1
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	1c5a      	adds	r2, r3, #1
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
        }
        break;
 8003ed8:	e06d      	b.n	8003fb6 <http_send_data_ssi+0x516>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if (ssi->tag_end > hs->file) {
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d935      	bls.n	8003f52 <http_send_data_ssi+0x4b2>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	685a      	ldr	r2, [r3, #4]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	dc06      	bgt.n	8003f06 <http_send_data_ssi+0x466>
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	e001      	b.n	8003f0a <http_send_data_ssi+0x46a>
 8003f06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f0a:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 8003f0c:	89fb      	ldrh	r3, [r7, #14]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00a      	beq.n	8003f28 <http_send_data_ssi+0x488>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	6999      	ldr	r1, [r3, #24]
 8003f16:	f107 020e 	add.w	r2, r7, #14
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f7ff fbd5 	bl	80036cc <http_write>
 8003f22:	4603      	mov	r3, r0
 8003f24:	75fb      	strb	r3, [r7, #23]
 8003f26:	e001      	b.n	8003f2c <http_send_data_ssi+0x48c>
          } else {
            err = ERR_OK;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 8003f2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d140      	bne.n	8003fb6 <http_send_data_ssi+0x516>
            data_to_send = 1;
 8003f34:	2301      	movs	r3, #1
 8003f36:	75bb      	strb	r3, [r7, #22]
            if (ssi->tag_started <= hs->file) {
              /* pretend to have sent the tag, too */
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	89fa      	ldrh	r2, [r7, #14]
 8003f3e:	441a      	add	r2, r3
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f48:	89fa      	ldrh	r2, [r7, #14]
 8003f4a:	1a9a      	subs	r2, r3, r2
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	625a      	str	r2, [r3, #36]	; 0x24
 8003f50:	e031      	b.n	8003fb6 <http_send_data_ssi+0x516>
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if (ssi->tag_index < ssi->tag_insert_len) {
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	899a      	ldrh	r2, [r3, #12]
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	89db      	ldrh	r3, [r3, #14]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d222      	bcs.n	8003fa4 <http_send_data_ssi+0x504>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	89da      	ldrh	r2, [r3, #14]
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	899b      	ldrh	r3, [r3, #12]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	899b      	ldrh	r3, [r3, #12]
 8003f70:	3318      	adds	r3, #24
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	4413      	add	r3, r2
 8003f76:	1cd9      	adds	r1, r3, #3
 8003f78:	f107 020e 	add.w	r2, r7, #14
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7ff fba4 	bl	80036cc <http_write>
 8003f84:	4603      	mov	r3, r0
 8003f86:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 8003f88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d112      	bne.n	8003fb6 <http_send_data_ssi+0x516>
              data_to_send = 1;
 8003f90:	2301      	movs	r3, #1
 8003f92:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	899a      	ldrh	r2, [r3, #12]
 8003f98:	89fb      	ldrh	r3, [r7, #14]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	819a      	strh	r2, [r3, #12]
 8003fa2:	e008      	b.n	8003fb6 <http_send_data_ssi+0x516>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	819a      	strh	r2, [r3, #12]
              ssi->tag_state = TAG_NONE;
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 8003fb2:	e000      	b.n	8003fb6 <http_send_data_ssi+0x516>
        default:
          break;
 8003fb4:	bf00      	nop
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	d003      	beq.n	8003fc8 <http_send_data_ssi+0x528>
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d004      	beq.n	8003fd2 <http_send_data_ssi+0x532>
 8003fc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f43f adbf 	beq.w	8003b50 <http_send_data_ssi+0xb0>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8003fd8:	2b04      	cmp	r3, #4
 8003fda:	d034      	beq.n	8004046 <http_send_data_ssi+0x5a6>
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d92e      	bls.n	8004046 <http_send_data_ssi+0x5a6>
      ssi->parsed = ssi->tag_started;
      ssi->tag_started = hs->buf;
    } else
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ && !LWIP_HTTPD_SSI_INCLUDE_TAG */
    {
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	dc06      	bgt.n	8004008 <http_send_data_ssi+0x568>
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	b29b      	uxth	r3, r3
 8004006:	e001      	b.n	800400c <http_send_data_ssi+0x56c>
 8004008:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800400c:	81fb      	strh	r3, [r7, #14]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	6999      	ldr	r1, [r3, #24]
 8004012:	f107 020e 	add.w	r2, r7, #14
 8004016:	2300      	movs	r3, #0
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f7ff fb57 	bl	80036cc <http_write>
 800401e:	4603      	mov	r3, r0
 8004020:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8004022:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10d      	bne.n	8004046 <http_send_data_ssi+0x5a6>
      data_to_send = 1;
 800402a:	2301      	movs	r3, #1
 800402c:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	89fa      	ldrh	r2, [r7, #14]
 8004034:	441a      	add	r2, r3
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403e:	89fa      	ldrh	r2, [r7, #14]
 8004040:	1a9a      	subs	r2, r3, r2
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
 8004046:	7dbb      	ldrb	r3, [r7, #22]
}
 8004048:	4618      	mov	r0, r3
 800404a:	3718      	adds	r7, #24
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	08014234 	.word	0x08014234

08004054 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800405e:	2300      	movs	r3, #0
 8004060:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d101      	bne.n	800406c <http_send+0x18>
    return 0;
 8004068:	2300      	movs	r3, #0
 800406a:	e030      	b.n	80040ce <http_send+0x7a>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004070:	2b00      	cmp	r3, #0
 8004072:	d108      	bne.n	8004086 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 8004074:	6839      	ldr	r1, [r7, #0]
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7ff fcac 	bl	80039d4 <http_check_eof>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <http_send+0x32>
      return 0;
 8004082:	2300      	movs	r3, #0
 8004084:	e023      	b.n	80040ce <http_send+0x7a>
    }
  }

#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408a:	2b00      	cmp	r3, #0
 800408c:	d006      	beq.n	800409c <http_send+0x48>
    data_to_send = http_send_data_ssi(pcb, hs);
 800408e:	6839      	ldr	r1, [r7, #0]
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f7ff fd05 	bl	8003aa0 <http_send_data_ssi>
 8004096:	4603      	mov	r3, r0
 8004098:	73fb      	strb	r3, [r7, #15]
 800409a:	e005      	b.n	80040a8 <http_send+0x54>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800409c:	6839      	ldr	r1, [r7, #0]
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f7ff fcc8 	bl	8003a34 <http_send_data_nonssi>
 80040a4:	4603      	mov	r3, r0
 80040a6:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10d      	bne.n	80040cc <http_send+0x78>
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7ff fa7b 	bl	80035b0 <fs_bytes_left>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	dc05      	bgt.n	80040cc <http_send+0x78>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 80040c0:	6839      	ldr	r1, [r7, #0]
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7ff fbbb 	bl	800383e <http_eof>
    return 0;
 80040c8:	2300      	movs	r3, #0
 80040ca:	e000      	b.n	80040ce <http_send+0x7a>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 80040cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
	...

080040d8 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	4a1c      	ldr	r2, [pc, #112]	; (8004158 <http_get_404_file+0x80>)
 80040e6:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4619      	mov	r1, r3
 80040f0:	4610      	mov	r0, r2
 80040f2:	f7ff fa15 	bl	8003520 <fs_open>
 80040f6:	4603      	mov	r3, r0
 80040f8:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80040fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d024      	beq.n	800414c <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	4a15      	ldr	r2, [pc, #84]	; (800415c <http_get_404_file+0x84>)
 8004106:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4619      	mov	r1, r3
 8004110:	4610      	mov	r0, r2
 8004112:	f7ff fa05 	bl	8003520 <fs_open>
 8004116:	4603      	mov	r3, r0
 8004118:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800411a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d014      	beq.n	800414c <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	4a0e      	ldr	r2, [pc, #56]	; (8004160 <http_get_404_file+0x88>)
 8004126:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4619      	mov	r1, r3
 8004130:	4610      	mov	r0, r2
 8004132:	f7ff f9f5 	bl	8003520 <fs_open>
 8004136:	4603      	mov	r3, r0
 8004138:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800413a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d004      	beq.n	800414c <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2200      	movs	r2, #0
 8004146:	601a      	str	r2, [r3, #0]
        return NULL;
 8004148:	2300      	movs	r3, #0
 800414a:	e000      	b.n	800414e <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800414c:	687b      	ldr	r3, [r7, #4]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	080108ac 	.word	0x080108ac
 800415c:	080108b8 	.word	0x080108b8
 8004160:	080108c4 	.word	0x080108c4

08004164 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b08e      	sub	sp, #56	; 0x38
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8004174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004176:	2b00      	cmp	r3, #0
 8004178:	d106      	bne.n	8004188 <http_parse_request+0x24>
 800417a:	4b65      	ldr	r3, [pc, #404]	; (8004310 <http_parse_request+0x1ac>)
 800417c:	f240 72ae 	movw	r2, #1966	; 0x7ae
 8004180:	4964      	ldr	r1, [pc, #400]	; (8004314 <http_parse_request+0x1b0>)
 8004182:	4865      	ldr	r0, [pc, #404]	; (8004318 <http_parse_request+0x1b4>)
 8004184:	f00b f8b0 	bl	800f2e8 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d106      	bne.n	800419c <http_parse_request+0x38>
 800418e:	4b60      	ldr	r3, [pc, #384]	; (8004310 <http_parse_request+0x1ac>)
 8004190:	f240 72af 	movw	r2, #1967	; 0x7af
 8004194:	4961      	ldr	r1, [pc, #388]	; (800431c <http_parse_request+0x1b8>)
 8004196:	4860      	ldr	r0, [pc, #384]	; (8004318 <http_parse_request+0x1b4>)
 8004198:	f00b f8a6 	bl	800f2e8 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d103      	bne.n	80041ac <http_parse_request+0x48>
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d002      	beq.n	80041b2 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 80041ac:	f06f 0307 	mvn.w	r3, #7
 80041b0:	e0a9      	b.n	8004306 <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d103      	bne.n	80041c2 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041be:	621a      	str	r2, [r3, #32]
 80041c0:	e005      	b.n	80041ce <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041c8:	4618      	mov	r0, r3
 80041ca:	f002 f845 	bl	8006258 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 80041ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041d0:	f002 f820 	bl	8006214 <pbuf_ref>

  if (hs->req->next != NULL) {
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d012      	beq.n	8004204 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	891b      	ldrh	r3, [r3, #8]
 80041e4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80041e8:	4293      	cmp	r3, r2
 80041ea:	bf28      	it	cs
 80041ec:	4613      	movcs	r3, r2
 80041ee:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	6a18      	ldr	r0, [r3, #32]
 80041f4:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80041f6:	2300      	movs	r3, #0
 80041f8:	4949      	ldr	r1, [pc, #292]	; (8004320 <http_parse_request+0x1bc>)
 80041fa:	f002 f955 	bl	80064a8 <pbuf_copy_partial>
    data = httpd_req_buf;
 80041fe:	4b48      	ldr	r3, [pc, #288]	; (8004320 <http_parse_request+0x1bc>)
 8004200:	637b      	str	r3, [r7, #52]	; 0x34
 8004202:	e005      	b.n	8004210 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8004204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 800420a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420c:	895b      	ldrh	r3, [r3, #10]
 800420e:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8004210:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004212:	2b06      	cmp	r3, #6
 8004214:	d962      	bls.n	80042dc <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8004216:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004218:	461a      	mov	r2, r3
 800421a:	4942      	ldr	r1, [pc, #264]	; (8004324 <http_parse_request+0x1c0>)
 800421c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800421e:	f000 fc69 	bl	8004af4 <lwip_strnstr>
 8004222:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8004224:	6a3b      	ldr	r3, [r7, #32]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d058      	beq.n	80042dc <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800422a:	2300      	movs	r3, #0
 800422c:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800422e:	2204      	movs	r2, #4
 8004230:	493d      	ldr	r1, [pc, #244]	; (8004328 <http_parse_request+0x1c4>)
 8004232:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004234:	f00b f8dd 	bl	800f3f2 <strncmp>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d116      	bne.n	800426c <http_parse_request+0x108>
        sp1 = data + 3;
 800423e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004240:	3303      	adds	r3, #3
 8004242:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	1c5a      	adds	r2, r3, #1
 8004248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	b29b      	uxth	r3, r3
 800424e:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	3301      	adds	r3, #1
 8004258:	8b7a      	ldrh	r2, [r7, #26]
 800425a:	4934      	ldr	r1, [pc, #208]	; (800432c <http_parse_request+0x1c8>)
 800425c:	4618      	mov	r0, r3
 800425e:	f000 fc49 	bl	8004af4 <lwip_strnstr>
 8004262:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 8004264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004266:	2b00      	cmp	r3, #0
 8004268:	d111      	bne.n	800428e <http_parse_request+0x12a>
 800426a:	e006      	b.n	800427a <http_parse_request+0x116>
        data[4] = 0;
 800426c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800426e:	3304      	adds	r3, #4
 8004270:	2200      	movs	r2, #0
 8004272:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 8004274:	f06f 030f 	mvn.w	r3, #15
 8004278:	e045      	b.n	8004306 <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	3301      	adds	r3, #1
 800427e:	8b7a      	ldrh	r2, [r7, #26]
 8004280:	4928      	ldr	r1, [pc, #160]	; (8004324 <http_parse_request+0x1c0>)
 8004282:	4618      	mov	r0, r3
 8004284:	f000 fc36 	bl	8004af4 <lwip_strnstr>
 8004288:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800428a:	2301      	movs	r3, #1
 800428c:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	3301      	adds	r3, #1
 8004292:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8004298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429a:	2b00      	cmp	r3, #0
 800429c:	d01e      	beq.n	80042dc <http_parse_request+0x178>
 800429e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d91a      	bls.n	80042dc <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 80042a6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80042a8:	461a      	mov	r2, r3
 80042aa:	4921      	ldr	r1, [pc, #132]	; (8004330 <http_parse_request+0x1cc>)
 80042ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80042ae:	f000 fc21 	bl	8004af4 <lwip_strnstr>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d011      	beq.n	80042dc <http_parse_request+0x178>
          char *uri = sp1 + 1;
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	3301      	adds	r3, #1
 80042bc:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	2200      	movs	r2, #0
 80042c2:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 80042c4:	8b3b      	ldrh	r3, [r7, #24]
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	4413      	add	r3, r2
 80042ca:	2200      	movs	r2, #0
 80042cc:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 80042ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042d0:	6979      	ldr	r1, [r7, #20]
 80042d2:	68b8      	ldr	r0, [r7, #8]
 80042d4:	f000 f880 	bl	80043d8 <http_find_file>
 80042d8:	4603      	mov	r3, r0
 80042da:	e014      	b.n	8004306 <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f001 ff7f 	bl	80061e4 <pbuf_clen>
 80042e6:	4603      	mov	r3, r0
 80042e8:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	891b      	ldrh	r3, [r3, #8]
 80042f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042f4:	d205      	bcs.n	8004302 <http_parse_request+0x19e>
 80042f6:	8a7b      	ldrh	r3, [r7, #18]
 80042f8:	2b05      	cmp	r3, #5
 80042fa:	d802      	bhi.n	8004302 <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 80042fc:	f06f 0304 	mvn.w	r3, #4
 8004300:	e001      	b.n	8004306 <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8004302:	f06f 030f 	mvn.w	r3, #15
  }
}
 8004306:	4618      	mov	r0, r3
 8004308:	3738      	adds	r7, #56	; 0x38
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	080107a8 	.word	0x080107a8
 8004314:	080108d0 	.word	0x080108d0
 8004318:	080107f0 	.word	0x080107f0
 800431c:	08010818 	.word	0x08010818
 8004320:	200000ac 	.word	0x200000ac
 8004324:	080108dc 	.word	0x080108dc
 8004328:	080108e0 	.word	0x080108e0
 800432c:	080108e8 	.word	0x080108e8
 8004330:	080108ec 	.word	0x080108ec

08004334 <http_uri_is_ssi>:
 *
 * @return 1 for SSI, 0 for standard files
 */
static u8_t
http_uri_is_ssi(struct fs_file *file, const char *uri)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b088      	sub	sp, #32
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  size_t loop;
  u8_t tag_check = 0;
 800433e:	2300      	movs	r3, #0
 8004340:	76fb      	strb	r3, [r7, #27]
  if (file != NULL) {
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d040      	beq.n	80043ca <http_uri_is_ssi+0x96>
    /* See if we have been asked for an shtml file and, if so,
        enable tag checking. */
    const char *ext = NULL, *sub;
 8004348:	2300      	movs	r3, #0
 800434a:	617b      	str	r3, [r7, #20]
    char *param = (char *)strstr(uri, "?");
 800434c:	213f      	movs	r1, #63	; 0x3f
 800434e:	6838      	ldr	r0, [r7, #0]
 8004350:	f00b f842 	bl	800f3d8 <strchr>
 8004354:	60f8      	str	r0, [r7, #12]
    if (param != NULL) {
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d002      	beq.n	8004362 <http_uri_is_ssi+0x2e>
      /* separate uri from parameters for now, set back later */
      *param = 0;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	701a      	strb	r2, [r3, #0]
    }
    sub = uri;
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	613b      	str	r3, [r7, #16]
    ext = uri;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	617b      	str	r3, [r7, #20]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 800436a:	212e      	movs	r1, #46	; 0x2e
 800436c:	6938      	ldr	r0, [r7, #16]
 800436e:	f00b f833 	bl	800f3d8 <strchr>
 8004372:	6138      	str	r0, [r7, #16]
 8004374:	e009      	b.n	800438a <http_uri_is_ssi+0x56>
      ext = sub;
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	617b      	str	r3, [r7, #20]
      sub++;
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	3301      	adds	r3, #1
 800437e:	613b      	str	r3, [r7, #16]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 8004380:	212e      	movs	r1, #46	; 0x2e
 8004382:	6938      	ldr	r0, [r7, #16]
 8004384:	f00b f828 	bl	800f3d8 <strchr>
 8004388:	6138      	str	r0, [r7, #16]
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1f2      	bne.n	8004376 <http_uri_is_ssi+0x42>
    }
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8004390:	2300      	movs	r3, #0
 8004392:	61fb      	str	r3, [r7, #28]
 8004394:	e010      	b.n	80043b8 <http_uri_is_ssi+0x84>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 8004396:	4a0f      	ldr	r2, [pc, #60]	; (80043d4 <http_uri_is_ssi+0xa0>)
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800439e:	4619      	mov	r1, r3
 80043a0:	6978      	ldr	r0, [r7, #20]
 80043a2:	f000 fbdd 	bl	8004b60 <lwip_stricmp>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d102      	bne.n	80043b2 <http_uri_is_ssi+0x7e>
        tag_check = 1;
 80043ac:	2301      	movs	r3, #1
 80043ae:	76fb      	strb	r3, [r7, #27]
        break;
 80043b0:	e005      	b.n	80043be <http_uri_is_ssi+0x8a>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	3301      	adds	r3, #1
 80043b6:	61fb      	str	r3, [r7, #28]
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	2b04      	cmp	r3, #4
 80043bc:	d9eb      	bls.n	8004396 <http_uri_is_ssi+0x62>
      }
    }
    if (param != NULL) {
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d002      	beq.n	80043ca <http_uri_is_ssi+0x96>
      *param = '?';
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	223f      	movs	r2, #63	; 0x3f
 80043c8:	701a      	strb	r2, [r3, #0]
    }
  }
  return tag_check;
 80043ca:	7efb      	ldrb	r3, [r7, #27]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3720      	adds	r7, #32
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	080141f8 	.word	0x080141f8

080043d8 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b092      	sub	sp, #72	; 0x48
 80043dc:	af02      	add	r7, sp, #8
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 80043e4:	2300      	movs	r3, #0
 80043e6:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 80043e8:	2300      	movs	r3, #0
 80043ea:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 80043ec:	2300      	movs	r3, #0
 80043ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7fb fef5 	bl	80001e4 <strlen>
 80043fa:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 80043fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d072      	beq.n	80044e8 <http_find_file+0x110>
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004406:	3b01      	subs	r3, #1
 8004408:	4413      	add	r3, r2
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	2b2f      	cmp	r3, #47	; 0x2f
 800440e:	d16b      	bne.n	80044e8 <http_find_file+0x110>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8004410:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8004412:	4a61      	ldr	r2, [pc, #388]	; (8004598 <http_find_file+0x1c0>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d102      	bne.n	800441e <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8004418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800441a:	2b01      	cmp	r3, #1
 800441c:	d164      	bne.n	80044e8 <http_find_file+0x110>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800441e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004420:	3b01      	subs	r3, #1
 8004422:	2b3f      	cmp	r3, #63	; 0x3f
 8004424:	bf28      	it	cs
 8004426:	233f      	movcs	r3, #63	; 0x3f
 8004428:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 800442a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00a      	beq.n	8004446 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004434:	4619      	mov	r1, r3
 8004436:	4858      	ldr	r0, [pc, #352]	; (8004598 <http_find_file+0x1c0>)
 8004438:	f00a ff26 	bl	800f288 <memcpy>
      http_uri_buf[copy_len] = 0;
 800443c:	4a56      	ldr	r2, [pc, #344]	; (8004598 <http_find_file+0x1c0>)
 800443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004440:	4413      	add	r3, r2
 8004442:	2200      	movs	r2, #0
 8004444:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8004446:	2300      	movs	r3, #0
 8004448:	63fb      	str	r3, [r7, #60]	; 0x3c
 800444a:	e04a      	b.n	80044e2 <http_find_file+0x10a>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	2b00      	cmp	r3, #0
 8004450:	d028      	beq.n	80044a4 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 8004452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004454:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8004458:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 800445a:	6a3b      	ldr	r3, [r7, #32]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d01e      	beq.n	800449e <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8004460:	4a4e      	ldr	r2, [pc, #312]	; (800459c <http_find_file+0x1c4>)
 8004462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004464:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004468:	4618      	mov	r0, r3
 800446a:	f7fb febb 	bl	80001e4 <strlen>
 800446e:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8004470:	69fa      	ldr	r2, [r7, #28]
 8004472:	6a3b      	ldr	r3, [r7, #32]
 8004474:	4293      	cmp	r3, r2
 8004476:	bf28      	it	cs
 8004478:	4613      	movcs	r3, r2
 800447a:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800447c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447e:	4a46      	ldr	r2, [pc, #280]	; (8004598 <http_find_file+0x1c0>)
 8004480:	1898      	adds	r0, r3, r2
 8004482:	4a46      	ldr	r2, [pc, #280]	; (800459c <http_find_file+0x1c4>)
 8004484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004486:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800448a:	69ba      	ldr	r2, [r7, #24]
 800448c:	4619      	mov	r1, r3
 800448e:	f00a fefb 	bl	800f288 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8004492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	4413      	add	r3, r2
 8004498:	4a3f      	ldr	r2, [pc, #252]	; (8004598 <http_find_file+0x1c0>)
 800449a:	2100      	movs	r1, #0
 800449c:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800449e:	4b3e      	ldr	r3, [pc, #248]	; (8004598 <http_find_file+0x1c0>)
 80044a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044a2:	e004      	b.n	80044ae <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 80044a4:	4a3d      	ldr	r2, [pc, #244]	; (800459c <http_find_file+0x1c4>)
 80044a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80044ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7ff f834 	bl	8003520 <fs_open>
 80044b8:	4603      	mov	r3, r0
 80044ba:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 80044bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10b      	bne.n	80044dc <http_find_file+0x104>
        uri = file_name;
 80044c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c6:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
 80044cc:	4a33      	ldr	r2, [pc, #204]	; (800459c <http_find_file+0x1c4>)
 80044ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044d0:	00db      	lsls	r3, r3, #3
 80044d2:	4413      	add	r3, r2
 80044d4:	791b      	ldrb	r3, [r3, #4]
 80044d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
#endif /* LWIP_HTTPD_SSI */
        break;
 80044da:	e005      	b.n	80044e8 <http_find_file+0x110>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 80044dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044de:	3301      	adds	r3, #1
 80044e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044e4:	2b04      	cmp	r3, #4
 80044e6:	d9b1      	bls.n	800444c <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 80044e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d139      	bne.n	8004562 <http_find_file+0x18a>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	213f      	movs	r1, #63	; 0x3f
 80044f2:	4618      	mov	r0, r3
 80044f4:	f00a ff70 	bl	800f3d8 <strchr>
 80044f8:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 80044fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d005      	beq.n	800450c <http_find_file+0x134>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 8004500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004502:	2200      	movs	r2, #0
 8004504:	701a      	strb	r2, [r3, #0]
      params++;
 8004506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004508:	3301      	adds	r3, #1
 800450a:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	4611      	mov	r1, r2
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff f804 	bl	8003520 <fs_open>
 8004518:	4603      	mov	r3, r0
 800451a:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800451c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d102      	bne.n	800452a <http_find_file+0x152>
      file = &hs->file_handle;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	63bb      	str	r3, [r7, #56]	; 0x38
 8004528:	e006      	b.n	8004538 <http_find_file+0x160>
    } else {
      file = http_get_404_file(hs, &uri);
 800452a:	f107 0308 	add.w	r3, r7, #8
 800452e:	4619      	mov	r1, r3
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f7ff fdd1 	bl	80040d8 <http_get_404_file>
 8004536:	63b8      	str	r0, [r7, #56]	; 0x38
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 8004538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800453a:	2b00      	cmp	r3, #0
 800453c:	d011      	beq.n	8004562 <http_find_file+0x18a>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 800453e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004540:	7c1b      	ldrb	r3, [r3, #16]
 8004542:	f003 0308 	and.w	r3, r3, #8
 8004546:	2b00      	cmp	r3, #0
 8004548:	d003      	beq.n	8004552 <http_find_file+0x17a>
        tag_check = 1;
 800454a:	2301      	movs	r3, #1
 800454c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004550:	e007      	b.n	8004562 <http_find_file+0x18a>
      } else {
#if LWIP_HTTPD_SSI_BY_FILE_EXTENSION
        tag_check = http_uri_is_ssi(file, uri);
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	4619      	mov	r1, r3
 8004556:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004558:	f7ff feec 	bl	8004334 <http_uri_is_ssi>
 800455c:	4603      	mov	r3, r0
 800455e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 8004562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004564:	2b00      	cmp	r3, #0
 8004566:	d106      	bne.n	8004576 <http_find_file+0x19e>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 8004568:	f107 0308 	add.w	r3, r7, #8
 800456c:	4619      	mov	r1, r3
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f7ff fdb2 	bl	80040d8 <http_get_404_file>
 8004574:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800457a:	9301      	str	r3, [sp, #4]
 800457c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004580:	9300      	str	r3, [sp, #0]
 8004582:	4613      	mov	r3, r2
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 f809 	bl	80045a0 <http_init_file>
 800458e:	4603      	mov	r3, r0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3740      	adds	r7, #64	; 0x40
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	200004ac 	.word	0x200004ac
 800459c:	0801420c 	.word	0x0801420c

080045a0 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b088      	sub	sp, #32
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
 80045ac:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d07d      	beq.n	80046b0 <http_init_file+0x110>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d106      	bne.n	80045ca <http_init_file+0x2a>
 80045bc:	4b45      	ldr	r3, [pc, #276]	; (80046d4 <http_init_file+0x134>)
 80045be:	f640 120b 	movw	r2, #2315	; 0x90b
 80045c2:	4945      	ldr	r1, [pc, #276]	; (80046d8 <http_init_file+0x138>)
 80045c4:	4845      	ldr	r0, [pc, #276]	; (80046dc <http_init_file+0x13c>)
 80045c6:	f00a fe8f 	bl	800f2e8 <iprintf>
#endif

#if LWIP_HTTPD_SSI
    if (tag_check) {
 80045ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d01c      	beq.n	800460c <http_init_file+0x6c>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 80045d2:	f7fe fffc 	bl	80035ce <http_ssi_state_alloc>
 80045d6:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d016      	beq.n	800460c <http_init_file+0x6c>
        ssi->tag_index = 0;
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	2200      	movs	r2, #0
 80045e2:	819a      	strh	r2, [r3, #12]
        ssi->tag_state = TAG_NONE;
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
        ssi->parsed = file->data;
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	461a      	mov	r2, r3
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	609a      	str	r2, [r3, #8]
        ssi->tag_end = file->data;
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	605a      	str	r2, [r3, #4]
        hs->ssi = ssi;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	69fa      	ldr	r2, [r7, #28]
 800460a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	da06      	bge.n	8004630 <http_init_file+0x90>
 8004622:	4b2c      	ldr	r3, [pc, #176]	; (80046d4 <http_init_file+0x134>)
 8004624:	f640 1234 	movw	r2, #2356	; 0x934
 8004628:	492d      	ldr	r1, [pc, #180]	; (80046e0 <http_init_file+0x140>)
 800462a:	482c      	ldr	r0, [pc, #176]	; (80046dc <http_init_file+0x13c>)
 800462c:	f00a fe5c 	bl	800f2e8 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	461a      	mov	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	7c1b      	ldrb	r3, [r3, #16]
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	2b00      	cmp	r3, #0
 800464e:	d106      	bne.n	800465e <http_init_file+0xbe>
 8004650:	4b20      	ldr	r3, [pc, #128]	; (80046d4 <http_init_file+0x134>)
 8004652:	f640 1243 	movw	r2, #2371	; 0x943
 8004656:	4923      	ldr	r1, [pc, #140]	; (80046e4 <http_init_file+0x144>)
 8004658:	4820      	ldr	r0, [pc, #128]	; (80046dc <http_init_file+0x13c>)
 800465a:	f00a fe45 	bl	800f2e8 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d032      	beq.n	80046ca <http_init_file+0x12a>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	695b      	ldr	r3, [r3, #20]
 8004668:	7c1b      	ldrb	r3, [r3, #16]
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b00      	cmp	r3, #0
 8004670:	d02b      	beq.n	80046ca <http_init_file+0x12a>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6998      	ldr	r0, [r3, #24]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	461a      	mov	r2, r3
 800467c:	491a      	ldr	r1, [pc, #104]	; (80046e8 <http_init_file+0x148>)
 800467e:	f000 fa39 	bl	8004af4 <lwip_strnstr>
 8004682:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d01f      	beq.n	80046ca <http_init_file+0x12a>
        int diff = file_start + 4 - hs->file;
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	1d1a      	adds	r2, r3, #4
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	699a      	ldr	r2, [r3, #24]
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	441a      	add	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	1ad2      	subs	r2, r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	625a      	str	r2, [r3, #36]	; 0x24
 80046ae:	e00c      	b.n	80046ca <http_init_file+0x12a>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3720      	adds	r7, #32
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	080107a8 	.word	0x080107a8
 80046d8:	080108f4 	.word	0x080108f4
 80046dc:	080107f0 	.word	0x080107f0
 80046e0:	08010908 	.word	0x08010908
 80046e4:	08010928 	.word	0x08010928
 80046e8:	080108ec 	.word	0x080108ec

080046ec <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	460b      	mov	r3, r1
 80046f6:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d002      	beq.n	8004708 <http_err+0x1c>
    http_state_free(hs);
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f7fe ffd0 	bl	80036a8 <http_state_free>
  }
}
 8004708:	bf00      	nop
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	4613      	mov	r3, r2
 800471c:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d101      	bne.n	800472c <http_sent+0x1c>
    return ERR_OK;
 8004728:	2300      	movs	r3, #0
 800472a:	e008      	b.n	800473e <http_sent+0x2e>
  }

  hs->retries = 0;
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 8004734:	6979      	ldr	r1, [r7, #20]
 8004736:	68b8      	ldr	r0, [r7, #8]
 8004738:	f7ff fc8c 	bl	8004054 <http_send>

  return ERR_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3718      	adds	r7, #24
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b084      	sub	sp, #16
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
 800474e:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d107      	bne.n	800476a <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800475a:	2100      	movs	r1, #0
 800475c:	6838      	ldr	r0, [r7, #0]
 800475e:	f7ff f85f 	bl	8003820 <http_close_conn>
 8004762:	4603      	mov	r3, r0
 8004764:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 8004766:	2300      	movs	r3, #0
 8004768:	e021      	b.n	80047ae <http_poll+0x68>
  } else {
    hs->retries++;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004770:	3301      	adds	r3, #1
 8004772:	b2da      	uxtb	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004780:	2b04      	cmp	r3, #4
 8004782:	d105      	bne.n	8004790 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 8004784:	68f9      	ldr	r1, [r7, #12]
 8004786:	6838      	ldr	r0, [r7, #0]
 8004788:	f7ff f84a 	bl	8003820 <http_close_conn>
      return ERR_OK;
 800478c:	2300      	movs	r3, #0
 800478e:	e00e      	b.n	80047ae <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d009      	beq.n	80047ac <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 8004798:	68f9      	ldr	r1, [r7, #12]
 800479a:	6838      	ldr	r0, [r7, #0]
 800479c:	f7ff fc5a 	bl	8004054 <http_send>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d002      	beq.n	80047ac <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 80047a6:	6838      	ldr	r0, [r7, #0]
 80047a8:	f007 f802 	bl	800b7b0 <tcp_output>
      }
    }
  }

  return ERR_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
	...

080047b8 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
 80047c4:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 80047ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d105      	bne.n	80047de <http_recv+0x26>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d002      	beq.n	80047de <http_recv+0x26>
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d111      	bne.n	8004802 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d008      	beq.n	80047f6 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	891b      	ldrh	r3, [r3, #8]
 80047e8:	4619      	mov	r1, r3
 80047ea:	68b8      	ldr	r0, [r7, #8]
 80047ec:	f002 fbd4 	bl	8006f98 <tcp_recved>
      pbuf_free(p);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f001 fc6f 	bl	80060d4 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 80047f6:	6979      	ldr	r1, [r7, #20]
 80047f8:	68b8      	ldr	r0, [r7, #8]
 80047fa:	f7ff f811 	bl	8003820 <http_close_conn>
    return ERR_OK;
 80047fe:	2300      	movs	r3, #0
 8004800:	e055      	b.n	80048ae <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	891b      	ldrh	r3, [r3, #8]
 8004806:	4619      	mov	r1, r3
 8004808:	68b8      	ldr	r0, [r7, #8]
 800480a:	f002 fbc5 	bl	8006f98 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d147      	bne.n	80048a6 <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	6979      	ldr	r1, [r7, #20]
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7ff fca2 	bl	8004164 <http_parse_request>
 8004820:	4603      	mov	r3, r0
 8004822:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8004824:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d015      	beq.n	8004858 <http_recv+0xa0>
 800482c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004830:	f113 0f05 	cmn.w	r3, #5
 8004834:	d010      	beq.n	8004858 <http_recv+0xa0>
 8004836:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800483a:	f113 0f10 	cmn.w	r3, #16
 800483e:	d00b      	beq.n	8004858 <http_recv+0xa0>
 8004840:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004844:	f113 0f08 	cmn.w	r3, #8
 8004848:	d006      	beq.n	8004858 <http_recv+0xa0>
 800484a:	4b1b      	ldr	r3, [pc, #108]	; (80048b8 <http_recv+0x100>)
 800484c:	f640 2204 	movw	r2, #2564	; 0xa04
 8004850:	491a      	ldr	r1, [pc, #104]	; (80048bc <http_recv+0x104>)
 8004852:	481b      	ldr	r0, [pc, #108]	; (80048c0 <http_recv+0x108>)
 8004854:	f00a fd48 	bl	800f2e8 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 8004858:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800485c:	f113 0f05 	cmn.w	r3, #5
 8004860:	d00b      	beq.n	800487a <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d007      	beq.n	800487a <http_recv+0xc2>
          pbuf_free(hs->req);
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	4618      	mov	r0, r3
 8004870:	f001 fc30 	bl	80060d4 <pbuf_free>
          hs->req = NULL;
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	2200      	movs	r2, #0
 8004878:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f001 fc2a 	bl	80060d4 <pbuf_free>
      if (parsed == ERR_OK) {
 8004880:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d104      	bne.n	8004892 <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 8004888:	6979      	ldr	r1, [r7, #20]
 800488a:	68b8      	ldr	r0, [r7, #8]
 800488c:	f7ff fbe2 	bl	8004054 <http_send>
 8004890:	e00c      	b.n	80048ac <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 8004892:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004896:	f113 0f10 	cmn.w	r3, #16
 800489a:	d107      	bne.n	80048ac <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800489c:	6979      	ldr	r1, [r7, #20]
 800489e:	68b8      	ldr	r0, [r7, #8]
 80048a0:	f7fe ffbe 	bl	8003820 <http_close_conn>
 80048a4:	e002      	b.n	80048ac <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f001 fc14 	bl	80060d4 <pbuf_free>
    }
  }
  return ERR_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3718      	adds	r7, #24
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	080107a8 	.word	0x080107a8
 80048bc:	08010954 	.word	0x08010954
 80048c0:	080107f0 	.word	0x080107f0

080048c4 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	4613      	mov	r3, r2
 80048d0:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 80048d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d102      	bne.n	80048e0 <http_accept+0x1c>
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d102      	bne.n	80048e6 <http_accept+0x22>
    return ERR_VAL;
 80048e0:	f06f 0305 	mvn.w	r3, #5
 80048e4:	e025      	b.n	8004932 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 80048e6:	2101      	movs	r1, #1
 80048e8:	68b8      	ldr	r0, [r7, #8]
 80048ea:	f003 f839 	bl	8007960 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 80048ee:	f7fe fe9d 	bl	800362c <http_state_alloc>
 80048f2:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d102      	bne.n	8004900 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 80048fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048fe:	e018      	b.n	8004932 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 8004906:	6979      	ldr	r1, [r7, #20]
 8004908:	68b8      	ldr	r0, [r7, #8]
 800490a:	f003 fa29 	bl	8007d60 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800490e:	490b      	ldr	r1, [pc, #44]	; (800493c <http_accept+0x78>)
 8004910:	68b8      	ldr	r0, [r7, #8]
 8004912:	f003 fa37 	bl	8007d84 <tcp_recv>
  altcp_err(pcb, http_err);
 8004916:	490a      	ldr	r1, [pc, #40]	; (8004940 <http_accept+0x7c>)
 8004918:	68b8      	ldr	r0, [r7, #8]
 800491a:	f003 fa77 	bl	8007e0c <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800491e:	2204      	movs	r2, #4
 8004920:	4908      	ldr	r1, [pc, #32]	; (8004944 <http_accept+0x80>)
 8004922:	68b8      	ldr	r0, [r7, #8]
 8004924:	f003 faac 	bl	8007e80 <tcp_poll>
  altcp_sent(pcb, http_sent);
 8004928:	4907      	ldr	r1, [pc, #28]	; (8004948 <http_accept+0x84>)
 800492a:	68b8      	ldr	r0, [r7, #8]
 800492c:	f003 fa4c 	bl	8007dc8 <tcp_sent>

  return ERR_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3718      	adds	r7, #24
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	080047b9 	.word	0x080047b9
 8004940:	080046ed 	.word	0x080046ed
 8004944:	08004747 	.word	0x08004747
 8004948:	08004711 	.word	0x08004711

0800494c <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	460b      	mov	r3, r1
 8004956:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d029      	beq.n	80049b2 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800495e:	2101      	movs	r1, #1
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f002 fffd 	bl	8007960 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 8004966:	887b      	ldrh	r3, [r7, #2]
 8004968:	461a      	mov	r2, r3
 800496a:	4914      	ldr	r1, [pc, #80]	; (80049bc <httpd_init_pcb+0x70>)
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f002 f945 	bl	8006bfc <tcp_bind>
 8004972:	4603      	mov	r3, r0
 8004974:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8004976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d006      	beq.n	800498c <httpd_init_pcb+0x40>
 800497e:	4b10      	ldr	r3, [pc, #64]	; (80049c0 <httpd_init_pcb+0x74>)
 8004980:	f640 2257 	movw	r2, #2647	; 0xa57
 8004984:	490f      	ldr	r1, [pc, #60]	; (80049c4 <httpd_init_pcb+0x78>)
 8004986:	4810      	ldr	r0, [pc, #64]	; (80049c8 <httpd_init_pcb+0x7c>)
 8004988:	f00a fcae 	bl	800f2e8 <iprintf>
    pcb = altcp_listen(pcb);
 800498c:	21ff      	movs	r1, #255	; 0xff
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f002 f9ec 	bl	8006d6c <tcp_listen_with_backlog>
 8004994:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d106      	bne.n	80049aa <httpd_init_pcb+0x5e>
 800499c:	4b08      	ldr	r3, [pc, #32]	; (80049c0 <httpd_init_pcb+0x74>)
 800499e:	f640 2259 	movw	r2, #2649	; 0xa59
 80049a2:	490a      	ldr	r1, [pc, #40]	; (80049cc <httpd_init_pcb+0x80>)
 80049a4:	4808      	ldr	r0, [pc, #32]	; (80049c8 <httpd_init_pcb+0x7c>)
 80049a6:	f00a fc9f 	bl	800f2e8 <iprintf>
    altcp_accept(pcb, http_accept);
 80049aa:	4909      	ldr	r1, [pc, #36]	; (80049d0 <httpd_init_pcb+0x84>)
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f003 fa4f 	bl	8007e50 <tcp_accept>
  }
}
 80049b2:	bf00      	nop
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	08014314 	.word	0x08014314
 80049c0:	080107a8 	.word	0x080107a8
 80049c4:	08010980 	.word	0x08010980
 80049c8:	080107f0 	.word	0x080107f0
 80049cc:	0801099c 	.word	0x0801099c
 80049d0:	080048c5 	.word	0x080048c5

080049d4 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 80049da:	202e      	movs	r0, #46	; 0x2e
 80049dc:	f003 f9b2 	bl	8007d44 <tcp_new_ip_type>
 80049e0:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d106      	bne.n	80049f6 <httpd_init+0x22>
 80049e8:	4b07      	ldr	r3, [pc, #28]	; (8004a08 <httpd_init+0x34>)
 80049ea:	f640 2272 	movw	r2, #2674	; 0xa72
 80049ee:	4907      	ldr	r1, [pc, #28]	; (8004a0c <httpd_init+0x38>)
 80049f0:	4807      	ldr	r0, [pc, #28]	; (8004a10 <httpd_init+0x3c>)
 80049f2:	f00a fc79 	bl	800f2e8 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 80049f6:	2150      	movs	r1, #80	; 0x50
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f7ff ffa7 	bl	800494c <httpd_init_pcb>
}
 80049fe:	bf00      	nop
 8004a00:	3708      	adds	r7, #8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	080107a8 	.word	0x080107a8
 8004a0c:	080109bc 	.word	0x080109bc
 8004a10:	080107f0 	.word	0x080107f0

08004a14 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d106      	bne.n	8004a34 <http_set_ssi_handler+0x20>
 8004a26:	4b14      	ldr	r3, [pc, #80]	; (8004a78 <http_set_ssi_handler+0x64>)
 8004a28:	f640 2297 	movw	r2, #2711	; 0xa97
 8004a2c:	4913      	ldr	r1, [pc, #76]	; (8004a7c <http_set_ssi_handler+0x68>)
 8004a2e:	4814      	ldr	r0, [pc, #80]	; (8004a80 <http_set_ssi_handler+0x6c>)
 8004a30:	f00a fc5a 	bl	800f2e8 <iprintf>
  httpd_ssi_handler = ssi_handler;
 8004a34:	4a13      	ldr	r2, [pc, #76]	; (8004a84 <http_set_ssi_handler+0x70>)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6013      	str	r3, [r2, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d106      	bne.n	8004a4e <http_set_ssi_handler+0x3a>
 8004a40:	4b0d      	ldr	r3, [pc, #52]	; (8004a78 <http_set_ssi_handler+0x64>)
 8004a42:	f640 229e 	movw	r2, #2718	; 0xa9e
 8004a46:	4910      	ldr	r1, [pc, #64]	; (8004a88 <http_set_ssi_handler+0x74>)
 8004a48:	480d      	ldr	r0, [pc, #52]	; (8004a80 <http_set_ssi_handler+0x6c>)
 8004a4a:	f00a fc4d 	bl	800f2e8 <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	dc06      	bgt.n	8004a62 <http_set_ssi_handler+0x4e>
 8004a54:	4b08      	ldr	r3, [pc, #32]	; (8004a78 <http_set_ssi_handler+0x64>)
 8004a56:	f640 229f 	movw	r2, #2719	; 0xa9f
 8004a5a:	490c      	ldr	r1, [pc, #48]	; (8004a8c <http_set_ssi_handler+0x78>)
 8004a5c:	4808      	ldr	r0, [pc, #32]	; (8004a80 <http_set_ssi_handler+0x6c>)
 8004a5e:	f00a fc43 	bl	800f2e8 <iprintf>

  httpd_tags = tags;
 8004a62:	4a0b      	ldr	r2, [pc, #44]	; (8004a90 <http_set_ssi_handler+0x7c>)
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	6013      	str	r3, [r2, #0]
  httpd_num_tags = num_tags;
 8004a68:	4a0a      	ldr	r2, [pc, #40]	; (8004a94 <http_set_ssi_handler+0x80>)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6013      	str	r3, [r2, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 8004a6e:	bf00      	nop
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	080107a8 	.word	0x080107a8
 8004a7c:	080109d8 	.word	0x080109d8
 8004a80:	080107f0 	.word	0x080107f0
 8004a84:	200004ec 	.word	0x200004ec
 8004a88:	080109f0 	.word	0x080109f0
 8004a8c:	08010a00 	.word	0x08010a00
 8004a90:	200004f4 	.word	0x200004f4
 8004a94:	200004f0 	.word	0x200004f0

08004a98 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8004aa2:	88fb      	ldrh	r3, [r7, #6]
 8004aa4:	021b      	lsls	r3, r3, #8
 8004aa6:	b21a      	sxth	r2, r3
 8004aa8:	88fb      	ldrh	r3, [r7, #6]
 8004aaa:	0a1b      	lsrs	r3, r3, #8
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	b21b      	sxth	r3, r3
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	b21b      	sxth	r3, r3
 8004ab4:	b29b      	uxth	r3, r3
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr

08004ac2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b083      	sub	sp, #12
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	061a      	lsls	r2, r3, #24
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	021b      	lsls	r3, r3, #8
 8004ad2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	0a1b      	lsrs	r3, r3, #8
 8004adc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004ae0:	431a      	orrs	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	0e1b      	lsrs	r3, r3, #24
 8004ae6:	4313      	orrs	r3, r2
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 8004b00:	68b8      	ldr	r0, [r7, #8]
 8004b02:	f7fb fb6f 	bl	80001e4 <strlen>
 8004b06:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	e022      	b.n	8004b58 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	617b      	str	r3, [r7, #20]
 8004b16:	e012      	b.n	8004b3e <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	781a      	ldrb	r2, [r3, #0]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d109      	bne.n	8004b38 <lwip_strnstr+0x44>
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	68b9      	ldr	r1, [r7, #8]
 8004b28:	6978      	ldr	r0, [r7, #20]
 8004b2a:	f00a fc62 	bl	800f3f2 <strncmp>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	e00f      	b.n	8004b58 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	617b      	str	r3, [r7, #20]
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d007      	beq.n	8004b56 <lwip_strnstr+0x62>
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	441a      	add	r2, r3
 8004b4c:	68f9      	ldr	r1, [r7, #12]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	440b      	add	r3, r1
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d9e0      	bls.n	8004b18 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3718      	adds	r7, #24
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	1c5a      	adds	r2, r3, #1
 8004b6e:	607a      	str	r2, [r7, #4]
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	1c5a      	adds	r2, r3, #1
 8004b78:	603a      	str	r2, [r7, #0]
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 8004b7e:	7bfa      	ldrb	r2, [r7, #15]
 8004b80:	7bbb      	ldrb	r3, [r7, #14]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d016      	beq.n	8004bb4 <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 8004b86:	7bfb      	ldrb	r3, [r7, #15]
 8004b88:	f043 0320 	orr.w	r3, r3, #32
 8004b8c:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8004b8e:	7b7b      	ldrb	r3, [r7, #13]
 8004b90:	2b60      	cmp	r3, #96	; 0x60
 8004b92:	d90c      	bls.n	8004bae <lwip_stricmp+0x4e>
 8004b94:	7b7b      	ldrb	r3, [r7, #13]
 8004b96:	2b7a      	cmp	r3, #122	; 0x7a
 8004b98:	d809      	bhi.n	8004bae <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 8004b9a:	7bbb      	ldrb	r3, [r7, #14]
 8004b9c:	f043 0320 	orr.w	r3, r3, #32
 8004ba0:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 8004ba2:	7b7a      	ldrb	r2, [r7, #13]
 8004ba4:	7b3b      	ldrb	r3, [r7, #12]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d003      	beq.n	8004bb2 <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e006      	b.n	8004bbc <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e004      	b.n	8004bbc <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8004bb2:	bf00      	nop
      }
    }
  } while (c1 != 0);
 8004bb4:	7bfb      	ldrb	r3, [r7, #15]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1d7      	bne.n	8004b6a <lwip_stricmp+0xa>
  return 0;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8004bd2:	f000 f8d5 	bl	8004d80 <mem_init>
  memp_init();
 8004bd6:	f000 fbdb 	bl	8005390 <memp_init>
  pbuf_init();
  netif_init();
 8004bda:	f000 fc93 	bl	8005504 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8004bde:	f007 fea7 	bl	800c930 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8004be2:	f001 fd05 	bl	80065f0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8004be6:	f007 fe19 	bl	800c81c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8004bea:	bf00      	nop
 8004bec:	3708      	adds	r7, #8
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
	...

08004bf4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8004bfe:	4b05      	ldr	r3, [pc, #20]	; (8004c14 <ptr_to_mem+0x20>)
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	88fb      	ldrh	r3, [r7, #6]
 8004c04:	4413      	add	r3, r2
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	370c      	adds	r7, #12
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	200004f8 	.word	0x200004f8

08004c18 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8004c20:	4b05      	ldr	r3, [pc, #20]	; (8004c38 <mem_to_ptr+0x20>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	b29b      	uxth	r3, r3
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	200004f8 	.word	0x200004f8

08004c3c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8004c3c:	b590      	push	{r4, r7, lr}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004c44:	4b45      	ldr	r3, [pc, #276]	; (8004d5c <plug_holes+0x120>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d206      	bcs.n	8004c5c <plug_holes+0x20>
 8004c4e:	4b44      	ldr	r3, [pc, #272]	; (8004d60 <plug_holes+0x124>)
 8004c50:	f240 12df 	movw	r2, #479	; 0x1df
 8004c54:	4943      	ldr	r1, [pc, #268]	; (8004d64 <plug_holes+0x128>)
 8004c56:	4844      	ldr	r0, [pc, #272]	; (8004d68 <plug_holes+0x12c>)
 8004c58:	f00a fb46 	bl	800f2e8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004c5c:	4b43      	ldr	r3, [pc, #268]	; (8004d6c <plug_holes+0x130>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d306      	bcc.n	8004c74 <plug_holes+0x38>
 8004c66:	4b3e      	ldr	r3, [pc, #248]	; (8004d60 <plug_holes+0x124>)
 8004c68:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004c6c:	4940      	ldr	r1, [pc, #256]	; (8004d70 <plug_holes+0x134>)
 8004c6e:	483e      	ldr	r0, [pc, #248]	; (8004d68 <plug_holes+0x12c>)
 8004c70:	f00a fb3a 	bl	800f2e8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	791b      	ldrb	r3, [r3, #4]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d006      	beq.n	8004c8a <plug_holes+0x4e>
 8004c7c:	4b38      	ldr	r3, [pc, #224]	; (8004d60 <plug_holes+0x124>)
 8004c7e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8004c82:	493c      	ldr	r1, [pc, #240]	; (8004d74 <plug_holes+0x138>)
 8004c84:	4838      	ldr	r0, [pc, #224]	; (8004d68 <plug_holes+0x12c>)
 8004c86:	f00a fb2f 	bl	800f2e8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	881b      	ldrh	r3, [r3, #0]
 8004c8e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004c92:	d906      	bls.n	8004ca2 <plug_holes+0x66>
 8004c94:	4b32      	ldr	r3, [pc, #200]	; (8004d60 <plug_holes+0x124>)
 8004c96:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8004c9a:	4937      	ldr	r1, [pc, #220]	; (8004d78 <plug_holes+0x13c>)
 8004c9c:	4832      	ldr	r0, [pc, #200]	; (8004d68 <plug_holes+0x12c>)
 8004c9e:	f00a fb23 	bl	800f2e8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	881b      	ldrh	r3, [r3, #0]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7ff ffa4 	bl	8004bf4 <ptr_to_mem>
 8004cac:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d024      	beq.n	8004d00 <plug_holes+0xc4>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	791b      	ldrb	r3, [r3, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d120      	bne.n	8004d00 <plug_holes+0xc4>
 8004cbe:	4b2b      	ldr	r3, [pc, #172]	; (8004d6c <plug_holes+0x130>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d01b      	beq.n	8004d00 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004cc8:	4b2c      	ldr	r3, [pc, #176]	; (8004d7c <plug_holes+0x140>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d102      	bne.n	8004cd8 <plug_holes+0x9c>
      lfree = mem;
 8004cd2:	4a2a      	ldr	r2, [pc, #168]	; (8004d7c <plug_holes+0x140>)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	881a      	ldrh	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	881b      	ldrh	r3, [r3, #0]
 8004ce4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004ce8:	d00a      	beq.n	8004d00 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	881b      	ldrh	r3, [r3, #0]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7ff ff80 	bl	8004bf4 <ptr_to_mem>
 8004cf4:	4604      	mov	r4, r0
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f7ff ff8e 	bl	8004c18 <mem_to_ptr>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	885b      	ldrh	r3, [r3, #2]
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7ff ff75 	bl	8004bf4 <ptr_to_mem>
 8004d0a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d01f      	beq.n	8004d54 <plug_holes+0x118>
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	791b      	ldrb	r3, [r3, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d11b      	bne.n	8004d54 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004d1c:	4b17      	ldr	r3, [pc, #92]	; (8004d7c <plug_holes+0x140>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d102      	bne.n	8004d2c <plug_holes+0xf0>
      lfree = pmem;
 8004d26:	4a15      	ldr	r2, [pc, #84]	; (8004d7c <plug_holes+0x140>)
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	881a      	ldrh	r2, [r3, #0]
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	881b      	ldrh	r3, [r3, #0]
 8004d38:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004d3c:	d00a      	beq.n	8004d54 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	881b      	ldrh	r3, [r3, #0]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7ff ff56 	bl	8004bf4 <ptr_to_mem>
 8004d48:	4604      	mov	r4, r0
 8004d4a:	68b8      	ldr	r0, [r7, #8]
 8004d4c:	f7ff ff64 	bl	8004c18 <mem_to_ptr>
 8004d50:	4603      	mov	r3, r0
 8004d52:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8004d54:	bf00      	nop
 8004d56:	3714      	adds	r7, #20
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd90      	pop	{r4, r7, pc}
 8004d5c:	200004f8 	.word	0x200004f8
 8004d60:	08010a18 	.word	0x08010a18
 8004d64:	08010a48 	.word	0x08010a48
 8004d68:	08010a60 	.word	0x08010a60
 8004d6c:	200004fc 	.word	0x200004fc
 8004d70:	08010a88 	.word	0x08010a88
 8004d74:	08010aa4 	.word	0x08010aa4
 8004d78:	08010ac0 	.word	0x08010ac0
 8004d7c:	20000500 	.word	0x20000500

08004d80 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004d86:	4b18      	ldr	r3, [pc, #96]	; (8004de8 <mem_init+0x68>)
 8004d88:	3303      	adds	r3, #3
 8004d8a:	f023 0303 	bic.w	r3, r3, #3
 8004d8e:	461a      	mov	r2, r3
 8004d90:	4b16      	ldr	r3, [pc, #88]	; (8004dec <mem_init+0x6c>)
 8004d92:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004d94:	4b15      	ldr	r3, [pc, #84]	; (8004dec <mem_init+0x6c>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8004da0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8004dae:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8004db2:	f7ff ff1f 	bl	8004bf4 <ptr_to_mem>
 8004db6:	4603      	mov	r3, r0
 8004db8:	4a0d      	ldr	r2, [pc, #52]	; (8004df0 <mem_init+0x70>)
 8004dba:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8004dbc:	4b0c      	ldr	r3, [pc, #48]	; (8004df0 <mem_init+0x70>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004dc4:	4b0a      	ldr	r3, [pc, #40]	; (8004df0 <mem_init+0x70>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8004dcc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004dce:	4b08      	ldr	r3, [pc, #32]	; (8004df0 <mem_init+0x70>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8004dd6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004dd8:	4b04      	ldr	r3, [pc, #16]	; (8004dec <mem_init+0x6c>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a05      	ldr	r2, [pc, #20]	; (8004df4 <mem_init+0x74>)
 8004dde:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004de0:	bf00      	nop
 8004de2:	3708      	adds	r7, #8
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	200037c0 	.word	0x200037c0
 8004dec:	200004f8 	.word	0x200004f8
 8004df0:	200004fc 	.word	0x200004fc
 8004df4:	20000500 	.word	0x20000500

08004df8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f7ff ff09 	bl	8004c18 <mem_to_ptr>
 8004e06:	4603      	mov	r3, r0
 8004e08:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	881b      	ldrh	r3, [r3, #0]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7ff fef0 	bl	8004bf4 <ptr_to_mem>
 8004e14:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	885b      	ldrh	r3, [r3, #2]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7ff feea 	bl	8004bf4 <ptr_to_mem>
 8004e20:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	881b      	ldrh	r3, [r3, #0]
 8004e26:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004e2a:	d818      	bhi.n	8004e5e <mem_link_valid+0x66>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	885b      	ldrh	r3, [r3, #2]
 8004e30:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004e34:	d813      	bhi.n	8004e5e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004e3a:	8afa      	ldrh	r2, [r7, #22]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d004      	beq.n	8004e4a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	881b      	ldrh	r3, [r3, #0]
 8004e44:	8afa      	ldrh	r2, [r7, #22]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d109      	bne.n	8004e5e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004e4a:	4b08      	ldr	r3, [pc, #32]	; (8004e6c <mem_link_valid+0x74>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d006      	beq.n	8004e62 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	885b      	ldrh	r3, [r3, #2]
 8004e58:	8afa      	ldrh	r2, [r7, #22]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d001      	beq.n	8004e62 <mem_link_valid+0x6a>
    return 0;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	e000      	b.n	8004e64 <mem_link_valid+0x6c>
  }
  return 1;
 8004e62:	2301      	movs	r3, #1
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3718      	adds	r7, #24
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	200004fc 	.word	0x200004fc

08004e70 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d04c      	beq.n	8004f18 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f003 0303 	and.w	r3, r3, #3
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d007      	beq.n	8004e98 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004e88:	4b25      	ldr	r3, [pc, #148]	; (8004f20 <mem_free+0xb0>)
 8004e8a:	f240 2273 	movw	r2, #627	; 0x273
 8004e8e:	4925      	ldr	r1, [pc, #148]	; (8004f24 <mem_free+0xb4>)
 8004e90:	4825      	ldr	r0, [pc, #148]	; (8004f28 <mem_free+0xb8>)
 8004e92:	f00a fa29 	bl	800f2e8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004e96:	e040      	b.n	8004f1a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	3b08      	subs	r3, #8
 8004e9c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004e9e:	4b23      	ldr	r3, [pc, #140]	; (8004f2c <mem_free+0xbc>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d306      	bcc.n	8004eb6 <mem_free+0x46>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f103 020c 	add.w	r2, r3, #12
 8004eae:	4b20      	ldr	r3, [pc, #128]	; (8004f30 <mem_free+0xc0>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d907      	bls.n	8004ec6 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004eb6:	4b1a      	ldr	r3, [pc, #104]	; (8004f20 <mem_free+0xb0>)
 8004eb8:	f240 227f 	movw	r2, #639	; 0x27f
 8004ebc:	491d      	ldr	r1, [pc, #116]	; (8004f34 <mem_free+0xc4>)
 8004ebe:	481a      	ldr	r0, [pc, #104]	; (8004f28 <mem_free+0xb8>)
 8004ec0:	f00a fa12 	bl	800f2e8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004ec4:	e029      	b.n	8004f1a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	791b      	ldrb	r3, [r3, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d107      	bne.n	8004ede <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8004ece:	4b14      	ldr	r3, [pc, #80]	; (8004f20 <mem_free+0xb0>)
 8004ed0:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8004ed4:	4918      	ldr	r1, [pc, #96]	; (8004f38 <mem_free+0xc8>)
 8004ed6:	4814      	ldr	r0, [pc, #80]	; (8004f28 <mem_free+0xb8>)
 8004ed8:	f00a fa06 	bl	800f2e8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004edc:	e01d      	b.n	8004f1a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f7ff ff8a 	bl	8004df8 <mem_link_valid>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d107      	bne.n	8004efa <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8004eea:	4b0d      	ldr	r3, [pc, #52]	; (8004f20 <mem_free+0xb0>)
 8004eec:	f240 2295 	movw	r2, #661	; 0x295
 8004ef0:	4912      	ldr	r1, [pc, #72]	; (8004f3c <mem_free+0xcc>)
 8004ef2:	480d      	ldr	r0, [pc, #52]	; (8004f28 <mem_free+0xb8>)
 8004ef4:	f00a f9f8 	bl	800f2e8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004ef8:	e00f      	b.n	8004f1a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004f00:	4b0f      	ldr	r3, [pc, #60]	; (8004f40 <mem_free+0xd0>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d202      	bcs.n	8004f10 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004f0a:	4a0d      	ldr	r2, [pc, #52]	; (8004f40 <mem_free+0xd0>)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f7ff fe93 	bl	8004c3c <plug_holes>
 8004f16:	e000      	b.n	8004f1a <mem_free+0xaa>
    return;
 8004f18:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	08010a18 	.word	0x08010a18
 8004f24:	08010aec 	.word	0x08010aec
 8004f28:	08010a60 	.word	0x08010a60
 8004f2c:	200004f8 	.word	0x200004f8
 8004f30:	200004fc 	.word	0x200004fc
 8004f34:	08010b10 	.word	0x08010b10
 8004f38:	08010b2c 	.word	0x08010b2c
 8004f3c:	08010b54 	.word	0x08010b54
 8004f40:	20000500 	.word	0x20000500

08004f44 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b088      	sub	sp, #32
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8004f50:	887b      	ldrh	r3, [r7, #2]
 8004f52:	3303      	adds	r3, #3
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	f023 0303 	bic.w	r3, r3, #3
 8004f5a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8004f5c:	8bfb      	ldrh	r3, [r7, #30]
 8004f5e:	2b0b      	cmp	r3, #11
 8004f60:	d801      	bhi.n	8004f66 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004f62:	230c      	movs	r3, #12
 8004f64:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8004f66:	8bfb      	ldrh	r3, [r7, #30]
 8004f68:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8004f6c:	d803      	bhi.n	8004f76 <mem_trim+0x32>
 8004f6e:	8bfa      	ldrh	r2, [r7, #30]
 8004f70:	887b      	ldrh	r3, [r7, #2]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d201      	bcs.n	8004f7a <mem_trim+0x36>
    return NULL;
 8004f76:	2300      	movs	r3, #0
 8004f78:	e0cc      	b.n	8005114 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004f7a:	4b68      	ldr	r3, [pc, #416]	; (800511c <mem_trim+0x1d8>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d304      	bcc.n	8004f8e <mem_trim+0x4a>
 8004f84:	4b66      	ldr	r3, [pc, #408]	; (8005120 <mem_trim+0x1dc>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d306      	bcc.n	8004f9c <mem_trim+0x58>
 8004f8e:	4b65      	ldr	r3, [pc, #404]	; (8005124 <mem_trim+0x1e0>)
 8004f90:	f240 22d1 	movw	r2, #721	; 0x2d1
 8004f94:	4964      	ldr	r1, [pc, #400]	; (8005128 <mem_trim+0x1e4>)
 8004f96:	4865      	ldr	r0, [pc, #404]	; (800512c <mem_trim+0x1e8>)
 8004f98:	f00a f9a6 	bl	800f2e8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004f9c:	4b5f      	ldr	r3, [pc, #380]	; (800511c <mem_trim+0x1d8>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d304      	bcc.n	8004fb0 <mem_trim+0x6c>
 8004fa6:	4b5e      	ldr	r3, [pc, #376]	; (8005120 <mem_trim+0x1dc>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d301      	bcc.n	8004fb4 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	e0af      	b.n	8005114 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	3b08      	subs	r3, #8
 8004fb8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8004fba:	69b8      	ldr	r0, [r7, #24]
 8004fbc:	f7ff fe2c 	bl	8004c18 <mem_to_ptr>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	881a      	ldrh	r2, [r3, #0]
 8004fc8:	8afb      	ldrh	r3, [r7, #22]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	3b08      	subs	r3, #8
 8004fd0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004fd2:	8bfa      	ldrh	r2, [r7, #30]
 8004fd4:	8abb      	ldrh	r3, [r7, #20]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d906      	bls.n	8004fe8 <mem_trim+0xa4>
 8004fda:	4b52      	ldr	r3, [pc, #328]	; (8005124 <mem_trim+0x1e0>)
 8004fdc:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8004fe0:	4953      	ldr	r1, [pc, #332]	; (8005130 <mem_trim+0x1ec>)
 8004fe2:	4852      	ldr	r0, [pc, #328]	; (800512c <mem_trim+0x1e8>)
 8004fe4:	f00a f980 	bl	800f2e8 <iprintf>
  if (newsize > size) {
 8004fe8:	8bfa      	ldrh	r2, [r7, #30]
 8004fea:	8abb      	ldrh	r3, [r7, #20]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d901      	bls.n	8004ff4 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	e08f      	b.n	8005114 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8004ff4:	8bfa      	ldrh	r2, [r7, #30]
 8004ff6:	8abb      	ldrh	r3, [r7, #20]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d101      	bne.n	8005000 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	e089      	b.n	8005114 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	881b      	ldrh	r3, [r3, #0]
 8005004:	4618      	mov	r0, r3
 8005006:	f7ff fdf5 	bl	8004bf4 <ptr_to_mem>
 800500a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	791b      	ldrb	r3, [r3, #4]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d13f      	bne.n	8005094 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	881b      	ldrh	r3, [r3, #0]
 8005018:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800501c:	d106      	bne.n	800502c <mem_trim+0xe8>
 800501e:	4b41      	ldr	r3, [pc, #260]	; (8005124 <mem_trim+0x1e0>)
 8005020:	f240 22f5 	movw	r2, #757	; 0x2f5
 8005024:	4943      	ldr	r1, [pc, #268]	; (8005134 <mem_trim+0x1f0>)
 8005026:	4841      	ldr	r0, [pc, #260]	; (800512c <mem_trim+0x1e8>)
 8005028:	f00a f95e 	bl	800f2e8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	881b      	ldrh	r3, [r3, #0]
 8005030:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005032:	8afa      	ldrh	r2, [r7, #22]
 8005034:	8bfb      	ldrh	r3, [r7, #30]
 8005036:	4413      	add	r3, r2
 8005038:	b29b      	uxth	r3, r3
 800503a:	3308      	adds	r3, #8
 800503c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800503e:	4b3e      	ldr	r3, [pc, #248]	; (8005138 <mem_trim+0x1f4>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	429a      	cmp	r2, r3
 8005046:	d106      	bne.n	8005056 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8005048:	89fb      	ldrh	r3, [r7, #14]
 800504a:	4618      	mov	r0, r3
 800504c:	f7ff fdd2 	bl	8004bf4 <ptr_to_mem>
 8005050:	4603      	mov	r3, r0
 8005052:	4a39      	ldr	r2, [pc, #228]	; (8005138 <mem_trim+0x1f4>)
 8005054:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8005056:	89fb      	ldrh	r3, [r7, #14]
 8005058:	4618      	mov	r0, r3
 800505a:	f7ff fdcb 	bl	8004bf4 <ptr_to_mem>
 800505e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	2200      	movs	r2, #0
 8005064:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	89ba      	ldrh	r2, [r7, #12]
 800506a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	8afa      	ldrh	r2, [r7, #22]
 8005070:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	89fa      	ldrh	r2, [r7, #14]
 8005076:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	881b      	ldrh	r3, [r3, #0]
 800507c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005080:	d047      	beq.n	8005112 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	881b      	ldrh	r3, [r3, #0]
 8005086:	4618      	mov	r0, r3
 8005088:	f7ff fdb4 	bl	8004bf4 <ptr_to_mem>
 800508c:	4602      	mov	r2, r0
 800508e:	89fb      	ldrh	r3, [r7, #14]
 8005090:	8053      	strh	r3, [r2, #2]
 8005092:	e03e      	b.n	8005112 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005094:	8bfb      	ldrh	r3, [r7, #30]
 8005096:	f103 0214 	add.w	r2, r3, #20
 800509a:	8abb      	ldrh	r3, [r7, #20]
 800509c:	429a      	cmp	r2, r3
 800509e:	d838      	bhi.n	8005112 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80050a0:	8afa      	ldrh	r2, [r7, #22]
 80050a2:	8bfb      	ldrh	r3, [r7, #30]
 80050a4:	4413      	add	r3, r2
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	3308      	adds	r3, #8
 80050aa:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	881b      	ldrh	r3, [r3, #0]
 80050b0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80050b4:	d106      	bne.n	80050c4 <mem_trim+0x180>
 80050b6:	4b1b      	ldr	r3, [pc, #108]	; (8005124 <mem_trim+0x1e0>)
 80050b8:	f240 3216 	movw	r2, #790	; 0x316
 80050bc:	491d      	ldr	r1, [pc, #116]	; (8005134 <mem_trim+0x1f0>)
 80050be:	481b      	ldr	r0, [pc, #108]	; (800512c <mem_trim+0x1e8>)
 80050c0:	f00a f912 	bl	800f2e8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80050c4:	89fb      	ldrh	r3, [r7, #14]
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7ff fd94 	bl	8004bf4 <ptr_to_mem>
 80050cc:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80050ce:	4b1a      	ldr	r3, [pc, #104]	; (8005138 <mem_trim+0x1f4>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d202      	bcs.n	80050de <mem_trim+0x19a>
      lfree = mem2;
 80050d8:	4a17      	ldr	r2, [pc, #92]	; (8005138 <mem_trim+0x1f4>)
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	2200      	movs	r2, #0
 80050e2:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	881a      	ldrh	r2, [r3, #0]
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	8afa      	ldrh	r2, [r7, #22]
 80050f0:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	89fa      	ldrh	r2, [r7, #14]
 80050f6:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	881b      	ldrh	r3, [r3, #0]
 80050fc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005100:	d007      	beq.n	8005112 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	881b      	ldrh	r3, [r3, #0]
 8005106:	4618      	mov	r0, r3
 8005108:	f7ff fd74 	bl	8004bf4 <ptr_to_mem>
 800510c:	4602      	mov	r2, r0
 800510e:	89fb      	ldrh	r3, [r7, #14]
 8005110:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8005112:	687b      	ldr	r3, [r7, #4]
}
 8005114:	4618      	mov	r0, r3
 8005116:	3720      	adds	r7, #32
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	200004f8 	.word	0x200004f8
 8005120:	200004fc 	.word	0x200004fc
 8005124:	08010a18 	.word	0x08010a18
 8005128:	08010b88 	.word	0x08010b88
 800512c:	08010a60 	.word	0x08010a60
 8005130:	08010ba0 	.word	0x08010ba0
 8005134:	08010bc0 	.word	0x08010bc0
 8005138:	20000500 	.word	0x20000500

0800513c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b088      	sub	sp, #32
 8005140:	af00      	add	r7, sp, #0
 8005142:	4603      	mov	r3, r0
 8005144:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8005146:	88fb      	ldrh	r3, [r7, #6]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d101      	bne.n	8005150 <mem_malloc+0x14>
    return NULL;
 800514c:	2300      	movs	r3, #0
 800514e:	e0d9      	b.n	8005304 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8005150:	88fb      	ldrh	r3, [r7, #6]
 8005152:	3303      	adds	r3, #3
 8005154:	b29b      	uxth	r3, r3
 8005156:	f023 0303 	bic.w	r3, r3, #3
 800515a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800515c:	8bbb      	ldrh	r3, [r7, #28]
 800515e:	2b0b      	cmp	r3, #11
 8005160:	d801      	bhi.n	8005166 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8005162:	230c      	movs	r3, #12
 8005164:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8005166:	8bbb      	ldrh	r3, [r7, #28]
 8005168:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800516c:	d803      	bhi.n	8005176 <mem_malloc+0x3a>
 800516e:	8bba      	ldrh	r2, [r7, #28]
 8005170:	88fb      	ldrh	r3, [r7, #6]
 8005172:	429a      	cmp	r2, r3
 8005174:	d201      	bcs.n	800517a <mem_malloc+0x3e>
    return NULL;
 8005176:	2300      	movs	r3, #0
 8005178:	e0c4      	b.n	8005304 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800517a:	4b64      	ldr	r3, [pc, #400]	; (800530c <mem_malloc+0x1d0>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4618      	mov	r0, r3
 8005180:	f7ff fd4a 	bl	8004c18 <mem_to_ptr>
 8005184:	4603      	mov	r3, r0
 8005186:	83fb      	strh	r3, [r7, #30]
 8005188:	e0b4      	b.n	80052f4 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800518a:	8bfb      	ldrh	r3, [r7, #30]
 800518c:	4618      	mov	r0, r3
 800518e:	f7ff fd31 	bl	8004bf4 <ptr_to_mem>
 8005192:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	791b      	ldrb	r3, [r3, #4]
 8005198:	2b00      	cmp	r3, #0
 800519a:	f040 80a4 	bne.w	80052e6 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	881b      	ldrh	r3, [r3, #0]
 80051a2:	461a      	mov	r2, r3
 80051a4:	8bfb      	ldrh	r3, [r7, #30]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	f1a3 0208 	sub.w	r2, r3, #8
 80051ac:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80051ae:	429a      	cmp	r2, r3
 80051b0:	f0c0 8099 	bcc.w	80052e6 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	881b      	ldrh	r3, [r3, #0]
 80051b8:	461a      	mov	r2, r3
 80051ba:	8bfb      	ldrh	r3, [r7, #30]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	f1a3 0208 	sub.w	r2, r3, #8
 80051c2:	8bbb      	ldrh	r3, [r7, #28]
 80051c4:	3314      	adds	r3, #20
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d333      	bcc.n	8005232 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80051ca:	8bfa      	ldrh	r2, [r7, #30]
 80051cc:	8bbb      	ldrh	r3, [r7, #28]
 80051ce:	4413      	add	r3, r2
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	3308      	adds	r3, #8
 80051d4:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80051d6:	8a7b      	ldrh	r3, [r7, #18]
 80051d8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80051dc:	d106      	bne.n	80051ec <mem_malloc+0xb0>
 80051de:	4b4c      	ldr	r3, [pc, #304]	; (8005310 <mem_malloc+0x1d4>)
 80051e0:	f240 3287 	movw	r2, #903	; 0x387
 80051e4:	494b      	ldr	r1, [pc, #300]	; (8005314 <mem_malloc+0x1d8>)
 80051e6:	484c      	ldr	r0, [pc, #304]	; (8005318 <mem_malloc+0x1dc>)
 80051e8:	f00a f87e 	bl	800f2e8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80051ec:	8a7b      	ldrh	r3, [r7, #18]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7ff fd00 	bl	8004bf4 <ptr_to_mem>
 80051f4:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	881a      	ldrh	r2, [r3, #0]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	8bfa      	ldrh	r2, [r7, #30]
 8005208:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	8a7a      	ldrh	r2, [r7, #18]
 800520e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	2201      	movs	r2, #1
 8005214:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	881b      	ldrh	r3, [r3, #0]
 800521a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800521e:	d00b      	beq.n	8005238 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	881b      	ldrh	r3, [r3, #0]
 8005224:	4618      	mov	r0, r3
 8005226:	f7ff fce5 	bl	8004bf4 <ptr_to_mem>
 800522a:	4602      	mov	r2, r0
 800522c:	8a7b      	ldrh	r3, [r7, #18]
 800522e:	8053      	strh	r3, [r2, #2]
 8005230:	e002      	b.n	8005238 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	2201      	movs	r2, #1
 8005236:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8005238:	4b34      	ldr	r3, [pc, #208]	; (800530c <mem_malloc+0x1d0>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	429a      	cmp	r2, r3
 8005240:	d127      	bne.n	8005292 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8005242:	4b32      	ldr	r3, [pc, #200]	; (800530c <mem_malloc+0x1d0>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8005248:	e005      	b.n	8005256 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	881b      	ldrh	r3, [r3, #0]
 800524e:	4618      	mov	r0, r3
 8005250:	f7ff fcd0 	bl	8004bf4 <ptr_to_mem>
 8005254:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	791b      	ldrb	r3, [r3, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d004      	beq.n	8005268 <mem_malloc+0x12c>
 800525e:	4b2f      	ldr	r3, [pc, #188]	; (800531c <mem_malloc+0x1e0>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	69ba      	ldr	r2, [r7, #24]
 8005264:	429a      	cmp	r2, r3
 8005266:	d1f0      	bne.n	800524a <mem_malloc+0x10e>
          }
          lfree = cur;
 8005268:	4a28      	ldr	r2, [pc, #160]	; (800530c <mem_malloc+0x1d0>)
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800526e:	4b27      	ldr	r3, [pc, #156]	; (800530c <mem_malloc+0x1d0>)
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	4b2a      	ldr	r3, [pc, #168]	; (800531c <mem_malloc+0x1e0>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	429a      	cmp	r2, r3
 8005278:	d00b      	beq.n	8005292 <mem_malloc+0x156>
 800527a:	4b24      	ldr	r3, [pc, #144]	; (800530c <mem_malloc+0x1d0>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	791b      	ldrb	r3, [r3, #4]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d006      	beq.n	8005292 <mem_malloc+0x156>
 8005284:	4b22      	ldr	r3, [pc, #136]	; (8005310 <mem_malloc+0x1d4>)
 8005286:	f240 32b5 	movw	r2, #949	; 0x3b5
 800528a:	4925      	ldr	r1, [pc, #148]	; (8005320 <mem_malloc+0x1e4>)
 800528c:	4822      	ldr	r0, [pc, #136]	; (8005318 <mem_malloc+0x1dc>)
 800528e:	f00a f82b 	bl	800f2e8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005292:	8bba      	ldrh	r2, [r7, #28]
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	4413      	add	r3, r2
 8005298:	3308      	adds	r3, #8
 800529a:	4a20      	ldr	r2, [pc, #128]	; (800531c <mem_malloc+0x1e0>)
 800529c:	6812      	ldr	r2, [r2, #0]
 800529e:	4293      	cmp	r3, r2
 80052a0:	d906      	bls.n	80052b0 <mem_malloc+0x174>
 80052a2:	4b1b      	ldr	r3, [pc, #108]	; (8005310 <mem_malloc+0x1d4>)
 80052a4:	f240 32b9 	movw	r2, #953	; 0x3b9
 80052a8:	491e      	ldr	r1, [pc, #120]	; (8005324 <mem_malloc+0x1e8>)
 80052aa:	481b      	ldr	r0, [pc, #108]	; (8005318 <mem_malloc+0x1dc>)
 80052ac:	f00a f81c 	bl	800f2e8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	f003 0303 	and.w	r3, r3, #3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d006      	beq.n	80052c8 <mem_malloc+0x18c>
 80052ba:	4b15      	ldr	r3, [pc, #84]	; (8005310 <mem_malloc+0x1d4>)
 80052bc:	f240 32bb 	movw	r2, #955	; 0x3bb
 80052c0:	4919      	ldr	r1, [pc, #100]	; (8005328 <mem_malloc+0x1ec>)
 80052c2:	4815      	ldr	r0, [pc, #84]	; (8005318 <mem_malloc+0x1dc>)
 80052c4:	f00a f810 	bl	800f2e8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	f003 0303 	and.w	r3, r3, #3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d006      	beq.n	80052e0 <mem_malloc+0x1a4>
 80052d2:	4b0f      	ldr	r3, [pc, #60]	; (8005310 <mem_malloc+0x1d4>)
 80052d4:	f240 32bd 	movw	r2, #957	; 0x3bd
 80052d8:	4914      	ldr	r1, [pc, #80]	; (800532c <mem_malloc+0x1f0>)
 80052da:	480f      	ldr	r0, [pc, #60]	; (8005318 <mem_malloc+0x1dc>)
 80052dc:	f00a f804 	bl	800f2e8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	3308      	adds	r3, #8
 80052e4:	e00e      	b.n	8005304 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80052e6:	8bfb      	ldrh	r3, [r7, #30]
 80052e8:	4618      	mov	r0, r3
 80052ea:	f7ff fc83 	bl	8004bf4 <ptr_to_mem>
 80052ee:	4603      	mov	r3, r0
 80052f0:	881b      	ldrh	r3, [r3, #0]
 80052f2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80052f4:	8bfa      	ldrh	r2, [r7, #30]
 80052f6:	8bbb      	ldrh	r3, [r7, #28]
 80052f8:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 80052fc:	429a      	cmp	r2, r3
 80052fe:	f4ff af44 	bcc.w	800518a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3720      	adds	r7, #32
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	20000500 	.word	0x20000500
 8005310:	08010a18 	.word	0x08010a18
 8005314:	08010bc0 	.word	0x08010bc0
 8005318:	08010a60 	.word	0x08010a60
 800531c:	200004fc 	.word	0x200004fc
 8005320:	08010bd4 	.word	0x08010bd4
 8005324:	08010bf0 	.word	0x08010bf0
 8005328:	08010c20 	.word	0x08010c20
 800532c:	08010c50 	.word	0x08010c50

08005330 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	2200      	movs	r2, #0
 800533e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	3303      	adds	r3, #3
 8005346:	f023 0303 	bic.w	r3, r3, #3
 800534a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800534c:	2300      	movs	r3, #0
 800534e:	60fb      	str	r3, [r7, #12]
 8005350:	e011      	b.n	8005376 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	881b      	ldrh	r3, [r3, #0]
 8005368:	461a      	mov	r2, r3
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	4413      	add	r3, r2
 800536e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	3301      	adds	r3, #1
 8005374:	60fb      	str	r3, [r7, #12]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	885b      	ldrh	r3, [r3, #2]
 800537a:	461a      	mov	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	4293      	cmp	r3, r2
 8005380:	dbe7      	blt.n	8005352 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8005382:	bf00      	nop
 8005384:	bf00      	nop
 8005386:	3714      	adds	r7, #20
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005396:	2300      	movs	r3, #0
 8005398:	80fb      	strh	r3, [r7, #6]
 800539a:	e009      	b.n	80053b0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800539c:	88fb      	ldrh	r3, [r7, #6]
 800539e:	4a08      	ldr	r2, [pc, #32]	; (80053c0 <memp_init+0x30>)
 80053a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7ff ffc3 	bl	8005330 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80053aa:	88fb      	ldrh	r3, [r7, #6]
 80053ac:	3301      	adds	r3, #1
 80053ae:	80fb      	strh	r3, [r7, #6]
 80053b0:	88fb      	ldrh	r3, [r7, #6]
 80053b2:	2b08      	cmp	r3, #8
 80053b4:	d9f2      	bls.n	800539c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80053b6:	bf00      	nop
 80053b8:	bf00      	nop
 80053ba:	3708      	adds	r7, #8
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	080142b0 	.word	0x080142b0

080053c4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d012      	beq.n	8005400 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	6812      	ldr	r2, [r2, #0]
 80053e2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f003 0303 	and.w	r3, r3, #3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d006      	beq.n	80053fc <do_memp_malloc_pool+0x38>
 80053ee:	4b07      	ldr	r3, [pc, #28]	; (800540c <do_memp_malloc_pool+0x48>)
 80053f0:	f44f 728c 	mov.w	r2, #280	; 0x118
 80053f4:	4906      	ldr	r1, [pc, #24]	; (8005410 <do_memp_malloc_pool+0x4c>)
 80053f6:	4807      	ldr	r0, [pc, #28]	; (8005414 <do_memp_malloc_pool+0x50>)
 80053f8:	f009 ff76 	bl	800f2e8 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	e000      	b.n	8005402 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	08010c74 	.word	0x08010c74
 8005410:	08010ca4 	.word	0x08010ca4
 8005414:	08010cc8 	.word	0x08010cc8

08005418 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	4603      	mov	r3, r0
 8005420:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005422:	79fb      	ldrb	r3, [r7, #7]
 8005424:	2b08      	cmp	r3, #8
 8005426:	d908      	bls.n	800543a <memp_malloc+0x22>
 8005428:	4b0a      	ldr	r3, [pc, #40]	; (8005454 <memp_malloc+0x3c>)
 800542a:	f240 1257 	movw	r2, #343	; 0x157
 800542e:	490a      	ldr	r1, [pc, #40]	; (8005458 <memp_malloc+0x40>)
 8005430:	480a      	ldr	r0, [pc, #40]	; (800545c <memp_malloc+0x44>)
 8005432:	f009 ff59 	bl	800f2e8 <iprintf>
 8005436:	2300      	movs	r3, #0
 8005438:	e008      	b.n	800544c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800543a:	79fb      	ldrb	r3, [r7, #7]
 800543c:	4a08      	ldr	r2, [pc, #32]	; (8005460 <memp_malloc+0x48>)
 800543e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005442:	4618      	mov	r0, r3
 8005444:	f7ff ffbe 	bl	80053c4 <do_memp_malloc_pool>
 8005448:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800544a:	68fb      	ldr	r3, [r7, #12]
}
 800544c:	4618      	mov	r0, r3
 800544e:	3710      	adds	r7, #16
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	08010c74 	.word	0x08010c74
 8005458:	08010d04 	.word	0x08010d04
 800545c:	08010cc8 	.word	0x08010cc8
 8005460:	080142b0 	.word	0x080142b0

08005464 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	f003 0303 	and.w	r3, r3, #3
 8005474:	2b00      	cmp	r3, #0
 8005476:	d006      	beq.n	8005486 <do_memp_free_pool+0x22>
 8005478:	4b0a      	ldr	r3, [pc, #40]	; (80054a4 <do_memp_free_pool+0x40>)
 800547a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800547e:	490a      	ldr	r1, [pc, #40]	; (80054a8 <do_memp_free_pool+0x44>)
 8005480:	480a      	ldr	r0, [pc, #40]	; (80054ac <do_memp_free_pool+0x48>)
 8005482:	f009 ff31 	bl	800f2e8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800549c:	bf00      	nop
 800549e:	3710      	adds	r7, #16
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	08010c74 	.word	0x08010c74
 80054a8:	08010d24 	.word	0x08010d24
 80054ac:	08010cc8 	.word	0x08010cc8

080054b0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	4603      	mov	r3, r0
 80054b8:	6039      	str	r1, [r7, #0]
 80054ba:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80054bc:	79fb      	ldrb	r3, [r7, #7]
 80054be:	2b08      	cmp	r3, #8
 80054c0:	d907      	bls.n	80054d2 <memp_free+0x22>
 80054c2:	4b0c      	ldr	r3, [pc, #48]	; (80054f4 <memp_free+0x44>)
 80054c4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80054c8:	490b      	ldr	r1, [pc, #44]	; (80054f8 <memp_free+0x48>)
 80054ca:	480c      	ldr	r0, [pc, #48]	; (80054fc <memp_free+0x4c>)
 80054cc:	f009 ff0c 	bl	800f2e8 <iprintf>
 80054d0:	e00c      	b.n	80054ec <memp_free+0x3c>

  if (mem == NULL) {
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d008      	beq.n	80054ea <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80054d8:	79fb      	ldrb	r3, [r7, #7]
 80054da:	4a09      	ldr	r2, [pc, #36]	; (8005500 <memp_free+0x50>)
 80054dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054e0:	6839      	ldr	r1, [r7, #0]
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7ff ffbe 	bl	8005464 <do_memp_free_pool>
 80054e8:	e000      	b.n	80054ec <memp_free+0x3c>
    return;
 80054ea:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80054ec:	3708      	adds	r7, #8
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	08010c74 	.word	0x08010c74
 80054f8:	08010d44 	.word	0x08010d44
 80054fc:	08010cc8 	.word	0x08010cc8
 8005500:	080142b0 	.word	0x080142b0

08005504 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8005504:	b480      	push	{r7}
 8005506:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005508:	bf00      	nop
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
	...

08005514 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b086      	sub	sp, #24
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]
 8005520:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d108      	bne.n	800553a <netif_add+0x26>
 8005528:	4b57      	ldr	r3, [pc, #348]	; (8005688 <netif_add+0x174>)
 800552a:	f240 1227 	movw	r2, #295	; 0x127
 800552e:	4957      	ldr	r1, [pc, #348]	; (800568c <netif_add+0x178>)
 8005530:	4857      	ldr	r0, [pc, #348]	; (8005690 <netif_add+0x17c>)
 8005532:	f009 fed9 	bl	800f2e8 <iprintf>
 8005536:	2300      	movs	r3, #0
 8005538:	e0a2      	b.n	8005680 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	2b00      	cmp	r3, #0
 800553e:	d108      	bne.n	8005552 <netif_add+0x3e>
 8005540:	4b51      	ldr	r3, [pc, #324]	; (8005688 <netif_add+0x174>)
 8005542:	f44f 7294 	mov.w	r2, #296	; 0x128
 8005546:	4953      	ldr	r1, [pc, #332]	; (8005694 <netif_add+0x180>)
 8005548:	4851      	ldr	r0, [pc, #324]	; (8005690 <netif_add+0x17c>)
 800554a:	f009 fecd 	bl	800f2e8 <iprintf>
 800554e:	2300      	movs	r3, #0
 8005550:	e096      	b.n	8005680 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d101      	bne.n	800555c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8005558:	4b4f      	ldr	r3, [pc, #316]	; (8005698 <netif_add+0x184>)
 800555a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8005562:	4b4d      	ldr	r3, [pc, #308]	; (8005698 <netif_add+0x184>)
 8005564:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d101      	bne.n	8005570 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800556c:	4b4a      	ldr	r3, [pc, #296]	; (8005698 <netif_add+0x184>)
 800556e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	4a45      	ldr	r2, [pc, #276]	; (800569c <netif_add+0x188>)
 8005586:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6a3a      	ldr	r2, [r7, #32]
 80055a0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80055a2:	4b3f      	ldr	r3, [pc, #252]	; (80056a0 <netif_add+0x18c>)
 80055a4:	781a      	ldrb	r2, [r3, #0]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055b0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	68b9      	ldr	r1, [r7, #8]
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	f000 f913 	bl	80057e4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80055be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	4798      	blx	r3
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <netif_add+0xba>
    return NULL;
 80055ca:	2300      	movs	r3, #0
 80055cc:	e058      	b.n	8005680 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80055d4:	2bff      	cmp	r3, #255	; 0xff
 80055d6:	d103      	bne.n	80055e0 <netif_add+0xcc>
        netif->num = 0;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80055e0:	2300      	movs	r3, #0
 80055e2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80055e4:	4b2f      	ldr	r3, [pc, #188]	; (80056a4 <netif_add+0x190>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	617b      	str	r3, [r7, #20]
 80055ea:	e02b      	b.n	8005644 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d106      	bne.n	8005602 <netif_add+0xee>
 80055f4:	4b24      	ldr	r3, [pc, #144]	; (8005688 <netif_add+0x174>)
 80055f6:	f240 128b 	movw	r2, #395	; 0x18b
 80055fa:	492b      	ldr	r1, [pc, #172]	; (80056a8 <netif_add+0x194>)
 80055fc:	4824      	ldr	r0, [pc, #144]	; (8005690 <netif_add+0x17c>)
 80055fe:	f009 fe73 	bl	800f2e8 <iprintf>
        num_netifs++;
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	3301      	adds	r3, #1
 8005606:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	2bff      	cmp	r3, #255	; 0xff
 800560c:	dd06      	ble.n	800561c <netif_add+0x108>
 800560e:	4b1e      	ldr	r3, [pc, #120]	; (8005688 <netif_add+0x174>)
 8005610:	f240 128d 	movw	r2, #397	; 0x18d
 8005614:	4925      	ldr	r1, [pc, #148]	; (80056ac <netif_add+0x198>)
 8005616:	481e      	ldr	r0, [pc, #120]	; (8005690 <netif_add+0x17c>)
 8005618:	f009 fe66 	bl	800f2e8 <iprintf>
        if (netif2->num == netif->num) {
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005628:	429a      	cmp	r2, r3
 800562a:	d108      	bne.n	800563e <netif_add+0x12a>
          netif->num++;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005632:	3301      	adds	r3, #1
 8005634:	b2da      	uxtb	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800563c:	e005      	b.n	800564a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	617b      	str	r3, [r7, #20]
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1d0      	bne.n	80055ec <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1be      	bne.n	80055ce <netif_add+0xba>
  }
  if (netif->num == 254) {
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005656:	2bfe      	cmp	r3, #254	; 0xfe
 8005658:	d103      	bne.n	8005662 <netif_add+0x14e>
    netif_num = 0;
 800565a:	4b11      	ldr	r3, [pc, #68]	; (80056a0 <netif_add+0x18c>)
 800565c:	2200      	movs	r2, #0
 800565e:	701a      	strb	r2, [r3, #0]
 8005660:	e006      	b.n	8005670 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005668:	3301      	adds	r3, #1
 800566a:	b2da      	uxtb	r2, r3
 800566c:	4b0c      	ldr	r3, [pc, #48]	; (80056a0 <netif_add+0x18c>)
 800566e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005670:	4b0c      	ldr	r3, [pc, #48]	; (80056a4 <netif_add+0x190>)
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8005678:	4a0a      	ldr	r2, [pc, #40]	; (80056a4 <netif_add+0x190>)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800567e:	68fb      	ldr	r3, [r7, #12]
}
 8005680:	4618      	mov	r0, r3
 8005682:	3718      	adds	r7, #24
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	08010d60 	.word	0x08010d60
 800568c:	08010df4 	.word	0x08010df4
 8005690:	08010db0 	.word	0x08010db0
 8005694:	08010e10 	.word	0x08010e10
 8005698:	08014314 	.word	0x08014314
 800569c:	080059f7 	.word	0x080059f7
 80056a0:	20000528 	.word	0x20000528
 80056a4:	20008e9c 	.word	0x20008e9c
 80056a8:	08010e34 	.word	0x08010e34
 80056ac:	08010e48 	.word	0x08010e48

080056b0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80056ba:	6839      	ldr	r1, [r7, #0]
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f002 fd85 	bl	80081cc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80056c2:	6839      	ldr	r1, [r7, #0]
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f007 fabd 	bl	800cc44 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80056ca:	bf00      	nop
 80056cc:	3708      	adds	r7, #8
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
	...

080056d4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b086      	sub	sp, #24
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d106      	bne.n	80056f4 <netif_do_set_ipaddr+0x20>
 80056e6:	4b1d      	ldr	r3, [pc, #116]	; (800575c <netif_do_set_ipaddr+0x88>)
 80056e8:	f240 12cb 	movw	r2, #459	; 0x1cb
 80056ec:	491c      	ldr	r1, [pc, #112]	; (8005760 <netif_do_set_ipaddr+0x8c>)
 80056ee:	481d      	ldr	r0, [pc, #116]	; (8005764 <netif_do_set_ipaddr+0x90>)
 80056f0:	f009 fdfa 	bl	800f2e8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d106      	bne.n	8005708 <netif_do_set_ipaddr+0x34>
 80056fa:	4b18      	ldr	r3, [pc, #96]	; (800575c <netif_do_set_ipaddr+0x88>)
 80056fc:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8005700:	4917      	ldr	r1, [pc, #92]	; (8005760 <netif_do_set_ipaddr+0x8c>)
 8005702:	4818      	ldr	r0, [pc, #96]	; (8005764 <netif_do_set_ipaddr+0x90>)
 8005704:	f009 fdf0 	bl	800f2e8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	3304      	adds	r3, #4
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	429a      	cmp	r2, r3
 8005714:	d01c      	beq.n	8005750 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	3304      	adds	r3, #4
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8005726:	f107 0314 	add.w	r3, r7, #20
 800572a:	4619      	mov	r1, r3
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f7ff ffbf 	bl	80056b0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d002      	beq.n	800573e <netif_do_set_ipaddr+0x6a>
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	e000      	b.n	8005740 <netif_do_set_ipaddr+0x6c>
 800573e:	2300      	movs	r3, #0
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8005744:	2101      	movs	r1, #1
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f000 f8d2 	bl	80058f0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800574c:	2301      	movs	r3, #1
 800574e:	e000      	b.n	8005752 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3718      	adds	r7, #24
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	08010d60 	.word	0x08010d60
 8005760:	08010e78 	.word	0x08010e78
 8005764:	08010db0 	.word	0x08010db0

08005768 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	3308      	adds	r3, #8
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	429a      	cmp	r2, r3
 8005780:	d00a      	beq.n	8005798 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d002      	beq.n	800578e <netif_do_set_netmask+0x26>
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	e000      	b.n	8005790 <netif_do_set_netmask+0x28>
 800578e:	2300      	movs	r3, #0
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8005794:	2301      	movs	r3, #1
 8005796:	e000      	b.n	800579a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3714      	adds	r7, #20
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b085      	sub	sp, #20
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	60f8      	str	r0, [r7, #12]
 80057ae:	60b9      	str	r1, [r7, #8]
 80057b0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	330c      	adds	r3, #12
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d00a      	beq.n	80057d6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d002      	beq.n	80057cc <netif_do_set_gw+0x26>
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	e000      	b.n	80057ce <netif_do_set_gw+0x28>
 80057cc:	2300      	movs	r3, #0
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80057d2:	2301      	movs	r3, #1
 80057d4:	e000      	b.n	80057d8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3714      	adds	r7, #20
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b088      	sub	sp, #32
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]
 80057f0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80057f2:	2300      	movs	r3, #0
 80057f4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80057f6:	2300      	movs	r3, #0
 80057f8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d101      	bne.n	8005804 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8005800:	4b1c      	ldr	r3, [pc, #112]	; (8005874 <netif_set_addr+0x90>)
 8005802:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d101      	bne.n	800580e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800580a:	4b1a      	ldr	r3, [pc, #104]	; (8005874 <netif_set_addr+0x90>)
 800580c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d101      	bne.n	8005818 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8005814:	4b17      	ldr	r3, [pc, #92]	; (8005874 <netif_set_addr+0x90>)
 8005816:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d003      	beq.n	8005826 <netif_set_addr+0x42>
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <netif_set_addr+0x46>
 8005826:	2301      	movs	r3, #1
 8005828:	e000      	b.n	800582c <netif_set_addr+0x48>
 800582a:	2300      	movs	r3, #0
 800582c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d006      	beq.n	8005842 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005834:	f107 0310 	add.w	r3, r7, #16
 8005838:	461a      	mov	r2, r3
 800583a:	68b9      	ldr	r1, [r7, #8]
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f7ff ff49 	bl	80056d4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8005842:	69fa      	ldr	r2, [r7, #28]
 8005844:	6879      	ldr	r1, [r7, #4]
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	f7ff ff8e 	bl	8005768 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800584c:	69ba      	ldr	r2, [r7, #24]
 800584e:	6839      	ldr	r1, [r7, #0]
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f7ff ffa8 	bl	80057a6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d106      	bne.n	800586a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800585c:	f107 0310 	add.w	r3, r7, #16
 8005860:	461a      	mov	r2, r3
 8005862:	68b9      	ldr	r1, [r7, #8]
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f7ff ff35 	bl	80056d4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800586a:	bf00      	nop
 800586c:	3720      	adds	r7, #32
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	08014314 	.word	0x08014314

08005878 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005880:	4a04      	ldr	r2, [pc, #16]	; (8005894 <netif_set_default+0x1c>)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8005886:	bf00      	nop
 8005888:	370c      	adds	r7, #12
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	20008ea0 	.word	0x20008ea0

08005898 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d107      	bne.n	80058b6 <netif_set_up+0x1e>
 80058a6:	4b0f      	ldr	r3, [pc, #60]	; (80058e4 <netif_set_up+0x4c>)
 80058a8:	f44f 7254 	mov.w	r2, #848	; 0x350
 80058ac:	490e      	ldr	r1, [pc, #56]	; (80058e8 <netif_set_up+0x50>)
 80058ae:	480f      	ldr	r0, [pc, #60]	; (80058ec <netif_set_up+0x54>)
 80058b0:	f009 fd1a 	bl	800f2e8 <iprintf>
 80058b4:	e013      	b.n	80058de <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80058bc:	f003 0301 	and.w	r3, r3, #1
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10c      	bne.n	80058de <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80058ca:	f043 0301 	orr.w	r3, r3, #1
 80058ce:	b2da      	uxtb	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80058d6:	2103      	movs	r1, #3
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 f809 	bl	80058f0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80058de:	3708      	adds	r7, #8
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	08010d60 	.word	0x08010d60
 80058e8:	08010ee8 	.word	0x08010ee8
 80058ec:	08010db0 	.word	0x08010db0

080058f0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	460b      	mov	r3, r1
 80058fa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d106      	bne.n	8005910 <netif_issue_reports+0x20>
 8005902:	4b18      	ldr	r3, [pc, #96]	; (8005964 <netif_issue_reports+0x74>)
 8005904:	f240 326d 	movw	r2, #877	; 0x36d
 8005908:	4917      	ldr	r1, [pc, #92]	; (8005968 <netif_issue_reports+0x78>)
 800590a:	4818      	ldr	r0, [pc, #96]	; (800596c <netif_issue_reports+0x7c>)
 800590c:	f009 fcec 	bl	800f2e8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005916:	f003 0304 	and.w	r3, r3, #4
 800591a:	2b00      	cmp	r3, #0
 800591c:	d01e      	beq.n	800595c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005924:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005928:	2b00      	cmp	r3, #0
 800592a:	d017      	beq.n	800595c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800592c:	78fb      	ldrb	r3, [r7, #3]
 800592e:	f003 0301 	and.w	r3, r3, #1
 8005932:	2b00      	cmp	r3, #0
 8005934:	d013      	beq.n	800595e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	3304      	adds	r3, #4
 800593a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00e      	beq.n	800595e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005946:	f003 0308 	and.w	r3, r3, #8
 800594a:	2b00      	cmp	r3, #0
 800594c:	d007      	beq.n	800595e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	3304      	adds	r3, #4
 8005952:	4619      	mov	r1, r3
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f008 f8df 	bl	800db18 <etharp_request>
 800595a:	e000      	b.n	800595e <netif_issue_reports+0x6e>
    return;
 800595c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800595e:	3708      	adds	r7, #8
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	08010d60 	.word	0x08010d60
 8005968:	08010f04 	.word	0x08010f04
 800596c:	08010db0 	.word	0x08010db0

08005970 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d107      	bne.n	800598e <netif_set_down+0x1e>
 800597e:	4b12      	ldr	r3, [pc, #72]	; (80059c8 <netif_set_down+0x58>)
 8005980:	f240 329b 	movw	r2, #923	; 0x39b
 8005984:	4911      	ldr	r1, [pc, #68]	; (80059cc <netif_set_down+0x5c>)
 8005986:	4812      	ldr	r0, [pc, #72]	; (80059d0 <netif_set_down+0x60>)
 8005988:	f009 fcae 	bl	800f2e8 <iprintf>
 800598c:	e019      	b.n	80059c2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005994:	f003 0301 	and.w	r3, r3, #1
 8005998:	2b00      	cmp	r3, #0
 800599a:	d012      	beq.n	80059c2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80059a2:	f023 0301 	bic.w	r3, r3, #1
 80059a6:	b2da      	uxtb	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80059b4:	f003 0308 	and.w	r3, r3, #8
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d002      	beq.n	80059c2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f007 fc69 	bl	800d294 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80059c2:	3708      	adds	r7, #8
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	08010d60 	.word	0x08010d60
 80059cc:	08010f28 	.word	0x08010f28
 80059d0:	08010db0 	.word	0x08010db0

080059d4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d002      	beq.n	80059ea <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	683a      	ldr	r2, [r7, #0]
 80059e8:	61da      	str	r2, [r3, #28]
  }
}
 80059ea:	bf00      	nop
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80059f6:	b480      	push	{r7}
 80059f8:	b085      	sub	sp, #20
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	60f8      	str	r0, [r7, #12]
 80059fe:	60b9      	str	r1, [r7, #8]
 8005a00:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8005a02:	f06f 030b 	mvn.w	r3, #11
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3714      	adds	r7, #20
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
	...

08005a14 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8005a1e:	79fb      	ldrb	r3, [r7, #7]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d013      	beq.n	8005a4c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8005a24:	4b0d      	ldr	r3, [pc, #52]	; (8005a5c <netif_get_by_index+0x48>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	60fb      	str	r3, [r7, #12]
 8005a2a:	e00c      	b.n	8005a46 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a32:	3301      	adds	r3, #1
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	79fa      	ldrb	r2, [r7, #7]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d101      	bne.n	8005a40 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	e006      	b.n	8005a4e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	60fb      	str	r3, [r7, #12]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1ef      	bne.n	8005a2c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3714      	adds	r7, #20
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	20008e9c 	.word	0x20008e9c

08005a60 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8005a66:	4b0c      	ldr	r3, [pc, #48]	; (8005a98 <pbuf_free_ooseq+0x38>)
 8005a68:	2200      	movs	r2, #0
 8005a6a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005a6c:	4b0b      	ldr	r3, [pc, #44]	; (8005a9c <pbuf_free_ooseq+0x3c>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	607b      	str	r3, [r7, #4]
 8005a72:	e00a      	b.n	8005a8a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d003      	beq.n	8005a84 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f002 fbe3 	bl	8008248 <tcp_free_ooseq>
      return;
 8005a82:	e005      	b.n	8005a90 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	607b      	str	r3, [r7, #4]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1f1      	bne.n	8005a74 <pbuf_free_ooseq+0x14>
    }
  }
}
 8005a90:	3708      	adds	r7, #8
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	20008ea4 	.word	0x20008ea4
 8005a9c:	20008eac 	.word	0x20008eac

08005aa0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005aa4:	4b03      	ldr	r3, [pc, #12]	; (8005ab4 <pbuf_pool_is_empty+0x14>)
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8005aaa:	bf00      	nop
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr
 8005ab4:	20008ea4 	.word	0x20008ea4

08005ab8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	4611      	mov	r1, r2
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	80fb      	strh	r3, [r7, #6]
 8005aca:	4613      	mov	r3, r2
 8005acc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	68ba      	ldr	r2, [r7, #8]
 8005ad8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	88fa      	ldrh	r2, [r7, #6]
 8005ade:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	88ba      	ldrh	r2, [r7, #4]
 8005ae4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8005ae6:	8b3b      	ldrh	r3, [r7, #24]
 8005ae8:	b2da      	uxtb	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	7f3a      	ldrb	r2, [r7, #28]
 8005af2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2201      	movs	r2, #1
 8005af8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	73da      	strb	r2, [r3, #15]
}
 8005b00:	bf00      	nop
 8005b02:	3714      	adds	r7, #20
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b08c      	sub	sp, #48	; 0x30
 8005b10:	af02      	add	r7, sp, #8
 8005b12:	4603      	mov	r3, r0
 8005b14:	71fb      	strb	r3, [r7, #7]
 8005b16:	460b      	mov	r3, r1
 8005b18:	80bb      	strh	r3, [r7, #4]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8005b1e:	79fb      	ldrb	r3, [r7, #7]
 8005b20:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8005b22:	887b      	ldrh	r3, [r7, #2]
 8005b24:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005b28:	d07f      	beq.n	8005c2a <pbuf_alloc+0x11e>
 8005b2a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005b2e:	f300 80c8 	bgt.w	8005cc2 <pbuf_alloc+0x1b6>
 8005b32:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005b36:	d010      	beq.n	8005b5a <pbuf_alloc+0x4e>
 8005b38:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005b3c:	f300 80c1 	bgt.w	8005cc2 <pbuf_alloc+0x1b6>
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d002      	beq.n	8005b4a <pbuf_alloc+0x3e>
 8005b44:	2b41      	cmp	r3, #65	; 0x41
 8005b46:	f040 80bc 	bne.w	8005cc2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8005b4a:	887a      	ldrh	r2, [r7, #2]
 8005b4c:	88bb      	ldrh	r3, [r7, #4]
 8005b4e:	4619      	mov	r1, r3
 8005b50:	2000      	movs	r0, #0
 8005b52:	f000 f8d1 	bl	8005cf8 <pbuf_alloc_reference>
 8005b56:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8005b58:	e0bd      	b.n	8005cd6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8005b62:	88bb      	ldrh	r3, [r7, #4]
 8005b64:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005b66:	2008      	movs	r0, #8
 8005b68:	f7ff fc56 	bl	8005418 <memp_malloc>
 8005b6c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d109      	bne.n	8005b88 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8005b74:	f7ff ff94 	bl	8005aa0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d002      	beq.n	8005b84 <pbuf_alloc+0x78>
            pbuf_free(p);
 8005b7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b80:	f000 faa8 	bl	80060d4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005b84:	2300      	movs	r3, #0
 8005b86:	e0a7      	b.n	8005cd8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005b88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005b8a:	3303      	adds	r3, #3
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	f023 0303 	bic.w	r3, r3, #3
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	8b7a      	ldrh	r2, [r7, #26]
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	bf28      	it	cs
 8005ba0:	4613      	movcs	r3, r2
 8005ba2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005ba4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005ba6:	3310      	adds	r3, #16
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	4413      	add	r3, r2
 8005bac:	3303      	adds	r3, #3
 8005bae:	f023 0303 	bic.w	r3, r3, #3
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	89f9      	ldrh	r1, [r7, #14]
 8005bb6:	8b7a      	ldrh	r2, [r7, #26]
 8005bb8:	2300      	movs	r3, #0
 8005bba:	9301      	str	r3, [sp, #4]
 8005bbc:	887b      	ldrh	r3, [r7, #2]
 8005bbe:	9300      	str	r3, [sp, #0]
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	4601      	mov	r1, r0
 8005bc4:	6938      	ldr	r0, [r7, #16]
 8005bc6:	f7ff ff77 	bl	8005ab8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	f003 0303 	and.w	r3, r3, #3
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d006      	beq.n	8005be4 <pbuf_alloc+0xd8>
 8005bd6:	4b42      	ldr	r3, [pc, #264]	; (8005ce0 <pbuf_alloc+0x1d4>)
 8005bd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bdc:	4941      	ldr	r1, [pc, #260]	; (8005ce4 <pbuf_alloc+0x1d8>)
 8005bde:	4842      	ldr	r0, [pc, #264]	; (8005ce8 <pbuf_alloc+0x1dc>)
 8005be0:	f009 fb82 	bl	800f2e8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005be4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005be6:	3303      	adds	r3, #3
 8005be8:	f023 0303 	bic.w	r3, r3, #3
 8005bec:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8005bf0:	d106      	bne.n	8005c00 <pbuf_alloc+0xf4>
 8005bf2:	4b3b      	ldr	r3, [pc, #236]	; (8005ce0 <pbuf_alloc+0x1d4>)
 8005bf4:	f44f 7281 	mov.w	r2, #258	; 0x102
 8005bf8:	493c      	ldr	r1, [pc, #240]	; (8005cec <pbuf_alloc+0x1e0>)
 8005bfa:	483b      	ldr	r0, [pc, #236]	; (8005ce8 <pbuf_alloc+0x1dc>)
 8005bfc:	f009 fb74 	bl	800f2e8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8005c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d102      	bne.n	8005c0c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	627b      	str	r3, [r7, #36]	; 0x24
 8005c0a:	e002      	b.n	8005c12 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8005c16:	8b7a      	ldrh	r2, [r7, #26]
 8005c18:	89fb      	ldrh	r3, [r7, #14]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8005c22:	8b7b      	ldrh	r3, [r7, #26]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d19e      	bne.n	8005b66 <pbuf_alloc+0x5a>
      break;
 8005c28:	e055      	b.n	8005cd6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8005c2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c2c:	3303      	adds	r3, #3
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	f023 0303 	bic.w	r3, r3, #3
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	88bb      	ldrh	r3, [r7, #4]
 8005c38:	3303      	adds	r3, #3
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	f023 0303 	bic.w	r3, r3, #3
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	4413      	add	r3, r2
 8005c44:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8005c46:	8b3b      	ldrh	r3, [r7, #24]
 8005c48:	3310      	adds	r3, #16
 8005c4a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005c4c:	8b3a      	ldrh	r2, [r7, #24]
 8005c4e:	88bb      	ldrh	r3, [r7, #4]
 8005c50:	3303      	adds	r3, #3
 8005c52:	f023 0303 	bic.w	r3, r3, #3
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d306      	bcc.n	8005c68 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8005c5a:	8afa      	ldrh	r2, [r7, #22]
 8005c5c:	88bb      	ldrh	r3, [r7, #4]
 8005c5e:	3303      	adds	r3, #3
 8005c60:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d201      	bcs.n	8005c6c <pbuf_alloc+0x160>
        return NULL;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	e035      	b.n	8005cd8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8005c6c:	8afb      	ldrh	r3, [r7, #22]
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7ff fa64 	bl	800513c <mem_malloc>
 8005c74:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8005c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d101      	bne.n	8005c80 <pbuf_alloc+0x174>
        return NULL;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	e02b      	b.n	8005cd8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005c80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c82:	3310      	adds	r3, #16
 8005c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c86:	4413      	add	r3, r2
 8005c88:	3303      	adds	r3, #3
 8005c8a:	f023 0303 	bic.w	r3, r3, #3
 8005c8e:	4618      	mov	r0, r3
 8005c90:	88b9      	ldrh	r1, [r7, #4]
 8005c92:	88ba      	ldrh	r2, [r7, #4]
 8005c94:	2300      	movs	r3, #0
 8005c96:	9301      	str	r3, [sp, #4]
 8005c98:	887b      	ldrh	r3, [r7, #2]
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	4601      	mov	r1, r0
 8005ca0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ca2:	f7ff ff09 	bl	8005ab8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f003 0303 	and.w	r3, r3, #3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d010      	beq.n	8005cd4 <pbuf_alloc+0x1c8>
 8005cb2:	4b0b      	ldr	r3, [pc, #44]	; (8005ce0 <pbuf_alloc+0x1d4>)
 8005cb4:	f44f 7291 	mov.w	r2, #290	; 0x122
 8005cb8:	490d      	ldr	r1, [pc, #52]	; (8005cf0 <pbuf_alloc+0x1e4>)
 8005cba:	480b      	ldr	r0, [pc, #44]	; (8005ce8 <pbuf_alloc+0x1dc>)
 8005cbc:	f009 fb14 	bl	800f2e8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005cc0:	e008      	b.n	8005cd4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005cc2:	4b07      	ldr	r3, [pc, #28]	; (8005ce0 <pbuf_alloc+0x1d4>)
 8005cc4:	f240 1227 	movw	r2, #295	; 0x127
 8005cc8:	490a      	ldr	r1, [pc, #40]	; (8005cf4 <pbuf_alloc+0x1e8>)
 8005cca:	4807      	ldr	r0, [pc, #28]	; (8005ce8 <pbuf_alloc+0x1dc>)
 8005ccc:	f009 fb0c 	bl	800f2e8 <iprintf>
      return NULL;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	e001      	b.n	8005cd8 <pbuf_alloc+0x1cc>
      break;
 8005cd4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3728      	adds	r7, #40	; 0x28
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	08010f90 	.word	0x08010f90
 8005ce4:	08010fc0 	.word	0x08010fc0
 8005ce8:	08010ff0 	.word	0x08010ff0
 8005cec:	08011018 	.word	0x08011018
 8005cf0:	0801104c 	.word	0x0801104c
 8005cf4:	08011078 	.word	0x08011078

08005cf8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af02      	add	r7, sp, #8
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	460b      	mov	r3, r1
 8005d02:	807b      	strh	r3, [r7, #2]
 8005d04:	4613      	mov	r3, r2
 8005d06:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005d08:	883b      	ldrh	r3, [r7, #0]
 8005d0a:	2b41      	cmp	r3, #65	; 0x41
 8005d0c:	d009      	beq.n	8005d22 <pbuf_alloc_reference+0x2a>
 8005d0e:	883b      	ldrh	r3, [r7, #0]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d006      	beq.n	8005d22 <pbuf_alloc_reference+0x2a>
 8005d14:	4b0f      	ldr	r3, [pc, #60]	; (8005d54 <pbuf_alloc_reference+0x5c>)
 8005d16:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8005d1a:	490f      	ldr	r1, [pc, #60]	; (8005d58 <pbuf_alloc_reference+0x60>)
 8005d1c:	480f      	ldr	r0, [pc, #60]	; (8005d5c <pbuf_alloc_reference+0x64>)
 8005d1e:	f009 fae3 	bl	800f2e8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005d22:	2007      	movs	r0, #7
 8005d24:	f7ff fb78 	bl	8005418 <memp_malloc>
 8005d28:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d101      	bne.n	8005d34 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005d30:	2300      	movs	r3, #0
 8005d32:	e00b      	b.n	8005d4c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005d34:	8879      	ldrh	r1, [r7, #2]
 8005d36:	887a      	ldrh	r2, [r7, #2]
 8005d38:	2300      	movs	r3, #0
 8005d3a:	9301      	str	r3, [sp, #4]
 8005d3c:	883b      	ldrh	r3, [r7, #0]
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	460b      	mov	r3, r1
 8005d42:	6879      	ldr	r1, [r7, #4]
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f7ff feb7 	bl	8005ab8 <pbuf_init_alloced_pbuf>
  return p;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	08010f90 	.word	0x08010f90
 8005d58:	08011094 	.word	0x08011094
 8005d5c:	08010ff0 	.word	0x08010ff0

08005d60 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b088      	sub	sp, #32
 8005d64:	af02      	add	r7, sp, #8
 8005d66:	607b      	str	r3, [r7, #4]
 8005d68:	4603      	mov	r3, r0
 8005d6a:	73fb      	strb	r3, [r7, #15]
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	81bb      	strh	r3, [r7, #12]
 8005d70:	4613      	mov	r3, r2
 8005d72:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8005d74:	7bfb      	ldrb	r3, [r7, #15]
 8005d76:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005d78:	8a7b      	ldrh	r3, [r7, #18]
 8005d7a:	3303      	adds	r3, #3
 8005d7c:	f023 0203 	bic.w	r2, r3, #3
 8005d80:	89bb      	ldrh	r3, [r7, #12]
 8005d82:	441a      	add	r2, r3
 8005d84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d901      	bls.n	8005d8e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	e018      	b.n	8005dc0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8005d8e:	6a3b      	ldr	r3, [r7, #32]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d007      	beq.n	8005da4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005d94:	8a7b      	ldrh	r3, [r7, #18]
 8005d96:	3303      	adds	r3, #3
 8005d98:	f023 0303 	bic.w	r3, r3, #3
 8005d9c:	6a3a      	ldr	r2, [r7, #32]
 8005d9e:	4413      	add	r3, r2
 8005da0:	617b      	str	r3, [r7, #20]
 8005da2:	e001      	b.n	8005da8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8005da4:	2300      	movs	r3, #0
 8005da6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	89b9      	ldrh	r1, [r7, #12]
 8005dac:	89ba      	ldrh	r2, [r7, #12]
 8005dae:	2302      	movs	r3, #2
 8005db0:	9301      	str	r3, [sp, #4]
 8005db2:	897b      	ldrh	r3, [r7, #10]
 8005db4:	9300      	str	r3, [sp, #0]
 8005db6:	460b      	mov	r3, r1
 8005db8:	6979      	ldr	r1, [r7, #20]
 8005dba:	f7ff fe7d 	bl	8005ab8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8005dbe:	687b      	ldr	r3, [r7, #4]
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3718      	adds	r7, #24
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d106      	bne.n	8005de8 <pbuf_realloc+0x20>
 8005dda:	4b3a      	ldr	r3, [pc, #232]	; (8005ec4 <pbuf_realloc+0xfc>)
 8005ddc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8005de0:	4939      	ldr	r1, [pc, #228]	; (8005ec8 <pbuf_realloc+0x100>)
 8005de2:	483a      	ldr	r0, [pc, #232]	; (8005ecc <pbuf_realloc+0x104>)
 8005de4:	f009 fa80 	bl	800f2e8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	891b      	ldrh	r3, [r3, #8]
 8005dec:	887a      	ldrh	r2, [r7, #2]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d263      	bcs.n	8005eba <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	891a      	ldrh	r2, [r3, #8]
 8005df6:	887b      	ldrh	r3, [r7, #2]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8005dfc:	887b      	ldrh	r3, [r7, #2]
 8005dfe:	817b      	strh	r3, [r7, #10]
  q = p;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005e04:	e018      	b.n	8005e38 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	895b      	ldrh	r3, [r3, #10]
 8005e0a:	897a      	ldrh	r2, [r7, #10]
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	891a      	ldrh	r2, [r3, #8]
 8005e14:	893b      	ldrh	r3, [r7, #8]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d106      	bne.n	8005e38 <pbuf_realloc+0x70>
 8005e2a:	4b26      	ldr	r3, [pc, #152]	; (8005ec4 <pbuf_realloc+0xfc>)
 8005e2c:	f240 12af 	movw	r2, #431	; 0x1af
 8005e30:	4927      	ldr	r1, [pc, #156]	; (8005ed0 <pbuf_realloc+0x108>)
 8005e32:	4826      	ldr	r0, [pc, #152]	; (8005ecc <pbuf_realloc+0x104>)
 8005e34:	f009 fa58 	bl	800f2e8 <iprintf>
  while (rem_len > q->len) {
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	895b      	ldrh	r3, [r3, #10]
 8005e3c:	897a      	ldrh	r2, [r7, #10]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d8e1      	bhi.n	8005e06 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	7b1b      	ldrb	r3, [r3, #12]
 8005e46:	f003 030f 	and.w	r3, r3, #15
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d121      	bne.n	8005e92 <pbuf_realloc+0xca>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	895b      	ldrh	r3, [r3, #10]
 8005e52:	897a      	ldrh	r2, [r7, #10]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d01c      	beq.n	8005e92 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	7b5b      	ldrb	r3, [r3, #13]
 8005e5c:	f003 0302 	and.w	r3, r3, #2
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d116      	bne.n	8005e92 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	685a      	ldr	r2, [r3, #4]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	897b      	ldrh	r3, [r7, #10]
 8005e70:	4413      	add	r3, r2
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	4619      	mov	r1, r3
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f7ff f864 	bl	8004f44 <mem_trim>
 8005e7c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d106      	bne.n	8005e92 <pbuf_realloc+0xca>
 8005e84:	4b0f      	ldr	r3, [pc, #60]	; (8005ec4 <pbuf_realloc+0xfc>)
 8005e86:	f240 12bd 	movw	r2, #445	; 0x1bd
 8005e8a:	4912      	ldr	r1, [pc, #72]	; (8005ed4 <pbuf_realloc+0x10c>)
 8005e8c:	480f      	ldr	r0, [pc, #60]	; (8005ecc <pbuf_realloc+0x104>)
 8005e8e:	f009 fa2b 	bl	800f2e8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	897a      	ldrh	r2, [r7, #10]
 8005e96:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	895a      	ldrh	r2, [r3, #10]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d004      	beq.n	8005eb2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4618      	mov	r0, r3
 8005eae:	f000 f911 	bl	80060d4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	601a      	str	r2, [r3, #0]
 8005eb8:	e000      	b.n	8005ebc <pbuf_realloc+0xf4>
    return;
 8005eba:	bf00      	nop

}
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	08010f90 	.word	0x08010f90
 8005ec8:	080110a8 	.word	0x080110a8
 8005ecc:	08010ff0 	.word	0x08010ff0
 8005ed0:	080110c0 	.word	0x080110c0
 8005ed4:	080110d8 	.word	0x080110d8

08005ed8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b086      	sub	sp, #24
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d106      	bne.n	8005efa <pbuf_add_header_impl+0x22>
 8005eec:	4b2b      	ldr	r3, [pc, #172]	; (8005f9c <pbuf_add_header_impl+0xc4>)
 8005eee:	f240 12df 	movw	r2, #479	; 0x1df
 8005ef2:	492b      	ldr	r1, [pc, #172]	; (8005fa0 <pbuf_add_header_impl+0xc8>)
 8005ef4:	482b      	ldr	r0, [pc, #172]	; (8005fa4 <pbuf_add_header_impl+0xcc>)
 8005ef6:	f009 f9f7 	bl	800f2e8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d003      	beq.n	8005f08 <pbuf_add_header_impl+0x30>
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f06:	d301      	bcc.n	8005f0c <pbuf_add_header_impl+0x34>
    return 1;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e043      	b.n	8005f94 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d101      	bne.n	8005f16 <pbuf_add_header_impl+0x3e>
    return 0;
 8005f12:	2300      	movs	r3, #0
 8005f14:	e03e      	b.n	8005f94 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	891a      	ldrh	r2, [r3, #8]
 8005f1e:	8a7b      	ldrh	r3, [r7, #18]
 8005f20:	4413      	add	r3, r2
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	8a7a      	ldrh	r2, [r7, #18]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d901      	bls.n	8005f2e <pbuf_add_header_impl+0x56>
    return 1;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e032      	b.n	8005f94 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	7b1b      	ldrb	r3, [r3, #12]
 8005f32:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8005f34:	8a3b      	ldrh	r3, [r7, #16]
 8005f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00c      	beq.n	8005f58 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	685a      	ldr	r2, [r3, #4]
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	425b      	negs	r3, r3
 8005f46:	4413      	add	r3, r2
 8005f48:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	3310      	adds	r3, #16
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d20d      	bcs.n	8005f70 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e01d      	b.n	8005f94 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8005f58:	79fb      	ldrb	r3, [r7, #7]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d006      	beq.n	8005f6c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	685a      	ldr	r2, [r3, #4]
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	425b      	negs	r3, r3
 8005f66:	4413      	add	r3, r2
 8005f68:	617b      	str	r3, [r7, #20]
 8005f6a:	e001      	b.n	8005f70 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e011      	b.n	8005f94 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	697a      	ldr	r2, [r7, #20]
 8005f74:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	895a      	ldrh	r2, [r3, #10]
 8005f7a:	8a7b      	ldrh	r3, [r7, #18]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	891a      	ldrh	r2, [r3, #8]
 8005f88:	8a7b      	ldrh	r3, [r7, #18]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	b29a      	uxth	r2, r3
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	811a      	strh	r2, [r3, #8]


  return 0;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3718      	adds	r7, #24
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	08010f90 	.word	0x08010f90
 8005fa0:	080110f4 	.word	0x080110f4
 8005fa4:	08010ff0 	.word	0x08010ff0

08005fa8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	6839      	ldr	r1, [r7, #0]
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f7ff ff8e 	bl	8005ed8 <pbuf_add_header_impl>
 8005fbc:	4603      	mov	r3, r0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3708      	adds	r7, #8
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
	...

08005fc8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d106      	bne.n	8005fe6 <pbuf_remove_header+0x1e>
 8005fd8:	4b20      	ldr	r3, [pc, #128]	; (800605c <pbuf_remove_header+0x94>)
 8005fda:	f240 224b 	movw	r2, #587	; 0x24b
 8005fde:	4920      	ldr	r1, [pc, #128]	; (8006060 <pbuf_remove_header+0x98>)
 8005fe0:	4820      	ldr	r0, [pc, #128]	; (8006064 <pbuf_remove_header+0x9c>)
 8005fe2:	f009 f981 	bl	800f2e8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d003      	beq.n	8005ff4 <pbuf_remove_header+0x2c>
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ff2:	d301      	bcc.n	8005ff8 <pbuf_remove_header+0x30>
    return 1;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e02c      	b.n	8006052 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d101      	bne.n	8006002 <pbuf_remove_header+0x3a>
    return 0;
 8005ffe:	2300      	movs	r3, #0
 8006000:	e027      	b.n	8006052 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	895b      	ldrh	r3, [r3, #10]
 800600a:	89fa      	ldrh	r2, [r7, #14]
 800600c:	429a      	cmp	r2, r3
 800600e:	d908      	bls.n	8006022 <pbuf_remove_header+0x5a>
 8006010:	4b12      	ldr	r3, [pc, #72]	; (800605c <pbuf_remove_header+0x94>)
 8006012:	f240 2255 	movw	r2, #597	; 0x255
 8006016:	4914      	ldr	r1, [pc, #80]	; (8006068 <pbuf_remove_header+0xa0>)
 8006018:	4812      	ldr	r0, [pc, #72]	; (8006064 <pbuf_remove_header+0x9c>)
 800601a:	f009 f965 	bl	800f2e8 <iprintf>
 800601e:	2301      	movs	r3, #1
 8006020:	e017      	b.n	8006052 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685a      	ldr	r2, [r3, #4]
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	441a      	add	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	895a      	ldrh	r2, [r3, #10]
 8006038:	89fb      	ldrh	r3, [r7, #14]
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	b29a      	uxth	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	891a      	ldrh	r2, [r3, #8]
 8006046:	89fb      	ldrh	r3, [r7, #14]
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	b29a      	uxth	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	08010f90 	.word	0x08010f90
 8006060:	080110f4 	.word	0x080110f4
 8006064:	08010ff0 	.word	0x08010ff0
 8006068:	08011100 	.word	0x08011100

0800606c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	460b      	mov	r3, r1
 8006076:	807b      	strh	r3, [r7, #2]
 8006078:	4613      	mov	r3, r2
 800607a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800607c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006080:	2b00      	cmp	r3, #0
 8006082:	da08      	bge.n	8006096 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8006084:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006088:	425b      	negs	r3, r3
 800608a:	4619      	mov	r1, r3
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f7ff ff9b 	bl	8005fc8 <pbuf_remove_header>
 8006092:	4603      	mov	r3, r0
 8006094:	e007      	b.n	80060a6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8006096:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800609a:	787a      	ldrb	r2, [r7, #1]
 800609c:	4619      	mov	r1, r3
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f7ff ff1a 	bl	8005ed8 <pbuf_add_header_impl>
 80060a4:	4603      	mov	r3, r0
  }
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b082      	sub	sp, #8
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
 80060b6:	460b      	mov	r3, r1
 80060b8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80060ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80060be:	2201      	movs	r2, #1
 80060c0:	4619      	mov	r1, r3
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f7ff ffd2 	bl	800606c <pbuf_header_impl>
 80060c8:	4603      	mov	r3, r0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
	...

080060d4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b086      	sub	sp, #24
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d10b      	bne.n	80060fa <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d106      	bne.n	80060f6 <pbuf_free+0x22>
 80060e8:	4b38      	ldr	r3, [pc, #224]	; (80061cc <pbuf_free+0xf8>)
 80060ea:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80060ee:	4938      	ldr	r1, [pc, #224]	; (80061d0 <pbuf_free+0xfc>)
 80060f0:	4838      	ldr	r0, [pc, #224]	; (80061d4 <pbuf_free+0x100>)
 80060f2:	f009 f8f9 	bl	800f2e8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80060f6:	2300      	movs	r3, #0
 80060f8:	e063      	b.n	80061c2 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80060fa:	2300      	movs	r3, #0
 80060fc:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80060fe:	e05c      	b.n	80061ba <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	7b9b      	ldrb	r3, [r3, #14]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d106      	bne.n	8006116 <pbuf_free+0x42>
 8006108:	4b30      	ldr	r3, [pc, #192]	; (80061cc <pbuf_free+0xf8>)
 800610a:	f240 22f1 	movw	r2, #753	; 0x2f1
 800610e:	4932      	ldr	r1, [pc, #200]	; (80061d8 <pbuf_free+0x104>)
 8006110:	4830      	ldr	r0, [pc, #192]	; (80061d4 <pbuf_free+0x100>)
 8006112:	f009 f8e9 	bl	800f2e8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	7b9b      	ldrb	r3, [r3, #14]
 800611a:	3b01      	subs	r3, #1
 800611c:	b2da      	uxtb	r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	739a      	strb	r2, [r3, #14]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	7b9b      	ldrb	r3, [r3, #14]
 8006126:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006128:	7dbb      	ldrb	r3, [r7, #22]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d143      	bne.n	80061b6 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	7b1b      	ldrb	r3, [r3, #12]
 8006138:	f003 030f 	and.w	r3, r3, #15
 800613c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	7b5b      	ldrb	r3, [r3, #13]
 8006142:	f003 0302 	and.w	r3, r3, #2
 8006146:	2b00      	cmp	r3, #0
 8006148:	d011      	beq.n	800616e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d106      	bne.n	8006164 <pbuf_free+0x90>
 8006156:	4b1d      	ldr	r3, [pc, #116]	; (80061cc <pbuf_free+0xf8>)
 8006158:	f240 22ff 	movw	r2, #767	; 0x2ff
 800615c:	491f      	ldr	r1, [pc, #124]	; (80061dc <pbuf_free+0x108>)
 800615e:	481d      	ldr	r0, [pc, #116]	; (80061d4 <pbuf_free+0x100>)
 8006160:	f009 f8c2 	bl	800f2e8 <iprintf>
        pc->custom_free_function(p);
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	4798      	blx	r3
 800616c:	e01d      	b.n	80061aa <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800616e:	7bfb      	ldrb	r3, [r7, #15]
 8006170:	2b02      	cmp	r3, #2
 8006172:	d104      	bne.n	800617e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8006174:	6879      	ldr	r1, [r7, #4]
 8006176:	2008      	movs	r0, #8
 8006178:	f7ff f99a 	bl	80054b0 <memp_free>
 800617c:	e015      	b.n	80061aa <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800617e:	7bfb      	ldrb	r3, [r7, #15]
 8006180:	2b01      	cmp	r3, #1
 8006182:	d104      	bne.n	800618e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8006184:	6879      	ldr	r1, [r7, #4]
 8006186:	2007      	movs	r0, #7
 8006188:	f7ff f992 	bl	80054b0 <memp_free>
 800618c:	e00d      	b.n	80061aa <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800618e:	7bfb      	ldrb	r3, [r7, #15]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d103      	bne.n	800619c <pbuf_free+0xc8>
          mem_free(p);
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f7fe fe6b 	bl	8004e70 <mem_free>
 800619a:	e006      	b.n	80061aa <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800619c:	4b0b      	ldr	r3, [pc, #44]	; (80061cc <pbuf_free+0xf8>)
 800619e:	f240 320f 	movw	r2, #783	; 0x30f
 80061a2:	490f      	ldr	r1, [pc, #60]	; (80061e0 <pbuf_free+0x10c>)
 80061a4:	480b      	ldr	r0, [pc, #44]	; (80061d4 <pbuf_free+0x100>)
 80061a6:	f009 f89f 	bl	800f2e8 <iprintf>
        }
      }
      count++;
 80061aa:	7dfb      	ldrb	r3, [r7, #23]
 80061ac:	3301      	adds	r3, #1
 80061ae:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	607b      	str	r3, [r7, #4]
 80061b4:	e001      	b.n	80061ba <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80061b6:	2300      	movs	r3, #0
 80061b8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d19f      	bne.n	8006100 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80061c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3718      	adds	r7, #24
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	08010f90 	.word	0x08010f90
 80061d0:	080110f4 	.word	0x080110f4
 80061d4:	08010ff0 	.word	0x08010ff0
 80061d8:	08011120 	.word	0x08011120
 80061dc:	08011138 	.word	0x08011138
 80061e0:	0801115c 	.word	0x0801115c

080061e4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80061ec:	2300      	movs	r3, #0
 80061ee:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80061f0:	e005      	b.n	80061fe <pbuf_clen+0x1a>
    ++len;
 80061f2:	89fb      	ldrh	r3, [r7, #14]
 80061f4:	3301      	adds	r3, #1
 80061f6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d1f6      	bne.n	80061f2 <pbuf_clen+0xe>
  }
  return len;
 8006204:	89fb      	ldrh	r3, [r7, #14]
}
 8006206:	4618      	mov	r0, r3
 8006208:	3714      	adds	r7, #20
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
	...

08006214 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d010      	beq.n	8006244 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	7b9b      	ldrb	r3, [r3, #14]
 8006226:	3301      	adds	r3, #1
 8006228:	b2da      	uxtb	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	7b9b      	ldrb	r3, [r3, #14]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d106      	bne.n	8006244 <pbuf_ref+0x30>
 8006236:	4b05      	ldr	r3, [pc, #20]	; (800624c <pbuf_ref+0x38>)
 8006238:	f240 3242 	movw	r2, #834	; 0x342
 800623c:	4904      	ldr	r1, [pc, #16]	; (8006250 <pbuf_ref+0x3c>)
 800623e:	4805      	ldr	r0, [pc, #20]	; (8006254 <pbuf_ref+0x40>)
 8006240:	f009 f852 	bl	800f2e8 <iprintf>
  }
}
 8006244:	bf00      	nop
 8006246:	3708      	adds	r7, #8
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}
 800624c:	08010f90 	.word	0x08010f90
 8006250:	08011170 	.word	0x08011170
 8006254:	08010ff0 	.word	0x08010ff0

08006258 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d002      	beq.n	800626e <pbuf_cat+0x16>
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d107      	bne.n	800627e <pbuf_cat+0x26>
 800626e:	4b20      	ldr	r3, [pc, #128]	; (80062f0 <pbuf_cat+0x98>)
 8006270:	f240 3259 	movw	r2, #857	; 0x359
 8006274:	491f      	ldr	r1, [pc, #124]	; (80062f4 <pbuf_cat+0x9c>)
 8006276:	4820      	ldr	r0, [pc, #128]	; (80062f8 <pbuf_cat+0xa0>)
 8006278:	f009 f836 	bl	800f2e8 <iprintf>
 800627c:	e034      	b.n	80062e8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	60fb      	str	r3, [r7, #12]
 8006282:	e00a      	b.n	800629a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	891a      	ldrh	r2, [r3, #8]
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	891b      	ldrh	r3, [r3, #8]
 800628c:	4413      	add	r3, r2
 800628e:	b29a      	uxth	r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	60fb      	str	r3, [r7, #12]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1f0      	bne.n	8006284 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	891a      	ldrh	r2, [r3, #8]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	895b      	ldrh	r3, [r3, #10]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d006      	beq.n	80062bc <pbuf_cat+0x64>
 80062ae:	4b10      	ldr	r3, [pc, #64]	; (80062f0 <pbuf_cat+0x98>)
 80062b0:	f240 3262 	movw	r2, #866	; 0x362
 80062b4:	4911      	ldr	r1, [pc, #68]	; (80062fc <pbuf_cat+0xa4>)
 80062b6:	4810      	ldr	r0, [pc, #64]	; (80062f8 <pbuf_cat+0xa0>)
 80062b8:	f009 f816 	bl	800f2e8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d006      	beq.n	80062d2 <pbuf_cat+0x7a>
 80062c4:	4b0a      	ldr	r3, [pc, #40]	; (80062f0 <pbuf_cat+0x98>)
 80062c6:	f240 3263 	movw	r2, #867	; 0x363
 80062ca:	490d      	ldr	r1, [pc, #52]	; (8006300 <pbuf_cat+0xa8>)
 80062cc:	480a      	ldr	r0, [pc, #40]	; (80062f8 <pbuf_cat+0xa0>)
 80062ce:	f009 f80b 	bl	800f2e8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	891a      	ldrh	r2, [r3, #8]
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	891b      	ldrh	r3, [r3, #8]
 80062da:	4413      	add	r3, r2
 80062dc:	b29a      	uxth	r2, r3
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	683a      	ldr	r2, [r7, #0]
 80062e6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80062e8:	3710      	adds	r7, #16
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	08010f90 	.word	0x08010f90
 80062f4:	08011184 	.word	0x08011184
 80062f8:	08010ff0 	.word	0x08010ff0
 80062fc:	080111bc 	.word	0x080111bc
 8006300:	080111ec 	.word	0x080111ec

08006304 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b086      	sub	sp, #24
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800630e:	2300      	movs	r3, #0
 8006310:	617b      	str	r3, [r7, #20]
 8006312:	2300      	movs	r3, #0
 8006314:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d008      	beq.n	800632e <pbuf_copy+0x2a>
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d005      	beq.n	800632e <pbuf_copy+0x2a>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	891a      	ldrh	r2, [r3, #8]
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	891b      	ldrh	r3, [r3, #8]
 800632a:	429a      	cmp	r2, r3
 800632c:	d209      	bcs.n	8006342 <pbuf_copy+0x3e>
 800632e:	4b57      	ldr	r3, [pc, #348]	; (800648c <pbuf_copy+0x188>)
 8006330:	f240 32c9 	movw	r2, #969	; 0x3c9
 8006334:	4956      	ldr	r1, [pc, #344]	; (8006490 <pbuf_copy+0x18c>)
 8006336:	4857      	ldr	r0, [pc, #348]	; (8006494 <pbuf_copy+0x190>)
 8006338:	f008 ffd6 	bl	800f2e8 <iprintf>
 800633c:	f06f 030f 	mvn.w	r3, #15
 8006340:	e09f      	b.n	8006482 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	895b      	ldrh	r3, [r3, #10]
 8006346:	461a      	mov	r2, r3
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	1ad2      	subs	r2, r2, r3
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	895b      	ldrh	r3, [r3, #10]
 8006350:	4619      	mov	r1, r3
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	1acb      	subs	r3, r1, r3
 8006356:	429a      	cmp	r2, r3
 8006358:	d306      	bcc.n	8006368 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	895b      	ldrh	r3, [r3, #10]
 800635e:	461a      	mov	r2, r3
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	60fb      	str	r3, [r7, #12]
 8006366:	e005      	b.n	8006374 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	895b      	ldrh	r3, [r3, #10]
 800636c:	461a      	mov	r2, r3
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	685a      	ldr	r2, [r3, #4]
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	18d0      	adds	r0, r2, r3
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	685a      	ldr	r2, [r3, #4]
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	4413      	add	r3, r2
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	4619      	mov	r1, r3
 8006388:	f008 ff7e 	bl	800f288 <memcpy>
    offset_to += len;
 800638c:	697a      	ldr	r2, [r7, #20]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	4413      	add	r3, r2
 8006392:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	4413      	add	r3, r2
 800639a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	895b      	ldrh	r3, [r3, #10]
 80063a0:	461a      	mov	r2, r3
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d906      	bls.n	80063b6 <pbuf_copy+0xb2>
 80063a8:	4b38      	ldr	r3, [pc, #224]	; (800648c <pbuf_copy+0x188>)
 80063aa:	f240 32d9 	movw	r2, #985	; 0x3d9
 80063ae:	493a      	ldr	r1, [pc, #232]	; (8006498 <pbuf_copy+0x194>)
 80063b0:	4838      	ldr	r0, [pc, #224]	; (8006494 <pbuf_copy+0x190>)
 80063b2:	f008 ff99 	bl	800f2e8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	895b      	ldrh	r3, [r3, #10]
 80063ba:	461a      	mov	r2, r3
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	4293      	cmp	r3, r2
 80063c0:	d906      	bls.n	80063d0 <pbuf_copy+0xcc>
 80063c2:	4b32      	ldr	r3, [pc, #200]	; (800648c <pbuf_copy+0x188>)
 80063c4:	f240 32da 	movw	r2, #986	; 0x3da
 80063c8:	4934      	ldr	r1, [pc, #208]	; (800649c <pbuf_copy+0x198>)
 80063ca:	4832      	ldr	r0, [pc, #200]	; (8006494 <pbuf_copy+0x190>)
 80063cc:	f008 ff8c 	bl	800f2e8 <iprintf>
    if (offset_from >= p_from->len) {
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	895b      	ldrh	r3, [r3, #10]
 80063d4:	461a      	mov	r2, r3
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	4293      	cmp	r3, r2
 80063da:	d304      	bcc.n	80063e6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80063dc:	2300      	movs	r3, #0
 80063de:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	895b      	ldrh	r3, [r3, #10]
 80063ea:	461a      	mov	r2, r3
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d114      	bne.n	800641c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80063f2:	2300      	movs	r3, #0
 80063f4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d10c      	bne.n	800641c <pbuf_copy+0x118>
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d009      	beq.n	800641c <pbuf_copy+0x118>
 8006408:	4b20      	ldr	r3, [pc, #128]	; (800648c <pbuf_copy+0x188>)
 800640a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800640e:	4924      	ldr	r1, [pc, #144]	; (80064a0 <pbuf_copy+0x19c>)
 8006410:	4820      	ldr	r0, [pc, #128]	; (8006494 <pbuf_copy+0x190>)
 8006412:	f008 ff69 	bl	800f2e8 <iprintf>
 8006416:	f06f 030f 	mvn.w	r3, #15
 800641a:	e032      	b.n	8006482 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d013      	beq.n	800644a <pbuf_copy+0x146>
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	895a      	ldrh	r2, [r3, #10]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	891b      	ldrh	r3, [r3, #8]
 800642a:	429a      	cmp	r2, r3
 800642c:	d10d      	bne.n	800644a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d009      	beq.n	800644a <pbuf_copy+0x146>
 8006436:	4b15      	ldr	r3, [pc, #84]	; (800648c <pbuf_copy+0x188>)
 8006438:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800643c:	4919      	ldr	r1, [pc, #100]	; (80064a4 <pbuf_copy+0x1a0>)
 800643e:	4815      	ldr	r0, [pc, #84]	; (8006494 <pbuf_copy+0x190>)
 8006440:	f008 ff52 	bl	800f2e8 <iprintf>
 8006444:	f06f 0305 	mvn.w	r3, #5
 8006448:	e01b      	b.n	8006482 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d013      	beq.n	8006478 <pbuf_copy+0x174>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	895a      	ldrh	r2, [r3, #10]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	891b      	ldrh	r3, [r3, #8]
 8006458:	429a      	cmp	r2, r3
 800645a:	d10d      	bne.n	8006478 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d009      	beq.n	8006478 <pbuf_copy+0x174>
 8006464:	4b09      	ldr	r3, [pc, #36]	; (800648c <pbuf_copy+0x188>)
 8006466:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800646a:	490e      	ldr	r1, [pc, #56]	; (80064a4 <pbuf_copy+0x1a0>)
 800646c:	4809      	ldr	r0, [pc, #36]	; (8006494 <pbuf_copy+0x190>)
 800646e:	f008 ff3b 	bl	800f2e8 <iprintf>
 8006472:	f06f 0305 	mvn.w	r3, #5
 8006476:	e004      	b.n	8006482 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	f47f af61 	bne.w	8006342 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3718      	adds	r7, #24
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	08010f90 	.word	0x08010f90
 8006490:	08011238 	.word	0x08011238
 8006494:	08010ff0 	.word	0x08010ff0
 8006498:	08011268 	.word	0x08011268
 800649c:	08011280 	.word	0x08011280
 80064a0:	0801129c 	.word	0x0801129c
 80064a4:	080112ac 	.word	0x080112ac

080064a8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b088      	sub	sp, #32
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	4611      	mov	r1, r2
 80064b4:	461a      	mov	r2, r3
 80064b6:	460b      	mov	r3, r1
 80064b8:	80fb      	strh	r3, [r7, #6]
 80064ba:	4613      	mov	r3, r2
 80064bc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80064be:	2300      	movs	r3, #0
 80064c0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80064c2:	2300      	movs	r3, #0
 80064c4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d108      	bne.n	80064de <pbuf_copy_partial+0x36>
 80064cc:	4b2b      	ldr	r3, [pc, #172]	; (800657c <pbuf_copy_partial+0xd4>)
 80064ce:	f240 420a 	movw	r2, #1034	; 0x40a
 80064d2:	492b      	ldr	r1, [pc, #172]	; (8006580 <pbuf_copy_partial+0xd8>)
 80064d4:	482b      	ldr	r0, [pc, #172]	; (8006584 <pbuf_copy_partial+0xdc>)
 80064d6:	f008 ff07 	bl	800f2e8 <iprintf>
 80064da:	2300      	movs	r3, #0
 80064dc:	e04a      	b.n	8006574 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d108      	bne.n	80064f6 <pbuf_copy_partial+0x4e>
 80064e4:	4b25      	ldr	r3, [pc, #148]	; (800657c <pbuf_copy_partial+0xd4>)
 80064e6:	f240 420b 	movw	r2, #1035	; 0x40b
 80064ea:	4927      	ldr	r1, [pc, #156]	; (8006588 <pbuf_copy_partial+0xe0>)
 80064ec:	4825      	ldr	r0, [pc, #148]	; (8006584 <pbuf_copy_partial+0xdc>)
 80064ee:	f008 fefb 	bl	800f2e8 <iprintf>
 80064f2:	2300      	movs	r3, #0
 80064f4:	e03e      	b.n	8006574 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	61fb      	str	r3, [r7, #28]
 80064fa:	e034      	b.n	8006566 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80064fc:	88bb      	ldrh	r3, [r7, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d00a      	beq.n	8006518 <pbuf_copy_partial+0x70>
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	895b      	ldrh	r3, [r3, #10]
 8006506:	88ba      	ldrh	r2, [r7, #4]
 8006508:	429a      	cmp	r2, r3
 800650a:	d305      	bcc.n	8006518 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	895b      	ldrh	r3, [r3, #10]
 8006510:	88ba      	ldrh	r2, [r7, #4]
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	80bb      	strh	r3, [r7, #4]
 8006516:	e023      	b.n	8006560 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	895a      	ldrh	r2, [r3, #10]
 800651c:	88bb      	ldrh	r3, [r7, #4]
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8006522:	8b3a      	ldrh	r2, [r7, #24]
 8006524:	88fb      	ldrh	r3, [r7, #6]
 8006526:	429a      	cmp	r2, r3
 8006528:	d901      	bls.n	800652e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800652a:	88fb      	ldrh	r3, [r7, #6]
 800652c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800652e:	8b7b      	ldrh	r3, [r7, #26]
 8006530:	68ba      	ldr	r2, [r7, #8]
 8006532:	18d0      	adds	r0, r2, r3
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	685a      	ldr	r2, [r3, #4]
 8006538:	88bb      	ldrh	r3, [r7, #4]
 800653a:	4413      	add	r3, r2
 800653c:	8b3a      	ldrh	r2, [r7, #24]
 800653e:	4619      	mov	r1, r3
 8006540:	f008 fea2 	bl	800f288 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006544:	8afa      	ldrh	r2, [r7, #22]
 8006546:	8b3b      	ldrh	r3, [r7, #24]
 8006548:	4413      	add	r3, r2
 800654a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800654c:	8b7a      	ldrh	r2, [r7, #26]
 800654e:	8b3b      	ldrh	r3, [r7, #24]
 8006550:	4413      	add	r3, r2
 8006552:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006554:	88fa      	ldrh	r2, [r7, #6]
 8006556:	8b3b      	ldrh	r3, [r7, #24]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800655c:	2300      	movs	r3, #0
 800655e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	61fb      	str	r3, [r7, #28]
 8006566:	88fb      	ldrh	r3, [r7, #6]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d002      	beq.n	8006572 <pbuf_copy_partial+0xca>
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1c4      	bne.n	80064fc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8006572:	8afb      	ldrh	r3, [r7, #22]
}
 8006574:	4618      	mov	r0, r3
 8006576:	3720      	adds	r7, #32
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	08010f90 	.word	0x08010f90
 8006580:	080112d8 	.word	0x080112d8
 8006584:	08010ff0 	.word	0x08010ff0
 8006588:	080112f8 	.word	0x080112f8

0800658c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	4603      	mov	r3, r0
 8006594:	603a      	str	r2, [r7, #0]
 8006596:	71fb      	strb	r3, [r7, #7]
 8006598:	460b      	mov	r3, r1
 800659a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	8919      	ldrh	r1, [r3, #8]
 80065a0:	88ba      	ldrh	r2, [r7, #4]
 80065a2:	79fb      	ldrb	r3, [r7, #7]
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7ff fab1 	bl	8005b0c <pbuf_alloc>
 80065aa:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d101      	bne.n	80065b6 <pbuf_clone+0x2a>
    return NULL;
 80065b2:	2300      	movs	r3, #0
 80065b4:	e011      	b.n	80065da <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80065b6:	6839      	ldr	r1, [r7, #0]
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f7ff fea3 	bl	8006304 <pbuf_copy>
 80065be:	4603      	mov	r3, r0
 80065c0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80065c2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d006      	beq.n	80065d8 <pbuf_clone+0x4c>
 80065ca:	4b06      	ldr	r3, [pc, #24]	; (80065e4 <pbuf_clone+0x58>)
 80065cc:	f240 5224 	movw	r2, #1316	; 0x524
 80065d0:	4905      	ldr	r1, [pc, #20]	; (80065e8 <pbuf_clone+0x5c>)
 80065d2:	4806      	ldr	r0, [pc, #24]	; (80065ec <pbuf_clone+0x60>)
 80065d4:	f008 fe88 	bl	800f2e8 <iprintf>
  return q;
 80065d8:	68fb      	ldr	r3, [r7, #12]
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3710      	adds	r7, #16
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	08010f90 	.word	0x08010f90
 80065e8:	08011404 	.word	0x08011404
 80065ec:	08010ff0 	.word	0x08010ff0

080065f0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80065f4:	f008 fe90 	bl	800f318 <rand>
 80065f8:	4603      	mov	r3, r0
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006600:	b29b      	uxth	r3, r3
 8006602:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8006606:	b29a      	uxth	r2, r3
 8006608:	4b01      	ldr	r3, [pc, #4]	; (8006610 <tcp_init+0x20>)
 800660a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800660c:	bf00      	nop
 800660e:	bd80      	pop	{r7, pc}
 8006610:	2000001a 	.word	0x2000001a

08006614 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	7d1b      	ldrb	r3, [r3, #20]
 8006620:	2b01      	cmp	r3, #1
 8006622:	d105      	bne.n	8006630 <tcp_free+0x1c>
 8006624:	4b06      	ldr	r3, [pc, #24]	; (8006640 <tcp_free+0x2c>)
 8006626:	22d4      	movs	r2, #212	; 0xd4
 8006628:	4906      	ldr	r1, [pc, #24]	; (8006644 <tcp_free+0x30>)
 800662a:	4807      	ldr	r0, [pc, #28]	; (8006648 <tcp_free+0x34>)
 800662c:	f008 fe5c 	bl	800f2e8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006630:	6879      	ldr	r1, [r7, #4]
 8006632:	2001      	movs	r0, #1
 8006634:	f7fe ff3c 	bl	80054b0 <memp_free>
}
 8006638:	bf00      	nop
 800663a:	3708      	adds	r7, #8
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}
 8006640:	08011490 	.word	0x08011490
 8006644:	080114c0 	.word	0x080114c0
 8006648:	080114d4 	.word	0x080114d4

0800664c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	7d1b      	ldrb	r3, [r3, #20]
 8006658:	2b01      	cmp	r3, #1
 800665a:	d105      	bne.n	8006668 <tcp_free_listen+0x1c>
 800665c:	4b06      	ldr	r3, [pc, #24]	; (8006678 <tcp_free_listen+0x2c>)
 800665e:	22df      	movs	r2, #223	; 0xdf
 8006660:	4906      	ldr	r1, [pc, #24]	; (800667c <tcp_free_listen+0x30>)
 8006662:	4807      	ldr	r0, [pc, #28]	; (8006680 <tcp_free_listen+0x34>)
 8006664:	f008 fe40 	bl	800f2e8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006668:	6879      	ldr	r1, [r7, #4]
 800666a:	2002      	movs	r0, #2
 800666c:	f7fe ff20 	bl	80054b0 <memp_free>
}
 8006670:	bf00      	nop
 8006672:	3708      	adds	r7, #8
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	08011490 	.word	0x08011490
 800667c:	080114fc 	.word	0x080114fc
 8006680:	080114d4 	.word	0x080114d4

08006684 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8006688:	f001 f85c 	bl	8007744 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800668c:	4b07      	ldr	r3, [pc, #28]	; (80066ac <tcp_tmr+0x28>)
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	3301      	adds	r3, #1
 8006692:	b2da      	uxtb	r2, r3
 8006694:	4b05      	ldr	r3, [pc, #20]	; (80066ac <tcp_tmr+0x28>)
 8006696:	701a      	strb	r2, [r3, #0]
 8006698:	4b04      	ldr	r3, [pc, #16]	; (80066ac <tcp_tmr+0x28>)
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	f003 0301 	and.w	r3, r3, #1
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d001      	beq.n	80066a8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80066a4:	f000 fd0e 	bl	80070c4 <tcp_slowtmr>
  }
}
 80066a8:	bf00      	nop
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	20000529 	.word	0x20000529

080066b0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d105      	bne.n	80066cc <tcp_remove_listener+0x1c>
 80066c0:	4b0d      	ldr	r3, [pc, #52]	; (80066f8 <tcp_remove_listener+0x48>)
 80066c2:	22ff      	movs	r2, #255	; 0xff
 80066c4:	490d      	ldr	r1, [pc, #52]	; (80066fc <tcp_remove_listener+0x4c>)
 80066c6:	480e      	ldr	r0, [pc, #56]	; (8006700 <tcp_remove_listener+0x50>)
 80066c8:	f008 fe0e 	bl	800f2e8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	60fb      	str	r3, [r7, #12]
 80066d0:	e00a      	b.n	80066e8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066d6:	683a      	ldr	r2, [r7, #0]
 80066d8:	429a      	cmp	r2, r3
 80066da:	d102      	bne.n	80066e2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	60fb      	str	r3, [r7, #12]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d1f1      	bne.n	80066d2 <tcp_remove_listener+0x22>
    }
  }
}
 80066ee:	bf00      	nop
 80066f0:	bf00      	nop
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	08011490 	.word	0x08011490
 80066fc:	08011518 	.word	0x08011518
 8006700:	080114d4 	.word	0x080114d4

08006704 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d106      	bne.n	8006720 <tcp_listen_closed+0x1c>
 8006712:	4b14      	ldr	r3, [pc, #80]	; (8006764 <tcp_listen_closed+0x60>)
 8006714:	f240 1211 	movw	r2, #273	; 0x111
 8006718:	4913      	ldr	r1, [pc, #76]	; (8006768 <tcp_listen_closed+0x64>)
 800671a:	4814      	ldr	r0, [pc, #80]	; (800676c <tcp_listen_closed+0x68>)
 800671c:	f008 fde4 	bl	800f2e8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	7d1b      	ldrb	r3, [r3, #20]
 8006724:	2b01      	cmp	r3, #1
 8006726:	d006      	beq.n	8006736 <tcp_listen_closed+0x32>
 8006728:	4b0e      	ldr	r3, [pc, #56]	; (8006764 <tcp_listen_closed+0x60>)
 800672a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800672e:	4910      	ldr	r1, [pc, #64]	; (8006770 <tcp_listen_closed+0x6c>)
 8006730:	480e      	ldr	r0, [pc, #56]	; (800676c <tcp_listen_closed+0x68>)
 8006732:	f008 fdd9 	bl	800f2e8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006736:	2301      	movs	r3, #1
 8006738:	60fb      	str	r3, [r7, #12]
 800673a:	e00b      	b.n	8006754 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800673c:	4a0d      	ldr	r2, [pc, #52]	; (8006774 <tcp_listen_closed+0x70>)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	6879      	ldr	r1, [r7, #4]
 8006748:	4618      	mov	r0, r3
 800674a:	f7ff ffb1 	bl	80066b0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	3301      	adds	r3, #1
 8006752:	60fb      	str	r3, [r7, #12]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2b03      	cmp	r3, #3
 8006758:	d9f0      	bls.n	800673c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800675a:	bf00      	nop
 800675c:	bf00      	nop
 800675e:	3710      	adds	r7, #16
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	08011490 	.word	0x08011490
 8006768:	08011540 	.word	0x08011540
 800676c:	080114d4 	.word	0x080114d4
 8006770:	0801154c 	.word	0x0801154c
 8006774:	080142ec 	.word	0x080142ec

08006778 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006778:	b5b0      	push	{r4, r5, r7, lr}
 800677a:	b088      	sub	sp, #32
 800677c:	af04      	add	r7, sp, #16
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	460b      	mov	r3, r1
 8006782:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d106      	bne.n	8006798 <tcp_close_shutdown+0x20>
 800678a:	4b63      	ldr	r3, [pc, #396]	; (8006918 <tcp_close_shutdown+0x1a0>)
 800678c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8006790:	4962      	ldr	r1, [pc, #392]	; (800691c <tcp_close_shutdown+0x1a4>)
 8006792:	4863      	ldr	r0, [pc, #396]	; (8006920 <tcp_close_shutdown+0x1a8>)
 8006794:	f008 fda8 	bl	800f2e8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006798:	78fb      	ldrb	r3, [r7, #3]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d066      	beq.n	800686c <tcp_close_shutdown+0xf4>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	7d1b      	ldrb	r3, [r3, #20]
 80067a2:	2b04      	cmp	r3, #4
 80067a4:	d003      	beq.n	80067ae <tcp_close_shutdown+0x36>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	7d1b      	ldrb	r3, [r3, #20]
 80067aa:	2b07      	cmp	r3, #7
 80067ac:	d15e      	bne.n	800686c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d104      	bne.n	80067c0 <tcp_close_shutdown+0x48>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067ba:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80067be:	d055      	beq.n	800686c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	8b5b      	ldrh	r3, [r3, #26]
 80067c4:	f003 0310 	and.w	r3, r3, #16
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d106      	bne.n	80067da <tcp_close_shutdown+0x62>
 80067cc:	4b52      	ldr	r3, [pc, #328]	; (8006918 <tcp_close_shutdown+0x1a0>)
 80067ce:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80067d2:	4954      	ldr	r1, [pc, #336]	; (8006924 <tcp_close_shutdown+0x1ac>)
 80067d4:	4852      	ldr	r0, [pc, #328]	; (8006920 <tcp_close_shutdown+0x1a8>)
 80067d6:	f008 fd87 	bl	800f2e8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80067e2:	687d      	ldr	r5, [r7, #4]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	3304      	adds	r3, #4
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	8ad2      	ldrh	r2, [r2, #22]
 80067ec:	6879      	ldr	r1, [r7, #4]
 80067ee:	8b09      	ldrh	r1, [r1, #24]
 80067f0:	9102      	str	r1, [sp, #8]
 80067f2:	9201      	str	r2, [sp, #4]
 80067f4:	9300      	str	r3, [sp, #0]
 80067f6:	462b      	mov	r3, r5
 80067f8:	4622      	mov	r2, r4
 80067fa:	4601      	mov	r1, r0
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f005 fd8b 	bl	800c318 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f001 fb6c 	bl	8007ee0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006808:	4b47      	ldr	r3, [pc, #284]	; (8006928 <tcp_close_shutdown+0x1b0>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	429a      	cmp	r2, r3
 8006810:	d105      	bne.n	800681e <tcp_close_shutdown+0xa6>
 8006812:	4b45      	ldr	r3, [pc, #276]	; (8006928 <tcp_close_shutdown+0x1b0>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	4a43      	ldr	r2, [pc, #268]	; (8006928 <tcp_close_shutdown+0x1b0>)
 800681a:	6013      	str	r3, [r2, #0]
 800681c:	e013      	b.n	8006846 <tcp_close_shutdown+0xce>
 800681e:	4b42      	ldr	r3, [pc, #264]	; (8006928 <tcp_close_shutdown+0x1b0>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	60fb      	str	r3, [r7, #12]
 8006824:	e00c      	b.n	8006840 <tcp_close_shutdown+0xc8>
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	429a      	cmp	r2, r3
 800682e:	d104      	bne.n	800683a <tcp_close_shutdown+0xc2>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	68da      	ldr	r2, [r3, #12]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	60da      	str	r2, [r3, #12]
 8006838:	e005      	b.n	8006846 <tcp_close_shutdown+0xce>
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	60fb      	str	r3, [r7, #12]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1ef      	bne.n	8006826 <tcp_close_shutdown+0xae>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	60da      	str	r2, [r3, #12]
 800684c:	4b37      	ldr	r3, [pc, #220]	; (800692c <tcp_close_shutdown+0x1b4>)
 800684e:	2201      	movs	r2, #1
 8006850:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8006852:	4b37      	ldr	r3, [pc, #220]	; (8006930 <tcp_close_shutdown+0x1b8>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	429a      	cmp	r2, r3
 800685a:	d102      	bne.n	8006862 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800685c:	f004 f800 	bl	800a860 <tcp_trigger_input_pcb_close>
 8006860:	e002      	b.n	8006868 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f7ff fed6 	bl	8006614 <tcp_free>
      }
      return ERR_OK;
 8006868:	2300      	movs	r3, #0
 800686a:	e050      	b.n	800690e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	7d1b      	ldrb	r3, [r3, #20]
 8006870:	2b02      	cmp	r3, #2
 8006872:	d03b      	beq.n	80068ec <tcp_close_shutdown+0x174>
 8006874:	2b02      	cmp	r3, #2
 8006876:	dc44      	bgt.n	8006902 <tcp_close_shutdown+0x18a>
 8006878:	2b00      	cmp	r3, #0
 800687a:	d002      	beq.n	8006882 <tcp_close_shutdown+0x10a>
 800687c:	2b01      	cmp	r3, #1
 800687e:	d02a      	beq.n	80068d6 <tcp_close_shutdown+0x15e>
 8006880:	e03f      	b.n	8006902 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	8adb      	ldrh	r3, [r3, #22]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d021      	beq.n	80068ce <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800688a:	4b2a      	ldr	r3, [pc, #168]	; (8006934 <tcp_close_shutdown+0x1bc>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	429a      	cmp	r2, r3
 8006892:	d105      	bne.n	80068a0 <tcp_close_shutdown+0x128>
 8006894:	4b27      	ldr	r3, [pc, #156]	; (8006934 <tcp_close_shutdown+0x1bc>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	4a26      	ldr	r2, [pc, #152]	; (8006934 <tcp_close_shutdown+0x1bc>)
 800689c:	6013      	str	r3, [r2, #0]
 800689e:	e013      	b.n	80068c8 <tcp_close_shutdown+0x150>
 80068a0:	4b24      	ldr	r3, [pc, #144]	; (8006934 <tcp_close_shutdown+0x1bc>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	60bb      	str	r3, [r7, #8]
 80068a6:	e00c      	b.n	80068c2 <tcp_close_shutdown+0x14a>
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d104      	bne.n	80068bc <tcp_close_shutdown+0x144>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	68da      	ldr	r2, [r3, #12]
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	60da      	str	r2, [r3, #12]
 80068ba:	e005      	b.n	80068c8 <tcp_close_shutdown+0x150>
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	60bb      	str	r3, [r7, #8]
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1ef      	bne.n	80068a8 <tcp_close_shutdown+0x130>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f7ff fea0 	bl	8006614 <tcp_free>
      break;
 80068d4:	e01a      	b.n	800690c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f7ff ff14 	bl	8006704 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80068dc:	6879      	ldr	r1, [r7, #4]
 80068de:	4816      	ldr	r0, [pc, #88]	; (8006938 <tcp_close_shutdown+0x1c0>)
 80068e0:	f001 fb4e 	bl	8007f80 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f7ff feb1 	bl	800664c <tcp_free_listen>
      break;
 80068ea:	e00f      	b.n	800690c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80068ec:	6879      	ldr	r1, [r7, #4]
 80068ee:	480e      	ldr	r0, [pc, #56]	; (8006928 <tcp_close_shutdown+0x1b0>)
 80068f0:	f001 fb46 	bl	8007f80 <tcp_pcb_remove>
 80068f4:	4b0d      	ldr	r3, [pc, #52]	; (800692c <tcp_close_shutdown+0x1b4>)
 80068f6:	2201      	movs	r2, #1
 80068f8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7ff fe8a 	bl	8006614 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8006900:	e004      	b.n	800690c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f81a 	bl	800693c <tcp_close_shutdown_fin>
 8006908:	4603      	mov	r3, r0
 800690a:	e000      	b.n	800690e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	3710      	adds	r7, #16
 8006912:	46bd      	mov	sp, r7
 8006914:	bdb0      	pop	{r4, r5, r7, pc}
 8006916:	bf00      	nop
 8006918:	08011490 	.word	0x08011490
 800691c:	08011564 	.word	0x08011564
 8006920:	080114d4 	.word	0x080114d4
 8006924:	08011584 	.word	0x08011584
 8006928:	20008eac 	.word	0x20008eac
 800692c:	20008ea8 	.word	0x20008ea8
 8006930:	20008ec0 	.word	0x20008ec0
 8006934:	20008eb8 	.word	0x20008eb8
 8006938:	20008eb4 	.word	0x20008eb4

0800693c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d106      	bne.n	8006958 <tcp_close_shutdown_fin+0x1c>
 800694a:	4b2e      	ldr	r3, [pc, #184]	; (8006a04 <tcp_close_shutdown_fin+0xc8>)
 800694c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8006950:	492d      	ldr	r1, [pc, #180]	; (8006a08 <tcp_close_shutdown_fin+0xcc>)
 8006952:	482e      	ldr	r0, [pc, #184]	; (8006a0c <tcp_close_shutdown_fin+0xd0>)
 8006954:	f008 fcc8 	bl	800f2e8 <iprintf>

  switch (pcb->state) {
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	7d1b      	ldrb	r3, [r3, #20]
 800695c:	2b07      	cmp	r3, #7
 800695e:	d020      	beq.n	80069a2 <tcp_close_shutdown_fin+0x66>
 8006960:	2b07      	cmp	r3, #7
 8006962:	dc2b      	bgt.n	80069bc <tcp_close_shutdown_fin+0x80>
 8006964:	2b03      	cmp	r3, #3
 8006966:	d002      	beq.n	800696e <tcp_close_shutdown_fin+0x32>
 8006968:	2b04      	cmp	r3, #4
 800696a:	d00d      	beq.n	8006988 <tcp_close_shutdown_fin+0x4c>
 800696c:	e026      	b.n	80069bc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f004 fde0 	bl	800b534 <tcp_send_fin>
 8006974:	4603      	mov	r3, r0
 8006976:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006978:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d11f      	bne.n	80069c0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2205      	movs	r2, #5
 8006984:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006986:	e01b      	b.n	80069c0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f004 fdd3 	bl	800b534 <tcp_send_fin>
 800698e:	4603      	mov	r3, r0
 8006990:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d114      	bne.n	80069c4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2205      	movs	r2, #5
 800699e:	751a      	strb	r2, [r3, #20]
      }
      break;
 80069a0:	e010      	b.n	80069c4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f004 fdc6 	bl	800b534 <tcp_send_fin>
 80069a8:	4603      	mov	r3, r0
 80069aa:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80069ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d109      	bne.n	80069c8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2209      	movs	r2, #9
 80069b8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80069ba:	e005      	b.n	80069c8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80069bc:	2300      	movs	r3, #0
 80069be:	e01c      	b.n	80069fa <tcp_close_shutdown_fin+0xbe>
      break;
 80069c0:	bf00      	nop
 80069c2:	e002      	b.n	80069ca <tcp_close_shutdown_fin+0x8e>
      break;
 80069c4:	bf00      	nop
 80069c6:	e000      	b.n	80069ca <tcp_close_shutdown_fin+0x8e>
      break;
 80069c8:	bf00      	nop
  }

  if (err == ERR_OK) {
 80069ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d103      	bne.n	80069da <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f004 feec 	bl	800b7b0 <tcp_output>
 80069d8:	e00d      	b.n	80069f6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80069da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069e2:	d108      	bne.n	80069f6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	8b5b      	ldrh	r3, [r3, #26]
 80069e8:	f043 0308 	orr.w	r3, r3, #8
 80069ec:	b29a      	uxth	r2, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80069f2:	2300      	movs	r3, #0
 80069f4:	e001      	b.n	80069fa <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80069f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3710      	adds	r7, #16
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	08011490 	.word	0x08011490
 8006a08:	08011540 	.word	0x08011540
 8006a0c:	080114d4 	.word	0x080114d4

08006a10 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d109      	bne.n	8006a32 <tcp_close+0x22>
 8006a1e:	4b0f      	ldr	r3, [pc, #60]	; (8006a5c <tcp_close+0x4c>)
 8006a20:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8006a24:	490e      	ldr	r1, [pc, #56]	; (8006a60 <tcp_close+0x50>)
 8006a26:	480f      	ldr	r0, [pc, #60]	; (8006a64 <tcp_close+0x54>)
 8006a28:	f008 fc5e 	bl	800f2e8 <iprintf>
 8006a2c:	f06f 030f 	mvn.w	r3, #15
 8006a30:	e00f      	b.n	8006a52 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	7d1b      	ldrb	r3, [r3, #20]
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d006      	beq.n	8006a48 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	8b5b      	ldrh	r3, [r3, #26]
 8006a3e:	f043 0310 	orr.w	r3, r3, #16
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006a48:	2101      	movs	r1, #1
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f7ff fe94 	bl	8006778 <tcp_close_shutdown>
 8006a50:	4603      	mov	r3, r0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3708      	adds	r7, #8
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	08011490 	.word	0x08011490
 8006a60:	080115a0 	.word	0x080115a0
 8006a64:	080114d4 	.word	0x080114d4

08006a68 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b08e      	sub	sp, #56	; 0x38
 8006a6c:	af04      	add	r7, sp, #16
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d107      	bne.n	8006a88 <tcp_abandon+0x20>
 8006a78:	4b52      	ldr	r3, [pc, #328]	; (8006bc4 <tcp_abandon+0x15c>)
 8006a7a:	f240 223d 	movw	r2, #573	; 0x23d
 8006a7e:	4952      	ldr	r1, [pc, #328]	; (8006bc8 <tcp_abandon+0x160>)
 8006a80:	4852      	ldr	r0, [pc, #328]	; (8006bcc <tcp_abandon+0x164>)
 8006a82:	f008 fc31 	bl	800f2e8 <iprintf>
 8006a86:	e099      	b.n	8006bbc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	7d1b      	ldrb	r3, [r3, #20]
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d106      	bne.n	8006a9e <tcp_abandon+0x36>
 8006a90:	4b4c      	ldr	r3, [pc, #304]	; (8006bc4 <tcp_abandon+0x15c>)
 8006a92:	f44f 7210 	mov.w	r2, #576	; 0x240
 8006a96:	494e      	ldr	r1, [pc, #312]	; (8006bd0 <tcp_abandon+0x168>)
 8006a98:	484c      	ldr	r0, [pc, #304]	; (8006bcc <tcp_abandon+0x164>)
 8006a9a:	f008 fc25 	bl	800f2e8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	7d1b      	ldrb	r3, [r3, #20]
 8006aa2:	2b0a      	cmp	r3, #10
 8006aa4:	d107      	bne.n	8006ab6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8006aa6:	6879      	ldr	r1, [r7, #4]
 8006aa8:	484a      	ldr	r0, [pc, #296]	; (8006bd4 <tcp_abandon+0x16c>)
 8006aaa:	f001 fa69 	bl	8007f80 <tcp_pcb_remove>
    tcp_free(pcb);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f7ff fdb0 	bl	8006614 <tcp_free>
 8006ab4:	e082      	b.n	8006bbc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8006aba:	2300      	movs	r3, #0
 8006abc:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ac2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ad0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	7d1b      	ldrb	r3, [r3, #20]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d126      	bne.n	8006b2e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	8adb      	ldrh	r3, [r3, #22]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d02e      	beq.n	8006b46 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006ae8:	4b3b      	ldr	r3, [pc, #236]	; (8006bd8 <tcp_abandon+0x170>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d105      	bne.n	8006afe <tcp_abandon+0x96>
 8006af2:	4b39      	ldr	r3, [pc, #228]	; (8006bd8 <tcp_abandon+0x170>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	4a37      	ldr	r2, [pc, #220]	; (8006bd8 <tcp_abandon+0x170>)
 8006afa:	6013      	str	r3, [r2, #0]
 8006afc:	e013      	b.n	8006b26 <tcp_abandon+0xbe>
 8006afe:	4b36      	ldr	r3, [pc, #216]	; (8006bd8 <tcp_abandon+0x170>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	61fb      	str	r3, [r7, #28]
 8006b04:	e00c      	b.n	8006b20 <tcp_abandon+0xb8>
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d104      	bne.n	8006b1a <tcp_abandon+0xb2>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	68da      	ldr	r2, [r3, #12]
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	60da      	str	r2, [r3, #12]
 8006b18:	e005      	b.n	8006b26 <tcp_abandon+0xbe>
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	61fb      	str	r3, [r7, #28]
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d1ef      	bne.n	8006b06 <tcp_abandon+0x9e>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	60da      	str	r2, [r3, #12]
 8006b2c:	e00b      	b.n	8006b46 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	8adb      	ldrh	r3, [r3, #22]
 8006b36:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006b38:	6879      	ldr	r1, [r7, #4]
 8006b3a:	4828      	ldr	r0, [pc, #160]	; (8006bdc <tcp_abandon+0x174>)
 8006b3c:	f001 fa20 	bl	8007f80 <tcp_pcb_remove>
 8006b40:	4b27      	ldr	r3, [pc, #156]	; (8006be0 <tcp_abandon+0x178>)
 8006b42:	2201      	movs	r2, #1
 8006b44:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d004      	beq.n	8006b58 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b52:	4618      	mov	r0, r3
 8006b54:	f000 fed6 	bl	8007904 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d004      	beq.n	8006b6a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b64:	4618      	mov	r0, r3
 8006b66:	f000 fecd 	bl	8007904 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d004      	beq.n	8006b7c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b76:	4618      	mov	r0, r3
 8006b78:	f000 fec4 	bl	8007904 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00e      	beq.n	8006ba0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006b82:	6879      	ldr	r1, [r7, #4]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	3304      	adds	r3, #4
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	8b12      	ldrh	r2, [r2, #24]
 8006b8c:	9202      	str	r2, [sp, #8]
 8006b8e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006b90:	9201      	str	r2, [sp, #4]
 8006b92:	9300      	str	r3, [sp, #0]
 8006b94:	460b      	mov	r3, r1
 8006b96:	697a      	ldr	r2, [r7, #20]
 8006b98:	69b9      	ldr	r1, [r7, #24]
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f005 fbbc 	bl	800c318 <tcp_rst>
    }
    last_state = pcb->state;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	7d1b      	ldrb	r3, [r3, #20]
 8006ba4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f7ff fd34 	bl	8006614 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d004      	beq.n	8006bbc <tcp_abandon+0x154>
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	f06f 010c 	mvn.w	r1, #12
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	4798      	blx	r3
  }
}
 8006bbc:	3728      	adds	r7, #40	; 0x28
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	08011490 	.word	0x08011490
 8006bc8:	080115d4 	.word	0x080115d4
 8006bcc:	080114d4 	.word	0x080114d4
 8006bd0:	080115f0 	.word	0x080115f0
 8006bd4:	20008ebc 	.word	0x20008ebc
 8006bd8:	20008eb8 	.word	0x20008eb8
 8006bdc:	20008eac 	.word	0x20008eac
 8006be0:	20008ea8 	.word	0x20008ea8

08006be4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8006bec:	2101      	movs	r1, #1
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f7ff ff3a 	bl	8006a68 <tcp_abandon>
}
 8006bf4:	bf00      	nop
 8006bf6:	3708      	adds	r7, #8
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b088      	sub	sp, #32
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	4613      	mov	r3, r2
 8006c08:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8006c0a:	2304      	movs	r3, #4
 8006c0c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d101      	bne.n	8006c18 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8006c14:	4b3e      	ldr	r3, [pc, #248]	; (8006d10 <tcp_bind+0x114>)
 8006c16:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d109      	bne.n	8006c32 <tcp_bind+0x36>
 8006c1e:	4b3d      	ldr	r3, [pc, #244]	; (8006d14 <tcp_bind+0x118>)
 8006c20:	f240 22a9 	movw	r2, #681	; 0x2a9
 8006c24:	493c      	ldr	r1, [pc, #240]	; (8006d18 <tcp_bind+0x11c>)
 8006c26:	483d      	ldr	r0, [pc, #244]	; (8006d1c <tcp_bind+0x120>)
 8006c28:	f008 fb5e 	bl	800f2e8 <iprintf>
 8006c2c:	f06f 030f 	mvn.w	r3, #15
 8006c30:	e06a      	b.n	8006d08 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	7d1b      	ldrb	r3, [r3, #20]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d009      	beq.n	8006c4e <tcp_bind+0x52>
 8006c3a:	4b36      	ldr	r3, [pc, #216]	; (8006d14 <tcp_bind+0x118>)
 8006c3c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8006c40:	4937      	ldr	r1, [pc, #220]	; (8006d20 <tcp_bind+0x124>)
 8006c42:	4836      	ldr	r0, [pc, #216]	; (8006d1c <tcp_bind+0x120>)
 8006c44:	f008 fb50 	bl	800f2e8 <iprintf>
 8006c48:	f06f 0305 	mvn.w	r3, #5
 8006c4c:	e05c      	b.n	8006d08 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8006c4e:	88fb      	ldrh	r3, [r7, #6]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d109      	bne.n	8006c68 <tcp_bind+0x6c>
    port = tcp_new_port();
 8006c54:	f000 f9f0 	bl	8007038 <tcp_new_port>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8006c5c:	88fb      	ldrh	r3, [r7, #6]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d135      	bne.n	8006cce <tcp_bind+0xd2>
      return ERR_BUF;
 8006c62:	f06f 0301 	mvn.w	r3, #1
 8006c66:	e04f      	b.n	8006d08 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8006c68:	2300      	movs	r3, #0
 8006c6a:	61fb      	str	r3, [r7, #28]
 8006c6c:	e02b      	b.n	8006cc6 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8006c6e:	4a2d      	ldr	r2, [pc, #180]	; (8006d24 <tcp_bind+0x128>)
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	61bb      	str	r3, [r7, #24]
 8006c7a:	e01e      	b.n	8006cba <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	8adb      	ldrh	r3, [r3, #22]
 8006c80:	88fa      	ldrh	r2, [r7, #6]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d116      	bne.n	8006cb4 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8006c86:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d010      	beq.n	8006cae <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d00c      	beq.n	8006cae <tcp_bind+0xb2>
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d009      	beq.n	8006cae <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d005      	beq.n	8006cae <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d102      	bne.n	8006cb4 <tcp_bind+0xb8>
              return ERR_USE;
 8006cae:	f06f 0307 	mvn.w	r3, #7
 8006cb2:	e029      	b.n	8006d08 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	61bb      	str	r3, [r7, #24]
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d1dd      	bne.n	8006c7c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	61fb      	str	r3, [r7, #28]
 8006cc6:	69fa      	ldr	r2, [r7, #28]
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	dbcf      	blt.n	8006c6e <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00c      	beq.n	8006cee <tcp_bind+0xf2>
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d008      	beq.n	8006cee <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d002      	beq.n	8006ce8 <tcp_bind+0xec>
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	e000      	b.n	8006cea <tcp_bind+0xee>
 8006ce8:	2300      	movs	r3, #0
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	88fa      	ldrh	r2, [r7, #6]
 8006cf2:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8006cf4:	4b0c      	ldr	r3, [pc, #48]	; (8006d28 <tcp_bind+0x12c>)
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	60da      	str	r2, [r3, #12]
 8006cfc:	4a0a      	ldr	r2, [pc, #40]	; (8006d28 <tcp_bind+0x12c>)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6013      	str	r3, [r2, #0]
 8006d02:	f005 fccb 	bl	800c69c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3720      	adds	r7, #32
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	08014314 	.word	0x08014314
 8006d14:	08011490 	.word	0x08011490
 8006d18:	08011624 	.word	0x08011624
 8006d1c:	080114d4 	.word	0x080114d4
 8006d20:	0801163c 	.word	0x0801163c
 8006d24:	080142ec 	.word	0x080142ec
 8006d28:	20008eb8 	.word	0x20008eb8

08006d2c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	4613      	mov	r3, r2
 8006d38:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d106      	bne.n	8006d4e <tcp_accept_null+0x22>
 8006d40:	4b07      	ldr	r3, [pc, #28]	; (8006d60 <tcp_accept_null+0x34>)
 8006d42:	f240 320f 	movw	r2, #783	; 0x30f
 8006d46:	4907      	ldr	r1, [pc, #28]	; (8006d64 <tcp_accept_null+0x38>)
 8006d48:	4807      	ldr	r0, [pc, #28]	; (8006d68 <tcp_accept_null+0x3c>)
 8006d4a:	f008 facd 	bl	800f2e8 <iprintf>

  tcp_abort(pcb);
 8006d4e:	68b8      	ldr	r0, [r7, #8]
 8006d50:	f7ff ff48 	bl	8006be4 <tcp_abort>

  return ERR_ABRT;
 8006d54:	f06f 030c 	mvn.w	r3, #12
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3710      	adds	r7, #16
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	08011490 	.word	0x08011490
 8006d64:	08011664 	.word	0x08011664
 8006d68:	080114d4 	.word	0x080114d4

08006d6c <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b082      	sub	sp, #8
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	460b      	mov	r3, r1
 8006d76:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8006d78:	78fb      	ldrb	r3, [r7, #3]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f806 	bl	8006d90 <tcp_listen_with_backlog_and_err>
 8006d84:	4603      	mov	r3, r0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3708      	adds	r7, #8
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
	...

08006d90 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b088      	sub	sp, #32
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	460b      	mov	r3, r1
 8006d9a:	607a      	str	r2, [r7, #4]
 8006d9c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d109      	bne.n	8006dbc <tcp_listen_with_backlog_and_err+0x2c>
 8006da8:	4b47      	ldr	r3, [pc, #284]	; (8006ec8 <tcp_listen_with_backlog_and_err+0x138>)
 8006daa:	f240 3259 	movw	r2, #857	; 0x359
 8006dae:	4947      	ldr	r1, [pc, #284]	; (8006ecc <tcp_listen_with_backlog_and_err+0x13c>)
 8006db0:	4847      	ldr	r0, [pc, #284]	; (8006ed0 <tcp_listen_with_backlog_and_err+0x140>)
 8006db2:	f008 fa99 	bl	800f2e8 <iprintf>
 8006db6:	23f0      	movs	r3, #240	; 0xf0
 8006db8:	76fb      	strb	r3, [r7, #27]
 8006dba:	e079      	b.n	8006eb0 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	7d1b      	ldrb	r3, [r3, #20]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d009      	beq.n	8006dd8 <tcp_listen_with_backlog_and_err+0x48>
 8006dc4:	4b40      	ldr	r3, [pc, #256]	; (8006ec8 <tcp_listen_with_backlog_and_err+0x138>)
 8006dc6:	f240 325a 	movw	r2, #858	; 0x35a
 8006dca:	4942      	ldr	r1, [pc, #264]	; (8006ed4 <tcp_listen_with_backlog_and_err+0x144>)
 8006dcc:	4840      	ldr	r0, [pc, #256]	; (8006ed0 <tcp_listen_with_backlog_and_err+0x140>)
 8006dce:	f008 fa8b 	bl	800f2e8 <iprintf>
 8006dd2:	23f1      	movs	r3, #241	; 0xf1
 8006dd4:	76fb      	strb	r3, [r7, #27]
 8006dd6:	e06b      	b.n	8006eb0 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	7d1b      	ldrb	r3, [r3, #20]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d104      	bne.n	8006dea <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8006de4:	23f7      	movs	r3, #247	; 0xf7
 8006de6:	76fb      	strb	r3, [r7, #27]
    goto done;
 8006de8:	e062      	b.n	8006eb0 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8006dea:	2002      	movs	r0, #2
 8006dec:	f7fe fb14 	bl	8005418 <memp_malloc>
 8006df0:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d102      	bne.n	8006dfe <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8006df8:	23ff      	movs	r3, #255	; 0xff
 8006dfa:	76fb      	strb	r3, [r7, #27]
    goto done;
 8006dfc:	e058      	b.n	8006eb0 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	691a      	ldr	r2, [r3, #16]
 8006e02:	69fb      	ldr	r3, [r7, #28]
 8006e04:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	8ada      	ldrh	r2, [r3, #22]
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	2201      	movs	r2, #1
 8006e12:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	7d5a      	ldrb	r2, [r3, #21]
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	7a5a      	ldrb	r2, [r3, #9]
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	2200      	movs	r2, #0
 8006e28:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	7ada      	ldrb	r2, [r3, #11]
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	7a9a      	ldrb	r2, [r3, #10]
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	8adb      	ldrh	r3, [r3, #22]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d021      	beq.n	8006e8e <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8006e4a:	4b23      	ldr	r3, [pc, #140]	; (8006ed8 <tcp_listen_with_backlog_and_err+0x148>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d105      	bne.n	8006e60 <tcp_listen_with_backlog_and_err+0xd0>
 8006e54:	4b20      	ldr	r3, [pc, #128]	; (8006ed8 <tcp_listen_with_backlog_and_err+0x148>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	4a1f      	ldr	r2, [pc, #124]	; (8006ed8 <tcp_listen_with_backlog_and_err+0x148>)
 8006e5c:	6013      	str	r3, [r2, #0]
 8006e5e:	e013      	b.n	8006e88 <tcp_listen_with_backlog_and_err+0xf8>
 8006e60:	4b1d      	ldr	r3, [pc, #116]	; (8006ed8 <tcp_listen_with_backlog_and_err+0x148>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	617b      	str	r3, [r7, #20]
 8006e66:	e00c      	b.n	8006e82 <tcp_listen_with_backlog_and_err+0xf2>
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d104      	bne.n	8006e7c <tcp_listen_with_backlog_and_err+0xec>
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	68da      	ldr	r2, [r3, #12]
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	60da      	str	r2, [r3, #12]
 8006e7a:	e005      	b.n	8006e88 <tcp_listen_with_backlog_and_err+0xf8>
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	617b      	str	r3, [r7, #20]
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d1ef      	bne.n	8006e68 <tcp_listen_with_backlog_and_err+0xd8>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8006e8e:	68f8      	ldr	r0, [r7, #12]
 8006e90:	f7ff fbc0 	bl	8006614 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	4a11      	ldr	r2, [pc, #68]	; (8006edc <tcp_listen_with_backlog_and_err+0x14c>)
 8006e98:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8006e9a:	4b11      	ldr	r3, [pc, #68]	; (8006ee0 <tcp_listen_with_backlog_and_err+0x150>)
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	60da      	str	r2, [r3, #12]
 8006ea2:	4a0f      	ldr	r2, [pc, #60]	; (8006ee0 <tcp_listen_with_backlog_and_err+0x150>)
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	6013      	str	r3, [r2, #0]
 8006ea8:	f005 fbf8 	bl	800c69c <tcp_timer_needed>
  res = ERR_OK;
 8006eac:	2300      	movs	r3, #0
 8006eae:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d002      	beq.n	8006ebc <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	7efa      	ldrb	r2, [r7, #27]
 8006eba:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8006ebc:	69fb      	ldr	r3, [r7, #28]
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3720      	adds	r7, #32
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	08011490 	.word	0x08011490
 8006ecc:	08011684 	.word	0x08011684
 8006ed0:	080114d4 	.word	0x080114d4
 8006ed4:	080116b4 	.word	0x080116b4
 8006ed8:	20008eb8 	.word	0x20008eb8
 8006edc:	08006d2d 	.word	0x08006d2d
 8006ee0:	20008eb4 	.word	0x20008eb4

08006ee4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d106      	bne.n	8006f00 <tcp_update_rcv_ann_wnd+0x1c>
 8006ef2:	4b25      	ldr	r3, [pc, #148]	; (8006f88 <tcp_update_rcv_ann_wnd+0xa4>)
 8006ef4:	f240 32a6 	movw	r2, #934	; 0x3a6
 8006ef8:	4924      	ldr	r1, [pc, #144]	; (8006f8c <tcp_update_rcv_ann_wnd+0xa8>)
 8006efa:	4825      	ldr	r0, [pc, #148]	; (8006f90 <tcp_update_rcv_ann_wnd+0xac>)
 8006efc:	f008 f9f4 	bl	800f2e8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006f08:	4413      	add	r3, r2
 8006f0a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8006f14:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8006f18:	bf28      	it	cs
 8006f1a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8006f1e:	b292      	uxth	r2, r2
 8006f20:	4413      	add	r3, r2
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	db08      	blt.n	8006f3c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	1ad3      	subs	r3, r2, r3
 8006f3a:	e020      	b.n	8006f7e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	dd03      	ble.n	8006f52 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f50:	e014      	b.n	8006f7c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5a:	1ad3      	subs	r3, r2, r3
 8006f5c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f64:	d306      	bcc.n	8006f74 <tcp_update_rcv_ann_wnd+0x90>
 8006f66:	4b08      	ldr	r3, [pc, #32]	; (8006f88 <tcp_update_rcv_ann_wnd+0xa4>)
 8006f68:	f240 32b6 	movw	r2, #950	; 0x3b6
 8006f6c:	4909      	ldr	r1, [pc, #36]	; (8006f94 <tcp_update_rcv_ann_wnd+0xb0>)
 8006f6e:	4808      	ldr	r0, [pc, #32]	; (8006f90 <tcp_update_rcv_ann_wnd+0xac>)
 8006f70:	f008 f9ba 	bl	800f2e8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	b29a      	uxth	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8006f7c:	2300      	movs	r3, #0
  }
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	08011490 	.word	0x08011490
 8006f8c:	080116ec 	.word	0x080116ec
 8006f90:	080114d4 	.word	0x080114d4
 8006f94:	08011710 	.word	0x08011710

08006f98 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d107      	bne.n	8006fba <tcp_recved+0x22>
 8006faa:	4b1f      	ldr	r3, [pc, #124]	; (8007028 <tcp_recved+0x90>)
 8006fac:	f240 32cf 	movw	r2, #975	; 0x3cf
 8006fb0:	491e      	ldr	r1, [pc, #120]	; (800702c <tcp_recved+0x94>)
 8006fb2:	481f      	ldr	r0, [pc, #124]	; (8007030 <tcp_recved+0x98>)
 8006fb4:	f008 f998 	bl	800f2e8 <iprintf>
 8006fb8:	e032      	b.n	8007020 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	7d1b      	ldrb	r3, [r3, #20]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d106      	bne.n	8006fd0 <tcp_recved+0x38>
 8006fc2:	4b19      	ldr	r3, [pc, #100]	; (8007028 <tcp_recved+0x90>)
 8006fc4:	f240 32d2 	movw	r2, #978	; 0x3d2
 8006fc8:	491a      	ldr	r1, [pc, #104]	; (8007034 <tcp_recved+0x9c>)
 8006fca:	4819      	ldr	r0, [pc, #100]	; (8007030 <tcp_recved+0x98>)
 8006fcc:	f008 f98c 	bl	800f2e8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006fd4:	887b      	ldrh	r3, [r7, #2]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8006fda:	89fb      	ldrh	r3, [r7, #14]
 8006fdc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006fe0:	d804      	bhi.n	8006fec <tcp_recved+0x54>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fe6:	89fa      	ldrh	r2, [r7, #14]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d204      	bcs.n	8006ff6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006ff2:	851a      	strh	r2, [r3, #40]	; 0x28
 8006ff4:	e002      	b.n	8006ffc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	89fa      	ldrh	r2, [r7, #14]
 8006ffa:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f7ff ff71 	bl	8006ee4 <tcp_update_rcv_ann_wnd>
 8007002:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800700a:	d309      	bcc.n	8007020 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	8b5b      	ldrh	r3, [r3, #26]
 8007010:	f043 0302 	orr.w	r3, r3, #2
 8007014:	b29a      	uxth	r2, r3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f004 fbc8 	bl	800b7b0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8007020:	3710      	adds	r7, #16
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	08011490 	.word	0x08011490
 800702c:	0801172c 	.word	0x0801172c
 8007030:	080114d4 	.word	0x080114d4
 8007034:	08011744 	.word	0x08011744

08007038 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800703e:	2300      	movs	r3, #0
 8007040:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8007042:	4b1e      	ldr	r3, [pc, #120]	; (80070bc <tcp_new_port+0x84>)
 8007044:	881b      	ldrh	r3, [r3, #0]
 8007046:	3301      	adds	r3, #1
 8007048:	b29a      	uxth	r2, r3
 800704a:	4b1c      	ldr	r3, [pc, #112]	; (80070bc <tcp_new_port+0x84>)
 800704c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800704e:	4b1b      	ldr	r3, [pc, #108]	; (80070bc <tcp_new_port+0x84>)
 8007050:	881b      	ldrh	r3, [r3, #0]
 8007052:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007056:	4293      	cmp	r3, r2
 8007058:	d103      	bne.n	8007062 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800705a:	4b18      	ldr	r3, [pc, #96]	; (80070bc <tcp_new_port+0x84>)
 800705c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8007060:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8007062:	2300      	movs	r3, #0
 8007064:	71fb      	strb	r3, [r7, #7]
 8007066:	e01e      	b.n	80070a6 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007068:	79fb      	ldrb	r3, [r7, #7]
 800706a:	4a15      	ldr	r2, [pc, #84]	; (80070c0 <tcp_new_port+0x88>)
 800706c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	603b      	str	r3, [r7, #0]
 8007074:	e011      	b.n	800709a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	8ada      	ldrh	r2, [r3, #22]
 800707a:	4b10      	ldr	r3, [pc, #64]	; (80070bc <tcp_new_port+0x84>)
 800707c:	881b      	ldrh	r3, [r3, #0]
 800707e:	429a      	cmp	r2, r3
 8007080:	d108      	bne.n	8007094 <tcp_new_port+0x5c>
        n++;
 8007082:	88bb      	ldrh	r3, [r7, #4]
 8007084:	3301      	adds	r3, #1
 8007086:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8007088:	88bb      	ldrh	r3, [r7, #4]
 800708a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800708e:	d3d8      	bcc.n	8007042 <tcp_new_port+0xa>
          return 0;
 8007090:	2300      	movs	r3, #0
 8007092:	e00d      	b.n	80070b0 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	603b      	str	r3, [r7, #0]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1ea      	bne.n	8007076 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80070a0:	79fb      	ldrb	r3, [r7, #7]
 80070a2:	3301      	adds	r3, #1
 80070a4:	71fb      	strb	r3, [r7, #7]
 80070a6:	79fb      	ldrb	r3, [r7, #7]
 80070a8:	2b03      	cmp	r3, #3
 80070aa:	d9dd      	bls.n	8007068 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80070ac:	4b03      	ldr	r3, [pc, #12]	; (80070bc <tcp_new_port+0x84>)
 80070ae:	881b      	ldrh	r3, [r3, #0]
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr
 80070bc:	2000001a 	.word	0x2000001a
 80070c0:	080142ec 	.word	0x080142ec

080070c4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80070c4:	b5b0      	push	{r4, r5, r7, lr}
 80070c6:	b090      	sub	sp, #64	; 0x40
 80070c8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80070ca:	2300      	movs	r3, #0
 80070cc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80070d0:	4b94      	ldr	r3, [pc, #592]	; (8007324 <tcp_slowtmr+0x260>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	3301      	adds	r3, #1
 80070d6:	4a93      	ldr	r2, [pc, #588]	; (8007324 <tcp_slowtmr+0x260>)
 80070d8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80070da:	4b93      	ldr	r3, [pc, #588]	; (8007328 <tcp_slowtmr+0x264>)
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	3301      	adds	r3, #1
 80070e0:	b2da      	uxtb	r2, r3
 80070e2:	4b91      	ldr	r3, [pc, #580]	; (8007328 <tcp_slowtmr+0x264>)
 80070e4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80070e6:	2300      	movs	r3, #0
 80070e8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80070ea:	4b90      	ldr	r3, [pc, #576]	; (800732c <tcp_slowtmr+0x268>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80070f0:	e29f      	b.n	8007632 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80070f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f4:	7d1b      	ldrb	r3, [r3, #20]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d106      	bne.n	8007108 <tcp_slowtmr+0x44>
 80070fa:	4b8d      	ldr	r3, [pc, #564]	; (8007330 <tcp_slowtmr+0x26c>)
 80070fc:	f240 42be 	movw	r2, #1214	; 0x4be
 8007100:	498c      	ldr	r1, [pc, #560]	; (8007334 <tcp_slowtmr+0x270>)
 8007102:	488d      	ldr	r0, [pc, #564]	; (8007338 <tcp_slowtmr+0x274>)
 8007104:	f008 f8f0 	bl	800f2e8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800710a:	7d1b      	ldrb	r3, [r3, #20]
 800710c:	2b01      	cmp	r3, #1
 800710e:	d106      	bne.n	800711e <tcp_slowtmr+0x5a>
 8007110:	4b87      	ldr	r3, [pc, #540]	; (8007330 <tcp_slowtmr+0x26c>)
 8007112:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8007116:	4989      	ldr	r1, [pc, #548]	; (800733c <tcp_slowtmr+0x278>)
 8007118:	4887      	ldr	r0, [pc, #540]	; (8007338 <tcp_slowtmr+0x274>)
 800711a:	f008 f8e5 	bl	800f2e8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800711e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007120:	7d1b      	ldrb	r3, [r3, #20]
 8007122:	2b0a      	cmp	r3, #10
 8007124:	d106      	bne.n	8007134 <tcp_slowtmr+0x70>
 8007126:	4b82      	ldr	r3, [pc, #520]	; (8007330 <tcp_slowtmr+0x26c>)
 8007128:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800712c:	4984      	ldr	r1, [pc, #528]	; (8007340 <tcp_slowtmr+0x27c>)
 800712e:	4882      	ldr	r0, [pc, #520]	; (8007338 <tcp_slowtmr+0x274>)
 8007130:	f008 f8da 	bl	800f2e8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007136:	7f9a      	ldrb	r2, [r3, #30]
 8007138:	4b7b      	ldr	r3, [pc, #492]	; (8007328 <tcp_slowtmr+0x264>)
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	429a      	cmp	r2, r3
 800713e:	d105      	bne.n	800714c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8007140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007142:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800714a:	e272      	b.n	8007632 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800714c:	4b76      	ldr	r3, [pc, #472]	; (8007328 <tcp_slowtmr+0x264>)
 800714e:	781a      	ldrb	r2, [r3, #0]
 8007150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007152:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8007154:	2300      	movs	r3, #0
 8007156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800715a:	2300      	movs	r3, #0
 800715c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007162:	7d1b      	ldrb	r3, [r3, #20]
 8007164:	2b02      	cmp	r3, #2
 8007166:	d10a      	bne.n	800717e <tcp_slowtmr+0xba>
 8007168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800716a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800716e:	2b05      	cmp	r3, #5
 8007170:	d905      	bls.n	800717e <tcp_slowtmr+0xba>
      ++pcb_remove;
 8007172:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007176:	3301      	adds	r3, #1
 8007178:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800717c:	e11e      	b.n	80073bc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800717e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007180:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007184:	2b0b      	cmp	r3, #11
 8007186:	d905      	bls.n	8007194 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8007188:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800718c:	3301      	adds	r3, #1
 800718e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007192:	e113      	b.n	80073bc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8007194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007196:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800719a:	2b00      	cmp	r3, #0
 800719c:	d075      	beq.n	800728a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800719e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d006      	beq.n	80071b4 <tcp_slowtmr+0xf0>
 80071a6:	4b62      	ldr	r3, [pc, #392]	; (8007330 <tcp_slowtmr+0x26c>)
 80071a8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80071ac:	4965      	ldr	r1, [pc, #404]	; (8007344 <tcp_slowtmr+0x280>)
 80071ae:	4862      	ldr	r0, [pc, #392]	; (8007338 <tcp_slowtmr+0x274>)
 80071b0:	f008 f89a 	bl	800f2e8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80071b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d106      	bne.n	80071ca <tcp_slowtmr+0x106>
 80071bc:	4b5c      	ldr	r3, [pc, #368]	; (8007330 <tcp_slowtmr+0x26c>)
 80071be:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80071c2:	4961      	ldr	r1, [pc, #388]	; (8007348 <tcp_slowtmr+0x284>)
 80071c4:	485c      	ldr	r0, [pc, #368]	; (8007338 <tcp_slowtmr+0x274>)
 80071c6:	f008 f88f 	bl	800f2e8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80071ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071cc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80071d0:	2b0b      	cmp	r3, #11
 80071d2:	d905      	bls.n	80071e0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80071d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071d8:	3301      	adds	r3, #1
 80071da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80071de:	e0ed      	b.n	80073bc <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80071e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80071e6:	3b01      	subs	r3, #1
 80071e8:	4a58      	ldr	r2, [pc, #352]	; (800734c <tcp_slowtmr+0x288>)
 80071ea:	5cd3      	ldrb	r3, [r2, r3]
 80071ec:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80071ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80071f4:	7c7a      	ldrb	r2, [r7, #17]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d907      	bls.n	800720a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80071fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071fc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007200:	3301      	adds	r3, #1
 8007202:	b2da      	uxtb	r2, r3
 8007204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007206:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800720a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800720c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007210:	7c7a      	ldrb	r2, [r7, #17]
 8007212:	429a      	cmp	r2, r3
 8007214:	f200 80d2 	bhi.w	80073bc <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8007218:	2301      	movs	r3, #1
 800721a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800721c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800721e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007222:	2b00      	cmp	r3, #0
 8007224:	d108      	bne.n	8007238 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8007226:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007228:	f005 f96a 	bl	800c500 <tcp_zero_window_probe>
 800722c:	4603      	mov	r3, r0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d014      	beq.n	800725c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8007232:	2300      	movs	r3, #0
 8007234:	623b      	str	r3, [r7, #32]
 8007236:	e011      	b.n	800725c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8007238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800723a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800723e:	4619      	mov	r1, r3
 8007240:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007242:	f004 f82f 	bl	800b2a4 <tcp_split_unsent_seg>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d107      	bne.n	800725c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800724c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800724e:	f004 faaf 	bl	800b7b0 <tcp_output>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d101      	bne.n	800725c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8007258:	2300      	movs	r3, #0
 800725a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800725c:	6a3b      	ldr	r3, [r7, #32]
 800725e:	2b00      	cmp	r3, #0
 8007260:	f000 80ac 	beq.w	80073bc <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8007264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007266:	2200      	movs	r2, #0
 8007268:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800726c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800726e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007272:	2b06      	cmp	r3, #6
 8007274:	f200 80a2 	bhi.w	80073bc <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8007278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800727a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800727e:	3301      	adds	r3, #1
 8007280:	b2da      	uxtb	r2, r3
 8007282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007284:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8007288:	e098      	b.n	80073bc <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800728a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800728c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007290:	2b00      	cmp	r3, #0
 8007292:	db0f      	blt.n	80072b4 <tcp_slowtmr+0x1f0>
 8007294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007296:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800729a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800729e:	4293      	cmp	r3, r2
 80072a0:	d008      	beq.n	80072b4 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80072a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	3301      	adds	r3, #1
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	b21a      	sxth	r2, r3
 80072b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b2:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80072b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80072ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072bc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80072c0:	429a      	cmp	r2, r3
 80072c2:	db7b      	blt.n	80073bc <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80072c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072c6:	f004 fd65 	bl	800bd94 <tcp_rexmit_rto_prepare>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d007      	beq.n	80072e0 <tcp_slowtmr+0x21c>
 80072d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d171      	bne.n	80073bc <tcp_slowtmr+0x2f8>
 80072d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d06d      	beq.n	80073bc <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80072e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e2:	7d1b      	ldrb	r3, [r3, #20]
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	d03a      	beq.n	800735e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80072e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80072ee:	2b0c      	cmp	r3, #12
 80072f0:	bf28      	it	cs
 80072f2:	230c      	movcs	r3, #12
 80072f4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80072f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80072fc:	10db      	asrs	r3, r3, #3
 80072fe:	b21b      	sxth	r3, r3
 8007300:	461a      	mov	r2, r3
 8007302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007304:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007308:	4413      	add	r3, r2
 800730a:	7efa      	ldrb	r2, [r7, #27]
 800730c:	4910      	ldr	r1, [pc, #64]	; (8007350 <tcp_slowtmr+0x28c>)
 800730e:	5c8a      	ldrb	r2, [r1, r2]
 8007310:	4093      	lsls	r3, r2
 8007312:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800731a:	4293      	cmp	r3, r2
 800731c:	dc1a      	bgt.n	8007354 <tcp_slowtmr+0x290>
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	b21a      	sxth	r2, r3
 8007322:	e019      	b.n	8007358 <tcp_slowtmr+0x294>
 8007324:	20008eb0 	.word	0x20008eb0
 8007328:	2000052a 	.word	0x2000052a
 800732c:	20008eac 	.word	0x20008eac
 8007330:	08011490 	.word	0x08011490
 8007334:	080117d4 	.word	0x080117d4
 8007338:	080114d4 	.word	0x080114d4
 800733c:	08011800 	.word	0x08011800
 8007340:	0801182c 	.word	0x0801182c
 8007344:	0801185c 	.word	0x0801185c
 8007348:	08011890 	.word	0x08011890
 800734c:	080142e4 	.word	0x080142e4
 8007350:	080142d4 	.word	0x080142d4
 8007354:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800735a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800735e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007360:	2200      	movs	r2, #0
 8007362:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007366:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800736a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800736c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007370:	4293      	cmp	r3, r2
 8007372:	bf28      	it	cs
 8007374:	4613      	movcs	r3, r2
 8007376:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8007378:	8a7b      	ldrh	r3, [r7, #18]
 800737a:	085b      	lsrs	r3, r3, #1
 800737c:	b29a      	uxth	r2, r3
 800737e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007380:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007386:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800738a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800738c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800738e:	005b      	lsls	r3, r3, #1
 8007390:	b29b      	uxth	r3, r3
 8007392:	429a      	cmp	r2, r3
 8007394:	d206      	bcs.n	80073a4 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8007396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007398:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800739a:	005b      	lsls	r3, r3, #1
 800739c:	b29a      	uxth	r2, r3
 800739e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80073a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80073a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073aa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80073ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b0:	2200      	movs	r2, #0
 80073b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80073b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073b8:	f004 fd5c 	bl	800be74 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80073bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073be:	7d1b      	ldrb	r3, [r3, #20]
 80073c0:	2b06      	cmp	r3, #6
 80073c2:	d111      	bne.n	80073e8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80073c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c6:	8b5b      	ldrh	r3, [r3, #26]
 80073c8:	f003 0310 	and.w	r3, r3, #16
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00b      	beq.n	80073e8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80073d0:	4b9d      	ldr	r3, [pc, #628]	; (8007648 <tcp_slowtmr+0x584>)
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d6:	6a1b      	ldr	r3, [r3, #32]
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	2b28      	cmp	r3, #40	; 0x28
 80073dc:	d904      	bls.n	80073e8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80073de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073e2:	3301      	adds	r3, #1
 80073e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80073e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ea:	7a5b      	ldrb	r3, [r3, #9]
 80073ec:	f003 0308 	and.w	r3, r3, #8
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d04c      	beq.n	800748e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80073f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80073f8:	2b04      	cmp	r3, #4
 80073fa:	d003      	beq.n	8007404 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80073fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073fe:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8007400:	2b07      	cmp	r3, #7
 8007402:	d144      	bne.n	800748e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007404:	4b90      	ldr	r3, [pc, #576]	; (8007648 <tcp_slowtmr+0x584>)
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800740a:	6a1b      	ldr	r3, [r3, #32]
 800740c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800740e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007410:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007414:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8007418:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800741c:	498b      	ldr	r1, [pc, #556]	; (800764c <tcp_slowtmr+0x588>)
 800741e:	fba1 1303 	umull	r1, r3, r1, r3
 8007422:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007424:	429a      	cmp	r2, r3
 8007426:	d90a      	bls.n	800743e <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8007428:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800742c:	3301      	adds	r3, #1
 800742e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8007432:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007436:	3301      	adds	r3, #1
 8007438:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800743c:	e027      	b.n	800748e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800743e:	4b82      	ldr	r3, [pc, #520]	; (8007648 <tcp_slowtmr+0x584>)
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007444:	6a1b      	ldr	r3, [r3, #32]
 8007446:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800744a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800744e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007450:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007454:	4618      	mov	r0, r3
 8007456:	4b7e      	ldr	r3, [pc, #504]	; (8007650 <tcp_slowtmr+0x58c>)
 8007458:	fb03 f300 	mul.w	r3, r3, r0
 800745c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800745e:	497b      	ldr	r1, [pc, #492]	; (800764c <tcp_slowtmr+0x588>)
 8007460:	fba1 1303 	umull	r1, r3, r1, r3
 8007464:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007466:	429a      	cmp	r2, r3
 8007468:	d911      	bls.n	800748e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800746a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800746c:	f005 f808 	bl	800c480 <tcp_keepalive>
 8007470:	4603      	mov	r3, r0
 8007472:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8007476:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800747a:	2b00      	cmp	r3, #0
 800747c:	d107      	bne.n	800748e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800747e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007480:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007484:	3301      	adds	r3, #1
 8007486:	b2da      	uxtb	r2, r3
 8007488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800748e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007492:	2b00      	cmp	r3, #0
 8007494:	d011      	beq.n	80074ba <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8007496:	4b6c      	ldr	r3, [pc, #432]	; (8007648 <tcp_slowtmr+0x584>)
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800749c:	6a1b      	ldr	r3, [r3, #32]
 800749e:	1ad2      	subs	r2, r2, r3
 80074a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80074a6:	4619      	mov	r1, r3
 80074a8:	460b      	mov	r3, r1
 80074aa:	005b      	lsls	r3, r3, #1
 80074ac:	440b      	add	r3, r1
 80074ae:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d302      	bcc.n	80074ba <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80074b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80074b6:	f000 fec7 	bl	8008248 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80074ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074bc:	7d1b      	ldrb	r3, [r3, #20]
 80074be:	2b03      	cmp	r3, #3
 80074c0:	d10b      	bne.n	80074da <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80074c2:	4b61      	ldr	r3, [pc, #388]	; (8007648 <tcp_slowtmr+0x584>)
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c8:	6a1b      	ldr	r3, [r3, #32]
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	2b28      	cmp	r3, #40	; 0x28
 80074ce:	d904      	bls.n	80074da <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80074d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074d4:	3301      	adds	r3, #1
 80074d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80074da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074dc:	7d1b      	ldrb	r3, [r3, #20]
 80074de:	2b09      	cmp	r3, #9
 80074e0:	d10b      	bne.n	80074fa <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80074e2:	4b59      	ldr	r3, [pc, #356]	; (8007648 <tcp_slowtmr+0x584>)
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e8:	6a1b      	ldr	r3, [r3, #32]
 80074ea:	1ad3      	subs	r3, r2, r3
 80074ec:	2bf0      	cmp	r3, #240	; 0xf0
 80074ee:	d904      	bls.n	80074fa <tcp_slowtmr+0x436>
        ++pcb_remove;
 80074f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074f4:	3301      	adds	r3, #1
 80074f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80074fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d060      	beq.n	80075c4 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8007502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007508:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800750a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800750c:	f000 fce8 	bl	8007ee0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8007510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007512:	2b00      	cmp	r3, #0
 8007514:	d010      	beq.n	8007538 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007516:	4b4f      	ldr	r3, [pc, #316]	; (8007654 <tcp_slowtmr+0x590>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800751c:	429a      	cmp	r2, r3
 800751e:	d106      	bne.n	800752e <tcp_slowtmr+0x46a>
 8007520:	4b4d      	ldr	r3, [pc, #308]	; (8007658 <tcp_slowtmr+0x594>)
 8007522:	f240 526d 	movw	r2, #1389	; 0x56d
 8007526:	494d      	ldr	r1, [pc, #308]	; (800765c <tcp_slowtmr+0x598>)
 8007528:	484d      	ldr	r0, [pc, #308]	; (8007660 <tcp_slowtmr+0x59c>)
 800752a:	f007 fedd 	bl	800f2e8 <iprintf>
        prev->next = pcb->next;
 800752e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007530:	68da      	ldr	r2, [r3, #12]
 8007532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007534:	60da      	str	r2, [r3, #12]
 8007536:	e00f      	b.n	8007558 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007538:	4b46      	ldr	r3, [pc, #280]	; (8007654 <tcp_slowtmr+0x590>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800753e:	429a      	cmp	r2, r3
 8007540:	d006      	beq.n	8007550 <tcp_slowtmr+0x48c>
 8007542:	4b45      	ldr	r3, [pc, #276]	; (8007658 <tcp_slowtmr+0x594>)
 8007544:	f240 5271 	movw	r2, #1393	; 0x571
 8007548:	4946      	ldr	r1, [pc, #280]	; (8007664 <tcp_slowtmr+0x5a0>)
 800754a:	4845      	ldr	r0, [pc, #276]	; (8007660 <tcp_slowtmr+0x59c>)
 800754c:	f007 fecc 	bl	800f2e8 <iprintf>
        tcp_active_pcbs = pcb->next;
 8007550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	4a3f      	ldr	r2, [pc, #252]	; (8007654 <tcp_slowtmr+0x590>)
 8007556:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8007558:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800755c:	2b00      	cmp	r3, #0
 800755e:	d013      	beq.n	8007588 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007562:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007566:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007568:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800756a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756c:	3304      	adds	r3, #4
 800756e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007570:	8ad2      	ldrh	r2, [r2, #22]
 8007572:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007574:	8b09      	ldrh	r1, [r1, #24]
 8007576:	9102      	str	r1, [sp, #8]
 8007578:	9201      	str	r2, [sp, #4]
 800757a:	9300      	str	r3, [sp, #0]
 800757c:	462b      	mov	r3, r5
 800757e:	4622      	mov	r2, r4
 8007580:	4601      	mov	r1, r0
 8007582:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007584:	f004 fec8 	bl	800c318 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8007588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800758a:	691b      	ldr	r3, [r3, #16]
 800758c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800758e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007590:	7d1b      	ldrb	r3, [r3, #20]
 8007592:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007596:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800759e:	6838      	ldr	r0, [r7, #0]
 80075a0:	f7ff f838 	bl	8006614 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80075a4:	4b30      	ldr	r3, [pc, #192]	; (8007668 <tcp_slowtmr+0x5a4>)
 80075a6:	2200      	movs	r2, #0
 80075a8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d004      	beq.n	80075ba <tcp_slowtmr+0x4f6>
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f06f 010c 	mvn.w	r1, #12
 80075b6:	68b8      	ldr	r0, [r7, #8]
 80075b8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80075ba:	4b2b      	ldr	r3, [pc, #172]	; (8007668 <tcp_slowtmr+0x5a4>)
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d037      	beq.n	8007632 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80075c2:	e590      	b.n	80070e6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80075c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80075c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80075ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d0:	7f1b      	ldrb	r3, [r3, #28]
 80075d2:	3301      	adds	r3, #1
 80075d4:	b2da      	uxtb	r2, r3
 80075d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80075da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075dc:	7f1a      	ldrb	r2, [r3, #28]
 80075de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e0:	7f5b      	ldrb	r3, [r3, #29]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d325      	bcc.n	8007632 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80075e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e8:	2200      	movs	r2, #0
 80075ea:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80075ec:	4b1e      	ldr	r3, [pc, #120]	; (8007668 <tcp_slowtmr+0x5a4>)
 80075ee:	2200      	movs	r2, #0
 80075f0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80075f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00b      	beq.n	8007614 <tcp_slowtmr+0x550>
 80075fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007602:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007604:	6912      	ldr	r2, [r2, #16]
 8007606:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007608:	4610      	mov	r0, r2
 800760a:	4798      	blx	r3
 800760c:	4603      	mov	r3, r0
 800760e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8007612:	e002      	b.n	800761a <tcp_slowtmr+0x556>
 8007614:	2300      	movs	r3, #0
 8007616:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800761a:	4b13      	ldr	r3, [pc, #76]	; (8007668 <tcp_slowtmr+0x5a4>)
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d000      	beq.n	8007624 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8007622:	e560      	b.n	80070e6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007624:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007628:	2b00      	cmp	r3, #0
 800762a:	d102      	bne.n	8007632 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800762c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800762e:	f004 f8bf 	bl	800b7b0 <tcp_output>
  while (pcb != NULL) {
 8007632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007634:	2b00      	cmp	r3, #0
 8007636:	f47f ad5c 	bne.w	80070f2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800763a:	2300      	movs	r3, #0
 800763c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800763e:	4b0b      	ldr	r3, [pc, #44]	; (800766c <tcp_slowtmr+0x5a8>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007644:	e067      	b.n	8007716 <tcp_slowtmr+0x652>
 8007646:	bf00      	nop
 8007648:	20008eb0 	.word	0x20008eb0
 800764c:	10624dd3 	.word	0x10624dd3
 8007650:	000124f8 	.word	0x000124f8
 8007654:	20008eac 	.word	0x20008eac
 8007658:	08011490 	.word	0x08011490
 800765c:	080118c8 	.word	0x080118c8
 8007660:	080114d4 	.word	0x080114d4
 8007664:	080118f4 	.word	0x080118f4
 8007668:	20008ea8 	.word	0x20008ea8
 800766c:	20008ebc 	.word	0x20008ebc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007672:	7d1b      	ldrb	r3, [r3, #20]
 8007674:	2b0a      	cmp	r3, #10
 8007676:	d006      	beq.n	8007686 <tcp_slowtmr+0x5c2>
 8007678:	4b2b      	ldr	r3, [pc, #172]	; (8007728 <tcp_slowtmr+0x664>)
 800767a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800767e:	492b      	ldr	r1, [pc, #172]	; (800772c <tcp_slowtmr+0x668>)
 8007680:	482b      	ldr	r0, [pc, #172]	; (8007730 <tcp_slowtmr+0x66c>)
 8007682:	f007 fe31 	bl	800f2e8 <iprintf>
    pcb_remove = 0;
 8007686:	2300      	movs	r3, #0
 8007688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800768c:	4b29      	ldr	r3, [pc, #164]	; (8007734 <tcp_slowtmr+0x670>)
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007692:	6a1b      	ldr	r3, [r3, #32]
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	2bf0      	cmp	r3, #240	; 0xf0
 8007698:	d904      	bls.n	80076a4 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800769a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800769e:	3301      	adds	r3, #1
 80076a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80076a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d02f      	beq.n	800770c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80076ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80076ae:	f000 fc17 	bl	8007ee0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80076b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d010      	beq.n	80076da <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80076b8:	4b1f      	ldr	r3, [pc, #124]	; (8007738 <tcp_slowtmr+0x674>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076be:	429a      	cmp	r2, r3
 80076c0:	d106      	bne.n	80076d0 <tcp_slowtmr+0x60c>
 80076c2:	4b19      	ldr	r3, [pc, #100]	; (8007728 <tcp_slowtmr+0x664>)
 80076c4:	f240 52af 	movw	r2, #1455	; 0x5af
 80076c8:	491c      	ldr	r1, [pc, #112]	; (800773c <tcp_slowtmr+0x678>)
 80076ca:	4819      	ldr	r0, [pc, #100]	; (8007730 <tcp_slowtmr+0x66c>)
 80076cc:	f007 fe0c 	bl	800f2e8 <iprintf>
        prev->next = pcb->next;
 80076d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d2:	68da      	ldr	r2, [r3, #12]
 80076d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d6:	60da      	str	r2, [r3, #12]
 80076d8:	e00f      	b.n	80076fa <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80076da:	4b17      	ldr	r3, [pc, #92]	; (8007738 <tcp_slowtmr+0x674>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d006      	beq.n	80076f2 <tcp_slowtmr+0x62e>
 80076e4:	4b10      	ldr	r3, [pc, #64]	; (8007728 <tcp_slowtmr+0x664>)
 80076e6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80076ea:	4915      	ldr	r1, [pc, #84]	; (8007740 <tcp_slowtmr+0x67c>)
 80076ec:	4810      	ldr	r0, [pc, #64]	; (8007730 <tcp_slowtmr+0x66c>)
 80076ee:	f007 fdfb 	bl	800f2e8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80076f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	4a10      	ldr	r2, [pc, #64]	; (8007738 <tcp_slowtmr+0x674>)
 80076f8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80076fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076fc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80076fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007704:	69f8      	ldr	r0, [r7, #28]
 8007706:	f7fe ff85 	bl	8006614 <tcp_free>
 800770a:	e004      	b.n	8007716 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800770c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800770e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1a9      	bne.n	8007670 <tcp_slowtmr+0x5ac>
    }
  }
}
 800771c:	bf00      	nop
 800771e:	bf00      	nop
 8007720:	3730      	adds	r7, #48	; 0x30
 8007722:	46bd      	mov	sp, r7
 8007724:	bdb0      	pop	{r4, r5, r7, pc}
 8007726:	bf00      	nop
 8007728:	08011490 	.word	0x08011490
 800772c:	08011920 	.word	0x08011920
 8007730:	080114d4 	.word	0x080114d4
 8007734:	20008eb0 	.word	0x20008eb0
 8007738:	20008ebc 	.word	0x20008ebc
 800773c:	08011950 	.word	0x08011950
 8007740:	08011978 	.word	0x08011978

08007744 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800774a:	4b2d      	ldr	r3, [pc, #180]	; (8007800 <tcp_fasttmr+0xbc>)
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	3301      	adds	r3, #1
 8007750:	b2da      	uxtb	r2, r3
 8007752:	4b2b      	ldr	r3, [pc, #172]	; (8007800 <tcp_fasttmr+0xbc>)
 8007754:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8007756:	4b2b      	ldr	r3, [pc, #172]	; (8007804 <tcp_fasttmr+0xc0>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800775c:	e048      	b.n	80077f0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	7f9a      	ldrb	r2, [r3, #30]
 8007762:	4b27      	ldr	r3, [pc, #156]	; (8007800 <tcp_fasttmr+0xbc>)
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	429a      	cmp	r2, r3
 8007768:	d03f      	beq.n	80077ea <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800776a:	4b25      	ldr	r3, [pc, #148]	; (8007800 <tcp_fasttmr+0xbc>)
 800776c:	781a      	ldrb	r2, [r3, #0]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	8b5b      	ldrh	r3, [r3, #26]
 8007776:	f003 0301 	and.w	r3, r3, #1
 800777a:	2b00      	cmp	r3, #0
 800777c:	d010      	beq.n	80077a0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	8b5b      	ldrh	r3, [r3, #26]
 8007782:	f043 0302 	orr.w	r3, r3, #2
 8007786:	b29a      	uxth	r2, r3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f004 f80f 	bl	800b7b0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	8b5b      	ldrh	r3, [r3, #26]
 8007796:	f023 0303 	bic.w	r3, r3, #3
 800779a:	b29a      	uxth	r2, r3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	8b5b      	ldrh	r3, [r3, #26]
 80077a4:	f003 0308 	and.w	r3, r3, #8
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d009      	beq.n	80077c0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	8b5b      	ldrh	r3, [r3, #26]
 80077b0:	f023 0308 	bic.w	r3, r3, #8
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f7ff f8be 	bl	800693c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00a      	beq.n	80077e4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80077ce:	4b0e      	ldr	r3, [pc, #56]	; (8007808 <tcp_fasttmr+0xc4>)
 80077d0:	2200      	movs	r2, #0
 80077d2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 f819 	bl	800780c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80077da:	4b0b      	ldr	r3, [pc, #44]	; (8007808 <tcp_fasttmr+0xc4>)
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d000      	beq.n	80077e4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80077e2:	e7b8      	b.n	8007756 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	607b      	str	r3, [r7, #4]
 80077e8:	e002      	b.n	80077f0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1b3      	bne.n	800775e <tcp_fasttmr+0x1a>
    }
  }
}
 80077f6:	bf00      	nop
 80077f8:	bf00      	nop
 80077fa:	3708      	adds	r7, #8
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}
 8007800:	2000052a 	.word	0x2000052a
 8007804:	20008eac 	.word	0x20008eac
 8007808:	20008ea8 	.word	0x20008ea8

0800780c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800780c:	b590      	push	{r4, r7, lr}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d109      	bne.n	800782e <tcp_process_refused_data+0x22>
 800781a:	4b37      	ldr	r3, [pc, #220]	; (80078f8 <tcp_process_refused_data+0xec>)
 800781c:	f240 6209 	movw	r2, #1545	; 0x609
 8007820:	4936      	ldr	r1, [pc, #216]	; (80078fc <tcp_process_refused_data+0xf0>)
 8007822:	4837      	ldr	r0, [pc, #220]	; (8007900 <tcp_process_refused_data+0xf4>)
 8007824:	f007 fd60 	bl	800f2e8 <iprintf>
 8007828:	f06f 030f 	mvn.w	r3, #15
 800782c:	e060      	b.n	80078f0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007832:	7b5b      	ldrb	r3, [r3, #13]
 8007834:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800783a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00b      	beq.n	8007864 <tcp_process_refused_data+0x58>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6918      	ldr	r0, [r3, #16]
 8007856:	2300      	movs	r3, #0
 8007858:	68ba      	ldr	r2, [r7, #8]
 800785a:	6879      	ldr	r1, [r7, #4]
 800785c:	47a0      	blx	r4
 800785e:	4603      	mov	r3, r0
 8007860:	73fb      	strb	r3, [r7, #15]
 8007862:	e007      	b.n	8007874 <tcp_process_refused_data+0x68>
 8007864:	2300      	movs	r3, #0
 8007866:	68ba      	ldr	r2, [r7, #8]
 8007868:	6879      	ldr	r1, [r7, #4]
 800786a:	2000      	movs	r0, #0
 800786c:	f000 f8c2 	bl	80079f4 <tcp_recv_null>
 8007870:	4603      	mov	r3, r0
 8007872:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007874:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d12a      	bne.n	80078d2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800787c:	7bbb      	ldrb	r3, [r7, #14]
 800787e:	f003 0320 	and.w	r3, r3, #32
 8007882:	2b00      	cmp	r3, #0
 8007884:	d033      	beq.n	80078ee <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800788a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800788e:	d005      	beq.n	800789c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007894:	3301      	adds	r3, #1
 8007896:	b29a      	uxth	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00b      	beq.n	80078be <tcp_process_refused_data+0xb2>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6918      	ldr	r0, [r3, #16]
 80078b0:	2300      	movs	r3, #0
 80078b2:	2200      	movs	r2, #0
 80078b4:	6879      	ldr	r1, [r7, #4]
 80078b6:	47a0      	blx	r4
 80078b8:	4603      	mov	r3, r0
 80078ba:	73fb      	strb	r3, [r7, #15]
 80078bc:	e001      	b.n	80078c2 <tcp_process_refused_data+0xb6>
 80078be:	2300      	movs	r3, #0
 80078c0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80078c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078c6:	f113 0f0d 	cmn.w	r3, #13
 80078ca:	d110      	bne.n	80078ee <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80078cc:	f06f 030c 	mvn.w	r3, #12
 80078d0:	e00e      	b.n	80078f0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80078d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078d6:	f113 0f0d 	cmn.w	r3, #13
 80078da:	d102      	bne.n	80078e2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80078dc:	f06f 030c 	mvn.w	r3, #12
 80078e0:	e006      	b.n	80078f0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	68ba      	ldr	r2, [r7, #8]
 80078e6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80078e8:	f06f 0304 	mvn.w	r3, #4
 80078ec:	e000      	b.n	80078f0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80078ee:	2300      	movs	r3, #0
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3714      	adds	r7, #20
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd90      	pop	{r4, r7, pc}
 80078f8:	08011490 	.word	0x08011490
 80078fc:	080119a0 	.word	0x080119a0
 8007900:	080114d4 	.word	0x080114d4

08007904 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800790c:	e007      	b.n	800791e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 f80a 	bl	800792e <tcp_seg_free>
    seg = next;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d1f4      	bne.n	800790e <tcp_segs_free+0xa>
  }
}
 8007924:	bf00      	nop
 8007926:	bf00      	nop
 8007928:	3710      	adds	r7, #16
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}

0800792e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800792e:	b580      	push	{r7, lr}
 8007930:	b082      	sub	sp, #8
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d00c      	beq.n	8007956 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d004      	beq.n	800794e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	4618      	mov	r0, r3
 800794a:	f7fe fbc3 	bl	80060d4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800794e:	6879      	ldr	r1, [r7, #4]
 8007950:	2003      	movs	r0, #3
 8007952:	f7fd fdad 	bl	80054b0 <memp_free>
  }
}
 8007956:	bf00      	nop
 8007958:	3708      	adds	r7, #8
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
	...

08007960 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	460b      	mov	r3, r1
 800796a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d107      	bne.n	8007982 <tcp_setprio+0x22>
 8007972:	4b07      	ldr	r3, [pc, #28]	; (8007990 <tcp_setprio+0x30>)
 8007974:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8007978:	4906      	ldr	r1, [pc, #24]	; (8007994 <tcp_setprio+0x34>)
 800797a:	4807      	ldr	r0, [pc, #28]	; (8007998 <tcp_setprio+0x38>)
 800797c:	f007 fcb4 	bl	800f2e8 <iprintf>
 8007980:	e002      	b.n	8007988 <tcp_setprio+0x28>

  pcb->prio = prio;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	78fa      	ldrb	r2, [r7, #3]
 8007986:	755a      	strb	r2, [r3, #21]
}
 8007988:	3708      	adds	r7, #8
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	08011490 	.word	0x08011490
 8007994:	080119c8 	.word	0x080119c8
 8007998:	080114d4 	.word	0x080114d4

0800799c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d106      	bne.n	80079b8 <tcp_seg_copy+0x1c>
 80079aa:	4b0f      	ldr	r3, [pc, #60]	; (80079e8 <tcp_seg_copy+0x4c>)
 80079ac:	f240 6282 	movw	r2, #1666	; 0x682
 80079b0:	490e      	ldr	r1, [pc, #56]	; (80079ec <tcp_seg_copy+0x50>)
 80079b2:	480f      	ldr	r0, [pc, #60]	; (80079f0 <tcp_seg_copy+0x54>)
 80079b4:	f007 fc98 	bl	800f2e8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80079b8:	2003      	movs	r0, #3
 80079ba:	f7fd fd2d 	bl	8005418 <memp_malloc>
 80079be:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d101      	bne.n	80079ca <tcp_seg_copy+0x2e>
    return NULL;
 80079c6:	2300      	movs	r3, #0
 80079c8:	e00a      	b.n	80079e0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80079ca:	2210      	movs	r2, #16
 80079cc:	6879      	ldr	r1, [r7, #4]
 80079ce:	68f8      	ldr	r0, [r7, #12]
 80079d0:	f007 fc5a 	bl	800f288 <memcpy>
  pbuf_ref(cseg->p);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	4618      	mov	r0, r3
 80079da:	f7fe fc1b 	bl	8006214 <pbuf_ref>
  return cseg;
 80079de:	68fb      	ldr	r3, [r7, #12]
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3710      	adds	r7, #16
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	08011490 	.word	0x08011490
 80079ec:	080119e4 	.word	0x080119e4
 80079f0:	080114d4 	.word	0x080114d4

080079f4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	60b9      	str	r1, [r7, #8]
 80079fe:	607a      	str	r2, [r7, #4]
 8007a00:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d109      	bne.n	8007a1c <tcp_recv_null+0x28>
 8007a08:	4b12      	ldr	r3, [pc, #72]	; (8007a54 <tcp_recv_null+0x60>)
 8007a0a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8007a0e:	4912      	ldr	r1, [pc, #72]	; (8007a58 <tcp_recv_null+0x64>)
 8007a10:	4812      	ldr	r0, [pc, #72]	; (8007a5c <tcp_recv_null+0x68>)
 8007a12:	f007 fc69 	bl	800f2e8 <iprintf>
 8007a16:	f06f 030f 	mvn.w	r3, #15
 8007a1a:	e016      	b.n	8007a4a <tcp_recv_null+0x56>

  if (p != NULL) {
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d009      	beq.n	8007a36 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	891b      	ldrh	r3, [r3, #8]
 8007a26:	4619      	mov	r1, r3
 8007a28:	68b8      	ldr	r0, [r7, #8]
 8007a2a:	f7ff fab5 	bl	8006f98 <tcp_recved>
    pbuf_free(p);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f7fe fb50 	bl	80060d4 <pbuf_free>
 8007a34:	e008      	b.n	8007a48 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8007a36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d104      	bne.n	8007a48 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8007a3e:	68b8      	ldr	r0, [r7, #8]
 8007a40:	f7fe ffe6 	bl	8006a10 <tcp_close>
 8007a44:	4603      	mov	r3, r0
 8007a46:	e000      	b.n	8007a4a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3710      	adds	r7, #16
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	08011490 	.word	0x08011490
 8007a58:	08011a00 	.word	0x08011a00
 8007a5c:	080114d4 	.word	0x080114d4

08007a60 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b086      	sub	sp, #24
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	4603      	mov	r3, r0
 8007a68:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	db01      	blt.n	8007a76 <tcp_kill_prio+0x16>
 8007a72:	79fb      	ldrb	r3, [r7, #7]
 8007a74:	e000      	b.n	8007a78 <tcp_kill_prio+0x18>
 8007a76:	237f      	movs	r3, #127	; 0x7f
 8007a78:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8007a7a:	7afb      	ldrb	r3, [r7, #11]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d034      	beq.n	8007aea <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8007a80:	7afb      	ldrb	r3, [r7, #11]
 8007a82:	3b01      	subs	r3, #1
 8007a84:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8007a86:	2300      	movs	r3, #0
 8007a88:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007a8e:	4b19      	ldr	r3, [pc, #100]	; (8007af4 <tcp_kill_prio+0x94>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	617b      	str	r3, [r7, #20]
 8007a94:	e01f      	b.n	8007ad6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	7d5b      	ldrb	r3, [r3, #21]
 8007a9a:	7afa      	ldrb	r2, [r7, #11]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d80c      	bhi.n	8007aba <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8007aa4:	7afa      	ldrb	r2, [r7, #11]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d112      	bne.n	8007ad0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007aaa:	4b13      	ldr	r3, [pc, #76]	; (8007af8 <tcp_kill_prio+0x98>)
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	6a1b      	ldr	r3, [r3, #32]
 8007ab2:	1ad3      	subs	r3, r2, r3
 8007ab4:	68fa      	ldr	r2, [r7, #12]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d80a      	bhi.n	8007ad0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8007aba:	4b0f      	ldr	r3, [pc, #60]	; (8007af8 <tcp_kill_prio+0x98>)
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	6a1b      	ldr	r3, [r3, #32]
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	7d5b      	ldrb	r3, [r3, #21]
 8007ace:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	617b      	str	r3, [r7, #20]
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d1dc      	bne.n	8007a96 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d004      	beq.n	8007aec <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007ae2:	6938      	ldr	r0, [r7, #16]
 8007ae4:	f7ff f87e 	bl	8006be4 <tcp_abort>
 8007ae8:	e000      	b.n	8007aec <tcp_kill_prio+0x8c>
    return;
 8007aea:	bf00      	nop
  }
}
 8007aec:	3718      	adds	r7, #24
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	20008eac 	.word	0x20008eac
 8007af8:	20008eb0 	.word	0x20008eb0

08007afc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b086      	sub	sp, #24
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	4603      	mov	r3, r0
 8007b04:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007b06:	79fb      	ldrb	r3, [r7, #7]
 8007b08:	2b08      	cmp	r3, #8
 8007b0a:	d009      	beq.n	8007b20 <tcp_kill_state+0x24>
 8007b0c:	79fb      	ldrb	r3, [r7, #7]
 8007b0e:	2b09      	cmp	r3, #9
 8007b10:	d006      	beq.n	8007b20 <tcp_kill_state+0x24>
 8007b12:	4b1a      	ldr	r3, [pc, #104]	; (8007b7c <tcp_kill_state+0x80>)
 8007b14:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8007b18:	4919      	ldr	r1, [pc, #100]	; (8007b80 <tcp_kill_state+0x84>)
 8007b1a:	481a      	ldr	r0, [pc, #104]	; (8007b84 <tcp_kill_state+0x88>)
 8007b1c:	f007 fbe4 	bl	800f2e8 <iprintf>

  inactivity = 0;
 8007b20:	2300      	movs	r3, #0
 8007b22:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007b24:	2300      	movs	r3, #0
 8007b26:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007b28:	4b17      	ldr	r3, [pc, #92]	; (8007b88 <tcp_kill_state+0x8c>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	617b      	str	r3, [r7, #20]
 8007b2e:	e017      	b.n	8007b60 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	7d1b      	ldrb	r3, [r3, #20]
 8007b34:	79fa      	ldrb	r2, [r7, #7]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d10f      	bne.n	8007b5a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007b3a:	4b14      	ldr	r3, [pc, #80]	; (8007b8c <tcp_kill_state+0x90>)
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	6a1b      	ldr	r3, [r3, #32]
 8007b42:	1ad3      	subs	r3, r2, r3
 8007b44:	68fa      	ldr	r2, [r7, #12]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d807      	bhi.n	8007b5a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8007b4a:	4b10      	ldr	r3, [pc, #64]	; (8007b8c <tcp_kill_state+0x90>)
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	6a1b      	ldr	r3, [r3, #32]
 8007b52:	1ad3      	subs	r3, r2, r3
 8007b54:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	617b      	str	r3, [r7, #20]
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d1e4      	bne.n	8007b30 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d003      	beq.n	8007b74 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007b6c:	2100      	movs	r1, #0
 8007b6e:	6938      	ldr	r0, [r7, #16]
 8007b70:	f7fe ff7a 	bl	8006a68 <tcp_abandon>
  }
}
 8007b74:	bf00      	nop
 8007b76:	3718      	adds	r7, #24
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	08011490 	.word	0x08011490
 8007b80:	08011a1c 	.word	0x08011a1c
 8007b84:	080114d4 	.word	0x080114d4
 8007b88:	20008eac 	.word	0x20008eac
 8007b8c:	20008eb0 	.word	0x20008eb0

08007b90 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8007b96:	2300      	movs	r3, #0
 8007b98:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007b9e:	4b12      	ldr	r3, [pc, #72]	; (8007be8 <tcp_kill_timewait+0x58>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	60fb      	str	r3, [r7, #12]
 8007ba4:	e012      	b.n	8007bcc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007ba6:	4b11      	ldr	r3, [pc, #68]	; (8007bec <tcp_kill_timewait+0x5c>)
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6a1b      	ldr	r3, [r3, #32]
 8007bae:	1ad3      	subs	r3, r2, r3
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d807      	bhi.n	8007bc6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8007bb6:	4b0d      	ldr	r3, [pc, #52]	; (8007bec <tcp_kill_timewait+0x5c>)
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6a1b      	ldr	r3, [r3, #32]
 8007bbe:	1ad3      	subs	r3, r2, r3
 8007bc0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	60fb      	str	r3, [r7, #12]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d1e9      	bne.n	8007ba6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d002      	beq.n	8007bde <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007bd8:	68b8      	ldr	r0, [r7, #8]
 8007bda:	f7ff f803 	bl	8006be4 <tcp_abort>
  }
}
 8007bde:	bf00      	nop
 8007be0:	3710      	adds	r7, #16
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	20008ebc 	.word	0x20008ebc
 8007bec:	20008eb0 	.word	0x20008eb0

08007bf0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8007bf6:	4b10      	ldr	r3, [pc, #64]	; (8007c38 <tcp_handle_closepend+0x48>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007bfc:	e014      	b.n	8007c28 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	8b5b      	ldrh	r3, [r3, #26]
 8007c08:	f003 0308 	and.w	r3, r3, #8
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d009      	beq.n	8007c24 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	8b5b      	ldrh	r3, [r3, #26]
 8007c14:	f023 0308 	bic.w	r3, r3, #8
 8007c18:	b29a      	uxth	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f7fe fe8c 	bl	800693c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d1e7      	bne.n	8007bfe <tcp_handle_closepend+0xe>
  }
}
 8007c2e:	bf00      	nop
 8007c30:	bf00      	nop
 8007c32:	3708      	adds	r7, #8
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}
 8007c38:	20008eac 	.word	0x20008eac

08007c3c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b084      	sub	sp, #16
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	4603      	mov	r3, r0
 8007c44:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007c46:	2001      	movs	r0, #1
 8007c48:	f7fd fbe6 	bl	8005418 <memp_malloc>
 8007c4c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d126      	bne.n	8007ca2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8007c54:	f7ff ffcc 	bl	8007bf0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007c58:	f7ff ff9a 	bl	8007b90 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007c5c:	2001      	movs	r0, #1
 8007c5e:	f7fd fbdb 	bl	8005418 <memp_malloc>
 8007c62:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d11b      	bne.n	8007ca2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8007c6a:	2009      	movs	r0, #9
 8007c6c:	f7ff ff46 	bl	8007afc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007c70:	2001      	movs	r0, #1
 8007c72:	f7fd fbd1 	bl	8005418 <memp_malloc>
 8007c76:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d111      	bne.n	8007ca2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8007c7e:	2008      	movs	r0, #8
 8007c80:	f7ff ff3c 	bl	8007afc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007c84:	2001      	movs	r0, #1
 8007c86:	f7fd fbc7 	bl	8005418 <memp_malloc>
 8007c8a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d107      	bne.n	8007ca2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8007c92:	79fb      	ldrb	r3, [r7, #7]
 8007c94:	4618      	mov	r0, r3
 8007c96:	f7ff fee3 	bl	8007a60 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007c9a:	2001      	movs	r0, #1
 8007c9c:	f7fd fbbc 	bl	8005418 <memp_malloc>
 8007ca0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d03f      	beq.n	8007d28 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007ca8:	229c      	movs	r2, #156	; 0x9c
 8007caa:	2100      	movs	r1, #0
 8007cac:	68f8      	ldr	r0, [r7, #12]
 8007cae:	f007 fb13 	bl	800f2d8 <memset>
    pcb->prio = prio;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	79fa      	ldrb	r2, [r7, #7]
 8007cb6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007cbe:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007cc8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	22ff      	movs	r2, #255	; 0xff
 8007cd6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007cde:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2206      	movs	r2, #6
 8007ce4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2206      	movs	r2, #6
 8007cec:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007cf4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8007cfe:	4b0d      	ldr	r3, [pc, #52]	; (8007d34 <tcp_alloc+0xf8>)
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8007d06:	4b0c      	ldr	r3, [pc, #48]	; (8007d38 <tcp_alloc+0xfc>)
 8007d08:	781a      	ldrb	r2, [r3, #0]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007d14:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	4a08      	ldr	r2, [pc, #32]	; (8007d3c <tcp_alloc+0x100>)
 8007d1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	4a07      	ldr	r2, [pc, #28]	; (8007d40 <tcp_alloc+0x104>)
 8007d24:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007d28:	68fb      	ldr	r3, [r7, #12]
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3710      	adds	r7, #16
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop
 8007d34:	20008eb0 	.word	0x20008eb0
 8007d38:	2000052a 	.word	0x2000052a
 8007d3c:	080079f5 	.word	0x080079f5
 8007d40:	006ddd00 	.word	0x006ddd00

08007d44 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8007d4e:	2040      	movs	r0, #64	; 0x40
 8007d50:	f7ff ff74 	bl	8007c3c <tcp_alloc>
 8007d54:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8007d56:	68fb      	ldr	r3, [r7, #12]
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3710      	adds	r7, #16
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d002      	beq.n	8007d76 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	683a      	ldr	r2, [r7, #0]
 8007d74:	611a      	str	r2, [r3, #16]
  }
}
 8007d76:	bf00      	nop
 8007d78:	370c      	adds	r7, #12
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr
	...

08007d84 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00e      	beq.n	8007db2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	7d1b      	ldrb	r3, [r3, #20]
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d106      	bne.n	8007daa <tcp_recv+0x26>
 8007d9c:	4b07      	ldr	r3, [pc, #28]	; (8007dbc <tcp_recv+0x38>)
 8007d9e:	f240 72df 	movw	r2, #2015	; 0x7df
 8007da2:	4907      	ldr	r1, [pc, #28]	; (8007dc0 <tcp_recv+0x3c>)
 8007da4:	4807      	ldr	r0, [pc, #28]	; (8007dc4 <tcp_recv+0x40>)
 8007da6:	f007 fa9f 	bl	800f2e8 <iprintf>
    pcb->recv = recv;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	683a      	ldr	r2, [r7, #0]
 8007dae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8007db2:	bf00      	nop
 8007db4:	3708      	adds	r7, #8
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	bf00      	nop
 8007dbc:	08011490 	.word	0x08011490
 8007dc0:	08011a2c 	.word	0x08011a2c
 8007dc4:	080114d4 	.word	0x080114d4

08007dc8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00e      	beq.n	8007df6 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	7d1b      	ldrb	r3, [r3, #20]
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d106      	bne.n	8007dee <tcp_sent+0x26>
 8007de0:	4b07      	ldr	r3, [pc, #28]	; (8007e00 <tcp_sent+0x38>)
 8007de2:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8007de6:	4907      	ldr	r1, [pc, #28]	; (8007e04 <tcp_sent+0x3c>)
 8007de8:	4807      	ldr	r0, [pc, #28]	; (8007e08 <tcp_sent+0x40>)
 8007dea:	f007 fa7d 	bl	800f2e8 <iprintf>
    pcb->sent = sent;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	683a      	ldr	r2, [r7, #0]
 8007df2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8007df6:	bf00      	nop
 8007df8:	3708      	adds	r7, #8
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	08011490 	.word	0x08011490
 8007e04:	08011a54 	.word	0x08011a54
 8007e08:	080114d4 	.word	0x080114d4

08007e0c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00e      	beq.n	8007e3a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	7d1b      	ldrb	r3, [r3, #20]
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d106      	bne.n	8007e32 <tcp_err+0x26>
 8007e24:	4b07      	ldr	r3, [pc, #28]	; (8007e44 <tcp_err+0x38>)
 8007e26:	f640 020d 	movw	r2, #2061	; 0x80d
 8007e2a:	4907      	ldr	r1, [pc, #28]	; (8007e48 <tcp_err+0x3c>)
 8007e2c:	4807      	ldr	r0, [pc, #28]	; (8007e4c <tcp_err+0x40>)
 8007e2e:	f007 fa5b 	bl	800f2e8 <iprintf>
    pcb->errf = err;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	683a      	ldr	r2, [r7, #0]
 8007e36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8007e3a:	bf00      	nop
 8007e3c:	3708      	adds	r7, #8
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	08011490 	.word	0x08011490
 8007e48:	08011a7c 	.word	0x08011a7c
 8007e4c:	080114d4 	.word	0x080114d4

08007e50 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b085      	sub	sp, #20
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d008      	beq.n	8007e72 <tcp_accept+0x22>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	7d1b      	ldrb	r3, [r3, #20]
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d104      	bne.n	8007e72 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	683a      	ldr	r2, [r7, #0]
 8007e70:	619a      	str	r2, [r3, #24]
  }
}
 8007e72:	bf00      	nop
 8007e74:	3714      	adds	r7, #20
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
	...

08007e80 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	60f8      	str	r0, [r7, #12]
 8007e88:	60b9      	str	r1, [r7, #8]
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d107      	bne.n	8007ea4 <tcp_poll+0x24>
 8007e94:	4b0e      	ldr	r3, [pc, #56]	; (8007ed0 <tcp_poll+0x50>)
 8007e96:	f640 023d 	movw	r2, #2109	; 0x83d
 8007e9a:	490e      	ldr	r1, [pc, #56]	; (8007ed4 <tcp_poll+0x54>)
 8007e9c:	480e      	ldr	r0, [pc, #56]	; (8007ed8 <tcp_poll+0x58>)
 8007e9e:	f007 fa23 	bl	800f2e8 <iprintf>
 8007ea2:	e011      	b.n	8007ec8 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	7d1b      	ldrb	r3, [r3, #20]
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d106      	bne.n	8007eba <tcp_poll+0x3a>
 8007eac:	4b08      	ldr	r3, [pc, #32]	; (8007ed0 <tcp_poll+0x50>)
 8007eae:	f640 023e 	movw	r2, #2110	; 0x83e
 8007eb2:	490a      	ldr	r1, [pc, #40]	; (8007edc <tcp_poll+0x5c>)
 8007eb4:	4808      	ldr	r0, [pc, #32]	; (8007ed8 <tcp_poll+0x58>)
 8007eb6:	f007 fa17 	bl	800f2e8 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	68ba      	ldr	r2, [r7, #8]
 8007ebe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	79fa      	ldrb	r2, [r7, #7]
 8007ec6:	775a      	strb	r2, [r3, #29]
}
 8007ec8:	3710      	adds	r7, #16
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	08011490 	.word	0x08011490
 8007ed4:	08011aa4 	.word	0x08011aa4
 8007ed8:	080114d4 	.word	0x080114d4
 8007edc:	08011abc 	.word	0x08011abc

08007ee0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d107      	bne.n	8007efe <tcp_pcb_purge+0x1e>
 8007eee:	4b21      	ldr	r3, [pc, #132]	; (8007f74 <tcp_pcb_purge+0x94>)
 8007ef0:	f640 0251 	movw	r2, #2129	; 0x851
 8007ef4:	4920      	ldr	r1, [pc, #128]	; (8007f78 <tcp_pcb_purge+0x98>)
 8007ef6:	4821      	ldr	r0, [pc, #132]	; (8007f7c <tcp_pcb_purge+0x9c>)
 8007ef8:	f007 f9f6 	bl	800f2e8 <iprintf>
 8007efc:	e037      	b.n	8007f6e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	7d1b      	ldrb	r3, [r3, #20]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d033      	beq.n	8007f6e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8007f0a:	2b0a      	cmp	r3, #10
 8007f0c:	d02f      	beq.n	8007f6e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d02b      	beq.n	8007f6e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d007      	beq.n	8007f2e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f22:	4618      	mov	r0, r3
 8007f24:	f7fe f8d6 	bl	80060d4 <pbuf_free>
      pcb->refused_data = NULL;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d002      	beq.n	8007f3c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 f986 	bl	8008248 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f42:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7ff fcdb 	bl	8007904 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7ff fcd6 	bl	8007904 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	66da      	str	r2, [r3, #108]	; 0x6c
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8007f6e:	3708      	adds	r7, #8
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}
 8007f74:	08011490 	.word	0x08011490
 8007f78:	08011adc 	.word	0x08011adc
 8007f7c:	080114d4 	.word	0x080114d4

08007f80 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d106      	bne.n	8007f9e <tcp_pcb_remove+0x1e>
 8007f90:	4b3e      	ldr	r3, [pc, #248]	; (800808c <tcp_pcb_remove+0x10c>)
 8007f92:	f640 0283 	movw	r2, #2179	; 0x883
 8007f96:	493e      	ldr	r1, [pc, #248]	; (8008090 <tcp_pcb_remove+0x110>)
 8007f98:	483e      	ldr	r0, [pc, #248]	; (8008094 <tcp_pcb_remove+0x114>)
 8007f9a:	f007 f9a5 	bl	800f2e8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d106      	bne.n	8007fb2 <tcp_pcb_remove+0x32>
 8007fa4:	4b39      	ldr	r3, [pc, #228]	; (800808c <tcp_pcb_remove+0x10c>)
 8007fa6:	f640 0284 	movw	r2, #2180	; 0x884
 8007faa:	493b      	ldr	r1, [pc, #236]	; (8008098 <tcp_pcb_remove+0x118>)
 8007fac:	4839      	ldr	r0, [pc, #228]	; (8008094 <tcp_pcb_remove+0x114>)
 8007fae:	f007 f99b 	bl	800f2e8 <iprintf>

  TCP_RMV(pcblist, pcb);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	683a      	ldr	r2, [r7, #0]
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d105      	bne.n	8007fc8 <tcp_pcb_remove+0x48>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	68da      	ldr	r2, [r3, #12]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	601a      	str	r2, [r3, #0]
 8007fc6:	e013      	b.n	8007ff0 <tcp_pcb_remove+0x70>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	60fb      	str	r3, [r7, #12]
 8007fce:	e00c      	b.n	8007fea <tcp_pcb_remove+0x6a>
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	68db      	ldr	r3, [r3, #12]
 8007fd4:	683a      	ldr	r2, [r7, #0]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d104      	bne.n	8007fe4 <tcp_pcb_remove+0x64>
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	68da      	ldr	r2, [r3, #12]
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	60da      	str	r2, [r3, #12]
 8007fe2:	e005      	b.n	8007ff0 <tcp_pcb_remove+0x70>
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	68db      	ldr	r3, [r3, #12]
 8007fe8:	60fb      	str	r3, [r7, #12]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d1ef      	bne.n	8007fd0 <tcp_pcb_remove+0x50>
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8007ff6:	6838      	ldr	r0, [r7, #0]
 8007ff8:	f7ff ff72 	bl	8007ee0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	7d1b      	ldrb	r3, [r3, #20]
 8008000:	2b0a      	cmp	r3, #10
 8008002:	d013      	beq.n	800802c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8008008:	2b01      	cmp	r3, #1
 800800a:	d00f      	beq.n	800802c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	8b5b      	ldrh	r3, [r3, #26]
 8008010:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8008014:	2b00      	cmp	r3, #0
 8008016:	d009      	beq.n	800802c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	8b5b      	ldrh	r3, [r3, #26]
 800801c:	f043 0302 	orr.w	r3, r3, #2
 8008020:	b29a      	uxth	r2, r3
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008026:	6838      	ldr	r0, [r7, #0]
 8008028:	f003 fbc2 	bl	800b7b0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	7d1b      	ldrb	r3, [r3, #20]
 8008030:	2b01      	cmp	r3, #1
 8008032:	d020      	beq.n	8008076 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008038:	2b00      	cmp	r3, #0
 800803a:	d006      	beq.n	800804a <tcp_pcb_remove+0xca>
 800803c:	4b13      	ldr	r3, [pc, #76]	; (800808c <tcp_pcb_remove+0x10c>)
 800803e:	f640 0293 	movw	r2, #2195	; 0x893
 8008042:	4916      	ldr	r1, [pc, #88]	; (800809c <tcp_pcb_remove+0x11c>)
 8008044:	4813      	ldr	r0, [pc, #76]	; (8008094 <tcp_pcb_remove+0x114>)
 8008046:	f007 f94f 	bl	800f2e8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800804e:	2b00      	cmp	r3, #0
 8008050:	d006      	beq.n	8008060 <tcp_pcb_remove+0xe0>
 8008052:	4b0e      	ldr	r3, [pc, #56]	; (800808c <tcp_pcb_remove+0x10c>)
 8008054:	f640 0294 	movw	r2, #2196	; 0x894
 8008058:	4911      	ldr	r1, [pc, #68]	; (80080a0 <tcp_pcb_remove+0x120>)
 800805a:	480e      	ldr	r0, [pc, #56]	; (8008094 <tcp_pcb_remove+0x114>)
 800805c:	f007 f944 	bl	800f2e8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008064:	2b00      	cmp	r3, #0
 8008066:	d006      	beq.n	8008076 <tcp_pcb_remove+0xf6>
 8008068:	4b08      	ldr	r3, [pc, #32]	; (800808c <tcp_pcb_remove+0x10c>)
 800806a:	f640 0296 	movw	r2, #2198	; 0x896
 800806e:	490d      	ldr	r1, [pc, #52]	; (80080a4 <tcp_pcb_remove+0x124>)
 8008070:	4808      	ldr	r0, [pc, #32]	; (8008094 <tcp_pcb_remove+0x114>)
 8008072:	f007 f939 	bl	800f2e8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	2200      	movs	r2, #0
 800807a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	2200      	movs	r2, #0
 8008080:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8008082:	bf00      	nop
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	08011490 	.word	0x08011490
 8008090:	08011af8 	.word	0x08011af8
 8008094:	080114d4 	.word	0x080114d4
 8008098:	08011b14 	.word	0x08011b14
 800809c:	08011b34 	.word	0x08011b34
 80080a0:	08011b4c 	.word	0x08011b4c
 80080a4:	08011b68 	.word	0x08011b68

080080a8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d106      	bne.n	80080c4 <tcp_next_iss+0x1c>
 80080b6:	4b0a      	ldr	r3, [pc, #40]	; (80080e0 <tcp_next_iss+0x38>)
 80080b8:	f640 02af 	movw	r2, #2223	; 0x8af
 80080bc:	4909      	ldr	r1, [pc, #36]	; (80080e4 <tcp_next_iss+0x3c>)
 80080be:	480a      	ldr	r0, [pc, #40]	; (80080e8 <tcp_next_iss+0x40>)
 80080c0:	f007 f912 	bl	800f2e8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80080c4:	4b09      	ldr	r3, [pc, #36]	; (80080ec <tcp_next_iss+0x44>)
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	4b09      	ldr	r3, [pc, #36]	; (80080f0 <tcp_next_iss+0x48>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4413      	add	r3, r2
 80080ce:	4a07      	ldr	r2, [pc, #28]	; (80080ec <tcp_next_iss+0x44>)
 80080d0:	6013      	str	r3, [r2, #0]
  return iss;
 80080d2:	4b06      	ldr	r3, [pc, #24]	; (80080ec <tcp_next_iss+0x44>)
 80080d4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3708      	adds	r7, #8
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	08011490 	.word	0x08011490
 80080e4:	08011b80 	.word	0x08011b80
 80080e8:	080114d4 	.word	0x080114d4
 80080ec:	2000001c 	.word	0x2000001c
 80080f0:	20008eb0 	.word	0x20008eb0

080080f4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b086      	sub	sp, #24
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	4603      	mov	r3, r0
 80080fc:	60b9      	str	r1, [r7, #8]
 80080fe:	607a      	str	r2, [r7, #4]
 8008100:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d106      	bne.n	8008116 <tcp_eff_send_mss_netif+0x22>
 8008108:	4b14      	ldr	r3, [pc, #80]	; (800815c <tcp_eff_send_mss_netif+0x68>)
 800810a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800810e:	4914      	ldr	r1, [pc, #80]	; (8008160 <tcp_eff_send_mss_netif+0x6c>)
 8008110:	4814      	ldr	r0, [pc, #80]	; (8008164 <tcp_eff_send_mss_netif+0x70>)
 8008112:	f007 f8e9 	bl	800f2e8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d101      	bne.n	8008120 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800811c:	89fb      	ldrh	r3, [r7, #14]
 800811e:	e019      	b.n	8008154 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008124:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8008126:	8afb      	ldrh	r3, [r7, #22]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d012      	beq.n	8008152 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800812c:	2328      	movs	r3, #40	; 0x28
 800812e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8008130:	8afa      	ldrh	r2, [r7, #22]
 8008132:	8abb      	ldrh	r3, [r7, #20]
 8008134:	429a      	cmp	r2, r3
 8008136:	d904      	bls.n	8008142 <tcp_eff_send_mss_netif+0x4e>
 8008138:	8afa      	ldrh	r2, [r7, #22]
 800813a:	8abb      	ldrh	r3, [r7, #20]
 800813c:	1ad3      	subs	r3, r2, r3
 800813e:	b29b      	uxth	r3, r3
 8008140:	e000      	b.n	8008144 <tcp_eff_send_mss_netif+0x50>
 8008142:	2300      	movs	r3, #0
 8008144:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008146:	8a7a      	ldrh	r2, [r7, #18]
 8008148:	89fb      	ldrh	r3, [r7, #14]
 800814a:	4293      	cmp	r3, r2
 800814c:	bf28      	it	cs
 800814e:	4613      	movcs	r3, r2
 8008150:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8008152:	89fb      	ldrh	r3, [r7, #14]
}
 8008154:	4618      	mov	r0, r3
 8008156:	3718      	adds	r7, #24
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}
 800815c:	08011490 	.word	0x08011490
 8008160:	08011b9c 	.word	0x08011b9c
 8008164:	080114d4 	.word	0x080114d4

08008168 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d119      	bne.n	80081b0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800817c:	4b10      	ldr	r3, [pc, #64]	; (80081c0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800817e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8008182:	4910      	ldr	r1, [pc, #64]	; (80081c4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8008184:	4810      	ldr	r0, [pc, #64]	; (80081c8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8008186:	f007 f8af 	bl	800f2e8 <iprintf>

  while (pcb != NULL) {
 800818a:	e011      	b.n	80081b0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	429a      	cmp	r2, r3
 8008196:	d108      	bne.n	80081aa <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	f7fe fd20 	bl	8006be4 <tcp_abort>
      pcb = next;
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	60fb      	str	r3, [r7, #12]
 80081a8:	e002      	b.n	80081b0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	68db      	ldr	r3, [r3, #12]
 80081ae:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d1ea      	bne.n	800818c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80081b6:	bf00      	nop
 80081b8:	bf00      	nop
 80081ba:	3710      	adds	r7, #16
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}
 80081c0:	08011490 	.word	0x08011490
 80081c4:	08011bc4 	.word	0x08011bc4
 80081c8:	080114d4 	.word	0x080114d4

080081cc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d02a      	beq.n	8008232 <tcp_netif_ip_addr_changed+0x66>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d026      	beq.n	8008232 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80081e4:	4b15      	ldr	r3, [pc, #84]	; (800823c <tcp_netif_ip_addr_changed+0x70>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4619      	mov	r1, r3
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f7ff ffbc 	bl	8008168 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80081f0:	4b13      	ldr	r3, [pc, #76]	; (8008240 <tcp_netif_ip_addr_changed+0x74>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4619      	mov	r1, r3
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f7ff ffb6 	bl	8008168 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d017      	beq.n	8008232 <tcp_netif_ip_addr_changed+0x66>
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d013      	beq.n	8008232 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800820a:	4b0e      	ldr	r3, [pc, #56]	; (8008244 <tcp_netif_ip_addr_changed+0x78>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	60fb      	str	r3, [r7, #12]
 8008210:	e00c      	b.n	800822c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	429a      	cmp	r2, r3
 800821c:	d103      	bne.n	8008226 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	60fb      	str	r3, [r7, #12]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d1ef      	bne.n	8008212 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8008232:	bf00      	nop
 8008234:	3710      	adds	r7, #16
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	20008eac 	.word	0x20008eac
 8008240:	20008eb8 	.word	0x20008eb8
 8008244:	20008eb4 	.word	0x20008eb4

08008248 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008254:	2b00      	cmp	r3, #0
 8008256:	d007      	beq.n	8008268 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800825c:	4618      	mov	r0, r3
 800825e:	f7ff fb51 	bl	8007904 <tcp_segs_free>
    pcb->ooseq = NULL;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8008268:	bf00      	nop
 800826a:	3708      	adds	r7, #8
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8008270:	b590      	push	{r4, r7, lr}
 8008272:	b08d      	sub	sp, #52	; 0x34
 8008274:	af04      	add	r7, sp, #16
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d105      	bne.n	800828c <tcp_input+0x1c>
 8008280:	4b9b      	ldr	r3, [pc, #620]	; (80084f0 <tcp_input+0x280>)
 8008282:	2283      	movs	r2, #131	; 0x83
 8008284:	499b      	ldr	r1, [pc, #620]	; (80084f4 <tcp_input+0x284>)
 8008286:	489c      	ldr	r0, [pc, #624]	; (80084f8 <tcp_input+0x288>)
 8008288:	f007 f82e 	bl	800f2e8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	4a9a      	ldr	r2, [pc, #616]	; (80084fc <tcp_input+0x28c>)
 8008292:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	895b      	ldrh	r3, [r3, #10]
 8008298:	2b13      	cmp	r3, #19
 800829a:	f240 83c4 	bls.w	8008a26 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800829e:	4b98      	ldr	r3, [pc, #608]	; (8008500 <tcp_input+0x290>)
 80082a0:	695b      	ldr	r3, [r3, #20]
 80082a2:	4a97      	ldr	r2, [pc, #604]	; (8008500 <tcp_input+0x290>)
 80082a4:	6812      	ldr	r2, [r2, #0]
 80082a6:	4611      	mov	r1, r2
 80082a8:	4618      	mov	r0, r3
 80082aa:	f006 f86b 	bl	800e384 <ip4_addr_isbroadcast_u32>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	f040 83ba 	bne.w	8008a2a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80082b6:	4b92      	ldr	r3, [pc, #584]	; (8008500 <tcp_input+0x290>)
 80082b8:	695b      	ldr	r3, [r3, #20]
 80082ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80082be:	2be0      	cmp	r3, #224	; 0xe0
 80082c0:	f000 83b3 	beq.w	8008a2a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80082c4:	4b8d      	ldr	r3, [pc, #564]	; (80084fc <tcp_input+0x28c>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	899b      	ldrh	r3, [r3, #12]
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7fc fbe3 	bl	8004a98 <lwip_htons>
 80082d2:	4603      	mov	r3, r0
 80082d4:	0b1b      	lsrs	r3, r3, #12
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80082de:	7cbb      	ldrb	r3, [r7, #18]
 80082e0:	2b13      	cmp	r3, #19
 80082e2:	f240 83a4 	bls.w	8008a2e <tcp_input+0x7be>
 80082e6:	7cbb      	ldrb	r3, [r7, #18]
 80082e8:	b29a      	uxth	r2, r3
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	891b      	ldrh	r3, [r3, #8]
 80082ee:	429a      	cmp	r2, r3
 80082f0:	f200 839d 	bhi.w	8008a2e <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80082f4:	7cbb      	ldrb	r3, [r7, #18]
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	3b14      	subs	r3, #20
 80082fa:	b29a      	uxth	r2, r3
 80082fc:	4b81      	ldr	r3, [pc, #516]	; (8008504 <tcp_input+0x294>)
 80082fe:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8008300:	4b81      	ldr	r3, [pc, #516]	; (8008508 <tcp_input+0x298>)
 8008302:	2200      	movs	r2, #0
 8008304:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	895a      	ldrh	r2, [r3, #10]
 800830a:	7cbb      	ldrb	r3, [r7, #18]
 800830c:	b29b      	uxth	r3, r3
 800830e:	429a      	cmp	r2, r3
 8008310:	d309      	bcc.n	8008326 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8008312:	4b7c      	ldr	r3, [pc, #496]	; (8008504 <tcp_input+0x294>)
 8008314:	881a      	ldrh	r2, [r3, #0]
 8008316:	4b7d      	ldr	r3, [pc, #500]	; (800850c <tcp_input+0x29c>)
 8008318:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800831a:	7cbb      	ldrb	r3, [r7, #18]
 800831c:	4619      	mov	r1, r3
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f7fd fe52 	bl	8005fc8 <pbuf_remove_header>
 8008324:	e04e      	b.n	80083c4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d105      	bne.n	800833a <tcp_input+0xca>
 800832e:	4b70      	ldr	r3, [pc, #448]	; (80084f0 <tcp_input+0x280>)
 8008330:	22c2      	movs	r2, #194	; 0xc2
 8008332:	4977      	ldr	r1, [pc, #476]	; (8008510 <tcp_input+0x2a0>)
 8008334:	4870      	ldr	r0, [pc, #448]	; (80084f8 <tcp_input+0x288>)
 8008336:	f006 ffd7 	bl	800f2e8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800833a:	2114      	movs	r1, #20
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f7fd fe43 	bl	8005fc8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	895a      	ldrh	r2, [r3, #10]
 8008346:	4b71      	ldr	r3, [pc, #452]	; (800850c <tcp_input+0x29c>)
 8008348:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800834a:	4b6e      	ldr	r3, [pc, #440]	; (8008504 <tcp_input+0x294>)
 800834c:	881a      	ldrh	r2, [r3, #0]
 800834e:	4b6f      	ldr	r3, [pc, #444]	; (800850c <tcp_input+0x29c>)
 8008350:	881b      	ldrh	r3, [r3, #0]
 8008352:	1ad3      	subs	r3, r2, r3
 8008354:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8008356:	4b6d      	ldr	r3, [pc, #436]	; (800850c <tcp_input+0x29c>)
 8008358:	881b      	ldrh	r3, [r3, #0]
 800835a:	4619      	mov	r1, r3
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f7fd fe33 	bl	8005fc8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	895b      	ldrh	r3, [r3, #10]
 8008368:	8a3a      	ldrh	r2, [r7, #16]
 800836a:	429a      	cmp	r2, r3
 800836c:	f200 8361 	bhi.w	8008a32 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	4a64      	ldr	r2, [pc, #400]	; (8008508 <tcp_input+0x298>)
 8008378:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	8a3a      	ldrh	r2, [r7, #16]
 8008380:	4611      	mov	r1, r2
 8008382:	4618      	mov	r0, r3
 8008384:	f7fd fe20 	bl	8005fc8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	891a      	ldrh	r2, [r3, #8]
 800838c:	8a3b      	ldrh	r3, [r7, #16]
 800838e:	1ad3      	subs	r3, r2, r3
 8008390:	b29a      	uxth	r2, r3
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	895b      	ldrh	r3, [r3, #10]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d005      	beq.n	80083aa <tcp_input+0x13a>
 800839e:	4b54      	ldr	r3, [pc, #336]	; (80084f0 <tcp_input+0x280>)
 80083a0:	22df      	movs	r2, #223	; 0xdf
 80083a2:	495c      	ldr	r1, [pc, #368]	; (8008514 <tcp_input+0x2a4>)
 80083a4:	4854      	ldr	r0, [pc, #336]	; (80084f8 <tcp_input+0x288>)
 80083a6:	f006 ff9f 	bl	800f2e8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	891a      	ldrh	r2, [r3, #8]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	891b      	ldrh	r3, [r3, #8]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d005      	beq.n	80083c4 <tcp_input+0x154>
 80083b8:	4b4d      	ldr	r3, [pc, #308]	; (80084f0 <tcp_input+0x280>)
 80083ba:	22e0      	movs	r2, #224	; 0xe0
 80083bc:	4956      	ldr	r1, [pc, #344]	; (8008518 <tcp_input+0x2a8>)
 80083be:	484e      	ldr	r0, [pc, #312]	; (80084f8 <tcp_input+0x288>)
 80083c0:	f006 ff92 	bl	800f2e8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80083c4:	4b4d      	ldr	r3, [pc, #308]	; (80084fc <tcp_input+0x28c>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	881b      	ldrh	r3, [r3, #0]
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	4a4b      	ldr	r2, [pc, #300]	; (80084fc <tcp_input+0x28c>)
 80083ce:	6814      	ldr	r4, [r2, #0]
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7fc fb61 	bl	8004a98 <lwip_htons>
 80083d6:	4603      	mov	r3, r0
 80083d8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80083da:	4b48      	ldr	r3, [pc, #288]	; (80084fc <tcp_input+0x28c>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	885b      	ldrh	r3, [r3, #2]
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	4a46      	ldr	r2, [pc, #280]	; (80084fc <tcp_input+0x28c>)
 80083e4:	6814      	ldr	r4, [r2, #0]
 80083e6:	4618      	mov	r0, r3
 80083e8:	f7fc fb56 	bl	8004a98 <lwip_htons>
 80083ec:	4603      	mov	r3, r0
 80083ee:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80083f0:	4b42      	ldr	r3, [pc, #264]	; (80084fc <tcp_input+0x28c>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	4a41      	ldr	r2, [pc, #260]	; (80084fc <tcp_input+0x28c>)
 80083f8:	6814      	ldr	r4, [r2, #0]
 80083fa:	4618      	mov	r0, r3
 80083fc:	f7fc fb61 	bl	8004ac2 <lwip_htonl>
 8008400:	4603      	mov	r3, r0
 8008402:	6063      	str	r3, [r4, #4]
 8008404:	6863      	ldr	r3, [r4, #4]
 8008406:	4a45      	ldr	r2, [pc, #276]	; (800851c <tcp_input+0x2ac>)
 8008408:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800840a:	4b3c      	ldr	r3, [pc, #240]	; (80084fc <tcp_input+0x28c>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	4a3a      	ldr	r2, [pc, #232]	; (80084fc <tcp_input+0x28c>)
 8008412:	6814      	ldr	r4, [r2, #0]
 8008414:	4618      	mov	r0, r3
 8008416:	f7fc fb54 	bl	8004ac2 <lwip_htonl>
 800841a:	4603      	mov	r3, r0
 800841c:	60a3      	str	r3, [r4, #8]
 800841e:	68a3      	ldr	r3, [r4, #8]
 8008420:	4a3f      	ldr	r2, [pc, #252]	; (8008520 <tcp_input+0x2b0>)
 8008422:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008424:	4b35      	ldr	r3, [pc, #212]	; (80084fc <tcp_input+0x28c>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	89db      	ldrh	r3, [r3, #14]
 800842a:	b29b      	uxth	r3, r3
 800842c:	4a33      	ldr	r2, [pc, #204]	; (80084fc <tcp_input+0x28c>)
 800842e:	6814      	ldr	r4, [r2, #0]
 8008430:	4618      	mov	r0, r3
 8008432:	f7fc fb31 	bl	8004a98 <lwip_htons>
 8008436:	4603      	mov	r3, r0
 8008438:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800843a:	4b30      	ldr	r3, [pc, #192]	; (80084fc <tcp_input+0x28c>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	899b      	ldrh	r3, [r3, #12]
 8008440:	b29b      	uxth	r3, r3
 8008442:	4618      	mov	r0, r3
 8008444:	f7fc fb28 	bl	8004a98 <lwip_htons>
 8008448:	4603      	mov	r3, r0
 800844a:	b2db      	uxtb	r3, r3
 800844c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008450:	b2da      	uxtb	r2, r3
 8008452:	4b34      	ldr	r3, [pc, #208]	; (8008524 <tcp_input+0x2b4>)
 8008454:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	891a      	ldrh	r2, [r3, #8]
 800845a:	4b33      	ldr	r3, [pc, #204]	; (8008528 <tcp_input+0x2b8>)
 800845c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800845e:	4b31      	ldr	r3, [pc, #196]	; (8008524 <tcp_input+0x2b4>)
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	f003 0303 	and.w	r3, r3, #3
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00c      	beq.n	8008484 <tcp_input+0x214>
    tcplen++;
 800846a:	4b2f      	ldr	r3, [pc, #188]	; (8008528 <tcp_input+0x2b8>)
 800846c:	881b      	ldrh	r3, [r3, #0]
 800846e:	3301      	adds	r3, #1
 8008470:	b29a      	uxth	r2, r3
 8008472:	4b2d      	ldr	r3, [pc, #180]	; (8008528 <tcp_input+0x2b8>)
 8008474:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	891a      	ldrh	r2, [r3, #8]
 800847a:	4b2b      	ldr	r3, [pc, #172]	; (8008528 <tcp_input+0x2b8>)
 800847c:	881b      	ldrh	r3, [r3, #0]
 800847e:	429a      	cmp	r2, r3
 8008480:	f200 82d9 	bhi.w	8008a36 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008484:	2300      	movs	r3, #0
 8008486:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008488:	4b28      	ldr	r3, [pc, #160]	; (800852c <tcp_input+0x2bc>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	61fb      	str	r3, [r7, #28]
 800848e:	e09d      	b.n	80085cc <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008490:	69fb      	ldr	r3, [r7, #28]
 8008492:	7d1b      	ldrb	r3, [r3, #20]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d105      	bne.n	80084a4 <tcp_input+0x234>
 8008498:	4b15      	ldr	r3, [pc, #84]	; (80084f0 <tcp_input+0x280>)
 800849a:	22fb      	movs	r2, #251	; 0xfb
 800849c:	4924      	ldr	r1, [pc, #144]	; (8008530 <tcp_input+0x2c0>)
 800849e:	4816      	ldr	r0, [pc, #88]	; (80084f8 <tcp_input+0x288>)
 80084a0:	f006 ff22 	bl	800f2e8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	7d1b      	ldrb	r3, [r3, #20]
 80084a8:	2b0a      	cmp	r3, #10
 80084aa:	d105      	bne.n	80084b8 <tcp_input+0x248>
 80084ac:	4b10      	ldr	r3, [pc, #64]	; (80084f0 <tcp_input+0x280>)
 80084ae:	22fc      	movs	r2, #252	; 0xfc
 80084b0:	4920      	ldr	r1, [pc, #128]	; (8008534 <tcp_input+0x2c4>)
 80084b2:	4811      	ldr	r0, [pc, #68]	; (80084f8 <tcp_input+0x288>)
 80084b4:	f006 ff18 	bl	800f2e8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	7d1b      	ldrb	r3, [r3, #20]
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d105      	bne.n	80084cc <tcp_input+0x25c>
 80084c0:	4b0b      	ldr	r3, [pc, #44]	; (80084f0 <tcp_input+0x280>)
 80084c2:	22fd      	movs	r2, #253	; 0xfd
 80084c4:	491c      	ldr	r1, [pc, #112]	; (8008538 <tcp_input+0x2c8>)
 80084c6:	480c      	ldr	r0, [pc, #48]	; (80084f8 <tcp_input+0x288>)
 80084c8:	f006 ff0e 	bl	800f2e8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80084cc:	69fb      	ldr	r3, [r7, #28]
 80084ce:	7a1b      	ldrb	r3, [r3, #8]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d033      	beq.n	800853c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80084d4:	69fb      	ldr	r3, [r7, #28]
 80084d6:	7a1a      	ldrb	r2, [r3, #8]
 80084d8:	4b09      	ldr	r3, [pc, #36]	; (8008500 <tcp_input+0x290>)
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80084e0:	3301      	adds	r3, #1
 80084e2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d029      	beq.n	800853c <tcp_input+0x2cc>
      prev = pcb;
 80084e8:	69fb      	ldr	r3, [r7, #28]
 80084ea:	61bb      	str	r3, [r7, #24]
      continue;
 80084ec:	e06b      	b.n	80085c6 <tcp_input+0x356>
 80084ee:	bf00      	nop
 80084f0:	08011bf8 	.word	0x08011bf8
 80084f4:	08011c2c 	.word	0x08011c2c
 80084f8:	08011c44 	.word	0x08011c44
 80084fc:	2000053c 	.word	0x2000053c
 8008500:	200037a8 	.word	0x200037a8
 8008504:	20000540 	.word	0x20000540
 8008508:	20000544 	.word	0x20000544
 800850c:	20000542 	.word	0x20000542
 8008510:	08011c6c 	.word	0x08011c6c
 8008514:	08011c7c 	.word	0x08011c7c
 8008518:	08011c88 	.word	0x08011c88
 800851c:	2000054c 	.word	0x2000054c
 8008520:	20000550 	.word	0x20000550
 8008524:	20000558 	.word	0x20000558
 8008528:	20000556 	.word	0x20000556
 800852c:	20008eac 	.word	0x20008eac
 8008530:	08011ca8 	.word	0x08011ca8
 8008534:	08011cd0 	.word	0x08011cd0
 8008538:	08011cfc 	.word	0x08011cfc
    }

    if (pcb->remote_port == tcphdr->src &&
 800853c:	69fb      	ldr	r3, [r7, #28]
 800853e:	8b1a      	ldrh	r2, [r3, #24]
 8008540:	4b94      	ldr	r3, [pc, #592]	; (8008794 <tcp_input+0x524>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	881b      	ldrh	r3, [r3, #0]
 8008546:	b29b      	uxth	r3, r3
 8008548:	429a      	cmp	r2, r3
 800854a:	d13a      	bne.n	80085c2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800854c:	69fb      	ldr	r3, [r7, #28]
 800854e:	8ada      	ldrh	r2, [r3, #22]
 8008550:	4b90      	ldr	r3, [pc, #576]	; (8008794 <tcp_input+0x524>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	885b      	ldrh	r3, [r3, #2]
 8008556:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008558:	429a      	cmp	r2, r3
 800855a:	d132      	bne.n	80085c2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800855c:	69fb      	ldr	r3, [r7, #28]
 800855e:	685a      	ldr	r2, [r3, #4]
 8008560:	4b8d      	ldr	r3, [pc, #564]	; (8008798 <tcp_input+0x528>)
 8008562:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008564:	429a      	cmp	r2, r3
 8008566:	d12c      	bne.n	80085c2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008568:	69fb      	ldr	r3, [r7, #28]
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	4b8a      	ldr	r3, [pc, #552]	; (8008798 <tcp_input+0x528>)
 800856e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008570:	429a      	cmp	r2, r3
 8008572:	d126      	bne.n	80085c2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	68db      	ldr	r3, [r3, #12]
 8008578:	69fa      	ldr	r2, [r7, #28]
 800857a:	429a      	cmp	r2, r3
 800857c:	d106      	bne.n	800858c <tcp_input+0x31c>
 800857e:	4b87      	ldr	r3, [pc, #540]	; (800879c <tcp_input+0x52c>)
 8008580:	f240 120d 	movw	r2, #269	; 0x10d
 8008584:	4986      	ldr	r1, [pc, #536]	; (80087a0 <tcp_input+0x530>)
 8008586:	4887      	ldr	r0, [pc, #540]	; (80087a4 <tcp_input+0x534>)
 8008588:	f006 feae 	bl	800f2e8 <iprintf>
      if (prev != NULL) {
 800858c:	69bb      	ldr	r3, [r7, #24]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d00a      	beq.n	80085a8 <tcp_input+0x338>
        prev->next = pcb->next;
 8008592:	69fb      	ldr	r3, [r7, #28]
 8008594:	68da      	ldr	r2, [r3, #12]
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800859a:	4b83      	ldr	r3, [pc, #524]	; (80087a8 <tcp_input+0x538>)
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80085a2:	4a81      	ldr	r2, [pc, #516]	; (80087a8 <tcp_input+0x538>)
 80085a4:	69fb      	ldr	r3, [r7, #28]
 80085a6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80085a8:	69fb      	ldr	r3, [r7, #28]
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	69fa      	ldr	r2, [r7, #28]
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d111      	bne.n	80085d6 <tcp_input+0x366>
 80085b2:	4b7a      	ldr	r3, [pc, #488]	; (800879c <tcp_input+0x52c>)
 80085b4:	f240 1215 	movw	r2, #277	; 0x115
 80085b8:	497c      	ldr	r1, [pc, #496]	; (80087ac <tcp_input+0x53c>)
 80085ba:	487a      	ldr	r0, [pc, #488]	; (80087a4 <tcp_input+0x534>)
 80085bc:	f006 fe94 	bl	800f2e8 <iprintf>
      break;
 80085c0:	e009      	b.n	80085d6 <tcp_input+0x366>
    }
    prev = pcb;
 80085c2:	69fb      	ldr	r3, [r7, #28]
 80085c4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80085c6:	69fb      	ldr	r3, [r7, #28]
 80085c8:	68db      	ldr	r3, [r3, #12]
 80085ca:	61fb      	str	r3, [r7, #28]
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	f47f af5e 	bne.w	8008490 <tcp_input+0x220>
 80085d4:	e000      	b.n	80085d8 <tcp_input+0x368>
      break;
 80085d6:	bf00      	nop
  }

  if (pcb == NULL) {
 80085d8:	69fb      	ldr	r3, [r7, #28]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	f040 8095 	bne.w	800870a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80085e0:	4b73      	ldr	r3, [pc, #460]	; (80087b0 <tcp_input+0x540>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	61fb      	str	r3, [r7, #28]
 80085e6:	e03f      	b.n	8008668 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	7d1b      	ldrb	r3, [r3, #20]
 80085ec:	2b0a      	cmp	r3, #10
 80085ee:	d006      	beq.n	80085fe <tcp_input+0x38e>
 80085f0:	4b6a      	ldr	r3, [pc, #424]	; (800879c <tcp_input+0x52c>)
 80085f2:	f240 121f 	movw	r2, #287	; 0x11f
 80085f6:	496f      	ldr	r1, [pc, #444]	; (80087b4 <tcp_input+0x544>)
 80085f8:	486a      	ldr	r0, [pc, #424]	; (80087a4 <tcp_input+0x534>)
 80085fa:	f006 fe75 	bl	800f2e8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	7a1b      	ldrb	r3, [r3, #8]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d009      	beq.n	800861a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008606:	69fb      	ldr	r3, [r7, #28]
 8008608:	7a1a      	ldrb	r2, [r3, #8]
 800860a:	4b63      	ldr	r3, [pc, #396]	; (8008798 <tcp_input+0x528>)
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008612:	3301      	adds	r3, #1
 8008614:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008616:	429a      	cmp	r2, r3
 8008618:	d122      	bne.n	8008660 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800861a:	69fb      	ldr	r3, [r7, #28]
 800861c:	8b1a      	ldrh	r2, [r3, #24]
 800861e:	4b5d      	ldr	r3, [pc, #372]	; (8008794 <tcp_input+0x524>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	881b      	ldrh	r3, [r3, #0]
 8008624:	b29b      	uxth	r3, r3
 8008626:	429a      	cmp	r2, r3
 8008628:	d11b      	bne.n	8008662 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	8ada      	ldrh	r2, [r3, #22]
 800862e:	4b59      	ldr	r3, [pc, #356]	; (8008794 <tcp_input+0x524>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	885b      	ldrh	r3, [r3, #2]
 8008634:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8008636:	429a      	cmp	r2, r3
 8008638:	d113      	bne.n	8008662 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800863a:	69fb      	ldr	r3, [r7, #28]
 800863c:	685a      	ldr	r2, [r3, #4]
 800863e:	4b56      	ldr	r3, [pc, #344]	; (8008798 <tcp_input+0x528>)
 8008640:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8008642:	429a      	cmp	r2, r3
 8008644:	d10d      	bne.n	8008662 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008646:	69fb      	ldr	r3, [r7, #28]
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	4b53      	ldr	r3, [pc, #332]	; (8008798 <tcp_input+0x528>)
 800864c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800864e:	429a      	cmp	r2, r3
 8008650:	d107      	bne.n	8008662 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8008652:	69f8      	ldr	r0, [r7, #28]
 8008654:	f000 fb54 	bl	8008d00 <tcp_timewait_input>
        }
        pbuf_free(p);
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f7fd fd3b 	bl	80060d4 <pbuf_free>
        return;
 800865e:	e1f0      	b.n	8008a42 <tcp_input+0x7d2>
        continue;
 8008660:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008662:	69fb      	ldr	r3, [r7, #28]
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	61fb      	str	r3, [r7, #28]
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d1bc      	bne.n	80085e8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800866e:	2300      	movs	r3, #0
 8008670:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008672:	4b51      	ldr	r3, [pc, #324]	; (80087b8 <tcp_input+0x548>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	617b      	str	r3, [r7, #20]
 8008678:	e02a      	b.n	80086d0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	7a1b      	ldrb	r3, [r3, #8]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d00c      	beq.n	800869c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	7a1a      	ldrb	r2, [r3, #8]
 8008686:	4b44      	ldr	r3, [pc, #272]	; (8008798 <tcp_input+0x528>)
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800868e:	3301      	adds	r3, #1
 8008690:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008692:	429a      	cmp	r2, r3
 8008694:	d002      	beq.n	800869c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	61bb      	str	r3, [r7, #24]
        continue;
 800869a:	e016      	b.n	80086ca <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	8ada      	ldrh	r2, [r3, #22]
 80086a0:	4b3c      	ldr	r3, [pc, #240]	; (8008794 <tcp_input+0x524>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	885b      	ldrh	r3, [r3, #2]
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d10c      	bne.n	80086c6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	4b39      	ldr	r3, [pc, #228]	; (8008798 <tcp_input+0x528>)
 80086b2:	695b      	ldr	r3, [r3, #20]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d00f      	beq.n	80086d8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d00d      	beq.n	80086da <tcp_input+0x46a>
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d009      	beq.n	80086da <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	617b      	str	r3, [r7, #20]
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d1d1      	bne.n	800867a <tcp_input+0x40a>
 80086d6:	e000      	b.n	80086da <tcp_input+0x46a>
            break;
 80086d8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d014      	beq.n	800870a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80086e0:	69bb      	ldr	r3, [r7, #24]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d00a      	beq.n	80086fc <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	68da      	ldr	r2, [r3, #12]
 80086ea:	69bb      	ldr	r3, [r7, #24]
 80086ec:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80086ee:	4b32      	ldr	r3, [pc, #200]	; (80087b8 <tcp_input+0x548>)
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80086f6:	4a30      	ldr	r2, [pc, #192]	; (80087b8 <tcp_input+0x548>)
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80086fc:	6978      	ldr	r0, [r7, #20]
 80086fe:	f000 fa01 	bl	8008b04 <tcp_listen_input>
      }
      pbuf_free(p);
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f7fd fce6 	bl	80060d4 <pbuf_free>
      return;
 8008708:	e19b      	b.n	8008a42 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800870a:	69fb      	ldr	r3, [r7, #28]
 800870c:	2b00      	cmp	r3, #0
 800870e:	f000 8160 	beq.w	80089d2 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8008712:	4b2a      	ldr	r3, [pc, #168]	; (80087bc <tcp_input+0x54c>)
 8008714:	2200      	movs	r2, #0
 8008716:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	891a      	ldrh	r2, [r3, #8]
 800871c:	4b27      	ldr	r3, [pc, #156]	; (80087bc <tcp_input+0x54c>)
 800871e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8008720:	4a26      	ldr	r2, [pc, #152]	; (80087bc <tcp_input+0x54c>)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8008726:	4b1b      	ldr	r3, [pc, #108]	; (8008794 <tcp_input+0x524>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a24      	ldr	r2, [pc, #144]	; (80087bc <tcp_input+0x54c>)
 800872c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800872e:	4b24      	ldr	r3, [pc, #144]	; (80087c0 <tcp_input+0x550>)
 8008730:	2200      	movs	r2, #0
 8008732:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8008734:	4b23      	ldr	r3, [pc, #140]	; (80087c4 <tcp_input+0x554>)
 8008736:	2200      	movs	r2, #0
 8008738:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800873a:	4b23      	ldr	r3, [pc, #140]	; (80087c8 <tcp_input+0x558>)
 800873c:	2200      	movs	r2, #0
 800873e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8008740:	4b22      	ldr	r3, [pc, #136]	; (80087cc <tcp_input+0x55c>)
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	f003 0308 	and.w	r3, r3, #8
 8008748:	2b00      	cmp	r3, #0
 800874a:	d006      	beq.n	800875a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	7b5b      	ldrb	r3, [r3, #13]
 8008750:	f043 0301 	orr.w	r3, r3, #1
 8008754:	b2da      	uxtb	r2, r3
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800875e:	2b00      	cmp	r3, #0
 8008760:	d038      	beq.n	80087d4 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008762:	69f8      	ldr	r0, [r7, #28]
 8008764:	f7ff f852 	bl	800780c <tcp_process_refused_data>
 8008768:	4603      	mov	r3, r0
 800876a:	f113 0f0d 	cmn.w	r3, #13
 800876e:	d007      	beq.n	8008780 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008770:	69fb      	ldr	r3, [r7, #28]
 8008772:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008774:	2b00      	cmp	r3, #0
 8008776:	d02d      	beq.n	80087d4 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008778:	4b15      	ldr	r3, [pc, #84]	; (80087d0 <tcp_input+0x560>)
 800877a:	881b      	ldrh	r3, [r3, #0]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d029      	beq.n	80087d4 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008784:	2b00      	cmp	r3, #0
 8008786:	f040 8104 	bne.w	8008992 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800878a:	69f8      	ldr	r0, [r7, #28]
 800878c:	f003 fe16 	bl	800c3bc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8008790:	e0ff      	b.n	8008992 <tcp_input+0x722>
 8008792:	bf00      	nop
 8008794:	2000053c 	.word	0x2000053c
 8008798:	200037a8 	.word	0x200037a8
 800879c:	08011bf8 	.word	0x08011bf8
 80087a0:	08011d24 	.word	0x08011d24
 80087a4:	08011c44 	.word	0x08011c44
 80087a8:	20008eac 	.word	0x20008eac
 80087ac:	08011d50 	.word	0x08011d50
 80087b0:	20008ebc 	.word	0x20008ebc
 80087b4:	08011d7c 	.word	0x08011d7c
 80087b8:	20008eb4 	.word	0x20008eb4
 80087bc:	2000052c 	.word	0x2000052c
 80087c0:	2000055c 	.word	0x2000055c
 80087c4:	20000559 	.word	0x20000559
 80087c8:	20000554 	.word	0x20000554
 80087cc:	20000558 	.word	0x20000558
 80087d0:	20000556 	.word	0x20000556
      }
    }
    tcp_input_pcb = pcb;
 80087d4:	4a9c      	ldr	r2, [pc, #624]	; (8008a48 <tcp_input+0x7d8>)
 80087d6:	69fb      	ldr	r3, [r7, #28]
 80087d8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80087da:	69f8      	ldr	r0, [r7, #28]
 80087dc:	f000 fb0a 	bl	8008df4 <tcp_process>
 80087e0:	4603      	mov	r3, r0
 80087e2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80087e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80087e8:	f113 0f0d 	cmn.w	r3, #13
 80087ec:	f000 80d3 	beq.w	8008996 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 80087f0:	4b96      	ldr	r3, [pc, #600]	; (8008a4c <tcp_input+0x7dc>)
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	f003 0308 	and.w	r3, r3, #8
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d015      	beq.n	8008828 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008802:	2b00      	cmp	r3, #0
 8008804:	d008      	beq.n	8008818 <tcp_input+0x5a8>
 8008806:	69fb      	ldr	r3, [r7, #28]
 8008808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800880c:	69fa      	ldr	r2, [r7, #28]
 800880e:	6912      	ldr	r2, [r2, #16]
 8008810:	f06f 010d 	mvn.w	r1, #13
 8008814:	4610      	mov	r0, r2
 8008816:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008818:	69f9      	ldr	r1, [r7, #28]
 800881a:	488d      	ldr	r0, [pc, #564]	; (8008a50 <tcp_input+0x7e0>)
 800881c:	f7ff fbb0 	bl	8007f80 <tcp_pcb_remove>
        tcp_free(pcb);
 8008820:	69f8      	ldr	r0, [r7, #28]
 8008822:	f7fd fef7 	bl	8006614 <tcp_free>
 8008826:	e0c1      	b.n	80089ac <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8008828:	2300      	movs	r3, #0
 800882a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800882c:	4b89      	ldr	r3, [pc, #548]	; (8008a54 <tcp_input+0x7e4>)
 800882e:	881b      	ldrh	r3, [r3, #0]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d01d      	beq.n	8008870 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8008834:	4b87      	ldr	r3, [pc, #540]	; (8008a54 <tcp_input+0x7e4>)
 8008836:	881b      	ldrh	r3, [r3, #0]
 8008838:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800883a:	69fb      	ldr	r3, [r7, #28]
 800883c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008840:	2b00      	cmp	r3, #0
 8008842:	d00a      	beq.n	800885a <tcp_input+0x5ea>
 8008844:	69fb      	ldr	r3, [r7, #28]
 8008846:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800884a:	69fa      	ldr	r2, [r7, #28]
 800884c:	6910      	ldr	r0, [r2, #16]
 800884e:	89fa      	ldrh	r2, [r7, #14]
 8008850:	69f9      	ldr	r1, [r7, #28]
 8008852:	4798      	blx	r3
 8008854:	4603      	mov	r3, r0
 8008856:	74fb      	strb	r3, [r7, #19]
 8008858:	e001      	b.n	800885e <tcp_input+0x5ee>
 800885a:	2300      	movs	r3, #0
 800885c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800885e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008862:	f113 0f0d 	cmn.w	r3, #13
 8008866:	f000 8098 	beq.w	800899a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800886a:	4b7a      	ldr	r3, [pc, #488]	; (8008a54 <tcp_input+0x7e4>)
 800886c:	2200      	movs	r2, #0
 800886e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8008870:	69f8      	ldr	r0, [r7, #28]
 8008872:	f000 f907 	bl	8008a84 <tcp_input_delayed_close>
 8008876:	4603      	mov	r3, r0
 8008878:	2b00      	cmp	r3, #0
 800887a:	f040 8090 	bne.w	800899e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800887e:	4b76      	ldr	r3, [pc, #472]	; (8008a58 <tcp_input+0x7e8>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d041      	beq.n	800890a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800888a:	2b00      	cmp	r3, #0
 800888c:	d006      	beq.n	800889c <tcp_input+0x62c>
 800888e:	4b73      	ldr	r3, [pc, #460]	; (8008a5c <tcp_input+0x7ec>)
 8008890:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008894:	4972      	ldr	r1, [pc, #456]	; (8008a60 <tcp_input+0x7f0>)
 8008896:	4873      	ldr	r0, [pc, #460]	; (8008a64 <tcp_input+0x7f4>)
 8008898:	f006 fd26 	bl	800f2e8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800889c:	69fb      	ldr	r3, [r7, #28]
 800889e:	8b5b      	ldrh	r3, [r3, #26]
 80088a0:	f003 0310 	and.w	r3, r3, #16
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d008      	beq.n	80088ba <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80088a8:	4b6b      	ldr	r3, [pc, #428]	; (8008a58 <tcp_input+0x7e8>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4618      	mov	r0, r3
 80088ae:	f7fd fc11 	bl	80060d4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80088b2:	69f8      	ldr	r0, [r7, #28]
 80088b4:	f7fe f996 	bl	8006be4 <tcp_abort>
            goto aborted;
 80088b8:	e078      	b.n	80089ac <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80088ba:	69fb      	ldr	r3, [r7, #28]
 80088bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d00c      	beq.n	80088de <tcp_input+0x66e>
 80088c4:	69fb      	ldr	r3, [r7, #28]
 80088c6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80088ca:	69fb      	ldr	r3, [r7, #28]
 80088cc:	6918      	ldr	r0, [r3, #16]
 80088ce:	4b62      	ldr	r3, [pc, #392]	; (8008a58 <tcp_input+0x7e8>)
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	2300      	movs	r3, #0
 80088d4:	69f9      	ldr	r1, [r7, #28]
 80088d6:	47a0      	blx	r4
 80088d8:	4603      	mov	r3, r0
 80088da:	74fb      	strb	r3, [r7, #19]
 80088dc:	e008      	b.n	80088f0 <tcp_input+0x680>
 80088de:	4b5e      	ldr	r3, [pc, #376]	; (8008a58 <tcp_input+0x7e8>)
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	2300      	movs	r3, #0
 80088e4:	69f9      	ldr	r1, [r7, #28]
 80088e6:	2000      	movs	r0, #0
 80088e8:	f7ff f884 	bl	80079f4 <tcp_recv_null>
 80088ec:	4603      	mov	r3, r0
 80088ee:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80088f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80088f4:	f113 0f0d 	cmn.w	r3, #13
 80088f8:	d053      	beq.n	80089a2 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80088fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d003      	beq.n	800890a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8008902:	4b55      	ldr	r3, [pc, #340]	; (8008a58 <tcp_input+0x7e8>)
 8008904:	681a      	ldr	r2, [r3, #0]
 8008906:	69fb      	ldr	r3, [r7, #28]
 8008908:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800890a:	4b50      	ldr	r3, [pc, #320]	; (8008a4c <tcp_input+0x7dc>)
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	f003 0320 	and.w	r3, r3, #32
 8008912:	2b00      	cmp	r3, #0
 8008914:	d030      	beq.n	8008978 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8008916:	69fb      	ldr	r3, [r7, #28]
 8008918:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800891a:	2b00      	cmp	r3, #0
 800891c:	d009      	beq.n	8008932 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008922:	7b5a      	ldrb	r2, [r3, #13]
 8008924:	69fb      	ldr	r3, [r7, #28]
 8008926:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008928:	f042 0220 	orr.w	r2, r2, #32
 800892c:	b2d2      	uxtb	r2, r2
 800892e:	735a      	strb	r2, [r3, #13]
 8008930:	e022      	b.n	8008978 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008932:	69fb      	ldr	r3, [r7, #28]
 8008934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008936:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800893a:	d005      	beq.n	8008948 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800893c:	69fb      	ldr	r3, [r7, #28]
 800893e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008940:	3301      	adds	r3, #1
 8008942:	b29a      	uxth	r2, r3
 8008944:	69fb      	ldr	r3, [r7, #28]
 8008946:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8008948:	69fb      	ldr	r3, [r7, #28]
 800894a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800894e:	2b00      	cmp	r3, #0
 8008950:	d00b      	beq.n	800896a <tcp_input+0x6fa>
 8008952:	69fb      	ldr	r3, [r7, #28]
 8008954:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008958:	69fb      	ldr	r3, [r7, #28]
 800895a:	6918      	ldr	r0, [r3, #16]
 800895c:	2300      	movs	r3, #0
 800895e:	2200      	movs	r2, #0
 8008960:	69f9      	ldr	r1, [r7, #28]
 8008962:	47a0      	blx	r4
 8008964:	4603      	mov	r3, r0
 8008966:	74fb      	strb	r3, [r7, #19]
 8008968:	e001      	b.n	800896e <tcp_input+0x6fe>
 800896a:	2300      	movs	r3, #0
 800896c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800896e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008972:	f113 0f0d 	cmn.w	r3, #13
 8008976:	d016      	beq.n	80089a6 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8008978:	4b33      	ldr	r3, [pc, #204]	; (8008a48 <tcp_input+0x7d8>)
 800897a:	2200      	movs	r2, #0
 800897c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800897e:	69f8      	ldr	r0, [r7, #28]
 8008980:	f000 f880 	bl	8008a84 <tcp_input_delayed_close>
 8008984:	4603      	mov	r3, r0
 8008986:	2b00      	cmp	r3, #0
 8008988:	d10f      	bne.n	80089aa <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800898a:	69f8      	ldr	r0, [r7, #28]
 800898c:	f002 ff10 	bl	800b7b0 <tcp_output>
 8008990:	e00c      	b.n	80089ac <tcp_input+0x73c>
        goto aborted;
 8008992:	bf00      	nop
 8008994:	e00a      	b.n	80089ac <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8008996:	bf00      	nop
 8008998:	e008      	b.n	80089ac <tcp_input+0x73c>
              goto aborted;
 800899a:	bf00      	nop
 800899c:	e006      	b.n	80089ac <tcp_input+0x73c>
          goto aborted;
 800899e:	bf00      	nop
 80089a0:	e004      	b.n	80089ac <tcp_input+0x73c>
            goto aborted;
 80089a2:	bf00      	nop
 80089a4:	e002      	b.n	80089ac <tcp_input+0x73c>
              goto aborted;
 80089a6:	bf00      	nop
 80089a8:	e000      	b.n	80089ac <tcp_input+0x73c>
          goto aborted;
 80089aa:	bf00      	nop
    tcp_input_pcb = NULL;
 80089ac:	4b26      	ldr	r3, [pc, #152]	; (8008a48 <tcp_input+0x7d8>)
 80089ae:	2200      	movs	r2, #0
 80089b0:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80089b2:	4b29      	ldr	r3, [pc, #164]	; (8008a58 <tcp_input+0x7e8>)
 80089b4:	2200      	movs	r2, #0
 80089b6:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80089b8:	4b2b      	ldr	r3, [pc, #172]	; (8008a68 <tcp_input+0x7f8>)
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d03f      	beq.n	8008a40 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 80089c0:	4b29      	ldr	r3, [pc, #164]	; (8008a68 <tcp_input+0x7f8>)
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	4618      	mov	r0, r3
 80089c6:	f7fd fb85 	bl	80060d4 <pbuf_free>
      inseg.p = NULL;
 80089ca:	4b27      	ldr	r3, [pc, #156]	; (8008a68 <tcp_input+0x7f8>)
 80089cc:	2200      	movs	r2, #0
 80089ce:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80089d0:	e036      	b.n	8008a40 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80089d2:	4b26      	ldr	r3, [pc, #152]	; (8008a6c <tcp_input+0x7fc>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	899b      	ldrh	r3, [r3, #12]
 80089d8:	b29b      	uxth	r3, r3
 80089da:	4618      	mov	r0, r3
 80089dc:	f7fc f85c 	bl	8004a98 <lwip_htons>
 80089e0:	4603      	mov	r3, r0
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	f003 0304 	and.w	r3, r3, #4
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d118      	bne.n	8008a1e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80089ec:	4b20      	ldr	r3, [pc, #128]	; (8008a70 <tcp_input+0x800>)
 80089ee:	6819      	ldr	r1, [r3, #0]
 80089f0:	4b20      	ldr	r3, [pc, #128]	; (8008a74 <tcp_input+0x804>)
 80089f2:	881b      	ldrh	r3, [r3, #0]
 80089f4:	461a      	mov	r2, r3
 80089f6:	4b20      	ldr	r3, [pc, #128]	; (8008a78 <tcp_input+0x808>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80089fc:	4b1b      	ldr	r3, [pc, #108]	; (8008a6c <tcp_input+0x7fc>)
 80089fe:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008a00:	885b      	ldrh	r3, [r3, #2]
 8008a02:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008a04:	4a19      	ldr	r2, [pc, #100]	; (8008a6c <tcp_input+0x7fc>)
 8008a06:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008a08:	8812      	ldrh	r2, [r2, #0]
 8008a0a:	b292      	uxth	r2, r2
 8008a0c:	9202      	str	r2, [sp, #8]
 8008a0e:	9301      	str	r3, [sp, #4]
 8008a10:	4b1a      	ldr	r3, [pc, #104]	; (8008a7c <tcp_input+0x80c>)
 8008a12:	9300      	str	r3, [sp, #0]
 8008a14:	4b1a      	ldr	r3, [pc, #104]	; (8008a80 <tcp_input+0x810>)
 8008a16:	4602      	mov	r2, r0
 8008a18:	2000      	movs	r0, #0
 8008a1a:	f003 fc7d 	bl	800c318 <tcp_rst>
    pbuf_free(p);
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f7fd fb58 	bl	80060d4 <pbuf_free>
  return;
 8008a24:	e00c      	b.n	8008a40 <tcp_input+0x7d0>
    goto dropped;
 8008a26:	bf00      	nop
 8008a28:	e006      	b.n	8008a38 <tcp_input+0x7c8>
    goto dropped;
 8008a2a:	bf00      	nop
 8008a2c:	e004      	b.n	8008a38 <tcp_input+0x7c8>
    goto dropped;
 8008a2e:	bf00      	nop
 8008a30:	e002      	b.n	8008a38 <tcp_input+0x7c8>
      goto dropped;
 8008a32:	bf00      	nop
 8008a34:	e000      	b.n	8008a38 <tcp_input+0x7c8>
      goto dropped;
 8008a36:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f7fd fb4b 	bl	80060d4 <pbuf_free>
 8008a3e:	e000      	b.n	8008a42 <tcp_input+0x7d2>
  return;
 8008a40:	bf00      	nop
}
 8008a42:	3724      	adds	r7, #36	; 0x24
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd90      	pop	{r4, r7, pc}
 8008a48:	20008ec0 	.word	0x20008ec0
 8008a4c:	20000559 	.word	0x20000559
 8008a50:	20008eac 	.word	0x20008eac
 8008a54:	20000554 	.word	0x20000554
 8008a58:	2000055c 	.word	0x2000055c
 8008a5c:	08011bf8 	.word	0x08011bf8
 8008a60:	08011dac 	.word	0x08011dac
 8008a64:	08011c44 	.word	0x08011c44
 8008a68:	2000052c 	.word	0x2000052c
 8008a6c:	2000053c 	.word	0x2000053c
 8008a70:	20000550 	.word	0x20000550
 8008a74:	20000556 	.word	0x20000556
 8008a78:	2000054c 	.word	0x2000054c
 8008a7c:	200037b8 	.word	0x200037b8
 8008a80:	200037bc 	.word	0x200037bc

08008a84 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d106      	bne.n	8008aa0 <tcp_input_delayed_close+0x1c>
 8008a92:	4b17      	ldr	r3, [pc, #92]	; (8008af0 <tcp_input_delayed_close+0x6c>)
 8008a94:	f240 225a 	movw	r2, #602	; 0x25a
 8008a98:	4916      	ldr	r1, [pc, #88]	; (8008af4 <tcp_input_delayed_close+0x70>)
 8008a9a:	4817      	ldr	r0, [pc, #92]	; (8008af8 <tcp_input_delayed_close+0x74>)
 8008a9c:	f006 fc24 	bl	800f2e8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8008aa0:	4b16      	ldr	r3, [pc, #88]	; (8008afc <tcp_input_delayed_close+0x78>)
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	f003 0310 	and.w	r3, r3, #16
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d01c      	beq.n	8008ae6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	8b5b      	ldrh	r3, [r3, #26]
 8008ab0:	f003 0310 	and.w	r3, r3, #16
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d10d      	bne.n	8008ad4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d008      	beq.n	8008ad4 <tcp_input_delayed_close+0x50>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	6912      	ldr	r2, [r2, #16]
 8008acc:	f06f 010e 	mvn.w	r1, #14
 8008ad0:	4610      	mov	r0, r2
 8008ad2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008ad4:	6879      	ldr	r1, [r7, #4]
 8008ad6:	480a      	ldr	r0, [pc, #40]	; (8008b00 <tcp_input_delayed_close+0x7c>)
 8008ad8:	f7ff fa52 	bl	8007f80 <tcp_pcb_remove>
    tcp_free(pcb);
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f7fd fd99 	bl	8006614 <tcp_free>
    return 1;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	e000      	b.n	8008ae8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3708      	adds	r7, #8
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}
 8008af0:	08011bf8 	.word	0x08011bf8
 8008af4:	08011dc8 	.word	0x08011dc8
 8008af8:	08011c44 	.word	0x08011c44
 8008afc:	20000559 	.word	0x20000559
 8008b00:	20008eac 	.word	0x20008eac

08008b04 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8008b04:	b590      	push	{r4, r7, lr}
 8008b06:	b08b      	sub	sp, #44	; 0x2c
 8008b08:	af04      	add	r7, sp, #16
 8008b0a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8008b0c:	4b6f      	ldr	r3, [pc, #444]	; (8008ccc <tcp_listen_input+0x1c8>)
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	f003 0304 	and.w	r3, r3, #4
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	f040 80d2 	bne.w	8008cbe <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d106      	bne.n	8008b2e <tcp_listen_input+0x2a>
 8008b20:	4b6b      	ldr	r3, [pc, #428]	; (8008cd0 <tcp_listen_input+0x1cc>)
 8008b22:	f240 2281 	movw	r2, #641	; 0x281
 8008b26:	496b      	ldr	r1, [pc, #428]	; (8008cd4 <tcp_listen_input+0x1d0>)
 8008b28:	486b      	ldr	r0, [pc, #428]	; (8008cd8 <tcp_listen_input+0x1d4>)
 8008b2a:	f006 fbdd 	bl	800f2e8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8008b2e:	4b67      	ldr	r3, [pc, #412]	; (8008ccc <tcp_listen_input+0x1c8>)
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	f003 0310 	and.w	r3, r3, #16
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d019      	beq.n	8008b6e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008b3a:	4b68      	ldr	r3, [pc, #416]	; (8008cdc <tcp_listen_input+0x1d8>)
 8008b3c:	6819      	ldr	r1, [r3, #0]
 8008b3e:	4b68      	ldr	r3, [pc, #416]	; (8008ce0 <tcp_listen_input+0x1dc>)
 8008b40:	881b      	ldrh	r3, [r3, #0]
 8008b42:	461a      	mov	r2, r3
 8008b44:	4b67      	ldr	r3, [pc, #412]	; (8008ce4 <tcp_listen_input+0x1e0>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008b4a:	4b67      	ldr	r3, [pc, #412]	; (8008ce8 <tcp_listen_input+0x1e4>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008b4e:	885b      	ldrh	r3, [r3, #2]
 8008b50:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008b52:	4a65      	ldr	r2, [pc, #404]	; (8008ce8 <tcp_listen_input+0x1e4>)
 8008b54:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008b56:	8812      	ldrh	r2, [r2, #0]
 8008b58:	b292      	uxth	r2, r2
 8008b5a:	9202      	str	r2, [sp, #8]
 8008b5c:	9301      	str	r3, [sp, #4]
 8008b5e:	4b63      	ldr	r3, [pc, #396]	; (8008cec <tcp_listen_input+0x1e8>)
 8008b60:	9300      	str	r3, [sp, #0]
 8008b62:	4b63      	ldr	r3, [pc, #396]	; (8008cf0 <tcp_listen_input+0x1ec>)
 8008b64:	4602      	mov	r2, r0
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f003 fbd6 	bl	800c318 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8008b6c:	e0a9      	b.n	8008cc2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8008b6e:	4b57      	ldr	r3, [pc, #348]	; (8008ccc <tcp_listen_input+0x1c8>)
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	f003 0302 	and.w	r3, r3, #2
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	f000 80a3 	beq.w	8008cc2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	7d5b      	ldrb	r3, [r3, #21]
 8008b80:	4618      	mov	r0, r3
 8008b82:	f7ff f85b 	bl	8007c3c <tcp_alloc>
 8008b86:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d111      	bne.n	8008bb2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	699b      	ldr	r3, [r3, #24]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d00a      	beq.n	8008bac <tcp_listen_input+0xa8>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	699b      	ldr	r3, [r3, #24]
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	6910      	ldr	r0, [r2, #16]
 8008b9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ba2:	2100      	movs	r1, #0
 8008ba4:	4798      	blx	r3
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	73bb      	strb	r3, [r7, #14]
      return;
 8008baa:	e08b      	b.n	8008cc4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008bac:	23f0      	movs	r3, #240	; 0xf0
 8008bae:	73bb      	strb	r3, [r7, #14]
      return;
 8008bb0:	e088      	b.n	8008cc4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008bb2:	4b50      	ldr	r3, [pc, #320]	; (8008cf4 <tcp_listen_input+0x1f0>)
 8008bb4:	695a      	ldr	r2, [r3, #20]
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008bba:	4b4e      	ldr	r3, [pc, #312]	; (8008cf4 <tcp_listen_input+0x1f0>)
 8008bbc:	691a      	ldr	r2, [r3, #16]
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	8ada      	ldrh	r2, [r3, #22]
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8008bca:	4b47      	ldr	r3, [pc, #284]	; (8008ce8 <tcp_listen_input+0x1e4>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	881b      	ldrh	r3, [r3, #0]
 8008bd0:	b29a      	uxth	r2, r3
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	2203      	movs	r2, #3
 8008bda:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8008bdc:	4b41      	ldr	r3, [pc, #260]	; (8008ce4 <tcp_listen_input+0x1e0>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	1c5a      	adds	r2, r3, #1
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8008bee:	6978      	ldr	r0, [r7, #20]
 8008bf0:	f7ff fa5a 	bl	80080a8 <tcp_next_iss>
 8008bf4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	693a      	ldr	r2, [r7, #16]
 8008bfa:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	693a      	ldr	r2, [r7, #16]
 8008c00:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	693a      	ldr	r2, [r7, #16]
 8008c06:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	693a      	ldr	r2, [r7, #16]
 8008c0c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008c0e:	4b35      	ldr	r3, [pc, #212]	; (8008ce4 <tcp_listen_input+0x1e0>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	1e5a      	subs	r2, r3, #1
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	691a      	ldr	r2, [r3, #16]
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	7a5b      	ldrb	r3, [r3, #9]
 8008c2a:	f003 030c 	and.w	r3, r3, #12
 8008c2e:	b2da      	uxtb	r2, r3
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	7a1a      	ldrb	r2, [r3, #8]
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8008c3c:	4b2e      	ldr	r3, [pc, #184]	; (8008cf8 <tcp_listen_input+0x1f4>)
 8008c3e:	681a      	ldr	r2, [r3, #0]
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	60da      	str	r2, [r3, #12]
 8008c44:	4a2c      	ldr	r2, [pc, #176]	; (8008cf8 <tcp_listen_input+0x1f4>)
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	6013      	str	r3, [r2, #0]
 8008c4a:	f003 fd27 	bl	800c69c <tcp_timer_needed>
 8008c4e:	4b2b      	ldr	r3, [pc, #172]	; (8008cfc <tcp_listen_input+0x1f8>)
 8008c50:	2201      	movs	r2, #1
 8008c52:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8008c54:	6978      	ldr	r0, [r7, #20]
 8008c56:	f001 fd8d 	bl	800a774 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8008c5a:	4b23      	ldr	r3, [pc, #140]	; (8008ce8 <tcp_listen_input+0x1e4>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	89db      	ldrh	r3, [r3, #14]
 8008c60:	b29a      	uxth	r2, r3
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	3304      	adds	r3, #4
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f005 f8eb 	bl	800de58 <ip4_route>
 8008c82:	4601      	mov	r1, r0
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	3304      	adds	r3, #4
 8008c88:	461a      	mov	r2, r3
 8008c8a:	4620      	mov	r0, r4
 8008c8c:	f7ff fa32 	bl	80080f4 <tcp_eff_send_mss_netif>
 8008c90:	4603      	mov	r3, r0
 8008c92:	461a      	mov	r2, r3
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008c98:	2112      	movs	r1, #18
 8008c9a:	6978      	ldr	r0, [r7, #20]
 8008c9c:	f002 fc9a 	bl	800b5d4 <tcp_enqueue_flags>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8008ca4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d004      	beq.n	8008cb6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8008cac:	2100      	movs	r1, #0
 8008cae:	6978      	ldr	r0, [r7, #20]
 8008cb0:	f7fd feda 	bl	8006a68 <tcp_abandon>
      return;
 8008cb4:	e006      	b.n	8008cc4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8008cb6:	6978      	ldr	r0, [r7, #20]
 8008cb8:	f002 fd7a 	bl	800b7b0 <tcp_output>
  return;
 8008cbc:	e001      	b.n	8008cc2 <tcp_listen_input+0x1be>
    return;
 8008cbe:	bf00      	nop
 8008cc0:	e000      	b.n	8008cc4 <tcp_listen_input+0x1c0>
  return;
 8008cc2:	bf00      	nop
}
 8008cc4:	371c      	adds	r7, #28
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd90      	pop	{r4, r7, pc}
 8008cca:	bf00      	nop
 8008ccc:	20000558 	.word	0x20000558
 8008cd0:	08011bf8 	.word	0x08011bf8
 8008cd4:	08011df0 	.word	0x08011df0
 8008cd8:	08011c44 	.word	0x08011c44
 8008cdc:	20000550 	.word	0x20000550
 8008ce0:	20000556 	.word	0x20000556
 8008ce4:	2000054c 	.word	0x2000054c
 8008ce8:	2000053c 	.word	0x2000053c
 8008cec:	200037b8 	.word	0x200037b8
 8008cf0:	200037bc 	.word	0x200037bc
 8008cf4:	200037a8 	.word	0x200037a8
 8008cf8:	20008eac 	.word	0x20008eac
 8008cfc:	20008ea8 	.word	0x20008ea8

08008d00 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b086      	sub	sp, #24
 8008d04:	af04      	add	r7, sp, #16
 8008d06:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8008d08:	4b2f      	ldr	r3, [pc, #188]	; (8008dc8 <tcp_timewait_input+0xc8>)
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	f003 0304 	and.w	r3, r3, #4
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d153      	bne.n	8008dbc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d106      	bne.n	8008d28 <tcp_timewait_input+0x28>
 8008d1a:	4b2c      	ldr	r3, [pc, #176]	; (8008dcc <tcp_timewait_input+0xcc>)
 8008d1c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8008d20:	492b      	ldr	r1, [pc, #172]	; (8008dd0 <tcp_timewait_input+0xd0>)
 8008d22:	482c      	ldr	r0, [pc, #176]	; (8008dd4 <tcp_timewait_input+0xd4>)
 8008d24:	f006 fae0 	bl	800f2e8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8008d28:	4b27      	ldr	r3, [pc, #156]	; (8008dc8 <tcp_timewait_input+0xc8>)
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	f003 0302 	and.w	r3, r3, #2
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d02a      	beq.n	8008d8a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008d34:	4b28      	ldr	r3, [pc, #160]	; (8008dd8 <tcp_timewait_input+0xd8>)
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3c:	1ad3      	subs	r3, r2, r3
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	db2d      	blt.n	8008d9e <tcp_timewait_input+0x9e>
 8008d42:	4b25      	ldr	r3, [pc, #148]	; (8008dd8 <tcp_timewait_input+0xd8>)
 8008d44:	681a      	ldr	r2, [r3, #0]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d4a:	6879      	ldr	r1, [r7, #4]
 8008d4c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008d4e:	440b      	add	r3, r1
 8008d50:	1ad3      	subs	r3, r2, r3
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	dc23      	bgt.n	8008d9e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d56:	4b21      	ldr	r3, [pc, #132]	; (8008ddc <tcp_timewait_input+0xdc>)
 8008d58:	6819      	ldr	r1, [r3, #0]
 8008d5a:	4b21      	ldr	r3, [pc, #132]	; (8008de0 <tcp_timewait_input+0xe0>)
 8008d5c:	881b      	ldrh	r3, [r3, #0]
 8008d5e:	461a      	mov	r2, r3
 8008d60:	4b1d      	ldr	r3, [pc, #116]	; (8008dd8 <tcp_timewait_input+0xd8>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008d66:	4b1f      	ldr	r3, [pc, #124]	; (8008de4 <tcp_timewait_input+0xe4>)
 8008d68:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d6a:	885b      	ldrh	r3, [r3, #2]
 8008d6c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008d6e:	4a1d      	ldr	r2, [pc, #116]	; (8008de4 <tcp_timewait_input+0xe4>)
 8008d70:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d72:	8812      	ldrh	r2, [r2, #0]
 8008d74:	b292      	uxth	r2, r2
 8008d76:	9202      	str	r2, [sp, #8]
 8008d78:	9301      	str	r3, [sp, #4]
 8008d7a:	4b1b      	ldr	r3, [pc, #108]	; (8008de8 <tcp_timewait_input+0xe8>)
 8008d7c:	9300      	str	r3, [sp, #0]
 8008d7e:	4b1b      	ldr	r3, [pc, #108]	; (8008dec <tcp_timewait_input+0xec>)
 8008d80:	4602      	mov	r2, r0
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f003 fac8 	bl	800c318 <tcp_rst>
      return;
 8008d88:	e01b      	b.n	8008dc2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8008d8a:	4b0f      	ldr	r3, [pc, #60]	; (8008dc8 <tcp_timewait_input+0xc8>)
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	f003 0301 	and.w	r3, r3, #1
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d003      	beq.n	8008d9e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8008d96:	4b16      	ldr	r3, [pc, #88]	; (8008df0 <tcp_timewait_input+0xf0>)
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8008d9e:	4b10      	ldr	r3, [pc, #64]	; (8008de0 <tcp_timewait_input+0xe0>)
 8008da0:	881b      	ldrh	r3, [r3, #0]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d00c      	beq.n	8008dc0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	8b5b      	ldrh	r3, [r3, #26]
 8008daa:	f043 0302 	orr.w	r3, r3, #2
 8008dae:	b29a      	uxth	r2, r3
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f002 fcfb 	bl	800b7b0 <tcp_output>
  }
  return;
 8008dba:	e001      	b.n	8008dc0 <tcp_timewait_input+0xc0>
    return;
 8008dbc:	bf00      	nop
 8008dbe:	e000      	b.n	8008dc2 <tcp_timewait_input+0xc2>
  return;
 8008dc0:	bf00      	nop
}
 8008dc2:	3708      	adds	r7, #8
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	20000558 	.word	0x20000558
 8008dcc:	08011bf8 	.word	0x08011bf8
 8008dd0:	08011e10 	.word	0x08011e10
 8008dd4:	08011c44 	.word	0x08011c44
 8008dd8:	2000054c 	.word	0x2000054c
 8008ddc:	20000550 	.word	0x20000550
 8008de0:	20000556 	.word	0x20000556
 8008de4:	2000053c 	.word	0x2000053c
 8008de8:	200037b8 	.word	0x200037b8
 8008dec:	200037bc 	.word	0x200037bc
 8008df0:	20008eb0 	.word	0x20008eb0

08008df4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8008df4:	b590      	push	{r4, r7, lr}
 8008df6:	b08d      	sub	sp, #52	; 0x34
 8008df8:	af04      	add	r7, sp, #16
 8008dfa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8008e00:	2300      	movs	r3, #0
 8008e02:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d106      	bne.n	8008e18 <tcp_process+0x24>
 8008e0a:	4ba5      	ldr	r3, [pc, #660]	; (80090a0 <tcp_process+0x2ac>)
 8008e0c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008e10:	49a4      	ldr	r1, [pc, #656]	; (80090a4 <tcp_process+0x2b0>)
 8008e12:	48a5      	ldr	r0, [pc, #660]	; (80090a8 <tcp_process+0x2b4>)
 8008e14:	f006 fa68 	bl	800f2e8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8008e18:	4ba4      	ldr	r3, [pc, #656]	; (80090ac <tcp_process+0x2b8>)
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	f003 0304 	and.w	r3, r3, #4
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d04e      	beq.n	8008ec2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	7d1b      	ldrb	r3, [r3, #20]
 8008e28:	2b02      	cmp	r3, #2
 8008e2a:	d108      	bne.n	8008e3e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008e30:	4b9f      	ldr	r3, [pc, #636]	; (80090b0 <tcp_process+0x2bc>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d123      	bne.n	8008e80 <tcp_process+0x8c>
        acceptable = 1;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	76fb      	strb	r3, [r7, #27]
 8008e3c:	e020      	b.n	8008e80 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e42:	4b9c      	ldr	r3, [pc, #624]	; (80090b4 <tcp_process+0x2c0>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d102      	bne.n	8008e50 <tcp_process+0x5c>
        acceptable = 1;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	76fb      	strb	r3, [r7, #27]
 8008e4e:	e017      	b.n	8008e80 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008e50:	4b98      	ldr	r3, [pc, #608]	; (80090b4 <tcp_process+0x2c0>)
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e58:	1ad3      	subs	r3, r2, r3
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	db10      	blt.n	8008e80 <tcp_process+0x8c>
 8008e5e:	4b95      	ldr	r3, [pc, #596]	; (80090b4 <tcp_process+0x2c0>)
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e66:	6879      	ldr	r1, [r7, #4]
 8008e68:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008e6a:	440b      	add	r3, r1
 8008e6c:	1ad3      	subs	r3, r2, r3
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	dc06      	bgt.n	8008e80 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	8b5b      	ldrh	r3, [r3, #26]
 8008e76:	f043 0302 	orr.w	r3, r3, #2
 8008e7a:	b29a      	uxth	r2, r3
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8008e80:	7efb      	ldrb	r3, [r7, #27]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d01b      	beq.n	8008ebe <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	7d1b      	ldrb	r3, [r3, #20]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d106      	bne.n	8008e9c <tcp_process+0xa8>
 8008e8e:	4b84      	ldr	r3, [pc, #528]	; (80090a0 <tcp_process+0x2ac>)
 8008e90:	f44f 724e 	mov.w	r2, #824	; 0x338
 8008e94:	4988      	ldr	r1, [pc, #544]	; (80090b8 <tcp_process+0x2c4>)
 8008e96:	4884      	ldr	r0, [pc, #528]	; (80090a8 <tcp_process+0x2b4>)
 8008e98:	f006 fa26 	bl	800f2e8 <iprintf>
      recv_flags |= TF_RESET;
 8008e9c:	4b87      	ldr	r3, [pc, #540]	; (80090bc <tcp_process+0x2c8>)
 8008e9e:	781b      	ldrb	r3, [r3, #0]
 8008ea0:	f043 0308 	orr.w	r3, r3, #8
 8008ea4:	b2da      	uxtb	r2, r3
 8008ea6:	4b85      	ldr	r3, [pc, #532]	; (80090bc <tcp_process+0x2c8>)
 8008ea8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	8b5b      	ldrh	r3, [r3, #26]
 8008eae:	f023 0301 	bic.w	r3, r3, #1
 8008eb2:	b29a      	uxth	r2, r3
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8008eb8:	f06f 030d 	mvn.w	r3, #13
 8008ebc:	e37a      	b.n	80095b4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	e378      	b.n	80095b4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008ec2:	4b7a      	ldr	r3, [pc, #488]	; (80090ac <tcp_process+0x2b8>)
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	f003 0302 	and.w	r3, r3, #2
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d010      	beq.n	8008ef0 <tcp_process+0xfc>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	7d1b      	ldrb	r3, [r3, #20]
 8008ed2:	2b02      	cmp	r3, #2
 8008ed4:	d00c      	beq.n	8008ef0 <tcp_process+0xfc>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	7d1b      	ldrb	r3, [r3, #20]
 8008eda:	2b03      	cmp	r3, #3
 8008edc:	d008      	beq.n	8008ef0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	8b5b      	ldrh	r3, [r3, #26]
 8008ee2:	f043 0302 	orr.w	r3, r3, #2
 8008ee6:	b29a      	uxth	r2, r3
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8008eec:	2300      	movs	r3, #0
 8008eee:	e361      	b.n	80095b4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	8b5b      	ldrh	r3, [r3, #26]
 8008ef4:	f003 0310 	and.w	r3, r3, #16
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d103      	bne.n	8008f04 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8008efc:	4b70      	ldr	r3, [pc, #448]	; (80090c0 <tcp_process+0x2cc>)
 8008efe:	681a      	ldr	r2, [r3, #0]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2200      	movs	r2, #0
 8008f08:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f001 fc2d 	bl	800a774 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	7d1b      	ldrb	r3, [r3, #20]
 8008f1e:	3b02      	subs	r3, #2
 8008f20:	2b07      	cmp	r3, #7
 8008f22:	f200 8337 	bhi.w	8009594 <tcp_process+0x7a0>
 8008f26:	a201      	add	r2, pc, #4	; (adr r2, 8008f2c <tcp_process+0x138>)
 8008f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f2c:	08008f4d 	.word	0x08008f4d
 8008f30:	0800917d 	.word	0x0800917d
 8008f34:	080092f5 	.word	0x080092f5
 8008f38:	0800931f 	.word	0x0800931f
 8008f3c:	08009443 	.word	0x08009443
 8008f40:	080092f5 	.word	0x080092f5
 8008f44:	080094cf 	.word	0x080094cf
 8008f48:	0800955f 	.word	0x0800955f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008f4c:	4b57      	ldr	r3, [pc, #348]	; (80090ac <tcp_process+0x2b8>)
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	f003 0310 	and.w	r3, r3, #16
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	f000 80e4 	beq.w	8009122 <tcp_process+0x32e>
 8008f5a:	4b54      	ldr	r3, [pc, #336]	; (80090ac <tcp_process+0x2b8>)
 8008f5c:	781b      	ldrb	r3, [r3, #0]
 8008f5e:	f003 0302 	and.w	r3, r3, #2
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	f000 80dd 	beq.w	8009122 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f6c:	1c5a      	adds	r2, r3, #1
 8008f6e:	4b50      	ldr	r3, [pc, #320]	; (80090b0 <tcp_process+0x2bc>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	429a      	cmp	r2, r3
 8008f74:	f040 80d5 	bne.w	8009122 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8008f78:	4b4e      	ldr	r3, [pc, #312]	; (80090b4 <tcp_process+0x2c0>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	1c5a      	adds	r2, r3, #1
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8008f8a:	4b49      	ldr	r3, [pc, #292]	; (80090b0 <tcp_process+0x2bc>)
 8008f8c:	681a      	ldr	r2, [r3, #0]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8008f92:	4b4c      	ldr	r3, [pc, #304]	; (80090c4 <tcp_process+0x2d0>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	89db      	ldrh	r3, [r3, #14]
 8008f98:	b29a      	uxth	r2, r3
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008fac:	4b41      	ldr	r3, [pc, #260]	; (80090b4 <tcp_process+0x2c0>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	1e5a      	subs	r2, r3, #1
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2204      	movs	r2, #4
 8008fba:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	3304      	adds	r3, #4
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f004 ff47 	bl	800de58 <ip4_route>
 8008fca:	4601      	mov	r1, r0
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	3304      	adds	r3, #4
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	4620      	mov	r0, r4
 8008fd4:	f7ff f88e 	bl	80080f4 <tcp_eff_send_mss_netif>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	461a      	mov	r2, r3
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008fe4:	009a      	lsls	r2, r3, #2
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008fea:	005b      	lsls	r3, r3, #1
 8008fec:	f241 111c 	movw	r1, #4380	; 0x111c
 8008ff0:	428b      	cmp	r3, r1
 8008ff2:	bf38      	it	cc
 8008ff4:	460b      	movcc	r3, r1
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d204      	bcs.n	8009004 <tcp_process+0x210>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	b29b      	uxth	r3, r3
 8009002:	e00d      	b.n	8009020 <tcp_process+0x22c>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009008:	005b      	lsls	r3, r3, #1
 800900a:	f241 121c 	movw	r2, #4380	; 0x111c
 800900e:	4293      	cmp	r3, r2
 8009010:	d904      	bls.n	800901c <tcp_process+0x228>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009016:	005b      	lsls	r3, r3, #1
 8009018:	b29b      	uxth	r3, r3
 800901a:	e001      	b.n	8009020 <tcp_process+0x22c>
 800901c:	f241 131c 	movw	r3, #4380	; 0x111c
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800902c:	2b00      	cmp	r3, #0
 800902e:	d106      	bne.n	800903e <tcp_process+0x24a>
 8009030:	4b1b      	ldr	r3, [pc, #108]	; (80090a0 <tcp_process+0x2ac>)
 8009032:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8009036:	4924      	ldr	r1, [pc, #144]	; (80090c8 <tcp_process+0x2d4>)
 8009038:	481b      	ldr	r0, [pc, #108]	; (80090a8 <tcp_process+0x2b4>)
 800903a:	f006 f955 	bl	800f2e8 <iprintf>
        --pcb->snd_queuelen;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009044:	3b01      	subs	r3, #1
 8009046:	b29a      	uxth	r2, r3
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009052:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d111      	bne.n	800907e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800905e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8009060:	69fb      	ldr	r3, [r7, #28]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d106      	bne.n	8009074 <tcp_process+0x280>
 8009066:	4b0e      	ldr	r3, [pc, #56]	; (80090a0 <tcp_process+0x2ac>)
 8009068:	f44f 725d 	mov.w	r2, #884	; 0x374
 800906c:	4917      	ldr	r1, [pc, #92]	; (80090cc <tcp_process+0x2d8>)
 800906e:	480e      	ldr	r0, [pc, #56]	; (80090a8 <tcp_process+0x2b4>)
 8009070:	f006 f93a 	bl	800f2e8 <iprintf>
          pcb->unsent = rseg->next;
 8009074:	69fb      	ldr	r3, [r7, #28]
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	66da      	str	r2, [r3, #108]	; 0x6c
 800907c:	e003      	b.n	8009086 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800907e:	69fb      	ldr	r3, [r7, #28]
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8009086:	69f8      	ldr	r0, [r7, #28]
 8009088:	f7fe fc51 	bl	800792e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009090:	2b00      	cmp	r3, #0
 8009092:	d11d      	bne.n	80090d0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800909a:	861a      	strh	r2, [r3, #48]	; 0x30
 800909c:	e01f      	b.n	80090de <tcp_process+0x2ea>
 800909e:	bf00      	nop
 80090a0:	08011bf8 	.word	0x08011bf8
 80090a4:	08011e30 	.word	0x08011e30
 80090a8:	08011c44 	.word	0x08011c44
 80090ac:	20000558 	.word	0x20000558
 80090b0:	20000550 	.word	0x20000550
 80090b4:	2000054c 	.word	0x2000054c
 80090b8:	08011e4c 	.word	0x08011e4c
 80090bc:	20000559 	.word	0x20000559
 80090c0:	20008eb0 	.word	0x20008eb0
 80090c4:	2000053c 	.word	0x2000053c
 80090c8:	08011e6c 	.word	0x08011e6c
 80090cc:	08011e84 	.word	0x08011e84
        } else {
          pcb->rtime = 0;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2200      	movs	r2, #0
 80090da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d00a      	beq.n	80090fe <tcp_process+0x30a>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	6910      	ldr	r0, [r2, #16]
 80090f2:	2200      	movs	r2, #0
 80090f4:	6879      	ldr	r1, [r7, #4]
 80090f6:	4798      	blx	r3
 80090f8:	4603      	mov	r3, r0
 80090fa:	76bb      	strb	r3, [r7, #26]
 80090fc:	e001      	b.n	8009102 <tcp_process+0x30e>
 80090fe:	2300      	movs	r3, #0
 8009100:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8009102:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009106:	f113 0f0d 	cmn.w	r3, #13
 800910a:	d102      	bne.n	8009112 <tcp_process+0x31e>
          return ERR_ABRT;
 800910c:	f06f 030c 	mvn.w	r3, #12
 8009110:	e250      	b.n	80095b4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	8b5b      	ldrh	r3, [r3, #26]
 8009116:	f043 0302 	orr.w	r3, r3, #2
 800911a:	b29a      	uxth	r2, r3
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8009120:	e23a      	b.n	8009598 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8009122:	4b9d      	ldr	r3, [pc, #628]	; (8009398 <tcp_process+0x5a4>)
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	f003 0310 	and.w	r3, r3, #16
 800912a:	2b00      	cmp	r3, #0
 800912c:	f000 8234 	beq.w	8009598 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009130:	4b9a      	ldr	r3, [pc, #616]	; (800939c <tcp_process+0x5a8>)
 8009132:	6819      	ldr	r1, [r3, #0]
 8009134:	4b9a      	ldr	r3, [pc, #616]	; (80093a0 <tcp_process+0x5ac>)
 8009136:	881b      	ldrh	r3, [r3, #0]
 8009138:	461a      	mov	r2, r3
 800913a:	4b9a      	ldr	r3, [pc, #616]	; (80093a4 <tcp_process+0x5b0>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009140:	4b99      	ldr	r3, [pc, #612]	; (80093a8 <tcp_process+0x5b4>)
 8009142:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009144:	885b      	ldrh	r3, [r3, #2]
 8009146:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009148:	4a97      	ldr	r2, [pc, #604]	; (80093a8 <tcp_process+0x5b4>)
 800914a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800914c:	8812      	ldrh	r2, [r2, #0]
 800914e:	b292      	uxth	r2, r2
 8009150:	9202      	str	r2, [sp, #8]
 8009152:	9301      	str	r3, [sp, #4]
 8009154:	4b95      	ldr	r3, [pc, #596]	; (80093ac <tcp_process+0x5b8>)
 8009156:	9300      	str	r3, [sp, #0]
 8009158:	4b95      	ldr	r3, [pc, #596]	; (80093b0 <tcp_process+0x5bc>)
 800915a:	4602      	mov	r2, r0
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f003 f8db 	bl	800c318 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009168:	2b05      	cmp	r3, #5
 800916a:	f200 8215 	bhi.w	8009598 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2200      	movs	r2, #0
 8009172:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f002 fea5 	bl	800bec4 <tcp_rexmit_rto>
      break;
 800917a:	e20d      	b.n	8009598 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800917c:	4b86      	ldr	r3, [pc, #536]	; (8009398 <tcp_process+0x5a4>)
 800917e:	781b      	ldrb	r3, [r3, #0]
 8009180:	f003 0310 	and.w	r3, r3, #16
 8009184:	2b00      	cmp	r3, #0
 8009186:	f000 80a1 	beq.w	80092cc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800918a:	4b84      	ldr	r3, [pc, #528]	; (800939c <tcp_process+0x5a8>)
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009192:	1ad3      	subs	r3, r2, r3
 8009194:	3b01      	subs	r3, #1
 8009196:	2b00      	cmp	r3, #0
 8009198:	db7e      	blt.n	8009298 <tcp_process+0x4a4>
 800919a:	4b80      	ldr	r3, [pc, #512]	; (800939c <tcp_process+0x5a8>)
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091a2:	1ad3      	subs	r3, r2, r3
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	dc77      	bgt.n	8009298 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2204      	movs	r2, #4
 80091ac:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d102      	bne.n	80091bc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80091b6:	23fa      	movs	r3, #250	; 0xfa
 80091b8:	76bb      	strb	r3, [r7, #26]
 80091ba:	e01d      	b.n	80091f8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091c0:	699b      	ldr	r3, [r3, #24]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d106      	bne.n	80091d4 <tcp_process+0x3e0>
 80091c6:	4b7b      	ldr	r3, [pc, #492]	; (80093b4 <tcp_process+0x5c0>)
 80091c8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80091cc:	497a      	ldr	r1, [pc, #488]	; (80093b8 <tcp_process+0x5c4>)
 80091ce:	487b      	ldr	r0, [pc, #492]	; (80093bc <tcp_process+0x5c8>)
 80091d0:	f006 f88a 	bl	800f2e8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091d8:	699b      	ldr	r3, [r3, #24]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d00a      	beq.n	80091f4 <tcp_process+0x400>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091e2:	699b      	ldr	r3, [r3, #24]
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	6910      	ldr	r0, [r2, #16]
 80091e8:	2200      	movs	r2, #0
 80091ea:	6879      	ldr	r1, [r7, #4]
 80091ec:	4798      	blx	r3
 80091ee:	4603      	mov	r3, r0
 80091f0:	76bb      	strb	r3, [r7, #26]
 80091f2:	e001      	b.n	80091f8 <tcp_process+0x404>
 80091f4:	23f0      	movs	r3, #240	; 0xf0
 80091f6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80091f8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d00a      	beq.n	8009216 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8009200:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009204:	f113 0f0d 	cmn.w	r3, #13
 8009208:	d002      	beq.n	8009210 <tcp_process+0x41c>
              tcp_abort(pcb);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f7fd fcea 	bl	8006be4 <tcp_abort>
            }
            return ERR_ABRT;
 8009210:	f06f 030c 	mvn.w	r3, #12
 8009214:	e1ce      	b.n	80095b4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 fae0 	bl	80097dc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800921c:	4b68      	ldr	r3, [pc, #416]	; (80093c0 <tcp_process+0x5cc>)
 800921e:	881b      	ldrh	r3, [r3, #0]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d005      	beq.n	8009230 <tcp_process+0x43c>
            recv_acked--;
 8009224:	4b66      	ldr	r3, [pc, #408]	; (80093c0 <tcp_process+0x5cc>)
 8009226:	881b      	ldrh	r3, [r3, #0]
 8009228:	3b01      	subs	r3, #1
 800922a:	b29a      	uxth	r2, r3
 800922c:	4b64      	ldr	r3, [pc, #400]	; (80093c0 <tcp_process+0x5cc>)
 800922e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009234:	009a      	lsls	r2, r3, #2
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800923a:	005b      	lsls	r3, r3, #1
 800923c:	f241 111c 	movw	r1, #4380	; 0x111c
 8009240:	428b      	cmp	r3, r1
 8009242:	bf38      	it	cc
 8009244:	460b      	movcc	r3, r1
 8009246:	429a      	cmp	r2, r3
 8009248:	d204      	bcs.n	8009254 <tcp_process+0x460>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800924e:	009b      	lsls	r3, r3, #2
 8009250:	b29b      	uxth	r3, r3
 8009252:	e00d      	b.n	8009270 <tcp_process+0x47c>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009258:	005b      	lsls	r3, r3, #1
 800925a:	f241 121c 	movw	r2, #4380	; 0x111c
 800925e:	4293      	cmp	r3, r2
 8009260:	d904      	bls.n	800926c <tcp_process+0x478>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009266:	005b      	lsls	r3, r3, #1
 8009268:	b29b      	uxth	r3, r3
 800926a:	e001      	b.n	8009270 <tcp_process+0x47c>
 800926c:	f241 131c 	movw	r3, #4380	; 0x111c
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8009276:	4b53      	ldr	r3, [pc, #332]	; (80093c4 <tcp_process+0x5d0>)
 8009278:	781b      	ldrb	r3, [r3, #0]
 800927a:	f003 0320 	and.w	r3, r3, #32
 800927e:	2b00      	cmp	r3, #0
 8009280:	d037      	beq.n	80092f2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	8b5b      	ldrh	r3, [r3, #26]
 8009286:	f043 0302 	orr.w	r3, r3, #2
 800928a:	b29a      	uxth	r2, r3
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2207      	movs	r2, #7
 8009294:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8009296:	e02c      	b.n	80092f2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009298:	4b40      	ldr	r3, [pc, #256]	; (800939c <tcp_process+0x5a8>)
 800929a:	6819      	ldr	r1, [r3, #0]
 800929c:	4b40      	ldr	r3, [pc, #256]	; (80093a0 <tcp_process+0x5ac>)
 800929e:	881b      	ldrh	r3, [r3, #0]
 80092a0:	461a      	mov	r2, r3
 80092a2:	4b40      	ldr	r3, [pc, #256]	; (80093a4 <tcp_process+0x5b0>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80092a8:	4b3f      	ldr	r3, [pc, #252]	; (80093a8 <tcp_process+0x5b4>)
 80092aa:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80092ac:	885b      	ldrh	r3, [r3, #2]
 80092ae:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80092b0:	4a3d      	ldr	r2, [pc, #244]	; (80093a8 <tcp_process+0x5b4>)
 80092b2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80092b4:	8812      	ldrh	r2, [r2, #0]
 80092b6:	b292      	uxth	r2, r2
 80092b8:	9202      	str	r2, [sp, #8]
 80092ba:	9301      	str	r3, [sp, #4]
 80092bc:	4b3b      	ldr	r3, [pc, #236]	; (80093ac <tcp_process+0x5b8>)
 80092be:	9300      	str	r3, [sp, #0]
 80092c0:	4b3b      	ldr	r3, [pc, #236]	; (80093b0 <tcp_process+0x5bc>)
 80092c2:	4602      	mov	r2, r0
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f003 f827 	bl	800c318 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80092ca:	e167      	b.n	800959c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80092cc:	4b32      	ldr	r3, [pc, #200]	; (8009398 <tcp_process+0x5a4>)
 80092ce:	781b      	ldrb	r3, [r3, #0]
 80092d0:	f003 0302 	and.w	r3, r3, #2
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	f000 8161 	beq.w	800959c <tcp_process+0x7a8>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092de:	1e5a      	subs	r2, r3, #1
 80092e0:	4b30      	ldr	r3, [pc, #192]	; (80093a4 <tcp_process+0x5b0>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	429a      	cmp	r2, r3
 80092e6:	f040 8159 	bne.w	800959c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f002 fe0c 	bl	800bf08 <tcp_rexmit>
      break;
 80092f0:	e154      	b.n	800959c <tcp_process+0x7a8>
 80092f2:	e153      	b.n	800959c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f000 fa71 	bl	80097dc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80092fa:	4b32      	ldr	r3, [pc, #200]	; (80093c4 <tcp_process+0x5d0>)
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	f003 0320 	and.w	r3, r3, #32
 8009302:	2b00      	cmp	r3, #0
 8009304:	f000 814c 	beq.w	80095a0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	8b5b      	ldrh	r3, [r3, #26]
 800930c:	f043 0302 	orr.w	r3, r3, #2
 8009310:	b29a      	uxth	r2, r3
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2207      	movs	r2, #7
 800931a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800931c:	e140      	b.n	80095a0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 fa5c 	bl	80097dc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009324:	4b27      	ldr	r3, [pc, #156]	; (80093c4 <tcp_process+0x5d0>)
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	f003 0320 	and.w	r3, r3, #32
 800932c:	2b00      	cmp	r3, #0
 800932e:	d071      	beq.n	8009414 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009330:	4b19      	ldr	r3, [pc, #100]	; (8009398 <tcp_process+0x5a4>)
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	f003 0310 	and.w	r3, r3, #16
 8009338:	2b00      	cmp	r3, #0
 800933a:	d060      	beq.n	80093fe <tcp_process+0x60a>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009340:	4b16      	ldr	r3, [pc, #88]	; (800939c <tcp_process+0x5a8>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	429a      	cmp	r2, r3
 8009346:	d15a      	bne.n	80093fe <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800934c:	2b00      	cmp	r3, #0
 800934e:	d156      	bne.n	80093fe <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	8b5b      	ldrh	r3, [r3, #26]
 8009354:	f043 0302 	orr.w	r3, r3, #2
 8009358:	b29a      	uxth	r2, r3
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f7fe fdbe 	bl	8007ee0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009364:	4b18      	ldr	r3, [pc, #96]	; (80093c8 <tcp_process+0x5d4>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	429a      	cmp	r2, r3
 800936c:	d105      	bne.n	800937a <tcp_process+0x586>
 800936e:	4b16      	ldr	r3, [pc, #88]	; (80093c8 <tcp_process+0x5d4>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	68db      	ldr	r3, [r3, #12]
 8009374:	4a14      	ldr	r2, [pc, #80]	; (80093c8 <tcp_process+0x5d4>)
 8009376:	6013      	str	r3, [r2, #0]
 8009378:	e02e      	b.n	80093d8 <tcp_process+0x5e4>
 800937a:	4b13      	ldr	r3, [pc, #76]	; (80093c8 <tcp_process+0x5d4>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	617b      	str	r3, [r7, #20]
 8009380:	e027      	b.n	80093d2 <tcp_process+0x5de>
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	68db      	ldr	r3, [r3, #12]
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	429a      	cmp	r2, r3
 800938a:	d11f      	bne.n	80093cc <tcp_process+0x5d8>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	68da      	ldr	r2, [r3, #12]
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	60da      	str	r2, [r3, #12]
 8009394:	e020      	b.n	80093d8 <tcp_process+0x5e4>
 8009396:	bf00      	nop
 8009398:	20000558 	.word	0x20000558
 800939c:	20000550 	.word	0x20000550
 80093a0:	20000556 	.word	0x20000556
 80093a4:	2000054c 	.word	0x2000054c
 80093a8:	2000053c 	.word	0x2000053c
 80093ac:	200037b8 	.word	0x200037b8
 80093b0:	200037bc 	.word	0x200037bc
 80093b4:	08011bf8 	.word	0x08011bf8
 80093b8:	08011e98 	.word	0x08011e98
 80093bc:	08011c44 	.word	0x08011c44
 80093c0:	20000554 	.word	0x20000554
 80093c4:	20000559 	.word	0x20000559
 80093c8:	20008eac 	.word	0x20008eac
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	68db      	ldr	r3, [r3, #12]
 80093d0:	617b      	str	r3, [r7, #20]
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d1d4      	bne.n	8009382 <tcp_process+0x58e>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2200      	movs	r2, #0
 80093dc:	60da      	str	r2, [r3, #12]
 80093de:	4b77      	ldr	r3, [pc, #476]	; (80095bc <tcp_process+0x7c8>)
 80093e0:	2201      	movs	r2, #1
 80093e2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	220a      	movs	r2, #10
 80093e8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80093ea:	4b75      	ldr	r3, [pc, #468]	; (80095c0 <tcp_process+0x7cc>)
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	60da      	str	r2, [r3, #12]
 80093f2:	4a73      	ldr	r2, [pc, #460]	; (80095c0 <tcp_process+0x7cc>)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6013      	str	r3, [r2, #0]
 80093f8:	f003 f950 	bl	800c69c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80093fc:	e0d2      	b.n	80095a4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	8b5b      	ldrh	r3, [r3, #26]
 8009402:	f043 0302 	orr.w	r3, r3, #2
 8009406:	b29a      	uxth	r2, r3
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2208      	movs	r2, #8
 8009410:	751a      	strb	r2, [r3, #20]
      break;
 8009412:	e0c7      	b.n	80095a4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009414:	4b6b      	ldr	r3, [pc, #428]	; (80095c4 <tcp_process+0x7d0>)
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	f003 0310 	and.w	r3, r3, #16
 800941c:	2b00      	cmp	r3, #0
 800941e:	f000 80c1 	beq.w	80095a4 <tcp_process+0x7b0>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009426:	4b68      	ldr	r3, [pc, #416]	; (80095c8 <tcp_process+0x7d4>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	429a      	cmp	r2, r3
 800942c:	f040 80ba 	bne.w	80095a4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009434:	2b00      	cmp	r3, #0
 8009436:	f040 80b5 	bne.w	80095a4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2206      	movs	r2, #6
 800943e:	751a      	strb	r2, [r3, #20]
      break;
 8009440:	e0b0      	b.n	80095a4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 f9ca 	bl	80097dc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009448:	4b60      	ldr	r3, [pc, #384]	; (80095cc <tcp_process+0x7d8>)
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	f003 0320 	and.w	r3, r3, #32
 8009450:	2b00      	cmp	r3, #0
 8009452:	f000 80a9 	beq.w	80095a8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	8b5b      	ldrh	r3, [r3, #26]
 800945a:	f043 0302 	orr.w	r3, r3, #2
 800945e:	b29a      	uxth	r2, r3
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f7fe fd3b 	bl	8007ee0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800946a:	4b59      	ldr	r3, [pc, #356]	; (80095d0 <tcp_process+0x7dc>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	687a      	ldr	r2, [r7, #4]
 8009470:	429a      	cmp	r2, r3
 8009472:	d105      	bne.n	8009480 <tcp_process+0x68c>
 8009474:	4b56      	ldr	r3, [pc, #344]	; (80095d0 <tcp_process+0x7dc>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	4a55      	ldr	r2, [pc, #340]	; (80095d0 <tcp_process+0x7dc>)
 800947c:	6013      	str	r3, [r2, #0]
 800947e:	e013      	b.n	80094a8 <tcp_process+0x6b4>
 8009480:	4b53      	ldr	r3, [pc, #332]	; (80095d0 <tcp_process+0x7dc>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	613b      	str	r3, [r7, #16]
 8009486:	e00c      	b.n	80094a2 <tcp_process+0x6ae>
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	68db      	ldr	r3, [r3, #12]
 800948c:	687a      	ldr	r2, [r7, #4]
 800948e:	429a      	cmp	r2, r3
 8009490:	d104      	bne.n	800949c <tcp_process+0x6a8>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	68da      	ldr	r2, [r3, #12]
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	60da      	str	r2, [r3, #12]
 800949a:	e005      	b.n	80094a8 <tcp_process+0x6b4>
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	68db      	ldr	r3, [r3, #12]
 80094a0:	613b      	str	r3, [r7, #16]
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d1ef      	bne.n	8009488 <tcp_process+0x694>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2200      	movs	r2, #0
 80094ac:	60da      	str	r2, [r3, #12]
 80094ae:	4b43      	ldr	r3, [pc, #268]	; (80095bc <tcp_process+0x7c8>)
 80094b0:	2201      	movs	r2, #1
 80094b2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	220a      	movs	r2, #10
 80094b8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80094ba:	4b41      	ldr	r3, [pc, #260]	; (80095c0 <tcp_process+0x7cc>)
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	60da      	str	r2, [r3, #12]
 80094c2:	4a3f      	ldr	r2, [pc, #252]	; (80095c0 <tcp_process+0x7cc>)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6013      	str	r3, [r2, #0]
 80094c8:	f003 f8e8 	bl	800c69c <tcp_timer_needed>
      }
      break;
 80094cc:	e06c      	b.n	80095a8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 f984 	bl	80097dc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80094d4:	4b3b      	ldr	r3, [pc, #236]	; (80095c4 <tcp_process+0x7d0>)
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	f003 0310 	and.w	r3, r3, #16
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d065      	beq.n	80095ac <tcp_process+0x7b8>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80094e4:	4b38      	ldr	r3, [pc, #224]	; (80095c8 <tcp_process+0x7d4>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d15f      	bne.n	80095ac <tcp_process+0x7b8>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d15b      	bne.n	80095ac <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f7fe fcf3 	bl	8007ee0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80094fa:	4b35      	ldr	r3, [pc, #212]	; (80095d0 <tcp_process+0x7dc>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	429a      	cmp	r2, r3
 8009502:	d105      	bne.n	8009510 <tcp_process+0x71c>
 8009504:	4b32      	ldr	r3, [pc, #200]	; (80095d0 <tcp_process+0x7dc>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	68db      	ldr	r3, [r3, #12]
 800950a:	4a31      	ldr	r2, [pc, #196]	; (80095d0 <tcp_process+0x7dc>)
 800950c:	6013      	str	r3, [r2, #0]
 800950e:	e013      	b.n	8009538 <tcp_process+0x744>
 8009510:	4b2f      	ldr	r3, [pc, #188]	; (80095d0 <tcp_process+0x7dc>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	60fb      	str	r3, [r7, #12]
 8009516:	e00c      	b.n	8009532 <tcp_process+0x73e>
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	68db      	ldr	r3, [r3, #12]
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	429a      	cmp	r2, r3
 8009520:	d104      	bne.n	800952c <tcp_process+0x738>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	68da      	ldr	r2, [r3, #12]
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	60da      	str	r2, [r3, #12]
 800952a:	e005      	b.n	8009538 <tcp_process+0x744>
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	68db      	ldr	r3, [r3, #12]
 8009530:	60fb      	str	r3, [r7, #12]
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d1ef      	bne.n	8009518 <tcp_process+0x724>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	60da      	str	r2, [r3, #12]
 800953e:	4b1f      	ldr	r3, [pc, #124]	; (80095bc <tcp_process+0x7c8>)
 8009540:	2201      	movs	r2, #1
 8009542:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	220a      	movs	r2, #10
 8009548:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800954a:	4b1d      	ldr	r3, [pc, #116]	; (80095c0 <tcp_process+0x7cc>)
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	60da      	str	r2, [r3, #12]
 8009552:	4a1b      	ldr	r2, [pc, #108]	; (80095c0 <tcp_process+0x7cc>)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6013      	str	r3, [r2, #0]
 8009558:	f003 f8a0 	bl	800c69c <tcp_timer_needed>
      }
      break;
 800955c:	e026      	b.n	80095ac <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 f93c 	bl	80097dc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009564:	4b17      	ldr	r3, [pc, #92]	; (80095c4 <tcp_process+0x7d0>)
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	f003 0310 	and.w	r3, r3, #16
 800956c:	2b00      	cmp	r3, #0
 800956e:	d01f      	beq.n	80095b0 <tcp_process+0x7bc>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009574:	4b14      	ldr	r3, [pc, #80]	; (80095c8 <tcp_process+0x7d4>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	429a      	cmp	r2, r3
 800957a:	d119      	bne.n	80095b0 <tcp_process+0x7bc>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009580:	2b00      	cmp	r3, #0
 8009582:	d115      	bne.n	80095b0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8009584:	4b11      	ldr	r3, [pc, #68]	; (80095cc <tcp_process+0x7d8>)
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	f043 0310 	orr.w	r3, r3, #16
 800958c:	b2da      	uxtb	r2, r3
 800958e:	4b0f      	ldr	r3, [pc, #60]	; (80095cc <tcp_process+0x7d8>)
 8009590:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009592:	e00d      	b.n	80095b0 <tcp_process+0x7bc>
    default:
      break;
 8009594:	bf00      	nop
 8009596:	e00c      	b.n	80095b2 <tcp_process+0x7be>
      break;
 8009598:	bf00      	nop
 800959a:	e00a      	b.n	80095b2 <tcp_process+0x7be>
      break;
 800959c:	bf00      	nop
 800959e:	e008      	b.n	80095b2 <tcp_process+0x7be>
      break;
 80095a0:	bf00      	nop
 80095a2:	e006      	b.n	80095b2 <tcp_process+0x7be>
      break;
 80095a4:	bf00      	nop
 80095a6:	e004      	b.n	80095b2 <tcp_process+0x7be>
      break;
 80095a8:	bf00      	nop
 80095aa:	e002      	b.n	80095b2 <tcp_process+0x7be>
      break;
 80095ac:	bf00      	nop
 80095ae:	e000      	b.n	80095b2 <tcp_process+0x7be>
      break;
 80095b0:	bf00      	nop
  }
  return ERR_OK;
 80095b2:	2300      	movs	r3, #0
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3724      	adds	r7, #36	; 0x24
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd90      	pop	{r4, r7, pc}
 80095bc:	20008ea8 	.word	0x20008ea8
 80095c0:	20008ebc 	.word	0x20008ebc
 80095c4:	20000558 	.word	0x20000558
 80095c8:	20000550 	.word	0x20000550
 80095cc:	20000559 	.word	0x20000559
 80095d0:	20008eac 	.word	0x20008eac

080095d4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80095d4:	b590      	push	{r4, r7, lr}
 80095d6:	b085      	sub	sp, #20
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d106      	bne.n	80095f2 <tcp_oos_insert_segment+0x1e>
 80095e4:	4b3b      	ldr	r3, [pc, #236]	; (80096d4 <tcp_oos_insert_segment+0x100>)
 80095e6:	f240 421f 	movw	r2, #1055	; 0x41f
 80095ea:	493b      	ldr	r1, [pc, #236]	; (80096d8 <tcp_oos_insert_segment+0x104>)
 80095ec:	483b      	ldr	r0, [pc, #236]	; (80096dc <tcp_oos_insert_segment+0x108>)
 80095ee:	f005 fe7b 	bl	800f2e8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	68db      	ldr	r3, [r3, #12]
 80095f6:	899b      	ldrh	r3, [r3, #12]
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	4618      	mov	r0, r3
 80095fc:	f7fb fa4c 	bl	8004a98 <lwip_htons>
 8009600:	4603      	mov	r3, r0
 8009602:	b2db      	uxtb	r3, r3
 8009604:	f003 0301 	and.w	r3, r3, #1
 8009608:	2b00      	cmp	r3, #0
 800960a:	d028      	beq.n	800965e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800960c:	6838      	ldr	r0, [r7, #0]
 800960e:	f7fe f979 	bl	8007904 <tcp_segs_free>
    next = NULL;
 8009612:	2300      	movs	r3, #0
 8009614:	603b      	str	r3, [r7, #0]
 8009616:	e056      	b.n	80096c6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	899b      	ldrh	r3, [r3, #12]
 800961e:	b29b      	uxth	r3, r3
 8009620:	4618      	mov	r0, r3
 8009622:	f7fb fa39 	bl	8004a98 <lwip_htons>
 8009626:	4603      	mov	r3, r0
 8009628:	b2db      	uxtb	r3, r3
 800962a:	f003 0301 	and.w	r3, r3, #1
 800962e:	2b00      	cmp	r3, #0
 8009630:	d00d      	beq.n	800964e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	68db      	ldr	r3, [r3, #12]
 8009636:	899b      	ldrh	r3, [r3, #12]
 8009638:	b29c      	uxth	r4, r3
 800963a:	2001      	movs	r0, #1
 800963c:	f7fb fa2c 	bl	8004a98 <lwip_htons>
 8009640:	4603      	mov	r3, r0
 8009642:	461a      	mov	r2, r3
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	4322      	orrs	r2, r4
 800964a:	b292      	uxth	r2, r2
 800964c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009658:	68f8      	ldr	r0, [r7, #12]
 800965a:	f7fe f968 	bl	800792e <tcp_seg_free>
    while (next &&
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d00e      	beq.n	8009682 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	891b      	ldrh	r3, [r3, #8]
 8009668:	461a      	mov	r2, r3
 800966a:	4b1d      	ldr	r3, [pc, #116]	; (80096e0 <tcp_oos_insert_segment+0x10c>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	441a      	add	r2, r3
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	6839      	ldr	r1, [r7, #0]
 8009678:	8909      	ldrh	r1, [r1, #8]
 800967a:	440b      	add	r3, r1
 800967c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800967e:	2b00      	cmp	r3, #0
 8009680:	daca      	bge.n	8009618 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d01e      	beq.n	80096c6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	891b      	ldrh	r3, [r3, #8]
 800968c:	461a      	mov	r2, r3
 800968e:	4b14      	ldr	r3, [pc, #80]	; (80096e0 <tcp_oos_insert_segment+0x10c>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	441a      	add	r2, r3
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	68db      	ldr	r3, [r3, #12]
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800969c:	2b00      	cmp	r3, #0
 800969e:	dd12      	ble.n	80096c6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	b29a      	uxth	r2, r3
 80096a8:	4b0d      	ldr	r3, [pc, #52]	; (80096e0 <tcp_oos_insert_segment+0x10c>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	1ad3      	subs	r3, r2, r3
 80096b0:	b29a      	uxth	r2, r3
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	685a      	ldr	r2, [r3, #4]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	891b      	ldrh	r3, [r3, #8]
 80096be:	4619      	mov	r1, r3
 80096c0:	4610      	mov	r0, r2
 80096c2:	f7fc fb81 	bl	8005dc8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	683a      	ldr	r2, [r7, #0]
 80096ca:	601a      	str	r2, [r3, #0]
}
 80096cc:	bf00      	nop
 80096ce:	3714      	adds	r7, #20
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd90      	pop	{r4, r7, pc}
 80096d4:	08011bf8 	.word	0x08011bf8
 80096d8:	08011eb8 	.word	0x08011eb8
 80096dc:	08011c44 	.word	0x08011c44
 80096e0:	2000054c 	.word	0x2000054c

080096e4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80096e4:	b5b0      	push	{r4, r5, r7, lr}
 80096e6:	b086      	sub	sp, #24
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	60f8      	str	r0, [r7, #12]
 80096ec:	60b9      	str	r1, [r7, #8]
 80096ee:	607a      	str	r2, [r7, #4]
 80096f0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80096f2:	e03e      	b.n	8009772 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	4618      	mov	r0, r3
 8009704:	f7fc fd6e 	bl	80061e4 <pbuf_clen>
 8009708:	4603      	mov	r3, r0
 800970a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009712:	8a7a      	ldrh	r2, [r7, #18]
 8009714:	429a      	cmp	r2, r3
 8009716:	d906      	bls.n	8009726 <tcp_free_acked_segments+0x42>
 8009718:	4b2a      	ldr	r3, [pc, #168]	; (80097c4 <tcp_free_acked_segments+0xe0>)
 800971a:	f240 4257 	movw	r2, #1111	; 0x457
 800971e:	492a      	ldr	r1, [pc, #168]	; (80097c8 <tcp_free_acked_segments+0xe4>)
 8009720:	482a      	ldr	r0, [pc, #168]	; (80097cc <tcp_free_acked_segments+0xe8>)
 8009722:	f005 fde1 	bl	800f2e8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800972c:	8a7b      	ldrh	r3, [r7, #18]
 800972e:	1ad3      	subs	r3, r2, r3
 8009730:	b29a      	uxth	r2, r3
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	891a      	ldrh	r2, [r3, #8]
 800973c:	4b24      	ldr	r3, [pc, #144]	; (80097d0 <tcp_free_acked_segments+0xec>)
 800973e:	881b      	ldrh	r3, [r3, #0]
 8009740:	4413      	add	r3, r2
 8009742:	b29a      	uxth	r2, r3
 8009744:	4b22      	ldr	r3, [pc, #136]	; (80097d0 <tcp_free_acked_segments+0xec>)
 8009746:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8009748:	6978      	ldr	r0, [r7, #20]
 800974a:	f7fe f8f0 	bl	800792e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009754:	2b00      	cmp	r3, #0
 8009756:	d00c      	beq.n	8009772 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d109      	bne.n	8009772 <tcp_free_acked_segments+0x8e>
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d106      	bne.n	8009772 <tcp_free_acked_segments+0x8e>
 8009764:	4b17      	ldr	r3, [pc, #92]	; (80097c4 <tcp_free_acked_segments+0xe0>)
 8009766:	f240 4261 	movw	r2, #1121	; 0x461
 800976a:	491a      	ldr	r1, [pc, #104]	; (80097d4 <tcp_free_acked_segments+0xf0>)
 800976c:	4817      	ldr	r0, [pc, #92]	; (80097cc <tcp_free_acked_segments+0xe8>)
 800976e:	f005 fdbb 	bl	800f2e8 <iprintf>
  while (seg_list != NULL &&
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d020      	beq.n	80097ba <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	68db      	ldr	r3, [r3, #12]
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	4618      	mov	r0, r3
 8009780:	f7fb f99f 	bl	8004ac2 <lwip_htonl>
 8009784:	4604      	mov	r4, r0
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	891b      	ldrh	r3, [r3, #8]
 800978a:	461d      	mov	r5, r3
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	68db      	ldr	r3, [r3, #12]
 8009790:	899b      	ldrh	r3, [r3, #12]
 8009792:	b29b      	uxth	r3, r3
 8009794:	4618      	mov	r0, r3
 8009796:	f7fb f97f 	bl	8004a98 <lwip_htons>
 800979a:	4603      	mov	r3, r0
 800979c:	b2db      	uxtb	r3, r3
 800979e:	f003 0303 	and.w	r3, r3, #3
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d001      	beq.n	80097aa <tcp_free_acked_segments+0xc6>
 80097a6:	2301      	movs	r3, #1
 80097a8:	e000      	b.n	80097ac <tcp_free_acked_segments+0xc8>
 80097aa:	2300      	movs	r3, #0
 80097ac:	442b      	add	r3, r5
 80097ae:	18e2      	adds	r2, r4, r3
 80097b0:	4b09      	ldr	r3, [pc, #36]	; (80097d8 <tcp_free_acked_segments+0xf4>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	dd9c      	ble.n	80096f4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80097ba:	68bb      	ldr	r3, [r7, #8]
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3718      	adds	r7, #24
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bdb0      	pop	{r4, r5, r7, pc}
 80097c4:	08011bf8 	.word	0x08011bf8
 80097c8:	08011ee0 	.word	0x08011ee0
 80097cc:	08011c44 	.word	0x08011c44
 80097d0:	20000554 	.word	0x20000554
 80097d4:	08011f08 	.word	0x08011f08
 80097d8:	20000550 	.word	0x20000550

080097dc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80097dc:	b5b0      	push	{r4, r5, r7, lr}
 80097de:	b094      	sub	sp, #80	; 0x50
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80097e4:	2300      	movs	r3, #0
 80097e6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d106      	bne.n	80097fc <tcp_receive+0x20>
 80097ee:	4ba6      	ldr	r3, [pc, #664]	; (8009a88 <tcp_receive+0x2ac>)
 80097f0:	f240 427b 	movw	r2, #1147	; 0x47b
 80097f4:	49a5      	ldr	r1, [pc, #660]	; (8009a8c <tcp_receive+0x2b0>)
 80097f6:	48a6      	ldr	r0, [pc, #664]	; (8009a90 <tcp_receive+0x2b4>)
 80097f8:	f005 fd76 	bl	800f2e8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	7d1b      	ldrb	r3, [r3, #20]
 8009800:	2b03      	cmp	r3, #3
 8009802:	d806      	bhi.n	8009812 <tcp_receive+0x36>
 8009804:	4ba0      	ldr	r3, [pc, #640]	; (8009a88 <tcp_receive+0x2ac>)
 8009806:	f240 427c 	movw	r2, #1148	; 0x47c
 800980a:	49a2      	ldr	r1, [pc, #648]	; (8009a94 <tcp_receive+0x2b8>)
 800980c:	48a0      	ldr	r0, [pc, #640]	; (8009a90 <tcp_receive+0x2b4>)
 800980e:	f005 fd6b 	bl	800f2e8 <iprintf>

  if (flags & TCP_ACK) {
 8009812:	4ba1      	ldr	r3, [pc, #644]	; (8009a98 <tcp_receive+0x2bc>)
 8009814:	781b      	ldrb	r3, [r3, #0]
 8009816:	f003 0310 	and.w	r3, r3, #16
 800981a:	2b00      	cmp	r3, #0
 800981c:	f000 8263 	beq.w	8009ce6 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009826:	461a      	mov	r2, r3
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800982c:	4413      	add	r3, r2
 800982e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009834:	4b99      	ldr	r3, [pc, #612]	; (8009a9c <tcp_receive+0x2c0>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	1ad3      	subs	r3, r2, r3
 800983a:	2b00      	cmp	r3, #0
 800983c:	db1b      	blt.n	8009876 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009842:	4b96      	ldr	r3, [pc, #600]	; (8009a9c <tcp_receive+0x2c0>)
 8009844:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009846:	429a      	cmp	r2, r3
 8009848:	d106      	bne.n	8009858 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800984e:	4b94      	ldr	r3, [pc, #592]	; (8009aa0 <tcp_receive+0x2c4>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	1ad3      	subs	r3, r2, r3
 8009854:	2b00      	cmp	r3, #0
 8009856:	db0e      	blt.n	8009876 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800985c:	4b90      	ldr	r3, [pc, #576]	; (8009aa0 <tcp_receive+0x2c4>)
 800985e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009860:	429a      	cmp	r2, r3
 8009862:	d125      	bne.n	80098b0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009864:	4b8f      	ldr	r3, [pc, #572]	; (8009aa4 <tcp_receive+0x2c8>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	89db      	ldrh	r3, [r3, #14]
 800986a:	b29a      	uxth	r2, r3
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009872:	429a      	cmp	r2, r3
 8009874:	d91c      	bls.n	80098b0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009876:	4b8b      	ldr	r3, [pc, #556]	; (8009aa4 <tcp_receive+0x2c8>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	89db      	ldrh	r3, [r3, #14]
 800987c:	b29a      	uxth	r2, r3
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009890:	429a      	cmp	r2, r3
 8009892:	d205      	bcs.n	80098a0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80098a0:	4b7e      	ldr	r3, [pc, #504]	; (8009a9c <tcp_receive+0x2c0>)
 80098a2:	681a      	ldr	r2, [r3, #0]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80098a8:	4b7d      	ldr	r3, [pc, #500]	; (8009aa0 <tcp_receive+0x2c4>)
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80098b0:	4b7b      	ldr	r3, [pc, #492]	; (8009aa0 <tcp_receive+0x2c4>)
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098b8:	1ad3      	subs	r3, r2, r3
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	dc58      	bgt.n	8009970 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80098be:	4b7a      	ldr	r3, [pc, #488]	; (8009aa8 <tcp_receive+0x2cc>)
 80098c0:	881b      	ldrh	r3, [r3, #0]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d14b      	bne.n	800995e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098ca:	687a      	ldr	r2, [r7, #4]
 80098cc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80098d0:	4413      	add	r3, r2
 80098d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d142      	bne.n	800995e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80098de:	2b00      	cmp	r3, #0
 80098e0:	db3d      	blt.n	800995e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80098e6:	4b6e      	ldr	r3, [pc, #440]	; (8009aa0 <tcp_receive+0x2c4>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d137      	bne.n	800995e <tcp_receive+0x182>
              found_dupack = 1;
 80098ee:	2301      	movs	r3, #1
 80098f0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80098f8:	2bff      	cmp	r3, #255	; 0xff
 80098fa:	d007      	beq.n	800990c <tcp_receive+0x130>
                ++pcb->dupacks;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009902:	3301      	adds	r3, #1
 8009904:	b2da      	uxtb	r2, r3
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009912:	2b03      	cmp	r3, #3
 8009914:	d91b      	bls.n	800994e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009920:	4413      	add	r3, r2
 8009922:	b29a      	uxth	r2, r3
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800992a:	429a      	cmp	r2, r3
 800992c:	d30a      	bcc.n	8009944 <tcp_receive+0x168>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009938:	4413      	add	r3, r2
 800993a:	b29a      	uxth	r2, r3
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009942:	e004      	b.n	800994e <tcp_receive+0x172>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800994a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009954:	2b02      	cmp	r3, #2
 8009956:	d902      	bls.n	800995e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f002 fb41 	bl	800bfe0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800995e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009960:	2b00      	cmp	r3, #0
 8009962:	f040 8160 	bne.w	8009c26 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2200      	movs	r2, #0
 800996a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800996e:	e15a      	b.n	8009c26 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009970:	4b4b      	ldr	r3, [pc, #300]	; (8009aa0 <tcp_receive+0x2c4>)
 8009972:	681a      	ldr	r2, [r3, #0]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009978:	1ad3      	subs	r3, r2, r3
 800997a:	3b01      	subs	r3, #1
 800997c:	2b00      	cmp	r3, #0
 800997e:	f2c0 814d 	blt.w	8009c1c <tcp_receive+0x440>
 8009982:	4b47      	ldr	r3, [pc, #284]	; (8009aa0 <tcp_receive+0x2c4>)
 8009984:	681a      	ldr	r2, [r3, #0]
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800998a:	1ad3      	subs	r3, r2, r3
 800998c:	2b00      	cmp	r3, #0
 800998e:	f300 8145 	bgt.w	8009c1c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	8b5b      	ldrh	r3, [r3, #26]
 8009996:	f003 0304 	and.w	r3, r3, #4
 800999a:	2b00      	cmp	r3, #0
 800999c:	d010      	beq.n	80099c0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	8b5b      	ldrh	r3, [r3, #26]
 80099a2:	f023 0304 	bic.w	r3, r3, #4
 80099a6:	b29a      	uxth	r2, r3
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2200      	movs	r2, #0
 80099bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2200      	movs	r2, #0
 80099c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80099ce:	10db      	asrs	r3, r3, #3
 80099d0:	b21b      	sxth	r3, r3
 80099d2:	b29a      	uxth	r2, r3
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80099da:	b29b      	uxth	r3, r3
 80099dc:	4413      	add	r3, r2
 80099de:	b29b      	uxth	r3, r3
 80099e0:	b21a      	sxth	r2, r3
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80099e8:	4b2d      	ldr	r3, [pc, #180]	; (8009aa0 <tcp_receive+0x2c4>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	b29a      	uxth	r2, r3
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	1ad3      	subs	r3, r2, r3
 80099f6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2200      	movs	r2, #0
 80099fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8009a00:	4b27      	ldr	r3, [pc, #156]	; (8009aa0 <tcp_receive+0x2c4>)
 8009a02:	681a      	ldr	r2, [r3, #0]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	7d1b      	ldrb	r3, [r3, #20]
 8009a0c:	2b03      	cmp	r3, #3
 8009a0e:	f240 8096 	bls.w	8009b3e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8009a1e:	429a      	cmp	r2, r3
 8009a20:	d244      	bcs.n	8009aac <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	8b5b      	ldrh	r3, [r3, #26]
 8009a26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d001      	beq.n	8009a32 <tcp_receive+0x256>
 8009a2e:	2301      	movs	r3, #1
 8009a30:	e000      	b.n	8009a34 <tcp_receive+0x258>
 8009a32:	2302      	movs	r3, #2
 8009a34:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8009a38:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009a3c:	b29a      	uxth	r2, r3
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009a42:	fb12 f303 	smulbb	r3, r2, r3
 8009a46:	b29b      	uxth	r3, r3
 8009a48:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	bf28      	it	cs
 8009a4e:	4613      	movcs	r3, r2
 8009a50:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009a58:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009a5a:	4413      	add	r3, r2
 8009a5c:	b29a      	uxth	r2, r3
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d309      	bcc.n	8009a7c <tcp_receive+0x2a0>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009a6e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009a70:	4413      	add	r3, r2
 8009a72:	b29a      	uxth	r2, r3
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009a7a:	e060      	b.n	8009b3e <tcp_receive+0x362>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a82:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009a86:	e05a      	b.n	8009b3e <tcp_receive+0x362>
 8009a88:	08011bf8 	.word	0x08011bf8
 8009a8c:	08011f28 	.word	0x08011f28
 8009a90:	08011c44 	.word	0x08011c44
 8009a94:	08011f44 	.word	0x08011f44
 8009a98:	20000558 	.word	0x20000558
 8009a9c:	2000054c 	.word	0x2000054c
 8009aa0:	20000550 	.word	0x20000550
 8009aa4:	2000053c 	.word	0x2000053c
 8009aa8:	20000556 	.word	0x20000556
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009ab2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009ab4:	4413      	add	r3, r2
 8009ab6:	b29a      	uxth	r2, r3
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d309      	bcc.n	8009ad6 <tcp_receive+0x2fa>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009ac8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009aca:	4413      	add	r3, r2
 8009acc:	b29a      	uxth	r2, r3
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009ad4:	e004      	b.n	8009ae0 <tcp_receive+0x304>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009adc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d326      	bcc.n	8009b3e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009afc:	1ad3      	subs	r3, r2, r3
 8009afe:	b29a      	uxth	r2, r3
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b10:	4413      	add	r3, r2
 8009b12:	b29a      	uxth	r2, r3
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d30a      	bcc.n	8009b34 <tcp_receive+0x358>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b28:	4413      	add	r3, r2
 8009b2a:	b29a      	uxth	r2, r3
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009b32:	e004      	b.n	8009b3e <tcp_receive+0x362>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b3a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b46:	4a98      	ldr	r2, [pc, #608]	; (8009da8 <tcp_receive+0x5cc>)
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f7ff fdcb 	bl	80096e4 <tcp_free_acked_segments>
 8009b4e:	4602      	mov	r2, r0
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b5c:	4a93      	ldr	r2, [pc, #588]	; (8009dac <tcp_receive+0x5d0>)
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f7ff fdc0 	bl	80096e4 <tcp_free_acked_segments>
 8009b64:	4602      	mov	r2, r0
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d104      	bne.n	8009b7c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b78:	861a      	strh	r2, [r3, #48]	; 0x30
 8009b7a:	e002      	b.n	8009b82 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2200      	movs	r2, #0
 8009b86:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d103      	bne.n	8009b98 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8009b9e:	4b84      	ldr	r3, [pc, #528]	; (8009db0 <tcp_receive+0x5d4>)
 8009ba0:	881b      	ldrh	r3, [r3, #0]
 8009ba2:	4413      	add	r3, r2
 8009ba4:	b29a      	uxth	r2, r3
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	8b5b      	ldrh	r3, [r3, #26]
 8009bb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d035      	beq.n	8009c24 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d118      	bne.n	8009bf2 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d00c      	beq.n	8009be2 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bd0:	68db      	ldr	r3, [r3, #12]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f7fa ff74 	bl	8004ac2 <lwip_htonl>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	dc20      	bgt.n	8009c24 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	8b5b      	ldrh	r3, [r3, #26]
 8009be6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009bea:	b29a      	uxth	r2, r3
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009bf0:	e018      	b.n	8009c24 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bfa:	68db      	ldr	r3, [r3, #12]
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f7fa ff5f 	bl	8004ac2 <lwip_htonl>
 8009c04:	4603      	mov	r3, r0
 8009c06:	1ae3      	subs	r3, r4, r3
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	dc0b      	bgt.n	8009c24 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	8b5b      	ldrh	r3, [r3, #26]
 8009c10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c14:	b29a      	uxth	r2, r3
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009c1a:	e003      	b.n	8009c24 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f002 fbcd 	bl	800c3bc <tcp_send_empty_ack>
 8009c22:	e000      	b.n	8009c26 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009c24:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d05b      	beq.n	8009ce6 <tcp_receive+0x50a>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c32:	4b60      	ldr	r3, [pc, #384]	; (8009db4 <tcp_receive+0x5d8>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	1ad3      	subs	r3, r2, r3
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	da54      	bge.n	8009ce6 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009c3c:	4b5e      	ldr	r3, [pc, #376]	; (8009db8 <tcp_receive+0x5dc>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	b29a      	uxth	r2, r3
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	1ad3      	subs	r3, r2, r3
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8009c50:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009c5a:	10db      	asrs	r3, r3, #3
 8009c5c:	b21b      	sxth	r3, r3
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	1ad3      	subs	r3, r2, r3
 8009c62:	b29b      	uxth	r3, r3
 8009c64:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009c6e:	b29a      	uxth	r2, r3
 8009c70:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009c74:	4413      	add	r3, r2
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	b21a      	sxth	r2, r3
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8009c7e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	da05      	bge.n	8009c92 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8009c86:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009c8a:	425b      	negs	r3, r3
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8009c92:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009c9c:	109b      	asrs	r3, r3, #2
 8009c9e:	b21b      	sxth	r3, r3
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	1ad3      	subs	r3, r2, r3
 8009ca4:	b29b      	uxth	r3, r3
 8009ca6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009cb0:	b29a      	uxth	r2, r3
 8009cb2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009cb6:	4413      	add	r3, r2
 8009cb8:	b29b      	uxth	r3, r3
 8009cba:	b21a      	sxth	r2, r3
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009cc6:	10db      	asrs	r3, r3, #3
 8009cc8:	b21b      	sxth	r3, r3
 8009cca:	b29a      	uxth	r2, r3
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	4413      	add	r3, r2
 8009cd6:	b29b      	uxth	r3, r3
 8009cd8:	b21a      	sxth	r2, r3
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009ce6:	4b35      	ldr	r3, [pc, #212]	; (8009dbc <tcp_receive+0x5e0>)
 8009ce8:	881b      	ldrh	r3, [r3, #0]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	f000 84e1 	beq.w	800a6b2 <tcp_receive+0xed6>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	7d1b      	ldrb	r3, [r3, #20]
 8009cf4:	2b06      	cmp	r3, #6
 8009cf6:	f200 84dc 	bhi.w	800a6b2 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009cfe:	4b30      	ldr	r3, [pc, #192]	; (8009dc0 <tcp_receive+0x5e4>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	1ad3      	subs	r3, r2, r3
 8009d04:	3b01      	subs	r3, #1
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	f2c0 808e 	blt.w	8009e28 <tcp_receive+0x64c>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d10:	4b2a      	ldr	r3, [pc, #168]	; (8009dbc <tcp_receive+0x5e0>)
 8009d12:	881b      	ldrh	r3, [r3, #0]
 8009d14:	4619      	mov	r1, r3
 8009d16:	4b2a      	ldr	r3, [pc, #168]	; (8009dc0 <tcp_receive+0x5e4>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	440b      	add	r3, r1
 8009d1c:	1ad3      	subs	r3, r2, r3
 8009d1e:	3301      	adds	r3, #1
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	f300 8081 	bgt.w	8009e28 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8009d26:	4b27      	ldr	r3, [pc, #156]	; (8009dc4 <tcp_receive+0x5e8>)
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d30:	4b23      	ldr	r3, [pc, #140]	; (8009dc0 <tcp_receive+0x5e4>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	1ad3      	subs	r3, r2, r3
 8009d36:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009d38:	4b22      	ldr	r3, [pc, #136]	; (8009dc4 <tcp_receive+0x5e8>)
 8009d3a:	685b      	ldr	r3, [r3, #4]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d106      	bne.n	8009d4e <tcp_receive+0x572>
 8009d40:	4b21      	ldr	r3, [pc, #132]	; (8009dc8 <tcp_receive+0x5ec>)
 8009d42:	f240 5294 	movw	r2, #1428	; 0x594
 8009d46:	4921      	ldr	r1, [pc, #132]	; (8009dcc <tcp_receive+0x5f0>)
 8009d48:	4821      	ldr	r0, [pc, #132]	; (8009dd0 <tcp_receive+0x5f4>)
 8009d4a:	f005 facd 	bl	800f2e8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d50:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d906      	bls.n	8009d66 <tcp_receive+0x58a>
 8009d58:	4b1b      	ldr	r3, [pc, #108]	; (8009dc8 <tcp_receive+0x5ec>)
 8009d5a:	f240 5295 	movw	r2, #1429	; 0x595
 8009d5e:	491d      	ldr	r1, [pc, #116]	; (8009dd4 <tcp_receive+0x5f8>)
 8009d60:	481b      	ldr	r0, [pc, #108]	; (8009dd0 <tcp_receive+0x5f4>)
 8009d62:	f005 fac1 	bl	800f2e8 <iprintf>
      off = (u16_t)off32;
 8009d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d68:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009d6c:	4b15      	ldr	r3, [pc, #84]	; (8009dc4 <tcp_receive+0x5e8>)
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	891b      	ldrh	r3, [r3, #8]
 8009d72:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009d76:	429a      	cmp	r2, r3
 8009d78:	d906      	bls.n	8009d88 <tcp_receive+0x5ac>
 8009d7a:	4b13      	ldr	r3, [pc, #76]	; (8009dc8 <tcp_receive+0x5ec>)
 8009d7c:	f240 5297 	movw	r2, #1431	; 0x597
 8009d80:	4915      	ldr	r1, [pc, #84]	; (8009dd8 <tcp_receive+0x5fc>)
 8009d82:	4813      	ldr	r0, [pc, #76]	; (8009dd0 <tcp_receive+0x5f4>)
 8009d84:	f005 fab0 	bl	800f2e8 <iprintf>
      inseg.len -= off;
 8009d88:	4b0e      	ldr	r3, [pc, #56]	; (8009dc4 <tcp_receive+0x5e8>)
 8009d8a:	891a      	ldrh	r2, [r3, #8]
 8009d8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009d90:	1ad3      	subs	r3, r2, r3
 8009d92:	b29a      	uxth	r2, r3
 8009d94:	4b0b      	ldr	r3, [pc, #44]	; (8009dc4 <tcp_receive+0x5e8>)
 8009d96:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009d98:	4b0a      	ldr	r3, [pc, #40]	; (8009dc4 <tcp_receive+0x5e8>)
 8009d9a:	685b      	ldr	r3, [r3, #4]
 8009d9c:	891a      	ldrh	r2, [r3, #8]
 8009d9e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009da2:	1ad3      	subs	r3, r2, r3
 8009da4:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8009da6:	e029      	b.n	8009dfc <tcp_receive+0x620>
 8009da8:	08011f60 	.word	0x08011f60
 8009dac:	08011f68 	.word	0x08011f68
 8009db0:	20000554 	.word	0x20000554
 8009db4:	20000550 	.word	0x20000550
 8009db8:	20008eb0 	.word	0x20008eb0
 8009dbc:	20000556 	.word	0x20000556
 8009dc0:	2000054c 	.word	0x2000054c
 8009dc4:	2000052c 	.word	0x2000052c
 8009dc8:	08011bf8 	.word	0x08011bf8
 8009dcc:	08011f70 	.word	0x08011f70
 8009dd0:	08011c44 	.word	0x08011c44
 8009dd4:	08011f80 	.word	0x08011f80
 8009dd8:	08011f90 	.word	0x08011f90
        off -= p->len;
 8009ddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009dde:	895b      	ldrh	r3, [r3, #10]
 8009de0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009de4:	1ad3      	subs	r3, r2, r3
 8009de6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8009dea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009dec:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009dee:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8009df0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009df2:	2200      	movs	r2, #0
 8009df4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8009df6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8009dfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009dfe:	895b      	ldrh	r3, [r3, #10]
 8009e00:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d8e9      	bhi.n	8009ddc <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8009e08:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009e10:	f7fc f8da 	bl	8005fc8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e18:	4a91      	ldr	r2, [pc, #580]	; (800a060 <tcp_receive+0x884>)
 8009e1a:	6013      	str	r3, [r2, #0]
 8009e1c:	4b91      	ldr	r3, [pc, #580]	; (800a064 <tcp_receive+0x888>)
 8009e1e:	68db      	ldr	r3, [r3, #12]
 8009e20:	4a8f      	ldr	r2, [pc, #572]	; (800a060 <tcp_receive+0x884>)
 8009e22:	6812      	ldr	r2, [r2, #0]
 8009e24:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009e26:	e00d      	b.n	8009e44 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009e28:	4b8d      	ldr	r3, [pc, #564]	; (800a060 <tcp_receive+0x884>)
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e30:	1ad3      	subs	r3, r2, r3
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	da06      	bge.n	8009e44 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	8b5b      	ldrh	r3, [r3, #26]
 8009e3a:	f043 0302 	orr.w	r3, r3, #2
 8009e3e:	b29a      	uxth	r2, r3
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009e44:	4b86      	ldr	r3, [pc, #536]	; (800a060 <tcp_receive+0x884>)
 8009e46:	681a      	ldr	r2, [r3, #0]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e4c:	1ad3      	subs	r3, r2, r3
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	f2c0 842a 	blt.w	800a6a8 <tcp_receive+0xecc>
 8009e54:	4b82      	ldr	r3, [pc, #520]	; (800a060 <tcp_receive+0x884>)
 8009e56:	681a      	ldr	r2, [r3, #0]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e5c:	6879      	ldr	r1, [r7, #4]
 8009e5e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009e60:	440b      	add	r3, r1
 8009e62:	1ad3      	subs	r3, r2, r3
 8009e64:	3301      	adds	r3, #1
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	f300 841e 	bgt.w	800a6a8 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e70:	4b7b      	ldr	r3, [pc, #492]	; (800a060 <tcp_receive+0x884>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	429a      	cmp	r2, r3
 8009e76:	f040 829a 	bne.w	800a3ae <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8009e7a:	4b7a      	ldr	r3, [pc, #488]	; (800a064 <tcp_receive+0x888>)
 8009e7c:	891c      	ldrh	r4, [r3, #8]
 8009e7e:	4b79      	ldr	r3, [pc, #484]	; (800a064 <tcp_receive+0x888>)
 8009e80:	68db      	ldr	r3, [r3, #12]
 8009e82:	899b      	ldrh	r3, [r3, #12]
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	4618      	mov	r0, r3
 8009e88:	f7fa fe06 	bl	8004a98 <lwip_htons>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	b2db      	uxtb	r3, r3
 8009e90:	f003 0303 	and.w	r3, r3, #3
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d001      	beq.n	8009e9c <tcp_receive+0x6c0>
 8009e98:	2301      	movs	r3, #1
 8009e9a:	e000      	b.n	8009e9e <tcp_receive+0x6c2>
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	4423      	add	r3, r4
 8009ea0:	b29a      	uxth	r2, r3
 8009ea2:	4b71      	ldr	r3, [pc, #452]	; (800a068 <tcp_receive+0x88c>)
 8009ea4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009eaa:	4b6f      	ldr	r3, [pc, #444]	; (800a068 <tcp_receive+0x88c>)
 8009eac:	881b      	ldrh	r3, [r3, #0]
 8009eae:	429a      	cmp	r2, r3
 8009eb0:	d275      	bcs.n	8009f9e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009eb2:	4b6c      	ldr	r3, [pc, #432]	; (800a064 <tcp_receive+0x888>)
 8009eb4:	68db      	ldr	r3, [r3, #12]
 8009eb6:	899b      	ldrh	r3, [r3, #12]
 8009eb8:	b29b      	uxth	r3, r3
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f7fa fdec 	bl	8004a98 <lwip_htons>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	b2db      	uxtb	r3, r3
 8009ec4:	f003 0301 	and.w	r3, r3, #1
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d01f      	beq.n	8009f0c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009ecc:	4b65      	ldr	r3, [pc, #404]	; (800a064 <tcp_receive+0x888>)
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	899b      	ldrh	r3, [r3, #12]
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	b21b      	sxth	r3, r3
 8009ed6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009eda:	b21c      	sxth	r4, r3
 8009edc:	4b61      	ldr	r3, [pc, #388]	; (800a064 <tcp_receive+0x888>)
 8009ede:	68db      	ldr	r3, [r3, #12]
 8009ee0:	899b      	ldrh	r3, [r3, #12]
 8009ee2:	b29b      	uxth	r3, r3
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f7fa fdd7 	bl	8004a98 <lwip_htons>
 8009eea:	4603      	mov	r3, r0
 8009eec:	b2db      	uxtb	r3, r3
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009ef4:	b29b      	uxth	r3, r3
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7fa fdce 	bl	8004a98 <lwip_htons>
 8009efc:	4603      	mov	r3, r0
 8009efe:	b21b      	sxth	r3, r3
 8009f00:	4323      	orrs	r3, r4
 8009f02:	b21a      	sxth	r2, r3
 8009f04:	4b57      	ldr	r3, [pc, #348]	; (800a064 <tcp_receive+0x888>)
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	b292      	uxth	r2, r2
 8009f0a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009f10:	4b54      	ldr	r3, [pc, #336]	; (800a064 <tcp_receive+0x888>)
 8009f12:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009f14:	4b53      	ldr	r3, [pc, #332]	; (800a064 <tcp_receive+0x888>)
 8009f16:	68db      	ldr	r3, [r3, #12]
 8009f18:	899b      	ldrh	r3, [r3, #12]
 8009f1a:	b29b      	uxth	r3, r3
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f7fa fdbb 	bl	8004a98 <lwip_htons>
 8009f22:	4603      	mov	r3, r0
 8009f24:	b2db      	uxtb	r3, r3
 8009f26:	f003 0302 	and.w	r3, r3, #2
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d005      	beq.n	8009f3a <tcp_receive+0x75e>
            inseg.len -= 1;
 8009f2e:	4b4d      	ldr	r3, [pc, #308]	; (800a064 <tcp_receive+0x888>)
 8009f30:	891b      	ldrh	r3, [r3, #8]
 8009f32:	3b01      	subs	r3, #1
 8009f34:	b29a      	uxth	r2, r3
 8009f36:	4b4b      	ldr	r3, [pc, #300]	; (800a064 <tcp_receive+0x888>)
 8009f38:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8009f3a:	4b4a      	ldr	r3, [pc, #296]	; (800a064 <tcp_receive+0x888>)
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	4a49      	ldr	r2, [pc, #292]	; (800a064 <tcp_receive+0x888>)
 8009f40:	8912      	ldrh	r2, [r2, #8]
 8009f42:	4611      	mov	r1, r2
 8009f44:	4618      	mov	r0, r3
 8009f46:	f7fb ff3f 	bl	8005dc8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009f4a:	4b46      	ldr	r3, [pc, #280]	; (800a064 <tcp_receive+0x888>)
 8009f4c:	891c      	ldrh	r4, [r3, #8]
 8009f4e:	4b45      	ldr	r3, [pc, #276]	; (800a064 <tcp_receive+0x888>)
 8009f50:	68db      	ldr	r3, [r3, #12]
 8009f52:	899b      	ldrh	r3, [r3, #12]
 8009f54:	b29b      	uxth	r3, r3
 8009f56:	4618      	mov	r0, r3
 8009f58:	f7fa fd9e 	bl	8004a98 <lwip_htons>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	b2db      	uxtb	r3, r3
 8009f60:	f003 0303 	and.w	r3, r3, #3
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d001      	beq.n	8009f6c <tcp_receive+0x790>
 8009f68:	2301      	movs	r3, #1
 8009f6a:	e000      	b.n	8009f6e <tcp_receive+0x792>
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	4423      	add	r3, r4
 8009f70:	b29a      	uxth	r2, r3
 8009f72:	4b3d      	ldr	r3, [pc, #244]	; (800a068 <tcp_receive+0x88c>)
 8009f74:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009f76:	4b3c      	ldr	r3, [pc, #240]	; (800a068 <tcp_receive+0x88c>)
 8009f78:	881b      	ldrh	r3, [r3, #0]
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	4b38      	ldr	r3, [pc, #224]	; (800a060 <tcp_receive+0x884>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	441a      	add	r2, r3
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f86:	6879      	ldr	r1, [r7, #4]
 8009f88:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009f8a:	440b      	add	r3, r1
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	d006      	beq.n	8009f9e <tcp_receive+0x7c2>
 8009f90:	4b36      	ldr	r3, [pc, #216]	; (800a06c <tcp_receive+0x890>)
 8009f92:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8009f96:	4936      	ldr	r1, [pc, #216]	; (800a070 <tcp_receive+0x894>)
 8009f98:	4836      	ldr	r0, [pc, #216]	; (800a074 <tcp_receive+0x898>)
 8009f9a:	f005 f9a5 	bl	800f2e8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	f000 80e7 	beq.w	800a176 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009fa8:	4b2e      	ldr	r3, [pc, #184]	; (800a064 <tcp_receive+0x888>)
 8009faa:	68db      	ldr	r3, [r3, #12]
 8009fac:	899b      	ldrh	r3, [r3, #12]
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f7fa fd71 	bl	8004a98 <lwip_htons>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	f003 0301 	and.w	r3, r3, #1
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d010      	beq.n	8009fe4 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8009fc2:	e00a      	b.n	8009fda <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fc8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fce:	681a      	ldr	r2, [r3, #0]
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8009fd4:	68f8      	ldr	r0, [r7, #12]
 8009fd6:	f7fd fcaa 	bl	800792e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d1f0      	bne.n	8009fc4 <tcp_receive+0x7e8>
 8009fe2:	e0c8      	b.n	800a176 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8009fea:	e052      	b.n	800a092 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fee:	68db      	ldr	r3, [r3, #12]
 8009ff0:	899b      	ldrh	r3, [r3, #12]
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f7fa fd4f 	bl	8004a98 <lwip_htons>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	b2db      	uxtb	r3, r3
 8009ffe:	f003 0301 	and.w	r3, r3, #1
 800a002:	2b00      	cmp	r3, #0
 800a004:	d03d      	beq.n	800a082 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a006:	4b17      	ldr	r3, [pc, #92]	; (800a064 <tcp_receive+0x888>)
 800a008:	68db      	ldr	r3, [r3, #12]
 800a00a:	899b      	ldrh	r3, [r3, #12]
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	4618      	mov	r0, r3
 800a010:	f7fa fd42 	bl	8004a98 <lwip_htons>
 800a014:	4603      	mov	r3, r0
 800a016:	b2db      	uxtb	r3, r3
 800a018:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d130      	bne.n	800a082 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a020:	4b10      	ldr	r3, [pc, #64]	; (800a064 <tcp_receive+0x888>)
 800a022:	68db      	ldr	r3, [r3, #12]
 800a024:	899b      	ldrh	r3, [r3, #12]
 800a026:	b29c      	uxth	r4, r3
 800a028:	2001      	movs	r0, #1
 800a02a:	f7fa fd35 	bl	8004a98 <lwip_htons>
 800a02e:	4603      	mov	r3, r0
 800a030:	461a      	mov	r2, r3
 800a032:	4b0c      	ldr	r3, [pc, #48]	; (800a064 <tcp_receive+0x888>)
 800a034:	68db      	ldr	r3, [r3, #12]
 800a036:	4322      	orrs	r2, r4
 800a038:	b292      	uxth	r2, r2
 800a03a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a03c:	4b09      	ldr	r3, [pc, #36]	; (800a064 <tcp_receive+0x888>)
 800a03e:	891c      	ldrh	r4, [r3, #8]
 800a040:	4b08      	ldr	r3, [pc, #32]	; (800a064 <tcp_receive+0x888>)
 800a042:	68db      	ldr	r3, [r3, #12]
 800a044:	899b      	ldrh	r3, [r3, #12]
 800a046:	b29b      	uxth	r3, r3
 800a048:	4618      	mov	r0, r3
 800a04a:	f7fa fd25 	bl	8004a98 <lwip_htons>
 800a04e:	4603      	mov	r3, r0
 800a050:	b2db      	uxtb	r3, r3
 800a052:	f003 0303 	and.w	r3, r3, #3
 800a056:	2b00      	cmp	r3, #0
 800a058:	d00e      	beq.n	800a078 <tcp_receive+0x89c>
 800a05a:	2301      	movs	r3, #1
 800a05c:	e00d      	b.n	800a07a <tcp_receive+0x89e>
 800a05e:	bf00      	nop
 800a060:	2000054c 	.word	0x2000054c
 800a064:	2000052c 	.word	0x2000052c
 800a068:	20000556 	.word	0x20000556
 800a06c:	08011bf8 	.word	0x08011bf8
 800a070:	08011fa0 	.word	0x08011fa0
 800a074:	08011c44 	.word	0x08011c44
 800a078:	2300      	movs	r3, #0
 800a07a:	4423      	add	r3, r4
 800a07c:	b29a      	uxth	r2, r3
 800a07e:	4b98      	ldr	r3, [pc, #608]	; (800a2e0 <tcp_receive+0xb04>)
 800a080:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800a082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a084:	613b      	str	r3, [r7, #16]
              next = next->next;
 800a086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800a08c:	6938      	ldr	r0, [r7, #16]
 800a08e:	f7fd fc4e 	bl	800792e <tcp_seg_free>
            while (next &&
 800a092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a094:	2b00      	cmp	r3, #0
 800a096:	d00e      	beq.n	800a0b6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a098:	4b91      	ldr	r3, [pc, #580]	; (800a2e0 <tcp_receive+0xb04>)
 800a09a:	881b      	ldrh	r3, [r3, #0]
 800a09c:	461a      	mov	r2, r3
 800a09e:	4b91      	ldr	r3, [pc, #580]	; (800a2e4 <tcp_receive+0xb08>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	441a      	add	r2, r3
 800a0a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0a6:	68db      	ldr	r3, [r3, #12]
 800a0a8:	685b      	ldr	r3, [r3, #4]
 800a0aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a0ac:	8909      	ldrh	r1, [r1, #8]
 800a0ae:	440b      	add	r3, r1
 800a0b0:	1ad3      	subs	r3, r2, r3
            while (next &&
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	da9a      	bge.n	8009fec <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800a0b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d059      	beq.n	800a170 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800a0bc:	4b88      	ldr	r3, [pc, #544]	; (800a2e0 <tcp_receive+0xb04>)
 800a0be:	881b      	ldrh	r3, [r3, #0]
 800a0c0:	461a      	mov	r2, r3
 800a0c2:	4b88      	ldr	r3, [pc, #544]	; (800a2e4 <tcp_receive+0xb08>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	441a      	add	r2, r3
 800a0c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0ca:	68db      	ldr	r3, [r3, #12]
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	1ad3      	subs	r3, r2, r3
            if (next &&
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	dd4d      	ble.n	800a170 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a0d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0d6:	68db      	ldr	r3, [r3, #12]
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	b29a      	uxth	r2, r3
 800a0dc:	4b81      	ldr	r3, [pc, #516]	; (800a2e4 <tcp_receive+0xb08>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	1ad3      	subs	r3, r2, r3
 800a0e4:	b29a      	uxth	r2, r3
 800a0e6:	4b80      	ldr	r3, [pc, #512]	; (800a2e8 <tcp_receive+0xb0c>)
 800a0e8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a0ea:	4b7f      	ldr	r3, [pc, #508]	; (800a2e8 <tcp_receive+0xb0c>)
 800a0ec:	68db      	ldr	r3, [r3, #12]
 800a0ee:	899b      	ldrh	r3, [r3, #12]
 800a0f0:	b29b      	uxth	r3, r3
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f7fa fcd0 	bl	8004a98 <lwip_htons>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	f003 0302 	and.w	r3, r3, #2
 800a100:	2b00      	cmp	r3, #0
 800a102:	d005      	beq.n	800a110 <tcp_receive+0x934>
                inseg.len -= 1;
 800a104:	4b78      	ldr	r3, [pc, #480]	; (800a2e8 <tcp_receive+0xb0c>)
 800a106:	891b      	ldrh	r3, [r3, #8]
 800a108:	3b01      	subs	r3, #1
 800a10a:	b29a      	uxth	r2, r3
 800a10c:	4b76      	ldr	r3, [pc, #472]	; (800a2e8 <tcp_receive+0xb0c>)
 800a10e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800a110:	4b75      	ldr	r3, [pc, #468]	; (800a2e8 <tcp_receive+0xb0c>)
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	4a74      	ldr	r2, [pc, #464]	; (800a2e8 <tcp_receive+0xb0c>)
 800a116:	8912      	ldrh	r2, [r2, #8]
 800a118:	4611      	mov	r1, r2
 800a11a:	4618      	mov	r0, r3
 800a11c:	f7fb fe54 	bl	8005dc8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a120:	4b71      	ldr	r3, [pc, #452]	; (800a2e8 <tcp_receive+0xb0c>)
 800a122:	891c      	ldrh	r4, [r3, #8]
 800a124:	4b70      	ldr	r3, [pc, #448]	; (800a2e8 <tcp_receive+0xb0c>)
 800a126:	68db      	ldr	r3, [r3, #12]
 800a128:	899b      	ldrh	r3, [r3, #12]
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	4618      	mov	r0, r3
 800a12e:	f7fa fcb3 	bl	8004a98 <lwip_htons>
 800a132:	4603      	mov	r3, r0
 800a134:	b2db      	uxtb	r3, r3
 800a136:	f003 0303 	and.w	r3, r3, #3
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d001      	beq.n	800a142 <tcp_receive+0x966>
 800a13e:	2301      	movs	r3, #1
 800a140:	e000      	b.n	800a144 <tcp_receive+0x968>
 800a142:	2300      	movs	r3, #0
 800a144:	4423      	add	r3, r4
 800a146:	b29a      	uxth	r2, r3
 800a148:	4b65      	ldr	r3, [pc, #404]	; (800a2e0 <tcp_receive+0xb04>)
 800a14a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a14c:	4b64      	ldr	r3, [pc, #400]	; (800a2e0 <tcp_receive+0xb04>)
 800a14e:	881b      	ldrh	r3, [r3, #0]
 800a150:	461a      	mov	r2, r3
 800a152:	4b64      	ldr	r3, [pc, #400]	; (800a2e4 <tcp_receive+0xb08>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	441a      	add	r2, r3
 800a158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a15a:	68db      	ldr	r3, [r3, #12]
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	429a      	cmp	r2, r3
 800a160:	d006      	beq.n	800a170 <tcp_receive+0x994>
 800a162:	4b62      	ldr	r3, [pc, #392]	; (800a2ec <tcp_receive+0xb10>)
 800a164:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800a168:	4961      	ldr	r1, [pc, #388]	; (800a2f0 <tcp_receive+0xb14>)
 800a16a:	4862      	ldr	r0, [pc, #392]	; (800a2f4 <tcp_receive+0xb18>)
 800a16c:	f005 f8bc 	bl	800f2e8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a174:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800a176:	4b5a      	ldr	r3, [pc, #360]	; (800a2e0 <tcp_receive+0xb04>)
 800a178:	881b      	ldrh	r3, [r3, #0]
 800a17a:	461a      	mov	r2, r3
 800a17c:	4b59      	ldr	r3, [pc, #356]	; (800a2e4 <tcp_receive+0xb08>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	441a      	add	r2, r3
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a18a:	4b55      	ldr	r3, [pc, #340]	; (800a2e0 <tcp_receive+0xb04>)
 800a18c:	881b      	ldrh	r3, [r3, #0]
 800a18e:	429a      	cmp	r2, r3
 800a190:	d206      	bcs.n	800a1a0 <tcp_receive+0x9c4>
 800a192:	4b56      	ldr	r3, [pc, #344]	; (800a2ec <tcp_receive+0xb10>)
 800a194:	f240 6207 	movw	r2, #1543	; 0x607
 800a198:	4957      	ldr	r1, [pc, #348]	; (800a2f8 <tcp_receive+0xb1c>)
 800a19a:	4856      	ldr	r0, [pc, #344]	; (800a2f4 <tcp_receive+0xb18>)
 800a19c:	f005 f8a4 	bl	800f2e8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a1a4:	4b4e      	ldr	r3, [pc, #312]	; (800a2e0 <tcp_receive+0xb04>)
 800a1a6:	881b      	ldrh	r3, [r3, #0]
 800a1a8:	1ad3      	subs	r3, r2, r3
 800a1aa:	b29a      	uxth	r2, r3
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f7fc fe97 	bl	8006ee4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800a1b6:	4b4c      	ldr	r3, [pc, #304]	; (800a2e8 <tcp_receive+0xb0c>)
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	891b      	ldrh	r3, [r3, #8]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d006      	beq.n	800a1ce <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800a1c0:	4b49      	ldr	r3, [pc, #292]	; (800a2e8 <tcp_receive+0xb0c>)
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	4a4d      	ldr	r2, [pc, #308]	; (800a2fc <tcp_receive+0xb20>)
 800a1c6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800a1c8:	4b47      	ldr	r3, [pc, #284]	; (800a2e8 <tcp_receive+0xb0c>)
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a1ce:	4b46      	ldr	r3, [pc, #280]	; (800a2e8 <tcp_receive+0xb0c>)
 800a1d0:	68db      	ldr	r3, [r3, #12]
 800a1d2:	899b      	ldrh	r3, [r3, #12]
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f7fa fc5e 	bl	8004a98 <lwip_htons>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	b2db      	uxtb	r3, r3
 800a1e0:	f003 0301 	and.w	r3, r3, #1
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	f000 80b8 	beq.w	800a35a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800a1ea:	4b45      	ldr	r3, [pc, #276]	; (800a300 <tcp_receive+0xb24>)
 800a1ec:	781b      	ldrb	r3, [r3, #0]
 800a1ee:	f043 0320 	orr.w	r3, r3, #32
 800a1f2:	b2da      	uxtb	r2, r3
 800a1f4:	4b42      	ldr	r3, [pc, #264]	; (800a300 <tcp_receive+0xb24>)
 800a1f6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800a1f8:	e0af      	b.n	800a35a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1fe:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a204:	68db      	ldr	r3, [r3, #12]
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	4a36      	ldr	r2, [pc, #216]	; (800a2e4 <tcp_receive+0xb08>)
 800a20a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	891b      	ldrh	r3, [r3, #8]
 800a210:	461c      	mov	r4, r3
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	68db      	ldr	r3, [r3, #12]
 800a216:	899b      	ldrh	r3, [r3, #12]
 800a218:	b29b      	uxth	r3, r3
 800a21a:	4618      	mov	r0, r3
 800a21c:	f7fa fc3c 	bl	8004a98 <lwip_htons>
 800a220:	4603      	mov	r3, r0
 800a222:	b2db      	uxtb	r3, r3
 800a224:	f003 0303 	and.w	r3, r3, #3
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d001      	beq.n	800a230 <tcp_receive+0xa54>
 800a22c:	2301      	movs	r3, #1
 800a22e:	e000      	b.n	800a232 <tcp_receive+0xa56>
 800a230:	2300      	movs	r3, #0
 800a232:	191a      	adds	r2, r3, r4
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a238:	441a      	add	r2, r3
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a242:	461c      	mov	r4, r3
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	891b      	ldrh	r3, [r3, #8]
 800a248:	461d      	mov	r5, r3
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	68db      	ldr	r3, [r3, #12]
 800a24e:	899b      	ldrh	r3, [r3, #12]
 800a250:	b29b      	uxth	r3, r3
 800a252:	4618      	mov	r0, r3
 800a254:	f7fa fc20 	bl	8004a98 <lwip_htons>
 800a258:	4603      	mov	r3, r0
 800a25a:	b2db      	uxtb	r3, r3
 800a25c:	f003 0303 	and.w	r3, r3, #3
 800a260:	2b00      	cmp	r3, #0
 800a262:	d001      	beq.n	800a268 <tcp_receive+0xa8c>
 800a264:	2301      	movs	r3, #1
 800a266:	e000      	b.n	800a26a <tcp_receive+0xa8e>
 800a268:	2300      	movs	r3, #0
 800a26a:	442b      	add	r3, r5
 800a26c:	429c      	cmp	r4, r3
 800a26e:	d206      	bcs.n	800a27e <tcp_receive+0xaa2>
 800a270:	4b1e      	ldr	r3, [pc, #120]	; (800a2ec <tcp_receive+0xb10>)
 800a272:	f240 622b 	movw	r2, #1579	; 0x62b
 800a276:	4923      	ldr	r1, [pc, #140]	; (800a304 <tcp_receive+0xb28>)
 800a278:	481e      	ldr	r0, [pc, #120]	; (800a2f4 <tcp_receive+0xb18>)
 800a27a:	f005 f835 	bl	800f2e8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	891b      	ldrh	r3, [r3, #8]
 800a282:	461c      	mov	r4, r3
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	68db      	ldr	r3, [r3, #12]
 800a288:	899b      	ldrh	r3, [r3, #12]
 800a28a:	b29b      	uxth	r3, r3
 800a28c:	4618      	mov	r0, r3
 800a28e:	f7fa fc03 	bl	8004a98 <lwip_htons>
 800a292:	4603      	mov	r3, r0
 800a294:	b2db      	uxtb	r3, r3
 800a296:	f003 0303 	and.w	r3, r3, #3
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d001      	beq.n	800a2a2 <tcp_receive+0xac6>
 800a29e:	2301      	movs	r3, #1
 800a2a0:	e000      	b.n	800a2a4 <tcp_receive+0xac8>
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	1919      	adds	r1, r3, r4
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a2aa:	b28b      	uxth	r3, r1
 800a2ac:	1ad3      	subs	r3, r2, r3
 800a2ae:	b29a      	uxth	r2, r3
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f7fc fe15 	bl	8006ee4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	891b      	ldrh	r3, [r3, #8]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d028      	beq.n	800a316 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800a2c4:	4b0d      	ldr	r3, [pc, #52]	; (800a2fc <tcp_receive+0xb20>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d01d      	beq.n	800a308 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800a2cc:	4b0b      	ldr	r3, [pc, #44]	; (800a2fc <tcp_receive+0xb20>)
 800a2ce:	681a      	ldr	r2, [r3, #0]
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	4619      	mov	r1, r3
 800a2d6:	4610      	mov	r0, r2
 800a2d8:	f7fb ffbe 	bl	8006258 <pbuf_cat>
 800a2dc:	e018      	b.n	800a310 <tcp_receive+0xb34>
 800a2de:	bf00      	nop
 800a2e0:	20000556 	.word	0x20000556
 800a2e4:	2000054c 	.word	0x2000054c
 800a2e8:	2000052c 	.word	0x2000052c
 800a2ec:	08011bf8 	.word	0x08011bf8
 800a2f0:	08011fd8 	.word	0x08011fd8
 800a2f4:	08011c44 	.word	0x08011c44
 800a2f8:	08012014 	.word	0x08012014
 800a2fc:	2000055c 	.word	0x2000055c
 800a300:	20000559 	.word	0x20000559
 800a304:	08012034 	.word	0x08012034
            } else {
              recv_data = cseg->p;
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	4a70      	ldr	r2, [pc, #448]	; (800a4d0 <tcp_receive+0xcf4>)
 800a30e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	2200      	movs	r2, #0
 800a314:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	68db      	ldr	r3, [r3, #12]
 800a31a:	899b      	ldrh	r3, [r3, #12]
 800a31c:	b29b      	uxth	r3, r3
 800a31e:	4618      	mov	r0, r3
 800a320:	f7fa fbba 	bl	8004a98 <lwip_htons>
 800a324:	4603      	mov	r3, r0
 800a326:	b2db      	uxtb	r3, r3
 800a328:	f003 0301 	and.w	r3, r3, #1
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d00d      	beq.n	800a34c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800a330:	4b68      	ldr	r3, [pc, #416]	; (800a4d4 <tcp_receive+0xcf8>)
 800a332:	781b      	ldrb	r3, [r3, #0]
 800a334:	f043 0320 	orr.w	r3, r3, #32
 800a338:	b2da      	uxtb	r2, r3
 800a33a:	4b66      	ldr	r3, [pc, #408]	; (800a4d4 <tcp_receive+0xcf8>)
 800a33c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	7d1b      	ldrb	r3, [r3, #20]
 800a342:	2b04      	cmp	r3, #4
 800a344:	d102      	bne.n	800a34c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2207      	movs	r2, #7
 800a34a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	681a      	ldr	r2, [r3, #0]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800a354:	68b8      	ldr	r0, [r7, #8]
 800a356:	f7fd faea 	bl	800792e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d008      	beq.n	800a374 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a366:	68db      	ldr	r3, [r3, #12]
 800a368:	685a      	ldr	r2, [r3, #4]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800a36e:	429a      	cmp	r2, r3
 800a370:	f43f af43 	beq.w	800a1fa <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	8b5b      	ldrh	r3, [r3, #26]
 800a378:	f003 0301 	and.w	r3, r3, #1
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d00e      	beq.n	800a39e <tcp_receive+0xbc2>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	8b5b      	ldrh	r3, [r3, #26]
 800a384:	f023 0301 	bic.w	r3, r3, #1
 800a388:	b29a      	uxth	r2, r3
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	835a      	strh	r2, [r3, #26]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	8b5b      	ldrh	r3, [r3, #26]
 800a392:	f043 0302 	orr.w	r3, r3, #2
 800a396:	b29a      	uxth	r2, r3
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a39c:	e188      	b.n	800a6b0 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	8b5b      	ldrh	r3, [r3, #26]
 800a3a2:	f043 0301 	orr.w	r3, r3, #1
 800a3a6:	b29a      	uxth	r2, r3
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a3ac:	e180      	b.n	800a6b0 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d106      	bne.n	800a3c4 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800a3b6:	4848      	ldr	r0, [pc, #288]	; (800a4d8 <tcp_receive+0xcfc>)
 800a3b8:	f7fd faf0 	bl	800799c <tcp_seg_copy>
 800a3bc:	4602      	mov	r2, r0
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	675a      	str	r2, [r3, #116]	; 0x74
 800a3c2:	e16d      	b.n	800a6a0 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3cc:	63bb      	str	r3, [r7, #56]	; 0x38
 800a3ce:	e157      	b.n	800a680 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800a3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d2:	68db      	ldr	r3, [r3, #12]
 800a3d4:	685a      	ldr	r2, [r3, #4]
 800a3d6:	4b41      	ldr	r3, [pc, #260]	; (800a4dc <tcp_receive+0xd00>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d11d      	bne.n	800a41a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800a3de:	4b3e      	ldr	r3, [pc, #248]	; (800a4d8 <tcp_receive+0xcfc>)
 800a3e0:	891a      	ldrh	r2, [r3, #8]
 800a3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e4:	891b      	ldrh	r3, [r3, #8]
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	f240 814f 	bls.w	800a68a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a3ec:	483a      	ldr	r0, [pc, #232]	; (800a4d8 <tcp_receive+0xcfc>)
 800a3ee:	f7fd fad5 	bl	800799c <tcp_seg_copy>
 800a3f2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	f000 8149 	beq.w	800a68e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800a3fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d003      	beq.n	800a40a <tcp_receive+0xc2e>
                    prev->next = cseg;
 800a402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a404:	697a      	ldr	r2, [r7, #20]
 800a406:	601a      	str	r2, [r3, #0]
 800a408:	e002      	b.n	800a410 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	697a      	ldr	r2, [r7, #20]
 800a40e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800a410:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a412:	6978      	ldr	r0, [r7, #20]
 800a414:	f7ff f8de 	bl	80095d4 <tcp_oos_insert_segment>
                }
                break;
 800a418:	e139      	b.n	800a68e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800a41a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d117      	bne.n	800a450 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a420:	4b2e      	ldr	r3, [pc, #184]	; (800a4dc <tcp_receive+0xd00>)
 800a422:	681a      	ldr	r2, [r3, #0]
 800a424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a426:	68db      	ldr	r3, [r3, #12]
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	1ad3      	subs	r3, r2, r3
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	da57      	bge.n	800a4e0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a430:	4829      	ldr	r0, [pc, #164]	; (800a4d8 <tcp_receive+0xcfc>)
 800a432:	f7fd fab3 	bl	800799c <tcp_seg_copy>
 800a436:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800a438:	69bb      	ldr	r3, [r7, #24]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	f000 8129 	beq.w	800a692 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	69ba      	ldr	r2, [r7, #24]
 800a444:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800a446:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a448:	69b8      	ldr	r0, [r7, #24]
 800a44a:	f7ff f8c3 	bl	80095d4 <tcp_oos_insert_segment>
                  }
                  break;
 800a44e:	e120      	b.n	800a692 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800a450:	4b22      	ldr	r3, [pc, #136]	; (800a4dc <tcp_receive+0xd00>)
 800a452:	681a      	ldr	r2, [r3, #0]
 800a454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a456:	68db      	ldr	r3, [r3, #12]
 800a458:	685b      	ldr	r3, [r3, #4]
 800a45a:	1ad3      	subs	r3, r2, r3
 800a45c:	3b01      	subs	r3, #1
 800a45e:	2b00      	cmp	r3, #0
 800a460:	db3e      	blt.n	800a4e0 <tcp_receive+0xd04>
 800a462:	4b1e      	ldr	r3, [pc, #120]	; (800a4dc <tcp_receive+0xd00>)
 800a464:	681a      	ldr	r2, [r3, #0]
 800a466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a468:	68db      	ldr	r3, [r3, #12]
 800a46a:	685b      	ldr	r3, [r3, #4]
 800a46c:	1ad3      	subs	r3, r2, r3
 800a46e:	3301      	adds	r3, #1
 800a470:	2b00      	cmp	r3, #0
 800a472:	dc35      	bgt.n	800a4e0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a474:	4818      	ldr	r0, [pc, #96]	; (800a4d8 <tcp_receive+0xcfc>)
 800a476:	f7fd fa91 	bl	800799c <tcp_seg_copy>
 800a47a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800a47c:	69fb      	ldr	r3, [r7, #28]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	f000 8109 	beq.w	800a696 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a486:	68db      	ldr	r3, [r3, #12]
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a48c:	8912      	ldrh	r2, [r2, #8]
 800a48e:	441a      	add	r2, r3
 800a490:	4b12      	ldr	r3, [pc, #72]	; (800a4dc <tcp_receive+0xd00>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	1ad3      	subs	r3, r2, r3
 800a496:	2b00      	cmp	r3, #0
 800a498:	dd12      	ble.n	800a4c0 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a49a:	4b10      	ldr	r3, [pc, #64]	; (800a4dc <tcp_receive+0xd00>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	b29a      	uxth	r2, r3
 800a4a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4a2:	68db      	ldr	r3, [r3, #12]
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	1ad3      	subs	r3, r2, r3
 800a4aa:	b29a      	uxth	r2, r3
 800a4ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4ae:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a4b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4b2:	685a      	ldr	r2, [r3, #4]
 800a4b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4b6:	891b      	ldrh	r3, [r3, #8]
 800a4b8:	4619      	mov	r1, r3
 800a4ba:	4610      	mov	r0, r2
 800a4bc:	f7fb fc84 	bl	8005dc8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800a4c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4c2:	69fa      	ldr	r2, [r7, #28]
 800a4c4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a4c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a4c8:	69f8      	ldr	r0, [r7, #28]
 800a4ca:	f7ff f883 	bl	80095d4 <tcp_oos_insert_segment>
                  }
                  break;
 800a4ce:	e0e2      	b.n	800a696 <tcp_receive+0xeba>
 800a4d0:	2000055c 	.word	0x2000055c
 800a4d4:	20000559 	.word	0x20000559
 800a4d8:	2000052c 	.word	0x2000052c
 800a4dc:	2000054c 	.word	0x2000054c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800a4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800a4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	f040 80c6 	bne.w	800a67a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a4ee:	4b80      	ldr	r3, [pc, #512]	; (800a6f0 <tcp_receive+0xf14>)
 800a4f0:	681a      	ldr	r2, [r3, #0]
 800a4f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4f4:	68db      	ldr	r3, [r3, #12]
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	f340 80bd 	ble.w	800a67a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a502:	68db      	ldr	r3, [r3, #12]
 800a504:	899b      	ldrh	r3, [r3, #12]
 800a506:	b29b      	uxth	r3, r3
 800a508:	4618      	mov	r0, r3
 800a50a:	f7fa fac5 	bl	8004a98 <lwip_htons>
 800a50e:	4603      	mov	r3, r0
 800a510:	b2db      	uxtb	r3, r3
 800a512:	f003 0301 	and.w	r3, r3, #1
 800a516:	2b00      	cmp	r3, #0
 800a518:	f040 80bf 	bne.w	800a69a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800a51c:	4875      	ldr	r0, [pc, #468]	; (800a6f4 <tcp_receive+0xf18>)
 800a51e:	f7fd fa3d 	bl	800799c <tcp_seg_copy>
 800a522:	4602      	mov	r2, r0
 800a524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a526:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800a528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	f000 80b6 	beq.w	800a69e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a534:	68db      	ldr	r3, [r3, #12]
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a53a:	8912      	ldrh	r2, [r2, #8]
 800a53c:	441a      	add	r2, r3
 800a53e:	4b6c      	ldr	r3, [pc, #432]	; (800a6f0 <tcp_receive+0xf14>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	1ad3      	subs	r3, r2, r3
 800a544:	2b00      	cmp	r3, #0
 800a546:	dd12      	ble.n	800a56e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a548:	4b69      	ldr	r3, [pc, #420]	; (800a6f0 <tcp_receive+0xf14>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	b29a      	uxth	r2, r3
 800a54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a550:	68db      	ldr	r3, [r3, #12]
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	b29b      	uxth	r3, r3
 800a556:	1ad3      	subs	r3, r2, r3
 800a558:	b29a      	uxth	r2, r3
 800a55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a55c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800a55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a560:	685a      	ldr	r2, [r3, #4]
 800a562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a564:	891b      	ldrh	r3, [r3, #8]
 800a566:	4619      	mov	r1, r3
 800a568:	4610      	mov	r0, r2
 800a56a:	f7fb fc2d 	bl	8005dc8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a56e:	4b62      	ldr	r3, [pc, #392]	; (800a6f8 <tcp_receive+0xf1c>)
 800a570:	881b      	ldrh	r3, [r3, #0]
 800a572:	461a      	mov	r2, r3
 800a574:	4b5e      	ldr	r3, [pc, #376]	; (800a6f0 <tcp_receive+0xf14>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	441a      	add	r2, r3
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a57e:	6879      	ldr	r1, [r7, #4]
 800a580:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a582:	440b      	add	r3, r1
 800a584:	1ad3      	subs	r3, r2, r3
 800a586:	2b00      	cmp	r3, #0
 800a588:	f340 8089 	ble.w	800a69e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	68db      	ldr	r3, [r3, #12]
 800a592:	899b      	ldrh	r3, [r3, #12]
 800a594:	b29b      	uxth	r3, r3
 800a596:	4618      	mov	r0, r3
 800a598:	f7fa fa7e 	bl	8004a98 <lwip_htons>
 800a59c:	4603      	mov	r3, r0
 800a59e:	b2db      	uxtb	r3, r3
 800a5a0:	f003 0301 	and.w	r3, r3, #1
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d022      	beq.n	800a5ee <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	68db      	ldr	r3, [r3, #12]
 800a5ae:	899b      	ldrh	r3, [r3, #12]
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	b21b      	sxth	r3, r3
 800a5b4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a5b8:	b21c      	sxth	r4, r3
 800a5ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	68db      	ldr	r3, [r3, #12]
 800a5c0:	899b      	ldrh	r3, [r3, #12]
 800a5c2:	b29b      	uxth	r3, r3
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f7fa fa67 	bl	8004a98 <lwip_htons>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	b2db      	uxtb	r3, r3
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f7fa fa5e 	bl	8004a98 <lwip_htons>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	b21b      	sxth	r3, r3
 800a5e0:	4323      	orrs	r3, r4
 800a5e2:	b21a      	sxth	r2, r3
 800a5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	68db      	ldr	r3, [r3, #12]
 800a5ea:	b292      	uxth	r2, r2
 800a5ec:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f2:	b29a      	uxth	r2, r3
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5f8:	4413      	add	r3, r2
 800a5fa:	b299      	uxth	r1, r3
 800a5fc:	4b3c      	ldr	r3, [pc, #240]	; (800a6f0 <tcp_receive+0xf14>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	b29a      	uxth	r2, r3
 800a602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	1a8a      	subs	r2, r1, r2
 800a608:	b292      	uxth	r2, r2
 800a60a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a60c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	685a      	ldr	r2, [r3, #4]
 800a612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	891b      	ldrh	r3, [r3, #8]
 800a618:	4619      	mov	r1, r3
 800a61a:	4610      	mov	r0, r2
 800a61c:	f7fb fbd4 	bl	8005dc8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	891c      	ldrh	r4, [r3, #8]
 800a626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	68db      	ldr	r3, [r3, #12]
 800a62c:	899b      	ldrh	r3, [r3, #12]
 800a62e:	b29b      	uxth	r3, r3
 800a630:	4618      	mov	r0, r3
 800a632:	f7fa fa31 	bl	8004a98 <lwip_htons>
 800a636:	4603      	mov	r3, r0
 800a638:	b2db      	uxtb	r3, r3
 800a63a:	f003 0303 	and.w	r3, r3, #3
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d001      	beq.n	800a646 <tcp_receive+0xe6a>
 800a642:	2301      	movs	r3, #1
 800a644:	e000      	b.n	800a648 <tcp_receive+0xe6c>
 800a646:	2300      	movs	r3, #0
 800a648:	4423      	add	r3, r4
 800a64a:	b29a      	uxth	r2, r3
 800a64c:	4b2a      	ldr	r3, [pc, #168]	; (800a6f8 <tcp_receive+0xf1c>)
 800a64e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a650:	4b29      	ldr	r3, [pc, #164]	; (800a6f8 <tcp_receive+0xf1c>)
 800a652:	881b      	ldrh	r3, [r3, #0]
 800a654:	461a      	mov	r2, r3
 800a656:	4b26      	ldr	r3, [pc, #152]	; (800a6f0 <tcp_receive+0xf14>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	441a      	add	r2, r3
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a660:	6879      	ldr	r1, [r7, #4]
 800a662:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a664:	440b      	add	r3, r1
 800a666:	429a      	cmp	r2, r3
 800a668:	d019      	beq.n	800a69e <tcp_receive+0xec2>
 800a66a:	4b24      	ldr	r3, [pc, #144]	; (800a6fc <tcp_receive+0xf20>)
 800a66c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800a670:	4923      	ldr	r1, [pc, #140]	; (800a700 <tcp_receive+0xf24>)
 800a672:	4824      	ldr	r0, [pc, #144]	; (800a704 <tcp_receive+0xf28>)
 800a674:	f004 fe38 	bl	800f2e8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a678:	e011      	b.n	800a69e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a682:	2b00      	cmp	r3, #0
 800a684:	f47f aea4 	bne.w	800a3d0 <tcp_receive+0xbf4>
 800a688:	e00a      	b.n	800a6a0 <tcp_receive+0xec4>
                break;
 800a68a:	bf00      	nop
 800a68c:	e008      	b.n	800a6a0 <tcp_receive+0xec4>
                break;
 800a68e:	bf00      	nop
 800a690:	e006      	b.n	800a6a0 <tcp_receive+0xec4>
                  break;
 800a692:	bf00      	nop
 800a694:	e004      	b.n	800a6a0 <tcp_receive+0xec4>
                  break;
 800a696:	bf00      	nop
 800a698:	e002      	b.n	800a6a0 <tcp_receive+0xec4>
                  break;
 800a69a:	bf00      	nop
 800a69c:	e000      	b.n	800a6a0 <tcp_receive+0xec4>
                break;
 800a69e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f001 fe8b 	bl	800c3bc <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800a6a6:	e003      	b.n	800a6b0 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f001 fe87 	bl	800c3bc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a6ae:	e01a      	b.n	800a6e6 <tcp_receive+0xf0a>
 800a6b0:	e019      	b.n	800a6e6 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a6b2:	4b0f      	ldr	r3, [pc, #60]	; (800a6f0 <tcp_receive+0xf14>)
 800a6b4:	681a      	ldr	r2, [r3, #0]
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ba:	1ad3      	subs	r3, r2, r3
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	db0a      	blt.n	800a6d6 <tcp_receive+0xefa>
 800a6c0:	4b0b      	ldr	r3, [pc, #44]	; (800a6f0 <tcp_receive+0xf14>)
 800a6c2:	681a      	ldr	r2, [r3, #0]
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c8:	6879      	ldr	r1, [r7, #4]
 800a6ca:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a6cc:	440b      	add	r3, r1
 800a6ce:	1ad3      	subs	r3, r2, r3
 800a6d0:	3301      	adds	r3, #1
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	dd07      	ble.n	800a6e6 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	8b5b      	ldrh	r3, [r3, #26]
 800a6da:	f043 0302 	orr.w	r3, r3, #2
 800a6de:	b29a      	uxth	r2, r3
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800a6e4:	e7ff      	b.n	800a6e6 <tcp_receive+0xf0a>
 800a6e6:	bf00      	nop
 800a6e8:	3750      	adds	r7, #80	; 0x50
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bdb0      	pop	{r4, r5, r7, pc}
 800a6ee:	bf00      	nop
 800a6f0:	2000054c 	.word	0x2000054c
 800a6f4:	2000052c 	.word	0x2000052c
 800a6f8:	20000556 	.word	0x20000556
 800a6fc:	08011bf8 	.word	0x08011bf8
 800a700:	08011fa0 	.word	0x08011fa0
 800a704:	08011c44 	.word	0x08011c44

0800a708 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800a708:	b480      	push	{r7}
 800a70a:	b083      	sub	sp, #12
 800a70c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800a70e:	4b15      	ldr	r3, [pc, #84]	; (800a764 <tcp_get_next_optbyte+0x5c>)
 800a710:	881b      	ldrh	r3, [r3, #0]
 800a712:	1c5a      	adds	r2, r3, #1
 800a714:	b291      	uxth	r1, r2
 800a716:	4a13      	ldr	r2, [pc, #76]	; (800a764 <tcp_get_next_optbyte+0x5c>)
 800a718:	8011      	strh	r1, [r2, #0]
 800a71a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a71c:	4b12      	ldr	r3, [pc, #72]	; (800a768 <tcp_get_next_optbyte+0x60>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d004      	beq.n	800a72e <tcp_get_next_optbyte+0x26>
 800a724:	4b11      	ldr	r3, [pc, #68]	; (800a76c <tcp_get_next_optbyte+0x64>)
 800a726:	881b      	ldrh	r3, [r3, #0]
 800a728:	88fa      	ldrh	r2, [r7, #6]
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d208      	bcs.n	800a740 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a72e:	4b10      	ldr	r3, [pc, #64]	; (800a770 <tcp_get_next_optbyte+0x68>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	3314      	adds	r3, #20
 800a734:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800a736:	88fb      	ldrh	r3, [r7, #6]
 800a738:	683a      	ldr	r2, [r7, #0]
 800a73a:	4413      	add	r3, r2
 800a73c:	781b      	ldrb	r3, [r3, #0]
 800a73e:	e00b      	b.n	800a758 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a740:	88fb      	ldrh	r3, [r7, #6]
 800a742:	b2da      	uxtb	r2, r3
 800a744:	4b09      	ldr	r3, [pc, #36]	; (800a76c <tcp_get_next_optbyte+0x64>)
 800a746:	881b      	ldrh	r3, [r3, #0]
 800a748:	b2db      	uxtb	r3, r3
 800a74a:	1ad3      	subs	r3, r2, r3
 800a74c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800a74e:	4b06      	ldr	r3, [pc, #24]	; (800a768 <tcp_get_next_optbyte+0x60>)
 800a750:	681a      	ldr	r2, [r3, #0]
 800a752:	797b      	ldrb	r3, [r7, #5]
 800a754:	4413      	add	r3, r2
 800a756:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a758:	4618      	mov	r0, r3
 800a75a:	370c      	adds	r7, #12
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr
 800a764:	20000548 	.word	0x20000548
 800a768:	20000544 	.word	0x20000544
 800a76c:	20000542 	.word	0x20000542
 800a770:	2000053c 	.word	0x2000053c

0800a774 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b084      	sub	sp, #16
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d106      	bne.n	800a790 <tcp_parseopt+0x1c>
 800a782:	4b32      	ldr	r3, [pc, #200]	; (800a84c <tcp_parseopt+0xd8>)
 800a784:	f240 727d 	movw	r2, #1917	; 0x77d
 800a788:	4931      	ldr	r1, [pc, #196]	; (800a850 <tcp_parseopt+0xdc>)
 800a78a:	4832      	ldr	r0, [pc, #200]	; (800a854 <tcp_parseopt+0xe0>)
 800a78c:	f004 fdac 	bl	800f2e8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a790:	4b31      	ldr	r3, [pc, #196]	; (800a858 <tcp_parseopt+0xe4>)
 800a792:	881b      	ldrh	r3, [r3, #0]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d055      	beq.n	800a844 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a798:	4b30      	ldr	r3, [pc, #192]	; (800a85c <tcp_parseopt+0xe8>)
 800a79a:	2200      	movs	r2, #0
 800a79c:	801a      	strh	r2, [r3, #0]
 800a79e:	e045      	b.n	800a82c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800a7a0:	f7ff ffb2 	bl	800a708 <tcp_get_next_optbyte>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800a7a8:	7bfb      	ldrb	r3, [r7, #15]
 800a7aa:	2b02      	cmp	r3, #2
 800a7ac:	d006      	beq.n	800a7bc <tcp_parseopt+0x48>
 800a7ae:	2b02      	cmp	r3, #2
 800a7b0:	dc2b      	bgt.n	800a80a <tcp_parseopt+0x96>
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d041      	beq.n	800a83a <tcp_parseopt+0xc6>
 800a7b6:	2b01      	cmp	r3, #1
 800a7b8:	d127      	bne.n	800a80a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800a7ba:	e037      	b.n	800a82c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a7bc:	f7ff ffa4 	bl	800a708 <tcp_get_next_optbyte>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	2b04      	cmp	r3, #4
 800a7c4:	d13b      	bne.n	800a83e <tcp_parseopt+0xca>
 800a7c6:	4b25      	ldr	r3, [pc, #148]	; (800a85c <tcp_parseopt+0xe8>)
 800a7c8:	881b      	ldrh	r3, [r3, #0]
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	4a22      	ldr	r2, [pc, #136]	; (800a858 <tcp_parseopt+0xe4>)
 800a7ce:	8812      	ldrh	r2, [r2, #0]
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	da34      	bge.n	800a83e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a7d4:	f7ff ff98 	bl	800a708 <tcp_get_next_optbyte>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	021b      	lsls	r3, r3, #8
 800a7de:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800a7e0:	f7ff ff92 	bl	800a708 <tcp_get_next_optbyte>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	b29a      	uxth	r2, r3
 800a7e8:	89bb      	ldrh	r3, [r7, #12]
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a7ee:	89bb      	ldrh	r3, [r7, #12]
 800a7f0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a7f4:	d804      	bhi.n	800a800 <tcp_parseopt+0x8c>
 800a7f6:	89bb      	ldrh	r3, [r7, #12]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d001      	beq.n	800a800 <tcp_parseopt+0x8c>
 800a7fc:	89ba      	ldrh	r2, [r7, #12]
 800a7fe:	e001      	b.n	800a804 <tcp_parseopt+0x90>
 800a800:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800a808:	e010      	b.n	800a82c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800a80a:	f7ff ff7d 	bl	800a708 <tcp_get_next_optbyte>
 800a80e:	4603      	mov	r3, r0
 800a810:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800a812:	7afb      	ldrb	r3, [r7, #11]
 800a814:	2b01      	cmp	r3, #1
 800a816:	d914      	bls.n	800a842 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800a818:	7afb      	ldrb	r3, [r7, #11]
 800a81a:	b29a      	uxth	r2, r3
 800a81c:	4b0f      	ldr	r3, [pc, #60]	; (800a85c <tcp_parseopt+0xe8>)
 800a81e:	881b      	ldrh	r3, [r3, #0]
 800a820:	4413      	add	r3, r2
 800a822:	b29b      	uxth	r3, r3
 800a824:	3b02      	subs	r3, #2
 800a826:	b29a      	uxth	r2, r3
 800a828:	4b0c      	ldr	r3, [pc, #48]	; (800a85c <tcp_parseopt+0xe8>)
 800a82a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a82c:	4b0b      	ldr	r3, [pc, #44]	; (800a85c <tcp_parseopt+0xe8>)
 800a82e:	881a      	ldrh	r2, [r3, #0]
 800a830:	4b09      	ldr	r3, [pc, #36]	; (800a858 <tcp_parseopt+0xe4>)
 800a832:	881b      	ldrh	r3, [r3, #0]
 800a834:	429a      	cmp	r2, r3
 800a836:	d3b3      	bcc.n	800a7a0 <tcp_parseopt+0x2c>
 800a838:	e004      	b.n	800a844 <tcp_parseopt+0xd0>
          return;
 800a83a:	bf00      	nop
 800a83c:	e002      	b.n	800a844 <tcp_parseopt+0xd0>
            return;
 800a83e:	bf00      	nop
 800a840:	e000      	b.n	800a844 <tcp_parseopt+0xd0>
            return;
 800a842:	bf00      	nop
      }
    }
  }
}
 800a844:	3710      	adds	r7, #16
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}
 800a84a:	bf00      	nop
 800a84c:	08011bf8 	.word	0x08011bf8
 800a850:	0801205c 	.word	0x0801205c
 800a854:	08011c44 	.word	0x08011c44
 800a858:	20000540 	.word	0x20000540
 800a85c:	20000548 	.word	0x20000548

0800a860 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800a860:	b480      	push	{r7}
 800a862:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800a864:	4b05      	ldr	r3, [pc, #20]	; (800a87c <tcp_trigger_input_pcb_close+0x1c>)
 800a866:	781b      	ldrb	r3, [r3, #0]
 800a868:	f043 0310 	orr.w	r3, r3, #16
 800a86c:	b2da      	uxtb	r2, r3
 800a86e:	4b03      	ldr	r3, [pc, #12]	; (800a87c <tcp_trigger_input_pcb_close+0x1c>)
 800a870:	701a      	strb	r2, [r3, #0]
}
 800a872:	bf00      	nop
 800a874:	46bd      	mov	sp, r7
 800a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87a:	4770      	bx	lr
 800a87c:	20000559 	.word	0x20000559

0800a880 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b084      	sub	sp, #16
 800a884:	af00      	add	r7, sp, #0
 800a886:	60f8      	str	r0, [r7, #12]
 800a888:	60b9      	str	r1, [r7, #8]
 800a88a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d00a      	beq.n	800a8a8 <tcp_route+0x28>
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	7a1b      	ldrb	r3, [r3, #8]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d006      	beq.n	800a8a8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	7a1b      	ldrb	r3, [r3, #8]
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f7fb f8b8 	bl	8005a14 <netif_get_by_index>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	e003      	b.n	800a8b0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f003 fad5 	bl	800de58 <ip4_route>
 800a8ae:	4603      	mov	r3, r0
  }
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3710      	adds	r7, #16
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800a8b8:	b590      	push	{r4, r7, lr}
 800a8ba:	b087      	sub	sp, #28
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	60f8      	str	r0, [r7, #12]
 800a8c0:	60b9      	str	r1, [r7, #8]
 800a8c2:	603b      	str	r3, [r7, #0]
 800a8c4:	4613      	mov	r3, r2
 800a8c6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d105      	bne.n	800a8da <tcp_create_segment+0x22>
 800a8ce:	4b44      	ldr	r3, [pc, #272]	; (800a9e0 <tcp_create_segment+0x128>)
 800a8d0:	22a3      	movs	r2, #163	; 0xa3
 800a8d2:	4944      	ldr	r1, [pc, #272]	; (800a9e4 <tcp_create_segment+0x12c>)
 800a8d4:	4844      	ldr	r0, [pc, #272]	; (800a9e8 <tcp_create_segment+0x130>)
 800a8d6:	f004 fd07 	bl	800f2e8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d105      	bne.n	800a8ec <tcp_create_segment+0x34>
 800a8e0:	4b3f      	ldr	r3, [pc, #252]	; (800a9e0 <tcp_create_segment+0x128>)
 800a8e2:	22a4      	movs	r2, #164	; 0xa4
 800a8e4:	4941      	ldr	r1, [pc, #260]	; (800a9ec <tcp_create_segment+0x134>)
 800a8e6:	4840      	ldr	r0, [pc, #256]	; (800a9e8 <tcp_create_segment+0x130>)
 800a8e8:	f004 fcfe 	bl	800f2e8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a8ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a8f0:	009b      	lsls	r3, r3, #2
 800a8f2:	b2db      	uxtb	r3, r3
 800a8f4:	f003 0304 	and.w	r3, r3, #4
 800a8f8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a8fa:	2003      	movs	r0, #3
 800a8fc:	f7fa fd8c 	bl	8005418 <memp_malloc>
 800a900:	6138      	str	r0, [r7, #16]
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d104      	bne.n	800a912 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800a908:	68b8      	ldr	r0, [r7, #8]
 800a90a:	f7fb fbe3 	bl	80060d4 <pbuf_free>
    return NULL;
 800a90e:	2300      	movs	r3, #0
 800a910:	e061      	b.n	800a9d6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a918:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	2200      	movs	r2, #0
 800a91e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	68ba      	ldr	r2, [r7, #8]
 800a924:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	891a      	ldrh	r2, [r3, #8]
 800a92a:	7dfb      	ldrb	r3, [r7, #23]
 800a92c:	b29b      	uxth	r3, r3
 800a92e:	429a      	cmp	r2, r3
 800a930:	d205      	bcs.n	800a93e <tcp_create_segment+0x86>
 800a932:	4b2b      	ldr	r3, [pc, #172]	; (800a9e0 <tcp_create_segment+0x128>)
 800a934:	22b0      	movs	r2, #176	; 0xb0
 800a936:	492e      	ldr	r1, [pc, #184]	; (800a9f0 <tcp_create_segment+0x138>)
 800a938:	482b      	ldr	r0, [pc, #172]	; (800a9e8 <tcp_create_segment+0x130>)
 800a93a:	f004 fcd5 	bl	800f2e8 <iprintf>
  seg->len = p->tot_len - optlen;
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	891a      	ldrh	r2, [r3, #8]
 800a942:	7dfb      	ldrb	r3, [r7, #23]
 800a944:	b29b      	uxth	r3, r3
 800a946:	1ad3      	subs	r3, r2, r3
 800a948:	b29a      	uxth	r2, r3
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800a94e:	2114      	movs	r1, #20
 800a950:	68b8      	ldr	r0, [r7, #8]
 800a952:	f7fb fb29 	bl	8005fa8 <pbuf_add_header>
 800a956:	4603      	mov	r3, r0
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d004      	beq.n	800a966 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800a95c:	6938      	ldr	r0, [r7, #16]
 800a95e:	f7fc ffe6 	bl	800792e <tcp_seg_free>
    return NULL;
 800a962:	2300      	movs	r3, #0
 800a964:	e037      	b.n	800a9d6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	685b      	ldr	r3, [r3, #4]
 800a96a:	685a      	ldr	r2, [r3, #4]
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	8ada      	ldrh	r2, [r3, #22]
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	68dc      	ldr	r4, [r3, #12]
 800a978:	4610      	mov	r0, r2
 800a97a:	f7fa f88d 	bl	8004a98 <lwip_htons>
 800a97e:	4603      	mov	r3, r0
 800a980:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	8b1a      	ldrh	r2, [r3, #24]
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	68dc      	ldr	r4, [r3, #12]
 800a98a:	4610      	mov	r0, r2
 800a98c:	f7fa f884 	bl	8004a98 <lwip_htons>
 800a990:	4603      	mov	r3, r0
 800a992:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	68dc      	ldr	r4, [r3, #12]
 800a998:	6838      	ldr	r0, [r7, #0]
 800a99a:	f7fa f892 	bl	8004ac2 <lwip_htonl>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800a9a2:	7dfb      	ldrb	r3, [r7, #23]
 800a9a4:	089b      	lsrs	r3, r3, #2
 800a9a6:	b2db      	uxtb	r3, r3
 800a9a8:	b29b      	uxth	r3, r3
 800a9aa:	3305      	adds	r3, #5
 800a9ac:	b29b      	uxth	r3, r3
 800a9ae:	031b      	lsls	r3, r3, #12
 800a9b0:	b29a      	uxth	r2, r3
 800a9b2:	79fb      	ldrb	r3, [r7, #7]
 800a9b4:	b29b      	uxth	r3, r3
 800a9b6:	4313      	orrs	r3, r2
 800a9b8:	b29a      	uxth	r2, r3
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	68dc      	ldr	r4, [r3, #12]
 800a9be:	4610      	mov	r0, r2
 800a9c0:	f7fa f86a 	bl	8004a98 <lwip_htons>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	68db      	ldr	r3, [r3, #12]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	749a      	strb	r2, [r3, #18]
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	74da      	strb	r2, [r3, #19]
  return seg;
 800a9d4:	693b      	ldr	r3, [r7, #16]
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	371c      	adds	r7, #28
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd90      	pop	{r4, r7, pc}
 800a9de:	bf00      	nop
 800a9e0:	08012078 	.word	0x08012078
 800a9e4:	080120ac 	.word	0x080120ac
 800a9e8:	080120cc 	.word	0x080120cc
 800a9ec:	080120f4 	.word	0x080120f4
 800a9f0:	08012118 	.word	0x08012118

0800a9f4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b086      	sub	sp, #24
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	607b      	str	r3, [r7, #4]
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	73fb      	strb	r3, [r7, #15]
 800aa00:	460b      	mov	r3, r1
 800aa02:	81bb      	strh	r3, [r7, #12]
 800aa04:	4613      	mov	r3, r2
 800aa06:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800aa08:	89bb      	ldrh	r3, [r7, #12]
 800aa0a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d105      	bne.n	800aa1e <tcp_pbuf_prealloc+0x2a>
 800aa12:	4b30      	ldr	r3, [pc, #192]	; (800aad4 <tcp_pbuf_prealloc+0xe0>)
 800aa14:	22e8      	movs	r2, #232	; 0xe8
 800aa16:	4930      	ldr	r1, [pc, #192]	; (800aad8 <tcp_pbuf_prealloc+0xe4>)
 800aa18:	4830      	ldr	r0, [pc, #192]	; (800aadc <tcp_pbuf_prealloc+0xe8>)
 800aa1a:	f004 fc65 	bl	800f2e8 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800aa1e:	6a3b      	ldr	r3, [r7, #32]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d105      	bne.n	800aa30 <tcp_pbuf_prealloc+0x3c>
 800aa24:	4b2b      	ldr	r3, [pc, #172]	; (800aad4 <tcp_pbuf_prealloc+0xe0>)
 800aa26:	22e9      	movs	r2, #233	; 0xe9
 800aa28:	492d      	ldr	r1, [pc, #180]	; (800aae0 <tcp_pbuf_prealloc+0xec>)
 800aa2a:	482c      	ldr	r0, [pc, #176]	; (800aadc <tcp_pbuf_prealloc+0xe8>)
 800aa2c:	f004 fc5c 	bl	800f2e8 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800aa30:	89ba      	ldrh	r2, [r7, #12]
 800aa32:	897b      	ldrh	r3, [r7, #10]
 800aa34:	429a      	cmp	r2, r3
 800aa36:	d221      	bcs.n	800aa7c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800aa38:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800aa3c:	f003 0302 	and.w	r3, r3, #2
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d111      	bne.n	800aa68 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800aa44:	6a3b      	ldr	r3, [r7, #32]
 800aa46:	8b5b      	ldrh	r3, [r3, #26]
 800aa48:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d115      	bne.n	800aa7c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800aa50:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d007      	beq.n	800aa68 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800aa58:	6a3b      	ldr	r3, [r7, #32]
 800aa5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d103      	bne.n	800aa68 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800aa60:	6a3b      	ldr	r3, [r7, #32]
 800aa62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d009      	beq.n	800aa7c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800aa68:	89bb      	ldrh	r3, [r7, #12]
 800aa6a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800aa6e:	f023 0203 	bic.w	r2, r3, #3
 800aa72:	897b      	ldrh	r3, [r7, #10]
 800aa74:	4293      	cmp	r3, r2
 800aa76:	bf28      	it	cs
 800aa78:	4613      	movcs	r3, r2
 800aa7a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800aa7c:	8af9      	ldrh	r1, [r7, #22]
 800aa7e:	7bfb      	ldrb	r3, [r7, #15]
 800aa80:	f44f 7220 	mov.w	r2, #640	; 0x280
 800aa84:	4618      	mov	r0, r3
 800aa86:	f7fb f841 	bl	8005b0c <pbuf_alloc>
 800aa8a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d101      	bne.n	800aa96 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800aa92:	2300      	movs	r3, #0
 800aa94:	e019      	b.n	800aaca <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d006      	beq.n	800aaac <tcp_pbuf_prealloc+0xb8>
 800aa9e:	4b0d      	ldr	r3, [pc, #52]	; (800aad4 <tcp_pbuf_prealloc+0xe0>)
 800aaa0:	f240 120b 	movw	r2, #267	; 0x10b
 800aaa4:	490f      	ldr	r1, [pc, #60]	; (800aae4 <tcp_pbuf_prealloc+0xf0>)
 800aaa6:	480d      	ldr	r0, [pc, #52]	; (800aadc <tcp_pbuf_prealloc+0xe8>)
 800aaa8:	f004 fc1e 	bl	800f2e8 <iprintf>
  *oversize = p->len - length;
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	895a      	ldrh	r2, [r3, #10]
 800aab0:	89bb      	ldrh	r3, [r7, #12]
 800aab2:	1ad3      	subs	r3, r2, r3
 800aab4:	b29a      	uxth	r2, r3
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	89ba      	ldrh	r2, [r7, #12]
 800aabe:	811a      	strh	r2, [r3, #8]
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	891a      	ldrh	r2, [r3, #8]
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	815a      	strh	r2, [r3, #10]
  return p;
 800aac8:	693b      	ldr	r3, [r7, #16]
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3718      	adds	r7, #24
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}
 800aad2:	bf00      	nop
 800aad4:	08012078 	.word	0x08012078
 800aad8:	08012130 	.word	0x08012130
 800aadc:	080120cc 	.word	0x080120cc
 800aae0:	08012154 	.word	0x08012154
 800aae4:	08012174 	.word	0x08012174

0800aae8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b082      	sub	sp, #8
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
 800aaf0:	460b      	mov	r3, r1
 800aaf2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d106      	bne.n	800ab08 <tcp_write_checks+0x20>
 800aafa:	4b33      	ldr	r3, [pc, #204]	; (800abc8 <tcp_write_checks+0xe0>)
 800aafc:	f240 1233 	movw	r2, #307	; 0x133
 800ab00:	4932      	ldr	r1, [pc, #200]	; (800abcc <tcp_write_checks+0xe4>)
 800ab02:	4833      	ldr	r0, [pc, #204]	; (800abd0 <tcp_write_checks+0xe8>)
 800ab04:	f004 fbf0 	bl	800f2e8 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	7d1b      	ldrb	r3, [r3, #20]
 800ab0c:	2b04      	cmp	r3, #4
 800ab0e:	d00e      	beq.n	800ab2e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800ab14:	2b07      	cmp	r3, #7
 800ab16:	d00a      	beq.n	800ab2e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800ab1c:	2b02      	cmp	r3, #2
 800ab1e:	d006      	beq.n	800ab2e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800ab24:	2b03      	cmp	r3, #3
 800ab26:	d002      	beq.n	800ab2e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800ab28:	f06f 030a 	mvn.w	r3, #10
 800ab2c:	e048      	b.n	800abc0 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800ab2e:	887b      	ldrh	r3, [r7, #2]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d101      	bne.n	800ab38 <tcp_write_checks+0x50>
    return ERR_OK;
 800ab34:	2300      	movs	r3, #0
 800ab36:	e043      	b.n	800abc0 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ab3e:	887a      	ldrh	r2, [r7, #2]
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d909      	bls.n	800ab58 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	8b5b      	ldrh	r3, [r3, #26]
 800ab48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab4c:	b29a      	uxth	r2, r3
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800ab52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab56:	e033      	b.n	800abc0 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ab5e:	2b08      	cmp	r3, #8
 800ab60:	d909      	bls.n	800ab76 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	8b5b      	ldrh	r3, [r3, #26]
 800ab66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab6a:	b29a      	uxth	r2, r3
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800ab70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab74:	e024      	b.n	800abc0 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d00f      	beq.n	800aba0 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d11a      	bne.n	800abbe <tcp_write_checks+0xd6>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d116      	bne.n	800abbe <tcp_write_checks+0xd6>
 800ab90:	4b0d      	ldr	r3, [pc, #52]	; (800abc8 <tcp_write_checks+0xe0>)
 800ab92:	f240 1255 	movw	r2, #341	; 0x155
 800ab96:	490f      	ldr	r1, [pc, #60]	; (800abd4 <tcp_write_checks+0xec>)
 800ab98:	480d      	ldr	r0, [pc, #52]	; (800abd0 <tcp_write_checks+0xe8>)
 800ab9a:	f004 fba5 	bl	800f2e8 <iprintf>
 800ab9e:	e00e      	b.n	800abbe <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d103      	bne.n	800abb0 <tcp_write_checks+0xc8>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abac:	2b00      	cmp	r3, #0
 800abae:	d006      	beq.n	800abbe <tcp_write_checks+0xd6>
 800abb0:	4b05      	ldr	r3, [pc, #20]	; (800abc8 <tcp_write_checks+0xe0>)
 800abb2:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800abb6:	4908      	ldr	r1, [pc, #32]	; (800abd8 <tcp_write_checks+0xf0>)
 800abb8:	4805      	ldr	r0, [pc, #20]	; (800abd0 <tcp_write_checks+0xe8>)
 800abba:	f004 fb95 	bl	800f2e8 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800abbe:	2300      	movs	r3, #0
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3708      	adds	r7, #8
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}
 800abc8:	08012078 	.word	0x08012078
 800abcc:	08012188 	.word	0x08012188
 800abd0:	080120cc 	.word	0x080120cc
 800abd4:	080121a8 	.word	0x080121a8
 800abd8:	080121e4 	.word	0x080121e4

0800abdc <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800abdc:	b590      	push	{r4, r7, lr}
 800abde:	b09b      	sub	sp, #108	; 0x6c
 800abe0:	af04      	add	r7, sp, #16
 800abe2:	60f8      	str	r0, [r7, #12]
 800abe4:	60b9      	str	r1, [r7, #8]
 800abe6:	4611      	mov	r1, r2
 800abe8:	461a      	mov	r2, r3
 800abea:	460b      	mov	r3, r1
 800abec:	80fb      	strh	r3, [r7, #6]
 800abee:	4613      	mov	r3, r2
 800abf0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800abf2:	2300      	movs	r3, #0
 800abf4:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800abf6:	2300      	movs	r3, #0
 800abf8:	653b      	str	r3, [r7, #80]	; 0x50
 800abfa:	2300      	movs	r3, #0
 800abfc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800abfe:	2300      	movs	r3, #0
 800ac00:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac02:	2300      	movs	r3, #0
 800ac04:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800ac06:	2300      	movs	r3, #0
 800ac08:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800ac12:	2300      	movs	r3, #0
 800ac14:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800ac16:	2300      	movs	r3, #0
 800ac18:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d109      	bne.n	800ac38 <tcp_write+0x5c>
 800ac24:	4ba4      	ldr	r3, [pc, #656]	; (800aeb8 <tcp_write+0x2dc>)
 800ac26:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800ac2a:	49a4      	ldr	r1, [pc, #656]	; (800aebc <tcp_write+0x2e0>)
 800ac2c:	48a4      	ldr	r0, [pc, #656]	; (800aec0 <tcp_write+0x2e4>)
 800ac2e:	f004 fb5b 	bl	800f2e8 <iprintf>
 800ac32:	f06f 030f 	mvn.w	r3, #15
 800ac36:	e32a      	b.n	800b28e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ac3e:	085b      	lsrs	r3, r3, #1
 800ac40:	b29a      	uxth	r2, r3
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac46:	4293      	cmp	r3, r2
 800ac48:	bf28      	it	cs
 800ac4a:	4613      	movcs	r3, r2
 800ac4c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800ac4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d102      	bne.n	800ac5a <tcp_write+0x7e>
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac58:	e000      	b.n	800ac5c <tcp_write+0x80>
 800ac5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac5c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d109      	bne.n	800ac78 <tcp_write+0x9c>
 800ac64:	4b94      	ldr	r3, [pc, #592]	; (800aeb8 <tcp_write+0x2dc>)
 800ac66:	f240 12ad 	movw	r2, #429	; 0x1ad
 800ac6a:	4996      	ldr	r1, [pc, #600]	; (800aec4 <tcp_write+0x2e8>)
 800ac6c:	4894      	ldr	r0, [pc, #592]	; (800aec0 <tcp_write+0x2e4>)
 800ac6e:	f004 fb3b 	bl	800f2e8 <iprintf>
 800ac72:	f06f 030f 	mvn.w	r3, #15
 800ac76:	e30a      	b.n	800b28e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800ac78:	88fb      	ldrh	r3, [r7, #6]
 800ac7a:	4619      	mov	r1, r3
 800ac7c:	68f8      	ldr	r0, [r7, #12]
 800ac7e:	f7ff ff33 	bl	800aae8 <tcp_write_checks>
 800ac82:	4603      	mov	r3, r0
 800ac84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800ac88:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d002      	beq.n	800ac96 <tcp_write+0xba>
    return err;
 800ac90:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800ac94:	e2fb      	b.n	800b28e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ac9c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800aca0:	2300      	movs	r3, #0
 800aca2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acaa:	2b00      	cmp	r3, #0
 800acac:	f000 80f6 	beq.w	800ae9c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acb4:	653b      	str	r3, [r7, #80]	; 0x50
 800acb6:	e002      	b.n	800acbe <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800acb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800acbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d1f8      	bne.n	800acb8 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800acc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acc8:	7a9b      	ldrb	r3, [r3, #10]
 800acca:	009b      	lsls	r3, r3, #2
 800accc:	b29b      	uxth	r3, r3
 800acce:	f003 0304 	and.w	r3, r3, #4
 800acd2:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800acd4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800acd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acd8:	891b      	ldrh	r3, [r3, #8]
 800acda:	4619      	mov	r1, r3
 800acdc:	8c3b      	ldrh	r3, [r7, #32]
 800acde:	440b      	add	r3, r1
 800ace0:	429a      	cmp	r2, r3
 800ace2:	da06      	bge.n	800acf2 <tcp_write+0x116>
 800ace4:	4b74      	ldr	r3, [pc, #464]	; (800aeb8 <tcp_write+0x2dc>)
 800ace6:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800acea:	4977      	ldr	r1, [pc, #476]	; (800aec8 <tcp_write+0x2ec>)
 800acec:	4874      	ldr	r0, [pc, #464]	; (800aec0 <tcp_write+0x2e4>)
 800acee:	f004 fafb 	bl	800f2e8 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800acf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acf4:	891a      	ldrh	r2, [r3, #8]
 800acf6:	8c3b      	ldrh	r3, [r7, #32]
 800acf8:	4413      	add	r3, r2
 800acfa:	b29b      	uxth	r3, r3
 800acfc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800acfe:	1ad3      	subs	r3, r2, r3
 800ad00:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ad08:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800ad0a:	8a7b      	ldrh	r3, [r7, #18]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d026      	beq.n	800ad5e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800ad10:	8a7b      	ldrh	r3, [r7, #18]
 800ad12:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d206      	bcs.n	800ad26 <tcp_write+0x14a>
 800ad18:	4b67      	ldr	r3, [pc, #412]	; (800aeb8 <tcp_write+0x2dc>)
 800ad1a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800ad1e:	496b      	ldr	r1, [pc, #428]	; (800aecc <tcp_write+0x2f0>)
 800ad20:	4867      	ldr	r0, [pc, #412]	; (800aec0 <tcp_write+0x2e4>)
 800ad22:	f004 fae1 	bl	800f2e8 <iprintf>
      seg = last_unsent;
 800ad26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad28:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800ad2a:	8a7b      	ldrh	r3, [r7, #18]
 800ad2c:	88fa      	ldrh	r2, [r7, #6]
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	bf28      	it	cs
 800ad32:	4613      	movcs	r3, r2
 800ad34:	b29b      	uxth	r3, r3
 800ad36:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	bf28      	it	cs
 800ad3c:	4613      	movcs	r3, r2
 800ad3e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800ad40:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ad44:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ad46:	4413      	add	r3, r2
 800ad48:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800ad4c:	8a7a      	ldrh	r2, [r7, #18]
 800ad4e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ad50:	1ad3      	subs	r3, r2, r3
 800ad52:	b29b      	uxth	r3, r3
 800ad54:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800ad56:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ad58:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ad5a:	1ad3      	subs	r3, r2, r3
 800ad5c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800ad5e:	8a7b      	ldrh	r3, [r7, #18]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d00b      	beq.n	800ad7c <tcp_write+0x1a0>
 800ad64:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ad68:	88fb      	ldrh	r3, [r7, #6]
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d006      	beq.n	800ad7c <tcp_write+0x1a0>
 800ad6e:	4b52      	ldr	r3, [pc, #328]	; (800aeb8 <tcp_write+0x2dc>)
 800ad70:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad74:	4956      	ldr	r1, [pc, #344]	; (800aed0 <tcp_write+0x2f4>)
 800ad76:	4852      	ldr	r0, [pc, #328]	; (800aec0 <tcp_write+0x2e4>)
 800ad78:	f004 fab6 	bl	800f2e8 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800ad7c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ad80:	88fb      	ldrh	r3, [r7, #6]
 800ad82:	429a      	cmp	r2, r3
 800ad84:	f080 8167 	bcs.w	800b056 <tcp_write+0x47a>
 800ad88:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	f000 8163 	beq.w	800b056 <tcp_write+0x47a>
 800ad90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad92:	891b      	ldrh	r3, [r3, #8]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	f000 815e 	beq.w	800b056 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800ad9a:	88fa      	ldrh	r2, [r7, #6]
 800ad9c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ada0:	1ad2      	subs	r2, r2, r3
 800ada2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ada4:	4293      	cmp	r3, r2
 800ada6:	bfa8      	it	ge
 800ada8:	4613      	movge	r3, r2
 800adaa:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800adac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adae:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800adb0:	797b      	ldrb	r3, [r7, #5]
 800adb2:	f003 0301 	and.w	r3, r3, #1
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d027      	beq.n	800ae0a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800adba:	f107 0012 	add.w	r0, r7, #18
 800adbe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800adc0:	8bf9      	ldrh	r1, [r7, #30]
 800adc2:	2301      	movs	r3, #1
 800adc4:	9302      	str	r3, [sp, #8]
 800adc6:	797b      	ldrb	r3, [r7, #5]
 800adc8:	9301      	str	r3, [sp, #4]
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	9300      	str	r3, [sp, #0]
 800adce:	4603      	mov	r3, r0
 800add0:	2000      	movs	r0, #0
 800add2:	f7ff fe0f 	bl	800a9f4 <tcp_pbuf_prealloc>
 800add6:	6578      	str	r0, [r7, #84]	; 0x54
 800add8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800adda:	2b00      	cmp	r3, #0
 800addc:	f000 8225 	beq.w	800b22a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800ade0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ade2:	6858      	ldr	r0, [r3, #4]
 800ade4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ade8:	68ba      	ldr	r2, [r7, #8]
 800adea:	4413      	add	r3, r2
 800adec:	8bfa      	ldrh	r2, [r7, #30]
 800adee:	4619      	mov	r1, r3
 800adf0:	f004 fa4a 	bl	800f288 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800adf4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800adf6:	f7fb f9f5 	bl	80061e4 <pbuf_clen>
 800adfa:	4603      	mov	r3, r0
 800adfc:	461a      	mov	r2, r3
 800adfe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ae02:	4413      	add	r3, r2
 800ae04:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800ae08:	e041      	b.n	800ae8e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800ae0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	637b      	str	r3, [r7, #52]	; 0x34
 800ae10:	e002      	b.n	800ae18 <tcp_write+0x23c>
 800ae12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	637b      	str	r3, [r7, #52]	; 0x34
 800ae18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d1f8      	bne.n	800ae12 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800ae20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae22:	7b1b      	ldrb	r3, [r3, #12]
 800ae24:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d115      	bne.n	800ae58 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800ae2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae2e:	685b      	ldr	r3, [r3, #4]
 800ae30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae32:	8952      	ldrh	r2, [r2, #10]
 800ae34:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800ae36:	68ba      	ldr	r2, [r7, #8]
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	d10d      	bne.n	800ae58 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800ae3c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d006      	beq.n	800ae52 <tcp_write+0x276>
 800ae44:	4b1c      	ldr	r3, [pc, #112]	; (800aeb8 <tcp_write+0x2dc>)
 800ae46:	f240 2231 	movw	r2, #561	; 0x231
 800ae4a:	4922      	ldr	r1, [pc, #136]	; (800aed4 <tcp_write+0x2f8>)
 800ae4c:	481c      	ldr	r0, [pc, #112]	; (800aec0 <tcp_write+0x2e4>)
 800ae4e:	f004 fa4b 	bl	800f2e8 <iprintf>
          extendlen = seglen;
 800ae52:	8bfb      	ldrh	r3, [r7, #30]
 800ae54:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800ae56:	e01a      	b.n	800ae8e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800ae58:	8bfb      	ldrh	r3, [r7, #30]
 800ae5a:	2201      	movs	r2, #1
 800ae5c:	4619      	mov	r1, r3
 800ae5e:	2000      	movs	r0, #0
 800ae60:	f7fa fe54 	bl	8005b0c <pbuf_alloc>
 800ae64:	6578      	str	r0, [r7, #84]	; 0x54
 800ae66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	f000 81e0 	beq.w	800b22e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800ae6e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ae72:	68ba      	ldr	r2, [r7, #8]
 800ae74:	441a      	add	r2, r3
 800ae76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae78:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800ae7a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ae7c:	f7fb f9b2 	bl	80061e4 <pbuf_clen>
 800ae80:	4603      	mov	r3, r0
 800ae82:	461a      	mov	r2, r3
 800ae84:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ae88:	4413      	add	r3, r2
 800ae8a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800ae8e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ae92:	8bfb      	ldrh	r3, [r7, #30]
 800ae94:	4413      	add	r3, r2
 800ae96:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800ae9a:	e0dc      	b.n	800b056 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	f000 80d7 	beq.w	800b056 <tcp_write+0x47a>
 800aea8:	4b03      	ldr	r3, [pc, #12]	; (800aeb8 <tcp_write+0x2dc>)
 800aeaa:	f240 224a 	movw	r2, #586	; 0x24a
 800aeae:	490a      	ldr	r1, [pc, #40]	; (800aed8 <tcp_write+0x2fc>)
 800aeb0:	4803      	ldr	r0, [pc, #12]	; (800aec0 <tcp_write+0x2e4>)
 800aeb2:	f004 fa19 	bl	800f2e8 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800aeb6:	e0ce      	b.n	800b056 <tcp_write+0x47a>
 800aeb8:	08012078 	.word	0x08012078
 800aebc:	08012218 	.word	0x08012218
 800aec0:	080120cc 	.word	0x080120cc
 800aec4:	08012230 	.word	0x08012230
 800aec8:	08012264 	.word	0x08012264
 800aecc:	0801227c 	.word	0x0801227c
 800aed0:	0801229c 	.word	0x0801229c
 800aed4:	080122bc 	.word	0x080122bc
 800aed8:	080122e8 	.word	0x080122e8
    struct pbuf *p;
    u16_t left = len - pos;
 800aedc:	88fa      	ldrh	r2, [r7, #6]
 800aede:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800aee2:	1ad3      	subs	r3, r2, r3
 800aee4:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800aee6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800aeea:	b29b      	uxth	r3, r3
 800aeec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800aeee:	1ad3      	subs	r3, r2, r3
 800aef0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800aef2:	8b7a      	ldrh	r2, [r7, #26]
 800aef4:	8bbb      	ldrh	r3, [r7, #28]
 800aef6:	4293      	cmp	r3, r2
 800aef8:	bf28      	it	cs
 800aefa:	4613      	movcs	r3, r2
 800aefc:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800aefe:	797b      	ldrb	r3, [r7, #5]
 800af00:	f003 0301 	and.w	r3, r3, #1
 800af04:	2b00      	cmp	r3, #0
 800af06:	d036      	beq.n	800af76 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800af08:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800af0c:	b29a      	uxth	r2, r3
 800af0e:	8b3b      	ldrh	r3, [r7, #24]
 800af10:	4413      	add	r3, r2
 800af12:	b299      	uxth	r1, r3
 800af14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af16:	2b00      	cmp	r3, #0
 800af18:	bf0c      	ite	eq
 800af1a:	2301      	moveq	r3, #1
 800af1c:	2300      	movne	r3, #0
 800af1e:	b2db      	uxtb	r3, r3
 800af20:	f107 0012 	add.w	r0, r7, #18
 800af24:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800af26:	9302      	str	r3, [sp, #8]
 800af28:	797b      	ldrb	r3, [r7, #5]
 800af2a:	9301      	str	r3, [sp, #4]
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	9300      	str	r3, [sp, #0]
 800af30:	4603      	mov	r3, r0
 800af32:	2036      	movs	r0, #54	; 0x36
 800af34:	f7ff fd5e 	bl	800a9f4 <tcp_pbuf_prealloc>
 800af38:	6338      	str	r0, [r7, #48]	; 0x30
 800af3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	f000 8178 	beq.w	800b232 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800af42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af44:	895b      	ldrh	r3, [r3, #10]
 800af46:	8b3a      	ldrh	r2, [r7, #24]
 800af48:	429a      	cmp	r2, r3
 800af4a:	d906      	bls.n	800af5a <tcp_write+0x37e>
 800af4c:	4b8c      	ldr	r3, [pc, #560]	; (800b180 <tcp_write+0x5a4>)
 800af4e:	f240 2266 	movw	r2, #614	; 0x266
 800af52:	498c      	ldr	r1, [pc, #560]	; (800b184 <tcp_write+0x5a8>)
 800af54:	488c      	ldr	r0, [pc, #560]	; (800b188 <tcp_write+0x5ac>)
 800af56:	f004 f9c7 	bl	800f2e8 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800af5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af5c:	685a      	ldr	r2, [r3, #4]
 800af5e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800af62:	18d0      	adds	r0, r2, r3
 800af64:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800af68:	68ba      	ldr	r2, [r7, #8]
 800af6a:	4413      	add	r3, r2
 800af6c:	8b3a      	ldrh	r2, [r7, #24]
 800af6e:	4619      	mov	r1, r3
 800af70:	f004 f98a 	bl	800f288 <memcpy>
 800af74:	e02f      	b.n	800afd6 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800af76:	8a7b      	ldrh	r3, [r7, #18]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d006      	beq.n	800af8a <tcp_write+0x3ae>
 800af7c:	4b80      	ldr	r3, [pc, #512]	; (800b180 <tcp_write+0x5a4>)
 800af7e:	f240 2271 	movw	r2, #625	; 0x271
 800af82:	4982      	ldr	r1, [pc, #520]	; (800b18c <tcp_write+0x5b0>)
 800af84:	4880      	ldr	r0, [pc, #512]	; (800b188 <tcp_write+0x5ac>)
 800af86:	f004 f9af 	bl	800f2e8 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800af8a:	8b3b      	ldrh	r3, [r7, #24]
 800af8c:	2201      	movs	r2, #1
 800af8e:	4619      	mov	r1, r3
 800af90:	2036      	movs	r0, #54	; 0x36
 800af92:	f7fa fdbb 	bl	8005b0c <pbuf_alloc>
 800af96:	6178      	str	r0, [r7, #20]
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	f000 814b 	beq.w	800b236 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800afa0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800afa4:	68ba      	ldr	r2, [r7, #8]
 800afa6:	441a      	add	r2, r3
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800afac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800afb0:	b29b      	uxth	r3, r3
 800afb2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800afb6:	4619      	mov	r1, r3
 800afb8:	2036      	movs	r0, #54	; 0x36
 800afba:	f7fa fda7 	bl	8005b0c <pbuf_alloc>
 800afbe:	6338      	str	r0, [r7, #48]	; 0x30
 800afc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d103      	bne.n	800afce <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800afc6:	6978      	ldr	r0, [r7, #20]
 800afc8:	f7fb f884 	bl	80060d4 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800afcc:	e136      	b.n	800b23c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800afce:	6979      	ldr	r1, [r7, #20]
 800afd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afd2:	f7fb f941 	bl	8006258 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800afd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afd8:	f7fb f904 	bl	80061e4 <pbuf_clen>
 800afdc:	4603      	mov	r3, r0
 800afde:	461a      	mov	r2, r3
 800afe0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800afe4:	4413      	add	r3, r2
 800afe6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800afea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800afee:	2b09      	cmp	r3, #9
 800aff0:	d903      	bls.n	800affa <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800aff2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aff4:	f7fb f86e 	bl	80060d4 <pbuf_free>
      goto memerr;
 800aff8:	e120      	b.n	800b23c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800affe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b002:	441a      	add	r2, r3
 800b004:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b008:	9300      	str	r3, [sp, #0]
 800b00a:	4613      	mov	r3, r2
 800b00c:	2200      	movs	r2, #0
 800b00e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b010:	68f8      	ldr	r0, [r7, #12]
 800b012:	f7ff fc51 	bl	800a8b8 <tcp_create_segment>
 800b016:	64f8      	str	r0, [r7, #76]	; 0x4c
 800b018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	f000 810d 	beq.w	800b23a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800b020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b022:	2b00      	cmp	r3, #0
 800b024:	d102      	bne.n	800b02c <tcp_write+0x450>
      queue = seg;
 800b026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b028:	647b      	str	r3, [r7, #68]	; 0x44
 800b02a:	e00c      	b.n	800b046 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800b02c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d106      	bne.n	800b040 <tcp_write+0x464>
 800b032:	4b53      	ldr	r3, [pc, #332]	; (800b180 <tcp_write+0x5a4>)
 800b034:	f240 22ab 	movw	r2, #683	; 0x2ab
 800b038:	4955      	ldr	r1, [pc, #340]	; (800b190 <tcp_write+0x5b4>)
 800b03a:	4853      	ldr	r0, [pc, #332]	; (800b188 <tcp_write+0x5ac>)
 800b03c:	f004 f954 	bl	800f2e8 <iprintf>
      prev_seg->next = seg;
 800b040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b042:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b044:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800b046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b048:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800b04a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b04e:	8b3b      	ldrh	r3, [r7, #24]
 800b050:	4413      	add	r3, r2
 800b052:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800b056:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b05a:	88fb      	ldrh	r3, [r7, #6]
 800b05c:	429a      	cmp	r2, r3
 800b05e:	f4ff af3d 	bcc.w	800aedc <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800b062:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b064:	2b00      	cmp	r3, #0
 800b066:	d02c      	beq.n	800b0c2 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800b068:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b06e:	e01e      	b.n	800b0ae <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800b070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b072:	891a      	ldrh	r2, [r3, #8]
 800b074:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b076:	4413      	add	r3, r2
 800b078:	b29a      	uxth	r2, r3
 800b07a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b07c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800b07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d110      	bne.n	800b0a8 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800b086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b088:	685b      	ldr	r3, [r3, #4]
 800b08a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b08c:	8952      	ldrh	r2, [r2, #10]
 800b08e:	4413      	add	r3, r2
 800b090:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800b092:	68b9      	ldr	r1, [r7, #8]
 800b094:	4618      	mov	r0, r3
 800b096:	f004 f8f7 	bl	800f288 <memcpy>
        p->len += oversize_used;
 800b09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b09c:	895a      	ldrh	r2, [r3, #10]
 800b09e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b0a0:	4413      	add	r3, r2
 800b0a2:	b29a      	uxth	r2, r3
 800b0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0a6:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800b0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d1dd      	bne.n	800b070 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800b0b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0b6:	891a      	ldrh	r2, [r3, #8]
 800b0b8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b0ba:	4413      	add	r3, r2
 800b0bc:	b29a      	uxth	r2, r3
 800b0be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0c0:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800b0c2:	8a7a      	ldrh	r2, [r7, #18]
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800b0ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d018      	beq.n	800b102 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800b0d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d106      	bne.n	800b0e4 <tcp_write+0x508>
 800b0d6:	4b2a      	ldr	r3, [pc, #168]	; (800b180 <tcp_write+0x5a4>)
 800b0d8:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800b0dc:	492d      	ldr	r1, [pc, #180]	; (800b194 <tcp_write+0x5b8>)
 800b0de:	482a      	ldr	r0, [pc, #168]	; (800b188 <tcp_write+0x5ac>)
 800b0e0:	f004 f902 	bl	800f2e8 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800b0e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0e6:	685b      	ldr	r3, [r3, #4]
 800b0e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f7fb f8b4 	bl	8006258 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800b0f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0f2:	891a      	ldrh	r2, [r3, #8]
 800b0f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0f6:	891b      	ldrh	r3, [r3, #8]
 800b0f8:	4413      	add	r3, r2
 800b0fa:	b29a      	uxth	r2, r3
 800b0fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0fe:	811a      	strh	r2, [r3, #8]
 800b100:	e037      	b.n	800b172 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800b102:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b104:	2b00      	cmp	r3, #0
 800b106:	d034      	beq.n	800b172 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800b108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d003      	beq.n	800b116 <tcp_write+0x53a>
 800b10e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b110:	685b      	ldr	r3, [r3, #4]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d106      	bne.n	800b124 <tcp_write+0x548>
 800b116:	4b1a      	ldr	r3, [pc, #104]	; (800b180 <tcp_write+0x5a4>)
 800b118:	f240 22e6 	movw	r2, #742	; 0x2e6
 800b11c:	491e      	ldr	r1, [pc, #120]	; (800b198 <tcp_write+0x5bc>)
 800b11e:	481a      	ldr	r0, [pc, #104]	; (800b188 <tcp_write+0x5ac>)
 800b120:	f004 f8e2 	bl	800f2e8 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b124:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b126:	685b      	ldr	r3, [r3, #4]
 800b128:	62bb      	str	r3, [r7, #40]	; 0x28
 800b12a:	e009      	b.n	800b140 <tcp_write+0x564>
      p->tot_len += extendlen;
 800b12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b12e:	891a      	ldrh	r2, [r3, #8]
 800b130:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b132:	4413      	add	r3, r2
 800b134:	b29a      	uxth	r2, r3
 800b136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b138:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d1f1      	bne.n	800b12c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800b148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b14a:	891a      	ldrh	r2, [r3, #8]
 800b14c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b14e:	4413      	add	r3, r2
 800b150:	b29a      	uxth	r2, r3
 800b152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b154:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800b156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b158:	895a      	ldrh	r2, [r3, #10]
 800b15a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b15c:	4413      	add	r3, r2
 800b15e:	b29a      	uxth	r2, r3
 800b160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b162:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800b164:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b166:	891a      	ldrh	r2, [r3, #8]
 800b168:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b16a:	4413      	add	r3, r2
 800b16c:	b29a      	uxth	r2, r3
 800b16e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b170:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800b172:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b174:	2b00      	cmp	r3, #0
 800b176:	d111      	bne.n	800b19c <tcp_write+0x5c0>
    pcb->unsent = queue;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b17c:	66da      	str	r2, [r3, #108]	; 0x6c
 800b17e:	e010      	b.n	800b1a2 <tcp_write+0x5c6>
 800b180:	08012078 	.word	0x08012078
 800b184:	08012318 	.word	0x08012318
 800b188:	080120cc 	.word	0x080120cc
 800b18c:	08012358 	.word	0x08012358
 800b190:	08012368 	.word	0x08012368
 800b194:	0801237c 	.word	0x0801237c
 800b198:	080123b4 	.word	0x080123b4
  } else {
    last_unsent->next = queue;
 800b19c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b19e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b1a0:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b1a6:	88fb      	ldrh	r3, [r7, #6]
 800b1a8:	441a      	add	r2, r3
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800b1b4:	88fb      	ldrh	r3, [r7, #6]
 800b1b6:	1ad3      	subs	r3, r2, r3
 800b1b8:	b29a      	uxth	r2, r3
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800b1c6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d00e      	beq.n	800b1f2 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d10a      	bne.n	800b1f2 <tcp_write+0x616>
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d106      	bne.n	800b1f2 <tcp_write+0x616>
 800b1e4:	4b2c      	ldr	r3, [pc, #176]	; (800b298 <tcp_write+0x6bc>)
 800b1e6:	f240 3212 	movw	r2, #786	; 0x312
 800b1ea:	492c      	ldr	r1, [pc, #176]	; (800b29c <tcp_write+0x6c0>)
 800b1ec:	482c      	ldr	r0, [pc, #176]	; (800b2a0 <tcp_write+0x6c4>)
 800b1ee:	f004 f87b 	bl	800f2e8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800b1f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d016      	beq.n	800b226 <tcp_write+0x64a>
 800b1f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1fa:	68db      	ldr	r3, [r3, #12]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d012      	beq.n	800b226 <tcp_write+0x64a>
 800b200:	797b      	ldrb	r3, [r7, #5]
 800b202:	f003 0302 	and.w	r3, r3, #2
 800b206:	2b00      	cmp	r3, #0
 800b208:	d10d      	bne.n	800b226 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800b20a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b20c:	68db      	ldr	r3, [r3, #12]
 800b20e:	899b      	ldrh	r3, [r3, #12]
 800b210:	b29c      	uxth	r4, r3
 800b212:	2008      	movs	r0, #8
 800b214:	f7f9 fc40 	bl	8004a98 <lwip_htons>
 800b218:	4603      	mov	r3, r0
 800b21a:	461a      	mov	r2, r3
 800b21c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b21e:	68db      	ldr	r3, [r3, #12]
 800b220:	4322      	orrs	r2, r4
 800b222:	b292      	uxth	r2, r2
 800b224:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800b226:	2300      	movs	r3, #0
 800b228:	e031      	b.n	800b28e <tcp_write+0x6b2>
          goto memerr;
 800b22a:	bf00      	nop
 800b22c:	e006      	b.n	800b23c <tcp_write+0x660>
            goto memerr;
 800b22e:	bf00      	nop
 800b230:	e004      	b.n	800b23c <tcp_write+0x660>
        goto memerr;
 800b232:	bf00      	nop
 800b234:	e002      	b.n	800b23c <tcp_write+0x660>
        goto memerr;
 800b236:	bf00      	nop
 800b238:	e000      	b.n	800b23c <tcp_write+0x660>
      goto memerr;
 800b23a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	8b5b      	ldrh	r3, [r3, #26]
 800b240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b244:	b29a      	uxth	r2, r3
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800b24a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d002      	beq.n	800b256 <tcp_write+0x67a>
    pbuf_free(concat_p);
 800b250:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b252:	f7fa ff3f 	bl	80060d4 <pbuf_free>
  }
  if (queue != NULL) {
 800b256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d002      	beq.n	800b262 <tcp_write+0x686>
    tcp_segs_free(queue);
 800b25c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b25e:	f7fc fb51 	bl	8007904 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d00e      	beq.n	800b28a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b270:	2b00      	cmp	r3, #0
 800b272:	d10a      	bne.n	800b28a <tcp_write+0x6ae>
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d106      	bne.n	800b28a <tcp_write+0x6ae>
 800b27c:	4b06      	ldr	r3, [pc, #24]	; (800b298 <tcp_write+0x6bc>)
 800b27e:	f240 3227 	movw	r2, #807	; 0x327
 800b282:	4906      	ldr	r1, [pc, #24]	; (800b29c <tcp_write+0x6c0>)
 800b284:	4806      	ldr	r0, [pc, #24]	; (800b2a0 <tcp_write+0x6c4>)
 800b286:	f004 f82f 	bl	800f2e8 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800b28a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b28e:	4618      	mov	r0, r3
 800b290:	375c      	adds	r7, #92	; 0x5c
 800b292:	46bd      	mov	sp, r7
 800b294:	bd90      	pop	{r4, r7, pc}
 800b296:	bf00      	nop
 800b298:	08012078 	.word	0x08012078
 800b29c:	080123ec 	.word	0x080123ec
 800b2a0:	080120cc 	.word	0x080120cc

0800b2a4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800b2a4:	b590      	push	{r4, r7, lr}
 800b2a6:	b08b      	sub	sp, #44	; 0x2c
 800b2a8:	af02      	add	r7, sp, #8
 800b2aa:	6078      	str	r0, [r7, #4]
 800b2ac:	460b      	mov	r3, r1
 800b2ae:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	61fb      	str	r3, [r7, #28]
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d106      	bne.n	800b2d0 <tcp_split_unsent_seg+0x2c>
 800b2c2:	4b95      	ldr	r3, [pc, #596]	; (800b518 <tcp_split_unsent_seg+0x274>)
 800b2c4:	f240 324b 	movw	r2, #843	; 0x34b
 800b2c8:	4994      	ldr	r1, [pc, #592]	; (800b51c <tcp_split_unsent_seg+0x278>)
 800b2ca:	4895      	ldr	r0, [pc, #596]	; (800b520 <tcp_split_unsent_seg+0x27c>)
 800b2cc:	f004 f80c 	bl	800f2e8 <iprintf>

  useg = pcb->unsent;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2d4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d102      	bne.n	800b2e2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800b2dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b2e0:	e116      	b.n	800b510 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800b2e2:	887b      	ldrh	r3, [r7, #2]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d109      	bne.n	800b2fc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800b2e8:	4b8b      	ldr	r3, [pc, #556]	; (800b518 <tcp_split_unsent_seg+0x274>)
 800b2ea:	f240 3253 	movw	r2, #851	; 0x353
 800b2ee:	498d      	ldr	r1, [pc, #564]	; (800b524 <tcp_split_unsent_seg+0x280>)
 800b2f0:	488b      	ldr	r0, [pc, #556]	; (800b520 <tcp_split_unsent_seg+0x27c>)
 800b2f2:	f003 fff9 	bl	800f2e8 <iprintf>
    return ERR_VAL;
 800b2f6:	f06f 0305 	mvn.w	r3, #5
 800b2fa:	e109      	b.n	800b510 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	891b      	ldrh	r3, [r3, #8]
 800b300:	887a      	ldrh	r2, [r7, #2]
 800b302:	429a      	cmp	r2, r3
 800b304:	d301      	bcc.n	800b30a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800b306:	2300      	movs	r3, #0
 800b308:	e102      	b.n	800b510 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b30e:	887a      	ldrh	r2, [r7, #2]
 800b310:	429a      	cmp	r2, r3
 800b312:	d906      	bls.n	800b322 <tcp_split_unsent_seg+0x7e>
 800b314:	4b80      	ldr	r3, [pc, #512]	; (800b518 <tcp_split_unsent_seg+0x274>)
 800b316:	f240 325b 	movw	r2, #859	; 0x35b
 800b31a:	4983      	ldr	r1, [pc, #524]	; (800b528 <tcp_split_unsent_seg+0x284>)
 800b31c:	4880      	ldr	r0, [pc, #512]	; (800b520 <tcp_split_unsent_seg+0x27c>)
 800b31e:	f003 ffe3 	bl	800f2e8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	891b      	ldrh	r3, [r3, #8]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d106      	bne.n	800b338 <tcp_split_unsent_seg+0x94>
 800b32a:	4b7b      	ldr	r3, [pc, #492]	; (800b518 <tcp_split_unsent_seg+0x274>)
 800b32c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800b330:	497e      	ldr	r1, [pc, #504]	; (800b52c <tcp_split_unsent_seg+0x288>)
 800b332:	487b      	ldr	r0, [pc, #492]	; (800b520 <tcp_split_unsent_seg+0x27c>)
 800b334:	f003 ffd8 	bl	800f2e8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	7a9b      	ldrb	r3, [r3, #10]
 800b33c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b33e:	7bfb      	ldrb	r3, [r7, #15]
 800b340:	009b      	lsls	r3, r3, #2
 800b342:	b2db      	uxtb	r3, r3
 800b344:	f003 0304 	and.w	r3, r3, #4
 800b348:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	891a      	ldrh	r2, [r3, #8]
 800b34e:	887b      	ldrh	r3, [r7, #2]
 800b350:	1ad3      	subs	r3, r2, r3
 800b352:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b354:	7bbb      	ldrb	r3, [r7, #14]
 800b356:	b29a      	uxth	r2, r3
 800b358:	89bb      	ldrh	r3, [r7, #12]
 800b35a:	4413      	add	r3, r2
 800b35c:	b29b      	uxth	r3, r3
 800b35e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b362:	4619      	mov	r1, r3
 800b364:	2036      	movs	r0, #54	; 0x36
 800b366:	f7fa fbd1 	bl	8005b0c <pbuf_alloc>
 800b36a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	f000 80b7 	beq.w	800b4e2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	685b      	ldr	r3, [r3, #4]
 800b378:	891a      	ldrh	r2, [r3, #8]
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	891b      	ldrh	r3, [r3, #8]
 800b37e:	1ad3      	subs	r3, r2, r3
 800b380:	b29a      	uxth	r2, r3
 800b382:	887b      	ldrh	r3, [r7, #2]
 800b384:	4413      	add	r3, r2
 800b386:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	6858      	ldr	r0, [r3, #4]
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	685a      	ldr	r2, [r3, #4]
 800b390:	7bbb      	ldrb	r3, [r7, #14]
 800b392:	18d1      	adds	r1, r2, r3
 800b394:	897b      	ldrh	r3, [r7, #10]
 800b396:	89ba      	ldrh	r2, [r7, #12]
 800b398:	f7fb f886 	bl	80064a8 <pbuf_copy_partial>
 800b39c:	4603      	mov	r3, r0
 800b39e:	461a      	mov	r2, r3
 800b3a0:	89bb      	ldrh	r3, [r7, #12]
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	f040 809f 	bne.w	800b4e6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	68db      	ldr	r3, [r3, #12]
 800b3ac:	899b      	ldrh	r3, [r3, #12]
 800b3ae:	b29b      	uxth	r3, r3
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f7f9 fb71 	bl	8004a98 <lwip_htons>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	b2db      	uxtb	r3, r3
 800b3ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b3be:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800b3c4:	7efb      	ldrb	r3, [r7, #27]
 800b3c6:	f003 0308 	and.w	r3, r3, #8
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d007      	beq.n	800b3de <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800b3ce:	7efb      	ldrb	r3, [r7, #27]
 800b3d0:	f023 0308 	bic.w	r3, r3, #8
 800b3d4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800b3d6:	7ebb      	ldrb	r3, [r7, #26]
 800b3d8:	f043 0308 	orr.w	r3, r3, #8
 800b3dc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800b3de:	7efb      	ldrb	r3, [r7, #27]
 800b3e0:	f003 0301 	and.w	r3, r3, #1
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d007      	beq.n	800b3f8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800b3e8:	7efb      	ldrb	r3, [r7, #27]
 800b3ea:	f023 0301 	bic.w	r3, r3, #1
 800b3ee:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800b3f0:	7ebb      	ldrb	r3, [r7, #26]
 800b3f2:	f043 0301 	orr.w	r3, r3, #1
 800b3f6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b3f8:	697b      	ldr	r3, [r7, #20]
 800b3fa:	68db      	ldr	r3, [r3, #12]
 800b3fc:	685b      	ldr	r3, [r3, #4]
 800b3fe:	4618      	mov	r0, r3
 800b400:	f7f9 fb5f 	bl	8004ac2 <lwip_htonl>
 800b404:	4602      	mov	r2, r0
 800b406:	887b      	ldrh	r3, [r7, #2]
 800b408:	18d1      	adds	r1, r2, r3
 800b40a:	7eba      	ldrb	r2, [r7, #26]
 800b40c:	7bfb      	ldrb	r3, [r7, #15]
 800b40e:	9300      	str	r3, [sp, #0]
 800b410:	460b      	mov	r3, r1
 800b412:	6939      	ldr	r1, [r7, #16]
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f7ff fa4f 	bl	800a8b8 <tcp_create_segment>
 800b41a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800b41c:	69fb      	ldr	r3, [r7, #28]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d063      	beq.n	800b4ea <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	685b      	ldr	r3, [r3, #4]
 800b426:	4618      	mov	r0, r3
 800b428:	f7fa fedc 	bl	80061e4 <pbuf_clen>
 800b42c:	4603      	mov	r3, r0
 800b42e:	461a      	mov	r2, r3
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b436:	1a9b      	subs	r3, r3, r2
 800b438:	b29a      	uxth	r2, r3
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	6858      	ldr	r0, [r3, #4]
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	685b      	ldr	r3, [r3, #4]
 800b448:	891a      	ldrh	r2, [r3, #8]
 800b44a:	89bb      	ldrh	r3, [r7, #12]
 800b44c:	1ad3      	subs	r3, r2, r3
 800b44e:	b29b      	uxth	r3, r3
 800b450:	4619      	mov	r1, r3
 800b452:	f7fa fcb9 	bl	8005dc8 <pbuf_realloc>
  useg->len -= remainder;
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	891a      	ldrh	r2, [r3, #8]
 800b45a:	89bb      	ldrh	r3, [r7, #12]
 800b45c:	1ad3      	subs	r3, r2, r3
 800b45e:	b29a      	uxth	r2, r3
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b464:	697b      	ldr	r3, [r7, #20]
 800b466:	68db      	ldr	r3, [r3, #12]
 800b468:	899b      	ldrh	r3, [r3, #12]
 800b46a:	b29c      	uxth	r4, r3
 800b46c:	7efb      	ldrb	r3, [r7, #27]
 800b46e:	b29b      	uxth	r3, r3
 800b470:	4618      	mov	r0, r3
 800b472:	f7f9 fb11 	bl	8004a98 <lwip_htons>
 800b476:	4603      	mov	r3, r0
 800b478:	461a      	mov	r2, r3
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	68db      	ldr	r3, [r3, #12]
 800b47e:	4322      	orrs	r2, r4
 800b480:	b292      	uxth	r2, r2
 800b482:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800b484:	697b      	ldr	r3, [r7, #20]
 800b486:	685b      	ldr	r3, [r3, #4]
 800b488:	4618      	mov	r0, r3
 800b48a:	f7fa feab 	bl	80061e4 <pbuf_clen>
 800b48e:	4603      	mov	r3, r0
 800b490:	461a      	mov	r2, r3
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b498:	4413      	add	r3, r2
 800b49a:	b29a      	uxth	r2, r3
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b4a2:	69fb      	ldr	r3, [r7, #28]
 800b4a4:	685b      	ldr	r3, [r3, #4]
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f7fa fe9c 	bl	80061e4 <pbuf_clen>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	461a      	mov	r2, r3
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b4b6:	4413      	add	r3, r2
 800b4b8:	b29a      	uxth	r2, r3
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	681a      	ldr	r2, [r3, #0]
 800b4c4:	69fb      	ldr	r3, [r7, #28]
 800b4c6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	69fa      	ldr	r2, [r7, #28]
 800b4cc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800b4ce:	69fb      	ldr	r3, [r7, #28]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d103      	bne.n	800b4de <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	e016      	b.n	800b510 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800b4e2:	bf00      	nop
 800b4e4:	e002      	b.n	800b4ec <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b4e6:	bf00      	nop
 800b4e8:	e000      	b.n	800b4ec <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b4ea:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800b4ec:	69fb      	ldr	r3, [r7, #28]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d006      	beq.n	800b500 <tcp_split_unsent_seg+0x25c>
 800b4f2:	4b09      	ldr	r3, [pc, #36]	; (800b518 <tcp_split_unsent_seg+0x274>)
 800b4f4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800b4f8:	490d      	ldr	r1, [pc, #52]	; (800b530 <tcp_split_unsent_seg+0x28c>)
 800b4fa:	4809      	ldr	r0, [pc, #36]	; (800b520 <tcp_split_unsent_seg+0x27c>)
 800b4fc:	f003 fef4 	bl	800f2e8 <iprintf>
  if (p != NULL) {
 800b500:	693b      	ldr	r3, [r7, #16]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d002      	beq.n	800b50c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800b506:	6938      	ldr	r0, [r7, #16]
 800b508:	f7fa fde4 	bl	80060d4 <pbuf_free>
  }

  return ERR_MEM;
 800b50c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b510:	4618      	mov	r0, r3
 800b512:	3724      	adds	r7, #36	; 0x24
 800b514:	46bd      	mov	sp, r7
 800b516:	bd90      	pop	{r4, r7, pc}
 800b518:	08012078 	.word	0x08012078
 800b51c:	0801240c 	.word	0x0801240c
 800b520:	080120cc 	.word	0x080120cc
 800b524:	08012430 	.word	0x08012430
 800b528:	08012454 	.word	0x08012454
 800b52c:	08012464 	.word	0x08012464
 800b530:	08012474 	.word	0x08012474

0800b534 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800b534:	b590      	push	{r4, r7, lr}
 800b536:	b085      	sub	sp, #20
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d106      	bne.n	800b550 <tcp_send_fin+0x1c>
 800b542:	4b21      	ldr	r3, [pc, #132]	; (800b5c8 <tcp_send_fin+0x94>)
 800b544:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800b548:	4920      	ldr	r1, [pc, #128]	; (800b5cc <tcp_send_fin+0x98>)
 800b54a:	4821      	ldr	r0, [pc, #132]	; (800b5d0 <tcp_send_fin+0x9c>)
 800b54c:	f003 fecc 	bl	800f2e8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b554:	2b00      	cmp	r3, #0
 800b556:	d02e      	beq.n	800b5b6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b55c:	60fb      	str	r3, [r7, #12]
 800b55e:	e002      	b.n	800b566 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d1f8      	bne.n	800b560 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	68db      	ldr	r3, [r3, #12]
 800b572:	899b      	ldrh	r3, [r3, #12]
 800b574:	b29b      	uxth	r3, r3
 800b576:	4618      	mov	r0, r3
 800b578:	f7f9 fa8e 	bl	8004a98 <lwip_htons>
 800b57c:	4603      	mov	r3, r0
 800b57e:	b2db      	uxtb	r3, r3
 800b580:	f003 0307 	and.w	r3, r3, #7
 800b584:	2b00      	cmp	r3, #0
 800b586:	d116      	bne.n	800b5b6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	68db      	ldr	r3, [r3, #12]
 800b58c:	899b      	ldrh	r3, [r3, #12]
 800b58e:	b29c      	uxth	r4, r3
 800b590:	2001      	movs	r0, #1
 800b592:	f7f9 fa81 	bl	8004a98 <lwip_htons>
 800b596:	4603      	mov	r3, r0
 800b598:	461a      	mov	r2, r3
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	68db      	ldr	r3, [r3, #12]
 800b59e:	4322      	orrs	r2, r4
 800b5a0:	b292      	uxth	r2, r2
 800b5a2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	8b5b      	ldrh	r3, [r3, #26]
 800b5a8:	f043 0320 	orr.w	r3, r3, #32
 800b5ac:	b29a      	uxth	r2, r3
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	e004      	b.n	800b5c0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b5b6:	2101      	movs	r1, #1
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f000 f80b 	bl	800b5d4 <tcp_enqueue_flags>
 800b5be:	4603      	mov	r3, r0
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3714      	adds	r7, #20
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd90      	pop	{r4, r7, pc}
 800b5c8:	08012078 	.word	0x08012078
 800b5cc:	08012480 	.word	0x08012480
 800b5d0:	080120cc 	.word	0x080120cc

0800b5d4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b08a      	sub	sp, #40	; 0x28
 800b5d8:	af02      	add	r7, sp, #8
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	460b      	mov	r3, r1
 800b5de:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b5e8:	78fb      	ldrb	r3, [r7, #3]
 800b5ea:	f003 0303 	and.w	r3, r3, #3
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d106      	bne.n	800b600 <tcp_enqueue_flags+0x2c>
 800b5f2:	4b67      	ldr	r3, [pc, #412]	; (800b790 <tcp_enqueue_flags+0x1bc>)
 800b5f4:	f240 4211 	movw	r2, #1041	; 0x411
 800b5f8:	4966      	ldr	r1, [pc, #408]	; (800b794 <tcp_enqueue_flags+0x1c0>)
 800b5fa:	4867      	ldr	r0, [pc, #412]	; (800b798 <tcp_enqueue_flags+0x1c4>)
 800b5fc:	f003 fe74 	bl	800f2e8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d106      	bne.n	800b614 <tcp_enqueue_flags+0x40>
 800b606:	4b62      	ldr	r3, [pc, #392]	; (800b790 <tcp_enqueue_flags+0x1bc>)
 800b608:	f240 4213 	movw	r2, #1043	; 0x413
 800b60c:	4963      	ldr	r1, [pc, #396]	; (800b79c <tcp_enqueue_flags+0x1c8>)
 800b60e:	4862      	ldr	r0, [pc, #392]	; (800b798 <tcp_enqueue_flags+0x1c4>)
 800b610:	f003 fe6a 	bl	800f2e8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800b614:	78fb      	ldrb	r3, [r7, #3]
 800b616:	f003 0302 	and.w	r3, r3, #2
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d001      	beq.n	800b622 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800b61e:	2301      	movs	r3, #1
 800b620:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b622:	7ffb      	ldrb	r3, [r7, #31]
 800b624:	009b      	lsls	r3, r3, #2
 800b626:	b2db      	uxtb	r3, r3
 800b628:	f003 0304 	and.w	r3, r3, #4
 800b62c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b62e:	7dfb      	ldrb	r3, [r7, #23]
 800b630:	b29b      	uxth	r3, r3
 800b632:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b636:	4619      	mov	r1, r3
 800b638:	2036      	movs	r0, #54	; 0x36
 800b63a:	f7fa fa67 	bl	8005b0c <pbuf_alloc>
 800b63e:	6138      	str	r0, [r7, #16]
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d109      	bne.n	800b65a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	8b5b      	ldrh	r3, [r3, #26]
 800b64a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b64e:	b29a      	uxth	r2, r3
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b654:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b658:	e095      	b.n	800b786 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	895a      	ldrh	r2, [r3, #10]
 800b65e:	7dfb      	ldrb	r3, [r7, #23]
 800b660:	b29b      	uxth	r3, r3
 800b662:	429a      	cmp	r2, r3
 800b664:	d206      	bcs.n	800b674 <tcp_enqueue_flags+0xa0>
 800b666:	4b4a      	ldr	r3, [pc, #296]	; (800b790 <tcp_enqueue_flags+0x1bc>)
 800b668:	f240 4239 	movw	r2, #1081	; 0x439
 800b66c:	494c      	ldr	r1, [pc, #304]	; (800b7a0 <tcp_enqueue_flags+0x1cc>)
 800b66e:	484a      	ldr	r0, [pc, #296]	; (800b798 <tcp_enqueue_flags+0x1c4>)
 800b670:	f003 fe3a 	bl	800f2e8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800b678:	78fa      	ldrb	r2, [r7, #3]
 800b67a:	7ffb      	ldrb	r3, [r7, #31]
 800b67c:	9300      	str	r3, [sp, #0]
 800b67e:	460b      	mov	r3, r1
 800b680:	6939      	ldr	r1, [r7, #16]
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f7ff f918 	bl	800a8b8 <tcp_create_segment>
 800b688:	60f8      	str	r0, [r7, #12]
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d109      	bne.n	800b6a4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	8b5b      	ldrh	r3, [r3, #26]
 800b694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b698:	b29a      	uxth	r2, r3
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b69e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b6a2:	e070      	b.n	800b786 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	68db      	ldr	r3, [r3, #12]
 800b6a8:	f003 0303 	and.w	r3, r3, #3
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d006      	beq.n	800b6be <tcp_enqueue_flags+0xea>
 800b6b0:	4b37      	ldr	r3, [pc, #220]	; (800b790 <tcp_enqueue_flags+0x1bc>)
 800b6b2:	f240 4242 	movw	r2, #1090	; 0x442
 800b6b6:	493b      	ldr	r1, [pc, #236]	; (800b7a4 <tcp_enqueue_flags+0x1d0>)
 800b6b8:	4837      	ldr	r0, [pc, #220]	; (800b798 <tcp_enqueue_flags+0x1c4>)
 800b6ba:	f003 fe15 	bl	800f2e8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	891b      	ldrh	r3, [r3, #8]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d006      	beq.n	800b6d4 <tcp_enqueue_flags+0x100>
 800b6c6:	4b32      	ldr	r3, [pc, #200]	; (800b790 <tcp_enqueue_flags+0x1bc>)
 800b6c8:	f240 4243 	movw	r2, #1091	; 0x443
 800b6cc:	4936      	ldr	r1, [pc, #216]	; (800b7a8 <tcp_enqueue_flags+0x1d4>)
 800b6ce:	4832      	ldr	r0, [pc, #200]	; (800b798 <tcp_enqueue_flags+0x1c4>)
 800b6d0:	f003 fe0a 	bl	800f2e8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d103      	bne.n	800b6e4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	68fa      	ldr	r2, [r7, #12]
 800b6e0:	66da      	str	r2, [r3, #108]	; 0x6c
 800b6e2:	e00d      	b.n	800b700 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6e8:	61bb      	str	r3, [r7, #24]
 800b6ea:	e002      	b.n	800b6f2 <tcp_enqueue_flags+0x11e>
 800b6ec:	69bb      	ldr	r3, [r7, #24]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	61bb      	str	r3, [r7, #24]
 800b6f2:	69bb      	ldr	r3, [r7, #24]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d1f8      	bne.n	800b6ec <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800b6fa:	69bb      	ldr	r3, [r7, #24]
 800b6fc:	68fa      	ldr	r2, [r7, #12]
 800b6fe:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2200      	movs	r2, #0
 800b704:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800b708:	78fb      	ldrb	r3, [r7, #3]
 800b70a:	f003 0302 	and.w	r3, r3, #2
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d104      	bne.n	800b71c <tcp_enqueue_flags+0x148>
 800b712:	78fb      	ldrb	r3, [r7, #3]
 800b714:	f003 0301 	and.w	r3, r3, #1
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d004      	beq.n	800b726 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b720:	1c5a      	adds	r2, r3, #1
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800b726:	78fb      	ldrb	r3, [r7, #3]
 800b728:	f003 0301 	and.w	r3, r3, #1
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d006      	beq.n	800b73e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	8b5b      	ldrh	r3, [r3, #26]
 800b734:	f043 0320 	orr.w	r3, r3, #32
 800b738:	b29a      	uxth	r2, r3
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	685b      	ldr	r3, [r3, #4]
 800b742:	4618      	mov	r0, r3
 800b744:	f7fa fd4e 	bl	80061e4 <pbuf_clen>
 800b748:	4603      	mov	r3, r0
 800b74a:	461a      	mov	r2, r3
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b752:	4413      	add	r3, r2
 800b754:	b29a      	uxth	r2, r3
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b762:	2b00      	cmp	r3, #0
 800b764:	d00e      	beq.n	800b784 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d10a      	bne.n	800b784 <tcp_enqueue_flags+0x1b0>
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b772:	2b00      	cmp	r3, #0
 800b774:	d106      	bne.n	800b784 <tcp_enqueue_flags+0x1b0>
 800b776:	4b06      	ldr	r3, [pc, #24]	; (800b790 <tcp_enqueue_flags+0x1bc>)
 800b778:	f240 4265 	movw	r2, #1125	; 0x465
 800b77c:	490b      	ldr	r1, [pc, #44]	; (800b7ac <tcp_enqueue_flags+0x1d8>)
 800b77e:	4806      	ldr	r0, [pc, #24]	; (800b798 <tcp_enqueue_flags+0x1c4>)
 800b780:	f003 fdb2 	bl	800f2e8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800b784:	2300      	movs	r3, #0
}
 800b786:	4618      	mov	r0, r3
 800b788:	3720      	adds	r7, #32
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}
 800b78e:	bf00      	nop
 800b790:	08012078 	.word	0x08012078
 800b794:	0801249c 	.word	0x0801249c
 800b798:	080120cc 	.word	0x080120cc
 800b79c:	080124f4 	.word	0x080124f4
 800b7a0:	08012514 	.word	0x08012514
 800b7a4:	08012550 	.word	0x08012550
 800b7a8:	08012568 	.word	0x08012568
 800b7ac:	08012594 	.word	0x08012594

0800b7b0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800b7b0:	b5b0      	push	{r4, r5, r7, lr}
 800b7b2:	b08a      	sub	sp, #40	; 0x28
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d106      	bne.n	800b7cc <tcp_output+0x1c>
 800b7be:	4b9e      	ldr	r3, [pc, #632]	; (800ba38 <tcp_output+0x288>)
 800b7c0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800b7c4:	499d      	ldr	r1, [pc, #628]	; (800ba3c <tcp_output+0x28c>)
 800b7c6:	489e      	ldr	r0, [pc, #632]	; (800ba40 <tcp_output+0x290>)
 800b7c8:	f003 fd8e 	bl	800f2e8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	7d1b      	ldrb	r3, [r3, #20]
 800b7d0:	2b01      	cmp	r3, #1
 800b7d2:	d106      	bne.n	800b7e2 <tcp_output+0x32>
 800b7d4:	4b98      	ldr	r3, [pc, #608]	; (800ba38 <tcp_output+0x288>)
 800b7d6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800b7da:	499a      	ldr	r1, [pc, #616]	; (800ba44 <tcp_output+0x294>)
 800b7dc:	4898      	ldr	r0, [pc, #608]	; (800ba40 <tcp_output+0x290>)
 800b7de:	f003 fd83 	bl	800f2e8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800b7e2:	4b99      	ldr	r3, [pc, #612]	; (800ba48 <tcp_output+0x298>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	687a      	ldr	r2, [r7, #4]
 800b7e8:	429a      	cmp	r2, r3
 800b7ea:	d101      	bne.n	800b7f0 <tcp_output+0x40>
    return ERR_OK;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	e1ce      	b.n	800bb8e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b7fc:	4293      	cmp	r3, r2
 800b7fe:	bf28      	it	cs
 800b800:	4613      	movcs	r3, r2
 800b802:	b29b      	uxth	r3, r3
 800b804:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b80a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800b80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d10b      	bne.n	800b82a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	8b5b      	ldrh	r3, [r3, #26]
 800b816:	f003 0302 	and.w	r3, r3, #2
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	f000 81aa 	beq.w	800bb74 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f000 fdcb 	bl	800c3bc <tcp_send_empty_ack>
 800b826:	4603      	mov	r3, r0
 800b828:	e1b1      	b.n	800bb8e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800b82a:	6879      	ldr	r1, [r7, #4]
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	3304      	adds	r3, #4
 800b830:	461a      	mov	r2, r3
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f7ff f824 	bl	800a880 <tcp_route>
 800b838:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800b83a:	697b      	ldr	r3, [r7, #20]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d102      	bne.n	800b846 <tcp_output+0x96>
    return ERR_RTE;
 800b840:	f06f 0303 	mvn.w	r3, #3
 800b844:	e1a3      	b.n	800bb8e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d003      	beq.n	800b854 <tcp_output+0xa4>
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d111      	bne.n	800b878 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d002      	beq.n	800b860 <tcp_output+0xb0>
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	3304      	adds	r3, #4
 800b85e:	e000      	b.n	800b862 <tcp_output+0xb2>
 800b860:	2300      	movs	r3, #0
 800b862:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800b864:	693b      	ldr	r3, [r7, #16]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d102      	bne.n	800b870 <tcp_output+0xc0>
      return ERR_RTE;
 800b86a:	f06f 0303 	mvn.w	r3, #3
 800b86e:	e18e      	b.n	800bb8e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	681a      	ldr	r2, [r3, #0]
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800b878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b87a:	68db      	ldr	r3, [r3, #12]
 800b87c:	685b      	ldr	r3, [r3, #4]
 800b87e:	4618      	mov	r0, r3
 800b880:	f7f9 f91f 	bl	8004ac2 <lwip_htonl>
 800b884:	4602      	mov	r2, r0
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b88a:	1ad3      	subs	r3, r2, r3
 800b88c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b88e:	8912      	ldrh	r2, [r2, #8]
 800b890:	4413      	add	r3, r2
 800b892:	69ba      	ldr	r2, [r7, #24]
 800b894:	429a      	cmp	r2, r3
 800b896:	d227      	bcs.n	800b8e8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b89e:	461a      	mov	r2, r3
 800b8a0:	69bb      	ldr	r3, [r7, #24]
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d114      	bne.n	800b8d0 <tcp_output+0x120>
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d110      	bne.n	800b8d0 <tcp_output+0x120>
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d10b      	bne.n	800b8d0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2201      	movs	r2, #1
 800b8c4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	8b5b      	ldrh	r3, [r3, #26]
 800b8d4:	f003 0302 	and.w	r3, r3, #2
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	f000 814d 	beq.w	800bb78 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f000 fd6c 	bl	800c3bc <tcp_send_empty_ack>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	e152      	b.n	800bb8e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8f4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800b8f6:	6a3b      	ldr	r3, [r7, #32]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	f000 811c 	beq.w	800bb36 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800b8fe:	e002      	b.n	800b906 <tcp_output+0x156>
 800b900:	6a3b      	ldr	r3, [r7, #32]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	623b      	str	r3, [r7, #32]
 800b906:	6a3b      	ldr	r3, [r7, #32]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d1f8      	bne.n	800b900 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800b90e:	e112      	b.n	800bb36 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800b910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b912:	68db      	ldr	r3, [r3, #12]
 800b914:	899b      	ldrh	r3, [r3, #12]
 800b916:	b29b      	uxth	r3, r3
 800b918:	4618      	mov	r0, r3
 800b91a:	f7f9 f8bd 	bl	8004a98 <lwip_htons>
 800b91e:	4603      	mov	r3, r0
 800b920:	b2db      	uxtb	r3, r3
 800b922:	f003 0304 	and.w	r3, r3, #4
 800b926:	2b00      	cmp	r3, #0
 800b928:	d006      	beq.n	800b938 <tcp_output+0x188>
 800b92a:	4b43      	ldr	r3, [pc, #268]	; (800ba38 <tcp_output+0x288>)
 800b92c:	f240 5236 	movw	r2, #1334	; 0x536
 800b930:	4946      	ldr	r1, [pc, #280]	; (800ba4c <tcp_output+0x29c>)
 800b932:	4843      	ldr	r0, [pc, #268]	; (800ba40 <tcp_output+0x290>)
 800b934:	f003 fcd8 	bl	800f2e8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d01f      	beq.n	800b980 <tcp_output+0x1d0>
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	8b5b      	ldrh	r3, [r3, #26]
 800b944:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d119      	bne.n	800b980 <tcp_output+0x1d0>
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b950:	2b00      	cmp	r3, #0
 800b952:	d00b      	beq.n	800b96c <tcp_output+0x1bc>
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d110      	bne.n	800b980 <tcp_output+0x1d0>
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b962:	891a      	ldrh	r2, [r3, #8]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b968:	429a      	cmp	r2, r3
 800b96a:	d209      	bcs.n	800b980 <tcp_output+0x1d0>
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b972:	2b00      	cmp	r3, #0
 800b974:	d004      	beq.n	800b980 <tcp_output+0x1d0>
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b97c:	2b08      	cmp	r3, #8
 800b97e:	d901      	bls.n	800b984 <tcp_output+0x1d4>
 800b980:	2301      	movs	r3, #1
 800b982:	e000      	b.n	800b986 <tcp_output+0x1d6>
 800b984:	2300      	movs	r3, #0
 800b986:	2b00      	cmp	r3, #0
 800b988:	d106      	bne.n	800b998 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	8b5b      	ldrh	r3, [r3, #26]
 800b98e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b992:	2b00      	cmp	r3, #0
 800b994:	f000 80e4 	beq.w	800bb60 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	7d1b      	ldrb	r3, [r3, #20]
 800b99c:	2b02      	cmp	r3, #2
 800b99e:	d00d      	beq.n	800b9bc <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800b9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a2:	68db      	ldr	r3, [r3, #12]
 800b9a4:	899b      	ldrh	r3, [r3, #12]
 800b9a6:	b29c      	uxth	r4, r3
 800b9a8:	2010      	movs	r0, #16
 800b9aa:	f7f9 f875 	bl	8004a98 <lwip_htons>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	461a      	mov	r2, r3
 800b9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b4:	68db      	ldr	r3, [r3, #12]
 800b9b6:	4322      	orrs	r2, r4
 800b9b8:	b292      	uxth	r2, r2
 800b9ba:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800b9bc:	697a      	ldr	r2, [r7, #20]
 800b9be:	6879      	ldr	r1, [r7, #4]
 800b9c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b9c2:	f000 f909 	bl	800bbd8 <tcp_output_segment>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800b9ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d009      	beq.n	800b9e6 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	8b5b      	ldrh	r3, [r3, #26]
 800b9d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9da:	b29a      	uxth	r2, r3
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	835a      	strh	r2, [r3, #26]
      return err;
 800b9e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9e4:	e0d3      	b.n	800bb8e <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800b9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e8:	681a      	ldr	r2, [r3, #0]
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	7d1b      	ldrb	r3, [r3, #20]
 800b9f2:	2b02      	cmp	r3, #2
 800b9f4:	d006      	beq.n	800ba04 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	8b5b      	ldrh	r3, [r3, #26]
 800b9fa:	f023 0303 	bic.w	r3, r3, #3
 800b9fe:	b29a      	uxth	r2, r3
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ba04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba06:	68db      	ldr	r3, [r3, #12]
 800ba08:	685b      	ldr	r3, [r3, #4]
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7f9 f859 	bl	8004ac2 <lwip_htonl>
 800ba10:	4604      	mov	r4, r0
 800ba12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba14:	891b      	ldrh	r3, [r3, #8]
 800ba16:	461d      	mov	r5, r3
 800ba18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba1a:	68db      	ldr	r3, [r3, #12]
 800ba1c:	899b      	ldrh	r3, [r3, #12]
 800ba1e:	b29b      	uxth	r3, r3
 800ba20:	4618      	mov	r0, r3
 800ba22:	f7f9 f839 	bl	8004a98 <lwip_htons>
 800ba26:	4603      	mov	r3, r0
 800ba28:	b2db      	uxtb	r3, r3
 800ba2a:	f003 0303 	and.w	r3, r3, #3
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d00e      	beq.n	800ba50 <tcp_output+0x2a0>
 800ba32:	2301      	movs	r3, #1
 800ba34:	e00d      	b.n	800ba52 <tcp_output+0x2a2>
 800ba36:	bf00      	nop
 800ba38:	08012078 	.word	0x08012078
 800ba3c:	080125bc 	.word	0x080125bc
 800ba40:	080120cc 	.word	0x080120cc
 800ba44:	080125d4 	.word	0x080125d4
 800ba48:	20008ec0 	.word	0x20008ec0
 800ba4c:	080125fc 	.word	0x080125fc
 800ba50:	2300      	movs	r3, #0
 800ba52:	442b      	add	r3, r5
 800ba54:	4423      	add	r3, r4
 800ba56:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	1ad3      	subs	r3, r2, r3
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	da02      	bge.n	800ba6a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	68ba      	ldr	r2, [r7, #8]
 800ba68:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800ba6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba6c:	891b      	ldrh	r3, [r3, #8]
 800ba6e:	461c      	mov	r4, r3
 800ba70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba72:	68db      	ldr	r3, [r3, #12]
 800ba74:	899b      	ldrh	r3, [r3, #12]
 800ba76:	b29b      	uxth	r3, r3
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f7f9 f80d 	bl	8004a98 <lwip_htons>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	b2db      	uxtb	r3, r3
 800ba82:	f003 0303 	and.w	r3, r3, #3
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d001      	beq.n	800ba8e <tcp_output+0x2de>
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	e000      	b.n	800ba90 <tcp_output+0x2e0>
 800ba8e:	2300      	movs	r3, #0
 800ba90:	4423      	add	r3, r4
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d049      	beq.n	800bb2a <tcp_output+0x37a>
      seg->next = NULL;
 800ba96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba98:	2200      	movs	r2, #0
 800ba9a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d105      	bne.n	800bab0 <tcp_output+0x300>
        pcb->unacked = seg;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800baa8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800baaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baac:	623b      	str	r3, [r7, #32]
 800baae:	e03f      	b.n	800bb30 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800bab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab2:	68db      	ldr	r3, [r3, #12]
 800bab4:	685b      	ldr	r3, [r3, #4]
 800bab6:	4618      	mov	r0, r3
 800bab8:	f7f9 f803 	bl	8004ac2 <lwip_htonl>
 800babc:	4604      	mov	r4, r0
 800babe:	6a3b      	ldr	r3, [r7, #32]
 800bac0:	68db      	ldr	r3, [r3, #12]
 800bac2:	685b      	ldr	r3, [r3, #4]
 800bac4:	4618      	mov	r0, r3
 800bac6:	f7f8 fffc 	bl	8004ac2 <lwip_htonl>
 800baca:	4603      	mov	r3, r0
 800bacc:	1ae3      	subs	r3, r4, r3
 800bace:	2b00      	cmp	r3, #0
 800bad0:	da24      	bge.n	800bb1c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	3370      	adds	r3, #112	; 0x70
 800bad6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800bad8:	e002      	b.n	800bae0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800bada:	69fb      	ldr	r3, [r7, #28]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800bae0:	69fb      	ldr	r3, [r7, #28]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d011      	beq.n	800bb0c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bae8:	69fb      	ldr	r3, [r7, #28]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	68db      	ldr	r3, [r3, #12]
 800baee:	685b      	ldr	r3, [r3, #4]
 800baf0:	4618      	mov	r0, r3
 800baf2:	f7f8 ffe6 	bl	8004ac2 <lwip_htonl>
 800baf6:	4604      	mov	r4, r0
 800baf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bafa:	68db      	ldr	r3, [r3, #12]
 800bafc:	685b      	ldr	r3, [r3, #4]
 800bafe:	4618      	mov	r0, r3
 800bb00:	f7f8 ffdf 	bl	8004ac2 <lwip_htonl>
 800bb04:	4603      	mov	r3, r0
 800bb06:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	dbe6      	blt.n	800bada <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800bb0c:	69fb      	ldr	r3, [r7, #28]
 800bb0e:	681a      	ldr	r2, [r3, #0]
 800bb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb12:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800bb14:	69fb      	ldr	r3, [r7, #28]
 800bb16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb18:	601a      	str	r2, [r3, #0]
 800bb1a:	e009      	b.n	800bb30 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800bb1c:	6a3b      	ldr	r3, [r7, #32]
 800bb1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb20:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800bb22:	6a3b      	ldr	r3, [r7, #32]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	623b      	str	r3, [r7, #32]
 800bb28:	e002      	b.n	800bb30 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800bb2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bb2c:	f7fb feff 	bl	800792e <tcp_seg_free>
    }
    seg = pcb->unsent;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb34:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800bb36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d012      	beq.n	800bb62 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800bb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb3e:	68db      	ldr	r3, [r3, #12]
 800bb40:	685b      	ldr	r3, [r3, #4]
 800bb42:	4618      	mov	r0, r3
 800bb44:	f7f8 ffbd 	bl	8004ac2 <lwip_htonl>
 800bb48:	4602      	mov	r2, r0
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb4e:	1ad3      	subs	r3, r2, r3
 800bb50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb52:	8912      	ldrh	r2, [r2, #8]
 800bb54:	4413      	add	r3, r2
  while (seg != NULL &&
 800bb56:	69ba      	ldr	r2, [r7, #24]
 800bb58:	429a      	cmp	r2, r3
 800bb5a:	f4bf aed9 	bcs.w	800b910 <tcp_output+0x160>
 800bb5e:	e000      	b.n	800bb62 <tcp_output+0x3b2>
      break;
 800bb60:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d108      	bne.n	800bb7c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800bb72:	e004      	b.n	800bb7e <tcp_output+0x3ce>
    goto output_done;
 800bb74:	bf00      	nop
 800bb76:	e002      	b.n	800bb7e <tcp_output+0x3ce>
    goto output_done;
 800bb78:	bf00      	nop
 800bb7a:	e000      	b.n	800bb7e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800bb7c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	8b5b      	ldrh	r3, [r3, #26]
 800bb82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb86:	b29a      	uxth	r2, r3
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800bb8c:	2300      	movs	r3, #0
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3728      	adds	r7, #40	; 0x28
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bdb0      	pop	{r4, r5, r7, pc}
 800bb96:	bf00      	nop

0800bb98 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b082      	sub	sp, #8
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d106      	bne.n	800bbb4 <tcp_output_segment_busy+0x1c>
 800bba6:	4b09      	ldr	r3, [pc, #36]	; (800bbcc <tcp_output_segment_busy+0x34>)
 800bba8:	f240 529a 	movw	r2, #1434	; 0x59a
 800bbac:	4908      	ldr	r1, [pc, #32]	; (800bbd0 <tcp_output_segment_busy+0x38>)
 800bbae:	4809      	ldr	r0, [pc, #36]	; (800bbd4 <tcp_output_segment_busy+0x3c>)
 800bbb0:	f003 fb9a 	bl	800f2e8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	685b      	ldr	r3, [r3, #4]
 800bbb8:	7b9b      	ldrb	r3, [r3, #14]
 800bbba:	2b01      	cmp	r3, #1
 800bbbc:	d001      	beq.n	800bbc2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	e000      	b.n	800bbc4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800bbc2:	2300      	movs	r3, #0
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3708      	adds	r7, #8
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}
 800bbcc:	08012078 	.word	0x08012078
 800bbd0:	08012614 	.word	0x08012614
 800bbd4:	080120cc 	.word	0x080120cc

0800bbd8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800bbd8:	b5b0      	push	{r4, r5, r7, lr}
 800bbda:	b08c      	sub	sp, #48	; 0x30
 800bbdc:	af04      	add	r7, sp, #16
 800bbde:	60f8      	str	r0, [r7, #12]
 800bbe0:	60b9      	str	r1, [r7, #8]
 800bbe2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d106      	bne.n	800bbf8 <tcp_output_segment+0x20>
 800bbea:	4b63      	ldr	r3, [pc, #396]	; (800bd78 <tcp_output_segment+0x1a0>)
 800bbec:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800bbf0:	4962      	ldr	r1, [pc, #392]	; (800bd7c <tcp_output_segment+0x1a4>)
 800bbf2:	4863      	ldr	r0, [pc, #396]	; (800bd80 <tcp_output_segment+0x1a8>)
 800bbf4:	f003 fb78 	bl	800f2e8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d106      	bne.n	800bc0c <tcp_output_segment+0x34>
 800bbfe:	4b5e      	ldr	r3, [pc, #376]	; (800bd78 <tcp_output_segment+0x1a0>)
 800bc00:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800bc04:	495f      	ldr	r1, [pc, #380]	; (800bd84 <tcp_output_segment+0x1ac>)
 800bc06:	485e      	ldr	r0, [pc, #376]	; (800bd80 <tcp_output_segment+0x1a8>)
 800bc08:	f003 fb6e 	bl	800f2e8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d106      	bne.n	800bc20 <tcp_output_segment+0x48>
 800bc12:	4b59      	ldr	r3, [pc, #356]	; (800bd78 <tcp_output_segment+0x1a0>)
 800bc14:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800bc18:	495b      	ldr	r1, [pc, #364]	; (800bd88 <tcp_output_segment+0x1b0>)
 800bc1a:	4859      	ldr	r0, [pc, #356]	; (800bd80 <tcp_output_segment+0x1a8>)
 800bc1c:	f003 fb64 	bl	800f2e8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800bc20:	68f8      	ldr	r0, [r7, #12]
 800bc22:	f7ff ffb9 	bl	800bb98 <tcp_output_segment_busy>
 800bc26:	4603      	mov	r3, r0
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d001      	beq.n	800bc30 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	e09f      	b.n	800bd70 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	68dc      	ldr	r4, [r3, #12]
 800bc38:	4610      	mov	r0, r2
 800bc3a:	f7f8 ff42 	bl	8004ac2 <lwip_htonl>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	68dc      	ldr	r4, [r3, #12]
 800bc4a:	4610      	mov	r0, r2
 800bc4c:	f7f8 ff24 	bl	8004a98 <lwip_htons>
 800bc50:	4603      	mov	r3, r0
 800bc52:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc58:	68ba      	ldr	r2, [r7, #8]
 800bc5a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800bc5c:	441a      	add	r2, r3
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	68db      	ldr	r3, [r3, #12]
 800bc66:	3314      	adds	r3, #20
 800bc68:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	7a9b      	ldrb	r3, [r3, #10]
 800bc6e:	f003 0301 	and.w	r3, r3, #1
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d015      	beq.n	800bca2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	3304      	adds	r3, #4
 800bc7a:	461a      	mov	r2, r3
 800bc7c:	6879      	ldr	r1, [r7, #4]
 800bc7e:	f44f 7006 	mov.w	r0, #536	; 0x218
 800bc82:	f7fc fa37 	bl	80080f4 <tcp_eff_send_mss_netif>
 800bc86:	4603      	mov	r3, r0
 800bc88:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800bc8a:	8b7b      	ldrh	r3, [r7, #26]
 800bc8c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800bc90:	4618      	mov	r0, r3
 800bc92:	f7f8 ff16 	bl	8004ac2 <lwip_htonl>
 800bc96:	4602      	mov	r2, r0
 800bc98:	69fb      	ldr	r3, [r7, #28]
 800bc9a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800bc9c:	69fb      	ldr	r3, [r7, #28]
 800bc9e:	3304      	adds	r3, #4
 800bca0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	da02      	bge.n	800bcb2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	2200      	movs	r2, #0
 800bcb0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d10c      	bne.n	800bcd4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800bcba:	4b34      	ldr	r3, [pc, #208]	; (800bd8c <tcp_output_segment+0x1b4>)
 800bcbc:	681a      	ldr	r2, [r3, #0]
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	68db      	ldr	r3, [r3, #12]
 800bcc6:	685b      	ldr	r3, [r3, #4]
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f7f8 fefa 	bl	8004ac2 <lwip_htonl>
 800bcce:	4602      	mov	r2, r0
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	68da      	ldr	r2, [r3, #12]
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	685b      	ldr	r3, [r3, #4]
 800bcdc:	685b      	ldr	r3, [r3, #4]
 800bcde:	1ad3      	subs	r3, r2, r3
 800bce0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	685b      	ldr	r3, [r3, #4]
 800bce6:	8959      	ldrh	r1, [r3, #10]
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	685b      	ldr	r3, [r3, #4]
 800bcec:	8b3a      	ldrh	r2, [r7, #24]
 800bcee:	1a8a      	subs	r2, r1, r2
 800bcf0:	b292      	uxth	r2, r2
 800bcf2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	685b      	ldr	r3, [r3, #4]
 800bcf8:	8919      	ldrh	r1, [r3, #8]
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	685b      	ldr	r3, [r3, #4]
 800bcfe:	8b3a      	ldrh	r2, [r7, #24]
 800bd00:	1a8a      	subs	r2, r1, r2
 800bd02:	b292      	uxth	r2, r2
 800bd04:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	685b      	ldr	r3, [r3, #4]
 800bd0a:	68fa      	ldr	r2, [r7, #12]
 800bd0c:	68d2      	ldr	r2, [r2, #12]
 800bd0e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	68db      	ldr	r3, [r3, #12]
 800bd14:	2200      	movs	r2, #0
 800bd16:	741a      	strb	r2, [r3, #16]
 800bd18:	2200      	movs	r2, #0
 800bd1a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	68db      	ldr	r3, [r3, #12]
 800bd20:	f103 0214 	add.w	r2, r3, #20
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	7a9b      	ldrb	r3, [r3, #10]
 800bd28:	009b      	lsls	r3, r3, #2
 800bd2a:	f003 0304 	and.w	r3, r3, #4
 800bd2e:	4413      	add	r3, r2
 800bd30:	69fa      	ldr	r2, [r7, #28]
 800bd32:	429a      	cmp	r2, r3
 800bd34:	d006      	beq.n	800bd44 <tcp_output_segment+0x16c>
 800bd36:	4b10      	ldr	r3, [pc, #64]	; (800bd78 <tcp_output_segment+0x1a0>)
 800bd38:	f240 621c 	movw	r2, #1564	; 0x61c
 800bd3c:	4914      	ldr	r1, [pc, #80]	; (800bd90 <tcp_output_segment+0x1b8>)
 800bd3e:	4810      	ldr	r0, [pc, #64]	; (800bd80 <tcp_output_segment+0x1a8>)
 800bd40:	f003 fad2 	bl	800f2e8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	6858      	ldr	r0, [r3, #4]
 800bd48:	68b9      	ldr	r1, [r7, #8]
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	1d1c      	adds	r4, r3, #4
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	7add      	ldrb	r5, [r3, #11]
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	7a9b      	ldrb	r3, [r3, #10]
 800bd56:	687a      	ldr	r2, [r7, #4]
 800bd58:	9202      	str	r2, [sp, #8]
 800bd5a:	2206      	movs	r2, #6
 800bd5c:	9201      	str	r2, [sp, #4]
 800bd5e:	9300      	str	r3, [sp, #0]
 800bd60:	462b      	mov	r3, r5
 800bd62:	4622      	mov	r2, r4
 800bd64:	f002 fa36 	bl	800e1d4 <ip4_output_if>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800bd6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3720      	adds	r7, #32
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bdb0      	pop	{r4, r5, r7, pc}
 800bd78:	08012078 	.word	0x08012078
 800bd7c:	0801263c 	.word	0x0801263c
 800bd80:	080120cc 	.word	0x080120cc
 800bd84:	0801265c 	.word	0x0801265c
 800bd88:	0801267c 	.word	0x0801267c
 800bd8c:	20008eb0 	.word	0x20008eb0
 800bd90:	080126a0 	.word	0x080126a0

0800bd94 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800bd94:	b5b0      	push	{r4, r5, r7, lr}
 800bd96:	b084      	sub	sp, #16
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d106      	bne.n	800bdb0 <tcp_rexmit_rto_prepare+0x1c>
 800bda2:	4b31      	ldr	r3, [pc, #196]	; (800be68 <tcp_rexmit_rto_prepare+0xd4>)
 800bda4:	f240 6263 	movw	r2, #1635	; 0x663
 800bda8:	4930      	ldr	r1, [pc, #192]	; (800be6c <tcp_rexmit_rto_prepare+0xd8>)
 800bdaa:	4831      	ldr	r0, [pc, #196]	; (800be70 <tcp_rexmit_rto_prepare+0xdc>)
 800bdac:	f003 fa9c 	bl	800f2e8 <iprintf>

  if (pcb->unacked == NULL) {
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d102      	bne.n	800bdbe <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800bdb8:	f06f 0305 	mvn.w	r3, #5
 800bdbc:	e050      	b.n	800be60 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdc2:	60fb      	str	r3, [r7, #12]
 800bdc4:	e00b      	b.n	800bdde <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800bdc6:	68f8      	ldr	r0, [r7, #12]
 800bdc8:	f7ff fee6 	bl	800bb98 <tcp_output_segment_busy>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d002      	beq.n	800bdd8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800bdd2:	f06f 0305 	mvn.w	r3, #5
 800bdd6:	e043      	b.n	800be60 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	60fb      	str	r3, [r7, #12]
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d1ef      	bne.n	800bdc6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800bde6:	68f8      	ldr	r0, [r7, #12]
 800bde8:	f7ff fed6 	bl	800bb98 <tcp_output_segment_busy>
 800bdec:	4603      	mov	r3, r0
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d002      	beq.n	800bdf8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800bdf2:	f06f 0305 	mvn.w	r3, #5
 800bdf6:	e033      	b.n	800be60 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2200      	movs	r2, #0
 800be0c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	8b5b      	ldrh	r3, [r3, #26]
 800be12:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800be16:	b29a      	uxth	r2, r3
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	68db      	ldr	r3, [r3, #12]
 800be20:	685b      	ldr	r3, [r3, #4]
 800be22:	4618      	mov	r0, r3
 800be24:	f7f8 fe4d 	bl	8004ac2 <lwip_htonl>
 800be28:	4604      	mov	r4, r0
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	891b      	ldrh	r3, [r3, #8]
 800be2e:	461d      	mov	r5, r3
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	68db      	ldr	r3, [r3, #12]
 800be34:	899b      	ldrh	r3, [r3, #12]
 800be36:	b29b      	uxth	r3, r3
 800be38:	4618      	mov	r0, r3
 800be3a:	f7f8 fe2d 	bl	8004a98 <lwip_htons>
 800be3e:	4603      	mov	r3, r0
 800be40:	b2db      	uxtb	r3, r3
 800be42:	f003 0303 	and.w	r3, r3, #3
 800be46:	2b00      	cmp	r3, #0
 800be48:	d001      	beq.n	800be4e <tcp_rexmit_rto_prepare+0xba>
 800be4a:	2301      	movs	r3, #1
 800be4c:	e000      	b.n	800be50 <tcp_rexmit_rto_prepare+0xbc>
 800be4e:	2300      	movs	r3, #0
 800be50:	442b      	add	r3, r5
 800be52:	18e2      	adds	r2, r4, r3
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2200      	movs	r2, #0
 800be5c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800be5e:	2300      	movs	r3, #0
}
 800be60:	4618      	mov	r0, r3
 800be62:	3710      	adds	r7, #16
 800be64:	46bd      	mov	sp, r7
 800be66:	bdb0      	pop	{r4, r5, r7, pc}
 800be68:	08012078 	.word	0x08012078
 800be6c:	080126b4 	.word	0x080126b4
 800be70:	080120cc 	.word	0x080120cc

0800be74 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b082      	sub	sp, #8
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d106      	bne.n	800be90 <tcp_rexmit_rto_commit+0x1c>
 800be82:	4b0d      	ldr	r3, [pc, #52]	; (800beb8 <tcp_rexmit_rto_commit+0x44>)
 800be84:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800be88:	490c      	ldr	r1, [pc, #48]	; (800bebc <tcp_rexmit_rto_commit+0x48>)
 800be8a:	480d      	ldr	r0, [pc, #52]	; (800bec0 <tcp_rexmit_rto_commit+0x4c>)
 800be8c:	f003 fa2c 	bl	800f2e8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800be96:	2bff      	cmp	r3, #255	; 0xff
 800be98:	d007      	beq.n	800beaa <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bea0:	3301      	adds	r3, #1
 800bea2:	b2da      	uxtb	r2, r3
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f7ff fc80 	bl	800b7b0 <tcp_output>
}
 800beb0:	bf00      	nop
 800beb2:	3708      	adds	r7, #8
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}
 800beb8:	08012078 	.word	0x08012078
 800bebc:	080126d8 	.word	0x080126d8
 800bec0:	080120cc 	.word	0x080120cc

0800bec4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b082      	sub	sp, #8
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d106      	bne.n	800bee0 <tcp_rexmit_rto+0x1c>
 800bed2:	4b0a      	ldr	r3, [pc, #40]	; (800befc <tcp_rexmit_rto+0x38>)
 800bed4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800bed8:	4909      	ldr	r1, [pc, #36]	; (800bf00 <tcp_rexmit_rto+0x3c>)
 800beda:	480a      	ldr	r0, [pc, #40]	; (800bf04 <tcp_rexmit_rto+0x40>)
 800bedc:	f003 fa04 	bl	800f2e8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	f7ff ff57 	bl	800bd94 <tcp_rexmit_rto_prepare>
 800bee6:	4603      	mov	r3, r0
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d102      	bne.n	800bef2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f7ff ffc1 	bl	800be74 <tcp_rexmit_rto_commit>
  }
}
 800bef2:	bf00      	nop
 800bef4:	3708      	adds	r7, #8
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}
 800befa:	bf00      	nop
 800befc:	08012078 	.word	0x08012078
 800bf00:	080126fc 	.word	0x080126fc
 800bf04:	080120cc 	.word	0x080120cc

0800bf08 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800bf08:	b590      	push	{r4, r7, lr}
 800bf0a:	b085      	sub	sp, #20
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d106      	bne.n	800bf24 <tcp_rexmit+0x1c>
 800bf16:	4b2f      	ldr	r3, [pc, #188]	; (800bfd4 <tcp_rexmit+0xcc>)
 800bf18:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800bf1c:	492e      	ldr	r1, [pc, #184]	; (800bfd8 <tcp_rexmit+0xd0>)
 800bf1e:	482f      	ldr	r0, [pc, #188]	; (800bfdc <tcp_rexmit+0xd4>)
 800bf20:	f003 f9e2 	bl	800f2e8 <iprintf>

  if (pcb->unacked == NULL) {
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d102      	bne.n	800bf32 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800bf2c:	f06f 0305 	mvn.w	r3, #5
 800bf30:	e04c      	b.n	800bfcc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf36:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800bf38:	68b8      	ldr	r0, [r7, #8]
 800bf3a:	f7ff fe2d 	bl	800bb98 <tcp_output_segment_busy>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d002      	beq.n	800bf4a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800bf44:	f06f 0305 	mvn.w	r3, #5
 800bf48:	e040      	b.n	800bfcc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	681a      	ldr	r2, [r3, #0]
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	336c      	adds	r3, #108	; 0x6c
 800bf56:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800bf58:	e002      	b.n	800bf60 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d011      	beq.n	800bf8c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	68db      	ldr	r3, [r3, #12]
 800bf6e:	685b      	ldr	r3, [r3, #4]
 800bf70:	4618      	mov	r0, r3
 800bf72:	f7f8 fda6 	bl	8004ac2 <lwip_htonl>
 800bf76:	4604      	mov	r4, r0
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	68db      	ldr	r3, [r3, #12]
 800bf7c:	685b      	ldr	r3, [r3, #4]
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f7f8 fd9f 	bl	8004ac2 <lwip_htonl>
 800bf84:	4603      	mov	r3, r0
 800bf86:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	dbe6      	blt.n	800bf5a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	681a      	ldr	r2, [r3, #0]
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	68ba      	ldr	r2, [r7, #8]
 800bf98:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d103      	bne.n	800bfaa <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bfb0:	2bff      	cmp	r3, #255	; 0xff
 800bfb2:	d007      	beq.n	800bfc4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bfba:	3301      	adds	r3, #1
 800bfbc:	b2da      	uxtb	r2, r3
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800bfca:	2300      	movs	r3, #0
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3714      	adds	r7, #20
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd90      	pop	{r4, r7, pc}
 800bfd4:	08012078 	.word	0x08012078
 800bfd8:	08012718 	.word	0x08012718
 800bfdc:	080120cc 	.word	0x080120cc

0800bfe0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b082      	sub	sp, #8
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d106      	bne.n	800bffc <tcp_rexmit_fast+0x1c>
 800bfee:	4b2a      	ldr	r3, [pc, #168]	; (800c098 <tcp_rexmit_fast+0xb8>)
 800bff0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800bff4:	4929      	ldr	r1, [pc, #164]	; (800c09c <tcp_rexmit_fast+0xbc>)
 800bff6:	482a      	ldr	r0, [pc, #168]	; (800c0a0 <tcp_rexmit_fast+0xc0>)
 800bff8:	f003 f976 	bl	800f2e8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c000:	2b00      	cmp	r3, #0
 800c002:	d044      	beq.n	800c08e <tcp_rexmit_fast+0xae>
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	8b5b      	ldrh	r3, [r3, #26]
 800c008:	f003 0304 	and.w	r3, r3, #4
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d13e      	bne.n	800c08e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f7ff ff79 	bl	800bf08 <tcp_rexmit>
 800c016:	4603      	mov	r3, r0
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d138      	bne.n	800c08e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c028:	4293      	cmp	r3, r2
 800c02a:	bf28      	it	cs
 800c02c:	4613      	movcs	r3, r2
 800c02e:	b29b      	uxth	r3, r3
 800c030:	0fda      	lsrs	r2, r3, #31
 800c032:	4413      	add	r3, r2
 800c034:	105b      	asrs	r3, r3, #1
 800c036:	b29a      	uxth	r2, r3
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c044:	461a      	mov	r2, r3
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c04a:	005b      	lsls	r3, r3, #1
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d206      	bcs.n	800c05e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c054:	005b      	lsls	r3, r3, #1
 800c056:	b29a      	uxth	r2, r3
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c068:	4619      	mov	r1, r3
 800c06a:	0049      	lsls	r1, r1, #1
 800c06c:	440b      	add	r3, r1
 800c06e:	b29b      	uxth	r3, r3
 800c070:	4413      	add	r3, r2
 800c072:	b29a      	uxth	r2, r3
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	8b5b      	ldrh	r3, [r3, #26]
 800c07e:	f043 0304 	orr.w	r3, r3, #4
 800c082:	b29a      	uxth	r2, r3
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2200      	movs	r2, #0
 800c08c:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800c08e:	bf00      	nop
 800c090:	3708      	adds	r7, #8
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}
 800c096:	bf00      	nop
 800c098:	08012078 	.word	0x08012078
 800c09c:	08012730 	.word	0x08012730
 800c0a0:	080120cc 	.word	0x080120cc

0800c0a4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b086      	sub	sp, #24
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	60f8      	str	r0, [r7, #12]
 800c0ac:	607b      	str	r3, [r7, #4]
 800c0ae:	460b      	mov	r3, r1
 800c0b0:	817b      	strh	r3, [r7, #10]
 800c0b2:	4613      	mov	r3, r2
 800c0b4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c0b6:	897a      	ldrh	r2, [r7, #10]
 800c0b8:	893b      	ldrh	r3, [r7, #8]
 800c0ba:	4413      	add	r3, r2
 800c0bc:	b29b      	uxth	r3, r3
 800c0be:	3314      	adds	r3, #20
 800c0c0:	b29b      	uxth	r3, r3
 800c0c2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c0c6:	4619      	mov	r1, r3
 800c0c8:	2022      	movs	r0, #34	; 0x22
 800c0ca:	f7f9 fd1f 	bl	8005b0c <pbuf_alloc>
 800c0ce:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800c0d0:	697b      	ldr	r3, [r7, #20]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d04d      	beq.n	800c172 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c0d6:	897b      	ldrh	r3, [r7, #10]
 800c0d8:	3313      	adds	r3, #19
 800c0da:	697a      	ldr	r2, [r7, #20]
 800c0dc:	8952      	ldrh	r2, [r2, #10]
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	db06      	blt.n	800c0f0 <tcp_output_alloc_header_common+0x4c>
 800c0e2:	4b26      	ldr	r3, [pc, #152]	; (800c17c <tcp_output_alloc_header_common+0xd8>)
 800c0e4:	f240 7223 	movw	r2, #1827	; 0x723
 800c0e8:	4925      	ldr	r1, [pc, #148]	; (800c180 <tcp_output_alloc_header_common+0xdc>)
 800c0ea:	4826      	ldr	r0, [pc, #152]	; (800c184 <tcp_output_alloc_header_common+0xe0>)
 800c0ec:	f003 f8fc 	bl	800f2e8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800c0f0:	697b      	ldr	r3, [r7, #20]
 800c0f2:	685b      	ldr	r3, [r3, #4]
 800c0f4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800c0f6:	8c3b      	ldrh	r3, [r7, #32]
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f7f8 fccd 	bl	8004a98 <lwip_htons>
 800c0fe:	4603      	mov	r3, r0
 800c100:	461a      	mov	r2, r3
 800c102:	693b      	ldr	r3, [r7, #16]
 800c104:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800c106:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c108:	4618      	mov	r0, r3
 800c10a:	f7f8 fcc5 	bl	8004a98 <lwip_htons>
 800c10e:	4603      	mov	r3, r0
 800c110:	461a      	mov	r2, r3
 800c112:	693b      	ldr	r3, [r7, #16]
 800c114:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800c116:	693b      	ldr	r3, [r7, #16]
 800c118:	687a      	ldr	r2, [r7, #4]
 800c11a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800c11c:	68f8      	ldr	r0, [r7, #12]
 800c11e:	f7f8 fcd0 	bl	8004ac2 <lwip_htonl>
 800c122:	4602      	mov	r2, r0
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800c128:	897b      	ldrh	r3, [r7, #10]
 800c12a:	089b      	lsrs	r3, r3, #2
 800c12c:	b29b      	uxth	r3, r3
 800c12e:	3305      	adds	r3, #5
 800c130:	b29b      	uxth	r3, r3
 800c132:	031b      	lsls	r3, r3, #12
 800c134:	b29a      	uxth	r2, r3
 800c136:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c13a:	b29b      	uxth	r3, r3
 800c13c:	4313      	orrs	r3, r2
 800c13e:	b29b      	uxth	r3, r3
 800c140:	4618      	mov	r0, r3
 800c142:	f7f8 fca9 	bl	8004a98 <lwip_htons>
 800c146:	4603      	mov	r3, r0
 800c148:	461a      	mov	r2, r3
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800c14e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c150:	4618      	mov	r0, r3
 800c152:	f7f8 fca1 	bl	8004a98 <lwip_htons>
 800c156:	4603      	mov	r3, r0
 800c158:	461a      	mov	r2, r3
 800c15a:	693b      	ldr	r3, [r7, #16]
 800c15c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	2200      	movs	r2, #0
 800c162:	741a      	strb	r2, [r3, #16]
 800c164:	2200      	movs	r2, #0
 800c166:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	2200      	movs	r2, #0
 800c16c:	749a      	strb	r2, [r3, #18]
 800c16e:	2200      	movs	r2, #0
 800c170:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800c172:	697b      	ldr	r3, [r7, #20]
}
 800c174:	4618      	mov	r0, r3
 800c176:	3718      	adds	r7, #24
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}
 800c17c:	08012078 	.word	0x08012078
 800c180:	08012750 	.word	0x08012750
 800c184:	080120cc 	.word	0x080120cc

0800c188 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800c188:	b5b0      	push	{r4, r5, r7, lr}
 800c18a:	b08a      	sub	sp, #40	; 0x28
 800c18c:	af04      	add	r7, sp, #16
 800c18e:	60f8      	str	r0, [r7, #12]
 800c190:	607b      	str	r3, [r7, #4]
 800c192:	460b      	mov	r3, r1
 800c194:	817b      	strh	r3, [r7, #10]
 800c196:	4613      	mov	r3, r2
 800c198:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d106      	bne.n	800c1ae <tcp_output_alloc_header+0x26>
 800c1a0:	4b15      	ldr	r3, [pc, #84]	; (800c1f8 <tcp_output_alloc_header+0x70>)
 800c1a2:	f240 7242 	movw	r2, #1858	; 0x742
 800c1a6:	4915      	ldr	r1, [pc, #84]	; (800c1fc <tcp_output_alloc_header+0x74>)
 800c1a8:	4815      	ldr	r0, [pc, #84]	; (800c200 <tcp_output_alloc_header+0x78>)
 800c1aa:	f003 f89d 	bl	800f2e8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	8adb      	ldrh	r3, [r3, #22]
 800c1b6:	68fa      	ldr	r2, [r7, #12]
 800c1b8:	8b12      	ldrh	r2, [r2, #24]
 800c1ba:	68f9      	ldr	r1, [r7, #12]
 800c1bc:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800c1be:	893d      	ldrh	r5, [r7, #8]
 800c1c0:	897c      	ldrh	r4, [r7, #10]
 800c1c2:	9103      	str	r1, [sp, #12]
 800c1c4:	2110      	movs	r1, #16
 800c1c6:	9102      	str	r1, [sp, #8]
 800c1c8:	9201      	str	r2, [sp, #4]
 800c1ca:	9300      	str	r3, [sp, #0]
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	462a      	mov	r2, r5
 800c1d0:	4621      	mov	r1, r4
 800c1d2:	f7ff ff67 	bl	800c0a4 <tcp_output_alloc_header_common>
 800c1d6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d006      	beq.n	800c1ec <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1e2:	68fa      	ldr	r2, [r7, #12]
 800c1e4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c1e6:	441a      	add	r2, r3
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800c1ec:	697b      	ldr	r3, [r7, #20]
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3718      	adds	r7, #24
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bdb0      	pop	{r4, r5, r7, pc}
 800c1f6:	bf00      	nop
 800c1f8:	08012078 	.word	0x08012078
 800c1fc:	08012780 	.word	0x08012780
 800c200:	080120cc 	.word	0x080120cc

0800c204 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b088      	sub	sp, #32
 800c208:	af00      	add	r7, sp, #0
 800c20a:	60f8      	str	r0, [r7, #12]
 800c20c:	60b9      	str	r1, [r7, #8]
 800c20e:	4611      	mov	r1, r2
 800c210:	461a      	mov	r2, r3
 800c212:	460b      	mov	r3, r1
 800c214:	71fb      	strb	r3, [r7, #7]
 800c216:	4613      	mov	r3, r2
 800c218:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800c21a:	2300      	movs	r3, #0
 800c21c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d106      	bne.n	800c232 <tcp_output_fill_options+0x2e>
 800c224:	4b13      	ldr	r3, [pc, #76]	; (800c274 <tcp_output_fill_options+0x70>)
 800c226:	f240 7256 	movw	r2, #1878	; 0x756
 800c22a:	4913      	ldr	r1, [pc, #76]	; (800c278 <tcp_output_fill_options+0x74>)
 800c22c:	4813      	ldr	r0, [pc, #76]	; (800c27c <tcp_output_fill_options+0x78>)
 800c22e:	f003 f85b 	bl	800f2e8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	685b      	ldr	r3, [r3, #4]
 800c236:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800c238:	69bb      	ldr	r3, [r7, #24]
 800c23a:	3314      	adds	r3, #20
 800c23c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800c23e:	69bb      	ldr	r3, [r7, #24]
 800c240:	f103 0214 	add.w	r2, r3, #20
 800c244:	8bfb      	ldrh	r3, [r7, #30]
 800c246:	009b      	lsls	r3, r3, #2
 800c248:	4619      	mov	r1, r3
 800c24a:	79fb      	ldrb	r3, [r7, #7]
 800c24c:	009b      	lsls	r3, r3, #2
 800c24e:	f003 0304 	and.w	r3, r3, #4
 800c252:	440b      	add	r3, r1
 800c254:	4413      	add	r3, r2
 800c256:	697a      	ldr	r2, [r7, #20]
 800c258:	429a      	cmp	r2, r3
 800c25a:	d006      	beq.n	800c26a <tcp_output_fill_options+0x66>
 800c25c:	4b05      	ldr	r3, [pc, #20]	; (800c274 <tcp_output_fill_options+0x70>)
 800c25e:	f240 7275 	movw	r2, #1909	; 0x775
 800c262:	4907      	ldr	r1, [pc, #28]	; (800c280 <tcp_output_fill_options+0x7c>)
 800c264:	4805      	ldr	r0, [pc, #20]	; (800c27c <tcp_output_fill_options+0x78>)
 800c266:	f003 f83f 	bl	800f2e8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800c26a:	bf00      	nop
 800c26c:	3720      	adds	r7, #32
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}
 800c272:	bf00      	nop
 800c274:	08012078 	.word	0x08012078
 800c278:	080127a8 	.word	0x080127a8
 800c27c:	080120cc 	.word	0x080120cc
 800c280:	080126a0 	.word	0x080126a0

0800c284 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b08a      	sub	sp, #40	; 0x28
 800c288:	af04      	add	r7, sp, #16
 800c28a:	60f8      	str	r0, [r7, #12]
 800c28c:	60b9      	str	r1, [r7, #8]
 800c28e:	607a      	str	r2, [r7, #4]
 800c290:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d106      	bne.n	800c2a6 <tcp_output_control_segment+0x22>
 800c298:	4b1c      	ldr	r3, [pc, #112]	; (800c30c <tcp_output_control_segment+0x88>)
 800c29a:	f240 7287 	movw	r2, #1927	; 0x787
 800c29e:	491c      	ldr	r1, [pc, #112]	; (800c310 <tcp_output_control_segment+0x8c>)
 800c2a0:	481c      	ldr	r0, [pc, #112]	; (800c314 <tcp_output_control_segment+0x90>)
 800c2a2:	f003 f821 	bl	800f2e8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800c2a6:	683a      	ldr	r2, [r7, #0]
 800c2a8:	6879      	ldr	r1, [r7, #4]
 800c2aa:	68f8      	ldr	r0, [r7, #12]
 800c2ac:	f7fe fae8 	bl	800a880 <tcp_route>
 800c2b0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800c2b2:	693b      	ldr	r3, [r7, #16]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d102      	bne.n	800c2be <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800c2b8:	23fc      	movs	r3, #252	; 0xfc
 800c2ba:	75fb      	strb	r3, [r7, #23]
 800c2bc:	e01c      	b.n	800c2f8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d006      	beq.n	800c2d2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	7adb      	ldrb	r3, [r3, #11]
 800c2c8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	7a9b      	ldrb	r3, [r3, #10]
 800c2ce:	757b      	strb	r3, [r7, #21]
 800c2d0:	e003      	b.n	800c2da <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800c2d2:	23ff      	movs	r3, #255	; 0xff
 800c2d4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800c2da:	7dba      	ldrb	r2, [r7, #22]
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	9302      	str	r3, [sp, #8]
 800c2e0:	2306      	movs	r3, #6
 800c2e2:	9301      	str	r3, [sp, #4]
 800c2e4:	7d7b      	ldrb	r3, [r7, #21]
 800c2e6:	9300      	str	r3, [sp, #0]
 800c2e8:	4613      	mov	r3, r2
 800c2ea:	683a      	ldr	r2, [r7, #0]
 800c2ec:	6879      	ldr	r1, [r7, #4]
 800c2ee:	68b8      	ldr	r0, [r7, #8]
 800c2f0:	f001 ff70 	bl	800e1d4 <ip4_output_if>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800c2f8:	68b8      	ldr	r0, [r7, #8]
 800c2fa:	f7f9 feeb 	bl	80060d4 <pbuf_free>
  return err;
 800c2fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c302:	4618      	mov	r0, r3
 800c304:	3718      	adds	r7, #24
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}
 800c30a:	bf00      	nop
 800c30c:	08012078 	.word	0x08012078
 800c310:	080127d0 	.word	0x080127d0
 800c314:	080120cc 	.word	0x080120cc

0800c318 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800c318:	b590      	push	{r4, r7, lr}
 800c31a:	b08b      	sub	sp, #44	; 0x2c
 800c31c:	af04      	add	r7, sp, #16
 800c31e:	60f8      	str	r0, [r7, #12]
 800c320:	60b9      	str	r1, [r7, #8]
 800c322:	607a      	str	r2, [r7, #4]
 800c324:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d106      	bne.n	800c33a <tcp_rst+0x22>
 800c32c:	4b1f      	ldr	r3, [pc, #124]	; (800c3ac <tcp_rst+0x94>)
 800c32e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800c332:	491f      	ldr	r1, [pc, #124]	; (800c3b0 <tcp_rst+0x98>)
 800c334:	481f      	ldr	r0, [pc, #124]	; (800c3b4 <tcp_rst+0x9c>)
 800c336:	f002 ffd7 	bl	800f2e8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800c33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d106      	bne.n	800c34e <tcp_rst+0x36>
 800c340:	4b1a      	ldr	r3, [pc, #104]	; (800c3ac <tcp_rst+0x94>)
 800c342:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800c346:	491c      	ldr	r1, [pc, #112]	; (800c3b8 <tcp_rst+0xa0>)
 800c348:	481a      	ldr	r0, [pc, #104]	; (800c3b4 <tcp_rst+0x9c>)
 800c34a:	f002 ffcd 	bl	800f2e8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c34e:	2300      	movs	r3, #0
 800c350:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800c352:	f246 0308 	movw	r3, #24584	; 0x6008
 800c356:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800c358:	7dfb      	ldrb	r3, [r7, #23]
 800c35a:	b29c      	uxth	r4, r3
 800c35c:	68b8      	ldr	r0, [r7, #8]
 800c35e:	f7f8 fbb0 	bl	8004ac2 <lwip_htonl>
 800c362:	4602      	mov	r2, r0
 800c364:	8abb      	ldrh	r3, [r7, #20]
 800c366:	9303      	str	r3, [sp, #12]
 800c368:	2314      	movs	r3, #20
 800c36a:	9302      	str	r3, [sp, #8]
 800c36c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c36e:	9301      	str	r3, [sp, #4]
 800c370:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c372:	9300      	str	r3, [sp, #0]
 800c374:	4613      	mov	r3, r2
 800c376:	2200      	movs	r2, #0
 800c378:	4621      	mov	r1, r4
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f7ff fe92 	bl	800c0a4 <tcp_output_alloc_header_common>
 800c380:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800c382:	693b      	ldr	r3, [r7, #16]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d00c      	beq.n	800c3a2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c388:	7dfb      	ldrb	r3, [r7, #23]
 800c38a:	2200      	movs	r2, #0
 800c38c:	6939      	ldr	r1, [r7, #16]
 800c38e:	68f8      	ldr	r0, [r7, #12]
 800c390:	f7ff ff38 	bl	800c204 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800c394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c396:	683a      	ldr	r2, [r7, #0]
 800c398:	6939      	ldr	r1, [r7, #16]
 800c39a:	68f8      	ldr	r0, [r7, #12]
 800c39c:	f7ff ff72 	bl	800c284 <tcp_output_control_segment>
 800c3a0:	e000      	b.n	800c3a4 <tcp_rst+0x8c>
    return;
 800c3a2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800c3a4:	371c      	adds	r7, #28
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd90      	pop	{r4, r7, pc}
 800c3aa:	bf00      	nop
 800c3ac:	08012078 	.word	0x08012078
 800c3b0:	080127fc 	.word	0x080127fc
 800c3b4:	080120cc 	.word	0x080120cc
 800c3b8:	08012818 	.word	0x08012818

0800c3bc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800c3bc:	b590      	push	{r4, r7, lr}
 800c3be:	b087      	sub	sp, #28
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d106      	bne.n	800c3e0 <tcp_send_empty_ack+0x24>
 800c3d2:	4b28      	ldr	r3, [pc, #160]	; (800c474 <tcp_send_empty_ack+0xb8>)
 800c3d4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800c3d8:	4927      	ldr	r1, [pc, #156]	; (800c478 <tcp_send_empty_ack+0xbc>)
 800c3da:	4828      	ldr	r0, [pc, #160]	; (800c47c <tcp_send_empty_ack+0xc0>)
 800c3dc:	f002 ff84 	bl	800f2e8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c3e0:	7dfb      	ldrb	r3, [r7, #23]
 800c3e2:	009b      	lsls	r3, r3, #2
 800c3e4:	b2db      	uxtb	r3, r3
 800c3e6:	f003 0304 	and.w	r3, r3, #4
 800c3ea:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800c3ec:	7d7b      	ldrb	r3, [r7, #21]
 800c3ee:	b29c      	uxth	r4, r3
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f7f8 fb64 	bl	8004ac2 <lwip_htonl>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	4621      	mov	r1, r4
 800c400:	6878      	ldr	r0, [r7, #4]
 800c402:	f7ff fec1 	bl	800c188 <tcp_output_alloc_header>
 800c406:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c408:	693b      	ldr	r3, [r7, #16]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d109      	bne.n	800c422 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	8b5b      	ldrh	r3, [r3, #26]
 800c412:	f043 0303 	orr.w	r3, r3, #3
 800c416:	b29a      	uxth	r2, r3
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800c41c:	f06f 0301 	mvn.w	r3, #1
 800c420:	e023      	b.n	800c46a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800c422:	7dbb      	ldrb	r3, [r7, #22]
 800c424:	7dfa      	ldrb	r2, [r7, #23]
 800c426:	6939      	ldr	r1, [r7, #16]
 800c428:	6878      	ldr	r0, [r7, #4]
 800c42a:	f7ff feeb 	bl	800c204 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c42e:	687a      	ldr	r2, [r7, #4]
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	3304      	adds	r3, #4
 800c434:	6939      	ldr	r1, [r7, #16]
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f7ff ff24 	bl	800c284 <tcp_output_control_segment>
 800c43c:	4603      	mov	r3, r0
 800c43e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800c440:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d007      	beq.n	800c458 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	8b5b      	ldrh	r3, [r3, #26]
 800c44c:	f043 0303 	orr.w	r3, r3, #3
 800c450:	b29a      	uxth	r2, r3
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	835a      	strh	r2, [r3, #26]
 800c456:	e006      	b.n	800c466 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	8b5b      	ldrh	r3, [r3, #26]
 800c45c:	f023 0303 	bic.w	r3, r3, #3
 800c460:	b29a      	uxth	r2, r3
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800c466:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	371c      	adds	r7, #28
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd90      	pop	{r4, r7, pc}
 800c472:	bf00      	nop
 800c474:	08012078 	.word	0x08012078
 800c478:	08012834 	.word	0x08012834
 800c47c:	080120cc 	.word	0x080120cc

0800c480 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c480:	b590      	push	{r4, r7, lr}
 800c482:	b087      	sub	sp, #28
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c488:	2300      	movs	r3, #0
 800c48a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d106      	bne.n	800c4a0 <tcp_keepalive+0x20>
 800c492:	4b18      	ldr	r3, [pc, #96]	; (800c4f4 <tcp_keepalive+0x74>)
 800c494:	f640 0224 	movw	r2, #2084	; 0x824
 800c498:	4917      	ldr	r1, [pc, #92]	; (800c4f8 <tcp_keepalive+0x78>)
 800c49a:	4818      	ldr	r0, [pc, #96]	; (800c4fc <tcp_keepalive+0x7c>)
 800c49c:	f002 ff24 	bl	800f2e8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c4a0:	7dfb      	ldrb	r3, [r7, #23]
 800c4a2:	b29c      	uxth	r4, r3
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4a8:	3b01      	subs	r3, #1
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f7f8 fb09 	bl	8004ac2 <lwip_htonl>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	4621      	mov	r1, r4
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	f7ff fe66 	bl	800c188 <tcp_output_alloc_header>
 800c4bc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c4be:	693b      	ldr	r3, [r7, #16]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d102      	bne.n	800c4ca <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800c4c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c4c8:	e010      	b.n	800c4ec <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c4ca:	7dfb      	ldrb	r3, [r7, #23]
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	6939      	ldr	r1, [r7, #16]
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	f7ff fe97 	bl	800c204 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c4d6:	687a      	ldr	r2, [r7, #4]
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	3304      	adds	r3, #4
 800c4dc:	6939      	ldr	r1, [r7, #16]
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f7ff fed0 	bl	800c284 <tcp_output_control_segment>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c4e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	371c      	adds	r7, #28
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd90      	pop	{r4, r7, pc}
 800c4f4:	08012078 	.word	0x08012078
 800c4f8:	08012854 	.word	0x08012854
 800c4fc:	080120cc 	.word	0x080120cc

0800c500 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c500:	b590      	push	{r4, r7, lr}
 800c502:	b08b      	sub	sp, #44	; 0x2c
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c508:	2300      	movs	r3, #0
 800c50a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d106      	bne.n	800c522 <tcp_zero_window_probe+0x22>
 800c514:	4b4c      	ldr	r3, [pc, #304]	; (800c648 <tcp_zero_window_probe+0x148>)
 800c516:	f640 024f 	movw	r2, #2127	; 0x84f
 800c51a:	494c      	ldr	r1, [pc, #304]	; (800c64c <tcp_zero_window_probe+0x14c>)
 800c51c:	484c      	ldr	r0, [pc, #304]	; (800c650 <tcp_zero_window_probe+0x150>)
 800c51e:	f002 fee3 	bl	800f2e8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c526:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800c528:	6a3b      	ldr	r3, [r7, #32]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d101      	bne.n	800c532 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800c52e:	2300      	movs	r3, #0
 800c530:	e086      	b.n	800c640 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c538:	2bff      	cmp	r3, #255	; 0xff
 800c53a:	d007      	beq.n	800c54c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c542:	3301      	adds	r3, #1
 800c544:	b2da      	uxtb	r2, r3
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c54c:	6a3b      	ldr	r3, [r7, #32]
 800c54e:	68db      	ldr	r3, [r3, #12]
 800c550:	899b      	ldrh	r3, [r3, #12]
 800c552:	b29b      	uxth	r3, r3
 800c554:	4618      	mov	r0, r3
 800c556:	f7f8 fa9f 	bl	8004a98 <lwip_htons>
 800c55a:	4603      	mov	r3, r0
 800c55c:	b2db      	uxtb	r3, r3
 800c55e:	f003 0301 	and.w	r3, r3, #1
 800c562:	2b00      	cmp	r3, #0
 800c564:	d005      	beq.n	800c572 <tcp_zero_window_probe+0x72>
 800c566:	6a3b      	ldr	r3, [r7, #32]
 800c568:	891b      	ldrh	r3, [r3, #8]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d101      	bne.n	800c572 <tcp_zero_window_probe+0x72>
 800c56e:	2301      	movs	r3, #1
 800c570:	e000      	b.n	800c574 <tcp_zero_window_probe+0x74>
 800c572:	2300      	movs	r3, #0
 800c574:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800c576:	7ffb      	ldrb	r3, [r7, #31]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	bf0c      	ite	eq
 800c57c:	2301      	moveq	r3, #1
 800c57e:	2300      	movne	r3, #0
 800c580:	b2db      	uxtb	r3, r3
 800c582:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c584:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c588:	b299      	uxth	r1, r3
 800c58a:	6a3b      	ldr	r3, [r7, #32]
 800c58c:	68db      	ldr	r3, [r3, #12]
 800c58e:	685b      	ldr	r3, [r3, #4]
 800c590:	8bba      	ldrh	r2, [r7, #28]
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f7ff fdf8 	bl	800c188 <tcp_output_alloc_header>
 800c598:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800c59a:	69bb      	ldr	r3, [r7, #24]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d102      	bne.n	800c5a6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800c5a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c5a4:	e04c      	b.n	800c640 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c5a6:	69bb      	ldr	r3, [r7, #24]
 800c5a8:	685b      	ldr	r3, [r3, #4]
 800c5aa:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800c5ac:	7ffb      	ldrb	r3, [r7, #31]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d011      	beq.n	800c5d6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	899b      	ldrh	r3, [r3, #12]
 800c5b6:	b29b      	uxth	r3, r3
 800c5b8:	b21b      	sxth	r3, r3
 800c5ba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c5be:	b21c      	sxth	r4, r3
 800c5c0:	2011      	movs	r0, #17
 800c5c2:	f7f8 fa69 	bl	8004a98 <lwip_htons>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	b21b      	sxth	r3, r3
 800c5ca:	4323      	orrs	r3, r4
 800c5cc:	b21b      	sxth	r3, r3
 800c5ce:	b29a      	uxth	r2, r3
 800c5d0:	697b      	ldr	r3, [r7, #20]
 800c5d2:	819a      	strh	r2, [r3, #12]
 800c5d4:	e010      	b.n	800c5f8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800c5d6:	69bb      	ldr	r3, [r7, #24]
 800c5d8:	685b      	ldr	r3, [r3, #4]
 800c5da:	3314      	adds	r3, #20
 800c5dc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c5de:	6a3b      	ldr	r3, [r7, #32]
 800c5e0:	6858      	ldr	r0, [r3, #4]
 800c5e2:	6a3b      	ldr	r3, [r7, #32]
 800c5e4:	685b      	ldr	r3, [r3, #4]
 800c5e6:	891a      	ldrh	r2, [r3, #8]
 800c5e8:	6a3b      	ldr	r3, [r7, #32]
 800c5ea:	891b      	ldrh	r3, [r3, #8]
 800c5ec:	1ad3      	subs	r3, r2, r3
 800c5ee:	b29b      	uxth	r3, r3
 800c5f0:	2201      	movs	r2, #1
 800c5f2:	6939      	ldr	r1, [r7, #16]
 800c5f4:	f7f9 ff58 	bl	80064a8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c5f8:	6a3b      	ldr	r3, [r7, #32]
 800c5fa:	68db      	ldr	r3, [r3, #12]
 800c5fc:	685b      	ldr	r3, [r3, #4]
 800c5fe:	4618      	mov	r0, r3
 800c600:	f7f8 fa5f 	bl	8004ac2 <lwip_htonl>
 800c604:	4603      	mov	r3, r0
 800c606:	3301      	adds	r3, #1
 800c608:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	1ad3      	subs	r3, r2, r3
 800c612:	2b00      	cmp	r3, #0
 800c614:	da02      	bge.n	800c61c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	68fa      	ldr	r2, [r7, #12]
 800c61a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c61c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c620:	2200      	movs	r2, #0
 800c622:	69b9      	ldr	r1, [r7, #24]
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f7ff fded 	bl	800c204 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c62a:	687a      	ldr	r2, [r7, #4]
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	3304      	adds	r3, #4
 800c630:	69b9      	ldr	r1, [r7, #24]
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f7ff fe26 	bl	800c284 <tcp_output_control_segment>
 800c638:	4603      	mov	r3, r0
 800c63a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c63c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c640:	4618      	mov	r0, r3
 800c642:	372c      	adds	r7, #44	; 0x2c
 800c644:	46bd      	mov	sp, r7
 800c646:	bd90      	pop	{r4, r7, pc}
 800c648:	08012078 	.word	0x08012078
 800c64c:	08012870 	.word	0x08012870
 800c650:	080120cc 	.word	0x080120cc

0800c654 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b082      	sub	sp, #8
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800c65c:	f7fa f812 	bl	8006684 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c660:	4b0a      	ldr	r3, [pc, #40]	; (800c68c <tcpip_tcp_timer+0x38>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d103      	bne.n	800c670 <tcpip_tcp_timer+0x1c>
 800c668:	4b09      	ldr	r3, [pc, #36]	; (800c690 <tcpip_tcp_timer+0x3c>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d005      	beq.n	800c67c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c670:	2200      	movs	r2, #0
 800c672:	4908      	ldr	r1, [pc, #32]	; (800c694 <tcpip_tcp_timer+0x40>)
 800c674:	20fa      	movs	r0, #250	; 0xfa
 800c676:	f000 f8f3 	bl	800c860 <sys_timeout>
 800c67a:	e003      	b.n	800c684 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800c67c:	4b06      	ldr	r3, [pc, #24]	; (800c698 <tcpip_tcp_timer+0x44>)
 800c67e:	2200      	movs	r2, #0
 800c680:	601a      	str	r2, [r3, #0]
  }
}
 800c682:	bf00      	nop
 800c684:	bf00      	nop
 800c686:	3708      	adds	r7, #8
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}
 800c68c:	20008eac 	.word	0x20008eac
 800c690:	20008ebc 	.word	0x20008ebc
 800c694:	0800c655 	.word	0x0800c655
 800c698:	20000568 	.word	0x20000568

0800c69c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c6a0:	4b0a      	ldr	r3, [pc, #40]	; (800c6cc <tcp_timer_needed+0x30>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d10f      	bne.n	800c6c8 <tcp_timer_needed+0x2c>
 800c6a8:	4b09      	ldr	r3, [pc, #36]	; (800c6d0 <tcp_timer_needed+0x34>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d103      	bne.n	800c6b8 <tcp_timer_needed+0x1c>
 800c6b0:	4b08      	ldr	r3, [pc, #32]	; (800c6d4 <tcp_timer_needed+0x38>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d007      	beq.n	800c6c8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800c6b8:	4b04      	ldr	r3, [pc, #16]	; (800c6cc <tcp_timer_needed+0x30>)
 800c6ba:	2201      	movs	r2, #1
 800c6bc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c6be:	2200      	movs	r2, #0
 800c6c0:	4905      	ldr	r1, [pc, #20]	; (800c6d8 <tcp_timer_needed+0x3c>)
 800c6c2:	20fa      	movs	r0, #250	; 0xfa
 800c6c4:	f000 f8cc 	bl	800c860 <sys_timeout>
  }
}
 800c6c8:	bf00      	nop
 800c6ca:	bd80      	pop	{r7, pc}
 800c6cc:	20000568 	.word	0x20000568
 800c6d0:	20008eac 	.word	0x20008eac
 800c6d4:	20008ebc 	.word	0x20008ebc
 800c6d8:	0800c655 	.word	0x0800c655

0800c6dc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b086      	sub	sp, #24
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	60f8      	str	r0, [r7, #12]
 800c6e4:	60b9      	str	r1, [r7, #8]
 800c6e6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c6e8:	2006      	movs	r0, #6
 800c6ea:	f7f8 fe95 	bl	8005418 <memp_malloc>
 800c6ee:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d109      	bne.n	800c70a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c6f6:	693b      	ldr	r3, [r7, #16]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d151      	bne.n	800c7a0 <sys_timeout_abs+0xc4>
 800c6fc:	4b2a      	ldr	r3, [pc, #168]	; (800c7a8 <sys_timeout_abs+0xcc>)
 800c6fe:	22be      	movs	r2, #190	; 0xbe
 800c700:	492a      	ldr	r1, [pc, #168]	; (800c7ac <sys_timeout_abs+0xd0>)
 800c702:	482b      	ldr	r0, [pc, #172]	; (800c7b0 <sys_timeout_abs+0xd4>)
 800c704:	f002 fdf0 	bl	800f2e8 <iprintf>
    return;
 800c708:	e04a      	b.n	800c7a0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	2200      	movs	r2, #0
 800c70e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800c710:	693b      	ldr	r3, [r7, #16]
 800c712:	68ba      	ldr	r2, [r7, #8]
 800c714:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800c716:	693b      	ldr	r3, [r7, #16]
 800c718:	687a      	ldr	r2, [r7, #4]
 800c71a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800c71c:	693b      	ldr	r3, [r7, #16]
 800c71e:	68fa      	ldr	r2, [r7, #12]
 800c720:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c722:	4b24      	ldr	r3, [pc, #144]	; (800c7b4 <sys_timeout_abs+0xd8>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d103      	bne.n	800c732 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800c72a:	4a22      	ldr	r2, [pc, #136]	; (800c7b4 <sys_timeout_abs+0xd8>)
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	6013      	str	r3, [r2, #0]
    return;
 800c730:	e037      	b.n	800c7a2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	685a      	ldr	r2, [r3, #4]
 800c736:	4b1f      	ldr	r3, [pc, #124]	; (800c7b4 <sys_timeout_abs+0xd8>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	685b      	ldr	r3, [r3, #4]
 800c73c:	1ad3      	subs	r3, r2, r3
 800c73e:	0fdb      	lsrs	r3, r3, #31
 800c740:	f003 0301 	and.w	r3, r3, #1
 800c744:	b2db      	uxtb	r3, r3
 800c746:	2b00      	cmp	r3, #0
 800c748:	d007      	beq.n	800c75a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800c74a:	4b1a      	ldr	r3, [pc, #104]	; (800c7b4 <sys_timeout_abs+0xd8>)
 800c74c:	681a      	ldr	r2, [r3, #0]
 800c74e:	693b      	ldr	r3, [r7, #16]
 800c750:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800c752:	4a18      	ldr	r2, [pc, #96]	; (800c7b4 <sys_timeout_abs+0xd8>)
 800c754:	693b      	ldr	r3, [r7, #16]
 800c756:	6013      	str	r3, [r2, #0]
 800c758:	e023      	b.n	800c7a2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800c75a:	4b16      	ldr	r3, [pc, #88]	; (800c7b4 <sys_timeout_abs+0xd8>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	617b      	str	r3, [r7, #20]
 800c760:	e01a      	b.n	800c798 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800c762:	697b      	ldr	r3, [r7, #20]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d00b      	beq.n	800c782 <sys_timeout_abs+0xa6>
 800c76a:	693b      	ldr	r3, [r7, #16]
 800c76c:	685a      	ldr	r2, [r3, #4]
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	685b      	ldr	r3, [r3, #4]
 800c774:	1ad3      	subs	r3, r2, r3
 800c776:	0fdb      	lsrs	r3, r3, #31
 800c778:	f003 0301 	and.w	r3, r3, #1
 800c77c:	b2db      	uxtb	r3, r3
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d007      	beq.n	800c792 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	681a      	ldr	r2, [r3, #0]
 800c786:	693b      	ldr	r3, [r7, #16]
 800c788:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800c78a:	697b      	ldr	r3, [r7, #20]
 800c78c:	693a      	ldr	r2, [r7, #16]
 800c78e:	601a      	str	r2, [r3, #0]
        break;
 800c790:	e007      	b.n	800c7a2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	617b      	str	r3, [r7, #20]
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d1e1      	bne.n	800c762 <sys_timeout_abs+0x86>
 800c79e:	e000      	b.n	800c7a2 <sys_timeout_abs+0xc6>
    return;
 800c7a0:	bf00      	nop
      }
    }
  }
}
 800c7a2:	3718      	adds	r7, #24
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd80      	pop	{r7, pc}
 800c7a8:	08012894 	.word	0x08012894
 800c7ac:	080128c8 	.word	0x080128c8
 800c7b0:	08012908 	.word	0x08012908
 800c7b4:	20000560 	.word	0x20000560

0800c7b8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b086      	sub	sp, #24
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	685b      	ldr	r3, [r3, #4]
 800c7c8:	4798      	blx	r3

  now = sys_now();
 800c7ca:	f7f6 fe1b 	bl	8003404 <sys_now>
 800c7ce:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c7d0:	697b      	ldr	r3, [r7, #20]
 800c7d2:	681a      	ldr	r2, [r3, #0]
 800c7d4:	4b0f      	ldr	r3, [pc, #60]	; (800c814 <lwip_cyclic_timer+0x5c>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	4413      	add	r3, r2
 800c7da:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800c7dc:	68fa      	ldr	r2, [r7, #12]
 800c7de:	693b      	ldr	r3, [r7, #16]
 800c7e0:	1ad3      	subs	r3, r2, r3
 800c7e2:	0fdb      	lsrs	r3, r3, #31
 800c7e4:	f003 0301 	and.w	r3, r3, #1
 800c7e8:	b2db      	uxtb	r3, r3
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d009      	beq.n	800c802 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c7ee:	697b      	ldr	r3, [r7, #20]
 800c7f0:	681a      	ldr	r2, [r3, #0]
 800c7f2:	693b      	ldr	r3, [r7, #16]
 800c7f4:	4413      	add	r3, r2
 800c7f6:	687a      	ldr	r2, [r7, #4]
 800c7f8:	4907      	ldr	r1, [pc, #28]	; (800c818 <lwip_cyclic_timer+0x60>)
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	f7ff ff6e 	bl	800c6dc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800c800:	e004      	b.n	800c80c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c802:	687a      	ldr	r2, [r7, #4]
 800c804:	4904      	ldr	r1, [pc, #16]	; (800c818 <lwip_cyclic_timer+0x60>)
 800c806:	68f8      	ldr	r0, [r7, #12]
 800c808:	f7ff ff68 	bl	800c6dc <sys_timeout_abs>
}
 800c80c:	bf00      	nop
 800c80e:	3718      	adds	r7, #24
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}
 800c814:	20000564 	.word	0x20000564
 800c818:	0800c7b9 	.word	0x0800c7b9

0800c81c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b082      	sub	sp, #8
 800c820:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c822:	2301      	movs	r3, #1
 800c824:	607b      	str	r3, [r7, #4]
 800c826:	e00e      	b.n	800c846 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800c828:	4a0b      	ldr	r2, [pc, #44]	; (800c858 <sys_timeouts_init+0x3c>)
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	00db      	lsls	r3, r3, #3
 800c834:	4a08      	ldr	r2, [pc, #32]	; (800c858 <sys_timeouts_init+0x3c>)
 800c836:	4413      	add	r3, r2
 800c838:	461a      	mov	r2, r3
 800c83a:	4908      	ldr	r1, [pc, #32]	; (800c85c <sys_timeouts_init+0x40>)
 800c83c:	f000 f810 	bl	800c860 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	3301      	adds	r3, #1
 800c844:	607b      	str	r3, [r7, #4]
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2b02      	cmp	r3, #2
 800c84a:	d9ed      	bls.n	800c828 <sys_timeouts_init+0xc>
  }
}
 800c84c:	bf00      	nop
 800c84e:	bf00      	nop
 800c850:	3708      	adds	r7, #8
 800c852:	46bd      	mov	sp, r7
 800c854:	bd80      	pop	{r7, pc}
 800c856:	bf00      	nop
 800c858:	080142fc 	.word	0x080142fc
 800c85c:	0800c7b9 	.word	0x0800c7b9

0800c860 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b086      	sub	sp, #24
 800c864:	af00      	add	r7, sp, #0
 800c866:	60f8      	str	r0, [r7, #12]
 800c868:	60b9      	str	r1, [r7, #8]
 800c86a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c872:	d306      	bcc.n	800c882 <sys_timeout+0x22>
 800c874:	4b0a      	ldr	r3, [pc, #40]	; (800c8a0 <sys_timeout+0x40>)
 800c876:	f240 1229 	movw	r2, #297	; 0x129
 800c87a:	490a      	ldr	r1, [pc, #40]	; (800c8a4 <sys_timeout+0x44>)
 800c87c:	480a      	ldr	r0, [pc, #40]	; (800c8a8 <sys_timeout+0x48>)
 800c87e:	f002 fd33 	bl	800f2e8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c882:	f7f6 fdbf 	bl	8003404 <sys_now>
 800c886:	4602      	mov	r2, r0
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	4413      	add	r3, r2
 800c88c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c88e:	687a      	ldr	r2, [r7, #4]
 800c890:	68b9      	ldr	r1, [r7, #8]
 800c892:	6978      	ldr	r0, [r7, #20]
 800c894:	f7ff ff22 	bl	800c6dc <sys_timeout_abs>
#endif
}
 800c898:	bf00      	nop
 800c89a:	3718      	adds	r7, #24
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}
 800c8a0:	08012894 	.word	0x08012894
 800c8a4:	08012930 	.word	0x08012930
 800c8a8:	08012908 	.word	0x08012908

0800c8ac <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b084      	sub	sp, #16
 800c8b0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800c8b2:	f7f6 fda7 	bl	8003404 <sys_now>
 800c8b6:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800c8b8:	4b1a      	ldr	r3, [pc, #104]	; (800c924 <sys_check_timeouts+0x78>)
 800c8ba:	781b      	ldrb	r3, [r3, #0]
 800c8bc:	b2db      	uxtb	r3, r3
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d001      	beq.n	800c8c6 <sys_check_timeouts+0x1a>
 800c8c2:	f7f9 f8cd 	bl	8005a60 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800c8c6:	4b18      	ldr	r3, [pc, #96]	; (800c928 <sys_check_timeouts+0x7c>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800c8cc:	68bb      	ldr	r3, [r7, #8]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d022      	beq.n	800c918 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800c8d2:	68bb      	ldr	r3, [r7, #8]
 800c8d4:	685b      	ldr	r3, [r3, #4]
 800c8d6:	68fa      	ldr	r2, [r7, #12]
 800c8d8:	1ad3      	subs	r3, r2, r3
 800c8da:	0fdb      	lsrs	r3, r3, #31
 800c8dc:	f003 0301 	and.w	r3, r3, #1
 800c8e0:	b2db      	uxtb	r3, r3
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d11a      	bne.n	800c91c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	4a0f      	ldr	r2, [pc, #60]	; (800c928 <sys_check_timeouts+0x7c>)
 800c8ec:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	689b      	ldr	r3, [r3, #8]
 800c8f2:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	68db      	ldr	r3, [r3, #12]
 800c8f8:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	685b      	ldr	r3, [r3, #4]
 800c8fe:	4a0b      	ldr	r2, [pc, #44]	; (800c92c <sys_check_timeouts+0x80>)
 800c900:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800c902:	68b9      	ldr	r1, [r7, #8]
 800c904:	2006      	movs	r0, #6
 800c906:	f7f8 fdd3 	bl	80054b0 <memp_free>
    if (handler != NULL) {
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d0d3      	beq.n	800c8b8 <sys_check_timeouts+0xc>
      handler(arg);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	6838      	ldr	r0, [r7, #0]
 800c914:	4798      	blx	r3
  do {
 800c916:	e7cf      	b.n	800c8b8 <sys_check_timeouts+0xc>
      return;
 800c918:	bf00      	nop
 800c91a:	e000      	b.n	800c91e <sys_check_timeouts+0x72>
      return;
 800c91c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800c91e:	3710      	adds	r7, #16
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}
 800c924:	20008ea4 	.word	0x20008ea4
 800c928:	20000560 	.word	0x20000560
 800c92c:	20000564 	.word	0x20000564

0800c930 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c934:	f002 fcf0 	bl	800f318 <rand>
 800c938:	4603      	mov	r3, r0
 800c93a:	b29b      	uxth	r3, r3
 800c93c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c940:	b29b      	uxth	r3, r3
 800c942:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c946:	b29a      	uxth	r2, r3
 800c948:	4b01      	ldr	r3, [pc, #4]	; (800c950 <udp_init+0x20>)
 800c94a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c94c:	bf00      	nop
 800c94e:	bd80      	pop	{r7, pc}
 800c950:	20000020 	.word	0x20000020

0800c954 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b084      	sub	sp, #16
 800c958:	af00      	add	r7, sp, #0
 800c95a:	60f8      	str	r0, [r7, #12]
 800c95c:	60b9      	str	r1, [r7, #8]
 800c95e:	4613      	mov	r3, r2
 800c960:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d105      	bne.n	800c974 <udp_input_local_match+0x20>
 800c968:	4b27      	ldr	r3, [pc, #156]	; (800ca08 <udp_input_local_match+0xb4>)
 800c96a:	2287      	movs	r2, #135	; 0x87
 800c96c:	4927      	ldr	r1, [pc, #156]	; (800ca0c <udp_input_local_match+0xb8>)
 800c96e:	4828      	ldr	r0, [pc, #160]	; (800ca10 <udp_input_local_match+0xbc>)
 800c970:	f002 fcba 	bl	800f2e8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d105      	bne.n	800c986 <udp_input_local_match+0x32>
 800c97a:	4b23      	ldr	r3, [pc, #140]	; (800ca08 <udp_input_local_match+0xb4>)
 800c97c:	2288      	movs	r2, #136	; 0x88
 800c97e:	4925      	ldr	r1, [pc, #148]	; (800ca14 <udp_input_local_match+0xc0>)
 800c980:	4823      	ldr	r0, [pc, #140]	; (800ca10 <udp_input_local_match+0xbc>)
 800c982:	f002 fcb1 	bl	800f2e8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	7a1b      	ldrb	r3, [r3, #8]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d00b      	beq.n	800c9a6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	7a1a      	ldrb	r2, [r3, #8]
 800c992:	4b21      	ldr	r3, [pc, #132]	; (800ca18 <udp_input_local_match+0xc4>)
 800c994:	685b      	ldr	r3, [r3, #4]
 800c996:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c99a:	3301      	adds	r3, #1
 800c99c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c99e:	429a      	cmp	r2, r3
 800c9a0:	d001      	beq.n	800c9a6 <udp_input_local_match+0x52>
    return 0;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	e02b      	b.n	800c9fe <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800c9a6:	79fb      	ldrb	r3, [r7, #7]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d018      	beq.n	800c9de <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d013      	beq.n	800c9da <udp_input_local_match+0x86>
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d00f      	beq.n	800c9da <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c9ba:	4b17      	ldr	r3, [pc, #92]	; (800ca18 <udp_input_local_match+0xc4>)
 800c9bc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c9be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c9c2:	d00a      	beq.n	800c9da <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	681a      	ldr	r2, [r3, #0]
 800c9c8:	4b13      	ldr	r3, [pc, #76]	; (800ca18 <udp_input_local_match+0xc4>)
 800c9ca:	695b      	ldr	r3, [r3, #20]
 800c9cc:	405a      	eors	r2, r3
 800c9ce:	68bb      	ldr	r3, [r7, #8]
 800c9d0:	3308      	adds	r3, #8
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d110      	bne.n	800c9fc <udp_input_local_match+0xa8>
          return 1;
 800c9da:	2301      	movs	r3, #1
 800c9dc:	e00f      	b.n	800c9fe <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d009      	beq.n	800c9f8 <udp_input_local_match+0xa4>
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d005      	beq.n	800c9f8 <udp_input_local_match+0xa4>
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	681a      	ldr	r2, [r3, #0]
 800c9f0:	4b09      	ldr	r3, [pc, #36]	; (800ca18 <udp_input_local_match+0xc4>)
 800c9f2:	695b      	ldr	r3, [r3, #20]
 800c9f4:	429a      	cmp	r2, r3
 800c9f6:	d101      	bne.n	800c9fc <udp_input_local_match+0xa8>
        return 1;
 800c9f8:	2301      	movs	r3, #1
 800c9fa:	e000      	b.n	800c9fe <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800c9fc:	2300      	movs	r3, #0
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	3710      	adds	r7, #16
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}
 800ca06:	bf00      	nop
 800ca08:	0801297c 	.word	0x0801297c
 800ca0c:	080129ac 	.word	0x080129ac
 800ca10:	080129d0 	.word	0x080129d0
 800ca14:	080129f8 	.word	0x080129f8
 800ca18:	200037a8 	.word	0x200037a8

0800ca1c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800ca1c:	b590      	push	{r4, r7, lr}
 800ca1e:	b08d      	sub	sp, #52	; 0x34
 800ca20:	af02      	add	r7, sp, #8
 800ca22:	6078      	str	r0, [r7, #4]
 800ca24:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800ca26:	2300      	movs	r3, #0
 800ca28:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d105      	bne.n	800ca3c <udp_input+0x20>
 800ca30:	4b7c      	ldr	r3, [pc, #496]	; (800cc24 <udp_input+0x208>)
 800ca32:	22cf      	movs	r2, #207	; 0xcf
 800ca34:	497c      	ldr	r1, [pc, #496]	; (800cc28 <udp_input+0x20c>)
 800ca36:	487d      	ldr	r0, [pc, #500]	; (800cc2c <udp_input+0x210>)
 800ca38:	f002 fc56 	bl	800f2e8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d105      	bne.n	800ca4e <udp_input+0x32>
 800ca42:	4b78      	ldr	r3, [pc, #480]	; (800cc24 <udp_input+0x208>)
 800ca44:	22d0      	movs	r2, #208	; 0xd0
 800ca46:	497a      	ldr	r1, [pc, #488]	; (800cc30 <udp_input+0x214>)
 800ca48:	4878      	ldr	r0, [pc, #480]	; (800cc2c <udp_input+0x210>)
 800ca4a:	f002 fc4d 	bl	800f2e8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	895b      	ldrh	r3, [r3, #10]
 800ca52:	2b07      	cmp	r3, #7
 800ca54:	d803      	bhi.n	800ca5e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	f7f9 fb3c 	bl	80060d4 <pbuf_free>
    goto end;
 800ca5c:	e0de      	b.n	800cc1c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	685b      	ldr	r3, [r3, #4]
 800ca62:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800ca64:	4b73      	ldr	r3, [pc, #460]	; (800cc34 <udp_input+0x218>)
 800ca66:	695b      	ldr	r3, [r3, #20]
 800ca68:	4a72      	ldr	r2, [pc, #456]	; (800cc34 <udp_input+0x218>)
 800ca6a:	6812      	ldr	r2, [r2, #0]
 800ca6c:	4611      	mov	r1, r2
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f001 fc88 	bl	800e384 <ip4_addr_isbroadcast_u32>
 800ca74:	4603      	mov	r3, r0
 800ca76:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	881b      	ldrh	r3, [r3, #0]
 800ca7c:	b29b      	uxth	r3, r3
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f7f8 f80a 	bl	8004a98 <lwip_htons>
 800ca84:	4603      	mov	r3, r0
 800ca86:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800ca88:	697b      	ldr	r3, [r7, #20]
 800ca8a:	885b      	ldrh	r3, [r3, #2]
 800ca8c:	b29b      	uxth	r3, r3
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f7f8 f802 	bl	8004a98 <lwip_htons>
 800ca94:	4603      	mov	r3, r0
 800ca96:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800ca98:	2300      	movs	r3, #0
 800ca9a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800caa0:	2300      	movs	r3, #0
 800caa2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800caa4:	4b64      	ldr	r3, [pc, #400]	; (800cc38 <udp_input+0x21c>)
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	627b      	str	r3, [r7, #36]	; 0x24
 800caaa:	e054      	b.n	800cb56 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800caac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caae:	8a5b      	ldrh	r3, [r3, #18]
 800cab0:	89fa      	ldrh	r2, [r7, #14]
 800cab2:	429a      	cmp	r2, r3
 800cab4:	d14a      	bne.n	800cb4c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800cab6:	7cfb      	ldrb	r3, [r7, #19]
 800cab8:	461a      	mov	r2, r3
 800caba:	6839      	ldr	r1, [r7, #0]
 800cabc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cabe:	f7ff ff49 	bl	800c954 <udp_input_local_match>
 800cac2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d041      	beq.n	800cb4c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800cac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caca:	7c1b      	ldrb	r3, [r3, #16]
 800cacc:	f003 0304 	and.w	r3, r3, #4
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d11d      	bne.n	800cb10 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800cad4:	69fb      	ldr	r3, [r7, #28]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d102      	bne.n	800cae0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800cada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cadc:	61fb      	str	r3, [r7, #28]
 800cade:	e017      	b.n	800cb10 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800cae0:	7cfb      	ldrb	r3, [r7, #19]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d014      	beq.n	800cb10 <udp_input+0xf4>
 800cae6:	4b53      	ldr	r3, [pc, #332]	; (800cc34 <udp_input+0x218>)
 800cae8:	695b      	ldr	r3, [r3, #20]
 800caea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800caee:	d10f      	bne.n	800cb10 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800caf0:	69fb      	ldr	r3, [r7, #28]
 800caf2:	681a      	ldr	r2, [r3, #0]
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	3304      	adds	r3, #4
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	429a      	cmp	r2, r3
 800cafc:	d008      	beq.n	800cb10 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800cafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb00:	681a      	ldr	r2, [r3, #0]
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	3304      	adds	r3, #4
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	429a      	cmp	r2, r3
 800cb0a:	d101      	bne.n	800cb10 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800cb0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb0e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800cb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb12:	8a9b      	ldrh	r3, [r3, #20]
 800cb14:	8a3a      	ldrh	r2, [r7, #16]
 800cb16:	429a      	cmp	r2, r3
 800cb18:	d118      	bne.n	800cb4c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800cb1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb1c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d005      	beq.n	800cb2e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800cb22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb24:	685a      	ldr	r2, [r3, #4]
 800cb26:	4b43      	ldr	r3, [pc, #268]	; (800cc34 <udp_input+0x218>)
 800cb28:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800cb2a:	429a      	cmp	r2, r3
 800cb2c:	d10e      	bne.n	800cb4c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800cb2e:	6a3b      	ldr	r3, [r7, #32]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d014      	beq.n	800cb5e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800cb34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb36:	68da      	ldr	r2, [r3, #12]
 800cb38:	6a3b      	ldr	r3, [r7, #32]
 800cb3a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800cb3c:	4b3e      	ldr	r3, [pc, #248]	; (800cc38 <udp_input+0x21c>)
 800cb3e:	681a      	ldr	r2, [r3, #0]
 800cb40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb42:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800cb44:	4a3c      	ldr	r2, [pc, #240]	; (800cc38 <udp_input+0x21c>)
 800cb46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb48:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800cb4a:	e008      	b.n	800cb5e <udp_input+0x142>
      }
    }

    prev = pcb;
 800cb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb4e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cb50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb52:	68db      	ldr	r3, [r3, #12]
 800cb54:	627b      	str	r3, [r7, #36]	; 0x24
 800cb56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d1a7      	bne.n	800caac <udp_input+0x90>
 800cb5c:	e000      	b.n	800cb60 <udp_input+0x144>
        break;
 800cb5e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800cb60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d101      	bne.n	800cb6a <udp_input+0x14e>
    pcb = uncon_pcb;
 800cb66:	69fb      	ldr	r3, [r7, #28]
 800cb68:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800cb6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d002      	beq.n	800cb76 <udp_input+0x15a>
    for_us = 1;
 800cb70:	2301      	movs	r3, #1
 800cb72:	76fb      	strb	r3, [r7, #27]
 800cb74:	e00a      	b.n	800cb8c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	3304      	adds	r3, #4
 800cb7a:	681a      	ldr	r2, [r3, #0]
 800cb7c:	4b2d      	ldr	r3, [pc, #180]	; (800cc34 <udp_input+0x218>)
 800cb7e:	695b      	ldr	r3, [r3, #20]
 800cb80:	429a      	cmp	r2, r3
 800cb82:	bf0c      	ite	eq
 800cb84:	2301      	moveq	r3, #1
 800cb86:	2300      	movne	r3, #0
 800cb88:	b2db      	uxtb	r3, r3
 800cb8a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800cb8c:	7efb      	ldrb	r3, [r7, #27]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d041      	beq.n	800cc16 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800cb92:	2108      	movs	r1, #8
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f7f9 fa17 	bl	8005fc8 <pbuf_remove_header>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d00a      	beq.n	800cbb6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800cba0:	4b20      	ldr	r3, [pc, #128]	; (800cc24 <udp_input+0x208>)
 800cba2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800cba6:	4925      	ldr	r1, [pc, #148]	; (800cc3c <udp_input+0x220>)
 800cba8:	4820      	ldr	r0, [pc, #128]	; (800cc2c <udp_input+0x210>)
 800cbaa:	f002 fb9d 	bl	800f2e8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f7f9 fa90 	bl	80060d4 <pbuf_free>
      goto end;
 800cbb4:	e032      	b.n	800cc1c <udp_input+0x200>
    }

    if (pcb != NULL) {
 800cbb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d012      	beq.n	800cbe2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800cbbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbbe:	699b      	ldr	r3, [r3, #24]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d00a      	beq.n	800cbda <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800cbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc6:	699c      	ldr	r4, [r3, #24]
 800cbc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbca:	69d8      	ldr	r0, [r3, #28]
 800cbcc:	8a3b      	ldrh	r3, [r7, #16]
 800cbce:	9300      	str	r3, [sp, #0]
 800cbd0:	4b1b      	ldr	r3, [pc, #108]	; (800cc40 <udp_input+0x224>)
 800cbd2:	687a      	ldr	r2, [r7, #4]
 800cbd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cbd6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800cbd8:	e021      	b.n	800cc1e <udp_input+0x202>
        pbuf_free(p);
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	f7f9 fa7a 	bl	80060d4 <pbuf_free>
        goto end;
 800cbe0:	e01c      	b.n	800cc1c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800cbe2:	7cfb      	ldrb	r3, [r7, #19]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d112      	bne.n	800cc0e <udp_input+0x1f2>
 800cbe8:	4b12      	ldr	r3, [pc, #72]	; (800cc34 <udp_input+0x218>)
 800cbea:	695b      	ldr	r3, [r3, #20]
 800cbec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cbf0:	2be0      	cmp	r3, #224	; 0xe0
 800cbf2:	d00c      	beq.n	800cc0e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800cbf4:	4b0f      	ldr	r3, [pc, #60]	; (800cc34 <udp_input+0x218>)
 800cbf6:	899b      	ldrh	r3, [r3, #12]
 800cbf8:	3308      	adds	r3, #8
 800cbfa:	b29b      	uxth	r3, r3
 800cbfc:	b21b      	sxth	r3, r3
 800cbfe:	4619      	mov	r1, r3
 800cc00:	6878      	ldr	r0, [r7, #4]
 800cc02:	f7f9 fa54 	bl	80060ae <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800cc06:	2103      	movs	r1, #3
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f001 f89b 	bl	800dd44 <icmp_dest_unreach>
      pbuf_free(p);
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f7f9 fa60 	bl	80060d4 <pbuf_free>
  return;
 800cc14:	e003      	b.n	800cc1e <udp_input+0x202>
    pbuf_free(p);
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f7f9 fa5c 	bl	80060d4 <pbuf_free>
  return;
 800cc1c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800cc1e:	372c      	adds	r7, #44	; 0x2c
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd90      	pop	{r4, r7, pc}
 800cc24:	0801297c 	.word	0x0801297c
 800cc28:	08012a20 	.word	0x08012a20
 800cc2c:	080129d0 	.word	0x080129d0
 800cc30:	08012a38 	.word	0x08012a38
 800cc34:	200037a8 	.word	0x200037a8
 800cc38:	20008ec4 	.word	0x20008ec4
 800cc3c:	08012a54 	.word	0x08012a54
 800cc40:	200037b8 	.word	0x200037b8

0800cc44 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800cc44:	b480      	push	{r7}
 800cc46:	b085      	sub	sp, #20
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
 800cc4c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d01e      	beq.n	800cc92 <udp_netif_ip_addr_changed+0x4e>
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d01a      	beq.n	800cc92 <udp_netif_ip_addr_changed+0x4e>
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d017      	beq.n	800cc92 <udp_netif_ip_addr_changed+0x4e>
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d013      	beq.n	800cc92 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800cc6a:	4b0d      	ldr	r3, [pc, #52]	; (800cca0 <udp_netif_ip_addr_changed+0x5c>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	60fb      	str	r3, [r7, #12]
 800cc70:	e00c      	b.n	800cc8c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	681a      	ldr	r2, [r3, #0]
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	429a      	cmp	r2, r3
 800cc7c:	d103      	bne.n	800cc86 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	681a      	ldr	r2, [r3, #0]
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	68db      	ldr	r3, [r3, #12]
 800cc8a:	60fb      	str	r3, [r7, #12]
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d1ef      	bne.n	800cc72 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800cc92:	bf00      	nop
 800cc94:	3714      	adds	r7, #20
 800cc96:	46bd      	mov	sp, r7
 800cc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9c:	4770      	bx	lr
 800cc9e:	bf00      	nop
 800cca0:	20008ec4 	.word	0x20008ec4

0800cca4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b082      	sub	sp, #8
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800ccac:	4915      	ldr	r1, [pc, #84]	; (800cd04 <etharp_free_entry+0x60>)
 800ccae:	687a      	ldr	r2, [r7, #4]
 800ccb0:	4613      	mov	r3, r2
 800ccb2:	005b      	lsls	r3, r3, #1
 800ccb4:	4413      	add	r3, r2
 800ccb6:	00db      	lsls	r3, r3, #3
 800ccb8:	440b      	add	r3, r1
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d013      	beq.n	800cce8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800ccc0:	4910      	ldr	r1, [pc, #64]	; (800cd04 <etharp_free_entry+0x60>)
 800ccc2:	687a      	ldr	r2, [r7, #4]
 800ccc4:	4613      	mov	r3, r2
 800ccc6:	005b      	lsls	r3, r3, #1
 800ccc8:	4413      	add	r3, r2
 800ccca:	00db      	lsls	r3, r3, #3
 800cccc:	440b      	add	r3, r1
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	f7f9 f9ff 	bl	80060d4 <pbuf_free>
    arp_table[i].q = NULL;
 800ccd6:	490b      	ldr	r1, [pc, #44]	; (800cd04 <etharp_free_entry+0x60>)
 800ccd8:	687a      	ldr	r2, [r7, #4]
 800ccda:	4613      	mov	r3, r2
 800ccdc:	005b      	lsls	r3, r3, #1
 800ccde:	4413      	add	r3, r2
 800cce0:	00db      	lsls	r3, r3, #3
 800cce2:	440b      	add	r3, r1
 800cce4:	2200      	movs	r2, #0
 800cce6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800cce8:	4906      	ldr	r1, [pc, #24]	; (800cd04 <etharp_free_entry+0x60>)
 800ccea:	687a      	ldr	r2, [r7, #4]
 800ccec:	4613      	mov	r3, r2
 800ccee:	005b      	lsls	r3, r3, #1
 800ccf0:	4413      	add	r3, r2
 800ccf2:	00db      	lsls	r3, r3, #3
 800ccf4:	440b      	add	r3, r1
 800ccf6:	3314      	adds	r3, #20
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800ccfc:	bf00      	nop
 800ccfe:	3708      	adds	r7, #8
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}
 800cd04:	2000056c 	.word	0x2000056c

0800cd08 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b082      	sub	sp, #8
 800cd0c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cd0e:	2300      	movs	r3, #0
 800cd10:	607b      	str	r3, [r7, #4]
 800cd12:	e096      	b.n	800ce42 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800cd14:	494f      	ldr	r1, [pc, #316]	; (800ce54 <etharp_tmr+0x14c>)
 800cd16:	687a      	ldr	r2, [r7, #4]
 800cd18:	4613      	mov	r3, r2
 800cd1a:	005b      	lsls	r3, r3, #1
 800cd1c:	4413      	add	r3, r2
 800cd1e:	00db      	lsls	r3, r3, #3
 800cd20:	440b      	add	r3, r1
 800cd22:	3314      	adds	r3, #20
 800cd24:	781b      	ldrb	r3, [r3, #0]
 800cd26:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800cd28:	78fb      	ldrb	r3, [r7, #3]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	f000 8086 	beq.w	800ce3c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800cd30:	4948      	ldr	r1, [pc, #288]	; (800ce54 <etharp_tmr+0x14c>)
 800cd32:	687a      	ldr	r2, [r7, #4]
 800cd34:	4613      	mov	r3, r2
 800cd36:	005b      	lsls	r3, r3, #1
 800cd38:	4413      	add	r3, r2
 800cd3a:	00db      	lsls	r3, r3, #3
 800cd3c:	440b      	add	r3, r1
 800cd3e:	3312      	adds	r3, #18
 800cd40:	881b      	ldrh	r3, [r3, #0]
 800cd42:	3301      	adds	r3, #1
 800cd44:	b298      	uxth	r0, r3
 800cd46:	4943      	ldr	r1, [pc, #268]	; (800ce54 <etharp_tmr+0x14c>)
 800cd48:	687a      	ldr	r2, [r7, #4]
 800cd4a:	4613      	mov	r3, r2
 800cd4c:	005b      	lsls	r3, r3, #1
 800cd4e:	4413      	add	r3, r2
 800cd50:	00db      	lsls	r3, r3, #3
 800cd52:	440b      	add	r3, r1
 800cd54:	3312      	adds	r3, #18
 800cd56:	4602      	mov	r2, r0
 800cd58:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cd5a:	493e      	ldr	r1, [pc, #248]	; (800ce54 <etharp_tmr+0x14c>)
 800cd5c:	687a      	ldr	r2, [r7, #4]
 800cd5e:	4613      	mov	r3, r2
 800cd60:	005b      	lsls	r3, r3, #1
 800cd62:	4413      	add	r3, r2
 800cd64:	00db      	lsls	r3, r3, #3
 800cd66:	440b      	add	r3, r1
 800cd68:	3312      	adds	r3, #18
 800cd6a:	881b      	ldrh	r3, [r3, #0]
 800cd6c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800cd70:	d215      	bcs.n	800cd9e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800cd72:	4938      	ldr	r1, [pc, #224]	; (800ce54 <etharp_tmr+0x14c>)
 800cd74:	687a      	ldr	r2, [r7, #4]
 800cd76:	4613      	mov	r3, r2
 800cd78:	005b      	lsls	r3, r3, #1
 800cd7a:	4413      	add	r3, r2
 800cd7c:	00db      	lsls	r3, r3, #3
 800cd7e:	440b      	add	r3, r1
 800cd80:	3314      	adds	r3, #20
 800cd82:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cd84:	2b01      	cmp	r3, #1
 800cd86:	d10e      	bne.n	800cda6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800cd88:	4932      	ldr	r1, [pc, #200]	; (800ce54 <etharp_tmr+0x14c>)
 800cd8a:	687a      	ldr	r2, [r7, #4]
 800cd8c:	4613      	mov	r3, r2
 800cd8e:	005b      	lsls	r3, r3, #1
 800cd90:	4413      	add	r3, r2
 800cd92:	00db      	lsls	r3, r3, #3
 800cd94:	440b      	add	r3, r1
 800cd96:	3312      	adds	r3, #18
 800cd98:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800cd9a:	2b04      	cmp	r3, #4
 800cd9c:	d903      	bls.n	800cda6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800cd9e:	6878      	ldr	r0, [r7, #4]
 800cda0:	f7ff ff80 	bl	800cca4 <etharp_free_entry>
 800cda4:	e04a      	b.n	800ce3c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800cda6:	492b      	ldr	r1, [pc, #172]	; (800ce54 <etharp_tmr+0x14c>)
 800cda8:	687a      	ldr	r2, [r7, #4]
 800cdaa:	4613      	mov	r3, r2
 800cdac:	005b      	lsls	r3, r3, #1
 800cdae:	4413      	add	r3, r2
 800cdb0:	00db      	lsls	r3, r3, #3
 800cdb2:	440b      	add	r3, r1
 800cdb4:	3314      	adds	r3, #20
 800cdb6:	781b      	ldrb	r3, [r3, #0]
 800cdb8:	2b03      	cmp	r3, #3
 800cdba:	d10a      	bne.n	800cdd2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800cdbc:	4925      	ldr	r1, [pc, #148]	; (800ce54 <etharp_tmr+0x14c>)
 800cdbe:	687a      	ldr	r2, [r7, #4]
 800cdc0:	4613      	mov	r3, r2
 800cdc2:	005b      	lsls	r3, r3, #1
 800cdc4:	4413      	add	r3, r2
 800cdc6:	00db      	lsls	r3, r3, #3
 800cdc8:	440b      	add	r3, r1
 800cdca:	3314      	adds	r3, #20
 800cdcc:	2204      	movs	r2, #4
 800cdce:	701a      	strb	r2, [r3, #0]
 800cdd0:	e034      	b.n	800ce3c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800cdd2:	4920      	ldr	r1, [pc, #128]	; (800ce54 <etharp_tmr+0x14c>)
 800cdd4:	687a      	ldr	r2, [r7, #4]
 800cdd6:	4613      	mov	r3, r2
 800cdd8:	005b      	lsls	r3, r3, #1
 800cdda:	4413      	add	r3, r2
 800cddc:	00db      	lsls	r3, r3, #3
 800cdde:	440b      	add	r3, r1
 800cde0:	3314      	adds	r3, #20
 800cde2:	781b      	ldrb	r3, [r3, #0]
 800cde4:	2b04      	cmp	r3, #4
 800cde6:	d10a      	bne.n	800cdfe <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800cde8:	491a      	ldr	r1, [pc, #104]	; (800ce54 <etharp_tmr+0x14c>)
 800cdea:	687a      	ldr	r2, [r7, #4]
 800cdec:	4613      	mov	r3, r2
 800cdee:	005b      	lsls	r3, r3, #1
 800cdf0:	4413      	add	r3, r2
 800cdf2:	00db      	lsls	r3, r3, #3
 800cdf4:	440b      	add	r3, r1
 800cdf6:	3314      	adds	r3, #20
 800cdf8:	2202      	movs	r2, #2
 800cdfa:	701a      	strb	r2, [r3, #0]
 800cdfc:	e01e      	b.n	800ce3c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800cdfe:	4915      	ldr	r1, [pc, #84]	; (800ce54 <etharp_tmr+0x14c>)
 800ce00:	687a      	ldr	r2, [r7, #4]
 800ce02:	4613      	mov	r3, r2
 800ce04:	005b      	lsls	r3, r3, #1
 800ce06:	4413      	add	r3, r2
 800ce08:	00db      	lsls	r3, r3, #3
 800ce0a:	440b      	add	r3, r1
 800ce0c:	3314      	adds	r3, #20
 800ce0e:	781b      	ldrb	r3, [r3, #0]
 800ce10:	2b01      	cmp	r3, #1
 800ce12:	d113      	bne.n	800ce3c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800ce14:	490f      	ldr	r1, [pc, #60]	; (800ce54 <etharp_tmr+0x14c>)
 800ce16:	687a      	ldr	r2, [r7, #4]
 800ce18:	4613      	mov	r3, r2
 800ce1a:	005b      	lsls	r3, r3, #1
 800ce1c:	4413      	add	r3, r2
 800ce1e:	00db      	lsls	r3, r3, #3
 800ce20:	440b      	add	r3, r1
 800ce22:	3308      	adds	r3, #8
 800ce24:	6818      	ldr	r0, [r3, #0]
 800ce26:	687a      	ldr	r2, [r7, #4]
 800ce28:	4613      	mov	r3, r2
 800ce2a:	005b      	lsls	r3, r3, #1
 800ce2c:	4413      	add	r3, r2
 800ce2e:	00db      	lsls	r3, r3, #3
 800ce30:	4a08      	ldr	r2, [pc, #32]	; (800ce54 <etharp_tmr+0x14c>)
 800ce32:	4413      	add	r3, r2
 800ce34:	3304      	adds	r3, #4
 800ce36:	4619      	mov	r1, r3
 800ce38:	f000 fe6e 	bl	800db18 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	3301      	adds	r3, #1
 800ce40:	607b      	str	r3, [r7, #4]
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	2b09      	cmp	r3, #9
 800ce46:	f77f af65 	ble.w	800cd14 <etharp_tmr+0xc>
      }
    }
  }
}
 800ce4a:	bf00      	nop
 800ce4c:	bf00      	nop
 800ce4e:	3708      	adds	r7, #8
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}
 800ce54:	2000056c 	.word	0x2000056c

0800ce58 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b08a      	sub	sp, #40	; 0x28
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	60f8      	str	r0, [r7, #12]
 800ce60:	460b      	mov	r3, r1
 800ce62:	607a      	str	r2, [r7, #4]
 800ce64:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800ce66:	230a      	movs	r3, #10
 800ce68:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ce6a:	230a      	movs	r3, #10
 800ce6c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800ce6e:	230a      	movs	r3, #10
 800ce70:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800ce72:	2300      	movs	r3, #0
 800ce74:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800ce76:	230a      	movs	r3, #10
 800ce78:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	83bb      	strh	r3, [r7, #28]
 800ce7e:	2300      	movs	r3, #0
 800ce80:	837b      	strh	r3, [r7, #26]
 800ce82:	2300      	movs	r3, #0
 800ce84:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ce86:	2300      	movs	r3, #0
 800ce88:	843b      	strh	r3, [r7, #32]
 800ce8a:	e0ae      	b.n	800cfea <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800ce8c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce90:	49a6      	ldr	r1, [pc, #664]	; (800d12c <etharp_find_entry+0x2d4>)
 800ce92:	4613      	mov	r3, r2
 800ce94:	005b      	lsls	r3, r3, #1
 800ce96:	4413      	add	r3, r2
 800ce98:	00db      	lsls	r3, r3, #3
 800ce9a:	440b      	add	r3, r1
 800ce9c:	3314      	adds	r3, #20
 800ce9e:	781b      	ldrb	r3, [r3, #0]
 800cea0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800cea2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cea6:	2b0a      	cmp	r3, #10
 800cea8:	d105      	bne.n	800ceb6 <etharp_find_entry+0x5e>
 800ceaa:	7dfb      	ldrb	r3, [r7, #23]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d102      	bne.n	800ceb6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800ceb0:	8c3b      	ldrh	r3, [r7, #32]
 800ceb2:	847b      	strh	r3, [r7, #34]	; 0x22
 800ceb4:	e095      	b.n	800cfe2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800ceb6:	7dfb      	ldrb	r3, [r7, #23]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	f000 8092 	beq.w	800cfe2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800cebe:	7dfb      	ldrb	r3, [r7, #23]
 800cec0:	2b01      	cmp	r3, #1
 800cec2:	d009      	beq.n	800ced8 <etharp_find_entry+0x80>
 800cec4:	7dfb      	ldrb	r3, [r7, #23]
 800cec6:	2b01      	cmp	r3, #1
 800cec8:	d806      	bhi.n	800ced8 <etharp_find_entry+0x80>
 800ceca:	4b99      	ldr	r3, [pc, #612]	; (800d130 <etharp_find_entry+0x2d8>)
 800cecc:	f240 1223 	movw	r2, #291	; 0x123
 800ced0:	4998      	ldr	r1, [pc, #608]	; (800d134 <etharp_find_entry+0x2dc>)
 800ced2:	4899      	ldr	r0, [pc, #612]	; (800d138 <etharp_find_entry+0x2e0>)
 800ced4:	f002 fa08 	bl	800f2e8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d020      	beq.n	800cf20 <etharp_find_entry+0xc8>
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	6819      	ldr	r1, [r3, #0]
 800cee2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cee6:	4891      	ldr	r0, [pc, #580]	; (800d12c <etharp_find_entry+0x2d4>)
 800cee8:	4613      	mov	r3, r2
 800ceea:	005b      	lsls	r3, r3, #1
 800ceec:	4413      	add	r3, r2
 800ceee:	00db      	lsls	r3, r3, #3
 800cef0:	4403      	add	r3, r0
 800cef2:	3304      	adds	r3, #4
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	4299      	cmp	r1, r3
 800cef8:	d112      	bne.n	800cf20 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d00c      	beq.n	800cf1a <etharp_find_entry+0xc2>
 800cf00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf04:	4989      	ldr	r1, [pc, #548]	; (800d12c <etharp_find_entry+0x2d4>)
 800cf06:	4613      	mov	r3, r2
 800cf08:	005b      	lsls	r3, r3, #1
 800cf0a:	4413      	add	r3, r2
 800cf0c:	00db      	lsls	r3, r3, #3
 800cf0e:	440b      	add	r3, r1
 800cf10:	3308      	adds	r3, #8
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	687a      	ldr	r2, [r7, #4]
 800cf16:	429a      	cmp	r2, r3
 800cf18:	d102      	bne.n	800cf20 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800cf1a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cf1e:	e100      	b.n	800d122 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800cf20:	7dfb      	ldrb	r3, [r7, #23]
 800cf22:	2b01      	cmp	r3, #1
 800cf24:	d140      	bne.n	800cfa8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800cf26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf2a:	4980      	ldr	r1, [pc, #512]	; (800d12c <etharp_find_entry+0x2d4>)
 800cf2c:	4613      	mov	r3, r2
 800cf2e:	005b      	lsls	r3, r3, #1
 800cf30:	4413      	add	r3, r2
 800cf32:	00db      	lsls	r3, r3, #3
 800cf34:	440b      	add	r3, r1
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d01a      	beq.n	800cf72 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800cf3c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf40:	497a      	ldr	r1, [pc, #488]	; (800d12c <etharp_find_entry+0x2d4>)
 800cf42:	4613      	mov	r3, r2
 800cf44:	005b      	lsls	r3, r3, #1
 800cf46:	4413      	add	r3, r2
 800cf48:	00db      	lsls	r3, r3, #3
 800cf4a:	440b      	add	r3, r1
 800cf4c:	3312      	adds	r3, #18
 800cf4e:	881b      	ldrh	r3, [r3, #0]
 800cf50:	8bba      	ldrh	r2, [r7, #28]
 800cf52:	429a      	cmp	r2, r3
 800cf54:	d845      	bhi.n	800cfe2 <etharp_find_entry+0x18a>
            old_queue = i;
 800cf56:	8c3b      	ldrh	r3, [r7, #32]
 800cf58:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800cf5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf5e:	4973      	ldr	r1, [pc, #460]	; (800d12c <etharp_find_entry+0x2d4>)
 800cf60:	4613      	mov	r3, r2
 800cf62:	005b      	lsls	r3, r3, #1
 800cf64:	4413      	add	r3, r2
 800cf66:	00db      	lsls	r3, r3, #3
 800cf68:	440b      	add	r3, r1
 800cf6a:	3312      	adds	r3, #18
 800cf6c:	881b      	ldrh	r3, [r3, #0]
 800cf6e:	83bb      	strh	r3, [r7, #28]
 800cf70:	e037      	b.n	800cfe2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800cf72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf76:	496d      	ldr	r1, [pc, #436]	; (800d12c <etharp_find_entry+0x2d4>)
 800cf78:	4613      	mov	r3, r2
 800cf7a:	005b      	lsls	r3, r3, #1
 800cf7c:	4413      	add	r3, r2
 800cf7e:	00db      	lsls	r3, r3, #3
 800cf80:	440b      	add	r3, r1
 800cf82:	3312      	adds	r3, #18
 800cf84:	881b      	ldrh	r3, [r3, #0]
 800cf86:	8b7a      	ldrh	r2, [r7, #26]
 800cf88:	429a      	cmp	r2, r3
 800cf8a:	d82a      	bhi.n	800cfe2 <etharp_find_entry+0x18a>
            old_pending = i;
 800cf8c:	8c3b      	ldrh	r3, [r7, #32]
 800cf8e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800cf90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf94:	4965      	ldr	r1, [pc, #404]	; (800d12c <etharp_find_entry+0x2d4>)
 800cf96:	4613      	mov	r3, r2
 800cf98:	005b      	lsls	r3, r3, #1
 800cf9a:	4413      	add	r3, r2
 800cf9c:	00db      	lsls	r3, r3, #3
 800cf9e:	440b      	add	r3, r1
 800cfa0:	3312      	adds	r3, #18
 800cfa2:	881b      	ldrh	r3, [r3, #0]
 800cfa4:	837b      	strh	r3, [r7, #26]
 800cfa6:	e01c      	b.n	800cfe2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800cfa8:	7dfb      	ldrb	r3, [r7, #23]
 800cfaa:	2b01      	cmp	r3, #1
 800cfac:	d919      	bls.n	800cfe2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800cfae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cfb2:	495e      	ldr	r1, [pc, #376]	; (800d12c <etharp_find_entry+0x2d4>)
 800cfb4:	4613      	mov	r3, r2
 800cfb6:	005b      	lsls	r3, r3, #1
 800cfb8:	4413      	add	r3, r2
 800cfba:	00db      	lsls	r3, r3, #3
 800cfbc:	440b      	add	r3, r1
 800cfbe:	3312      	adds	r3, #18
 800cfc0:	881b      	ldrh	r3, [r3, #0]
 800cfc2:	8b3a      	ldrh	r2, [r7, #24]
 800cfc4:	429a      	cmp	r2, r3
 800cfc6:	d80c      	bhi.n	800cfe2 <etharp_find_entry+0x18a>
            old_stable = i;
 800cfc8:	8c3b      	ldrh	r3, [r7, #32]
 800cfca:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800cfcc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cfd0:	4956      	ldr	r1, [pc, #344]	; (800d12c <etharp_find_entry+0x2d4>)
 800cfd2:	4613      	mov	r3, r2
 800cfd4:	005b      	lsls	r3, r3, #1
 800cfd6:	4413      	add	r3, r2
 800cfd8:	00db      	lsls	r3, r3, #3
 800cfda:	440b      	add	r3, r1
 800cfdc:	3312      	adds	r3, #18
 800cfde:	881b      	ldrh	r3, [r3, #0]
 800cfe0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cfe2:	8c3b      	ldrh	r3, [r7, #32]
 800cfe4:	3301      	adds	r3, #1
 800cfe6:	b29b      	uxth	r3, r3
 800cfe8:	843b      	strh	r3, [r7, #32]
 800cfea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cfee:	2b09      	cmp	r3, #9
 800cff0:	f77f af4c 	ble.w	800ce8c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800cff4:	7afb      	ldrb	r3, [r7, #11]
 800cff6:	f003 0302 	and.w	r3, r3, #2
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d108      	bne.n	800d010 <etharp_find_entry+0x1b8>
 800cffe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d002:	2b0a      	cmp	r3, #10
 800d004:	d107      	bne.n	800d016 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800d006:	7afb      	ldrb	r3, [r7, #11]
 800d008:	f003 0301 	and.w	r3, r3, #1
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d102      	bne.n	800d016 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800d010:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d014:	e085      	b.n	800d122 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800d016:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d01a:	2b09      	cmp	r3, #9
 800d01c:	dc02      	bgt.n	800d024 <etharp_find_entry+0x1cc>
    i = empty;
 800d01e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d020:	843b      	strh	r3, [r7, #32]
 800d022:	e039      	b.n	800d098 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800d024:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d028:	2b09      	cmp	r3, #9
 800d02a:	dc14      	bgt.n	800d056 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800d02c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d02e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800d030:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d034:	493d      	ldr	r1, [pc, #244]	; (800d12c <etharp_find_entry+0x2d4>)
 800d036:	4613      	mov	r3, r2
 800d038:	005b      	lsls	r3, r3, #1
 800d03a:	4413      	add	r3, r2
 800d03c:	00db      	lsls	r3, r3, #3
 800d03e:	440b      	add	r3, r1
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d018      	beq.n	800d078 <etharp_find_entry+0x220>
 800d046:	4b3a      	ldr	r3, [pc, #232]	; (800d130 <etharp_find_entry+0x2d8>)
 800d048:	f240 126d 	movw	r2, #365	; 0x16d
 800d04c:	493b      	ldr	r1, [pc, #236]	; (800d13c <etharp_find_entry+0x2e4>)
 800d04e:	483a      	ldr	r0, [pc, #232]	; (800d138 <etharp_find_entry+0x2e0>)
 800d050:	f002 f94a 	bl	800f2e8 <iprintf>
 800d054:	e010      	b.n	800d078 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800d056:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d05a:	2b09      	cmp	r3, #9
 800d05c:	dc02      	bgt.n	800d064 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800d05e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d060:	843b      	strh	r3, [r7, #32]
 800d062:	e009      	b.n	800d078 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800d064:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800d068:	2b09      	cmp	r3, #9
 800d06a:	dc02      	bgt.n	800d072 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800d06c:	8bfb      	ldrh	r3, [r7, #30]
 800d06e:	843b      	strh	r3, [r7, #32]
 800d070:	e002      	b.n	800d078 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800d072:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d076:	e054      	b.n	800d122 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d078:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d07c:	2b09      	cmp	r3, #9
 800d07e:	dd06      	ble.n	800d08e <etharp_find_entry+0x236>
 800d080:	4b2b      	ldr	r3, [pc, #172]	; (800d130 <etharp_find_entry+0x2d8>)
 800d082:	f240 127f 	movw	r2, #383	; 0x17f
 800d086:	492e      	ldr	r1, [pc, #184]	; (800d140 <etharp_find_entry+0x2e8>)
 800d088:	482b      	ldr	r0, [pc, #172]	; (800d138 <etharp_find_entry+0x2e0>)
 800d08a:	f002 f92d 	bl	800f2e8 <iprintf>
    etharp_free_entry(i);
 800d08e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d092:	4618      	mov	r0, r3
 800d094:	f7ff fe06 	bl	800cca4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d098:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d09c:	2b09      	cmp	r3, #9
 800d09e:	dd06      	ble.n	800d0ae <etharp_find_entry+0x256>
 800d0a0:	4b23      	ldr	r3, [pc, #140]	; (800d130 <etharp_find_entry+0x2d8>)
 800d0a2:	f240 1283 	movw	r2, #387	; 0x183
 800d0a6:	4926      	ldr	r1, [pc, #152]	; (800d140 <etharp_find_entry+0x2e8>)
 800d0a8:	4823      	ldr	r0, [pc, #140]	; (800d138 <etharp_find_entry+0x2e0>)
 800d0aa:	f002 f91d 	bl	800f2e8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800d0ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d0b2:	491e      	ldr	r1, [pc, #120]	; (800d12c <etharp_find_entry+0x2d4>)
 800d0b4:	4613      	mov	r3, r2
 800d0b6:	005b      	lsls	r3, r3, #1
 800d0b8:	4413      	add	r3, r2
 800d0ba:	00db      	lsls	r3, r3, #3
 800d0bc:	440b      	add	r3, r1
 800d0be:	3314      	adds	r3, #20
 800d0c0:	781b      	ldrb	r3, [r3, #0]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d006      	beq.n	800d0d4 <etharp_find_entry+0x27c>
 800d0c6:	4b1a      	ldr	r3, [pc, #104]	; (800d130 <etharp_find_entry+0x2d8>)
 800d0c8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800d0cc:	491d      	ldr	r1, [pc, #116]	; (800d144 <etharp_find_entry+0x2ec>)
 800d0ce:	481a      	ldr	r0, [pc, #104]	; (800d138 <etharp_find_entry+0x2e0>)
 800d0d0:	f002 f90a 	bl	800f2e8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d00b      	beq.n	800d0f2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800d0da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	6819      	ldr	r1, [r3, #0]
 800d0e2:	4812      	ldr	r0, [pc, #72]	; (800d12c <etharp_find_entry+0x2d4>)
 800d0e4:	4613      	mov	r3, r2
 800d0e6:	005b      	lsls	r3, r3, #1
 800d0e8:	4413      	add	r3, r2
 800d0ea:	00db      	lsls	r3, r3, #3
 800d0ec:	4403      	add	r3, r0
 800d0ee:	3304      	adds	r3, #4
 800d0f0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800d0f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d0f6:	490d      	ldr	r1, [pc, #52]	; (800d12c <etharp_find_entry+0x2d4>)
 800d0f8:	4613      	mov	r3, r2
 800d0fa:	005b      	lsls	r3, r3, #1
 800d0fc:	4413      	add	r3, r2
 800d0fe:	00db      	lsls	r3, r3, #3
 800d100:	440b      	add	r3, r1
 800d102:	3312      	adds	r3, #18
 800d104:	2200      	movs	r2, #0
 800d106:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800d108:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d10c:	4907      	ldr	r1, [pc, #28]	; (800d12c <etharp_find_entry+0x2d4>)
 800d10e:	4613      	mov	r3, r2
 800d110:	005b      	lsls	r3, r3, #1
 800d112:	4413      	add	r3, r2
 800d114:	00db      	lsls	r3, r3, #3
 800d116:	440b      	add	r3, r1
 800d118:	3308      	adds	r3, #8
 800d11a:	687a      	ldr	r2, [r7, #4]
 800d11c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800d11e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800d122:	4618      	mov	r0, r3
 800d124:	3728      	adds	r7, #40	; 0x28
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}
 800d12a:	bf00      	nop
 800d12c:	2000056c 	.word	0x2000056c
 800d130:	08012ce0 	.word	0x08012ce0
 800d134:	08012d18 	.word	0x08012d18
 800d138:	08012d58 	.word	0x08012d58
 800d13c:	08012d80 	.word	0x08012d80
 800d140:	08012d98 	.word	0x08012d98
 800d144:	08012dac 	.word	0x08012dac

0800d148 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b088      	sub	sp, #32
 800d14c:	af02      	add	r7, sp, #8
 800d14e:	60f8      	str	r0, [r7, #12]
 800d150:	60b9      	str	r1, [r7, #8]
 800d152:	607a      	str	r2, [r7, #4]
 800d154:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d15c:	2b06      	cmp	r3, #6
 800d15e:	d006      	beq.n	800d16e <etharp_update_arp_entry+0x26>
 800d160:	4b48      	ldr	r3, [pc, #288]	; (800d284 <etharp_update_arp_entry+0x13c>)
 800d162:	f240 12a9 	movw	r2, #425	; 0x1a9
 800d166:	4948      	ldr	r1, [pc, #288]	; (800d288 <etharp_update_arp_entry+0x140>)
 800d168:	4848      	ldr	r0, [pc, #288]	; (800d28c <etharp_update_arp_entry+0x144>)
 800d16a:	f002 f8bd 	bl	800f2e8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d012      	beq.n	800d19a <etharp_update_arp_entry+0x52>
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d00e      	beq.n	800d19a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d17c:	68bb      	ldr	r3, [r7, #8]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	68f9      	ldr	r1, [r7, #12]
 800d182:	4618      	mov	r0, r3
 800d184:	f001 f8fe 	bl	800e384 <ip4_addr_isbroadcast_u32>
 800d188:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d105      	bne.n	800d19a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d196:	2be0      	cmp	r3, #224	; 0xe0
 800d198:	d102      	bne.n	800d1a0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d19a:	f06f 030f 	mvn.w	r3, #15
 800d19e:	e06c      	b.n	800d27a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800d1a0:	78fb      	ldrb	r3, [r7, #3]
 800d1a2:	68fa      	ldr	r2, [r7, #12]
 800d1a4:	4619      	mov	r1, r3
 800d1a6:	68b8      	ldr	r0, [r7, #8]
 800d1a8:	f7ff fe56 	bl	800ce58 <etharp_find_entry>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800d1b0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	da02      	bge.n	800d1be <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800d1b8:	8afb      	ldrh	r3, [r7, #22]
 800d1ba:	b25b      	sxtb	r3, r3
 800d1bc:	e05d      	b.n	800d27a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800d1be:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d1c2:	4933      	ldr	r1, [pc, #204]	; (800d290 <etharp_update_arp_entry+0x148>)
 800d1c4:	4613      	mov	r3, r2
 800d1c6:	005b      	lsls	r3, r3, #1
 800d1c8:	4413      	add	r3, r2
 800d1ca:	00db      	lsls	r3, r3, #3
 800d1cc:	440b      	add	r3, r1
 800d1ce:	3314      	adds	r3, #20
 800d1d0:	2202      	movs	r2, #2
 800d1d2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800d1d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d1d8:	492d      	ldr	r1, [pc, #180]	; (800d290 <etharp_update_arp_entry+0x148>)
 800d1da:	4613      	mov	r3, r2
 800d1dc:	005b      	lsls	r3, r3, #1
 800d1de:	4413      	add	r3, r2
 800d1e0:	00db      	lsls	r3, r3, #3
 800d1e2:	440b      	add	r3, r1
 800d1e4:	3308      	adds	r3, #8
 800d1e6:	68fa      	ldr	r2, [r7, #12]
 800d1e8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800d1ea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d1ee:	4613      	mov	r3, r2
 800d1f0:	005b      	lsls	r3, r3, #1
 800d1f2:	4413      	add	r3, r2
 800d1f4:	00db      	lsls	r3, r3, #3
 800d1f6:	3308      	adds	r3, #8
 800d1f8:	4a25      	ldr	r2, [pc, #148]	; (800d290 <etharp_update_arp_entry+0x148>)
 800d1fa:	4413      	add	r3, r2
 800d1fc:	3304      	adds	r3, #4
 800d1fe:	2206      	movs	r2, #6
 800d200:	6879      	ldr	r1, [r7, #4]
 800d202:	4618      	mov	r0, r3
 800d204:	f002 f840 	bl	800f288 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800d208:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d20c:	4920      	ldr	r1, [pc, #128]	; (800d290 <etharp_update_arp_entry+0x148>)
 800d20e:	4613      	mov	r3, r2
 800d210:	005b      	lsls	r3, r3, #1
 800d212:	4413      	add	r3, r2
 800d214:	00db      	lsls	r3, r3, #3
 800d216:	440b      	add	r3, r1
 800d218:	3312      	adds	r3, #18
 800d21a:	2200      	movs	r2, #0
 800d21c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800d21e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d222:	491b      	ldr	r1, [pc, #108]	; (800d290 <etharp_update_arp_entry+0x148>)
 800d224:	4613      	mov	r3, r2
 800d226:	005b      	lsls	r3, r3, #1
 800d228:	4413      	add	r3, r2
 800d22a:	00db      	lsls	r3, r3, #3
 800d22c:	440b      	add	r3, r1
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d021      	beq.n	800d278 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800d234:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d238:	4915      	ldr	r1, [pc, #84]	; (800d290 <etharp_update_arp_entry+0x148>)
 800d23a:	4613      	mov	r3, r2
 800d23c:	005b      	lsls	r3, r3, #1
 800d23e:	4413      	add	r3, r2
 800d240:	00db      	lsls	r3, r3, #3
 800d242:	440b      	add	r3, r1
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800d248:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d24c:	4910      	ldr	r1, [pc, #64]	; (800d290 <etharp_update_arp_entry+0x148>)
 800d24e:	4613      	mov	r3, r2
 800d250:	005b      	lsls	r3, r3, #1
 800d252:	4413      	add	r3, r2
 800d254:	00db      	lsls	r3, r3, #3
 800d256:	440b      	add	r3, r1
 800d258:	2200      	movs	r2, #0
 800d25a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d262:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d266:	9300      	str	r3, [sp, #0]
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	6939      	ldr	r1, [r7, #16]
 800d26c:	68f8      	ldr	r0, [r7, #12]
 800d26e:	f001 ff91 	bl	800f194 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800d272:	6938      	ldr	r0, [r7, #16]
 800d274:	f7f8 ff2e 	bl	80060d4 <pbuf_free>
  }
  return ERR_OK;
 800d278:	2300      	movs	r3, #0
}
 800d27a:	4618      	mov	r0, r3
 800d27c:	3718      	adds	r7, #24
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd80      	pop	{r7, pc}
 800d282:	bf00      	nop
 800d284:	08012ce0 	.word	0x08012ce0
 800d288:	08012dd8 	.word	0x08012dd8
 800d28c:	08012d58 	.word	0x08012d58
 800d290:	2000056c 	.word	0x2000056c

0800d294 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b084      	sub	sp, #16
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d29c:	2300      	movs	r3, #0
 800d29e:	60fb      	str	r3, [r7, #12]
 800d2a0:	e01e      	b.n	800d2e0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800d2a2:	4913      	ldr	r1, [pc, #76]	; (800d2f0 <etharp_cleanup_netif+0x5c>)
 800d2a4:	68fa      	ldr	r2, [r7, #12]
 800d2a6:	4613      	mov	r3, r2
 800d2a8:	005b      	lsls	r3, r3, #1
 800d2aa:	4413      	add	r3, r2
 800d2ac:	00db      	lsls	r3, r3, #3
 800d2ae:	440b      	add	r3, r1
 800d2b0:	3314      	adds	r3, #20
 800d2b2:	781b      	ldrb	r3, [r3, #0]
 800d2b4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800d2b6:	7afb      	ldrb	r3, [r7, #11]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d00e      	beq.n	800d2da <etharp_cleanup_netif+0x46>
 800d2bc:	490c      	ldr	r1, [pc, #48]	; (800d2f0 <etharp_cleanup_netif+0x5c>)
 800d2be:	68fa      	ldr	r2, [r7, #12]
 800d2c0:	4613      	mov	r3, r2
 800d2c2:	005b      	lsls	r3, r3, #1
 800d2c4:	4413      	add	r3, r2
 800d2c6:	00db      	lsls	r3, r3, #3
 800d2c8:	440b      	add	r3, r1
 800d2ca:	3308      	adds	r3, #8
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	687a      	ldr	r2, [r7, #4]
 800d2d0:	429a      	cmp	r2, r3
 800d2d2:	d102      	bne.n	800d2da <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800d2d4:	68f8      	ldr	r0, [r7, #12]
 800d2d6:	f7ff fce5 	bl	800cca4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	3301      	adds	r3, #1
 800d2de:	60fb      	str	r3, [r7, #12]
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	2b09      	cmp	r3, #9
 800d2e4:	dddd      	ble.n	800d2a2 <etharp_cleanup_netif+0xe>
    }
  }
}
 800d2e6:	bf00      	nop
 800d2e8:	bf00      	nop
 800d2ea:	3710      	adds	r7, #16
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	bd80      	pop	{r7, pc}
 800d2f0:	2000056c 	.word	0x2000056c

0800d2f4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800d2f4:	b5b0      	push	{r4, r5, r7, lr}
 800d2f6:	b08a      	sub	sp, #40	; 0x28
 800d2f8:	af04      	add	r7, sp, #16
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d107      	bne.n	800d314 <etharp_input+0x20>
 800d304:	4b3d      	ldr	r3, [pc, #244]	; (800d3fc <etharp_input+0x108>)
 800d306:	f240 228a 	movw	r2, #650	; 0x28a
 800d30a:	493d      	ldr	r1, [pc, #244]	; (800d400 <etharp_input+0x10c>)
 800d30c:	483d      	ldr	r0, [pc, #244]	; (800d404 <etharp_input+0x110>)
 800d30e:	f001 ffeb 	bl	800f2e8 <iprintf>
 800d312:	e06f      	b.n	800d3f4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	685b      	ldr	r3, [r3, #4]
 800d318:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d31a:	693b      	ldr	r3, [r7, #16]
 800d31c:	881b      	ldrh	r3, [r3, #0]
 800d31e:	b29b      	uxth	r3, r3
 800d320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d324:	d10c      	bne.n	800d340 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d326:	693b      	ldr	r3, [r7, #16]
 800d328:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d32a:	2b06      	cmp	r3, #6
 800d32c:	d108      	bne.n	800d340 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d32e:	693b      	ldr	r3, [r7, #16]
 800d330:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d332:	2b04      	cmp	r3, #4
 800d334:	d104      	bne.n	800d340 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800d336:	693b      	ldr	r3, [r7, #16]
 800d338:	885b      	ldrh	r3, [r3, #2]
 800d33a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d33c:	2b08      	cmp	r3, #8
 800d33e:	d003      	beq.n	800d348 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	f7f8 fec7 	bl	80060d4 <pbuf_free>
    return;
 800d346:	e055      	b.n	800d3f4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800d348:	693b      	ldr	r3, [r7, #16]
 800d34a:	330e      	adds	r3, #14
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800d350:	693b      	ldr	r3, [r7, #16]
 800d352:	3318      	adds	r3, #24
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	3304      	adds	r3, #4
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d102      	bne.n	800d368 <etharp_input+0x74>
    for_us = 0;
 800d362:	2300      	movs	r3, #0
 800d364:	75fb      	strb	r3, [r7, #23]
 800d366:	e009      	b.n	800d37c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800d368:	68ba      	ldr	r2, [r7, #8]
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	3304      	adds	r3, #4
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	429a      	cmp	r2, r3
 800d372:	bf0c      	ite	eq
 800d374:	2301      	moveq	r3, #1
 800d376:	2300      	movne	r3, #0
 800d378:	b2db      	uxtb	r3, r3
 800d37a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d37c:	693b      	ldr	r3, [r7, #16]
 800d37e:	f103 0208 	add.w	r2, r3, #8
 800d382:	7dfb      	ldrb	r3, [r7, #23]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d001      	beq.n	800d38c <etharp_input+0x98>
 800d388:	2301      	movs	r3, #1
 800d38a:	e000      	b.n	800d38e <etharp_input+0x9a>
 800d38c:	2302      	movs	r3, #2
 800d38e:	f107 010c 	add.w	r1, r7, #12
 800d392:	6838      	ldr	r0, [r7, #0]
 800d394:	f7ff fed8 	bl	800d148 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800d398:	693b      	ldr	r3, [r7, #16]
 800d39a:	88db      	ldrh	r3, [r3, #6]
 800d39c:	b29b      	uxth	r3, r3
 800d39e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d3a2:	d003      	beq.n	800d3ac <etharp_input+0xb8>
 800d3a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d3a8:	d01e      	beq.n	800d3e8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800d3aa:	e020      	b.n	800d3ee <etharp_input+0xfa>
      if (for_us) {
 800d3ac:	7dfb      	ldrb	r3, [r7, #23]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d01c      	beq.n	800d3ec <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d3b8:	693b      	ldr	r3, [r7, #16]
 800d3ba:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800d3c8:	693a      	ldr	r2, [r7, #16]
 800d3ca:	3208      	adds	r2, #8
        etharp_raw(netif,
 800d3cc:	2102      	movs	r1, #2
 800d3ce:	9103      	str	r1, [sp, #12]
 800d3d0:	f107 010c 	add.w	r1, r7, #12
 800d3d4:	9102      	str	r1, [sp, #8]
 800d3d6:	9201      	str	r2, [sp, #4]
 800d3d8:	9300      	str	r3, [sp, #0]
 800d3da:	462b      	mov	r3, r5
 800d3dc:	4622      	mov	r2, r4
 800d3de:	4601      	mov	r1, r0
 800d3e0:	6838      	ldr	r0, [r7, #0]
 800d3e2:	f000 faeb 	bl	800d9bc <etharp_raw>
      break;
 800d3e6:	e001      	b.n	800d3ec <etharp_input+0xf8>
      break;
 800d3e8:	bf00      	nop
 800d3ea:	e000      	b.n	800d3ee <etharp_input+0xfa>
      break;
 800d3ec:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800d3ee:	6878      	ldr	r0, [r7, #4]
 800d3f0:	f7f8 fe70 	bl	80060d4 <pbuf_free>
}
 800d3f4:	3718      	adds	r7, #24
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bdb0      	pop	{r4, r5, r7, pc}
 800d3fa:	bf00      	nop
 800d3fc:	08012ce0 	.word	0x08012ce0
 800d400:	08012e30 	.word	0x08012e30
 800d404:	08012d58 	.word	0x08012d58

0800d408 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b086      	sub	sp, #24
 800d40c:	af02      	add	r7, sp, #8
 800d40e:	60f8      	str	r0, [r7, #12]
 800d410:	60b9      	str	r1, [r7, #8]
 800d412:	4613      	mov	r3, r2
 800d414:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d416:	79fa      	ldrb	r2, [r7, #7]
 800d418:	4944      	ldr	r1, [pc, #272]	; (800d52c <etharp_output_to_arp_index+0x124>)
 800d41a:	4613      	mov	r3, r2
 800d41c:	005b      	lsls	r3, r3, #1
 800d41e:	4413      	add	r3, r2
 800d420:	00db      	lsls	r3, r3, #3
 800d422:	440b      	add	r3, r1
 800d424:	3314      	adds	r3, #20
 800d426:	781b      	ldrb	r3, [r3, #0]
 800d428:	2b01      	cmp	r3, #1
 800d42a:	d806      	bhi.n	800d43a <etharp_output_to_arp_index+0x32>
 800d42c:	4b40      	ldr	r3, [pc, #256]	; (800d530 <etharp_output_to_arp_index+0x128>)
 800d42e:	f240 22ee 	movw	r2, #750	; 0x2ee
 800d432:	4940      	ldr	r1, [pc, #256]	; (800d534 <etharp_output_to_arp_index+0x12c>)
 800d434:	4840      	ldr	r0, [pc, #256]	; (800d538 <etharp_output_to_arp_index+0x130>)
 800d436:	f001 ff57 	bl	800f2e8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800d43a:	79fa      	ldrb	r2, [r7, #7]
 800d43c:	493b      	ldr	r1, [pc, #236]	; (800d52c <etharp_output_to_arp_index+0x124>)
 800d43e:	4613      	mov	r3, r2
 800d440:	005b      	lsls	r3, r3, #1
 800d442:	4413      	add	r3, r2
 800d444:	00db      	lsls	r3, r3, #3
 800d446:	440b      	add	r3, r1
 800d448:	3314      	adds	r3, #20
 800d44a:	781b      	ldrb	r3, [r3, #0]
 800d44c:	2b02      	cmp	r3, #2
 800d44e:	d153      	bne.n	800d4f8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800d450:	79fa      	ldrb	r2, [r7, #7]
 800d452:	4936      	ldr	r1, [pc, #216]	; (800d52c <etharp_output_to_arp_index+0x124>)
 800d454:	4613      	mov	r3, r2
 800d456:	005b      	lsls	r3, r3, #1
 800d458:	4413      	add	r3, r2
 800d45a:	00db      	lsls	r3, r3, #3
 800d45c:	440b      	add	r3, r1
 800d45e:	3312      	adds	r3, #18
 800d460:	881b      	ldrh	r3, [r3, #0]
 800d462:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800d466:	d919      	bls.n	800d49c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800d468:	79fa      	ldrb	r2, [r7, #7]
 800d46a:	4613      	mov	r3, r2
 800d46c:	005b      	lsls	r3, r3, #1
 800d46e:	4413      	add	r3, r2
 800d470:	00db      	lsls	r3, r3, #3
 800d472:	4a2e      	ldr	r2, [pc, #184]	; (800d52c <etharp_output_to_arp_index+0x124>)
 800d474:	4413      	add	r3, r2
 800d476:	3304      	adds	r3, #4
 800d478:	4619      	mov	r1, r3
 800d47a:	68f8      	ldr	r0, [r7, #12]
 800d47c:	f000 fb4c 	bl	800db18 <etharp_request>
 800d480:	4603      	mov	r3, r0
 800d482:	2b00      	cmp	r3, #0
 800d484:	d138      	bne.n	800d4f8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d486:	79fa      	ldrb	r2, [r7, #7]
 800d488:	4928      	ldr	r1, [pc, #160]	; (800d52c <etharp_output_to_arp_index+0x124>)
 800d48a:	4613      	mov	r3, r2
 800d48c:	005b      	lsls	r3, r3, #1
 800d48e:	4413      	add	r3, r2
 800d490:	00db      	lsls	r3, r3, #3
 800d492:	440b      	add	r3, r1
 800d494:	3314      	adds	r3, #20
 800d496:	2203      	movs	r2, #3
 800d498:	701a      	strb	r2, [r3, #0]
 800d49a:	e02d      	b.n	800d4f8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800d49c:	79fa      	ldrb	r2, [r7, #7]
 800d49e:	4923      	ldr	r1, [pc, #140]	; (800d52c <etharp_output_to_arp_index+0x124>)
 800d4a0:	4613      	mov	r3, r2
 800d4a2:	005b      	lsls	r3, r3, #1
 800d4a4:	4413      	add	r3, r2
 800d4a6:	00db      	lsls	r3, r3, #3
 800d4a8:	440b      	add	r3, r1
 800d4aa:	3312      	adds	r3, #18
 800d4ac:	881b      	ldrh	r3, [r3, #0]
 800d4ae:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800d4b2:	d321      	bcc.n	800d4f8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d4b4:	79fa      	ldrb	r2, [r7, #7]
 800d4b6:	4613      	mov	r3, r2
 800d4b8:	005b      	lsls	r3, r3, #1
 800d4ba:	4413      	add	r3, r2
 800d4bc:	00db      	lsls	r3, r3, #3
 800d4be:	4a1b      	ldr	r2, [pc, #108]	; (800d52c <etharp_output_to_arp_index+0x124>)
 800d4c0:	4413      	add	r3, r2
 800d4c2:	1d19      	adds	r1, r3, #4
 800d4c4:	79fa      	ldrb	r2, [r7, #7]
 800d4c6:	4613      	mov	r3, r2
 800d4c8:	005b      	lsls	r3, r3, #1
 800d4ca:	4413      	add	r3, r2
 800d4cc:	00db      	lsls	r3, r3, #3
 800d4ce:	3308      	adds	r3, #8
 800d4d0:	4a16      	ldr	r2, [pc, #88]	; (800d52c <etharp_output_to_arp_index+0x124>)
 800d4d2:	4413      	add	r3, r2
 800d4d4:	3304      	adds	r3, #4
 800d4d6:	461a      	mov	r2, r3
 800d4d8:	68f8      	ldr	r0, [r7, #12]
 800d4da:	f000 fafb 	bl	800dad4 <etharp_request_dst>
 800d4de:	4603      	mov	r3, r0
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d109      	bne.n	800d4f8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d4e4:	79fa      	ldrb	r2, [r7, #7]
 800d4e6:	4911      	ldr	r1, [pc, #68]	; (800d52c <etharp_output_to_arp_index+0x124>)
 800d4e8:	4613      	mov	r3, r2
 800d4ea:	005b      	lsls	r3, r3, #1
 800d4ec:	4413      	add	r3, r2
 800d4ee:	00db      	lsls	r3, r3, #3
 800d4f0:	440b      	add	r3, r1
 800d4f2:	3314      	adds	r3, #20
 800d4f4:	2203      	movs	r2, #3
 800d4f6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800d4fe:	79fa      	ldrb	r2, [r7, #7]
 800d500:	4613      	mov	r3, r2
 800d502:	005b      	lsls	r3, r3, #1
 800d504:	4413      	add	r3, r2
 800d506:	00db      	lsls	r3, r3, #3
 800d508:	3308      	adds	r3, #8
 800d50a:	4a08      	ldr	r2, [pc, #32]	; (800d52c <etharp_output_to_arp_index+0x124>)
 800d50c:	4413      	add	r3, r2
 800d50e:	3304      	adds	r3, #4
 800d510:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d514:	9200      	str	r2, [sp, #0]
 800d516:	460a      	mov	r2, r1
 800d518:	68b9      	ldr	r1, [r7, #8]
 800d51a:	68f8      	ldr	r0, [r7, #12]
 800d51c:	f001 fe3a 	bl	800f194 <ethernet_output>
 800d520:	4603      	mov	r3, r0
}
 800d522:	4618      	mov	r0, r3
 800d524:	3710      	adds	r7, #16
 800d526:	46bd      	mov	sp, r7
 800d528:	bd80      	pop	{r7, pc}
 800d52a:	bf00      	nop
 800d52c:	2000056c 	.word	0x2000056c
 800d530:	08012ce0 	.word	0x08012ce0
 800d534:	08012e50 	.word	0x08012e50
 800d538:	08012d58 	.word	0x08012d58

0800d53c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b08a      	sub	sp, #40	; 0x28
 800d540:	af02      	add	r7, sp, #8
 800d542:	60f8      	str	r0, [r7, #12]
 800d544:	60b9      	str	r1, [r7, #8]
 800d546:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d106      	bne.n	800d560 <etharp_output+0x24>
 800d552:	4b73      	ldr	r3, [pc, #460]	; (800d720 <etharp_output+0x1e4>)
 800d554:	f240 321e 	movw	r2, #798	; 0x31e
 800d558:	4972      	ldr	r1, [pc, #456]	; (800d724 <etharp_output+0x1e8>)
 800d55a:	4873      	ldr	r0, [pc, #460]	; (800d728 <etharp_output+0x1ec>)
 800d55c:	f001 fec4 	bl	800f2e8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d106      	bne.n	800d574 <etharp_output+0x38>
 800d566:	4b6e      	ldr	r3, [pc, #440]	; (800d720 <etharp_output+0x1e4>)
 800d568:	f240 321f 	movw	r2, #799	; 0x31f
 800d56c:	496f      	ldr	r1, [pc, #444]	; (800d72c <etharp_output+0x1f0>)
 800d56e:	486e      	ldr	r0, [pc, #440]	; (800d728 <etharp_output+0x1ec>)
 800d570:	f001 feba 	bl	800f2e8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d106      	bne.n	800d588 <etharp_output+0x4c>
 800d57a:	4b69      	ldr	r3, [pc, #420]	; (800d720 <etharp_output+0x1e4>)
 800d57c:	f44f 7248 	mov.w	r2, #800	; 0x320
 800d580:	496b      	ldr	r1, [pc, #428]	; (800d730 <etharp_output+0x1f4>)
 800d582:	4869      	ldr	r0, [pc, #420]	; (800d728 <etharp_output+0x1ec>)
 800d584:	f001 feb0 	bl	800f2e8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	68f9      	ldr	r1, [r7, #12]
 800d58e:	4618      	mov	r0, r3
 800d590:	f000 fef8 	bl	800e384 <ip4_addr_isbroadcast_u32>
 800d594:	4603      	mov	r3, r0
 800d596:	2b00      	cmp	r3, #0
 800d598:	d002      	beq.n	800d5a0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800d59a:	4b66      	ldr	r3, [pc, #408]	; (800d734 <etharp_output+0x1f8>)
 800d59c:	61fb      	str	r3, [r7, #28]
 800d59e:	e0af      	b.n	800d700 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d5a8:	2be0      	cmp	r3, #224	; 0xe0
 800d5aa:	d118      	bne.n	800d5de <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800d5ac:	2301      	movs	r3, #1
 800d5ae:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800d5b4:	235e      	movs	r3, #94	; 0x5e
 800d5b6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	3301      	adds	r3, #1
 800d5bc:	781b      	ldrb	r3, [r3, #0]
 800d5be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5c2:	b2db      	uxtb	r3, r3
 800d5c4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	3302      	adds	r3, #2
 800d5ca:	781b      	ldrb	r3, [r3, #0]
 800d5cc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	3303      	adds	r3, #3
 800d5d2:	781b      	ldrb	r3, [r3, #0]
 800d5d4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800d5d6:	f107 0310 	add.w	r3, r7, #16
 800d5da:	61fb      	str	r3, [r7, #28]
 800d5dc:	e090      	b.n	800d700 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681a      	ldr	r2, [r3, #0]
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	3304      	adds	r3, #4
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	405a      	eors	r2, r3
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	3308      	adds	r3, #8
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	4013      	ands	r3, r2
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d012      	beq.n	800d61c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d5fc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800d600:	4293      	cmp	r3, r2
 800d602:	d00b      	beq.n	800d61c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	330c      	adds	r3, #12
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d003      	beq.n	800d616 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	330c      	adds	r3, #12
 800d612:	61bb      	str	r3, [r7, #24]
 800d614:	e002      	b.n	800d61c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800d616:	f06f 0303 	mvn.w	r3, #3
 800d61a:	e07d      	b.n	800d718 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d61c:	4b46      	ldr	r3, [pc, #280]	; (800d738 <etharp_output+0x1fc>)
 800d61e:	781b      	ldrb	r3, [r3, #0]
 800d620:	4619      	mov	r1, r3
 800d622:	4a46      	ldr	r2, [pc, #280]	; (800d73c <etharp_output+0x200>)
 800d624:	460b      	mov	r3, r1
 800d626:	005b      	lsls	r3, r3, #1
 800d628:	440b      	add	r3, r1
 800d62a:	00db      	lsls	r3, r3, #3
 800d62c:	4413      	add	r3, r2
 800d62e:	3314      	adds	r3, #20
 800d630:	781b      	ldrb	r3, [r3, #0]
 800d632:	2b01      	cmp	r3, #1
 800d634:	d925      	bls.n	800d682 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d636:	4b40      	ldr	r3, [pc, #256]	; (800d738 <etharp_output+0x1fc>)
 800d638:	781b      	ldrb	r3, [r3, #0]
 800d63a:	4619      	mov	r1, r3
 800d63c:	4a3f      	ldr	r2, [pc, #252]	; (800d73c <etharp_output+0x200>)
 800d63e:	460b      	mov	r3, r1
 800d640:	005b      	lsls	r3, r3, #1
 800d642:	440b      	add	r3, r1
 800d644:	00db      	lsls	r3, r3, #3
 800d646:	4413      	add	r3, r2
 800d648:	3308      	adds	r3, #8
 800d64a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d64c:	68fa      	ldr	r2, [r7, #12]
 800d64e:	429a      	cmp	r2, r3
 800d650:	d117      	bne.n	800d682 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800d652:	69bb      	ldr	r3, [r7, #24]
 800d654:	681a      	ldr	r2, [r3, #0]
 800d656:	4b38      	ldr	r3, [pc, #224]	; (800d738 <etharp_output+0x1fc>)
 800d658:	781b      	ldrb	r3, [r3, #0]
 800d65a:	4618      	mov	r0, r3
 800d65c:	4937      	ldr	r1, [pc, #220]	; (800d73c <etharp_output+0x200>)
 800d65e:	4603      	mov	r3, r0
 800d660:	005b      	lsls	r3, r3, #1
 800d662:	4403      	add	r3, r0
 800d664:	00db      	lsls	r3, r3, #3
 800d666:	440b      	add	r3, r1
 800d668:	3304      	adds	r3, #4
 800d66a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d66c:	429a      	cmp	r2, r3
 800d66e:	d108      	bne.n	800d682 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800d670:	4b31      	ldr	r3, [pc, #196]	; (800d738 <etharp_output+0x1fc>)
 800d672:	781b      	ldrb	r3, [r3, #0]
 800d674:	461a      	mov	r2, r3
 800d676:	68b9      	ldr	r1, [r7, #8]
 800d678:	68f8      	ldr	r0, [r7, #12]
 800d67a:	f7ff fec5 	bl	800d408 <etharp_output_to_arp_index>
 800d67e:	4603      	mov	r3, r0
 800d680:	e04a      	b.n	800d718 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d682:	2300      	movs	r3, #0
 800d684:	75fb      	strb	r3, [r7, #23]
 800d686:	e031      	b.n	800d6ec <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d688:	7dfa      	ldrb	r2, [r7, #23]
 800d68a:	492c      	ldr	r1, [pc, #176]	; (800d73c <etharp_output+0x200>)
 800d68c:	4613      	mov	r3, r2
 800d68e:	005b      	lsls	r3, r3, #1
 800d690:	4413      	add	r3, r2
 800d692:	00db      	lsls	r3, r3, #3
 800d694:	440b      	add	r3, r1
 800d696:	3314      	adds	r3, #20
 800d698:	781b      	ldrb	r3, [r3, #0]
 800d69a:	2b01      	cmp	r3, #1
 800d69c:	d923      	bls.n	800d6e6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800d69e:	7dfa      	ldrb	r2, [r7, #23]
 800d6a0:	4926      	ldr	r1, [pc, #152]	; (800d73c <etharp_output+0x200>)
 800d6a2:	4613      	mov	r3, r2
 800d6a4:	005b      	lsls	r3, r3, #1
 800d6a6:	4413      	add	r3, r2
 800d6a8:	00db      	lsls	r3, r3, #3
 800d6aa:	440b      	add	r3, r1
 800d6ac:	3308      	adds	r3, #8
 800d6ae:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d6b0:	68fa      	ldr	r2, [r7, #12]
 800d6b2:	429a      	cmp	r2, r3
 800d6b4:	d117      	bne.n	800d6e6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800d6b6:	69bb      	ldr	r3, [r7, #24]
 800d6b8:	6819      	ldr	r1, [r3, #0]
 800d6ba:	7dfa      	ldrb	r2, [r7, #23]
 800d6bc:	481f      	ldr	r0, [pc, #124]	; (800d73c <etharp_output+0x200>)
 800d6be:	4613      	mov	r3, r2
 800d6c0:	005b      	lsls	r3, r3, #1
 800d6c2:	4413      	add	r3, r2
 800d6c4:	00db      	lsls	r3, r3, #3
 800d6c6:	4403      	add	r3, r0
 800d6c8:	3304      	adds	r3, #4
 800d6ca:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800d6cc:	4299      	cmp	r1, r3
 800d6ce:	d10a      	bne.n	800d6e6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800d6d0:	4a19      	ldr	r2, [pc, #100]	; (800d738 <etharp_output+0x1fc>)
 800d6d2:	7dfb      	ldrb	r3, [r7, #23]
 800d6d4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800d6d6:	7dfb      	ldrb	r3, [r7, #23]
 800d6d8:	461a      	mov	r2, r3
 800d6da:	68b9      	ldr	r1, [r7, #8]
 800d6dc:	68f8      	ldr	r0, [r7, #12]
 800d6de:	f7ff fe93 	bl	800d408 <etharp_output_to_arp_index>
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	e018      	b.n	800d718 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d6e6:	7dfb      	ldrb	r3, [r7, #23]
 800d6e8:	3301      	adds	r3, #1
 800d6ea:	75fb      	strb	r3, [r7, #23]
 800d6ec:	7dfb      	ldrb	r3, [r7, #23]
 800d6ee:	2b09      	cmp	r3, #9
 800d6f0:	d9ca      	bls.n	800d688 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800d6f2:	68ba      	ldr	r2, [r7, #8]
 800d6f4:	69b9      	ldr	r1, [r7, #24]
 800d6f6:	68f8      	ldr	r0, [r7, #12]
 800d6f8:	f000 f822 	bl	800d740 <etharp_query>
 800d6fc:	4603      	mov	r3, r0
 800d6fe:	e00b      	b.n	800d718 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d706:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d70a:	9300      	str	r3, [sp, #0]
 800d70c:	69fb      	ldr	r3, [r7, #28]
 800d70e:	68b9      	ldr	r1, [r7, #8]
 800d710:	68f8      	ldr	r0, [r7, #12]
 800d712:	f001 fd3f 	bl	800f194 <ethernet_output>
 800d716:	4603      	mov	r3, r0
}
 800d718:	4618      	mov	r0, r3
 800d71a:	3720      	adds	r7, #32
 800d71c:	46bd      	mov	sp, r7
 800d71e:	bd80      	pop	{r7, pc}
 800d720:	08012ce0 	.word	0x08012ce0
 800d724:	08012e30 	.word	0x08012e30
 800d728:	08012d58 	.word	0x08012d58
 800d72c:	08012e80 	.word	0x08012e80
 800d730:	08012e20 	.word	0x08012e20
 800d734:	08014318 	.word	0x08014318
 800d738:	2000065c 	.word	0x2000065c
 800d73c:	2000056c 	.word	0x2000056c

0800d740 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b08c      	sub	sp, #48	; 0x30
 800d744:	af02      	add	r7, sp, #8
 800d746:	60f8      	str	r0, [r7, #12]
 800d748:	60b9      	str	r1, [r7, #8]
 800d74a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	3326      	adds	r3, #38	; 0x26
 800d750:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800d752:	23ff      	movs	r3, #255	; 0xff
 800d754:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800d758:	2300      	movs	r3, #0
 800d75a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d75c:	68bb      	ldr	r3, [r7, #8]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	68f9      	ldr	r1, [r7, #12]
 800d762:	4618      	mov	r0, r3
 800d764:	f000 fe0e 	bl	800e384 <ip4_addr_isbroadcast_u32>
 800d768:	4603      	mov	r3, r0
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d10c      	bne.n	800d788 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d776:	2be0      	cmp	r3, #224	; 0xe0
 800d778:	d006      	beq.n	800d788 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d77a:	68bb      	ldr	r3, [r7, #8]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d003      	beq.n	800d788 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800d780:	68bb      	ldr	r3, [r7, #8]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d102      	bne.n	800d78e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d788:	f06f 030f 	mvn.w	r3, #15
 800d78c:	e101      	b.n	800d992 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d78e:	68fa      	ldr	r2, [r7, #12]
 800d790:	2101      	movs	r1, #1
 800d792:	68b8      	ldr	r0, [r7, #8]
 800d794:	f7ff fb60 	bl	800ce58 <etharp_find_entry>
 800d798:	4603      	mov	r3, r0
 800d79a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800d79c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	da02      	bge.n	800d7aa <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800d7a4:	8a7b      	ldrh	r3, [r7, #18]
 800d7a6:	b25b      	sxtb	r3, r3
 800d7a8:	e0f3      	b.n	800d992 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800d7aa:	8a7b      	ldrh	r3, [r7, #18]
 800d7ac:	2b7e      	cmp	r3, #126	; 0x7e
 800d7ae:	d906      	bls.n	800d7be <etharp_query+0x7e>
 800d7b0:	4b7a      	ldr	r3, [pc, #488]	; (800d99c <etharp_query+0x25c>)
 800d7b2:	f240 32c1 	movw	r2, #961	; 0x3c1
 800d7b6:	497a      	ldr	r1, [pc, #488]	; (800d9a0 <etharp_query+0x260>)
 800d7b8:	487a      	ldr	r0, [pc, #488]	; (800d9a4 <etharp_query+0x264>)
 800d7ba:	f001 fd95 	bl	800f2e8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800d7be:	8a7b      	ldrh	r3, [r7, #18]
 800d7c0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800d7c2:	7c7a      	ldrb	r2, [r7, #17]
 800d7c4:	4978      	ldr	r1, [pc, #480]	; (800d9a8 <etharp_query+0x268>)
 800d7c6:	4613      	mov	r3, r2
 800d7c8:	005b      	lsls	r3, r3, #1
 800d7ca:	4413      	add	r3, r2
 800d7cc:	00db      	lsls	r3, r3, #3
 800d7ce:	440b      	add	r3, r1
 800d7d0:	3314      	adds	r3, #20
 800d7d2:	781b      	ldrb	r3, [r3, #0]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d115      	bne.n	800d804 <etharp_query+0xc4>
    is_new_entry = 1;
 800d7d8:	2301      	movs	r3, #1
 800d7da:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800d7dc:	7c7a      	ldrb	r2, [r7, #17]
 800d7de:	4972      	ldr	r1, [pc, #456]	; (800d9a8 <etharp_query+0x268>)
 800d7e0:	4613      	mov	r3, r2
 800d7e2:	005b      	lsls	r3, r3, #1
 800d7e4:	4413      	add	r3, r2
 800d7e6:	00db      	lsls	r3, r3, #3
 800d7e8:	440b      	add	r3, r1
 800d7ea:	3314      	adds	r3, #20
 800d7ec:	2201      	movs	r2, #1
 800d7ee:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800d7f0:	7c7a      	ldrb	r2, [r7, #17]
 800d7f2:	496d      	ldr	r1, [pc, #436]	; (800d9a8 <etharp_query+0x268>)
 800d7f4:	4613      	mov	r3, r2
 800d7f6:	005b      	lsls	r3, r3, #1
 800d7f8:	4413      	add	r3, r2
 800d7fa:	00db      	lsls	r3, r3, #3
 800d7fc:	440b      	add	r3, r1
 800d7fe:	3308      	adds	r3, #8
 800d800:	68fa      	ldr	r2, [r7, #12]
 800d802:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800d804:	7c7a      	ldrb	r2, [r7, #17]
 800d806:	4968      	ldr	r1, [pc, #416]	; (800d9a8 <etharp_query+0x268>)
 800d808:	4613      	mov	r3, r2
 800d80a:	005b      	lsls	r3, r3, #1
 800d80c:	4413      	add	r3, r2
 800d80e:	00db      	lsls	r3, r3, #3
 800d810:	440b      	add	r3, r1
 800d812:	3314      	adds	r3, #20
 800d814:	781b      	ldrb	r3, [r3, #0]
 800d816:	2b01      	cmp	r3, #1
 800d818:	d011      	beq.n	800d83e <etharp_query+0xfe>
 800d81a:	7c7a      	ldrb	r2, [r7, #17]
 800d81c:	4962      	ldr	r1, [pc, #392]	; (800d9a8 <etharp_query+0x268>)
 800d81e:	4613      	mov	r3, r2
 800d820:	005b      	lsls	r3, r3, #1
 800d822:	4413      	add	r3, r2
 800d824:	00db      	lsls	r3, r3, #3
 800d826:	440b      	add	r3, r1
 800d828:	3314      	adds	r3, #20
 800d82a:	781b      	ldrb	r3, [r3, #0]
 800d82c:	2b01      	cmp	r3, #1
 800d82e:	d806      	bhi.n	800d83e <etharp_query+0xfe>
 800d830:	4b5a      	ldr	r3, [pc, #360]	; (800d99c <etharp_query+0x25c>)
 800d832:	f240 32cd 	movw	r2, #973	; 0x3cd
 800d836:	495d      	ldr	r1, [pc, #372]	; (800d9ac <etharp_query+0x26c>)
 800d838:	485a      	ldr	r0, [pc, #360]	; (800d9a4 <etharp_query+0x264>)
 800d83a:	f001 fd55 	bl	800f2e8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800d83e:	6a3b      	ldr	r3, [r7, #32]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d102      	bne.n	800d84a <etharp_query+0x10a>
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d10c      	bne.n	800d864 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800d84a:	68b9      	ldr	r1, [r7, #8]
 800d84c:	68f8      	ldr	r0, [r7, #12]
 800d84e:	f000 f963 	bl	800db18 <etharp_request>
 800d852:	4603      	mov	r3, r0
 800d854:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d102      	bne.n	800d864 <etharp_query+0x124>
      return result;
 800d85e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d862:	e096      	b.n	800d992 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d106      	bne.n	800d878 <etharp_query+0x138>
 800d86a:	4b4c      	ldr	r3, [pc, #304]	; (800d99c <etharp_query+0x25c>)
 800d86c:	f240 32e1 	movw	r2, #993	; 0x3e1
 800d870:	494f      	ldr	r1, [pc, #316]	; (800d9b0 <etharp_query+0x270>)
 800d872:	484c      	ldr	r0, [pc, #304]	; (800d9a4 <etharp_query+0x264>)
 800d874:	f001 fd38 	bl	800f2e8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d878:	7c7a      	ldrb	r2, [r7, #17]
 800d87a:	494b      	ldr	r1, [pc, #300]	; (800d9a8 <etharp_query+0x268>)
 800d87c:	4613      	mov	r3, r2
 800d87e:	005b      	lsls	r3, r3, #1
 800d880:	4413      	add	r3, r2
 800d882:	00db      	lsls	r3, r3, #3
 800d884:	440b      	add	r3, r1
 800d886:	3314      	adds	r3, #20
 800d888:	781b      	ldrb	r3, [r3, #0]
 800d88a:	2b01      	cmp	r3, #1
 800d88c:	d917      	bls.n	800d8be <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800d88e:	4a49      	ldr	r2, [pc, #292]	; (800d9b4 <etharp_query+0x274>)
 800d890:	7c7b      	ldrb	r3, [r7, #17]
 800d892:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d894:	7c7a      	ldrb	r2, [r7, #17]
 800d896:	4613      	mov	r3, r2
 800d898:	005b      	lsls	r3, r3, #1
 800d89a:	4413      	add	r3, r2
 800d89c:	00db      	lsls	r3, r3, #3
 800d89e:	3308      	adds	r3, #8
 800d8a0:	4a41      	ldr	r2, [pc, #260]	; (800d9a8 <etharp_query+0x268>)
 800d8a2:	4413      	add	r3, r2
 800d8a4:	3304      	adds	r3, #4
 800d8a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d8aa:	9200      	str	r2, [sp, #0]
 800d8ac:	697a      	ldr	r2, [r7, #20]
 800d8ae:	6879      	ldr	r1, [r7, #4]
 800d8b0:	68f8      	ldr	r0, [r7, #12]
 800d8b2:	f001 fc6f 	bl	800f194 <ethernet_output>
 800d8b6:	4603      	mov	r3, r0
 800d8b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d8bc:	e067      	b.n	800d98e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d8be:	7c7a      	ldrb	r2, [r7, #17]
 800d8c0:	4939      	ldr	r1, [pc, #228]	; (800d9a8 <etharp_query+0x268>)
 800d8c2:	4613      	mov	r3, r2
 800d8c4:	005b      	lsls	r3, r3, #1
 800d8c6:	4413      	add	r3, r2
 800d8c8:	00db      	lsls	r3, r3, #3
 800d8ca:	440b      	add	r3, r1
 800d8cc:	3314      	adds	r3, #20
 800d8ce:	781b      	ldrb	r3, [r3, #0]
 800d8d0:	2b01      	cmp	r3, #1
 800d8d2:	d15c      	bne.n	800d98e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d8dc:	e01c      	b.n	800d918 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d8de:	69fb      	ldr	r3, [r7, #28]
 800d8e0:	895a      	ldrh	r2, [r3, #10]
 800d8e2:	69fb      	ldr	r3, [r7, #28]
 800d8e4:	891b      	ldrh	r3, [r3, #8]
 800d8e6:	429a      	cmp	r2, r3
 800d8e8:	d10a      	bne.n	800d900 <etharp_query+0x1c0>
 800d8ea:	69fb      	ldr	r3, [r7, #28]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d006      	beq.n	800d900 <etharp_query+0x1c0>
 800d8f2:	4b2a      	ldr	r3, [pc, #168]	; (800d99c <etharp_query+0x25c>)
 800d8f4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800d8f8:	492f      	ldr	r1, [pc, #188]	; (800d9b8 <etharp_query+0x278>)
 800d8fa:	482a      	ldr	r0, [pc, #168]	; (800d9a4 <etharp_query+0x264>)
 800d8fc:	f001 fcf4 	bl	800f2e8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800d900:	69fb      	ldr	r3, [r7, #28]
 800d902:	7b1b      	ldrb	r3, [r3, #12]
 800d904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d002      	beq.n	800d912 <etharp_query+0x1d2>
        copy_needed = 1;
 800d90c:	2301      	movs	r3, #1
 800d90e:	61bb      	str	r3, [r7, #24]
        break;
 800d910:	e005      	b.n	800d91e <etharp_query+0x1de>
      }
      p = p->next;
 800d912:	69fb      	ldr	r3, [r7, #28]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d918:	69fb      	ldr	r3, [r7, #28]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d1df      	bne.n	800d8de <etharp_query+0x19e>
    }
    if (copy_needed) {
 800d91e:	69bb      	ldr	r3, [r7, #24]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d007      	beq.n	800d934 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800d924:	687a      	ldr	r2, [r7, #4]
 800d926:	f44f 7120 	mov.w	r1, #640	; 0x280
 800d92a:	200e      	movs	r0, #14
 800d92c:	f7f8 fe2e 	bl	800658c <pbuf_clone>
 800d930:	61f8      	str	r0, [r7, #28]
 800d932:	e004      	b.n	800d93e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d938:	69f8      	ldr	r0, [r7, #28]
 800d93a:	f7f8 fc6b 	bl	8006214 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d93e:	69fb      	ldr	r3, [r7, #28]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d021      	beq.n	800d988 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d944:	7c7a      	ldrb	r2, [r7, #17]
 800d946:	4918      	ldr	r1, [pc, #96]	; (800d9a8 <etharp_query+0x268>)
 800d948:	4613      	mov	r3, r2
 800d94a:	005b      	lsls	r3, r3, #1
 800d94c:	4413      	add	r3, r2
 800d94e:	00db      	lsls	r3, r3, #3
 800d950:	440b      	add	r3, r1
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d00a      	beq.n	800d96e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800d958:	7c7a      	ldrb	r2, [r7, #17]
 800d95a:	4913      	ldr	r1, [pc, #76]	; (800d9a8 <etharp_query+0x268>)
 800d95c:	4613      	mov	r3, r2
 800d95e:	005b      	lsls	r3, r3, #1
 800d960:	4413      	add	r3, r2
 800d962:	00db      	lsls	r3, r3, #3
 800d964:	440b      	add	r3, r1
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	4618      	mov	r0, r3
 800d96a:	f7f8 fbb3 	bl	80060d4 <pbuf_free>
      }
      arp_table[i].q = p;
 800d96e:	7c7a      	ldrb	r2, [r7, #17]
 800d970:	490d      	ldr	r1, [pc, #52]	; (800d9a8 <etharp_query+0x268>)
 800d972:	4613      	mov	r3, r2
 800d974:	005b      	lsls	r3, r3, #1
 800d976:	4413      	add	r3, r2
 800d978:	00db      	lsls	r3, r3, #3
 800d97a:	440b      	add	r3, r1
 800d97c:	69fa      	ldr	r2, [r7, #28]
 800d97e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d980:	2300      	movs	r3, #0
 800d982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d986:	e002      	b.n	800d98e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d988:	23ff      	movs	r3, #255	; 0xff
 800d98a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800d98e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d992:	4618      	mov	r0, r3
 800d994:	3728      	adds	r7, #40	; 0x28
 800d996:	46bd      	mov	sp, r7
 800d998:	bd80      	pop	{r7, pc}
 800d99a:	bf00      	nop
 800d99c:	08012ce0 	.word	0x08012ce0
 800d9a0:	08012e8c 	.word	0x08012e8c
 800d9a4:	08012d58 	.word	0x08012d58
 800d9a8:	2000056c 	.word	0x2000056c
 800d9ac:	08012e9c 	.word	0x08012e9c
 800d9b0:	08012e80 	.word	0x08012e80
 800d9b4:	2000065c 	.word	0x2000065c
 800d9b8:	08012ec4 	.word	0x08012ec4

0800d9bc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b08a      	sub	sp, #40	; 0x28
 800d9c0:	af02      	add	r7, sp, #8
 800d9c2:	60f8      	str	r0, [r7, #12]
 800d9c4:	60b9      	str	r1, [r7, #8]
 800d9c6:	607a      	str	r2, [r7, #4]
 800d9c8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d106      	bne.n	800d9e2 <etharp_raw+0x26>
 800d9d4:	4b3a      	ldr	r3, [pc, #232]	; (800dac0 <etharp_raw+0x104>)
 800d9d6:	f240 4257 	movw	r2, #1111	; 0x457
 800d9da:	493a      	ldr	r1, [pc, #232]	; (800dac4 <etharp_raw+0x108>)
 800d9dc:	483a      	ldr	r0, [pc, #232]	; (800dac8 <etharp_raw+0x10c>)
 800d9de:	f001 fc83 	bl	800f2e8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d9e2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d9e6:	211c      	movs	r1, #28
 800d9e8:	200e      	movs	r0, #14
 800d9ea:	f7f8 f88f 	bl	8005b0c <pbuf_alloc>
 800d9ee:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d9f0:	69bb      	ldr	r3, [r7, #24]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d102      	bne.n	800d9fc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d9f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d9fa:	e05d      	b.n	800dab8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d9fc:	69bb      	ldr	r3, [r7, #24]
 800d9fe:	895b      	ldrh	r3, [r3, #10]
 800da00:	2b1b      	cmp	r3, #27
 800da02:	d806      	bhi.n	800da12 <etharp_raw+0x56>
 800da04:	4b2e      	ldr	r3, [pc, #184]	; (800dac0 <etharp_raw+0x104>)
 800da06:	f240 4262 	movw	r2, #1122	; 0x462
 800da0a:	4930      	ldr	r1, [pc, #192]	; (800dacc <etharp_raw+0x110>)
 800da0c:	482e      	ldr	r0, [pc, #184]	; (800dac8 <etharp_raw+0x10c>)
 800da0e:	f001 fc6b 	bl	800f2e8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800da12:	69bb      	ldr	r3, [r7, #24]
 800da14:	685b      	ldr	r3, [r3, #4]
 800da16:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800da18:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800da1a:	4618      	mov	r0, r3
 800da1c:	f7f7 f83c 	bl	8004a98 <lwip_htons>
 800da20:	4603      	mov	r3, r0
 800da22:	461a      	mov	r2, r3
 800da24:	697b      	ldr	r3, [r7, #20]
 800da26:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800da2e:	2b06      	cmp	r3, #6
 800da30:	d006      	beq.n	800da40 <etharp_raw+0x84>
 800da32:	4b23      	ldr	r3, [pc, #140]	; (800dac0 <etharp_raw+0x104>)
 800da34:	f240 4269 	movw	r2, #1129	; 0x469
 800da38:	4925      	ldr	r1, [pc, #148]	; (800dad0 <etharp_raw+0x114>)
 800da3a:	4823      	ldr	r0, [pc, #140]	; (800dac8 <etharp_raw+0x10c>)
 800da3c:	f001 fc54 	bl	800f2e8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800da40:	697b      	ldr	r3, [r7, #20]
 800da42:	3308      	adds	r3, #8
 800da44:	2206      	movs	r2, #6
 800da46:	6839      	ldr	r1, [r7, #0]
 800da48:	4618      	mov	r0, r3
 800da4a:	f001 fc1d 	bl	800f288 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800da4e:	697b      	ldr	r3, [r7, #20]
 800da50:	3312      	adds	r3, #18
 800da52:	2206      	movs	r2, #6
 800da54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800da56:	4618      	mov	r0, r3
 800da58:	f001 fc16 	bl	800f288 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800da5c:	697b      	ldr	r3, [r7, #20]
 800da5e:	330e      	adds	r3, #14
 800da60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da62:	6812      	ldr	r2, [r2, #0]
 800da64:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800da66:	697b      	ldr	r3, [r7, #20]
 800da68:	3318      	adds	r3, #24
 800da6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da6c:	6812      	ldr	r2, [r2, #0]
 800da6e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800da70:	697b      	ldr	r3, [r7, #20]
 800da72:	2200      	movs	r2, #0
 800da74:	701a      	strb	r2, [r3, #0]
 800da76:	2200      	movs	r2, #0
 800da78:	f042 0201 	orr.w	r2, r2, #1
 800da7c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800da7e:	697b      	ldr	r3, [r7, #20]
 800da80:	2200      	movs	r2, #0
 800da82:	f042 0208 	orr.w	r2, r2, #8
 800da86:	709a      	strb	r2, [r3, #2]
 800da88:	2200      	movs	r2, #0
 800da8a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	2206      	movs	r2, #6
 800da90:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800da92:	697b      	ldr	r3, [r7, #20]
 800da94:	2204      	movs	r2, #4
 800da96:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800da98:	f640 0306 	movw	r3, #2054	; 0x806
 800da9c:	9300      	str	r3, [sp, #0]
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	68ba      	ldr	r2, [r7, #8]
 800daa2:	69b9      	ldr	r1, [r7, #24]
 800daa4:	68f8      	ldr	r0, [r7, #12]
 800daa6:	f001 fb75 	bl	800f194 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800daaa:	69b8      	ldr	r0, [r7, #24]
 800daac:	f7f8 fb12 	bl	80060d4 <pbuf_free>
  p = NULL;
 800dab0:	2300      	movs	r3, #0
 800dab2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800dab4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800dab8:	4618      	mov	r0, r3
 800daba:	3720      	adds	r7, #32
 800dabc:	46bd      	mov	sp, r7
 800dabe:	bd80      	pop	{r7, pc}
 800dac0:	08012ce0 	.word	0x08012ce0
 800dac4:	08012e30 	.word	0x08012e30
 800dac8:	08012d58 	.word	0x08012d58
 800dacc:	08012ee0 	.word	0x08012ee0
 800dad0:	08012f14 	.word	0x08012f14

0800dad4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b088      	sub	sp, #32
 800dad8:	af04      	add	r7, sp, #16
 800dada:	60f8      	str	r0, [r7, #12]
 800dadc:	60b9      	str	r1, [r7, #8]
 800dade:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800daf0:	2201      	movs	r2, #1
 800daf2:	9203      	str	r2, [sp, #12]
 800daf4:	68ba      	ldr	r2, [r7, #8]
 800daf6:	9202      	str	r2, [sp, #8]
 800daf8:	4a06      	ldr	r2, [pc, #24]	; (800db14 <etharp_request_dst+0x40>)
 800dafa:	9201      	str	r2, [sp, #4]
 800dafc:	9300      	str	r3, [sp, #0]
 800dafe:	4603      	mov	r3, r0
 800db00:	687a      	ldr	r2, [r7, #4]
 800db02:	68f8      	ldr	r0, [r7, #12]
 800db04:	f7ff ff5a 	bl	800d9bc <etharp_raw>
 800db08:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800db0a:	4618      	mov	r0, r3
 800db0c:	3710      	adds	r7, #16
 800db0e:	46bd      	mov	sp, r7
 800db10:	bd80      	pop	{r7, pc}
 800db12:	bf00      	nop
 800db14:	08014320 	.word	0x08014320

0800db18 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b082      	sub	sp, #8
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
 800db20:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800db22:	4a05      	ldr	r2, [pc, #20]	; (800db38 <etharp_request+0x20>)
 800db24:	6839      	ldr	r1, [r7, #0]
 800db26:	6878      	ldr	r0, [r7, #4]
 800db28:	f7ff ffd4 	bl	800dad4 <etharp_request_dst>
 800db2c:	4603      	mov	r3, r0
}
 800db2e:	4618      	mov	r0, r3
 800db30:	3708      	adds	r7, #8
 800db32:	46bd      	mov	sp, r7
 800db34:	bd80      	pop	{r7, pc}
 800db36:	bf00      	nop
 800db38:	08014318 	.word	0x08014318

0800db3c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b08e      	sub	sp, #56	; 0x38
 800db40:	af04      	add	r7, sp, #16
 800db42:	6078      	str	r0, [r7, #4]
 800db44:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800db46:	4b79      	ldr	r3, [pc, #484]	; (800dd2c <icmp_input+0x1f0>)
 800db48:	689b      	ldr	r3, [r3, #8]
 800db4a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800db4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db4e:	781b      	ldrb	r3, [r3, #0]
 800db50:	f003 030f 	and.w	r3, r3, #15
 800db54:	b2db      	uxtb	r3, r3
 800db56:	009b      	lsls	r3, r3, #2
 800db58:	b2db      	uxtb	r3, r3
 800db5a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800db5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800db5e:	2b13      	cmp	r3, #19
 800db60:	f240 80cd 	bls.w	800dcfe <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	895b      	ldrh	r3, [r3, #10]
 800db68:	2b03      	cmp	r3, #3
 800db6a:	f240 80ca 	bls.w	800dd02 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	685b      	ldr	r3, [r3, #4]
 800db72:	781b      	ldrb	r3, [r3, #0]
 800db74:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800db78:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	f000 80b7 	beq.w	800dcf0 <icmp_input+0x1b4>
 800db82:	2b08      	cmp	r3, #8
 800db84:	f040 80b7 	bne.w	800dcf6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800db88:	4b69      	ldr	r3, [pc, #420]	; (800dd30 <icmp_input+0x1f4>)
 800db8a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800db8c:	4b67      	ldr	r3, [pc, #412]	; (800dd2c <icmp_input+0x1f0>)
 800db8e:	695b      	ldr	r3, [r3, #20]
 800db90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800db94:	2be0      	cmp	r3, #224	; 0xe0
 800db96:	f000 80bb 	beq.w	800dd10 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800db9a:	4b64      	ldr	r3, [pc, #400]	; (800dd2c <icmp_input+0x1f0>)
 800db9c:	695b      	ldr	r3, [r3, #20]
 800db9e:	4a63      	ldr	r2, [pc, #396]	; (800dd2c <icmp_input+0x1f0>)
 800dba0:	6812      	ldr	r2, [r2, #0]
 800dba2:	4611      	mov	r1, r2
 800dba4:	4618      	mov	r0, r3
 800dba6:	f000 fbed 	bl	800e384 <ip4_addr_isbroadcast_u32>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	f040 80b1 	bne.w	800dd14 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	891b      	ldrh	r3, [r3, #8]
 800dbb6:	2b07      	cmp	r3, #7
 800dbb8:	f240 80a5 	bls.w	800dd06 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800dbbc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dbbe:	330e      	adds	r3, #14
 800dbc0:	4619      	mov	r1, r3
 800dbc2:	6878      	ldr	r0, [r7, #4]
 800dbc4:	f7f8 f9f0 	bl	8005fa8 <pbuf_add_header>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d04b      	beq.n	800dc66 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	891a      	ldrh	r2, [r3, #8]
 800dbd2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dbd4:	4413      	add	r3, r2
 800dbd6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	891b      	ldrh	r3, [r3, #8]
 800dbdc:	8b7a      	ldrh	r2, [r7, #26]
 800dbde:	429a      	cmp	r2, r3
 800dbe0:	f0c0 809a 	bcc.w	800dd18 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800dbe4:	8b7b      	ldrh	r3, [r7, #26]
 800dbe6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dbea:	4619      	mov	r1, r3
 800dbec:	200e      	movs	r0, #14
 800dbee:	f7f7 ff8d 	bl	8005b0c <pbuf_alloc>
 800dbf2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800dbf4:	697b      	ldr	r3, [r7, #20]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	f000 8090 	beq.w	800dd1c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800dbfc:	697b      	ldr	r3, [r7, #20]
 800dbfe:	895b      	ldrh	r3, [r3, #10]
 800dc00:	461a      	mov	r2, r3
 800dc02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dc04:	3308      	adds	r3, #8
 800dc06:	429a      	cmp	r2, r3
 800dc08:	d203      	bcs.n	800dc12 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800dc0a:	6978      	ldr	r0, [r7, #20]
 800dc0c:	f7f8 fa62 	bl	80060d4 <pbuf_free>
          goto icmperr;
 800dc10:	e085      	b.n	800dd1e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800dc12:	697b      	ldr	r3, [r7, #20]
 800dc14:	685b      	ldr	r3, [r3, #4]
 800dc16:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800dc18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	f001 fb34 	bl	800f288 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800dc20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dc22:	4619      	mov	r1, r3
 800dc24:	6978      	ldr	r0, [r7, #20]
 800dc26:	f7f8 f9cf 	bl	8005fc8 <pbuf_remove_header>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d009      	beq.n	800dc44 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800dc30:	4b40      	ldr	r3, [pc, #256]	; (800dd34 <icmp_input+0x1f8>)
 800dc32:	22b6      	movs	r2, #182	; 0xb6
 800dc34:	4940      	ldr	r1, [pc, #256]	; (800dd38 <icmp_input+0x1fc>)
 800dc36:	4841      	ldr	r0, [pc, #260]	; (800dd3c <icmp_input+0x200>)
 800dc38:	f001 fb56 	bl	800f2e8 <iprintf>
          pbuf_free(r);
 800dc3c:	6978      	ldr	r0, [r7, #20]
 800dc3e:	f7f8 fa49 	bl	80060d4 <pbuf_free>
          goto icmperr;
 800dc42:	e06c      	b.n	800dd1e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800dc44:	6879      	ldr	r1, [r7, #4]
 800dc46:	6978      	ldr	r0, [r7, #20]
 800dc48:	f7f8 fb5c 	bl	8006304 <pbuf_copy>
 800dc4c:	4603      	mov	r3, r0
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d003      	beq.n	800dc5a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800dc52:	6978      	ldr	r0, [r7, #20]
 800dc54:	f7f8 fa3e 	bl	80060d4 <pbuf_free>
          goto icmperr;
 800dc58:	e061      	b.n	800dd1e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	f7f8 fa3a 	bl	80060d4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800dc60:	697b      	ldr	r3, [r7, #20]
 800dc62:	607b      	str	r3, [r7, #4]
 800dc64:	e00f      	b.n	800dc86 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800dc66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dc68:	330e      	adds	r3, #14
 800dc6a:	4619      	mov	r1, r3
 800dc6c:	6878      	ldr	r0, [r7, #4]
 800dc6e:	f7f8 f9ab 	bl	8005fc8 <pbuf_remove_header>
 800dc72:	4603      	mov	r3, r0
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d006      	beq.n	800dc86 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800dc78:	4b2e      	ldr	r3, [pc, #184]	; (800dd34 <icmp_input+0x1f8>)
 800dc7a:	22c7      	movs	r2, #199	; 0xc7
 800dc7c:	4930      	ldr	r1, [pc, #192]	; (800dd40 <icmp_input+0x204>)
 800dc7e:	482f      	ldr	r0, [pc, #188]	; (800dd3c <icmp_input+0x200>)
 800dc80:	f001 fb32 	bl	800f2e8 <iprintf>
          goto icmperr;
 800dc84:	e04b      	b.n	800dd1e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	685b      	ldr	r3, [r3, #4]
 800dc8a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800dc8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dc8e:	4619      	mov	r1, r3
 800dc90:	6878      	ldr	r0, [r7, #4]
 800dc92:	f7f8 f989 	bl	8005fa8 <pbuf_add_header>
 800dc96:	4603      	mov	r3, r0
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d12b      	bne.n	800dcf4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	685b      	ldr	r3, [r3, #4]
 800dca0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800dca2:	69fb      	ldr	r3, [r7, #28]
 800dca4:	681a      	ldr	r2, [r3, #0]
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800dcaa:	4b20      	ldr	r3, [pc, #128]	; (800dd2c <icmp_input+0x1f0>)
 800dcac:	691a      	ldr	r2, [r3, #16]
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800dcb2:	693b      	ldr	r3, [r7, #16]
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800dcb8:	693b      	ldr	r3, [r7, #16]
 800dcba:	2200      	movs	r2, #0
 800dcbc:	709a      	strb	r2, [r3, #2]
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	22ff      	movs	r2, #255	; 0xff
 800dcc6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	2200      	movs	r2, #0
 800dccc:	729a      	strb	r2, [r3, #10]
 800dcce:	2200      	movs	r2, #0
 800dcd0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	9302      	str	r3, [sp, #8]
 800dcd6:	2301      	movs	r3, #1
 800dcd8:	9301      	str	r3, [sp, #4]
 800dcda:	2300      	movs	r3, #0
 800dcdc:	9300      	str	r3, [sp, #0]
 800dcde:	23ff      	movs	r3, #255	; 0xff
 800dce0:	2200      	movs	r2, #0
 800dce2:	69f9      	ldr	r1, [r7, #28]
 800dce4:	6878      	ldr	r0, [r7, #4]
 800dce6:	f000 fa75 	bl	800e1d4 <ip4_output_if>
 800dcea:	4603      	mov	r3, r0
 800dcec:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800dcee:	e001      	b.n	800dcf4 <icmp_input+0x1b8>
      break;
 800dcf0:	bf00      	nop
 800dcf2:	e000      	b.n	800dcf6 <icmp_input+0x1ba>
      break;
 800dcf4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800dcf6:	6878      	ldr	r0, [r7, #4]
 800dcf8:	f7f8 f9ec 	bl	80060d4 <pbuf_free>
  return;
 800dcfc:	e013      	b.n	800dd26 <icmp_input+0x1ea>
    goto lenerr;
 800dcfe:	bf00      	nop
 800dd00:	e002      	b.n	800dd08 <icmp_input+0x1cc>
    goto lenerr;
 800dd02:	bf00      	nop
 800dd04:	e000      	b.n	800dd08 <icmp_input+0x1cc>
        goto lenerr;
 800dd06:	bf00      	nop
lenerr:
  pbuf_free(p);
 800dd08:	6878      	ldr	r0, [r7, #4]
 800dd0a:	f7f8 f9e3 	bl	80060d4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800dd0e:	e00a      	b.n	800dd26 <icmp_input+0x1ea>
        goto icmperr;
 800dd10:	bf00      	nop
 800dd12:	e004      	b.n	800dd1e <icmp_input+0x1e2>
        goto icmperr;
 800dd14:	bf00      	nop
 800dd16:	e002      	b.n	800dd1e <icmp_input+0x1e2>
          goto icmperr;
 800dd18:	bf00      	nop
 800dd1a:	e000      	b.n	800dd1e <icmp_input+0x1e2>
          goto icmperr;
 800dd1c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800dd1e:	6878      	ldr	r0, [r7, #4]
 800dd20:	f7f8 f9d8 	bl	80060d4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800dd24:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800dd26:	3728      	adds	r7, #40	; 0x28
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	bd80      	pop	{r7, pc}
 800dd2c:	200037a8 	.word	0x200037a8
 800dd30:	200037bc 	.word	0x200037bc
 800dd34:	08012f58 	.word	0x08012f58
 800dd38:	08012f90 	.word	0x08012f90
 800dd3c:	08012fc8 	.word	0x08012fc8
 800dd40:	08012ff0 	.word	0x08012ff0

0800dd44 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b082      	sub	sp, #8
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
 800dd4c:	460b      	mov	r3, r1
 800dd4e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800dd50:	78fb      	ldrb	r3, [r7, #3]
 800dd52:	461a      	mov	r2, r3
 800dd54:	2103      	movs	r1, #3
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f000 f814 	bl	800dd84 <icmp_send_response>
}
 800dd5c:	bf00      	nop
 800dd5e:	3708      	adds	r7, #8
 800dd60:	46bd      	mov	sp, r7
 800dd62:	bd80      	pop	{r7, pc}

0800dd64 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b082      	sub	sp, #8
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
 800dd6c:	460b      	mov	r3, r1
 800dd6e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800dd70:	78fb      	ldrb	r3, [r7, #3]
 800dd72:	461a      	mov	r2, r3
 800dd74:	210b      	movs	r1, #11
 800dd76:	6878      	ldr	r0, [r7, #4]
 800dd78:	f000 f804 	bl	800dd84 <icmp_send_response>
}
 800dd7c:	bf00      	nop
 800dd7e:	3708      	adds	r7, #8
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}

0800dd84 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b08c      	sub	sp, #48	; 0x30
 800dd88:	af04      	add	r7, sp, #16
 800dd8a:	6078      	str	r0, [r7, #4]
 800dd8c:	460b      	mov	r3, r1
 800dd8e:	70fb      	strb	r3, [r7, #3]
 800dd90:	4613      	mov	r3, r2
 800dd92:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800dd94:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dd98:	2124      	movs	r1, #36	; 0x24
 800dd9a:	2022      	movs	r0, #34	; 0x22
 800dd9c:	f7f7 feb6 	bl	8005b0c <pbuf_alloc>
 800dda0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800dda2:	69fb      	ldr	r3, [r7, #28]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d04c      	beq.n	800de42 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800dda8:	69fb      	ldr	r3, [r7, #28]
 800ddaa:	895b      	ldrh	r3, [r3, #10]
 800ddac:	2b23      	cmp	r3, #35	; 0x23
 800ddae:	d806      	bhi.n	800ddbe <icmp_send_response+0x3a>
 800ddb0:	4b26      	ldr	r3, [pc, #152]	; (800de4c <icmp_send_response+0xc8>)
 800ddb2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800ddb6:	4926      	ldr	r1, [pc, #152]	; (800de50 <icmp_send_response+0xcc>)
 800ddb8:	4826      	ldr	r0, [pc, #152]	; (800de54 <icmp_send_response+0xd0>)
 800ddba:	f001 fa95 	bl	800f2e8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	685b      	ldr	r3, [r3, #4]
 800ddc2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800ddc4:	69fb      	ldr	r3, [r7, #28]
 800ddc6:	685b      	ldr	r3, [r3, #4]
 800ddc8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800ddca:	697b      	ldr	r3, [r7, #20]
 800ddcc:	78fa      	ldrb	r2, [r7, #3]
 800ddce:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800ddd0:	697b      	ldr	r3, [r7, #20]
 800ddd2:	78ba      	ldrb	r2, [r7, #2]
 800ddd4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800ddd6:	697b      	ldr	r3, [r7, #20]
 800ddd8:	2200      	movs	r2, #0
 800ddda:	711a      	strb	r2, [r3, #4]
 800dddc:	2200      	movs	r2, #0
 800ddde:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800dde0:	697b      	ldr	r3, [r7, #20]
 800dde2:	2200      	movs	r2, #0
 800dde4:	719a      	strb	r2, [r3, #6]
 800dde6:	2200      	movs	r2, #0
 800dde8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800ddea:	69fb      	ldr	r3, [r7, #28]
 800ddec:	685b      	ldr	r3, [r3, #4]
 800ddee:	f103 0008 	add.w	r0, r3, #8
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	685b      	ldr	r3, [r3, #4]
 800ddf6:	221c      	movs	r2, #28
 800ddf8:	4619      	mov	r1, r3
 800ddfa:	f001 fa45 	bl	800f288 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800ddfe:	69bb      	ldr	r3, [r7, #24]
 800de00:	68db      	ldr	r3, [r3, #12]
 800de02:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800de04:	f107 030c 	add.w	r3, r7, #12
 800de08:	4618      	mov	r0, r3
 800de0a:	f000 f825 	bl	800de58 <ip4_route>
 800de0e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800de10:	693b      	ldr	r3, [r7, #16]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d011      	beq.n	800de3a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800de16:	697b      	ldr	r3, [r7, #20]
 800de18:	2200      	movs	r2, #0
 800de1a:	709a      	strb	r2, [r3, #2]
 800de1c:	2200      	movs	r2, #0
 800de1e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800de20:	f107 020c 	add.w	r2, r7, #12
 800de24:	693b      	ldr	r3, [r7, #16]
 800de26:	9302      	str	r3, [sp, #8]
 800de28:	2301      	movs	r3, #1
 800de2a:	9301      	str	r3, [sp, #4]
 800de2c:	2300      	movs	r3, #0
 800de2e:	9300      	str	r3, [sp, #0]
 800de30:	23ff      	movs	r3, #255	; 0xff
 800de32:	2100      	movs	r1, #0
 800de34:	69f8      	ldr	r0, [r7, #28]
 800de36:	f000 f9cd 	bl	800e1d4 <ip4_output_if>
  }
  pbuf_free(q);
 800de3a:	69f8      	ldr	r0, [r7, #28]
 800de3c:	f7f8 f94a 	bl	80060d4 <pbuf_free>
 800de40:	e000      	b.n	800de44 <icmp_send_response+0xc0>
    return;
 800de42:	bf00      	nop
}
 800de44:	3720      	adds	r7, #32
 800de46:	46bd      	mov	sp, r7
 800de48:	bd80      	pop	{r7, pc}
 800de4a:	bf00      	nop
 800de4c:	08012f58 	.word	0x08012f58
 800de50:	08013024 	.word	0x08013024
 800de54:	08012fc8 	.word	0x08012fc8

0800de58 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800de58:	b480      	push	{r7}
 800de5a:	b085      	sub	sp, #20
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800de60:	4b33      	ldr	r3, [pc, #204]	; (800df30 <ip4_route+0xd8>)
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	60fb      	str	r3, [r7, #12]
 800de66:	e036      	b.n	800ded6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800de6e:	f003 0301 	and.w	r3, r3, #1
 800de72:	b2db      	uxtb	r3, r3
 800de74:	2b00      	cmp	r3, #0
 800de76:	d02b      	beq.n	800ded0 <ip4_route+0x78>
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800de7e:	089b      	lsrs	r3, r3, #2
 800de80:	f003 0301 	and.w	r3, r3, #1
 800de84:	b2db      	uxtb	r3, r3
 800de86:	2b00      	cmp	r3, #0
 800de88:	d022      	beq.n	800ded0 <ip4_route+0x78>
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	3304      	adds	r3, #4
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d01d      	beq.n	800ded0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681a      	ldr	r2, [r3, #0]
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	3304      	adds	r3, #4
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	405a      	eors	r2, r3
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	3308      	adds	r3, #8
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	4013      	ands	r3, r2
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d101      	bne.n	800deb0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	e038      	b.n	800df22 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800deb6:	f003 0302 	and.w	r3, r3, #2
 800deba:	2b00      	cmp	r3, #0
 800debc:	d108      	bne.n	800ded0 <ip4_route+0x78>
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681a      	ldr	r2, [r3, #0]
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	330c      	adds	r3, #12
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	429a      	cmp	r2, r3
 800deca:	d101      	bne.n	800ded0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	e028      	b.n	800df22 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	60fb      	str	r3, [r7, #12]
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d1c5      	bne.n	800de68 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800dedc:	4b15      	ldr	r3, [pc, #84]	; (800df34 <ip4_route+0xdc>)
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d01a      	beq.n	800df1a <ip4_route+0xc2>
 800dee4:	4b13      	ldr	r3, [pc, #76]	; (800df34 <ip4_route+0xdc>)
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800deec:	f003 0301 	and.w	r3, r3, #1
 800def0:	2b00      	cmp	r3, #0
 800def2:	d012      	beq.n	800df1a <ip4_route+0xc2>
 800def4:	4b0f      	ldr	r3, [pc, #60]	; (800df34 <ip4_route+0xdc>)
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800defc:	f003 0304 	and.w	r3, r3, #4
 800df00:	2b00      	cmp	r3, #0
 800df02:	d00a      	beq.n	800df1a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800df04:	4b0b      	ldr	r3, [pc, #44]	; (800df34 <ip4_route+0xdc>)
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	3304      	adds	r3, #4
 800df0a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d004      	beq.n	800df1a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	b2db      	uxtb	r3, r3
 800df16:	2b7f      	cmp	r3, #127	; 0x7f
 800df18:	d101      	bne.n	800df1e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800df1a:	2300      	movs	r3, #0
 800df1c:	e001      	b.n	800df22 <ip4_route+0xca>
  }

  return netif_default;
 800df1e:	4b05      	ldr	r3, [pc, #20]	; (800df34 <ip4_route+0xdc>)
 800df20:	681b      	ldr	r3, [r3, #0]
}
 800df22:	4618      	mov	r0, r3
 800df24:	3714      	adds	r7, #20
 800df26:	46bd      	mov	sp, r7
 800df28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2c:	4770      	bx	lr
 800df2e:	bf00      	nop
 800df30:	20008e9c 	.word	0x20008e9c
 800df34:	20008ea0 	.word	0x20008ea0

0800df38 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b082      	sub	sp, #8
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df46:	f003 0301 	and.w	r3, r3, #1
 800df4a:	b2db      	uxtb	r3, r3
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d016      	beq.n	800df7e <ip4_input_accept+0x46>
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	3304      	adds	r3, #4
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d011      	beq.n	800df7e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800df5a:	4b0b      	ldr	r3, [pc, #44]	; (800df88 <ip4_input_accept+0x50>)
 800df5c:	695a      	ldr	r2, [r3, #20]
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	3304      	adds	r3, #4
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	429a      	cmp	r2, r3
 800df66:	d008      	beq.n	800df7a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800df68:	4b07      	ldr	r3, [pc, #28]	; (800df88 <ip4_input_accept+0x50>)
 800df6a:	695b      	ldr	r3, [r3, #20]
 800df6c:	6879      	ldr	r1, [r7, #4]
 800df6e:	4618      	mov	r0, r3
 800df70:	f000 fa08 	bl	800e384 <ip4_addr_isbroadcast_u32>
 800df74:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800df76:	2b00      	cmp	r3, #0
 800df78:	d001      	beq.n	800df7e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800df7a:	2301      	movs	r3, #1
 800df7c:	e000      	b.n	800df80 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800df7e:	2300      	movs	r3, #0
}
 800df80:	4618      	mov	r0, r3
 800df82:	3708      	adds	r7, #8
 800df84:	46bd      	mov	sp, r7
 800df86:	bd80      	pop	{r7, pc}
 800df88:	200037a8 	.word	0x200037a8

0800df8c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b086      	sub	sp, #24
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
 800df94:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	685b      	ldr	r3, [r3, #4]
 800df9a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800df9c:	697b      	ldr	r3, [r7, #20]
 800df9e:	781b      	ldrb	r3, [r3, #0]
 800dfa0:	091b      	lsrs	r3, r3, #4
 800dfa2:	b2db      	uxtb	r3, r3
 800dfa4:	2b04      	cmp	r3, #4
 800dfa6:	d004      	beq.n	800dfb2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800dfa8:	6878      	ldr	r0, [r7, #4]
 800dfaa:	f7f8 f893 	bl	80060d4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800dfae:	2300      	movs	r3, #0
 800dfb0:	e107      	b.n	800e1c2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	781b      	ldrb	r3, [r3, #0]
 800dfb6:	f003 030f 	and.w	r3, r3, #15
 800dfba:	b2db      	uxtb	r3, r3
 800dfbc:	009b      	lsls	r3, r3, #2
 800dfbe:	b2db      	uxtb	r3, r3
 800dfc0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800dfc2:	697b      	ldr	r3, [r7, #20]
 800dfc4:	885b      	ldrh	r3, [r3, #2]
 800dfc6:	b29b      	uxth	r3, r3
 800dfc8:	4618      	mov	r0, r3
 800dfca:	f7f6 fd65 	bl	8004a98 <lwip_htons>
 800dfce:	4603      	mov	r3, r0
 800dfd0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	891b      	ldrh	r3, [r3, #8]
 800dfd6:	89ba      	ldrh	r2, [r7, #12]
 800dfd8:	429a      	cmp	r2, r3
 800dfda:	d204      	bcs.n	800dfe6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800dfdc:	89bb      	ldrh	r3, [r7, #12]
 800dfde:	4619      	mov	r1, r3
 800dfe0:	6878      	ldr	r0, [r7, #4]
 800dfe2:	f7f7 fef1 	bl	8005dc8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	895b      	ldrh	r3, [r3, #10]
 800dfea:	89fa      	ldrh	r2, [r7, #14]
 800dfec:	429a      	cmp	r2, r3
 800dfee:	d807      	bhi.n	800e000 <ip4_input+0x74>
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	891b      	ldrh	r3, [r3, #8]
 800dff4:	89ba      	ldrh	r2, [r7, #12]
 800dff6:	429a      	cmp	r2, r3
 800dff8:	d802      	bhi.n	800e000 <ip4_input+0x74>
 800dffa:	89fb      	ldrh	r3, [r7, #14]
 800dffc:	2b13      	cmp	r3, #19
 800dffe:	d804      	bhi.n	800e00a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800e000:	6878      	ldr	r0, [r7, #4]
 800e002:	f7f8 f867 	bl	80060d4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800e006:	2300      	movs	r3, #0
 800e008:	e0db      	b.n	800e1c2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800e00a:	697b      	ldr	r3, [r7, #20]
 800e00c:	691b      	ldr	r3, [r3, #16]
 800e00e:	4a6f      	ldr	r2, [pc, #444]	; (800e1cc <ip4_input+0x240>)
 800e010:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800e012:	697b      	ldr	r3, [r7, #20]
 800e014:	68db      	ldr	r3, [r3, #12]
 800e016:	4a6d      	ldr	r2, [pc, #436]	; (800e1cc <ip4_input+0x240>)
 800e018:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e01a:	4b6c      	ldr	r3, [pc, #432]	; (800e1cc <ip4_input+0x240>)
 800e01c:	695b      	ldr	r3, [r3, #20]
 800e01e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e022:	2be0      	cmp	r3, #224	; 0xe0
 800e024:	d112      	bne.n	800e04c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e02c:	f003 0301 	and.w	r3, r3, #1
 800e030:	b2db      	uxtb	r3, r3
 800e032:	2b00      	cmp	r3, #0
 800e034:	d007      	beq.n	800e046 <ip4_input+0xba>
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	3304      	adds	r3, #4
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d002      	beq.n	800e046 <ip4_input+0xba>
      netif = inp;
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	613b      	str	r3, [r7, #16]
 800e044:	e02a      	b.n	800e09c <ip4_input+0x110>
    } else {
      netif = NULL;
 800e046:	2300      	movs	r3, #0
 800e048:	613b      	str	r3, [r7, #16]
 800e04a:	e027      	b.n	800e09c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800e04c:	6838      	ldr	r0, [r7, #0]
 800e04e:	f7ff ff73 	bl	800df38 <ip4_input_accept>
 800e052:	4603      	mov	r3, r0
 800e054:	2b00      	cmp	r3, #0
 800e056:	d002      	beq.n	800e05e <ip4_input+0xd2>
      netif = inp;
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	613b      	str	r3, [r7, #16]
 800e05c:	e01e      	b.n	800e09c <ip4_input+0x110>
    } else {
      netif = NULL;
 800e05e:	2300      	movs	r3, #0
 800e060:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800e062:	4b5a      	ldr	r3, [pc, #360]	; (800e1cc <ip4_input+0x240>)
 800e064:	695b      	ldr	r3, [r3, #20]
 800e066:	b2db      	uxtb	r3, r3
 800e068:	2b7f      	cmp	r3, #127	; 0x7f
 800e06a:	d017      	beq.n	800e09c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800e06c:	4b58      	ldr	r3, [pc, #352]	; (800e1d0 <ip4_input+0x244>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	613b      	str	r3, [r7, #16]
 800e072:	e00e      	b.n	800e092 <ip4_input+0x106>
          if (netif == inp) {
 800e074:	693a      	ldr	r2, [r7, #16]
 800e076:	683b      	ldr	r3, [r7, #0]
 800e078:	429a      	cmp	r2, r3
 800e07a:	d006      	beq.n	800e08a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800e07c:	6938      	ldr	r0, [r7, #16]
 800e07e:	f7ff ff5b 	bl	800df38 <ip4_input_accept>
 800e082:	4603      	mov	r3, r0
 800e084:	2b00      	cmp	r3, #0
 800e086:	d108      	bne.n	800e09a <ip4_input+0x10e>
 800e088:	e000      	b.n	800e08c <ip4_input+0x100>
            continue;
 800e08a:	bf00      	nop
        NETIF_FOREACH(netif) {
 800e08c:	693b      	ldr	r3, [r7, #16]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	613b      	str	r3, [r7, #16]
 800e092:	693b      	ldr	r3, [r7, #16]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d1ed      	bne.n	800e074 <ip4_input+0xe8>
 800e098:	e000      	b.n	800e09c <ip4_input+0x110>
            break;
 800e09a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e09c:	4b4b      	ldr	r3, [pc, #300]	; (800e1cc <ip4_input+0x240>)
 800e09e:	691b      	ldr	r3, [r3, #16]
 800e0a0:	6839      	ldr	r1, [r7, #0]
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f000 f96e 	bl	800e384 <ip4_addr_isbroadcast_u32>
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d105      	bne.n	800e0ba <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800e0ae:	4b47      	ldr	r3, [pc, #284]	; (800e1cc <ip4_input+0x240>)
 800e0b0:	691b      	ldr	r3, [r3, #16]
 800e0b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e0b6:	2be0      	cmp	r3, #224	; 0xe0
 800e0b8:	d104      	bne.n	800e0c4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800e0ba:	6878      	ldr	r0, [r7, #4]
 800e0bc:	f7f8 f80a 	bl	80060d4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	e07e      	b.n	800e1c2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800e0c4:	693b      	ldr	r3, [r7, #16]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d104      	bne.n	800e0d4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800e0ca:	6878      	ldr	r0, [r7, #4]
 800e0cc:	f7f8 f802 	bl	80060d4 <pbuf_free>
    return ERR_OK;
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	e076      	b.n	800e1c2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800e0d4:	697b      	ldr	r3, [r7, #20]
 800e0d6:	88db      	ldrh	r3, [r3, #6]
 800e0d8:	b29b      	uxth	r3, r3
 800e0da:	461a      	mov	r2, r3
 800e0dc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800e0e0:	4013      	ands	r3, r2
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d00b      	beq.n	800e0fe <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800e0e6:	6878      	ldr	r0, [r7, #4]
 800e0e8:	f000 fc92 	bl	800ea10 <ip4_reass>
 800e0ec:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d101      	bne.n	800e0f8 <ip4_input+0x16c>
      return ERR_OK;
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	e064      	b.n	800e1c2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	685b      	ldr	r3, [r3, #4]
 800e0fc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800e0fe:	4a33      	ldr	r2, [pc, #204]	; (800e1cc <ip4_input+0x240>)
 800e100:	693b      	ldr	r3, [r7, #16]
 800e102:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800e104:	4a31      	ldr	r2, [pc, #196]	; (800e1cc <ip4_input+0x240>)
 800e106:	683b      	ldr	r3, [r7, #0]
 800e108:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800e10a:	4a30      	ldr	r2, [pc, #192]	; (800e1cc <ip4_input+0x240>)
 800e10c:	697b      	ldr	r3, [r7, #20]
 800e10e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800e110:	697b      	ldr	r3, [r7, #20]
 800e112:	781b      	ldrb	r3, [r3, #0]
 800e114:	f003 030f 	and.w	r3, r3, #15
 800e118:	b2db      	uxtb	r3, r3
 800e11a:	009b      	lsls	r3, r3, #2
 800e11c:	b2db      	uxtb	r3, r3
 800e11e:	b29a      	uxth	r2, r3
 800e120:	4b2a      	ldr	r3, [pc, #168]	; (800e1cc <ip4_input+0x240>)
 800e122:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800e124:	89fb      	ldrh	r3, [r7, #14]
 800e126:	4619      	mov	r1, r3
 800e128:	6878      	ldr	r0, [r7, #4]
 800e12a:	f7f7 ff4d 	bl	8005fc8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800e12e:	697b      	ldr	r3, [r7, #20]
 800e130:	7a5b      	ldrb	r3, [r3, #9]
 800e132:	2b11      	cmp	r3, #17
 800e134:	d006      	beq.n	800e144 <ip4_input+0x1b8>
 800e136:	2b11      	cmp	r3, #17
 800e138:	dc13      	bgt.n	800e162 <ip4_input+0x1d6>
 800e13a:	2b01      	cmp	r3, #1
 800e13c:	d00c      	beq.n	800e158 <ip4_input+0x1cc>
 800e13e:	2b06      	cmp	r3, #6
 800e140:	d005      	beq.n	800e14e <ip4_input+0x1c2>
 800e142:	e00e      	b.n	800e162 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800e144:	6839      	ldr	r1, [r7, #0]
 800e146:	6878      	ldr	r0, [r7, #4]
 800e148:	f7fe fc68 	bl	800ca1c <udp_input>
        break;
 800e14c:	e026      	b.n	800e19c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800e14e:	6839      	ldr	r1, [r7, #0]
 800e150:	6878      	ldr	r0, [r7, #4]
 800e152:	f7fa f88d 	bl	8008270 <tcp_input>
        break;
 800e156:	e021      	b.n	800e19c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800e158:	6839      	ldr	r1, [r7, #0]
 800e15a:	6878      	ldr	r0, [r7, #4]
 800e15c:	f7ff fcee 	bl	800db3c <icmp_input>
        break;
 800e160:	e01c      	b.n	800e19c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e162:	4b1a      	ldr	r3, [pc, #104]	; (800e1cc <ip4_input+0x240>)
 800e164:	695b      	ldr	r3, [r3, #20]
 800e166:	6939      	ldr	r1, [r7, #16]
 800e168:	4618      	mov	r0, r3
 800e16a:	f000 f90b 	bl	800e384 <ip4_addr_isbroadcast_u32>
 800e16e:	4603      	mov	r3, r0
 800e170:	2b00      	cmp	r3, #0
 800e172:	d10f      	bne.n	800e194 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e174:	4b15      	ldr	r3, [pc, #84]	; (800e1cc <ip4_input+0x240>)
 800e176:	695b      	ldr	r3, [r3, #20]
 800e178:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e17c:	2be0      	cmp	r3, #224	; 0xe0
 800e17e:	d009      	beq.n	800e194 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800e180:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e184:	4619      	mov	r1, r3
 800e186:	6878      	ldr	r0, [r7, #4]
 800e188:	f7f7 ff91 	bl	80060ae <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800e18c:	2102      	movs	r1, #2
 800e18e:	6878      	ldr	r0, [r7, #4]
 800e190:	f7ff fdd8 	bl	800dd44 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800e194:	6878      	ldr	r0, [r7, #4]
 800e196:	f7f7 ff9d 	bl	80060d4 <pbuf_free>
        break;
 800e19a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800e19c:	4b0b      	ldr	r3, [pc, #44]	; (800e1cc <ip4_input+0x240>)
 800e19e:	2200      	movs	r2, #0
 800e1a0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800e1a2:	4b0a      	ldr	r3, [pc, #40]	; (800e1cc <ip4_input+0x240>)
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800e1a8:	4b08      	ldr	r3, [pc, #32]	; (800e1cc <ip4_input+0x240>)
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800e1ae:	4b07      	ldr	r3, [pc, #28]	; (800e1cc <ip4_input+0x240>)
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800e1b4:	4b05      	ldr	r3, [pc, #20]	; (800e1cc <ip4_input+0x240>)
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800e1ba:	4b04      	ldr	r3, [pc, #16]	; (800e1cc <ip4_input+0x240>)
 800e1bc:	2200      	movs	r2, #0
 800e1be:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800e1c0:	2300      	movs	r3, #0
}
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	3718      	adds	r7, #24
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}
 800e1ca:	bf00      	nop
 800e1cc:	200037a8 	.word	0x200037a8
 800e1d0:	20008e9c 	.word	0x20008e9c

0800e1d4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b08a      	sub	sp, #40	; 0x28
 800e1d8:	af04      	add	r7, sp, #16
 800e1da:	60f8      	str	r0, [r7, #12]
 800e1dc:	60b9      	str	r1, [r7, #8]
 800e1de:	607a      	str	r2, [r7, #4]
 800e1e0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800e1e2:	68bb      	ldr	r3, [r7, #8]
 800e1e4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d009      	beq.n	800e200 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800e1ec:	68bb      	ldr	r3, [r7, #8]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d003      	beq.n	800e1fa <ip4_output_if+0x26>
 800e1f2:	68bb      	ldr	r3, [r7, #8]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d102      	bne.n	800e200 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800e1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1fc:	3304      	adds	r3, #4
 800e1fe:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800e200:	78fa      	ldrb	r2, [r7, #3]
 800e202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e204:	9302      	str	r3, [sp, #8]
 800e206:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e20a:	9301      	str	r3, [sp, #4]
 800e20c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e210:	9300      	str	r3, [sp, #0]
 800e212:	4613      	mov	r3, r2
 800e214:	687a      	ldr	r2, [r7, #4]
 800e216:	6979      	ldr	r1, [r7, #20]
 800e218:	68f8      	ldr	r0, [r7, #12]
 800e21a:	f000 f805 	bl	800e228 <ip4_output_if_src>
 800e21e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800e220:	4618      	mov	r0, r3
 800e222:	3718      	adds	r7, #24
 800e224:	46bd      	mov	sp, r7
 800e226:	bd80      	pop	{r7, pc}

0800e228 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b088      	sub	sp, #32
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	60f8      	str	r0, [r7, #12]
 800e230:	60b9      	str	r1, [r7, #8]
 800e232:	607a      	str	r2, [r7, #4]
 800e234:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	7b9b      	ldrb	r3, [r3, #14]
 800e23a:	2b01      	cmp	r3, #1
 800e23c:	d006      	beq.n	800e24c <ip4_output_if_src+0x24>
 800e23e:	4b4b      	ldr	r3, [pc, #300]	; (800e36c <ip4_output_if_src+0x144>)
 800e240:	f44f 7255 	mov.w	r2, #852	; 0x354
 800e244:	494a      	ldr	r1, [pc, #296]	; (800e370 <ip4_output_if_src+0x148>)
 800e246:	484b      	ldr	r0, [pc, #300]	; (800e374 <ip4_output_if_src+0x14c>)
 800e248:	f001 f84e 	bl	800f2e8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d060      	beq.n	800e314 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800e252:	2314      	movs	r3, #20
 800e254:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800e256:	2114      	movs	r1, #20
 800e258:	68f8      	ldr	r0, [r7, #12]
 800e25a:	f7f7 fea5 	bl	8005fa8 <pbuf_add_header>
 800e25e:	4603      	mov	r3, r0
 800e260:	2b00      	cmp	r3, #0
 800e262:	d002      	beq.n	800e26a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e264:	f06f 0301 	mvn.w	r3, #1
 800e268:	e07c      	b.n	800e364 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	685b      	ldr	r3, [r3, #4]
 800e26e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	895b      	ldrh	r3, [r3, #10]
 800e274:	2b13      	cmp	r3, #19
 800e276:	d806      	bhi.n	800e286 <ip4_output_if_src+0x5e>
 800e278:	4b3c      	ldr	r3, [pc, #240]	; (800e36c <ip4_output_if_src+0x144>)
 800e27a:	f44f 7262 	mov.w	r2, #904	; 0x388
 800e27e:	493e      	ldr	r1, [pc, #248]	; (800e378 <ip4_output_if_src+0x150>)
 800e280:	483c      	ldr	r0, [pc, #240]	; (800e374 <ip4_output_if_src+0x14c>)
 800e282:	f001 f831 	bl	800f2e8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800e286:	69fb      	ldr	r3, [r7, #28]
 800e288:	78fa      	ldrb	r2, [r7, #3]
 800e28a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800e28c:	69fb      	ldr	r3, [r7, #28]
 800e28e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800e292:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681a      	ldr	r2, [r3, #0]
 800e298:	69fb      	ldr	r3, [r7, #28]
 800e29a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800e29c:	8b7b      	ldrh	r3, [r7, #26]
 800e29e:	089b      	lsrs	r3, r3, #2
 800e2a0:	b29b      	uxth	r3, r3
 800e2a2:	b2db      	uxtb	r3, r3
 800e2a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2a8:	b2da      	uxtb	r2, r3
 800e2aa:	69fb      	ldr	r3, [r7, #28]
 800e2ac:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800e2ae:	69fb      	ldr	r3, [r7, #28]
 800e2b0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e2b4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	891b      	ldrh	r3, [r3, #8]
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	f7f6 fbec 	bl	8004a98 <lwip_htons>
 800e2c0:	4603      	mov	r3, r0
 800e2c2:	461a      	mov	r2, r3
 800e2c4:	69fb      	ldr	r3, [r7, #28]
 800e2c6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800e2c8:	69fb      	ldr	r3, [r7, #28]
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	719a      	strb	r2, [r3, #6]
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800e2d2:	4b2a      	ldr	r3, [pc, #168]	; (800e37c <ip4_output_if_src+0x154>)
 800e2d4:	881b      	ldrh	r3, [r3, #0]
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	f7f6 fbde 	bl	8004a98 <lwip_htons>
 800e2dc:	4603      	mov	r3, r0
 800e2de:	461a      	mov	r2, r3
 800e2e0:	69fb      	ldr	r3, [r7, #28]
 800e2e2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800e2e4:	4b25      	ldr	r3, [pc, #148]	; (800e37c <ip4_output_if_src+0x154>)
 800e2e6:	881b      	ldrh	r3, [r3, #0]
 800e2e8:	3301      	adds	r3, #1
 800e2ea:	b29a      	uxth	r2, r3
 800e2ec:	4b23      	ldr	r3, [pc, #140]	; (800e37c <ip4_output_if_src+0x154>)
 800e2ee:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800e2f0:	68bb      	ldr	r3, [r7, #8]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d104      	bne.n	800e300 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800e2f6:	4b22      	ldr	r3, [pc, #136]	; (800e380 <ip4_output_if_src+0x158>)
 800e2f8:	681a      	ldr	r2, [r3, #0]
 800e2fa:	69fb      	ldr	r3, [r7, #28]
 800e2fc:	60da      	str	r2, [r3, #12]
 800e2fe:	e003      	b.n	800e308 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800e300:	68bb      	ldr	r3, [r7, #8]
 800e302:	681a      	ldr	r2, [r3, #0]
 800e304:	69fb      	ldr	r3, [r7, #28]
 800e306:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800e308:	69fb      	ldr	r3, [r7, #28]
 800e30a:	2200      	movs	r2, #0
 800e30c:	729a      	strb	r2, [r3, #10]
 800e30e:	2200      	movs	r2, #0
 800e310:	72da      	strb	r2, [r3, #11]
 800e312:	e00f      	b.n	800e334 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	895b      	ldrh	r3, [r3, #10]
 800e318:	2b13      	cmp	r3, #19
 800e31a:	d802      	bhi.n	800e322 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e31c:	f06f 0301 	mvn.w	r3, #1
 800e320:	e020      	b.n	800e364 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	685b      	ldr	r3, [r3, #4]
 800e326:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800e328:	69fb      	ldr	r3, [r7, #28]
 800e32a:	691b      	ldr	r3, [r3, #16]
 800e32c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800e32e:	f107 0314 	add.w	r3, r7, #20
 800e332:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800e334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e336:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d00c      	beq.n	800e356 <ip4_output_if_src+0x12e>
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	891a      	ldrh	r2, [r3, #8]
 800e340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e342:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e344:	429a      	cmp	r2, r3
 800e346:	d906      	bls.n	800e356 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800e348:	687a      	ldr	r2, [r7, #4]
 800e34a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e34c:	68f8      	ldr	r0, [r7, #12]
 800e34e:	f000 fd4d 	bl	800edec <ip4_frag>
 800e352:	4603      	mov	r3, r0
 800e354:	e006      	b.n	800e364 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800e356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e358:	695b      	ldr	r3, [r3, #20]
 800e35a:	687a      	ldr	r2, [r7, #4]
 800e35c:	68f9      	ldr	r1, [r7, #12]
 800e35e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e360:	4798      	blx	r3
 800e362:	4603      	mov	r3, r0
}
 800e364:	4618      	mov	r0, r3
 800e366:	3720      	adds	r7, #32
 800e368:	46bd      	mov	sp, r7
 800e36a:	bd80      	pop	{r7, pc}
 800e36c:	08013050 	.word	0x08013050
 800e370:	08013084 	.word	0x08013084
 800e374:	08013090 	.word	0x08013090
 800e378:	080130b8 	.word	0x080130b8
 800e37c:	2000065e 	.word	0x2000065e
 800e380:	08014314 	.word	0x08014314

0800e384 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800e384:	b480      	push	{r7}
 800e386:	b085      	sub	sp, #20
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
 800e38c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e398:	d002      	beq.n	800e3a0 <ip4_addr_isbroadcast_u32+0x1c>
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d101      	bne.n	800e3a4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800e3a0:	2301      	movs	r3, #1
 800e3a2:	e02a      	b.n	800e3fa <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e3aa:	f003 0302 	and.w	r3, r3, #2
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d101      	bne.n	800e3b6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	e021      	b.n	800e3fa <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	3304      	adds	r3, #4
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	687a      	ldr	r2, [r7, #4]
 800e3be:	429a      	cmp	r2, r3
 800e3c0:	d101      	bne.n	800e3c6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	e019      	b.n	800e3fa <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800e3c6:	68fa      	ldr	r2, [r7, #12]
 800e3c8:	683b      	ldr	r3, [r7, #0]
 800e3ca:	3304      	adds	r3, #4
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	405a      	eors	r2, r3
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	3308      	adds	r3, #8
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	4013      	ands	r3, r2
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d10d      	bne.n	800e3f8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e3dc:	683b      	ldr	r3, [r7, #0]
 800e3de:	3308      	adds	r3, #8
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	43da      	mvns	r2, r3
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800e3e8:	683b      	ldr	r3, [r7, #0]
 800e3ea:	3308      	adds	r3, #8
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e3f0:	429a      	cmp	r2, r3
 800e3f2:	d101      	bne.n	800e3f8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800e3f4:	2301      	movs	r3, #1
 800e3f6:	e000      	b.n	800e3fa <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800e3f8:	2300      	movs	r3, #0
  }
}
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	3714      	adds	r7, #20
 800e3fe:	46bd      	mov	sp, r7
 800e400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e404:	4770      	bx	lr
	...

0800e408 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b084      	sub	sp, #16
 800e40c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800e40e:	2300      	movs	r3, #0
 800e410:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800e412:	4b12      	ldr	r3, [pc, #72]	; (800e45c <ip_reass_tmr+0x54>)
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800e418:	e018      	b.n	800e44c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	7fdb      	ldrb	r3, [r3, #31]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d00b      	beq.n	800e43a <ip_reass_tmr+0x32>
      r->timer--;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	7fdb      	ldrb	r3, [r3, #31]
 800e426:	3b01      	subs	r3, #1
 800e428:	b2da      	uxtb	r2, r3
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	60fb      	str	r3, [r7, #12]
 800e438:	e008      	b.n	800e44c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800e444:	68b9      	ldr	r1, [r7, #8]
 800e446:	6878      	ldr	r0, [r7, #4]
 800e448:	f000 f80a 	bl	800e460 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d1e3      	bne.n	800e41a <ip_reass_tmr+0x12>
    }
  }
}
 800e452:	bf00      	nop
 800e454:	bf00      	nop
 800e456:	3710      	adds	r7, #16
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd80      	pop	{r7, pc}
 800e45c:	20000660 	.word	0x20000660

0800e460 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b088      	sub	sp, #32
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
 800e468:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800e46a:	2300      	movs	r3, #0
 800e46c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e46e:	683a      	ldr	r2, [r7, #0]
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	429a      	cmp	r2, r3
 800e474:	d105      	bne.n	800e482 <ip_reass_free_complete_datagram+0x22>
 800e476:	4b45      	ldr	r3, [pc, #276]	; (800e58c <ip_reass_free_complete_datagram+0x12c>)
 800e478:	22ab      	movs	r2, #171	; 0xab
 800e47a:	4945      	ldr	r1, [pc, #276]	; (800e590 <ip_reass_free_complete_datagram+0x130>)
 800e47c:	4845      	ldr	r0, [pc, #276]	; (800e594 <ip_reass_free_complete_datagram+0x134>)
 800e47e:	f000 ff33 	bl	800f2e8 <iprintf>
  if (prev != NULL) {
 800e482:	683b      	ldr	r3, [r7, #0]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d00a      	beq.n	800e49e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800e488:	683b      	ldr	r3, [r7, #0]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	687a      	ldr	r2, [r7, #4]
 800e48e:	429a      	cmp	r2, r3
 800e490:	d005      	beq.n	800e49e <ip_reass_free_complete_datagram+0x3e>
 800e492:	4b3e      	ldr	r3, [pc, #248]	; (800e58c <ip_reass_free_complete_datagram+0x12c>)
 800e494:	22ad      	movs	r2, #173	; 0xad
 800e496:	4940      	ldr	r1, [pc, #256]	; (800e598 <ip_reass_free_complete_datagram+0x138>)
 800e498:	483e      	ldr	r0, [pc, #248]	; (800e594 <ip_reass_free_complete_datagram+0x134>)
 800e49a:	f000 ff25 	bl	800f2e8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	685b      	ldr	r3, [r3, #4]
 800e4a2:	685b      	ldr	r3, [r3, #4]
 800e4a4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800e4a6:	697b      	ldr	r3, [r7, #20]
 800e4a8:	889b      	ldrh	r3, [r3, #4]
 800e4aa:	b29b      	uxth	r3, r3
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d12a      	bne.n	800e506 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	685b      	ldr	r3, [r3, #4]
 800e4b4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800e4b6:	697b      	ldr	r3, [r7, #20]
 800e4b8:	681a      	ldr	r2, [r3, #0]
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e4be:	69bb      	ldr	r3, [r7, #24]
 800e4c0:	6858      	ldr	r0, [r3, #4]
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	3308      	adds	r3, #8
 800e4c6:	2214      	movs	r2, #20
 800e4c8:	4619      	mov	r1, r3
 800e4ca:	f000 fedd 	bl	800f288 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e4ce:	2101      	movs	r1, #1
 800e4d0:	69b8      	ldr	r0, [r7, #24]
 800e4d2:	f7ff fc47 	bl	800dd64 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800e4d6:	69b8      	ldr	r0, [r7, #24]
 800e4d8:	f7f7 fe84 	bl	80061e4 <pbuf_clen>
 800e4dc:	4603      	mov	r3, r0
 800e4de:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e4e0:	8bfa      	ldrh	r2, [r7, #30]
 800e4e2:	8a7b      	ldrh	r3, [r7, #18]
 800e4e4:	4413      	add	r3, r2
 800e4e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e4ea:	db05      	blt.n	800e4f8 <ip_reass_free_complete_datagram+0x98>
 800e4ec:	4b27      	ldr	r3, [pc, #156]	; (800e58c <ip_reass_free_complete_datagram+0x12c>)
 800e4ee:	22bc      	movs	r2, #188	; 0xbc
 800e4f0:	492a      	ldr	r1, [pc, #168]	; (800e59c <ip_reass_free_complete_datagram+0x13c>)
 800e4f2:	4828      	ldr	r0, [pc, #160]	; (800e594 <ip_reass_free_complete_datagram+0x134>)
 800e4f4:	f000 fef8 	bl	800f2e8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e4f8:	8bfa      	ldrh	r2, [r7, #30]
 800e4fa:	8a7b      	ldrh	r3, [r7, #18]
 800e4fc:	4413      	add	r3, r2
 800e4fe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800e500:	69b8      	ldr	r0, [r7, #24]
 800e502:	f7f7 fde7 	bl	80060d4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	685b      	ldr	r3, [r3, #4]
 800e50a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800e50c:	e01f      	b.n	800e54e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800e50e:	69bb      	ldr	r3, [r7, #24]
 800e510:	685b      	ldr	r3, [r3, #4]
 800e512:	617b      	str	r3, [r7, #20]
    pcur = p;
 800e514:	69bb      	ldr	r3, [r7, #24]
 800e516:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800e518:	697b      	ldr	r3, [r7, #20]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800e51e:	68f8      	ldr	r0, [r7, #12]
 800e520:	f7f7 fe60 	bl	80061e4 <pbuf_clen>
 800e524:	4603      	mov	r3, r0
 800e526:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e528:	8bfa      	ldrh	r2, [r7, #30]
 800e52a:	8a7b      	ldrh	r3, [r7, #18]
 800e52c:	4413      	add	r3, r2
 800e52e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e532:	db05      	blt.n	800e540 <ip_reass_free_complete_datagram+0xe0>
 800e534:	4b15      	ldr	r3, [pc, #84]	; (800e58c <ip_reass_free_complete_datagram+0x12c>)
 800e536:	22cc      	movs	r2, #204	; 0xcc
 800e538:	4918      	ldr	r1, [pc, #96]	; (800e59c <ip_reass_free_complete_datagram+0x13c>)
 800e53a:	4816      	ldr	r0, [pc, #88]	; (800e594 <ip_reass_free_complete_datagram+0x134>)
 800e53c:	f000 fed4 	bl	800f2e8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e540:	8bfa      	ldrh	r2, [r7, #30]
 800e542:	8a7b      	ldrh	r3, [r7, #18]
 800e544:	4413      	add	r3, r2
 800e546:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800e548:	68f8      	ldr	r0, [r7, #12]
 800e54a:	f7f7 fdc3 	bl	80060d4 <pbuf_free>
  while (p != NULL) {
 800e54e:	69bb      	ldr	r3, [r7, #24]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d1dc      	bne.n	800e50e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800e554:	6839      	ldr	r1, [r7, #0]
 800e556:	6878      	ldr	r0, [r7, #4]
 800e558:	f000 f8c2 	bl	800e6e0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800e55c:	4b10      	ldr	r3, [pc, #64]	; (800e5a0 <ip_reass_free_complete_datagram+0x140>)
 800e55e:	881b      	ldrh	r3, [r3, #0]
 800e560:	8bfa      	ldrh	r2, [r7, #30]
 800e562:	429a      	cmp	r2, r3
 800e564:	d905      	bls.n	800e572 <ip_reass_free_complete_datagram+0x112>
 800e566:	4b09      	ldr	r3, [pc, #36]	; (800e58c <ip_reass_free_complete_datagram+0x12c>)
 800e568:	22d2      	movs	r2, #210	; 0xd2
 800e56a:	490e      	ldr	r1, [pc, #56]	; (800e5a4 <ip_reass_free_complete_datagram+0x144>)
 800e56c:	4809      	ldr	r0, [pc, #36]	; (800e594 <ip_reass_free_complete_datagram+0x134>)
 800e56e:	f000 febb 	bl	800f2e8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800e572:	4b0b      	ldr	r3, [pc, #44]	; (800e5a0 <ip_reass_free_complete_datagram+0x140>)
 800e574:	881a      	ldrh	r2, [r3, #0]
 800e576:	8bfb      	ldrh	r3, [r7, #30]
 800e578:	1ad3      	subs	r3, r2, r3
 800e57a:	b29a      	uxth	r2, r3
 800e57c:	4b08      	ldr	r3, [pc, #32]	; (800e5a0 <ip_reass_free_complete_datagram+0x140>)
 800e57e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800e580:	8bfb      	ldrh	r3, [r7, #30]
}
 800e582:	4618      	mov	r0, r3
 800e584:	3720      	adds	r7, #32
 800e586:	46bd      	mov	sp, r7
 800e588:	bd80      	pop	{r7, pc}
 800e58a:	bf00      	nop
 800e58c:	080130e8 	.word	0x080130e8
 800e590:	08013124 	.word	0x08013124
 800e594:	08013130 	.word	0x08013130
 800e598:	08013158 	.word	0x08013158
 800e59c:	0801316c 	.word	0x0801316c
 800e5a0:	20000664 	.word	0x20000664
 800e5a4:	0801318c 	.word	0x0801318c

0800e5a8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b08a      	sub	sp, #40	; 0x28
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
 800e5b0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800e5c6:	4b28      	ldr	r3, [pc, #160]	; (800e668 <ip_reass_remove_oldest_datagram+0xc0>)
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e5cc:	e030      	b.n	800e630 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5d0:	695a      	ldr	r2, [r3, #20]
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	68db      	ldr	r3, [r3, #12]
 800e5d6:	429a      	cmp	r2, r3
 800e5d8:	d10c      	bne.n	800e5f4 <ip_reass_remove_oldest_datagram+0x4c>
 800e5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5dc:	699a      	ldr	r2, [r3, #24]
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	691b      	ldr	r3, [r3, #16]
 800e5e2:	429a      	cmp	r2, r3
 800e5e4:	d106      	bne.n	800e5f4 <ip_reass_remove_oldest_datagram+0x4c>
 800e5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e8:	899a      	ldrh	r2, [r3, #12]
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	889b      	ldrh	r3, [r3, #4]
 800e5ee:	b29b      	uxth	r3, r3
 800e5f0:	429a      	cmp	r2, r3
 800e5f2:	d014      	beq.n	800e61e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800e5f4:	693b      	ldr	r3, [r7, #16]
 800e5f6:	3301      	adds	r3, #1
 800e5f8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800e5fa:	6a3b      	ldr	r3, [r7, #32]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d104      	bne.n	800e60a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800e600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e602:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e604:	69fb      	ldr	r3, [r7, #28]
 800e606:	61bb      	str	r3, [r7, #24]
 800e608:	e009      	b.n	800e61e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800e60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e60c:	7fda      	ldrb	r2, [r3, #31]
 800e60e:	6a3b      	ldr	r3, [r7, #32]
 800e610:	7fdb      	ldrb	r3, [r3, #31]
 800e612:	429a      	cmp	r2, r3
 800e614:	d803      	bhi.n	800e61e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800e616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e618:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e61a:	69fb      	ldr	r3, [r7, #28]
 800e61c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800e61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d001      	beq.n	800e62a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800e626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e628:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800e62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e632:	2b00      	cmp	r3, #0
 800e634:	d1cb      	bne.n	800e5ce <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800e636:	6a3b      	ldr	r3, [r7, #32]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d008      	beq.n	800e64e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800e63c:	69b9      	ldr	r1, [r7, #24]
 800e63e:	6a38      	ldr	r0, [r7, #32]
 800e640:	f7ff ff0e 	bl	800e460 <ip_reass_free_complete_datagram>
 800e644:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800e646:	697a      	ldr	r2, [r7, #20]
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	4413      	add	r3, r2
 800e64c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e64e:	697a      	ldr	r2, [r7, #20]
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	429a      	cmp	r2, r3
 800e654:	da02      	bge.n	800e65c <ip_reass_remove_oldest_datagram+0xb4>
 800e656:	693b      	ldr	r3, [r7, #16]
 800e658:	2b01      	cmp	r3, #1
 800e65a:	dcac      	bgt.n	800e5b6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800e65c:	697b      	ldr	r3, [r7, #20]
}
 800e65e:	4618      	mov	r0, r3
 800e660:	3728      	adds	r7, #40	; 0x28
 800e662:	46bd      	mov	sp, r7
 800e664:	bd80      	pop	{r7, pc}
 800e666:	bf00      	nop
 800e668:	20000660 	.word	0x20000660

0800e66c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b084      	sub	sp, #16
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
 800e674:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e676:	2004      	movs	r0, #4
 800e678:	f7f6 fece 	bl	8005418 <memp_malloc>
 800e67c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d110      	bne.n	800e6a6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e684:	6839      	ldr	r1, [r7, #0]
 800e686:	6878      	ldr	r0, [r7, #4]
 800e688:	f7ff ff8e 	bl	800e5a8 <ip_reass_remove_oldest_datagram>
 800e68c:	4602      	mov	r2, r0
 800e68e:	683b      	ldr	r3, [r7, #0]
 800e690:	4293      	cmp	r3, r2
 800e692:	dc03      	bgt.n	800e69c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e694:	2004      	movs	r0, #4
 800e696:	f7f6 febf 	bl	8005418 <memp_malloc>
 800e69a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d101      	bne.n	800e6a6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	e016      	b.n	800e6d4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e6a6:	2220      	movs	r2, #32
 800e6a8:	2100      	movs	r1, #0
 800e6aa:	68f8      	ldr	r0, [r7, #12]
 800e6ac:	f000 fe14 	bl	800f2d8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	220f      	movs	r2, #15
 800e6b4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800e6b6:	4b09      	ldr	r3, [pc, #36]	; (800e6dc <ip_reass_enqueue_new_datagram+0x70>)
 800e6b8:	681a      	ldr	r2, [r3, #0]
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800e6be:	4a07      	ldr	r2, [pc, #28]	; (800e6dc <ip_reass_enqueue_new_datagram+0x70>)
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	3308      	adds	r3, #8
 800e6c8:	2214      	movs	r2, #20
 800e6ca:	6879      	ldr	r1, [r7, #4]
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	f000 fddb 	bl	800f288 <memcpy>
  return ipr;
 800e6d2:	68fb      	ldr	r3, [r7, #12]
}
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	3710      	adds	r7, #16
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	bd80      	pop	{r7, pc}
 800e6dc:	20000660 	.word	0x20000660

0800e6e0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b082      	sub	sp, #8
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
 800e6e8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e6ea:	4b10      	ldr	r3, [pc, #64]	; (800e72c <ip_reass_dequeue_datagram+0x4c>)
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	687a      	ldr	r2, [r7, #4]
 800e6f0:	429a      	cmp	r2, r3
 800e6f2:	d104      	bne.n	800e6fe <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	4a0c      	ldr	r2, [pc, #48]	; (800e72c <ip_reass_dequeue_datagram+0x4c>)
 800e6fa:	6013      	str	r3, [r2, #0]
 800e6fc:	e00d      	b.n	800e71a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e6fe:	683b      	ldr	r3, [r7, #0]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d106      	bne.n	800e712 <ip_reass_dequeue_datagram+0x32>
 800e704:	4b0a      	ldr	r3, [pc, #40]	; (800e730 <ip_reass_dequeue_datagram+0x50>)
 800e706:	f240 1245 	movw	r2, #325	; 0x145
 800e70a:	490a      	ldr	r1, [pc, #40]	; (800e734 <ip_reass_dequeue_datagram+0x54>)
 800e70c:	480a      	ldr	r0, [pc, #40]	; (800e738 <ip_reass_dequeue_datagram+0x58>)
 800e70e:	f000 fdeb 	bl	800f2e8 <iprintf>
    prev->next = ipr->next;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681a      	ldr	r2, [r3, #0]
 800e716:	683b      	ldr	r3, [r7, #0]
 800e718:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e71a:	6879      	ldr	r1, [r7, #4]
 800e71c:	2004      	movs	r0, #4
 800e71e:	f7f6 fec7 	bl	80054b0 <memp_free>
}
 800e722:	bf00      	nop
 800e724:	3708      	adds	r7, #8
 800e726:	46bd      	mov	sp, r7
 800e728:	bd80      	pop	{r7, pc}
 800e72a:	bf00      	nop
 800e72c:	20000660 	.word	0x20000660
 800e730:	080130e8 	.word	0x080130e8
 800e734:	080131b0 	.word	0x080131b0
 800e738:	08013130 	.word	0x08013130

0800e73c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b08c      	sub	sp, #48	; 0x30
 800e740:	af00      	add	r7, sp, #0
 800e742:	60f8      	str	r0, [r7, #12]
 800e744:	60b9      	str	r1, [r7, #8]
 800e746:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800e748:	2300      	movs	r3, #0
 800e74a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800e74c:	2301      	movs	r3, #1
 800e74e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800e750:	68bb      	ldr	r3, [r7, #8]
 800e752:	685b      	ldr	r3, [r3, #4]
 800e754:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e756:	69fb      	ldr	r3, [r7, #28]
 800e758:	885b      	ldrh	r3, [r3, #2]
 800e75a:	b29b      	uxth	r3, r3
 800e75c:	4618      	mov	r0, r3
 800e75e:	f7f6 f99b 	bl	8004a98 <lwip_htons>
 800e762:	4603      	mov	r3, r0
 800e764:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800e766:	69fb      	ldr	r3, [r7, #28]
 800e768:	781b      	ldrb	r3, [r3, #0]
 800e76a:	f003 030f 	and.w	r3, r3, #15
 800e76e:	b2db      	uxtb	r3, r3
 800e770:	009b      	lsls	r3, r3, #2
 800e772:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800e774:	7e7b      	ldrb	r3, [r7, #25]
 800e776:	b29b      	uxth	r3, r3
 800e778:	8b7a      	ldrh	r2, [r7, #26]
 800e77a:	429a      	cmp	r2, r3
 800e77c:	d202      	bcs.n	800e784 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e77e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e782:	e135      	b.n	800e9f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800e784:	7e7b      	ldrb	r3, [r7, #25]
 800e786:	b29b      	uxth	r3, r3
 800e788:	8b7a      	ldrh	r2, [r7, #26]
 800e78a:	1ad3      	subs	r3, r2, r3
 800e78c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e78e:	69fb      	ldr	r3, [r7, #28]
 800e790:	88db      	ldrh	r3, [r3, #6]
 800e792:	b29b      	uxth	r3, r3
 800e794:	4618      	mov	r0, r3
 800e796:	f7f6 f97f 	bl	8004a98 <lwip_htons>
 800e79a:	4603      	mov	r3, r0
 800e79c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e7a0:	b29b      	uxth	r3, r3
 800e7a2:	00db      	lsls	r3, r3, #3
 800e7a4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800e7a6:	68bb      	ldr	r3, [r7, #8]
 800e7a8:	685b      	ldr	r3, [r3, #4]
 800e7aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800e7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	701a      	strb	r2, [r3, #0]
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	705a      	strb	r2, [r3, #1]
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	709a      	strb	r2, [r3, #2]
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800e7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7c0:	8afa      	ldrh	r2, [r7, #22]
 800e7c2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800e7c4:	8afa      	ldrh	r2, [r7, #22]
 800e7c6:	8b7b      	ldrh	r3, [r7, #26]
 800e7c8:	4413      	add	r3, r2
 800e7ca:	b29a      	uxth	r2, r3
 800e7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ce:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800e7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7d2:	88db      	ldrh	r3, [r3, #6]
 800e7d4:	b29b      	uxth	r3, r3
 800e7d6:	8afa      	ldrh	r2, [r7, #22]
 800e7d8:	429a      	cmp	r2, r3
 800e7da:	d902      	bls.n	800e7e2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e7dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e7e0:	e106      	b.n	800e9f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	685b      	ldr	r3, [r3, #4]
 800e7e6:	627b      	str	r3, [r7, #36]	; 0x24
 800e7e8:	e068      	b.n	800e8bc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800e7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ec:	685b      	ldr	r3, [r3, #4]
 800e7ee:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800e7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7f2:	889b      	ldrh	r3, [r3, #4]
 800e7f4:	b29a      	uxth	r2, r3
 800e7f6:	693b      	ldr	r3, [r7, #16]
 800e7f8:	889b      	ldrh	r3, [r3, #4]
 800e7fa:	b29b      	uxth	r3, r3
 800e7fc:	429a      	cmp	r2, r3
 800e7fe:	d235      	bcs.n	800e86c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e804:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d020      	beq.n	800e84e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e80e:	889b      	ldrh	r3, [r3, #4]
 800e810:	b29a      	uxth	r2, r3
 800e812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e814:	88db      	ldrh	r3, [r3, #6]
 800e816:	b29b      	uxth	r3, r3
 800e818:	429a      	cmp	r2, r3
 800e81a:	d307      	bcc.n	800e82c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800e81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e81e:	88db      	ldrh	r3, [r3, #6]
 800e820:	b29a      	uxth	r2, r3
 800e822:	693b      	ldr	r3, [r7, #16]
 800e824:	889b      	ldrh	r3, [r3, #4]
 800e826:	b29b      	uxth	r3, r3
 800e828:	429a      	cmp	r2, r3
 800e82a:	d902      	bls.n	800e832 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e82c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e830:	e0de      	b.n	800e9f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e834:	68ba      	ldr	r2, [r7, #8]
 800e836:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e83a:	88db      	ldrh	r3, [r3, #6]
 800e83c:	b29a      	uxth	r2, r3
 800e83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e840:	889b      	ldrh	r3, [r3, #4]
 800e842:	b29b      	uxth	r3, r3
 800e844:	429a      	cmp	r2, r3
 800e846:	d03d      	beq.n	800e8c4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e848:	2300      	movs	r3, #0
 800e84a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e84c:	e03a      	b.n	800e8c4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800e84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e850:	88db      	ldrh	r3, [r3, #6]
 800e852:	b29a      	uxth	r2, r3
 800e854:	693b      	ldr	r3, [r7, #16]
 800e856:	889b      	ldrh	r3, [r3, #4]
 800e858:	b29b      	uxth	r3, r3
 800e85a:	429a      	cmp	r2, r3
 800e85c:	d902      	bls.n	800e864 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e85e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e862:	e0c5      	b.n	800e9f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	68ba      	ldr	r2, [r7, #8]
 800e868:	605a      	str	r2, [r3, #4]
      break;
 800e86a:	e02b      	b.n	800e8c4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800e86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e86e:	889b      	ldrh	r3, [r3, #4]
 800e870:	b29a      	uxth	r2, r3
 800e872:	693b      	ldr	r3, [r7, #16]
 800e874:	889b      	ldrh	r3, [r3, #4]
 800e876:	b29b      	uxth	r3, r3
 800e878:	429a      	cmp	r2, r3
 800e87a:	d102      	bne.n	800e882 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e87c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e880:	e0b6      	b.n	800e9f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800e882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e884:	889b      	ldrh	r3, [r3, #4]
 800e886:	b29a      	uxth	r2, r3
 800e888:	693b      	ldr	r3, [r7, #16]
 800e88a:	88db      	ldrh	r3, [r3, #6]
 800e88c:	b29b      	uxth	r3, r3
 800e88e:	429a      	cmp	r2, r3
 800e890:	d202      	bcs.n	800e898 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e892:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e896:	e0ab      	b.n	800e9f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800e898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d009      	beq.n	800e8b2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800e89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8a0:	88db      	ldrh	r3, [r3, #6]
 800e8a2:	b29a      	uxth	r2, r3
 800e8a4:	693b      	ldr	r3, [r7, #16]
 800e8a6:	889b      	ldrh	r3, [r3, #4]
 800e8a8:	b29b      	uxth	r3, r3
 800e8aa:	429a      	cmp	r2, r3
 800e8ac:	d001      	beq.n	800e8b2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e8b2:	693b      	ldr	r3, [r7, #16]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800e8b8:	693b      	ldr	r3, [r7, #16]
 800e8ba:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800e8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d193      	bne.n	800e7ea <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800e8c2:	e000      	b.n	800e8c6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800e8c4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d12d      	bne.n	800e928 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800e8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d01c      	beq.n	800e90c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8d4:	88db      	ldrh	r3, [r3, #6]
 800e8d6:	b29a      	uxth	r2, r3
 800e8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8da:	889b      	ldrh	r3, [r3, #4]
 800e8dc:	b29b      	uxth	r3, r3
 800e8de:	429a      	cmp	r2, r3
 800e8e0:	d906      	bls.n	800e8f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800e8e2:	4b45      	ldr	r3, [pc, #276]	; (800e9f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e8e4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800e8e8:	4944      	ldr	r1, [pc, #272]	; (800e9fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e8ea:	4845      	ldr	r0, [pc, #276]	; (800ea00 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e8ec:	f000 fcfc 	bl	800f2e8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800e8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8f2:	68ba      	ldr	r2, [r7, #8]
 800e8f4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8f8:	88db      	ldrh	r3, [r3, #6]
 800e8fa:	b29a      	uxth	r2, r3
 800e8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8fe:	889b      	ldrh	r3, [r3, #4]
 800e900:	b29b      	uxth	r3, r3
 800e902:	429a      	cmp	r2, r3
 800e904:	d010      	beq.n	800e928 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800e906:	2300      	movs	r3, #0
 800e908:	623b      	str	r3, [r7, #32]
 800e90a:	e00d      	b.n	800e928 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	685b      	ldr	r3, [r3, #4]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d006      	beq.n	800e922 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800e914:	4b38      	ldr	r3, [pc, #224]	; (800e9f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e916:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800e91a:	493a      	ldr	r1, [pc, #232]	; (800ea04 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e91c:	4838      	ldr	r0, [pc, #224]	; (800ea00 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e91e:	f000 fce3 	bl	800f2e8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	68ba      	ldr	r2, [r7, #8]
 800e926:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d105      	bne.n	800e93a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	7f9b      	ldrb	r3, [r3, #30]
 800e932:	f003 0301 	and.w	r3, r3, #1
 800e936:	2b00      	cmp	r3, #0
 800e938:	d059      	beq.n	800e9ee <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800e93a:	6a3b      	ldr	r3, [r7, #32]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d04f      	beq.n	800e9e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	685b      	ldr	r3, [r3, #4]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d006      	beq.n	800e956 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	685b      	ldr	r3, [r3, #4]
 800e94c:	685b      	ldr	r3, [r3, #4]
 800e94e:	889b      	ldrh	r3, [r3, #4]
 800e950:	b29b      	uxth	r3, r3
 800e952:	2b00      	cmp	r3, #0
 800e954:	d002      	beq.n	800e95c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800e956:	2300      	movs	r3, #0
 800e958:	623b      	str	r3, [r7, #32]
 800e95a:	e041      	b.n	800e9e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800e95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e95e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800e960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e966:	e012      	b.n	800e98e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800e968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e96a:	685b      	ldr	r3, [r3, #4]
 800e96c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800e96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e970:	88db      	ldrh	r3, [r3, #6]
 800e972:	b29a      	uxth	r2, r3
 800e974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e976:	889b      	ldrh	r3, [r3, #4]
 800e978:	b29b      	uxth	r3, r3
 800e97a:	429a      	cmp	r2, r3
 800e97c:	d002      	beq.n	800e984 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800e97e:	2300      	movs	r3, #0
 800e980:	623b      	str	r3, [r7, #32]
            break;
 800e982:	e007      	b.n	800e994 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800e984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e986:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800e988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e990:	2b00      	cmp	r3, #0
 800e992:	d1e9      	bne.n	800e968 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800e994:	6a3b      	ldr	r3, [r7, #32]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d022      	beq.n	800e9e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	685b      	ldr	r3, [r3, #4]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d106      	bne.n	800e9b0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800e9a2:	4b15      	ldr	r3, [pc, #84]	; (800e9f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e9a4:	f240 12df 	movw	r2, #479	; 0x1df
 800e9a8:	4917      	ldr	r1, [pc, #92]	; (800ea08 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e9aa:	4815      	ldr	r0, [pc, #84]	; (800ea00 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e9ac:	f000 fc9c 	bl	800f2e8 <iprintf>
          LWIP_ASSERT("sanity check",
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	685b      	ldr	r3, [r3, #4]
 800e9b4:	685b      	ldr	r3, [r3, #4]
 800e9b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9b8:	429a      	cmp	r2, r3
 800e9ba:	d106      	bne.n	800e9ca <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800e9bc:	4b0e      	ldr	r3, [pc, #56]	; (800e9f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e9be:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e9c2:	4911      	ldr	r1, [pc, #68]	; (800ea08 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e9c4:	480e      	ldr	r0, [pc, #56]	; (800ea00 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e9c6:	f000 fc8f 	bl	800f2e8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e9ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d006      	beq.n	800e9e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800e9d2:	4b09      	ldr	r3, [pc, #36]	; (800e9f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e9d4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800e9d8:	490c      	ldr	r1, [pc, #48]	; (800ea0c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e9da:	4809      	ldr	r0, [pc, #36]	; (800ea00 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e9dc:	f000 fc84 	bl	800f2e8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e9e0:	6a3b      	ldr	r3, [r7, #32]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	bf14      	ite	ne
 800e9e6:	2301      	movne	r3, #1
 800e9e8:	2300      	moveq	r3, #0
 800e9ea:	b2db      	uxtb	r3, r3
 800e9ec:	e000      	b.n	800e9f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e9ee:	2300      	movs	r3, #0
}
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	3730      	adds	r7, #48	; 0x30
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bd80      	pop	{r7, pc}
 800e9f8:	080130e8 	.word	0x080130e8
 800e9fc:	080131cc 	.word	0x080131cc
 800ea00:	08013130 	.word	0x08013130
 800ea04:	080131ec 	.word	0x080131ec
 800ea08:	08013224 	.word	0x08013224
 800ea0c:	08013234 	.word	0x08013234

0800ea10 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b08e      	sub	sp, #56	; 0x38
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	685b      	ldr	r3, [r3, #4]
 800ea1c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800ea1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea20:	781b      	ldrb	r3, [r3, #0]
 800ea22:	f003 030f 	and.w	r3, r3, #15
 800ea26:	b2db      	uxtb	r3, r3
 800ea28:	009b      	lsls	r3, r3, #2
 800ea2a:	b2db      	uxtb	r3, r3
 800ea2c:	2b14      	cmp	r3, #20
 800ea2e:	f040 8167 	bne.w	800ed00 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800ea32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea34:	88db      	ldrh	r3, [r3, #6]
 800ea36:	b29b      	uxth	r3, r3
 800ea38:	4618      	mov	r0, r3
 800ea3a:	f7f6 f82d 	bl	8004a98 <lwip_htons>
 800ea3e:	4603      	mov	r3, r0
 800ea40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ea44:	b29b      	uxth	r3, r3
 800ea46:	00db      	lsls	r3, r3, #3
 800ea48:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800ea4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea4c:	885b      	ldrh	r3, [r3, #2]
 800ea4e:	b29b      	uxth	r3, r3
 800ea50:	4618      	mov	r0, r3
 800ea52:	f7f6 f821 	bl	8004a98 <lwip_htons>
 800ea56:	4603      	mov	r3, r0
 800ea58:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800ea5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea5c:	781b      	ldrb	r3, [r3, #0]
 800ea5e:	f003 030f 	and.w	r3, r3, #15
 800ea62:	b2db      	uxtb	r3, r3
 800ea64:	009b      	lsls	r3, r3, #2
 800ea66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800ea6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ea6e:	b29b      	uxth	r3, r3
 800ea70:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ea72:	429a      	cmp	r2, r3
 800ea74:	f0c0 8146 	bcc.w	800ed04 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800ea78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ea7c:	b29b      	uxth	r3, r3
 800ea7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ea80:	1ad3      	subs	r3, r2, r3
 800ea82:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800ea84:	6878      	ldr	r0, [r7, #4]
 800ea86:	f7f7 fbad 	bl	80061e4 <pbuf_clen>
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800ea8e:	4b9f      	ldr	r3, [pc, #636]	; (800ed0c <ip4_reass+0x2fc>)
 800ea90:	881b      	ldrh	r3, [r3, #0]
 800ea92:	461a      	mov	r2, r3
 800ea94:	8c3b      	ldrh	r3, [r7, #32]
 800ea96:	4413      	add	r3, r2
 800ea98:	2b0a      	cmp	r3, #10
 800ea9a:	dd10      	ble.n	800eabe <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ea9c:	8c3b      	ldrh	r3, [r7, #32]
 800ea9e:	4619      	mov	r1, r3
 800eaa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eaa2:	f7ff fd81 	bl	800e5a8 <ip_reass_remove_oldest_datagram>
 800eaa6:	4603      	mov	r3, r0
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	f000 812d 	beq.w	800ed08 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800eaae:	4b97      	ldr	r3, [pc, #604]	; (800ed0c <ip4_reass+0x2fc>)
 800eab0:	881b      	ldrh	r3, [r3, #0]
 800eab2:	461a      	mov	r2, r3
 800eab4:	8c3b      	ldrh	r3, [r7, #32]
 800eab6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800eab8:	2b0a      	cmp	r3, #10
 800eaba:	f300 8125 	bgt.w	800ed08 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800eabe:	4b94      	ldr	r3, [pc, #592]	; (800ed10 <ip4_reass+0x300>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	633b      	str	r3, [r7, #48]	; 0x30
 800eac4:	e015      	b.n	800eaf2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800eac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eac8:	695a      	ldr	r2, [r3, #20]
 800eaca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eacc:	68db      	ldr	r3, [r3, #12]
 800eace:	429a      	cmp	r2, r3
 800ead0:	d10c      	bne.n	800eaec <ip4_reass+0xdc>
 800ead2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ead4:	699a      	ldr	r2, [r3, #24]
 800ead6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ead8:	691b      	ldr	r3, [r3, #16]
 800eada:	429a      	cmp	r2, r3
 800eadc:	d106      	bne.n	800eaec <ip4_reass+0xdc>
 800eade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eae0:	899a      	ldrh	r2, [r3, #12]
 800eae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eae4:	889b      	ldrh	r3, [r3, #4]
 800eae6:	b29b      	uxth	r3, r3
 800eae8:	429a      	cmp	r2, r3
 800eaea:	d006      	beq.n	800eafa <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800eaec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	633b      	str	r3, [r7, #48]	; 0x30
 800eaf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d1e6      	bne.n	800eac6 <ip4_reass+0xb6>
 800eaf8:	e000      	b.n	800eafc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800eafa:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800eafc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d109      	bne.n	800eb16 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800eb02:	8c3b      	ldrh	r3, [r7, #32]
 800eb04:	4619      	mov	r1, r3
 800eb06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb08:	f7ff fdb0 	bl	800e66c <ip_reass_enqueue_new_datagram>
 800eb0c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800eb0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d11c      	bne.n	800eb4e <ip4_reass+0x13e>
      goto nullreturn;
 800eb14:	e109      	b.n	800ed2a <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800eb16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb18:	88db      	ldrh	r3, [r3, #6]
 800eb1a:	b29b      	uxth	r3, r3
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	f7f5 ffbb 	bl	8004a98 <lwip_htons>
 800eb22:	4603      	mov	r3, r0
 800eb24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d110      	bne.n	800eb4e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800eb2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb2e:	89db      	ldrh	r3, [r3, #14]
 800eb30:	4618      	mov	r0, r3
 800eb32:	f7f5 ffb1 	bl	8004a98 <lwip_htons>
 800eb36:	4603      	mov	r3, r0
 800eb38:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d006      	beq.n	800eb4e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800eb40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb42:	3308      	adds	r3, #8
 800eb44:	2214      	movs	r2, #20
 800eb46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eb48:	4618      	mov	r0, r3
 800eb4a:	f000 fb9d 	bl	800f288 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800eb4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb50:	88db      	ldrh	r3, [r3, #6]
 800eb52:	b29b      	uxth	r3, r3
 800eb54:	f003 0320 	and.w	r3, r3, #32
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	bf0c      	ite	eq
 800eb5c:	2301      	moveq	r3, #1
 800eb5e:	2300      	movne	r3, #0
 800eb60:	b2db      	uxtb	r3, r3
 800eb62:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800eb64:	69fb      	ldr	r3, [r7, #28]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d00e      	beq.n	800eb88 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800eb6a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800eb6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb6e:	4413      	add	r3, r2
 800eb70:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800eb72:	8b7a      	ldrh	r2, [r7, #26]
 800eb74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800eb76:	429a      	cmp	r2, r3
 800eb78:	f0c0 80a0 	bcc.w	800ecbc <ip4_reass+0x2ac>
 800eb7c:	8b7b      	ldrh	r3, [r7, #26]
 800eb7e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800eb82:	4293      	cmp	r3, r2
 800eb84:	f200 809a 	bhi.w	800ecbc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800eb88:	69fa      	ldr	r2, [r7, #28]
 800eb8a:	6879      	ldr	r1, [r7, #4]
 800eb8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb8e:	f7ff fdd5 	bl	800e73c <ip_reass_chain_frag_into_datagram_and_validate>
 800eb92:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800eb94:	697b      	ldr	r3, [r7, #20]
 800eb96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eb9a:	f000 8091 	beq.w	800ecc0 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800eb9e:	4b5b      	ldr	r3, [pc, #364]	; (800ed0c <ip4_reass+0x2fc>)
 800eba0:	881a      	ldrh	r2, [r3, #0]
 800eba2:	8c3b      	ldrh	r3, [r7, #32]
 800eba4:	4413      	add	r3, r2
 800eba6:	b29a      	uxth	r2, r3
 800eba8:	4b58      	ldr	r3, [pc, #352]	; (800ed0c <ip4_reass+0x2fc>)
 800ebaa:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800ebac:	69fb      	ldr	r3, [r7, #28]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d00d      	beq.n	800ebce <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800ebb2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ebb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ebb6:	4413      	add	r3, r2
 800ebb8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800ebba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebbc:	8a7a      	ldrh	r2, [r7, #18]
 800ebbe:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800ebc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebc2:	7f9b      	ldrb	r3, [r3, #30]
 800ebc4:	f043 0301 	orr.w	r3, r3, #1
 800ebc8:	b2da      	uxtb	r2, r3
 800ebca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebcc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800ebce:	697b      	ldr	r3, [r7, #20]
 800ebd0:	2b01      	cmp	r3, #1
 800ebd2:	d171      	bne.n	800ecb8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800ebd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd6:	8b9b      	ldrh	r3, [r3, #28]
 800ebd8:	3314      	adds	r3, #20
 800ebda:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800ebdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebde:	685b      	ldr	r3, [r3, #4]
 800ebe0:	685b      	ldr	r3, [r3, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800ebe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebe8:	685b      	ldr	r3, [r3, #4]
 800ebea:	685b      	ldr	r3, [r3, #4]
 800ebec:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800ebee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebf0:	3308      	adds	r3, #8
 800ebf2:	2214      	movs	r2, #20
 800ebf4:	4619      	mov	r1, r3
 800ebf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ebf8:	f000 fb46 	bl	800f288 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800ebfc:	8a3b      	ldrh	r3, [r7, #16]
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f7f5 ff4a 	bl	8004a98 <lwip_htons>
 800ec04:	4603      	mov	r3, r0
 800ec06:	461a      	mov	r2, r3
 800ec08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec0a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800ec0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec0e:	2200      	movs	r2, #0
 800ec10:	719a      	strb	r2, [r3, #6]
 800ec12:	2200      	movs	r2, #0
 800ec14:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800ec16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec18:	2200      	movs	r2, #0
 800ec1a:	729a      	strb	r2, [r3, #10]
 800ec1c:	2200      	movs	r2, #0
 800ec1e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800ec20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec22:	685b      	ldr	r3, [r3, #4]
 800ec24:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800ec26:	e00d      	b.n	800ec44 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800ec28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec2a:	685b      	ldr	r3, [r3, #4]
 800ec2c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800ec2e:	2114      	movs	r1, #20
 800ec30:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ec32:	f7f7 f9c9 	bl	8005fc8 <pbuf_remove_header>
      pbuf_cat(p, r);
 800ec36:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ec38:	6878      	ldr	r0, [r7, #4]
 800ec3a:	f7f7 fb0d 	bl	8006258 <pbuf_cat>
      r = iprh->next_pbuf;
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800ec44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d1ee      	bne.n	800ec28 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800ec4a:	4b31      	ldr	r3, [pc, #196]	; (800ed10 <ip4_reass+0x300>)
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec50:	429a      	cmp	r2, r3
 800ec52:	d102      	bne.n	800ec5a <ip4_reass+0x24a>
      ipr_prev = NULL;
 800ec54:	2300      	movs	r3, #0
 800ec56:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ec58:	e010      	b.n	800ec7c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800ec5a:	4b2d      	ldr	r3, [pc, #180]	; (800ed10 <ip4_reass+0x300>)
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ec60:	e007      	b.n	800ec72 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800ec62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec68:	429a      	cmp	r2, r3
 800ec6a:	d006      	beq.n	800ec7a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800ec6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ec72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d1f4      	bne.n	800ec62 <ip4_reass+0x252>
 800ec78:	e000      	b.n	800ec7c <ip4_reass+0x26c>
          break;
 800ec7a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800ec7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ec7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec80:	f7ff fd2e 	bl	800e6e0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800ec84:	6878      	ldr	r0, [r7, #4]
 800ec86:	f7f7 faad 	bl	80061e4 <pbuf_clen>
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800ec8e:	4b1f      	ldr	r3, [pc, #124]	; (800ed0c <ip4_reass+0x2fc>)
 800ec90:	881b      	ldrh	r3, [r3, #0]
 800ec92:	8c3a      	ldrh	r2, [r7, #32]
 800ec94:	429a      	cmp	r2, r3
 800ec96:	d906      	bls.n	800eca6 <ip4_reass+0x296>
 800ec98:	4b1e      	ldr	r3, [pc, #120]	; (800ed14 <ip4_reass+0x304>)
 800ec9a:	f240 229b 	movw	r2, #667	; 0x29b
 800ec9e:	491e      	ldr	r1, [pc, #120]	; (800ed18 <ip4_reass+0x308>)
 800eca0:	481e      	ldr	r0, [pc, #120]	; (800ed1c <ip4_reass+0x30c>)
 800eca2:	f000 fb21 	bl	800f2e8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800eca6:	4b19      	ldr	r3, [pc, #100]	; (800ed0c <ip4_reass+0x2fc>)
 800eca8:	881a      	ldrh	r2, [r3, #0]
 800ecaa:	8c3b      	ldrh	r3, [r7, #32]
 800ecac:	1ad3      	subs	r3, r2, r3
 800ecae:	b29a      	uxth	r2, r3
 800ecb0:	4b16      	ldr	r3, [pc, #88]	; (800ed0c <ip4_reass+0x2fc>)
 800ecb2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	e03c      	b.n	800ed32 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800ecb8:	2300      	movs	r3, #0
 800ecba:	e03a      	b.n	800ed32 <ip4_reass+0x322>
      goto nullreturn_ipr;
 800ecbc:	bf00      	nop
 800ecbe:	e000      	b.n	800ecc2 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800ecc0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800ecc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d106      	bne.n	800ecd6 <ip4_reass+0x2c6>
 800ecc8:	4b12      	ldr	r3, [pc, #72]	; (800ed14 <ip4_reass+0x304>)
 800ecca:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800ecce:	4914      	ldr	r1, [pc, #80]	; (800ed20 <ip4_reass+0x310>)
 800ecd0:	4812      	ldr	r0, [pc, #72]	; (800ed1c <ip4_reass+0x30c>)
 800ecd2:	f000 fb09 	bl	800f2e8 <iprintf>
  if (ipr->p == NULL) {
 800ecd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecd8:	685b      	ldr	r3, [r3, #4]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d124      	bne.n	800ed28 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800ecde:	4b0c      	ldr	r3, [pc, #48]	; (800ed10 <ip4_reass+0x300>)
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ece4:	429a      	cmp	r2, r3
 800ece6:	d006      	beq.n	800ecf6 <ip4_reass+0x2e6>
 800ece8:	4b0a      	ldr	r3, [pc, #40]	; (800ed14 <ip4_reass+0x304>)
 800ecea:	f240 22ab 	movw	r2, #683	; 0x2ab
 800ecee:	490d      	ldr	r1, [pc, #52]	; (800ed24 <ip4_reass+0x314>)
 800ecf0:	480a      	ldr	r0, [pc, #40]	; (800ed1c <ip4_reass+0x30c>)
 800ecf2:	f000 faf9 	bl	800f2e8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800ecf6:	2100      	movs	r1, #0
 800ecf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ecfa:	f7ff fcf1 	bl	800e6e0 <ip_reass_dequeue_datagram>
 800ecfe:	e014      	b.n	800ed2a <ip4_reass+0x31a>
    goto nullreturn;
 800ed00:	bf00      	nop
 800ed02:	e012      	b.n	800ed2a <ip4_reass+0x31a>
    goto nullreturn;
 800ed04:	bf00      	nop
 800ed06:	e010      	b.n	800ed2a <ip4_reass+0x31a>
      goto nullreturn;
 800ed08:	bf00      	nop
 800ed0a:	e00e      	b.n	800ed2a <ip4_reass+0x31a>
 800ed0c:	20000664 	.word	0x20000664
 800ed10:	20000660 	.word	0x20000660
 800ed14:	080130e8 	.word	0x080130e8
 800ed18:	08013258 	.word	0x08013258
 800ed1c:	08013130 	.word	0x08013130
 800ed20:	08013274 	.word	0x08013274
 800ed24:	08013280 	.word	0x08013280
  }

nullreturn:
 800ed28:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800ed2a:	6878      	ldr	r0, [r7, #4]
 800ed2c:	f7f7 f9d2 	bl	80060d4 <pbuf_free>
  return NULL;
 800ed30:	2300      	movs	r3, #0
}
 800ed32:	4618      	mov	r0, r3
 800ed34:	3738      	adds	r7, #56	; 0x38
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bd80      	pop	{r7, pc}
 800ed3a:	bf00      	nop

0800ed3c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800ed40:	2005      	movs	r0, #5
 800ed42:	f7f6 fb69 	bl	8005418 <memp_malloc>
 800ed46:	4603      	mov	r3, r0
}
 800ed48:	4618      	mov	r0, r3
 800ed4a:	bd80      	pop	{r7, pc}

0800ed4c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b082      	sub	sp, #8
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d106      	bne.n	800ed68 <ip_frag_free_pbuf_custom_ref+0x1c>
 800ed5a:	4b07      	ldr	r3, [pc, #28]	; (800ed78 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800ed5c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800ed60:	4906      	ldr	r1, [pc, #24]	; (800ed7c <ip_frag_free_pbuf_custom_ref+0x30>)
 800ed62:	4807      	ldr	r0, [pc, #28]	; (800ed80 <ip_frag_free_pbuf_custom_ref+0x34>)
 800ed64:	f000 fac0 	bl	800f2e8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800ed68:	6879      	ldr	r1, [r7, #4]
 800ed6a:	2005      	movs	r0, #5
 800ed6c:	f7f6 fba0 	bl	80054b0 <memp_free>
}
 800ed70:	bf00      	nop
 800ed72:	3708      	adds	r7, #8
 800ed74:	46bd      	mov	sp, r7
 800ed76:	bd80      	pop	{r7, pc}
 800ed78:	080130e8 	.word	0x080130e8
 800ed7c:	080132a0 	.word	0x080132a0
 800ed80:	08013130 	.word	0x08013130

0800ed84 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b084      	sub	sp, #16
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d106      	bne.n	800eda4 <ipfrag_free_pbuf_custom+0x20>
 800ed96:	4b11      	ldr	r3, [pc, #68]	; (800eddc <ipfrag_free_pbuf_custom+0x58>)
 800ed98:	f240 22ce 	movw	r2, #718	; 0x2ce
 800ed9c:	4910      	ldr	r1, [pc, #64]	; (800ede0 <ipfrag_free_pbuf_custom+0x5c>)
 800ed9e:	4811      	ldr	r0, [pc, #68]	; (800ede4 <ipfrag_free_pbuf_custom+0x60>)
 800eda0:	f000 faa2 	bl	800f2e8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800eda4:	68fa      	ldr	r2, [r7, #12]
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	429a      	cmp	r2, r3
 800edaa:	d006      	beq.n	800edba <ipfrag_free_pbuf_custom+0x36>
 800edac:	4b0b      	ldr	r3, [pc, #44]	; (800eddc <ipfrag_free_pbuf_custom+0x58>)
 800edae:	f240 22cf 	movw	r2, #719	; 0x2cf
 800edb2:	490d      	ldr	r1, [pc, #52]	; (800ede8 <ipfrag_free_pbuf_custom+0x64>)
 800edb4:	480b      	ldr	r0, [pc, #44]	; (800ede4 <ipfrag_free_pbuf_custom+0x60>)
 800edb6:	f000 fa97 	bl	800f2e8 <iprintf>
  if (pcr->original != NULL) {
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	695b      	ldr	r3, [r3, #20]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d004      	beq.n	800edcc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	695b      	ldr	r3, [r3, #20]
 800edc6:	4618      	mov	r0, r3
 800edc8:	f7f7 f984 	bl	80060d4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800edcc:	68f8      	ldr	r0, [r7, #12]
 800edce:	f7ff ffbd 	bl	800ed4c <ip_frag_free_pbuf_custom_ref>
}
 800edd2:	bf00      	nop
 800edd4:	3710      	adds	r7, #16
 800edd6:	46bd      	mov	sp, r7
 800edd8:	bd80      	pop	{r7, pc}
 800edda:	bf00      	nop
 800eddc:	080130e8 	.word	0x080130e8
 800ede0:	080132ac 	.word	0x080132ac
 800ede4:	08013130 	.word	0x08013130
 800ede8:	080132b8 	.word	0x080132b8

0800edec <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b094      	sub	sp, #80	; 0x50
 800edf0:	af02      	add	r7, sp, #8
 800edf2:	60f8      	str	r0, [r7, #12]
 800edf4:	60b9      	str	r1, [r7, #8]
 800edf6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800edf8:	2300      	movs	r3, #0
 800edfa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800edfe:	68bb      	ldr	r3, [r7, #8]
 800ee00:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ee02:	3b14      	subs	r3, #20
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	da00      	bge.n	800ee0a <ip4_frag+0x1e>
 800ee08:	3307      	adds	r3, #7
 800ee0a:	10db      	asrs	r3, r3, #3
 800ee0c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800ee0e:	2314      	movs	r3, #20
 800ee10:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	685b      	ldr	r3, [r3, #4]
 800ee16:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800ee18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee1a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800ee1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee1e:	781b      	ldrb	r3, [r3, #0]
 800ee20:	f003 030f 	and.w	r3, r3, #15
 800ee24:	b2db      	uxtb	r3, r3
 800ee26:	009b      	lsls	r3, r3, #2
 800ee28:	b2db      	uxtb	r3, r3
 800ee2a:	2b14      	cmp	r3, #20
 800ee2c:	d002      	beq.n	800ee34 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800ee2e:	f06f 0305 	mvn.w	r3, #5
 800ee32:	e110      	b.n	800f056 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	895b      	ldrh	r3, [r3, #10]
 800ee38:	2b13      	cmp	r3, #19
 800ee3a:	d809      	bhi.n	800ee50 <ip4_frag+0x64>
 800ee3c:	4b88      	ldr	r3, [pc, #544]	; (800f060 <ip4_frag+0x274>)
 800ee3e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800ee42:	4988      	ldr	r1, [pc, #544]	; (800f064 <ip4_frag+0x278>)
 800ee44:	4888      	ldr	r0, [pc, #544]	; (800f068 <ip4_frag+0x27c>)
 800ee46:	f000 fa4f 	bl	800f2e8 <iprintf>
 800ee4a:	f06f 0305 	mvn.w	r3, #5
 800ee4e:	e102      	b.n	800f056 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800ee50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee52:	88db      	ldrh	r3, [r3, #6]
 800ee54:	b29b      	uxth	r3, r3
 800ee56:	4618      	mov	r0, r3
 800ee58:	f7f5 fe1e 	bl	8004a98 <lwip_htons>
 800ee5c:	4603      	mov	r3, r0
 800ee5e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800ee60:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ee62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ee66:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800ee6a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ee6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ee70:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	891b      	ldrh	r3, [r3, #8]
 800ee76:	3b14      	subs	r3, #20
 800ee78:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800ee7c:	e0e1      	b.n	800f042 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800ee7e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ee80:	00db      	lsls	r3, r3, #3
 800ee82:	b29b      	uxth	r3, r3
 800ee84:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ee88:	4293      	cmp	r3, r2
 800ee8a:	bf28      	it	cs
 800ee8c:	4613      	movcs	r3, r2
 800ee8e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800ee90:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ee94:	2114      	movs	r1, #20
 800ee96:	200e      	movs	r0, #14
 800ee98:	f7f6 fe38 	bl	8005b0c <pbuf_alloc>
 800ee9c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800ee9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	f000 80d5 	beq.w	800f050 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800eea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eea8:	895b      	ldrh	r3, [r3, #10]
 800eeaa:	2b13      	cmp	r3, #19
 800eeac:	d806      	bhi.n	800eebc <ip4_frag+0xd0>
 800eeae:	4b6c      	ldr	r3, [pc, #432]	; (800f060 <ip4_frag+0x274>)
 800eeb0:	f44f 7249 	mov.w	r2, #804	; 0x324
 800eeb4:	496d      	ldr	r1, [pc, #436]	; (800f06c <ip4_frag+0x280>)
 800eeb6:	486c      	ldr	r0, [pc, #432]	; (800f068 <ip4_frag+0x27c>)
 800eeb8:	f000 fa16 	bl	800f2e8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800eebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eebe:	685b      	ldr	r3, [r3, #4]
 800eec0:	2214      	movs	r2, #20
 800eec2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800eec4:	4618      	mov	r0, r3
 800eec6:	f000 f9df 	bl	800f288 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800eeca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eecc:	685b      	ldr	r3, [r3, #4]
 800eece:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800eed0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800eed2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800eed6:	e064      	b.n	800efa2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	895a      	ldrh	r2, [r3, #10]
 800eedc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800eede:	1ad3      	subs	r3, r2, r3
 800eee0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	895b      	ldrh	r3, [r3, #10]
 800eee6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800eee8:	429a      	cmp	r2, r3
 800eeea:	d906      	bls.n	800eefa <ip4_frag+0x10e>
 800eeec:	4b5c      	ldr	r3, [pc, #368]	; (800f060 <ip4_frag+0x274>)
 800eeee:	f240 322d 	movw	r2, #813	; 0x32d
 800eef2:	495f      	ldr	r1, [pc, #380]	; (800f070 <ip4_frag+0x284>)
 800eef4:	485c      	ldr	r0, [pc, #368]	; (800f068 <ip4_frag+0x27c>)
 800eef6:	f000 f9f7 	bl	800f2e8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800eefa:	8bfa      	ldrh	r2, [r7, #30]
 800eefc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ef00:	4293      	cmp	r3, r2
 800ef02:	bf28      	it	cs
 800ef04:	4613      	movcs	r3, r2
 800ef06:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800ef0a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d105      	bne.n	800ef1e <ip4_frag+0x132>
        poff = 0;
 800ef12:	2300      	movs	r3, #0
 800ef14:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	60fb      	str	r3, [r7, #12]
        continue;
 800ef1c:	e041      	b.n	800efa2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800ef1e:	f7ff ff0d 	bl	800ed3c <ip_frag_alloc_pbuf_custom_ref>
 800ef22:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800ef24:	69bb      	ldr	r3, [r7, #24]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d103      	bne.n	800ef32 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800ef2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef2c:	f7f7 f8d2 	bl	80060d4 <pbuf_free>
        goto memerr;
 800ef30:	e08f      	b.n	800f052 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ef32:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ef38:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ef3a:	4413      	add	r3, r2
 800ef3c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800ef40:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800ef44:	9201      	str	r2, [sp, #4]
 800ef46:	9300      	str	r3, [sp, #0]
 800ef48:	4603      	mov	r3, r0
 800ef4a:	2241      	movs	r2, #65	; 0x41
 800ef4c:	2000      	movs	r0, #0
 800ef4e:	f7f6 ff07 	bl	8005d60 <pbuf_alloced_custom>
 800ef52:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800ef54:	697b      	ldr	r3, [r7, #20]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d106      	bne.n	800ef68 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800ef5a:	69b8      	ldr	r0, [r7, #24]
 800ef5c:	f7ff fef6 	bl	800ed4c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800ef60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef62:	f7f7 f8b7 	bl	80060d4 <pbuf_free>
        goto memerr;
 800ef66:	e074      	b.n	800f052 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800ef68:	68f8      	ldr	r0, [r7, #12]
 800ef6a:	f7f7 f953 	bl	8006214 <pbuf_ref>
      pcr->original = p;
 800ef6e:	69bb      	ldr	r3, [r7, #24]
 800ef70:	68fa      	ldr	r2, [r7, #12]
 800ef72:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800ef74:	69bb      	ldr	r3, [r7, #24]
 800ef76:	4a3f      	ldr	r2, [pc, #252]	; (800f074 <ip4_frag+0x288>)
 800ef78:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800ef7a:	6979      	ldr	r1, [r7, #20]
 800ef7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef7e:	f7f7 f96b 	bl	8006258 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800ef82:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800ef86:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ef8a:	1ad3      	subs	r3, r2, r3
 800ef8c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800ef90:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d004      	beq.n	800efa2 <ip4_frag+0x1b6>
        poff = 0;
 800ef98:	2300      	movs	r3, #0
 800ef9a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800efa2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d196      	bne.n	800eed8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800efaa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800efac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800efb0:	4413      	add	r3, r2
 800efb2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800efb4:	68bb      	ldr	r3, [r7, #8]
 800efb6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800efb8:	f1a3 0213 	sub.w	r2, r3, #19
 800efbc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800efc0:	429a      	cmp	r2, r3
 800efc2:	bfcc      	ite	gt
 800efc4:	2301      	movgt	r3, #1
 800efc6:	2300      	movle	r3, #0
 800efc8:	b2db      	uxtb	r3, r3
 800efca:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800efcc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800efd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800efd4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800efd6:	6a3b      	ldr	r3, [r7, #32]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d002      	beq.n	800efe2 <ip4_frag+0x1f6>
 800efdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d003      	beq.n	800efea <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800efe2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800efe4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800efe8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800efea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800efec:	4618      	mov	r0, r3
 800efee:	f7f5 fd53 	bl	8004a98 <lwip_htons>
 800eff2:	4603      	mov	r3, r0
 800eff4:	461a      	mov	r2, r3
 800eff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eff8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800effa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800effc:	3314      	adds	r3, #20
 800effe:	b29b      	uxth	r3, r3
 800f000:	4618      	mov	r0, r3
 800f002:	f7f5 fd49 	bl	8004a98 <lwip_htons>
 800f006:	4603      	mov	r3, r0
 800f008:	461a      	mov	r2, r3
 800f00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f00c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800f00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f010:	2200      	movs	r2, #0
 800f012:	729a      	strb	r2, [r3, #10]
 800f014:	2200      	movs	r2, #0
 800f016:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800f018:	68bb      	ldr	r3, [r7, #8]
 800f01a:	695b      	ldr	r3, [r3, #20]
 800f01c:	687a      	ldr	r2, [r7, #4]
 800f01e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f020:	68b8      	ldr	r0, [r7, #8]
 800f022:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800f024:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f026:	f7f7 f855 	bl	80060d4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800f02a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f02e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f030:	1ad3      	subs	r3, r2, r3
 800f032:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800f036:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800f03a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f03c:	4413      	add	r3, r2
 800f03e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800f042:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f046:	2b00      	cmp	r3, #0
 800f048:	f47f af19 	bne.w	800ee7e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800f04c:	2300      	movs	r3, #0
 800f04e:	e002      	b.n	800f056 <ip4_frag+0x26a>
      goto memerr;
 800f050:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800f052:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800f056:	4618      	mov	r0, r3
 800f058:	3748      	adds	r7, #72	; 0x48
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bd80      	pop	{r7, pc}
 800f05e:	bf00      	nop
 800f060:	080130e8 	.word	0x080130e8
 800f064:	080132c4 	.word	0x080132c4
 800f068:	08013130 	.word	0x08013130
 800f06c:	080132e0 	.word	0x080132e0
 800f070:	08013300 	.word	0x08013300
 800f074:	0800ed85 	.word	0x0800ed85

0800f078 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800f078:	b580      	push	{r7, lr}
 800f07a:	b086      	sub	sp, #24
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	6078      	str	r0, [r7, #4]
 800f080:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800f082:	230e      	movs	r3, #14
 800f084:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	895b      	ldrh	r3, [r3, #10]
 800f08a:	2b0e      	cmp	r3, #14
 800f08c:	d96e      	bls.n	800f16c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	7bdb      	ldrb	r3, [r3, #15]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d106      	bne.n	800f0a4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800f096:	683b      	ldr	r3, [r7, #0]
 800f098:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f09c:	3301      	adds	r3, #1
 800f09e:	b2da      	uxtb	r2, r3
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	685b      	ldr	r3, [r3, #4]
 800f0a8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800f0aa:	693b      	ldr	r3, [r7, #16]
 800f0ac:	7b1a      	ldrb	r2, [r3, #12]
 800f0ae:	7b5b      	ldrb	r3, [r3, #13]
 800f0b0:	021b      	lsls	r3, r3, #8
 800f0b2:	4313      	orrs	r3, r2
 800f0b4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800f0b6:	693b      	ldr	r3, [r7, #16]
 800f0b8:	781b      	ldrb	r3, [r3, #0]
 800f0ba:	f003 0301 	and.w	r3, r3, #1
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d023      	beq.n	800f10a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800f0c2:	693b      	ldr	r3, [r7, #16]
 800f0c4:	781b      	ldrb	r3, [r3, #0]
 800f0c6:	2b01      	cmp	r3, #1
 800f0c8:	d10f      	bne.n	800f0ea <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f0ca:	693b      	ldr	r3, [r7, #16]
 800f0cc:	785b      	ldrb	r3, [r3, #1]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d11b      	bne.n	800f10a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800f0d2:	693b      	ldr	r3, [r7, #16]
 800f0d4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f0d6:	2b5e      	cmp	r3, #94	; 0x5e
 800f0d8:	d117      	bne.n	800f10a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	7b5b      	ldrb	r3, [r3, #13]
 800f0de:	f043 0310 	orr.w	r3, r3, #16
 800f0e2:	b2da      	uxtb	r2, r3
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	735a      	strb	r2, [r3, #13]
 800f0e8:	e00f      	b.n	800f10a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800f0ea:	693b      	ldr	r3, [r7, #16]
 800f0ec:	2206      	movs	r2, #6
 800f0ee:	4928      	ldr	r1, [pc, #160]	; (800f190 <ethernet_input+0x118>)
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	f000 f8bb 	bl	800f26c <memcmp>
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d106      	bne.n	800f10a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	7b5b      	ldrb	r3, [r3, #13]
 800f100:	f043 0308 	orr.w	r3, r3, #8
 800f104:	b2da      	uxtb	r2, r3
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800f10a:	89fb      	ldrh	r3, [r7, #14]
 800f10c:	2b08      	cmp	r3, #8
 800f10e:	d003      	beq.n	800f118 <ethernet_input+0xa0>
 800f110:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800f114:	d014      	beq.n	800f140 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800f116:	e032      	b.n	800f17e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f11e:	f003 0308 	and.w	r3, r3, #8
 800f122:	2b00      	cmp	r3, #0
 800f124:	d024      	beq.n	800f170 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f126:	8afb      	ldrh	r3, [r7, #22]
 800f128:	4619      	mov	r1, r3
 800f12a:	6878      	ldr	r0, [r7, #4]
 800f12c:	f7f6 ff4c 	bl	8005fc8 <pbuf_remove_header>
 800f130:	4603      	mov	r3, r0
 800f132:	2b00      	cmp	r3, #0
 800f134:	d11e      	bne.n	800f174 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800f136:	6839      	ldr	r1, [r7, #0]
 800f138:	6878      	ldr	r0, [r7, #4]
 800f13a:	f7fe ff27 	bl	800df8c <ip4_input>
      break;
 800f13e:	e013      	b.n	800f168 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f146:	f003 0308 	and.w	r3, r3, #8
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d014      	beq.n	800f178 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f14e:	8afb      	ldrh	r3, [r7, #22]
 800f150:	4619      	mov	r1, r3
 800f152:	6878      	ldr	r0, [r7, #4]
 800f154:	f7f6 ff38 	bl	8005fc8 <pbuf_remove_header>
 800f158:	4603      	mov	r3, r0
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d10e      	bne.n	800f17c <ethernet_input+0x104>
        etharp_input(p, netif);
 800f15e:	6839      	ldr	r1, [r7, #0]
 800f160:	6878      	ldr	r0, [r7, #4]
 800f162:	f7fe f8c7 	bl	800d2f4 <etharp_input>
      break;
 800f166:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800f168:	2300      	movs	r3, #0
 800f16a:	e00c      	b.n	800f186 <ethernet_input+0x10e>
    goto free_and_return;
 800f16c:	bf00      	nop
 800f16e:	e006      	b.n	800f17e <ethernet_input+0x106>
        goto free_and_return;
 800f170:	bf00      	nop
 800f172:	e004      	b.n	800f17e <ethernet_input+0x106>
        goto free_and_return;
 800f174:	bf00      	nop
 800f176:	e002      	b.n	800f17e <ethernet_input+0x106>
        goto free_and_return;
 800f178:	bf00      	nop
 800f17a:	e000      	b.n	800f17e <ethernet_input+0x106>
        goto free_and_return;
 800f17c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800f17e:	6878      	ldr	r0, [r7, #4]
 800f180:	f7f6 ffa8 	bl	80060d4 <pbuf_free>
  return ERR_OK;
 800f184:	2300      	movs	r3, #0
}
 800f186:	4618      	mov	r0, r3
 800f188:	3718      	adds	r7, #24
 800f18a:	46bd      	mov	sp, r7
 800f18c:	bd80      	pop	{r7, pc}
 800f18e:	bf00      	nop
 800f190:	08014318 	.word	0x08014318

0800f194 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800f194:	b580      	push	{r7, lr}
 800f196:	b086      	sub	sp, #24
 800f198:	af00      	add	r7, sp, #0
 800f19a:	60f8      	str	r0, [r7, #12]
 800f19c:	60b9      	str	r1, [r7, #8]
 800f19e:	607a      	str	r2, [r7, #4]
 800f1a0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800f1a2:	8c3b      	ldrh	r3, [r7, #32]
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	f7f5 fc77 	bl	8004a98 <lwip_htons>
 800f1aa:	4603      	mov	r3, r0
 800f1ac:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800f1ae:	210e      	movs	r1, #14
 800f1b0:	68b8      	ldr	r0, [r7, #8]
 800f1b2:	f7f6 fef9 	bl	8005fa8 <pbuf_add_header>
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d125      	bne.n	800f208 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800f1bc:	68bb      	ldr	r3, [r7, #8]
 800f1be:	685b      	ldr	r3, [r3, #4]
 800f1c0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800f1c2:	693b      	ldr	r3, [r7, #16]
 800f1c4:	8afa      	ldrh	r2, [r7, #22]
 800f1c6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800f1c8:	693b      	ldr	r3, [r7, #16]
 800f1ca:	2206      	movs	r2, #6
 800f1cc:	6839      	ldr	r1, [r7, #0]
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	f000 f85a 	bl	800f288 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800f1d4:	693b      	ldr	r3, [r7, #16]
 800f1d6:	3306      	adds	r3, #6
 800f1d8:	2206      	movs	r2, #6
 800f1da:	6879      	ldr	r1, [r7, #4]
 800f1dc:	4618      	mov	r0, r3
 800f1de:	f000 f853 	bl	800f288 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f1e8:	2b06      	cmp	r3, #6
 800f1ea:	d006      	beq.n	800f1fa <ethernet_output+0x66>
 800f1ec:	4b0a      	ldr	r3, [pc, #40]	; (800f218 <ethernet_output+0x84>)
 800f1ee:	f44f 7299 	mov.w	r2, #306	; 0x132
 800f1f2:	490a      	ldr	r1, [pc, #40]	; (800f21c <ethernet_output+0x88>)
 800f1f4:	480a      	ldr	r0, [pc, #40]	; (800f220 <ethernet_output+0x8c>)
 800f1f6:	f000 f877 	bl	800f2e8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	699b      	ldr	r3, [r3, #24]
 800f1fe:	68b9      	ldr	r1, [r7, #8]
 800f200:	68f8      	ldr	r0, [r7, #12]
 800f202:	4798      	blx	r3
 800f204:	4603      	mov	r3, r0
 800f206:	e002      	b.n	800f20e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800f208:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800f20a:	f06f 0301 	mvn.w	r3, #1
}
 800f20e:	4618      	mov	r0, r3
 800f210:	3718      	adds	r7, #24
 800f212:	46bd      	mov	sp, r7
 800f214:	bd80      	pop	{r7, pc}
 800f216:	bf00      	nop
 800f218:	08013310 	.word	0x08013310
 800f21c:	08013348 	.word	0x08013348
 800f220:	0801337c 	.word	0x0801337c

0800f224 <__libc_init_array>:
 800f224:	b570      	push	{r4, r5, r6, lr}
 800f226:	4d0d      	ldr	r5, [pc, #52]	; (800f25c <__libc_init_array+0x38>)
 800f228:	4c0d      	ldr	r4, [pc, #52]	; (800f260 <__libc_init_array+0x3c>)
 800f22a:	1b64      	subs	r4, r4, r5
 800f22c:	10a4      	asrs	r4, r4, #2
 800f22e:	2600      	movs	r6, #0
 800f230:	42a6      	cmp	r6, r4
 800f232:	d109      	bne.n	800f248 <__libc_init_array+0x24>
 800f234:	4d0b      	ldr	r5, [pc, #44]	; (800f264 <__libc_init_array+0x40>)
 800f236:	4c0c      	ldr	r4, [pc, #48]	; (800f268 <__libc_init_array+0x44>)
 800f238:	f001 fa3a 	bl	80106b0 <_init>
 800f23c:	1b64      	subs	r4, r4, r5
 800f23e:	10a4      	asrs	r4, r4, #2
 800f240:	2600      	movs	r6, #0
 800f242:	42a6      	cmp	r6, r4
 800f244:	d105      	bne.n	800f252 <__libc_init_array+0x2e>
 800f246:	bd70      	pop	{r4, r5, r6, pc}
 800f248:	f855 3b04 	ldr.w	r3, [r5], #4
 800f24c:	4798      	blx	r3
 800f24e:	3601      	adds	r6, #1
 800f250:	e7ee      	b.n	800f230 <__libc_init_array+0xc>
 800f252:	f855 3b04 	ldr.w	r3, [r5], #4
 800f256:	4798      	blx	r3
 800f258:	3601      	adds	r6, #1
 800f25a:	e7f2      	b.n	800f242 <__libc_init_array+0x1e>
 800f25c:	0801447c 	.word	0x0801447c
 800f260:	0801447c 	.word	0x0801447c
 800f264:	0801447c 	.word	0x0801447c
 800f268:	08014480 	.word	0x08014480

0800f26c <memcmp>:
 800f26c:	b530      	push	{r4, r5, lr}
 800f26e:	3901      	subs	r1, #1
 800f270:	2400      	movs	r4, #0
 800f272:	42a2      	cmp	r2, r4
 800f274:	d101      	bne.n	800f27a <memcmp+0xe>
 800f276:	2000      	movs	r0, #0
 800f278:	e005      	b.n	800f286 <memcmp+0x1a>
 800f27a:	5d03      	ldrb	r3, [r0, r4]
 800f27c:	3401      	adds	r4, #1
 800f27e:	5d0d      	ldrb	r5, [r1, r4]
 800f280:	42ab      	cmp	r3, r5
 800f282:	d0f6      	beq.n	800f272 <memcmp+0x6>
 800f284:	1b58      	subs	r0, r3, r5
 800f286:	bd30      	pop	{r4, r5, pc}

0800f288 <memcpy>:
 800f288:	440a      	add	r2, r1
 800f28a:	4291      	cmp	r1, r2
 800f28c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f290:	d100      	bne.n	800f294 <memcpy+0xc>
 800f292:	4770      	bx	lr
 800f294:	b510      	push	{r4, lr}
 800f296:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f29a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f29e:	4291      	cmp	r1, r2
 800f2a0:	d1f9      	bne.n	800f296 <memcpy+0xe>
 800f2a2:	bd10      	pop	{r4, pc}

0800f2a4 <memmove>:
 800f2a4:	4288      	cmp	r0, r1
 800f2a6:	b510      	push	{r4, lr}
 800f2a8:	eb01 0402 	add.w	r4, r1, r2
 800f2ac:	d902      	bls.n	800f2b4 <memmove+0x10>
 800f2ae:	4284      	cmp	r4, r0
 800f2b0:	4623      	mov	r3, r4
 800f2b2:	d807      	bhi.n	800f2c4 <memmove+0x20>
 800f2b4:	1e43      	subs	r3, r0, #1
 800f2b6:	42a1      	cmp	r1, r4
 800f2b8:	d008      	beq.n	800f2cc <memmove+0x28>
 800f2ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f2be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f2c2:	e7f8      	b.n	800f2b6 <memmove+0x12>
 800f2c4:	4402      	add	r2, r0
 800f2c6:	4601      	mov	r1, r0
 800f2c8:	428a      	cmp	r2, r1
 800f2ca:	d100      	bne.n	800f2ce <memmove+0x2a>
 800f2cc:	bd10      	pop	{r4, pc}
 800f2ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f2d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f2d6:	e7f7      	b.n	800f2c8 <memmove+0x24>

0800f2d8 <memset>:
 800f2d8:	4402      	add	r2, r0
 800f2da:	4603      	mov	r3, r0
 800f2dc:	4293      	cmp	r3, r2
 800f2de:	d100      	bne.n	800f2e2 <memset+0xa>
 800f2e0:	4770      	bx	lr
 800f2e2:	f803 1b01 	strb.w	r1, [r3], #1
 800f2e6:	e7f9      	b.n	800f2dc <memset+0x4>

0800f2e8 <iprintf>:
 800f2e8:	b40f      	push	{r0, r1, r2, r3}
 800f2ea:	4b0a      	ldr	r3, [pc, #40]	; (800f314 <iprintf+0x2c>)
 800f2ec:	b513      	push	{r0, r1, r4, lr}
 800f2ee:	681c      	ldr	r4, [r3, #0]
 800f2f0:	b124      	cbz	r4, 800f2fc <iprintf+0x14>
 800f2f2:	69a3      	ldr	r3, [r4, #24]
 800f2f4:	b913      	cbnz	r3, 800f2fc <iprintf+0x14>
 800f2f6:	4620      	mov	r0, r4
 800f2f8:	f000 f904 	bl	800f504 <__sinit>
 800f2fc:	ab05      	add	r3, sp, #20
 800f2fe:	9a04      	ldr	r2, [sp, #16]
 800f300:	68a1      	ldr	r1, [r4, #8]
 800f302:	9301      	str	r3, [sp, #4]
 800f304:	4620      	mov	r0, r4
 800f306:	f000 fbe7 	bl	800fad8 <_vfiprintf_r>
 800f30a:	b002      	add	sp, #8
 800f30c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f310:	b004      	add	sp, #16
 800f312:	4770      	bx	lr
 800f314:	20000024 	.word	0x20000024

0800f318 <rand>:
 800f318:	4b17      	ldr	r3, [pc, #92]	; (800f378 <rand+0x60>)
 800f31a:	b510      	push	{r4, lr}
 800f31c:	681c      	ldr	r4, [r3, #0]
 800f31e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f320:	b9b3      	cbnz	r3, 800f350 <rand+0x38>
 800f322:	2018      	movs	r0, #24
 800f324:	f000 f9a0 	bl	800f668 <malloc>
 800f328:	63a0      	str	r0, [r4, #56]	; 0x38
 800f32a:	b928      	cbnz	r0, 800f338 <rand+0x20>
 800f32c:	4602      	mov	r2, r0
 800f32e:	4b13      	ldr	r3, [pc, #76]	; (800f37c <rand+0x64>)
 800f330:	4813      	ldr	r0, [pc, #76]	; (800f380 <rand+0x68>)
 800f332:	214e      	movs	r1, #78	; 0x4e
 800f334:	f000 f870 	bl	800f418 <__assert_func>
 800f338:	4a12      	ldr	r2, [pc, #72]	; (800f384 <rand+0x6c>)
 800f33a:	4b13      	ldr	r3, [pc, #76]	; (800f388 <rand+0x70>)
 800f33c:	e9c0 2300 	strd	r2, r3, [r0]
 800f340:	4b12      	ldr	r3, [pc, #72]	; (800f38c <rand+0x74>)
 800f342:	6083      	str	r3, [r0, #8]
 800f344:	230b      	movs	r3, #11
 800f346:	8183      	strh	r3, [r0, #12]
 800f348:	2201      	movs	r2, #1
 800f34a:	2300      	movs	r3, #0
 800f34c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800f350:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f352:	480f      	ldr	r0, [pc, #60]	; (800f390 <rand+0x78>)
 800f354:	690a      	ldr	r2, [r1, #16]
 800f356:	694b      	ldr	r3, [r1, #20]
 800f358:	4c0e      	ldr	r4, [pc, #56]	; (800f394 <rand+0x7c>)
 800f35a:	4350      	muls	r0, r2
 800f35c:	fb04 0003 	mla	r0, r4, r3, r0
 800f360:	fba2 3404 	umull	r3, r4, r2, r4
 800f364:	1c5a      	adds	r2, r3, #1
 800f366:	4404      	add	r4, r0
 800f368:	f144 0000 	adc.w	r0, r4, #0
 800f36c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800f370:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800f374:	bd10      	pop	{r4, pc}
 800f376:	bf00      	nop
 800f378:	20000024 	.word	0x20000024
 800f37c:	0801432c 	.word	0x0801432c
 800f380:	08014343 	.word	0x08014343
 800f384:	abcd330e 	.word	0xabcd330e
 800f388:	e66d1234 	.word	0xe66d1234
 800f38c:	0005deec 	.word	0x0005deec
 800f390:	5851f42d 	.word	0x5851f42d
 800f394:	4c957f2d 	.word	0x4c957f2d

0800f398 <siprintf>:
 800f398:	b40e      	push	{r1, r2, r3}
 800f39a:	b500      	push	{lr}
 800f39c:	b09c      	sub	sp, #112	; 0x70
 800f39e:	ab1d      	add	r3, sp, #116	; 0x74
 800f3a0:	9002      	str	r0, [sp, #8]
 800f3a2:	9006      	str	r0, [sp, #24]
 800f3a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f3a8:	4809      	ldr	r0, [pc, #36]	; (800f3d0 <siprintf+0x38>)
 800f3aa:	9107      	str	r1, [sp, #28]
 800f3ac:	9104      	str	r1, [sp, #16]
 800f3ae:	4909      	ldr	r1, [pc, #36]	; (800f3d4 <siprintf+0x3c>)
 800f3b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3b4:	9105      	str	r1, [sp, #20]
 800f3b6:	6800      	ldr	r0, [r0, #0]
 800f3b8:	9301      	str	r3, [sp, #4]
 800f3ba:	a902      	add	r1, sp, #8
 800f3bc:	f000 fa62 	bl	800f884 <_svfiprintf_r>
 800f3c0:	9b02      	ldr	r3, [sp, #8]
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	701a      	strb	r2, [r3, #0]
 800f3c6:	b01c      	add	sp, #112	; 0x70
 800f3c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f3cc:	b003      	add	sp, #12
 800f3ce:	4770      	bx	lr
 800f3d0:	20000024 	.word	0x20000024
 800f3d4:	ffff0208 	.word	0xffff0208

0800f3d8 <strchr>:
 800f3d8:	b2c9      	uxtb	r1, r1
 800f3da:	4603      	mov	r3, r0
 800f3dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f3e0:	b11a      	cbz	r2, 800f3ea <strchr+0x12>
 800f3e2:	428a      	cmp	r2, r1
 800f3e4:	d1f9      	bne.n	800f3da <strchr+0x2>
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	4770      	bx	lr
 800f3ea:	2900      	cmp	r1, #0
 800f3ec:	bf18      	it	ne
 800f3ee:	2300      	movne	r3, #0
 800f3f0:	e7f9      	b.n	800f3e6 <strchr+0xe>

0800f3f2 <strncmp>:
 800f3f2:	b510      	push	{r4, lr}
 800f3f4:	b16a      	cbz	r2, 800f412 <strncmp+0x20>
 800f3f6:	3901      	subs	r1, #1
 800f3f8:	1884      	adds	r4, r0, r2
 800f3fa:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f3fe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f402:	4293      	cmp	r3, r2
 800f404:	d103      	bne.n	800f40e <strncmp+0x1c>
 800f406:	42a0      	cmp	r0, r4
 800f408:	d001      	beq.n	800f40e <strncmp+0x1c>
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d1f5      	bne.n	800f3fa <strncmp+0x8>
 800f40e:	1a98      	subs	r0, r3, r2
 800f410:	bd10      	pop	{r4, pc}
 800f412:	4610      	mov	r0, r2
 800f414:	e7fc      	b.n	800f410 <strncmp+0x1e>
	...

0800f418 <__assert_func>:
 800f418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f41a:	4614      	mov	r4, r2
 800f41c:	461a      	mov	r2, r3
 800f41e:	4b09      	ldr	r3, [pc, #36]	; (800f444 <__assert_func+0x2c>)
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	4605      	mov	r5, r0
 800f424:	68d8      	ldr	r0, [r3, #12]
 800f426:	b14c      	cbz	r4, 800f43c <__assert_func+0x24>
 800f428:	4b07      	ldr	r3, [pc, #28]	; (800f448 <__assert_func+0x30>)
 800f42a:	9100      	str	r1, [sp, #0]
 800f42c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f430:	4906      	ldr	r1, [pc, #24]	; (800f44c <__assert_func+0x34>)
 800f432:	462b      	mov	r3, r5
 800f434:	f000 f8e4 	bl	800f600 <fiprintf>
 800f438:	f000 ff38 	bl	80102ac <abort>
 800f43c:	4b04      	ldr	r3, [pc, #16]	; (800f450 <__assert_func+0x38>)
 800f43e:	461c      	mov	r4, r3
 800f440:	e7f3      	b.n	800f42a <__assert_func+0x12>
 800f442:	bf00      	nop
 800f444:	20000024 	.word	0x20000024
 800f448:	080143a2 	.word	0x080143a2
 800f44c:	080143af 	.word	0x080143af
 800f450:	080143dd 	.word	0x080143dd

0800f454 <std>:
 800f454:	2300      	movs	r3, #0
 800f456:	b510      	push	{r4, lr}
 800f458:	4604      	mov	r4, r0
 800f45a:	e9c0 3300 	strd	r3, r3, [r0]
 800f45e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f462:	6083      	str	r3, [r0, #8]
 800f464:	8181      	strh	r1, [r0, #12]
 800f466:	6643      	str	r3, [r0, #100]	; 0x64
 800f468:	81c2      	strh	r2, [r0, #14]
 800f46a:	6183      	str	r3, [r0, #24]
 800f46c:	4619      	mov	r1, r3
 800f46e:	2208      	movs	r2, #8
 800f470:	305c      	adds	r0, #92	; 0x5c
 800f472:	f7ff ff31 	bl	800f2d8 <memset>
 800f476:	4b05      	ldr	r3, [pc, #20]	; (800f48c <std+0x38>)
 800f478:	6263      	str	r3, [r4, #36]	; 0x24
 800f47a:	4b05      	ldr	r3, [pc, #20]	; (800f490 <std+0x3c>)
 800f47c:	62a3      	str	r3, [r4, #40]	; 0x28
 800f47e:	4b05      	ldr	r3, [pc, #20]	; (800f494 <std+0x40>)
 800f480:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f482:	4b05      	ldr	r3, [pc, #20]	; (800f498 <std+0x44>)
 800f484:	6224      	str	r4, [r4, #32]
 800f486:	6323      	str	r3, [r4, #48]	; 0x30
 800f488:	bd10      	pop	{r4, pc}
 800f48a:	bf00      	nop
 800f48c:	08010081 	.word	0x08010081
 800f490:	080100a3 	.word	0x080100a3
 800f494:	080100db 	.word	0x080100db
 800f498:	080100ff 	.word	0x080100ff

0800f49c <_cleanup_r>:
 800f49c:	4901      	ldr	r1, [pc, #4]	; (800f4a4 <_cleanup_r+0x8>)
 800f49e:	f000 b8c1 	b.w	800f624 <_fwalk_reent>
 800f4a2:	bf00      	nop
 800f4a4:	080103e9 	.word	0x080103e9

0800f4a8 <__sfmoreglue>:
 800f4a8:	b570      	push	{r4, r5, r6, lr}
 800f4aa:	1e4a      	subs	r2, r1, #1
 800f4ac:	2568      	movs	r5, #104	; 0x68
 800f4ae:	4355      	muls	r5, r2
 800f4b0:	460e      	mov	r6, r1
 800f4b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f4b6:	f000 f92f 	bl	800f718 <_malloc_r>
 800f4ba:	4604      	mov	r4, r0
 800f4bc:	b140      	cbz	r0, 800f4d0 <__sfmoreglue+0x28>
 800f4be:	2100      	movs	r1, #0
 800f4c0:	e9c0 1600 	strd	r1, r6, [r0]
 800f4c4:	300c      	adds	r0, #12
 800f4c6:	60a0      	str	r0, [r4, #8]
 800f4c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f4cc:	f7ff ff04 	bl	800f2d8 <memset>
 800f4d0:	4620      	mov	r0, r4
 800f4d2:	bd70      	pop	{r4, r5, r6, pc}

0800f4d4 <__sfp_lock_acquire>:
 800f4d4:	4801      	ldr	r0, [pc, #4]	; (800f4dc <__sfp_lock_acquire+0x8>)
 800f4d6:	f000 b8c5 	b.w	800f664 <__retarget_lock_acquire_recursive>
 800f4da:	bf00      	nop
 800f4dc:	20008ed4 	.word	0x20008ed4

0800f4e0 <__sfp_lock_release>:
 800f4e0:	4801      	ldr	r0, [pc, #4]	; (800f4e8 <__sfp_lock_release+0x8>)
 800f4e2:	f000 b8c0 	b.w	800f666 <__retarget_lock_release_recursive>
 800f4e6:	bf00      	nop
 800f4e8:	20008ed4 	.word	0x20008ed4

0800f4ec <__sinit_lock_acquire>:
 800f4ec:	4801      	ldr	r0, [pc, #4]	; (800f4f4 <__sinit_lock_acquire+0x8>)
 800f4ee:	f000 b8b9 	b.w	800f664 <__retarget_lock_acquire_recursive>
 800f4f2:	bf00      	nop
 800f4f4:	20008ecf 	.word	0x20008ecf

0800f4f8 <__sinit_lock_release>:
 800f4f8:	4801      	ldr	r0, [pc, #4]	; (800f500 <__sinit_lock_release+0x8>)
 800f4fa:	f000 b8b4 	b.w	800f666 <__retarget_lock_release_recursive>
 800f4fe:	bf00      	nop
 800f500:	20008ecf 	.word	0x20008ecf

0800f504 <__sinit>:
 800f504:	b510      	push	{r4, lr}
 800f506:	4604      	mov	r4, r0
 800f508:	f7ff fff0 	bl	800f4ec <__sinit_lock_acquire>
 800f50c:	69a3      	ldr	r3, [r4, #24]
 800f50e:	b11b      	cbz	r3, 800f518 <__sinit+0x14>
 800f510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f514:	f7ff bff0 	b.w	800f4f8 <__sinit_lock_release>
 800f518:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f51c:	6523      	str	r3, [r4, #80]	; 0x50
 800f51e:	4b13      	ldr	r3, [pc, #76]	; (800f56c <__sinit+0x68>)
 800f520:	4a13      	ldr	r2, [pc, #76]	; (800f570 <__sinit+0x6c>)
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	62a2      	str	r2, [r4, #40]	; 0x28
 800f526:	42a3      	cmp	r3, r4
 800f528:	bf04      	itt	eq
 800f52a:	2301      	moveq	r3, #1
 800f52c:	61a3      	streq	r3, [r4, #24]
 800f52e:	4620      	mov	r0, r4
 800f530:	f000 f820 	bl	800f574 <__sfp>
 800f534:	6060      	str	r0, [r4, #4]
 800f536:	4620      	mov	r0, r4
 800f538:	f000 f81c 	bl	800f574 <__sfp>
 800f53c:	60a0      	str	r0, [r4, #8]
 800f53e:	4620      	mov	r0, r4
 800f540:	f000 f818 	bl	800f574 <__sfp>
 800f544:	2200      	movs	r2, #0
 800f546:	60e0      	str	r0, [r4, #12]
 800f548:	2104      	movs	r1, #4
 800f54a:	6860      	ldr	r0, [r4, #4]
 800f54c:	f7ff ff82 	bl	800f454 <std>
 800f550:	68a0      	ldr	r0, [r4, #8]
 800f552:	2201      	movs	r2, #1
 800f554:	2109      	movs	r1, #9
 800f556:	f7ff ff7d 	bl	800f454 <std>
 800f55a:	68e0      	ldr	r0, [r4, #12]
 800f55c:	2202      	movs	r2, #2
 800f55e:	2112      	movs	r1, #18
 800f560:	f7ff ff78 	bl	800f454 <std>
 800f564:	2301      	movs	r3, #1
 800f566:	61a3      	str	r3, [r4, #24]
 800f568:	e7d2      	b.n	800f510 <__sinit+0xc>
 800f56a:	bf00      	nop
 800f56c:	08014328 	.word	0x08014328
 800f570:	0800f49d 	.word	0x0800f49d

0800f574 <__sfp>:
 800f574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f576:	4607      	mov	r7, r0
 800f578:	f7ff ffac 	bl	800f4d4 <__sfp_lock_acquire>
 800f57c:	4b1e      	ldr	r3, [pc, #120]	; (800f5f8 <__sfp+0x84>)
 800f57e:	681e      	ldr	r6, [r3, #0]
 800f580:	69b3      	ldr	r3, [r6, #24]
 800f582:	b913      	cbnz	r3, 800f58a <__sfp+0x16>
 800f584:	4630      	mov	r0, r6
 800f586:	f7ff ffbd 	bl	800f504 <__sinit>
 800f58a:	3648      	adds	r6, #72	; 0x48
 800f58c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f590:	3b01      	subs	r3, #1
 800f592:	d503      	bpl.n	800f59c <__sfp+0x28>
 800f594:	6833      	ldr	r3, [r6, #0]
 800f596:	b30b      	cbz	r3, 800f5dc <__sfp+0x68>
 800f598:	6836      	ldr	r6, [r6, #0]
 800f59a:	e7f7      	b.n	800f58c <__sfp+0x18>
 800f59c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f5a0:	b9d5      	cbnz	r5, 800f5d8 <__sfp+0x64>
 800f5a2:	4b16      	ldr	r3, [pc, #88]	; (800f5fc <__sfp+0x88>)
 800f5a4:	60e3      	str	r3, [r4, #12]
 800f5a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f5aa:	6665      	str	r5, [r4, #100]	; 0x64
 800f5ac:	f000 f859 	bl	800f662 <__retarget_lock_init_recursive>
 800f5b0:	f7ff ff96 	bl	800f4e0 <__sfp_lock_release>
 800f5b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f5b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f5bc:	6025      	str	r5, [r4, #0]
 800f5be:	61a5      	str	r5, [r4, #24]
 800f5c0:	2208      	movs	r2, #8
 800f5c2:	4629      	mov	r1, r5
 800f5c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f5c8:	f7ff fe86 	bl	800f2d8 <memset>
 800f5cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f5d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f5d4:	4620      	mov	r0, r4
 800f5d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5d8:	3468      	adds	r4, #104	; 0x68
 800f5da:	e7d9      	b.n	800f590 <__sfp+0x1c>
 800f5dc:	2104      	movs	r1, #4
 800f5de:	4638      	mov	r0, r7
 800f5e0:	f7ff ff62 	bl	800f4a8 <__sfmoreglue>
 800f5e4:	4604      	mov	r4, r0
 800f5e6:	6030      	str	r0, [r6, #0]
 800f5e8:	2800      	cmp	r0, #0
 800f5ea:	d1d5      	bne.n	800f598 <__sfp+0x24>
 800f5ec:	f7ff ff78 	bl	800f4e0 <__sfp_lock_release>
 800f5f0:	230c      	movs	r3, #12
 800f5f2:	603b      	str	r3, [r7, #0]
 800f5f4:	e7ee      	b.n	800f5d4 <__sfp+0x60>
 800f5f6:	bf00      	nop
 800f5f8:	08014328 	.word	0x08014328
 800f5fc:	ffff0001 	.word	0xffff0001

0800f600 <fiprintf>:
 800f600:	b40e      	push	{r1, r2, r3}
 800f602:	b503      	push	{r0, r1, lr}
 800f604:	4601      	mov	r1, r0
 800f606:	ab03      	add	r3, sp, #12
 800f608:	4805      	ldr	r0, [pc, #20]	; (800f620 <fiprintf+0x20>)
 800f60a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f60e:	6800      	ldr	r0, [r0, #0]
 800f610:	9301      	str	r3, [sp, #4]
 800f612:	f000 fa61 	bl	800fad8 <_vfiprintf_r>
 800f616:	b002      	add	sp, #8
 800f618:	f85d eb04 	ldr.w	lr, [sp], #4
 800f61c:	b003      	add	sp, #12
 800f61e:	4770      	bx	lr
 800f620:	20000024 	.word	0x20000024

0800f624 <_fwalk_reent>:
 800f624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f628:	4606      	mov	r6, r0
 800f62a:	4688      	mov	r8, r1
 800f62c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f630:	2700      	movs	r7, #0
 800f632:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f636:	f1b9 0901 	subs.w	r9, r9, #1
 800f63a:	d505      	bpl.n	800f648 <_fwalk_reent+0x24>
 800f63c:	6824      	ldr	r4, [r4, #0]
 800f63e:	2c00      	cmp	r4, #0
 800f640:	d1f7      	bne.n	800f632 <_fwalk_reent+0xe>
 800f642:	4638      	mov	r0, r7
 800f644:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f648:	89ab      	ldrh	r3, [r5, #12]
 800f64a:	2b01      	cmp	r3, #1
 800f64c:	d907      	bls.n	800f65e <_fwalk_reent+0x3a>
 800f64e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f652:	3301      	adds	r3, #1
 800f654:	d003      	beq.n	800f65e <_fwalk_reent+0x3a>
 800f656:	4629      	mov	r1, r5
 800f658:	4630      	mov	r0, r6
 800f65a:	47c0      	blx	r8
 800f65c:	4307      	orrs	r7, r0
 800f65e:	3568      	adds	r5, #104	; 0x68
 800f660:	e7e9      	b.n	800f636 <_fwalk_reent+0x12>

0800f662 <__retarget_lock_init_recursive>:
 800f662:	4770      	bx	lr

0800f664 <__retarget_lock_acquire_recursive>:
 800f664:	4770      	bx	lr

0800f666 <__retarget_lock_release_recursive>:
 800f666:	4770      	bx	lr

0800f668 <malloc>:
 800f668:	4b02      	ldr	r3, [pc, #8]	; (800f674 <malloc+0xc>)
 800f66a:	4601      	mov	r1, r0
 800f66c:	6818      	ldr	r0, [r3, #0]
 800f66e:	f000 b853 	b.w	800f718 <_malloc_r>
 800f672:	bf00      	nop
 800f674:	20000024 	.word	0x20000024

0800f678 <_free_r>:
 800f678:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f67a:	2900      	cmp	r1, #0
 800f67c:	d048      	beq.n	800f710 <_free_r+0x98>
 800f67e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f682:	9001      	str	r0, [sp, #4]
 800f684:	2b00      	cmp	r3, #0
 800f686:	f1a1 0404 	sub.w	r4, r1, #4
 800f68a:	bfb8      	it	lt
 800f68c:	18e4      	addlt	r4, r4, r3
 800f68e:	f000 ff5d 	bl	801054c <__malloc_lock>
 800f692:	4a20      	ldr	r2, [pc, #128]	; (800f714 <_free_r+0x9c>)
 800f694:	9801      	ldr	r0, [sp, #4]
 800f696:	6813      	ldr	r3, [r2, #0]
 800f698:	4615      	mov	r5, r2
 800f69a:	b933      	cbnz	r3, 800f6aa <_free_r+0x32>
 800f69c:	6063      	str	r3, [r4, #4]
 800f69e:	6014      	str	r4, [r2, #0]
 800f6a0:	b003      	add	sp, #12
 800f6a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f6a6:	f000 bf57 	b.w	8010558 <__malloc_unlock>
 800f6aa:	42a3      	cmp	r3, r4
 800f6ac:	d90b      	bls.n	800f6c6 <_free_r+0x4e>
 800f6ae:	6821      	ldr	r1, [r4, #0]
 800f6b0:	1862      	adds	r2, r4, r1
 800f6b2:	4293      	cmp	r3, r2
 800f6b4:	bf04      	itt	eq
 800f6b6:	681a      	ldreq	r2, [r3, #0]
 800f6b8:	685b      	ldreq	r3, [r3, #4]
 800f6ba:	6063      	str	r3, [r4, #4]
 800f6bc:	bf04      	itt	eq
 800f6be:	1852      	addeq	r2, r2, r1
 800f6c0:	6022      	streq	r2, [r4, #0]
 800f6c2:	602c      	str	r4, [r5, #0]
 800f6c4:	e7ec      	b.n	800f6a0 <_free_r+0x28>
 800f6c6:	461a      	mov	r2, r3
 800f6c8:	685b      	ldr	r3, [r3, #4]
 800f6ca:	b10b      	cbz	r3, 800f6d0 <_free_r+0x58>
 800f6cc:	42a3      	cmp	r3, r4
 800f6ce:	d9fa      	bls.n	800f6c6 <_free_r+0x4e>
 800f6d0:	6811      	ldr	r1, [r2, #0]
 800f6d2:	1855      	adds	r5, r2, r1
 800f6d4:	42a5      	cmp	r5, r4
 800f6d6:	d10b      	bne.n	800f6f0 <_free_r+0x78>
 800f6d8:	6824      	ldr	r4, [r4, #0]
 800f6da:	4421      	add	r1, r4
 800f6dc:	1854      	adds	r4, r2, r1
 800f6de:	42a3      	cmp	r3, r4
 800f6e0:	6011      	str	r1, [r2, #0]
 800f6e2:	d1dd      	bne.n	800f6a0 <_free_r+0x28>
 800f6e4:	681c      	ldr	r4, [r3, #0]
 800f6e6:	685b      	ldr	r3, [r3, #4]
 800f6e8:	6053      	str	r3, [r2, #4]
 800f6ea:	4421      	add	r1, r4
 800f6ec:	6011      	str	r1, [r2, #0]
 800f6ee:	e7d7      	b.n	800f6a0 <_free_r+0x28>
 800f6f0:	d902      	bls.n	800f6f8 <_free_r+0x80>
 800f6f2:	230c      	movs	r3, #12
 800f6f4:	6003      	str	r3, [r0, #0]
 800f6f6:	e7d3      	b.n	800f6a0 <_free_r+0x28>
 800f6f8:	6825      	ldr	r5, [r4, #0]
 800f6fa:	1961      	adds	r1, r4, r5
 800f6fc:	428b      	cmp	r3, r1
 800f6fe:	bf04      	itt	eq
 800f700:	6819      	ldreq	r1, [r3, #0]
 800f702:	685b      	ldreq	r3, [r3, #4]
 800f704:	6063      	str	r3, [r4, #4]
 800f706:	bf04      	itt	eq
 800f708:	1949      	addeq	r1, r1, r5
 800f70a:	6021      	streq	r1, [r4, #0]
 800f70c:	6054      	str	r4, [r2, #4]
 800f70e:	e7c7      	b.n	800f6a0 <_free_r+0x28>
 800f710:	b003      	add	sp, #12
 800f712:	bd30      	pop	{r4, r5, pc}
 800f714:	20000668 	.word	0x20000668

0800f718 <_malloc_r>:
 800f718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f71a:	1ccd      	adds	r5, r1, #3
 800f71c:	f025 0503 	bic.w	r5, r5, #3
 800f720:	3508      	adds	r5, #8
 800f722:	2d0c      	cmp	r5, #12
 800f724:	bf38      	it	cc
 800f726:	250c      	movcc	r5, #12
 800f728:	2d00      	cmp	r5, #0
 800f72a:	4606      	mov	r6, r0
 800f72c:	db01      	blt.n	800f732 <_malloc_r+0x1a>
 800f72e:	42a9      	cmp	r1, r5
 800f730:	d903      	bls.n	800f73a <_malloc_r+0x22>
 800f732:	230c      	movs	r3, #12
 800f734:	6033      	str	r3, [r6, #0]
 800f736:	2000      	movs	r0, #0
 800f738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f73a:	f000 ff07 	bl	801054c <__malloc_lock>
 800f73e:	4921      	ldr	r1, [pc, #132]	; (800f7c4 <_malloc_r+0xac>)
 800f740:	680a      	ldr	r2, [r1, #0]
 800f742:	4614      	mov	r4, r2
 800f744:	b99c      	cbnz	r4, 800f76e <_malloc_r+0x56>
 800f746:	4f20      	ldr	r7, [pc, #128]	; (800f7c8 <_malloc_r+0xb0>)
 800f748:	683b      	ldr	r3, [r7, #0]
 800f74a:	b923      	cbnz	r3, 800f756 <_malloc_r+0x3e>
 800f74c:	4621      	mov	r1, r4
 800f74e:	4630      	mov	r0, r6
 800f750:	f000 fc86 	bl	8010060 <_sbrk_r>
 800f754:	6038      	str	r0, [r7, #0]
 800f756:	4629      	mov	r1, r5
 800f758:	4630      	mov	r0, r6
 800f75a:	f000 fc81 	bl	8010060 <_sbrk_r>
 800f75e:	1c43      	adds	r3, r0, #1
 800f760:	d123      	bne.n	800f7aa <_malloc_r+0x92>
 800f762:	230c      	movs	r3, #12
 800f764:	6033      	str	r3, [r6, #0]
 800f766:	4630      	mov	r0, r6
 800f768:	f000 fef6 	bl	8010558 <__malloc_unlock>
 800f76c:	e7e3      	b.n	800f736 <_malloc_r+0x1e>
 800f76e:	6823      	ldr	r3, [r4, #0]
 800f770:	1b5b      	subs	r3, r3, r5
 800f772:	d417      	bmi.n	800f7a4 <_malloc_r+0x8c>
 800f774:	2b0b      	cmp	r3, #11
 800f776:	d903      	bls.n	800f780 <_malloc_r+0x68>
 800f778:	6023      	str	r3, [r4, #0]
 800f77a:	441c      	add	r4, r3
 800f77c:	6025      	str	r5, [r4, #0]
 800f77e:	e004      	b.n	800f78a <_malloc_r+0x72>
 800f780:	6863      	ldr	r3, [r4, #4]
 800f782:	42a2      	cmp	r2, r4
 800f784:	bf0c      	ite	eq
 800f786:	600b      	streq	r3, [r1, #0]
 800f788:	6053      	strne	r3, [r2, #4]
 800f78a:	4630      	mov	r0, r6
 800f78c:	f000 fee4 	bl	8010558 <__malloc_unlock>
 800f790:	f104 000b 	add.w	r0, r4, #11
 800f794:	1d23      	adds	r3, r4, #4
 800f796:	f020 0007 	bic.w	r0, r0, #7
 800f79a:	1ac2      	subs	r2, r0, r3
 800f79c:	d0cc      	beq.n	800f738 <_malloc_r+0x20>
 800f79e:	1a1b      	subs	r3, r3, r0
 800f7a0:	50a3      	str	r3, [r4, r2]
 800f7a2:	e7c9      	b.n	800f738 <_malloc_r+0x20>
 800f7a4:	4622      	mov	r2, r4
 800f7a6:	6864      	ldr	r4, [r4, #4]
 800f7a8:	e7cc      	b.n	800f744 <_malloc_r+0x2c>
 800f7aa:	1cc4      	adds	r4, r0, #3
 800f7ac:	f024 0403 	bic.w	r4, r4, #3
 800f7b0:	42a0      	cmp	r0, r4
 800f7b2:	d0e3      	beq.n	800f77c <_malloc_r+0x64>
 800f7b4:	1a21      	subs	r1, r4, r0
 800f7b6:	4630      	mov	r0, r6
 800f7b8:	f000 fc52 	bl	8010060 <_sbrk_r>
 800f7bc:	3001      	adds	r0, #1
 800f7be:	d1dd      	bne.n	800f77c <_malloc_r+0x64>
 800f7c0:	e7cf      	b.n	800f762 <_malloc_r+0x4a>
 800f7c2:	bf00      	nop
 800f7c4:	20000668 	.word	0x20000668
 800f7c8:	2000066c 	.word	0x2000066c

0800f7cc <__ssputs_r>:
 800f7cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7d0:	688e      	ldr	r6, [r1, #8]
 800f7d2:	429e      	cmp	r6, r3
 800f7d4:	4682      	mov	sl, r0
 800f7d6:	460c      	mov	r4, r1
 800f7d8:	4690      	mov	r8, r2
 800f7da:	461f      	mov	r7, r3
 800f7dc:	d838      	bhi.n	800f850 <__ssputs_r+0x84>
 800f7de:	898a      	ldrh	r2, [r1, #12]
 800f7e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f7e4:	d032      	beq.n	800f84c <__ssputs_r+0x80>
 800f7e6:	6825      	ldr	r5, [r4, #0]
 800f7e8:	6909      	ldr	r1, [r1, #16]
 800f7ea:	eba5 0901 	sub.w	r9, r5, r1
 800f7ee:	6965      	ldr	r5, [r4, #20]
 800f7f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f7f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f7f8:	3301      	adds	r3, #1
 800f7fa:	444b      	add	r3, r9
 800f7fc:	106d      	asrs	r5, r5, #1
 800f7fe:	429d      	cmp	r5, r3
 800f800:	bf38      	it	cc
 800f802:	461d      	movcc	r5, r3
 800f804:	0553      	lsls	r3, r2, #21
 800f806:	d531      	bpl.n	800f86c <__ssputs_r+0xa0>
 800f808:	4629      	mov	r1, r5
 800f80a:	f7ff ff85 	bl	800f718 <_malloc_r>
 800f80e:	4606      	mov	r6, r0
 800f810:	b950      	cbnz	r0, 800f828 <__ssputs_r+0x5c>
 800f812:	230c      	movs	r3, #12
 800f814:	f8ca 3000 	str.w	r3, [sl]
 800f818:	89a3      	ldrh	r3, [r4, #12]
 800f81a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f81e:	81a3      	strh	r3, [r4, #12]
 800f820:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f828:	6921      	ldr	r1, [r4, #16]
 800f82a:	464a      	mov	r2, r9
 800f82c:	f7ff fd2c 	bl	800f288 <memcpy>
 800f830:	89a3      	ldrh	r3, [r4, #12]
 800f832:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f83a:	81a3      	strh	r3, [r4, #12]
 800f83c:	6126      	str	r6, [r4, #16]
 800f83e:	6165      	str	r5, [r4, #20]
 800f840:	444e      	add	r6, r9
 800f842:	eba5 0509 	sub.w	r5, r5, r9
 800f846:	6026      	str	r6, [r4, #0]
 800f848:	60a5      	str	r5, [r4, #8]
 800f84a:	463e      	mov	r6, r7
 800f84c:	42be      	cmp	r6, r7
 800f84e:	d900      	bls.n	800f852 <__ssputs_r+0x86>
 800f850:	463e      	mov	r6, r7
 800f852:	4632      	mov	r2, r6
 800f854:	6820      	ldr	r0, [r4, #0]
 800f856:	4641      	mov	r1, r8
 800f858:	f7ff fd24 	bl	800f2a4 <memmove>
 800f85c:	68a3      	ldr	r3, [r4, #8]
 800f85e:	6822      	ldr	r2, [r4, #0]
 800f860:	1b9b      	subs	r3, r3, r6
 800f862:	4432      	add	r2, r6
 800f864:	60a3      	str	r3, [r4, #8]
 800f866:	6022      	str	r2, [r4, #0]
 800f868:	2000      	movs	r0, #0
 800f86a:	e7db      	b.n	800f824 <__ssputs_r+0x58>
 800f86c:	462a      	mov	r2, r5
 800f86e:	f000 fe79 	bl	8010564 <_realloc_r>
 800f872:	4606      	mov	r6, r0
 800f874:	2800      	cmp	r0, #0
 800f876:	d1e1      	bne.n	800f83c <__ssputs_r+0x70>
 800f878:	6921      	ldr	r1, [r4, #16]
 800f87a:	4650      	mov	r0, sl
 800f87c:	f7ff fefc 	bl	800f678 <_free_r>
 800f880:	e7c7      	b.n	800f812 <__ssputs_r+0x46>
	...

0800f884 <_svfiprintf_r>:
 800f884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f888:	4698      	mov	r8, r3
 800f88a:	898b      	ldrh	r3, [r1, #12]
 800f88c:	061b      	lsls	r3, r3, #24
 800f88e:	b09d      	sub	sp, #116	; 0x74
 800f890:	4607      	mov	r7, r0
 800f892:	460d      	mov	r5, r1
 800f894:	4614      	mov	r4, r2
 800f896:	d50e      	bpl.n	800f8b6 <_svfiprintf_r+0x32>
 800f898:	690b      	ldr	r3, [r1, #16]
 800f89a:	b963      	cbnz	r3, 800f8b6 <_svfiprintf_r+0x32>
 800f89c:	2140      	movs	r1, #64	; 0x40
 800f89e:	f7ff ff3b 	bl	800f718 <_malloc_r>
 800f8a2:	6028      	str	r0, [r5, #0]
 800f8a4:	6128      	str	r0, [r5, #16]
 800f8a6:	b920      	cbnz	r0, 800f8b2 <_svfiprintf_r+0x2e>
 800f8a8:	230c      	movs	r3, #12
 800f8aa:	603b      	str	r3, [r7, #0]
 800f8ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f8b0:	e0d1      	b.n	800fa56 <_svfiprintf_r+0x1d2>
 800f8b2:	2340      	movs	r3, #64	; 0x40
 800f8b4:	616b      	str	r3, [r5, #20]
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	9309      	str	r3, [sp, #36]	; 0x24
 800f8ba:	2320      	movs	r3, #32
 800f8bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f8c0:	f8cd 800c 	str.w	r8, [sp, #12]
 800f8c4:	2330      	movs	r3, #48	; 0x30
 800f8c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fa70 <_svfiprintf_r+0x1ec>
 800f8ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f8ce:	f04f 0901 	mov.w	r9, #1
 800f8d2:	4623      	mov	r3, r4
 800f8d4:	469a      	mov	sl, r3
 800f8d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f8da:	b10a      	cbz	r2, 800f8e0 <_svfiprintf_r+0x5c>
 800f8dc:	2a25      	cmp	r2, #37	; 0x25
 800f8de:	d1f9      	bne.n	800f8d4 <_svfiprintf_r+0x50>
 800f8e0:	ebba 0b04 	subs.w	fp, sl, r4
 800f8e4:	d00b      	beq.n	800f8fe <_svfiprintf_r+0x7a>
 800f8e6:	465b      	mov	r3, fp
 800f8e8:	4622      	mov	r2, r4
 800f8ea:	4629      	mov	r1, r5
 800f8ec:	4638      	mov	r0, r7
 800f8ee:	f7ff ff6d 	bl	800f7cc <__ssputs_r>
 800f8f2:	3001      	adds	r0, #1
 800f8f4:	f000 80aa 	beq.w	800fa4c <_svfiprintf_r+0x1c8>
 800f8f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f8fa:	445a      	add	r2, fp
 800f8fc:	9209      	str	r2, [sp, #36]	; 0x24
 800f8fe:	f89a 3000 	ldrb.w	r3, [sl]
 800f902:	2b00      	cmp	r3, #0
 800f904:	f000 80a2 	beq.w	800fa4c <_svfiprintf_r+0x1c8>
 800f908:	2300      	movs	r3, #0
 800f90a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f90e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f912:	f10a 0a01 	add.w	sl, sl, #1
 800f916:	9304      	str	r3, [sp, #16]
 800f918:	9307      	str	r3, [sp, #28]
 800f91a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f91e:	931a      	str	r3, [sp, #104]	; 0x68
 800f920:	4654      	mov	r4, sl
 800f922:	2205      	movs	r2, #5
 800f924:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f928:	4851      	ldr	r0, [pc, #324]	; (800fa70 <_svfiprintf_r+0x1ec>)
 800f92a:	f7f0 fc69 	bl	8000200 <memchr>
 800f92e:	9a04      	ldr	r2, [sp, #16]
 800f930:	b9d8      	cbnz	r0, 800f96a <_svfiprintf_r+0xe6>
 800f932:	06d0      	lsls	r0, r2, #27
 800f934:	bf44      	itt	mi
 800f936:	2320      	movmi	r3, #32
 800f938:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f93c:	0711      	lsls	r1, r2, #28
 800f93e:	bf44      	itt	mi
 800f940:	232b      	movmi	r3, #43	; 0x2b
 800f942:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f946:	f89a 3000 	ldrb.w	r3, [sl]
 800f94a:	2b2a      	cmp	r3, #42	; 0x2a
 800f94c:	d015      	beq.n	800f97a <_svfiprintf_r+0xf6>
 800f94e:	9a07      	ldr	r2, [sp, #28]
 800f950:	4654      	mov	r4, sl
 800f952:	2000      	movs	r0, #0
 800f954:	f04f 0c0a 	mov.w	ip, #10
 800f958:	4621      	mov	r1, r4
 800f95a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f95e:	3b30      	subs	r3, #48	; 0x30
 800f960:	2b09      	cmp	r3, #9
 800f962:	d94e      	bls.n	800fa02 <_svfiprintf_r+0x17e>
 800f964:	b1b0      	cbz	r0, 800f994 <_svfiprintf_r+0x110>
 800f966:	9207      	str	r2, [sp, #28]
 800f968:	e014      	b.n	800f994 <_svfiprintf_r+0x110>
 800f96a:	eba0 0308 	sub.w	r3, r0, r8
 800f96e:	fa09 f303 	lsl.w	r3, r9, r3
 800f972:	4313      	orrs	r3, r2
 800f974:	9304      	str	r3, [sp, #16]
 800f976:	46a2      	mov	sl, r4
 800f978:	e7d2      	b.n	800f920 <_svfiprintf_r+0x9c>
 800f97a:	9b03      	ldr	r3, [sp, #12]
 800f97c:	1d19      	adds	r1, r3, #4
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	9103      	str	r1, [sp, #12]
 800f982:	2b00      	cmp	r3, #0
 800f984:	bfbb      	ittet	lt
 800f986:	425b      	neglt	r3, r3
 800f988:	f042 0202 	orrlt.w	r2, r2, #2
 800f98c:	9307      	strge	r3, [sp, #28]
 800f98e:	9307      	strlt	r3, [sp, #28]
 800f990:	bfb8      	it	lt
 800f992:	9204      	strlt	r2, [sp, #16]
 800f994:	7823      	ldrb	r3, [r4, #0]
 800f996:	2b2e      	cmp	r3, #46	; 0x2e
 800f998:	d10c      	bne.n	800f9b4 <_svfiprintf_r+0x130>
 800f99a:	7863      	ldrb	r3, [r4, #1]
 800f99c:	2b2a      	cmp	r3, #42	; 0x2a
 800f99e:	d135      	bne.n	800fa0c <_svfiprintf_r+0x188>
 800f9a0:	9b03      	ldr	r3, [sp, #12]
 800f9a2:	1d1a      	adds	r2, r3, #4
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	9203      	str	r2, [sp, #12]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	bfb8      	it	lt
 800f9ac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f9b0:	3402      	adds	r4, #2
 800f9b2:	9305      	str	r3, [sp, #20]
 800f9b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fa80 <_svfiprintf_r+0x1fc>
 800f9b8:	7821      	ldrb	r1, [r4, #0]
 800f9ba:	2203      	movs	r2, #3
 800f9bc:	4650      	mov	r0, sl
 800f9be:	f7f0 fc1f 	bl	8000200 <memchr>
 800f9c2:	b140      	cbz	r0, 800f9d6 <_svfiprintf_r+0x152>
 800f9c4:	2340      	movs	r3, #64	; 0x40
 800f9c6:	eba0 000a 	sub.w	r0, r0, sl
 800f9ca:	fa03 f000 	lsl.w	r0, r3, r0
 800f9ce:	9b04      	ldr	r3, [sp, #16]
 800f9d0:	4303      	orrs	r3, r0
 800f9d2:	3401      	adds	r4, #1
 800f9d4:	9304      	str	r3, [sp, #16]
 800f9d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9da:	4826      	ldr	r0, [pc, #152]	; (800fa74 <_svfiprintf_r+0x1f0>)
 800f9dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f9e0:	2206      	movs	r2, #6
 800f9e2:	f7f0 fc0d 	bl	8000200 <memchr>
 800f9e6:	2800      	cmp	r0, #0
 800f9e8:	d038      	beq.n	800fa5c <_svfiprintf_r+0x1d8>
 800f9ea:	4b23      	ldr	r3, [pc, #140]	; (800fa78 <_svfiprintf_r+0x1f4>)
 800f9ec:	bb1b      	cbnz	r3, 800fa36 <_svfiprintf_r+0x1b2>
 800f9ee:	9b03      	ldr	r3, [sp, #12]
 800f9f0:	3307      	adds	r3, #7
 800f9f2:	f023 0307 	bic.w	r3, r3, #7
 800f9f6:	3308      	adds	r3, #8
 800f9f8:	9303      	str	r3, [sp, #12]
 800f9fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9fc:	4433      	add	r3, r6
 800f9fe:	9309      	str	r3, [sp, #36]	; 0x24
 800fa00:	e767      	b.n	800f8d2 <_svfiprintf_r+0x4e>
 800fa02:	fb0c 3202 	mla	r2, ip, r2, r3
 800fa06:	460c      	mov	r4, r1
 800fa08:	2001      	movs	r0, #1
 800fa0a:	e7a5      	b.n	800f958 <_svfiprintf_r+0xd4>
 800fa0c:	2300      	movs	r3, #0
 800fa0e:	3401      	adds	r4, #1
 800fa10:	9305      	str	r3, [sp, #20]
 800fa12:	4619      	mov	r1, r3
 800fa14:	f04f 0c0a 	mov.w	ip, #10
 800fa18:	4620      	mov	r0, r4
 800fa1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fa1e:	3a30      	subs	r2, #48	; 0x30
 800fa20:	2a09      	cmp	r2, #9
 800fa22:	d903      	bls.n	800fa2c <_svfiprintf_r+0x1a8>
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d0c5      	beq.n	800f9b4 <_svfiprintf_r+0x130>
 800fa28:	9105      	str	r1, [sp, #20]
 800fa2a:	e7c3      	b.n	800f9b4 <_svfiprintf_r+0x130>
 800fa2c:	fb0c 2101 	mla	r1, ip, r1, r2
 800fa30:	4604      	mov	r4, r0
 800fa32:	2301      	movs	r3, #1
 800fa34:	e7f0      	b.n	800fa18 <_svfiprintf_r+0x194>
 800fa36:	ab03      	add	r3, sp, #12
 800fa38:	9300      	str	r3, [sp, #0]
 800fa3a:	462a      	mov	r2, r5
 800fa3c:	4b0f      	ldr	r3, [pc, #60]	; (800fa7c <_svfiprintf_r+0x1f8>)
 800fa3e:	a904      	add	r1, sp, #16
 800fa40:	4638      	mov	r0, r7
 800fa42:	f3af 8000 	nop.w
 800fa46:	1c42      	adds	r2, r0, #1
 800fa48:	4606      	mov	r6, r0
 800fa4a:	d1d6      	bne.n	800f9fa <_svfiprintf_r+0x176>
 800fa4c:	89ab      	ldrh	r3, [r5, #12]
 800fa4e:	065b      	lsls	r3, r3, #25
 800fa50:	f53f af2c 	bmi.w	800f8ac <_svfiprintf_r+0x28>
 800fa54:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fa56:	b01d      	add	sp, #116	; 0x74
 800fa58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa5c:	ab03      	add	r3, sp, #12
 800fa5e:	9300      	str	r3, [sp, #0]
 800fa60:	462a      	mov	r2, r5
 800fa62:	4b06      	ldr	r3, [pc, #24]	; (800fa7c <_svfiprintf_r+0x1f8>)
 800fa64:	a904      	add	r1, sp, #16
 800fa66:	4638      	mov	r0, r7
 800fa68:	f000 f9d4 	bl	800fe14 <_printf_i>
 800fa6c:	e7eb      	b.n	800fa46 <_svfiprintf_r+0x1c2>
 800fa6e:	bf00      	nop
 800fa70:	08014440 	.word	0x08014440
 800fa74:	0801444a 	.word	0x0801444a
 800fa78:	00000000 	.word	0x00000000
 800fa7c:	0800f7cd 	.word	0x0800f7cd
 800fa80:	08014446 	.word	0x08014446

0800fa84 <__sfputc_r>:
 800fa84:	6893      	ldr	r3, [r2, #8]
 800fa86:	3b01      	subs	r3, #1
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	b410      	push	{r4}
 800fa8c:	6093      	str	r3, [r2, #8]
 800fa8e:	da08      	bge.n	800faa2 <__sfputc_r+0x1e>
 800fa90:	6994      	ldr	r4, [r2, #24]
 800fa92:	42a3      	cmp	r3, r4
 800fa94:	db01      	blt.n	800fa9a <__sfputc_r+0x16>
 800fa96:	290a      	cmp	r1, #10
 800fa98:	d103      	bne.n	800faa2 <__sfputc_r+0x1e>
 800fa9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa9e:	f000 bb33 	b.w	8010108 <__swbuf_r>
 800faa2:	6813      	ldr	r3, [r2, #0]
 800faa4:	1c58      	adds	r0, r3, #1
 800faa6:	6010      	str	r0, [r2, #0]
 800faa8:	7019      	strb	r1, [r3, #0]
 800faaa:	4608      	mov	r0, r1
 800faac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fab0:	4770      	bx	lr

0800fab2 <__sfputs_r>:
 800fab2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fab4:	4606      	mov	r6, r0
 800fab6:	460f      	mov	r7, r1
 800fab8:	4614      	mov	r4, r2
 800faba:	18d5      	adds	r5, r2, r3
 800fabc:	42ac      	cmp	r4, r5
 800fabe:	d101      	bne.n	800fac4 <__sfputs_r+0x12>
 800fac0:	2000      	movs	r0, #0
 800fac2:	e007      	b.n	800fad4 <__sfputs_r+0x22>
 800fac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fac8:	463a      	mov	r2, r7
 800faca:	4630      	mov	r0, r6
 800facc:	f7ff ffda 	bl	800fa84 <__sfputc_r>
 800fad0:	1c43      	adds	r3, r0, #1
 800fad2:	d1f3      	bne.n	800fabc <__sfputs_r+0xa>
 800fad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fad8 <_vfiprintf_r>:
 800fad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fadc:	460d      	mov	r5, r1
 800fade:	b09d      	sub	sp, #116	; 0x74
 800fae0:	4614      	mov	r4, r2
 800fae2:	4698      	mov	r8, r3
 800fae4:	4606      	mov	r6, r0
 800fae6:	b118      	cbz	r0, 800faf0 <_vfiprintf_r+0x18>
 800fae8:	6983      	ldr	r3, [r0, #24]
 800faea:	b90b      	cbnz	r3, 800faf0 <_vfiprintf_r+0x18>
 800faec:	f7ff fd0a 	bl	800f504 <__sinit>
 800faf0:	4b89      	ldr	r3, [pc, #548]	; (800fd18 <_vfiprintf_r+0x240>)
 800faf2:	429d      	cmp	r5, r3
 800faf4:	d11b      	bne.n	800fb2e <_vfiprintf_r+0x56>
 800faf6:	6875      	ldr	r5, [r6, #4]
 800faf8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fafa:	07d9      	lsls	r1, r3, #31
 800fafc:	d405      	bmi.n	800fb0a <_vfiprintf_r+0x32>
 800fafe:	89ab      	ldrh	r3, [r5, #12]
 800fb00:	059a      	lsls	r2, r3, #22
 800fb02:	d402      	bmi.n	800fb0a <_vfiprintf_r+0x32>
 800fb04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fb06:	f7ff fdad 	bl	800f664 <__retarget_lock_acquire_recursive>
 800fb0a:	89ab      	ldrh	r3, [r5, #12]
 800fb0c:	071b      	lsls	r3, r3, #28
 800fb0e:	d501      	bpl.n	800fb14 <_vfiprintf_r+0x3c>
 800fb10:	692b      	ldr	r3, [r5, #16]
 800fb12:	b9eb      	cbnz	r3, 800fb50 <_vfiprintf_r+0x78>
 800fb14:	4629      	mov	r1, r5
 800fb16:	4630      	mov	r0, r6
 800fb18:	f000 fb5a 	bl	80101d0 <__swsetup_r>
 800fb1c:	b1c0      	cbz	r0, 800fb50 <_vfiprintf_r+0x78>
 800fb1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fb20:	07dc      	lsls	r4, r3, #31
 800fb22:	d50e      	bpl.n	800fb42 <_vfiprintf_r+0x6a>
 800fb24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fb28:	b01d      	add	sp, #116	; 0x74
 800fb2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb2e:	4b7b      	ldr	r3, [pc, #492]	; (800fd1c <_vfiprintf_r+0x244>)
 800fb30:	429d      	cmp	r5, r3
 800fb32:	d101      	bne.n	800fb38 <_vfiprintf_r+0x60>
 800fb34:	68b5      	ldr	r5, [r6, #8]
 800fb36:	e7df      	b.n	800faf8 <_vfiprintf_r+0x20>
 800fb38:	4b79      	ldr	r3, [pc, #484]	; (800fd20 <_vfiprintf_r+0x248>)
 800fb3a:	429d      	cmp	r5, r3
 800fb3c:	bf08      	it	eq
 800fb3e:	68f5      	ldreq	r5, [r6, #12]
 800fb40:	e7da      	b.n	800faf8 <_vfiprintf_r+0x20>
 800fb42:	89ab      	ldrh	r3, [r5, #12]
 800fb44:	0598      	lsls	r0, r3, #22
 800fb46:	d4ed      	bmi.n	800fb24 <_vfiprintf_r+0x4c>
 800fb48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fb4a:	f7ff fd8c 	bl	800f666 <__retarget_lock_release_recursive>
 800fb4e:	e7e9      	b.n	800fb24 <_vfiprintf_r+0x4c>
 800fb50:	2300      	movs	r3, #0
 800fb52:	9309      	str	r3, [sp, #36]	; 0x24
 800fb54:	2320      	movs	r3, #32
 800fb56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fb5a:	f8cd 800c 	str.w	r8, [sp, #12]
 800fb5e:	2330      	movs	r3, #48	; 0x30
 800fb60:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fd24 <_vfiprintf_r+0x24c>
 800fb64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fb68:	f04f 0901 	mov.w	r9, #1
 800fb6c:	4623      	mov	r3, r4
 800fb6e:	469a      	mov	sl, r3
 800fb70:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fb74:	b10a      	cbz	r2, 800fb7a <_vfiprintf_r+0xa2>
 800fb76:	2a25      	cmp	r2, #37	; 0x25
 800fb78:	d1f9      	bne.n	800fb6e <_vfiprintf_r+0x96>
 800fb7a:	ebba 0b04 	subs.w	fp, sl, r4
 800fb7e:	d00b      	beq.n	800fb98 <_vfiprintf_r+0xc0>
 800fb80:	465b      	mov	r3, fp
 800fb82:	4622      	mov	r2, r4
 800fb84:	4629      	mov	r1, r5
 800fb86:	4630      	mov	r0, r6
 800fb88:	f7ff ff93 	bl	800fab2 <__sfputs_r>
 800fb8c:	3001      	adds	r0, #1
 800fb8e:	f000 80aa 	beq.w	800fce6 <_vfiprintf_r+0x20e>
 800fb92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb94:	445a      	add	r2, fp
 800fb96:	9209      	str	r2, [sp, #36]	; 0x24
 800fb98:	f89a 3000 	ldrb.w	r3, [sl]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	f000 80a2 	beq.w	800fce6 <_vfiprintf_r+0x20e>
 800fba2:	2300      	movs	r3, #0
 800fba4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fba8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fbac:	f10a 0a01 	add.w	sl, sl, #1
 800fbb0:	9304      	str	r3, [sp, #16]
 800fbb2:	9307      	str	r3, [sp, #28]
 800fbb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fbb8:	931a      	str	r3, [sp, #104]	; 0x68
 800fbba:	4654      	mov	r4, sl
 800fbbc:	2205      	movs	r2, #5
 800fbbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbc2:	4858      	ldr	r0, [pc, #352]	; (800fd24 <_vfiprintf_r+0x24c>)
 800fbc4:	f7f0 fb1c 	bl	8000200 <memchr>
 800fbc8:	9a04      	ldr	r2, [sp, #16]
 800fbca:	b9d8      	cbnz	r0, 800fc04 <_vfiprintf_r+0x12c>
 800fbcc:	06d1      	lsls	r1, r2, #27
 800fbce:	bf44      	itt	mi
 800fbd0:	2320      	movmi	r3, #32
 800fbd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fbd6:	0713      	lsls	r3, r2, #28
 800fbd8:	bf44      	itt	mi
 800fbda:	232b      	movmi	r3, #43	; 0x2b
 800fbdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fbe0:	f89a 3000 	ldrb.w	r3, [sl]
 800fbe4:	2b2a      	cmp	r3, #42	; 0x2a
 800fbe6:	d015      	beq.n	800fc14 <_vfiprintf_r+0x13c>
 800fbe8:	9a07      	ldr	r2, [sp, #28]
 800fbea:	4654      	mov	r4, sl
 800fbec:	2000      	movs	r0, #0
 800fbee:	f04f 0c0a 	mov.w	ip, #10
 800fbf2:	4621      	mov	r1, r4
 800fbf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fbf8:	3b30      	subs	r3, #48	; 0x30
 800fbfa:	2b09      	cmp	r3, #9
 800fbfc:	d94e      	bls.n	800fc9c <_vfiprintf_r+0x1c4>
 800fbfe:	b1b0      	cbz	r0, 800fc2e <_vfiprintf_r+0x156>
 800fc00:	9207      	str	r2, [sp, #28]
 800fc02:	e014      	b.n	800fc2e <_vfiprintf_r+0x156>
 800fc04:	eba0 0308 	sub.w	r3, r0, r8
 800fc08:	fa09 f303 	lsl.w	r3, r9, r3
 800fc0c:	4313      	orrs	r3, r2
 800fc0e:	9304      	str	r3, [sp, #16]
 800fc10:	46a2      	mov	sl, r4
 800fc12:	e7d2      	b.n	800fbba <_vfiprintf_r+0xe2>
 800fc14:	9b03      	ldr	r3, [sp, #12]
 800fc16:	1d19      	adds	r1, r3, #4
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	9103      	str	r1, [sp, #12]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	bfbb      	ittet	lt
 800fc20:	425b      	neglt	r3, r3
 800fc22:	f042 0202 	orrlt.w	r2, r2, #2
 800fc26:	9307      	strge	r3, [sp, #28]
 800fc28:	9307      	strlt	r3, [sp, #28]
 800fc2a:	bfb8      	it	lt
 800fc2c:	9204      	strlt	r2, [sp, #16]
 800fc2e:	7823      	ldrb	r3, [r4, #0]
 800fc30:	2b2e      	cmp	r3, #46	; 0x2e
 800fc32:	d10c      	bne.n	800fc4e <_vfiprintf_r+0x176>
 800fc34:	7863      	ldrb	r3, [r4, #1]
 800fc36:	2b2a      	cmp	r3, #42	; 0x2a
 800fc38:	d135      	bne.n	800fca6 <_vfiprintf_r+0x1ce>
 800fc3a:	9b03      	ldr	r3, [sp, #12]
 800fc3c:	1d1a      	adds	r2, r3, #4
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	9203      	str	r2, [sp, #12]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	bfb8      	it	lt
 800fc46:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800fc4a:	3402      	adds	r4, #2
 800fc4c:	9305      	str	r3, [sp, #20]
 800fc4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fd34 <_vfiprintf_r+0x25c>
 800fc52:	7821      	ldrb	r1, [r4, #0]
 800fc54:	2203      	movs	r2, #3
 800fc56:	4650      	mov	r0, sl
 800fc58:	f7f0 fad2 	bl	8000200 <memchr>
 800fc5c:	b140      	cbz	r0, 800fc70 <_vfiprintf_r+0x198>
 800fc5e:	2340      	movs	r3, #64	; 0x40
 800fc60:	eba0 000a 	sub.w	r0, r0, sl
 800fc64:	fa03 f000 	lsl.w	r0, r3, r0
 800fc68:	9b04      	ldr	r3, [sp, #16]
 800fc6a:	4303      	orrs	r3, r0
 800fc6c:	3401      	adds	r4, #1
 800fc6e:	9304      	str	r3, [sp, #16]
 800fc70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc74:	482c      	ldr	r0, [pc, #176]	; (800fd28 <_vfiprintf_r+0x250>)
 800fc76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fc7a:	2206      	movs	r2, #6
 800fc7c:	f7f0 fac0 	bl	8000200 <memchr>
 800fc80:	2800      	cmp	r0, #0
 800fc82:	d03f      	beq.n	800fd04 <_vfiprintf_r+0x22c>
 800fc84:	4b29      	ldr	r3, [pc, #164]	; (800fd2c <_vfiprintf_r+0x254>)
 800fc86:	bb1b      	cbnz	r3, 800fcd0 <_vfiprintf_r+0x1f8>
 800fc88:	9b03      	ldr	r3, [sp, #12]
 800fc8a:	3307      	adds	r3, #7
 800fc8c:	f023 0307 	bic.w	r3, r3, #7
 800fc90:	3308      	adds	r3, #8
 800fc92:	9303      	str	r3, [sp, #12]
 800fc94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc96:	443b      	add	r3, r7
 800fc98:	9309      	str	r3, [sp, #36]	; 0x24
 800fc9a:	e767      	b.n	800fb6c <_vfiprintf_r+0x94>
 800fc9c:	fb0c 3202 	mla	r2, ip, r2, r3
 800fca0:	460c      	mov	r4, r1
 800fca2:	2001      	movs	r0, #1
 800fca4:	e7a5      	b.n	800fbf2 <_vfiprintf_r+0x11a>
 800fca6:	2300      	movs	r3, #0
 800fca8:	3401      	adds	r4, #1
 800fcaa:	9305      	str	r3, [sp, #20]
 800fcac:	4619      	mov	r1, r3
 800fcae:	f04f 0c0a 	mov.w	ip, #10
 800fcb2:	4620      	mov	r0, r4
 800fcb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fcb8:	3a30      	subs	r2, #48	; 0x30
 800fcba:	2a09      	cmp	r2, #9
 800fcbc:	d903      	bls.n	800fcc6 <_vfiprintf_r+0x1ee>
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d0c5      	beq.n	800fc4e <_vfiprintf_r+0x176>
 800fcc2:	9105      	str	r1, [sp, #20]
 800fcc4:	e7c3      	b.n	800fc4e <_vfiprintf_r+0x176>
 800fcc6:	fb0c 2101 	mla	r1, ip, r1, r2
 800fcca:	4604      	mov	r4, r0
 800fccc:	2301      	movs	r3, #1
 800fcce:	e7f0      	b.n	800fcb2 <_vfiprintf_r+0x1da>
 800fcd0:	ab03      	add	r3, sp, #12
 800fcd2:	9300      	str	r3, [sp, #0]
 800fcd4:	462a      	mov	r2, r5
 800fcd6:	4b16      	ldr	r3, [pc, #88]	; (800fd30 <_vfiprintf_r+0x258>)
 800fcd8:	a904      	add	r1, sp, #16
 800fcda:	4630      	mov	r0, r6
 800fcdc:	f3af 8000 	nop.w
 800fce0:	4607      	mov	r7, r0
 800fce2:	1c78      	adds	r0, r7, #1
 800fce4:	d1d6      	bne.n	800fc94 <_vfiprintf_r+0x1bc>
 800fce6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fce8:	07d9      	lsls	r1, r3, #31
 800fcea:	d405      	bmi.n	800fcf8 <_vfiprintf_r+0x220>
 800fcec:	89ab      	ldrh	r3, [r5, #12]
 800fcee:	059a      	lsls	r2, r3, #22
 800fcf0:	d402      	bmi.n	800fcf8 <_vfiprintf_r+0x220>
 800fcf2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fcf4:	f7ff fcb7 	bl	800f666 <__retarget_lock_release_recursive>
 800fcf8:	89ab      	ldrh	r3, [r5, #12]
 800fcfa:	065b      	lsls	r3, r3, #25
 800fcfc:	f53f af12 	bmi.w	800fb24 <_vfiprintf_r+0x4c>
 800fd00:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fd02:	e711      	b.n	800fb28 <_vfiprintf_r+0x50>
 800fd04:	ab03      	add	r3, sp, #12
 800fd06:	9300      	str	r3, [sp, #0]
 800fd08:	462a      	mov	r2, r5
 800fd0a:	4b09      	ldr	r3, [pc, #36]	; (800fd30 <_vfiprintf_r+0x258>)
 800fd0c:	a904      	add	r1, sp, #16
 800fd0e:	4630      	mov	r0, r6
 800fd10:	f000 f880 	bl	800fe14 <_printf_i>
 800fd14:	e7e4      	b.n	800fce0 <_vfiprintf_r+0x208>
 800fd16:	bf00      	nop
 800fd18:	08014400 	.word	0x08014400
 800fd1c:	08014420 	.word	0x08014420
 800fd20:	080143e0 	.word	0x080143e0
 800fd24:	08014440 	.word	0x08014440
 800fd28:	0801444a 	.word	0x0801444a
 800fd2c:	00000000 	.word	0x00000000
 800fd30:	0800fab3 	.word	0x0800fab3
 800fd34:	08014446 	.word	0x08014446

0800fd38 <_printf_common>:
 800fd38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd3c:	4616      	mov	r6, r2
 800fd3e:	4699      	mov	r9, r3
 800fd40:	688a      	ldr	r2, [r1, #8]
 800fd42:	690b      	ldr	r3, [r1, #16]
 800fd44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fd48:	4293      	cmp	r3, r2
 800fd4a:	bfb8      	it	lt
 800fd4c:	4613      	movlt	r3, r2
 800fd4e:	6033      	str	r3, [r6, #0]
 800fd50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fd54:	4607      	mov	r7, r0
 800fd56:	460c      	mov	r4, r1
 800fd58:	b10a      	cbz	r2, 800fd5e <_printf_common+0x26>
 800fd5a:	3301      	adds	r3, #1
 800fd5c:	6033      	str	r3, [r6, #0]
 800fd5e:	6823      	ldr	r3, [r4, #0]
 800fd60:	0699      	lsls	r1, r3, #26
 800fd62:	bf42      	ittt	mi
 800fd64:	6833      	ldrmi	r3, [r6, #0]
 800fd66:	3302      	addmi	r3, #2
 800fd68:	6033      	strmi	r3, [r6, #0]
 800fd6a:	6825      	ldr	r5, [r4, #0]
 800fd6c:	f015 0506 	ands.w	r5, r5, #6
 800fd70:	d106      	bne.n	800fd80 <_printf_common+0x48>
 800fd72:	f104 0a19 	add.w	sl, r4, #25
 800fd76:	68e3      	ldr	r3, [r4, #12]
 800fd78:	6832      	ldr	r2, [r6, #0]
 800fd7a:	1a9b      	subs	r3, r3, r2
 800fd7c:	42ab      	cmp	r3, r5
 800fd7e:	dc26      	bgt.n	800fdce <_printf_common+0x96>
 800fd80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fd84:	1e13      	subs	r3, r2, #0
 800fd86:	6822      	ldr	r2, [r4, #0]
 800fd88:	bf18      	it	ne
 800fd8a:	2301      	movne	r3, #1
 800fd8c:	0692      	lsls	r2, r2, #26
 800fd8e:	d42b      	bmi.n	800fde8 <_printf_common+0xb0>
 800fd90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fd94:	4649      	mov	r1, r9
 800fd96:	4638      	mov	r0, r7
 800fd98:	47c0      	blx	r8
 800fd9a:	3001      	adds	r0, #1
 800fd9c:	d01e      	beq.n	800fddc <_printf_common+0xa4>
 800fd9e:	6823      	ldr	r3, [r4, #0]
 800fda0:	68e5      	ldr	r5, [r4, #12]
 800fda2:	6832      	ldr	r2, [r6, #0]
 800fda4:	f003 0306 	and.w	r3, r3, #6
 800fda8:	2b04      	cmp	r3, #4
 800fdaa:	bf08      	it	eq
 800fdac:	1aad      	subeq	r5, r5, r2
 800fdae:	68a3      	ldr	r3, [r4, #8]
 800fdb0:	6922      	ldr	r2, [r4, #16]
 800fdb2:	bf0c      	ite	eq
 800fdb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fdb8:	2500      	movne	r5, #0
 800fdba:	4293      	cmp	r3, r2
 800fdbc:	bfc4      	itt	gt
 800fdbe:	1a9b      	subgt	r3, r3, r2
 800fdc0:	18ed      	addgt	r5, r5, r3
 800fdc2:	2600      	movs	r6, #0
 800fdc4:	341a      	adds	r4, #26
 800fdc6:	42b5      	cmp	r5, r6
 800fdc8:	d11a      	bne.n	800fe00 <_printf_common+0xc8>
 800fdca:	2000      	movs	r0, #0
 800fdcc:	e008      	b.n	800fde0 <_printf_common+0xa8>
 800fdce:	2301      	movs	r3, #1
 800fdd0:	4652      	mov	r2, sl
 800fdd2:	4649      	mov	r1, r9
 800fdd4:	4638      	mov	r0, r7
 800fdd6:	47c0      	blx	r8
 800fdd8:	3001      	adds	r0, #1
 800fdda:	d103      	bne.n	800fde4 <_printf_common+0xac>
 800fddc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fde0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fde4:	3501      	adds	r5, #1
 800fde6:	e7c6      	b.n	800fd76 <_printf_common+0x3e>
 800fde8:	18e1      	adds	r1, r4, r3
 800fdea:	1c5a      	adds	r2, r3, #1
 800fdec:	2030      	movs	r0, #48	; 0x30
 800fdee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fdf2:	4422      	add	r2, r4
 800fdf4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fdf8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fdfc:	3302      	adds	r3, #2
 800fdfe:	e7c7      	b.n	800fd90 <_printf_common+0x58>
 800fe00:	2301      	movs	r3, #1
 800fe02:	4622      	mov	r2, r4
 800fe04:	4649      	mov	r1, r9
 800fe06:	4638      	mov	r0, r7
 800fe08:	47c0      	blx	r8
 800fe0a:	3001      	adds	r0, #1
 800fe0c:	d0e6      	beq.n	800fddc <_printf_common+0xa4>
 800fe0e:	3601      	adds	r6, #1
 800fe10:	e7d9      	b.n	800fdc6 <_printf_common+0x8e>
	...

0800fe14 <_printf_i>:
 800fe14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fe18:	460c      	mov	r4, r1
 800fe1a:	4691      	mov	r9, r2
 800fe1c:	7e27      	ldrb	r7, [r4, #24]
 800fe1e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fe20:	2f78      	cmp	r7, #120	; 0x78
 800fe22:	4680      	mov	r8, r0
 800fe24:	469a      	mov	sl, r3
 800fe26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fe2a:	d807      	bhi.n	800fe3c <_printf_i+0x28>
 800fe2c:	2f62      	cmp	r7, #98	; 0x62
 800fe2e:	d80a      	bhi.n	800fe46 <_printf_i+0x32>
 800fe30:	2f00      	cmp	r7, #0
 800fe32:	f000 80d8 	beq.w	800ffe6 <_printf_i+0x1d2>
 800fe36:	2f58      	cmp	r7, #88	; 0x58
 800fe38:	f000 80a3 	beq.w	800ff82 <_printf_i+0x16e>
 800fe3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fe40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fe44:	e03a      	b.n	800febc <_printf_i+0xa8>
 800fe46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fe4a:	2b15      	cmp	r3, #21
 800fe4c:	d8f6      	bhi.n	800fe3c <_printf_i+0x28>
 800fe4e:	a001      	add	r0, pc, #4	; (adr r0, 800fe54 <_printf_i+0x40>)
 800fe50:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800fe54:	0800fead 	.word	0x0800fead
 800fe58:	0800fec1 	.word	0x0800fec1
 800fe5c:	0800fe3d 	.word	0x0800fe3d
 800fe60:	0800fe3d 	.word	0x0800fe3d
 800fe64:	0800fe3d 	.word	0x0800fe3d
 800fe68:	0800fe3d 	.word	0x0800fe3d
 800fe6c:	0800fec1 	.word	0x0800fec1
 800fe70:	0800fe3d 	.word	0x0800fe3d
 800fe74:	0800fe3d 	.word	0x0800fe3d
 800fe78:	0800fe3d 	.word	0x0800fe3d
 800fe7c:	0800fe3d 	.word	0x0800fe3d
 800fe80:	0800ffcd 	.word	0x0800ffcd
 800fe84:	0800fef1 	.word	0x0800fef1
 800fe88:	0800ffaf 	.word	0x0800ffaf
 800fe8c:	0800fe3d 	.word	0x0800fe3d
 800fe90:	0800fe3d 	.word	0x0800fe3d
 800fe94:	0800ffef 	.word	0x0800ffef
 800fe98:	0800fe3d 	.word	0x0800fe3d
 800fe9c:	0800fef1 	.word	0x0800fef1
 800fea0:	0800fe3d 	.word	0x0800fe3d
 800fea4:	0800fe3d 	.word	0x0800fe3d
 800fea8:	0800ffb7 	.word	0x0800ffb7
 800feac:	680b      	ldr	r3, [r1, #0]
 800feae:	1d1a      	adds	r2, r3, #4
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	600a      	str	r2, [r1, #0]
 800feb4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800feb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800febc:	2301      	movs	r3, #1
 800febe:	e0a3      	b.n	8010008 <_printf_i+0x1f4>
 800fec0:	6825      	ldr	r5, [r4, #0]
 800fec2:	6808      	ldr	r0, [r1, #0]
 800fec4:	062e      	lsls	r6, r5, #24
 800fec6:	f100 0304 	add.w	r3, r0, #4
 800feca:	d50a      	bpl.n	800fee2 <_printf_i+0xce>
 800fecc:	6805      	ldr	r5, [r0, #0]
 800fece:	600b      	str	r3, [r1, #0]
 800fed0:	2d00      	cmp	r5, #0
 800fed2:	da03      	bge.n	800fedc <_printf_i+0xc8>
 800fed4:	232d      	movs	r3, #45	; 0x2d
 800fed6:	426d      	negs	r5, r5
 800fed8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fedc:	485e      	ldr	r0, [pc, #376]	; (8010058 <_printf_i+0x244>)
 800fede:	230a      	movs	r3, #10
 800fee0:	e019      	b.n	800ff16 <_printf_i+0x102>
 800fee2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800fee6:	6805      	ldr	r5, [r0, #0]
 800fee8:	600b      	str	r3, [r1, #0]
 800feea:	bf18      	it	ne
 800feec:	b22d      	sxthne	r5, r5
 800feee:	e7ef      	b.n	800fed0 <_printf_i+0xbc>
 800fef0:	680b      	ldr	r3, [r1, #0]
 800fef2:	6825      	ldr	r5, [r4, #0]
 800fef4:	1d18      	adds	r0, r3, #4
 800fef6:	6008      	str	r0, [r1, #0]
 800fef8:	0628      	lsls	r0, r5, #24
 800fefa:	d501      	bpl.n	800ff00 <_printf_i+0xec>
 800fefc:	681d      	ldr	r5, [r3, #0]
 800fefe:	e002      	b.n	800ff06 <_printf_i+0xf2>
 800ff00:	0669      	lsls	r1, r5, #25
 800ff02:	d5fb      	bpl.n	800fefc <_printf_i+0xe8>
 800ff04:	881d      	ldrh	r5, [r3, #0]
 800ff06:	4854      	ldr	r0, [pc, #336]	; (8010058 <_printf_i+0x244>)
 800ff08:	2f6f      	cmp	r7, #111	; 0x6f
 800ff0a:	bf0c      	ite	eq
 800ff0c:	2308      	moveq	r3, #8
 800ff0e:	230a      	movne	r3, #10
 800ff10:	2100      	movs	r1, #0
 800ff12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ff16:	6866      	ldr	r6, [r4, #4]
 800ff18:	60a6      	str	r6, [r4, #8]
 800ff1a:	2e00      	cmp	r6, #0
 800ff1c:	bfa2      	ittt	ge
 800ff1e:	6821      	ldrge	r1, [r4, #0]
 800ff20:	f021 0104 	bicge.w	r1, r1, #4
 800ff24:	6021      	strge	r1, [r4, #0]
 800ff26:	b90d      	cbnz	r5, 800ff2c <_printf_i+0x118>
 800ff28:	2e00      	cmp	r6, #0
 800ff2a:	d04d      	beq.n	800ffc8 <_printf_i+0x1b4>
 800ff2c:	4616      	mov	r6, r2
 800ff2e:	fbb5 f1f3 	udiv	r1, r5, r3
 800ff32:	fb03 5711 	mls	r7, r3, r1, r5
 800ff36:	5dc7      	ldrb	r7, [r0, r7]
 800ff38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ff3c:	462f      	mov	r7, r5
 800ff3e:	42bb      	cmp	r3, r7
 800ff40:	460d      	mov	r5, r1
 800ff42:	d9f4      	bls.n	800ff2e <_printf_i+0x11a>
 800ff44:	2b08      	cmp	r3, #8
 800ff46:	d10b      	bne.n	800ff60 <_printf_i+0x14c>
 800ff48:	6823      	ldr	r3, [r4, #0]
 800ff4a:	07df      	lsls	r7, r3, #31
 800ff4c:	d508      	bpl.n	800ff60 <_printf_i+0x14c>
 800ff4e:	6923      	ldr	r3, [r4, #16]
 800ff50:	6861      	ldr	r1, [r4, #4]
 800ff52:	4299      	cmp	r1, r3
 800ff54:	bfde      	ittt	le
 800ff56:	2330      	movle	r3, #48	; 0x30
 800ff58:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ff5c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800ff60:	1b92      	subs	r2, r2, r6
 800ff62:	6122      	str	r2, [r4, #16]
 800ff64:	f8cd a000 	str.w	sl, [sp]
 800ff68:	464b      	mov	r3, r9
 800ff6a:	aa03      	add	r2, sp, #12
 800ff6c:	4621      	mov	r1, r4
 800ff6e:	4640      	mov	r0, r8
 800ff70:	f7ff fee2 	bl	800fd38 <_printf_common>
 800ff74:	3001      	adds	r0, #1
 800ff76:	d14c      	bne.n	8010012 <_printf_i+0x1fe>
 800ff78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ff7c:	b004      	add	sp, #16
 800ff7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff82:	4835      	ldr	r0, [pc, #212]	; (8010058 <_printf_i+0x244>)
 800ff84:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ff88:	6823      	ldr	r3, [r4, #0]
 800ff8a:	680e      	ldr	r6, [r1, #0]
 800ff8c:	061f      	lsls	r7, r3, #24
 800ff8e:	f856 5b04 	ldr.w	r5, [r6], #4
 800ff92:	600e      	str	r6, [r1, #0]
 800ff94:	d514      	bpl.n	800ffc0 <_printf_i+0x1ac>
 800ff96:	07d9      	lsls	r1, r3, #31
 800ff98:	bf44      	itt	mi
 800ff9a:	f043 0320 	orrmi.w	r3, r3, #32
 800ff9e:	6023      	strmi	r3, [r4, #0]
 800ffa0:	b91d      	cbnz	r5, 800ffaa <_printf_i+0x196>
 800ffa2:	6823      	ldr	r3, [r4, #0]
 800ffa4:	f023 0320 	bic.w	r3, r3, #32
 800ffa8:	6023      	str	r3, [r4, #0]
 800ffaa:	2310      	movs	r3, #16
 800ffac:	e7b0      	b.n	800ff10 <_printf_i+0xfc>
 800ffae:	6823      	ldr	r3, [r4, #0]
 800ffb0:	f043 0320 	orr.w	r3, r3, #32
 800ffb4:	6023      	str	r3, [r4, #0]
 800ffb6:	2378      	movs	r3, #120	; 0x78
 800ffb8:	4828      	ldr	r0, [pc, #160]	; (801005c <_printf_i+0x248>)
 800ffba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ffbe:	e7e3      	b.n	800ff88 <_printf_i+0x174>
 800ffc0:	065e      	lsls	r6, r3, #25
 800ffc2:	bf48      	it	mi
 800ffc4:	b2ad      	uxthmi	r5, r5
 800ffc6:	e7e6      	b.n	800ff96 <_printf_i+0x182>
 800ffc8:	4616      	mov	r6, r2
 800ffca:	e7bb      	b.n	800ff44 <_printf_i+0x130>
 800ffcc:	680b      	ldr	r3, [r1, #0]
 800ffce:	6826      	ldr	r6, [r4, #0]
 800ffd0:	6960      	ldr	r0, [r4, #20]
 800ffd2:	1d1d      	adds	r5, r3, #4
 800ffd4:	600d      	str	r5, [r1, #0]
 800ffd6:	0635      	lsls	r5, r6, #24
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	d501      	bpl.n	800ffe0 <_printf_i+0x1cc>
 800ffdc:	6018      	str	r0, [r3, #0]
 800ffde:	e002      	b.n	800ffe6 <_printf_i+0x1d2>
 800ffe0:	0671      	lsls	r1, r6, #25
 800ffe2:	d5fb      	bpl.n	800ffdc <_printf_i+0x1c8>
 800ffe4:	8018      	strh	r0, [r3, #0]
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	6123      	str	r3, [r4, #16]
 800ffea:	4616      	mov	r6, r2
 800ffec:	e7ba      	b.n	800ff64 <_printf_i+0x150>
 800ffee:	680b      	ldr	r3, [r1, #0]
 800fff0:	1d1a      	adds	r2, r3, #4
 800fff2:	600a      	str	r2, [r1, #0]
 800fff4:	681e      	ldr	r6, [r3, #0]
 800fff6:	6862      	ldr	r2, [r4, #4]
 800fff8:	2100      	movs	r1, #0
 800fffa:	4630      	mov	r0, r6
 800fffc:	f7f0 f900 	bl	8000200 <memchr>
 8010000:	b108      	cbz	r0, 8010006 <_printf_i+0x1f2>
 8010002:	1b80      	subs	r0, r0, r6
 8010004:	6060      	str	r0, [r4, #4]
 8010006:	6863      	ldr	r3, [r4, #4]
 8010008:	6123      	str	r3, [r4, #16]
 801000a:	2300      	movs	r3, #0
 801000c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010010:	e7a8      	b.n	800ff64 <_printf_i+0x150>
 8010012:	6923      	ldr	r3, [r4, #16]
 8010014:	4632      	mov	r2, r6
 8010016:	4649      	mov	r1, r9
 8010018:	4640      	mov	r0, r8
 801001a:	47d0      	blx	sl
 801001c:	3001      	adds	r0, #1
 801001e:	d0ab      	beq.n	800ff78 <_printf_i+0x164>
 8010020:	6823      	ldr	r3, [r4, #0]
 8010022:	079b      	lsls	r3, r3, #30
 8010024:	d413      	bmi.n	801004e <_printf_i+0x23a>
 8010026:	68e0      	ldr	r0, [r4, #12]
 8010028:	9b03      	ldr	r3, [sp, #12]
 801002a:	4298      	cmp	r0, r3
 801002c:	bfb8      	it	lt
 801002e:	4618      	movlt	r0, r3
 8010030:	e7a4      	b.n	800ff7c <_printf_i+0x168>
 8010032:	2301      	movs	r3, #1
 8010034:	4632      	mov	r2, r6
 8010036:	4649      	mov	r1, r9
 8010038:	4640      	mov	r0, r8
 801003a:	47d0      	blx	sl
 801003c:	3001      	adds	r0, #1
 801003e:	d09b      	beq.n	800ff78 <_printf_i+0x164>
 8010040:	3501      	adds	r5, #1
 8010042:	68e3      	ldr	r3, [r4, #12]
 8010044:	9903      	ldr	r1, [sp, #12]
 8010046:	1a5b      	subs	r3, r3, r1
 8010048:	42ab      	cmp	r3, r5
 801004a:	dcf2      	bgt.n	8010032 <_printf_i+0x21e>
 801004c:	e7eb      	b.n	8010026 <_printf_i+0x212>
 801004e:	2500      	movs	r5, #0
 8010050:	f104 0619 	add.w	r6, r4, #25
 8010054:	e7f5      	b.n	8010042 <_printf_i+0x22e>
 8010056:	bf00      	nop
 8010058:	08014451 	.word	0x08014451
 801005c:	08014462 	.word	0x08014462

08010060 <_sbrk_r>:
 8010060:	b538      	push	{r3, r4, r5, lr}
 8010062:	4d06      	ldr	r5, [pc, #24]	; (801007c <_sbrk_r+0x1c>)
 8010064:	2300      	movs	r3, #0
 8010066:	4604      	mov	r4, r0
 8010068:	4608      	mov	r0, r1
 801006a:	602b      	str	r3, [r5, #0]
 801006c:	f7f0 fca6 	bl	80009bc <_sbrk>
 8010070:	1c43      	adds	r3, r0, #1
 8010072:	d102      	bne.n	801007a <_sbrk_r+0x1a>
 8010074:	682b      	ldr	r3, [r5, #0]
 8010076:	b103      	cbz	r3, 801007a <_sbrk_r+0x1a>
 8010078:	6023      	str	r3, [r4, #0]
 801007a:	bd38      	pop	{r3, r4, r5, pc}
 801007c:	20008ec8 	.word	0x20008ec8

08010080 <__sread>:
 8010080:	b510      	push	{r4, lr}
 8010082:	460c      	mov	r4, r1
 8010084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010088:	f000 fa92 	bl	80105b0 <_read_r>
 801008c:	2800      	cmp	r0, #0
 801008e:	bfab      	itete	ge
 8010090:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010092:	89a3      	ldrhlt	r3, [r4, #12]
 8010094:	181b      	addge	r3, r3, r0
 8010096:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801009a:	bfac      	ite	ge
 801009c:	6563      	strge	r3, [r4, #84]	; 0x54
 801009e:	81a3      	strhlt	r3, [r4, #12]
 80100a0:	bd10      	pop	{r4, pc}

080100a2 <__swrite>:
 80100a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100a6:	461f      	mov	r7, r3
 80100a8:	898b      	ldrh	r3, [r1, #12]
 80100aa:	05db      	lsls	r3, r3, #23
 80100ac:	4605      	mov	r5, r0
 80100ae:	460c      	mov	r4, r1
 80100b0:	4616      	mov	r6, r2
 80100b2:	d505      	bpl.n	80100c0 <__swrite+0x1e>
 80100b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100b8:	2302      	movs	r3, #2
 80100ba:	2200      	movs	r2, #0
 80100bc:	f000 f9d0 	bl	8010460 <_lseek_r>
 80100c0:	89a3      	ldrh	r3, [r4, #12]
 80100c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80100c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80100ca:	81a3      	strh	r3, [r4, #12]
 80100cc:	4632      	mov	r2, r6
 80100ce:	463b      	mov	r3, r7
 80100d0:	4628      	mov	r0, r5
 80100d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80100d6:	f000 b869 	b.w	80101ac <_write_r>

080100da <__sseek>:
 80100da:	b510      	push	{r4, lr}
 80100dc:	460c      	mov	r4, r1
 80100de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100e2:	f000 f9bd 	bl	8010460 <_lseek_r>
 80100e6:	1c43      	adds	r3, r0, #1
 80100e8:	89a3      	ldrh	r3, [r4, #12]
 80100ea:	bf15      	itete	ne
 80100ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80100ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80100f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80100f6:	81a3      	strheq	r3, [r4, #12]
 80100f8:	bf18      	it	ne
 80100fa:	81a3      	strhne	r3, [r4, #12]
 80100fc:	bd10      	pop	{r4, pc}

080100fe <__sclose>:
 80100fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010102:	f000 b8db 	b.w	80102bc <_close_r>
	...

08010108 <__swbuf_r>:
 8010108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801010a:	460e      	mov	r6, r1
 801010c:	4614      	mov	r4, r2
 801010e:	4605      	mov	r5, r0
 8010110:	b118      	cbz	r0, 801011a <__swbuf_r+0x12>
 8010112:	6983      	ldr	r3, [r0, #24]
 8010114:	b90b      	cbnz	r3, 801011a <__swbuf_r+0x12>
 8010116:	f7ff f9f5 	bl	800f504 <__sinit>
 801011a:	4b21      	ldr	r3, [pc, #132]	; (80101a0 <__swbuf_r+0x98>)
 801011c:	429c      	cmp	r4, r3
 801011e:	d12b      	bne.n	8010178 <__swbuf_r+0x70>
 8010120:	686c      	ldr	r4, [r5, #4]
 8010122:	69a3      	ldr	r3, [r4, #24]
 8010124:	60a3      	str	r3, [r4, #8]
 8010126:	89a3      	ldrh	r3, [r4, #12]
 8010128:	071a      	lsls	r2, r3, #28
 801012a:	d52f      	bpl.n	801018c <__swbuf_r+0x84>
 801012c:	6923      	ldr	r3, [r4, #16]
 801012e:	b36b      	cbz	r3, 801018c <__swbuf_r+0x84>
 8010130:	6923      	ldr	r3, [r4, #16]
 8010132:	6820      	ldr	r0, [r4, #0]
 8010134:	1ac0      	subs	r0, r0, r3
 8010136:	6963      	ldr	r3, [r4, #20]
 8010138:	b2f6      	uxtb	r6, r6
 801013a:	4283      	cmp	r3, r0
 801013c:	4637      	mov	r7, r6
 801013e:	dc04      	bgt.n	801014a <__swbuf_r+0x42>
 8010140:	4621      	mov	r1, r4
 8010142:	4628      	mov	r0, r5
 8010144:	f000 f950 	bl	80103e8 <_fflush_r>
 8010148:	bb30      	cbnz	r0, 8010198 <__swbuf_r+0x90>
 801014a:	68a3      	ldr	r3, [r4, #8]
 801014c:	3b01      	subs	r3, #1
 801014e:	60a3      	str	r3, [r4, #8]
 8010150:	6823      	ldr	r3, [r4, #0]
 8010152:	1c5a      	adds	r2, r3, #1
 8010154:	6022      	str	r2, [r4, #0]
 8010156:	701e      	strb	r6, [r3, #0]
 8010158:	6963      	ldr	r3, [r4, #20]
 801015a:	3001      	adds	r0, #1
 801015c:	4283      	cmp	r3, r0
 801015e:	d004      	beq.n	801016a <__swbuf_r+0x62>
 8010160:	89a3      	ldrh	r3, [r4, #12]
 8010162:	07db      	lsls	r3, r3, #31
 8010164:	d506      	bpl.n	8010174 <__swbuf_r+0x6c>
 8010166:	2e0a      	cmp	r6, #10
 8010168:	d104      	bne.n	8010174 <__swbuf_r+0x6c>
 801016a:	4621      	mov	r1, r4
 801016c:	4628      	mov	r0, r5
 801016e:	f000 f93b 	bl	80103e8 <_fflush_r>
 8010172:	b988      	cbnz	r0, 8010198 <__swbuf_r+0x90>
 8010174:	4638      	mov	r0, r7
 8010176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010178:	4b0a      	ldr	r3, [pc, #40]	; (80101a4 <__swbuf_r+0x9c>)
 801017a:	429c      	cmp	r4, r3
 801017c:	d101      	bne.n	8010182 <__swbuf_r+0x7a>
 801017e:	68ac      	ldr	r4, [r5, #8]
 8010180:	e7cf      	b.n	8010122 <__swbuf_r+0x1a>
 8010182:	4b09      	ldr	r3, [pc, #36]	; (80101a8 <__swbuf_r+0xa0>)
 8010184:	429c      	cmp	r4, r3
 8010186:	bf08      	it	eq
 8010188:	68ec      	ldreq	r4, [r5, #12]
 801018a:	e7ca      	b.n	8010122 <__swbuf_r+0x1a>
 801018c:	4621      	mov	r1, r4
 801018e:	4628      	mov	r0, r5
 8010190:	f000 f81e 	bl	80101d0 <__swsetup_r>
 8010194:	2800      	cmp	r0, #0
 8010196:	d0cb      	beq.n	8010130 <__swbuf_r+0x28>
 8010198:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801019c:	e7ea      	b.n	8010174 <__swbuf_r+0x6c>
 801019e:	bf00      	nop
 80101a0:	08014400 	.word	0x08014400
 80101a4:	08014420 	.word	0x08014420
 80101a8:	080143e0 	.word	0x080143e0

080101ac <_write_r>:
 80101ac:	b538      	push	{r3, r4, r5, lr}
 80101ae:	4d07      	ldr	r5, [pc, #28]	; (80101cc <_write_r+0x20>)
 80101b0:	4604      	mov	r4, r0
 80101b2:	4608      	mov	r0, r1
 80101b4:	4611      	mov	r1, r2
 80101b6:	2200      	movs	r2, #0
 80101b8:	602a      	str	r2, [r5, #0]
 80101ba:	461a      	mov	r2, r3
 80101bc:	f7f0 fbad 	bl	800091a <_write>
 80101c0:	1c43      	adds	r3, r0, #1
 80101c2:	d102      	bne.n	80101ca <_write_r+0x1e>
 80101c4:	682b      	ldr	r3, [r5, #0]
 80101c6:	b103      	cbz	r3, 80101ca <_write_r+0x1e>
 80101c8:	6023      	str	r3, [r4, #0]
 80101ca:	bd38      	pop	{r3, r4, r5, pc}
 80101cc:	20008ec8 	.word	0x20008ec8

080101d0 <__swsetup_r>:
 80101d0:	4b32      	ldr	r3, [pc, #200]	; (801029c <__swsetup_r+0xcc>)
 80101d2:	b570      	push	{r4, r5, r6, lr}
 80101d4:	681d      	ldr	r5, [r3, #0]
 80101d6:	4606      	mov	r6, r0
 80101d8:	460c      	mov	r4, r1
 80101da:	b125      	cbz	r5, 80101e6 <__swsetup_r+0x16>
 80101dc:	69ab      	ldr	r3, [r5, #24]
 80101de:	b913      	cbnz	r3, 80101e6 <__swsetup_r+0x16>
 80101e0:	4628      	mov	r0, r5
 80101e2:	f7ff f98f 	bl	800f504 <__sinit>
 80101e6:	4b2e      	ldr	r3, [pc, #184]	; (80102a0 <__swsetup_r+0xd0>)
 80101e8:	429c      	cmp	r4, r3
 80101ea:	d10f      	bne.n	801020c <__swsetup_r+0x3c>
 80101ec:	686c      	ldr	r4, [r5, #4]
 80101ee:	89a3      	ldrh	r3, [r4, #12]
 80101f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80101f4:	0719      	lsls	r1, r3, #28
 80101f6:	d42c      	bmi.n	8010252 <__swsetup_r+0x82>
 80101f8:	06dd      	lsls	r5, r3, #27
 80101fa:	d411      	bmi.n	8010220 <__swsetup_r+0x50>
 80101fc:	2309      	movs	r3, #9
 80101fe:	6033      	str	r3, [r6, #0]
 8010200:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010204:	81a3      	strh	r3, [r4, #12]
 8010206:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801020a:	e03e      	b.n	801028a <__swsetup_r+0xba>
 801020c:	4b25      	ldr	r3, [pc, #148]	; (80102a4 <__swsetup_r+0xd4>)
 801020e:	429c      	cmp	r4, r3
 8010210:	d101      	bne.n	8010216 <__swsetup_r+0x46>
 8010212:	68ac      	ldr	r4, [r5, #8]
 8010214:	e7eb      	b.n	80101ee <__swsetup_r+0x1e>
 8010216:	4b24      	ldr	r3, [pc, #144]	; (80102a8 <__swsetup_r+0xd8>)
 8010218:	429c      	cmp	r4, r3
 801021a:	bf08      	it	eq
 801021c:	68ec      	ldreq	r4, [r5, #12]
 801021e:	e7e6      	b.n	80101ee <__swsetup_r+0x1e>
 8010220:	0758      	lsls	r0, r3, #29
 8010222:	d512      	bpl.n	801024a <__swsetup_r+0x7a>
 8010224:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010226:	b141      	cbz	r1, 801023a <__swsetup_r+0x6a>
 8010228:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801022c:	4299      	cmp	r1, r3
 801022e:	d002      	beq.n	8010236 <__swsetup_r+0x66>
 8010230:	4630      	mov	r0, r6
 8010232:	f7ff fa21 	bl	800f678 <_free_r>
 8010236:	2300      	movs	r3, #0
 8010238:	6363      	str	r3, [r4, #52]	; 0x34
 801023a:	89a3      	ldrh	r3, [r4, #12]
 801023c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010240:	81a3      	strh	r3, [r4, #12]
 8010242:	2300      	movs	r3, #0
 8010244:	6063      	str	r3, [r4, #4]
 8010246:	6923      	ldr	r3, [r4, #16]
 8010248:	6023      	str	r3, [r4, #0]
 801024a:	89a3      	ldrh	r3, [r4, #12]
 801024c:	f043 0308 	orr.w	r3, r3, #8
 8010250:	81a3      	strh	r3, [r4, #12]
 8010252:	6923      	ldr	r3, [r4, #16]
 8010254:	b94b      	cbnz	r3, 801026a <__swsetup_r+0x9a>
 8010256:	89a3      	ldrh	r3, [r4, #12]
 8010258:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801025c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010260:	d003      	beq.n	801026a <__swsetup_r+0x9a>
 8010262:	4621      	mov	r1, r4
 8010264:	4630      	mov	r0, r6
 8010266:	f000 f931 	bl	80104cc <__smakebuf_r>
 801026a:	89a0      	ldrh	r0, [r4, #12]
 801026c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010270:	f010 0301 	ands.w	r3, r0, #1
 8010274:	d00a      	beq.n	801028c <__swsetup_r+0xbc>
 8010276:	2300      	movs	r3, #0
 8010278:	60a3      	str	r3, [r4, #8]
 801027a:	6963      	ldr	r3, [r4, #20]
 801027c:	425b      	negs	r3, r3
 801027e:	61a3      	str	r3, [r4, #24]
 8010280:	6923      	ldr	r3, [r4, #16]
 8010282:	b943      	cbnz	r3, 8010296 <__swsetup_r+0xc6>
 8010284:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010288:	d1ba      	bne.n	8010200 <__swsetup_r+0x30>
 801028a:	bd70      	pop	{r4, r5, r6, pc}
 801028c:	0781      	lsls	r1, r0, #30
 801028e:	bf58      	it	pl
 8010290:	6963      	ldrpl	r3, [r4, #20]
 8010292:	60a3      	str	r3, [r4, #8]
 8010294:	e7f4      	b.n	8010280 <__swsetup_r+0xb0>
 8010296:	2000      	movs	r0, #0
 8010298:	e7f7      	b.n	801028a <__swsetup_r+0xba>
 801029a:	bf00      	nop
 801029c:	20000024 	.word	0x20000024
 80102a0:	08014400 	.word	0x08014400
 80102a4:	08014420 	.word	0x08014420
 80102a8:	080143e0 	.word	0x080143e0

080102ac <abort>:
 80102ac:	b508      	push	{r3, lr}
 80102ae:	2006      	movs	r0, #6
 80102b0:	f000 f9b8 	bl	8010624 <raise>
 80102b4:	2001      	movs	r0, #1
 80102b6:	f7f0 fb09 	bl	80008cc <_exit>
	...

080102bc <_close_r>:
 80102bc:	b538      	push	{r3, r4, r5, lr}
 80102be:	4d06      	ldr	r5, [pc, #24]	; (80102d8 <_close_r+0x1c>)
 80102c0:	2300      	movs	r3, #0
 80102c2:	4604      	mov	r4, r0
 80102c4:	4608      	mov	r0, r1
 80102c6:	602b      	str	r3, [r5, #0]
 80102c8:	f7f0 fb43 	bl	8000952 <_close>
 80102cc:	1c43      	adds	r3, r0, #1
 80102ce:	d102      	bne.n	80102d6 <_close_r+0x1a>
 80102d0:	682b      	ldr	r3, [r5, #0]
 80102d2:	b103      	cbz	r3, 80102d6 <_close_r+0x1a>
 80102d4:	6023      	str	r3, [r4, #0]
 80102d6:	bd38      	pop	{r3, r4, r5, pc}
 80102d8:	20008ec8 	.word	0x20008ec8

080102dc <__sflush_r>:
 80102dc:	898a      	ldrh	r2, [r1, #12]
 80102de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102e2:	4605      	mov	r5, r0
 80102e4:	0710      	lsls	r0, r2, #28
 80102e6:	460c      	mov	r4, r1
 80102e8:	d458      	bmi.n	801039c <__sflush_r+0xc0>
 80102ea:	684b      	ldr	r3, [r1, #4]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	dc05      	bgt.n	80102fc <__sflush_r+0x20>
 80102f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	dc02      	bgt.n	80102fc <__sflush_r+0x20>
 80102f6:	2000      	movs	r0, #0
 80102f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80102fe:	2e00      	cmp	r6, #0
 8010300:	d0f9      	beq.n	80102f6 <__sflush_r+0x1a>
 8010302:	2300      	movs	r3, #0
 8010304:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010308:	682f      	ldr	r7, [r5, #0]
 801030a:	602b      	str	r3, [r5, #0]
 801030c:	d032      	beq.n	8010374 <__sflush_r+0x98>
 801030e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010310:	89a3      	ldrh	r3, [r4, #12]
 8010312:	075a      	lsls	r2, r3, #29
 8010314:	d505      	bpl.n	8010322 <__sflush_r+0x46>
 8010316:	6863      	ldr	r3, [r4, #4]
 8010318:	1ac0      	subs	r0, r0, r3
 801031a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801031c:	b10b      	cbz	r3, 8010322 <__sflush_r+0x46>
 801031e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010320:	1ac0      	subs	r0, r0, r3
 8010322:	2300      	movs	r3, #0
 8010324:	4602      	mov	r2, r0
 8010326:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010328:	6a21      	ldr	r1, [r4, #32]
 801032a:	4628      	mov	r0, r5
 801032c:	47b0      	blx	r6
 801032e:	1c43      	adds	r3, r0, #1
 8010330:	89a3      	ldrh	r3, [r4, #12]
 8010332:	d106      	bne.n	8010342 <__sflush_r+0x66>
 8010334:	6829      	ldr	r1, [r5, #0]
 8010336:	291d      	cmp	r1, #29
 8010338:	d82c      	bhi.n	8010394 <__sflush_r+0xb8>
 801033a:	4a2a      	ldr	r2, [pc, #168]	; (80103e4 <__sflush_r+0x108>)
 801033c:	40ca      	lsrs	r2, r1
 801033e:	07d6      	lsls	r6, r2, #31
 8010340:	d528      	bpl.n	8010394 <__sflush_r+0xb8>
 8010342:	2200      	movs	r2, #0
 8010344:	6062      	str	r2, [r4, #4]
 8010346:	04d9      	lsls	r1, r3, #19
 8010348:	6922      	ldr	r2, [r4, #16]
 801034a:	6022      	str	r2, [r4, #0]
 801034c:	d504      	bpl.n	8010358 <__sflush_r+0x7c>
 801034e:	1c42      	adds	r2, r0, #1
 8010350:	d101      	bne.n	8010356 <__sflush_r+0x7a>
 8010352:	682b      	ldr	r3, [r5, #0]
 8010354:	b903      	cbnz	r3, 8010358 <__sflush_r+0x7c>
 8010356:	6560      	str	r0, [r4, #84]	; 0x54
 8010358:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801035a:	602f      	str	r7, [r5, #0]
 801035c:	2900      	cmp	r1, #0
 801035e:	d0ca      	beq.n	80102f6 <__sflush_r+0x1a>
 8010360:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010364:	4299      	cmp	r1, r3
 8010366:	d002      	beq.n	801036e <__sflush_r+0x92>
 8010368:	4628      	mov	r0, r5
 801036a:	f7ff f985 	bl	800f678 <_free_r>
 801036e:	2000      	movs	r0, #0
 8010370:	6360      	str	r0, [r4, #52]	; 0x34
 8010372:	e7c1      	b.n	80102f8 <__sflush_r+0x1c>
 8010374:	6a21      	ldr	r1, [r4, #32]
 8010376:	2301      	movs	r3, #1
 8010378:	4628      	mov	r0, r5
 801037a:	47b0      	blx	r6
 801037c:	1c41      	adds	r1, r0, #1
 801037e:	d1c7      	bne.n	8010310 <__sflush_r+0x34>
 8010380:	682b      	ldr	r3, [r5, #0]
 8010382:	2b00      	cmp	r3, #0
 8010384:	d0c4      	beq.n	8010310 <__sflush_r+0x34>
 8010386:	2b1d      	cmp	r3, #29
 8010388:	d001      	beq.n	801038e <__sflush_r+0xb2>
 801038a:	2b16      	cmp	r3, #22
 801038c:	d101      	bne.n	8010392 <__sflush_r+0xb6>
 801038e:	602f      	str	r7, [r5, #0]
 8010390:	e7b1      	b.n	80102f6 <__sflush_r+0x1a>
 8010392:	89a3      	ldrh	r3, [r4, #12]
 8010394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010398:	81a3      	strh	r3, [r4, #12]
 801039a:	e7ad      	b.n	80102f8 <__sflush_r+0x1c>
 801039c:	690f      	ldr	r7, [r1, #16]
 801039e:	2f00      	cmp	r7, #0
 80103a0:	d0a9      	beq.n	80102f6 <__sflush_r+0x1a>
 80103a2:	0793      	lsls	r3, r2, #30
 80103a4:	680e      	ldr	r6, [r1, #0]
 80103a6:	bf08      	it	eq
 80103a8:	694b      	ldreq	r3, [r1, #20]
 80103aa:	600f      	str	r7, [r1, #0]
 80103ac:	bf18      	it	ne
 80103ae:	2300      	movne	r3, #0
 80103b0:	eba6 0807 	sub.w	r8, r6, r7
 80103b4:	608b      	str	r3, [r1, #8]
 80103b6:	f1b8 0f00 	cmp.w	r8, #0
 80103ba:	dd9c      	ble.n	80102f6 <__sflush_r+0x1a>
 80103bc:	6a21      	ldr	r1, [r4, #32]
 80103be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80103c0:	4643      	mov	r3, r8
 80103c2:	463a      	mov	r2, r7
 80103c4:	4628      	mov	r0, r5
 80103c6:	47b0      	blx	r6
 80103c8:	2800      	cmp	r0, #0
 80103ca:	dc06      	bgt.n	80103da <__sflush_r+0xfe>
 80103cc:	89a3      	ldrh	r3, [r4, #12]
 80103ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80103d2:	81a3      	strh	r3, [r4, #12]
 80103d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80103d8:	e78e      	b.n	80102f8 <__sflush_r+0x1c>
 80103da:	4407      	add	r7, r0
 80103dc:	eba8 0800 	sub.w	r8, r8, r0
 80103e0:	e7e9      	b.n	80103b6 <__sflush_r+0xda>
 80103e2:	bf00      	nop
 80103e4:	20400001 	.word	0x20400001

080103e8 <_fflush_r>:
 80103e8:	b538      	push	{r3, r4, r5, lr}
 80103ea:	690b      	ldr	r3, [r1, #16]
 80103ec:	4605      	mov	r5, r0
 80103ee:	460c      	mov	r4, r1
 80103f0:	b913      	cbnz	r3, 80103f8 <_fflush_r+0x10>
 80103f2:	2500      	movs	r5, #0
 80103f4:	4628      	mov	r0, r5
 80103f6:	bd38      	pop	{r3, r4, r5, pc}
 80103f8:	b118      	cbz	r0, 8010402 <_fflush_r+0x1a>
 80103fa:	6983      	ldr	r3, [r0, #24]
 80103fc:	b90b      	cbnz	r3, 8010402 <_fflush_r+0x1a>
 80103fe:	f7ff f881 	bl	800f504 <__sinit>
 8010402:	4b14      	ldr	r3, [pc, #80]	; (8010454 <_fflush_r+0x6c>)
 8010404:	429c      	cmp	r4, r3
 8010406:	d11b      	bne.n	8010440 <_fflush_r+0x58>
 8010408:	686c      	ldr	r4, [r5, #4]
 801040a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d0ef      	beq.n	80103f2 <_fflush_r+0xa>
 8010412:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010414:	07d0      	lsls	r0, r2, #31
 8010416:	d404      	bmi.n	8010422 <_fflush_r+0x3a>
 8010418:	0599      	lsls	r1, r3, #22
 801041a:	d402      	bmi.n	8010422 <_fflush_r+0x3a>
 801041c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801041e:	f7ff f921 	bl	800f664 <__retarget_lock_acquire_recursive>
 8010422:	4628      	mov	r0, r5
 8010424:	4621      	mov	r1, r4
 8010426:	f7ff ff59 	bl	80102dc <__sflush_r>
 801042a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801042c:	07da      	lsls	r2, r3, #31
 801042e:	4605      	mov	r5, r0
 8010430:	d4e0      	bmi.n	80103f4 <_fflush_r+0xc>
 8010432:	89a3      	ldrh	r3, [r4, #12]
 8010434:	059b      	lsls	r3, r3, #22
 8010436:	d4dd      	bmi.n	80103f4 <_fflush_r+0xc>
 8010438:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801043a:	f7ff f914 	bl	800f666 <__retarget_lock_release_recursive>
 801043e:	e7d9      	b.n	80103f4 <_fflush_r+0xc>
 8010440:	4b05      	ldr	r3, [pc, #20]	; (8010458 <_fflush_r+0x70>)
 8010442:	429c      	cmp	r4, r3
 8010444:	d101      	bne.n	801044a <_fflush_r+0x62>
 8010446:	68ac      	ldr	r4, [r5, #8]
 8010448:	e7df      	b.n	801040a <_fflush_r+0x22>
 801044a:	4b04      	ldr	r3, [pc, #16]	; (801045c <_fflush_r+0x74>)
 801044c:	429c      	cmp	r4, r3
 801044e:	bf08      	it	eq
 8010450:	68ec      	ldreq	r4, [r5, #12]
 8010452:	e7da      	b.n	801040a <_fflush_r+0x22>
 8010454:	08014400 	.word	0x08014400
 8010458:	08014420 	.word	0x08014420
 801045c:	080143e0 	.word	0x080143e0

08010460 <_lseek_r>:
 8010460:	b538      	push	{r3, r4, r5, lr}
 8010462:	4d07      	ldr	r5, [pc, #28]	; (8010480 <_lseek_r+0x20>)
 8010464:	4604      	mov	r4, r0
 8010466:	4608      	mov	r0, r1
 8010468:	4611      	mov	r1, r2
 801046a:	2200      	movs	r2, #0
 801046c:	602a      	str	r2, [r5, #0]
 801046e:	461a      	mov	r2, r3
 8010470:	f7f0 fa96 	bl	80009a0 <_lseek>
 8010474:	1c43      	adds	r3, r0, #1
 8010476:	d102      	bne.n	801047e <_lseek_r+0x1e>
 8010478:	682b      	ldr	r3, [r5, #0]
 801047a:	b103      	cbz	r3, 801047e <_lseek_r+0x1e>
 801047c:	6023      	str	r3, [r4, #0]
 801047e:	bd38      	pop	{r3, r4, r5, pc}
 8010480:	20008ec8 	.word	0x20008ec8

08010484 <__swhatbuf_r>:
 8010484:	b570      	push	{r4, r5, r6, lr}
 8010486:	460e      	mov	r6, r1
 8010488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801048c:	2900      	cmp	r1, #0
 801048e:	b096      	sub	sp, #88	; 0x58
 8010490:	4614      	mov	r4, r2
 8010492:	461d      	mov	r5, r3
 8010494:	da07      	bge.n	80104a6 <__swhatbuf_r+0x22>
 8010496:	2300      	movs	r3, #0
 8010498:	602b      	str	r3, [r5, #0]
 801049a:	89b3      	ldrh	r3, [r6, #12]
 801049c:	061a      	lsls	r2, r3, #24
 801049e:	d410      	bmi.n	80104c2 <__swhatbuf_r+0x3e>
 80104a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80104a4:	e00e      	b.n	80104c4 <__swhatbuf_r+0x40>
 80104a6:	466a      	mov	r2, sp
 80104a8:	f000 f8d8 	bl	801065c <_fstat_r>
 80104ac:	2800      	cmp	r0, #0
 80104ae:	dbf2      	blt.n	8010496 <__swhatbuf_r+0x12>
 80104b0:	9a01      	ldr	r2, [sp, #4]
 80104b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80104b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80104ba:	425a      	negs	r2, r3
 80104bc:	415a      	adcs	r2, r3
 80104be:	602a      	str	r2, [r5, #0]
 80104c0:	e7ee      	b.n	80104a0 <__swhatbuf_r+0x1c>
 80104c2:	2340      	movs	r3, #64	; 0x40
 80104c4:	2000      	movs	r0, #0
 80104c6:	6023      	str	r3, [r4, #0]
 80104c8:	b016      	add	sp, #88	; 0x58
 80104ca:	bd70      	pop	{r4, r5, r6, pc}

080104cc <__smakebuf_r>:
 80104cc:	898b      	ldrh	r3, [r1, #12]
 80104ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80104d0:	079d      	lsls	r5, r3, #30
 80104d2:	4606      	mov	r6, r0
 80104d4:	460c      	mov	r4, r1
 80104d6:	d507      	bpl.n	80104e8 <__smakebuf_r+0x1c>
 80104d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80104dc:	6023      	str	r3, [r4, #0]
 80104de:	6123      	str	r3, [r4, #16]
 80104e0:	2301      	movs	r3, #1
 80104e2:	6163      	str	r3, [r4, #20]
 80104e4:	b002      	add	sp, #8
 80104e6:	bd70      	pop	{r4, r5, r6, pc}
 80104e8:	ab01      	add	r3, sp, #4
 80104ea:	466a      	mov	r2, sp
 80104ec:	f7ff ffca 	bl	8010484 <__swhatbuf_r>
 80104f0:	9900      	ldr	r1, [sp, #0]
 80104f2:	4605      	mov	r5, r0
 80104f4:	4630      	mov	r0, r6
 80104f6:	f7ff f90f 	bl	800f718 <_malloc_r>
 80104fa:	b948      	cbnz	r0, 8010510 <__smakebuf_r+0x44>
 80104fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010500:	059a      	lsls	r2, r3, #22
 8010502:	d4ef      	bmi.n	80104e4 <__smakebuf_r+0x18>
 8010504:	f023 0303 	bic.w	r3, r3, #3
 8010508:	f043 0302 	orr.w	r3, r3, #2
 801050c:	81a3      	strh	r3, [r4, #12]
 801050e:	e7e3      	b.n	80104d8 <__smakebuf_r+0xc>
 8010510:	4b0d      	ldr	r3, [pc, #52]	; (8010548 <__smakebuf_r+0x7c>)
 8010512:	62b3      	str	r3, [r6, #40]	; 0x28
 8010514:	89a3      	ldrh	r3, [r4, #12]
 8010516:	6020      	str	r0, [r4, #0]
 8010518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801051c:	81a3      	strh	r3, [r4, #12]
 801051e:	9b00      	ldr	r3, [sp, #0]
 8010520:	6163      	str	r3, [r4, #20]
 8010522:	9b01      	ldr	r3, [sp, #4]
 8010524:	6120      	str	r0, [r4, #16]
 8010526:	b15b      	cbz	r3, 8010540 <__smakebuf_r+0x74>
 8010528:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801052c:	4630      	mov	r0, r6
 801052e:	f000 f8a7 	bl	8010680 <_isatty_r>
 8010532:	b128      	cbz	r0, 8010540 <__smakebuf_r+0x74>
 8010534:	89a3      	ldrh	r3, [r4, #12]
 8010536:	f023 0303 	bic.w	r3, r3, #3
 801053a:	f043 0301 	orr.w	r3, r3, #1
 801053e:	81a3      	strh	r3, [r4, #12]
 8010540:	89a0      	ldrh	r0, [r4, #12]
 8010542:	4305      	orrs	r5, r0
 8010544:	81a5      	strh	r5, [r4, #12]
 8010546:	e7cd      	b.n	80104e4 <__smakebuf_r+0x18>
 8010548:	0800f49d 	.word	0x0800f49d

0801054c <__malloc_lock>:
 801054c:	4801      	ldr	r0, [pc, #4]	; (8010554 <__malloc_lock+0x8>)
 801054e:	f7ff b889 	b.w	800f664 <__retarget_lock_acquire_recursive>
 8010552:	bf00      	nop
 8010554:	20008ed0 	.word	0x20008ed0

08010558 <__malloc_unlock>:
 8010558:	4801      	ldr	r0, [pc, #4]	; (8010560 <__malloc_unlock+0x8>)
 801055a:	f7ff b884 	b.w	800f666 <__retarget_lock_release_recursive>
 801055e:	bf00      	nop
 8010560:	20008ed0 	.word	0x20008ed0

08010564 <_realloc_r>:
 8010564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010566:	4607      	mov	r7, r0
 8010568:	4614      	mov	r4, r2
 801056a:	460e      	mov	r6, r1
 801056c:	b921      	cbnz	r1, 8010578 <_realloc_r+0x14>
 801056e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010572:	4611      	mov	r1, r2
 8010574:	f7ff b8d0 	b.w	800f718 <_malloc_r>
 8010578:	b922      	cbnz	r2, 8010584 <_realloc_r+0x20>
 801057a:	f7ff f87d 	bl	800f678 <_free_r>
 801057e:	4625      	mov	r5, r4
 8010580:	4628      	mov	r0, r5
 8010582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010584:	f000 f88c 	bl	80106a0 <_malloc_usable_size_r>
 8010588:	42a0      	cmp	r0, r4
 801058a:	d20f      	bcs.n	80105ac <_realloc_r+0x48>
 801058c:	4621      	mov	r1, r4
 801058e:	4638      	mov	r0, r7
 8010590:	f7ff f8c2 	bl	800f718 <_malloc_r>
 8010594:	4605      	mov	r5, r0
 8010596:	2800      	cmp	r0, #0
 8010598:	d0f2      	beq.n	8010580 <_realloc_r+0x1c>
 801059a:	4631      	mov	r1, r6
 801059c:	4622      	mov	r2, r4
 801059e:	f7fe fe73 	bl	800f288 <memcpy>
 80105a2:	4631      	mov	r1, r6
 80105a4:	4638      	mov	r0, r7
 80105a6:	f7ff f867 	bl	800f678 <_free_r>
 80105aa:	e7e9      	b.n	8010580 <_realloc_r+0x1c>
 80105ac:	4635      	mov	r5, r6
 80105ae:	e7e7      	b.n	8010580 <_realloc_r+0x1c>

080105b0 <_read_r>:
 80105b0:	b538      	push	{r3, r4, r5, lr}
 80105b2:	4d07      	ldr	r5, [pc, #28]	; (80105d0 <_read_r+0x20>)
 80105b4:	4604      	mov	r4, r0
 80105b6:	4608      	mov	r0, r1
 80105b8:	4611      	mov	r1, r2
 80105ba:	2200      	movs	r2, #0
 80105bc:	602a      	str	r2, [r5, #0]
 80105be:	461a      	mov	r2, r3
 80105c0:	f7f0 f98e 	bl	80008e0 <_read>
 80105c4:	1c43      	adds	r3, r0, #1
 80105c6:	d102      	bne.n	80105ce <_read_r+0x1e>
 80105c8:	682b      	ldr	r3, [r5, #0]
 80105ca:	b103      	cbz	r3, 80105ce <_read_r+0x1e>
 80105cc:	6023      	str	r3, [r4, #0]
 80105ce:	bd38      	pop	{r3, r4, r5, pc}
 80105d0:	20008ec8 	.word	0x20008ec8

080105d4 <_raise_r>:
 80105d4:	291f      	cmp	r1, #31
 80105d6:	b538      	push	{r3, r4, r5, lr}
 80105d8:	4604      	mov	r4, r0
 80105da:	460d      	mov	r5, r1
 80105dc:	d904      	bls.n	80105e8 <_raise_r+0x14>
 80105de:	2316      	movs	r3, #22
 80105e0:	6003      	str	r3, [r0, #0]
 80105e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80105e6:	bd38      	pop	{r3, r4, r5, pc}
 80105e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80105ea:	b112      	cbz	r2, 80105f2 <_raise_r+0x1e>
 80105ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80105f0:	b94b      	cbnz	r3, 8010606 <_raise_r+0x32>
 80105f2:	4620      	mov	r0, r4
 80105f4:	f000 f830 	bl	8010658 <_getpid_r>
 80105f8:	462a      	mov	r2, r5
 80105fa:	4601      	mov	r1, r0
 80105fc:	4620      	mov	r0, r4
 80105fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010602:	f000 b817 	b.w	8010634 <_kill_r>
 8010606:	2b01      	cmp	r3, #1
 8010608:	d00a      	beq.n	8010620 <_raise_r+0x4c>
 801060a:	1c59      	adds	r1, r3, #1
 801060c:	d103      	bne.n	8010616 <_raise_r+0x42>
 801060e:	2316      	movs	r3, #22
 8010610:	6003      	str	r3, [r0, #0]
 8010612:	2001      	movs	r0, #1
 8010614:	e7e7      	b.n	80105e6 <_raise_r+0x12>
 8010616:	2400      	movs	r4, #0
 8010618:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801061c:	4628      	mov	r0, r5
 801061e:	4798      	blx	r3
 8010620:	2000      	movs	r0, #0
 8010622:	e7e0      	b.n	80105e6 <_raise_r+0x12>

08010624 <raise>:
 8010624:	4b02      	ldr	r3, [pc, #8]	; (8010630 <raise+0xc>)
 8010626:	4601      	mov	r1, r0
 8010628:	6818      	ldr	r0, [r3, #0]
 801062a:	f7ff bfd3 	b.w	80105d4 <_raise_r>
 801062e:	bf00      	nop
 8010630:	20000024 	.word	0x20000024

08010634 <_kill_r>:
 8010634:	b538      	push	{r3, r4, r5, lr}
 8010636:	4d07      	ldr	r5, [pc, #28]	; (8010654 <_kill_r+0x20>)
 8010638:	2300      	movs	r3, #0
 801063a:	4604      	mov	r4, r0
 801063c:	4608      	mov	r0, r1
 801063e:	4611      	mov	r1, r2
 8010640:	602b      	str	r3, [r5, #0]
 8010642:	f7f0 f931 	bl	80008a8 <_kill>
 8010646:	1c43      	adds	r3, r0, #1
 8010648:	d102      	bne.n	8010650 <_kill_r+0x1c>
 801064a:	682b      	ldr	r3, [r5, #0]
 801064c:	b103      	cbz	r3, 8010650 <_kill_r+0x1c>
 801064e:	6023      	str	r3, [r4, #0]
 8010650:	bd38      	pop	{r3, r4, r5, pc}
 8010652:	bf00      	nop
 8010654:	20008ec8 	.word	0x20008ec8

08010658 <_getpid_r>:
 8010658:	f7f0 b91e 	b.w	8000898 <_getpid>

0801065c <_fstat_r>:
 801065c:	b538      	push	{r3, r4, r5, lr}
 801065e:	4d07      	ldr	r5, [pc, #28]	; (801067c <_fstat_r+0x20>)
 8010660:	2300      	movs	r3, #0
 8010662:	4604      	mov	r4, r0
 8010664:	4608      	mov	r0, r1
 8010666:	4611      	mov	r1, r2
 8010668:	602b      	str	r3, [r5, #0]
 801066a:	f7f0 f97e 	bl	800096a <_fstat>
 801066e:	1c43      	adds	r3, r0, #1
 8010670:	d102      	bne.n	8010678 <_fstat_r+0x1c>
 8010672:	682b      	ldr	r3, [r5, #0]
 8010674:	b103      	cbz	r3, 8010678 <_fstat_r+0x1c>
 8010676:	6023      	str	r3, [r4, #0]
 8010678:	bd38      	pop	{r3, r4, r5, pc}
 801067a:	bf00      	nop
 801067c:	20008ec8 	.word	0x20008ec8

08010680 <_isatty_r>:
 8010680:	b538      	push	{r3, r4, r5, lr}
 8010682:	4d06      	ldr	r5, [pc, #24]	; (801069c <_isatty_r+0x1c>)
 8010684:	2300      	movs	r3, #0
 8010686:	4604      	mov	r4, r0
 8010688:	4608      	mov	r0, r1
 801068a:	602b      	str	r3, [r5, #0]
 801068c:	f7f0 f97d 	bl	800098a <_isatty>
 8010690:	1c43      	adds	r3, r0, #1
 8010692:	d102      	bne.n	801069a <_isatty_r+0x1a>
 8010694:	682b      	ldr	r3, [r5, #0]
 8010696:	b103      	cbz	r3, 801069a <_isatty_r+0x1a>
 8010698:	6023      	str	r3, [r4, #0]
 801069a:	bd38      	pop	{r3, r4, r5, pc}
 801069c:	20008ec8 	.word	0x20008ec8

080106a0 <_malloc_usable_size_r>:
 80106a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80106a4:	1f18      	subs	r0, r3, #4
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	bfbc      	itt	lt
 80106aa:	580b      	ldrlt	r3, [r1, r0]
 80106ac:	18c0      	addlt	r0, r0, r3
 80106ae:	4770      	bx	lr

080106b0 <_init>:
 80106b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106b2:	bf00      	nop
 80106b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80106b6:	bc08      	pop	{r3}
 80106b8:	469e      	mov	lr, r3
 80106ba:	4770      	bx	lr

080106bc <_fini>:
 80106bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106be:	bf00      	nop
 80106c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80106c2:	bc08      	pop	{r3}
 80106c4:	469e      	mov	lr, r3
 80106c6:	4770      	bx	lr
